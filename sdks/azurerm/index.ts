// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { Aadb2cDirectoryArgs, Aadb2cDirectoryState } from "./aadb2cDirectory";
export type Aadb2cDirectory = import("./aadb2cDirectory").Aadb2cDirectory;
export const Aadb2cDirectory: typeof import("./aadb2cDirectory").Aadb2cDirectory = null as any;
utilities.lazyLoad(exports, ["Aadb2cDirectory"], () => require("./aadb2cDirectory"));

export { ActiveDirectoryDomainServiceArgs, ActiveDirectoryDomainServiceState } from "./activeDirectoryDomainService";
export type ActiveDirectoryDomainService = import("./activeDirectoryDomainService").ActiveDirectoryDomainService;
export const ActiveDirectoryDomainService: typeof import("./activeDirectoryDomainService").ActiveDirectoryDomainService = null as any;
utilities.lazyLoad(exports, ["ActiveDirectoryDomainService"], () => require("./activeDirectoryDomainService"));

export { ActiveDirectoryDomainServiceReplicaSetArgs, ActiveDirectoryDomainServiceReplicaSetState } from "./activeDirectoryDomainServiceReplicaSet";
export type ActiveDirectoryDomainServiceReplicaSet = import("./activeDirectoryDomainServiceReplicaSet").ActiveDirectoryDomainServiceReplicaSet;
export const ActiveDirectoryDomainServiceReplicaSet: typeof import("./activeDirectoryDomainServiceReplicaSet").ActiveDirectoryDomainServiceReplicaSet = null as any;
utilities.lazyLoad(exports, ["ActiveDirectoryDomainServiceReplicaSet"], () => require("./activeDirectoryDomainServiceReplicaSet"));

export { ActiveDirectoryDomainServiceTrustArgs, ActiveDirectoryDomainServiceTrustState } from "./activeDirectoryDomainServiceTrust";
export type ActiveDirectoryDomainServiceTrust = import("./activeDirectoryDomainServiceTrust").ActiveDirectoryDomainServiceTrust;
export const ActiveDirectoryDomainServiceTrust: typeof import("./activeDirectoryDomainServiceTrust").ActiveDirectoryDomainServiceTrust = null as any;
utilities.lazyLoad(exports, ["ActiveDirectoryDomainServiceTrust"], () => require("./activeDirectoryDomainServiceTrust"));

export { AdvancedThreatProtectionArgs, AdvancedThreatProtectionState } from "./advancedThreatProtection";
export type AdvancedThreatProtection = import("./advancedThreatProtection").AdvancedThreatProtection;
export const AdvancedThreatProtection: typeof import("./advancedThreatProtection").AdvancedThreatProtection = null as any;
utilities.lazyLoad(exports, ["AdvancedThreatProtection"], () => require("./advancedThreatProtection"));

export { AiServicesArgs, AiServicesState } from "./aiServices";
export type AiServices = import("./aiServices").AiServices;
export const AiServices: typeof import("./aiServices").AiServices = null as any;
utilities.lazyLoad(exports, ["AiServices"], () => require("./aiServices"));

export { AnalysisServicesServerArgs, AnalysisServicesServerState } from "./analysisServicesServer";
export type AnalysisServicesServer = import("./analysisServicesServer").AnalysisServicesServer;
export const AnalysisServicesServer: typeof import("./analysisServicesServer").AnalysisServicesServer = null as any;
utilities.lazyLoad(exports, ["AnalysisServicesServer"], () => require("./analysisServicesServer"));

export { ApiConnectionArgs, ApiConnectionState } from "./apiConnection";
export type ApiConnection = import("./apiConnection").ApiConnection;
export const ApiConnection: typeof import("./apiConnection").ApiConnection = null as any;
utilities.lazyLoad(exports, ["ApiConnection"], () => require("./apiConnection"));

export { ApiManagementArgs, ApiManagementState } from "./apiManagement";
export type ApiManagement = import("./apiManagement").ApiManagement;
export const ApiManagement: typeof import("./apiManagement").ApiManagement = null as any;
utilities.lazyLoad(exports, ["ApiManagement"], () => require("./apiManagement"));

export { ApiManagementApiArgs, ApiManagementApiState } from "./apiManagementApi";
export type ApiManagementApi = import("./apiManagementApi").ApiManagementApi;
export const ApiManagementApi: typeof import("./apiManagementApi").ApiManagementApi = null as any;
utilities.lazyLoad(exports, ["ApiManagementApi"], () => require("./apiManagementApi"));

export { ApiManagementApiDiagnosticArgs, ApiManagementApiDiagnosticState } from "./apiManagementApiDiagnostic";
export type ApiManagementApiDiagnostic = import("./apiManagementApiDiagnostic").ApiManagementApiDiagnostic;
export const ApiManagementApiDiagnostic: typeof import("./apiManagementApiDiagnostic").ApiManagementApiDiagnostic = null as any;
utilities.lazyLoad(exports, ["ApiManagementApiDiagnostic"], () => require("./apiManagementApiDiagnostic"));

export { ApiManagementApiOperationArgs, ApiManagementApiOperationState } from "./apiManagementApiOperation";
export type ApiManagementApiOperation = import("./apiManagementApiOperation").ApiManagementApiOperation;
export const ApiManagementApiOperation: typeof import("./apiManagementApiOperation").ApiManagementApiOperation = null as any;
utilities.lazyLoad(exports, ["ApiManagementApiOperation"], () => require("./apiManagementApiOperation"));

export { ApiManagementApiOperationPolicyArgs, ApiManagementApiOperationPolicyState } from "./apiManagementApiOperationPolicy";
export type ApiManagementApiOperationPolicy = import("./apiManagementApiOperationPolicy").ApiManagementApiOperationPolicy;
export const ApiManagementApiOperationPolicy: typeof import("./apiManagementApiOperationPolicy").ApiManagementApiOperationPolicy = null as any;
utilities.lazyLoad(exports, ["ApiManagementApiOperationPolicy"], () => require("./apiManagementApiOperationPolicy"));

export { ApiManagementApiOperationTagArgs, ApiManagementApiOperationTagState } from "./apiManagementApiOperationTag";
export type ApiManagementApiOperationTag = import("./apiManagementApiOperationTag").ApiManagementApiOperationTag;
export const ApiManagementApiOperationTag: typeof import("./apiManagementApiOperationTag").ApiManagementApiOperationTag = null as any;
utilities.lazyLoad(exports, ["ApiManagementApiOperationTag"], () => require("./apiManagementApiOperationTag"));

export { ApiManagementApiPolicyArgs, ApiManagementApiPolicyState } from "./apiManagementApiPolicy";
export type ApiManagementApiPolicy = import("./apiManagementApiPolicy").ApiManagementApiPolicy;
export const ApiManagementApiPolicy: typeof import("./apiManagementApiPolicy").ApiManagementApiPolicy = null as any;
utilities.lazyLoad(exports, ["ApiManagementApiPolicy"], () => require("./apiManagementApiPolicy"));

export { ApiManagementApiReleaseArgs, ApiManagementApiReleaseState } from "./apiManagementApiRelease";
export type ApiManagementApiRelease = import("./apiManagementApiRelease").ApiManagementApiRelease;
export const ApiManagementApiRelease: typeof import("./apiManagementApiRelease").ApiManagementApiRelease = null as any;
utilities.lazyLoad(exports, ["ApiManagementApiRelease"], () => require("./apiManagementApiRelease"));

export { ApiManagementApiSchemaArgs, ApiManagementApiSchemaState } from "./apiManagementApiSchema";
export type ApiManagementApiSchema = import("./apiManagementApiSchema").ApiManagementApiSchema;
export const ApiManagementApiSchema: typeof import("./apiManagementApiSchema").ApiManagementApiSchema = null as any;
utilities.lazyLoad(exports, ["ApiManagementApiSchema"], () => require("./apiManagementApiSchema"));

export { ApiManagementApiTagArgs, ApiManagementApiTagState } from "./apiManagementApiTag";
export type ApiManagementApiTag = import("./apiManagementApiTag").ApiManagementApiTag;
export const ApiManagementApiTag: typeof import("./apiManagementApiTag").ApiManagementApiTag = null as any;
utilities.lazyLoad(exports, ["ApiManagementApiTag"], () => require("./apiManagementApiTag"));

export { ApiManagementApiTagDescriptionArgs, ApiManagementApiTagDescriptionState } from "./apiManagementApiTagDescription";
export type ApiManagementApiTagDescription = import("./apiManagementApiTagDescription").ApiManagementApiTagDescription;
export const ApiManagementApiTagDescription: typeof import("./apiManagementApiTagDescription").ApiManagementApiTagDescription = null as any;
utilities.lazyLoad(exports, ["ApiManagementApiTagDescription"], () => require("./apiManagementApiTagDescription"));

export { ApiManagementApiVersionSetArgs, ApiManagementApiVersionSetState } from "./apiManagementApiVersionSet";
export type ApiManagementApiVersionSet = import("./apiManagementApiVersionSet").ApiManagementApiVersionSet;
export const ApiManagementApiVersionSet: typeof import("./apiManagementApiVersionSet").ApiManagementApiVersionSet = null as any;
utilities.lazyLoad(exports, ["ApiManagementApiVersionSet"], () => require("./apiManagementApiVersionSet"));

export { ApiManagementAuthorizationServerArgs, ApiManagementAuthorizationServerState } from "./apiManagementAuthorizationServer";
export type ApiManagementAuthorizationServer = import("./apiManagementAuthorizationServer").ApiManagementAuthorizationServer;
export const ApiManagementAuthorizationServer: typeof import("./apiManagementAuthorizationServer").ApiManagementAuthorizationServer = null as any;
utilities.lazyLoad(exports, ["ApiManagementAuthorizationServer"], () => require("./apiManagementAuthorizationServer"));

export { ApiManagementBackendArgs, ApiManagementBackendState } from "./apiManagementBackend";
export type ApiManagementBackend = import("./apiManagementBackend").ApiManagementBackend;
export const ApiManagementBackend: typeof import("./apiManagementBackend").ApiManagementBackend = null as any;
utilities.lazyLoad(exports, ["ApiManagementBackend"], () => require("./apiManagementBackend"));

export { ApiManagementCertificateArgs, ApiManagementCertificateState } from "./apiManagementCertificate";
export type ApiManagementCertificate = import("./apiManagementCertificate").ApiManagementCertificate;
export const ApiManagementCertificate: typeof import("./apiManagementCertificate").ApiManagementCertificate = null as any;
utilities.lazyLoad(exports, ["ApiManagementCertificate"], () => require("./apiManagementCertificate"));

export { ApiManagementCustomDomainArgs, ApiManagementCustomDomainState } from "./apiManagementCustomDomain";
export type ApiManagementCustomDomain = import("./apiManagementCustomDomain").ApiManagementCustomDomain;
export const ApiManagementCustomDomain: typeof import("./apiManagementCustomDomain").ApiManagementCustomDomain = null as any;
utilities.lazyLoad(exports, ["ApiManagementCustomDomain"], () => require("./apiManagementCustomDomain"));

export { ApiManagementDiagnosticArgs, ApiManagementDiagnosticState } from "./apiManagementDiagnostic";
export type ApiManagementDiagnostic = import("./apiManagementDiagnostic").ApiManagementDiagnostic;
export const ApiManagementDiagnostic: typeof import("./apiManagementDiagnostic").ApiManagementDiagnostic = null as any;
utilities.lazyLoad(exports, ["ApiManagementDiagnostic"], () => require("./apiManagementDiagnostic"));

export { ApiManagementEmailTemplateArgs, ApiManagementEmailTemplateState } from "./apiManagementEmailTemplate";
export type ApiManagementEmailTemplate = import("./apiManagementEmailTemplate").ApiManagementEmailTemplate;
export const ApiManagementEmailTemplate: typeof import("./apiManagementEmailTemplate").ApiManagementEmailTemplate = null as any;
utilities.lazyLoad(exports, ["ApiManagementEmailTemplate"], () => require("./apiManagementEmailTemplate"));

export { ApiManagementGatewayArgs, ApiManagementGatewayState } from "./apiManagementGateway";
export type ApiManagementGateway = import("./apiManagementGateway").ApiManagementGateway;
export const ApiManagementGateway: typeof import("./apiManagementGateway").ApiManagementGateway = null as any;
utilities.lazyLoad(exports, ["ApiManagementGateway"], () => require("./apiManagementGateway"));

export { ApiManagementGatewayApiArgs, ApiManagementGatewayApiState } from "./apiManagementGatewayApi";
export type ApiManagementGatewayApi = import("./apiManagementGatewayApi").ApiManagementGatewayApi;
export const ApiManagementGatewayApi: typeof import("./apiManagementGatewayApi").ApiManagementGatewayApi = null as any;
utilities.lazyLoad(exports, ["ApiManagementGatewayApi"], () => require("./apiManagementGatewayApi"));

export { ApiManagementGatewayCertificateAuthorityArgs, ApiManagementGatewayCertificateAuthorityState } from "./apiManagementGatewayCertificateAuthority";
export type ApiManagementGatewayCertificateAuthority = import("./apiManagementGatewayCertificateAuthority").ApiManagementGatewayCertificateAuthority;
export const ApiManagementGatewayCertificateAuthority: typeof import("./apiManagementGatewayCertificateAuthority").ApiManagementGatewayCertificateAuthority = null as any;
utilities.lazyLoad(exports, ["ApiManagementGatewayCertificateAuthority"], () => require("./apiManagementGatewayCertificateAuthority"));

export { ApiManagementGatewayHostNameConfigurationArgs, ApiManagementGatewayHostNameConfigurationState } from "./apiManagementGatewayHostNameConfiguration";
export type ApiManagementGatewayHostNameConfiguration = import("./apiManagementGatewayHostNameConfiguration").ApiManagementGatewayHostNameConfiguration;
export const ApiManagementGatewayHostNameConfiguration: typeof import("./apiManagementGatewayHostNameConfiguration").ApiManagementGatewayHostNameConfiguration = null as any;
utilities.lazyLoad(exports, ["ApiManagementGatewayHostNameConfiguration"], () => require("./apiManagementGatewayHostNameConfiguration"));

export { ApiManagementGlobalSchemaArgs, ApiManagementGlobalSchemaState } from "./apiManagementGlobalSchema";
export type ApiManagementGlobalSchema = import("./apiManagementGlobalSchema").ApiManagementGlobalSchema;
export const ApiManagementGlobalSchema: typeof import("./apiManagementGlobalSchema").ApiManagementGlobalSchema = null as any;
utilities.lazyLoad(exports, ["ApiManagementGlobalSchema"], () => require("./apiManagementGlobalSchema"));

export { ApiManagementGroupArgs, ApiManagementGroupState } from "./apiManagementGroup";
export type ApiManagementGroup = import("./apiManagementGroup").ApiManagementGroup;
export const ApiManagementGroup: typeof import("./apiManagementGroup").ApiManagementGroup = null as any;
utilities.lazyLoad(exports, ["ApiManagementGroup"], () => require("./apiManagementGroup"));

export { ApiManagementGroupUserArgs, ApiManagementGroupUserState } from "./apiManagementGroupUser";
export type ApiManagementGroupUser = import("./apiManagementGroupUser").ApiManagementGroupUser;
export const ApiManagementGroupUser: typeof import("./apiManagementGroupUser").ApiManagementGroupUser = null as any;
utilities.lazyLoad(exports, ["ApiManagementGroupUser"], () => require("./apiManagementGroupUser"));

export { ApiManagementIdentityProviderAadArgs, ApiManagementIdentityProviderAadState } from "./apiManagementIdentityProviderAad";
export type ApiManagementIdentityProviderAad = import("./apiManagementIdentityProviderAad").ApiManagementIdentityProviderAad;
export const ApiManagementIdentityProviderAad: typeof import("./apiManagementIdentityProviderAad").ApiManagementIdentityProviderAad = null as any;
utilities.lazyLoad(exports, ["ApiManagementIdentityProviderAad"], () => require("./apiManagementIdentityProviderAad"));

export { ApiManagementIdentityProviderAadb2cArgs, ApiManagementIdentityProviderAadb2cState } from "./apiManagementIdentityProviderAadb2c";
export type ApiManagementIdentityProviderAadb2c = import("./apiManagementIdentityProviderAadb2c").ApiManagementIdentityProviderAadb2c;
export const ApiManagementIdentityProviderAadb2c: typeof import("./apiManagementIdentityProviderAadb2c").ApiManagementIdentityProviderAadb2c = null as any;
utilities.lazyLoad(exports, ["ApiManagementIdentityProviderAadb2c"], () => require("./apiManagementIdentityProviderAadb2c"));

export { ApiManagementIdentityProviderFacebookArgs, ApiManagementIdentityProviderFacebookState } from "./apiManagementIdentityProviderFacebook";
export type ApiManagementIdentityProviderFacebook = import("./apiManagementIdentityProviderFacebook").ApiManagementIdentityProviderFacebook;
export const ApiManagementIdentityProviderFacebook: typeof import("./apiManagementIdentityProviderFacebook").ApiManagementIdentityProviderFacebook = null as any;
utilities.lazyLoad(exports, ["ApiManagementIdentityProviderFacebook"], () => require("./apiManagementIdentityProviderFacebook"));

export { ApiManagementIdentityProviderGoogleArgs, ApiManagementIdentityProviderGoogleState } from "./apiManagementIdentityProviderGoogle";
export type ApiManagementIdentityProviderGoogle = import("./apiManagementIdentityProviderGoogle").ApiManagementIdentityProviderGoogle;
export const ApiManagementIdentityProviderGoogle: typeof import("./apiManagementIdentityProviderGoogle").ApiManagementIdentityProviderGoogle = null as any;
utilities.lazyLoad(exports, ["ApiManagementIdentityProviderGoogle"], () => require("./apiManagementIdentityProviderGoogle"));

export { ApiManagementIdentityProviderMicrosoftArgs, ApiManagementIdentityProviderMicrosoftState } from "./apiManagementIdentityProviderMicrosoft";
export type ApiManagementIdentityProviderMicrosoft = import("./apiManagementIdentityProviderMicrosoft").ApiManagementIdentityProviderMicrosoft;
export const ApiManagementIdentityProviderMicrosoft: typeof import("./apiManagementIdentityProviderMicrosoft").ApiManagementIdentityProviderMicrosoft = null as any;
utilities.lazyLoad(exports, ["ApiManagementIdentityProviderMicrosoft"], () => require("./apiManagementIdentityProviderMicrosoft"));

export { ApiManagementIdentityProviderTwitterArgs, ApiManagementIdentityProviderTwitterState } from "./apiManagementIdentityProviderTwitter";
export type ApiManagementIdentityProviderTwitter = import("./apiManagementIdentityProviderTwitter").ApiManagementIdentityProviderTwitter;
export const ApiManagementIdentityProviderTwitter: typeof import("./apiManagementIdentityProviderTwitter").ApiManagementIdentityProviderTwitter = null as any;
utilities.lazyLoad(exports, ["ApiManagementIdentityProviderTwitter"], () => require("./apiManagementIdentityProviderTwitter"));

export { ApiManagementLoggerArgs, ApiManagementLoggerState } from "./apiManagementLogger";
export type ApiManagementLogger = import("./apiManagementLogger").ApiManagementLogger;
export const ApiManagementLogger: typeof import("./apiManagementLogger").ApiManagementLogger = null as any;
utilities.lazyLoad(exports, ["ApiManagementLogger"], () => require("./apiManagementLogger"));

export { ApiManagementNamedValueArgs, ApiManagementNamedValueState } from "./apiManagementNamedValue";
export type ApiManagementNamedValue = import("./apiManagementNamedValue").ApiManagementNamedValue;
export const ApiManagementNamedValue: typeof import("./apiManagementNamedValue").ApiManagementNamedValue = null as any;
utilities.lazyLoad(exports, ["ApiManagementNamedValue"], () => require("./apiManagementNamedValue"));

export { ApiManagementNotificationRecipientEmailArgs, ApiManagementNotificationRecipientEmailState } from "./apiManagementNotificationRecipientEmail";
export type ApiManagementNotificationRecipientEmail = import("./apiManagementNotificationRecipientEmail").ApiManagementNotificationRecipientEmail;
export const ApiManagementNotificationRecipientEmail: typeof import("./apiManagementNotificationRecipientEmail").ApiManagementNotificationRecipientEmail = null as any;
utilities.lazyLoad(exports, ["ApiManagementNotificationRecipientEmail"], () => require("./apiManagementNotificationRecipientEmail"));

export { ApiManagementNotificationRecipientUserArgs, ApiManagementNotificationRecipientUserState } from "./apiManagementNotificationRecipientUser";
export type ApiManagementNotificationRecipientUser = import("./apiManagementNotificationRecipientUser").ApiManagementNotificationRecipientUser;
export const ApiManagementNotificationRecipientUser: typeof import("./apiManagementNotificationRecipientUser").ApiManagementNotificationRecipientUser = null as any;
utilities.lazyLoad(exports, ["ApiManagementNotificationRecipientUser"], () => require("./apiManagementNotificationRecipientUser"));

export { ApiManagementOpenidConnectProviderArgs, ApiManagementOpenidConnectProviderState } from "./apiManagementOpenidConnectProvider";
export type ApiManagementOpenidConnectProvider = import("./apiManagementOpenidConnectProvider").ApiManagementOpenidConnectProvider;
export const ApiManagementOpenidConnectProvider: typeof import("./apiManagementOpenidConnectProvider").ApiManagementOpenidConnectProvider = null as any;
utilities.lazyLoad(exports, ["ApiManagementOpenidConnectProvider"], () => require("./apiManagementOpenidConnectProvider"));

export { ApiManagementPolicyArgs, ApiManagementPolicyState } from "./apiManagementPolicy";
export type ApiManagementPolicy = import("./apiManagementPolicy").ApiManagementPolicy;
export const ApiManagementPolicy: typeof import("./apiManagementPolicy").ApiManagementPolicy = null as any;
utilities.lazyLoad(exports, ["ApiManagementPolicy"], () => require("./apiManagementPolicy"));

export { ApiManagementPolicyFragmentArgs, ApiManagementPolicyFragmentState } from "./apiManagementPolicyFragment";
export type ApiManagementPolicyFragment = import("./apiManagementPolicyFragment").ApiManagementPolicyFragment;
export const ApiManagementPolicyFragment: typeof import("./apiManagementPolicyFragment").ApiManagementPolicyFragment = null as any;
utilities.lazyLoad(exports, ["ApiManagementPolicyFragment"], () => require("./apiManagementPolicyFragment"));

export { ApiManagementProductArgs, ApiManagementProductState } from "./apiManagementProduct";
export type ApiManagementProduct = import("./apiManagementProduct").ApiManagementProduct;
export const ApiManagementProduct: typeof import("./apiManagementProduct").ApiManagementProduct = null as any;
utilities.lazyLoad(exports, ["ApiManagementProduct"], () => require("./apiManagementProduct"));

export { ApiManagementProductApiArgs, ApiManagementProductApiState } from "./apiManagementProductApi";
export type ApiManagementProductApi = import("./apiManagementProductApi").ApiManagementProductApi;
export const ApiManagementProductApi: typeof import("./apiManagementProductApi").ApiManagementProductApi = null as any;
utilities.lazyLoad(exports, ["ApiManagementProductApi"], () => require("./apiManagementProductApi"));

export { ApiManagementProductGroupArgs, ApiManagementProductGroupState } from "./apiManagementProductGroup";
export type ApiManagementProductGroup = import("./apiManagementProductGroup").ApiManagementProductGroup;
export const ApiManagementProductGroup: typeof import("./apiManagementProductGroup").ApiManagementProductGroup = null as any;
utilities.lazyLoad(exports, ["ApiManagementProductGroup"], () => require("./apiManagementProductGroup"));

export { ApiManagementProductPolicyArgs, ApiManagementProductPolicyState } from "./apiManagementProductPolicy";
export type ApiManagementProductPolicy = import("./apiManagementProductPolicy").ApiManagementProductPolicy;
export const ApiManagementProductPolicy: typeof import("./apiManagementProductPolicy").ApiManagementProductPolicy = null as any;
utilities.lazyLoad(exports, ["ApiManagementProductPolicy"], () => require("./apiManagementProductPolicy"));

export { ApiManagementProductTagArgs, ApiManagementProductTagState } from "./apiManagementProductTag";
export type ApiManagementProductTag = import("./apiManagementProductTag").ApiManagementProductTag;
export const ApiManagementProductTag: typeof import("./apiManagementProductTag").ApiManagementProductTag = null as any;
utilities.lazyLoad(exports, ["ApiManagementProductTag"], () => require("./apiManagementProductTag"));

export { ApiManagementRedisCacheArgs, ApiManagementRedisCacheState } from "./apiManagementRedisCache";
export type ApiManagementRedisCache = import("./apiManagementRedisCache").ApiManagementRedisCache;
export const ApiManagementRedisCache: typeof import("./apiManagementRedisCache").ApiManagementRedisCache = null as any;
utilities.lazyLoad(exports, ["ApiManagementRedisCache"], () => require("./apiManagementRedisCache"));

export { ApiManagementSubscriptionArgs, ApiManagementSubscriptionState } from "./apiManagementSubscription";
export type ApiManagementSubscription = import("./apiManagementSubscription").ApiManagementSubscription;
export const ApiManagementSubscription: typeof import("./apiManagementSubscription").ApiManagementSubscription = null as any;
utilities.lazyLoad(exports, ["ApiManagementSubscription"], () => require("./apiManagementSubscription"));

export { ApiManagementTagArgs, ApiManagementTagState } from "./apiManagementTag";
export type ApiManagementTag = import("./apiManagementTag").ApiManagementTag;
export const ApiManagementTag: typeof import("./apiManagementTag").ApiManagementTag = null as any;
utilities.lazyLoad(exports, ["ApiManagementTag"], () => require("./apiManagementTag"));

export { ApiManagementUserArgs, ApiManagementUserState } from "./apiManagementUser";
export type ApiManagementUser = import("./apiManagementUser").ApiManagementUser;
export const ApiManagementUser: typeof import("./apiManagementUser").ApiManagementUser = null as any;
utilities.lazyLoad(exports, ["ApiManagementUser"], () => require("./apiManagementUser"));

export { AppConfigurationArgs, AppConfigurationState } from "./appConfiguration";
export type AppConfiguration = import("./appConfiguration").AppConfiguration;
export const AppConfiguration: typeof import("./appConfiguration").AppConfiguration = null as any;
utilities.lazyLoad(exports, ["AppConfiguration"], () => require("./appConfiguration"));

export { AppConfigurationFeatureArgs, AppConfigurationFeatureState } from "./appConfigurationFeature";
export type AppConfigurationFeature = import("./appConfigurationFeature").AppConfigurationFeature;
export const AppConfigurationFeature: typeof import("./appConfigurationFeature").AppConfigurationFeature = null as any;
utilities.lazyLoad(exports, ["AppConfigurationFeature"], () => require("./appConfigurationFeature"));

export { AppConfigurationKeyArgs, AppConfigurationKeyState } from "./appConfigurationKey";
export type AppConfigurationKey = import("./appConfigurationKey").AppConfigurationKey;
export const AppConfigurationKey: typeof import("./appConfigurationKey").AppConfigurationKey = null as any;
utilities.lazyLoad(exports, ["AppConfigurationKey"], () => require("./appConfigurationKey"));

export { AppServiceArgs, AppServiceState } from "./appService";
export type AppService = import("./appService").AppService;
export const AppService: typeof import("./appService").AppService = null as any;
utilities.lazyLoad(exports, ["AppService"], () => require("./appService"));

export { AppServiceActiveSlotArgs, AppServiceActiveSlotState } from "./appServiceActiveSlot";
export type AppServiceActiveSlot = import("./appServiceActiveSlot").AppServiceActiveSlot;
export const AppServiceActiveSlot: typeof import("./appServiceActiveSlot").AppServiceActiveSlot = null as any;
utilities.lazyLoad(exports, ["AppServiceActiveSlot"], () => require("./appServiceActiveSlot"));

export { AppServiceCertificateArgs, AppServiceCertificateState } from "./appServiceCertificate";
export type AppServiceCertificate = import("./appServiceCertificate").AppServiceCertificate;
export const AppServiceCertificate: typeof import("./appServiceCertificate").AppServiceCertificate = null as any;
utilities.lazyLoad(exports, ["AppServiceCertificate"], () => require("./appServiceCertificate"));

export { AppServiceCertificateBindingArgs, AppServiceCertificateBindingState } from "./appServiceCertificateBinding";
export type AppServiceCertificateBinding = import("./appServiceCertificateBinding").AppServiceCertificateBinding;
export const AppServiceCertificateBinding: typeof import("./appServiceCertificateBinding").AppServiceCertificateBinding = null as any;
utilities.lazyLoad(exports, ["AppServiceCertificateBinding"], () => require("./appServiceCertificateBinding"));

export { AppServiceCertificateOrderArgs, AppServiceCertificateOrderState } from "./appServiceCertificateOrder";
export type AppServiceCertificateOrder = import("./appServiceCertificateOrder").AppServiceCertificateOrder;
export const AppServiceCertificateOrder: typeof import("./appServiceCertificateOrder").AppServiceCertificateOrder = null as any;
utilities.lazyLoad(exports, ["AppServiceCertificateOrder"], () => require("./appServiceCertificateOrder"));

export { AppServiceConnectionArgs, AppServiceConnectionState } from "./appServiceConnection";
export type AppServiceConnection = import("./appServiceConnection").AppServiceConnection;
export const AppServiceConnection: typeof import("./appServiceConnection").AppServiceConnection = null as any;
utilities.lazyLoad(exports, ["AppServiceConnection"], () => require("./appServiceConnection"));

export { AppServiceCustomHostnameBindingArgs, AppServiceCustomHostnameBindingState } from "./appServiceCustomHostnameBinding";
export type AppServiceCustomHostnameBinding = import("./appServiceCustomHostnameBinding").AppServiceCustomHostnameBinding;
export const AppServiceCustomHostnameBinding: typeof import("./appServiceCustomHostnameBinding").AppServiceCustomHostnameBinding = null as any;
utilities.lazyLoad(exports, ["AppServiceCustomHostnameBinding"], () => require("./appServiceCustomHostnameBinding"));

export { AppServiceEnvironmentV3Args, AppServiceEnvironmentV3State } from "./appServiceEnvironmentV3";
export type AppServiceEnvironmentV3 = import("./appServiceEnvironmentV3").AppServiceEnvironmentV3;
export const AppServiceEnvironmentV3: typeof import("./appServiceEnvironmentV3").AppServiceEnvironmentV3 = null as any;
utilities.lazyLoad(exports, ["AppServiceEnvironmentV3"], () => require("./appServiceEnvironmentV3"));

export { AppServiceHybridConnectionArgs, AppServiceHybridConnectionState } from "./appServiceHybridConnection";
export type AppServiceHybridConnection = import("./appServiceHybridConnection").AppServiceHybridConnection;
export const AppServiceHybridConnection: typeof import("./appServiceHybridConnection").AppServiceHybridConnection = null as any;
utilities.lazyLoad(exports, ["AppServiceHybridConnection"], () => require("./appServiceHybridConnection"));

export { AppServiceManagedCertificateArgs, AppServiceManagedCertificateState } from "./appServiceManagedCertificate";
export type AppServiceManagedCertificate = import("./appServiceManagedCertificate").AppServiceManagedCertificate;
export const AppServiceManagedCertificate: typeof import("./appServiceManagedCertificate").AppServiceManagedCertificate = null as any;
utilities.lazyLoad(exports, ["AppServiceManagedCertificate"], () => require("./appServiceManagedCertificate"));

export { AppServicePlanArgs, AppServicePlanState } from "./appServicePlan";
export type AppServicePlan = import("./appServicePlan").AppServicePlan;
export const AppServicePlan: typeof import("./appServicePlan").AppServicePlan = null as any;
utilities.lazyLoad(exports, ["AppServicePlan"], () => require("./appServicePlan"));

export { AppServicePublicCertificateArgs, AppServicePublicCertificateState } from "./appServicePublicCertificate";
export type AppServicePublicCertificate = import("./appServicePublicCertificate").AppServicePublicCertificate;
export const AppServicePublicCertificate: typeof import("./appServicePublicCertificate").AppServicePublicCertificate = null as any;
utilities.lazyLoad(exports, ["AppServicePublicCertificate"], () => require("./appServicePublicCertificate"));

export { AppServiceSlotArgs, AppServiceSlotState } from "./appServiceSlot";
export type AppServiceSlot = import("./appServiceSlot").AppServiceSlot;
export const AppServiceSlot: typeof import("./appServiceSlot").AppServiceSlot = null as any;
utilities.lazyLoad(exports, ["AppServiceSlot"], () => require("./appServiceSlot"));

export { AppServiceSlotCustomHostnameBindingArgs, AppServiceSlotCustomHostnameBindingState } from "./appServiceSlotCustomHostnameBinding";
export type AppServiceSlotCustomHostnameBinding = import("./appServiceSlotCustomHostnameBinding").AppServiceSlotCustomHostnameBinding;
export const AppServiceSlotCustomHostnameBinding: typeof import("./appServiceSlotCustomHostnameBinding").AppServiceSlotCustomHostnameBinding = null as any;
utilities.lazyLoad(exports, ["AppServiceSlotCustomHostnameBinding"], () => require("./appServiceSlotCustomHostnameBinding"));

export { AppServiceSlotVirtualNetworkSwiftConnectionArgs, AppServiceSlotVirtualNetworkSwiftConnectionState } from "./appServiceSlotVirtualNetworkSwiftConnection";
export type AppServiceSlotVirtualNetworkSwiftConnection = import("./appServiceSlotVirtualNetworkSwiftConnection").AppServiceSlotVirtualNetworkSwiftConnection;
export const AppServiceSlotVirtualNetworkSwiftConnection: typeof import("./appServiceSlotVirtualNetworkSwiftConnection").AppServiceSlotVirtualNetworkSwiftConnection = null as any;
utilities.lazyLoad(exports, ["AppServiceSlotVirtualNetworkSwiftConnection"], () => require("./appServiceSlotVirtualNetworkSwiftConnection"));

export { AppServiceSourceControlArgs, AppServiceSourceControlState } from "./appServiceSourceControl";
export type AppServiceSourceControl = import("./appServiceSourceControl").AppServiceSourceControl;
export const AppServiceSourceControl: typeof import("./appServiceSourceControl").AppServiceSourceControl = null as any;
utilities.lazyLoad(exports, ["AppServiceSourceControl"], () => require("./appServiceSourceControl"));

export { AppServiceSourceControlSlotArgs, AppServiceSourceControlSlotState } from "./appServiceSourceControlSlot";
export type AppServiceSourceControlSlot = import("./appServiceSourceControlSlot").AppServiceSourceControlSlot;
export const AppServiceSourceControlSlot: typeof import("./appServiceSourceControlSlot").AppServiceSourceControlSlot = null as any;
utilities.lazyLoad(exports, ["AppServiceSourceControlSlot"], () => require("./appServiceSourceControlSlot"));

export { AppServiceSourceControlTokenArgs, AppServiceSourceControlTokenState } from "./appServiceSourceControlToken";
export type AppServiceSourceControlToken = import("./appServiceSourceControlToken").AppServiceSourceControlToken;
export const AppServiceSourceControlToken: typeof import("./appServiceSourceControlToken").AppServiceSourceControlToken = null as any;
utilities.lazyLoad(exports, ["AppServiceSourceControlToken"], () => require("./appServiceSourceControlToken"));

export { AppServiceVirtualNetworkSwiftConnectionArgs, AppServiceVirtualNetworkSwiftConnectionState } from "./appServiceVirtualNetworkSwiftConnection";
export type AppServiceVirtualNetworkSwiftConnection = import("./appServiceVirtualNetworkSwiftConnection").AppServiceVirtualNetworkSwiftConnection;
export const AppServiceVirtualNetworkSwiftConnection: typeof import("./appServiceVirtualNetworkSwiftConnection").AppServiceVirtualNetworkSwiftConnection = null as any;
utilities.lazyLoad(exports, ["AppServiceVirtualNetworkSwiftConnection"], () => require("./appServiceVirtualNetworkSwiftConnection"));

export { ApplicationGatewayArgs, ApplicationGatewayState } from "./applicationGateway";
export type ApplicationGateway = import("./applicationGateway").ApplicationGateway;
export const ApplicationGateway: typeof import("./applicationGateway").ApplicationGateway = null as any;
utilities.lazyLoad(exports, ["ApplicationGateway"], () => require("./applicationGateway"));

export { ApplicationInsightsArgs, ApplicationInsightsState } from "./applicationInsights";
export type ApplicationInsights = import("./applicationInsights").ApplicationInsights;
export const ApplicationInsights: typeof import("./applicationInsights").ApplicationInsights = null as any;
utilities.lazyLoad(exports, ["ApplicationInsights"], () => require("./applicationInsights"));

export { ApplicationInsightsAnalyticsItemArgs, ApplicationInsightsAnalyticsItemState } from "./applicationInsightsAnalyticsItem";
export type ApplicationInsightsAnalyticsItem = import("./applicationInsightsAnalyticsItem").ApplicationInsightsAnalyticsItem;
export const ApplicationInsightsAnalyticsItem: typeof import("./applicationInsightsAnalyticsItem").ApplicationInsightsAnalyticsItem = null as any;
utilities.lazyLoad(exports, ["ApplicationInsightsAnalyticsItem"], () => require("./applicationInsightsAnalyticsItem"));

export { ApplicationInsightsApiKeyArgs, ApplicationInsightsApiKeyState } from "./applicationInsightsApiKey";
export type ApplicationInsightsApiKey = import("./applicationInsightsApiKey").ApplicationInsightsApiKey;
export const ApplicationInsightsApiKey: typeof import("./applicationInsightsApiKey").ApplicationInsightsApiKey = null as any;
utilities.lazyLoad(exports, ["ApplicationInsightsApiKey"], () => require("./applicationInsightsApiKey"));

export { ApplicationInsightsSmartDetectionRuleArgs, ApplicationInsightsSmartDetectionRuleState } from "./applicationInsightsSmartDetectionRule";
export type ApplicationInsightsSmartDetectionRule = import("./applicationInsightsSmartDetectionRule").ApplicationInsightsSmartDetectionRule;
export const ApplicationInsightsSmartDetectionRule: typeof import("./applicationInsightsSmartDetectionRule").ApplicationInsightsSmartDetectionRule = null as any;
utilities.lazyLoad(exports, ["ApplicationInsightsSmartDetectionRule"], () => require("./applicationInsightsSmartDetectionRule"));

export { ApplicationInsightsStandardWebTestArgs, ApplicationInsightsStandardWebTestState } from "./applicationInsightsStandardWebTest";
export type ApplicationInsightsStandardWebTest = import("./applicationInsightsStandardWebTest").ApplicationInsightsStandardWebTest;
export const ApplicationInsightsStandardWebTest: typeof import("./applicationInsightsStandardWebTest").ApplicationInsightsStandardWebTest = null as any;
utilities.lazyLoad(exports, ["ApplicationInsightsStandardWebTest"], () => require("./applicationInsightsStandardWebTest"));

export { ApplicationInsightsWebTestArgs, ApplicationInsightsWebTestState } from "./applicationInsightsWebTest";
export type ApplicationInsightsWebTest = import("./applicationInsightsWebTest").ApplicationInsightsWebTest;
export const ApplicationInsightsWebTest: typeof import("./applicationInsightsWebTest").ApplicationInsightsWebTest = null as any;
utilities.lazyLoad(exports, ["ApplicationInsightsWebTest"], () => require("./applicationInsightsWebTest"));

export { ApplicationInsightsWorkbookArgs, ApplicationInsightsWorkbookState } from "./applicationInsightsWorkbook";
export type ApplicationInsightsWorkbook = import("./applicationInsightsWorkbook").ApplicationInsightsWorkbook;
export const ApplicationInsightsWorkbook: typeof import("./applicationInsightsWorkbook").ApplicationInsightsWorkbook = null as any;
utilities.lazyLoad(exports, ["ApplicationInsightsWorkbook"], () => require("./applicationInsightsWorkbook"));

export { ApplicationInsightsWorkbookTemplateArgs, ApplicationInsightsWorkbookTemplateState } from "./applicationInsightsWorkbookTemplate";
export type ApplicationInsightsWorkbookTemplate = import("./applicationInsightsWorkbookTemplate").ApplicationInsightsWorkbookTemplate;
export const ApplicationInsightsWorkbookTemplate: typeof import("./applicationInsightsWorkbookTemplate").ApplicationInsightsWorkbookTemplate = null as any;
utilities.lazyLoad(exports, ["ApplicationInsightsWorkbookTemplate"], () => require("./applicationInsightsWorkbookTemplate"));

export { ApplicationLoadBalancerArgs, ApplicationLoadBalancerState } from "./applicationLoadBalancer";
export type ApplicationLoadBalancer = import("./applicationLoadBalancer").ApplicationLoadBalancer;
export const ApplicationLoadBalancer: typeof import("./applicationLoadBalancer").ApplicationLoadBalancer = null as any;
utilities.lazyLoad(exports, ["ApplicationLoadBalancer"], () => require("./applicationLoadBalancer"));

export { ApplicationLoadBalancerFrontendArgs, ApplicationLoadBalancerFrontendState } from "./applicationLoadBalancerFrontend";
export type ApplicationLoadBalancerFrontend = import("./applicationLoadBalancerFrontend").ApplicationLoadBalancerFrontend;
export const ApplicationLoadBalancerFrontend: typeof import("./applicationLoadBalancerFrontend").ApplicationLoadBalancerFrontend = null as any;
utilities.lazyLoad(exports, ["ApplicationLoadBalancerFrontend"], () => require("./applicationLoadBalancerFrontend"));

export { ApplicationLoadBalancerSubnetAssociationArgs, ApplicationLoadBalancerSubnetAssociationState } from "./applicationLoadBalancerSubnetAssociation";
export type ApplicationLoadBalancerSubnetAssociation = import("./applicationLoadBalancerSubnetAssociation").ApplicationLoadBalancerSubnetAssociation;
export const ApplicationLoadBalancerSubnetAssociation: typeof import("./applicationLoadBalancerSubnetAssociation").ApplicationLoadBalancerSubnetAssociation = null as any;
utilities.lazyLoad(exports, ["ApplicationLoadBalancerSubnetAssociation"], () => require("./applicationLoadBalancerSubnetAssociation"));

export { ApplicationSecurityGroupArgs, ApplicationSecurityGroupState } from "./applicationSecurityGroup";
export type ApplicationSecurityGroup = import("./applicationSecurityGroup").ApplicationSecurityGroup;
export const ApplicationSecurityGroup: typeof import("./applicationSecurityGroup").ApplicationSecurityGroup = null as any;
utilities.lazyLoad(exports, ["ApplicationSecurityGroup"], () => require("./applicationSecurityGroup"));

export { ArcKubernetesClusterArgs, ArcKubernetesClusterState } from "./arcKubernetesCluster";
export type ArcKubernetesCluster = import("./arcKubernetesCluster").ArcKubernetesCluster;
export const ArcKubernetesCluster: typeof import("./arcKubernetesCluster").ArcKubernetesCluster = null as any;
utilities.lazyLoad(exports, ["ArcKubernetesCluster"], () => require("./arcKubernetesCluster"));

export { ArcKubernetesClusterExtensionArgs, ArcKubernetesClusterExtensionState } from "./arcKubernetesClusterExtension";
export type ArcKubernetesClusterExtension = import("./arcKubernetesClusterExtension").ArcKubernetesClusterExtension;
export const ArcKubernetesClusterExtension: typeof import("./arcKubernetesClusterExtension").ArcKubernetesClusterExtension = null as any;
utilities.lazyLoad(exports, ["ArcKubernetesClusterExtension"], () => require("./arcKubernetesClusterExtension"));

export { ArcKubernetesFluxConfigurationArgs, ArcKubernetesFluxConfigurationState } from "./arcKubernetesFluxConfiguration";
export type ArcKubernetesFluxConfiguration = import("./arcKubernetesFluxConfiguration").ArcKubernetesFluxConfiguration;
export const ArcKubernetesFluxConfiguration: typeof import("./arcKubernetesFluxConfiguration").ArcKubernetesFluxConfiguration = null as any;
utilities.lazyLoad(exports, ["ArcKubernetesFluxConfiguration"], () => require("./arcKubernetesFluxConfiguration"));

export { ArcMachineExtensionArgs, ArcMachineExtensionState } from "./arcMachineExtension";
export type ArcMachineExtension = import("./arcMachineExtension").ArcMachineExtension;
export const ArcMachineExtension: typeof import("./arcMachineExtension").ArcMachineExtension = null as any;
utilities.lazyLoad(exports, ["ArcMachineExtension"], () => require("./arcMachineExtension"));

export { ArcPrivateLinkScopeArgs, ArcPrivateLinkScopeState } from "./arcPrivateLinkScope";
export type ArcPrivateLinkScope = import("./arcPrivateLinkScope").ArcPrivateLinkScope;
export const ArcPrivateLinkScope: typeof import("./arcPrivateLinkScope").ArcPrivateLinkScope = null as any;
utilities.lazyLoad(exports, ["ArcPrivateLinkScope"], () => require("./arcPrivateLinkScope"));

export { ArcResourceBridgeApplianceArgs, ArcResourceBridgeApplianceState } from "./arcResourceBridgeAppliance";
export type ArcResourceBridgeAppliance = import("./arcResourceBridgeAppliance").ArcResourceBridgeAppliance;
export const ArcResourceBridgeAppliance: typeof import("./arcResourceBridgeAppliance").ArcResourceBridgeAppliance = null as any;
utilities.lazyLoad(exports, ["ArcResourceBridgeAppliance"], () => require("./arcResourceBridgeAppliance"));

export { AttestationProviderArgs, AttestationProviderState } from "./attestationProvider";
export type AttestationProvider = import("./attestationProvider").AttestationProvider;
export const AttestationProvider: typeof import("./attestationProvider").AttestationProvider = null as any;
utilities.lazyLoad(exports, ["AttestationProvider"], () => require("./attestationProvider"));

export { AutomanageConfigurationArgs, AutomanageConfigurationState } from "./automanageConfiguration";
export type AutomanageConfiguration = import("./automanageConfiguration").AutomanageConfiguration;
export const AutomanageConfiguration: typeof import("./automanageConfiguration").AutomanageConfiguration = null as any;
utilities.lazyLoad(exports, ["AutomanageConfiguration"], () => require("./automanageConfiguration"));

export { AutomationAccountArgs, AutomationAccountState } from "./automationAccount";
export type AutomationAccount = import("./automationAccount").AutomationAccount;
export const AutomationAccount: typeof import("./automationAccount").AutomationAccount = null as any;
utilities.lazyLoad(exports, ["AutomationAccount"], () => require("./automationAccount"));

export { AutomationCertificateArgs, AutomationCertificateState } from "./automationCertificate";
export type AutomationCertificate = import("./automationCertificate").AutomationCertificate;
export const AutomationCertificate: typeof import("./automationCertificate").AutomationCertificate = null as any;
utilities.lazyLoad(exports, ["AutomationCertificate"], () => require("./automationCertificate"));

export { AutomationConnectionArgs, AutomationConnectionState } from "./automationConnection";
export type AutomationConnection = import("./automationConnection").AutomationConnection;
export const AutomationConnection: typeof import("./automationConnection").AutomationConnection = null as any;
utilities.lazyLoad(exports, ["AutomationConnection"], () => require("./automationConnection"));

export { AutomationConnectionCertificateArgs, AutomationConnectionCertificateState } from "./automationConnectionCertificate";
export type AutomationConnectionCertificate = import("./automationConnectionCertificate").AutomationConnectionCertificate;
export const AutomationConnectionCertificate: typeof import("./automationConnectionCertificate").AutomationConnectionCertificate = null as any;
utilities.lazyLoad(exports, ["AutomationConnectionCertificate"], () => require("./automationConnectionCertificate"));

export { AutomationConnectionClassicCertificateArgs, AutomationConnectionClassicCertificateState } from "./automationConnectionClassicCertificate";
export type AutomationConnectionClassicCertificate = import("./automationConnectionClassicCertificate").AutomationConnectionClassicCertificate;
export const AutomationConnectionClassicCertificate: typeof import("./automationConnectionClassicCertificate").AutomationConnectionClassicCertificate = null as any;
utilities.lazyLoad(exports, ["AutomationConnectionClassicCertificate"], () => require("./automationConnectionClassicCertificate"));

export { AutomationConnectionServicePrincipalArgs, AutomationConnectionServicePrincipalState } from "./automationConnectionServicePrincipal";
export type AutomationConnectionServicePrincipal = import("./automationConnectionServicePrincipal").AutomationConnectionServicePrincipal;
export const AutomationConnectionServicePrincipal: typeof import("./automationConnectionServicePrincipal").AutomationConnectionServicePrincipal = null as any;
utilities.lazyLoad(exports, ["AutomationConnectionServicePrincipal"], () => require("./automationConnectionServicePrincipal"));

export { AutomationConnectionTypeArgs, AutomationConnectionTypeState } from "./automationConnectionType";
export type AutomationConnectionType = import("./automationConnectionType").AutomationConnectionType;
export const AutomationConnectionType: typeof import("./automationConnectionType").AutomationConnectionType = null as any;
utilities.lazyLoad(exports, ["AutomationConnectionType"], () => require("./automationConnectionType"));

export { AutomationCredentialArgs, AutomationCredentialState } from "./automationCredential";
export type AutomationCredential = import("./automationCredential").AutomationCredential;
export const AutomationCredential: typeof import("./automationCredential").AutomationCredential = null as any;
utilities.lazyLoad(exports, ["AutomationCredential"], () => require("./automationCredential"));

export { AutomationDscConfigurationArgs, AutomationDscConfigurationState } from "./automationDscConfiguration";
export type AutomationDscConfiguration = import("./automationDscConfiguration").AutomationDscConfiguration;
export const AutomationDscConfiguration: typeof import("./automationDscConfiguration").AutomationDscConfiguration = null as any;
utilities.lazyLoad(exports, ["AutomationDscConfiguration"], () => require("./automationDscConfiguration"));

export { AutomationDscNodeconfigurationArgs, AutomationDscNodeconfigurationState } from "./automationDscNodeconfiguration";
export type AutomationDscNodeconfiguration = import("./automationDscNodeconfiguration").AutomationDscNodeconfiguration;
export const AutomationDscNodeconfiguration: typeof import("./automationDscNodeconfiguration").AutomationDscNodeconfiguration = null as any;
utilities.lazyLoad(exports, ["AutomationDscNodeconfiguration"], () => require("./automationDscNodeconfiguration"));

export { AutomationHybridRunbookWorkerArgs, AutomationHybridRunbookWorkerState } from "./automationHybridRunbookWorker";
export type AutomationHybridRunbookWorker = import("./automationHybridRunbookWorker").AutomationHybridRunbookWorker;
export const AutomationHybridRunbookWorker: typeof import("./automationHybridRunbookWorker").AutomationHybridRunbookWorker = null as any;
utilities.lazyLoad(exports, ["AutomationHybridRunbookWorker"], () => require("./automationHybridRunbookWorker"));

export { AutomationHybridRunbookWorkerGroupArgs, AutomationHybridRunbookWorkerGroupState } from "./automationHybridRunbookWorkerGroup";
export type AutomationHybridRunbookWorkerGroup = import("./automationHybridRunbookWorkerGroup").AutomationHybridRunbookWorkerGroup;
export const AutomationHybridRunbookWorkerGroup: typeof import("./automationHybridRunbookWorkerGroup").AutomationHybridRunbookWorkerGroup = null as any;
utilities.lazyLoad(exports, ["AutomationHybridRunbookWorkerGroup"], () => require("./automationHybridRunbookWorkerGroup"));

export { AutomationJobScheduleArgs, AutomationJobScheduleState } from "./automationJobSchedule";
export type AutomationJobSchedule = import("./automationJobSchedule").AutomationJobSchedule;
export const AutomationJobSchedule: typeof import("./automationJobSchedule").AutomationJobSchedule = null as any;
utilities.lazyLoad(exports, ["AutomationJobSchedule"], () => require("./automationJobSchedule"));

export { AutomationModuleArgs, AutomationModuleState } from "./automationModule";
export type AutomationModule = import("./automationModule").AutomationModule;
export const AutomationModule: typeof import("./automationModule").AutomationModule = null as any;
utilities.lazyLoad(exports, ["AutomationModule"], () => require("./automationModule"));

export { AutomationPowershell72ModuleArgs, AutomationPowershell72ModuleState } from "./automationPowershell72Module";
export type AutomationPowershell72Module = import("./automationPowershell72Module").AutomationPowershell72Module;
export const AutomationPowershell72Module: typeof import("./automationPowershell72Module").AutomationPowershell72Module = null as any;
utilities.lazyLoad(exports, ["AutomationPowershell72Module"], () => require("./automationPowershell72Module"));

export { AutomationPython3PackageArgs, AutomationPython3PackageState } from "./automationPython3Package";
export type AutomationPython3Package = import("./automationPython3Package").AutomationPython3Package;
export const AutomationPython3Package: typeof import("./automationPython3Package").AutomationPython3Package = null as any;
utilities.lazyLoad(exports, ["AutomationPython3Package"], () => require("./automationPython3Package"));

export { AutomationRunbookArgs, AutomationRunbookState } from "./automationRunbook";
export type AutomationRunbook = import("./automationRunbook").AutomationRunbook;
export const AutomationRunbook: typeof import("./automationRunbook").AutomationRunbook = null as any;
utilities.lazyLoad(exports, ["AutomationRunbook"], () => require("./automationRunbook"));

export { AutomationScheduleArgs, AutomationScheduleState } from "./automationSchedule";
export type AutomationSchedule = import("./automationSchedule").AutomationSchedule;
export const AutomationSchedule: typeof import("./automationSchedule").AutomationSchedule = null as any;
utilities.lazyLoad(exports, ["AutomationSchedule"], () => require("./automationSchedule"));

export { AutomationSoftwareUpdateConfigurationArgs, AutomationSoftwareUpdateConfigurationState } from "./automationSoftwareUpdateConfiguration";
export type AutomationSoftwareUpdateConfiguration = import("./automationSoftwareUpdateConfiguration").AutomationSoftwareUpdateConfiguration;
export const AutomationSoftwareUpdateConfiguration: typeof import("./automationSoftwareUpdateConfiguration").AutomationSoftwareUpdateConfiguration = null as any;
utilities.lazyLoad(exports, ["AutomationSoftwareUpdateConfiguration"], () => require("./automationSoftwareUpdateConfiguration"));

export { AutomationSourceControlArgs, AutomationSourceControlState } from "./automationSourceControl";
export type AutomationSourceControl = import("./automationSourceControl").AutomationSourceControl;
export const AutomationSourceControl: typeof import("./automationSourceControl").AutomationSourceControl = null as any;
utilities.lazyLoad(exports, ["AutomationSourceControl"], () => require("./automationSourceControl"));

export { AutomationVariableBoolArgs, AutomationVariableBoolState } from "./automationVariableBool";
export type AutomationVariableBool = import("./automationVariableBool").AutomationVariableBool;
export const AutomationVariableBool: typeof import("./automationVariableBool").AutomationVariableBool = null as any;
utilities.lazyLoad(exports, ["AutomationVariableBool"], () => require("./automationVariableBool"));

export { AutomationVariableDatetimeArgs, AutomationVariableDatetimeState } from "./automationVariableDatetime";
export type AutomationVariableDatetime = import("./automationVariableDatetime").AutomationVariableDatetime;
export const AutomationVariableDatetime: typeof import("./automationVariableDatetime").AutomationVariableDatetime = null as any;
utilities.lazyLoad(exports, ["AutomationVariableDatetime"], () => require("./automationVariableDatetime"));

export { AutomationVariableIntArgs, AutomationVariableIntState } from "./automationVariableInt";
export type AutomationVariableInt = import("./automationVariableInt").AutomationVariableInt;
export const AutomationVariableInt: typeof import("./automationVariableInt").AutomationVariableInt = null as any;
utilities.lazyLoad(exports, ["AutomationVariableInt"], () => require("./automationVariableInt"));

export { AutomationVariableObjectArgs, AutomationVariableObjectState } from "./automationVariableObject";
export type AutomationVariableObject = import("./automationVariableObject").AutomationVariableObject;
export const AutomationVariableObject: typeof import("./automationVariableObject").AutomationVariableObject = null as any;
utilities.lazyLoad(exports, ["AutomationVariableObject"], () => require("./automationVariableObject"));

export { AutomationVariableStringArgs, AutomationVariableStringState } from "./automationVariableString";
export type AutomationVariableString = import("./automationVariableString").AutomationVariableString;
export const AutomationVariableString: typeof import("./automationVariableString").AutomationVariableString = null as any;
utilities.lazyLoad(exports, ["AutomationVariableString"], () => require("./automationVariableString"));

export { AutomationWatcherArgs, AutomationWatcherState } from "./automationWatcher";
export type AutomationWatcher = import("./automationWatcher").AutomationWatcher;
export const AutomationWatcher: typeof import("./automationWatcher").AutomationWatcher = null as any;
utilities.lazyLoad(exports, ["AutomationWatcher"], () => require("./automationWatcher"));

export { AutomationWebhookArgs, AutomationWebhookState } from "./automationWebhook";
export type AutomationWebhook = import("./automationWebhook").AutomationWebhook;
export const AutomationWebhook: typeof import("./automationWebhook").AutomationWebhook = null as any;
utilities.lazyLoad(exports, ["AutomationWebhook"], () => require("./automationWebhook"));

export { AvailabilitySetArgs, AvailabilitySetState } from "./availabilitySet";
export type AvailabilitySet = import("./availabilitySet").AvailabilitySet;
export const AvailabilitySet: typeof import("./availabilitySet").AvailabilitySet = null as any;
utilities.lazyLoad(exports, ["AvailabilitySet"], () => require("./availabilitySet"));

export { BackupContainerStorageAccountArgs, BackupContainerStorageAccountState } from "./backupContainerStorageAccount";
export type BackupContainerStorageAccount = import("./backupContainerStorageAccount").BackupContainerStorageAccount;
export const BackupContainerStorageAccount: typeof import("./backupContainerStorageAccount").BackupContainerStorageAccount = null as any;
utilities.lazyLoad(exports, ["BackupContainerStorageAccount"], () => require("./backupContainerStorageAccount"));

export { BackupPolicyFileShareArgs, BackupPolicyFileShareState } from "./backupPolicyFileShare";
export type BackupPolicyFileShare = import("./backupPolicyFileShare").BackupPolicyFileShare;
export const BackupPolicyFileShare: typeof import("./backupPolicyFileShare").BackupPolicyFileShare = null as any;
utilities.lazyLoad(exports, ["BackupPolicyFileShare"], () => require("./backupPolicyFileShare"));

export { BackupPolicyVmArgs, BackupPolicyVmState } from "./backupPolicyVm";
export type BackupPolicyVm = import("./backupPolicyVm").BackupPolicyVm;
export const BackupPolicyVm: typeof import("./backupPolicyVm").BackupPolicyVm = null as any;
utilities.lazyLoad(exports, ["BackupPolicyVm"], () => require("./backupPolicyVm"));

export { BackupPolicyVmWorkloadArgs, BackupPolicyVmWorkloadState } from "./backupPolicyVmWorkload";
export type BackupPolicyVmWorkload = import("./backupPolicyVmWorkload").BackupPolicyVmWorkload;
export const BackupPolicyVmWorkload: typeof import("./backupPolicyVmWorkload").BackupPolicyVmWorkload = null as any;
utilities.lazyLoad(exports, ["BackupPolicyVmWorkload"], () => require("./backupPolicyVmWorkload"));

export { BackupProtectedFileShareArgs, BackupProtectedFileShareState } from "./backupProtectedFileShare";
export type BackupProtectedFileShare = import("./backupProtectedFileShare").BackupProtectedFileShare;
export const BackupProtectedFileShare: typeof import("./backupProtectedFileShare").BackupProtectedFileShare = null as any;
utilities.lazyLoad(exports, ["BackupProtectedFileShare"], () => require("./backupProtectedFileShare"));

export { BackupProtectedVmArgs, BackupProtectedVmState } from "./backupProtectedVm";
export type BackupProtectedVm = import("./backupProtectedVm").BackupProtectedVm;
export const BackupProtectedVm: typeof import("./backupProtectedVm").BackupProtectedVm = null as any;
utilities.lazyLoad(exports, ["BackupProtectedVm"], () => require("./backupProtectedVm"));

export { BastionHostArgs, BastionHostState } from "./bastionHost";
export type BastionHost = import("./bastionHost").BastionHost;
export const BastionHost: typeof import("./bastionHost").BastionHost = null as any;
utilities.lazyLoad(exports, ["BastionHost"], () => require("./bastionHost"));

export { BatchAccountArgs, BatchAccountState } from "./batchAccount";
export type BatchAccount = import("./batchAccount").BatchAccount;
export const BatchAccount: typeof import("./batchAccount").BatchAccount = null as any;
utilities.lazyLoad(exports, ["BatchAccount"], () => require("./batchAccount"));

export { BatchApplicationArgs, BatchApplicationState } from "./batchApplication";
export type BatchApplication = import("./batchApplication").BatchApplication;
export const BatchApplication: typeof import("./batchApplication").BatchApplication = null as any;
utilities.lazyLoad(exports, ["BatchApplication"], () => require("./batchApplication"));

export { BatchCertificateArgs, BatchCertificateState } from "./batchCertificate";
export type BatchCertificate = import("./batchCertificate").BatchCertificate;
export const BatchCertificate: typeof import("./batchCertificate").BatchCertificate = null as any;
utilities.lazyLoad(exports, ["BatchCertificate"], () => require("./batchCertificate"));

export { BatchJobArgs, BatchJobState } from "./batchJob";
export type BatchJob = import("./batchJob").BatchJob;
export const BatchJob: typeof import("./batchJob").BatchJob = null as any;
utilities.lazyLoad(exports, ["BatchJob"], () => require("./batchJob"));

export { BatchPoolArgs, BatchPoolState } from "./batchPool";
export type BatchPool = import("./batchPool").BatchPool;
export const BatchPool: typeof import("./batchPool").BatchPool = null as any;
utilities.lazyLoad(exports, ["BatchPool"], () => require("./batchPool"));

export { BillingAccountCostManagementExportArgs, BillingAccountCostManagementExportState } from "./billingAccountCostManagementExport";
export type BillingAccountCostManagementExport = import("./billingAccountCostManagementExport").BillingAccountCostManagementExport;
export const BillingAccountCostManagementExport: typeof import("./billingAccountCostManagementExport").BillingAccountCostManagementExport = null as any;
utilities.lazyLoad(exports, ["BillingAccountCostManagementExport"], () => require("./billingAccountCostManagementExport"));

export { BlueprintAssignmentArgs, BlueprintAssignmentState } from "./blueprintAssignment";
export type BlueprintAssignment = import("./blueprintAssignment").BlueprintAssignment;
export const BlueprintAssignment: typeof import("./blueprintAssignment").BlueprintAssignment = null as any;
utilities.lazyLoad(exports, ["BlueprintAssignment"], () => require("./blueprintAssignment"));

export { BotChannelAlexaArgs, BotChannelAlexaState } from "./botChannelAlexa";
export type BotChannelAlexa = import("./botChannelAlexa").BotChannelAlexa;
export const BotChannelAlexa: typeof import("./botChannelAlexa").BotChannelAlexa = null as any;
utilities.lazyLoad(exports, ["BotChannelAlexa"], () => require("./botChannelAlexa"));

export { BotChannelDirectLineSpeechArgs, BotChannelDirectLineSpeechState } from "./botChannelDirectLineSpeech";
export type BotChannelDirectLineSpeech = import("./botChannelDirectLineSpeech").BotChannelDirectLineSpeech;
export const BotChannelDirectLineSpeech: typeof import("./botChannelDirectLineSpeech").BotChannelDirectLineSpeech = null as any;
utilities.lazyLoad(exports, ["BotChannelDirectLineSpeech"], () => require("./botChannelDirectLineSpeech"));

export { BotChannelDirectlineArgs, BotChannelDirectlineState } from "./botChannelDirectline";
export type BotChannelDirectline = import("./botChannelDirectline").BotChannelDirectline;
export const BotChannelDirectline: typeof import("./botChannelDirectline").BotChannelDirectline = null as any;
utilities.lazyLoad(exports, ["BotChannelDirectline"], () => require("./botChannelDirectline"));

export { BotChannelEmailArgs, BotChannelEmailState } from "./botChannelEmail";
export type BotChannelEmail = import("./botChannelEmail").BotChannelEmail;
export const BotChannelEmail: typeof import("./botChannelEmail").BotChannelEmail = null as any;
utilities.lazyLoad(exports, ["BotChannelEmail"], () => require("./botChannelEmail"));

export { BotChannelFacebookArgs, BotChannelFacebookState } from "./botChannelFacebook";
export type BotChannelFacebook = import("./botChannelFacebook").BotChannelFacebook;
export const BotChannelFacebook: typeof import("./botChannelFacebook").BotChannelFacebook = null as any;
utilities.lazyLoad(exports, ["BotChannelFacebook"], () => require("./botChannelFacebook"));

export { BotChannelLineArgs, BotChannelLineState } from "./botChannelLine";
export type BotChannelLine = import("./botChannelLine").BotChannelLine;
export const BotChannelLine: typeof import("./botChannelLine").BotChannelLine = null as any;
utilities.lazyLoad(exports, ["BotChannelLine"], () => require("./botChannelLine"));

export { BotChannelMsTeamsArgs, BotChannelMsTeamsState } from "./botChannelMsTeams";
export type BotChannelMsTeams = import("./botChannelMsTeams").BotChannelMsTeams;
export const BotChannelMsTeams: typeof import("./botChannelMsTeams").BotChannelMsTeams = null as any;
utilities.lazyLoad(exports, ["BotChannelMsTeams"], () => require("./botChannelMsTeams"));

export { BotChannelSlackArgs, BotChannelSlackState } from "./botChannelSlack";
export type BotChannelSlack = import("./botChannelSlack").BotChannelSlack;
export const BotChannelSlack: typeof import("./botChannelSlack").BotChannelSlack = null as any;
utilities.lazyLoad(exports, ["BotChannelSlack"], () => require("./botChannelSlack"));

export { BotChannelSmsArgs, BotChannelSmsState } from "./botChannelSms";
export type BotChannelSms = import("./botChannelSms").BotChannelSms;
export const BotChannelSms: typeof import("./botChannelSms").BotChannelSms = null as any;
utilities.lazyLoad(exports, ["BotChannelSms"], () => require("./botChannelSms"));

export { BotChannelWebChatArgs, BotChannelWebChatState } from "./botChannelWebChat";
export type BotChannelWebChat = import("./botChannelWebChat").BotChannelWebChat;
export const BotChannelWebChat: typeof import("./botChannelWebChat").BotChannelWebChat = null as any;
utilities.lazyLoad(exports, ["BotChannelWebChat"], () => require("./botChannelWebChat"));

export { BotChannelsRegistrationArgs, BotChannelsRegistrationState } from "./botChannelsRegistration";
export type BotChannelsRegistration = import("./botChannelsRegistration").BotChannelsRegistration;
export const BotChannelsRegistration: typeof import("./botChannelsRegistration").BotChannelsRegistration = null as any;
utilities.lazyLoad(exports, ["BotChannelsRegistration"], () => require("./botChannelsRegistration"));

export { BotConnectionArgs, BotConnectionState } from "./botConnection";
export type BotConnection = import("./botConnection").BotConnection;
export const BotConnection: typeof import("./botConnection").BotConnection = null as any;
utilities.lazyLoad(exports, ["BotConnection"], () => require("./botConnection"));

export { BotServiceAzureBotArgs, BotServiceAzureBotState } from "./botServiceAzureBot";
export type BotServiceAzureBot = import("./botServiceAzureBot").BotServiceAzureBot;
export const BotServiceAzureBot: typeof import("./botServiceAzureBot").BotServiceAzureBot = null as any;
utilities.lazyLoad(exports, ["BotServiceAzureBot"], () => require("./botServiceAzureBot"));

export { BotWebAppArgs, BotWebAppState } from "./botWebApp";
export type BotWebApp = import("./botWebApp").BotWebApp;
export const BotWebApp: typeof import("./botWebApp").BotWebApp = null as any;
utilities.lazyLoad(exports, ["BotWebApp"], () => require("./botWebApp"));

export { CapacityReservationArgs, CapacityReservationState } from "./capacityReservation";
export type CapacityReservation = import("./capacityReservation").CapacityReservation;
export const CapacityReservation: typeof import("./capacityReservation").CapacityReservation = null as any;
utilities.lazyLoad(exports, ["CapacityReservation"], () => require("./capacityReservation"));

export { CapacityReservationGroupArgs, CapacityReservationGroupState } from "./capacityReservationGroup";
export type CapacityReservationGroup = import("./capacityReservationGroup").CapacityReservationGroup;
export const CapacityReservationGroup: typeof import("./capacityReservationGroup").CapacityReservationGroup = null as any;
utilities.lazyLoad(exports, ["CapacityReservationGroup"], () => require("./capacityReservationGroup"));

export { CdnEndpointArgs, CdnEndpointState } from "./cdnEndpoint";
export type CdnEndpoint = import("./cdnEndpoint").CdnEndpoint;
export const CdnEndpoint: typeof import("./cdnEndpoint").CdnEndpoint = null as any;
utilities.lazyLoad(exports, ["CdnEndpoint"], () => require("./cdnEndpoint"));

export { CdnEndpointCustomDomainArgs, CdnEndpointCustomDomainState } from "./cdnEndpointCustomDomain";
export type CdnEndpointCustomDomain = import("./cdnEndpointCustomDomain").CdnEndpointCustomDomain;
export const CdnEndpointCustomDomain: typeof import("./cdnEndpointCustomDomain").CdnEndpointCustomDomain = null as any;
utilities.lazyLoad(exports, ["CdnEndpointCustomDomain"], () => require("./cdnEndpointCustomDomain"));

export { CdnFrontdoorCustomDomainArgs, CdnFrontdoorCustomDomainState } from "./cdnFrontdoorCustomDomain";
export type CdnFrontdoorCustomDomain = import("./cdnFrontdoorCustomDomain").CdnFrontdoorCustomDomain;
export const CdnFrontdoorCustomDomain: typeof import("./cdnFrontdoorCustomDomain").CdnFrontdoorCustomDomain = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorCustomDomain"], () => require("./cdnFrontdoorCustomDomain"));

export { CdnFrontdoorCustomDomainAssociationArgs, CdnFrontdoorCustomDomainAssociationState } from "./cdnFrontdoorCustomDomainAssociation";
export type CdnFrontdoorCustomDomainAssociation = import("./cdnFrontdoorCustomDomainAssociation").CdnFrontdoorCustomDomainAssociation;
export const CdnFrontdoorCustomDomainAssociation: typeof import("./cdnFrontdoorCustomDomainAssociation").CdnFrontdoorCustomDomainAssociation = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorCustomDomainAssociation"], () => require("./cdnFrontdoorCustomDomainAssociation"));

export { CdnFrontdoorEndpointArgs, CdnFrontdoorEndpointState } from "./cdnFrontdoorEndpoint";
export type CdnFrontdoorEndpoint = import("./cdnFrontdoorEndpoint").CdnFrontdoorEndpoint;
export const CdnFrontdoorEndpoint: typeof import("./cdnFrontdoorEndpoint").CdnFrontdoorEndpoint = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorEndpoint"], () => require("./cdnFrontdoorEndpoint"));

export { CdnFrontdoorFirewallPolicyArgs, CdnFrontdoorFirewallPolicyState } from "./cdnFrontdoorFirewallPolicy";
export type CdnFrontdoorFirewallPolicy = import("./cdnFrontdoorFirewallPolicy").CdnFrontdoorFirewallPolicy;
export const CdnFrontdoorFirewallPolicy: typeof import("./cdnFrontdoorFirewallPolicy").CdnFrontdoorFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorFirewallPolicy"], () => require("./cdnFrontdoorFirewallPolicy"));

export { CdnFrontdoorOriginArgs, CdnFrontdoorOriginState } from "./cdnFrontdoorOrigin";
export type CdnFrontdoorOrigin = import("./cdnFrontdoorOrigin").CdnFrontdoorOrigin;
export const CdnFrontdoorOrigin: typeof import("./cdnFrontdoorOrigin").CdnFrontdoorOrigin = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorOrigin"], () => require("./cdnFrontdoorOrigin"));

export { CdnFrontdoorOriginGroupArgs, CdnFrontdoorOriginGroupState } from "./cdnFrontdoorOriginGroup";
export type CdnFrontdoorOriginGroup = import("./cdnFrontdoorOriginGroup").CdnFrontdoorOriginGroup;
export const CdnFrontdoorOriginGroup: typeof import("./cdnFrontdoorOriginGroup").CdnFrontdoorOriginGroup = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorOriginGroup"], () => require("./cdnFrontdoorOriginGroup"));

export { CdnFrontdoorProfileArgs, CdnFrontdoorProfileState } from "./cdnFrontdoorProfile";
export type CdnFrontdoorProfile = import("./cdnFrontdoorProfile").CdnFrontdoorProfile;
export const CdnFrontdoorProfile: typeof import("./cdnFrontdoorProfile").CdnFrontdoorProfile = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorProfile"], () => require("./cdnFrontdoorProfile"));

export { CdnFrontdoorRouteArgs, CdnFrontdoorRouteState } from "./cdnFrontdoorRoute";
export type CdnFrontdoorRoute = import("./cdnFrontdoorRoute").CdnFrontdoorRoute;
export const CdnFrontdoorRoute: typeof import("./cdnFrontdoorRoute").CdnFrontdoorRoute = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorRoute"], () => require("./cdnFrontdoorRoute"));

export { CdnFrontdoorRuleArgs, CdnFrontdoorRuleState } from "./cdnFrontdoorRule";
export type CdnFrontdoorRule = import("./cdnFrontdoorRule").CdnFrontdoorRule;
export const CdnFrontdoorRule: typeof import("./cdnFrontdoorRule").CdnFrontdoorRule = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorRule"], () => require("./cdnFrontdoorRule"));

export { CdnFrontdoorRuleSetArgs, CdnFrontdoorRuleSetState } from "./cdnFrontdoorRuleSet";
export type CdnFrontdoorRuleSet = import("./cdnFrontdoorRuleSet").CdnFrontdoorRuleSet;
export const CdnFrontdoorRuleSet: typeof import("./cdnFrontdoorRuleSet").CdnFrontdoorRuleSet = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorRuleSet"], () => require("./cdnFrontdoorRuleSet"));

export { CdnFrontdoorSecretArgs, CdnFrontdoorSecretState } from "./cdnFrontdoorSecret";
export type CdnFrontdoorSecret = import("./cdnFrontdoorSecret").CdnFrontdoorSecret;
export const CdnFrontdoorSecret: typeof import("./cdnFrontdoorSecret").CdnFrontdoorSecret = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorSecret"], () => require("./cdnFrontdoorSecret"));

export { CdnFrontdoorSecurityPolicyArgs, CdnFrontdoorSecurityPolicyState } from "./cdnFrontdoorSecurityPolicy";
export type CdnFrontdoorSecurityPolicy = import("./cdnFrontdoorSecurityPolicy").CdnFrontdoorSecurityPolicy;
export const CdnFrontdoorSecurityPolicy: typeof import("./cdnFrontdoorSecurityPolicy").CdnFrontdoorSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["CdnFrontdoorSecurityPolicy"], () => require("./cdnFrontdoorSecurityPolicy"));

export { CdnProfileArgs, CdnProfileState } from "./cdnProfile";
export type CdnProfile = import("./cdnProfile").CdnProfile;
export const CdnProfile: typeof import("./cdnProfile").CdnProfile = null as any;
utilities.lazyLoad(exports, ["CdnProfile"], () => require("./cdnProfile"));

export { ChaosStudioCapabilityArgs, ChaosStudioCapabilityState } from "./chaosStudioCapability";
export type ChaosStudioCapability = import("./chaosStudioCapability").ChaosStudioCapability;
export const ChaosStudioCapability: typeof import("./chaosStudioCapability").ChaosStudioCapability = null as any;
utilities.lazyLoad(exports, ["ChaosStudioCapability"], () => require("./chaosStudioCapability"));

export { ChaosStudioExperimentArgs, ChaosStudioExperimentState } from "./chaosStudioExperiment";
export type ChaosStudioExperiment = import("./chaosStudioExperiment").ChaosStudioExperiment;
export const ChaosStudioExperiment: typeof import("./chaosStudioExperiment").ChaosStudioExperiment = null as any;
utilities.lazyLoad(exports, ["ChaosStudioExperiment"], () => require("./chaosStudioExperiment"));

export { ChaosStudioTargetArgs, ChaosStudioTargetState } from "./chaosStudioTarget";
export type ChaosStudioTarget = import("./chaosStudioTarget").ChaosStudioTarget;
export const ChaosStudioTarget: typeof import("./chaosStudioTarget").ChaosStudioTarget = null as any;
utilities.lazyLoad(exports, ["ChaosStudioTarget"], () => require("./chaosStudioTarget"));

export { CognitiveAccountArgs, CognitiveAccountState } from "./cognitiveAccount";
export type CognitiveAccount = import("./cognitiveAccount").CognitiveAccount;
export const CognitiveAccount: typeof import("./cognitiveAccount").CognitiveAccount = null as any;
utilities.lazyLoad(exports, ["CognitiveAccount"], () => require("./cognitiveAccount"));

export { CognitiveAccountCustomerManagedKeyArgs, CognitiveAccountCustomerManagedKeyState } from "./cognitiveAccountCustomerManagedKey";
export type CognitiveAccountCustomerManagedKey = import("./cognitiveAccountCustomerManagedKey").CognitiveAccountCustomerManagedKey;
export const CognitiveAccountCustomerManagedKey: typeof import("./cognitiveAccountCustomerManagedKey").CognitiveAccountCustomerManagedKey = null as any;
utilities.lazyLoad(exports, ["CognitiveAccountCustomerManagedKey"], () => require("./cognitiveAccountCustomerManagedKey"));

export { CognitiveDeploymentArgs, CognitiveDeploymentState } from "./cognitiveDeployment";
export type CognitiveDeployment = import("./cognitiveDeployment").CognitiveDeployment;
export const CognitiveDeployment: typeof import("./cognitiveDeployment").CognitiveDeployment = null as any;
utilities.lazyLoad(exports, ["CognitiveDeployment"], () => require("./cognitiveDeployment"));

export { CommunicationServiceArgs, CommunicationServiceState } from "./communicationService";
export type CommunicationService = import("./communicationService").CommunicationService;
export const CommunicationService: typeof import("./communicationService").CommunicationService = null as any;
utilities.lazyLoad(exports, ["CommunicationService"], () => require("./communicationService"));

export { CommunicationServiceEmailDomainAssociationArgs, CommunicationServiceEmailDomainAssociationState } from "./communicationServiceEmailDomainAssociation";
export type CommunicationServiceEmailDomainAssociation = import("./communicationServiceEmailDomainAssociation").CommunicationServiceEmailDomainAssociation;
export const CommunicationServiceEmailDomainAssociation: typeof import("./communicationServiceEmailDomainAssociation").CommunicationServiceEmailDomainAssociation = null as any;
utilities.lazyLoad(exports, ["CommunicationServiceEmailDomainAssociation"], () => require("./communicationServiceEmailDomainAssociation"));

export { ConfidentialLedgerArgs, ConfidentialLedgerState } from "./confidentialLedger";
export type ConfidentialLedger = import("./confidentialLedger").ConfidentialLedger;
export const ConfidentialLedger: typeof import("./confidentialLedger").ConfidentialLedger = null as any;
utilities.lazyLoad(exports, ["ConfidentialLedger"], () => require("./confidentialLedger"));

export { ConsumptionBudgetManagementGroupArgs, ConsumptionBudgetManagementGroupState } from "./consumptionBudgetManagementGroup";
export type ConsumptionBudgetManagementGroup = import("./consumptionBudgetManagementGroup").ConsumptionBudgetManagementGroup;
export const ConsumptionBudgetManagementGroup: typeof import("./consumptionBudgetManagementGroup").ConsumptionBudgetManagementGroup = null as any;
utilities.lazyLoad(exports, ["ConsumptionBudgetManagementGroup"], () => require("./consumptionBudgetManagementGroup"));

export { ConsumptionBudgetResourceGroupArgs, ConsumptionBudgetResourceGroupState } from "./consumptionBudgetResourceGroup";
export type ConsumptionBudgetResourceGroup = import("./consumptionBudgetResourceGroup").ConsumptionBudgetResourceGroup;
export const ConsumptionBudgetResourceGroup: typeof import("./consumptionBudgetResourceGroup").ConsumptionBudgetResourceGroup = null as any;
utilities.lazyLoad(exports, ["ConsumptionBudgetResourceGroup"], () => require("./consumptionBudgetResourceGroup"));

export { ConsumptionBudgetSubscriptionArgs, ConsumptionBudgetSubscriptionState } from "./consumptionBudgetSubscription";
export type ConsumptionBudgetSubscription = import("./consumptionBudgetSubscription").ConsumptionBudgetSubscription;
export const ConsumptionBudgetSubscription: typeof import("./consumptionBudgetSubscription").ConsumptionBudgetSubscription = null as any;
utilities.lazyLoad(exports, ["ConsumptionBudgetSubscription"], () => require("./consumptionBudgetSubscription"));

export { ContainerAppArgs, ContainerAppState } from "./containerApp";
export type ContainerApp = import("./containerApp").ContainerApp;
export const ContainerApp: typeof import("./containerApp").ContainerApp = null as any;
utilities.lazyLoad(exports, ["ContainerApp"], () => require("./containerApp"));

export { ContainerAppCustomDomainArgs, ContainerAppCustomDomainState } from "./containerAppCustomDomain";
export type ContainerAppCustomDomain = import("./containerAppCustomDomain").ContainerAppCustomDomain;
export const ContainerAppCustomDomain: typeof import("./containerAppCustomDomain").ContainerAppCustomDomain = null as any;
utilities.lazyLoad(exports, ["ContainerAppCustomDomain"], () => require("./containerAppCustomDomain"));

export { ContainerAppEnvironmentArgs, ContainerAppEnvironmentState } from "./containerAppEnvironment";
export type ContainerAppEnvironment = import("./containerAppEnvironment").ContainerAppEnvironment;
export const ContainerAppEnvironment: typeof import("./containerAppEnvironment").ContainerAppEnvironment = null as any;
utilities.lazyLoad(exports, ["ContainerAppEnvironment"], () => require("./containerAppEnvironment"));

export { ContainerAppEnvironmentCertificateArgs, ContainerAppEnvironmentCertificateState } from "./containerAppEnvironmentCertificate";
export type ContainerAppEnvironmentCertificate = import("./containerAppEnvironmentCertificate").ContainerAppEnvironmentCertificate;
export const ContainerAppEnvironmentCertificate: typeof import("./containerAppEnvironmentCertificate").ContainerAppEnvironmentCertificate = null as any;
utilities.lazyLoad(exports, ["ContainerAppEnvironmentCertificate"], () => require("./containerAppEnvironmentCertificate"));

export { ContainerAppEnvironmentCustomDomainArgs, ContainerAppEnvironmentCustomDomainState } from "./containerAppEnvironmentCustomDomain";
export type ContainerAppEnvironmentCustomDomain = import("./containerAppEnvironmentCustomDomain").ContainerAppEnvironmentCustomDomain;
export const ContainerAppEnvironmentCustomDomain: typeof import("./containerAppEnvironmentCustomDomain").ContainerAppEnvironmentCustomDomain = null as any;
utilities.lazyLoad(exports, ["ContainerAppEnvironmentCustomDomain"], () => require("./containerAppEnvironmentCustomDomain"));

export { ContainerAppEnvironmentDaprComponentArgs, ContainerAppEnvironmentDaprComponentState } from "./containerAppEnvironmentDaprComponent";
export type ContainerAppEnvironmentDaprComponent = import("./containerAppEnvironmentDaprComponent").ContainerAppEnvironmentDaprComponent;
export const ContainerAppEnvironmentDaprComponent: typeof import("./containerAppEnvironmentDaprComponent").ContainerAppEnvironmentDaprComponent = null as any;
utilities.lazyLoad(exports, ["ContainerAppEnvironmentDaprComponent"], () => require("./containerAppEnvironmentDaprComponent"));

export { ContainerAppEnvironmentStorageArgs, ContainerAppEnvironmentStorageState } from "./containerAppEnvironmentStorage";
export type ContainerAppEnvironmentStorage = import("./containerAppEnvironmentStorage").ContainerAppEnvironmentStorage;
export const ContainerAppEnvironmentStorage: typeof import("./containerAppEnvironmentStorage").ContainerAppEnvironmentStorage = null as any;
utilities.lazyLoad(exports, ["ContainerAppEnvironmentStorage"], () => require("./containerAppEnvironmentStorage"));

export { ContainerAppJobArgs, ContainerAppJobState } from "./containerAppJob";
export type ContainerAppJob = import("./containerAppJob").ContainerAppJob;
export const ContainerAppJob: typeof import("./containerAppJob").ContainerAppJob = null as any;
utilities.lazyLoad(exports, ["ContainerAppJob"], () => require("./containerAppJob"));

export { ContainerConnectedRegistryArgs, ContainerConnectedRegistryState } from "./containerConnectedRegistry";
export type ContainerConnectedRegistry = import("./containerConnectedRegistry").ContainerConnectedRegistry;
export const ContainerConnectedRegistry: typeof import("./containerConnectedRegistry").ContainerConnectedRegistry = null as any;
utilities.lazyLoad(exports, ["ContainerConnectedRegistry"], () => require("./containerConnectedRegistry"));

export { ContainerGroupArgs, ContainerGroupState } from "./containerGroup";
export type ContainerGroup = import("./containerGroup").ContainerGroup;
export const ContainerGroup: typeof import("./containerGroup").ContainerGroup = null as any;
utilities.lazyLoad(exports, ["ContainerGroup"], () => require("./containerGroup"));

export { ContainerRegistryArgs, ContainerRegistryState } from "./containerRegistry";
export type ContainerRegistry = import("./containerRegistry").ContainerRegistry;
export const ContainerRegistry: typeof import("./containerRegistry").ContainerRegistry = null as any;
utilities.lazyLoad(exports, ["ContainerRegistry"], () => require("./containerRegistry"));

export { ContainerRegistryAgentPoolArgs, ContainerRegistryAgentPoolState } from "./containerRegistryAgentPool";
export type ContainerRegistryAgentPool = import("./containerRegistryAgentPool").ContainerRegistryAgentPool;
export const ContainerRegistryAgentPool: typeof import("./containerRegistryAgentPool").ContainerRegistryAgentPool = null as any;
utilities.lazyLoad(exports, ["ContainerRegistryAgentPool"], () => require("./containerRegistryAgentPool"));

export { ContainerRegistryCacheRuleArgs, ContainerRegistryCacheRuleState } from "./containerRegistryCacheRule";
export type ContainerRegistryCacheRule = import("./containerRegistryCacheRule").ContainerRegistryCacheRule;
export const ContainerRegistryCacheRule: typeof import("./containerRegistryCacheRule").ContainerRegistryCacheRule = null as any;
utilities.lazyLoad(exports, ["ContainerRegistryCacheRule"], () => require("./containerRegistryCacheRule"));

export { ContainerRegistryScopeMapArgs, ContainerRegistryScopeMapState } from "./containerRegistryScopeMap";
export type ContainerRegistryScopeMap = import("./containerRegistryScopeMap").ContainerRegistryScopeMap;
export const ContainerRegistryScopeMap: typeof import("./containerRegistryScopeMap").ContainerRegistryScopeMap = null as any;
utilities.lazyLoad(exports, ["ContainerRegistryScopeMap"], () => require("./containerRegistryScopeMap"));

export { ContainerRegistryTaskArgs, ContainerRegistryTaskState } from "./containerRegistryTask";
export type ContainerRegistryTask = import("./containerRegistryTask").ContainerRegistryTask;
export const ContainerRegistryTask: typeof import("./containerRegistryTask").ContainerRegistryTask = null as any;
utilities.lazyLoad(exports, ["ContainerRegistryTask"], () => require("./containerRegistryTask"));

export { ContainerRegistryTaskScheduleRunNowArgs, ContainerRegistryTaskScheduleRunNowState } from "./containerRegistryTaskScheduleRunNow";
export type ContainerRegistryTaskScheduleRunNow = import("./containerRegistryTaskScheduleRunNow").ContainerRegistryTaskScheduleRunNow;
export const ContainerRegistryTaskScheduleRunNow: typeof import("./containerRegistryTaskScheduleRunNow").ContainerRegistryTaskScheduleRunNow = null as any;
utilities.lazyLoad(exports, ["ContainerRegistryTaskScheduleRunNow"], () => require("./containerRegistryTaskScheduleRunNow"));

export { ContainerRegistryTokenArgs, ContainerRegistryTokenState } from "./containerRegistryToken";
export type ContainerRegistryToken = import("./containerRegistryToken").ContainerRegistryToken;
export const ContainerRegistryToken: typeof import("./containerRegistryToken").ContainerRegistryToken = null as any;
utilities.lazyLoad(exports, ["ContainerRegistryToken"], () => require("./containerRegistryToken"));

export { ContainerRegistryTokenPasswordArgs, ContainerRegistryTokenPasswordState } from "./containerRegistryTokenPassword";
export type ContainerRegistryTokenPassword = import("./containerRegistryTokenPassword").ContainerRegistryTokenPassword;
export const ContainerRegistryTokenPassword: typeof import("./containerRegistryTokenPassword").ContainerRegistryTokenPassword = null as any;
utilities.lazyLoad(exports, ["ContainerRegistryTokenPassword"], () => require("./containerRegistryTokenPassword"));

export { ContainerRegistryWebhookArgs, ContainerRegistryWebhookState } from "./containerRegistryWebhook";
export type ContainerRegistryWebhook = import("./containerRegistryWebhook").ContainerRegistryWebhook;
export const ContainerRegistryWebhook: typeof import("./containerRegistryWebhook").ContainerRegistryWebhook = null as any;
utilities.lazyLoad(exports, ["ContainerRegistryWebhook"], () => require("./containerRegistryWebhook"));

export { CosmosdbAccountArgs, CosmosdbAccountState } from "./cosmosdbAccount";
export type CosmosdbAccount = import("./cosmosdbAccount").CosmosdbAccount;
export const CosmosdbAccount: typeof import("./cosmosdbAccount").CosmosdbAccount = null as any;
utilities.lazyLoad(exports, ["CosmosdbAccount"], () => require("./cosmosdbAccount"));

export { CosmosdbCassandraClusterArgs, CosmosdbCassandraClusterState } from "./cosmosdbCassandraCluster";
export type CosmosdbCassandraCluster = import("./cosmosdbCassandraCluster").CosmosdbCassandraCluster;
export const CosmosdbCassandraCluster: typeof import("./cosmosdbCassandraCluster").CosmosdbCassandraCluster = null as any;
utilities.lazyLoad(exports, ["CosmosdbCassandraCluster"], () => require("./cosmosdbCassandraCluster"));

export { CosmosdbCassandraDatacenterArgs, CosmosdbCassandraDatacenterState } from "./cosmosdbCassandraDatacenter";
export type CosmosdbCassandraDatacenter = import("./cosmosdbCassandraDatacenter").CosmosdbCassandraDatacenter;
export const CosmosdbCassandraDatacenter: typeof import("./cosmosdbCassandraDatacenter").CosmosdbCassandraDatacenter = null as any;
utilities.lazyLoad(exports, ["CosmosdbCassandraDatacenter"], () => require("./cosmosdbCassandraDatacenter"));

export { CosmosdbCassandraKeyspaceArgs, CosmosdbCassandraKeyspaceState } from "./cosmosdbCassandraKeyspace";
export type CosmosdbCassandraKeyspace = import("./cosmosdbCassandraKeyspace").CosmosdbCassandraKeyspace;
export const CosmosdbCassandraKeyspace: typeof import("./cosmosdbCassandraKeyspace").CosmosdbCassandraKeyspace = null as any;
utilities.lazyLoad(exports, ["CosmosdbCassandraKeyspace"], () => require("./cosmosdbCassandraKeyspace"));

export { CosmosdbCassandraTableArgs, CosmosdbCassandraTableState } from "./cosmosdbCassandraTable";
export type CosmosdbCassandraTable = import("./cosmosdbCassandraTable").CosmosdbCassandraTable;
export const CosmosdbCassandraTable: typeof import("./cosmosdbCassandraTable").CosmosdbCassandraTable = null as any;
utilities.lazyLoad(exports, ["CosmosdbCassandraTable"], () => require("./cosmosdbCassandraTable"));

export { CosmosdbGremlinDatabaseArgs, CosmosdbGremlinDatabaseState } from "./cosmosdbGremlinDatabase";
export type CosmosdbGremlinDatabase = import("./cosmosdbGremlinDatabase").CosmosdbGremlinDatabase;
export const CosmosdbGremlinDatabase: typeof import("./cosmosdbGremlinDatabase").CosmosdbGremlinDatabase = null as any;
utilities.lazyLoad(exports, ["CosmosdbGremlinDatabase"], () => require("./cosmosdbGremlinDatabase"));

export { CosmosdbGremlinGraphArgs, CosmosdbGremlinGraphState } from "./cosmosdbGremlinGraph";
export type CosmosdbGremlinGraph = import("./cosmosdbGremlinGraph").CosmosdbGremlinGraph;
export const CosmosdbGremlinGraph: typeof import("./cosmosdbGremlinGraph").CosmosdbGremlinGraph = null as any;
utilities.lazyLoad(exports, ["CosmosdbGremlinGraph"], () => require("./cosmosdbGremlinGraph"));

export { CosmosdbMongoCollectionArgs, CosmosdbMongoCollectionState } from "./cosmosdbMongoCollection";
export type CosmosdbMongoCollection = import("./cosmosdbMongoCollection").CosmosdbMongoCollection;
export const CosmosdbMongoCollection: typeof import("./cosmosdbMongoCollection").CosmosdbMongoCollection = null as any;
utilities.lazyLoad(exports, ["CosmosdbMongoCollection"], () => require("./cosmosdbMongoCollection"));

export { CosmosdbMongoDatabaseArgs, CosmosdbMongoDatabaseState } from "./cosmosdbMongoDatabase";
export type CosmosdbMongoDatabase = import("./cosmosdbMongoDatabase").CosmosdbMongoDatabase;
export const CosmosdbMongoDatabase: typeof import("./cosmosdbMongoDatabase").CosmosdbMongoDatabase = null as any;
utilities.lazyLoad(exports, ["CosmosdbMongoDatabase"], () => require("./cosmosdbMongoDatabase"));

export { CosmosdbMongoRoleDefinitionArgs, CosmosdbMongoRoleDefinitionState } from "./cosmosdbMongoRoleDefinition";
export type CosmosdbMongoRoleDefinition = import("./cosmosdbMongoRoleDefinition").CosmosdbMongoRoleDefinition;
export const CosmosdbMongoRoleDefinition: typeof import("./cosmosdbMongoRoleDefinition").CosmosdbMongoRoleDefinition = null as any;
utilities.lazyLoad(exports, ["CosmosdbMongoRoleDefinition"], () => require("./cosmosdbMongoRoleDefinition"));

export { CosmosdbMongoUserDefinitionArgs, CosmosdbMongoUserDefinitionState } from "./cosmosdbMongoUserDefinition";
export type CosmosdbMongoUserDefinition = import("./cosmosdbMongoUserDefinition").CosmosdbMongoUserDefinition;
export const CosmosdbMongoUserDefinition: typeof import("./cosmosdbMongoUserDefinition").CosmosdbMongoUserDefinition = null as any;
utilities.lazyLoad(exports, ["CosmosdbMongoUserDefinition"], () => require("./cosmosdbMongoUserDefinition"));

export { CosmosdbPostgresqlClusterArgs, CosmosdbPostgresqlClusterState } from "./cosmosdbPostgresqlCluster";
export type CosmosdbPostgresqlCluster = import("./cosmosdbPostgresqlCluster").CosmosdbPostgresqlCluster;
export const CosmosdbPostgresqlCluster: typeof import("./cosmosdbPostgresqlCluster").CosmosdbPostgresqlCluster = null as any;
utilities.lazyLoad(exports, ["CosmosdbPostgresqlCluster"], () => require("./cosmosdbPostgresqlCluster"));

export { CosmosdbPostgresqlCoordinatorConfigurationArgs, CosmosdbPostgresqlCoordinatorConfigurationState } from "./cosmosdbPostgresqlCoordinatorConfiguration";
export type CosmosdbPostgresqlCoordinatorConfiguration = import("./cosmosdbPostgresqlCoordinatorConfiguration").CosmosdbPostgresqlCoordinatorConfiguration;
export const CosmosdbPostgresqlCoordinatorConfiguration: typeof import("./cosmosdbPostgresqlCoordinatorConfiguration").CosmosdbPostgresqlCoordinatorConfiguration = null as any;
utilities.lazyLoad(exports, ["CosmosdbPostgresqlCoordinatorConfiguration"], () => require("./cosmosdbPostgresqlCoordinatorConfiguration"));

export { CosmosdbPostgresqlFirewallRuleArgs, CosmosdbPostgresqlFirewallRuleState } from "./cosmosdbPostgresqlFirewallRule";
export type CosmosdbPostgresqlFirewallRule = import("./cosmosdbPostgresqlFirewallRule").CosmosdbPostgresqlFirewallRule;
export const CosmosdbPostgresqlFirewallRule: typeof import("./cosmosdbPostgresqlFirewallRule").CosmosdbPostgresqlFirewallRule = null as any;
utilities.lazyLoad(exports, ["CosmosdbPostgresqlFirewallRule"], () => require("./cosmosdbPostgresqlFirewallRule"));

export { CosmosdbPostgresqlNodeConfigurationArgs, CosmosdbPostgresqlNodeConfigurationState } from "./cosmosdbPostgresqlNodeConfiguration";
export type CosmosdbPostgresqlNodeConfiguration = import("./cosmosdbPostgresqlNodeConfiguration").CosmosdbPostgresqlNodeConfiguration;
export const CosmosdbPostgresqlNodeConfiguration: typeof import("./cosmosdbPostgresqlNodeConfiguration").CosmosdbPostgresqlNodeConfiguration = null as any;
utilities.lazyLoad(exports, ["CosmosdbPostgresqlNodeConfiguration"], () => require("./cosmosdbPostgresqlNodeConfiguration"));

export { CosmosdbPostgresqlRoleArgs, CosmosdbPostgresqlRoleState } from "./cosmosdbPostgresqlRole";
export type CosmosdbPostgresqlRole = import("./cosmosdbPostgresqlRole").CosmosdbPostgresqlRole;
export const CosmosdbPostgresqlRole: typeof import("./cosmosdbPostgresqlRole").CosmosdbPostgresqlRole = null as any;
utilities.lazyLoad(exports, ["CosmosdbPostgresqlRole"], () => require("./cosmosdbPostgresqlRole"));

export { CosmosdbSqlContainerArgs, CosmosdbSqlContainerState } from "./cosmosdbSqlContainer";
export type CosmosdbSqlContainer = import("./cosmosdbSqlContainer").CosmosdbSqlContainer;
export const CosmosdbSqlContainer: typeof import("./cosmosdbSqlContainer").CosmosdbSqlContainer = null as any;
utilities.lazyLoad(exports, ["CosmosdbSqlContainer"], () => require("./cosmosdbSqlContainer"));

export { CosmosdbSqlDatabaseArgs, CosmosdbSqlDatabaseState } from "./cosmosdbSqlDatabase";
export type CosmosdbSqlDatabase = import("./cosmosdbSqlDatabase").CosmosdbSqlDatabase;
export const CosmosdbSqlDatabase: typeof import("./cosmosdbSqlDatabase").CosmosdbSqlDatabase = null as any;
utilities.lazyLoad(exports, ["CosmosdbSqlDatabase"], () => require("./cosmosdbSqlDatabase"));

export { CosmosdbSqlDedicatedGatewayArgs, CosmosdbSqlDedicatedGatewayState } from "./cosmosdbSqlDedicatedGateway";
export type CosmosdbSqlDedicatedGateway = import("./cosmosdbSqlDedicatedGateway").CosmosdbSqlDedicatedGateway;
export const CosmosdbSqlDedicatedGateway: typeof import("./cosmosdbSqlDedicatedGateway").CosmosdbSqlDedicatedGateway = null as any;
utilities.lazyLoad(exports, ["CosmosdbSqlDedicatedGateway"], () => require("./cosmosdbSqlDedicatedGateway"));

export { CosmosdbSqlFunctionArgs, CosmosdbSqlFunctionState } from "./cosmosdbSqlFunction";
export type CosmosdbSqlFunction = import("./cosmosdbSqlFunction").CosmosdbSqlFunction;
export const CosmosdbSqlFunction: typeof import("./cosmosdbSqlFunction").CosmosdbSqlFunction = null as any;
utilities.lazyLoad(exports, ["CosmosdbSqlFunction"], () => require("./cosmosdbSqlFunction"));

export { CosmosdbSqlRoleAssignmentArgs, CosmosdbSqlRoleAssignmentState } from "./cosmosdbSqlRoleAssignment";
export type CosmosdbSqlRoleAssignment = import("./cosmosdbSqlRoleAssignment").CosmosdbSqlRoleAssignment;
export const CosmosdbSqlRoleAssignment: typeof import("./cosmosdbSqlRoleAssignment").CosmosdbSqlRoleAssignment = null as any;
utilities.lazyLoad(exports, ["CosmosdbSqlRoleAssignment"], () => require("./cosmosdbSqlRoleAssignment"));

export { CosmosdbSqlRoleDefinitionArgs, CosmosdbSqlRoleDefinitionState } from "./cosmosdbSqlRoleDefinition";
export type CosmosdbSqlRoleDefinition = import("./cosmosdbSqlRoleDefinition").CosmosdbSqlRoleDefinition;
export const CosmosdbSqlRoleDefinition: typeof import("./cosmosdbSqlRoleDefinition").CosmosdbSqlRoleDefinition = null as any;
utilities.lazyLoad(exports, ["CosmosdbSqlRoleDefinition"], () => require("./cosmosdbSqlRoleDefinition"));

export { CosmosdbSqlStoredProcedureArgs, CosmosdbSqlStoredProcedureState } from "./cosmosdbSqlStoredProcedure";
export type CosmosdbSqlStoredProcedure = import("./cosmosdbSqlStoredProcedure").CosmosdbSqlStoredProcedure;
export const CosmosdbSqlStoredProcedure: typeof import("./cosmosdbSqlStoredProcedure").CosmosdbSqlStoredProcedure = null as any;
utilities.lazyLoad(exports, ["CosmosdbSqlStoredProcedure"], () => require("./cosmosdbSqlStoredProcedure"));

export { CosmosdbSqlTriggerArgs, CosmosdbSqlTriggerState } from "./cosmosdbSqlTrigger";
export type CosmosdbSqlTrigger = import("./cosmosdbSqlTrigger").CosmosdbSqlTrigger;
export const CosmosdbSqlTrigger: typeof import("./cosmosdbSqlTrigger").CosmosdbSqlTrigger = null as any;
utilities.lazyLoad(exports, ["CosmosdbSqlTrigger"], () => require("./cosmosdbSqlTrigger"));

export { CosmosdbTableArgs, CosmosdbTableState } from "./cosmosdbTable";
export type CosmosdbTable = import("./cosmosdbTable").CosmosdbTable;
export const CosmosdbTable: typeof import("./cosmosdbTable").CosmosdbTable = null as any;
utilities.lazyLoad(exports, ["CosmosdbTable"], () => require("./cosmosdbTable"));

export { CostAnomalyAlertArgs, CostAnomalyAlertState } from "./costAnomalyAlert";
export type CostAnomalyAlert = import("./costAnomalyAlert").CostAnomalyAlert;
export const CostAnomalyAlert: typeof import("./costAnomalyAlert").CostAnomalyAlert = null as any;
utilities.lazyLoad(exports, ["CostAnomalyAlert"], () => require("./costAnomalyAlert"));

export { CostManagementScheduledActionArgs, CostManagementScheduledActionState } from "./costManagementScheduledAction";
export type CostManagementScheduledAction = import("./costManagementScheduledAction").CostManagementScheduledAction;
export const CostManagementScheduledAction: typeof import("./costManagementScheduledAction").CostManagementScheduledAction = null as any;
utilities.lazyLoad(exports, ["CostManagementScheduledAction"], () => require("./costManagementScheduledAction"));

export { CustomIpPrefixArgs, CustomIpPrefixState } from "./customIpPrefix";
export type CustomIpPrefix = import("./customIpPrefix").CustomIpPrefix;
export const CustomIpPrefix: typeof import("./customIpPrefix").CustomIpPrefix = null as any;
utilities.lazyLoad(exports, ["CustomIpPrefix"], () => require("./customIpPrefix"));

export { CustomProviderArgs, CustomProviderState } from "./customProvider";
export type CustomProvider = import("./customProvider").CustomProvider;
export const CustomProvider: typeof import("./customProvider").CustomProvider = null as any;
utilities.lazyLoad(exports, ["CustomProvider"], () => require("./customProvider"));

export { DashboardGrafanaArgs, DashboardGrafanaState } from "./dashboardGrafana";
export type DashboardGrafana = import("./dashboardGrafana").DashboardGrafana;
export const DashboardGrafana: typeof import("./dashboardGrafana").DashboardGrafana = null as any;
utilities.lazyLoad(exports, ["DashboardGrafana"], () => require("./dashboardGrafana"));

export { DataFactoryArgs, DataFactoryState } from "./dataFactory";
export type DataFactory = import("./dataFactory").DataFactory;
export const DataFactory: typeof import("./dataFactory").DataFactory = null as any;
utilities.lazyLoad(exports, ["DataFactory"], () => require("./dataFactory"));

export { DataFactoryCredentialServicePrincipalArgs, DataFactoryCredentialServicePrincipalState } from "./dataFactoryCredentialServicePrincipal";
export type DataFactoryCredentialServicePrincipal = import("./dataFactoryCredentialServicePrincipal").DataFactoryCredentialServicePrincipal;
export const DataFactoryCredentialServicePrincipal: typeof import("./dataFactoryCredentialServicePrincipal").DataFactoryCredentialServicePrincipal = null as any;
utilities.lazyLoad(exports, ["DataFactoryCredentialServicePrincipal"], () => require("./dataFactoryCredentialServicePrincipal"));

export { DataFactoryCredentialUserManagedIdentityArgs, DataFactoryCredentialUserManagedIdentityState } from "./dataFactoryCredentialUserManagedIdentity";
export type DataFactoryCredentialUserManagedIdentity = import("./dataFactoryCredentialUserManagedIdentity").DataFactoryCredentialUserManagedIdentity;
export const DataFactoryCredentialUserManagedIdentity: typeof import("./dataFactoryCredentialUserManagedIdentity").DataFactoryCredentialUserManagedIdentity = null as any;
utilities.lazyLoad(exports, ["DataFactoryCredentialUserManagedIdentity"], () => require("./dataFactoryCredentialUserManagedIdentity"));

export { DataFactoryCustomDatasetArgs, DataFactoryCustomDatasetState } from "./dataFactoryCustomDataset";
export type DataFactoryCustomDataset = import("./dataFactoryCustomDataset").DataFactoryCustomDataset;
export const DataFactoryCustomDataset: typeof import("./dataFactoryCustomDataset").DataFactoryCustomDataset = null as any;
utilities.lazyLoad(exports, ["DataFactoryCustomDataset"], () => require("./dataFactoryCustomDataset"));

export { DataFactoryDataFlowArgs, DataFactoryDataFlowState } from "./dataFactoryDataFlow";
export type DataFactoryDataFlow = import("./dataFactoryDataFlow").DataFactoryDataFlow;
export const DataFactoryDataFlow: typeof import("./dataFactoryDataFlow").DataFactoryDataFlow = null as any;
utilities.lazyLoad(exports, ["DataFactoryDataFlow"], () => require("./dataFactoryDataFlow"));

export { DataFactoryDatasetAzureBlobArgs, DataFactoryDatasetAzureBlobState } from "./dataFactoryDatasetAzureBlob";
export type DataFactoryDatasetAzureBlob = import("./dataFactoryDatasetAzureBlob").DataFactoryDatasetAzureBlob;
export const DataFactoryDatasetAzureBlob: typeof import("./dataFactoryDatasetAzureBlob").DataFactoryDatasetAzureBlob = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetAzureBlob"], () => require("./dataFactoryDatasetAzureBlob"));

export { DataFactoryDatasetAzureSqlTableArgs, DataFactoryDatasetAzureSqlTableState } from "./dataFactoryDatasetAzureSqlTable";
export type DataFactoryDatasetAzureSqlTable = import("./dataFactoryDatasetAzureSqlTable").DataFactoryDatasetAzureSqlTable;
export const DataFactoryDatasetAzureSqlTable: typeof import("./dataFactoryDatasetAzureSqlTable").DataFactoryDatasetAzureSqlTable = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetAzureSqlTable"], () => require("./dataFactoryDatasetAzureSqlTable"));

export { DataFactoryDatasetBinaryArgs, DataFactoryDatasetBinaryState } from "./dataFactoryDatasetBinary";
export type DataFactoryDatasetBinary = import("./dataFactoryDatasetBinary").DataFactoryDatasetBinary;
export const DataFactoryDatasetBinary: typeof import("./dataFactoryDatasetBinary").DataFactoryDatasetBinary = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetBinary"], () => require("./dataFactoryDatasetBinary"));

export { DataFactoryDatasetCosmosdbSqlapiArgs, DataFactoryDatasetCosmosdbSqlapiState } from "./dataFactoryDatasetCosmosdbSqlapi";
export type DataFactoryDatasetCosmosdbSqlapi = import("./dataFactoryDatasetCosmosdbSqlapi").DataFactoryDatasetCosmosdbSqlapi;
export const DataFactoryDatasetCosmosdbSqlapi: typeof import("./dataFactoryDatasetCosmosdbSqlapi").DataFactoryDatasetCosmosdbSqlapi = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetCosmosdbSqlapi"], () => require("./dataFactoryDatasetCosmosdbSqlapi"));

export { DataFactoryDatasetDelimitedTextArgs, DataFactoryDatasetDelimitedTextState } from "./dataFactoryDatasetDelimitedText";
export type DataFactoryDatasetDelimitedText = import("./dataFactoryDatasetDelimitedText").DataFactoryDatasetDelimitedText;
export const DataFactoryDatasetDelimitedText: typeof import("./dataFactoryDatasetDelimitedText").DataFactoryDatasetDelimitedText = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetDelimitedText"], () => require("./dataFactoryDatasetDelimitedText"));

export { DataFactoryDatasetHttpArgs, DataFactoryDatasetHttpState } from "./dataFactoryDatasetHttp";
export type DataFactoryDatasetHttp = import("./dataFactoryDatasetHttp").DataFactoryDatasetHttp;
export const DataFactoryDatasetHttp: typeof import("./dataFactoryDatasetHttp").DataFactoryDatasetHttp = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetHttp"], () => require("./dataFactoryDatasetHttp"));

export { DataFactoryDatasetJsonArgs, DataFactoryDatasetJsonState } from "./dataFactoryDatasetJson";
export type DataFactoryDatasetJson = import("./dataFactoryDatasetJson").DataFactoryDatasetJson;
export const DataFactoryDatasetJson: typeof import("./dataFactoryDatasetJson").DataFactoryDatasetJson = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetJson"], () => require("./dataFactoryDatasetJson"));

export { DataFactoryDatasetMysqlArgs, DataFactoryDatasetMysqlState } from "./dataFactoryDatasetMysql";
export type DataFactoryDatasetMysql = import("./dataFactoryDatasetMysql").DataFactoryDatasetMysql;
export const DataFactoryDatasetMysql: typeof import("./dataFactoryDatasetMysql").DataFactoryDatasetMysql = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetMysql"], () => require("./dataFactoryDatasetMysql"));

export { DataFactoryDatasetParquetArgs, DataFactoryDatasetParquetState } from "./dataFactoryDatasetParquet";
export type DataFactoryDatasetParquet = import("./dataFactoryDatasetParquet").DataFactoryDatasetParquet;
export const DataFactoryDatasetParquet: typeof import("./dataFactoryDatasetParquet").DataFactoryDatasetParquet = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetParquet"], () => require("./dataFactoryDatasetParquet"));

export { DataFactoryDatasetPostgresqlArgs, DataFactoryDatasetPostgresqlState } from "./dataFactoryDatasetPostgresql";
export type DataFactoryDatasetPostgresql = import("./dataFactoryDatasetPostgresql").DataFactoryDatasetPostgresql;
export const DataFactoryDatasetPostgresql: typeof import("./dataFactoryDatasetPostgresql").DataFactoryDatasetPostgresql = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetPostgresql"], () => require("./dataFactoryDatasetPostgresql"));

export { DataFactoryDatasetSnowflakeArgs, DataFactoryDatasetSnowflakeState } from "./dataFactoryDatasetSnowflake";
export type DataFactoryDatasetSnowflake = import("./dataFactoryDatasetSnowflake").DataFactoryDatasetSnowflake;
export const DataFactoryDatasetSnowflake: typeof import("./dataFactoryDatasetSnowflake").DataFactoryDatasetSnowflake = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetSnowflake"], () => require("./dataFactoryDatasetSnowflake"));

export { DataFactoryDatasetSqlServerTableArgs, DataFactoryDatasetSqlServerTableState } from "./dataFactoryDatasetSqlServerTable";
export type DataFactoryDatasetSqlServerTable = import("./dataFactoryDatasetSqlServerTable").DataFactoryDatasetSqlServerTable;
export const DataFactoryDatasetSqlServerTable: typeof import("./dataFactoryDatasetSqlServerTable").DataFactoryDatasetSqlServerTable = null as any;
utilities.lazyLoad(exports, ["DataFactoryDatasetSqlServerTable"], () => require("./dataFactoryDatasetSqlServerTable"));

export { DataFactoryFlowletDataFlowArgs, DataFactoryFlowletDataFlowState } from "./dataFactoryFlowletDataFlow";
export type DataFactoryFlowletDataFlow = import("./dataFactoryFlowletDataFlow").DataFactoryFlowletDataFlow;
export const DataFactoryFlowletDataFlow: typeof import("./dataFactoryFlowletDataFlow").DataFactoryFlowletDataFlow = null as any;
utilities.lazyLoad(exports, ["DataFactoryFlowletDataFlow"], () => require("./dataFactoryFlowletDataFlow"));

export { DataFactoryIntegrationRuntimeAzureArgs, DataFactoryIntegrationRuntimeAzureState } from "./dataFactoryIntegrationRuntimeAzure";
export type DataFactoryIntegrationRuntimeAzure = import("./dataFactoryIntegrationRuntimeAzure").DataFactoryIntegrationRuntimeAzure;
export const DataFactoryIntegrationRuntimeAzure: typeof import("./dataFactoryIntegrationRuntimeAzure").DataFactoryIntegrationRuntimeAzure = null as any;
utilities.lazyLoad(exports, ["DataFactoryIntegrationRuntimeAzure"], () => require("./dataFactoryIntegrationRuntimeAzure"));

export { DataFactoryIntegrationRuntimeAzureSsisArgs, DataFactoryIntegrationRuntimeAzureSsisState } from "./dataFactoryIntegrationRuntimeAzureSsis";
export type DataFactoryIntegrationRuntimeAzureSsis = import("./dataFactoryIntegrationRuntimeAzureSsis").DataFactoryIntegrationRuntimeAzureSsis;
export const DataFactoryIntegrationRuntimeAzureSsis: typeof import("./dataFactoryIntegrationRuntimeAzureSsis").DataFactoryIntegrationRuntimeAzureSsis = null as any;
utilities.lazyLoad(exports, ["DataFactoryIntegrationRuntimeAzureSsis"], () => require("./dataFactoryIntegrationRuntimeAzureSsis"));

export { DataFactoryIntegrationRuntimeSelfHostedArgs, DataFactoryIntegrationRuntimeSelfHostedState } from "./dataFactoryIntegrationRuntimeSelfHosted";
export type DataFactoryIntegrationRuntimeSelfHosted = import("./dataFactoryIntegrationRuntimeSelfHosted").DataFactoryIntegrationRuntimeSelfHosted;
export const DataFactoryIntegrationRuntimeSelfHosted: typeof import("./dataFactoryIntegrationRuntimeSelfHosted").DataFactoryIntegrationRuntimeSelfHosted = null as any;
utilities.lazyLoad(exports, ["DataFactoryIntegrationRuntimeSelfHosted"], () => require("./dataFactoryIntegrationRuntimeSelfHosted"));

export { DataFactoryLinkedCustomServiceArgs, DataFactoryLinkedCustomServiceState } from "./dataFactoryLinkedCustomService";
export type DataFactoryLinkedCustomService = import("./dataFactoryLinkedCustomService").DataFactoryLinkedCustomService;
export const DataFactoryLinkedCustomService: typeof import("./dataFactoryLinkedCustomService").DataFactoryLinkedCustomService = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedCustomService"], () => require("./dataFactoryLinkedCustomService"));

export { DataFactoryLinkedServiceAzureBlobStorageArgs, DataFactoryLinkedServiceAzureBlobStorageState } from "./dataFactoryLinkedServiceAzureBlobStorage";
export type DataFactoryLinkedServiceAzureBlobStorage = import("./dataFactoryLinkedServiceAzureBlobStorage").DataFactoryLinkedServiceAzureBlobStorage;
export const DataFactoryLinkedServiceAzureBlobStorage: typeof import("./dataFactoryLinkedServiceAzureBlobStorage").DataFactoryLinkedServiceAzureBlobStorage = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceAzureBlobStorage"], () => require("./dataFactoryLinkedServiceAzureBlobStorage"));

export { DataFactoryLinkedServiceAzureDatabricksArgs, DataFactoryLinkedServiceAzureDatabricksState } from "./dataFactoryLinkedServiceAzureDatabricks";
export type DataFactoryLinkedServiceAzureDatabricks = import("./dataFactoryLinkedServiceAzureDatabricks").DataFactoryLinkedServiceAzureDatabricks;
export const DataFactoryLinkedServiceAzureDatabricks: typeof import("./dataFactoryLinkedServiceAzureDatabricks").DataFactoryLinkedServiceAzureDatabricks = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceAzureDatabricks"], () => require("./dataFactoryLinkedServiceAzureDatabricks"));

export { DataFactoryLinkedServiceAzureFileStorageArgs, DataFactoryLinkedServiceAzureFileStorageState } from "./dataFactoryLinkedServiceAzureFileStorage";
export type DataFactoryLinkedServiceAzureFileStorage = import("./dataFactoryLinkedServiceAzureFileStorage").DataFactoryLinkedServiceAzureFileStorage;
export const DataFactoryLinkedServiceAzureFileStorage: typeof import("./dataFactoryLinkedServiceAzureFileStorage").DataFactoryLinkedServiceAzureFileStorage = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceAzureFileStorage"], () => require("./dataFactoryLinkedServiceAzureFileStorage"));

export { DataFactoryLinkedServiceAzureFunctionArgs, DataFactoryLinkedServiceAzureFunctionState } from "./dataFactoryLinkedServiceAzureFunction";
export type DataFactoryLinkedServiceAzureFunction = import("./dataFactoryLinkedServiceAzureFunction").DataFactoryLinkedServiceAzureFunction;
export const DataFactoryLinkedServiceAzureFunction: typeof import("./dataFactoryLinkedServiceAzureFunction").DataFactoryLinkedServiceAzureFunction = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceAzureFunction"], () => require("./dataFactoryLinkedServiceAzureFunction"));

export { DataFactoryLinkedServiceAzureSearchArgs, DataFactoryLinkedServiceAzureSearchState } from "./dataFactoryLinkedServiceAzureSearch";
export type DataFactoryLinkedServiceAzureSearch = import("./dataFactoryLinkedServiceAzureSearch").DataFactoryLinkedServiceAzureSearch;
export const DataFactoryLinkedServiceAzureSearch: typeof import("./dataFactoryLinkedServiceAzureSearch").DataFactoryLinkedServiceAzureSearch = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceAzureSearch"], () => require("./dataFactoryLinkedServiceAzureSearch"));

export { DataFactoryLinkedServiceAzureSqlDatabaseArgs, DataFactoryLinkedServiceAzureSqlDatabaseState } from "./dataFactoryLinkedServiceAzureSqlDatabase";
export type DataFactoryLinkedServiceAzureSqlDatabase = import("./dataFactoryLinkedServiceAzureSqlDatabase").DataFactoryLinkedServiceAzureSqlDatabase;
export const DataFactoryLinkedServiceAzureSqlDatabase: typeof import("./dataFactoryLinkedServiceAzureSqlDatabase").DataFactoryLinkedServiceAzureSqlDatabase = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceAzureSqlDatabase"], () => require("./dataFactoryLinkedServiceAzureSqlDatabase"));

export { DataFactoryLinkedServiceAzureTableStorageArgs, DataFactoryLinkedServiceAzureTableStorageState } from "./dataFactoryLinkedServiceAzureTableStorage";
export type DataFactoryLinkedServiceAzureTableStorage = import("./dataFactoryLinkedServiceAzureTableStorage").DataFactoryLinkedServiceAzureTableStorage;
export const DataFactoryLinkedServiceAzureTableStorage: typeof import("./dataFactoryLinkedServiceAzureTableStorage").DataFactoryLinkedServiceAzureTableStorage = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceAzureTableStorage"], () => require("./dataFactoryLinkedServiceAzureTableStorage"));

export { DataFactoryLinkedServiceCosmosdbArgs, DataFactoryLinkedServiceCosmosdbState } from "./dataFactoryLinkedServiceCosmosdb";
export type DataFactoryLinkedServiceCosmosdb = import("./dataFactoryLinkedServiceCosmosdb").DataFactoryLinkedServiceCosmosdb;
export const DataFactoryLinkedServiceCosmosdb: typeof import("./dataFactoryLinkedServiceCosmosdb").DataFactoryLinkedServiceCosmosdb = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceCosmosdb"], () => require("./dataFactoryLinkedServiceCosmosdb"));

export { DataFactoryLinkedServiceCosmosdbMongoapiArgs, DataFactoryLinkedServiceCosmosdbMongoapiState } from "./dataFactoryLinkedServiceCosmosdbMongoapi";
export type DataFactoryLinkedServiceCosmosdbMongoapi = import("./dataFactoryLinkedServiceCosmosdbMongoapi").DataFactoryLinkedServiceCosmosdbMongoapi;
export const DataFactoryLinkedServiceCosmosdbMongoapi: typeof import("./dataFactoryLinkedServiceCosmosdbMongoapi").DataFactoryLinkedServiceCosmosdbMongoapi = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceCosmosdbMongoapi"], () => require("./dataFactoryLinkedServiceCosmosdbMongoapi"));

export { DataFactoryLinkedServiceDataLakeStorageGen2Args, DataFactoryLinkedServiceDataLakeStorageGen2State } from "./dataFactoryLinkedServiceDataLakeStorageGen2";
export type DataFactoryLinkedServiceDataLakeStorageGen2 = import("./dataFactoryLinkedServiceDataLakeStorageGen2").DataFactoryLinkedServiceDataLakeStorageGen2;
export const DataFactoryLinkedServiceDataLakeStorageGen2: typeof import("./dataFactoryLinkedServiceDataLakeStorageGen2").DataFactoryLinkedServiceDataLakeStorageGen2 = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceDataLakeStorageGen2"], () => require("./dataFactoryLinkedServiceDataLakeStorageGen2"));

export { DataFactoryLinkedServiceKeyVaultArgs, DataFactoryLinkedServiceKeyVaultState } from "./dataFactoryLinkedServiceKeyVault";
export type DataFactoryLinkedServiceKeyVault = import("./dataFactoryLinkedServiceKeyVault").DataFactoryLinkedServiceKeyVault;
export const DataFactoryLinkedServiceKeyVault: typeof import("./dataFactoryLinkedServiceKeyVault").DataFactoryLinkedServiceKeyVault = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceKeyVault"], () => require("./dataFactoryLinkedServiceKeyVault"));

export { DataFactoryLinkedServiceKustoArgs, DataFactoryLinkedServiceKustoState } from "./dataFactoryLinkedServiceKusto";
export type DataFactoryLinkedServiceKusto = import("./dataFactoryLinkedServiceKusto").DataFactoryLinkedServiceKusto;
export const DataFactoryLinkedServiceKusto: typeof import("./dataFactoryLinkedServiceKusto").DataFactoryLinkedServiceKusto = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceKusto"], () => require("./dataFactoryLinkedServiceKusto"));

export { DataFactoryLinkedServiceMysqlArgs, DataFactoryLinkedServiceMysqlState } from "./dataFactoryLinkedServiceMysql";
export type DataFactoryLinkedServiceMysql = import("./dataFactoryLinkedServiceMysql").DataFactoryLinkedServiceMysql;
export const DataFactoryLinkedServiceMysql: typeof import("./dataFactoryLinkedServiceMysql").DataFactoryLinkedServiceMysql = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceMysql"], () => require("./dataFactoryLinkedServiceMysql"));

export { DataFactoryLinkedServiceOdataArgs, DataFactoryLinkedServiceOdataState } from "./dataFactoryLinkedServiceOdata";
export type DataFactoryLinkedServiceOdata = import("./dataFactoryLinkedServiceOdata").DataFactoryLinkedServiceOdata;
export const DataFactoryLinkedServiceOdata: typeof import("./dataFactoryLinkedServiceOdata").DataFactoryLinkedServiceOdata = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceOdata"], () => require("./dataFactoryLinkedServiceOdata"));

export { DataFactoryLinkedServiceOdbcArgs, DataFactoryLinkedServiceOdbcState } from "./dataFactoryLinkedServiceOdbc";
export type DataFactoryLinkedServiceOdbc = import("./dataFactoryLinkedServiceOdbc").DataFactoryLinkedServiceOdbc;
export const DataFactoryLinkedServiceOdbc: typeof import("./dataFactoryLinkedServiceOdbc").DataFactoryLinkedServiceOdbc = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceOdbc"], () => require("./dataFactoryLinkedServiceOdbc"));

export { DataFactoryLinkedServicePostgresqlArgs, DataFactoryLinkedServicePostgresqlState } from "./dataFactoryLinkedServicePostgresql";
export type DataFactoryLinkedServicePostgresql = import("./dataFactoryLinkedServicePostgresql").DataFactoryLinkedServicePostgresql;
export const DataFactoryLinkedServicePostgresql: typeof import("./dataFactoryLinkedServicePostgresql").DataFactoryLinkedServicePostgresql = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServicePostgresql"], () => require("./dataFactoryLinkedServicePostgresql"));

export { DataFactoryLinkedServiceSftpArgs, DataFactoryLinkedServiceSftpState } from "./dataFactoryLinkedServiceSftp";
export type DataFactoryLinkedServiceSftp = import("./dataFactoryLinkedServiceSftp").DataFactoryLinkedServiceSftp;
export const DataFactoryLinkedServiceSftp: typeof import("./dataFactoryLinkedServiceSftp").DataFactoryLinkedServiceSftp = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceSftp"], () => require("./dataFactoryLinkedServiceSftp"));

export { DataFactoryLinkedServiceSnowflakeArgs, DataFactoryLinkedServiceSnowflakeState } from "./dataFactoryLinkedServiceSnowflake";
export type DataFactoryLinkedServiceSnowflake = import("./dataFactoryLinkedServiceSnowflake").DataFactoryLinkedServiceSnowflake;
export const DataFactoryLinkedServiceSnowflake: typeof import("./dataFactoryLinkedServiceSnowflake").DataFactoryLinkedServiceSnowflake = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceSnowflake"], () => require("./dataFactoryLinkedServiceSnowflake"));

export { DataFactoryLinkedServiceSqlServerArgs, DataFactoryLinkedServiceSqlServerState } from "./dataFactoryLinkedServiceSqlServer";
export type DataFactoryLinkedServiceSqlServer = import("./dataFactoryLinkedServiceSqlServer").DataFactoryLinkedServiceSqlServer;
export const DataFactoryLinkedServiceSqlServer: typeof import("./dataFactoryLinkedServiceSqlServer").DataFactoryLinkedServiceSqlServer = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceSqlServer"], () => require("./dataFactoryLinkedServiceSqlServer"));

export { DataFactoryLinkedServiceSynapseArgs, DataFactoryLinkedServiceSynapseState } from "./dataFactoryLinkedServiceSynapse";
export type DataFactoryLinkedServiceSynapse = import("./dataFactoryLinkedServiceSynapse").DataFactoryLinkedServiceSynapse;
export const DataFactoryLinkedServiceSynapse: typeof import("./dataFactoryLinkedServiceSynapse").DataFactoryLinkedServiceSynapse = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceSynapse"], () => require("./dataFactoryLinkedServiceSynapse"));

export { DataFactoryLinkedServiceWebArgs, DataFactoryLinkedServiceWebState } from "./dataFactoryLinkedServiceWeb";
export type DataFactoryLinkedServiceWeb = import("./dataFactoryLinkedServiceWeb").DataFactoryLinkedServiceWeb;
export const DataFactoryLinkedServiceWeb: typeof import("./dataFactoryLinkedServiceWeb").DataFactoryLinkedServiceWeb = null as any;
utilities.lazyLoad(exports, ["DataFactoryLinkedServiceWeb"], () => require("./dataFactoryLinkedServiceWeb"));

export { DataFactoryManagedPrivateEndpointArgs, DataFactoryManagedPrivateEndpointState } from "./dataFactoryManagedPrivateEndpoint";
export type DataFactoryManagedPrivateEndpoint = import("./dataFactoryManagedPrivateEndpoint").DataFactoryManagedPrivateEndpoint;
export const DataFactoryManagedPrivateEndpoint: typeof import("./dataFactoryManagedPrivateEndpoint").DataFactoryManagedPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["DataFactoryManagedPrivateEndpoint"], () => require("./dataFactoryManagedPrivateEndpoint"));

export { DataFactoryPipelineArgs, DataFactoryPipelineState } from "./dataFactoryPipeline";
export type DataFactoryPipeline = import("./dataFactoryPipeline").DataFactoryPipeline;
export const DataFactoryPipeline: typeof import("./dataFactoryPipeline").DataFactoryPipeline = null as any;
utilities.lazyLoad(exports, ["DataFactoryPipeline"], () => require("./dataFactoryPipeline"));

export { DataFactoryTriggerBlobEventArgs, DataFactoryTriggerBlobEventState } from "./dataFactoryTriggerBlobEvent";
export type DataFactoryTriggerBlobEvent = import("./dataFactoryTriggerBlobEvent").DataFactoryTriggerBlobEvent;
export const DataFactoryTriggerBlobEvent: typeof import("./dataFactoryTriggerBlobEvent").DataFactoryTriggerBlobEvent = null as any;
utilities.lazyLoad(exports, ["DataFactoryTriggerBlobEvent"], () => require("./dataFactoryTriggerBlobEvent"));

export { DataFactoryTriggerCustomEventArgs, DataFactoryTriggerCustomEventState } from "./dataFactoryTriggerCustomEvent";
export type DataFactoryTriggerCustomEvent = import("./dataFactoryTriggerCustomEvent").DataFactoryTriggerCustomEvent;
export const DataFactoryTriggerCustomEvent: typeof import("./dataFactoryTriggerCustomEvent").DataFactoryTriggerCustomEvent = null as any;
utilities.lazyLoad(exports, ["DataFactoryTriggerCustomEvent"], () => require("./dataFactoryTriggerCustomEvent"));

export { DataFactoryTriggerScheduleArgs, DataFactoryTriggerScheduleState } from "./dataFactoryTriggerSchedule";
export type DataFactoryTriggerSchedule = import("./dataFactoryTriggerSchedule").DataFactoryTriggerSchedule;
export const DataFactoryTriggerSchedule: typeof import("./dataFactoryTriggerSchedule").DataFactoryTriggerSchedule = null as any;
utilities.lazyLoad(exports, ["DataFactoryTriggerSchedule"], () => require("./dataFactoryTriggerSchedule"));

export { DataFactoryTriggerTumblingWindowArgs, DataFactoryTriggerTumblingWindowState } from "./dataFactoryTriggerTumblingWindow";
export type DataFactoryTriggerTumblingWindow = import("./dataFactoryTriggerTumblingWindow").DataFactoryTriggerTumblingWindow;
export const DataFactoryTriggerTumblingWindow: typeof import("./dataFactoryTriggerTumblingWindow").DataFactoryTriggerTumblingWindow = null as any;
utilities.lazyLoad(exports, ["DataFactoryTriggerTumblingWindow"], () => require("./dataFactoryTriggerTumblingWindow"));

export { DataProtectionBackupInstanceBlobStorageArgs, DataProtectionBackupInstanceBlobStorageState } from "./dataProtectionBackupInstanceBlobStorage";
export type DataProtectionBackupInstanceBlobStorage = import("./dataProtectionBackupInstanceBlobStorage").DataProtectionBackupInstanceBlobStorage;
export const DataProtectionBackupInstanceBlobStorage: typeof import("./dataProtectionBackupInstanceBlobStorage").DataProtectionBackupInstanceBlobStorage = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupInstanceBlobStorage"], () => require("./dataProtectionBackupInstanceBlobStorage"));

export { DataProtectionBackupInstanceDiskArgs, DataProtectionBackupInstanceDiskState } from "./dataProtectionBackupInstanceDisk";
export type DataProtectionBackupInstanceDisk = import("./dataProtectionBackupInstanceDisk").DataProtectionBackupInstanceDisk;
export const DataProtectionBackupInstanceDisk: typeof import("./dataProtectionBackupInstanceDisk").DataProtectionBackupInstanceDisk = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupInstanceDisk"], () => require("./dataProtectionBackupInstanceDisk"));

export { DataProtectionBackupInstanceKubernetesClusterArgs, DataProtectionBackupInstanceKubernetesClusterState } from "./dataProtectionBackupInstanceKubernetesCluster";
export type DataProtectionBackupInstanceKubernetesCluster = import("./dataProtectionBackupInstanceKubernetesCluster").DataProtectionBackupInstanceKubernetesCluster;
export const DataProtectionBackupInstanceKubernetesCluster: typeof import("./dataProtectionBackupInstanceKubernetesCluster").DataProtectionBackupInstanceKubernetesCluster = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupInstanceKubernetesCluster"], () => require("./dataProtectionBackupInstanceKubernetesCluster"));

export { DataProtectionBackupInstancePostgresqlArgs, DataProtectionBackupInstancePostgresqlState } from "./dataProtectionBackupInstancePostgresql";
export type DataProtectionBackupInstancePostgresql = import("./dataProtectionBackupInstancePostgresql").DataProtectionBackupInstancePostgresql;
export const DataProtectionBackupInstancePostgresql: typeof import("./dataProtectionBackupInstancePostgresql").DataProtectionBackupInstancePostgresql = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupInstancePostgresql"], () => require("./dataProtectionBackupInstancePostgresql"));

export { DataProtectionBackupInstancePostgresqlFlexibleServerArgs, DataProtectionBackupInstancePostgresqlFlexibleServerState } from "./dataProtectionBackupInstancePostgresqlFlexibleServer";
export type DataProtectionBackupInstancePostgresqlFlexibleServer = import("./dataProtectionBackupInstancePostgresqlFlexibleServer").DataProtectionBackupInstancePostgresqlFlexibleServer;
export const DataProtectionBackupInstancePostgresqlFlexibleServer: typeof import("./dataProtectionBackupInstancePostgresqlFlexibleServer").DataProtectionBackupInstancePostgresqlFlexibleServer = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupInstancePostgresqlFlexibleServer"], () => require("./dataProtectionBackupInstancePostgresqlFlexibleServer"));

export { DataProtectionBackupPolicyBlobStorageArgs, DataProtectionBackupPolicyBlobStorageState } from "./dataProtectionBackupPolicyBlobStorage";
export type DataProtectionBackupPolicyBlobStorage = import("./dataProtectionBackupPolicyBlobStorage").DataProtectionBackupPolicyBlobStorage;
export const DataProtectionBackupPolicyBlobStorage: typeof import("./dataProtectionBackupPolicyBlobStorage").DataProtectionBackupPolicyBlobStorage = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupPolicyBlobStorage"], () => require("./dataProtectionBackupPolicyBlobStorage"));

export { DataProtectionBackupPolicyDiskArgs, DataProtectionBackupPolicyDiskState } from "./dataProtectionBackupPolicyDisk";
export type DataProtectionBackupPolicyDisk = import("./dataProtectionBackupPolicyDisk").DataProtectionBackupPolicyDisk;
export const DataProtectionBackupPolicyDisk: typeof import("./dataProtectionBackupPolicyDisk").DataProtectionBackupPolicyDisk = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupPolicyDisk"], () => require("./dataProtectionBackupPolicyDisk"));

export { DataProtectionBackupPolicyKubernetesClusterArgs, DataProtectionBackupPolicyKubernetesClusterState } from "./dataProtectionBackupPolicyKubernetesCluster";
export type DataProtectionBackupPolicyKubernetesCluster = import("./dataProtectionBackupPolicyKubernetesCluster").DataProtectionBackupPolicyKubernetesCluster;
export const DataProtectionBackupPolicyKubernetesCluster: typeof import("./dataProtectionBackupPolicyKubernetesCluster").DataProtectionBackupPolicyKubernetesCluster = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupPolicyKubernetesCluster"], () => require("./dataProtectionBackupPolicyKubernetesCluster"));

export { DataProtectionBackupPolicyPostgresqlArgs, DataProtectionBackupPolicyPostgresqlState } from "./dataProtectionBackupPolicyPostgresql";
export type DataProtectionBackupPolicyPostgresql = import("./dataProtectionBackupPolicyPostgresql").DataProtectionBackupPolicyPostgresql;
export const DataProtectionBackupPolicyPostgresql: typeof import("./dataProtectionBackupPolicyPostgresql").DataProtectionBackupPolicyPostgresql = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupPolicyPostgresql"], () => require("./dataProtectionBackupPolicyPostgresql"));

export { DataProtectionBackupPolicyPostgresqlFlexibleServerArgs, DataProtectionBackupPolicyPostgresqlFlexibleServerState } from "./dataProtectionBackupPolicyPostgresqlFlexibleServer";
export type DataProtectionBackupPolicyPostgresqlFlexibleServer = import("./dataProtectionBackupPolicyPostgresqlFlexibleServer").DataProtectionBackupPolicyPostgresqlFlexibleServer;
export const DataProtectionBackupPolicyPostgresqlFlexibleServer: typeof import("./dataProtectionBackupPolicyPostgresqlFlexibleServer").DataProtectionBackupPolicyPostgresqlFlexibleServer = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupPolicyPostgresqlFlexibleServer"], () => require("./dataProtectionBackupPolicyPostgresqlFlexibleServer"));

export { DataProtectionBackupVaultArgs, DataProtectionBackupVaultState } from "./dataProtectionBackupVault";
export type DataProtectionBackupVault = import("./dataProtectionBackupVault").DataProtectionBackupVault;
export const DataProtectionBackupVault: typeof import("./dataProtectionBackupVault").DataProtectionBackupVault = null as any;
utilities.lazyLoad(exports, ["DataProtectionBackupVault"], () => require("./dataProtectionBackupVault"));

export { DataProtectionResourceGuardArgs, DataProtectionResourceGuardState } from "./dataProtectionResourceGuard";
export type DataProtectionResourceGuard = import("./dataProtectionResourceGuard").DataProtectionResourceGuard;
export const DataProtectionResourceGuard: typeof import("./dataProtectionResourceGuard").DataProtectionResourceGuard = null as any;
utilities.lazyLoad(exports, ["DataProtectionResourceGuard"], () => require("./dataProtectionResourceGuard"));

export { DataShareArgs, DataShareState } from "./dataShare";
export type DataShare = import("./dataShare").DataShare;
export const DataShare: typeof import("./dataShare").DataShare = null as any;
utilities.lazyLoad(exports, ["DataShare"], () => require("./dataShare"));

export { DataShareAccountArgs, DataShareAccountState } from "./dataShareAccount";
export type DataShareAccount = import("./dataShareAccount").DataShareAccount;
export const DataShareAccount: typeof import("./dataShareAccount").DataShareAccount = null as any;
utilities.lazyLoad(exports, ["DataShareAccount"], () => require("./dataShareAccount"));

export { DataShareDatasetBlobStorageArgs, DataShareDatasetBlobStorageState } from "./dataShareDatasetBlobStorage";
export type DataShareDatasetBlobStorage = import("./dataShareDatasetBlobStorage").DataShareDatasetBlobStorage;
export const DataShareDatasetBlobStorage: typeof import("./dataShareDatasetBlobStorage").DataShareDatasetBlobStorage = null as any;
utilities.lazyLoad(exports, ["DataShareDatasetBlobStorage"], () => require("./dataShareDatasetBlobStorage"));

export { DataShareDatasetDataLakeGen2Args, DataShareDatasetDataLakeGen2State } from "./dataShareDatasetDataLakeGen2";
export type DataShareDatasetDataLakeGen2 = import("./dataShareDatasetDataLakeGen2").DataShareDatasetDataLakeGen2;
export const DataShareDatasetDataLakeGen2: typeof import("./dataShareDatasetDataLakeGen2").DataShareDatasetDataLakeGen2 = null as any;
utilities.lazyLoad(exports, ["DataShareDatasetDataLakeGen2"], () => require("./dataShareDatasetDataLakeGen2"));

export { DataShareDatasetKustoClusterArgs, DataShareDatasetKustoClusterState } from "./dataShareDatasetKustoCluster";
export type DataShareDatasetKustoCluster = import("./dataShareDatasetKustoCluster").DataShareDatasetKustoCluster;
export const DataShareDatasetKustoCluster: typeof import("./dataShareDatasetKustoCluster").DataShareDatasetKustoCluster = null as any;
utilities.lazyLoad(exports, ["DataShareDatasetKustoCluster"], () => require("./dataShareDatasetKustoCluster"));

export { DataShareDatasetKustoDatabaseArgs, DataShareDatasetKustoDatabaseState } from "./dataShareDatasetKustoDatabase";
export type DataShareDatasetKustoDatabase = import("./dataShareDatasetKustoDatabase").DataShareDatasetKustoDatabase;
export const DataShareDatasetKustoDatabase: typeof import("./dataShareDatasetKustoDatabase").DataShareDatasetKustoDatabase = null as any;
utilities.lazyLoad(exports, ["DataShareDatasetKustoDatabase"], () => require("./dataShareDatasetKustoDatabase"));

export { DatabaseMigrationProjectArgs, DatabaseMigrationProjectState } from "./databaseMigrationProject";
export type DatabaseMigrationProject = import("./databaseMigrationProject").DatabaseMigrationProject;
export const DatabaseMigrationProject: typeof import("./databaseMigrationProject").DatabaseMigrationProject = null as any;
utilities.lazyLoad(exports, ["DatabaseMigrationProject"], () => require("./databaseMigrationProject"));

export { DatabaseMigrationServiceArgs, DatabaseMigrationServiceState } from "./databaseMigrationService";
export type DatabaseMigrationService = import("./databaseMigrationService").DatabaseMigrationService;
export const DatabaseMigrationService: typeof import("./databaseMigrationService").DatabaseMigrationService = null as any;
utilities.lazyLoad(exports, ["DatabaseMigrationService"], () => require("./databaseMigrationService"));

export { DataboxEdgeDeviceArgs, DataboxEdgeDeviceState } from "./databoxEdgeDevice";
export type DataboxEdgeDevice = import("./databoxEdgeDevice").DataboxEdgeDevice;
export const DataboxEdgeDevice: typeof import("./databoxEdgeDevice").DataboxEdgeDevice = null as any;
utilities.lazyLoad(exports, ["DataboxEdgeDevice"], () => require("./databoxEdgeDevice"));

export { DatabricksAccessConnectorArgs, DatabricksAccessConnectorState } from "./databricksAccessConnector";
export type DatabricksAccessConnector = import("./databricksAccessConnector").DatabricksAccessConnector;
export const DatabricksAccessConnector: typeof import("./databricksAccessConnector").DatabricksAccessConnector = null as any;
utilities.lazyLoad(exports, ["DatabricksAccessConnector"], () => require("./databricksAccessConnector"));

export { DatabricksVirtualNetworkPeeringArgs, DatabricksVirtualNetworkPeeringState } from "./databricksVirtualNetworkPeering";
export type DatabricksVirtualNetworkPeering = import("./databricksVirtualNetworkPeering").DatabricksVirtualNetworkPeering;
export const DatabricksVirtualNetworkPeering: typeof import("./databricksVirtualNetworkPeering").DatabricksVirtualNetworkPeering = null as any;
utilities.lazyLoad(exports, ["DatabricksVirtualNetworkPeering"], () => require("./databricksVirtualNetworkPeering"));

export { DatabricksWorkspaceArgs, DatabricksWorkspaceState } from "./databricksWorkspace";
export type DatabricksWorkspace = import("./databricksWorkspace").DatabricksWorkspace;
export const DatabricksWorkspace: typeof import("./databricksWorkspace").DatabricksWorkspace = null as any;
utilities.lazyLoad(exports, ["DatabricksWorkspace"], () => require("./databricksWorkspace"));

export { DatabricksWorkspaceCustomerManagedKeyArgs, DatabricksWorkspaceCustomerManagedKeyState } from "./databricksWorkspaceCustomerManagedKey";
export type DatabricksWorkspaceCustomerManagedKey = import("./databricksWorkspaceCustomerManagedKey").DatabricksWorkspaceCustomerManagedKey;
export const DatabricksWorkspaceCustomerManagedKey: typeof import("./databricksWorkspaceCustomerManagedKey").DatabricksWorkspaceCustomerManagedKey = null as any;
utilities.lazyLoad(exports, ["DatabricksWorkspaceCustomerManagedKey"], () => require("./databricksWorkspaceCustomerManagedKey"));

export { DatabricksWorkspaceRootDbfsCustomerManagedKeyArgs, DatabricksWorkspaceRootDbfsCustomerManagedKeyState } from "./databricksWorkspaceRootDbfsCustomerManagedKey";
export type DatabricksWorkspaceRootDbfsCustomerManagedKey = import("./databricksWorkspaceRootDbfsCustomerManagedKey").DatabricksWorkspaceRootDbfsCustomerManagedKey;
export const DatabricksWorkspaceRootDbfsCustomerManagedKey: typeof import("./databricksWorkspaceRootDbfsCustomerManagedKey").DatabricksWorkspaceRootDbfsCustomerManagedKey = null as any;
utilities.lazyLoad(exports, ["DatabricksWorkspaceRootDbfsCustomerManagedKey"], () => require("./databricksWorkspaceRootDbfsCustomerManagedKey"));

export { DatadogMonitorArgs, DatadogMonitorState } from "./datadogMonitor";
export type DatadogMonitor = import("./datadogMonitor").DatadogMonitor;
export const DatadogMonitor: typeof import("./datadogMonitor").DatadogMonitor = null as any;
utilities.lazyLoad(exports, ["DatadogMonitor"], () => require("./datadogMonitor"));

export { DatadogMonitorSsoConfigurationArgs, DatadogMonitorSsoConfigurationState } from "./datadogMonitorSsoConfiguration";
export type DatadogMonitorSsoConfiguration = import("./datadogMonitorSsoConfiguration").DatadogMonitorSsoConfiguration;
export const DatadogMonitorSsoConfiguration: typeof import("./datadogMonitorSsoConfiguration").DatadogMonitorSsoConfiguration = null as any;
utilities.lazyLoad(exports, ["DatadogMonitorSsoConfiguration"], () => require("./datadogMonitorSsoConfiguration"));

export { DatadogMonitorTagRuleArgs, DatadogMonitorTagRuleState } from "./datadogMonitorTagRule";
export type DatadogMonitorTagRule = import("./datadogMonitorTagRule").DatadogMonitorTagRule;
export const DatadogMonitorTagRule: typeof import("./datadogMonitorTagRule").DatadogMonitorTagRule = null as any;
utilities.lazyLoad(exports, ["DatadogMonitorTagRule"], () => require("./datadogMonitorTagRule"));

export { DedicatedHardwareSecurityModuleArgs, DedicatedHardwareSecurityModuleState } from "./dedicatedHardwareSecurityModule";
export type DedicatedHardwareSecurityModule = import("./dedicatedHardwareSecurityModule").DedicatedHardwareSecurityModule;
export const DedicatedHardwareSecurityModule: typeof import("./dedicatedHardwareSecurityModule").DedicatedHardwareSecurityModule = null as any;
utilities.lazyLoad(exports, ["DedicatedHardwareSecurityModule"], () => require("./dedicatedHardwareSecurityModule"));

export { DedicatedHostArgs, DedicatedHostState } from "./dedicatedHost";
export type DedicatedHost = import("./dedicatedHost").DedicatedHost;
export const DedicatedHost: typeof import("./dedicatedHost").DedicatedHost = null as any;
utilities.lazyLoad(exports, ["DedicatedHost"], () => require("./dedicatedHost"));

export { DedicatedHostGroupArgs, DedicatedHostGroupState } from "./dedicatedHostGroup";
export type DedicatedHostGroup = import("./dedicatedHostGroup").DedicatedHostGroup;
export const DedicatedHostGroup: typeof import("./dedicatedHostGroup").DedicatedHostGroup = null as any;
utilities.lazyLoad(exports, ["DedicatedHostGroup"], () => require("./dedicatedHostGroup"));

export { DevCenterArgs, DevCenterState } from "./devCenter";
export type DevCenter = import("./devCenter").DevCenter;
export const DevCenter: typeof import("./devCenter").DevCenter = null as any;
utilities.lazyLoad(exports, ["DevCenter"], () => require("./devCenter"));

export { DevCenterCatalogArgs, DevCenterCatalogState } from "./devCenterCatalog";
export type DevCenterCatalog = import("./devCenterCatalog").DevCenterCatalog;
export const DevCenterCatalog: typeof import("./devCenterCatalog").DevCenterCatalog = null as any;
utilities.lazyLoad(exports, ["DevCenterCatalog"], () => require("./devCenterCatalog"));

export { DevCenterDevBoxDefinitionArgs, DevCenterDevBoxDefinitionState } from "./devCenterDevBoxDefinition";
export type DevCenterDevBoxDefinition = import("./devCenterDevBoxDefinition").DevCenterDevBoxDefinition;
export const DevCenterDevBoxDefinition: typeof import("./devCenterDevBoxDefinition").DevCenterDevBoxDefinition = null as any;
utilities.lazyLoad(exports, ["DevCenterDevBoxDefinition"], () => require("./devCenterDevBoxDefinition"));

export { DevCenterEnvironmentTypeArgs, DevCenterEnvironmentTypeState } from "./devCenterEnvironmentType";
export type DevCenterEnvironmentType = import("./devCenterEnvironmentType").DevCenterEnvironmentType;
export const DevCenterEnvironmentType: typeof import("./devCenterEnvironmentType").DevCenterEnvironmentType = null as any;
utilities.lazyLoad(exports, ["DevCenterEnvironmentType"], () => require("./devCenterEnvironmentType"));

export { DevCenterGalleryArgs, DevCenterGalleryState } from "./devCenterGallery";
export type DevCenterGallery = import("./devCenterGallery").DevCenterGallery;
export const DevCenterGallery: typeof import("./devCenterGallery").DevCenterGallery = null as any;
utilities.lazyLoad(exports, ["DevCenterGallery"], () => require("./devCenterGallery"));

export { DevCenterNetworkConnectionArgs, DevCenterNetworkConnectionState } from "./devCenterNetworkConnection";
export type DevCenterNetworkConnection = import("./devCenterNetworkConnection").DevCenterNetworkConnection;
export const DevCenterNetworkConnection: typeof import("./devCenterNetworkConnection").DevCenterNetworkConnection = null as any;
utilities.lazyLoad(exports, ["DevCenterNetworkConnection"], () => require("./devCenterNetworkConnection"));

export { DevCenterProjectArgs, DevCenterProjectState } from "./devCenterProject";
export type DevCenterProject = import("./devCenterProject").DevCenterProject;
export const DevCenterProject: typeof import("./devCenterProject").DevCenterProject = null as any;
utilities.lazyLoad(exports, ["DevCenterProject"], () => require("./devCenterProject"));

export { DevCenterProjectEnvironmentTypeArgs, DevCenterProjectEnvironmentTypeState } from "./devCenterProjectEnvironmentType";
export type DevCenterProjectEnvironmentType = import("./devCenterProjectEnvironmentType").DevCenterProjectEnvironmentType;
export const DevCenterProjectEnvironmentType: typeof import("./devCenterProjectEnvironmentType").DevCenterProjectEnvironmentType = null as any;
utilities.lazyLoad(exports, ["DevCenterProjectEnvironmentType"], () => require("./devCenterProjectEnvironmentType"));

export { DevTestGlobalVmShutdownScheduleArgs, DevTestGlobalVmShutdownScheduleState } from "./devTestGlobalVmShutdownSchedule";
export type DevTestGlobalVmShutdownSchedule = import("./devTestGlobalVmShutdownSchedule").DevTestGlobalVmShutdownSchedule;
export const DevTestGlobalVmShutdownSchedule: typeof import("./devTestGlobalVmShutdownSchedule").DevTestGlobalVmShutdownSchedule = null as any;
utilities.lazyLoad(exports, ["DevTestGlobalVmShutdownSchedule"], () => require("./devTestGlobalVmShutdownSchedule"));

export { DevTestLabArgs, DevTestLabState } from "./devTestLab";
export type DevTestLab = import("./devTestLab").DevTestLab;
export const DevTestLab: typeof import("./devTestLab").DevTestLab = null as any;
utilities.lazyLoad(exports, ["DevTestLab"], () => require("./devTestLab"));

export { DevTestLinuxVirtualMachineArgs, DevTestLinuxVirtualMachineState } from "./devTestLinuxVirtualMachine";
export type DevTestLinuxVirtualMachine = import("./devTestLinuxVirtualMachine").DevTestLinuxVirtualMachine;
export const DevTestLinuxVirtualMachine: typeof import("./devTestLinuxVirtualMachine").DevTestLinuxVirtualMachine = null as any;
utilities.lazyLoad(exports, ["DevTestLinuxVirtualMachine"], () => require("./devTestLinuxVirtualMachine"));

export { DevTestPolicyArgs, DevTestPolicyState } from "./devTestPolicy";
export type DevTestPolicy = import("./devTestPolicy").DevTestPolicy;
export const DevTestPolicy: typeof import("./devTestPolicy").DevTestPolicy = null as any;
utilities.lazyLoad(exports, ["DevTestPolicy"], () => require("./devTestPolicy"));

export { DevTestScheduleArgs, DevTestScheduleState } from "./devTestSchedule";
export type DevTestSchedule = import("./devTestSchedule").DevTestSchedule;
export const DevTestSchedule: typeof import("./devTestSchedule").DevTestSchedule = null as any;
utilities.lazyLoad(exports, ["DevTestSchedule"], () => require("./devTestSchedule"));

export { DevTestVirtualNetworkArgs, DevTestVirtualNetworkState } from "./devTestVirtualNetwork";
export type DevTestVirtualNetwork = import("./devTestVirtualNetwork").DevTestVirtualNetwork;
export const DevTestVirtualNetwork: typeof import("./devTestVirtualNetwork").DevTestVirtualNetwork = null as any;
utilities.lazyLoad(exports, ["DevTestVirtualNetwork"], () => require("./devTestVirtualNetwork"));

export { DevTestWindowsVirtualMachineArgs, DevTestWindowsVirtualMachineState } from "./devTestWindowsVirtualMachine";
export type DevTestWindowsVirtualMachine = import("./devTestWindowsVirtualMachine").DevTestWindowsVirtualMachine;
export const DevTestWindowsVirtualMachine: typeof import("./devTestWindowsVirtualMachine").DevTestWindowsVirtualMachine = null as any;
utilities.lazyLoad(exports, ["DevTestWindowsVirtualMachine"], () => require("./devTestWindowsVirtualMachine"));

export { DigitalTwinsEndpointEventgridArgs, DigitalTwinsEndpointEventgridState } from "./digitalTwinsEndpointEventgrid";
export type DigitalTwinsEndpointEventgrid = import("./digitalTwinsEndpointEventgrid").DigitalTwinsEndpointEventgrid;
export const DigitalTwinsEndpointEventgrid: typeof import("./digitalTwinsEndpointEventgrid").DigitalTwinsEndpointEventgrid = null as any;
utilities.lazyLoad(exports, ["DigitalTwinsEndpointEventgrid"], () => require("./digitalTwinsEndpointEventgrid"));

export { DigitalTwinsEndpointEventhubArgs, DigitalTwinsEndpointEventhubState } from "./digitalTwinsEndpointEventhub";
export type DigitalTwinsEndpointEventhub = import("./digitalTwinsEndpointEventhub").DigitalTwinsEndpointEventhub;
export const DigitalTwinsEndpointEventhub: typeof import("./digitalTwinsEndpointEventhub").DigitalTwinsEndpointEventhub = null as any;
utilities.lazyLoad(exports, ["DigitalTwinsEndpointEventhub"], () => require("./digitalTwinsEndpointEventhub"));

export { DigitalTwinsEndpointServicebusArgs, DigitalTwinsEndpointServicebusState } from "./digitalTwinsEndpointServicebus";
export type DigitalTwinsEndpointServicebus = import("./digitalTwinsEndpointServicebus").DigitalTwinsEndpointServicebus;
export const DigitalTwinsEndpointServicebus: typeof import("./digitalTwinsEndpointServicebus").DigitalTwinsEndpointServicebus = null as any;
utilities.lazyLoad(exports, ["DigitalTwinsEndpointServicebus"], () => require("./digitalTwinsEndpointServicebus"));

export { DigitalTwinsInstanceArgs, DigitalTwinsInstanceState } from "./digitalTwinsInstance";
export type DigitalTwinsInstance = import("./digitalTwinsInstance").DigitalTwinsInstance;
export const DigitalTwinsInstance: typeof import("./digitalTwinsInstance").DigitalTwinsInstance = null as any;
utilities.lazyLoad(exports, ["DigitalTwinsInstance"], () => require("./digitalTwinsInstance"));

export { DigitalTwinsTimeSeriesDatabaseConnectionArgs, DigitalTwinsTimeSeriesDatabaseConnectionState } from "./digitalTwinsTimeSeriesDatabaseConnection";
export type DigitalTwinsTimeSeriesDatabaseConnection = import("./digitalTwinsTimeSeriesDatabaseConnection").DigitalTwinsTimeSeriesDatabaseConnection;
export const DigitalTwinsTimeSeriesDatabaseConnection: typeof import("./digitalTwinsTimeSeriesDatabaseConnection").DigitalTwinsTimeSeriesDatabaseConnection = null as any;
utilities.lazyLoad(exports, ["DigitalTwinsTimeSeriesDatabaseConnection"], () => require("./digitalTwinsTimeSeriesDatabaseConnection"));

export { DiskAccessArgs, DiskAccessState } from "./diskAccess";
export type DiskAccess = import("./diskAccess").DiskAccess;
export const DiskAccess: typeof import("./diskAccess").DiskAccess = null as any;
utilities.lazyLoad(exports, ["DiskAccess"], () => require("./diskAccess"));

export { DiskEncryptionSetArgs, DiskEncryptionSetState } from "./diskEncryptionSet";
export type DiskEncryptionSet = import("./diskEncryptionSet").DiskEncryptionSet;
export const DiskEncryptionSet: typeof import("./diskEncryptionSet").DiskEncryptionSet = null as any;
utilities.lazyLoad(exports, ["DiskEncryptionSet"], () => require("./diskEncryptionSet"));

export { DnsARecordArgs, DnsARecordState } from "./dnsARecord";
export type DnsARecord = import("./dnsARecord").DnsARecord;
export const DnsARecord: typeof import("./dnsARecord").DnsARecord = null as any;
utilities.lazyLoad(exports, ["DnsARecord"], () => require("./dnsARecord"));

export { DnsAaaaRecordArgs, DnsAaaaRecordState } from "./dnsAaaaRecord";
export type DnsAaaaRecord = import("./dnsAaaaRecord").DnsAaaaRecord;
export const DnsAaaaRecord: typeof import("./dnsAaaaRecord").DnsAaaaRecord = null as any;
utilities.lazyLoad(exports, ["DnsAaaaRecord"], () => require("./dnsAaaaRecord"));

export { DnsCaaRecordArgs, DnsCaaRecordState } from "./dnsCaaRecord";
export type DnsCaaRecord = import("./dnsCaaRecord").DnsCaaRecord;
export const DnsCaaRecord: typeof import("./dnsCaaRecord").DnsCaaRecord = null as any;
utilities.lazyLoad(exports, ["DnsCaaRecord"], () => require("./dnsCaaRecord"));

export { DnsCnameRecordArgs, DnsCnameRecordState } from "./dnsCnameRecord";
export type DnsCnameRecord = import("./dnsCnameRecord").DnsCnameRecord;
export const DnsCnameRecord: typeof import("./dnsCnameRecord").DnsCnameRecord = null as any;
utilities.lazyLoad(exports, ["DnsCnameRecord"], () => require("./dnsCnameRecord"));

export { DnsMxRecordArgs, DnsMxRecordState } from "./dnsMxRecord";
export type DnsMxRecord = import("./dnsMxRecord").DnsMxRecord;
export const DnsMxRecord: typeof import("./dnsMxRecord").DnsMxRecord = null as any;
utilities.lazyLoad(exports, ["DnsMxRecord"], () => require("./dnsMxRecord"));

export { DnsNsRecordArgs, DnsNsRecordState } from "./dnsNsRecord";
export type DnsNsRecord = import("./dnsNsRecord").DnsNsRecord;
export const DnsNsRecord: typeof import("./dnsNsRecord").DnsNsRecord = null as any;
utilities.lazyLoad(exports, ["DnsNsRecord"], () => require("./dnsNsRecord"));

export { DnsPtrRecordArgs, DnsPtrRecordState } from "./dnsPtrRecord";
export type DnsPtrRecord = import("./dnsPtrRecord").DnsPtrRecord;
export const DnsPtrRecord: typeof import("./dnsPtrRecord").DnsPtrRecord = null as any;
utilities.lazyLoad(exports, ["DnsPtrRecord"], () => require("./dnsPtrRecord"));

export { DnsSrvRecordArgs, DnsSrvRecordState } from "./dnsSrvRecord";
export type DnsSrvRecord = import("./dnsSrvRecord").DnsSrvRecord;
export const DnsSrvRecord: typeof import("./dnsSrvRecord").DnsSrvRecord = null as any;
utilities.lazyLoad(exports, ["DnsSrvRecord"], () => require("./dnsSrvRecord"));

export { DnsTxtRecordArgs, DnsTxtRecordState } from "./dnsTxtRecord";
export type DnsTxtRecord = import("./dnsTxtRecord").DnsTxtRecord;
export const DnsTxtRecord: typeof import("./dnsTxtRecord").DnsTxtRecord = null as any;
utilities.lazyLoad(exports, ["DnsTxtRecord"], () => require("./dnsTxtRecord"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { ElasticCloudElasticsearchArgs, ElasticCloudElasticsearchState } from "./elasticCloudElasticsearch";
export type ElasticCloudElasticsearch = import("./elasticCloudElasticsearch").ElasticCloudElasticsearch;
export const ElasticCloudElasticsearch: typeof import("./elasticCloudElasticsearch").ElasticCloudElasticsearch = null as any;
utilities.lazyLoad(exports, ["ElasticCloudElasticsearch"], () => require("./elasticCloudElasticsearch"));

export { ElasticSanArgs, ElasticSanState } from "./elasticSan";
export type ElasticSan = import("./elasticSan").ElasticSan;
export const ElasticSan: typeof import("./elasticSan").ElasticSan = null as any;
utilities.lazyLoad(exports, ["ElasticSan"], () => require("./elasticSan"));

export { ElasticSanVolumeArgs, ElasticSanVolumeState } from "./elasticSanVolume";
export type ElasticSanVolume = import("./elasticSanVolume").ElasticSanVolume;
export const ElasticSanVolume: typeof import("./elasticSanVolume").ElasticSanVolume = null as any;
utilities.lazyLoad(exports, ["ElasticSanVolume"], () => require("./elasticSanVolume"));

export { ElasticSanVolumeGroupArgs, ElasticSanVolumeGroupState } from "./elasticSanVolumeGroup";
export type ElasticSanVolumeGroup = import("./elasticSanVolumeGroup").ElasticSanVolumeGroup;
export const ElasticSanVolumeGroup: typeof import("./elasticSanVolumeGroup").ElasticSanVolumeGroup = null as any;
utilities.lazyLoad(exports, ["ElasticSanVolumeGroup"], () => require("./elasticSanVolumeGroup"));

export { EmailCommunicationServiceArgs, EmailCommunicationServiceState } from "./emailCommunicationService";
export type EmailCommunicationService = import("./emailCommunicationService").EmailCommunicationService;
export const EmailCommunicationService: typeof import("./emailCommunicationService").EmailCommunicationService = null as any;
utilities.lazyLoad(exports, ["EmailCommunicationService"], () => require("./emailCommunicationService"));

export { EmailCommunicationServiceDomainArgs, EmailCommunicationServiceDomainState } from "./emailCommunicationServiceDomain";
export type EmailCommunicationServiceDomain = import("./emailCommunicationServiceDomain").EmailCommunicationServiceDomain;
export const EmailCommunicationServiceDomain: typeof import("./emailCommunicationServiceDomain").EmailCommunicationServiceDomain = null as any;
utilities.lazyLoad(exports, ["EmailCommunicationServiceDomain"], () => require("./emailCommunicationServiceDomain"));

export { EventgridDomainArgs, EventgridDomainState } from "./eventgridDomain";
export type EventgridDomain = import("./eventgridDomain").EventgridDomain;
export const EventgridDomain: typeof import("./eventgridDomain").EventgridDomain = null as any;
utilities.lazyLoad(exports, ["EventgridDomain"], () => require("./eventgridDomain"));

export { EventgridDomainTopicArgs, EventgridDomainTopicState } from "./eventgridDomainTopic";
export type EventgridDomainTopic = import("./eventgridDomainTopic").EventgridDomainTopic;
export const EventgridDomainTopic: typeof import("./eventgridDomainTopic").EventgridDomainTopic = null as any;
utilities.lazyLoad(exports, ["EventgridDomainTopic"], () => require("./eventgridDomainTopic"));

export { EventgridEventSubscriptionArgs, EventgridEventSubscriptionState } from "./eventgridEventSubscription";
export type EventgridEventSubscription = import("./eventgridEventSubscription").EventgridEventSubscription;
export const EventgridEventSubscription: typeof import("./eventgridEventSubscription").EventgridEventSubscription = null as any;
utilities.lazyLoad(exports, ["EventgridEventSubscription"], () => require("./eventgridEventSubscription"));

export { EventgridSystemTopicArgs, EventgridSystemTopicState } from "./eventgridSystemTopic";
export type EventgridSystemTopic = import("./eventgridSystemTopic").EventgridSystemTopic;
export const EventgridSystemTopic: typeof import("./eventgridSystemTopic").EventgridSystemTopic = null as any;
utilities.lazyLoad(exports, ["EventgridSystemTopic"], () => require("./eventgridSystemTopic"));

export { EventgridSystemTopicEventSubscriptionArgs, EventgridSystemTopicEventSubscriptionState } from "./eventgridSystemTopicEventSubscription";
export type EventgridSystemTopicEventSubscription = import("./eventgridSystemTopicEventSubscription").EventgridSystemTopicEventSubscription;
export const EventgridSystemTopicEventSubscription: typeof import("./eventgridSystemTopicEventSubscription").EventgridSystemTopicEventSubscription = null as any;
utilities.lazyLoad(exports, ["EventgridSystemTopicEventSubscription"], () => require("./eventgridSystemTopicEventSubscription"));

export { EventgridTopicArgs, EventgridTopicState } from "./eventgridTopic";
export type EventgridTopic = import("./eventgridTopic").EventgridTopic;
export const EventgridTopic: typeof import("./eventgridTopic").EventgridTopic = null as any;
utilities.lazyLoad(exports, ["EventgridTopic"], () => require("./eventgridTopic"));

export { EventhubArgs, EventhubState } from "./eventhub";
export type Eventhub = import("./eventhub").Eventhub;
export const Eventhub: typeof import("./eventhub").Eventhub = null as any;
utilities.lazyLoad(exports, ["Eventhub"], () => require("./eventhub"));

export { EventhubAuthorizationRuleArgs, EventhubAuthorizationRuleState } from "./eventhubAuthorizationRule";
export type EventhubAuthorizationRule = import("./eventhubAuthorizationRule").EventhubAuthorizationRule;
export const EventhubAuthorizationRule: typeof import("./eventhubAuthorizationRule").EventhubAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["EventhubAuthorizationRule"], () => require("./eventhubAuthorizationRule"));

export { EventhubClusterArgs, EventhubClusterState } from "./eventhubCluster";
export type EventhubCluster = import("./eventhubCluster").EventhubCluster;
export const EventhubCluster: typeof import("./eventhubCluster").EventhubCluster = null as any;
utilities.lazyLoad(exports, ["EventhubCluster"], () => require("./eventhubCluster"));

export { EventhubConsumerGroupArgs, EventhubConsumerGroupState } from "./eventhubConsumerGroup";
export type EventhubConsumerGroup = import("./eventhubConsumerGroup").EventhubConsumerGroup;
export const EventhubConsumerGroup: typeof import("./eventhubConsumerGroup").EventhubConsumerGroup = null as any;
utilities.lazyLoad(exports, ["EventhubConsumerGroup"], () => require("./eventhubConsumerGroup"));

export { EventhubNamespaceArgs, EventhubNamespaceState } from "./eventhubNamespace";
export type EventhubNamespace = import("./eventhubNamespace").EventhubNamespace;
export const EventhubNamespace: typeof import("./eventhubNamespace").EventhubNamespace = null as any;
utilities.lazyLoad(exports, ["EventhubNamespace"], () => require("./eventhubNamespace"));

export { EventhubNamespaceAuthorizationRuleArgs, EventhubNamespaceAuthorizationRuleState } from "./eventhubNamespaceAuthorizationRule";
export type EventhubNamespaceAuthorizationRule = import("./eventhubNamespaceAuthorizationRule").EventhubNamespaceAuthorizationRule;
export const EventhubNamespaceAuthorizationRule: typeof import("./eventhubNamespaceAuthorizationRule").EventhubNamespaceAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["EventhubNamespaceAuthorizationRule"], () => require("./eventhubNamespaceAuthorizationRule"));

export { EventhubNamespaceCustomerManagedKeyArgs, EventhubNamespaceCustomerManagedKeyState } from "./eventhubNamespaceCustomerManagedKey";
export type EventhubNamespaceCustomerManagedKey = import("./eventhubNamespaceCustomerManagedKey").EventhubNamespaceCustomerManagedKey;
export const EventhubNamespaceCustomerManagedKey: typeof import("./eventhubNamespaceCustomerManagedKey").EventhubNamespaceCustomerManagedKey = null as any;
utilities.lazyLoad(exports, ["EventhubNamespaceCustomerManagedKey"], () => require("./eventhubNamespaceCustomerManagedKey"));

export { EventhubNamespaceDisasterRecoveryConfigArgs, EventhubNamespaceDisasterRecoveryConfigState } from "./eventhubNamespaceDisasterRecoveryConfig";
export type EventhubNamespaceDisasterRecoveryConfig = import("./eventhubNamespaceDisasterRecoveryConfig").EventhubNamespaceDisasterRecoveryConfig;
export const EventhubNamespaceDisasterRecoveryConfig: typeof import("./eventhubNamespaceDisasterRecoveryConfig").EventhubNamespaceDisasterRecoveryConfig = null as any;
utilities.lazyLoad(exports, ["EventhubNamespaceDisasterRecoveryConfig"], () => require("./eventhubNamespaceDisasterRecoveryConfig"));

export { EventhubNamespaceSchemaGroupArgs, EventhubNamespaceSchemaGroupState } from "./eventhubNamespaceSchemaGroup";
export type EventhubNamespaceSchemaGroup = import("./eventhubNamespaceSchemaGroup").EventhubNamespaceSchemaGroup;
export const EventhubNamespaceSchemaGroup: typeof import("./eventhubNamespaceSchemaGroup").EventhubNamespaceSchemaGroup = null as any;
utilities.lazyLoad(exports, ["EventhubNamespaceSchemaGroup"], () => require("./eventhubNamespaceSchemaGroup"));

export { ExpressRouteCircuitArgs, ExpressRouteCircuitState } from "./expressRouteCircuit";
export type ExpressRouteCircuit = import("./expressRouteCircuit").ExpressRouteCircuit;
export const ExpressRouteCircuit: typeof import("./expressRouteCircuit").ExpressRouteCircuit = null as any;
utilities.lazyLoad(exports, ["ExpressRouteCircuit"], () => require("./expressRouteCircuit"));

export { ExpressRouteCircuitAuthorizationArgs, ExpressRouteCircuitAuthorizationState } from "./expressRouteCircuitAuthorization";
export type ExpressRouteCircuitAuthorization = import("./expressRouteCircuitAuthorization").ExpressRouteCircuitAuthorization;
export const ExpressRouteCircuitAuthorization: typeof import("./expressRouteCircuitAuthorization").ExpressRouteCircuitAuthorization = null as any;
utilities.lazyLoad(exports, ["ExpressRouteCircuitAuthorization"], () => require("./expressRouteCircuitAuthorization"));

export { ExpressRouteCircuitConnectionArgs, ExpressRouteCircuitConnectionState } from "./expressRouteCircuitConnection";
export type ExpressRouteCircuitConnection = import("./expressRouteCircuitConnection").ExpressRouteCircuitConnection;
export const ExpressRouteCircuitConnection: typeof import("./expressRouteCircuitConnection").ExpressRouteCircuitConnection = null as any;
utilities.lazyLoad(exports, ["ExpressRouteCircuitConnection"], () => require("./expressRouteCircuitConnection"));

export { ExpressRouteCircuitPeeringArgs, ExpressRouteCircuitPeeringState } from "./expressRouteCircuitPeering";
export type ExpressRouteCircuitPeering = import("./expressRouteCircuitPeering").ExpressRouteCircuitPeering;
export const ExpressRouteCircuitPeering: typeof import("./expressRouteCircuitPeering").ExpressRouteCircuitPeering = null as any;
utilities.lazyLoad(exports, ["ExpressRouteCircuitPeering"], () => require("./expressRouteCircuitPeering"));

export { ExpressRouteConnectionArgs, ExpressRouteConnectionState } from "./expressRouteConnection";
export type ExpressRouteConnection = import("./expressRouteConnection").ExpressRouteConnection;
export const ExpressRouteConnection: typeof import("./expressRouteConnection").ExpressRouteConnection = null as any;
utilities.lazyLoad(exports, ["ExpressRouteConnection"], () => require("./expressRouteConnection"));

export { ExpressRouteGatewayArgs, ExpressRouteGatewayState } from "./expressRouteGateway";
export type ExpressRouteGateway = import("./expressRouteGateway").ExpressRouteGateway;
export const ExpressRouteGateway: typeof import("./expressRouteGateway").ExpressRouteGateway = null as any;
utilities.lazyLoad(exports, ["ExpressRouteGateway"], () => require("./expressRouteGateway"));

export { ExpressRoutePortArgs, ExpressRoutePortState } from "./expressRoutePort";
export type ExpressRoutePort = import("./expressRoutePort").ExpressRoutePort;
export const ExpressRoutePort: typeof import("./expressRoutePort").ExpressRoutePort = null as any;
utilities.lazyLoad(exports, ["ExpressRoutePort"], () => require("./expressRoutePort"));

export { ExpressRoutePortAuthorizationArgs, ExpressRoutePortAuthorizationState } from "./expressRoutePortAuthorization";
export type ExpressRoutePortAuthorization = import("./expressRoutePortAuthorization").ExpressRoutePortAuthorization;
export const ExpressRoutePortAuthorization: typeof import("./expressRoutePortAuthorization").ExpressRoutePortAuthorization = null as any;
utilities.lazyLoad(exports, ["ExpressRoutePortAuthorization"], () => require("./expressRoutePortAuthorization"));

export { ExtendedCustomLocationArgs, ExtendedCustomLocationState } from "./extendedCustomLocation";
export type ExtendedCustomLocation = import("./extendedCustomLocation").ExtendedCustomLocation;
export const ExtendedCustomLocation: typeof import("./extendedCustomLocation").ExtendedCustomLocation = null as any;
utilities.lazyLoad(exports, ["ExtendedCustomLocation"], () => require("./extendedCustomLocation"));

export { FederatedIdentityCredentialArgs, FederatedIdentityCredentialState } from "./federatedIdentityCredential";
export type FederatedIdentityCredential = import("./federatedIdentityCredential").FederatedIdentityCredential;
export const FederatedIdentityCredential: typeof import("./federatedIdentityCredential").FederatedIdentityCredential = null as any;
utilities.lazyLoad(exports, ["FederatedIdentityCredential"], () => require("./federatedIdentityCredential"));

export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { FirewallApplicationRuleCollectionArgs, FirewallApplicationRuleCollectionState } from "./firewallApplicationRuleCollection";
export type FirewallApplicationRuleCollection = import("./firewallApplicationRuleCollection").FirewallApplicationRuleCollection;
export const FirewallApplicationRuleCollection: typeof import("./firewallApplicationRuleCollection").FirewallApplicationRuleCollection = null as any;
utilities.lazyLoad(exports, ["FirewallApplicationRuleCollection"], () => require("./firewallApplicationRuleCollection"));

export { FirewallNatRuleCollectionArgs, FirewallNatRuleCollectionState } from "./firewallNatRuleCollection";
export type FirewallNatRuleCollection = import("./firewallNatRuleCollection").FirewallNatRuleCollection;
export const FirewallNatRuleCollection: typeof import("./firewallNatRuleCollection").FirewallNatRuleCollection = null as any;
utilities.lazyLoad(exports, ["FirewallNatRuleCollection"], () => require("./firewallNatRuleCollection"));

export { FirewallNetworkRuleCollectionArgs, FirewallNetworkRuleCollectionState } from "./firewallNetworkRuleCollection";
export type FirewallNetworkRuleCollection = import("./firewallNetworkRuleCollection").FirewallNetworkRuleCollection;
export const FirewallNetworkRuleCollection: typeof import("./firewallNetworkRuleCollection").FirewallNetworkRuleCollection = null as any;
utilities.lazyLoad(exports, ["FirewallNetworkRuleCollection"], () => require("./firewallNetworkRuleCollection"));

export { FirewallPolicyArgs, FirewallPolicyState } from "./firewallPolicy";
export type FirewallPolicy = import("./firewallPolicy").FirewallPolicy;
export const FirewallPolicy: typeof import("./firewallPolicy").FirewallPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallPolicy"], () => require("./firewallPolicy"));

export { FirewallPolicyRuleCollectionGroupArgs, FirewallPolicyRuleCollectionGroupState } from "./firewallPolicyRuleCollectionGroup";
export type FirewallPolicyRuleCollectionGroup = import("./firewallPolicyRuleCollectionGroup").FirewallPolicyRuleCollectionGroup;
export const FirewallPolicyRuleCollectionGroup: typeof import("./firewallPolicyRuleCollectionGroup").FirewallPolicyRuleCollectionGroup = null as any;
utilities.lazyLoad(exports, ["FirewallPolicyRuleCollectionGroup"], () => require("./firewallPolicyRuleCollectionGroup"));

export { FluidRelayServerArgs, FluidRelayServerState } from "./fluidRelayServer";
export type FluidRelayServer = import("./fluidRelayServer").FluidRelayServer;
export const FluidRelayServer: typeof import("./fluidRelayServer").FluidRelayServer = null as any;
utilities.lazyLoad(exports, ["FluidRelayServer"], () => require("./fluidRelayServer"));

export { FrontdoorArgs, FrontdoorState } from "./frontdoor";
export type Frontdoor = import("./frontdoor").Frontdoor;
export const Frontdoor: typeof import("./frontdoor").Frontdoor = null as any;
utilities.lazyLoad(exports, ["Frontdoor"], () => require("./frontdoor"));

export { FrontdoorCustomHttpsConfigurationArgs, FrontdoorCustomHttpsConfigurationState } from "./frontdoorCustomHttpsConfiguration";
export type FrontdoorCustomHttpsConfiguration = import("./frontdoorCustomHttpsConfiguration").FrontdoorCustomHttpsConfiguration;
export const FrontdoorCustomHttpsConfiguration: typeof import("./frontdoorCustomHttpsConfiguration").FrontdoorCustomHttpsConfiguration = null as any;
utilities.lazyLoad(exports, ["FrontdoorCustomHttpsConfiguration"], () => require("./frontdoorCustomHttpsConfiguration"));

export { FrontdoorFirewallPolicyArgs, FrontdoorFirewallPolicyState } from "./frontdoorFirewallPolicy";
export type FrontdoorFirewallPolicy = import("./frontdoorFirewallPolicy").FrontdoorFirewallPolicy;
export const FrontdoorFirewallPolicy: typeof import("./frontdoorFirewallPolicy").FrontdoorFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["FrontdoorFirewallPolicy"], () => require("./frontdoorFirewallPolicy"));

export { FrontdoorRulesEngineArgs, FrontdoorRulesEngineState } from "./frontdoorRulesEngine";
export type FrontdoorRulesEngine = import("./frontdoorRulesEngine").FrontdoorRulesEngine;
export const FrontdoorRulesEngine: typeof import("./frontdoorRulesEngine").FrontdoorRulesEngine = null as any;
utilities.lazyLoad(exports, ["FrontdoorRulesEngine"], () => require("./frontdoorRulesEngine"));

export { FunctionAppArgs, FunctionAppState } from "./functionApp";
export type FunctionApp = import("./functionApp").FunctionApp;
export const FunctionApp: typeof import("./functionApp").FunctionApp = null as any;
utilities.lazyLoad(exports, ["FunctionApp"], () => require("./functionApp"));

export { FunctionAppActiveSlotArgs, FunctionAppActiveSlotState } from "./functionAppActiveSlot";
export type FunctionAppActiveSlot = import("./functionAppActiveSlot").FunctionAppActiveSlot;
export const FunctionAppActiveSlot: typeof import("./functionAppActiveSlot").FunctionAppActiveSlot = null as any;
utilities.lazyLoad(exports, ["FunctionAppActiveSlot"], () => require("./functionAppActiveSlot"));

export { FunctionAppConnectionArgs, FunctionAppConnectionState } from "./functionAppConnection";
export type FunctionAppConnection = import("./functionAppConnection").FunctionAppConnection;
export const FunctionAppConnection: typeof import("./functionAppConnection").FunctionAppConnection = null as any;
utilities.lazyLoad(exports, ["FunctionAppConnection"], () => require("./functionAppConnection"));

export { FunctionAppFunctionArgs, FunctionAppFunctionState } from "./functionAppFunction";
export type FunctionAppFunction = import("./functionAppFunction").FunctionAppFunction;
export const FunctionAppFunction: typeof import("./functionAppFunction").FunctionAppFunction = null as any;
utilities.lazyLoad(exports, ["FunctionAppFunction"], () => require("./functionAppFunction"));

export { FunctionAppHybridConnectionArgs, FunctionAppHybridConnectionState } from "./functionAppHybridConnection";
export type FunctionAppHybridConnection = import("./functionAppHybridConnection").FunctionAppHybridConnection;
export const FunctionAppHybridConnection: typeof import("./functionAppHybridConnection").FunctionAppHybridConnection = null as any;
utilities.lazyLoad(exports, ["FunctionAppHybridConnection"], () => require("./functionAppHybridConnection"));

export { FunctionAppSlotArgs, FunctionAppSlotState } from "./functionAppSlot";
export type FunctionAppSlot = import("./functionAppSlot").FunctionAppSlot;
export const FunctionAppSlot: typeof import("./functionAppSlot").FunctionAppSlot = null as any;
utilities.lazyLoad(exports, ["FunctionAppSlot"], () => require("./functionAppSlot"));

export { GalleryApplicationArgs, GalleryApplicationState } from "./galleryApplication";
export type GalleryApplication = import("./galleryApplication").GalleryApplication;
export const GalleryApplication: typeof import("./galleryApplication").GalleryApplication = null as any;
utilities.lazyLoad(exports, ["GalleryApplication"], () => require("./galleryApplication"));

export { GalleryApplicationVersionArgs, GalleryApplicationVersionState } from "./galleryApplicationVersion";
export type GalleryApplicationVersion = import("./galleryApplicationVersion").GalleryApplicationVersion;
export const GalleryApplicationVersion: typeof import("./galleryApplicationVersion").GalleryApplicationVersion = null as any;
utilities.lazyLoad(exports, ["GalleryApplicationVersion"], () => require("./galleryApplicationVersion"));

export { GetAadb2cDirectoryArgs, GetAadb2cDirectoryResult, GetAadb2cDirectoryOutputArgs } from "./getAadb2cDirectory";
export const getAadb2cDirectory: typeof import("./getAadb2cDirectory").getAadb2cDirectory = null as any;
export const getAadb2cDirectoryOutput: typeof import("./getAadb2cDirectory").getAadb2cDirectoryOutput = null as any;
utilities.lazyLoad(exports, ["getAadb2cDirectory","getAadb2cDirectoryOutput"], () => require("./getAadb2cDirectory"));

export { GetActiveDirectoryDomainServiceArgs, GetActiveDirectoryDomainServiceResult, GetActiveDirectoryDomainServiceOutputArgs } from "./getActiveDirectoryDomainService";
export const getActiveDirectoryDomainService: typeof import("./getActiveDirectoryDomainService").getActiveDirectoryDomainService = null as any;
export const getActiveDirectoryDomainServiceOutput: typeof import("./getActiveDirectoryDomainService").getActiveDirectoryDomainServiceOutput = null as any;
utilities.lazyLoad(exports, ["getActiveDirectoryDomainService","getActiveDirectoryDomainServiceOutput"], () => require("./getActiveDirectoryDomainService"));

export { GetAdvisorRecommendationsArgs, GetAdvisorRecommendationsResult, GetAdvisorRecommendationsOutputArgs } from "./getAdvisorRecommendations";
export const getAdvisorRecommendations: typeof import("./getAdvisorRecommendations").getAdvisorRecommendations = null as any;
export const getAdvisorRecommendationsOutput: typeof import("./getAdvisorRecommendations").getAdvisorRecommendationsOutput = null as any;
utilities.lazyLoad(exports, ["getAdvisorRecommendations","getAdvisorRecommendationsOutput"], () => require("./getAdvisorRecommendations"));

export { GetApiManagementArgs, GetApiManagementResult, GetApiManagementOutputArgs } from "./getApiManagement";
export const getApiManagement: typeof import("./getApiManagement").getApiManagement = null as any;
export const getApiManagementOutput: typeof import("./getApiManagement").getApiManagementOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagement","getApiManagementOutput"], () => require("./getApiManagement"));

export { GetApiManagementApiArgs, GetApiManagementApiResult, GetApiManagementApiOutputArgs } from "./getApiManagementApi";
export const getApiManagementApi: typeof import("./getApiManagementApi").getApiManagementApi = null as any;
export const getApiManagementApiOutput: typeof import("./getApiManagementApi").getApiManagementApiOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagementApi","getApiManagementApiOutput"], () => require("./getApiManagementApi"));

export { GetApiManagementApiVersionSetArgs, GetApiManagementApiVersionSetResult, GetApiManagementApiVersionSetOutputArgs } from "./getApiManagementApiVersionSet";
export const getApiManagementApiVersionSet: typeof import("./getApiManagementApiVersionSet").getApiManagementApiVersionSet = null as any;
export const getApiManagementApiVersionSetOutput: typeof import("./getApiManagementApiVersionSet").getApiManagementApiVersionSetOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagementApiVersionSet","getApiManagementApiVersionSetOutput"], () => require("./getApiManagementApiVersionSet"));

export { GetApiManagementGatewayArgs, GetApiManagementGatewayResult, GetApiManagementGatewayOutputArgs } from "./getApiManagementGateway";
export const getApiManagementGateway: typeof import("./getApiManagementGateway").getApiManagementGateway = null as any;
export const getApiManagementGatewayOutput: typeof import("./getApiManagementGateway").getApiManagementGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagementGateway","getApiManagementGatewayOutput"], () => require("./getApiManagementGateway"));

export { GetApiManagementGatewayHostNameConfigurationArgs, GetApiManagementGatewayHostNameConfigurationResult, GetApiManagementGatewayHostNameConfigurationOutputArgs } from "./getApiManagementGatewayHostNameConfiguration";
export const getApiManagementGatewayHostNameConfiguration: typeof import("./getApiManagementGatewayHostNameConfiguration").getApiManagementGatewayHostNameConfiguration = null as any;
export const getApiManagementGatewayHostNameConfigurationOutput: typeof import("./getApiManagementGatewayHostNameConfiguration").getApiManagementGatewayHostNameConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagementGatewayHostNameConfiguration","getApiManagementGatewayHostNameConfigurationOutput"], () => require("./getApiManagementGatewayHostNameConfiguration"));

export { GetApiManagementGroupArgs, GetApiManagementGroupResult, GetApiManagementGroupOutputArgs } from "./getApiManagementGroup";
export const getApiManagementGroup: typeof import("./getApiManagementGroup").getApiManagementGroup = null as any;
export const getApiManagementGroupOutput: typeof import("./getApiManagementGroup").getApiManagementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagementGroup","getApiManagementGroupOutput"], () => require("./getApiManagementGroup"));

export { GetApiManagementProductArgs, GetApiManagementProductResult, GetApiManagementProductOutputArgs } from "./getApiManagementProduct";
export const getApiManagementProduct: typeof import("./getApiManagementProduct").getApiManagementProduct = null as any;
export const getApiManagementProductOutput: typeof import("./getApiManagementProduct").getApiManagementProductOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagementProduct","getApiManagementProductOutput"], () => require("./getApiManagementProduct"));

export { GetApiManagementUserArgs, GetApiManagementUserResult, GetApiManagementUserOutputArgs } from "./getApiManagementUser";
export const getApiManagementUser: typeof import("./getApiManagementUser").getApiManagementUser = null as any;
export const getApiManagementUserOutput: typeof import("./getApiManagementUser").getApiManagementUserOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagementUser","getApiManagementUserOutput"], () => require("./getApiManagementUser"));

export { GetAppConfigurationArgs, GetAppConfigurationResult, GetAppConfigurationOutputArgs } from "./getAppConfiguration";
export const getAppConfiguration: typeof import("./getAppConfiguration").getAppConfiguration = null as any;
export const getAppConfigurationOutput: typeof import("./getAppConfiguration").getAppConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAppConfiguration","getAppConfigurationOutput"], () => require("./getAppConfiguration"));

export { GetAppConfigurationKeyArgs, GetAppConfigurationKeyResult, GetAppConfigurationKeyOutputArgs } from "./getAppConfigurationKey";
export const getAppConfigurationKey: typeof import("./getAppConfigurationKey").getAppConfigurationKey = null as any;
export const getAppConfigurationKeyOutput: typeof import("./getAppConfigurationKey").getAppConfigurationKeyOutput = null as any;
utilities.lazyLoad(exports, ["getAppConfigurationKey","getAppConfigurationKeyOutput"], () => require("./getAppConfigurationKey"));

export { GetAppConfigurationKeysArgs, GetAppConfigurationKeysResult, GetAppConfigurationKeysOutputArgs } from "./getAppConfigurationKeys";
export const getAppConfigurationKeys: typeof import("./getAppConfigurationKeys").getAppConfigurationKeys = null as any;
export const getAppConfigurationKeysOutput: typeof import("./getAppConfigurationKeys").getAppConfigurationKeysOutput = null as any;
utilities.lazyLoad(exports, ["getAppConfigurationKeys","getAppConfigurationKeysOutput"], () => require("./getAppConfigurationKeys"));

export { GetAppServiceArgs, GetAppServiceResult, GetAppServiceOutputArgs } from "./getAppService";
export const getAppService: typeof import("./getAppService").getAppService = null as any;
export const getAppServiceOutput: typeof import("./getAppService").getAppServiceOutput = null as any;
utilities.lazyLoad(exports, ["getAppService","getAppServiceOutput"], () => require("./getAppService"));

export { GetAppServiceCertificateArgs, GetAppServiceCertificateResult, GetAppServiceCertificateOutputArgs } from "./getAppServiceCertificate";
export const getAppServiceCertificate: typeof import("./getAppServiceCertificate").getAppServiceCertificate = null as any;
export const getAppServiceCertificateOutput: typeof import("./getAppServiceCertificate").getAppServiceCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getAppServiceCertificate","getAppServiceCertificateOutput"], () => require("./getAppServiceCertificate"));

export { GetAppServiceCertificateOrderArgs, GetAppServiceCertificateOrderResult, GetAppServiceCertificateOrderOutputArgs } from "./getAppServiceCertificateOrder";
export const getAppServiceCertificateOrder: typeof import("./getAppServiceCertificateOrder").getAppServiceCertificateOrder = null as any;
export const getAppServiceCertificateOrderOutput: typeof import("./getAppServiceCertificateOrder").getAppServiceCertificateOrderOutput = null as any;
utilities.lazyLoad(exports, ["getAppServiceCertificateOrder","getAppServiceCertificateOrderOutput"], () => require("./getAppServiceCertificateOrder"));

export { GetAppServiceEnvironmentV3Args, GetAppServiceEnvironmentV3Result, GetAppServiceEnvironmentV3OutputArgs } from "./getAppServiceEnvironmentV3";
export const getAppServiceEnvironmentV3: typeof import("./getAppServiceEnvironmentV3").getAppServiceEnvironmentV3 = null as any;
export const getAppServiceEnvironmentV3Output: typeof import("./getAppServiceEnvironmentV3").getAppServiceEnvironmentV3Output = null as any;
utilities.lazyLoad(exports, ["getAppServiceEnvironmentV3","getAppServiceEnvironmentV3Output"], () => require("./getAppServiceEnvironmentV3"));

export { GetAppServicePlanArgs, GetAppServicePlanResult, GetAppServicePlanOutputArgs } from "./getAppServicePlan";
export const getAppServicePlan: typeof import("./getAppServicePlan").getAppServicePlan = null as any;
export const getAppServicePlanOutput: typeof import("./getAppServicePlan").getAppServicePlanOutput = null as any;
utilities.lazyLoad(exports, ["getAppServicePlan","getAppServicePlanOutput"], () => require("./getAppServicePlan"));

export { GetApplicationGatewayArgs, GetApplicationGatewayResult, GetApplicationGatewayOutputArgs } from "./getApplicationGateway";
export const getApplicationGateway: typeof import("./getApplicationGateway").getApplicationGateway = null as any;
export const getApplicationGatewayOutput: typeof import("./getApplicationGateway").getApplicationGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationGateway","getApplicationGatewayOutput"], () => require("./getApplicationGateway"));

export { GetApplicationInsightsArgs, GetApplicationInsightsResult, GetApplicationInsightsOutputArgs } from "./getApplicationInsights";
export const getApplicationInsights: typeof import("./getApplicationInsights").getApplicationInsights = null as any;
export const getApplicationInsightsOutput: typeof import("./getApplicationInsights").getApplicationInsightsOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationInsights","getApplicationInsightsOutput"], () => require("./getApplicationInsights"));

export { GetApplicationSecurityGroupArgs, GetApplicationSecurityGroupResult, GetApplicationSecurityGroupOutputArgs } from "./getApplicationSecurityGroup";
export const getApplicationSecurityGroup: typeof import("./getApplicationSecurityGroup").getApplicationSecurityGroup = null as any;
export const getApplicationSecurityGroupOutput: typeof import("./getApplicationSecurityGroup").getApplicationSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSecurityGroup","getApplicationSecurityGroupOutput"], () => require("./getApplicationSecurityGroup"));

export { GetArcMachineArgs, GetArcMachineResult, GetArcMachineOutputArgs } from "./getArcMachine";
export const getArcMachine: typeof import("./getArcMachine").getArcMachine = null as any;
export const getArcMachineOutput: typeof import("./getArcMachine").getArcMachineOutput = null as any;
utilities.lazyLoad(exports, ["getArcMachine","getArcMachineOutput"], () => require("./getArcMachine"));

export { GetArcResourceBridgeApplianceArgs, GetArcResourceBridgeApplianceResult, GetArcResourceBridgeApplianceOutputArgs } from "./getArcResourceBridgeAppliance";
export const getArcResourceBridgeAppliance: typeof import("./getArcResourceBridgeAppliance").getArcResourceBridgeAppliance = null as any;
export const getArcResourceBridgeApplianceOutput: typeof import("./getArcResourceBridgeAppliance").getArcResourceBridgeApplianceOutput = null as any;
utilities.lazyLoad(exports, ["getArcResourceBridgeAppliance","getArcResourceBridgeApplianceOutput"], () => require("./getArcResourceBridgeAppliance"));

export { GetAttestationProviderArgs, GetAttestationProviderResult, GetAttestationProviderOutputArgs } from "./getAttestationProvider";
export const getAttestationProvider: typeof import("./getAttestationProvider").getAttestationProvider = null as any;
export const getAttestationProviderOutput: typeof import("./getAttestationProvider").getAttestationProviderOutput = null as any;
utilities.lazyLoad(exports, ["getAttestationProvider","getAttestationProviderOutput"], () => require("./getAttestationProvider"));

export { GetAutomationAccountArgs, GetAutomationAccountResult, GetAutomationAccountOutputArgs } from "./getAutomationAccount";
export const getAutomationAccount: typeof import("./getAutomationAccount").getAutomationAccount = null as any;
export const getAutomationAccountOutput: typeof import("./getAutomationAccount").getAutomationAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationAccount","getAutomationAccountOutput"], () => require("./getAutomationAccount"));

export { GetAutomationRunbookArgs, GetAutomationRunbookResult, GetAutomationRunbookOutputArgs } from "./getAutomationRunbook";
export const getAutomationRunbook: typeof import("./getAutomationRunbook").getAutomationRunbook = null as any;
export const getAutomationRunbookOutput: typeof import("./getAutomationRunbook").getAutomationRunbookOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationRunbook","getAutomationRunbookOutput"], () => require("./getAutomationRunbook"));

export { GetAutomationVariableBoolArgs, GetAutomationVariableBoolResult, GetAutomationVariableBoolOutputArgs } from "./getAutomationVariableBool";
export const getAutomationVariableBool: typeof import("./getAutomationVariableBool").getAutomationVariableBool = null as any;
export const getAutomationVariableBoolOutput: typeof import("./getAutomationVariableBool").getAutomationVariableBoolOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationVariableBool","getAutomationVariableBoolOutput"], () => require("./getAutomationVariableBool"));

export { GetAutomationVariableDatetimeArgs, GetAutomationVariableDatetimeResult, GetAutomationVariableDatetimeOutputArgs } from "./getAutomationVariableDatetime";
export const getAutomationVariableDatetime: typeof import("./getAutomationVariableDatetime").getAutomationVariableDatetime = null as any;
export const getAutomationVariableDatetimeOutput: typeof import("./getAutomationVariableDatetime").getAutomationVariableDatetimeOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationVariableDatetime","getAutomationVariableDatetimeOutput"], () => require("./getAutomationVariableDatetime"));

export { GetAutomationVariableIntArgs, GetAutomationVariableIntResult, GetAutomationVariableIntOutputArgs } from "./getAutomationVariableInt";
export const getAutomationVariableInt: typeof import("./getAutomationVariableInt").getAutomationVariableInt = null as any;
export const getAutomationVariableIntOutput: typeof import("./getAutomationVariableInt").getAutomationVariableIntOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationVariableInt","getAutomationVariableIntOutput"], () => require("./getAutomationVariableInt"));

export { GetAutomationVariableObjectArgs, GetAutomationVariableObjectResult, GetAutomationVariableObjectOutputArgs } from "./getAutomationVariableObject";
export const getAutomationVariableObject: typeof import("./getAutomationVariableObject").getAutomationVariableObject = null as any;
export const getAutomationVariableObjectOutput: typeof import("./getAutomationVariableObject").getAutomationVariableObjectOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationVariableObject","getAutomationVariableObjectOutput"], () => require("./getAutomationVariableObject"));

export { GetAutomationVariableStringArgs, GetAutomationVariableStringResult, GetAutomationVariableStringOutputArgs } from "./getAutomationVariableString";
export const getAutomationVariableString: typeof import("./getAutomationVariableString").getAutomationVariableString = null as any;
export const getAutomationVariableStringOutput: typeof import("./getAutomationVariableString").getAutomationVariableStringOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationVariableString","getAutomationVariableStringOutput"], () => require("./getAutomationVariableString"));

export { GetAutomationVariablesArgs, GetAutomationVariablesResult, GetAutomationVariablesOutputArgs } from "./getAutomationVariables";
export const getAutomationVariables: typeof import("./getAutomationVariables").getAutomationVariables = null as any;
export const getAutomationVariablesOutput: typeof import("./getAutomationVariables").getAutomationVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationVariables","getAutomationVariablesOutput"], () => require("./getAutomationVariables"));

export { GetAvailabilitySetArgs, GetAvailabilitySetResult, GetAvailabilitySetOutputArgs } from "./getAvailabilitySet";
export const getAvailabilitySet: typeof import("./getAvailabilitySet").getAvailabilitySet = null as any;
export const getAvailabilitySetOutput: typeof import("./getAvailabilitySet").getAvailabilitySetOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilitySet","getAvailabilitySetOutput"], () => require("./getAvailabilitySet"));

export { GetBackupPolicyFileShareArgs, GetBackupPolicyFileShareResult, GetBackupPolicyFileShareOutputArgs } from "./getBackupPolicyFileShare";
export const getBackupPolicyFileShare: typeof import("./getBackupPolicyFileShare").getBackupPolicyFileShare = null as any;
export const getBackupPolicyFileShareOutput: typeof import("./getBackupPolicyFileShare").getBackupPolicyFileShareOutput = null as any;
utilities.lazyLoad(exports, ["getBackupPolicyFileShare","getBackupPolicyFileShareOutput"], () => require("./getBackupPolicyFileShare"));

export { GetBackupPolicyVmArgs, GetBackupPolicyVmResult, GetBackupPolicyVmOutputArgs } from "./getBackupPolicyVm";
export const getBackupPolicyVm: typeof import("./getBackupPolicyVm").getBackupPolicyVm = null as any;
export const getBackupPolicyVmOutput: typeof import("./getBackupPolicyVm").getBackupPolicyVmOutput = null as any;
utilities.lazyLoad(exports, ["getBackupPolicyVm","getBackupPolicyVmOutput"], () => require("./getBackupPolicyVm"));

export { GetBastionHostArgs, GetBastionHostResult, GetBastionHostOutputArgs } from "./getBastionHost";
export const getBastionHost: typeof import("./getBastionHost").getBastionHost = null as any;
export const getBastionHostOutput: typeof import("./getBastionHost").getBastionHostOutput = null as any;
utilities.lazyLoad(exports, ["getBastionHost","getBastionHostOutput"], () => require("./getBastionHost"));

export { GetBatchAccountArgs, GetBatchAccountResult, GetBatchAccountOutputArgs } from "./getBatchAccount";
export const getBatchAccount: typeof import("./getBatchAccount").getBatchAccount = null as any;
export const getBatchAccountOutput: typeof import("./getBatchAccount").getBatchAccountOutput = null as any;
utilities.lazyLoad(exports, ["getBatchAccount","getBatchAccountOutput"], () => require("./getBatchAccount"));

export { GetBatchApplicationArgs, GetBatchApplicationResult, GetBatchApplicationOutputArgs } from "./getBatchApplication";
export const getBatchApplication: typeof import("./getBatchApplication").getBatchApplication = null as any;
export const getBatchApplicationOutput: typeof import("./getBatchApplication").getBatchApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getBatchApplication","getBatchApplicationOutput"], () => require("./getBatchApplication"));

export { GetBatchCertificateArgs, GetBatchCertificateResult, GetBatchCertificateOutputArgs } from "./getBatchCertificate";
export const getBatchCertificate: typeof import("./getBatchCertificate").getBatchCertificate = null as any;
export const getBatchCertificateOutput: typeof import("./getBatchCertificate").getBatchCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getBatchCertificate","getBatchCertificateOutput"], () => require("./getBatchCertificate"));

export { GetBatchPoolArgs, GetBatchPoolResult, GetBatchPoolOutputArgs } from "./getBatchPool";
export const getBatchPool: typeof import("./getBatchPool").getBatchPool = null as any;
export const getBatchPoolOutput: typeof import("./getBatchPool").getBatchPoolOutput = null as any;
utilities.lazyLoad(exports, ["getBatchPool","getBatchPoolOutput"], () => require("./getBatchPool"));

export { GetBillingEnrollmentAccountScopeArgs, GetBillingEnrollmentAccountScopeResult, GetBillingEnrollmentAccountScopeOutputArgs } from "./getBillingEnrollmentAccountScope";
export const getBillingEnrollmentAccountScope: typeof import("./getBillingEnrollmentAccountScope").getBillingEnrollmentAccountScope = null as any;
export const getBillingEnrollmentAccountScopeOutput: typeof import("./getBillingEnrollmentAccountScope").getBillingEnrollmentAccountScopeOutput = null as any;
utilities.lazyLoad(exports, ["getBillingEnrollmentAccountScope","getBillingEnrollmentAccountScopeOutput"], () => require("./getBillingEnrollmentAccountScope"));

export { GetBillingMcaAccountScopeArgs, GetBillingMcaAccountScopeResult, GetBillingMcaAccountScopeOutputArgs } from "./getBillingMcaAccountScope";
export const getBillingMcaAccountScope: typeof import("./getBillingMcaAccountScope").getBillingMcaAccountScope = null as any;
export const getBillingMcaAccountScopeOutput: typeof import("./getBillingMcaAccountScope").getBillingMcaAccountScopeOutput = null as any;
utilities.lazyLoad(exports, ["getBillingMcaAccountScope","getBillingMcaAccountScopeOutput"], () => require("./getBillingMcaAccountScope"));

export { GetBillingMpaAccountScopeArgs, GetBillingMpaAccountScopeResult, GetBillingMpaAccountScopeOutputArgs } from "./getBillingMpaAccountScope";
export const getBillingMpaAccountScope: typeof import("./getBillingMpaAccountScope").getBillingMpaAccountScope = null as any;
export const getBillingMpaAccountScopeOutput: typeof import("./getBillingMpaAccountScope").getBillingMpaAccountScopeOutput = null as any;
utilities.lazyLoad(exports, ["getBillingMpaAccountScope","getBillingMpaAccountScopeOutput"], () => require("./getBillingMpaAccountScope"));

export { GetBlueprintDefinitionArgs, GetBlueprintDefinitionResult, GetBlueprintDefinitionOutputArgs } from "./getBlueprintDefinition";
export const getBlueprintDefinition: typeof import("./getBlueprintDefinition").getBlueprintDefinition = null as any;
export const getBlueprintDefinitionOutput: typeof import("./getBlueprintDefinition").getBlueprintDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprintDefinition","getBlueprintDefinitionOutput"], () => require("./getBlueprintDefinition"));

export { GetBlueprintPublishedVersionArgs, GetBlueprintPublishedVersionResult, GetBlueprintPublishedVersionOutputArgs } from "./getBlueprintPublishedVersion";
export const getBlueprintPublishedVersion: typeof import("./getBlueprintPublishedVersion").getBlueprintPublishedVersion = null as any;
export const getBlueprintPublishedVersionOutput: typeof import("./getBlueprintPublishedVersion").getBlueprintPublishedVersionOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprintPublishedVersion","getBlueprintPublishedVersionOutput"], () => require("./getBlueprintPublishedVersion"));

export { GetCdnFrontdoorCustomDomainArgs, GetCdnFrontdoorCustomDomainResult, GetCdnFrontdoorCustomDomainOutputArgs } from "./getCdnFrontdoorCustomDomain";
export const getCdnFrontdoorCustomDomain: typeof import("./getCdnFrontdoorCustomDomain").getCdnFrontdoorCustomDomain = null as any;
export const getCdnFrontdoorCustomDomainOutput: typeof import("./getCdnFrontdoorCustomDomain").getCdnFrontdoorCustomDomainOutput = null as any;
utilities.lazyLoad(exports, ["getCdnFrontdoorCustomDomain","getCdnFrontdoorCustomDomainOutput"], () => require("./getCdnFrontdoorCustomDomain"));

export { GetCdnFrontdoorEndpointArgs, GetCdnFrontdoorEndpointResult, GetCdnFrontdoorEndpointOutputArgs } from "./getCdnFrontdoorEndpoint";
export const getCdnFrontdoorEndpoint: typeof import("./getCdnFrontdoorEndpoint").getCdnFrontdoorEndpoint = null as any;
export const getCdnFrontdoorEndpointOutput: typeof import("./getCdnFrontdoorEndpoint").getCdnFrontdoorEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getCdnFrontdoorEndpoint","getCdnFrontdoorEndpointOutput"], () => require("./getCdnFrontdoorEndpoint"));

export { GetCdnFrontdoorFirewallPolicyArgs, GetCdnFrontdoorFirewallPolicyResult, GetCdnFrontdoorFirewallPolicyOutputArgs } from "./getCdnFrontdoorFirewallPolicy";
export const getCdnFrontdoorFirewallPolicy: typeof import("./getCdnFrontdoorFirewallPolicy").getCdnFrontdoorFirewallPolicy = null as any;
export const getCdnFrontdoorFirewallPolicyOutput: typeof import("./getCdnFrontdoorFirewallPolicy").getCdnFrontdoorFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCdnFrontdoorFirewallPolicy","getCdnFrontdoorFirewallPolicyOutput"], () => require("./getCdnFrontdoorFirewallPolicy"));

export { GetCdnFrontdoorOriginGroupArgs, GetCdnFrontdoorOriginGroupResult, GetCdnFrontdoorOriginGroupOutputArgs } from "./getCdnFrontdoorOriginGroup";
export const getCdnFrontdoorOriginGroup: typeof import("./getCdnFrontdoorOriginGroup").getCdnFrontdoorOriginGroup = null as any;
export const getCdnFrontdoorOriginGroupOutput: typeof import("./getCdnFrontdoorOriginGroup").getCdnFrontdoorOriginGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCdnFrontdoorOriginGroup","getCdnFrontdoorOriginGroupOutput"], () => require("./getCdnFrontdoorOriginGroup"));

export { GetCdnFrontdoorProfileArgs, GetCdnFrontdoorProfileResult, GetCdnFrontdoorProfileOutputArgs } from "./getCdnFrontdoorProfile";
export const getCdnFrontdoorProfile: typeof import("./getCdnFrontdoorProfile").getCdnFrontdoorProfile = null as any;
export const getCdnFrontdoorProfileOutput: typeof import("./getCdnFrontdoorProfile").getCdnFrontdoorProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCdnFrontdoorProfile","getCdnFrontdoorProfileOutput"], () => require("./getCdnFrontdoorProfile"));

export { GetCdnFrontdoorRuleSetArgs, GetCdnFrontdoorRuleSetResult, GetCdnFrontdoorRuleSetOutputArgs } from "./getCdnFrontdoorRuleSet";
export const getCdnFrontdoorRuleSet: typeof import("./getCdnFrontdoorRuleSet").getCdnFrontdoorRuleSet = null as any;
export const getCdnFrontdoorRuleSetOutput: typeof import("./getCdnFrontdoorRuleSet").getCdnFrontdoorRuleSetOutput = null as any;
utilities.lazyLoad(exports, ["getCdnFrontdoorRuleSet","getCdnFrontdoorRuleSetOutput"], () => require("./getCdnFrontdoorRuleSet"));

export { GetCdnFrontdoorSecretArgs, GetCdnFrontdoorSecretResult, GetCdnFrontdoorSecretOutputArgs } from "./getCdnFrontdoorSecret";
export const getCdnFrontdoorSecret: typeof import("./getCdnFrontdoorSecret").getCdnFrontdoorSecret = null as any;
export const getCdnFrontdoorSecretOutput: typeof import("./getCdnFrontdoorSecret").getCdnFrontdoorSecretOutput = null as any;
utilities.lazyLoad(exports, ["getCdnFrontdoorSecret","getCdnFrontdoorSecretOutput"], () => require("./getCdnFrontdoorSecret"));

export { GetCdnProfileArgs, GetCdnProfileResult, GetCdnProfileOutputArgs } from "./getCdnProfile";
export const getCdnProfile: typeof import("./getCdnProfile").getCdnProfile = null as any;
export const getCdnProfileOutput: typeof import("./getCdnProfile").getCdnProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCdnProfile","getCdnProfileOutput"], () => require("./getCdnProfile"));

export { GetClientConfigArgs, GetClientConfigResult, GetClientConfigOutputArgs } from "./getClientConfig";
export const getClientConfig: typeof import("./getClientConfig").getClientConfig = null as any;
export const getClientConfigOutput: typeof import("./getClientConfig").getClientConfigOutput = null as any;
utilities.lazyLoad(exports, ["getClientConfig","getClientConfigOutput"], () => require("./getClientConfig"));

export { GetCognitiveAccountArgs, GetCognitiveAccountResult, GetCognitiveAccountOutputArgs } from "./getCognitiveAccount";
export const getCognitiveAccount: typeof import("./getCognitiveAccount").getCognitiveAccount = null as any;
export const getCognitiveAccountOutput: typeof import("./getCognitiveAccount").getCognitiveAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCognitiveAccount","getCognitiveAccountOutput"], () => require("./getCognitiveAccount"));

export { GetCommunicationServiceArgs, GetCommunicationServiceResult, GetCommunicationServiceOutputArgs } from "./getCommunicationService";
export const getCommunicationService: typeof import("./getCommunicationService").getCommunicationService = null as any;
export const getCommunicationServiceOutput: typeof import("./getCommunicationService").getCommunicationServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCommunicationService","getCommunicationServiceOutput"], () => require("./getCommunicationService"));

export { GetConfidentialLedgerArgs, GetConfidentialLedgerResult, GetConfidentialLedgerOutputArgs } from "./getConfidentialLedger";
export const getConfidentialLedger: typeof import("./getConfidentialLedger").getConfidentialLedger = null as any;
export const getConfidentialLedgerOutput: typeof import("./getConfidentialLedger").getConfidentialLedgerOutput = null as any;
utilities.lazyLoad(exports, ["getConfidentialLedger","getConfidentialLedgerOutput"], () => require("./getConfidentialLedger"));

export { GetConsumptionBudgetResourceGroupArgs, GetConsumptionBudgetResourceGroupResult, GetConsumptionBudgetResourceGroupOutputArgs } from "./getConsumptionBudgetResourceGroup";
export const getConsumptionBudgetResourceGroup: typeof import("./getConsumptionBudgetResourceGroup").getConsumptionBudgetResourceGroup = null as any;
export const getConsumptionBudgetResourceGroupOutput: typeof import("./getConsumptionBudgetResourceGroup").getConsumptionBudgetResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getConsumptionBudgetResourceGroup","getConsumptionBudgetResourceGroupOutput"], () => require("./getConsumptionBudgetResourceGroup"));

export { GetConsumptionBudgetSubscriptionArgs, GetConsumptionBudgetSubscriptionResult, GetConsumptionBudgetSubscriptionOutputArgs } from "./getConsumptionBudgetSubscription";
export const getConsumptionBudgetSubscription: typeof import("./getConsumptionBudgetSubscription").getConsumptionBudgetSubscription = null as any;
export const getConsumptionBudgetSubscriptionOutput: typeof import("./getConsumptionBudgetSubscription").getConsumptionBudgetSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getConsumptionBudgetSubscription","getConsumptionBudgetSubscriptionOutput"], () => require("./getConsumptionBudgetSubscription"));

export { GetContainerAppArgs, GetContainerAppResult, GetContainerAppOutputArgs } from "./getContainerApp";
export const getContainerApp: typeof import("./getContainerApp").getContainerApp = null as any;
export const getContainerAppOutput: typeof import("./getContainerApp").getContainerAppOutput = null as any;
utilities.lazyLoad(exports, ["getContainerApp","getContainerAppOutput"], () => require("./getContainerApp"));

export { GetContainerAppEnvironmentArgs, GetContainerAppEnvironmentResult, GetContainerAppEnvironmentOutputArgs } from "./getContainerAppEnvironment";
export const getContainerAppEnvironment: typeof import("./getContainerAppEnvironment").getContainerAppEnvironment = null as any;
export const getContainerAppEnvironmentOutput: typeof import("./getContainerAppEnvironment").getContainerAppEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getContainerAppEnvironment","getContainerAppEnvironmentOutput"], () => require("./getContainerAppEnvironment"));

export { GetContainerAppEnvironmentCertificateArgs, GetContainerAppEnvironmentCertificateResult, GetContainerAppEnvironmentCertificateOutputArgs } from "./getContainerAppEnvironmentCertificate";
export const getContainerAppEnvironmentCertificate: typeof import("./getContainerAppEnvironmentCertificate").getContainerAppEnvironmentCertificate = null as any;
export const getContainerAppEnvironmentCertificateOutput: typeof import("./getContainerAppEnvironmentCertificate").getContainerAppEnvironmentCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getContainerAppEnvironmentCertificate","getContainerAppEnvironmentCertificateOutput"], () => require("./getContainerAppEnvironmentCertificate"));

export { GetContainerGroupArgs, GetContainerGroupResult, GetContainerGroupOutputArgs } from "./getContainerGroup";
export const getContainerGroup: typeof import("./getContainerGroup").getContainerGroup = null as any;
export const getContainerGroupOutput: typeof import("./getContainerGroup").getContainerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getContainerGroup","getContainerGroupOutput"], () => require("./getContainerGroup"));

export { GetContainerRegistryArgs, GetContainerRegistryResult, GetContainerRegistryOutputArgs } from "./getContainerRegistry";
export const getContainerRegistry: typeof import("./getContainerRegistry").getContainerRegistry = null as any;
export const getContainerRegistryOutput: typeof import("./getContainerRegistry").getContainerRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistry","getContainerRegistryOutput"], () => require("./getContainerRegistry"));

export { GetContainerRegistryCacheRuleArgs, GetContainerRegistryCacheRuleResult, GetContainerRegistryCacheRuleOutputArgs } from "./getContainerRegistryCacheRule";
export const getContainerRegistryCacheRule: typeof import("./getContainerRegistryCacheRule").getContainerRegistryCacheRule = null as any;
export const getContainerRegistryCacheRuleOutput: typeof import("./getContainerRegistryCacheRule").getContainerRegistryCacheRuleOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistryCacheRule","getContainerRegistryCacheRuleOutput"], () => require("./getContainerRegistryCacheRule"));

export { GetContainerRegistryScopeMapArgs, GetContainerRegistryScopeMapResult, GetContainerRegistryScopeMapOutputArgs } from "./getContainerRegistryScopeMap";
export const getContainerRegistryScopeMap: typeof import("./getContainerRegistryScopeMap").getContainerRegistryScopeMap = null as any;
export const getContainerRegistryScopeMapOutput: typeof import("./getContainerRegistryScopeMap").getContainerRegistryScopeMapOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistryScopeMap","getContainerRegistryScopeMapOutput"], () => require("./getContainerRegistryScopeMap"));

export { GetContainerRegistryTokenArgs, GetContainerRegistryTokenResult, GetContainerRegistryTokenOutputArgs } from "./getContainerRegistryToken";
export const getContainerRegistryToken: typeof import("./getContainerRegistryToken").getContainerRegistryToken = null as any;
export const getContainerRegistryTokenOutput: typeof import("./getContainerRegistryToken").getContainerRegistryTokenOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistryToken","getContainerRegistryTokenOutput"], () => require("./getContainerRegistryToken"));

export { GetCosmosdbAccountArgs, GetCosmosdbAccountResult, GetCosmosdbAccountOutputArgs } from "./getCosmosdbAccount";
export const getCosmosdbAccount: typeof import("./getCosmosdbAccount").getCosmosdbAccount = null as any;
export const getCosmosdbAccountOutput: typeof import("./getCosmosdbAccount").getCosmosdbAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCosmosdbAccount","getCosmosdbAccountOutput"], () => require("./getCosmosdbAccount"));

export { GetCosmosdbMongoDatabaseArgs, GetCosmosdbMongoDatabaseResult, GetCosmosdbMongoDatabaseOutputArgs } from "./getCosmosdbMongoDatabase";
export const getCosmosdbMongoDatabase: typeof import("./getCosmosdbMongoDatabase").getCosmosdbMongoDatabase = null as any;
export const getCosmosdbMongoDatabaseOutput: typeof import("./getCosmosdbMongoDatabase").getCosmosdbMongoDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getCosmosdbMongoDatabase","getCosmosdbMongoDatabaseOutput"], () => require("./getCosmosdbMongoDatabase"));

export { GetCosmosdbRestorableDatabaseAccountsArgs, GetCosmosdbRestorableDatabaseAccountsResult, GetCosmosdbRestorableDatabaseAccountsOutputArgs } from "./getCosmosdbRestorableDatabaseAccounts";
export const getCosmosdbRestorableDatabaseAccounts: typeof import("./getCosmosdbRestorableDatabaseAccounts").getCosmosdbRestorableDatabaseAccounts = null as any;
export const getCosmosdbRestorableDatabaseAccountsOutput: typeof import("./getCosmosdbRestorableDatabaseAccounts").getCosmosdbRestorableDatabaseAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getCosmosdbRestorableDatabaseAccounts","getCosmosdbRestorableDatabaseAccountsOutput"], () => require("./getCosmosdbRestorableDatabaseAccounts"));

export { GetCosmosdbSqlDatabaseArgs, GetCosmosdbSqlDatabaseResult, GetCosmosdbSqlDatabaseOutputArgs } from "./getCosmosdbSqlDatabase";
export const getCosmosdbSqlDatabase: typeof import("./getCosmosdbSqlDatabase").getCosmosdbSqlDatabase = null as any;
export const getCosmosdbSqlDatabaseOutput: typeof import("./getCosmosdbSqlDatabase").getCosmosdbSqlDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getCosmosdbSqlDatabase","getCosmosdbSqlDatabaseOutput"], () => require("./getCosmosdbSqlDatabase"));

export { GetCosmosdbSqlRoleDefinitionArgs, GetCosmosdbSqlRoleDefinitionResult, GetCosmosdbSqlRoleDefinitionOutputArgs } from "./getCosmosdbSqlRoleDefinition";
export const getCosmosdbSqlRoleDefinition: typeof import("./getCosmosdbSqlRoleDefinition").getCosmosdbSqlRoleDefinition = null as any;
export const getCosmosdbSqlRoleDefinitionOutput: typeof import("./getCosmosdbSqlRoleDefinition").getCosmosdbSqlRoleDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getCosmosdbSqlRoleDefinition","getCosmosdbSqlRoleDefinitionOutput"], () => require("./getCosmosdbSqlRoleDefinition"));

export { GetDashboardGrafanaArgs, GetDashboardGrafanaResult, GetDashboardGrafanaOutputArgs } from "./getDashboardGrafana";
export const getDashboardGrafana: typeof import("./getDashboardGrafana").getDashboardGrafana = null as any;
export const getDashboardGrafanaOutput: typeof import("./getDashboardGrafana").getDashboardGrafanaOutput = null as any;
utilities.lazyLoad(exports, ["getDashboardGrafana","getDashboardGrafanaOutput"], () => require("./getDashboardGrafana"));

export { GetDataFactoryArgs, GetDataFactoryResult, GetDataFactoryOutputArgs } from "./getDataFactory";
export const getDataFactory: typeof import("./getDataFactory").getDataFactory = null as any;
export const getDataFactoryOutput: typeof import("./getDataFactory").getDataFactoryOutput = null as any;
utilities.lazyLoad(exports, ["getDataFactory","getDataFactoryOutput"], () => require("./getDataFactory"));

export { GetDataFactoryTriggerScheduleArgs, GetDataFactoryTriggerScheduleResult, GetDataFactoryTriggerScheduleOutputArgs } from "./getDataFactoryTriggerSchedule";
export const getDataFactoryTriggerSchedule: typeof import("./getDataFactoryTriggerSchedule").getDataFactoryTriggerSchedule = null as any;
export const getDataFactoryTriggerScheduleOutput: typeof import("./getDataFactoryTriggerSchedule").getDataFactoryTriggerScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getDataFactoryTriggerSchedule","getDataFactoryTriggerScheduleOutput"], () => require("./getDataFactoryTriggerSchedule"));

export { GetDataFactoryTriggerSchedulesArgs, GetDataFactoryTriggerSchedulesResult, GetDataFactoryTriggerSchedulesOutputArgs } from "./getDataFactoryTriggerSchedules";
export const getDataFactoryTriggerSchedules: typeof import("./getDataFactoryTriggerSchedules").getDataFactoryTriggerSchedules = null as any;
export const getDataFactoryTriggerSchedulesOutput: typeof import("./getDataFactoryTriggerSchedules").getDataFactoryTriggerSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getDataFactoryTriggerSchedules","getDataFactoryTriggerSchedulesOutput"], () => require("./getDataFactoryTriggerSchedules"));

export { GetDataProtectionBackupVaultArgs, GetDataProtectionBackupVaultResult, GetDataProtectionBackupVaultOutputArgs } from "./getDataProtectionBackupVault";
export const getDataProtectionBackupVault: typeof import("./getDataProtectionBackupVault").getDataProtectionBackupVault = null as any;
export const getDataProtectionBackupVaultOutput: typeof import("./getDataProtectionBackupVault").getDataProtectionBackupVaultOutput = null as any;
utilities.lazyLoad(exports, ["getDataProtectionBackupVault","getDataProtectionBackupVaultOutput"], () => require("./getDataProtectionBackupVault"));

export { GetDataShareArgs, GetDataShareResult, GetDataShareOutputArgs } from "./getDataShare";
export const getDataShare: typeof import("./getDataShare").getDataShare = null as any;
export const getDataShareOutput: typeof import("./getDataShare").getDataShareOutput = null as any;
utilities.lazyLoad(exports, ["getDataShare","getDataShareOutput"], () => require("./getDataShare"));

export { GetDataShareAccountArgs, GetDataShareAccountResult, GetDataShareAccountOutputArgs } from "./getDataShareAccount";
export const getDataShareAccount: typeof import("./getDataShareAccount").getDataShareAccount = null as any;
export const getDataShareAccountOutput: typeof import("./getDataShareAccount").getDataShareAccountOutput = null as any;
utilities.lazyLoad(exports, ["getDataShareAccount","getDataShareAccountOutput"], () => require("./getDataShareAccount"));

export { GetDataShareDatasetBlobStorageArgs, GetDataShareDatasetBlobStorageResult, GetDataShareDatasetBlobStorageOutputArgs } from "./getDataShareDatasetBlobStorage";
export const getDataShareDatasetBlobStorage: typeof import("./getDataShareDatasetBlobStorage").getDataShareDatasetBlobStorage = null as any;
export const getDataShareDatasetBlobStorageOutput: typeof import("./getDataShareDatasetBlobStorage").getDataShareDatasetBlobStorageOutput = null as any;
utilities.lazyLoad(exports, ["getDataShareDatasetBlobStorage","getDataShareDatasetBlobStorageOutput"], () => require("./getDataShareDatasetBlobStorage"));

export { GetDataShareDatasetDataLakeGen2Args, GetDataShareDatasetDataLakeGen2Result, GetDataShareDatasetDataLakeGen2OutputArgs } from "./getDataShareDatasetDataLakeGen2";
export const getDataShareDatasetDataLakeGen2: typeof import("./getDataShareDatasetDataLakeGen2").getDataShareDatasetDataLakeGen2 = null as any;
export const getDataShareDatasetDataLakeGen2Output: typeof import("./getDataShareDatasetDataLakeGen2").getDataShareDatasetDataLakeGen2Output = null as any;
utilities.lazyLoad(exports, ["getDataShareDatasetDataLakeGen2","getDataShareDatasetDataLakeGen2Output"], () => require("./getDataShareDatasetDataLakeGen2"));

export { GetDataShareDatasetKustoClusterArgs, GetDataShareDatasetKustoClusterResult, GetDataShareDatasetKustoClusterOutputArgs } from "./getDataShareDatasetKustoCluster";
export const getDataShareDatasetKustoCluster: typeof import("./getDataShareDatasetKustoCluster").getDataShareDatasetKustoCluster = null as any;
export const getDataShareDatasetKustoClusterOutput: typeof import("./getDataShareDatasetKustoCluster").getDataShareDatasetKustoClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDataShareDatasetKustoCluster","getDataShareDatasetKustoClusterOutput"], () => require("./getDataShareDatasetKustoCluster"));

export { GetDataShareDatasetKustoDatabaseArgs, GetDataShareDatasetKustoDatabaseResult, GetDataShareDatasetKustoDatabaseOutputArgs } from "./getDataShareDatasetKustoDatabase";
export const getDataShareDatasetKustoDatabase: typeof import("./getDataShareDatasetKustoDatabase").getDataShareDatasetKustoDatabase = null as any;
export const getDataShareDatasetKustoDatabaseOutput: typeof import("./getDataShareDatasetKustoDatabase").getDataShareDatasetKustoDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDataShareDatasetKustoDatabase","getDataShareDatasetKustoDatabaseOutput"], () => require("./getDataShareDatasetKustoDatabase"));

export { GetDatabaseMigrationProjectArgs, GetDatabaseMigrationProjectResult, GetDatabaseMigrationProjectOutputArgs } from "./getDatabaseMigrationProject";
export const getDatabaseMigrationProject: typeof import("./getDatabaseMigrationProject").getDatabaseMigrationProject = null as any;
export const getDatabaseMigrationProjectOutput: typeof import("./getDatabaseMigrationProject").getDatabaseMigrationProjectOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationProject","getDatabaseMigrationProjectOutput"], () => require("./getDatabaseMigrationProject"));

export { GetDatabaseMigrationServiceArgs, GetDatabaseMigrationServiceResult, GetDatabaseMigrationServiceOutputArgs } from "./getDatabaseMigrationService";
export const getDatabaseMigrationService: typeof import("./getDatabaseMigrationService").getDatabaseMigrationService = null as any;
export const getDatabaseMigrationServiceOutput: typeof import("./getDatabaseMigrationService").getDatabaseMigrationServiceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationService","getDatabaseMigrationServiceOutput"], () => require("./getDatabaseMigrationService"));

export { GetDataboxEdgeDeviceArgs, GetDataboxEdgeDeviceResult, GetDataboxEdgeDeviceOutputArgs } from "./getDataboxEdgeDevice";
export const getDataboxEdgeDevice: typeof import("./getDataboxEdgeDevice").getDataboxEdgeDevice = null as any;
export const getDataboxEdgeDeviceOutput: typeof import("./getDataboxEdgeDevice").getDataboxEdgeDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDataboxEdgeDevice","getDataboxEdgeDeviceOutput"], () => require("./getDataboxEdgeDevice"));

export { GetDatabricksAccessConnectorArgs, GetDatabricksAccessConnectorResult, GetDatabricksAccessConnectorOutputArgs } from "./getDatabricksAccessConnector";
export const getDatabricksAccessConnector: typeof import("./getDatabricksAccessConnector").getDatabricksAccessConnector = null as any;
export const getDatabricksAccessConnectorOutput: typeof import("./getDatabricksAccessConnector").getDatabricksAccessConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getDatabricksAccessConnector","getDatabricksAccessConnectorOutput"], () => require("./getDatabricksAccessConnector"));

export { GetDatabricksWorkspaceArgs, GetDatabricksWorkspaceResult, GetDatabricksWorkspaceOutputArgs } from "./getDatabricksWorkspace";
export const getDatabricksWorkspace: typeof import("./getDatabricksWorkspace").getDatabricksWorkspace = null as any;
export const getDatabricksWorkspaceOutput: typeof import("./getDatabricksWorkspace").getDatabricksWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabricksWorkspace","getDatabricksWorkspaceOutput"], () => require("./getDatabricksWorkspace"));

export { GetDatabricksWorkspacePrivateEndpointConnectionArgs, GetDatabricksWorkspacePrivateEndpointConnectionResult, GetDatabricksWorkspacePrivateEndpointConnectionOutputArgs } from "./getDatabricksWorkspacePrivateEndpointConnection";
export const getDatabricksWorkspacePrivateEndpointConnection: typeof import("./getDatabricksWorkspacePrivateEndpointConnection").getDatabricksWorkspacePrivateEndpointConnection = null as any;
export const getDatabricksWorkspacePrivateEndpointConnectionOutput: typeof import("./getDatabricksWorkspacePrivateEndpointConnection").getDatabricksWorkspacePrivateEndpointConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getDatabricksWorkspacePrivateEndpointConnection","getDatabricksWorkspacePrivateEndpointConnectionOutput"], () => require("./getDatabricksWorkspacePrivateEndpointConnection"));

export { GetDedicatedHostArgs, GetDedicatedHostResult, GetDedicatedHostOutputArgs } from "./getDedicatedHost";
export const getDedicatedHost: typeof import("./getDedicatedHost").getDedicatedHost = null as any;
export const getDedicatedHostOutput: typeof import("./getDedicatedHost").getDedicatedHostOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedHost","getDedicatedHostOutput"], () => require("./getDedicatedHost"));

export { GetDedicatedHostGroupArgs, GetDedicatedHostGroupResult, GetDedicatedHostGroupOutputArgs } from "./getDedicatedHostGroup";
export const getDedicatedHostGroup: typeof import("./getDedicatedHostGroup").getDedicatedHostGroup = null as any;
export const getDedicatedHostGroupOutput: typeof import("./getDedicatedHostGroup").getDedicatedHostGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedHostGroup","getDedicatedHostGroupOutput"], () => require("./getDedicatedHostGroup"));

export { GetDevTestLabArgs, GetDevTestLabResult, GetDevTestLabOutputArgs } from "./getDevTestLab";
export const getDevTestLab: typeof import("./getDevTestLab").getDevTestLab = null as any;
export const getDevTestLabOutput: typeof import("./getDevTestLab").getDevTestLabOutput = null as any;
utilities.lazyLoad(exports, ["getDevTestLab","getDevTestLabOutput"], () => require("./getDevTestLab"));

export { GetDevTestVirtualNetworkArgs, GetDevTestVirtualNetworkResult, GetDevTestVirtualNetworkOutputArgs } from "./getDevTestVirtualNetwork";
export const getDevTestVirtualNetwork: typeof import("./getDevTestVirtualNetwork").getDevTestVirtualNetwork = null as any;
export const getDevTestVirtualNetworkOutput: typeof import("./getDevTestVirtualNetwork").getDevTestVirtualNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getDevTestVirtualNetwork","getDevTestVirtualNetworkOutput"], () => require("./getDevTestVirtualNetwork"));

export { GetDigitalTwinsInstanceArgs, GetDigitalTwinsInstanceResult, GetDigitalTwinsInstanceOutputArgs } from "./getDigitalTwinsInstance";
export const getDigitalTwinsInstance: typeof import("./getDigitalTwinsInstance").getDigitalTwinsInstance = null as any;
export const getDigitalTwinsInstanceOutput: typeof import("./getDigitalTwinsInstance").getDigitalTwinsInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDigitalTwinsInstance","getDigitalTwinsInstanceOutput"], () => require("./getDigitalTwinsInstance"));

export { GetDiskAccessArgs, GetDiskAccessResult, GetDiskAccessOutputArgs } from "./getDiskAccess";
export const getDiskAccess: typeof import("./getDiskAccess").getDiskAccess = null as any;
export const getDiskAccessOutput: typeof import("./getDiskAccess").getDiskAccessOutput = null as any;
utilities.lazyLoad(exports, ["getDiskAccess","getDiskAccessOutput"], () => require("./getDiskAccess"));

export { GetDiskEncryptionSetArgs, GetDiskEncryptionSetResult, GetDiskEncryptionSetOutputArgs } from "./getDiskEncryptionSet";
export const getDiskEncryptionSet: typeof import("./getDiskEncryptionSet").getDiskEncryptionSet = null as any;
export const getDiskEncryptionSetOutput: typeof import("./getDiskEncryptionSet").getDiskEncryptionSetOutput = null as any;
utilities.lazyLoad(exports, ["getDiskEncryptionSet","getDiskEncryptionSetOutput"], () => require("./getDiskEncryptionSet"));

export { GetDnsARecordArgs, GetDnsARecordResult, GetDnsARecordOutputArgs } from "./getDnsARecord";
export const getDnsARecord: typeof import("./getDnsARecord").getDnsARecord = null as any;
export const getDnsARecordOutput: typeof import("./getDnsARecord").getDnsARecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsARecord","getDnsARecordOutput"], () => require("./getDnsARecord"));

export { GetDnsAaaaRecordArgs, GetDnsAaaaRecordResult, GetDnsAaaaRecordOutputArgs } from "./getDnsAaaaRecord";
export const getDnsAaaaRecord: typeof import("./getDnsAaaaRecord").getDnsAaaaRecord = null as any;
export const getDnsAaaaRecordOutput: typeof import("./getDnsAaaaRecord").getDnsAaaaRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsAaaaRecord","getDnsAaaaRecordOutput"], () => require("./getDnsAaaaRecord"));

export { GetDnsCaaRecordArgs, GetDnsCaaRecordResult, GetDnsCaaRecordOutputArgs } from "./getDnsCaaRecord";
export const getDnsCaaRecord: typeof import("./getDnsCaaRecord").getDnsCaaRecord = null as any;
export const getDnsCaaRecordOutput: typeof import("./getDnsCaaRecord").getDnsCaaRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsCaaRecord","getDnsCaaRecordOutput"], () => require("./getDnsCaaRecord"));

export { GetDnsCnameRecordArgs, GetDnsCnameRecordResult, GetDnsCnameRecordOutputArgs } from "./getDnsCnameRecord";
export const getDnsCnameRecord: typeof import("./getDnsCnameRecord").getDnsCnameRecord = null as any;
export const getDnsCnameRecordOutput: typeof import("./getDnsCnameRecord").getDnsCnameRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsCnameRecord","getDnsCnameRecordOutput"], () => require("./getDnsCnameRecord"));

export { GetDnsMxRecordArgs, GetDnsMxRecordResult, GetDnsMxRecordOutputArgs } from "./getDnsMxRecord";
export const getDnsMxRecord: typeof import("./getDnsMxRecord").getDnsMxRecord = null as any;
export const getDnsMxRecordOutput: typeof import("./getDnsMxRecord").getDnsMxRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsMxRecord","getDnsMxRecordOutput"], () => require("./getDnsMxRecord"));

export { GetDnsNsRecordArgs, GetDnsNsRecordResult, GetDnsNsRecordOutputArgs } from "./getDnsNsRecord";
export const getDnsNsRecord: typeof import("./getDnsNsRecord").getDnsNsRecord = null as any;
export const getDnsNsRecordOutput: typeof import("./getDnsNsRecord").getDnsNsRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsNsRecord","getDnsNsRecordOutput"], () => require("./getDnsNsRecord"));

export { GetDnsPtrRecordArgs, GetDnsPtrRecordResult, GetDnsPtrRecordOutputArgs } from "./getDnsPtrRecord";
export const getDnsPtrRecord: typeof import("./getDnsPtrRecord").getDnsPtrRecord = null as any;
export const getDnsPtrRecordOutput: typeof import("./getDnsPtrRecord").getDnsPtrRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsPtrRecord","getDnsPtrRecordOutput"], () => require("./getDnsPtrRecord"));

export { GetDnsSoaRecordArgs, GetDnsSoaRecordResult, GetDnsSoaRecordOutputArgs } from "./getDnsSoaRecord";
export const getDnsSoaRecord: typeof import("./getDnsSoaRecord").getDnsSoaRecord = null as any;
export const getDnsSoaRecordOutput: typeof import("./getDnsSoaRecord").getDnsSoaRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSoaRecord","getDnsSoaRecordOutput"], () => require("./getDnsSoaRecord"));

export { GetDnsSrvRecordArgs, GetDnsSrvRecordResult, GetDnsSrvRecordOutputArgs } from "./getDnsSrvRecord";
export const getDnsSrvRecord: typeof import("./getDnsSrvRecord").getDnsSrvRecord = null as any;
export const getDnsSrvRecordOutput: typeof import("./getDnsSrvRecord").getDnsSrvRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSrvRecord","getDnsSrvRecordOutput"], () => require("./getDnsSrvRecord"));

export { GetDnsTxtRecordArgs, GetDnsTxtRecordResult, GetDnsTxtRecordOutputArgs } from "./getDnsTxtRecord";
export const getDnsTxtRecord: typeof import("./getDnsTxtRecord").getDnsTxtRecord = null as any;
export const getDnsTxtRecordOutput: typeof import("./getDnsTxtRecord").getDnsTxtRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsTxtRecord","getDnsTxtRecordOutput"], () => require("./getDnsTxtRecord"));

export { GetDnsZoneArgs, GetDnsZoneResult, GetDnsZoneOutputArgs } from "./getDnsZone";
export const getDnsZone: typeof import("./getDnsZone").getDnsZone = null as any;
export const getDnsZoneOutput: typeof import("./getDnsZone").getDnsZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZone","getDnsZoneOutput"], () => require("./getDnsZone"));

export { GetElasticCloudElasticsearchArgs, GetElasticCloudElasticsearchResult, GetElasticCloudElasticsearchOutputArgs } from "./getElasticCloudElasticsearch";
export const getElasticCloudElasticsearch: typeof import("./getElasticCloudElasticsearch").getElasticCloudElasticsearch = null as any;
export const getElasticCloudElasticsearchOutput: typeof import("./getElasticCloudElasticsearch").getElasticCloudElasticsearchOutput = null as any;
utilities.lazyLoad(exports, ["getElasticCloudElasticsearch","getElasticCloudElasticsearchOutput"], () => require("./getElasticCloudElasticsearch"));

export { GetElasticSanArgs, GetElasticSanResult, GetElasticSanOutputArgs } from "./getElasticSan";
export const getElasticSan: typeof import("./getElasticSan").getElasticSan = null as any;
export const getElasticSanOutput: typeof import("./getElasticSan").getElasticSanOutput = null as any;
utilities.lazyLoad(exports, ["getElasticSan","getElasticSanOutput"], () => require("./getElasticSan"));

export { GetElasticSanVolumeGroupArgs, GetElasticSanVolumeGroupResult, GetElasticSanVolumeGroupOutputArgs } from "./getElasticSanVolumeGroup";
export const getElasticSanVolumeGroup: typeof import("./getElasticSanVolumeGroup").getElasticSanVolumeGroup = null as any;
export const getElasticSanVolumeGroupOutput: typeof import("./getElasticSanVolumeGroup").getElasticSanVolumeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getElasticSanVolumeGroup","getElasticSanVolumeGroupOutput"], () => require("./getElasticSanVolumeGroup"));

export { GetElasticSanVolumeSnapshotArgs, GetElasticSanVolumeSnapshotResult, GetElasticSanVolumeSnapshotOutputArgs } from "./getElasticSanVolumeSnapshot";
export const getElasticSanVolumeSnapshot: typeof import("./getElasticSanVolumeSnapshot").getElasticSanVolumeSnapshot = null as any;
export const getElasticSanVolumeSnapshotOutput: typeof import("./getElasticSanVolumeSnapshot").getElasticSanVolumeSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getElasticSanVolumeSnapshot","getElasticSanVolumeSnapshotOutput"], () => require("./getElasticSanVolumeSnapshot"));

export { GetEventgridDomainArgs, GetEventgridDomainResult, GetEventgridDomainOutputArgs } from "./getEventgridDomain";
export const getEventgridDomain: typeof import("./getEventgridDomain").getEventgridDomain = null as any;
export const getEventgridDomainOutput: typeof import("./getEventgridDomain").getEventgridDomainOutput = null as any;
utilities.lazyLoad(exports, ["getEventgridDomain","getEventgridDomainOutput"], () => require("./getEventgridDomain"));

export { GetEventgridDomainTopicArgs, GetEventgridDomainTopicResult, GetEventgridDomainTopicOutputArgs } from "./getEventgridDomainTopic";
export const getEventgridDomainTopic: typeof import("./getEventgridDomainTopic").getEventgridDomainTopic = null as any;
export const getEventgridDomainTopicOutput: typeof import("./getEventgridDomainTopic").getEventgridDomainTopicOutput = null as any;
utilities.lazyLoad(exports, ["getEventgridDomainTopic","getEventgridDomainTopicOutput"], () => require("./getEventgridDomainTopic"));

export { GetEventgridSystemTopicArgs, GetEventgridSystemTopicResult, GetEventgridSystemTopicOutputArgs } from "./getEventgridSystemTopic";
export const getEventgridSystemTopic: typeof import("./getEventgridSystemTopic").getEventgridSystemTopic = null as any;
export const getEventgridSystemTopicOutput: typeof import("./getEventgridSystemTopic").getEventgridSystemTopicOutput = null as any;
utilities.lazyLoad(exports, ["getEventgridSystemTopic","getEventgridSystemTopicOutput"], () => require("./getEventgridSystemTopic"));

export { GetEventgridTopicArgs, GetEventgridTopicResult, GetEventgridTopicOutputArgs } from "./getEventgridTopic";
export const getEventgridTopic: typeof import("./getEventgridTopic").getEventgridTopic = null as any;
export const getEventgridTopicOutput: typeof import("./getEventgridTopic").getEventgridTopicOutput = null as any;
utilities.lazyLoad(exports, ["getEventgridTopic","getEventgridTopicOutput"], () => require("./getEventgridTopic"));

export { GetEventhubArgs, GetEventhubResult, GetEventhubOutputArgs } from "./getEventhub";
export const getEventhub: typeof import("./getEventhub").getEventhub = null as any;
export const getEventhubOutput: typeof import("./getEventhub").getEventhubOutput = null as any;
utilities.lazyLoad(exports, ["getEventhub","getEventhubOutput"], () => require("./getEventhub"));

export { GetEventhubAuthorizationRuleArgs, GetEventhubAuthorizationRuleResult, GetEventhubAuthorizationRuleOutputArgs } from "./getEventhubAuthorizationRule";
export const getEventhubAuthorizationRule: typeof import("./getEventhubAuthorizationRule").getEventhubAuthorizationRule = null as any;
export const getEventhubAuthorizationRuleOutput: typeof import("./getEventhubAuthorizationRule").getEventhubAuthorizationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getEventhubAuthorizationRule","getEventhubAuthorizationRuleOutput"], () => require("./getEventhubAuthorizationRule"));

export { GetEventhubClusterArgs, GetEventhubClusterResult, GetEventhubClusterOutputArgs } from "./getEventhubCluster";
export const getEventhubCluster: typeof import("./getEventhubCluster").getEventhubCluster = null as any;
export const getEventhubClusterOutput: typeof import("./getEventhubCluster").getEventhubClusterOutput = null as any;
utilities.lazyLoad(exports, ["getEventhubCluster","getEventhubClusterOutput"], () => require("./getEventhubCluster"));

export { GetEventhubConsumerGroupArgs, GetEventhubConsumerGroupResult, GetEventhubConsumerGroupOutputArgs } from "./getEventhubConsumerGroup";
export const getEventhubConsumerGroup: typeof import("./getEventhubConsumerGroup").getEventhubConsumerGroup = null as any;
export const getEventhubConsumerGroupOutput: typeof import("./getEventhubConsumerGroup").getEventhubConsumerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEventhubConsumerGroup","getEventhubConsumerGroupOutput"], () => require("./getEventhubConsumerGroup"));

export { GetEventhubNamespaceArgs, GetEventhubNamespaceResult, GetEventhubNamespaceOutputArgs } from "./getEventhubNamespace";
export const getEventhubNamespace: typeof import("./getEventhubNamespace").getEventhubNamespace = null as any;
export const getEventhubNamespaceOutput: typeof import("./getEventhubNamespace").getEventhubNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getEventhubNamespace","getEventhubNamespaceOutput"], () => require("./getEventhubNamespace"));

export { GetEventhubNamespaceAuthorizationRuleArgs, GetEventhubNamespaceAuthorizationRuleResult, GetEventhubNamespaceAuthorizationRuleOutputArgs } from "./getEventhubNamespaceAuthorizationRule";
export const getEventhubNamespaceAuthorizationRule: typeof import("./getEventhubNamespaceAuthorizationRule").getEventhubNamespaceAuthorizationRule = null as any;
export const getEventhubNamespaceAuthorizationRuleOutput: typeof import("./getEventhubNamespaceAuthorizationRule").getEventhubNamespaceAuthorizationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getEventhubNamespaceAuthorizationRule","getEventhubNamespaceAuthorizationRuleOutput"], () => require("./getEventhubNamespaceAuthorizationRule"));

export { GetEventhubSasArgs, GetEventhubSasResult, GetEventhubSasOutputArgs } from "./getEventhubSas";
export const getEventhubSas: typeof import("./getEventhubSas").getEventhubSas = null as any;
export const getEventhubSasOutput: typeof import("./getEventhubSas").getEventhubSasOutput = null as any;
utilities.lazyLoad(exports, ["getEventhubSas","getEventhubSasOutput"], () => require("./getEventhubSas"));

export { GetExpressRouteCircuitArgs, GetExpressRouteCircuitResult, GetExpressRouteCircuitOutputArgs } from "./getExpressRouteCircuit";
export const getExpressRouteCircuit: typeof import("./getExpressRouteCircuit").getExpressRouteCircuit = null as any;
export const getExpressRouteCircuitOutput: typeof import("./getExpressRouteCircuit").getExpressRouteCircuitOutput = null as any;
utilities.lazyLoad(exports, ["getExpressRouteCircuit","getExpressRouteCircuitOutput"], () => require("./getExpressRouteCircuit"));

export { GetExpressRouteCircuitPeeringArgs, GetExpressRouteCircuitPeeringResult, GetExpressRouteCircuitPeeringOutputArgs } from "./getExpressRouteCircuitPeering";
export const getExpressRouteCircuitPeering: typeof import("./getExpressRouteCircuitPeering").getExpressRouteCircuitPeering = null as any;
export const getExpressRouteCircuitPeeringOutput: typeof import("./getExpressRouteCircuitPeering").getExpressRouteCircuitPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getExpressRouteCircuitPeering","getExpressRouteCircuitPeeringOutput"], () => require("./getExpressRouteCircuitPeering"));

export { GetExtendedLocationsArgs, GetExtendedLocationsResult, GetExtendedLocationsOutputArgs } from "./getExtendedLocations";
export const getExtendedLocations: typeof import("./getExtendedLocations").getExtendedLocations = null as any;
export const getExtendedLocationsOutput: typeof import("./getExtendedLocations").getExtendedLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getExtendedLocations","getExtendedLocationsOutput"], () => require("./getExtendedLocations"));

export { GetFirewallArgs, GetFirewallResult, GetFirewallOutputArgs } from "./getFirewall";
export const getFirewall: typeof import("./getFirewall").getFirewall = null as any;
export const getFirewallOutput: typeof import("./getFirewall").getFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getFirewall","getFirewallOutput"], () => require("./getFirewall"));

export { GetFirewallPolicyArgs, GetFirewallPolicyResult, GetFirewallPolicyOutputArgs } from "./getFirewallPolicy";
export const getFirewallPolicy: typeof import("./getFirewallPolicy").getFirewallPolicy = null as any;
export const getFirewallPolicyOutput: typeof import("./getFirewallPolicy").getFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicy","getFirewallPolicyOutput"], () => require("./getFirewallPolicy"));

export { GetFunctionAppArgs, GetFunctionAppResult, GetFunctionAppOutputArgs } from "./getFunctionApp";
export const getFunctionApp: typeof import("./getFunctionApp").getFunctionApp = null as any;
export const getFunctionAppOutput: typeof import("./getFunctionApp").getFunctionAppOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionApp","getFunctionAppOutput"], () => require("./getFunctionApp"));

export { GetFunctionAppHostKeysArgs, GetFunctionAppHostKeysResult, GetFunctionAppHostKeysOutputArgs } from "./getFunctionAppHostKeys";
export const getFunctionAppHostKeys: typeof import("./getFunctionAppHostKeys").getFunctionAppHostKeys = null as any;
export const getFunctionAppHostKeysOutput: typeof import("./getFunctionAppHostKeys").getFunctionAppHostKeysOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionAppHostKeys","getFunctionAppHostKeysOutput"], () => require("./getFunctionAppHostKeys"));

export { GetHdinsightClusterArgs, GetHdinsightClusterResult, GetHdinsightClusterOutputArgs } from "./getHdinsightCluster";
export const getHdinsightCluster: typeof import("./getHdinsightCluster").getHdinsightCluster = null as any;
export const getHdinsightClusterOutput: typeof import("./getHdinsightCluster").getHdinsightClusterOutput = null as any;
utilities.lazyLoad(exports, ["getHdinsightCluster","getHdinsightClusterOutput"], () => require("./getHdinsightCluster"));

export { GetHealthcareDicomServiceArgs, GetHealthcareDicomServiceResult, GetHealthcareDicomServiceOutputArgs } from "./getHealthcareDicomService";
export const getHealthcareDicomService: typeof import("./getHealthcareDicomService").getHealthcareDicomService = null as any;
export const getHealthcareDicomServiceOutput: typeof import("./getHealthcareDicomService").getHealthcareDicomServiceOutput = null as any;
utilities.lazyLoad(exports, ["getHealthcareDicomService","getHealthcareDicomServiceOutput"], () => require("./getHealthcareDicomService"));

export { GetHealthcareFhirServiceArgs, GetHealthcareFhirServiceResult, GetHealthcareFhirServiceOutputArgs } from "./getHealthcareFhirService";
export const getHealthcareFhirService: typeof import("./getHealthcareFhirService").getHealthcareFhirService = null as any;
export const getHealthcareFhirServiceOutput: typeof import("./getHealthcareFhirService").getHealthcareFhirServiceOutput = null as any;
utilities.lazyLoad(exports, ["getHealthcareFhirService","getHealthcareFhirServiceOutput"], () => require("./getHealthcareFhirService"));

export { GetHealthcareMedtechServiceArgs, GetHealthcareMedtechServiceResult, GetHealthcareMedtechServiceOutputArgs } from "./getHealthcareMedtechService";
export const getHealthcareMedtechService: typeof import("./getHealthcareMedtechService").getHealthcareMedtechService = null as any;
export const getHealthcareMedtechServiceOutput: typeof import("./getHealthcareMedtechService").getHealthcareMedtechServiceOutput = null as any;
utilities.lazyLoad(exports, ["getHealthcareMedtechService","getHealthcareMedtechServiceOutput"], () => require("./getHealthcareMedtechService"));

export { GetHealthcareServiceArgs, GetHealthcareServiceResult, GetHealthcareServiceOutputArgs } from "./getHealthcareService";
export const getHealthcareService: typeof import("./getHealthcareService").getHealthcareService = null as any;
export const getHealthcareServiceOutput: typeof import("./getHealthcareService").getHealthcareServiceOutput = null as any;
utilities.lazyLoad(exports, ["getHealthcareService","getHealthcareServiceOutput"], () => require("./getHealthcareService"));

export { GetHealthcareWorkspaceArgs, GetHealthcareWorkspaceResult, GetHealthcareWorkspaceOutputArgs } from "./getHealthcareWorkspace";
export const getHealthcareWorkspace: typeof import("./getHealthcareWorkspace").getHealthcareWorkspace = null as any;
export const getHealthcareWorkspaceOutput: typeof import("./getHealthcareWorkspace").getHealthcareWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getHealthcareWorkspace","getHealthcareWorkspaceOutput"], () => require("./getHealthcareWorkspace"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetImagesArgs, GetImagesResult, GetImagesOutputArgs } from "./getImages";
export const getImages: typeof import("./getImages").getImages = null as any;
export const getImagesOutput: typeof import("./getImages").getImagesOutput = null as any;
utilities.lazyLoad(exports, ["getImages","getImagesOutput"], () => require("./getImages"));

export { GetIothubArgs, GetIothubResult, GetIothubOutputArgs } from "./getIothub";
export const getIothub: typeof import("./getIothub").getIothub = null as any;
export const getIothubOutput: typeof import("./getIothub").getIothubOutput = null as any;
utilities.lazyLoad(exports, ["getIothub","getIothubOutput"], () => require("./getIothub"));

export { GetIothubDpsArgs, GetIothubDpsResult, GetIothubDpsOutputArgs } from "./getIothubDps";
export const getIothubDps: typeof import("./getIothubDps").getIothubDps = null as any;
export const getIothubDpsOutput: typeof import("./getIothubDps").getIothubDpsOutput = null as any;
utilities.lazyLoad(exports, ["getIothubDps","getIothubDpsOutput"], () => require("./getIothubDps"));

export { GetIothubDpsSharedAccessPolicyArgs, GetIothubDpsSharedAccessPolicyResult, GetIothubDpsSharedAccessPolicyOutputArgs } from "./getIothubDpsSharedAccessPolicy";
export const getIothubDpsSharedAccessPolicy: typeof import("./getIothubDpsSharedAccessPolicy").getIothubDpsSharedAccessPolicy = null as any;
export const getIothubDpsSharedAccessPolicyOutput: typeof import("./getIothubDpsSharedAccessPolicy").getIothubDpsSharedAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIothubDpsSharedAccessPolicy","getIothubDpsSharedAccessPolicyOutput"], () => require("./getIothubDpsSharedAccessPolicy"));

export { GetIothubSharedAccessPolicyArgs, GetIothubSharedAccessPolicyResult, GetIothubSharedAccessPolicyOutputArgs } from "./getIothubSharedAccessPolicy";
export const getIothubSharedAccessPolicy: typeof import("./getIothubSharedAccessPolicy").getIothubSharedAccessPolicy = null as any;
export const getIothubSharedAccessPolicyOutput: typeof import("./getIothubSharedAccessPolicy").getIothubSharedAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIothubSharedAccessPolicy","getIothubSharedAccessPolicyOutput"], () => require("./getIothubSharedAccessPolicy"));

export { GetIpGroupArgs, GetIpGroupResult, GetIpGroupOutputArgs } from "./getIpGroup";
export const getIpGroup: typeof import("./getIpGroup").getIpGroup = null as any;
export const getIpGroupOutput: typeof import("./getIpGroup").getIpGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIpGroup","getIpGroupOutput"], () => require("./getIpGroup"));

export { GetIpGroupsArgs, GetIpGroupsResult, GetIpGroupsOutputArgs } from "./getIpGroups";
export const getIpGroups: typeof import("./getIpGroups").getIpGroups = null as any;
export const getIpGroupsOutput: typeof import("./getIpGroups").getIpGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIpGroups","getIpGroupsOutput"], () => require("./getIpGroups"));

export { GetKeyVaultArgs, GetKeyVaultResult, GetKeyVaultOutputArgs } from "./getKeyVault";
export const getKeyVault: typeof import("./getKeyVault").getKeyVault = null as any;
export const getKeyVaultOutput: typeof import("./getKeyVault").getKeyVaultOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVault","getKeyVaultOutput"], () => require("./getKeyVault"));

export { GetKeyVaultAccessPolicyArgs, GetKeyVaultAccessPolicyResult, GetKeyVaultAccessPolicyOutputArgs } from "./getKeyVaultAccessPolicy";
export const getKeyVaultAccessPolicy: typeof import("./getKeyVaultAccessPolicy").getKeyVaultAccessPolicy = null as any;
export const getKeyVaultAccessPolicyOutput: typeof import("./getKeyVaultAccessPolicy").getKeyVaultAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultAccessPolicy","getKeyVaultAccessPolicyOutput"], () => require("./getKeyVaultAccessPolicy"));

export { GetKeyVaultCertificateArgs, GetKeyVaultCertificateResult, GetKeyVaultCertificateOutputArgs } from "./getKeyVaultCertificate";
export const getKeyVaultCertificate: typeof import("./getKeyVaultCertificate").getKeyVaultCertificate = null as any;
export const getKeyVaultCertificateOutput: typeof import("./getKeyVaultCertificate").getKeyVaultCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultCertificate","getKeyVaultCertificateOutput"], () => require("./getKeyVaultCertificate"));

export { GetKeyVaultCertificateDataArgs, GetKeyVaultCertificateDataResult, GetKeyVaultCertificateDataOutputArgs } from "./getKeyVaultCertificateData";
export const getKeyVaultCertificateData: typeof import("./getKeyVaultCertificateData").getKeyVaultCertificateData = null as any;
export const getKeyVaultCertificateDataOutput: typeof import("./getKeyVaultCertificateData").getKeyVaultCertificateDataOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultCertificateData","getKeyVaultCertificateDataOutput"], () => require("./getKeyVaultCertificateData"));

export { GetKeyVaultCertificateIssuerArgs, GetKeyVaultCertificateIssuerResult, GetKeyVaultCertificateIssuerOutputArgs } from "./getKeyVaultCertificateIssuer";
export const getKeyVaultCertificateIssuer: typeof import("./getKeyVaultCertificateIssuer").getKeyVaultCertificateIssuer = null as any;
export const getKeyVaultCertificateIssuerOutput: typeof import("./getKeyVaultCertificateIssuer").getKeyVaultCertificateIssuerOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultCertificateIssuer","getKeyVaultCertificateIssuerOutput"], () => require("./getKeyVaultCertificateIssuer"));

export { GetKeyVaultCertificatesArgs, GetKeyVaultCertificatesResult, GetKeyVaultCertificatesOutputArgs } from "./getKeyVaultCertificates";
export const getKeyVaultCertificates: typeof import("./getKeyVaultCertificates").getKeyVaultCertificates = null as any;
export const getKeyVaultCertificatesOutput: typeof import("./getKeyVaultCertificates").getKeyVaultCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultCertificates","getKeyVaultCertificatesOutput"], () => require("./getKeyVaultCertificates"));

export { GetKeyVaultEncryptedValueArgs, GetKeyVaultEncryptedValueResult, GetKeyVaultEncryptedValueOutputArgs } from "./getKeyVaultEncryptedValue";
export const getKeyVaultEncryptedValue: typeof import("./getKeyVaultEncryptedValue").getKeyVaultEncryptedValue = null as any;
export const getKeyVaultEncryptedValueOutput: typeof import("./getKeyVaultEncryptedValue").getKeyVaultEncryptedValueOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultEncryptedValue","getKeyVaultEncryptedValueOutput"], () => require("./getKeyVaultEncryptedValue"));

export { GetKeyVaultKeyArgs, GetKeyVaultKeyResult, GetKeyVaultKeyOutputArgs } from "./getKeyVaultKey";
export const getKeyVaultKey: typeof import("./getKeyVaultKey").getKeyVaultKey = null as any;
export const getKeyVaultKeyOutput: typeof import("./getKeyVaultKey").getKeyVaultKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultKey","getKeyVaultKeyOutput"], () => require("./getKeyVaultKey"));

export { GetKeyVaultManagedHardwareSecurityModuleArgs, GetKeyVaultManagedHardwareSecurityModuleResult, GetKeyVaultManagedHardwareSecurityModuleOutputArgs } from "./getKeyVaultManagedHardwareSecurityModule";
export const getKeyVaultManagedHardwareSecurityModule: typeof import("./getKeyVaultManagedHardwareSecurityModule").getKeyVaultManagedHardwareSecurityModule = null as any;
export const getKeyVaultManagedHardwareSecurityModuleOutput: typeof import("./getKeyVaultManagedHardwareSecurityModule").getKeyVaultManagedHardwareSecurityModuleOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultManagedHardwareSecurityModule","getKeyVaultManagedHardwareSecurityModuleOutput"], () => require("./getKeyVaultManagedHardwareSecurityModule"));

export { GetKeyVaultManagedHardwareSecurityModuleRoleDefinitionArgs, GetKeyVaultManagedHardwareSecurityModuleRoleDefinitionResult, GetKeyVaultManagedHardwareSecurityModuleRoleDefinitionOutputArgs } from "./getKeyVaultManagedHardwareSecurityModuleRoleDefinition";
export const getKeyVaultManagedHardwareSecurityModuleRoleDefinition: typeof import("./getKeyVaultManagedHardwareSecurityModuleRoleDefinition").getKeyVaultManagedHardwareSecurityModuleRoleDefinition = null as any;
export const getKeyVaultManagedHardwareSecurityModuleRoleDefinitionOutput: typeof import("./getKeyVaultManagedHardwareSecurityModuleRoleDefinition").getKeyVaultManagedHardwareSecurityModuleRoleDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultManagedHardwareSecurityModuleRoleDefinition","getKeyVaultManagedHardwareSecurityModuleRoleDefinitionOutput"], () => require("./getKeyVaultManagedHardwareSecurityModuleRoleDefinition"));

export { GetKeyVaultSecretArgs, GetKeyVaultSecretResult, GetKeyVaultSecretOutputArgs } from "./getKeyVaultSecret";
export const getKeyVaultSecret: typeof import("./getKeyVaultSecret").getKeyVaultSecret = null as any;
export const getKeyVaultSecretOutput: typeof import("./getKeyVaultSecret").getKeyVaultSecretOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultSecret","getKeyVaultSecretOutput"], () => require("./getKeyVaultSecret"));

export { GetKeyVaultSecretsArgs, GetKeyVaultSecretsResult, GetKeyVaultSecretsOutputArgs } from "./getKeyVaultSecrets";
export const getKeyVaultSecrets: typeof import("./getKeyVaultSecrets").getKeyVaultSecrets = null as any;
export const getKeyVaultSecretsOutput: typeof import("./getKeyVaultSecrets").getKeyVaultSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultSecrets","getKeyVaultSecretsOutput"], () => require("./getKeyVaultSecrets"));

export { GetKubernetesClusterArgs, GetKubernetesClusterResult, GetKubernetesClusterOutputArgs } from "./getKubernetesCluster";
export const getKubernetesCluster: typeof import("./getKubernetesCluster").getKubernetesCluster = null as any;
export const getKubernetesClusterOutput: typeof import("./getKubernetesCluster").getKubernetesClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesCluster","getKubernetesClusterOutput"], () => require("./getKubernetesCluster"));

export { GetKubernetesClusterNodePoolArgs, GetKubernetesClusterNodePoolResult, GetKubernetesClusterNodePoolOutputArgs } from "./getKubernetesClusterNodePool";
export const getKubernetesClusterNodePool: typeof import("./getKubernetesClusterNodePool").getKubernetesClusterNodePool = null as any;
export const getKubernetesClusterNodePoolOutput: typeof import("./getKubernetesClusterNodePool").getKubernetesClusterNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterNodePool","getKubernetesClusterNodePoolOutput"], () => require("./getKubernetesClusterNodePool"));

export { GetKubernetesNodePoolSnapshotArgs, GetKubernetesNodePoolSnapshotResult, GetKubernetesNodePoolSnapshotOutputArgs } from "./getKubernetesNodePoolSnapshot";
export const getKubernetesNodePoolSnapshot: typeof import("./getKubernetesNodePoolSnapshot").getKubernetesNodePoolSnapshot = null as any;
export const getKubernetesNodePoolSnapshotOutput: typeof import("./getKubernetesNodePoolSnapshot").getKubernetesNodePoolSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNodePoolSnapshot","getKubernetesNodePoolSnapshotOutput"], () => require("./getKubernetesNodePoolSnapshot"));

export { GetKubernetesServiceVersionsArgs, GetKubernetesServiceVersionsResult, GetKubernetesServiceVersionsOutputArgs } from "./getKubernetesServiceVersions";
export const getKubernetesServiceVersions: typeof import("./getKubernetesServiceVersions").getKubernetesServiceVersions = null as any;
export const getKubernetesServiceVersionsOutput: typeof import("./getKubernetesServiceVersions").getKubernetesServiceVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesServiceVersions","getKubernetesServiceVersionsOutput"], () => require("./getKubernetesServiceVersions"));

export { GetKustoClusterArgs, GetKustoClusterResult, GetKustoClusterOutputArgs } from "./getKustoCluster";
export const getKustoCluster: typeof import("./getKustoCluster").getKustoCluster = null as any;
export const getKustoClusterOutput: typeof import("./getKustoCluster").getKustoClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKustoCluster","getKustoClusterOutput"], () => require("./getKustoCluster"));

export { GetKustoDatabaseArgs, GetKustoDatabaseResult, GetKustoDatabaseOutputArgs } from "./getKustoDatabase";
export const getKustoDatabase: typeof import("./getKustoDatabase").getKustoDatabase = null as any;
export const getKustoDatabaseOutput: typeof import("./getKustoDatabase").getKustoDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getKustoDatabase","getKustoDatabaseOutput"], () => require("./getKustoDatabase"));

export { GetLbArgs, GetLbResult, GetLbOutputArgs } from "./getLb";
export const getLb: typeof import("./getLb").getLb = null as any;
export const getLbOutput: typeof import("./getLb").getLbOutput = null as any;
utilities.lazyLoad(exports, ["getLb","getLbOutput"], () => require("./getLb"));

export { GetLbBackendAddressPoolArgs, GetLbBackendAddressPoolResult, GetLbBackendAddressPoolOutputArgs } from "./getLbBackendAddressPool";
export const getLbBackendAddressPool: typeof import("./getLbBackendAddressPool").getLbBackendAddressPool = null as any;
export const getLbBackendAddressPoolOutput: typeof import("./getLbBackendAddressPool").getLbBackendAddressPoolOutput = null as any;
utilities.lazyLoad(exports, ["getLbBackendAddressPool","getLbBackendAddressPoolOutput"], () => require("./getLbBackendAddressPool"));

export { GetLbOutboundRuleArgs, GetLbOutboundRuleResult, GetLbOutboundRuleOutputArgs } from "./getLbOutboundRule";
export const getLbOutboundRule: typeof import("./getLbOutboundRule").getLbOutboundRule = null as any;
export const getLbOutboundRuleOutput: typeof import("./getLbOutboundRule").getLbOutboundRuleOutput = null as any;
utilities.lazyLoad(exports, ["getLbOutboundRule","getLbOutboundRuleOutput"], () => require("./getLbOutboundRule"));

export { GetLbRuleArgs, GetLbRuleResult, GetLbRuleOutputArgs } from "./getLbRule";
export const getLbRule: typeof import("./getLbRule").getLbRule = null as any;
export const getLbRuleOutput: typeof import("./getLbRule").getLbRuleOutput = null as any;
utilities.lazyLoad(exports, ["getLbRule","getLbRuleOutput"], () => require("./getLbRule"));

export { GetLinuxFunctionAppArgs, GetLinuxFunctionAppResult, GetLinuxFunctionAppOutputArgs } from "./getLinuxFunctionApp";
export const getLinuxFunctionApp: typeof import("./getLinuxFunctionApp").getLinuxFunctionApp = null as any;
export const getLinuxFunctionAppOutput: typeof import("./getLinuxFunctionApp").getLinuxFunctionAppOutput = null as any;
utilities.lazyLoad(exports, ["getLinuxFunctionApp","getLinuxFunctionAppOutput"], () => require("./getLinuxFunctionApp"));

export { GetLinuxWebAppArgs, GetLinuxWebAppResult, GetLinuxWebAppOutputArgs } from "./getLinuxWebApp";
export const getLinuxWebApp: typeof import("./getLinuxWebApp").getLinuxWebApp = null as any;
export const getLinuxWebAppOutput: typeof import("./getLinuxWebApp").getLinuxWebAppOutput = null as any;
utilities.lazyLoad(exports, ["getLinuxWebApp","getLinuxWebAppOutput"], () => require("./getLinuxWebApp"));

export { GetLoadTestArgs, GetLoadTestResult, GetLoadTestOutputArgs } from "./getLoadTest";
export const getLoadTest: typeof import("./getLoadTest").getLoadTest = null as any;
export const getLoadTestOutput: typeof import("./getLoadTest").getLoadTestOutput = null as any;
utilities.lazyLoad(exports, ["getLoadTest","getLoadTestOutput"], () => require("./getLoadTest"));

export { GetLocalNetworkGatewayArgs, GetLocalNetworkGatewayResult, GetLocalNetworkGatewayOutputArgs } from "./getLocalNetworkGateway";
export const getLocalNetworkGateway: typeof import("./getLocalNetworkGateway").getLocalNetworkGateway = null as any;
export const getLocalNetworkGatewayOutput: typeof import("./getLocalNetworkGateway").getLocalNetworkGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getLocalNetworkGateway","getLocalNetworkGatewayOutput"], () => require("./getLocalNetworkGateway"));

export { GetLocationArgs, GetLocationResult, GetLocationOutputArgs } from "./getLocation";
export const getLocation: typeof import("./getLocation").getLocation = null as any;
export const getLocationOutput: typeof import("./getLocation").getLocationOutput = null as any;
utilities.lazyLoad(exports, ["getLocation","getLocationOutput"], () => require("./getLocation"));

export { GetLogAnalyticsWorkspaceArgs, GetLogAnalyticsWorkspaceResult, GetLogAnalyticsWorkspaceOutputArgs } from "./getLogAnalyticsWorkspace";
export const getLogAnalyticsWorkspace: typeof import("./getLogAnalyticsWorkspace").getLogAnalyticsWorkspace = null as any;
export const getLogAnalyticsWorkspaceOutput: typeof import("./getLogAnalyticsWorkspace").getLogAnalyticsWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsWorkspace","getLogAnalyticsWorkspaceOutput"], () => require("./getLogAnalyticsWorkspace"));

export { GetLogicAppIntegrationAccountArgs, GetLogicAppIntegrationAccountResult, GetLogicAppIntegrationAccountOutputArgs } from "./getLogicAppIntegrationAccount";
export const getLogicAppIntegrationAccount: typeof import("./getLogicAppIntegrationAccount").getLogicAppIntegrationAccount = null as any;
export const getLogicAppIntegrationAccountOutput: typeof import("./getLogicAppIntegrationAccount").getLogicAppIntegrationAccountOutput = null as any;
utilities.lazyLoad(exports, ["getLogicAppIntegrationAccount","getLogicAppIntegrationAccountOutput"], () => require("./getLogicAppIntegrationAccount"));

export { GetLogicAppStandardArgs, GetLogicAppStandardResult, GetLogicAppStandardOutputArgs } from "./getLogicAppStandard";
export const getLogicAppStandard: typeof import("./getLogicAppStandard").getLogicAppStandard = null as any;
export const getLogicAppStandardOutput: typeof import("./getLogicAppStandard").getLogicAppStandardOutput = null as any;
utilities.lazyLoad(exports, ["getLogicAppStandard","getLogicAppStandardOutput"], () => require("./getLogicAppStandard"));

export { GetLogicAppWorkflowArgs, GetLogicAppWorkflowResult, GetLogicAppWorkflowOutputArgs } from "./getLogicAppWorkflow";
export const getLogicAppWorkflow: typeof import("./getLogicAppWorkflow").getLogicAppWorkflow = null as any;
export const getLogicAppWorkflowOutput: typeof import("./getLogicAppWorkflow").getLogicAppWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getLogicAppWorkflow","getLogicAppWorkflowOutput"], () => require("./getLogicAppWorkflow"));

export { GetMachineLearningWorkspaceArgs, GetMachineLearningWorkspaceResult, GetMachineLearningWorkspaceOutputArgs } from "./getMachineLearningWorkspace";
export const getMachineLearningWorkspace: typeof import("./getMachineLearningWorkspace").getMachineLearningWorkspace = null as any;
export const getMachineLearningWorkspaceOutput: typeof import("./getMachineLearningWorkspace").getMachineLearningWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getMachineLearningWorkspace","getMachineLearningWorkspaceOutput"], () => require("./getMachineLearningWorkspace"));

export { GetMaintenanceConfigurationArgs, GetMaintenanceConfigurationResult, GetMaintenanceConfigurationOutputArgs } from "./getMaintenanceConfiguration";
export const getMaintenanceConfiguration: typeof import("./getMaintenanceConfiguration").getMaintenanceConfiguration = null as any;
export const getMaintenanceConfigurationOutput: typeof import("./getMaintenanceConfiguration").getMaintenanceConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMaintenanceConfiguration","getMaintenanceConfigurationOutput"], () => require("./getMaintenanceConfiguration"));

export { GetManagedApiArgs, GetManagedApiResult, GetManagedApiOutputArgs } from "./getManagedApi";
export const getManagedApi: typeof import("./getManagedApi").getManagedApi = null as any;
export const getManagedApiOutput: typeof import("./getManagedApi").getManagedApiOutput = null as any;
utilities.lazyLoad(exports, ["getManagedApi","getManagedApiOutput"], () => require("./getManagedApi"));

export { GetManagedApplicationDefinitionArgs, GetManagedApplicationDefinitionResult, GetManagedApplicationDefinitionOutputArgs } from "./getManagedApplicationDefinition";
export const getManagedApplicationDefinition: typeof import("./getManagedApplicationDefinition").getManagedApplicationDefinition = null as any;
export const getManagedApplicationDefinitionOutput: typeof import("./getManagedApplicationDefinition").getManagedApplicationDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getManagedApplicationDefinition","getManagedApplicationDefinitionOutput"], () => require("./getManagedApplicationDefinition"));

export { GetManagedDiskArgs, GetManagedDiskResult, GetManagedDiskOutputArgs } from "./getManagedDisk";
export const getManagedDisk: typeof import("./getManagedDisk").getManagedDisk = null as any;
export const getManagedDiskOutput: typeof import("./getManagedDisk").getManagedDiskOutput = null as any;
utilities.lazyLoad(exports, ["getManagedDisk","getManagedDiskOutput"], () => require("./getManagedDisk"));

export { GetManagementGroupArgs, GetManagementGroupResult, GetManagementGroupOutputArgs } from "./getManagementGroup";
export const getManagementGroup: typeof import("./getManagementGroup").getManagementGroup = null as any;
export const getManagementGroupOutput: typeof import("./getManagementGroup").getManagementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementGroup","getManagementGroupOutput"], () => require("./getManagementGroup"));

export { GetManagementGroupTemplateDeploymentArgs, GetManagementGroupTemplateDeploymentResult, GetManagementGroupTemplateDeploymentOutputArgs } from "./getManagementGroupTemplateDeployment";
export const getManagementGroupTemplateDeployment: typeof import("./getManagementGroupTemplateDeployment").getManagementGroupTemplateDeployment = null as any;
export const getManagementGroupTemplateDeploymentOutput: typeof import("./getManagementGroupTemplateDeployment").getManagementGroupTemplateDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getManagementGroupTemplateDeployment","getManagementGroupTemplateDeploymentOutput"], () => require("./getManagementGroupTemplateDeployment"));

export { GetMapsAccountArgs, GetMapsAccountResult, GetMapsAccountOutputArgs } from "./getMapsAccount";
export const getMapsAccount: typeof import("./getMapsAccount").getMapsAccount = null as any;
export const getMapsAccountOutput: typeof import("./getMapsAccount").getMapsAccountOutput = null as any;
utilities.lazyLoad(exports, ["getMapsAccount","getMapsAccountOutput"], () => require("./getMapsAccount"));

export { GetMarketplaceAgreementArgs, GetMarketplaceAgreementResult, GetMarketplaceAgreementOutputArgs } from "./getMarketplaceAgreement";
export const getMarketplaceAgreement: typeof import("./getMarketplaceAgreement").getMarketplaceAgreement = null as any;
export const getMarketplaceAgreementOutput: typeof import("./getMarketplaceAgreement").getMarketplaceAgreementOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceAgreement","getMarketplaceAgreementOutput"], () => require("./getMarketplaceAgreement"));

export { GetMobileNetworkArgs, GetMobileNetworkResult, GetMobileNetworkOutputArgs } from "./getMobileNetwork";
export const getMobileNetwork: typeof import("./getMobileNetwork").getMobileNetwork = null as any;
export const getMobileNetworkOutput: typeof import("./getMobileNetwork").getMobileNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetwork","getMobileNetworkOutput"], () => require("./getMobileNetwork"));

export { GetMobileNetworkAttachedDataNetworkArgs, GetMobileNetworkAttachedDataNetworkResult, GetMobileNetworkAttachedDataNetworkOutputArgs } from "./getMobileNetworkAttachedDataNetwork";
export const getMobileNetworkAttachedDataNetwork: typeof import("./getMobileNetworkAttachedDataNetwork").getMobileNetworkAttachedDataNetwork = null as any;
export const getMobileNetworkAttachedDataNetworkOutput: typeof import("./getMobileNetworkAttachedDataNetwork").getMobileNetworkAttachedDataNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetworkAttachedDataNetwork","getMobileNetworkAttachedDataNetworkOutput"], () => require("./getMobileNetworkAttachedDataNetwork"));

export { GetMobileNetworkDataNetworkArgs, GetMobileNetworkDataNetworkResult, GetMobileNetworkDataNetworkOutputArgs } from "./getMobileNetworkDataNetwork";
export const getMobileNetworkDataNetwork: typeof import("./getMobileNetworkDataNetwork").getMobileNetworkDataNetwork = null as any;
export const getMobileNetworkDataNetworkOutput: typeof import("./getMobileNetworkDataNetwork").getMobileNetworkDataNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetworkDataNetwork","getMobileNetworkDataNetworkOutput"], () => require("./getMobileNetworkDataNetwork"));

export { GetMobileNetworkPacketCoreControlPlaneArgs, GetMobileNetworkPacketCoreControlPlaneResult, GetMobileNetworkPacketCoreControlPlaneOutputArgs } from "./getMobileNetworkPacketCoreControlPlane";
export const getMobileNetworkPacketCoreControlPlane: typeof import("./getMobileNetworkPacketCoreControlPlane").getMobileNetworkPacketCoreControlPlane = null as any;
export const getMobileNetworkPacketCoreControlPlaneOutput: typeof import("./getMobileNetworkPacketCoreControlPlane").getMobileNetworkPacketCoreControlPlaneOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetworkPacketCoreControlPlane","getMobileNetworkPacketCoreControlPlaneOutput"], () => require("./getMobileNetworkPacketCoreControlPlane"));

export { GetMobileNetworkPacketCoreDataPlaneArgs, GetMobileNetworkPacketCoreDataPlaneResult, GetMobileNetworkPacketCoreDataPlaneOutputArgs } from "./getMobileNetworkPacketCoreDataPlane";
export const getMobileNetworkPacketCoreDataPlane: typeof import("./getMobileNetworkPacketCoreDataPlane").getMobileNetworkPacketCoreDataPlane = null as any;
export const getMobileNetworkPacketCoreDataPlaneOutput: typeof import("./getMobileNetworkPacketCoreDataPlane").getMobileNetworkPacketCoreDataPlaneOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetworkPacketCoreDataPlane","getMobileNetworkPacketCoreDataPlaneOutput"], () => require("./getMobileNetworkPacketCoreDataPlane"));

export { GetMobileNetworkServiceArgs, GetMobileNetworkServiceResult, GetMobileNetworkServiceOutputArgs } from "./getMobileNetworkService";
export const getMobileNetworkService: typeof import("./getMobileNetworkService").getMobileNetworkService = null as any;
export const getMobileNetworkServiceOutput: typeof import("./getMobileNetworkService").getMobileNetworkServiceOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetworkService","getMobileNetworkServiceOutput"], () => require("./getMobileNetworkService"));

export { GetMobileNetworkSimArgs, GetMobileNetworkSimResult, GetMobileNetworkSimOutputArgs } from "./getMobileNetworkSim";
export const getMobileNetworkSim: typeof import("./getMobileNetworkSim").getMobileNetworkSim = null as any;
export const getMobileNetworkSimOutput: typeof import("./getMobileNetworkSim").getMobileNetworkSimOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetworkSim","getMobileNetworkSimOutput"], () => require("./getMobileNetworkSim"));

export { GetMobileNetworkSimGroupArgs, GetMobileNetworkSimGroupResult, GetMobileNetworkSimGroupOutputArgs } from "./getMobileNetworkSimGroup";
export const getMobileNetworkSimGroup: typeof import("./getMobileNetworkSimGroup").getMobileNetworkSimGroup = null as any;
export const getMobileNetworkSimGroupOutput: typeof import("./getMobileNetworkSimGroup").getMobileNetworkSimGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetworkSimGroup","getMobileNetworkSimGroupOutput"], () => require("./getMobileNetworkSimGroup"));

export { GetMobileNetworkSimPolicyArgs, GetMobileNetworkSimPolicyResult, GetMobileNetworkSimPolicyOutputArgs } from "./getMobileNetworkSimPolicy";
export const getMobileNetworkSimPolicy: typeof import("./getMobileNetworkSimPolicy").getMobileNetworkSimPolicy = null as any;
export const getMobileNetworkSimPolicyOutput: typeof import("./getMobileNetworkSimPolicy").getMobileNetworkSimPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetworkSimPolicy","getMobileNetworkSimPolicyOutput"], () => require("./getMobileNetworkSimPolicy"));

export { GetMobileNetworkSiteArgs, GetMobileNetworkSiteResult, GetMobileNetworkSiteOutputArgs } from "./getMobileNetworkSite";
export const getMobileNetworkSite: typeof import("./getMobileNetworkSite").getMobileNetworkSite = null as any;
export const getMobileNetworkSiteOutput: typeof import("./getMobileNetworkSite").getMobileNetworkSiteOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetworkSite","getMobileNetworkSiteOutput"], () => require("./getMobileNetworkSite"));

export { GetMobileNetworkSliceArgs, GetMobileNetworkSliceResult, GetMobileNetworkSliceOutputArgs } from "./getMobileNetworkSlice";
export const getMobileNetworkSlice: typeof import("./getMobileNetworkSlice").getMobileNetworkSlice = null as any;
export const getMobileNetworkSliceOutput: typeof import("./getMobileNetworkSlice").getMobileNetworkSliceOutput = null as any;
utilities.lazyLoad(exports, ["getMobileNetworkSlice","getMobileNetworkSliceOutput"], () => require("./getMobileNetworkSlice"));

export { GetMonitorActionGroupArgs, GetMonitorActionGroupResult, GetMonitorActionGroupOutputArgs } from "./getMonitorActionGroup";
export const getMonitorActionGroup: typeof import("./getMonitorActionGroup").getMonitorActionGroup = null as any;
export const getMonitorActionGroupOutput: typeof import("./getMonitorActionGroup").getMonitorActionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorActionGroup","getMonitorActionGroupOutput"], () => require("./getMonitorActionGroup"));

export { GetMonitorDataCollectionEndpointArgs, GetMonitorDataCollectionEndpointResult, GetMonitorDataCollectionEndpointOutputArgs } from "./getMonitorDataCollectionEndpoint";
export const getMonitorDataCollectionEndpoint: typeof import("./getMonitorDataCollectionEndpoint").getMonitorDataCollectionEndpoint = null as any;
export const getMonitorDataCollectionEndpointOutput: typeof import("./getMonitorDataCollectionEndpoint").getMonitorDataCollectionEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorDataCollectionEndpoint","getMonitorDataCollectionEndpointOutput"], () => require("./getMonitorDataCollectionEndpoint"));

export { GetMonitorDataCollectionRuleArgs, GetMonitorDataCollectionRuleResult, GetMonitorDataCollectionRuleOutputArgs } from "./getMonitorDataCollectionRule";
export const getMonitorDataCollectionRule: typeof import("./getMonitorDataCollectionRule").getMonitorDataCollectionRule = null as any;
export const getMonitorDataCollectionRuleOutput: typeof import("./getMonitorDataCollectionRule").getMonitorDataCollectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorDataCollectionRule","getMonitorDataCollectionRuleOutput"], () => require("./getMonitorDataCollectionRule"));

export { GetMonitorDiagnosticCategoriesArgs, GetMonitorDiagnosticCategoriesResult, GetMonitorDiagnosticCategoriesOutputArgs } from "./getMonitorDiagnosticCategories";
export const getMonitorDiagnosticCategories: typeof import("./getMonitorDiagnosticCategories").getMonitorDiagnosticCategories = null as any;
export const getMonitorDiagnosticCategoriesOutput: typeof import("./getMonitorDiagnosticCategories").getMonitorDiagnosticCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorDiagnosticCategories","getMonitorDiagnosticCategoriesOutput"], () => require("./getMonitorDiagnosticCategories"));

export { GetMonitorScheduledQueryRulesAlertArgs, GetMonitorScheduledQueryRulesAlertResult, GetMonitorScheduledQueryRulesAlertOutputArgs } from "./getMonitorScheduledQueryRulesAlert";
export const getMonitorScheduledQueryRulesAlert: typeof import("./getMonitorScheduledQueryRulesAlert").getMonitorScheduledQueryRulesAlert = null as any;
export const getMonitorScheduledQueryRulesAlertOutput: typeof import("./getMonitorScheduledQueryRulesAlert").getMonitorScheduledQueryRulesAlertOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorScheduledQueryRulesAlert","getMonitorScheduledQueryRulesAlertOutput"], () => require("./getMonitorScheduledQueryRulesAlert"));

export { GetMonitorScheduledQueryRulesLogArgs, GetMonitorScheduledQueryRulesLogResult, GetMonitorScheduledQueryRulesLogOutputArgs } from "./getMonitorScheduledQueryRulesLog";
export const getMonitorScheduledQueryRulesLog: typeof import("./getMonitorScheduledQueryRulesLog").getMonitorScheduledQueryRulesLog = null as any;
export const getMonitorScheduledQueryRulesLogOutput: typeof import("./getMonitorScheduledQueryRulesLog").getMonitorScheduledQueryRulesLogOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorScheduledQueryRulesLog","getMonitorScheduledQueryRulesLogOutput"], () => require("./getMonitorScheduledQueryRulesLog"));

export { GetMonitorWorkspaceArgs, GetMonitorWorkspaceResult, GetMonitorWorkspaceOutputArgs } from "./getMonitorWorkspace";
export const getMonitorWorkspace: typeof import("./getMonitorWorkspace").getMonitorWorkspace = null as any;
export const getMonitorWorkspaceOutput: typeof import("./getMonitorWorkspace").getMonitorWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorWorkspace","getMonitorWorkspaceOutput"], () => require("./getMonitorWorkspace"));

export { GetMssqlDatabaseArgs, GetMssqlDatabaseResult, GetMssqlDatabaseOutputArgs } from "./getMssqlDatabase";
export const getMssqlDatabase: typeof import("./getMssqlDatabase").getMssqlDatabase = null as any;
export const getMssqlDatabaseOutput: typeof import("./getMssqlDatabase").getMssqlDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getMssqlDatabase","getMssqlDatabaseOutput"], () => require("./getMssqlDatabase"));

export { GetMssqlElasticpoolArgs, GetMssqlElasticpoolResult, GetMssqlElasticpoolOutputArgs } from "./getMssqlElasticpool";
export const getMssqlElasticpool: typeof import("./getMssqlElasticpool").getMssqlElasticpool = null as any;
export const getMssqlElasticpoolOutput: typeof import("./getMssqlElasticpool").getMssqlElasticpoolOutput = null as any;
utilities.lazyLoad(exports, ["getMssqlElasticpool","getMssqlElasticpoolOutput"], () => require("./getMssqlElasticpool"));

export { GetMssqlManagedInstanceArgs, GetMssqlManagedInstanceResult, GetMssqlManagedInstanceOutputArgs } from "./getMssqlManagedInstance";
export const getMssqlManagedInstance: typeof import("./getMssqlManagedInstance").getMssqlManagedInstance = null as any;
export const getMssqlManagedInstanceOutput: typeof import("./getMssqlManagedInstance").getMssqlManagedInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getMssqlManagedInstance","getMssqlManagedInstanceOutput"], () => require("./getMssqlManagedInstance"));

export { GetMssqlServerArgs, GetMssqlServerResult, GetMssqlServerOutputArgs } from "./getMssqlServer";
export const getMssqlServer: typeof import("./getMssqlServer").getMssqlServer = null as any;
export const getMssqlServerOutput: typeof import("./getMssqlServer").getMssqlServerOutput = null as any;
utilities.lazyLoad(exports, ["getMssqlServer","getMssqlServerOutput"], () => require("./getMssqlServer"));

export { GetMysqlFlexibleServerArgs, GetMysqlFlexibleServerResult, GetMysqlFlexibleServerOutputArgs } from "./getMysqlFlexibleServer";
export const getMysqlFlexibleServer: typeof import("./getMysqlFlexibleServer").getMysqlFlexibleServer = null as any;
export const getMysqlFlexibleServerOutput: typeof import("./getMysqlFlexibleServer").getMysqlFlexibleServerOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlFlexibleServer","getMysqlFlexibleServerOutput"], () => require("./getMysqlFlexibleServer"));

export { GetNatGatewayArgs, GetNatGatewayResult, GetNatGatewayOutputArgs } from "./getNatGateway";
export const getNatGateway: typeof import("./getNatGateway").getNatGateway = null as any;
export const getNatGatewayOutput: typeof import("./getNatGateway").getNatGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateway","getNatGatewayOutput"], () => require("./getNatGateway"));

export { GetNetappAccountArgs, GetNetappAccountResult, GetNetappAccountOutputArgs } from "./getNetappAccount";
export const getNetappAccount: typeof import("./getNetappAccount").getNetappAccount = null as any;
export const getNetappAccountOutput: typeof import("./getNetappAccount").getNetappAccountOutput = null as any;
utilities.lazyLoad(exports, ["getNetappAccount","getNetappAccountOutput"], () => require("./getNetappAccount"));

export { GetNetappAccountEncryptionArgs, GetNetappAccountEncryptionResult, GetNetappAccountEncryptionOutputArgs } from "./getNetappAccountEncryption";
export const getNetappAccountEncryption: typeof import("./getNetappAccountEncryption").getNetappAccountEncryption = null as any;
export const getNetappAccountEncryptionOutput: typeof import("./getNetappAccountEncryption").getNetappAccountEncryptionOutput = null as any;
utilities.lazyLoad(exports, ["getNetappAccountEncryption","getNetappAccountEncryptionOutput"], () => require("./getNetappAccountEncryption"));

export { GetNetappPoolArgs, GetNetappPoolResult, GetNetappPoolOutputArgs } from "./getNetappPool";
export const getNetappPool: typeof import("./getNetappPool").getNetappPool = null as any;
export const getNetappPoolOutput: typeof import("./getNetappPool").getNetappPoolOutput = null as any;
utilities.lazyLoad(exports, ["getNetappPool","getNetappPoolOutput"], () => require("./getNetappPool"));

export { GetNetappSnapshotArgs, GetNetappSnapshotResult, GetNetappSnapshotOutputArgs } from "./getNetappSnapshot";
export const getNetappSnapshot: typeof import("./getNetappSnapshot").getNetappSnapshot = null as any;
export const getNetappSnapshotOutput: typeof import("./getNetappSnapshot").getNetappSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getNetappSnapshot","getNetappSnapshotOutput"], () => require("./getNetappSnapshot"));

export { GetNetappSnapshotPolicyArgs, GetNetappSnapshotPolicyResult, GetNetappSnapshotPolicyOutputArgs } from "./getNetappSnapshotPolicy";
export const getNetappSnapshotPolicy: typeof import("./getNetappSnapshotPolicy").getNetappSnapshotPolicy = null as any;
export const getNetappSnapshotPolicyOutput: typeof import("./getNetappSnapshotPolicy").getNetappSnapshotPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetappSnapshotPolicy","getNetappSnapshotPolicyOutput"], () => require("./getNetappSnapshotPolicy"));

export { GetNetappVolumeArgs, GetNetappVolumeResult, GetNetappVolumeOutputArgs } from "./getNetappVolume";
export const getNetappVolume: typeof import("./getNetappVolume").getNetappVolume = null as any;
export const getNetappVolumeOutput: typeof import("./getNetappVolume").getNetappVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getNetappVolume","getNetappVolumeOutput"], () => require("./getNetappVolume"));

export { GetNetappVolumeGroupSapHanaArgs, GetNetappVolumeGroupSapHanaResult, GetNetappVolumeGroupSapHanaOutputArgs } from "./getNetappVolumeGroupSapHana";
export const getNetappVolumeGroupSapHana: typeof import("./getNetappVolumeGroupSapHana").getNetappVolumeGroupSapHana = null as any;
export const getNetappVolumeGroupSapHanaOutput: typeof import("./getNetappVolumeGroupSapHana").getNetappVolumeGroupSapHanaOutput = null as any;
utilities.lazyLoad(exports, ["getNetappVolumeGroupSapHana","getNetappVolumeGroupSapHanaOutput"], () => require("./getNetappVolumeGroupSapHana"));

export { GetNetappVolumeQuotaRuleArgs, GetNetappVolumeQuotaRuleResult, GetNetappVolumeQuotaRuleOutputArgs } from "./getNetappVolumeQuotaRule";
export const getNetappVolumeQuotaRule: typeof import("./getNetappVolumeQuotaRule").getNetappVolumeQuotaRule = null as any;
export const getNetappVolumeQuotaRuleOutput: typeof import("./getNetappVolumeQuotaRule").getNetappVolumeQuotaRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNetappVolumeQuotaRule","getNetappVolumeQuotaRuleOutput"], () => require("./getNetappVolumeQuotaRule"));

export { GetNetworkDdosProtectionPlanArgs, GetNetworkDdosProtectionPlanResult, GetNetworkDdosProtectionPlanOutputArgs } from "./getNetworkDdosProtectionPlan";
export const getNetworkDdosProtectionPlan: typeof import("./getNetworkDdosProtectionPlan").getNetworkDdosProtectionPlan = null as any;
export const getNetworkDdosProtectionPlanOutput: typeof import("./getNetworkDdosProtectionPlan").getNetworkDdosProtectionPlanOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDdosProtectionPlan","getNetworkDdosProtectionPlanOutput"], () => require("./getNetworkDdosProtectionPlan"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetNetworkManagerArgs, GetNetworkManagerResult, GetNetworkManagerOutputArgs } from "./getNetworkManager";
export const getNetworkManager: typeof import("./getNetworkManager").getNetworkManager = null as any;
export const getNetworkManagerOutput: typeof import("./getNetworkManager").getNetworkManagerOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkManager","getNetworkManagerOutput"], () => require("./getNetworkManager"));

export { GetNetworkManagerConnectivityConfigurationArgs, GetNetworkManagerConnectivityConfigurationResult, GetNetworkManagerConnectivityConfigurationOutputArgs } from "./getNetworkManagerConnectivityConfiguration";
export const getNetworkManagerConnectivityConfiguration: typeof import("./getNetworkManagerConnectivityConfiguration").getNetworkManagerConnectivityConfiguration = null as any;
export const getNetworkManagerConnectivityConfigurationOutput: typeof import("./getNetworkManagerConnectivityConfiguration").getNetworkManagerConnectivityConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkManagerConnectivityConfiguration","getNetworkManagerConnectivityConfigurationOutput"], () => require("./getNetworkManagerConnectivityConfiguration"));

export { GetNetworkManagerNetworkGroupArgs, GetNetworkManagerNetworkGroupResult, GetNetworkManagerNetworkGroupOutputArgs } from "./getNetworkManagerNetworkGroup";
export const getNetworkManagerNetworkGroup: typeof import("./getNetworkManagerNetworkGroup").getNetworkManagerNetworkGroup = null as any;
export const getNetworkManagerNetworkGroupOutput: typeof import("./getNetworkManagerNetworkGroup").getNetworkManagerNetworkGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkManagerNetworkGroup","getNetworkManagerNetworkGroupOutput"], () => require("./getNetworkManagerNetworkGroup"));

export { GetNetworkSecurityGroupArgs, GetNetworkSecurityGroupResult, GetNetworkSecurityGroupOutputArgs } from "./getNetworkSecurityGroup";
export const getNetworkSecurityGroup: typeof import("./getNetworkSecurityGroup").getNetworkSecurityGroup = null as any;
export const getNetworkSecurityGroupOutput: typeof import("./getNetworkSecurityGroup").getNetworkSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSecurityGroup","getNetworkSecurityGroupOutput"], () => require("./getNetworkSecurityGroup"));

export { GetNetworkServiceTagsArgs, GetNetworkServiceTagsResult, GetNetworkServiceTagsOutputArgs } from "./getNetworkServiceTags";
export const getNetworkServiceTags: typeof import("./getNetworkServiceTags").getNetworkServiceTags = null as any;
export const getNetworkServiceTagsOutput: typeof import("./getNetworkServiceTags").getNetworkServiceTagsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkServiceTags","getNetworkServiceTagsOutput"], () => require("./getNetworkServiceTags"));

export { GetNetworkWatcherArgs, GetNetworkWatcherResult, GetNetworkWatcherOutputArgs } from "./getNetworkWatcher";
export const getNetworkWatcher: typeof import("./getNetworkWatcher").getNetworkWatcher = null as any;
export const getNetworkWatcherOutput: typeof import("./getNetworkWatcher").getNetworkWatcherOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkWatcher","getNetworkWatcherOutput"], () => require("./getNetworkWatcher"));

export { GetNginxCertificateArgs, GetNginxCertificateResult, GetNginxCertificateOutputArgs } from "./getNginxCertificate";
export const getNginxCertificate: typeof import("./getNginxCertificate").getNginxCertificate = null as any;
export const getNginxCertificateOutput: typeof import("./getNginxCertificate").getNginxCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getNginxCertificate","getNginxCertificateOutput"], () => require("./getNginxCertificate"));

export { GetNginxConfigurationArgs, GetNginxConfigurationResult, GetNginxConfigurationOutputArgs } from "./getNginxConfiguration";
export const getNginxConfiguration: typeof import("./getNginxConfiguration").getNginxConfiguration = null as any;
export const getNginxConfigurationOutput: typeof import("./getNginxConfiguration").getNginxConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getNginxConfiguration","getNginxConfigurationOutput"], () => require("./getNginxConfiguration"));

export { GetNginxDeploymentArgs, GetNginxDeploymentResult, GetNginxDeploymentOutputArgs } from "./getNginxDeployment";
export const getNginxDeployment: typeof import("./getNginxDeployment").getNginxDeployment = null as any;
export const getNginxDeploymentOutput: typeof import("./getNginxDeployment").getNginxDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getNginxDeployment","getNginxDeploymentOutput"], () => require("./getNginxDeployment"));

export { GetNotificationHubArgs, GetNotificationHubResult, GetNotificationHubOutputArgs } from "./getNotificationHub";
export const getNotificationHub: typeof import("./getNotificationHub").getNotificationHub = null as any;
export const getNotificationHubOutput: typeof import("./getNotificationHub").getNotificationHubOutput = null as any;
utilities.lazyLoad(exports, ["getNotificationHub","getNotificationHubOutput"], () => require("./getNotificationHub"));

export { GetNotificationHubNamespaceArgs, GetNotificationHubNamespaceResult, GetNotificationHubNamespaceOutputArgs } from "./getNotificationHubNamespace";
export const getNotificationHubNamespace: typeof import("./getNotificationHubNamespace").getNotificationHubNamespace = null as any;
export const getNotificationHubNamespaceOutput: typeof import("./getNotificationHubNamespace").getNotificationHubNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNotificationHubNamespace","getNotificationHubNamespaceOutput"], () => require("./getNotificationHubNamespace"));

export { GetOrchestratedVirtualMachineScaleSetArgs, GetOrchestratedVirtualMachineScaleSetResult, GetOrchestratedVirtualMachineScaleSetOutputArgs } from "./getOrchestratedVirtualMachineScaleSet";
export const getOrchestratedVirtualMachineScaleSet: typeof import("./getOrchestratedVirtualMachineScaleSet").getOrchestratedVirtualMachineScaleSet = null as any;
export const getOrchestratedVirtualMachineScaleSetOutput: typeof import("./getOrchestratedVirtualMachineScaleSet").getOrchestratedVirtualMachineScaleSetOutput = null as any;
utilities.lazyLoad(exports, ["getOrchestratedVirtualMachineScaleSet","getOrchestratedVirtualMachineScaleSetOutput"], () => require("./getOrchestratedVirtualMachineScaleSet"));

export { GetPaloAltoLocalRulestackArgs, GetPaloAltoLocalRulestackResult, GetPaloAltoLocalRulestackOutputArgs } from "./getPaloAltoLocalRulestack";
export const getPaloAltoLocalRulestack: typeof import("./getPaloAltoLocalRulestack").getPaloAltoLocalRulestack = null as any;
export const getPaloAltoLocalRulestackOutput: typeof import("./getPaloAltoLocalRulestack").getPaloAltoLocalRulestackOutput = null as any;
utilities.lazyLoad(exports, ["getPaloAltoLocalRulestack","getPaloAltoLocalRulestackOutput"], () => require("./getPaloAltoLocalRulestack"));

export { GetPlatformImageArgs, GetPlatformImageResult, GetPlatformImageOutputArgs } from "./getPlatformImage";
export const getPlatformImage: typeof import("./getPlatformImage").getPlatformImage = null as any;
export const getPlatformImageOutput: typeof import("./getPlatformImage").getPlatformImageOutput = null as any;
utilities.lazyLoad(exports, ["getPlatformImage","getPlatformImageOutput"], () => require("./getPlatformImage"));

export { GetPolicyAssignmentArgs, GetPolicyAssignmentResult, GetPolicyAssignmentOutputArgs } from "./getPolicyAssignment";
export const getPolicyAssignment: typeof import("./getPolicyAssignment").getPolicyAssignment = null as any;
export const getPolicyAssignmentOutput: typeof import("./getPolicyAssignment").getPolicyAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyAssignment","getPolicyAssignmentOutput"], () => require("./getPolicyAssignment"));

export { GetPolicyDefinitionArgs, GetPolicyDefinitionResult, GetPolicyDefinitionOutputArgs } from "./getPolicyDefinition";
export const getPolicyDefinition: typeof import("./getPolicyDefinition").getPolicyDefinition = null as any;
export const getPolicyDefinitionOutput: typeof import("./getPolicyDefinition").getPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDefinition","getPolicyDefinitionOutput"], () => require("./getPolicyDefinition"));

export { GetPolicyDefinitionBuiltInArgs, GetPolicyDefinitionBuiltInResult, GetPolicyDefinitionBuiltInOutputArgs } from "./getPolicyDefinitionBuiltIn";
export const getPolicyDefinitionBuiltIn: typeof import("./getPolicyDefinitionBuiltIn").getPolicyDefinitionBuiltIn = null as any;
export const getPolicyDefinitionBuiltInOutput: typeof import("./getPolicyDefinitionBuiltIn").getPolicyDefinitionBuiltInOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDefinitionBuiltIn","getPolicyDefinitionBuiltInOutput"], () => require("./getPolicyDefinitionBuiltIn"));

export { GetPolicySetDefinitionArgs, GetPolicySetDefinitionResult, GetPolicySetDefinitionOutputArgs } from "./getPolicySetDefinition";
export const getPolicySetDefinition: typeof import("./getPolicySetDefinition").getPolicySetDefinition = null as any;
export const getPolicySetDefinitionOutput: typeof import("./getPolicySetDefinition").getPolicySetDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySetDefinition","getPolicySetDefinitionOutput"], () => require("./getPolicySetDefinition"));

export { GetPolicyVirtualMachineConfigurationAssignmentArgs, GetPolicyVirtualMachineConfigurationAssignmentResult, GetPolicyVirtualMachineConfigurationAssignmentOutputArgs } from "./getPolicyVirtualMachineConfigurationAssignment";
export const getPolicyVirtualMachineConfigurationAssignment: typeof import("./getPolicyVirtualMachineConfigurationAssignment").getPolicyVirtualMachineConfigurationAssignment = null as any;
export const getPolicyVirtualMachineConfigurationAssignmentOutput: typeof import("./getPolicyVirtualMachineConfigurationAssignment").getPolicyVirtualMachineConfigurationAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyVirtualMachineConfigurationAssignment","getPolicyVirtualMachineConfigurationAssignmentOutput"], () => require("./getPolicyVirtualMachineConfigurationAssignment"));

export { GetPortalDashboardArgs, GetPortalDashboardResult, GetPortalDashboardOutputArgs } from "./getPortalDashboard";
export const getPortalDashboard: typeof import("./getPortalDashboard").getPortalDashboard = null as any;
export const getPortalDashboardOutput: typeof import("./getPortalDashboard").getPortalDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getPortalDashboard","getPortalDashboardOutput"], () => require("./getPortalDashboard"));

export { GetPostgresqlFlexibleServerArgs, GetPostgresqlFlexibleServerResult, GetPostgresqlFlexibleServerOutputArgs } from "./getPostgresqlFlexibleServer";
export const getPostgresqlFlexibleServer: typeof import("./getPostgresqlFlexibleServer").getPostgresqlFlexibleServer = null as any;
export const getPostgresqlFlexibleServerOutput: typeof import("./getPostgresqlFlexibleServer").getPostgresqlFlexibleServerOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlFlexibleServer","getPostgresqlFlexibleServerOutput"], () => require("./getPostgresqlFlexibleServer"));

export { GetPostgresqlServerArgs, GetPostgresqlServerResult, GetPostgresqlServerOutputArgs } from "./getPostgresqlServer";
export const getPostgresqlServer: typeof import("./getPostgresqlServer").getPostgresqlServer = null as any;
export const getPostgresqlServerOutput: typeof import("./getPostgresqlServer").getPostgresqlServerOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlServer","getPostgresqlServerOutput"], () => require("./getPostgresqlServer"));

export { GetPrivateDnsARecordArgs, GetPrivateDnsARecordResult, GetPrivateDnsARecordOutputArgs } from "./getPrivateDnsARecord";
export const getPrivateDnsARecord: typeof import("./getPrivateDnsARecord").getPrivateDnsARecord = null as any;
export const getPrivateDnsARecordOutput: typeof import("./getPrivateDnsARecord").getPrivateDnsARecordOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsARecord","getPrivateDnsARecordOutput"], () => require("./getPrivateDnsARecord"));

export { GetPrivateDnsAaaaRecordArgs, GetPrivateDnsAaaaRecordResult, GetPrivateDnsAaaaRecordOutputArgs } from "./getPrivateDnsAaaaRecord";
export const getPrivateDnsAaaaRecord: typeof import("./getPrivateDnsAaaaRecord").getPrivateDnsAaaaRecord = null as any;
export const getPrivateDnsAaaaRecordOutput: typeof import("./getPrivateDnsAaaaRecord").getPrivateDnsAaaaRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsAaaaRecord","getPrivateDnsAaaaRecordOutput"], () => require("./getPrivateDnsAaaaRecord"));

export { GetPrivateDnsCnameRecordArgs, GetPrivateDnsCnameRecordResult, GetPrivateDnsCnameRecordOutputArgs } from "./getPrivateDnsCnameRecord";
export const getPrivateDnsCnameRecord: typeof import("./getPrivateDnsCnameRecord").getPrivateDnsCnameRecord = null as any;
export const getPrivateDnsCnameRecordOutput: typeof import("./getPrivateDnsCnameRecord").getPrivateDnsCnameRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsCnameRecord","getPrivateDnsCnameRecordOutput"], () => require("./getPrivateDnsCnameRecord"));

export { GetPrivateDnsMxRecordArgs, GetPrivateDnsMxRecordResult, GetPrivateDnsMxRecordOutputArgs } from "./getPrivateDnsMxRecord";
export const getPrivateDnsMxRecord: typeof import("./getPrivateDnsMxRecord").getPrivateDnsMxRecord = null as any;
export const getPrivateDnsMxRecordOutput: typeof import("./getPrivateDnsMxRecord").getPrivateDnsMxRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsMxRecord","getPrivateDnsMxRecordOutput"], () => require("./getPrivateDnsMxRecord"));

export { GetPrivateDnsPtrRecordArgs, GetPrivateDnsPtrRecordResult, GetPrivateDnsPtrRecordOutputArgs } from "./getPrivateDnsPtrRecord";
export const getPrivateDnsPtrRecord: typeof import("./getPrivateDnsPtrRecord").getPrivateDnsPtrRecord = null as any;
export const getPrivateDnsPtrRecordOutput: typeof import("./getPrivateDnsPtrRecord").getPrivateDnsPtrRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsPtrRecord","getPrivateDnsPtrRecordOutput"], () => require("./getPrivateDnsPtrRecord"));

export { GetPrivateDnsResolverArgs, GetPrivateDnsResolverResult, GetPrivateDnsResolverOutputArgs } from "./getPrivateDnsResolver";
export const getPrivateDnsResolver: typeof import("./getPrivateDnsResolver").getPrivateDnsResolver = null as any;
export const getPrivateDnsResolverOutput: typeof import("./getPrivateDnsResolver").getPrivateDnsResolverOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsResolver","getPrivateDnsResolverOutput"], () => require("./getPrivateDnsResolver"));

export { GetPrivateDnsResolverDnsForwardingRulesetArgs, GetPrivateDnsResolverDnsForwardingRulesetResult, GetPrivateDnsResolverDnsForwardingRulesetOutputArgs } from "./getPrivateDnsResolverDnsForwardingRuleset";
export const getPrivateDnsResolverDnsForwardingRuleset: typeof import("./getPrivateDnsResolverDnsForwardingRuleset").getPrivateDnsResolverDnsForwardingRuleset = null as any;
export const getPrivateDnsResolverDnsForwardingRulesetOutput: typeof import("./getPrivateDnsResolverDnsForwardingRuleset").getPrivateDnsResolverDnsForwardingRulesetOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsResolverDnsForwardingRuleset","getPrivateDnsResolverDnsForwardingRulesetOutput"], () => require("./getPrivateDnsResolverDnsForwardingRuleset"));

export { GetPrivateDnsResolverForwardingRuleArgs, GetPrivateDnsResolverForwardingRuleResult, GetPrivateDnsResolverForwardingRuleOutputArgs } from "./getPrivateDnsResolverForwardingRule";
export const getPrivateDnsResolverForwardingRule: typeof import("./getPrivateDnsResolverForwardingRule").getPrivateDnsResolverForwardingRule = null as any;
export const getPrivateDnsResolverForwardingRuleOutput: typeof import("./getPrivateDnsResolverForwardingRule").getPrivateDnsResolverForwardingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsResolverForwardingRule","getPrivateDnsResolverForwardingRuleOutput"], () => require("./getPrivateDnsResolverForwardingRule"));

export { GetPrivateDnsResolverInboundEndpointArgs, GetPrivateDnsResolverInboundEndpointResult, GetPrivateDnsResolverInboundEndpointOutputArgs } from "./getPrivateDnsResolverInboundEndpoint";
export const getPrivateDnsResolverInboundEndpoint: typeof import("./getPrivateDnsResolverInboundEndpoint").getPrivateDnsResolverInboundEndpoint = null as any;
export const getPrivateDnsResolverInboundEndpointOutput: typeof import("./getPrivateDnsResolverInboundEndpoint").getPrivateDnsResolverInboundEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsResolverInboundEndpoint","getPrivateDnsResolverInboundEndpointOutput"], () => require("./getPrivateDnsResolverInboundEndpoint"));

export { GetPrivateDnsResolverOutboundEndpointArgs, GetPrivateDnsResolverOutboundEndpointResult, GetPrivateDnsResolverOutboundEndpointOutputArgs } from "./getPrivateDnsResolverOutboundEndpoint";
export const getPrivateDnsResolverOutboundEndpoint: typeof import("./getPrivateDnsResolverOutboundEndpoint").getPrivateDnsResolverOutboundEndpoint = null as any;
export const getPrivateDnsResolverOutboundEndpointOutput: typeof import("./getPrivateDnsResolverOutboundEndpoint").getPrivateDnsResolverOutboundEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsResolverOutboundEndpoint","getPrivateDnsResolverOutboundEndpointOutput"], () => require("./getPrivateDnsResolverOutboundEndpoint"));

export { GetPrivateDnsResolverVirtualNetworkLinkArgs, GetPrivateDnsResolverVirtualNetworkLinkResult, GetPrivateDnsResolverVirtualNetworkLinkOutputArgs } from "./getPrivateDnsResolverVirtualNetworkLink";
export const getPrivateDnsResolverVirtualNetworkLink: typeof import("./getPrivateDnsResolverVirtualNetworkLink").getPrivateDnsResolverVirtualNetworkLink = null as any;
export const getPrivateDnsResolverVirtualNetworkLinkOutput: typeof import("./getPrivateDnsResolverVirtualNetworkLink").getPrivateDnsResolverVirtualNetworkLinkOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsResolverVirtualNetworkLink","getPrivateDnsResolverVirtualNetworkLinkOutput"], () => require("./getPrivateDnsResolverVirtualNetworkLink"));

export { GetPrivateDnsSoaRecordArgs, GetPrivateDnsSoaRecordResult, GetPrivateDnsSoaRecordOutputArgs } from "./getPrivateDnsSoaRecord";
export const getPrivateDnsSoaRecord: typeof import("./getPrivateDnsSoaRecord").getPrivateDnsSoaRecord = null as any;
export const getPrivateDnsSoaRecordOutput: typeof import("./getPrivateDnsSoaRecord").getPrivateDnsSoaRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsSoaRecord","getPrivateDnsSoaRecordOutput"], () => require("./getPrivateDnsSoaRecord"));

export { GetPrivateDnsSrvRecordArgs, GetPrivateDnsSrvRecordResult, GetPrivateDnsSrvRecordOutputArgs } from "./getPrivateDnsSrvRecord";
export const getPrivateDnsSrvRecord: typeof import("./getPrivateDnsSrvRecord").getPrivateDnsSrvRecord = null as any;
export const getPrivateDnsSrvRecordOutput: typeof import("./getPrivateDnsSrvRecord").getPrivateDnsSrvRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsSrvRecord","getPrivateDnsSrvRecordOutput"], () => require("./getPrivateDnsSrvRecord"));

export { GetPrivateDnsTxtRecordArgs, GetPrivateDnsTxtRecordResult, GetPrivateDnsTxtRecordOutputArgs } from "./getPrivateDnsTxtRecord";
export const getPrivateDnsTxtRecord: typeof import("./getPrivateDnsTxtRecord").getPrivateDnsTxtRecord = null as any;
export const getPrivateDnsTxtRecordOutput: typeof import("./getPrivateDnsTxtRecord").getPrivateDnsTxtRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsTxtRecord","getPrivateDnsTxtRecordOutput"], () => require("./getPrivateDnsTxtRecord"));

export { GetPrivateDnsZoneArgs, GetPrivateDnsZoneResult, GetPrivateDnsZoneOutputArgs } from "./getPrivateDnsZone";
export const getPrivateDnsZone: typeof import("./getPrivateDnsZone").getPrivateDnsZone = null as any;
export const getPrivateDnsZoneOutput: typeof import("./getPrivateDnsZone").getPrivateDnsZoneOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsZone","getPrivateDnsZoneOutput"], () => require("./getPrivateDnsZone"));

export { GetPrivateDnsZoneVirtualNetworkLinkArgs, GetPrivateDnsZoneVirtualNetworkLinkResult, GetPrivateDnsZoneVirtualNetworkLinkOutputArgs } from "./getPrivateDnsZoneVirtualNetworkLink";
export const getPrivateDnsZoneVirtualNetworkLink: typeof import("./getPrivateDnsZoneVirtualNetworkLink").getPrivateDnsZoneVirtualNetworkLink = null as any;
export const getPrivateDnsZoneVirtualNetworkLinkOutput: typeof import("./getPrivateDnsZoneVirtualNetworkLink").getPrivateDnsZoneVirtualNetworkLinkOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsZoneVirtualNetworkLink","getPrivateDnsZoneVirtualNetworkLinkOutput"], () => require("./getPrivateDnsZoneVirtualNetworkLink"));

export { GetPrivateEndpointConnectionArgs, GetPrivateEndpointConnectionResult, GetPrivateEndpointConnectionOutputArgs } from "./getPrivateEndpointConnection";
export const getPrivateEndpointConnection: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnection = null as any;
export const getPrivateEndpointConnectionOutput: typeof import("./getPrivateEndpointConnection").getPrivateEndpointConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateEndpointConnection","getPrivateEndpointConnectionOutput"], () => require("./getPrivateEndpointConnection"));

export { GetPrivateLinkServiceArgs, GetPrivateLinkServiceResult, GetPrivateLinkServiceOutputArgs } from "./getPrivateLinkService";
export const getPrivateLinkService: typeof import("./getPrivateLinkService").getPrivateLinkService = null as any;
export const getPrivateLinkServiceOutput: typeof import("./getPrivateLinkService").getPrivateLinkServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinkService","getPrivateLinkServiceOutput"], () => require("./getPrivateLinkService"));

export { GetPrivateLinkServiceEndpointConnectionsArgs, GetPrivateLinkServiceEndpointConnectionsResult, GetPrivateLinkServiceEndpointConnectionsOutputArgs } from "./getPrivateLinkServiceEndpointConnections";
export const getPrivateLinkServiceEndpointConnections: typeof import("./getPrivateLinkServiceEndpointConnections").getPrivateLinkServiceEndpointConnections = null as any;
export const getPrivateLinkServiceEndpointConnectionsOutput: typeof import("./getPrivateLinkServiceEndpointConnections").getPrivateLinkServiceEndpointConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinkServiceEndpointConnections","getPrivateLinkServiceEndpointConnectionsOutput"], () => require("./getPrivateLinkServiceEndpointConnections"));

export { GetProximityPlacementGroupArgs, GetProximityPlacementGroupResult, GetProximityPlacementGroupOutputArgs } from "./getProximityPlacementGroup";
export const getProximityPlacementGroup: typeof import("./getProximityPlacementGroup").getProximityPlacementGroup = null as any;
export const getProximityPlacementGroupOutput: typeof import("./getProximityPlacementGroup").getProximityPlacementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getProximityPlacementGroup","getProximityPlacementGroupOutput"], () => require("./getProximityPlacementGroup"));

export { GetPublicIpArgs, GetPublicIpResult, GetPublicIpOutputArgs } from "./getPublicIp";
export const getPublicIp: typeof import("./getPublicIp").getPublicIp = null as any;
export const getPublicIpOutput: typeof import("./getPublicIp").getPublicIpOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIp","getPublicIpOutput"], () => require("./getPublicIp"));

export { GetPublicIpPrefixArgs, GetPublicIpPrefixResult, GetPublicIpPrefixOutputArgs } from "./getPublicIpPrefix";
export const getPublicIpPrefix: typeof import("./getPublicIpPrefix").getPublicIpPrefix = null as any;
export const getPublicIpPrefixOutput: typeof import("./getPublicIpPrefix").getPublicIpPrefixOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIpPrefix","getPublicIpPrefixOutput"], () => require("./getPublicIpPrefix"));

export { GetPublicIpsArgs, GetPublicIpsResult, GetPublicIpsOutputArgs } from "./getPublicIps";
export const getPublicIps: typeof import("./getPublicIps").getPublicIps = null as any;
export const getPublicIpsOutput: typeof import("./getPublicIps").getPublicIpsOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIps","getPublicIpsOutput"], () => require("./getPublicIps"));

export { GetPublicMaintenanceConfigurationsArgs, GetPublicMaintenanceConfigurationsResult, GetPublicMaintenanceConfigurationsOutputArgs } from "./getPublicMaintenanceConfigurations";
export const getPublicMaintenanceConfigurations: typeof import("./getPublicMaintenanceConfigurations").getPublicMaintenanceConfigurations = null as any;
export const getPublicMaintenanceConfigurationsOutput: typeof import("./getPublicMaintenanceConfigurations").getPublicMaintenanceConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getPublicMaintenanceConfigurations","getPublicMaintenanceConfigurationsOutput"], () => require("./getPublicMaintenanceConfigurations"));

export { GetRecoveryServicesVaultArgs, GetRecoveryServicesVaultResult, GetRecoveryServicesVaultOutputArgs } from "./getRecoveryServicesVault";
export const getRecoveryServicesVault: typeof import("./getRecoveryServicesVault").getRecoveryServicesVault = null as any;
export const getRecoveryServicesVaultOutput: typeof import("./getRecoveryServicesVault").getRecoveryServicesVaultOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryServicesVault","getRecoveryServicesVaultOutput"], () => require("./getRecoveryServicesVault"));

export { GetRedisCacheArgs, GetRedisCacheResult, GetRedisCacheOutputArgs } from "./getRedisCache";
export const getRedisCache: typeof import("./getRedisCache").getRedisCache = null as any;
export const getRedisCacheOutput: typeof import("./getRedisCache").getRedisCacheOutput = null as any;
utilities.lazyLoad(exports, ["getRedisCache","getRedisCacheOutput"], () => require("./getRedisCache"));

export { GetRedisEnterpriseDatabaseArgs, GetRedisEnterpriseDatabaseResult, GetRedisEnterpriseDatabaseOutputArgs } from "./getRedisEnterpriseDatabase";
export const getRedisEnterpriseDatabase: typeof import("./getRedisEnterpriseDatabase").getRedisEnterpriseDatabase = null as any;
export const getRedisEnterpriseDatabaseOutput: typeof import("./getRedisEnterpriseDatabase").getRedisEnterpriseDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getRedisEnterpriseDatabase","getRedisEnterpriseDatabaseOutput"], () => require("./getRedisEnterpriseDatabase"));

export { GetResourceGroupArgs, GetResourceGroupResult, GetResourceGroupOutputArgs } from "./getResourceGroup";
export const getResourceGroup: typeof import("./getResourceGroup").getResourceGroup = null as any;
export const getResourceGroupOutput: typeof import("./getResourceGroup").getResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroup","getResourceGroupOutput"], () => require("./getResourceGroup"));

export { GetResourceGroupTemplateDeploymentArgs, GetResourceGroupTemplateDeploymentResult, GetResourceGroupTemplateDeploymentOutputArgs } from "./getResourceGroupTemplateDeployment";
export const getResourceGroupTemplateDeployment: typeof import("./getResourceGroupTemplateDeployment").getResourceGroupTemplateDeployment = null as any;
export const getResourceGroupTemplateDeploymentOutput: typeof import("./getResourceGroupTemplateDeployment").getResourceGroupTemplateDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroupTemplateDeployment","getResourceGroupTemplateDeploymentOutput"], () => require("./getResourceGroupTemplateDeployment"));

export { GetResourcesArgs, GetResourcesResult, GetResourcesOutputArgs } from "./getResources";
export const getResources: typeof import("./getResources").getResources = null as any;
export const getResourcesOutput: typeof import("./getResources").getResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getResources","getResourcesOutput"], () => require("./getResources"));

export { GetRoleDefinitionArgs, GetRoleDefinitionResult, GetRoleDefinitionOutputArgs } from "./getRoleDefinition";
export const getRoleDefinition: typeof import("./getRoleDefinition").getRoleDefinition = null as any;
export const getRoleDefinitionOutput: typeof import("./getRoleDefinition").getRoleDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getRoleDefinition","getRoleDefinitionOutput"], () => require("./getRoleDefinition"));

export { GetRoleManagementPolicyArgs, GetRoleManagementPolicyResult, GetRoleManagementPolicyOutputArgs } from "./getRoleManagementPolicy";
export const getRoleManagementPolicy: typeof import("./getRoleManagementPolicy").getRoleManagementPolicy = null as any;
export const getRoleManagementPolicyOutput: typeof import("./getRoleManagementPolicy").getRoleManagementPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRoleManagementPolicy","getRoleManagementPolicyOutput"], () => require("./getRoleManagementPolicy"));

export { GetRouteFilterArgs, GetRouteFilterResult, GetRouteFilterOutputArgs } from "./getRouteFilter";
export const getRouteFilter: typeof import("./getRouteFilter").getRouteFilter = null as any;
export const getRouteFilterOutput: typeof import("./getRouteFilter").getRouteFilterOutput = null as any;
utilities.lazyLoad(exports, ["getRouteFilter","getRouteFilterOutput"], () => require("./getRouteFilter"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetSearchServiceArgs, GetSearchServiceResult, GetSearchServiceOutputArgs } from "./getSearchService";
export const getSearchService: typeof import("./getSearchService").getSearchService = null as any;
export const getSearchServiceOutput: typeof import("./getSearchService").getSearchServiceOutput = null as any;
utilities.lazyLoad(exports, ["getSearchService","getSearchServiceOutput"], () => require("./getSearchService"));

export { GetSentinelAlertRuleArgs, GetSentinelAlertRuleResult, GetSentinelAlertRuleOutputArgs } from "./getSentinelAlertRule";
export const getSentinelAlertRule: typeof import("./getSentinelAlertRule").getSentinelAlertRule = null as any;
export const getSentinelAlertRuleOutput: typeof import("./getSentinelAlertRule").getSentinelAlertRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSentinelAlertRule","getSentinelAlertRuleOutput"], () => require("./getSentinelAlertRule"));

export { GetSentinelAlertRuleAnomalyArgs, GetSentinelAlertRuleAnomalyResult, GetSentinelAlertRuleAnomalyOutputArgs } from "./getSentinelAlertRuleAnomaly";
export const getSentinelAlertRuleAnomaly: typeof import("./getSentinelAlertRuleAnomaly").getSentinelAlertRuleAnomaly = null as any;
export const getSentinelAlertRuleAnomalyOutput: typeof import("./getSentinelAlertRuleAnomaly").getSentinelAlertRuleAnomalyOutput = null as any;
utilities.lazyLoad(exports, ["getSentinelAlertRuleAnomaly","getSentinelAlertRuleAnomalyOutput"], () => require("./getSentinelAlertRuleAnomaly"));

export { GetSentinelAlertRuleTemplateArgs, GetSentinelAlertRuleTemplateResult, GetSentinelAlertRuleTemplateOutputArgs } from "./getSentinelAlertRuleTemplate";
export const getSentinelAlertRuleTemplate: typeof import("./getSentinelAlertRuleTemplate").getSentinelAlertRuleTemplate = null as any;
export const getSentinelAlertRuleTemplateOutput: typeof import("./getSentinelAlertRuleTemplate").getSentinelAlertRuleTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getSentinelAlertRuleTemplate","getSentinelAlertRuleTemplateOutput"], () => require("./getSentinelAlertRuleTemplate"));

export { GetServicePlanArgs, GetServicePlanResult, GetServicePlanOutputArgs } from "./getServicePlan";
export const getServicePlan: typeof import("./getServicePlan").getServicePlan = null as any;
export const getServicePlanOutput: typeof import("./getServicePlan").getServicePlanOutput = null as any;
utilities.lazyLoad(exports, ["getServicePlan","getServicePlanOutput"], () => require("./getServicePlan"));

export { GetServicebusNamespaceArgs, GetServicebusNamespaceResult, GetServicebusNamespaceOutputArgs } from "./getServicebusNamespace";
export const getServicebusNamespace: typeof import("./getServicebusNamespace").getServicebusNamespace = null as any;
export const getServicebusNamespaceOutput: typeof import("./getServicebusNamespace").getServicebusNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getServicebusNamespace","getServicebusNamespaceOutput"], () => require("./getServicebusNamespace"));

export { GetServicebusNamespaceAuthorizationRuleArgs, GetServicebusNamespaceAuthorizationRuleResult, GetServicebusNamespaceAuthorizationRuleOutputArgs } from "./getServicebusNamespaceAuthorizationRule";
export const getServicebusNamespaceAuthorizationRule: typeof import("./getServicebusNamespaceAuthorizationRule").getServicebusNamespaceAuthorizationRule = null as any;
export const getServicebusNamespaceAuthorizationRuleOutput: typeof import("./getServicebusNamespaceAuthorizationRule").getServicebusNamespaceAuthorizationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getServicebusNamespaceAuthorizationRule","getServicebusNamespaceAuthorizationRuleOutput"], () => require("./getServicebusNamespaceAuthorizationRule"));

export { GetServicebusNamespaceDisasterRecoveryConfigArgs, GetServicebusNamespaceDisasterRecoveryConfigResult, GetServicebusNamespaceDisasterRecoveryConfigOutputArgs } from "./getServicebusNamespaceDisasterRecoveryConfig";
export const getServicebusNamespaceDisasterRecoveryConfig: typeof import("./getServicebusNamespaceDisasterRecoveryConfig").getServicebusNamespaceDisasterRecoveryConfig = null as any;
export const getServicebusNamespaceDisasterRecoveryConfigOutput: typeof import("./getServicebusNamespaceDisasterRecoveryConfig").getServicebusNamespaceDisasterRecoveryConfigOutput = null as any;
utilities.lazyLoad(exports, ["getServicebusNamespaceDisasterRecoveryConfig","getServicebusNamespaceDisasterRecoveryConfigOutput"], () => require("./getServicebusNamespaceDisasterRecoveryConfig"));

export { GetServicebusQueueArgs, GetServicebusQueueResult, GetServicebusQueueOutputArgs } from "./getServicebusQueue";
export const getServicebusQueue: typeof import("./getServicebusQueue").getServicebusQueue = null as any;
export const getServicebusQueueOutput: typeof import("./getServicebusQueue").getServicebusQueueOutput = null as any;
utilities.lazyLoad(exports, ["getServicebusQueue","getServicebusQueueOutput"], () => require("./getServicebusQueue"));

export { GetServicebusQueueAuthorizationRuleArgs, GetServicebusQueueAuthorizationRuleResult, GetServicebusQueueAuthorizationRuleOutputArgs } from "./getServicebusQueueAuthorizationRule";
export const getServicebusQueueAuthorizationRule: typeof import("./getServicebusQueueAuthorizationRule").getServicebusQueueAuthorizationRule = null as any;
export const getServicebusQueueAuthorizationRuleOutput: typeof import("./getServicebusQueueAuthorizationRule").getServicebusQueueAuthorizationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getServicebusQueueAuthorizationRule","getServicebusQueueAuthorizationRuleOutput"], () => require("./getServicebusQueueAuthorizationRule"));

export { GetServicebusSubscriptionArgs, GetServicebusSubscriptionResult, GetServicebusSubscriptionOutputArgs } from "./getServicebusSubscription";
export const getServicebusSubscription: typeof import("./getServicebusSubscription").getServicebusSubscription = null as any;
export const getServicebusSubscriptionOutput: typeof import("./getServicebusSubscription").getServicebusSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getServicebusSubscription","getServicebusSubscriptionOutput"], () => require("./getServicebusSubscription"));

export { GetServicebusTopicArgs, GetServicebusTopicResult, GetServicebusTopicOutputArgs } from "./getServicebusTopic";
export const getServicebusTopic: typeof import("./getServicebusTopic").getServicebusTopic = null as any;
export const getServicebusTopicOutput: typeof import("./getServicebusTopic").getServicebusTopicOutput = null as any;
utilities.lazyLoad(exports, ["getServicebusTopic","getServicebusTopicOutput"], () => require("./getServicebusTopic"));

export { GetServicebusTopicAuthorizationRuleArgs, GetServicebusTopicAuthorizationRuleResult, GetServicebusTopicAuthorizationRuleOutputArgs } from "./getServicebusTopicAuthorizationRule";
export const getServicebusTopicAuthorizationRule: typeof import("./getServicebusTopicAuthorizationRule").getServicebusTopicAuthorizationRule = null as any;
export const getServicebusTopicAuthorizationRuleOutput: typeof import("./getServicebusTopicAuthorizationRule").getServicebusTopicAuthorizationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getServicebusTopicAuthorizationRule","getServicebusTopicAuthorizationRuleOutput"], () => require("./getServicebusTopicAuthorizationRule"));

export { GetSharedImageArgs, GetSharedImageResult, GetSharedImageOutputArgs } from "./getSharedImage";
export const getSharedImage: typeof import("./getSharedImage").getSharedImage = null as any;
export const getSharedImageOutput: typeof import("./getSharedImage").getSharedImageOutput = null as any;
utilities.lazyLoad(exports, ["getSharedImage","getSharedImageOutput"], () => require("./getSharedImage"));

export { GetSharedImageGalleryArgs, GetSharedImageGalleryResult, GetSharedImageGalleryOutputArgs } from "./getSharedImageGallery";
export const getSharedImageGallery: typeof import("./getSharedImageGallery").getSharedImageGallery = null as any;
export const getSharedImageGalleryOutput: typeof import("./getSharedImageGallery").getSharedImageGalleryOutput = null as any;
utilities.lazyLoad(exports, ["getSharedImageGallery","getSharedImageGalleryOutput"], () => require("./getSharedImageGallery"));

export { GetSharedImageVersionArgs, GetSharedImageVersionResult, GetSharedImageVersionOutputArgs } from "./getSharedImageVersion";
export const getSharedImageVersion: typeof import("./getSharedImageVersion").getSharedImageVersion = null as any;
export const getSharedImageVersionOutput: typeof import("./getSharedImageVersion").getSharedImageVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSharedImageVersion","getSharedImageVersionOutput"], () => require("./getSharedImageVersion"));

export { GetSharedImageVersionsArgs, GetSharedImageVersionsResult, GetSharedImageVersionsOutputArgs } from "./getSharedImageVersions";
export const getSharedImageVersions: typeof import("./getSharedImageVersions").getSharedImageVersions = null as any;
export const getSharedImageVersionsOutput: typeof import("./getSharedImageVersions").getSharedImageVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getSharedImageVersions","getSharedImageVersionsOutput"], () => require("./getSharedImageVersions"));

export { GetSignalrServiceArgs, GetSignalrServiceResult, GetSignalrServiceOutputArgs } from "./getSignalrService";
export const getSignalrService: typeof import("./getSignalrService").getSignalrService = null as any;
export const getSignalrServiceOutput: typeof import("./getSignalrService").getSignalrServiceOutput = null as any;
utilities.lazyLoad(exports, ["getSignalrService","getSignalrServiceOutput"], () => require("./getSignalrService"));

export { GetSiteRecoveryFabricArgs, GetSiteRecoveryFabricResult, GetSiteRecoveryFabricOutputArgs } from "./getSiteRecoveryFabric";
export const getSiteRecoveryFabric: typeof import("./getSiteRecoveryFabric").getSiteRecoveryFabric = null as any;
export const getSiteRecoveryFabricOutput: typeof import("./getSiteRecoveryFabric").getSiteRecoveryFabricOutput = null as any;
utilities.lazyLoad(exports, ["getSiteRecoveryFabric","getSiteRecoveryFabricOutput"], () => require("./getSiteRecoveryFabric"));

export { GetSiteRecoveryProtectionContainerArgs, GetSiteRecoveryProtectionContainerResult, GetSiteRecoveryProtectionContainerOutputArgs } from "./getSiteRecoveryProtectionContainer";
export const getSiteRecoveryProtectionContainer: typeof import("./getSiteRecoveryProtectionContainer").getSiteRecoveryProtectionContainer = null as any;
export const getSiteRecoveryProtectionContainerOutput: typeof import("./getSiteRecoveryProtectionContainer").getSiteRecoveryProtectionContainerOutput = null as any;
utilities.lazyLoad(exports, ["getSiteRecoveryProtectionContainer","getSiteRecoveryProtectionContainerOutput"], () => require("./getSiteRecoveryProtectionContainer"));

export { GetSiteRecoveryReplicationPolicyArgs, GetSiteRecoveryReplicationPolicyResult, GetSiteRecoveryReplicationPolicyOutputArgs } from "./getSiteRecoveryReplicationPolicy";
export const getSiteRecoveryReplicationPolicy: typeof import("./getSiteRecoveryReplicationPolicy").getSiteRecoveryReplicationPolicy = null as any;
export const getSiteRecoveryReplicationPolicyOutput: typeof import("./getSiteRecoveryReplicationPolicy").getSiteRecoveryReplicationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSiteRecoveryReplicationPolicy","getSiteRecoveryReplicationPolicyOutput"], () => require("./getSiteRecoveryReplicationPolicy"));

export { GetSiteRecoveryReplicationRecoveryPlanArgs, GetSiteRecoveryReplicationRecoveryPlanResult, GetSiteRecoveryReplicationRecoveryPlanOutputArgs } from "./getSiteRecoveryReplicationRecoveryPlan";
export const getSiteRecoveryReplicationRecoveryPlan: typeof import("./getSiteRecoveryReplicationRecoveryPlan").getSiteRecoveryReplicationRecoveryPlan = null as any;
export const getSiteRecoveryReplicationRecoveryPlanOutput: typeof import("./getSiteRecoveryReplicationRecoveryPlan").getSiteRecoveryReplicationRecoveryPlanOutput = null as any;
utilities.lazyLoad(exports, ["getSiteRecoveryReplicationRecoveryPlan","getSiteRecoveryReplicationRecoveryPlanOutput"], () => require("./getSiteRecoveryReplicationRecoveryPlan"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { GetSourceControlTokenArgs, GetSourceControlTokenResult, GetSourceControlTokenOutputArgs } from "./getSourceControlToken";
export const getSourceControlToken: typeof import("./getSourceControlToken").getSourceControlToken = null as any;
export const getSourceControlTokenOutput: typeof import("./getSourceControlToken").getSourceControlTokenOutput = null as any;
utilities.lazyLoad(exports, ["getSourceControlToken","getSourceControlTokenOutput"], () => require("./getSourceControlToken"));

export { GetSpatialAnchorsAccountArgs, GetSpatialAnchorsAccountResult, GetSpatialAnchorsAccountOutputArgs } from "./getSpatialAnchorsAccount";
export const getSpatialAnchorsAccount: typeof import("./getSpatialAnchorsAccount").getSpatialAnchorsAccount = null as any;
export const getSpatialAnchorsAccountOutput: typeof import("./getSpatialAnchorsAccount").getSpatialAnchorsAccountOutput = null as any;
utilities.lazyLoad(exports, ["getSpatialAnchorsAccount","getSpatialAnchorsAccountOutput"], () => require("./getSpatialAnchorsAccount"));

export { GetSpringCloudAppArgs, GetSpringCloudAppResult, GetSpringCloudAppOutputArgs } from "./getSpringCloudApp";
export const getSpringCloudApp: typeof import("./getSpringCloudApp").getSpringCloudApp = null as any;
export const getSpringCloudAppOutput: typeof import("./getSpringCloudApp").getSpringCloudAppOutput = null as any;
utilities.lazyLoad(exports, ["getSpringCloudApp","getSpringCloudAppOutput"], () => require("./getSpringCloudApp"));

export { GetSpringCloudServiceArgs, GetSpringCloudServiceResult, GetSpringCloudServiceOutputArgs } from "./getSpringCloudService";
export const getSpringCloudService: typeof import("./getSpringCloudService").getSpringCloudService = null as any;
export const getSpringCloudServiceOutput: typeof import("./getSpringCloudService").getSpringCloudServiceOutput = null as any;
utilities.lazyLoad(exports, ["getSpringCloudService","getSpringCloudServiceOutput"], () => require("./getSpringCloudService"));

export { GetSshPublicKeyArgs, GetSshPublicKeyResult, GetSshPublicKeyOutputArgs } from "./getSshPublicKey";
export const getSshPublicKey: typeof import("./getSshPublicKey").getSshPublicKey = null as any;
export const getSshPublicKeyOutput: typeof import("./getSshPublicKey").getSshPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshPublicKey","getSshPublicKeyOutput"], () => require("./getSshPublicKey"));

export { GetStackHciClusterArgs, GetStackHciClusterResult, GetStackHciClusterOutputArgs } from "./getStackHciCluster";
export const getStackHciCluster: typeof import("./getStackHciCluster").getStackHciCluster = null as any;
export const getStackHciClusterOutput: typeof import("./getStackHciCluster").getStackHciClusterOutput = null as any;
utilities.lazyLoad(exports, ["getStackHciCluster","getStackHciClusterOutput"], () => require("./getStackHciCluster"));

export { GetStaticWebAppArgs, GetStaticWebAppResult, GetStaticWebAppOutputArgs } from "./getStaticWebApp";
export const getStaticWebApp: typeof import("./getStaticWebApp").getStaticWebApp = null as any;
export const getStaticWebAppOutput: typeof import("./getStaticWebApp").getStaticWebAppOutput = null as any;
utilities.lazyLoad(exports, ["getStaticWebApp","getStaticWebAppOutput"], () => require("./getStaticWebApp"));

export { GetStorageAccountArgs, GetStorageAccountResult, GetStorageAccountOutputArgs } from "./getStorageAccount";
export const getStorageAccount: typeof import("./getStorageAccount").getStorageAccount = null as any;
export const getStorageAccountOutput: typeof import("./getStorageAccount").getStorageAccountOutput = null as any;
utilities.lazyLoad(exports, ["getStorageAccount","getStorageAccountOutput"], () => require("./getStorageAccount"));

export { GetStorageAccountBlobContainerSasArgs, GetStorageAccountBlobContainerSasResult, GetStorageAccountBlobContainerSasOutputArgs } from "./getStorageAccountBlobContainerSas";
export const getStorageAccountBlobContainerSas: typeof import("./getStorageAccountBlobContainerSas").getStorageAccountBlobContainerSas = null as any;
export const getStorageAccountBlobContainerSasOutput: typeof import("./getStorageAccountBlobContainerSas").getStorageAccountBlobContainerSasOutput = null as any;
utilities.lazyLoad(exports, ["getStorageAccountBlobContainerSas","getStorageAccountBlobContainerSasOutput"], () => require("./getStorageAccountBlobContainerSas"));

export { GetStorageAccountSasArgs, GetStorageAccountSasResult, GetStorageAccountSasOutputArgs } from "./getStorageAccountSas";
export const getStorageAccountSas: typeof import("./getStorageAccountSas").getStorageAccountSas = null as any;
export const getStorageAccountSasOutput: typeof import("./getStorageAccountSas").getStorageAccountSasOutput = null as any;
utilities.lazyLoad(exports, ["getStorageAccountSas","getStorageAccountSasOutput"], () => require("./getStorageAccountSas"));

export { GetStorageBlobArgs, GetStorageBlobResult, GetStorageBlobOutputArgs } from "./getStorageBlob";
export const getStorageBlob: typeof import("./getStorageBlob").getStorageBlob = null as any;
export const getStorageBlobOutput: typeof import("./getStorageBlob").getStorageBlobOutput = null as any;
utilities.lazyLoad(exports, ["getStorageBlob","getStorageBlobOutput"], () => require("./getStorageBlob"));

export { GetStorageContainerArgs, GetStorageContainerResult, GetStorageContainerOutputArgs } from "./getStorageContainer";
export const getStorageContainer: typeof import("./getStorageContainer").getStorageContainer = null as any;
export const getStorageContainerOutput: typeof import("./getStorageContainer").getStorageContainerOutput = null as any;
utilities.lazyLoad(exports, ["getStorageContainer","getStorageContainerOutput"], () => require("./getStorageContainer"));

export { GetStorageContainersArgs, GetStorageContainersResult, GetStorageContainersOutputArgs } from "./getStorageContainers";
export const getStorageContainers: typeof import("./getStorageContainers").getStorageContainers = null as any;
export const getStorageContainersOutput: typeof import("./getStorageContainers").getStorageContainersOutput = null as any;
utilities.lazyLoad(exports, ["getStorageContainers","getStorageContainersOutput"], () => require("./getStorageContainers"));

export { GetStorageEncryptionScopeArgs, GetStorageEncryptionScopeResult, GetStorageEncryptionScopeOutputArgs } from "./getStorageEncryptionScope";
export const getStorageEncryptionScope: typeof import("./getStorageEncryptionScope").getStorageEncryptionScope = null as any;
export const getStorageEncryptionScopeOutput: typeof import("./getStorageEncryptionScope").getStorageEncryptionScopeOutput = null as any;
utilities.lazyLoad(exports, ["getStorageEncryptionScope","getStorageEncryptionScopeOutput"], () => require("./getStorageEncryptionScope"));

export { GetStorageManagementPolicyArgs, GetStorageManagementPolicyResult, GetStorageManagementPolicyOutputArgs } from "./getStorageManagementPolicy";
export const getStorageManagementPolicy: typeof import("./getStorageManagementPolicy").getStorageManagementPolicy = null as any;
export const getStorageManagementPolicyOutput: typeof import("./getStorageManagementPolicy").getStorageManagementPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageManagementPolicy","getStorageManagementPolicyOutput"], () => require("./getStorageManagementPolicy"));

export { GetStorageQueueArgs, GetStorageQueueResult, GetStorageQueueOutputArgs } from "./getStorageQueue";
export const getStorageQueue: typeof import("./getStorageQueue").getStorageQueue = null as any;
export const getStorageQueueOutput: typeof import("./getStorageQueue").getStorageQueueOutput = null as any;
utilities.lazyLoad(exports, ["getStorageQueue","getStorageQueueOutput"], () => require("./getStorageQueue"));

export { GetStorageShareArgs, GetStorageShareResult, GetStorageShareOutputArgs } from "./getStorageShare";
export const getStorageShare: typeof import("./getStorageShare").getStorageShare = null as any;
export const getStorageShareOutput: typeof import("./getStorageShare").getStorageShareOutput = null as any;
utilities.lazyLoad(exports, ["getStorageShare","getStorageShareOutput"], () => require("./getStorageShare"));

export { GetStorageSyncArgs, GetStorageSyncResult, GetStorageSyncOutputArgs } from "./getStorageSync";
export const getStorageSync: typeof import("./getStorageSync").getStorageSync = null as any;
export const getStorageSyncOutput: typeof import("./getStorageSync").getStorageSyncOutput = null as any;
utilities.lazyLoad(exports, ["getStorageSync","getStorageSyncOutput"], () => require("./getStorageSync"));

export { GetStorageSyncGroupArgs, GetStorageSyncGroupResult, GetStorageSyncGroupOutputArgs } from "./getStorageSyncGroup";
export const getStorageSyncGroup: typeof import("./getStorageSyncGroup").getStorageSyncGroup = null as any;
export const getStorageSyncGroupOutput: typeof import("./getStorageSyncGroup").getStorageSyncGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStorageSyncGroup","getStorageSyncGroupOutput"], () => require("./getStorageSyncGroup"));

export { GetStorageTableArgs, GetStorageTableResult, GetStorageTableOutputArgs } from "./getStorageTable";
export const getStorageTable: typeof import("./getStorageTable").getStorageTable = null as any;
export const getStorageTableOutput: typeof import("./getStorageTable").getStorageTableOutput = null as any;
utilities.lazyLoad(exports, ["getStorageTable","getStorageTableOutput"], () => require("./getStorageTable"));

export { GetStorageTableEntitiesArgs, GetStorageTableEntitiesResult, GetStorageTableEntitiesOutputArgs } from "./getStorageTableEntities";
export const getStorageTableEntities: typeof import("./getStorageTableEntities").getStorageTableEntities = null as any;
export const getStorageTableEntitiesOutput: typeof import("./getStorageTableEntities").getStorageTableEntitiesOutput = null as any;
utilities.lazyLoad(exports, ["getStorageTableEntities","getStorageTableEntitiesOutput"], () => require("./getStorageTableEntities"));

export { GetStorageTableEntityArgs, GetStorageTableEntityResult, GetStorageTableEntityOutputArgs } from "./getStorageTableEntity";
export const getStorageTableEntity: typeof import("./getStorageTableEntity").getStorageTableEntity = null as any;
export const getStorageTableEntityOutput: typeof import("./getStorageTableEntity").getStorageTableEntityOutput = null as any;
utilities.lazyLoad(exports, ["getStorageTableEntity","getStorageTableEntityOutput"], () => require("./getStorageTableEntity"));

export { GetStreamAnalyticsJobArgs, GetStreamAnalyticsJobResult, GetStreamAnalyticsJobOutputArgs } from "./getStreamAnalyticsJob";
export const getStreamAnalyticsJob: typeof import("./getStreamAnalyticsJob").getStreamAnalyticsJob = null as any;
export const getStreamAnalyticsJobOutput: typeof import("./getStreamAnalyticsJob").getStreamAnalyticsJobOutput = null as any;
utilities.lazyLoad(exports, ["getStreamAnalyticsJob","getStreamAnalyticsJobOutput"], () => require("./getStreamAnalyticsJob"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetSubscriptionArgs, GetSubscriptionResult, GetSubscriptionOutputArgs } from "./getSubscription";
export const getSubscription: typeof import("./getSubscription").getSubscription = null as any;
export const getSubscriptionOutput: typeof import("./getSubscription").getSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getSubscription","getSubscriptionOutput"], () => require("./getSubscription"));

export { GetSubscriptionTemplateDeploymentArgs, GetSubscriptionTemplateDeploymentResult, GetSubscriptionTemplateDeploymentOutputArgs } from "./getSubscriptionTemplateDeployment";
export const getSubscriptionTemplateDeployment: typeof import("./getSubscriptionTemplateDeployment").getSubscriptionTemplateDeployment = null as any;
export const getSubscriptionTemplateDeploymentOutput: typeof import("./getSubscriptionTemplateDeployment").getSubscriptionTemplateDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getSubscriptionTemplateDeployment","getSubscriptionTemplateDeploymentOutput"], () => require("./getSubscriptionTemplateDeployment"));

export { GetSubscriptionsArgs, GetSubscriptionsResult, GetSubscriptionsOutputArgs } from "./getSubscriptions";
export const getSubscriptions: typeof import("./getSubscriptions").getSubscriptions = null as any;
export const getSubscriptionsOutput: typeof import("./getSubscriptions").getSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getSubscriptions","getSubscriptionsOutput"], () => require("./getSubscriptions"));

export { GetSynapseWorkspaceArgs, GetSynapseWorkspaceResult, GetSynapseWorkspaceOutputArgs } from "./getSynapseWorkspace";
export const getSynapseWorkspace: typeof import("./getSynapseWorkspace").getSynapseWorkspace = null as any;
export const getSynapseWorkspaceOutput: typeof import("./getSynapseWorkspace").getSynapseWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getSynapseWorkspace","getSynapseWorkspaceOutput"], () => require("./getSynapseWorkspace"));

export { GetSystemCenterVirtualMachineManagerInventoryItemsArgs, GetSystemCenterVirtualMachineManagerInventoryItemsResult, GetSystemCenterVirtualMachineManagerInventoryItemsOutputArgs } from "./getSystemCenterVirtualMachineManagerInventoryItems";
export const getSystemCenterVirtualMachineManagerInventoryItems: typeof import("./getSystemCenterVirtualMachineManagerInventoryItems").getSystemCenterVirtualMachineManagerInventoryItems = null as any;
export const getSystemCenterVirtualMachineManagerInventoryItemsOutput: typeof import("./getSystemCenterVirtualMachineManagerInventoryItems").getSystemCenterVirtualMachineManagerInventoryItemsOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCenterVirtualMachineManagerInventoryItems","getSystemCenterVirtualMachineManagerInventoryItemsOutput"], () => require("./getSystemCenterVirtualMachineManagerInventoryItems"));

export { GetTemplateSpecVersionArgs, GetTemplateSpecVersionResult, GetTemplateSpecVersionOutputArgs } from "./getTemplateSpecVersion";
export const getTemplateSpecVersion: typeof import("./getTemplateSpecVersion").getTemplateSpecVersion = null as any;
export const getTemplateSpecVersionOutput: typeof import("./getTemplateSpecVersion").getTemplateSpecVersionOutput = null as any;
utilities.lazyLoad(exports, ["getTemplateSpecVersion","getTemplateSpecVersionOutput"], () => require("./getTemplateSpecVersion"));

export { GetTenantTemplateDeploymentArgs, GetTenantTemplateDeploymentResult, GetTenantTemplateDeploymentOutputArgs } from "./getTenantTemplateDeployment";
export const getTenantTemplateDeployment: typeof import("./getTenantTemplateDeployment").getTenantTemplateDeployment = null as any;
export const getTenantTemplateDeploymentOutput: typeof import("./getTenantTemplateDeployment").getTenantTemplateDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getTenantTemplateDeployment","getTenantTemplateDeploymentOutput"], () => require("./getTenantTemplateDeployment"));

export { GetTrafficManagerGeographicalLocationArgs, GetTrafficManagerGeographicalLocationResult, GetTrafficManagerGeographicalLocationOutputArgs } from "./getTrafficManagerGeographicalLocation";
export const getTrafficManagerGeographicalLocation: typeof import("./getTrafficManagerGeographicalLocation").getTrafficManagerGeographicalLocation = null as any;
export const getTrafficManagerGeographicalLocationOutput: typeof import("./getTrafficManagerGeographicalLocation").getTrafficManagerGeographicalLocationOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficManagerGeographicalLocation","getTrafficManagerGeographicalLocationOutput"], () => require("./getTrafficManagerGeographicalLocation"));

export { GetTrafficManagerProfileArgs, GetTrafficManagerProfileResult, GetTrafficManagerProfileOutputArgs } from "./getTrafficManagerProfile";
export const getTrafficManagerProfile: typeof import("./getTrafficManagerProfile").getTrafficManagerProfile = null as any;
export const getTrafficManagerProfileOutput: typeof import("./getTrafficManagerProfile").getTrafficManagerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficManagerProfile","getTrafficManagerProfileOutput"], () => require("./getTrafficManagerProfile"));

export { GetUserAssignedIdentityArgs, GetUserAssignedIdentityResult, GetUserAssignedIdentityOutputArgs } from "./getUserAssignedIdentity";
export const getUserAssignedIdentity: typeof import("./getUserAssignedIdentity").getUserAssignedIdentity = null as any;
export const getUserAssignedIdentityOutput: typeof import("./getUserAssignedIdentity").getUserAssignedIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getUserAssignedIdentity","getUserAssignedIdentityOutput"], () => require("./getUserAssignedIdentity"));

export { GetVirtualDesktopApplicationGroupArgs, GetVirtualDesktopApplicationGroupResult, GetVirtualDesktopApplicationGroupOutputArgs } from "./getVirtualDesktopApplicationGroup";
export const getVirtualDesktopApplicationGroup: typeof import("./getVirtualDesktopApplicationGroup").getVirtualDesktopApplicationGroup = null as any;
export const getVirtualDesktopApplicationGroupOutput: typeof import("./getVirtualDesktopApplicationGroup").getVirtualDesktopApplicationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualDesktopApplicationGroup","getVirtualDesktopApplicationGroupOutput"], () => require("./getVirtualDesktopApplicationGroup"));

export { GetVirtualDesktopHostPoolArgs, GetVirtualDesktopHostPoolResult, GetVirtualDesktopHostPoolOutputArgs } from "./getVirtualDesktopHostPool";
export const getVirtualDesktopHostPool: typeof import("./getVirtualDesktopHostPool").getVirtualDesktopHostPool = null as any;
export const getVirtualDesktopHostPoolOutput: typeof import("./getVirtualDesktopHostPool").getVirtualDesktopHostPoolOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualDesktopHostPool","getVirtualDesktopHostPoolOutput"], () => require("./getVirtualDesktopHostPool"));

export { GetVirtualDesktopWorkspaceArgs, GetVirtualDesktopWorkspaceResult, GetVirtualDesktopWorkspaceOutputArgs } from "./getVirtualDesktopWorkspace";
export const getVirtualDesktopWorkspace: typeof import("./getVirtualDesktopWorkspace").getVirtualDesktopWorkspace = null as any;
export const getVirtualDesktopWorkspaceOutput: typeof import("./getVirtualDesktopWorkspace").getVirtualDesktopWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualDesktopWorkspace","getVirtualDesktopWorkspaceOutput"], () => require("./getVirtualDesktopWorkspace"));

export { GetVirtualHubArgs, GetVirtualHubResult, GetVirtualHubOutputArgs } from "./getVirtualHub";
export const getVirtualHub: typeof import("./getVirtualHub").getVirtualHub = null as any;
export const getVirtualHubOutput: typeof import("./getVirtualHub").getVirtualHubOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualHub","getVirtualHubOutput"], () => require("./getVirtualHub"));

export { GetVirtualHubConnectionArgs, GetVirtualHubConnectionResult, GetVirtualHubConnectionOutputArgs } from "./getVirtualHubConnection";
export const getVirtualHubConnection: typeof import("./getVirtualHubConnection").getVirtualHubConnection = null as any;
export const getVirtualHubConnectionOutput: typeof import("./getVirtualHubConnection").getVirtualHubConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualHubConnection","getVirtualHubConnectionOutput"], () => require("./getVirtualHubConnection"));

export { GetVirtualHubRouteTableArgs, GetVirtualHubRouteTableResult, GetVirtualHubRouteTableOutputArgs } from "./getVirtualHubRouteTable";
export const getVirtualHubRouteTable: typeof import("./getVirtualHubRouteTable").getVirtualHubRouteTable = null as any;
export const getVirtualHubRouteTableOutput: typeof import("./getVirtualHubRouteTable").getVirtualHubRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualHubRouteTable","getVirtualHubRouteTableOutput"], () => require("./getVirtualHubRouteTable"));

export { GetVirtualMachineArgs, GetVirtualMachineResult, GetVirtualMachineOutputArgs } from "./getVirtualMachine";
export const getVirtualMachine: typeof import("./getVirtualMachine").getVirtualMachine = null as any;
export const getVirtualMachineOutput: typeof import("./getVirtualMachine").getVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualMachine","getVirtualMachineOutput"], () => require("./getVirtualMachine"));

export { GetVirtualMachineScaleSetArgs, GetVirtualMachineScaleSetResult, GetVirtualMachineScaleSetOutputArgs } from "./getVirtualMachineScaleSet";
export const getVirtualMachineScaleSet: typeof import("./getVirtualMachineScaleSet").getVirtualMachineScaleSet = null as any;
export const getVirtualMachineScaleSetOutput: typeof import("./getVirtualMachineScaleSet").getVirtualMachineScaleSetOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualMachineScaleSet","getVirtualMachineScaleSetOutput"], () => require("./getVirtualMachineScaleSet"));

export { GetVirtualNetworkArgs, GetVirtualNetworkResult, GetVirtualNetworkOutputArgs } from "./getVirtualNetwork";
export const getVirtualNetwork: typeof import("./getVirtualNetwork").getVirtualNetwork = null as any;
export const getVirtualNetworkOutput: typeof import("./getVirtualNetwork").getVirtualNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetwork","getVirtualNetworkOutput"], () => require("./getVirtualNetwork"));

export { GetVirtualNetworkGatewayArgs, GetVirtualNetworkGatewayResult, GetVirtualNetworkGatewayOutputArgs } from "./getVirtualNetworkGateway";
export const getVirtualNetworkGateway: typeof import("./getVirtualNetworkGateway").getVirtualNetworkGateway = null as any;
export const getVirtualNetworkGatewayOutput: typeof import("./getVirtualNetworkGateway").getVirtualNetworkGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetworkGateway","getVirtualNetworkGatewayOutput"], () => require("./getVirtualNetworkGateway"));

export { GetVirtualNetworkGatewayConnectionArgs, GetVirtualNetworkGatewayConnectionResult, GetVirtualNetworkGatewayConnectionOutputArgs } from "./getVirtualNetworkGatewayConnection";
export const getVirtualNetworkGatewayConnection: typeof import("./getVirtualNetworkGatewayConnection").getVirtualNetworkGatewayConnection = null as any;
export const getVirtualNetworkGatewayConnectionOutput: typeof import("./getVirtualNetworkGatewayConnection").getVirtualNetworkGatewayConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayConnection","getVirtualNetworkGatewayConnectionOutput"], () => require("./getVirtualNetworkGatewayConnection"));

export { GetVirtualWanArgs, GetVirtualWanResult, GetVirtualWanOutputArgs } from "./getVirtualWan";
export const getVirtualWan: typeof import("./getVirtualWan").getVirtualWan = null as any;
export const getVirtualWanOutput: typeof import("./getVirtualWan").getVirtualWanOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualWan","getVirtualWanOutput"], () => require("./getVirtualWan"));

export { GetVmwarePrivateCloudArgs, GetVmwarePrivateCloudResult, GetVmwarePrivateCloudOutputArgs } from "./getVmwarePrivateCloud";
export const getVmwarePrivateCloud: typeof import("./getVmwarePrivateCloud").getVmwarePrivateCloud = null as any;
export const getVmwarePrivateCloudOutput: typeof import("./getVmwarePrivateCloud").getVmwarePrivateCloudOutput = null as any;
utilities.lazyLoad(exports, ["getVmwarePrivateCloud","getVmwarePrivateCloudOutput"], () => require("./getVmwarePrivateCloud"));

export { GetVpnGatewayArgs, GetVpnGatewayResult, GetVpnGatewayOutputArgs } from "./getVpnGateway";
export const getVpnGateway: typeof import("./getVpnGateway").getVpnGateway = null as any;
export const getVpnGatewayOutput: typeof import("./getVpnGateway").getVpnGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGateway","getVpnGatewayOutput"], () => require("./getVpnGateway"));

export { GetWebApplicationFirewallPolicyArgs, GetWebApplicationFirewallPolicyResult, GetWebApplicationFirewallPolicyOutputArgs } from "./getWebApplicationFirewallPolicy";
export const getWebApplicationFirewallPolicy: typeof import("./getWebApplicationFirewallPolicy").getWebApplicationFirewallPolicy = null as any;
export const getWebApplicationFirewallPolicyOutput: typeof import("./getWebApplicationFirewallPolicy").getWebApplicationFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWebApplicationFirewallPolicy","getWebApplicationFirewallPolicyOutput"], () => require("./getWebApplicationFirewallPolicy"));

export { GetWebPubsubArgs, GetWebPubsubResult, GetWebPubsubOutputArgs } from "./getWebPubsub";
export const getWebPubsub: typeof import("./getWebPubsub").getWebPubsub = null as any;
export const getWebPubsubOutput: typeof import("./getWebPubsub").getWebPubsubOutput = null as any;
utilities.lazyLoad(exports, ["getWebPubsub","getWebPubsubOutput"], () => require("./getWebPubsub"));

export { GetWebPubsubPrivateLinkResourceArgs, GetWebPubsubPrivateLinkResourceResult, GetWebPubsubPrivateLinkResourceOutputArgs } from "./getWebPubsubPrivateLinkResource";
export const getWebPubsubPrivateLinkResource: typeof import("./getWebPubsubPrivateLinkResource").getWebPubsubPrivateLinkResource = null as any;
export const getWebPubsubPrivateLinkResourceOutput: typeof import("./getWebPubsubPrivateLinkResource").getWebPubsubPrivateLinkResourceOutput = null as any;
utilities.lazyLoad(exports, ["getWebPubsubPrivateLinkResource","getWebPubsubPrivateLinkResourceOutput"], () => require("./getWebPubsubPrivateLinkResource"));

export { GetWindowsFunctionAppArgs, GetWindowsFunctionAppResult, GetWindowsFunctionAppOutputArgs } from "./getWindowsFunctionApp";
export const getWindowsFunctionApp: typeof import("./getWindowsFunctionApp").getWindowsFunctionApp = null as any;
export const getWindowsFunctionAppOutput: typeof import("./getWindowsFunctionApp").getWindowsFunctionAppOutput = null as any;
utilities.lazyLoad(exports, ["getWindowsFunctionApp","getWindowsFunctionAppOutput"], () => require("./getWindowsFunctionApp"));

export { GetWindowsWebAppArgs, GetWindowsWebAppResult, GetWindowsWebAppOutputArgs } from "./getWindowsWebApp";
export const getWindowsWebApp: typeof import("./getWindowsWebApp").getWindowsWebApp = null as any;
export const getWindowsWebAppOutput: typeof import("./getWindowsWebApp").getWindowsWebAppOutput = null as any;
utilities.lazyLoad(exports, ["getWindowsWebApp","getWindowsWebAppOutput"], () => require("./getWindowsWebApp"));

export { GraphServicesAccountArgs, GraphServicesAccountState } from "./graphServicesAccount";
export type GraphServicesAccount = import("./graphServicesAccount").GraphServicesAccount;
export const GraphServicesAccount: typeof import("./graphServicesAccount").GraphServicesAccount = null as any;
utilities.lazyLoad(exports, ["GraphServicesAccount"], () => require("./graphServicesAccount"));

export { HdinsightHadoopClusterArgs, HdinsightHadoopClusterState } from "./hdinsightHadoopCluster";
export type HdinsightHadoopCluster = import("./hdinsightHadoopCluster").HdinsightHadoopCluster;
export const HdinsightHadoopCluster: typeof import("./hdinsightHadoopCluster").HdinsightHadoopCluster = null as any;
utilities.lazyLoad(exports, ["HdinsightHadoopCluster"], () => require("./hdinsightHadoopCluster"));

export { HdinsightHbaseClusterArgs, HdinsightHbaseClusterState } from "./hdinsightHbaseCluster";
export type HdinsightHbaseCluster = import("./hdinsightHbaseCluster").HdinsightHbaseCluster;
export const HdinsightHbaseCluster: typeof import("./hdinsightHbaseCluster").HdinsightHbaseCluster = null as any;
utilities.lazyLoad(exports, ["HdinsightHbaseCluster"], () => require("./hdinsightHbaseCluster"));

export { HdinsightInteractiveQueryClusterArgs, HdinsightInteractiveQueryClusterState } from "./hdinsightInteractiveQueryCluster";
export type HdinsightInteractiveQueryCluster = import("./hdinsightInteractiveQueryCluster").HdinsightInteractiveQueryCluster;
export const HdinsightInteractiveQueryCluster: typeof import("./hdinsightInteractiveQueryCluster").HdinsightInteractiveQueryCluster = null as any;
utilities.lazyLoad(exports, ["HdinsightInteractiveQueryCluster"], () => require("./hdinsightInteractiveQueryCluster"));

export { HdinsightKafkaClusterArgs, HdinsightKafkaClusterState } from "./hdinsightKafkaCluster";
export type HdinsightKafkaCluster = import("./hdinsightKafkaCluster").HdinsightKafkaCluster;
export const HdinsightKafkaCluster: typeof import("./hdinsightKafkaCluster").HdinsightKafkaCluster = null as any;
utilities.lazyLoad(exports, ["HdinsightKafkaCluster"], () => require("./hdinsightKafkaCluster"));

export { HdinsightSparkClusterArgs, HdinsightSparkClusterState } from "./hdinsightSparkCluster";
export type HdinsightSparkCluster = import("./hdinsightSparkCluster").HdinsightSparkCluster;
export const HdinsightSparkCluster: typeof import("./hdinsightSparkCluster").HdinsightSparkCluster = null as any;
utilities.lazyLoad(exports, ["HdinsightSparkCluster"], () => require("./hdinsightSparkCluster"));

export { HealthbotArgs, HealthbotState } from "./healthbot";
export type Healthbot = import("./healthbot").Healthbot;
export const Healthbot: typeof import("./healthbot").Healthbot = null as any;
utilities.lazyLoad(exports, ["Healthbot"], () => require("./healthbot"));

export { HealthcareDicomServiceArgs, HealthcareDicomServiceState } from "./healthcareDicomService";
export type HealthcareDicomService = import("./healthcareDicomService").HealthcareDicomService;
export const HealthcareDicomService: typeof import("./healthcareDicomService").HealthcareDicomService = null as any;
utilities.lazyLoad(exports, ["HealthcareDicomService"], () => require("./healthcareDicomService"));

export { HealthcareFhirServiceArgs, HealthcareFhirServiceState } from "./healthcareFhirService";
export type HealthcareFhirService = import("./healthcareFhirService").HealthcareFhirService;
export const HealthcareFhirService: typeof import("./healthcareFhirService").HealthcareFhirService = null as any;
utilities.lazyLoad(exports, ["HealthcareFhirService"], () => require("./healthcareFhirService"));

export { HealthcareMedtechServiceArgs, HealthcareMedtechServiceState } from "./healthcareMedtechService";
export type HealthcareMedtechService = import("./healthcareMedtechService").HealthcareMedtechService;
export const HealthcareMedtechService: typeof import("./healthcareMedtechService").HealthcareMedtechService = null as any;
utilities.lazyLoad(exports, ["HealthcareMedtechService"], () => require("./healthcareMedtechService"));

export { HealthcareMedtechServiceFhirDestinationArgs, HealthcareMedtechServiceFhirDestinationState } from "./healthcareMedtechServiceFhirDestination";
export type HealthcareMedtechServiceFhirDestination = import("./healthcareMedtechServiceFhirDestination").HealthcareMedtechServiceFhirDestination;
export const HealthcareMedtechServiceFhirDestination: typeof import("./healthcareMedtechServiceFhirDestination").HealthcareMedtechServiceFhirDestination = null as any;
utilities.lazyLoad(exports, ["HealthcareMedtechServiceFhirDestination"], () => require("./healthcareMedtechServiceFhirDestination"));

export { HealthcareServiceArgs, HealthcareServiceState } from "./healthcareService";
export type HealthcareService = import("./healthcareService").HealthcareService;
export const HealthcareService: typeof import("./healthcareService").HealthcareService = null as any;
utilities.lazyLoad(exports, ["HealthcareService"], () => require("./healthcareService"));

export { HealthcareWorkspaceArgs, HealthcareWorkspaceState } from "./healthcareWorkspace";
export type HealthcareWorkspace = import("./healthcareWorkspace").HealthcareWorkspace;
export const HealthcareWorkspace: typeof import("./healthcareWorkspace").HealthcareWorkspace = null as any;
utilities.lazyLoad(exports, ["HealthcareWorkspace"], () => require("./healthcareWorkspace"));

export { HpcCacheArgs, HpcCacheState } from "./hpcCache";
export type HpcCache = import("./hpcCache").HpcCache;
export const HpcCache: typeof import("./hpcCache").HpcCache = null as any;
utilities.lazyLoad(exports, ["HpcCache"], () => require("./hpcCache"));

export { HpcCacheAccessPolicyArgs, HpcCacheAccessPolicyState } from "./hpcCacheAccessPolicy";
export type HpcCacheAccessPolicy = import("./hpcCacheAccessPolicy").HpcCacheAccessPolicy;
export const HpcCacheAccessPolicy: typeof import("./hpcCacheAccessPolicy").HpcCacheAccessPolicy = null as any;
utilities.lazyLoad(exports, ["HpcCacheAccessPolicy"], () => require("./hpcCacheAccessPolicy"));

export { HpcCacheBlobNfsTargetArgs, HpcCacheBlobNfsTargetState } from "./hpcCacheBlobNfsTarget";
export type HpcCacheBlobNfsTarget = import("./hpcCacheBlobNfsTarget").HpcCacheBlobNfsTarget;
export const HpcCacheBlobNfsTarget: typeof import("./hpcCacheBlobNfsTarget").HpcCacheBlobNfsTarget = null as any;
utilities.lazyLoad(exports, ["HpcCacheBlobNfsTarget"], () => require("./hpcCacheBlobNfsTarget"));

export { HpcCacheBlobTargetArgs, HpcCacheBlobTargetState } from "./hpcCacheBlobTarget";
export type HpcCacheBlobTarget = import("./hpcCacheBlobTarget").HpcCacheBlobTarget;
export const HpcCacheBlobTarget: typeof import("./hpcCacheBlobTarget").HpcCacheBlobTarget = null as any;
utilities.lazyLoad(exports, ["HpcCacheBlobTarget"], () => require("./hpcCacheBlobTarget"));

export { HpcCacheNfsTargetArgs, HpcCacheNfsTargetState } from "./hpcCacheNfsTarget";
export type HpcCacheNfsTarget = import("./hpcCacheNfsTarget").HpcCacheNfsTarget;
export const HpcCacheNfsTarget: typeof import("./hpcCacheNfsTarget").HpcCacheNfsTarget = null as any;
utilities.lazyLoad(exports, ["HpcCacheNfsTarget"], () => require("./hpcCacheNfsTarget"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { IotSecurityDeviceGroupArgs, IotSecurityDeviceGroupState } from "./iotSecurityDeviceGroup";
export type IotSecurityDeviceGroup = import("./iotSecurityDeviceGroup").IotSecurityDeviceGroup;
export const IotSecurityDeviceGroup: typeof import("./iotSecurityDeviceGroup").IotSecurityDeviceGroup = null as any;
utilities.lazyLoad(exports, ["IotSecurityDeviceGroup"], () => require("./iotSecurityDeviceGroup"));

export { IotSecuritySolutionArgs, IotSecuritySolutionState } from "./iotSecuritySolution";
export type IotSecuritySolution = import("./iotSecuritySolution").IotSecuritySolution;
export const IotSecuritySolution: typeof import("./iotSecuritySolution").IotSecuritySolution = null as any;
utilities.lazyLoad(exports, ["IotSecuritySolution"], () => require("./iotSecuritySolution"));

export { IotcentralApplicationArgs, IotcentralApplicationState } from "./iotcentralApplication";
export type IotcentralApplication = import("./iotcentralApplication").IotcentralApplication;
export const IotcentralApplication: typeof import("./iotcentralApplication").IotcentralApplication = null as any;
utilities.lazyLoad(exports, ["IotcentralApplication"], () => require("./iotcentralApplication"));

export { IotcentralApplicationNetworkRuleSetArgs, IotcentralApplicationNetworkRuleSetState } from "./iotcentralApplicationNetworkRuleSet";
export type IotcentralApplicationNetworkRuleSet = import("./iotcentralApplicationNetworkRuleSet").IotcentralApplicationNetworkRuleSet;
export const IotcentralApplicationNetworkRuleSet: typeof import("./iotcentralApplicationNetworkRuleSet").IotcentralApplicationNetworkRuleSet = null as any;
utilities.lazyLoad(exports, ["IotcentralApplicationNetworkRuleSet"], () => require("./iotcentralApplicationNetworkRuleSet"));

export { IotcentralOrganizationArgs, IotcentralOrganizationState } from "./iotcentralOrganization";
export type IotcentralOrganization = import("./iotcentralOrganization").IotcentralOrganization;
export const IotcentralOrganization: typeof import("./iotcentralOrganization").IotcentralOrganization = null as any;
utilities.lazyLoad(exports, ["IotcentralOrganization"], () => require("./iotcentralOrganization"));

export { IothubArgs, IothubState } from "./iothub";
export type Iothub = import("./iothub").Iothub;
export const Iothub: typeof import("./iothub").Iothub = null as any;
utilities.lazyLoad(exports, ["Iothub"], () => require("./iothub"));

export { IothubCertificateArgs, IothubCertificateState } from "./iothubCertificate";
export type IothubCertificate = import("./iothubCertificate").IothubCertificate;
export const IothubCertificate: typeof import("./iothubCertificate").IothubCertificate = null as any;
utilities.lazyLoad(exports, ["IothubCertificate"], () => require("./iothubCertificate"));

export { IothubConsumerGroupArgs, IothubConsumerGroupState } from "./iothubConsumerGroup";
export type IothubConsumerGroup = import("./iothubConsumerGroup").IothubConsumerGroup;
export const IothubConsumerGroup: typeof import("./iothubConsumerGroup").IothubConsumerGroup = null as any;
utilities.lazyLoad(exports, ["IothubConsumerGroup"], () => require("./iothubConsumerGroup"));

export { IothubDeviceUpdateAccountArgs, IothubDeviceUpdateAccountState } from "./iothubDeviceUpdateAccount";
export type IothubDeviceUpdateAccount = import("./iothubDeviceUpdateAccount").IothubDeviceUpdateAccount;
export const IothubDeviceUpdateAccount: typeof import("./iothubDeviceUpdateAccount").IothubDeviceUpdateAccount = null as any;
utilities.lazyLoad(exports, ["IothubDeviceUpdateAccount"], () => require("./iothubDeviceUpdateAccount"));

export { IothubDeviceUpdateInstanceArgs, IothubDeviceUpdateInstanceState } from "./iothubDeviceUpdateInstance";
export type IothubDeviceUpdateInstance = import("./iothubDeviceUpdateInstance").IothubDeviceUpdateInstance;
export const IothubDeviceUpdateInstance: typeof import("./iothubDeviceUpdateInstance").IothubDeviceUpdateInstance = null as any;
utilities.lazyLoad(exports, ["IothubDeviceUpdateInstance"], () => require("./iothubDeviceUpdateInstance"));

export { IothubDpsArgs, IothubDpsState } from "./iothubDps";
export type IothubDps = import("./iothubDps").IothubDps;
export const IothubDps: typeof import("./iothubDps").IothubDps = null as any;
utilities.lazyLoad(exports, ["IothubDps"], () => require("./iothubDps"));

export { IothubDpsCertificateArgs, IothubDpsCertificateState } from "./iothubDpsCertificate";
export type IothubDpsCertificate = import("./iothubDpsCertificate").IothubDpsCertificate;
export const IothubDpsCertificate: typeof import("./iothubDpsCertificate").IothubDpsCertificate = null as any;
utilities.lazyLoad(exports, ["IothubDpsCertificate"], () => require("./iothubDpsCertificate"));

export { IothubDpsSharedAccessPolicyArgs, IothubDpsSharedAccessPolicyState } from "./iothubDpsSharedAccessPolicy";
export type IothubDpsSharedAccessPolicy = import("./iothubDpsSharedAccessPolicy").IothubDpsSharedAccessPolicy;
export const IothubDpsSharedAccessPolicy: typeof import("./iothubDpsSharedAccessPolicy").IothubDpsSharedAccessPolicy = null as any;
utilities.lazyLoad(exports, ["IothubDpsSharedAccessPolicy"], () => require("./iothubDpsSharedAccessPolicy"));

export { IothubEndpointCosmosdbAccountArgs, IothubEndpointCosmosdbAccountState } from "./iothubEndpointCosmosdbAccount";
export type IothubEndpointCosmosdbAccount = import("./iothubEndpointCosmosdbAccount").IothubEndpointCosmosdbAccount;
export const IothubEndpointCosmosdbAccount: typeof import("./iothubEndpointCosmosdbAccount").IothubEndpointCosmosdbAccount = null as any;
utilities.lazyLoad(exports, ["IothubEndpointCosmosdbAccount"], () => require("./iothubEndpointCosmosdbAccount"));

export { IothubEndpointEventhubArgs, IothubEndpointEventhubState } from "./iothubEndpointEventhub";
export type IothubEndpointEventhub = import("./iothubEndpointEventhub").IothubEndpointEventhub;
export const IothubEndpointEventhub: typeof import("./iothubEndpointEventhub").IothubEndpointEventhub = null as any;
utilities.lazyLoad(exports, ["IothubEndpointEventhub"], () => require("./iothubEndpointEventhub"));

export { IothubEndpointServicebusQueueArgs, IothubEndpointServicebusQueueState } from "./iothubEndpointServicebusQueue";
export type IothubEndpointServicebusQueue = import("./iothubEndpointServicebusQueue").IothubEndpointServicebusQueue;
export const IothubEndpointServicebusQueue: typeof import("./iothubEndpointServicebusQueue").IothubEndpointServicebusQueue = null as any;
utilities.lazyLoad(exports, ["IothubEndpointServicebusQueue"], () => require("./iothubEndpointServicebusQueue"));

export { IothubEndpointServicebusTopicArgs, IothubEndpointServicebusTopicState } from "./iothubEndpointServicebusTopic";
export type IothubEndpointServicebusTopic = import("./iothubEndpointServicebusTopic").IothubEndpointServicebusTopic;
export const IothubEndpointServicebusTopic: typeof import("./iothubEndpointServicebusTopic").IothubEndpointServicebusTopic = null as any;
utilities.lazyLoad(exports, ["IothubEndpointServicebusTopic"], () => require("./iothubEndpointServicebusTopic"));

export { IothubEndpointStorageContainerArgs, IothubEndpointStorageContainerState } from "./iothubEndpointStorageContainer";
export type IothubEndpointStorageContainer = import("./iothubEndpointStorageContainer").IothubEndpointStorageContainer;
export const IothubEndpointStorageContainer: typeof import("./iothubEndpointStorageContainer").IothubEndpointStorageContainer = null as any;
utilities.lazyLoad(exports, ["IothubEndpointStorageContainer"], () => require("./iothubEndpointStorageContainer"));

export { IothubEnrichmentArgs, IothubEnrichmentState } from "./iothubEnrichment";
export type IothubEnrichment = import("./iothubEnrichment").IothubEnrichment;
export const IothubEnrichment: typeof import("./iothubEnrichment").IothubEnrichment = null as any;
utilities.lazyLoad(exports, ["IothubEnrichment"], () => require("./iothubEnrichment"));

export { IothubFallbackRouteArgs, IothubFallbackRouteState } from "./iothubFallbackRoute";
export type IothubFallbackRoute = import("./iothubFallbackRoute").IothubFallbackRoute;
export const IothubFallbackRoute: typeof import("./iothubFallbackRoute").IothubFallbackRoute = null as any;
utilities.lazyLoad(exports, ["IothubFallbackRoute"], () => require("./iothubFallbackRoute"));

export { IothubFileUploadArgs, IothubFileUploadState } from "./iothubFileUpload";
export type IothubFileUpload = import("./iothubFileUpload").IothubFileUpload;
export const IothubFileUpload: typeof import("./iothubFileUpload").IothubFileUpload = null as any;
utilities.lazyLoad(exports, ["IothubFileUpload"], () => require("./iothubFileUpload"));

export { IothubRouteArgs, IothubRouteState } from "./iothubRoute";
export type IothubRoute = import("./iothubRoute").IothubRoute;
export const IothubRoute: typeof import("./iothubRoute").IothubRoute = null as any;
utilities.lazyLoad(exports, ["IothubRoute"], () => require("./iothubRoute"));

export { IothubSharedAccessPolicyArgs, IothubSharedAccessPolicyState } from "./iothubSharedAccessPolicy";
export type IothubSharedAccessPolicy = import("./iothubSharedAccessPolicy").IothubSharedAccessPolicy;
export const IothubSharedAccessPolicy: typeof import("./iothubSharedAccessPolicy").IothubSharedAccessPolicy = null as any;
utilities.lazyLoad(exports, ["IothubSharedAccessPolicy"], () => require("./iothubSharedAccessPolicy"));

export { IpGroupArgs, IpGroupState } from "./ipGroup";
export type IpGroup = import("./ipGroup").IpGroup;
export const IpGroup: typeof import("./ipGroup").IpGroup = null as any;
utilities.lazyLoad(exports, ["IpGroup"], () => require("./ipGroup"));

export { IpGroupCidrArgs, IpGroupCidrState } from "./ipGroupCidr";
export type IpGroupCidr = import("./ipGroupCidr").IpGroupCidr;
export const IpGroupCidr: typeof import("./ipGroupCidr").IpGroupCidr = null as any;
utilities.lazyLoad(exports, ["IpGroupCidr"], () => require("./ipGroupCidr"));

export { KeyVaultArgs, KeyVaultState } from "./keyVault";
export type KeyVault = import("./keyVault").KeyVault;
export const KeyVault: typeof import("./keyVault").KeyVault = null as any;
utilities.lazyLoad(exports, ["KeyVault"], () => require("./keyVault"));

export { KeyVaultAccessPolicyArgs, KeyVaultAccessPolicyState } from "./keyVaultAccessPolicy";
export type KeyVaultAccessPolicy = import("./keyVaultAccessPolicy").KeyVaultAccessPolicy;
export const KeyVaultAccessPolicy: typeof import("./keyVaultAccessPolicy").KeyVaultAccessPolicy = null as any;
utilities.lazyLoad(exports, ["KeyVaultAccessPolicy"], () => require("./keyVaultAccessPolicy"));

export { KeyVaultCertificateArgs, KeyVaultCertificateState } from "./keyVaultCertificate";
export type KeyVaultCertificate = import("./keyVaultCertificate").KeyVaultCertificate;
export const KeyVaultCertificate: typeof import("./keyVaultCertificate").KeyVaultCertificate = null as any;
utilities.lazyLoad(exports, ["KeyVaultCertificate"], () => require("./keyVaultCertificate"));

export { KeyVaultCertificateContactsArgs, KeyVaultCertificateContactsState } from "./keyVaultCertificateContacts";
export type KeyVaultCertificateContacts = import("./keyVaultCertificateContacts").KeyVaultCertificateContacts;
export const KeyVaultCertificateContacts: typeof import("./keyVaultCertificateContacts").KeyVaultCertificateContacts = null as any;
utilities.lazyLoad(exports, ["KeyVaultCertificateContacts"], () => require("./keyVaultCertificateContacts"));

export { KeyVaultCertificateIssuerArgs, KeyVaultCertificateIssuerState } from "./keyVaultCertificateIssuer";
export type KeyVaultCertificateIssuer = import("./keyVaultCertificateIssuer").KeyVaultCertificateIssuer;
export const KeyVaultCertificateIssuer: typeof import("./keyVaultCertificateIssuer").KeyVaultCertificateIssuer = null as any;
utilities.lazyLoad(exports, ["KeyVaultCertificateIssuer"], () => require("./keyVaultCertificateIssuer"));

export { KeyVaultKeyArgs, KeyVaultKeyState } from "./keyVaultKey";
export type KeyVaultKey = import("./keyVaultKey").KeyVaultKey;
export const KeyVaultKey: typeof import("./keyVaultKey").KeyVaultKey = null as any;
utilities.lazyLoad(exports, ["KeyVaultKey"], () => require("./keyVaultKey"));

export { KeyVaultManagedHardwareSecurityModuleArgs, KeyVaultManagedHardwareSecurityModuleState } from "./keyVaultManagedHardwareSecurityModule";
export type KeyVaultManagedHardwareSecurityModule = import("./keyVaultManagedHardwareSecurityModule").KeyVaultManagedHardwareSecurityModule;
export const KeyVaultManagedHardwareSecurityModule: typeof import("./keyVaultManagedHardwareSecurityModule").KeyVaultManagedHardwareSecurityModule = null as any;
utilities.lazyLoad(exports, ["KeyVaultManagedHardwareSecurityModule"], () => require("./keyVaultManagedHardwareSecurityModule"));

export { KeyVaultManagedHardwareSecurityModuleKeyArgs, KeyVaultManagedHardwareSecurityModuleKeyState } from "./keyVaultManagedHardwareSecurityModuleKey";
export type KeyVaultManagedHardwareSecurityModuleKey = import("./keyVaultManagedHardwareSecurityModuleKey").KeyVaultManagedHardwareSecurityModuleKey;
export const KeyVaultManagedHardwareSecurityModuleKey: typeof import("./keyVaultManagedHardwareSecurityModuleKey").KeyVaultManagedHardwareSecurityModuleKey = null as any;
utilities.lazyLoad(exports, ["KeyVaultManagedHardwareSecurityModuleKey"], () => require("./keyVaultManagedHardwareSecurityModuleKey"));

export { KeyVaultManagedHardwareSecurityModuleRoleAssignmentArgs, KeyVaultManagedHardwareSecurityModuleRoleAssignmentState } from "./keyVaultManagedHardwareSecurityModuleRoleAssignment";
export type KeyVaultManagedHardwareSecurityModuleRoleAssignment = import("./keyVaultManagedHardwareSecurityModuleRoleAssignment").KeyVaultManagedHardwareSecurityModuleRoleAssignment;
export const KeyVaultManagedHardwareSecurityModuleRoleAssignment: typeof import("./keyVaultManagedHardwareSecurityModuleRoleAssignment").KeyVaultManagedHardwareSecurityModuleRoleAssignment = null as any;
utilities.lazyLoad(exports, ["KeyVaultManagedHardwareSecurityModuleRoleAssignment"], () => require("./keyVaultManagedHardwareSecurityModuleRoleAssignment"));

export { KeyVaultManagedHardwareSecurityModuleRoleDefinitionArgs, KeyVaultManagedHardwareSecurityModuleRoleDefinitionState } from "./keyVaultManagedHardwareSecurityModuleRoleDefinition";
export type KeyVaultManagedHardwareSecurityModuleRoleDefinition = import("./keyVaultManagedHardwareSecurityModuleRoleDefinition").KeyVaultManagedHardwareSecurityModuleRoleDefinition;
export const KeyVaultManagedHardwareSecurityModuleRoleDefinition: typeof import("./keyVaultManagedHardwareSecurityModuleRoleDefinition").KeyVaultManagedHardwareSecurityModuleRoleDefinition = null as any;
utilities.lazyLoad(exports, ["KeyVaultManagedHardwareSecurityModuleRoleDefinition"], () => require("./keyVaultManagedHardwareSecurityModuleRoleDefinition"));

export { KeyVaultManagedStorageAccountArgs, KeyVaultManagedStorageAccountState } from "./keyVaultManagedStorageAccount";
export type KeyVaultManagedStorageAccount = import("./keyVaultManagedStorageAccount").KeyVaultManagedStorageAccount;
export const KeyVaultManagedStorageAccount: typeof import("./keyVaultManagedStorageAccount").KeyVaultManagedStorageAccount = null as any;
utilities.lazyLoad(exports, ["KeyVaultManagedStorageAccount"], () => require("./keyVaultManagedStorageAccount"));

export { KeyVaultManagedStorageAccountSasTokenDefinitionArgs, KeyVaultManagedStorageAccountSasTokenDefinitionState } from "./keyVaultManagedStorageAccountSasTokenDefinition";
export type KeyVaultManagedStorageAccountSasTokenDefinition = import("./keyVaultManagedStorageAccountSasTokenDefinition").KeyVaultManagedStorageAccountSasTokenDefinition;
export const KeyVaultManagedStorageAccountSasTokenDefinition: typeof import("./keyVaultManagedStorageAccountSasTokenDefinition").KeyVaultManagedStorageAccountSasTokenDefinition = null as any;
utilities.lazyLoad(exports, ["KeyVaultManagedStorageAccountSasTokenDefinition"], () => require("./keyVaultManagedStorageAccountSasTokenDefinition"));

export { KeyVaultSecretArgs, KeyVaultSecretState } from "./keyVaultSecret";
export type KeyVaultSecret = import("./keyVaultSecret").KeyVaultSecret;
export const KeyVaultSecret: typeof import("./keyVaultSecret").KeyVaultSecret = null as any;
utilities.lazyLoad(exports, ["KeyVaultSecret"], () => require("./keyVaultSecret"));

export { KubernetesClusterArgs, KubernetesClusterState } from "./kubernetesCluster";
export type KubernetesCluster = import("./kubernetesCluster").KubernetesCluster;
export const KubernetesCluster: typeof import("./kubernetesCluster").KubernetesCluster = null as any;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));

export { KubernetesClusterExtensionArgs, KubernetesClusterExtensionState } from "./kubernetesClusterExtension";
export type KubernetesClusterExtension = import("./kubernetesClusterExtension").KubernetesClusterExtension;
export const KubernetesClusterExtension: typeof import("./kubernetesClusterExtension").KubernetesClusterExtension = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterExtension"], () => require("./kubernetesClusterExtension"));

export { KubernetesClusterNodePoolArgs, KubernetesClusterNodePoolState } from "./kubernetesClusterNodePool";
export type KubernetesClusterNodePool = import("./kubernetesClusterNodePool").KubernetesClusterNodePool;
export const KubernetesClusterNodePool: typeof import("./kubernetesClusterNodePool").KubernetesClusterNodePool = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterNodePool"], () => require("./kubernetesClusterNodePool"));

export { KubernetesClusterTrustedAccessRoleBindingArgs, KubernetesClusterTrustedAccessRoleBindingState } from "./kubernetesClusterTrustedAccessRoleBinding";
export type KubernetesClusterTrustedAccessRoleBinding = import("./kubernetesClusterTrustedAccessRoleBinding").KubernetesClusterTrustedAccessRoleBinding;
export const KubernetesClusterTrustedAccessRoleBinding: typeof import("./kubernetesClusterTrustedAccessRoleBinding").KubernetesClusterTrustedAccessRoleBinding = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterTrustedAccessRoleBinding"], () => require("./kubernetesClusterTrustedAccessRoleBinding"));

export { KubernetesFleetManagerArgs, KubernetesFleetManagerState } from "./kubernetesFleetManager";
export type KubernetesFleetManager = import("./kubernetesFleetManager").KubernetesFleetManager;
export const KubernetesFleetManager: typeof import("./kubernetesFleetManager").KubernetesFleetManager = null as any;
utilities.lazyLoad(exports, ["KubernetesFleetManager"], () => require("./kubernetesFleetManager"));

export { KubernetesFleetMemberArgs, KubernetesFleetMemberState } from "./kubernetesFleetMember";
export type KubernetesFleetMember = import("./kubernetesFleetMember").KubernetesFleetMember;
export const KubernetesFleetMember: typeof import("./kubernetesFleetMember").KubernetesFleetMember = null as any;
utilities.lazyLoad(exports, ["KubernetesFleetMember"], () => require("./kubernetesFleetMember"));

export { KubernetesFleetUpdateRunArgs, KubernetesFleetUpdateRunState } from "./kubernetesFleetUpdateRun";
export type KubernetesFleetUpdateRun = import("./kubernetesFleetUpdateRun").KubernetesFleetUpdateRun;
export const KubernetesFleetUpdateRun: typeof import("./kubernetesFleetUpdateRun").KubernetesFleetUpdateRun = null as any;
utilities.lazyLoad(exports, ["KubernetesFleetUpdateRun"], () => require("./kubernetesFleetUpdateRun"));

export { KubernetesFleetUpdateStrategyArgs, KubernetesFleetUpdateStrategyState } from "./kubernetesFleetUpdateStrategy";
export type KubernetesFleetUpdateStrategy = import("./kubernetesFleetUpdateStrategy").KubernetesFleetUpdateStrategy;
export const KubernetesFleetUpdateStrategy: typeof import("./kubernetesFleetUpdateStrategy").KubernetesFleetUpdateStrategy = null as any;
utilities.lazyLoad(exports, ["KubernetesFleetUpdateStrategy"], () => require("./kubernetesFleetUpdateStrategy"));

export { KubernetesFluxConfigurationArgs, KubernetesFluxConfigurationState } from "./kubernetesFluxConfiguration";
export type KubernetesFluxConfiguration = import("./kubernetesFluxConfiguration").KubernetesFluxConfiguration;
export const KubernetesFluxConfiguration: typeof import("./kubernetesFluxConfiguration").KubernetesFluxConfiguration = null as any;
utilities.lazyLoad(exports, ["KubernetesFluxConfiguration"], () => require("./kubernetesFluxConfiguration"));

export { KustoAttachedDatabaseConfigurationArgs, KustoAttachedDatabaseConfigurationState } from "./kustoAttachedDatabaseConfiguration";
export type KustoAttachedDatabaseConfiguration = import("./kustoAttachedDatabaseConfiguration").KustoAttachedDatabaseConfiguration;
export const KustoAttachedDatabaseConfiguration: typeof import("./kustoAttachedDatabaseConfiguration").KustoAttachedDatabaseConfiguration = null as any;
utilities.lazyLoad(exports, ["KustoAttachedDatabaseConfiguration"], () => require("./kustoAttachedDatabaseConfiguration"));

export { KustoClusterArgs, KustoClusterState } from "./kustoCluster";
export type KustoCluster = import("./kustoCluster").KustoCluster;
export const KustoCluster: typeof import("./kustoCluster").KustoCluster = null as any;
utilities.lazyLoad(exports, ["KustoCluster"], () => require("./kustoCluster"));

export { KustoClusterCustomerManagedKeyArgs, KustoClusterCustomerManagedKeyState } from "./kustoClusterCustomerManagedKey";
export type KustoClusterCustomerManagedKey = import("./kustoClusterCustomerManagedKey").KustoClusterCustomerManagedKey;
export const KustoClusterCustomerManagedKey: typeof import("./kustoClusterCustomerManagedKey").KustoClusterCustomerManagedKey = null as any;
utilities.lazyLoad(exports, ["KustoClusterCustomerManagedKey"], () => require("./kustoClusterCustomerManagedKey"));

export { KustoClusterManagedPrivateEndpointArgs, KustoClusterManagedPrivateEndpointState } from "./kustoClusterManagedPrivateEndpoint";
export type KustoClusterManagedPrivateEndpoint = import("./kustoClusterManagedPrivateEndpoint").KustoClusterManagedPrivateEndpoint;
export const KustoClusterManagedPrivateEndpoint: typeof import("./kustoClusterManagedPrivateEndpoint").KustoClusterManagedPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["KustoClusterManagedPrivateEndpoint"], () => require("./kustoClusterManagedPrivateEndpoint"));

export { KustoClusterPrincipalAssignmentArgs, KustoClusterPrincipalAssignmentState } from "./kustoClusterPrincipalAssignment";
export type KustoClusterPrincipalAssignment = import("./kustoClusterPrincipalAssignment").KustoClusterPrincipalAssignment;
export const KustoClusterPrincipalAssignment: typeof import("./kustoClusterPrincipalAssignment").KustoClusterPrincipalAssignment = null as any;
utilities.lazyLoad(exports, ["KustoClusterPrincipalAssignment"], () => require("./kustoClusterPrincipalAssignment"));

export { KustoCosmosdbDataConnectionArgs, KustoCosmosdbDataConnectionState } from "./kustoCosmosdbDataConnection";
export type KustoCosmosdbDataConnection = import("./kustoCosmosdbDataConnection").KustoCosmosdbDataConnection;
export const KustoCosmosdbDataConnection: typeof import("./kustoCosmosdbDataConnection").KustoCosmosdbDataConnection = null as any;
utilities.lazyLoad(exports, ["KustoCosmosdbDataConnection"], () => require("./kustoCosmosdbDataConnection"));

export { KustoDatabaseArgs, KustoDatabaseState } from "./kustoDatabase";
export type KustoDatabase = import("./kustoDatabase").KustoDatabase;
export const KustoDatabase: typeof import("./kustoDatabase").KustoDatabase = null as any;
utilities.lazyLoad(exports, ["KustoDatabase"], () => require("./kustoDatabase"));

export { KustoDatabasePrincipalAssignmentArgs, KustoDatabasePrincipalAssignmentState } from "./kustoDatabasePrincipalAssignment";
export type KustoDatabasePrincipalAssignment = import("./kustoDatabasePrincipalAssignment").KustoDatabasePrincipalAssignment;
export const KustoDatabasePrincipalAssignment: typeof import("./kustoDatabasePrincipalAssignment").KustoDatabasePrincipalAssignment = null as any;
utilities.lazyLoad(exports, ["KustoDatabasePrincipalAssignment"], () => require("./kustoDatabasePrincipalAssignment"));

export { KustoEventgridDataConnectionArgs, KustoEventgridDataConnectionState } from "./kustoEventgridDataConnection";
export type KustoEventgridDataConnection = import("./kustoEventgridDataConnection").KustoEventgridDataConnection;
export const KustoEventgridDataConnection: typeof import("./kustoEventgridDataConnection").KustoEventgridDataConnection = null as any;
utilities.lazyLoad(exports, ["KustoEventgridDataConnection"], () => require("./kustoEventgridDataConnection"));

export { KustoEventhubDataConnectionArgs, KustoEventhubDataConnectionState } from "./kustoEventhubDataConnection";
export type KustoEventhubDataConnection = import("./kustoEventhubDataConnection").KustoEventhubDataConnection;
export const KustoEventhubDataConnection: typeof import("./kustoEventhubDataConnection").KustoEventhubDataConnection = null as any;
utilities.lazyLoad(exports, ["KustoEventhubDataConnection"], () => require("./kustoEventhubDataConnection"));

export { KustoIothubDataConnectionArgs, KustoIothubDataConnectionState } from "./kustoIothubDataConnection";
export type KustoIothubDataConnection = import("./kustoIothubDataConnection").KustoIothubDataConnection;
export const KustoIothubDataConnection: typeof import("./kustoIothubDataConnection").KustoIothubDataConnection = null as any;
utilities.lazyLoad(exports, ["KustoIothubDataConnection"], () => require("./kustoIothubDataConnection"));

export { KustoScriptArgs, KustoScriptState } from "./kustoScript";
export type KustoScript = import("./kustoScript").KustoScript;
export const KustoScript: typeof import("./kustoScript").KustoScript = null as any;
utilities.lazyLoad(exports, ["KustoScript"], () => require("./kustoScript"));

export { LbArgs, LbState } from "./lb";
export type Lb = import("./lb").Lb;
export const Lb: typeof import("./lb").Lb = null as any;
utilities.lazyLoad(exports, ["Lb"], () => require("./lb"));

export { LbBackendAddressPoolArgs, LbBackendAddressPoolState } from "./lbBackendAddressPool";
export type LbBackendAddressPool = import("./lbBackendAddressPool").LbBackendAddressPool;
export const LbBackendAddressPool: typeof import("./lbBackendAddressPool").LbBackendAddressPool = null as any;
utilities.lazyLoad(exports, ["LbBackendAddressPool"], () => require("./lbBackendAddressPool"));

export { LbBackendAddressPoolAddressArgs, LbBackendAddressPoolAddressState } from "./lbBackendAddressPoolAddress";
export type LbBackendAddressPoolAddress = import("./lbBackendAddressPoolAddress").LbBackendAddressPoolAddress;
export const LbBackendAddressPoolAddress: typeof import("./lbBackendAddressPoolAddress").LbBackendAddressPoolAddress = null as any;
utilities.lazyLoad(exports, ["LbBackendAddressPoolAddress"], () => require("./lbBackendAddressPoolAddress"));

export { LbNatPoolArgs, LbNatPoolState } from "./lbNatPool";
export type LbNatPool = import("./lbNatPool").LbNatPool;
export const LbNatPool: typeof import("./lbNatPool").LbNatPool = null as any;
utilities.lazyLoad(exports, ["LbNatPool"], () => require("./lbNatPool"));

export { LbNatRuleArgs, LbNatRuleState } from "./lbNatRule";
export type LbNatRule = import("./lbNatRule").LbNatRule;
export const LbNatRule: typeof import("./lbNatRule").LbNatRule = null as any;
utilities.lazyLoad(exports, ["LbNatRule"], () => require("./lbNatRule"));

export { LbOutboundRuleArgs, LbOutboundRuleState } from "./lbOutboundRule";
export type LbOutboundRule = import("./lbOutboundRule").LbOutboundRule;
export const LbOutboundRule: typeof import("./lbOutboundRule").LbOutboundRule = null as any;
utilities.lazyLoad(exports, ["LbOutboundRule"], () => require("./lbOutboundRule"));

export { LbProbeArgs, LbProbeState } from "./lbProbe";
export type LbProbe = import("./lbProbe").LbProbe;
export const LbProbe: typeof import("./lbProbe").LbProbe = null as any;
utilities.lazyLoad(exports, ["LbProbe"], () => require("./lbProbe"));

export { LbRuleArgs, LbRuleState } from "./lbRule";
export type LbRule = import("./lbRule").LbRule;
export const LbRule: typeof import("./lbRule").LbRule = null as any;
utilities.lazyLoad(exports, ["LbRule"], () => require("./lbRule"));

export { LighthouseAssignmentArgs, LighthouseAssignmentState } from "./lighthouseAssignment";
export type LighthouseAssignment = import("./lighthouseAssignment").LighthouseAssignment;
export const LighthouseAssignment: typeof import("./lighthouseAssignment").LighthouseAssignment = null as any;
utilities.lazyLoad(exports, ["LighthouseAssignment"], () => require("./lighthouseAssignment"));

export { LighthouseDefinitionArgs, LighthouseDefinitionState } from "./lighthouseDefinition";
export type LighthouseDefinition = import("./lighthouseDefinition").LighthouseDefinition;
export const LighthouseDefinition: typeof import("./lighthouseDefinition").LighthouseDefinition = null as any;
utilities.lazyLoad(exports, ["LighthouseDefinition"], () => require("./lighthouseDefinition"));

export { LinuxFunctionAppArgs, LinuxFunctionAppState } from "./linuxFunctionApp";
export type LinuxFunctionApp = import("./linuxFunctionApp").LinuxFunctionApp;
export const LinuxFunctionApp: typeof import("./linuxFunctionApp").LinuxFunctionApp = null as any;
utilities.lazyLoad(exports, ["LinuxFunctionApp"], () => require("./linuxFunctionApp"));

export { LinuxFunctionAppSlotArgs, LinuxFunctionAppSlotState } from "./linuxFunctionAppSlot";
export type LinuxFunctionAppSlot = import("./linuxFunctionAppSlot").LinuxFunctionAppSlot;
export const LinuxFunctionAppSlot: typeof import("./linuxFunctionAppSlot").LinuxFunctionAppSlot = null as any;
utilities.lazyLoad(exports, ["LinuxFunctionAppSlot"], () => require("./linuxFunctionAppSlot"));

export { LinuxVirtualMachineArgs, LinuxVirtualMachineState } from "./linuxVirtualMachine";
export type LinuxVirtualMachine = import("./linuxVirtualMachine").LinuxVirtualMachine;
export const LinuxVirtualMachine: typeof import("./linuxVirtualMachine").LinuxVirtualMachine = null as any;
utilities.lazyLoad(exports, ["LinuxVirtualMachine"], () => require("./linuxVirtualMachine"));

export { LinuxVirtualMachineScaleSetArgs, LinuxVirtualMachineScaleSetState } from "./linuxVirtualMachineScaleSet";
export type LinuxVirtualMachineScaleSet = import("./linuxVirtualMachineScaleSet").LinuxVirtualMachineScaleSet;
export const LinuxVirtualMachineScaleSet: typeof import("./linuxVirtualMachineScaleSet").LinuxVirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["LinuxVirtualMachineScaleSet"], () => require("./linuxVirtualMachineScaleSet"));

export { LinuxWebAppArgs, LinuxWebAppState } from "./linuxWebApp";
export type LinuxWebApp = import("./linuxWebApp").LinuxWebApp;
export const LinuxWebApp: typeof import("./linuxWebApp").LinuxWebApp = null as any;
utilities.lazyLoad(exports, ["LinuxWebApp"], () => require("./linuxWebApp"));

export { LinuxWebAppSlotArgs, LinuxWebAppSlotState } from "./linuxWebAppSlot";
export type LinuxWebAppSlot = import("./linuxWebAppSlot").LinuxWebAppSlot;
export const LinuxWebAppSlot: typeof import("./linuxWebAppSlot").LinuxWebAppSlot = null as any;
utilities.lazyLoad(exports, ["LinuxWebAppSlot"], () => require("./linuxWebAppSlot"));

export { LoadTestArgs, LoadTestState } from "./loadTest";
export type LoadTest = import("./loadTest").LoadTest;
export const LoadTest: typeof import("./loadTest").LoadTest = null as any;
utilities.lazyLoad(exports, ["LoadTest"], () => require("./loadTest"));

export { LocalNetworkGatewayArgs, LocalNetworkGatewayState } from "./localNetworkGateway";
export type LocalNetworkGateway = import("./localNetworkGateway").LocalNetworkGateway;
export const LocalNetworkGateway: typeof import("./localNetworkGateway").LocalNetworkGateway = null as any;
utilities.lazyLoad(exports, ["LocalNetworkGateway"], () => require("./localNetworkGateway"));

export { LogAnalyticsClusterArgs, LogAnalyticsClusterState } from "./logAnalyticsCluster";
export type LogAnalyticsCluster = import("./logAnalyticsCluster").LogAnalyticsCluster;
export const LogAnalyticsCluster: typeof import("./logAnalyticsCluster").LogAnalyticsCluster = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsCluster"], () => require("./logAnalyticsCluster"));

export { LogAnalyticsClusterCustomerManagedKeyArgs, LogAnalyticsClusterCustomerManagedKeyState } from "./logAnalyticsClusterCustomerManagedKey";
export type LogAnalyticsClusterCustomerManagedKey = import("./logAnalyticsClusterCustomerManagedKey").LogAnalyticsClusterCustomerManagedKey;
export const LogAnalyticsClusterCustomerManagedKey: typeof import("./logAnalyticsClusterCustomerManagedKey").LogAnalyticsClusterCustomerManagedKey = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsClusterCustomerManagedKey"], () => require("./logAnalyticsClusterCustomerManagedKey"));

export { LogAnalyticsDataExportRuleArgs, LogAnalyticsDataExportRuleState } from "./logAnalyticsDataExportRule";
export type LogAnalyticsDataExportRule = import("./logAnalyticsDataExportRule").LogAnalyticsDataExportRule;
export const LogAnalyticsDataExportRule: typeof import("./logAnalyticsDataExportRule").LogAnalyticsDataExportRule = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsDataExportRule"], () => require("./logAnalyticsDataExportRule"));

export { LogAnalyticsDatasourceWindowsEventArgs, LogAnalyticsDatasourceWindowsEventState } from "./logAnalyticsDatasourceWindowsEvent";
export type LogAnalyticsDatasourceWindowsEvent = import("./logAnalyticsDatasourceWindowsEvent").LogAnalyticsDatasourceWindowsEvent;
export const LogAnalyticsDatasourceWindowsEvent: typeof import("./logAnalyticsDatasourceWindowsEvent").LogAnalyticsDatasourceWindowsEvent = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsDatasourceWindowsEvent"], () => require("./logAnalyticsDatasourceWindowsEvent"));

export { LogAnalyticsDatasourceWindowsPerformanceCounterArgs, LogAnalyticsDatasourceWindowsPerformanceCounterState } from "./logAnalyticsDatasourceWindowsPerformanceCounter";
export type LogAnalyticsDatasourceWindowsPerformanceCounter = import("./logAnalyticsDatasourceWindowsPerformanceCounter").LogAnalyticsDatasourceWindowsPerformanceCounter;
export const LogAnalyticsDatasourceWindowsPerformanceCounter: typeof import("./logAnalyticsDatasourceWindowsPerformanceCounter").LogAnalyticsDatasourceWindowsPerformanceCounter = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsDatasourceWindowsPerformanceCounter"], () => require("./logAnalyticsDatasourceWindowsPerformanceCounter"));

export { LogAnalyticsLinkedServiceArgs, LogAnalyticsLinkedServiceState } from "./logAnalyticsLinkedService";
export type LogAnalyticsLinkedService = import("./logAnalyticsLinkedService").LogAnalyticsLinkedService;
export const LogAnalyticsLinkedService: typeof import("./logAnalyticsLinkedService").LogAnalyticsLinkedService = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsLinkedService"], () => require("./logAnalyticsLinkedService"));

export { LogAnalyticsLinkedStorageAccountArgs, LogAnalyticsLinkedStorageAccountState } from "./logAnalyticsLinkedStorageAccount";
export type LogAnalyticsLinkedStorageAccount = import("./logAnalyticsLinkedStorageAccount").LogAnalyticsLinkedStorageAccount;
export const LogAnalyticsLinkedStorageAccount: typeof import("./logAnalyticsLinkedStorageAccount").LogAnalyticsLinkedStorageAccount = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsLinkedStorageAccount"], () => require("./logAnalyticsLinkedStorageAccount"));

export { LogAnalyticsQueryPackArgs, LogAnalyticsQueryPackState } from "./logAnalyticsQueryPack";
export type LogAnalyticsQueryPack = import("./logAnalyticsQueryPack").LogAnalyticsQueryPack;
export const LogAnalyticsQueryPack: typeof import("./logAnalyticsQueryPack").LogAnalyticsQueryPack = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsQueryPack"], () => require("./logAnalyticsQueryPack"));

export { LogAnalyticsQueryPackQueryArgs, LogAnalyticsQueryPackQueryState } from "./logAnalyticsQueryPackQuery";
export type LogAnalyticsQueryPackQuery = import("./logAnalyticsQueryPackQuery").LogAnalyticsQueryPackQuery;
export const LogAnalyticsQueryPackQuery: typeof import("./logAnalyticsQueryPackQuery").LogAnalyticsQueryPackQuery = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsQueryPackQuery"], () => require("./logAnalyticsQueryPackQuery"));

export { LogAnalyticsSavedSearchArgs, LogAnalyticsSavedSearchState } from "./logAnalyticsSavedSearch";
export type LogAnalyticsSavedSearch = import("./logAnalyticsSavedSearch").LogAnalyticsSavedSearch;
export const LogAnalyticsSavedSearch: typeof import("./logAnalyticsSavedSearch").LogAnalyticsSavedSearch = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsSavedSearch"], () => require("./logAnalyticsSavedSearch"));

export { LogAnalyticsSolutionArgs, LogAnalyticsSolutionState } from "./logAnalyticsSolution";
export type LogAnalyticsSolution = import("./logAnalyticsSolution").LogAnalyticsSolution;
export const LogAnalyticsSolution: typeof import("./logAnalyticsSolution").LogAnalyticsSolution = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsSolution"], () => require("./logAnalyticsSolution"));

export { LogAnalyticsStorageInsightsArgs, LogAnalyticsStorageInsightsState } from "./logAnalyticsStorageInsights";
export type LogAnalyticsStorageInsights = import("./logAnalyticsStorageInsights").LogAnalyticsStorageInsights;
export const LogAnalyticsStorageInsights: typeof import("./logAnalyticsStorageInsights").LogAnalyticsStorageInsights = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsStorageInsights"], () => require("./logAnalyticsStorageInsights"));

export { LogAnalyticsWorkspaceArgs, LogAnalyticsWorkspaceState } from "./logAnalyticsWorkspace";
export type LogAnalyticsWorkspace = import("./logAnalyticsWorkspace").LogAnalyticsWorkspace;
export const LogAnalyticsWorkspace: typeof import("./logAnalyticsWorkspace").LogAnalyticsWorkspace = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsWorkspace"], () => require("./logAnalyticsWorkspace"));

export { LogAnalyticsWorkspaceTableArgs, LogAnalyticsWorkspaceTableState } from "./logAnalyticsWorkspaceTable";
export type LogAnalyticsWorkspaceTable = import("./logAnalyticsWorkspaceTable").LogAnalyticsWorkspaceTable;
export const LogAnalyticsWorkspaceTable: typeof import("./logAnalyticsWorkspaceTable").LogAnalyticsWorkspaceTable = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsWorkspaceTable"], () => require("./logAnalyticsWorkspaceTable"));

export { LogicAppActionCustomArgs, LogicAppActionCustomState } from "./logicAppActionCustom";
export type LogicAppActionCustom = import("./logicAppActionCustom").LogicAppActionCustom;
export const LogicAppActionCustom: typeof import("./logicAppActionCustom").LogicAppActionCustom = null as any;
utilities.lazyLoad(exports, ["LogicAppActionCustom"], () => require("./logicAppActionCustom"));

export { LogicAppActionHttpArgs, LogicAppActionHttpState } from "./logicAppActionHttp";
export type LogicAppActionHttp = import("./logicAppActionHttp").LogicAppActionHttp;
export const LogicAppActionHttp: typeof import("./logicAppActionHttp").LogicAppActionHttp = null as any;
utilities.lazyLoad(exports, ["LogicAppActionHttp"], () => require("./logicAppActionHttp"));

export { LogicAppIntegrationAccountArgs, LogicAppIntegrationAccountState } from "./logicAppIntegrationAccount";
export type LogicAppIntegrationAccount = import("./logicAppIntegrationAccount").LogicAppIntegrationAccount;
export const LogicAppIntegrationAccount: typeof import("./logicAppIntegrationAccount").LogicAppIntegrationAccount = null as any;
utilities.lazyLoad(exports, ["LogicAppIntegrationAccount"], () => require("./logicAppIntegrationAccount"));

export { LogicAppIntegrationAccountAgreementArgs, LogicAppIntegrationAccountAgreementState } from "./logicAppIntegrationAccountAgreement";
export type LogicAppIntegrationAccountAgreement = import("./logicAppIntegrationAccountAgreement").LogicAppIntegrationAccountAgreement;
export const LogicAppIntegrationAccountAgreement: typeof import("./logicAppIntegrationAccountAgreement").LogicAppIntegrationAccountAgreement = null as any;
utilities.lazyLoad(exports, ["LogicAppIntegrationAccountAgreement"], () => require("./logicAppIntegrationAccountAgreement"));

export { LogicAppIntegrationAccountAssemblyArgs, LogicAppIntegrationAccountAssemblyState } from "./logicAppIntegrationAccountAssembly";
export type LogicAppIntegrationAccountAssembly = import("./logicAppIntegrationAccountAssembly").LogicAppIntegrationAccountAssembly;
export const LogicAppIntegrationAccountAssembly: typeof import("./logicAppIntegrationAccountAssembly").LogicAppIntegrationAccountAssembly = null as any;
utilities.lazyLoad(exports, ["LogicAppIntegrationAccountAssembly"], () => require("./logicAppIntegrationAccountAssembly"));

export { LogicAppIntegrationAccountBatchConfigurationArgs, LogicAppIntegrationAccountBatchConfigurationState } from "./logicAppIntegrationAccountBatchConfiguration";
export type LogicAppIntegrationAccountBatchConfiguration = import("./logicAppIntegrationAccountBatchConfiguration").LogicAppIntegrationAccountBatchConfiguration;
export const LogicAppIntegrationAccountBatchConfiguration: typeof import("./logicAppIntegrationAccountBatchConfiguration").LogicAppIntegrationAccountBatchConfiguration = null as any;
utilities.lazyLoad(exports, ["LogicAppIntegrationAccountBatchConfiguration"], () => require("./logicAppIntegrationAccountBatchConfiguration"));

export { LogicAppIntegrationAccountCertificateArgs, LogicAppIntegrationAccountCertificateState } from "./logicAppIntegrationAccountCertificate";
export type LogicAppIntegrationAccountCertificate = import("./logicAppIntegrationAccountCertificate").LogicAppIntegrationAccountCertificate;
export const LogicAppIntegrationAccountCertificate: typeof import("./logicAppIntegrationAccountCertificate").LogicAppIntegrationAccountCertificate = null as any;
utilities.lazyLoad(exports, ["LogicAppIntegrationAccountCertificate"], () => require("./logicAppIntegrationAccountCertificate"));

export { LogicAppIntegrationAccountMapArgs, LogicAppIntegrationAccountMapState } from "./logicAppIntegrationAccountMap";
export type LogicAppIntegrationAccountMap = import("./logicAppIntegrationAccountMap").LogicAppIntegrationAccountMap;
export const LogicAppIntegrationAccountMap: typeof import("./logicAppIntegrationAccountMap").LogicAppIntegrationAccountMap = null as any;
utilities.lazyLoad(exports, ["LogicAppIntegrationAccountMap"], () => require("./logicAppIntegrationAccountMap"));

export { LogicAppIntegrationAccountPartnerArgs, LogicAppIntegrationAccountPartnerState } from "./logicAppIntegrationAccountPartner";
export type LogicAppIntegrationAccountPartner = import("./logicAppIntegrationAccountPartner").LogicAppIntegrationAccountPartner;
export const LogicAppIntegrationAccountPartner: typeof import("./logicAppIntegrationAccountPartner").LogicAppIntegrationAccountPartner = null as any;
utilities.lazyLoad(exports, ["LogicAppIntegrationAccountPartner"], () => require("./logicAppIntegrationAccountPartner"));

export { LogicAppIntegrationAccountSchemaArgs, LogicAppIntegrationAccountSchemaState } from "./logicAppIntegrationAccountSchema";
export type LogicAppIntegrationAccountSchema = import("./logicAppIntegrationAccountSchema").LogicAppIntegrationAccountSchema;
export const LogicAppIntegrationAccountSchema: typeof import("./logicAppIntegrationAccountSchema").LogicAppIntegrationAccountSchema = null as any;
utilities.lazyLoad(exports, ["LogicAppIntegrationAccountSchema"], () => require("./logicAppIntegrationAccountSchema"));

export { LogicAppIntegrationAccountSessionArgs, LogicAppIntegrationAccountSessionState } from "./logicAppIntegrationAccountSession";
export type LogicAppIntegrationAccountSession = import("./logicAppIntegrationAccountSession").LogicAppIntegrationAccountSession;
export const LogicAppIntegrationAccountSession: typeof import("./logicAppIntegrationAccountSession").LogicAppIntegrationAccountSession = null as any;
utilities.lazyLoad(exports, ["LogicAppIntegrationAccountSession"], () => require("./logicAppIntegrationAccountSession"));

export { LogicAppStandardArgs, LogicAppStandardState } from "./logicAppStandard";
export type LogicAppStandard = import("./logicAppStandard").LogicAppStandard;
export const LogicAppStandard: typeof import("./logicAppStandard").LogicAppStandard = null as any;
utilities.lazyLoad(exports, ["LogicAppStandard"], () => require("./logicAppStandard"));

export { LogicAppTriggerCustomArgs, LogicAppTriggerCustomState } from "./logicAppTriggerCustom";
export type LogicAppTriggerCustom = import("./logicAppTriggerCustom").LogicAppTriggerCustom;
export const LogicAppTriggerCustom: typeof import("./logicAppTriggerCustom").LogicAppTriggerCustom = null as any;
utilities.lazyLoad(exports, ["LogicAppTriggerCustom"], () => require("./logicAppTriggerCustom"));

export { LogicAppTriggerHttpRequestArgs, LogicAppTriggerHttpRequestState } from "./logicAppTriggerHttpRequest";
export type LogicAppTriggerHttpRequest = import("./logicAppTriggerHttpRequest").LogicAppTriggerHttpRequest;
export const LogicAppTriggerHttpRequest: typeof import("./logicAppTriggerHttpRequest").LogicAppTriggerHttpRequest = null as any;
utilities.lazyLoad(exports, ["LogicAppTriggerHttpRequest"], () => require("./logicAppTriggerHttpRequest"));

export { LogicAppTriggerRecurrenceArgs, LogicAppTriggerRecurrenceState } from "./logicAppTriggerRecurrence";
export type LogicAppTriggerRecurrence = import("./logicAppTriggerRecurrence").LogicAppTriggerRecurrence;
export const LogicAppTriggerRecurrence: typeof import("./logicAppTriggerRecurrence").LogicAppTriggerRecurrence = null as any;
utilities.lazyLoad(exports, ["LogicAppTriggerRecurrence"], () => require("./logicAppTriggerRecurrence"));

export { LogicAppWorkflowArgs, LogicAppWorkflowState } from "./logicAppWorkflow";
export type LogicAppWorkflow = import("./logicAppWorkflow").LogicAppWorkflow;
export const LogicAppWorkflow: typeof import("./logicAppWorkflow").LogicAppWorkflow = null as any;
utilities.lazyLoad(exports, ["LogicAppWorkflow"], () => require("./logicAppWorkflow"));

export { MachineLearningComputeClusterArgs, MachineLearningComputeClusterState } from "./machineLearningComputeCluster";
export type MachineLearningComputeCluster = import("./machineLearningComputeCluster").MachineLearningComputeCluster;
export const MachineLearningComputeCluster: typeof import("./machineLearningComputeCluster").MachineLearningComputeCluster = null as any;
utilities.lazyLoad(exports, ["MachineLearningComputeCluster"], () => require("./machineLearningComputeCluster"));

export { MachineLearningComputeInstanceArgs, MachineLearningComputeInstanceState } from "./machineLearningComputeInstance";
export type MachineLearningComputeInstance = import("./machineLearningComputeInstance").MachineLearningComputeInstance;
export const MachineLearningComputeInstance: typeof import("./machineLearningComputeInstance").MachineLearningComputeInstance = null as any;
utilities.lazyLoad(exports, ["MachineLearningComputeInstance"], () => require("./machineLearningComputeInstance"));

export { MachineLearningDatastoreBlobstorageArgs, MachineLearningDatastoreBlobstorageState } from "./machineLearningDatastoreBlobstorage";
export type MachineLearningDatastoreBlobstorage = import("./machineLearningDatastoreBlobstorage").MachineLearningDatastoreBlobstorage;
export const MachineLearningDatastoreBlobstorage: typeof import("./machineLearningDatastoreBlobstorage").MachineLearningDatastoreBlobstorage = null as any;
utilities.lazyLoad(exports, ["MachineLearningDatastoreBlobstorage"], () => require("./machineLearningDatastoreBlobstorage"));

export { MachineLearningDatastoreDatalakeGen2Args, MachineLearningDatastoreDatalakeGen2State } from "./machineLearningDatastoreDatalakeGen2";
export type MachineLearningDatastoreDatalakeGen2 = import("./machineLearningDatastoreDatalakeGen2").MachineLearningDatastoreDatalakeGen2;
export const MachineLearningDatastoreDatalakeGen2: typeof import("./machineLearningDatastoreDatalakeGen2").MachineLearningDatastoreDatalakeGen2 = null as any;
utilities.lazyLoad(exports, ["MachineLearningDatastoreDatalakeGen2"], () => require("./machineLearningDatastoreDatalakeGen2"));

export { MachineLearningDatastoreFileshareArgs, MachineLearningDatastoreFileshareState } from "./machineLearningDatastoreFileshare";
export type MachineLearningDatastoreFileshare = import("./machineLearningDatastoreFileshare").MachineLearningDatastoreFileshare;
export const MachineLearningDatastoreFileshare: typeof import("./machineLearningDatastoreFileshare").MachineLearningDatastoreFileshare = null as any;
utilities.lazyLoad(exports, ["MachineLearningDatastoreFileshare"], () => require("./machineLearningDatastoreFileshare"));

export { MachineLearningInferenceClusterArgs, MachineLearningInferenceClusterState } from "./machineLearningInferenceCluster";
export type MachineLearningInferenceCluster = import("./machineLearningInferenceCluster").MachineLearningInferenceCluster;
export const MachineLearningInferenceCluster: typeof import("./machineLearningInferenceCluster").MachineLearningInferenceCluster = null as any;
utilities.lazyLoad(exports, ["MachineLearningInferenceCluster"], () => require("./machineLearningInferenceCluster"));

export { MachineLearningSynapseSparkArgs, MachineLearningSynapseSparkState } from "./machineLearningSynapseSpark";
export type MachineLearningSynapseSpark = import("./machineLearningSynapseSpark").MachineLearningSynapseSpark;
export const MachineLearningSynapseSpark: typeof import("./machineLearningSynapseSpark").MachineLearningSynapseSpark = null as any;
utilities.lazyLoad(exports, ["MachineLearningSynapseSpark"], () => require("./machineLearningSynapseSpark"));

export { MachineLearningWorkspaceArgs, MachineLearningWorkspaceState } from "./machineLearningWorkspace";
export type MachineLearningWorkspace = import("./machineLearningWorkspace").MachineLearningWorkspace;
export const MachineLearningWorkspace: typeof import("./machineLearningWorkspace").MachineLearningWorkspace = null as any;
utilities.lazyLoad(exports, ["MachineLearningWorkspace"], () => require("./machineLearningWorkspace"));

export { MaintenanceAssignmentDedicatedHostArgs, MaintenanceAssignmentDedicatedHostState } from "./maintenanceAssignmentDedicatedHost";
export type MaintenanceAssignmentDedicatedHost = import("./maintenanceAssignmentDedicatedHost").MaintenanceAssignmentDedicatedHost;
export const MaintenanceAssignmentDedicatedHost: typeof import("./maintenanceAssignmentDedicatedHost").MaintenanceAssignmentDedicatedHost = null as any;
utilities.lazyLoad(exports, ["MaintenanceAssignmentDedicatedHost"], () => require("./maintenanceAssignmentDedicatedHost"));

export { MaintenanceAssignmentDynamicScopeArgs, MaintenanceAssignmentDynamicScopeState } from "./maintenanceAssignmentDynamicScope";
export type MaintenanceAssignmentDynamicScope = import("./maintenanceAssignmentDynamicScope").MaintenanceAssignmentDynamicScope;
export const MaintenanceAssignmentDynamicScope: typeof import("./maintenanceAssignmentDynamicScope").MaintenanceAssignmentDynamicScope = null as any;
utilities.lazyLoad(exports, ["MaintenanceAssignmentDynamicScope"], () => require("./maintenanceAssignmentDynamicScope"));

export { MaintenanceAssignmentVirtualMachineArgs, MaintenanceAssignmentVirtualMachineState } from "./maintenanceAssignmentVirtualMachine";
export type MaintenanceAssignmentVirtualMachine = import("./maintenanceAssignmentVirtualMachine").MaintenanceAssignmentVirtualMachine;
export const MaintenanceAssignmentVirtualMachine: typeof import("./maintenanceAssignmentVirtualMachine").MaintenanceAssignmentVirtualMachine = null as any;
utilities.lazyLoad(exports, ["MaintenanceAssignmentVirtualMachine"], () => require("./maintenanceAssignmentVirtualMachine"));

export { MaintenanceAssignmentVirtualMachineScaleSetArgs, MaintenanceAssignmentVirtualMachineScaleSetState } from "./maintenanceAssignmentVirtualMachineScaleSet";
export type MaintenanceAssignmentVirtualMachineScaleSet = import("./maintenanceAssignmentVirtualMachineScaleSet").MaintenanceAssignmentVirtualMachineScaleSet;
export const MaintenanceAssignmentVirtualMachineScaleSet: typeof import("./maintenanceAssignmentVirtualMachineScaleSet").MaintenanceAssignmentVirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["MaintenanceAssignmentVirtualMachineScaleSet"], () => require("./maintenanceAssignmentVirtualMachineScaleSet"));

export { MaintenanceConfigurationArgs, MaintenanceConfigurationState } from "./maintenanceConfiguration";
export type MaintenanceConfiguration = import("./maintenanceConfiguration").MaintenanceConfiguration;
export const MaintenanceConfiguration: typeof import("./maintenanceConfiguration").MaintenanceConfiguration = null as any;
utilities.lazyLoad(exports, ["MaintenanceConfiguration"], () => require("./maintenanceConfiguration"));

export { ManagedApplicationArgs, ManagedApplicationState } from "./managedApplication";
export type ManagedApplication = import("./managedApplication").ManagedApplication;
export const ManagedApplication: typeof import("./managedApplication").ManagedApplication = null as any;
utilities.lazyLoad(exports, ["ManagedApplication"], () => require("./managedApplication"));

export { ManagedApplicationDefinitionArgs, ManagedApplicationDefinitionState } from "./managedApplicationDefinition";
export type ManagedApplicationDefinition = import("./managedApplicationDefinition").ManagedApplicationDefinition;
export const ManagedApplicationDefinition: typeof import("./managedApplicationDefinition").ManagedApplicationDefinition = null as any;
utilities.lazyLoad(exports, ["ManagedApplicationDefinition"], () => require("./managedApplicationDefinition"));

export { ManagedDiskArgs, ManagedDiskState } from "./managedDisk";
export type ManagedDisk = import("./managedDisk").ManagedDisk;
export const ManagedDisk: typeof import("./managedDisk").ManagedDisk = null as any;
utilities.lazyLoad(exports, ["ManagedDisk"], () => require("./managedDisk"));

export { ManagedDiskSasTokenArgs, ManagedDiskSasTokenState } from "./managedDiskSasToken";
export type ManagedDiskSasToken = import("./managedDiskSasToken").ManagedDiskSasToken;
export const ManagedDiskSasToken: typeof import("./managedDiskSasToken").ManagedDiskSasToken = null as any;
utilities.lazyLoad(exports, ["ManagedDiskSasToken"], () => require("./managedDiskSasToken"));

export { ManagedLustreFileSystemArgs, ManagedLustreFileSystemState } from "./managedLustreFileSystem";
export type ManagedLustreFileSystem = import("./managedLustreFileSystem").ManagedLustreFileSystem;
export const ManagedLustreFileSystem: typeof import("./managedLustreFileSystem").ManagedLustreFileSystem = null as any;
utilities.lazyLoad(exports, ["ManagedLustreFileSystem"], () => require("./managedLustreFileSystem"));

export { ManagementGroupArgs, ManagementGroupState } from "./managementGroup";
export type ManagementGroup = import("./managementGroup").ManagementGroup;
export const ManagementGroup: typeof import("./managementGroup").ManagementGroup = null as any;
utilities.lazyLoad(exports, ["ManagementGroup"], () => require("./managementGroup"));

export { ManagementGroupPolicyAssignmentArgs, ManagementGroupPolicyAssignmentState } from "./managementGroupPolicyAssignment";
export type ManagementGroupPolicyAssignment = import("./managementGroupPolicyAssignment").ManagementGroupPolicyAssignment;
export const ManagementGroupPolicyAssignment: typeof import("./managementGroupPolicyAssignment").ManagementGroupPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["ManagementGroupPolicyAssignment"], () => require("./managementGroupPolicyAssignment"));

export { ManagementGroupPolicyExemptionArgs, ManagementGroupPolicyExemptionState } from "./managementGroupPolicyExemption";
export type ManagementGroupPolicyExemption = import("./managementGroupPolicyExemption").ManagementGroupPolicyExemption;
export const ManagementGroupPolicyExemption: typeof import("./managementGroupPolicyExemption").ManagementGroupPolicyExemption = null as any;
utilities.lazyLoad(exports, ["ManagementGroupPolicyExemption"], () => require("./managementGroupPolicyExemption"));

export { ManagementGroupPolicyRemediationArgs, ManagementGroupPolicyRemediationState } from "./managementGroupPolicyRemediation";
export type ManagementGroupPolicyRemediation = import("./managementGroupPolicyRemediation").ManagementGroupPolicyRemediation;
export const ManagementGroupPolicyRemediation: typeof import("./managementGroupPolicyRemediation").ManagementGroupPolicyRemediation = null as any;
utilities.lazyLoad(exports, ["ManagementGroupPolicyRemediation"], () => require("./managementGroupPolicyRemediation"));

export { ManagementGroupSubscriptionAssociationArgs, ManagementGroupSubscriptionAssociationState } from "./managementGroupSubscriptionAssociation";
export type ManagementGroupSubscriptionAssociation = import("./managementGroupSubscriptionAssociation").ManagementGroupSubscriptionAssociation;
export const ManagementGroupSubscriptionAssociation: typeof import("./managementGroupSubscriptionAssociation").ManagementGroupSubscriptionAssociation = null as any;
utilities.lazyLoad(exports, ["ManagementGroupSubscriptionAssociation"], () => require("./managementGroupSubscriptionAssociation"));

export { ManagementGroupTemplateDeploymentArgs, ManagementGroupTemplateDeploymentState } from "./managementGroupTemplateDeployment";
export type ManagementGroupTemplateDeployment = import("./managementGroupTemplateDeployment").ManagementGroupTemplateDeployment;
export const ManagementGroupTemplateDeployment: typeof import("./managementGroupTemplateDeployment").ManagementGroupTemplateDeployment = null as any;
utilities.lazyLoad(exports, ["ManagementGroupTemplateDeployment"], () => require("./managementGroupTemplateDeployment"));

export { ManagementLockArgs, ManagementLockState } from "./managementLock";
export type ManagementLock = import("./managementLock").ManagementLock;
export const ManagementLock: typeof import("./managementLock").ManagementLock = null as any;
utilities.lazyLoad(exports, ["ManagementLock"], () => require("./managementLock"));

export { MapsAccountArgs, MapsAccountState } from "./mapsAccount";
export type MapsAccount = import("./mapsAccount").MapsAccount;
export const MapsAccount: typeof import("./mapsAccount").MapsAccount = null as any;
utilities.lazyLoad(exports, ["MapsAccount"], () => require("./mapsAccount"));

export { MapsCreatorArgs, MapsCreatorState } from "./mapsCreator";
export type MapsCreator = import("./mapsCreator").MapsCreator;
export const MapsCreator: typeof import("./mapsCreator").MapsCreator = null as any;
utilities.lazyLoad(exports, ["MapsCreator"], () => require("./mapsCreator"));

export { MarketplaceAgreementArgs, MarketplaceAgreementState } from "./marketplaceAgreement";
export type MarketplaceAgreement = import("./marketplaceAgreement").MarketplaceAgreement;
export const MarketplaceAgreement: typeof import("./marketplaceAgreement").MarketplaceAgreement = null as any;
utilities.lazyLoad(exports, ["MarketplaceAgreement"], () => require("./marketplaceAgreement"));

export { MarketplaceRoleAssignmentArgs, MarketplaceRoleAssignmentState } from "./marketplaceRoleAssignment";
export type MarketplaceRoleAssignment = import("./marketplaceRoleAssignment").MarketplaceRoleAssignment;
export const MarketplaceRoleAssignment: typeof import("./marketplaceRoleAssignment").MarketplaceRoleAssignment = null as any;
utilities.lazyLoad(exports, ["MarketplaceRoleAssignment"], () => require("./marketplaceRoleAssignment"));

export { MediaServicesAccountFilterArgs, MediaServicesAccountFilterState } from "./mediaServicesAccountFilter";
export type MediaServicesAccountFilter = import("./mediaServicesAccountFilter").MediaServicesAccountFilter;
export const MediaServicesAccountFilter: typeof import("./mediaServicesAccountFilter").MediaServicesAccountFilter = null as any;
utilities.lazyLoad(exports, ["MediaServicesAccountFilter"], () => require("./mediaServicesAccountFilter"));

export { MobileNetworkArgs, MobileNetworkState } from "./mobileNetwork";
export type MobileNetwork = import("./mobileNetwork").MobileNetwork;
export const MobileNetwork: typeof import("./mobileNetwork").MobileNetwork = null as any;
utilities.lazyLoad(exports, ["MobileNetwork"], () => require("./mobileNetwork"));

export { MobileNetworkAttachedDataNetworkArgs, MobileNetworkAttachedDataNetworkState } from "./mobileNetworkAttachedDataNetwork";
export type MobileNetworkAttachedDataNetwork = import("./mobileNetworkAttachedDataNetwork").MobileNetworkAttachedDataNetwork;
export const MobileNetworkAttachedDataNetwork: typeof import("./mobileNetworkAttachedDataNetwork").MobileNetworkAttachedDataNetwork = null as any;
utilities.lazyLoad(exports, ["MobileNetworkAttachedDataNetwork"], () => require("./mobileNetworkAttachedDataNetwork"));

export { MobileNetworkDataNetworkArgs, MobileNetworkDataNetworkState } from "./mobileNetworkDataNetwork";
export type MobileNetworkDataNetwork = import("./mobileNetworkDataNetwork").MobileNetworkDataNetwork;
export const MobileNetworkDataNetwork: typeof import("./mobileNetworkDataNetwork").MobileNetworkDataNetwork = null as any;
utilities.lazyLoad(exports, ["MobileNetworkDataNetwork"], () => require("./mobileNetworkDataNetwork"));

export { MobileNetworkPacketCoreControlPlaneArgs, MobileNetworkPacketCoreControlPlaneState } from "./mobileNetworkPacketCoreControlPlane";
export type MobileNetworkPacketCoreControlPlane = import("./mobileNetworkPacketCoreControlPlane").MobileNetworkPacketCoreControlPlane;
export const MobileNetworkPacketCoreControlPlane: typeof import("./mobileNetworkPacketCoreControlPlane").MobileNetworkPacketCoreControlPlane = null as any;
utilities.lazyLoad(exports, ["MobileNetworkPacketCoreControlPlane"], () => require("./mobileNetworkPacketCoreControlPlane"));

export { MobileNetworkPacketCoreDataPlaneArgs, MobileNetworkPacketCoreDataPlaneState } from "./mobileNetworkPacketCoreDataPlane";
export type MobileNetworkPacketCoreDataPlane = import("./mobileNetworkPacketCoreDataPlane").MobileNetworkPacketCoreDataPlane;
export const MobileNetworkPacketCoreDataPlane: typeof import("./mobileNetworkPacketCoreDataPlane").MobileNetworkPacketCoreDataPlane = null as any;
utilities.lazyLoad(exports, ["MobileNetworkPacketCoreDataPlane"], () => require("./mobileNetworkPacketCoreDataPlane"));

export { MobileNetworkServiceArgs, MobileNetworkServiceState } from "./mobileNetworkService";
export type MobileNetworkService = import("./mobileNetworkService").MobileNetworkService;
export const MobileNetworkService: typeof import("./mobileNetworkService").MobileNetworkService = null as any;
utilities.lazyLoad(exports, ["MobileNetworkService"], () => require("./mobileNetworkService"));

export { MobileNetworkSimArgs, MobileNetworkSimState } from "./mobileNetworkSim";
export type MobileNetworkSim = import("./mobileNetworkSim").MobileNetworkSim;
export const MobileNetworkSim: typeof import("./mobileNetworkSim").MobileNetworkSim = null as any;
utilities.lazyLoad(exports, ["MobileNetworkSim"], () => require("./mobileNetworkSim"));

export { MobileNetworkSimGroupArgs, MobileNetworkSimGroupState } from "./mobileNetworkSimGroup";
export type MobileNetworkSimGroup = import("./mobileNetworkSimGroup").MobileNetworkSimGroup;
export const MobileNetworkSimGroup: typeof import("./mobileNetworkSimGroup").MobileNetworkSimGroup = null as any;
utilities.lazyLoad(exports, ["MobileNetworkSimGroup"], () => require("./mobileNetworkSimGroup"));

export { MobileNetworkSimPolicyArgs, MobileNetworkSimPolicyState } from "./mobileNetworkSimPolicy";
export type MobileNetworkSimPolicy = import("./mobileNetworkSimPolicy").MobileNetworkSimPolicy;
export const MobileNetworkSimPolicy: typeof import("./mobileNetworkSimPolicy").MobileNetworkSimPolicy = null as any;
utilities.lazyLoad(exports, ["MobileNetworkSimPolicy"], () => require("./mobileNetworkSimPolicy"));

export { MobileNetworkSiteArgs, MobileNetworkSiteState } from "./mobileNetworkSite";
export type MobileNetworkSite = import("./mobileNetworkSite").MobileNetworkSite;
export const MobileNetworkSite: typeof import("./mobileNetworkSite").MobileNetworkSite = null as any;
utilities.lazyLoad(exports, ["MobileNetworkSite"], () => require("./mobileNetworkSite"));

export { MobileNetworkSliceArgs, MobileNetworkSliceState } from "./mobileNetworkSlice";
export type MobileNetworkSlice = import("./mobileNetworkSlice").MobileNetworkSlice;
export const MobileNetworkSlice: typeof import("./mobileNetworkSlice").MobileNetworkSlice = null as any;
utilities.lazyLoad(exports, ["MobileNetworkSlice"], () => require("./mobileNetworkSlice"));

export { MonitorAadDiagnosticSettingArgs, MonitorAadDiagnosticSettingState } from "./monitorAadDiagnosticSetting";
export type MonitorAadDiagnosticSetting = import("./monitorAadDiagnosticSetting").MonitorAadDiagnosticSetting;
export const MonitorAadDiagnosticSetting: typeof import("./monitorAadDiagnosticSetting").MonitorAadDiagnosticSetting = null as any;
utilities.lazyLoad(exports, ["MonitorAadDiagnosticSetting"], () => require("./monitorAadDiagnosticSetting"));

export { MonitorActionGroupArgs, MonitorActionGroupState } from "./monitorActionGroup";
export type MonitorActionGroup = import("./monitorActionGroup").MonitorActionGroup;
export const MonitorActionGroup: typeof import("./monitorActionGroup").MonitorActionGroup = null as any;
utilities.lazyLoad(exports, ["MonitorActionGroup"], () => require("./monitorActionGroup"));

export { MonitorActivityLogAlertArgs, MonitorActivityLogAlertState } from "./monitorActivityLogAlert";
export type MonitorActivityLogAlert = import("./monitorActivityLogAlert").MonitorActivityLogAlert;
export const MonitorActivityLogAlert: typeof import("./monitorActivityLogAlert").MonitorActivityLogAlert = null as any;
utilities.lazyLoad(exports, ["MonitorActivityLogAlert"], () => require("./monitorActivityLogAlert"));

export { MonitorAlertProcessingRuleActionGroupArgs, MonitorAlertProcessingRuleActionGroupState } from "./monitorAlertProcessingRuleActionGroup";
export type MonitorAlertProcessingRuleActionGroup = import("./monitorAlertProcessingRuleActionGroup").MonitorAlertProcessingRuleActionGroup;
export const MonitorAlertProcessingRuleActionGroup: typeof import("./monitorAlertProcessingRuleActionGroup").MonitorAlertProcessingRuleActionGroup = null as any;
utilities.lazyLoad(exports, ["MonitorAlertProcessingRuleActionGroup"], () => require("./monitorAlertProcessingRuleActionGroup"));

export { MonitorAlertProcessingRuleSuppressionArgs, MonitorAlertProcessingRuleSuppressionState } from "./monitorAlertProcessingRuleSuppression";
export type MonitorAlertProcessingRuleSuppression = import("./monitorAlertProcessingRuleSuppression").MonitorAlertProcessingRuleSuppression;
export const MonitorAlertProcessingRuleSuppression: typeof import("./monitorAlertProcessingRuleSuppression").MonitorAlertProcessingRuleSuppression = null as any;
utilities.lazyLoad(exports, ["MonitorAlertProcessingRuleSuppression"], () => require("./monitorAlertProcessingRuleSuppression"));

export { MonitorAlertPrometheusRuleGroupArgs, MonitorAlertPrometheusRuleGroupState } from "./monitorAlertPrometheusRuleGroup";
export type MonitorAlertPrometheusRuleGroup = import("./monitorAlertPrometheusRuleGroup").MonitorAlertPrometheusRuleGroup;
export const MonitorAlertPrometheusRuleGroup: typeof import("./monitorAlertPrometheusRuleGroup").MonitorAlertPrometheusRuleGroup = null as any;
utilities.lazyLoad(exports, ["MonitorAlertPrometheusRuleGroup"], () => require("./monitorAlertPrometheusRuleGroup"));

export { MonitorAutoscaleSettingArgs, MonitorAutoscaleSettingState } from "./monitorAutoscaleSetting";
export type MonitorAutoscaleSetting = import("./monitorAutoscaleSetting").MonitorAutoscaleSetting;
export const MonitorAutoscaleSetting: typeof import("./monitorAutoscaleSetting").MonitorAutoscaleSetting = null as any;
utilities.lazyLoad(exports, ["MonitorAutoscaleSetting"], () => require("./monitorAutoscaleSetting"));

export { MonitorDataCollectionEndpointArgs, MonitorDataCollectionEndpointState } from "./monitorDataCollectionEndpoint";
export type MonitorDataCollectionEndpoint = import("./monitorDataCollectionEndpoint").MonitorDataCollectionEndpoint;
export const MonitorDataCollectionEndpoint: typeof import("./monitorDataCollectionEndpoint").MonitorDataCollectionEndpoint = null as any;
utilities.lazyLoad(exports, ["MonitorDataCollectionEndpoint"], () => require("./monitorDataCollectionEndpoint"));

export { MonitorDataCollectionRuleArgs, MonitorDataCollectionRuleState } from "./monitorDataCollectionRule";
export type MonitorDataCollectionRule = import("./monitorDataCollectionRule").MonitorDataCollectionRule;
export const MonitorDataCollectionRule: typeof import("./monitorDataCollectionRule").MonitorDataCollectionRule = null as any;
utilities.lazyLoad(exports, ["MonitorDataCollectionRule"], () => require("./monitorDataCollectionRule"));

export { MonitorDataCollectionRuleAssociationArgs, MonitorDataCollectionRuleAssociationState } from "./monitorDataCollectionRuleAssociation";
export type MonitorDataCollectionRuleAssociation = import("./monitorDataCollectionRuleAssociation").MonitorDataCollectionRuleAssociation;
export const MonitorDataCollectionRuleAssociation: typeof import("./monitorDataCollectionRuleAssociation").MonitorDataCollectionRuleAssociation = null as any;
utilities.lazyLoad(exports, ["MonitorDataCollectionRuleAssociation"], () => require("./monitorDataCollectionRuleAssociation"));

export { MonitorDiagnosticSettingArgs, MonitorDiagnosticSettingState } from "./monitorDiagnosticSetting";
export type MonitorDiagnosticSetting = import("./monitorDiagnosticSetting").MonitorDiagnosticSetting;
export const MonitorDiagnosticSetting: typeof import("./monitorDiagnosticSetting").MonitorDiagnosticSetting = null as any;
utilities.lazyLoad(exports, ["MonitorDiagnosticSetting"], () => require("./monitorDiagnosticSetting"));

export { MonitorLogProfileArgs, MonitorLogProfileState } from "./monitorLogProfile";
export type MonitorLogProfile = import("./monitorLogProfile").MonitorLogProfile;
export const MonitorLogProfile: typeof import("./monitorLogProfile").MonitorLogProfile = null as any;
utilities.lazyLoad(exports, ["MonitorLogProfile"], () => require("./monitorLogProfile"));

export { MonitorMetricAlertArgs, MonitorMetricAlertState } from "./monitorMetricAlert";
export type MonitorMetricAlert = import("./monitorMetricAlert").MonitorMetricAlert;
export const MonitorMetricAlert: typeof import("./monitorMetricAlert").MonitorMetricAlert = null as any;
utilities.lazyLoad(exports, ["MonitorMetricAlert"], () => require("./monitorMetricAlert"));

export { MonitorPrivateLinkScopeArgs, MonitorPrivateLinkScopeState } from "./monitorPrivateLinkScope";
export type MonitorPrivateLinkScope = import("./monitorPrivateLinkScope").MonitorPrivateLinkScope;
export const MonitorPrivateLinkScope: typeof import("./monitorPrivateLinkScope").MonitorPrivateLinkScope = null as any;
utilities.lazyLoad(exports, ["MonitorPrivateLinkScope"], () => require("./monitorPrivateLinkScope"));

export { MonitorPrivateLinkScopedServiceArgs, MonitorPrivateLinkScopedServiceState } from "./monitorPrivateLinkScopedService";
export type MonitorPrivateLinkScopedService = import("./monitorPrivateLinkScopedService").MonitorPrivateLinkScopedService;
export const MonitorPrivateLinkScopedService: typeof import("./monitorPrivateLinkScopedService").MonitorPrivateLinkScopedService = null as any;
utilities.lazyLoad(exports, ["MonitorPrivateLinkScopedService"], () => require("./monitorPrivateLinkScopedService"));

export { MonitorScheduledQueryRulesAlertArgs, MonitorScheduledQueryRulesAlertState } from "./monitorScheduledQueryRulesAlert";
export type MonitorScheduledQueryRulesAlert = import("./monitorScheduledQueryRulesAlert").MonitorScheduledQueryRulesAlert;
export const MonitorScheduledQueryRulesAlert: typeof import("./monitorScheduledQueryRulesAlert").MonitorScheduledQueryRulesAlert = null as any;
utilities.lazyLoad(exports, ["MonitorScheduledQueryRulesAlert"], () => require("./monitorScheduledQueryRulesAlert"));

export { MonitorScheduledQueryRulesAlertV2Args, MonitorScheduledQueryRulesAlertV2State } from "./monitorScheduledQueryRulesAlertV2";
export type MonitorScheduledQueryRulesAlertV2 = import("./monitorScheduledQueryRulesAlertV2").MonitorScheduledQueryRulesAlertV2;
export const MonitorScheduledQueryRulesAlertV2: typeof import("./monitorScheduledQueryRulesAlertV2").MonitorScheduledQueryRulesAlertV2 = null as any;
utilities.lazyLoad(exports, ["MonitorScheduledQueryRulesAlertV2"], () => require("./monitorScheduledQueryRulesAlertV2"));

export { MonitorScheduledQueryRulesLogArgs, MonitorScheduledQueryRulesLogState } from "./monitorScheduledQueryRulesLog";
export type MonitorScheduledQueryRulesLog = import("./monitorScheduledQueryRulesLog").MonitorScheduledQueryRulesLog;
export const MonitorScheduledQueryRulesLog: typeof import("./monitorScheduledQueryRulesLog").MonitorScheduledQueryRulesLog = null as any;
utilities.lazyLoad(exports, ["MonitorScheduledQueryRulesLog"], () => require("./monitorScheduledQueryRulesLog"));

export { MonitorSmartDetectorAlertRuleArgs, MonitorSmartDetectorAlertRuleState } from "./monitorSmartDetectorAlertRule";
export type MonitorSmartDetectorAlertRule = import("./monitorSmartDetectorAlertRule").MonitorSmartDetectorAlertRule;
export const MonitorSmartDetectorAlertRule: typeof import("./monitorSmartDetectorAlertRule").MonitorSmartDetectorAlertRule = null as any;
utilities.lazyLoad(exports, ["MonitorSmartDetectorAlertRule"], () => require("./monitorSmartDetectorAlertRule"));

export { MonitorWorkspaceArgs, MonitorWorkspaceState } from "./monitorWorkspace";
export type MonitorWorkspace = import("./monitorWorkspace").MonitorWorkspace;
export const MonitorWorkspace: typeof import("./monitorWorkspace").MonitorWorkspace = null as any;
utilities.lazyLoad(exports, ["MonitorWorkspace"], () => require("./monitorWorkspace"));

export { MssqlDatabaseArgs, MssqlDatabaseState } from "./mssqlDatabase";
export type MssqlDatabase = import("./mssqlDatabase").MssqlDatabase;
export const MssqlDatabase: typeof import("./mssqlDatabase").MssqlDatabase = null as any;
utilities.lazyLoad(exports, ["MssqlDatabase"], () => require("./mssqlDatabase"));

export { MssqlDatabaseExtendedAuditingPolicyArgs, MssqlDatabaseExtendedAuditingPolicyState } from "./mssqlDatabaseExtendedAuditingPolicy";
export type MssqlDatabaseExtendedAuditingPolicy = import("./mssqlDatabaseExtendedAuditingPolicy").MssqlDatabaseExtendedAuditingPolicy;
export const MssqlDatabaseExtendedAuditingPolicy: typeof import("./mssqlDatabaseExtendedAuditingPolicy").MssqlDatabaseExtendedAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["MssqlDatabaseExtendedAuditingPolicy"], () => require("./mssqlDatabaseExtendedAuditingPolicy"));

export { MssqlDatabaseVulnerabilityAssessmentRuleBaselineArgs, MssqlDatabaseVulnerabilityAssessmentRuleBaselineState } from "./mssqlDatabaseVulnerabilityAssessmentRuleBaseline";
export type MssqlDatabaseVulnerabilityAssessmentRuleBaseline = import("./mssqlDatabaseVulnerabilityAssessmentRuleBaseline").MssqlDatabaseVulnerabilityAssessmentRuleBaseline;
export const MssqlDatabaseVulnerabilityAssessmentRuleBaseline: typeof import("./mssqlDatabaseVulnerabilityAssessmentRuleBaseline").MssqlDatabaseVulnerabilityAssessmentRuleBaseline = null as any;
utilities.lazyLoad(exports, ["MssqlDatabaseVulnerabilityAssessmentRuleBaseline"], () => require("./mssqlDatabaseVulnerabilityAssessmentRuleBaseline"));

export { MssqlElasticpoolArgs, MssqlElasticpoolState } from "./mssqlElasticpool";
export type MssqlElasticpool = import("./mssqlElasticpool").MssqlElasticpool;
export const MssqlElasticpool: typeof import("./mssqlElasticpool").MssqlElasticpool = null as any;
utilities.lazyLoad(exports, ["MssqlElasticpool"], () => require("./mssqlElasticpool"));

export { MssqlFailoverGroupArgs, MssqlFailoverGroupState } from "./mssqlFailoverGroup";
export type MssqlFailoverGroup = import("./mssqlFailoverGroup").MssqlFailoverGroup;
export const MssqlFailoverGroup: typeof import("./mssqlFailoverGroup").MssqlFailoverGroup = null as any;
utilities.lazyLoad(exports, ["MssqlFailoverGroup"], () => require("./mssqlFailoverGroup"));

export { MssqlFirewallRuleArgs, MssqlFirewallRuleState } from "./mssqlFirewallRule";
export type MssqlFirewallRule = import("./mssqlFirewallRule").MssqlFirewallRule;
export const MssqlFirewallRule: typeof import("./mssqlFirewallRule").MssqlFirewallRule = null as any;
utilities.lazyLoad(exports, ["MssqlFirewallRule"], () => require("./mssqlFirewallRule"));

export { MssqlJobAgentArgs, MssqlJobAgentState } from "./mssqlJobAgent";
export type MssqlJobAgent = import("./mssqlJobAgent").MssqlJobAgent;
export const MssqlJobAgent: typeof import("./mssqlJobAgent").MssqlJobAgent = null as any;
utilities.lazyLoad(exports, ["MssqlJobAgent"], () => require("./mssqlJobAgent"));

export { MssqlJobCredentialArgs, MssqlJobCredentialState } from "./mssqlJobCredential";
export type MssqlJobCredential = import("./mssqlJobCredential").MssqlJobCredential;
export const MssqlJobCredential: typeof import("./mssqlJobCredential").MssqlJobCredential = null as any;
utilities.lazyLoad(exports, ["MssqlJobCredential"], () => require("./mssqlJobCredential"));

export { MssqlManagedDatabaseArgs, MssqlManagedDatabaseState } from "./mssqlManagedDatabase";
export type MssqlManagedDatabase = import("./mssqlManagedDatabase").MssqlManagedDatabase;
export const MssqlManagedDatabase: typeof import("./mssqlManagedDatabase").MssqlManagedDatabase = null as any;
utilities.lazyLoad(exports, ["MssqlManagedDatabase"], () => require("./mssqlManagedDatabase"));

export { MssqlManagedInstanceArgs, MssqlManagedInstanceState } from "./mssqlManagedInstance";
export type MssqlManagedInstance = import("./mssqlManagedInstance").MssqlManagedInstance;
export const MssqlManagedInstance: typeof import("./mssqlManagedInstance").MssqlManagedInstance = null as any;
utilities.lazyLoad(exports, ["MssqlManagedInstance"], () => require("./mssqlManagedInstance"));

export { MssqlManagedInstanceActiveDirectoryAdministratorArgs, MssqlManagedInstanceActiveDirectoryAdministratorState } from "./mssqlManagedInstanceActiveDirectoryAdministrator";
export type MssqlManagedInstanceActiveDirectoryAdministrator = import("./mssqlManagedInstanceActiveDirectoryAdministrator").MssqlManagedInstanceActiveDirectoryAdministrator;
export const MssqlManagedInstanceActiveDirectoryAdministrator: typeof import("./mssqlManagedInstanceActiveDirectoryAdministrator").MssqlManagedInstanceActiveDirectoryAdministrator = null as any;
utilities.lazyLoad(exports, ["MssqlManagedInstanceActiveDirectoryAdministrator"], () => require("./mssqlManagedInstanceActiveDirectoryAdministrator"));

export { MssqlManagedInstanceFailoverGroupArgs, MssqlManagedInstanceFailoverGroupState } from "./mssqlManagedInstanceFailoverGroup";
export type MssqlManagedInstanceFailoverGroup = import("./mssqlManagedInstanceFailoverGroup").MssqlManagedInstanceFailoverGroup;
export const MssqlManagedInstanceFailoverGroup: typeof import("./mssqlManagedInstanceFailoverGroup").MssqlManagedInstanceFailoverGroup = null as any;
utilities.lazyLoad(exports, ["MssqlManagedInstanceFailoverGroup"], () => require("./mssqlManagedInstanceFailoverGroup"));

export { MssqlManagedInstanceSecurityAlertPolicyArgs, MssqlManagedInstanceSecurityAlertPolicyState } from "./mssqlManagedInstanceSecurityAlertPolicy";
export type MssqlManagedInstanceSecurityAlertPolicy = import("./mssqlManagedInstanceSecurityAlertPolicy").MssqlManagedInstanceSecurityAlertPolicy;
export const MssqlManagedInstanceSecurityAlertPolicy: typeof import("./mssqlManagedInstanceSecurityAlertPolicy").MssqlManagedInstanceSecurityAlertPolicy = null as any;
utilities.lazyLoad(exports, ["MssqlManagedInstanceSecurityAlertPolicy"], () => require("./mssqlManagedInstanceSecurityAlertPolicy"));

export { MssqlManagedInstanceTransparentDataEncryptionArgs, MssqlManagedInstanceTransparentDataEncryptionState } from "./mssqlManagedInstanceTransparentDataEncryption";
export type MssqlManagedInstanceTransparentDataEncryption = import("./mssqlManagedInstanceTransparentDataEncryption").MssqlManagedInstanceTransparentDataEncryption;
export const MssqlManagedInstanceTransparentDataEncryption: typeof import("./mssqlManagedInstanceTransparentDataEncryption").MssqlManagedInstanceTransparentDataEncryption = null as any;
utilities.lazyLoad(exports, ["MssqlManagedInstanceTransparentDataEncryption"], () => require("./mssqlManagedInstanceTransparentDataEncryption"));

export { MssqlManagedInstanceVulnerabilityAssessmentArgs, MssqlManagedInstanceVulnerabilityAssessmentState } from "./mssqlManagedInstanceVulnerabilityAssessment";
export type MssqlManagedInstanceVulnerabilityAssessment = import("./mssqlManagedInstanceVulnerabilityAssessment").MssqlManagedInstanceVulnerabilityAssessment;
export const MssqlManagedInstanceVulnerabilityAssessment: typeof import("./mssqlManagedInstanceVulnerabilityAssessment").MssqlManagedInstanceVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["MssqlManagedInstanceVulnerabilityAssessment"], () => require("./mssqlManagedInstanceVulnerabilityAssessment"));

export { MssqlOutboundFirewallRuleArgs, MssqlOutboundFirewallRuleState } from "./mssqlOutboundFirewallRule";
export type MssqlOutboundFirewallRule = import("./mssqlOutboundFirewallRule").MssqlOutboundFirewallRule;
export const MssqlOutboundFirewallRule: typeof import("./mssqlOutboundFirewallRule").MssqlOutboundFirewallRule = null as any;
utilities.lazyLoad(exports, ["MssqlOutboundFirewallRule"], () => require("./mssqlOutboundFirewallRule"));

export { MssqlServerArgs, MssqlServerState } from "./mssqlServer";
export type MssqlServer = import("./mssqlServer").MssqlServer;
export const MssqlServer: typeof import("./mssqlServer").MssqlServer = null as any;
utilities.lazyLoad(exports, ["MssqlServer"], () => require("./mssqlServer"));

export { MssqlServerDnsAliasArgs, MssqlServerDnsAliasState } from "./mssqlServerDnsAlias";
export type MssqlServerDnsAlias = import("./mssqlServerDnsAlias").MssqlServerDnsAlias;
export const MssqlServerDnsAlias: typeof import("./mssqlServerDnsAlias").MssqlServerDnsAlias = null as any;
utilities.lazyLoad(exports, ["MssqlServerDnsAlias"], () => require("./mssqlServerDnsAlias"));

export { MssqlServerExtendedAuditingPolicyArgs, MssqlServerExtendedAuditingPolicyState } from "./mssqlServerExtendedAuditingPolicy";
export type MssqlServerExtendedAuditingPolicy = import("./mssqlServerExtendedAuditingPolicy").MssqlServerExtendedAuditingPolicy;
export const MssqlServerExtendedAuditingPolicy: typeof import("./mssqlServerExtendedAuditingPolicy").MssqlServerExtendedAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["MssqlServerExtendedAuditingPolicy"], () => require("./mssqlServerExtendedAuditingPolicy"));

export { MssqlServerMicrosoftSupportAuditingPolicyArgs, MssqlServerMicrosoftSupportAuditingPolicyState } from "./mssqlServerMicrosoftSupportAuditingPolicy";
export type MssqlServerMicrosoftSupportAuditingPolicy = import("./mssqlServerMicrosoftSupportAuditingPolicy").MssqlServerMicrosoftSupportAuditingPolicy;
export const MssqlServerMicrosoftSupportAuditingPolicy: typeof import("./mssqlServerMicrosoftSupportAuditingPolicy").MssqlServerMicrosoftSupportAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["MssqlServerMicrosoftSupportAuditingPolicy"], () => require("./mssqlServerMicrosoftSupportAuditingPolicy"));

export { MssqlServerSecurityAlertPolicyArgs, MssqlServerSecurityAlertPolicyState } from "./mssqlServerSecurityAlertPolicy";
export type MssqlServerSecurityAlertPolicy = import("./mssqlServerSecurityAlertPolicy").MssqlServerSecurityAlertPolicy;
export const MssqlServerSecurityAlertPolicy: typeof import("./mssqlServerSecurityAlertPolicy").MssqlServerSecurityAlertPolicy = null as any;
utilities.lazyLoad(exports, ["MssqlServerSecurityAlertPolicy"], () => require("./mssqlServerSecurityAlertPolicy"));

export { MssqlServerTransparentDataEncryptionArgs, MssqlServerTransparentDataEncryptionState } from "./mssqlServerTransparentDataEncryption";
export type MssqlServerTransparentDataEncryption = import("./mssqlServerTransparentDataEncryption").MssqlServerTransparentDataEncryption;
export const MssqlServerTransparentDataEncryption: typeof import("./mssqlServerTransparentDataEncryption").MssqlServerTransparentDataEncryption = null as any;
utilities.lazyLoad(exports, ["MssqlServerTransparentDataEncryption"], () => require("./mssqlServerTransparentDataEncryption"));

export { MssqlServerVulnerabilityAssessmentArgs, MssqlServerVulnerabilityAssessmentState } from "./mssqlServerVulnerabilityAssessment";
export type MssqlServerVulnerabilityAssessment = import("./mssqlServerVulnerabilityAssessment").MssqlServerVulnerabilityAssessment;
export const MssqlServerVulnerabilityAssessment: typeof import("./mssqlServerVulnerabilityAssessment").MssqlServerVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["MssqlServerVulnerabilityAssessment"], () => require("./mssqlServerVulnerabilityAssessment"));

export { MssqlVirtualMachineArgs, MssqlVirtualMachineState } from "./mssqlVirtualMachine";
export type MssqlVirtualMachine = import("./mssqlVirtualMachine").MssqlVirtualMachine;
export const MssqlVirtualMachine: typeof import("./mssqlVirtualMachine").MssqlVirtualMachine = null as any;
utilities.lazyLoad(exports, ["MssqlVirtualMachine"], () => require("./mssqlVirtualMachine"));

export { MssqlVirtualMachineAvailabilityGroupListenerArgs, MssqlVirtualMachineAvailabilityGroupListenerState } from "./mssqlVirtualMachineAvailabilityGroupListener";
export type MssqlVirtualMachineAvailabilityGroupListener = import("./mssqlVirtualMachineAvailabilityGroupListener").MssqlVirtualMachineAvailabilityGroupListener;
export const MssqlVirtualMachineAvailabilityGroupListener: typeof import("./mssqlVirtualMachineAvailabilityGroupListener").MssqlVirtualMachineAvailabilityGroupListener = null as any;
utilities.lazyLoad(exports, ["MssqlVirtualMachineAvailabilityGroupListener"], () => require("./mssqlVirtualMachineAvailabilityGroupListener"));

export { MssqlVirtualMachineGroupArgs, MssqlVirtualMachineGroupState } from "./mssqlVirtualMachineGroup";
export type MssqlVirtualMachineGroup = import("./mssqlVirtualMachineGroup").MssqlVirtualMachineGroup;
export const MssqlVirtualMachineGroup: typeof import("./mssqlVirtualMachineGroup").MssqlVirtualMachineGroup = null as any;
utilities.lazyLoad(exports, ["MssqlVirtualMachineGroup"], () => require("./mssqlVirtualMachineGroup"));

export { MssqlVirtualNetworkRuleArgs, MssqlVirtualNetworkRuleState } from "./mssqlVirtualNetworkRule";
export type MssqlVirtualNetworkRule = import("./mssqlVirtualNetworkRule").MssqlVirtualNetworkRule;
export const MssqlVirtualNetworkRule: typeof import("./mssqlVirtualNetworkRule").MssqlVirtualNetworkRule = null as any;
utilities.lazyLoad(exports, ["MssqlVirtualNetworkRule"], () => require("./mssqlVirtualNetworkRule"));

export { MysqlFlexibleDatabaseArgs, MysqlFlexibleDatabaseState } from "./mysqlFlexibleDatabase";
export type MysqlFlexibleDatabase = import("./mysqlFlexibleDatabase").MysqlFlexibleDatabase;
export const MysqlFlexibleDatabase: typeof import("./mysqlFlexibleDatabase").MysqlFlexibleDatabase = null as any;
utilities.lazyLoad(exports, ["MysqlFlexibleDatabase"], () => require("./mysqlFlexibleDatabase"));

export { MysqlFlexibleServerArgs, MysqlFlexibleServerState } from "./mysqlFlexibleServer";
export type MysqlFlexibleServer = import("./mysqlFlexibleServer").MysqlFlexibleServer;
export const MysqlFlexibleServer: typeof import("./mysqlFlexibleServer").MysqlFlexibleServer = null as any;
utilities.lazyLoad(exports, ["MysqlFlexibleServer"], () => require("./mysqlFlexibleServer"));

export { MysqlFlexibleServerActiveDirectoryAdministratorArgs, MysqlFlexibleServerActiveDirectoryAdministratorState } from "./mysqlFlexibleServerActiveDirectoryAdministrator";
export type MysqlFlexibleServerActiveDirectoryAdministrator = import("./mysqlFlexibleServerActiveDirectoryAdministrator").MysqlFlexibleServerActiveDirectoryAdministrator;
export const MysqlFlexibleServerActiveDirectoryAdministrator: typeof import("./mysqlFlexibleServerActiveDirectoryAdministrator").MysqlFlexibleServerActiveDirectoryAdministrator = null as any;
utilities.lazyLoad(exports, ["MysqlFlexibleServerActiveDirectoryAdministrator"], () => require("./mysqlFlexibleServerActiveDirectoryAdministrator"));

export { MysqlFlexibleServerConfigurationArgs, MysqlFlexibleServerConfigurationState } from "./mysqlFlexibleServerConfiguration";
export type MysqlFlexibleServerConfiguration = import("./mysqlFlexibleServerConfiguration").MysqlFlexibleServerConfiguration;
export const MysqlFlexibleServerConfiguration: typeof import("./mysqlFlexibleServerConfiguration").MysqlFlexibleServerConfiguration = null as any;
utilities.lazyLoad(exports, ["MysqlFlexibleServerConfiguration"], () => require("./mysqlFlexibleServerConfiguration"));

export { MysqlFlexibleServerFirewallRuleArgs, MysqlFlexibleServerFirewallRuleState } from "./mysqlFlexibleServerFirewallRule";
export type MysqlFlexibleServerFirewallRule = import("./mysqlFlexibleServerFirewallRule").MysqlFlexibleServerFirewallRule;
export const MysqlFlexibleServerFirewallRule: typeof import("./mysqlFlexibleServerFirewallRule").MysqlFlexibleServerFirewallRule = null as any;
utilities.lazyLoad(exports, ["MysqlFlexibleServerFirewallRule"], () => require("./mysqlFlexibleServerFirewallRule"));

export { NatGatewayArgs, NatGatewayState } from "./natGateway";
export type NatGateway = import("./natGateway").NatGateway;
export const NatGateway: typeof import("./natGateway").NatGateway = null as any;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));

export { NatGatewayPublicIpAssociationArgs, NatGatewayPublicIpAssociationState } from "./natGatewayPublicIpAssociation";
export type NatGatewayPublicIpAssociation = import("./natGatewayPublicIpAssociation").NatGatewayPublicIpAssociation;
export const NatGatewayPublicIpAssociation: typeof import("./natGatewayPublicIpAssociation").NatGatewayPublicIpAssociation = null as any;
utilities.lazyLoad(exports, ["NatGatewayPublicIpAssociation"], () => require("./natGatewayPublicIpAssociation"));

export { NatGatewayPublicIpPrefixAssociationArgs, NatGatewayPublicIpPrefixAssociationState } from "./natGatewayPublicIpPrefixAssociation";
export type NatGatewayPublicIpPrefixAssociation = import("./natGatewayPublicIpPrefixAssociation").NatGatewayPublicIpPrefixAssociation;
export const NatGatewayPublicIpPrefixAssociation: typeof import("./natGatewayPublicIpPrefixAssociation").NatGatewayPublicIpPrefixAssociation = null as any;
utilities.lazyLoad(exports, ["NatGatewayPublicIpPrefixAssociation"], () => require("./natGatewayPublicIpPrefixAssociation"));

export { NetappAccountArgs, NetappAccountState } from "./netappAccount";
export type NetappAccount = import("./netappAccount").NetappAccount;
export const NetappAccount: typeof import("./netappAccount").NetappAccount = null as any;
utilities.lazyLoad(exports, ["NetappAccount"], () => require("./netappAccount"));

export { NetappAccountEncryptionArgs, NetappAccountEncryptionState } from "./netappAccountEncryption";
export type NetappAccountEncryption = import("./netappAccountEncryption").NetappAccountEncryption;
export const NetappAccountEncryption: typeof import("./netappAccountEncryption").NetappAccountEncryption = null as any;
utilities.lazyLoad(exports, ["NetappAccountEncryption"], () => require("./netappAccountEncryption"));

export { NetappPoolArgs, NetappPoolState } from "./netappPool";
export type NetappPool = import("./netappPool").NetappPool;
export const NetappPool: typeof import("./netappPool").NetappPool = null as any;
utilities.lazyLoad(exports, ["NetappPool"], () => require("./netappPool"));

export { NetappSnapshotArgs, NetappSnapshotState } from "./netappSnapshot";
export type NetappSnapshot = import("./netappSnapshot").NetappSnapshot;
export const NetappSnapshot: typeof import("./netappSnapshot").NetappSnapshot = null as any;
utilities.lazyLoad(exports, ["NetappSnapshot"], () => require("./netappSnapshot"));

export { NetappSnapshotPolicyArgs, NetappSnapshotPolicyState } from "./netappSnapshotPolicy";
export type NetappSnapshotPolicy = import("./netappSnapshotPolicy").NetappSnapshotPolicy;
export const NetappSnapshotPolicy: typeof import("./netappSnapshotPolicy").NetappSnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["NetappSnapshotPolicy"], () => require("./netappSnapshotPolicy"));

export { NetappVolumeArgs, NetappVolumeState } from "./netappVolume";
export type NetappVolume = import("./netappVolume").NetappVolume;
export const NetappVolume: typeof import("./netappVolume").NetappVolume = null as any;
utilities.lazyLoad(exports, ["NetappVolume"], () => require("./netappVolume"));

export { NetappVolumeGroupSapHanaArgs, NetappVolumeGroupSapHanaState } from "./netappVolumeGroupSapHana";
export type NetappVolumeGroupSapHana = import("./netappVolumeGroupSapHana").NetappVolumeGroupSapHana;
export const NetappVolumeGroupSapHana: typeof import("./netappVolumeGroupSapHana").NetappVolumeGroupSapHana = null as any;
utilities.lazyLoad(exports, ["NetappVolumeGroupSapHana"], () => require("./netappVolumeGroupSapHana"));

export { NetappVolumeQuotaRuleArgs, NetappVolumeQuotaRuleState } from "./netappVolumeQuotaRule";
export type NetappVolumeQuotaRule = import("./netappVolumeQuotaRule").NetappVolumeQuotaRule;
export const NetappVolumeQuotaRule: typeof import("./netappVolumeQuotaRule").NetappVolumeQuotaRule = null as any;
utilities.lazyLoad(exports, ["NetappVolumeQuotaRule"], () => require("./netappVolumeQuotaRule"));

export { NetworkConnectionMonitorArgs, NetworkConnectionMonitorState } from "./networkConnectionMonitor";
export type NetworkConnectionMonitor = import("./networkConnectionMonitor").NetworkConnectionMonitor;
export const NetworkConnectionMonitor: typeof import("./networkConnectionMonitor").NetworkConnectionMonitor = null as any;
utilities.lazyLoad(exports, ["NetworkConnectionMonitor"], () => require("./networkConnectionMonitor"));

export { NetworkDdosProtectionPlanArgs, NetworkDdosProtectionPlanState } from "./networkDdosProtectionPlan";
export type NetworkDdosProtectionPlan = import("./networkDdosProtectionPlan").NetworkDdosProtectionPlan;
export const NetworkDdosProtectionPlan: typeof import("./networkDdosProtectionPlan").NetworkDdosProtectionPlan = null as any;
utilities.lazyLoad(exports, ["NetworkDdosProtectionPlan"], () => require("./networkDdosProtectionPlan"));

export { NetworkFunctionAzureTrafficCollectorArgs, NetworkFunctionAzureTrafficCollectorState } from "./networkFunctionAzureTrafficCollector";
export type NetworkFunctionAzureTrafficCollector = import("./networkFunctionAzureTrafficCollector").NetworkFunctionAzureTrafficCollector;
export const NetworkFunctionAzureTrafficCollector: typeof import("./networkFunctionAzureTrafficCollector").NetworkFunctionAzureTrafficCollector = null as any;
utilities.lazyLoad(exports, ["NetworkFunctionAzureTrafficCollector"], () => require("./networkFunctionAzureTrafficCollector"));

export { NetworkFunctionCollectorPolicyArgs, NetworkFunctionCollectorPolicyState } from "./networkFunctionCollectorPolicy";
export type NetworkFunctionCollectorPolicy = import("./networkFunctionCollectorPolicy").NetworkFunctionCollectorPolicy;
export const NetworkFunctionCollectorPolicy: typeof import("./networkFunctionCollectorPolicy").NetworkFunctionCollectorPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkFunctionCollectorPolicy"], () => require("./networkFunctionCollectorPolicy"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs, NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationState } from "./networkInterfaceApplicationGatewayBackendAddressPoolAssociation";
export type NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation = import("./networkInterfaceApplicationGatewayBackendAddressPoolAssociation").NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation;
export const NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation: typeof import("./networkInterfaceApplicationGatewayBackendAddressPoolAssociation").NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation"], () => require("./networkInterfaceApplicationGatewayBackendAddressPoolAssociation"));

export { NetworkInterfaceApplicationSecurityGroupAssociationArgs, NetworkInterfaceApplicationSecurityGroupAssociationState } from "./networkInterfaceApplicationSecurityGroupAssociation";
export type NetworkInterfaceApplicationSecurityGroupAssociation = import("./networkInterfaceApplicationSecurityGroupAssociation").NetworkInterfaceApplicationSecurityGroupAssociation;
export const NetworkInterfaceApplicationSecurityGroupAssociation: typeof import("./networkInterfaceApplicationSecurityGroupAssociation").NetworkInterfaceApplicationSecurityGroupAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceApplicationSecurityGroupAssociation"], () => require("./networkInterfaceApplicationSecurityGroupAssociation"));

export { NetworkInterfaceBackendAddressPoolAssociationArgs, NetworkInterfaceBackendAddressPoolAssociationState } from "./networkInterfaceBackendAddressPoolAssociation";
export type NetworkInterfaceBackendAddressPoolAssociation = import("./networkInterfaceBackendAddressPoolAssociation").NetworkInterfaceBackendAddressPoolAssociation;
export const NetworkInterfaceBackendAddressPoolAssociation: typeof import("./networkInterfaceBackendAddressPoolAssociation").NetworkInterfaceBackendAddressPoolAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceBackendAddressPoolAssociation"], () => require("./networkInterfaceBackendAddressPoolAssociation"));

export { NetworkInterfaceNatRuleAssociationArgs, NetworkInterfaceNatRuleAssociationState } from "./networkInterfaceNatRuleAssociation";
export type NetworkInterfaceNatRuleAssociation = import("./networkInterfaceNatRuleAssociation").NetworkInterfaceNatRuleAssociation;
export const NetworkInterfaceNatRuleAssociation: typeof import("./networkInterfaceNatRuleAssociation").NetworkInterfaceNatRuleAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceNatRuleAssociation"], () => require("./networkInterfaceNatRuleAssociation"));

export { NetworkInterfaceSecurityGroupAssociationArgs, NetworkInterfaceSecurityGroupAssociationState } from "./networkInterfaceSecurityGroupAssociation";
export type NetworkInterfaceSecurityGroupAssociation = import("./networkInterfaceSecurityGroupAssociation").NetworkInterfaceSecurityGroupAssociation;
export const NetworkInterfaceSecurityGroupAssociation: typeof import("./networkInterfaceSecurityGroupAssociation").NetworkInterfaceSecurityGroupAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceSecurityGroupAssociation"], () => require("./networkInterfaceSecurityGroupAssociation"));

export { NetworkManagerArgs, NetworkManagerState } from "./networkManager";
export type NetworkManager = import("./networkManager").NetworkManager;
export const NetworkManager: typeof import("./networkManager").NetworkManager = null as any;
utilities.lazyLoad(exports, ["NetworkManager"], () => require("./networkManager"));

export { NetworkManagerAdminRuleArgs, NetworkManagerAdminRuleState } from "./networkManagerAdminRule";
export type NetworkManagerAdminRule = import("./networkManagerAdminRule").NetworkManagerAdminRule;
export const NetworkManagerAdminRule: typeof import("./networkManagerAdminRule").NetworkManagerAdminRule = null as any;
utilities.lazyLoad(exports, ["NetworkManagerAdminRule"], () => require("./networkManagerAdminRule"));

export { NetworkManagerAdminRuleCollectionArgs, NetworkManagerAdminRuleCollectionState } from "./networkManagerAdminRuleCollection";
export type NetworkManagerAdminRuleCollection = import("./networkManagerAdminRuleCollection").NetworkManagerAdminRuleCollection;
export const NetworkManagerAdminRuleCollection: typeof import("./networkManagerAdminRuleCollection").NetworkManagerAdminRuleCollection = null as any;
utilities.lazyLoad(exports, ["NetworkManagerAdminRuleCollection"], () => require("./networkManagerAdminRuleCollection"));

export { NetworkManagerConnectivityConfigurationArgs, NetworkManagerConnectivityConfigurationState } from "./networkManagerConnectivityConfiguration";
export type NetworkManagerConnectivityConfiguration = import("./networkManagerConnectivityConfiguration").NetworkManagerConnectivityConfiguration;
export const NetworkManagerConnectivityConfiguration: typeof import("./networkManagerConnectivityConfiguration").NetworkManagerConnectivityConfiguration = null as any;
utilities.lazyLoad(exports, ["NetworkManagerConnectivityConfiguration"], () => require("./networkManagerConnectivityConfiguration"));

export { NetworkManagerDeploymentArgs, NetworkManagerDeploymentState } from "./networkManagerDeployment";
export type NetworkManagerDeployment = import("./networkManagerDeployment").NetworkManagerDeployment;
export const NetworkManagerDeployment: typeof import("./networkManagerDeployment").NetworkManagerDeployment = null as any;
utilities.lazyLoad(exports, ["NetworkManagerDeployment"], () => require("./networkManagerDeployment"));

export { NetworkManagerManagementGroupConnectionArgs, NetworkManagerManagementGroupConnectionState } from "./networkManagerManagementGroupConnection";
export type NetworkManagerManagementGroupConnection = import("./networkManagerManagementGroupConnection").NetworkManagerManagementGroupConnection;
export const NetworkManagerManagementGroupConnection: typeof import("./networkManagerManagementGroupConnection").NetworkManagerManagementGroupConnection = null as any;
utilities.lazyLoad(exports, ["NetworkManagerManagementGroupConnection"], () => require("./networkManagerManagementGroupConnection"));

export { NetworkManagerNetworkGroupArgs, NetworkManagerNetworkGroupState } from "./networkManagerNetworkGroup";
export type NetworkManagerNetworkGroup = import("./networkManagerNetworkGroup").NetworkManagerNetworkGroup;
export const NetworkManagerNetworkGroup: typeof import("./networkManagerNetworkGroup").NetworkManagerNetworkGroup = null as any;
utilities.lazyLoad(exports, ["NetworkManagerNetworkGroup"], () => require("./networkManagerNetworkGroup"));

export { NetworkManagerScopeConnectionArgs, NetworkManagerScopeConnectionState } from "./networkManagerScopeConnection";
export type NetworkManagerScopeConnection = import("./networkManagerScopeConnection").NetworkManagerScopeConnection;
export const NetworkManagerScopeConnection: typeof import("./networkManagerScopeConnection").NetworkManagerScopeConnection = null as any;
utilities.lazyLoad(exports, ["NetworkManagerScopeConnection"], () => require("./networkManagerScopeConnection"));

export { NetworkManagerSecurityAdminConfigurationArgs, NetworkManagerSecurityAdminConfigurationState } from "./networkManagerSecurityAdminConfiguration";
export type NetworkManagerSecurityAdminConfiguration = import("./networkManagerSecurityAdminConfiguration").NetworkManagerSecurityAdminConfiguration;
export const NetworkManagerSecurityAdminConfiguration: typeof import("./networkManagerSecurityAdminConfiguration").NetworkManagerSecurityAdminConfiguration = null as any;
utilities.lazyLoad(exports, ["NetworkManagerSecurityAdminConfiguration"], () => require("./networkManagerSecurityAdminConfiguration"));

export { NetworkManagerStaticMemberArgs, NetworkManagerStaticMemberState } from "./networkManagerStaticMember";
export type NetworkManagerStaticMember = import("./networkManagerStaticMember").NetworkManagerStaticMember;
export const NetworkManagerStaticMember: typeof import("./networkManagerStaticMember").NetworkManagerStaticMember = null as any;
utilities.lazyLoad(exports, ["NetworkManagerStaticMember"], () => require("./networkManagerStaticMember"));

export { NetworkManagerSubscriptionConnectionArgs, NetworkManagerSubscriptionConnectionState } from "./networkManagerSubscriptionConnection";
export type NetworkManagerSubscriptionConnection = import("./networkManagerSubscriptionConnection").NetworkManagerSubscriptionConnection;
export const NetworkManagerSubscriptionConnection: typeof import("./networkManagerSubscriptionConnection").NetworkManagerSubscriptionConnection = null as any;
utilities.lazyLoad(exports, ["NetworkManagerSubscriptionConnection"], () => require("./networkManagerSubscriptionConnection"));

export { NetworkPacketCaptureArgs, NetworkPacketCaptureState } from "./networkPacketCapture";
export type NetworkPacketCapture = import("./networkPacketCapture").NetworkPacketCapture;
export const NetworkPacketCapture: typeof import("./networkPacketCapture").NetworkPacketCapture = null as any;
utilities.lazyLoad(exports, ["NetworkPacketCapture"], () => require("./networkPacketCapture"));

export { NetworkProfileArgs, NetworkProfileState } from "./networkProfile";
export type NetworkProfile = import("./networkProfile").NetworkProfile;
export const NetworkProfile: typeof import("./networkProfile").NetworkProfile = null as any;
utilities.lazyLoad(exports, ["NetworkProfile"], () => require("./networkProfile"));

export { NetworkSecurityGroupArgs, NetworkSecurityGroupState } from "./networkSecurityGroup";
export type NetworkSecurityGroup = import("./networkSecurityGroup").NetworkSecurityGroup;
export const NetworkSecurityGroup: typeof import("./networkSecurityGroup").NetworkSecurityGroup = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityGroup"], () => require("./networkSecurityGroup"));

export { NetworkSecurityRuleArgs, NetworkSecurityRuleState } from "./networkSecurityRule";
export type NetworkSecurityRule = import("./networkSecurityRule").NetworkSecurityRule;
export const NetworkSecurityRule: typeof import("./networkSecurityRule").NetworkSecurityRule = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityRule"], () => require("./networkSecurityRule"));

export { NetworkWatcherArgs, NetworkWatcherState } from "./networkWatcher";
export type NetworkWatcher = import("./networkWatcher").NetworkWatcher;
export const NetworkWatcher: typeof import("./networkWatcher").NetworkWatcher = null as any;
utilities.lazyLoad(exports, ["NetworkWatcher"], () => require("./networkWatcher"));

export { NetworkWatcherFlowLogArgs, NetworkWatcherFlowLogState } from "./networkWatcherFlowLog";
export type NetworkWatcherFlowLog = import("./networkWatcherFlowLog").NetworkWatcherFlowLog;
export const NetworkWatcherFlowLog: typeof import("./networkWatcherFlowLog").NetworkWatcherFlowLog = null as any;
utilities.lazyLoad(exports, ["NetworkWatcherFlowLog"], () => require("./networkWatcherFlowLog"));

export { NewRelicMonitorArgs, NewRelicMonitorState } from "./newRelicMonitor";
export type NewRelicMonitor = import("./newRelicMonitor").NewRelicMonitor;
export const NewRelicMonitor: typeof import("./newRelicMonitor").NewRelicMonitor = null as any;
utilities.lazyLoad(exports, ["NewRelicMonitor"], () => require("./newRelicMonitor"));

export { NewRelicTagRuleArgs, NewRelicTagRuleState } from "./newRelicTagRule";
export type NewRelicTagRule = import("./newRelicTagRule").NewRelicTagRule;
export const NewRelicTagRule: typeof import("./newRelicTagRule").NewRelicTagRule = null as any;
utilities.lazyLoad(exports, ["NewRelicTagRule"], () => require("./newRelicTagRule"));

export { NginxCertificateArgs, NginxCertificateState } from "./nginxCertificate";
export type NginxCertificate = import("./nginxCertificate").NginxCertificate;
export const NginxCertificate: typeof import("./nginxCertificate").NginxCertificate = null as any;
utilities.lazyLoad(exports, ["NginxCertificate"], () => require("./nginxCertificate"));

export { NginxConfigurationArgs, NginxConfigurationState } from "./nginxConfiguration";
export type NginxConfiguration = import("./nginxConfiguration").NginxConfiguration;
export const NginxConfiguration: typeof import("./nginxConfiguration").NginxConfiguration = null as any;
utilities.lazyLoad(exports, ["NginxConfiguration"], () => require("./nginxConfiguration"));

export { NginxDeploymentArgs, NginxDeploymentState } from "./nginxDeployment";
export type NginxDeployment = import("./nginxDeployment").NginxDeployment;
export const NginxDeployment: typeof import("./nginxDeployment").NginxDeployment = null as any;
utilities.lazyLoad(exports, ["NginxDeployment"], () => require("./nginxDeployment"));

export { NotificationHubArgs, NotificationHubState } from "./notificationHub";
export type NotificationHub = import("./notificationHub").NotificationHub;
export const NotificationHub: typeof import("./notificationHub").NotificationHub = null as any;
utilities.lazyLoad(exports, ["NotificationHub"], () => require("./notificationHub"));

export { NotificationHubAuthorizationRuleArgs, NotificationHubAuthorizationRuleState } from "./notificationHubAuthorizationRule";
export type NotificationHubAuthorizationRule = import("./notificationHubAuthorizationRule").NotificationHubAuthorizationRule;
export const NotificationHubAuthorizationRule: typeof import("./notificationHubAuthorizationRule").NotificationHubAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["NotificationHubAuthorizationRule"], () => require("./notificationHubAuthorizationRule"));

export { NotificationHubNamespaceArgs, NotificationHubNamespaceState } from "./notificationHubNamespace";
export type NotificationHubNamespace = import("./notificationHubNamespace").NotificationHubNamespace;
export const NotificationHubNamespace: typeof import("./notificationHubNamespace").NotificationHubNamespace = null as any;
utilities.lazyLoad(exports, ["NotificationHubNamespace"], () => require("./notificationHubNamespace"));

export { OrbitalContactArgs, OrbitalContactState } from "./orbitalContact";
export type OrbitalContact = import("./orbitalContact").OrbitalContact;
export const OrbitalContact: typeof import("./orbitalContact").OrbitalContact = null as any;
utilities.lazyLoad(exports, ["OrbitalContact"], () => require("./orbitalContact"));

export { OrbitalContactProfileArgs, OrbitalContactProfileState } from "./orbitalContactProfile";
export type OrbitalContactProfile = import("./orbitalContactProfile").OrbitalContactProfile;
export const OrbitalContactProfile: typeof import("./orbitalContactProfile").OrbitalContactProfile = null as any;
utilities.lazyLoad(exports, ["OrbitalContactProfile"], () => require("./orbitalContactProfile"));

export { OrbitalSpacecraftArgs, OrbitalSpacecraftState } from "./orbitalSpacecraft";
export type OrbitalSpacecraft = import("./orbitalSpacecraft").OrbitalSpacecraft;
export const OrbitalSpacecraft: typeof import("./orbitalSpacecraft").OrbitalSpacecraft = null as any;
utilities.lazyLoad(exports, ["OrbitalSpacecraft"], () => require("./orbitalSpacecraft"));

export { OrchestratedVirtualMachineScaleSetArgs, OrchestratedVirtualMachineScaleSetState } from "./orchestratedVirtualMachineScaleSet";
export type OrchestratedVirtualMachineScaleSet = import("./orchestratedVirtualMachineScaleSet").OrchestratedVirtualMachineScaleSet;
export const OrchestratedVirtualMachineScaleSet: typeof import("./orchestratedVirtualMachineScaleSet").OrchestratedVirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["OrchestratedVirtualMachineScaleSet"], () => require("./orchestratedVirtualMachineScaleSet"));

export { PaloAltoLocalRulestackArgs, PaloAltoLocalRulestackState } from "./paloAltoLocalRulestack";
export type PaloAltoLocalRulestack = import("./paloAltoLocalRulestack").PaloAltoLocalRulestack;
export const PaloAltoLocalRulestack: typeof import("./paloAltoLocalRulestack").PaloAltoLocalRulestack = null as any;
utilities.lazyLoad(exports, ["PaloAltoLocalRulestack"], () => require("./paloAltoLocalRulestack"));

export { PaloAltoLocalRulestackCertificateArgs, PaloAltoLocalRulestackCertificateState } from "./paloAltoLocalRulestackCertificate";
export type PaloAltoLocalRulestackCertificate = import("./paloAltoLocalRulestackCertificate").PaloAltoLocalRulestackCertificate;
export const PaloAltoLocalRulestackCertificate: typeof import("./paloAltoLocalRulestackCertificate").PaloAltoLocalRulestackCertificate = null as any;
utilities.lazyLoad(exports, ["PaloAltoLocalRulestackCertificate"], () => require("./paloAltoLocalRulestackCertificate"));

export { PaloAltoLocalRulestackFqdnListArgs, PaloAltoLocalRulestackFqdnListState } from "./paloAltoLocalRulestackFqdnList";
export type PaloAltoLocalRulestackFqdnList = import("./paloAltoLocalRulestackFqdnList").PaloAltoLocalRulestackFqdnList;
export const PaloAltoLocalRulestackFqdnList: typeof import("./paloAltoLocalRulestackFqdnList").PaloAltoLocalRulestackFqdnList = null as any;
utilities.lazyLoad(exports, ["PaloAltoLocalRulestackFqdnList"], () => require("./paloAltoLocalRulestackFqdnList"));

export { PaloAltoLocalRulestackOutboundTrustCertificateAssociationArgs, PaloAltoLocalRulestackOutboundTrustCertificateAssociationState } from "./paloAltoLocalRulestackOutboundTrustCertificateAssociation";
export type PaloAltoLocalRulestackOutboundTrustCertificateAssociation = import("./paloAltoLocalRulestackOutboundTrustCertificateAssociation").PaloAltoLocalRulestackOutboundTrustCertificateAssociation;
export const PaloAltoLocalRulestackOutboundTrustCertificateAssociation: typeof import("./paloAltoLocalRulestackOutboundTrustCertificateAssociation").PaloAltoLocalRulestackOutboundTrustCertificateAssociation = null as any;
utilities.lazyLoad(exports, ["PaloAltoLocalRulestackOutboundTrustCertificateAssociation"], () => require("./paloAltoLocalRulestackOutboundTrustCertificateAssociation"));

export { PaloAltoLocalRulestackOutboundUntrustCertificateAssociationArgs, PaloAltoLocalRulestackOutboundUntrustCertificateAssociationState } from "./paloAltoLocalRulestackOutboundUntrustCertificateAssociation";
export type PaloAltoLocalRulestackOutboundUntrustCertificateAssociation = import("./paloAltoLocalRulestackOutboundUntrustCertificateAssociation").PaloAltoLocalRulestackOutboundUntrustCertificateAssociation;
export const PaloAltoLocalRulestackOutboundUntrustCertificateAssociation: typeof import("./paloAltoLocalRulestackOutboundUntrustCertificateAssociation").PaloAltoLocalRulestackOutboundUntrustCertificateAssociation = null as any;
utilities.lazyLoad(exports, ["PaloAltoLocalRulestackOutboundUntrustCertificateAssociation"], () => require("./paloAltoLocalRulestackOutboundUntrustCertificateAssociation"));

export { PaloAltoLocalRulestackPrefixListArgs, PaloAltoLocalRulestackPrefixListState } from "./paloAltoLocalRulestackPrefixList";
export type PaloAltoLocalRulestackPrefixList = import("./paloAltoLocalRulestackPrefixList").PaloAltoLocalRulestackPrefixList;
export const PaloAltoLocalRulestackPrefixList: typeof import("./paloAltoLocalRulestackPrefixList").PaloAltoLocalRulestackPrefixList = null as any;
utilities.lazyLoad(exports, ["PaloAltoLocalRulestackPrefixList"], () => require("./paloAltoLocalRulestackPrefixList"));

export { PaloAltoLocalRulestackRuleArgs, PaloAltoLocalRulestackRuleState } from "./paloAltoLocalRulestackRule";
export type PaloAltoLocalRulestackRule = import("./paloAltoLocalRulestackRule").PaloAltoLocalRulestackRule;
export const PaloAltoLocalRulestackRule: typeof import("./paloAltoLocalRulestackRule").PaloAltoLocalRulestackRule = null as any;
utilities.lazyLoad(exports, ["PaloAltoLocalRulestackRule"], () => require("./paloAltoLocalRulestackRule"));

export { PaloAltoNextGenerationFirewallVirtualHubLocalRulestackArgs, PaloAltoNextGenerationFirewallVirtualHubLocalRulestackState } from "./paloAltoNextGenerationFirewallVirtualHubLocalRulestack";
export type PaloAltoNextGenerationFirewallVirtualHubLocalRulestack = import("./paloAltoNextGenerationFirewallVirtualHubLocalRulestack").PaloAltoNextGenerationFirewallVirtualHubLocalRulestack;
export const PaloAltoNextGenerationFirewallVirtualHubLocalRulestack: typeof import("./paloAltoNextGenerationFirewallVirtualHubLocalRulestack").PaloAltoNextGenerationFirewallVirtualHubLocalRulestack = null as any;
utilities.lazyLoad(exports, ["PaloAltoNextGenerationFirewallVirtualHubLocalRulestack"], () => require("./paloAltoNextGenerationFirewallVirtualHubLocalRulestack"));

export { PaloAltoNextGenerationFirewallVirtualHubPanoramaArgs, PaloAltoNextGenerationFirewallVirtualHubPanoramaState } from "./paloAltoNextGenerationFirewallVirtualHubPanorama";
export type PaloAltoNextGenerationFirewallVirtualHubPanorama = import("./paloAltoNextGenerationFirewallVirtualHubPanorama").PaloAltoNextGenerationFirewallVirtualHubPanorama;
export const PaloAltoNextGenerationFirewallVirtualHubPanorama: typeof import("./paloAltoNextGenerationFirewallVirtualHubPanorama").PaloAltoNextGenerationFirewallVirtualHubPanorama = null as any;
utilities.lazyLoad(exports, ["PaloAltoNextGenerationFirewallVirtualHubPanorama"], () => require("./paloAltoNextGenerationFirewallVirtualHubPanorama"));

export { PaloAltoNextGenerationFirewallVirtualNetworkLocalRulestackArgs, PaloAltoNextGenerationFirewallVirtualNetworkLocalRulestackState } from "./paloAltoNextGenerationFirewallVirtualNetworkLocalRulestack";
export type PaloAltoNextGenerationFirewallVirtualNetworkLocalRulestack = import("./paloAltoNextGenerationFirewallVirtualNetworkLocalRulestack").PaloAltoNextGenerationFirewallVirtualNetworkLocalRulestack;
export const PaloAltoNextGenerationFirewallVirtualNetworkLocalRulestack: typeof import("./paloAltoNextGenerationFirewallVirtualNetworkLocalRulestack").PaloAltoNextGenerationFirewallVirtualNetworkLocalRulestack = null as any;
utilities.lazyLoad(exports, ["PaloAltoNextGenerationFirewallVirtualNetworkLocalRulestack"], () => require("./paloAltoNextGenerationFirewallVirtualNetworkLocalRulestack"));

export { PaloAltoNextGenerationFirewallVirtualNetworkPanoramaArgs, PaloAltoNextGenerationFirewallVirtualNetworkPanoramaState } from "./paloAltoNextGenerationFirewallVirtualNetworkPanorama";
export type PaloAltoNextGenerationFirewallVirtualNetworkPanorama = import("./paloAltoNextGenerationFirewallVirtualNetworkPanorama").PaloAltoNextGenerationFirewallVirtualNetworkPanorama;
export const PaloAltoNextGenerationFirewallVirtualNetworkPanorama: typeof import("./paloAltoNextGenerationFirewallVirtualNetworkPanorama").PaloAltoNextGenerationFirewallVirtualNetworkPanorama = null as any;
utilities.lazyLoad(exports, ["PaloAltoNextGenerationFirewallVirtualNetworkPanorama"], () => require("./paloAltoNextGenerationFirewallVirtualNetworkPanorama"));

export { PaloAltoVirtualNetworkApplianceArgs, PaloAltoVirtualNetworkApplianceState } from "./paloAltoVirtualNetworkAppliance";
export type PaloAltoVirtualNetworkAppliance = import("./paloAltoVirtualNetworkAppliance").PaloAltoVirtualNetworkAppliance;
export const PaloAltoVirtualNetworkAppliance: typeof import("./paloAltoVirtualNetworkAppliance").PaloAltoVirtualNetworkAppliance = null as any;
utilities.lazyLoad(exports, ["PaloAltoVirtualNetworkAppliance"], () => require("./paloAltoVirtualNetworkAppliance"));

export { PimActiveRoleAssignmentArgs, PimActiveRoleAssignmentState } from "./pimActiveRoleAssignment";
export type PimActiveRoleAssignment = import("./pimActiveRoleAssignment").PimActiveRoleAssignment;
export const PimActiveRoleAssignment: typeof import("./pimActiveRoleAssignment").PimActiveRoleAssignment = null as any;
utilities.lazyLoad(exports, ["PimActiveRoleAssignment"], () => require("./pimActiveRoleAssignment"));

export { PimEligibleRoleAssignmentArgs, PimEligibleRoleAssignmentState } from "./pimEligibleRoleAssignment";
export type PimEligibleRoleAssignment = import("./pimEligibleRoleAssignment").PimEligibleRoleAssignment;
export const PimEligibleRoleAssignment: typeof import("./pimEligibleRoleAssignment").PimEligibleRoleAssignment = null as any;
utilities.lazyLoad(exports, ["PimEligibleRoleAssignment"], () => require("./pimEligibleRoleAssignment"));

export { PointToSiteVpnGatewayArgs, PointToSiteVpnGatewayState } from "./pointToSiteVpnGateway";
export type PointToSiteVpnGateway = import("./pointToSiteVpnGateway").PointToSiteVpnGateway;
export const PointToSiteVpnGateway: typeof import("./pointToSiteVpnGateway").PointToSiteVpnGateway = null as any;
utilities.lazyLoad(exports, ["PointToSiteVpnGateway"], () => require("./pointToSiteVpnGateway"));

export { PolicyDefinitionArgs, PolicyDefinitionState } from "./policyDefinition";
export type PolicyDefinition = import("./policyDefinition").PolicyDefinition;
export const PolicyDefinition: typeof import("./policyDefinition").PolicyDefinition = null as any;
utilities.lazyLoad(exports, ["PolicyDefinition"], () => require("./policyDefinition"));

export { PolicySetDefinitionArgs, PolicySetDefinitionState } from "./policySetDefinition";
export type PolicySetDefinition = import("./policySetDefinition").PolicySetDefinition;
export const PolicySetDefinition: typeof import("./policySetDefinition").PolicySetDefinition = null as any;
utilities.lazyLoad(exports, ["PolicySetDefinition"], () => require("./policySetDefinition"));

export { PolicyVirtualMachineConfigurationAssignmentArgs, PolicyVirtualMachineConfigurationAssignmentState } from "./policyVirtualMachineConfigurationAssignment";
export type PolicyVirtualMachineConfigurationAssignment = import("./policyVirtualMachineConfigurationAssignment").PolicyVirtualMachineConfigurationAssignment;
export const PolicyVirtualMachineConfigurationAssignment: typeof import("./policyVirtualMachineConfigurationAssignment").PolicyVirtualMachineConfigurationAssignment = null as any;
utilities.lazyLoad(exports, ["PolicyVirtualMachineConfigurationAssignment"], () => require("./policyVirtualMachineConfigurationAssignment"));

export { PortalDashboardArgs, PortalDashboardState } from "./portalDashboard";
export type PortalDashboard = import("./portalDashboard").PortalDashboard;
export const PortalDashboard: typeof import("./portalDashboard").PortalDashboard = null as any;
utilities.lazyLoad(exports, ["PortalDashboard"], () => require("./portalDashboard"));

export { PortalTenantConfigurationArgs, PortalTenantConfigurationState } from "./portalTenantConfiguration";
export type PortalTenantConfiguration = import("./portalTenantConfiguration").PortalTenantConfiguration;
export const PortalTenantConfiguration: typeof import("./portalTenantConfiguration").PortalTenantConfiguration = null as any;
utilities.lazyLoad(exports, ["PortalTenantConfiguration"], () => require("./portalTenantConfiguration"));

export { PostgresqlActiveDirectoryAdministratorArgs, PostgresqlActiveDirectoryAdministratorState } from "./postgresqlActiveDirectoryAdministrator";
export type PostgresqlActiveDirectoryAdministrator = import("./postgresqlActiveDirectoryAdministrator").PostgresqlActiveDirectoryAdministrator;
export const PostgresqlActiveDirectoryAdministrator: typeof import("./postgresqlActiveDirectoryAdministrator").PostgresqlActiveDirectoryAdministrator = null as any;
utilities.lazyLoad(exports, ["PostgresqlActiveDirectoryAdministrator"], () => require("./postgresqlActiveDirectoryAdministrator"));

export { PostgresqlConfigurationArgs, PostgresqlConfigurationState } from "./postgresqlConfiguration";
export type PostgresqlConfiguration = import("./postgresqlConfiguration").PostgresqlConfiguration;
export const PostgresqlConfiguration: typeof import("./postgresqlConfiguration").PostgresqlConfiguration = null as any;
utilities.lazyLoad(exports, ["PostgresqlConfiguration"], () => require("./postgresqlConfiguration"));

export { PostgresqlDatabaseArgs, PostgresqlDatabaseState } from "./postgresqlDatabase";
export type PostgresqlDatabase = import("./postgresqlDatabase").PostgresqlDatabase;
export const PostgresqlDatabase: typeof import("./postgresqlDatabase").PostgresqlDatabase = null as any;
utilities.lazyLoad(exports, ["PostgresqlDatabase"], () => require("./postgresqlDatabase"));

export { PostgresqlFirewallRuleArgs, PostgresqlFirewallRuleState } from "./postgresqlFirewallRule";
export type PostgresqlFirewallRule = import("./postgresqlFirewallRule").PostgresqlFirewallRule;
export const PostgresqlFirewallRule: typeof import("./postgresqlFirewallRule").PostgresqlFirewallRule = null as any;
utilities.lazyLoad(exports, ["PostgresqlFirewallRule"], () => require("./postgresqlFirewallRule"));

export { PostgresqlFlexibleServerArgs, PostgresqlFlexibleServerState } from "./postgresqlFlexibleServer";
export type PostgresqlFlexibleServer = import("./postgresqlFlexibleServer").PostgresqlFlexibleServer;
export const PostgresqlFlexibleServer: typeof import("./postgresqlFlexibleServer").PostgresqlFlexibleServer = null as any;
utilities.lazyLoad(exports, ["PostgresqlFlexibleServer"], () => require("./postgresqlFlexibleServer"));

export { PostgresqlFlexibleServerActiveDirectoryAdministratorArgs, PostgresqlFlexibleServerActiveDirectoryAdministratorState } from "./postgresqlFlexibleServerActiveDirectoryAdministrator";
export type PostgresqlFlexibleServerActiveDirectoryAdministrator = import("./postgresqlFlexibleServerActiveDirectoryAdministrator").PostgresqlFlexibleServerActiveDirectoryAdministrator;
export const PostgresqlFlexibleServerActiveDirectoryAdministrator: typeof import("./postgresqlFlexibleServerActiveDirectoryAdministrator").PostgresqlFlexibleServerActiveDirectoryAdministrator = null as any;
utilities.lazyLoad(exports, ["PostgresqlFlexibleServerActiveDirectoryAdministrator"], () => require("./postgresqlFlexibleServerActiveDirectoryAdministrator"));

export { PostgresqlFlexibleServerConfigurationArgs, PostgresqlFlexibleServerConfigurationState } from "./postgresqlFlexibleServerConfiguration";
export type PostgresqlFlexibleServerConfiguration = import("./postgresqlFlexibleServerConfiguration").PostgresqlFlexibleServerConfiguration;
export const PostgresqlFlexibleServerConfiguration: typeof import("./postgresqlFlexibleServerConfiguration").PostgresqlFlexibleServerConfiguration = null as any;
utilities.lazyLoad(exports, ["PostgresqlFlexibleServerConfiguration"], () => require("./postgresqlFlexibleServerConfiguration"));

export { PostgresqlFlexibleServerDatabaseArgs, PostgresqlFlexibleServerDatabaseState } from "./postgresqlFlexibleServerDatabase";
export type PostgresqlFlexibleServerDatabase = import("./postgresqlFlexibleServerDatabase").PostgresqlFlexibleServerDatabase;
export const PostgresqlFlexibleServerDatabase: typeof import("./postgresqlFlexibleServerDatabase").PostgresqlFlexibleServerDatabase = null as any;
utilities.lazyLoad(exports, ["PostgresqlFlexibleServerDatabase"], () => require("./postgresqlFlexibleServerDatabase"));

export { PostgresqlFlexibleServerFirewallRuleArgs, PostgresqlFlexibleServerFirewallRuleState } from "./postgresqlFlexibleServerFirewallRule";
export type PostgresqlFlexibleServerFirewallRule = import("./postgresqlFlexibleServerFirewallRule").PostgresqlFlexibleServerFirewallRule;
export const PostgresqlFlexibleServerFirewallRule: typeof import("./postgresqlFlexibleServerFirewallRule").PostgresqlFlexibleServerFirewallRule = null as any;
utilities.lazyLoad(exports, ["PostgresqlFlexibleServerFirewallRule"], () => require("./postgresqlFlexibleServerFirewallRule"));

export { PostgresqlFlexibleServerVirtualEndpointArgs, PostgresqlFlexibleServerVirtualEndpointState } from "./postgresqlFlexibleServerVirtualEndpoint";
export type PostgresqlFlexibleServerVirtualEndpoint = import("./postgresqlFlexibleServerVirtualEndpoint").PostgresqlFlexibleServerVirtualEndpoint;
export const PostgresqlFlexibleServerVirtualEndpoint: typeof import("./postgresqlFlexibleServerVirtualEndpoint").PostgresqlFlexibleServerVirtualEndpoint = null as any;
utilities.lazyLoad(exports, ["PostgresqlFlexibleServerVirtualEndpoint"], () => require("./postgresqlFlexibleServerVirtualEndpoint"));

export { PostgresqlServerArgs, PostgresqlServerState } from "./postgresqlServer";
export type PostgresqlServer = import("./postgresqlServer").PostgresqlServer;
export const PostgresqlServer: typeof import("./postgresqlServer").PostgresqlServer = null as any;
utilities.lazyLoad(exports, ["PostgresqlServer"], () => require("./postgresqlServer"));

export { PostgresqlServerKeyArgs, PostgresqlServerKeyState } from "./postgresqlServerKey";
export type PostgresqlServerKey = import("./postgresqlServerKey").PostgresqlServerKey;
export const PostgresqlServerKey: typeof import("./postgresqlServerKey").PostgresqlServerKey = null as any;
utilities.lazyLoad(exports, ["PostgresqlServerKey"], () => require("./postgresqlServerKey"));

export { PostgresqlVirtualNetworkRuleArgs, PostgresqlVirtualNetworkRuleState } from "./postgresqlVirtualNetworkRule";
export type PostgresqlVirtualNetworkRule = import("./postgresqlVirtualNetworkRule").PostgresqlVirtualNetworkRule;
export const PostgresqlVirtualNetworkRule: typeof import("./postgresqlVirtualNetworkRule").PostgresqlVirtualNetworkRule = null as any;
utilities.lazyLoad(exports, ["PostgresqlVirtualNetworkRule"], () => require("./postgresqlVirtualNetworkRule"));

export { PowerbiEmbeddedArgs, PowerbiEmbeddedState } from "./powerbiEmbedded";
export type PowerbiEmbedded = import("./powerbiEmbedded").PowerbiEmbedded;
export const PowerbiEmbedded: typeof import("./powerbiEmbedded").PowerbiEmbedded = null as any;
utilities.lazyLoad(exports, ["PowerbiEmbedded"], () => require("./powerbiEmbedded"));

export { PrivateDnsARecordArgs, PrivateDnsARecordState } from "./privateDnsARecord";
export type PrivateDnsARecord = import("./privateDnsARecord").PrivateDnsARecord;
export const PrivateDnsARecord: typeof import("./privateDnsARecord").PrivateDnsARecord = null as any;
utilities.lazyLoad(exports, ["PrivateDnsARecord"], () => require("./privateDnsARecord"));

export { PrivateDnsAaaaRecordArgs, PrivateDnsAaaaRecordState } from "./privateDnsAaaaRecord";
export type PrivateDnsAaaaRecord = import("./privateDnsAaaaRecord").PrivateDnsAaaaRecord;
export const PrivateDnsAaaaRecord: typeof import("./privateDnsAaaaRecord").PrivateDnsAaaaRecord = null as any;
utilities.lazyLoad(exports, ["PrivateDnsAaaaRecord"], () => require("./privateDnsAaaaRecord"));

export { PrivateDnsCnameRecordArgs, PrivateDnsCnameRecordState } from "./privateDnsCnameRecord";
export type PrivateDnsCnameRecord = import("./privateDnsCnameRecord").PrivateDnsCnameRecord;
export const PrivateDnsCnameRecord: typeof import("./privateDnsCnameRecord").PrivateDnsCnameRecord = null as any;
utilities.lazyLoad(exports, ["PrivateDnsCnameRecord"], () => require("./privateDnsCnameRecord"));

export { PrivateDnsMxRecordArgs, PrivateDnsMxRecordState } from "./privateDnsMxRecord";
export type PrivateDnsMxRecord = import("./privateDnsMxRecord").PrivateDnsMxRecord;
export const PrivateDnsMxRecord: typeof import("./privateDnsMxRecord").PrivateDnsMxRecord = null as any;
utilities.lazyLoad(exports, ["PrivateDnsMxRecord"], () => require("./privateDnsMxRecord"));

export { PrivateDnsPtrRecordArgs, PrivateDnsPtrRecordState } from "./privateDnsPtrRecord";
export type PrivateDnsPtrRecord = import("./privateDnsPtrRecord").PrivateDnsPtrRecord;
export const PrivateDnsPtrRecord: typeof import("./privateDnsPtrRecord").PrivateDnsPtrRecord = null as any;
utilities.lazyLoad(exports, ["PrivateDnsPtrRecord"], () => require("./privateDnsPtrRecord"));

export { PrivateDnsResolverArgs, PrivateDnsResolverState } from "./privateDnsResolver";
export type PrivateDnsResolver = import("./privateDnsResolver").PrivateDnsResolver;
export const PrivateDnsResolver: typeof import("./privateDnsResolver").PrivateDnsResolver = null as any;
utilities.lazyLoad(exports, ["PrivateDnsResolver"], () => require("./privateDnsResolver"));

export { PrivateDnsResolverDnsForwardingRulesetArgs, PrivateDnsResolverDnsForwardingRulesetState } from "./privateDnsResolverDnsForwardingRuleset";
export type PrivateDnsResolverDnsForwardingRuleset = import("./privateDnsResolverDnsForwardingRuleset").PrivateDnsResolverDnsForwardingRuleset;
export const PrivateDnsResolverDnsForwardingRuleset: typeof import("./privateDnsResolverDnsForwardingRuleset").PrivateDnsResolverDnsForwardingRuleset = null as any;
utilities.lazyLoad(exports, ["PrivateDnsResolverDnsForwardingRuleset"], () => require("./privateDnsResolverDnsForwardingRuleset"));

export { PrivateDnsResolverForwardingRuleArgs, PrivateDnsResolverForwardingRuleState } from "./privateDnsResolverForwardingRule";
export type PrivateDnsResolverForwardingRule = import("./privateDnsResolverForwardingRule").PrivateDnsResolverForwardingRule;
export const PrivateDnsResolverForwardingRule: typeof import("./privateDnsResolverForwardingRule").PrivateDnsResolverForwardingRule = null as any;
utilities.lazyLoad(exports, ["PrivateDnsResolverForwardingRule"], () => require("./privateDnsResolverForwardingRule"));

export { PrivateDnsResolverInboundEndpointArgs, PrivateDnsResolverInboundEndpointState } from "./privateDnsResolverInboundEndpoint";
export type PrivateDnsResolverInboundEndpoint = import("./privateDnsResolverInboundEndpoint").PrivateDnsResolverInboundEndpoint;
export const PrivateDnsResolverInboundEndpoint: typeof import("./privateDnsResolverInboundEndpoint").PrivateDnsResolverInboundEndpoint = null as any;
utilities.lazyLoad(exports, ["PrivateDnsResolverInboundEndpoint"], () => require("./privateDnsResolverInboundEndpoint"));

export { PrivateDnsResolverOutboundEndpointArgs, PrivateDnsResolverOutboundEndpointState } from "./privateDnsResolverOutboundEndpoint";
export type PrivateDnsResolverOutboundEndpoint = import("./privateDnsResolverOutboundEndpoint").PrivateDnsResolverOutboundEndpoint;
export const PrivateDnsResolverOutboundEndpoint: typeof import("./privateDnsResolverOutboundEndpoint").PrivateDnsResolverOutboundEndpoint = null as any;
utilities.lazyLoad(exports, ["PrivateDnsResolverOutboundEndpoint"], () => require("./privateDnsResolverOutboundEndpoint"));

export { PrivateDnsResolverVirtualNetworkLinkArgs, PrivateDnsResolverVirtualNetworkLinkState } from "./privateDnsResolverVirtualNetworkLink";
export type PrivateDnsResolverVirtualNetworkLink = import("./privateDnsResolverVirtualNetworkLink").PrivateDnsResolverVirtualNetworkLink;
export const PrivateDnsResolverVirtualNetworkLink: typeof import("./privateDnsResolverVirtualNetworkLink").PrivateDnsResolverVirtualNetworkLink = null as any;
utilities.lazyLoad(exports, ["PrivateDnsResolverVirtualNetworkLink"], () => require("./privateDnsResolverVirtualNetworkLink"));

export { PrivateDnsSrvRecordArgs, PrivateDnsSrvRecordState } from "./privateDnsSrvRecord";
export type PrivateDnsSrvRecord = import("./privateDnsSrvRecord").PrivateDnsSrvRecord;
export const PrivateDnsSrvRecord: typeof import("./privateDnsSrvRecord").PrivateDnsSrvRecord = null as any;
utilities.lazyLoad(exports, ["PrivateDnsSrvRecord"], () => require("./privateDnsSrvRecord"));

export { PrivateDnsTxtRecordArgs, PrivateDnsTxtRecordState } from "./privateDnsTxtRecord";
export type PrivateDnsTxtRecord = import("./privateDnsTxtRecord").PrivateDnsTxtRecord;
export const PrivateDnsTxtRecord: typeof import("./privateDnsTxtRecord").PrivateDnsTxtRecord = null as any;
utilities.lazyLoad(exports, ["PrivateDnsTxtRecord"], () => require("./privateDnsTxtRecord"));

export { PrivateDnsZoneArgs, PrivateDnsZoneState } from "./privateDnsZone";
export type PrivateDnsZone = import("./privateDnsZone").PrivateDnsZone;
export const PrivateDnsZone: typeof import("./privateDnsZone").PrivateDnsZone = null as any;
utilities.lazyLoad(exports, ["PrivateDnsZone"], () => require("./privateDnsZone"));

export { PrivateDnsZoneVirtualNetworkLinkArgs, PrivateDnsZoneVirtualNetworkLinkState } from "./privateDnsZoneVirtualNetworkLink";
export type PrivateDnsZoneVirtualNetworkLink = import("./privateDnsZoneVirtualNetworkLink").PrivateDnsZoneVirtualNetworkLink;
export const PrivateDnsZoneVirtualNetworkLink: typeof import("./privateDnsZoneVirtualNetworkLink").PrivateDnsZoneVirtualNetworkLink = null as any;
utilities.lazyLoad(exports, ["PrivateDnsZoneVirtualNetworkLink"], () => require("./privateDnsZoneVirtualNetworkLink"));

export { PrivateEndpointArgs, PrivateEndpointState } from "./privateEndpoint";
export type PrivateEndpoint = import("./privateEndpoint").PrivateEndpoint;
export const PrivateEndpoint: typeof import("./privateEndpoint").PrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["PrivateEndpoint"], () => require("./privateEndpoint"));

export { PrivateEndpointApplicationSecurityGroupAssociationArgs, PrivateEndpointApplicationSecurityGroupAssociationState } from "./privateEndpointApplicationSecurityGroupAssociation";
export type PrivateEndpointApplicationSecurityGroupAssociation = import("./privateEndpointApplicationSecurityGroupAssociation").PrivateEndpointApplicationSecurityGroupAssociation;
export const PrivateEndpointApplicationSecurityGroupAssociation: typeof import("./privateEndpointApplicationSecurityGroupAssociation").PrivateEndpointApplicationSecurityGroupAssociation = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointApplicationSecurityGroupAssociation"], () => require("./privateEndpointApplicationSecurityGroupAssociation"));

export { PrivateLinkServiceArgs, PrivateLinkServiceState } from "./privateLinkService";
export type PrivateLinkService = import("./privateLinkService").PrivateLinkService;
export const PrivateLinkService: typeof import("./privateLinkService").PrivateLinkService = null as any;
utilities.lazyLoad(exports, ["PrivateLinkService"], () => require("./privateLinkService"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProximityPlacementGroupArgs, ProximityPlacementGroupState } from "./proximityPlacementGroup";
export type ProximityPlacementGroup = import("./proximityPlacementGroup").ProximityPlacementGroup;
export const ProximityPlacementGroup: typeof import("./proximityPlacementGroup").ProximityPlacementGroup = null as any;
utilities.lazyLoad(exports, ["ProximityPlacementGroup"], () => require("./proximityPlacementGroup"));

export { PublicIpArgs, PublicIpState } from "./publicIp";
export type PublicIp = import("./publicIp").PublicIp;
export const PublicIp: typeof import("./publicIp").PublicIp = null as any;
utilities.lazyLoad(exports, ["PublicIp"], () => require("./publicIp"));

export { PublicIpPrefixArgs, PublicIpPrefixState } from "./publicIpPrefix";
export type PublicIpPrefix = import("./publicIpPrefix").PublicIpPrefix;
export const PublicIpPrefix: typeof import("./publicIpPrefix").PublicIpPrefix = null as any;
utilities.lazyLoad(exports, ["PublicIpPrefix"], () => require("./publicIpPrefix"));

export { PurviewAccountArgs, PurviewAccountState } from "./purviewAccount";
export type PurviewAccount = import("./purviewAccount").PurviewAccount;
export const PurviewAccount: typeof import("./purviewAccount").PurviewAccount = null as any;
utilities.lazyLoad(exports, ["PurviewAccount"], () => require("./purviewAccount"));

export { RecoveryServicesVaultArgs, RecoveryServicesVaultState } from "./recoveryServicesVault";
export type RecoveryServicesVault = import("./recoveryServicesVault").RecoveryServicesVault;
export const RecoveryServicesVault: typeof import("./recoveryServicesVault").RecoveryServicesVault = null as any;
utilities.lazyLoad(exports, ["RecoveryServicesVault"], () => require("./recoveryServicesVault"));

export { RecoveryServicesVaultResourceGuardAssociationArgs, RecoveryServicesVaultResourceGuardAssociationState } from "./recoveryServicesVaultResourceGuardAssociation";
export type RecoveryServicesVaultResourceGuardAssociation = import("./recoveryServicesVaultResourceGuardAssociation").RecoveryServicesVaultResourceGuardAssociation;
export const RecoveryServicesVaultResourceGuardAssociation: typeof import("./recoveryServicesVaultResourceGuardAssociation").RecoveryServicesVaultResourceGuardAssociation = null as any;
utilities.lazyLoad(exports, ["RecoveryServicesVaultResourceGuardAssociation"], () => require("./recoveryServicesVaultResourceGuardAssociation"));

export { RedhatOpenshiftClusterArgs, RedhatOpenshiftClusterState } from "./redhatOpenshiftCluster";
export type RedhatOpenshiftCluster = import("./redhatOpenshiftCluster").RedhatOpenshiftCluster;
export const RedhatOpenshiftCluster: typeof import("./redhatOpenshiftCluster").RedhatOpenshiftCluster = null as any;
utilities.lazyLoad(exports, ["RedhatOpenshiftCluster"], () => require("./redhatOpenshiftCluster"));

export { RedisCacheArgs, RedisCacheState } from "./redisCache";
export type RedisCache = import("./redisCache").RedisCache;
export const RedisCache: typeof import("./redisCache").RedisCache = null as any;
utilities.lazyLoad(exports, ["RedisCache"], () => require("./redisCache"));

export { RedisCacheAccessPolicyArgs, RedisCacheAccessPolicyState } from "./redisCacheAccessPolicy";
export type RedisCacheAccessPolicy = import("./redisCacheAccessPolicy").RedisCacheAccessPolicy;
export const RedisCacheAccessPolicy: typeof import("./redisCacheAccessPolicy").RedisCacheAccessPolicy = null as any;
utilities.lazyLoad(exports, ["RedisCacheAccessPolicy"], () => require("./redisCacheAccessPolicy"));

export { RedisCacheAccessPolicyAssignmentArgs, RedisCacheAccessPolicyAssignmentState } from "./redisCacheAccessPolicyAssignment";
export type RedisCacheAccessPolicyAssignment = import("./redisCacheAccessPolicyAssignment").RedisCacheAccessPolicyAssignment;
export const RedisCacheAccessPolicyAssignment: typeof import("./redisCacheAccessPolicyAssignment").RedisCacheAccessPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["RedisCacheAccessPolicyAssignment"], () => require("./redisCacheAccessPolicyAssignment"));

export { RedisEnterpriseClusterArgs, RedisEnterpriseClusterState } from "./redisEnterpriseCluster";
export type RedisEnterpriseCluster = import("./redisEnterpriseCluster").RedisEnterpriseCluster;
export const RedisEnterpriseCluster: typeof import("./redisEnterpriseCluster").RedisEnterpriseCluster = null as any;
utilities.lazyLoad(exports, ["RedisEnterpriseCluster"], () => require("./redisEnterpriseCluster"));

export { RedisEnterpriseDatabaseArgs, RedisEnterpriseDatabaseState } from "./redisEnterpriseDatabase";
export type RedisEnterpriseDatabase = import("./redisEnterpriseDatabase").RedisEnterpriseDatabase;
export const RedisEnterpriseDatabase: typeof import("./redisEnterpriseDatabase").RedisEnterpriseDatabase = null as any;
utilities.lazyLoad(exports, ["RedisEnterpriseDatabase"], () => require("./redisEnterpriseDatabase"));

export { RedisFirewallRuleArgs, RedisFirewallRuleState } from "./redisFirewallRule";
export type RedisFirewallRule = import("./redisFirewallRule").RedisFirewallRule;
export const RedisFirewallRule: typeof import("./redisFirewallRule").RedisFirewallRule = null as any;
utilities.lazyLoad(exports, ["RedisFirewallRule"], () => require("./redisFirewallRule"));

export { RedisLinkedServerArgs, RedisLinkedServerState } from "./redisLinkedServer";
export type RedisLinkedServer = import("./redisLinkedServer").RedisLinkedServer;
export const RedisLinkedServer: typeof import("./redisLinkedServer").RedisLinkedServer = null as any;
utilities.lazyLoad(exports, ["RedisLinkedServer"], () => require("./redisLinkedServer"));

export { RelayHybridConnectionArgs, RelayHybridConnectionState } from "./relayHybridConnection";
export type RelayHybridConnection = import("./relayHybridConnection").RelayHybridConnection;
export const RelayHybridConnection: typeof import("./relayHybridConnection").RelayHybridConnection = null as any;
utilities.lazyLoad(exports, ["RelayHybridConnection"], () => require("./relayHybridConnection"));

export { RelayHybridConnectionAuthorizationRuleArgs, RelayHybridConnectionAuthorizationRuleState } from "./relayHybridConnectionAuthorizationRule";
export type RelayHybridConnectionAuthorizationRule = import("./relayHybridConnectionAuthorizationRule").RelayHybridConnectionAuthorizationRule;
export const RelayHybridConnectionAuthorizationRule: typeof import("./relayHybridConnectionAuthorizationRule").RelayHybridConnectionAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["RelayHybridConnectionAuthorizationRule"], () => require("./relayHybridConnectionAuthorizationRule"));

export { RelayNamespaceArgs, RelayNamespaceState } from "./relayNamespace";
export type RelayNamespace = import("./relayNamespace").RelayNamespace;
export const RelayNamespace: typeof import("./relayNamespace").RelayNamespace = null as any;
utilities.lazyLoad(exports, ["RelayNamespace"], () => require("./relayNamespace"));

export { RelayNamespaceAuthorizationRuleArgs, RelayNamespaceAuthorizationRuleState } from "./relayNamespaceAuthorizationRule";
export type RelayNamespaceAuthorizationRule = import("./relayNamespaceAuthorizationRule").RelayNamespaceAuthorizationRule;
export const RelayNamespaceAuthorizationRule: typeof import("./relayNamespaceAuthorizationRule").RelayNamespaceAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["RelayNamespaceAuthorizationRule"], () => require("./relayNamespaceAuthorizationRule"));

export { ResourceDeploymentScriptAzureCliArgs, ResourceDeploymentScriptAzureCliState } from "./resourceDeploymentScriptAzureCli";
export type ResourceDeploymentScriptAzureCli = import("./resourceDeploymentScriptAzureCli").ResourceDeploymentScriptAzureCli;
export const ResourceDeploymentScriptAzureCli: typeof import("./resourceDeploymentScriptAzureCli").ResourceDeploymentScriptAzureCli = null as any;
utilities.lazyLoad(exports, ["ResourceDeploymentScriptAzureCli"], () => require("./resourceDeploymentScriptAzureCli"));

export { ResourceDeploymentScriptAzurePowerShellArgs, ResourceDeploymentScriptAzurePowerShellState } from "./resourceDeploymentScriptAzurePowerShell";
export type ResourceDeploymentScriptAzurePowerShell = import("./resourceDeploymentScriptAzurePowerShell").ResourceDeploymentScriptAzurePowerShell;
export const ResourceDeploymentScriptAzurePowerShell: typeof import("./resourceDeploymentScriptAzurePowerShell").ResourceDeploymentScriptAzurePowerShell = null as any;
utilities.lazyLoad(exports, ["ResourceDeploymentScriptAzurePowerShell"], () => require("./resourceDeploymentScriptAzurePowerShell"));

export { ResourceGroupArgs, ResourceGroupState } from "./resourceGroup";
export type ResourceGroup = import("./resourceGroup").ResourceGroup;
export const ResourceGroup: typeof import("./resourceGroup").ResourceGroup = null as any;
utilities.lazyLoad(exports, ["ResourceGroup"], () => require("./resourceGroup"));

export { ResourceGroupCostManagementExportArgs, ResourceGroupCostManagementExportState } from "./resourceGroupCostManagementExport";
export type ResourceGroupCostManagementExport = import("./resourceGroupCostManagementExport").ResourceGroupCostManagementExport;
export const ResourceGroupCostManagementExport: typeof import("./resourceGroupCostManagementExport").ResourceGroupCostManagementExport = null as any;
utilities.lazyLoad(exports, ["ResourceGroupCostManagementExport"], () => require("./resourceGroupCostManagementExport"));

export { ResourceGroupCostManagementViewArgs, ResourceGroupCostManagementViewState } from "./resourceGroupCostManagementView";
export type ResourceGroupCostManagementView = import("./resourceGroupCostManagementView").ResourceGroupCostManagementView;
export const ResourceGroupCostManagementView: typeof import("./resourceGroupCostManagementView").ResourceGroupCostManagementView = null as any;
utilities.lazyLoad(exports, ["ResourceGroupCostManagementView"], () => require("./resourceGroupCostManagementView"));

export { ResourceGroupPolicyAssignmentArgs, ResourceGroupPolicyAssignmentState } from "./resourceGroupPolicyAssignment";
export type ResourceGroupPolicyAssignment = import("./resourceGroupPolicyAssignment").ResourceGroupPolicyAssignment;
export const ResourceGroupPolicyAssignment: typeof import("./resourceGroupPolicyAssignment").ResourceGroupPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["ResourceGroupPolicyAssignment"], () => require("./resourceGroupPolicyAssignment"));

export { ResourceGroupPolicyExemptionArgs, ResourceGroupPolicyExemptionState } from "./resourceGroupPolicyExemption";
export type ResourceGroupPolicyExemption = import("./resourceGroupPolicyExemption").ResourceGroupPolicyExemption;
export const ResourceGroupPolicyExemption: typeof import("./resourceGroupPolicyExemption").ResourceGroupPolicyExemption = null as any;
utilities.lazyLoad(exports, ["ResourceGroupPolicyExemption"], () => require("./resourceGroupPolicyExemption"));

export { ResourceGroupPolicyRemediationArgs, ResourceGroupPolicyRemediationState } from "./resourceGroupPolicyRemediation";
export type ResourceGroupPolicyRemediation = import("./resourceGroupPolicyRemediation").ResourceGroupPolicyRemediation;
export const ResourceGroupPolicyRemediation: typeof import("./resourceGroupPolicyRemediation").ResourceGroupPolicyRemediation = null as any;
utilities.lazyLoad(exports, ["ResourceGroupPolicyRemediation"], () => require("./resourceGroupPolicyRemediation"));

export { ResourceGroupTemplateDeploymentArgs, ResourceGroupTemplateDeploymentState } from "./resourceGroupTemplateDeployment";
export type ResourceGroupTemplateDeployment = import("./resourceGroupTemplateDeployment").ResourceGroupTemplateDeployment;
export const ResourceGroupTemplateDeployment: typeof import("./resourceGroupTemplateDeployment").ResourceGroupTemplateDeployment = null as any;
utilities.lazyLoad(exports, ["ResourceGroupTemplateDeployment"], () => require("./resourceGroupTemplateDeployment"));

export { ResourceManagementPrivateLinkArgs, ResourceManagementPrivateLinkState } from "./resourceManagementPrivateLink";
export type ResourceManagementPrivateLink = import("./resourceManagementPrivateLink").ResourceManagementPrivateLink;
export const ResourceManagementPrivateLink: typeof import("./resourceManagementPrivateLink").ResourceManagementPrivateLink = null as any;
utilities.lazyLoad(exports, ["ResourceManagementPrivateLink"], () => require("./resourceManagementPrivateLink"));

export { ResourceManagementPrivateLinkAssociationArgs, ResourceManagementPrivateLinkAssociationState } from "./resourceManagementPrivateLinkAssociation";
export type ResourceManagementPrivateLinkAssociation = import("./resourceManagementPrivateLinkAssociation").ResourceManagementPrivateLinkAssociation;
export const ResourceManagementPrivateLinkAssociation: typeof import("./resourceManagementPrivateLinkAssociation").ResourceManagementPrivateLinkAssociation = null as any;
utilities.lazyLoad(exports, ["ResourceManagementPrivateLinkAssociation"], () => require("./resourceManagementPrivateLinkAssociation"));

export { ResourcePolicyAssignmentArgs, ResourcePolicyAssignmentState } from "./resourcePolicyAssignment";
export type ResourcePolicyAssignment = import("./resourcePolicyAssignment").ResourcePolicyAssignment;
export const ResourcePolicyAssignment: typeof import("./resourcePolicyAssignment").ResourcePolicyAssignment = null as any;
utilities.lazyLoad(exports, ["ResourcePolicyAssignment"], () => require("./resourcePolicyAssignment"));

export { ResourcePolicyExemptionArgs, ResourcePolicyExemptionState } from "./resourcePolicyExemption";
export type ResourcePolicyExemption = import("./resourcePolicyExemption").ResourcePolicyExemption;
export const ResourcePolicyExemption: typeof import("./resourcePolicyExemption").ResourcePolicyExemption = null as any;
utilities.lazyLoad(exports, ["ResourcePolicyExemption"], () => require("./resourcePolicyExemption"));

export { ResourcePolicyRemediationArgs, ResourcePolicyRemediationState } from "./resourcePolicyRemediation";
export type ResourcePolicyRemediation = import("./resourcePolicyRemediation").ResourcePolicyRemediation;
export const ResourcePolicyRemediation: typeof import("./resourcePolicyRemediation").ResourcePolicyRemediation = null as any;
utilities.lazyLoad(exports, ["ResourcePolicyRemediation"], () => require("./resourcePolicyRemediation"));

export { ResourceProviderRegistrationArgs, ResourceProviderRegistrationState } from "./resourceProviderRegistration";
export type ResourceProviderRegistration = import("./resourceProviderRegistration").ResourceProviderRegistration;
export const ResourceProviderRegistration: typeof import("./resourceProviderRegistration").ResourceProviderRegistration = null as any;
utilities.lazyLoad(exports, ["ResourceProviderRegistration"], () => require("./resourceProviderRegistration"));

export { RestorePointCollectionArgs, RestorePointCollectionState } from "./restorePointCollection";
export type RestorePointCollection = import("./restorePointCollection").RestorePointCollection;
export const RestorePointCollection: typeof import("./restorePointCollection").RestorePointCollection = null as any;
utilities.lazyLoad(exports, ["RestorePointCollection"], () => require("./restorePointCollection"));

export { RoleAssignmentArgs, RoleAssignmentState } from "./roleAssignment";
export type RoleAssignment = import("./roleAssignment").RoleAssignment;
export const RoleAssignment: typeof import("./roleAssignment").RoleAssignment = null as any;
utilities.lazyLoad(exports, ["RoleAssignment"], () => require("./roleAssignment"));

export { RoleDefinitionArgs, RoleDefinitionState } from "./roleDefinition";
export type RoleDefinition = import("./roleDefinition").RoleDefinition;
export const RoleDefinition: typeof import("./roleDefinition").RoleDefinition = null as any;
utilities.lazyLoad(exports, ["RoleDefinition"], () => require("./roleDefinition"));

export { RoleManagementPolicyArgs, RoleManagementPolicyState } from "./roleManagementPolicy";
export type RoleManagementPolicy = import("./roleManagementPolicy").RoleManagementPolicy;
export const RoleManagementPolicy: typeof import("./roleManagementPolicy").RoleManagementPolicy = null as any;
utilities.lazyLoad(exports, ["RoleManagementPolicy"], () => require("./roleManagementPolicy"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RouteFilterArgs, RouteFilterState } from "./routeFilter";
export type RouteFilter = import("./routeFilter").RouteFilter;
export const RouteFilter: typeof import("./routeFilter").RouteFilter = null as any;
utilities.lazyLoad(exports, ["RouteFilter"], () => require("./routeFilter"));

export { RouteMapArgs, RouteMapState } from "./routeMap";
export type RouteMap = import("./routeMap").RouteMap;
export const RouteMap: typeof import("./routeMap").RouteMap = null as any;
utilities.lazyLoad(exports, ["RouteMap"], () => require("./routeMap"));

export { RouteServerArgs, RouteServerState } from "./routeServer";
export type RouteServer = import("./routeServer").RouteServer;
export const RouteServer: typeof import("./routeServer").RouteServer = null as any;
utilities.lazyLoad(exports, ["RouteServer"], () => require("./routeServer"));

export { RouteServerBgpConnectionArgs, RouteServerBgpConnectionState } from "./routeServerBgpConnection";
export type RouteServerBgpConnection = import("./routeServerBgpConnection").RouteServerBgpConnection;
export const RouteServerBgpConnection: typeof import("./routeServerBgpConnection").RouteServerBgpConnection = null as any;
utilities.lazyLoad(exports, ["RouteServerBgpConnection"], () => require("./routeServerBgpConnection"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { SearchServiceArgs, SearchServiceState } from "./searchService";
export type SearchService = import("./searchService").SearchService;
export const SearchService: typeof import("./searchService").SearchService = null as any;
utilities.lazyLoad(exports, ["SearchService"], () => require("./searchService"));

export { SearchSharedPrivateLinkServiceArgs, SearchSharedPrivateLinkServiceState } from "./searchSharedPrivateLinkService";
export type SearchSharedPrivateLinkService = import("./searchSharedPrivateLinkService").SearchSharedPrivateLinkService;
export const SearchSharedPrivateLinkService: typeof import("./searchSharedPrivateLinkService").SearchSharedPrivateLinkService = null as any;
utilities.lazyLoad(exports, ["SearchSharedPrivateLinkService"], () => require("./searchSharedPrivateLinkService"));

export { SecurityCenterAssessmentArgs, SecurityCenterAssessmentState } from "./securityCenterAssessment";
export type SecurityCenterAssessment = import("./securityCenterAssessment").SecurityCenterAssessment;
export const SecurityCenterAssessment: typeof import("./securityCenterAssessment").SecurityCenterAssessment = null as any;
utilities.lazyLoad(exports, ["SecurityCenterAssessment"], () => require("./securityCenterAssessment"));

export { SecurityCenterAssessmentPolicyArgs, SecurityCenterAssessmentPolicyState } from "./securityCenterAssessmentPolicy";
export type SecurityCenterAssessmentPolicy = import("./securityCenterAssessmentPolicy").SecurityCenterAssessmentPolicy;
export const SecurityCenterAssessmentPolicy: typeof import("./securityCenterAssessmentPolicy").SecurityCenterAssessmentPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityCenterAssessmentPolicy"], () => require("./securityCenterAssessmentPolicy"));

export { SecurityCenterAutoProvisioningArgs, SecurityCenterAutoProvisioningState } from "./securityCenterAutoProvisioning";
export type SecurityCenterAutoProvisioning = import("./securityCenterAutoProvisioning").SecurityCenterAutoProvisioning;
export const SecurityCenterAutoProvisioning: typeof import("./securityCenterAutoProvisioning").SecurityCenterAutoProvisioning = null as any;
utilities.lazyLoad(exports, ["SecurityCenterAutoProvisioning"], () => require("./securityCenterAutoProvisioning"));

export { SecurityCenterAutomationArgs, SecurityCenterAutomationState } from "./securityCenterAutomation";
export type SecurityCenterAutomation = import("./securityCenterAutomation").SecurityCenterAutomation;
export const SecurityCenterAutomation: typeof import("./securityCenterAutomation").SecurityCenterAutomation = null as any;
utilities.lazyLoad(exports, ["SecurityCenterAutomation"], () => require("./securityCenterAutomation"));

export { SecurityCenterContactArgs, SecurityCenterContactState } from "./securityCenterContact";
export type SecurityCenterContact = import("./securityCenterContact").SecurityCenterContact;
export const SecurityCenterContact: typeof import("./securityCenterContact").SecurityCenterContact = null as any;
utilities.lazyLoad(exports, ["SecurityCenterContact"], () => require("./securityCenterContact"));

export { SecurityCenterServerVulnerabilityAssessmentVirtualMachineArgs, SecurityCenterServerVulnerabilityAssessmentVirtualMachineState } from "./securityCenterServerVulnerabilityAssessmentVirtualMachine";
export type SecurityCenterServerVulnerabilityAssessmentVirtualMachine = import("./securityCenterServerVulnerabilityAssessmentVirtualMachine").SecurityCenterServerVulnerabilityAssessmentVirtualMachine;
export const SecurityCenterServerVulnerabilityAssessmentVirtualMachine: typeof import("./securityCenterServerVulnerabilityAssessmentVirtualMachine").SecurityCenterServerVulnerabilityAssessmentVirtualMachine = null as any;
utilities.lazyLoad(exports, ["SecurityCenterServerVulnerabilityAssessmentVirtualMachine"], () => require("./securityCenterServerVulnerabilityAssessmentVirtualMachine"));

export { SecurityCenterServerVulnerabilityAssessmentsSettingArgs, SecurityCenterServerVulnerabilityAssessmentsSettingState } from "./securityCenterServerVulnerabilityAssessmentsSetting";
export type SecurityCenterServerVulnerabilityAssessmentsSetting = import("./securityCenterServerVulnerabilityAssessmentsSetting").SecurityCenterServerVulnerabilityAssessmentsSetting;
export const SecurityCenterServerVulnerabilityAssessmentsSetting: typeof import("./securityCenterServerVulnerabilityAssessmentsSetting").SecurityCenterServerVulnerabilityAssessmentsSetting = null as any;
utilities.lazyLoad(exports, ["SecurityCenterServerVulnerabilityAssessmentsSetting"], () => require("./securityCenterServerVulnerabilityAssessmentsSetting"));

export { SecurityCenterSettingArgs, SecurityCenterSettingState } from "./securityCenterSetting";
export type SecurityCenterSetting = import("./securityCenterSetting").SecurityCenterSetting;
export const SecurityCenterSetting: typeof import("./securityCenterSetting").SecurityCenterSetting = null as any;
utilities.lazyLoad(exports, ["SecurityCenterSetting"], () => require("./securityCenterSetting"));

export { SecurityCenterStorageDefenderArgs, SecurityCenterStorageDefenderState } from "./securityCenterStorageDefender";
export type SecurityCenterStorageDefender = import("./securityCenterStorageDefender").SecurityCenterStorageDefender;
export const SecurityCenterStorageDefender: typeof import("./securityCenterStorageDefender").SecurityCenterStorageDefender = null as any;
utilities.lazyLoad(exports, ["SecurityCenterStorageDefender"], () => require("./securityCenterStorageDefender"));

export { SecurityCenterSubscriptionPricingArgs, SecurityCenterSubscriptionPricingState } from "./securityCenterSubscriptionPricing";
export type SecurityCenterSubscriptionPricing = import("./securityCenterSubscriptionPricing").SecurityCenterSubscriptionPricing;
export const SecurityCenterSubscriptionPricing: typeof import("./securityCenterSubscriptionPricing").SecurityCenterSubscriptionPricing = null as any;
utilities.lazyLoad(exports, ["SecurityCenterSubscriptionPricing"], () => require("./securityCenterSubscriptionPricing"));

export { SecurityCenterWorkspaceArgs, SecurityCenterWorkspaceState } from "./securityCenterWorkspace";
export type SecurityCenterWorkspace = import("./securityCenterWorkspace").SecurityCenterWorkspace;
export const SecurityCenterWorkspace: typeof import("./securityCenterWorkspace").SecurityCenterWorkspace = null as any;
utilities.lazyLoad(exports, ["SecurityCenterWorkspace"], () => require("./securityCenterWorkspace"));

export { SentinelAlertRuleAnomalyBuiltInArgs, SentinelAlertRuleAnomalyBuiltInState } from "./sentinelAlertRuleAnomalyBuiltIn";
export type SentinelAlertRuleAnomalyBuiltIn = import("./sentinelAlertRuleAnomalyBuiltIn").SentinelAlertRuleAnomalyBuiltIn;
export const SentinelAlertRuleAnomalyBuiltIn: typeof import("./sentinelAlertRuleAnomalyBuiltIn").SentinelAlertRuleAnomalyBuiltIn = null as any;
utilities.lazyLoad(exports, ["SentinelAlertRuleAnomalyBuiltIn"], () => require("./sentinelAlertRuleAnomalyBuiltIn"));

export { SentinelAlertRuleAnomalyDuplicateArgs, SentinelAlertRuleAnomalyDuplicateState } from "./sentinelAlertRuleAnomalyDuplicate";
export type SentinelAlertRuleAnomalyDuplicate = import("./sentinelAlertRuleAnomalyDuplicate").SentinelAlertRuleAnomalyDuplicate;
export const SentinelAlertRuleAnomalyDuplicate: typeof import("./sentinelAlertRuleAnomalyDuplicate").SentinelAlertRuleAnomalyDuplicate = null as any;
utilities.lazyLoad(exports, ["SentinelAlertRuleAnomalyDuplicate"], () => require("./sentinelAlertRuleAnomalyDuplicate"));

export { SentinelAlertRuleFusionArgs, SentinelAlertRuleFusionState } from "./sentinelAlertRuleFusion";
export type SentinelAlertRuleFusion = import("./sentinelAlertRuleFusion").SentinelAlertRuleFusion;
export const SentinelAlertRuleFusion: typeof import("./sentinelAlertRuleFusion").SentinelAlertRuleFusion = null as any;
utilities.lazyLoad(exports, ["SentinelAlertRuleFusion"], () => require("./sentinelAlertRuleFusion"));

export { SentinelAlertRuleMachineLearningBehaviorAnalyticsArgs, SentinelAlertRuleMachineLearningBehaviorAnalyticsState } from "./sentinelAlertRuleMachineLearningBehaviorAnalytics";
export type SentinelAlertRuleMachineLearningBehaviorAnalytics = import("./sentinelAlertRuleMachineLearningBehaviorAnalytics").SentinelAlertRuleMachineLearningBehaviorAnalytics;
export const SentinelAlertRuleMachineLearningBehaviorAnalytics: typeof import("./sentinelAlertRuleMachineLearningBehaviorAnalytics").SentinelAlertRuleMachineLearningBehaviorAnalytics = null as any;
utilities.lazyLoad(exports, ["SentinelAlertRuleMachineLearningBehaviorAnalytics"], () => require("./sentinelAlertRuleMachineLearningBehaviorAnalytics"));

export { SentinelAlertRuleMsSecurityIncidentArgs, SentinelAlertRuleMsSecurityIncidentState } from "./sentinelAlertRuleMsSecurityIncident";
export type SentinelAlertRuleMsSecurityIncident = import("./sentinelAlertRuleMsSecurityIncident").SentinelAlertRuleMsSecurityIncident;
export const SentinelAlertRuleMsSecurityIncident: typeof import("./sentinelAlertRuleMsSecurityIncident").SentinelAlertRuleMsSecurityIncident = null as any;
utilities.lazyLoad(exports, ["SentinelAlertRuleMsSecurityIncident"], () => require("./sentinelAlertRuleMsSecurityIncident"));

export { SentinelAlertRuleNrtArgs, SentinelAlertRuleNrtState } from "./sentinelAlertRuleNrt";
export type SentinelAlertRuleNrt = import("./sentinelAlertRuleNrt").SentinelAlertRuleNrt;
export const SentinelAlertRuleNrt: typeof import("./sentinelAlertRuleNrt").SentinelAlertRuleNrt = null as any;
utilities.lazyLoad(exports, ["SentinelAlertRuleNrt"], () => require("./sentinelAlertRuleNrt"));

export { SentinelAlertRuleScheduledArgs, SentinelAlertRuleScheduledState } from "./sentinelAlertRuleScheduled";
export type SentinelAlertRuleScheduled = import("./sentinelAlertRuleScheduled").SentinelAlertRuleScheduled;
export const SentinelAlertRuleScheduled: typeof import("./sentinelAlertRuleScheduled").SentinelAlertRuleScheduled = null as any;
utilities.lazyLoad(exports, ["SentinelAlertRuleScheduled"], () => require("./sentinelAlertRuleScheduled"));

export { SentinelAlertRuleThreatIntelligenceArgs, SentinelAlertRuleThreatIntelligenceState } from "./sentinelAlertRuleThreatIntelligence";
export type SentinelAlertRuleThreatIntelligence = import("./sentinelAlertRuleThreatIntelligence").SentinelAlertRuleThreatIntelligence;
export const SentinelAlertRuleThreatIntelligence: typeof import("./sentinelAlertRuleThreatIntelligence").SentinelAlertRuleThreatIntelligence = null as any;
utilities.lazyLoad(exports, ["SentinelAlertRuleThreatIntelligence"], () => require("./sentinelAlertRuleThreatIntelligence"));

export { SentinelAutomationRuleArgs, SentinelAutomationRuleState } from "./sentinelAutomationRule";
export type SentinelAutomationRule = import("./sentinelAutomationRule").SentinelAutomationRule;
export const SentinelAutomationRule: typeof import("./sentinelAutomationRule").SentinelAutomationRule = null as any;
utilities.lazyLoad(exports, ["SentinelAutomationRule"], () => require("./sentinelAutomationRule"));

export { SentinelDataConnectorAwsCloudTrailArgs, SentinelDataConnectorAwsCloudTrailState } from "./sentinelDataConnectorAwsCloudTrail";
export type SentinelDataConnectorAwsCloudTrail = import("./sentinelDataConnectorAwsCloudTrail").SentinelDataConnectorAwsCloudTrail;
export const SentinelDataConnectorAwsCloudTrail: typeof import("./sentinelDataConnectorAwsCloudTrail").SentinelDataConnectorAwsCloudTrail = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorAwsCloudTrail"], () => require("./sentinelDataConnectorAwsCloudTrail"));

export { SentinelDataConnectorAwsS3Args, SentinelDataConnectorAwsS3State } from "./sentinelDataConnectorAwsS3";
export type SentinelDataConnectorAwsS3 = import("./sentinelDataConnectorAwsS3").SentinelDataConnectorAwsS3;
export const SentinelDataConnectorAwsS3: typeof import("./sentinelDataConnectorAwsS3").SentinelDataConnectorAwsS3 = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorAwsS3"], () => require("./sentinelDataConnectorAwsS3"));

export { SentinelDataConnectorAzureActiveDirectoryArgs, SentinelDataConnectorAzureActiveDirectoryState } from "./sentinelDataConnectorAzureActiveDirectory";
export type SentinelDataConnectorAzureActiveDirectory = import("./sentinelDataConnectorAzureActiveDirectory").SentinelDataConnectorAzureActiveDirectory;
export const SentinelDataConnectorAzureActiveDirectory: typeof import("./sentinelDataConnectorAzureActiveDirectory").SentinelDataConnectorAzureActiveDirectory = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorAzureActiveDirectory"], () => require("./sentinelDataConnectorAzureActiveDirectory"));

export { SentinelDataConnectorAzureAdvancedThreatProtectionArgs, SentinelDataConnectorAzureAdvancedThreatProtectionState } from "./sentinelDataConnectorAzureAdvancedThreatProtection";
export type SentinelDataConnectorAzureAdvancedThreatProtection = import("./sentinelDataConnectorAzureAdvancedThreatProtection").SentinelDataConnectorAzureAdvancedThreatProtection;
export const SentinelDataConnectorAzureAdvancedThreatProtection: typeof import("./sentinelDataConnectorAzureAdvancedThreatProtection").SentinelDataConnectorAzureAdvancedThreatProtection = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorAzureAdvancedThreatProtection"], () => require("./sentinelDataConnectorAzureAdvancedThreatProtection"));

export { SentinelDataConnectorAzureSecurityCenterArgs, SentinelDataConnectorAzureSecurityCenterState } from "./sentinelDataConnectorAzureSecurityCenter";
export type SentinelDataConnectorAzureSecurityCenter = import("./sentinelDataConnectorAzureSecurityCenter").SentinelDataConnectorAzureSecurityCenter;
export const SentinelDataConnectorAzureSecurityCenter: typeof import("./sentinelDataConnectorAzureSecurityCenter").SentinelDataConnectorAzureSecurityCenter = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorAzureSecurityCenter"], () => require("./sentinelDataConnectorAzureSecurityCenter"));

export { SentinelDataConnectorDynamics365Args, SentinelDataConnectorDynamics365State } from "./sentinelDataConnectorDynamics365";
export type SentinelDataConnectorDynamics365 = import("./sentinelDataConnectorDynamics365").SentinelDataConnectorDynamics365;
export const SentinelDataConnectorDynamics365: typeof import("./sentinelDataConnectorDynamics365").SentinelDataConnectorDynamics365 = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorDynamics365"], () => require("./sentinelDataConnectorDynamics365"));

export { SentinelDataConnectorIotArgs, SentinelDataConnectorIotState } from "./sentinelDataConnectorIot";
export type SentinelDataConnectorIot = import("./sentinelDataConnectorIot").SentinelDataConnectorIot;
export const SentinelDataConnectorIot: typeof import("./sentinelDataConnectorIot").SentinelDataConnectorIot = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorIot"], () => require("./sentinelDataConnectorIot"));

export { SentinelDataConnectorMicrosoftCloudAppSecurityArgs, SentinelDataConnectorMicrosoftCloudAppSecurityState } from "./sentinelDataConnectorMicrosoftCloudAppSecurity";
export type SentinelDataConnectorMicrosoftCloudAppSecurity = import("./sentinelDataConnectorMicrosoftCloudAppSecurity").SentinelDataConnectorMicrosoftCloudAppSecurity;
export const SentinelDataConnectorMicrosoftCloudAppSecurity: typeof import("./sentinelDataConnectorMicrosoftCloudAppSecurity").SentinelDataConnectorMicrosoftCloudAppSecurity = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorMicrosoftCloudAppSecurity"], () => require("./sentinelDataConnectorMicrosoftCloudAppSecurity"));

export { SentinelDataConnectorMicrosoftDefenderAdvancedThreatProtectionArgs, SentinelDataConnectorMicrosoftDefenderAdvancedThreatProtectionState } from "./sentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection";
export type SentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection = import("./sentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection").SentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection;
export const SentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection: typeof import("./sentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection").SentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection"], () => require("./sentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection"));

export { SentinelDataConnectorMicrosoftThreatIntelligenceArgs, SentinelDataConnectorMicrosoftThreatIntelligenceState } from "./sentinelDataConnectorMicrosoftThreatIntelligence";
export type SentinelDataConnectorMicrosoftThreatIntelligence = import("./sentinelDataConnectorMicrosoftThreatIntelligence").SentinelDataConnectorMicrosoftThreatIntelligence;
export const SentinelDataConnectorMicrosoftThreatIntelligence: typeof import("./sentinelDataConnectorMicrosoftThreatIntelligence").SentinelDataConnectorMicrosoftThreatIntelligence = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorMicrosoftThreatIntelligence"], () => require("./sentinelDataConnectorMicrosoftThreatIntelligence"));

export { SentinelDataConnectorMicrosoftThreatProtectionArgs, SentinelDataConnectorMicrosoftThreatProtectionState } from "./sentinelDataConnectorMicrosoftThreatProtection";
export type SentinelDataConnectorMicrosoftThreatProtection = import("./sentinelDataConnectorMicrosoftThreatProtection").SentinelDataConnectorMicrosoftThreatProtection;
export const SentinelDataConnectorMicrosoftThreatProtection: typeof import("./sentinelDataConnectorMicrosoftThreatProtection").SentinelDataConnectorMicrosoftThreatProtection = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorMicrosoftThreatProtection"], () => require("./sentinelDataConnectorMicrosoftThreatProtection"));

export { SentinelDataConnectorOffice365Args, SentinelDataConnectorOffice365State } from "./sentinelDataConnectorOffice365";
export type SentinelDataConnectorOffice365 = import("./sentinelDataConnectorOffice365").SentinelDataConnectorOffice365;
export const SentinelDataConnectorOffice365: typeof import("./sentinelDataConnectorOffice365").SentinelDataConnectorOffice365 = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorOffice365"], () => require("./sentinelDataConnectorOffice365"));

export { SentinelDataConnectorOffice365ProjectArgs, SentinelDataConnectorOffice365ProjectState } from "./sentinelDataConnectorOffice365Project";
export type SentinelDataConnectorOffice365Project = import("./sentinelDataConnectorOffice365Project").SentinelDataConnectorOffice365Project;
export const SentinelDataConnectorOffice365Project: typeof import("./sentinelDataConnectorOffice365Project").SentinelDataConnectorOffice365Project = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorOffice365Project"], () => require("./sentinelDataConnectorOffice365Project"));

export { SentinelDataConnectorOfficeAtpArgs, SentinelDataConnectorOfficeAtpState } from "./sentinelDataConnectorOfficeAtp";
export type SentinelDataConnectorOfficeAtp = import("./sentinelDataConnectorOfficeAtp").SentinelDataConnectorOfficeAtp;
export const SentinelDataConnectorOfficeAtp: typeof import("./sentinelDataConnectorOfficeAtp").SentinelDataConnectorOfficeAtp = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorOfficeAtp"], () => require("./sentinelDataConnectorOfficeAtp"));

export { SentinelDataConnectorOfficeIrmArgs, SentinelDataConnectorOfficeIrmState } from "./sentinelDataConnectorOfficeIrm";
export type SentinelDataConnectorOfficeIrm = import("./sentinelDataConnectorOfficeIrm").SentinelDataConnectorOfficeIrm;
export const SentinelDataConnectorOfficeIrm: typeof import("./sentinelDataConnectorOfficeIrm").SentinelDataConnectorOfficeIrm = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorOfficeIrm"], () => require("./sentinelDataConnectorOfficeIrm"));

export { SentinelDataConnectorOfficePowerBiArgs, SentinelDataConnectorOfficePowerBiState } from "./sentinelDataConnectorOfficePowerBi";
export type SentinelDataConnectorOfficePowerBi = import("./sentinelDataConnectorOfficePowerBi").SentinelDataConnectorOfficePowerBi;
export const SentinelDataConnectorOfficePowerBi: typeof import("./sentinelDataConnectorOfficePowerBi").SentinelDataConnectorOfficePowerBi = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorOfficePowerBi"], () => require("./sentinelDataConnectorOfficePowerBi"));

export { SentinelDataConnectorThreatIntelligenceArgs, SentinelDataConnectorThreatIntelligenceState } from "./sentinelDataConnectorThreatIntelligence";
export type SentinelDataConnectorThreatIntelligence = import("./sentinelDataConnectorThreatIntelligence").SentinelDataConnectorThreatIntelligence;
export const SentinelDataConnectorThreatIntelligence: typeof import("./sentinelDataConnectorThreatIntelligence").SentinelDataConnectorThreatIntelligence = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorThreatIntelligence"], () => require("./sentinelDataConnectorThreatIntelligence"));

export { SentinelDataConnectorThreatIntelligenceTaxiiArgs, SentinelDataConnectorThreatIntelligenceTaxiiState } from "./sentinelDataConnectorThreatIntelligenceTaxii";
export type SentinelDataConnectorThreatIntelligenceTaxii = import("./sentinelDataConnectorThreatIntelligenceTaxii").SentinelDataConnectorThreatIntelligenceTaxii;
export const SentinelDataConnectorThreatIntelligenceTaxii: typeof import("./sentinelDataConnectorThreatIntelligenceTaxii").SentinelDataConnectorThreatIntelligenceTaxii = null as any;
utilities.lazyLoad(exports, ["SentinelDataConnectorThreatIntelligenceTaxii"], () => require("./sentinelDataConnectorThreatIntelligenceTaxii"));

export { SentinelLogAnalyticsWorkspaceOnboardingArgs, SentinelLogAnalyticsWorkspaceOnboardingState } from "./sentinelLogAnalyticsWorkspaceOnboarding";
export type SentinelLogAnalyticsWorkspaceOnboarding = import("./sentinelLogAnalyticsWorkspaceOnboarding").SentinelLogAnalyticsWorkspaceOnboarding;
export const SentinelLogAnalyticsWorkspaceOnboarding: typeof import("./sentinelLogAnalyticsWorkspaceOnboarding").SentinelLogAnalyticsWorkspaceOnboarding = null as any;
utilities.lazyLoad(exports, ["SentinelLogAnalyticsWorkspaceOnboarding"], () => require("./sentinelLogAnalyticsWorkspaceOnboarding"));

export { SentinelMetadataArgs, SentinelMetadataState } from "./sentinelMetadata";
export type SentinelMetadata = import("./sentinelMetadata").SentinelMetadata;
export const SentinelMetadata: typeof import("./sentinelMetadata").SentinelMetadata = null as any;
utilities.lazyLoad(exports, ["SentinelMetadata"], () => require("./sentinelMetadata"));

export { SentinelThreatIntelligenceIndicatorArgs, SentinelThreatIntelligenceIndicatorState } from "./sentinelThreatIntelligenceIndicator";
export type SentinelThreatIntelligenceIndicator = import("./sentinelThreatIntelligenceIndicator").SentinelThreatIntelligenceIndicator;
export const SentinelThreatIntelligenceIndicator: typeof import("./sentinelThreatIntelligenceIndicator").SentinelThreatIntelligenceIndicator = null as any;
utilities.lazyLoad(exports, ["SentinelThreatIntelligenceIndicator"], () => require("./sentinelThreatIntelligenceIndicator"));

export { SentinelWatchlistArgs, SentinelWatchlistState } from "./sentinelWatchlist";
export type SentinelWatchlist = import("./sentinelWatchlist").SentinelWatchlist;
export const SentinelWatchlist: typeof import("./sentinelWatchlist").SentinelWatchlist = null as any;
utilities.lazyLoad(exports, ["SentinelWatchlist"], () => require("./sentinelWatchlist"));

export { SentinelWatchlistItemArgs, SentinelWatchlistItemState } from "./sentinelWatchlistItem";
export type SentinelWatchlistItem = import("./sentinelWatchlistItem").SentinelWatchlistItem;
export const SentinelWatchlistItem: typeof import("./sentinelWatchlistItem").SentinelWatchlistItem = null as any;
utilities.lazyLoad(exports, ["SentinelWatchlistItem"], () => require("./sentinelWatchlistItem"));

export { ServiceFabricClusterArgs, ServiceFabricClusterState } from "./serviceFabricCluster";
export type ServiceFabricCluster = import("./serviceFabricCluster").ServiceFabricCluster;
export const ServiceFabricCluster: typeof import("./serviceFabricCluster").ServiceFabricCluster = null as any;
utilities.lazyLoad(exports, ["ServiceFabricCluster"], () => require("./serviceFabricCluster"));

export { ServiceFabricManagedClusterArgs, ServiceFabricManagedClusterState } from "./serviceFabricManagedCluster";
export type ServiceFabricManagedCluster = import("./serviceFabricManagedCluster").ServiceFabricManagedCluster;
export const ServiceFabricManagedCluster: typeof import("./serviceFabricManagedCluster").ServiceFabricManagedCluster = null as any;
utilities.lazyLoad(exports, ["ServiceFabricManagedCluster"], () => require("./serviceFabricManagedCluster"));

export { ServicePlanArgs, ServicePlanState } from "./servicePlan";
export type ServicePlan = import("./servicePlan").ServicePlan;
export const ServicePlan: typeof import("./servicePlan").ServicePlan = null as any;
utilities.lazyLoad(exports, ["ServicePlan"], () => require("./servicePlan"));

export { ServicebusNamespaceArgs, ServicebusNamespaceState } from "./servicebusNamespace";
export type ServicebusNamespace = import("./servicebusNamespace").ServicebusNamespace;
export const ServicebusNamespace: typeof import("./servicebusNamespace").ServicebusNamespace = null as any;
utilities.lazyLoad(exports, ["ServicebusNamespace"], () => require("./servicebusNamespace"));

export { ServicebusNamespaceAuthorizationRuleArgs, ServicebusNamespaceAuthorizationRuleState } from "./servicebusNamespaceAuthorizationRule";
export type ServicebusNamespaceAuthorizationRule = import("./servicebusNamespaceAuthorizationRule").ServicebusNamespaceAuthorizationRule;
export const ServicebusNamespaceAuthorizationRule: typeof import("./servicebusNamespaceAuthorizationRule").ServicebusNamespaceAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["ServicebusNamespaceAuthorizationRule"], () => require("./servicebusNamespaceAuthorizationRule"));

export { ServicebusNamespaceDisasterRecoveryConfigArgs, ServicebusNamespaceDisasterRecoveryConfigState } from "./servicebusNamespaceDisasterRecoveryConfig";
export type ServicebusNamespaceDisasterRecoveryConfig = import("./servicebusNamespaceDisasterRecoveryConfig").ServicebusNamespaceDisasterRecoveryConfig;
export const ServicebusNamespaceDisasterRecoveryConfig: typeof import("./servicebusNamespaceDisasterRecoveryConfig").ServicebusNamespaceDisasterRecoveryConfig = null as any;
utilities.lazyLoad(exports, ["ServicebusNamespaceDisasterRecoveryConfig"], () => require("./servicebusNamespaceDisasterRecoveryConfig"));

export { ServicebusQueueArgs, ServicebusQueueState } from "./servicebusQueue";
export type ServicebusQueue = import("./servicebusQueue").ServicebusQueue;
export const ServicebusQueue: typeof import("./servicebusQueue").ServicebusQueue = null as any;
utilities.lazyLoad(exports, ["ServicebusQueue"], () => require("./servicebusQueue"));

export { ServicebusQueueAuthorizationRuleArgs, ServicebusQueueAuthorizationRuleState } from "./servicebusQueueAuthorizationRule";
export type ServicebusQueueAuthorizationRule = import("./servicebusQueueAuthorizationRule").ServicebusQueueAuthorizationRule;
export const ServicebusQueueAuthorizationRule: typeof import("./servicebusQueueAuthorizationRule").ServicebusQueueAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["ServicebusQueueAuthorizationRule"], () => require("./servicebusQueueAuthorizationRule"));

export { ServicebusSubscriptionArgs, ServicebusSubscriptionState } from "./servicebusSubscription";
export type ServicebusSubscription = import("./servicebusSubscription").ServicebusSubscription;
export const ServicebusSubscription: typeof import("./servicebusSubscription").ServicebusSubscription = null as any;
utilities.lazyLoad(exports, ["ServicebusSubscription"], () => require("./servicebusSubscription"));

export { ServicebusSubscriptionRuleArgs, ServicebusSubscriptionRuleState } from "./servicebusSubscriptionRule";
export type ServicebusSubscriptionRule = import("./servicebusSubscriptionRule").ServicebusSubscriptionRule;
export const ServicebusSubscriptionRule: typeof import("./servicebusSubscriptionRule").ServicebusSubscriptionRule = null as any;
utilities.lazyLoad(exports, ["ServicebusSubscriptionRule"], () => require("./servicebusSubscriptionRule"));

export { ServicebusTopicArgs, ServicebusTopicState } from "./servicebusTopic";
export type ServicebusTopic = import("./servicebusTopic").ServicebusTopic;
export const ServicebusTopic: typeof import("./servicebusTopic").ServicebusTopic = null as any;
utilities.lazyLoad(exports, ["ServicebusTopic"], () => require("./servicebusTopic"));

export { ServicebusTopicAuthorizationRuleArgs, ServicebusTopicAuthorizationRuleState } from "./servicebusTopicAuthorizationRule";
export type ServicebusTopicAuthorizationRule = import("./servicebusTopicAuthorizationRule").ServicebusTopicAuthorizationRule;
export const ServicebusTopicAuthorizationRule: typeof import("./servicebusTopicAuthorizationRule").ServicebusTopicAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["ServicebusTopicAuthorizationRule"], () => require("./servicebusTopicAuthorizationRule"));

export { SharedImageArgs, SharedImageState } from "./sharedImage";
export type SharedImage = import("./sharedImage").SharedImage;
export const SharedImage: typeof import("./sharedImage").SharedImage = null as any;
utilities.lazyLoad(exports, ["SharedImage"], () => require("./sharedImage"));

export { SharedImageGalleryArgs, SharedImageGalleryState } from "./sharedImageGallery";
export type SharedImageGallery = import("./sharedImageGallery").SharedImageGallery;
export const SharedImageGallery: typeof import("./sharedImageGallery").SharedImageGallery = null as any;
utilities.lazyLoad(exports, ["SharedImageGallery"], () => require("./sharedImageGallery"));

export { SharedImageVersionArgs, SharedImageVersionState } from "./sharedImageVersion";
export type SharedImageVersion = import("./sharedImageVersion").SharedImageVersion;
export const SharedImageVersion: typeof import("./sharedImageVersion").SharedImageVersion = null as any;
utilities.lazyLoad(exports, ["SharedImageVersion"], () => require("./sharedImageVersion"));

export { SignalrServiceArgs, SignalrServiceState } from "./signalrService";
export type SignalrService = import("./signalrService").SignalrService;
export const SignalrService: typeof import("./signalrService").SignalrService = null as any;
utilities.lazyLoad(exports, ["SignalrService"], () => require("./signalrService"));

export { SignalrServiceCustomCertificateArgs, SignalrServiceCustomCertificateState } from "./signalrServiceCustomCertificate";
export type SignalrServiceCustomCertificate = import("./signalrServiceCustomCertificate").SignalrServiceCustomCertificate;
export const SignalrServiceCustomCertificate: typeof import("./signalrServiceCustomCertificate").SignalrServiceCustomCertificate = null as any;
utilities.lazyLoad(exports, ["SignalrServiceCustomCertificate"], () => require("./signalrServiceCustomCertificate"));

export { SignalrServiceCustomDomainArgs, SignalrServiceCustomDomainState } from "./signalrServiceCustomDomain";
export type SignalrServiceCustomDomain = import("./signalrServiceCustomDomain").SignalrServiceCustomDomain;
export const SignalrServiceCustomDomain: typeof import("./signalrServiceCustomDomain").SignalrServiceCustomDomain = null as any;
utilities.lazyLoad(exports, ["SignalrServiceCustomDomain"], () => require("./signalrServiceCustomDomain"));

export { SignalrServiceNetworkAclArgs, SignalrServiceNetworkAclState } from "./signalrServiceNetworkAcl";
export type SignalrServiceNetworkAcl = import("./signalrServiceNetworkAcl").SignalrServiceNetworkAcl;
export const SignalrServiceNetworkAcl: typeof import("./signalrServiceNetworkAcl").SignalrServiceNetworkAcl = null as any;
utilities.lazyLoad(exports, ["SignalrServiceNetworkAcl"], () => require("./signalrServiceNetworkAcl"));

export { SignalrSharedPrivateLinkResourceArgs, SignalrSharedPrivateLinkResourceState } from "./signalrSharedPrivateLinkResource";
export type SignalrSharedPrivateLinkResource = import("./signalrSharedPrivateLinkResource").SignalrSharedPrivateLinkResource;
export const SignalrSharedPrivateLinkResource: typeof import("./signalrSharedPrivateLinkResource").SignalrSharedPrivateLinkResource = null as any;
utilities.lazyLoad(exports, ["SignalrSharedPrivateLinkResource"], () => require("./signalrSharedPrivateLinkResource"));

export { SiteRecoveryFabricArgs, SiteRecoveryFabricState } from "./siteRecoveryFabric";
export type SiteRecoveryFabric = import("./siteRecoveryFabric").SiteRecoveryFabric;
export const SiteRecoveryFabric: typeof import("./siteRecoveryFabric").SiteRecoveryFabric = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryFabric"], () => require("./siteRecoveryFabric"));

export { SiteRecoveryHypervNetworkMappingArgs, SiteRecoveryHypervNetworkMappingState } from "./siteRecoveryHypervNetworkMapping";
export type SiteRecoveryHypervNetworkMapping = import("./siteRecoveryHypervNetworkMapping").SiteRecoveryHypervNetworkMapping;
export const SiteRecoveryHypervNetworkMapping: typeof import("./siteRecoveryHypervNetworkMapping").SiteRecoveryHypervNetworkMapping = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryHypervNetworkMapping"], () => require("./siteRecoveryHypervNetworkMapping"));

export { SiteRecoveryHypervReplicationPolicyArgs, SiteRecoveryHypervReplicationPolicyState } from "./siteRecoveryHypervReplicationPolicy";
export type SiteRecoveryHypervReplicationPolicy = import("./siteRecoveryHypervReplicationPolicy").SiteRecoveryHypervReplicationPolicy;
export const SiteRecoveryHypervReplicationPolicy: typeof import("./siteRecoveryHypervReplicationPolicy").SiteRecoveryHypervReplicationPolicy = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryHypervReplicationPolicy"], () => require("./siteRecoveryHypervReplicationPolicy"));

export { SiteRecoveryHypervReplicationPolicyAssociationArgs, SiteRecoveryHypervReplicationPolicyAssociationState } from "./siteRecoveryHypervReplicationPolicyAssociation";
export type SiteRecoveryHypervReplicationPolicyAssociation = import("./siteRecoveryHypervReplicationPolicyAssociation").SiteRecoveryHypervReplicationPolicyAssociation;
export const SiteRecoveryHypervReplicationPolicyAssociation: typeof import("./siteRecoveryHypervReplicationPolicyAssociation").SiteRecoveryHypervReplicationPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryHypervReplicationPolicyAssociation"], () => require("./siteRecoveryHypervReplicationPolicyAssociation"));

export { SiteRecoveryNetworkMappingArgs, SiteRecoveryNetworkMappingState } from "./siteRecoveryNetworkMapping";
export type SiteRecoveryNetworkMapping = import("./siteRecoveryNetworkMapping").SiteRecoveryNetworkMapping;
export const SiteRecoveryNetworkMapping: typeof import("./siteRecoveryNetworkMapping").SiteRecoveryNetworkMapping = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryNetworkMapping"], () => require("./siteRecoveryNetworkMapping"));

export { SiteRecoveryProtectionContainerArgs, SiteRecoveryProtectionContainerState } from "./siteRecoveryProtectionContainer";
export type SiteRecoveryProtectionContainer = import("./siteRecoveryProtectionContainer").SiteRecoveryProtectionContainer;
export const SiteRecoveryProtectionContainer: typeof import("./siteRecoveryProtectionContainer").SiteRecoveryProtectionContainer = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryProtectionContainer"], () => require("./siteRecoveryProtectionContainer"));

export { SiteRecoveryProtectionContainerMappingArgs, SiteRecoveryProtectionContainerMappingState } from "./siteRecoveryProtectionContainerMapping";
export type SiteRecoveryProtectionContainerMapping = import("./siteRecoveryProtectionContainerMapping").SiteRecoveryProtectionContainerMapping;
export const SiteRecoveryProtectionContainerMapping: typeof import("./siteRecoveryProtectionContainerMapping").SiteRecoveryProtectionContainerMapping = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryProtectionContainerMapping"], () => require("./siteRecoveryProtectionContainerMapping"));

export { SiteRecoveryReplicatedVmArgs, SiteRecoveryReplicatedVmState } from "./siteRecoveryReplicatedVm";
export type SiteRecoveryReplicatedVm = import("./siteRecoveryReplicatedVm").SiteRecoveryReplicatedVm;
export const SiteRecoveryReplicatedVm: typeof import("./siteRecoveryReplicatedVm").SiteRecoveryReplicatedVm = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryReplicatedVm"], () => require("./siteRecoveryReplicatedVm"));

export { SiteRecoveryReplicationPolicyArgs, SiteRecoveryReplicationPolicyState } from "./siteRecoveryReplicationPolicy";
export type SiteRecoveryReplicationPolicy = import("./siteRecoveryReplicationPolicy").SiteRecoveryReplicationPolicy;
export const SiteRecoveryReplicationPolicy: typeof import("./siteRecoveryReplicationPolicy").SiteRecoveryReplicationPolicy = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryReplicationPolicy"], () => require("./siteRecoveryReplicationPolicy"));

export { SiteRecoveryReplicationRecoveryPlanArgs, SiteRecoveryReplicationRecoveryPlanState } from "./siteRecoveryReplicationRecoveryPlan";
export type SiteRecoveryReplicationRecoveryPlan = import("./siteRecoveryReplicationRecoveryPlan").SiteRecoveryReplicationRecoveryPlan;
export const SiteRecoveryReplicationRecoveryPlan: typeof import("./siteRecoveryReplicationRecoveryPlan").SiteRecoveryReplicationRecoveryPlan = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryReplicationRecoveryPlan"], () => require("./siteRecoveryReplicationRecoveryPlan"));

export { SiteRecoveryServicesVaultHypervSiteArgs, SiteRecoveryServicesVaultHypervSiteState } from "./siteRecoveryServicesVaultHypervSite";
export type SiteRecoveryServicesVaultHypervSite = import("./siteRecoveryServicesVaultHypervSite").SiteRecoveryServicesVaultHypervSite;
export const SiteRecoveryServicesVaultHypervSite: typeof import("./siteRecoveryServicesVaultHypervSite").SiteRecoveryServicesVaultHypervSite = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryServicesVaultHypervSite"], () => require("./siteRecoveryServicesVaultHypervSite"));

export { SiteRecoveryVmwareReplicatedVmArgs, SiteRecoveryVmwareReplicatedVmState } from "./siteRecoveryVmwareReplicatedVm";
export type SiteRecoveryVmwareReplicatedVm = import("./siteRecoveryVmwareReplicatedVm").SiteRecoveryVmwareReplicatedVm;
export const SiteRecoveryVmwareReplicatedVm: typeof import("./siteRecoveryVmwareReplicatedVm").SiteRecoveryVmwareReplicatedVm = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryVmwareReplicatedVm"], () => require("./siteRecoveryVmwareReplicatedVm"));

export { SiteRecoveryVmwareReplicationPolicyArgs, SiteRecoveryVmwareReplicationPolicyState } from "./siteRecoveryVmwareReplicationPolicy";
export type SiteRecoveryVmwareReplicationPolicy = import("./siteRecoveryVmwareReplicationPolicy").SiteRecoveryVmwareReplicationPolicy;
export const SiteRecoveryVmwareReplicationPolicy: typeof import("./siteRecoveryVmwareReplicationPolicy").SiteRecoveryVmwareReplicationPolicy = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryVmwareReplicationPolicy"], () => require("./siteRecoveryVmwareReplicationPolicy"));

export { SiteRecoveryVmwareReplicationPolicyAssociationArgs, SiteRecoveryVmwareReplicationPolicyAssociationState } from "./siteRecoveryVmwareReplicationPolicyAssociation";
export type SiteRecoveryVmwareReplicationPolicyAssociation = import("./siteRecoveryVmwareReplicationPolicyAssociation").SiteRecoveryVmwareReplicationPolicyAssociation;
export const SiteRecoveryVmwareReplicationPolicyAssociation: typeof import("./siteRecoveryVmwareReplicationPolicyAssociation").SiteRecoveryVmwareReplicationPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["SiteRecoveryVmwareReplicationPolicyAssociation"], () => require("./siteRecoveryVmwareReplicationPolicyAssociation"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SourceControlTokenArgs, SourceControlTokenState } from "./sourceControlToken";
export type SourceControlToken = import("./sourceControlToken").SourceControlToken;
export const SourceControlToken: typeof import("./sourceControlToken").SourceControlToken = null as any;
utilities.lazyLoad(exports, ["SourceControlToken"], () => require("./sourceControlToken"));

export { SpatialAnchorsAccountArgs, SpatialAnchorsAccountState } from "./spatialAnchorsAccount";
export type SpatialAnchorsAccount = import("./spatialAnchorsAccount").SpatialAnchorsAccount;
export const SpatialAnchorsAccount: typeof import("./spatialAnchorsAccount").SpatialAnchorsAccount = null as any;
utilities.lazyLoad(exports, ["SpatialAnchorsAccount"], () => require("./spatialAnchorsAccount"));

export { SpringCloudAcceleratorArgs, SpringCloudAcceleratorState } from "./springCloudAccelerator";
export type SpringCloudAccelerator = import("./springCloudAccelerator").SpringCloudAccelerator;
export const SpringCloudAccelerator: typeof import("./springCloudAccelerator").SpringCloudAccelerator = null as any;
utilities.lazyLoad(exports, ["SpringCloudAccelerator"], () => require("./springCloudAccelerator"));

export { SpringCloudActiveDeploymentArgs, SpringCloudActiveDeploymentState } from "./springCloudActiveDeployment";
export type SpringCloudActiveDeployment = import("./springCloudActiveDeployment").SpringCloudActiveDeployment;
export const SpringCloudActiveDeployment: typeof import("./springCloudActiveDeployment").SpringCloudActiveDeployment = null as any;
utilities.lazyLoad(exports, ["SpringCloudActiveDeployment"], () => require("./springCloudActiveDeployment"));

export { SpringCloudApiPortalArgs, SpringCloudApiPortalState } from "./springCloudApiPortal";
export type SpringCloudApiPortal = import("./springCloudApiPortal").SpringCloudApiPortal;
export const SpringCloudApiPortal: typeof import("./springCloudApiPortal").SpringCloudApiPortal = null as any;
utilities.lazyLoad(exports, ["SpringCloudApiPortal"], () => require("./springCloudApiPortal"));

export { SpringCloudApiPortalCustomDomainArgs, SpringCloudApiPortalCustomDomainState } from "./springCloudApiPortalCustomDomain";
export type SpringCloudApiPortalCustomDomain = import("./springCloudApiPortalCustomDomain").SpringCloudApiPortalCustomDomain;
export const SpringCloudApiPortalCustomDomain: typeof import("./springCloudApiPortalCustomDomain").SpringCloudApiPortalCustomDomain = null as any;
utilities.lazyLoad(exports, ["SpringCloudApiPortalCustomDomain"], () => require("./springCloudApiPortalCustomDomain"));

export { SpringCloudAppArgs, SpringCloudAppState } from "./springCloudApp";
export type SpringCloudApp = import("./springCloudApp").SpringCloudApp;
export const SpringCloudApp: typeof import("./springCloudApp").SpringCloudApp = null as any;
utilities.lazyLoad(exports, ["SpringCloudApp"], () => require("./springCloudApp"));

export { SpringCloudAppCosmosdbAssociationArgs, SpringCloudAppCosmosdbAssociationState } from "./springCloudAppCosmosdbAssociation";
export type SpringCloudAppCosmosdbAssociation = import("./springCloudAppCosmosdbAssociation").SpringCloudAppCosmosdbAssociation;
export const SpringCloudAppCosmosdbAssociation: typeof import("./springCloudAppCosmosdbAssociation").SpringCloudAppCosmosdbAssociation = null as any;
utilities.lazyLoad(exports, ["SpringCloudAppCosmosdbAssociation"], () => require("./springCloudAppCosmosdbAssociation"));

export { SpringCloudAppDynamicsApplicationPerformanceMonitoringArgs, SpringCloudAppDynamicsApplicationPerformanceMonitoringState } from "./springCloudAppDynamicsApplicationPerformanceMonitoring";
export type SpringCloudAppDynamicsApplicationPerformanceMonitoring = import("./springCloudAppDynamicsApplicationPerformanceMonitoring").SpringCloudAppDynamicsApplicationPerformanceMonitoring;
export const SpringCloudAppDynamicsApplicationPerformanceMonitoring: typeof import("./springCloudAppDynamicsApplicationPerformanceMonitoring").SpringCloudAppDynamicsApplicationPerformanceMonitoring = null as any;
utilities.lazyLoad(exports, ["SpringCloudAppDynamicsApplicationPerformanceMonitoring"], () => require("./springCloudAppDynamicsApplicationPerformanceMonitoring"));

export { SpringCloudAppMysqlAssociationArgs, SpringCloudAppMysqlAssociationState } from "./springCloudAppMysqlAssociation";
export type SpringCloudAppMysqlAssociation = import("./springCloudAppMysqlAssociation").SpringCloudAppMysqlAssociation;
export const SpringCloudAppMysqlAssociation: typeof import("./springCloudAppMysqlAssociation").SpringCloudAppMysqlAssociation = null as any;
utilities.lazyLoad(exports, ["SpringCloudAppMysqlAssociation"], () => require("./springCloudAppMysqlAssociation"));

export { SpringCloudAppRedisAssociationArgs, SpringCloudAppRedisAssociationState } from "./springCloudAppRedisAssociation";
export type SpringCloudAppRedisAssociation = import("./springCloudAppRedisAssociation").SpringCloudAppRedisAssociation;
export const SpringCloudAppRedisAssociation: typeof import("./springCloudAppRedisAssociation").SpringCloudAppRedisAssociation = null as any;
utilities.lazyLoad(exports, ["SpringCloudAppRedisAssociation"], () => require("./springCloudAppRedisAssociation"));

export { SpringCloudApplicationInsightsApplicationPerformanceMonitoringArgs, SpringCloudApplicationInsightsApplicationPerformanceMonitoringState } from "./springCloudApplicationInsightsApplicationPerformanceMonitoring";
export type SpringCloudApplicationInsightsApplicationPerformanceMonitoring = import("./springCloudApplicationInsightsApplicationPerformanceMonitoring").SpringCloudApplicationInsightsApplicationPerformanceMonitoring;
export const SpringCloudApplicationInsightsApplicationPerformanceMonitoring: typeof import("./springCloudApplicationInsightsApplicationPerformanceMonitoring").SpringCloudApplicationInsightsApplicationPerformanceMonitoring = null as any;
utilities.lazyLoad(exports, ["SpringCloudApplicationInsightsApplicationPerformanceMonitoring"], () => require("./springCloudApplicationInsightsApplicationPerformanceMonitoring"));

export { SpringCloudApplicationLiveViewArgs, SpringCloudApplicationLiveViewState } from "./springCloudApplicationLiveView";
export type SpringCloudApplicationLiveView = import("./springCloudApplicationLiveView").SpringCloudApplicationLiveView;
export const SpringCloudApplicationLiveView: typeof import("./springCloudApplicationLiveView").SpringCloudApplicationLiveView = null as any;
utilities.lazyLoad(exports, ["SpringCloudApplicationLiveView"], () => require("./springCloudApplicationLiveView"));

export { SpringCloudBuildDeploymentArgs, SpringCloudBuildDeploymentState } from "./springCloudBuildDeployment";
export type SpringCloudBuildDeployment = import("./springCloudBuildDeployment").SpringCloudBuildDeployment;
export const SpringCloudBuildDeployment: typeof import("./springCloudBuildDeployment").SpringCloudBuildDeployment = null as any;
utilities.lazyLoad(exports, ["SpringCloudBuildDeployment"], () => require("./springCloudBuildDeployment"));

export { SpringCloudBuildPackBindingArgs, SpringCloudBuildPackBindingState } from "./springCloudBuildPackBinding";
export type SpringCloudBuildPackBinding = import("./springCloudBuildPackBinding").SpringCloudBuildPackBinding;
export const SpringCloudBuildPackBinding: typeof import("./springCloudBuildPackBinding").SpringCloudBuildPackBinding = null as any;
utilities.lazyLoad(exports, ["SpringCloudBuildPackBinding"], () => require("./springCloudBuildPackBinding"));

export { SpringCloudBuilderArgs, SpringCloudBuilderState } from "./springCloudBuilder";
export type SpringCloudBuilder = import("./springCloudBuilder").SpringCloudBuilder;
export const SpringCloudBuilder: typeof import("./springCloudBuilder").SpringCloudBuilder = null as any;
utilities.lazyLoad(exports, ["SpringCloudBuilder"], () => require("./springCloudBuilder"));

export { SpringCloudCertificateArgs, SpringCloudCertificateState } from "./springCloudCertificate";
export type SpringCloudCertificate = import("./springCloudCertificate").SpringCloudCertificate;
export const SpringCloudCertificate: typeof import("./springCloudCertificate").SpringCloudCertificate = null as any;
utilities.lazyLoad(exports, ["SpringCloudCertificate"], () => require("./springCloudCertificate"));

export { SpringCloudConfigurationServiceArgs, SpringCloudConfigurationServiceState } from "./springCloudConfigurationService";
export type SpringCloudConfigurationService = import("./springCloudConfigurationService").SpringCloudConfigurationService;
export const SpringCloudConfigurationService: typeof import("./springCloudConfigurationService").SpringCloudConfigurationService = null as any;
utilities.lazyLoad(exports, ["SpringCloudConfigurationService"], () => require("./springCloudConfigurationService"));

export { SpringCloudConnectionArgs, SpringCloudConnectionState } from "./springCloudConnection";
export type SpringCloudConnection = import("./springCloudConnection").SpringCloudConnection;
export const SpringCloudConnection: typeof import("./springCloudConnection").SpringCloudConnection = null as any;
utilities.lazyLoad(exports, ["SpringCloudConnection"], () => require("./springCloudConnection"));

export { SpringCloudContainerDeploymentArgs, SpringCloudContainerDeploymentState } from "./springCloudContainerDeployment";
export type SpringCloudContainerDeployment = import("./springCloudContainerDeployment").SpringCloudContainerDeployment;
export const SpringCloudContainerDeployment: typeof import("./springCloudContainerDeployment").SpringCloudContainerDeployment = null as any;
utilities.lazyLoad(exports, ["SpringCloudContainerDeployment"], () => require("./springCloudContainerDeployment"));

export { SpringCloudCustomDomainArgs, SpringCloudCustomDomainState } from "./springCloudCustomDomain";
export type SpringCloudCustomDomain = import("./springCloudCustomDomain").SpringCloudCustomDomain;
export const SpringCloudCustomDomain: typeof import("./springCloudCustomDomain").SpringCloudCustomDomain = null as any;
utilities.lazyLoad(exports, ["SpringCloudCustomDomain"], () => require("./springCloudCustomDomain"));

export { SpringCloudCustomizedAcceleratorArgs, SpringCloudCustomizedAcceleratorState } from "./springCloudCustomizedAccelerator";
export type SpringCloudCustomizedAccelerator = import("./springCloudCustomizedAccelerator").SpringCloudCustomizedAccelerator;
export const SpringCloudCustomizedAccelerator: typeof import("./springCloudCustomizedAccelerator").SpringCloudCustomizedAccelerator = null as any;
utilities.lazyLoad(exports, ["SpringCloudCustomizedAccelerator"], () => require("./springCloudCustomizedAccelerator"));

export { SpringCloudDevToolPortalArgs, SpringCloudDevToolPortalState } from "./springCloudDevToolPortal";
export type SpringCloudDevToolPortal = import("./springCloudDevToolPortal").SpringCloudDevToolPortal;
export const SpringCloudDevToolPortal: typeof import("./springCloudDevToolPortal").SpringCloudDevToolPortal = null as any;
utilities.lazyLoad(exports, ["SpringCloudDevToolPortal"], () => require("./springCloudDevToolPortal"));

export { SpringCloudDynatraceApplicationPerformanceMonitoringArgs, SpringCloudDynatraceApplicationPerformanceMonitoringState } from "./springCloudDynatraceApplicationPerformanceMonitoring";
export type SpringCloudDynatraceApplicationPerformanceMonitoring = import("./springCloudDynatraceApplicationPerformanceMonitoring").SpringCloudDynatraceApplicationPerformanceMonitoring;
export const SpringCloudDynatraceApplicationPerformanceMonitoring: typeof import("./springCloudDynatraceApplicationPerformanceMonitoring").SpringCloudDynatraceApplicationPerformanceMonitoring = null as any;
utilities.lazyLoad(exports, ["SpringCloudDynatraceApplicationPerformanceMonitoring"], () => require("./springCloudDynatraceApplicationPerformanceMonitoring"));

export { SpringCloudElasticApplicationPerformanceMonitoringArgs, SpringCloudElasticApplicationPerformanceMonitoringState } from "./springCloudElasticApplicationPerformanceMonitoring";
export type SpringCloudElasticApplicationPerformanceMonitoring = import("./springCloudElasticApplicationPerformanceMonitoring").SpringCloudElasticApplicationPerformanceMonitoring;
export const SpringCloudElasticApplicationPerformanceMonitoring: typeof import("./springCloudElasticApplicationPerformanceMonitoring").SpringCloudElasticApplicationPerformanceMonitoring = null as any;
utilities.lazyLoad(exports, ["SpringCloudElasticApplicationPerformanceMonitoring"], () => require("./springCloudElasticApplicationPerformanceMonitoring"));

export { SpringCloudGatewayArgs, SpringCloudGatewayState } from "./springCloudGateway";
export type SpringCloudGateway = import("./springCloudGateway").SpringCloudGateway;
export const SpringCloudGateway: typeof import("./springCloudGateway").SpringCloudGateway = null as any;
utilities.lazyLoad(exports, ["SpringCloudGateway"], () => require("./springCloudGateway"));

export { SpringCloudGatewayCustomDomainArgs, SpringCloudGatewayCustomDomainState } from "./springCloudGatewayCustomDomain";
export type SpringCloudGatewayCustomDomain = import("./springCloudGatewayCustomDomain").SpringCloudGatewayCustomDomain;
export const SpringCloudGatewayCustomDomain: typeof import("./springCloudGatewayCustomDomain").SpringCloudGatewayCustomDomain = null as any;
utilities.lazyLoad(exports, ["SpringCloudGatewayCustomDomain"], () => require("./springCloudGatewayCustomDomain"));

export { SpringCloudGatewayRouteConfigArgs, SpringCloudGatewayRouteConfigState } from "./springCloudGatewayRouteConfig";
export type SpringCloudGatewayRouteConfig = import("./springCloudGatewayRouteConfig").SpringCloudGatewayRouteConfig;
export const SpringCloudGatewayRouteConfig: typeof import("./springCloudGatewayRouteConfig").SpringCloudGatewayRouteConfig = null as any;
utilities.lazyLoad(exports, ["SpringCloudGatewayRouteConfig"], () => require("./springCloudGatewayRouteConfig"));

export { SpringCloudJavaDeploymentArgs, SpringCloudJavaDeploymentState } from "./springCloudJavaDeployment";
export type SpringCloudJavaDeployment = import("./springCloudJavaDeployment").SpringCloudJavaDeployment;
export const SpringCloudJavaDeployment: typeof import("./springCloudJavaDeployment").SpringCloudJavaDeployment = null as any;
utilities.lazyLoad(exports, ["SpringCloudJavaDeployment"], () => require("./springCloudJavaDeployment"));

export { SpringCloudNewRelicApplicationPerformanceMonitoringArgs, SpringCloudNewRelicApplicationPerformanceMonitoringState } from "./springCloudNewRelicApplicationPerformanceMonitoring";
export type SpringCloudNewRelicApplicationPerformanceMonitoring = import("./springCloudNewRelicApplicationPerformanceMonitoring").SpringCloudNewRelicApplicationPerformanceMonitoring;
export const SpringCloudNewRelicApplicationPerformanceMonitoring: typeof import("./springCloudNewRelicApplicationPerformanceMonitoring").SpringCloudNewRelicApplicationPerformanceMonitoring = null as any;
utilities.lazyLoad(exports, ["SpringCloudNewRelicApplicationPerformanceMonitoring"], () => require("./springCloudNewRelicApplicationPerformanceMonitoring"));

export { SpringCloudServiceArgs, SpringCloudServiceState } from "./springCloudService";
export type SpringCloudService = import("./springCloudService").SpringCloudService;
export const SpringCloudService: typeof import("./springCloudService").SpringCloudService = null as any;
utilities.lazyLoad(exports, ["SpringCloudService"], () => require("./springCloudService"));

export { SpringCloudStorageArgs, SpringCloudStorageState } from "./springCloudStorage";
export type SpringCloudStorage = import("./springCloudStorage").SpringCloudStorage;
export const SpringCloudStorage: typeof import("./springCloudStorage").SpringCloudStorage = null as any;
utilities.lazyLoad(exports, ["SpringCloudStorage"], () => require("./springCloudStorage"));

export { SshPublicKeyArgs, SshPublicKeyState } from "./sshPublicKey";
export type SshPublicKey = import("./sshPublicKey").SshPublicKey;
export const SshPublicKey: typeof import("./sshPublicKey").SshPublicKey = null as any;
utilities.lazyLoad(exports, ["SshPublicKey"], () => require("./sshPublicKey"));

export { StackHciClusterArgs, StackHciClusterState } from "./stackHciCluster";
export type StackHciCluster = import("./stackHciCluster").StackHciCluster;
export const StackHciCluster: typeof import("./stackHciCluster").StackHciCluster = null as any;
utilities.lazyLoad(exports, ["StackHciCluster"], () => require("./stackHciCluster"));

export { StackHciLogicalNetworkArgs, StackHciLogicalNetworkState } from "./stackHciLogicalNetwork";
export type StackHciLogicalNetwork = import("./stackHciLogicalNetwork").StackHciLogicalNetwork;
export const StackHciLogicalNetwork: typeof import("./stackHciLogicalNetwork").StackHciLogicalNetwork = null as any;
utilities.lazyLoad(exports, ["StackHciLogicalNetwork"], () => require("./stackHciLogicalNetwork"));

export { StaticSiteArgs, StaticSiteState } from "./staticSite";
export type StaticSite = import("./staticSite").StaticSite;
export const StaticSite: typeof import("./staticSite").StaticSite = null as any;
utilities.lazyLoad(exports, ["StaticSite"], () => require("./staticSite"));

export { StaticSiteCustomDomainArgs, StaticSiteCustomDomainState } from "./staticSiteCustomDomain";
export type StaticSiteCustomDomain = import("./staticSiteCustomDomain").StaticSiteCustomDomain;
export const StaticSiteCustomDomain: typeof import("./staticSiteCustomDomain").StaticSiteCustomDomain = null as any;
utilities.lazyLoad(exports, ["StaticSiteCustomDomain"], () => require("./staticSiteCustomDomain"));

export { StaticWebAppArgs, StaticWebAppState } from "./staticWebApp";
export type StaticWebApp = import("./staticWebApp").StaticWebApp;
export const StaticWebApp: typeof import("./staticWebApp").StaticWebApp = null as any;
utilities.lazyLoad(exports, ["StaticWebApp"], () => require("./staticWebApp"));

export { StaticWebAppCustomDomainArgs, StaticWebAppCustomDomainState } from "./staticWebAppCustomDomain";
export type StaticWebAppCustomDomain = import("./staticWebAppCustomDomain").StaticWebAppCustomDomain;
export const StaticWebAppCustomDomain: typeof import("./staticWebAppCustomDomain").StaticWebAppCustomDomain = null as any;
utilities.lazyLoad(exports, ["StaticWebAppCustomDomain"], () => require("./staticWebAppCustomDomain"));

export { StaticWebAppFunctionAppRegistrationArgs, StaticWebAppFunctionAppRegistrationState } from "./staticWebAppFunctionAppRegistration";
export type StaticWebAppFunctionAppRegistration = import("./staticWebAppFunctionAppRegistration").StaticWebAppFunctionAppRegistration;
export const StaticWebAppFunctionAppRegistration: typeof import("./staticWebAppFunctionAppRegistration").StaticWebAppFunctionAppRegistration = null as any;
utilities.lazyLoad(exports, ["StaticWebAppFunctionAppRegistration"], () => require("./staticWebAppFunctionAppRegistration"));

export { StorageAccountArgs, StorageAccountState } from "./storageAccount";
export type StorageAccount = import("./storageAccount").StorageAccount;
export const StorageAccount: typeof import("./storageAccount").StorageAccount = null as any;
utilities.lazyLoad(exports, ["StorageAccount"], () => require("./storageAccount"));

export { StorageAccountCustomerManagedKeyArgs, StorageAccountCustomerManagedKeyState } from "./storageAccountCustomerManagedKey";
export type StorageAccountCustomerManagedKey = import("./storageAccountCustomerManagedKey").StorageAccountCustomerManagedKey;
export const StorageAccountCustomerManagedKey: typeof import("./storageAccountCustomerManagedKey").StorageAccountCustomerManagedKey = null as any;
utilities.lazyLoad(exports, ["StorageAccountCustomerManagedKey"], () => require("./storageAccountCustomerManagedKey"));

export { StorageAccountLocalUserArgs, StorageAccountLocalUserState } from "./storageAccountLocalUser";
export type StorageAccountLocalUser = import("./storageAccountLocalUser").StorageAccountLocalUser;
export const StorageAccountLocalUser: typeof import("./storageAccountLocalUser").StorageAccountLocalUser = null as any;
utilities.lazyLoad(exports, ["StorageAccountLocalUser"], () => require("./storageAccountLocalUser"));

export { StorageAccountNetworkRulesArgs, StorageAccountNetworkRulesState } from "./storageAccountNetworkRules";
export type StorageAccountNetworkRules = import("./storageAccountNetworkRules").StorageAccountNetworkRules;
export const StorageAccountNetworkRules: typeof import("./storageAccountNetworkRules").StorageAccountNetworkRules = null as any;
utilities.lazyLoad(exports, ["StorageAccountNetworkRules"], () => require("./storageAccountNetworkRules"));

export { StorageBlobArgs, StorageBlobState } from "./storageBlob";
export type StorageBlob = import("./storageBlob").StorageBlob;
export const StorageBlob: typeof import("./storageBlob").StorageBlob = null as any;
utilities.lazyLoad(exports, ["StorageBlob"], () => require("./storageBlob"));

export { StorageBlobInventoryPolicyArgs, StorageBlobInventoryPolicyState } from "./storageBlobInventoryPolicy";
export type StorageBlobInventoryPolicy = import("./storageBlobInventoryPolicy").StorageBlobInventoryPolicy;
export const StorageBlobInventoryPolicy: typeof import("./storageBlobInventoryPolicy").StorageBlobInventoryPolicy = null as any;
utilities.lazyLoad(exports, ["StorageBlobInventoryPolicy"], () => require("./storageBlobInventoryPolicy"));

export { StorageContainerArgs, StorageContainerState } from "./storageContainer";
export type StorageContainer = import("./storageContainer").StorageContainer;
export const StorageContainer: typeof import("./storageContainer").StorageContainer = null as any;
utilities.lazyLoad(exports, ["StorageContainer"], () => require("./storageContainer"));

export { StorageContainerImmutabilityPolicyArgs, StorageContainerImmutabilityPolicyState } from "./storageContainerImmutabilityPolicy";
export type StorageContainerImmutabilityPolicy = import("./storageContainerImmutabilityPolicy").StorageContainerImmutabilityPolicy;
export const StorageContainerImmutabilityPolicy: typeof import("./storageContainerImmutabilityPolicy").StorageContainerImmutabilityPolicy = null as any;
utilities.lazyLoad(exports, ["StorageContainerImmutabilityPolicy"], () => require("./storageContainerImmutabilityPolicy"));

export { StorageDataLakeGen2FilesystemArgs, StorageDataLakeGen2FilesystemState } from "./storageDataLakeGen2Filesystem";
export type StorageDataLakeGen2Filesystem = import("./storageDataLakeGen2Filesystem").StorageDataLakeGen2Filesystem;
export const StorageDataLakeGen2Filesystem: typeof import("./storageDataLakeGen2Filesystem").StorageDataLakeGen2Filesystem = null as any;
utilities.lazyLoad(exports, ["StorageDataLakeGen2Filesystem"], () => require("./storageDataLakeGen2Filesystem"));

export { StorageDataLakeGen2PathArgs, StorageDataLakeGen2PathState } from "./storageDataLakeGen2Path";
export type StorageDataLakeGen2Path = import("./storageDataLakeGen2Path").StorageDataLakeGen2Path;
export const StorageDataLakeGen2Path: typeof import("./storageDataLakeGen2Path").StorageDataLakeGen2Path = null as any;
utilities.lazyLoad(exports, ["StorageDataLakeGen2Path"], () => require("./storageDataLakeGen2Path"));

export { StorageEncryptionScopeArgs, StorageEncryptionScopeState } from "./storageEncryptionScope";
export type StorageEncryptionScope = import("./storageEncryptionScope").StorageEncryptionScope;
export const StorageEncryptionScope: typeof import("./storageEncryptionScope").StorageEncryptionScope = null as any;
utilities.lazyLoad(exports, ["StorageEncryptionScope"], () => require("./storageEncryptionScope"));

export { StorageManagementPolicyArgs, StorageManagementPolicyState } from "./storageManagementPolicy";
export type StorageManagementPolicy = import("./storageManagementPolicy").StorageManagementPolicy;
export const StorageManagementPolicy: typeof import("./storageManagementPolicy").StorageManagementPolicy = null as any;
utilities.lazyLoad(exports, ["StorageManagementPolicy"], () => require("./storageManagementPolicy"));

export { StorageMoverArgs, StorageMoverState } from "./storageMover";
export type StorageMover = import("./storageMover").StorageMover;
export const StorageMover: typeof import("./storageMover").StorageMover = null as any;
utilities.lazyLoad(exports, ["StorageMover"], () => require("./storageMover"));

export { StorageMoverAgentArgs, StorageMoverAgentState } from "./storageMoverAgent";
export type StorageMoverAgent = import("./storageMoverAgent").StorageMoverAgent;
export const StorageMoverAgent: typeof import("./storageMoverAgent").StorageMoverAgent = null as any;
utilities.lazyLoad(exports, ["StorageMoverAgent"], () => require("./storageMoverAgent"));

export { StorageMoverJobDefinitionArgs, StorageMoverJobDefinitionState } from "./storageMoverJobDefinition";
export type StorageMoverJobDefinition = import("./storageMoverJobDefinition").StorageMoverJobDefinition;
export const StorageMoverJobDefinition: typeof import("./storageMoverJobDefinition").StorageMoverJobDefinition = null as any;
utilities.lazyLoad(exports, ["StorageMoverJobDefinition"], () => require("./storageMoverJobDefinition"));

export { StorageMoverProjectArgs, StorageMoverProjectState } from "./storageMoverProject";
export type StorageMoverProject = import("./storageMoverProject").StorageMoverProject;
export const StorageMoverProject: typeof import("./storageMoverProject").StorageMoverProject = null as any;
utilities.lazyLoad(exports, ["StorageMoverProject"], () => require("./storageMoverProject"));

export { StorageMoverSourceEndpointArgs, StorageMoverSourceEndpointState } from "./storageMoverSourceEndpoint";
export type StorageMoverSourceEndpoint = import("./storageMoverSourceEndpoint").StorageMoverSourceEndpoint;
export const StorageMoverSourceEndpoint: typeof import("./storageMoverSourceEndpoint").StorageMoverSourceEndpoint = null as any;
utilities.lazyLoad(exports, ["StorageMoverSourceEndpoint"], () => require("./storageMoverSourceEndpoint"));

export { StorageMoverTargetEndpointArgs, StorageMoverTargetEndpointState } from "./storageMoverTargetEndpoint";
export type StorageMoverTargetEndpoint = import("./storageMoverTargetEndpoint").StorageMoverTargetEndpoint;
export const StorageMoverTargetEndpoint: typeof import("./storageMoverTargetEndpoint").StorageMoverTargetEndpoint = null as any;
utilities.lazyLoad(exports, ["StorageMoverTargetEndpoint"], () => require("./storageMoverTargetEndpoint"));

export { StorageObjectReplicationArgs, StorageObjectReplicationState } from "./storageObjectReplication";
export type StorageObjectReplication = import("./storageObjectReplication").StorageObjectReplication;
export const StorageObjectReplication: typeof import("./storageObjectReplication").StorageObjectReplication = null as any;
utilities.lazyLoad(exports, ["StorageObjectReplication"], () => require("./storageObjectReplication"));

export { StorageQueueArgs, StorageQueueState } from "./storageQueue";
export type StorageQueue = import("./storageQueue").StorageQueue;
export const StorageQueue: typeof import("./storageQueue").StorageQueue = null as any;
utilities.lazyLoad(exports, ["StorageQueue"], () => require("./storageQueue"));

export { StorageShareArgs, StorageShareState } from "./storageShare";
export type StorageShare = import("./storageShare").StorageShare;
export const StorageShare: typeof import("./storageShare").StorageShare = null as any;
utilities.lazyLoad(exports, ["StorageShare"], () => require("./storageShare"));

export { StorageShareDirectoryArgs, StorageShareDirectoryState } from "./storageShareDirectory";
export type StorageShareDirectory = import("./storageShareDirectory").StorageShareDirectory;
export const StorageShareDirectory: typeof import("./storageShareDirectory").StorageShareDirectory = null as any;
utilities.lazyLoad(exports, ["StorageShareDirectory"], () => require("./storageShareDirectory"));

export { StorageShareFileArgs, StorageShareFileState } from "./storageShareFile";
export type StorageShareFile = import("./storageShareFile").StorageShareFile;
export const StorageShareFile: typeof import("./storageShareFile").StorageShareFile = null as any;
utilities.lazyLoad(exports, ["StorageShareFile"], () => require("./storageShareFile"));

export { StorageSyncArgs, StorageSyncState } from "./storageSync";
export type StorageSync = import("./storageSync").StorageSync;
export const StorageSync: typeof import("./storageSync").StorageSync = null as any;
utilities.lazyLoad(exports, ["StorageSync"], () => require("./storageSync"));

export { StorageSyncCloudEndpointArgs, StorageSyncCloudEndpointState } from "./storageSyncCloudEndpoint";
export type StorageSyncCloudEndpoint = import("./storageSyncCloudEndpoint").StorageSyncCloudEndpoint;
export const StorageSyncCloudEndpoint: typeof import("./storageSyncCloudEndpoint").StorageSyncCloudEndpoint = null as any;
utilities.lazyLoad(exports, ["StorageSyncCloudEndpoint"], () => require("./storageSyncCloudEndpoint"));

export { StorageSyncGroupArgs, StorageSyncGroupState } from "./storageSyncGroup";
export type StorageSyncGroup = import("./storageSyncGroup").StorageSyncGroup;
export const StorageSyncGroup: typeof import("./storageSyncGroup").StorageSyncGroup = null as any;
utilities.lazyLoad(exports, ["StorageSyncGroup"], () => require("./storageSyncGroup"));

export { StorageSyncServerEndpointArgs, StorageSyncServerEndpointState } from "./storageSyncServerEndpoint";
export type StorageSyncServerEndpoint = import("./storageSyncServerEndpoint").StorageSyncServerEndpoint;
export const StorageSyncServerEndpoint: typeof import("./storageSyncServerEndpoint").StorageSyncServerEndpoint = null as any;
utilities.lazyLoad(exports, ["StorageSyncServerEndpoint"], () => require("./storageSyncServerEndpoint"));

export { StorageTableArgs, StorageTableState } from "./storageTable";
export type StorageTable = import("./storageTable").StorageTable;
export const StorageTable: typeof import("./storageTable").StorageTable = null as any;
utilities.lazyLoad(exports, ["StorageTable"], () => require("./storageTable"));

export { StorageTableEntityArgs, StorageTableEntityState } from "./storageTableEntity";
export type StorageTableEntity = import("./storageTableEntity").StorageTableEntity;
export const StorageTableEntity: typeof import("./storageTableEntity").StorageTableEntity = null as any;
utilities.lazyLoad(exports, ["StorageTableEntity"], () => require("./storageTableEntity"));

export { StreamAnalyticsClusterArgs, StreamAnalyticsClusterState } from "./streamAnalyticsCluster";
export type StreamAnalyticsCluster = import("./streamAnalyticsCluster").StreamAnalyticsCluster;
export const StreamAnalyticsCluster: typeof import("./streamAnalyticsCluster").StreamAnalyticsCluster = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsCluster"], () => require("./streamAnalyticsCluster"));

export { StreamAnalyticsFunctionJavascriptUdaArgs, StreamAnalyticsFunctionJavascriptUdaState } from "./streamAnalyticsFunctionJavascriptUda";
export type StreamAnalyticsFunctionJavascriptUda = import("./streamAnalyticsFunctionJavascriptUda").StreamAnalyticsFunctionJavascriptUda;
export const StreamAnalyticsFunctionJavascriptUda: typeof import("./streamAnalyticsFunctionJavascriptUda").StreamAnalyticsFunctionJavascriptUda = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsFunctionJavascriptUda"], () => require("./streamAnalyticsFunctionJavascriptUda"));

export { StreamAnalyticsFunctionJavascriptUdfArgs, StreamAnalyticsFunctionJavascriptUdfState } from "./streamAnalyticsFunctionJavascriptUdf";
export type StreamAnalyticsFunctionJavascriptUdf = import("./streamAnalyticsFunctionJavascriptUdf").StreamAnalyticsFunctionJavascriptUdf;
export const StreamAnalyticsFunctionJavascriptUdf: typeof import("./streamAnalyticsFunctionJavascriptUdf").StreamAnalyticsFunctionJavascriptUdf = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsFunctionJavascriptUdf"], () => require("./streamAnalyticsFunctionJavascriptUdf"));

export { StreamAnalyticsJobArgs, StreamAnalyticsJobState } from "./streamAnalyticsJob";
export type StreamAnalyticsJob = import("./streamAnalyticsJob").StreamAnalyticsJob;
export const StreamAnalyticsJob: typeof import("./streamAnalyticsJob").StreamAnalyticsJob = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsJob"], () => require("./streamAnalyticsJob"));

export { StreamAnalyticsJobScheduleArgs, StreamAnalyticsJobScheduleState } from "./streamAnalyticsJobSchedule";
export type StreamAnalyticsJobSchedule = import("./streamAnalyticsJobSchedule").StreamAnalyticsJobSchedule;
export const StreamAnalyticsJobSchedule: typeof import("./streamAnalyticsJobSchedule").StreamAnalyticsJobSchedule = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsJobSchedule"], () => require("./streamAnalyticsJobSchedule"));

export { StreamAnalyticsManagedPrivateEndpointArgs, StreamAnalyticsManagedPrivateEndpointState } from "./streamAnalyticsManagedPrivateEndpoint";
export type StreamAnalyticsManagedPrivateEndpoint = import("./streamAnalyticsManagedPrivateEndpoint").StreamAnalyticsManagedPrivateEndpoint;
export const StreamAnalyticsManagedPrivateEndpoint: typeof import("./streamAnalyticsManagedPrivateEndpoint").StreamAnalyticsManagedPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsManagedPrivateEndpoint"], () => require("./streamAnalyticsManagedPrivateEndpoint"));

export { StreamAnalyticsOutputBlobArgs, StreamAnalyticsOutputBlobState } from "./streamAnalyticsOutputBlob";
export type StreamAnalyticsOutputBlob = import("./streamAnalyticsOutputBlob").StreamAnalyticsOutputBlob;
export const StreamAnalyticsOutputBlob: typeof import("./streamAnalyticsOutputBlob").StreamAnalyticsOutputBlob = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsOutputBlob"], () => require("./streamAnalyticsOutputBlob"));

export { StreamAnalyticsOutputCosmosdbArgs, StreamAnalyticsOutputCosmosdbState } from "./streamAnalyticsOutputCosmosdb";
export type StreamAnalyticsOutputCosmosdb = import("./streamAnalyticsOutputCosmosdb").StreamAnalyticsOutputCosmosdb;
export const StreamAnalyticsOutputCosmosdb: typeof import("./streamAnalyticsOutputCosmosdb").StreamAnalyticsOutputCosmosdb = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsOutputCosmosdb"], () => require("./streamAnalyticsOutputCosmosdb"));

export { StreamAnalyticsOutputEventhubArgs, StreamAnalyticsOutputEventhubState } from "./streamAnalyticsOutputEventhub";
export type StreamAnalyticsOutputEventhub = import("./streamAnalyticsOutputEventhub").StreamAnalyticsOutputEventhub;
export const StreamAnalyticsOutputEventhub: typeof import("./streamAnalyticsOutputEventhub").StreamAnalyticsOutputEventhub = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsOutputEventhub"], () => require("./streamAnalyticsOutputEventhub"));

export { StreamAnalyticsOutputFunctionArgs, StreamAnalyticsOutputFunctionState } from "./streamAnalyticsOutputFunction";
export type StreamAnalyticsOutputFunction = import("./streamAnalyticsOutputFunction").StreamAnalyticsOutputFunction;
export const StreamAnalyticsOutputFunction: typeof import("./streamAnalyticsOutputFunction").StreamAnalyticsOutputFunction = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsOutputFunction"], () => require("./streamAnalyticsOutputFunction"));

export { StreamAnalyticsOutputMssqlArgs, StreamAnalyticsOutputMssqlState } from "./streamAnalyticsOutputMssql";
export type StreamAnalyticsOutputMssql = import("./streamAnalyticsOutputMssql").StreamAnalyticsOutputMssql;
export const StreamAnalyticsOutputMssql: typeof import("./streamAnalyticsOutputMssql").StreamAnalyticsOutputMssql = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsOutputMssql"], () => require("./streamAnalyticsOutputMssql"));

export { StreamAnalyticsOutputPowerbiArgs, StreamAnalyticsOutputPowerbiState } from "./streamAnalyticsOutputPowerbi";
export type StreamAnalyticsOutputPowerbi = import("./streamAnalyticsOutputPowerbi").StreamAnalyticsOutputPowerbi;
export const StreamAnalyticsOutputPowerbi: typeof import("./streamAnalyticsOutputPowerbi").StreamAnalyticsOutputPowerbi = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsOutputPowerbi"], () => require("./streamAnalyticsOutputPowerbi"));

export { StreamAnalyticsOutputServicebusQueueArgs, StreamAnalyticsOutputServicebusQueueState } from "./streamAnalyticsOutputServicebusQueue";
export type StreamAnalyticsOutputServicebusQueue = import("./streamAnalyticsOutputServicebusQueue").StreamAnalyticsOutputServicebusQueue;
export const StreamAnalyticsOutputServicebusQueue: typeof import("./streamAnalyticsOutputServicebusQueue").StreamAnalyticsOutputServicebusQueue = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsOutputServicebusQueue"], () => require("./streamAnalyticsOutputServicebusQueue"));

export { StreamAnalyticsOutputServicebusTopicArgs, StreamAnalyticsOutputServicebusTopicState } from "./streamAnalyticsOutputServicebusTopic";
export type StreamAnalyticsOutputServicebusTopic = import("./streamAnalyticsOutputServicebusTopic").StreamAnalyticsOutputServicebusTopic;
export const StreamAnalyticsOutputServicebusTopic: typeof import("./streamAnalyticsOutputServicebusTopic").StreamAnalyticsOutputServicebusTopic = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsOutputServicebusTopic"], () => require("./streamAnalyticsOutputServicebusTopic"));

export { StreamAnalyticsOutputSynapseArgs, StreamAnalyticsOutputSynapseState } from "./streamAnalyticsOutputSynapse";
export type StreamAnalyticsOutputSynapse = import("./streamAnalyticsOutputSynapse").StreamAnalyticsOutputSynapse;
export const StreamAnalyticsOutputSynapse: typeof import("./streamAnalyticsOutputSynapse").StreamAnalyticsOutputSynapse = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsOutputSynapse"], () => require("./streamAnalyticsOutputSynapse"));

export { StreamAnalyticsOutputTableArgs, StreamAnalyticsOutputTableState } from "./streamAnalyticsOutputTable";
export type StreamAnalyticsOutputTable = import("./streamAnalyticsOutputTable").StreamAnalyticsOutputTable;
export const StreamAnalyticsOutputTable: typeof import("./streamAnalyticsOutputTable").StreamAnalyticsOutputTable = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsOutputTable"], () => require("./streamAnalyticsOutputTable"));

export { StreamAnalyticsReferenceInputBlobArgs, StreamAnalyticsReferenceInputBlobState } from "./streamAnalyticsReferenceInputBlob";
export type StreamAnalyticsReferenceInputBlob = import("./streamAnalyticsReferenceInputBlob").StreamAnalyticsReferenceInputBlob;
export const StreamAnalyticsReferenceInputBlob: typeof import("./streamAnalyticsReferenceInputBlob").StreamAnalyticsReferenceInputBlob = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsReferenceInputBlob"], () => require("./streamAnalyticsReferenceInputBlob"));

export { StreamAnalyticsReferenceInputMssqlArgs, StreamAnalyticsReferenceInputMssqlState } from "./streamAnalyticsReferenceInputMssql";
export type StreamAnalyticsReferenceInputMssql = import("./streamAnalyticsReferenceInputMssql").StreamAnalyticsReferenceInputMssql;
export const StreamAnalyticsReferenceInputMssql: typeof import("./streamAnalyticsReferenceInputMssql").StreamAnalyticsReferenceInputMssql = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsReferenceInputMssql"], () => require("./streamAnalyticsReferenceInputMssql"));

export { StreamAnalyticsStreamInputBlobArgs, StreamAnalyticsStreamInputBlobState } from "./streamAnalyticsStreamInputBlob";
export type StreamAnalyticsStreamInputBlob = import("./streamAnalyticsStreamInputBlob").StreamAnalyticsStreamInputBlob;
export const StreamAnalyticsStreamInputBlob: typeof import("./streamAnalyticsStreamInputBlob").StreamAnalyticsStreamInputBlob = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsStreamInputBlob"], () => require("./streamAnalyticsStreamInputBlob"));

export { StreamAnalyticsStreamInputEventhubArgs, StreamAnalyticsStreamInputEventhubState } from "./streamAnalyticsStreamInputEventhub";
export type StreamAnalyticsStreamInputEventhub = import("./streamAnalyticsStreamInputEventhub").StreamAnalyticsStreamInputEventhub;
export const StreamAnalyticsStreamInputEventhub: typeof import("./streamAnalyticsStreamInputEventhub").StreamAnalyticsStreamInputEventhub = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsStreamInputEventhub"], () => require("./streamAnalyticsStreamInputEventhub"));

export { StreamAnalyticsStreamInputEventhubV2Args, StreamAnalyticsStreamInputEventhubV2State } from "./streamAnalyticsStreamInputEventhubV2";
export type StreamAnalyticsStreamInputEventhubV2 = import("./streamAnalyticsStreamInputEventhubV2").StreamAnalyticsStreamInputEventhubV2;
export const StreamAnalyticsStreamInputEventhubV2: typeof import("./streamAnalyticsStreamInputEventhubV2").StreamAnalyticsStreamInputEventhubV2 = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsStreamInputEventhubV2"], () => require("./streamAnalyticsStreamInputEventhubV2"));

export { StreamAnalyticsStreamInputIothubArgs, StreamAnalyticsStreamInputIothubState } from "./streamAnalyticsStreamInputIothub";
export type StreamAnalyticsStreamInputIothub = import("./streamAnalyticsStreamInputIothub").StreamAnalyticsStreamInputIothub;
export const StreamAnalyticsStreamInputIothub: typeof import("./streamAnalyticsStreamInputIothub").StreamAnalyticsStreamInputIothub = null as any;
utilities.lazyLoad(exports, ["StreamAnalyticsStreamInputIothub"], () => require("./streamAnalyticsStreamInputIothub"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { SubnetNatGatewayAssociationArgs, SubnetNatGatewayAssociationState } from "./subnetNatGatewayAssociation";
export type SubnetNatGatewayAssociation = import("./subnetNatGatewayAssociation").SubnetNatGatewayAssociation;
export const SubnetNatGatewayAssociation: typeof import("./subnetNatGatewayAssociation").SubnetNatGatewayAssociation = null as any;
utilities.lazyLoad(exports, ["SubnetNatGatewayAssociation"], () => require("./subnetNatGatewayAssociation"));

export { SubnetNetworkSecurityGroupAssociationArgs, SubnetNetworkSecurityGroupAssociationState } from "./subnetNetworkSecurityGroupAssociation";
export type SubnetNetworkSecurityGroupAssociation = import("./subnetNetworkSecurityGroupAssociation").SubnetNetworkSecurityGroupAssociation;
export const SubnetNetworkSecurityGroupAssociation: typeof import("./subnetNetworkSecurityGroupAssociation").SubnetNetworkSecurityGroupAssociation = null as any;
utilities.lazyLoad(exports, ["SubnetNetworkSecurityGroupAssociation"], () => require("./subnetNetworkSecurityGroupAssociation"));

export { SubnetRouteTableAssociationArgs, SubnetRouteTableAssociationState } from "./subnetRouteTableAssociation";
export type SubnetRouteTableAssociation = import("./subnetRouteTableAssociation").SubnetRouteTableAssociation;
export const SubnetRouteTableAssociation: typeof import("./subnetRouteTableAssociation").SubnetRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["SubnetRouteTableAssociation"], () => require("./subnetRouteTableAssociation"));

export { SubnetServiceEndpointStoragePolicyArgs, SubnetServiceEndpointStoragePolicyState } from "./subnetServiceEndpointStoragePolicy";
export type SubnetServiceEndpointStoragePolicy = import("./subnetServiceEndpointStoragePolicy").SubnetServiceEndpointStoragePolicy;
export const SubnetServiceEndpointStoragePolicy: typeof import("./subnetServiceEndpointStoragePolicy").SubnetServiceEndpointStoragePolicy = null as any;
utilities.lazyLoad(exports, ["SubnetServiceEndpointStoragePolicy"], () => require("./subnetServiceEndpointStoragePolicy"));

export { SubscriptionArgs, SubscriptionState } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));

export { SubscriptionCostManagementExportArgs, SubscriptionCostManagementExportState } from "./subscriptionCostManagementExport";
export type SubscriptionCostManagementExport = import("./subscriptionCostManagementExport").SubscriptionCostManagementExport;
export const SubscriptionCostManagementExport: typeof import("./subscriptionCostManagementExport").SubscriptionCostManagementExport = null as any;
utilities.lazyLoad(exports, ["SubscriptionCostManagementExport"], () => require("./subscriptionCostManagementExport"));

export { SubscriptionCostManagementViewArgs, SubscriptionCostManagementViewState } from "./subscriptionCostManagementView";
export type SubscriptionCostManagementView = import("./subscriptionCostManagementView").SubscriptionCostManagementView;
export const SubscriptionCostManagementView: typeof import("./subscriptionCostManagementView").SubscriptionCostManagementView = null as any;
utilities.lazyLoad(exports, ["SubscriptionCostManagementView"], () => require("./subscriptionCostManagementView"));

export { SubscriptionPolicyAssignmentArgs, SubscriptionPolicyAssignmentState } from "./subscriptionPolicyAssignment";
export type SubscriptionPolicyAssignment = import("./subscriptionPolicyAssignment").SubscriptionPolicyAssignment;
export const SubscriptionPolicyAssignment: typeof import("./subscriptionPolicyAssignment").SubscriptionPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["SubscriptionPolicyAssignment"], () => require("./subscriptionPolicyAssignment"));

export { SubscriptionPolicyExemptionArgs, SubscriptionPolicyExemptionState } from "./subscriptionPolicyExemption";
export type SubscriptionPolicyExemption = import("./subscriptionPolicyExemption").SubscriptionPolicyExemption;
export const SubscriptionPolicyExemption: typeof import("./subscriptionPolicyExemption").SubscriptionPolicyExemption = null as any;
utilities.lazyLoad(exports, ["SubscriptionPolicyExemption"], () => require("./subscriptionPolicyExemption"));

export { SubscriptionPolicyRemediationArgs, SubscriptionPolicyRemediationState } from "./subscriptionPolicyRemediation";
export type SubscriptionPolicyRemediation = import("./subscriptionPolicyRemediation").SubscriptionPolicyRemediation;
export const SubscriptionPolicyRemediation: typeof import("./subscriptionPolicyRemediation").SubscriptionPolicyRemediation = null as any;
utilities.lazyLoad(exports, ["SubscriptionPolicyRemediation"], () => require("./subscriptionPolicyRemediation"));

export { SubscriptionTemplateDeploymentArgs, SubscriptionTemplateDeploymentState } from "./subscriptionTemplateDeployment";
export type SubscriptionTemplateDeployment = import("./subscriptionTemplateDeployment").SubscriptionTemplateDeployment;
export const SubscriptionTemplateDeployment: typeof import("./subscriptionTemplateDeployment").SubscriptionTemplateDeployment = null as any;
utilities.lazyLoad(exports, ["SubscriptionTemplateDeployment"], () => require("./subscriptionTemplateDeployment"));

export { SynapseFirewallRuleArgs, SynapseFirewallRuleState } from "./synapseFirewallRule";
export type SynapseFirewallRule = import("./synapseFirewallRule").SynapseFirewallRule;
export const SynapseFirewallRule: typeof import("./synapseFirewallRule").SynapseFirewallRule = null as any;
utilities.lazyLoad(exports, ["SynapseFirewallRule"], () => require("./synapseFirewallRule"));

export { SynapseIntegrationRuntimeAzureArgs, SynapseIntegrationRuntimeAzureState } from "./synapseIntegrationRuntimeAzure";
export type SynapseIntegrationRuntimeAzure = import("./synapseIntegrationRuntimeAzure").SynapseIntegrationRuntimeAzure;
export const SynapseIntegrationRuntimeAzure: typeof import("./synapseIntegrationRuntimeAzure").SynapseIntegrationRuntimeAzure = null as any;
utilities.lazyLoad(exports, ["SynapseIntegrationRuntimeAzure"], () => require("./synapseIntegrationRuntimeAzure"));

export { SynapseIntegrationRuntimeSelfHostedArgs, SynapseIntegrationRuntimeSelfHostedState } from "./synapseIntegrationRuntimeSelfHosted";
export type SynapseIntegrationRuntimeSelfHosted = import("./synapseIntegrationRuntimeSelfHosted").SynapseIntegrationRuntimeSelfHosted;
export const SynapseIntegrationRuntimeSelfHosted: typeof import("./synapseIntegrationRuntimeSelfHosted").SynapseIntegrationRuntimeSelfHosted = null as any;
utilities.lazyLoad(exports, ["SynapseIntegrationRuntimeSelfHosted"], () => require("./synapseIntegrationRuntimeSelfHosted"));

export { SynapseLinkedServiceArgs, SynapseLinkedServiceState } from "./synapseLinkedService";
export type SynapseLinkedService = import("./synapseLinkedService").SynapseLinkedService;
export const SynapseLinkedService: typeof import("./synapseLinkedService").SynapseLinkedService = null as any;
utilities.lazyLoad(exports, ["SynapseLinkedService"], () => require("./synapseLinkedService"));

export { SynapseManagedPrivateEndpointArgs, SynapseManagedPrivateEndpointState } from "./synapseManagedPrivateEndpoint";
export type SynapseManagedPrivateEndpoint = import("./synapseManagedPrivateEndpoint").SynapseManagedPrivateEndpoint;
export const SynapseManagedPrivateEndpoint: typeof import("./synapseManagedPrivateEndpoint").SynapseManagedPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["SynapseManagedPrivateEndpoint"], () => require("./synapseManagedPrivateEndpoint"));

export { SynapsePrivateLinkHubArgs, SynapsePrivateLinkHubState } from "./synapsePrivateLinkHub";
export type SynapsePrivateLinkHub = import("./synapsePrivateLinkHub").SynapsePrivateLinkHub;
export const SynapsePrivateLinkHub: typeof import("./synapsePrivateLinkHub").SynapsePrivateLinkHub = null as any;
utilities.lazyLoad(exports, ["SynapsePrivateLinkHub"], () => require("./synapsePrivateLinkHub"));

export { SynapseRoleAssignmentArgs, SynapseRoleAssignmentState } from "./synapseRoleAssignment";
export type SynapseRoleAssignment = import("./synapseRoleAssignment").SynapseRoleAssignment;
export const SynapseRoleAssignment: typeof import("./synapseRoleAssignment").SynapseRoleAssignment = null as any;
utilities.lazyLoad(exports, ["SynapseRoleAssignment"], () => require("./synapseRoleAssignment"));

export { SynapseSparkPoolArgs, SynapseSparkPoolState } from "./synapseSparkPool";
export type SynapseSparkPool = import("./synapseSparkPool").SynapseSparkPool;
export const SynapseSparkPool: typeof import("./synapseSparkPool").SynapseSparkPool = null as any;
utilities.lazyLoad(exports, ["SynapseSparkPool"], () => require("./synapseSparkPool"));

export { SynapseSqlPoolArgs, SynapseSqlPoolState } from "./synapseSqlPool";
export type SynapseSqlPool = import("./synapseSqlPool").SynapseSqlPool;
export const SynapseSqlPool: typeof import("./synapseSqlPool").SynapseSqlPool = null as any;
utilities.lazyLoad(exports, ["SynapseSqlPool"], () => require("./synapseSqlPool"));

export { SynapseSqlPoolExtendedAuditingPolicyArgs, SynapseSqlPoolExtendedAuditingPolicyState } from "./synapseSqlPoolExtendedAuditingPolicy";
export type SynapseSqlPoolExtendedAuditingPolicy = import("./synapseSqlPoolExtendedAuditingPolicy").SynapseSqlPoolExtendedAuditingPolicy;
export const SynapseSqlPoolExtendedAuditingPolicy: typeof import("./synapseSqlPoolExtendedAuditingPolicy").SynapseSqlPoolExtendedAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["SynapseSqlPoolExtendedAuditingPolicy"], () => require("./synapseSqlPoolExtendedAuditingPolicy"));

export { SynapseSqlPoolSecurityAlertPolicyArgs, SynapseSqlPoolSecurityAlertPolicyState } from "./synapseSqlPoolSecurityAlertPolicy";
export type SynapseSqlPoolSecurityAlertPolicy = import("./synapseSqlPoolSecurityAlertPolicy").SynapseSqlPoolSecurityAlertPolicy;
export const SynapseSqlPoolSecurityAlertPolicy: typeof import("./synapseSqlPoolSecurityAlertPolicy").SynapseSqlPoolSecurityAlertPolicy = null as any;
utilities.lazyLoad(exports, ["SynapseSqlPoolSecurityAlertPolicy"], () => require("./synapseSqlPoolSecurityAlertPolicy"));

export { SynapseSqlPoolVulnerabilityAssessmentArgs, SynapseSqlPoolVulnerabilityAssessmentState } from "./synapseSqlPoolVulnerabilityAssessment";
export type SynapseSqlPoolVulnerabilityAssessment = import("./synapseSqlPoolVulnerabilityAssessment").SynapseSqlPoolVulnerabilityAssessment;
export const SynapseSqlPoolVulnerabilityAssessment: typeof import("./synapseSqlPoolVulnerabilityAssessment").SynapseSqlPoolVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["SynapseSqlPoolVulnerabilityAssessment"], () => require("./synapseSqlPoolVulnerabilityAssessment"));

export { SynapseSqlPoolVulnerabilityAssessmentBaselineArgs, SynapseSqlPoolVulnerabilityAssessmentBaselineState } from "./synapseSqlPoolVulnerabilityAssessmentBaseline";
export type SynapseSqlPoolVulnerabilityAssessmentBaseline = import("./synapseSqlPoolVulnerabilityAssessmentBaseline").SynapseSqlPoolVulnerabilityAssessmentBaseline;
export const SynapseSqlPoolVulnerabilityAssessmentBaseline: typeof import("./synapseSqlPoolVulnerabilityAssessmentBaseline").SynapseSqlPoolVulnerabilityAssessmentBaseline = null as any;
utilities.lazyLoad(exports, ["SynapseSqlPoolVulnerabilityAssessmentBaseline"], () => require("./synapseSqlPoolVulnerabilityAssessmentBaseline"));

export { SynapseSqlPoolWorkloadClassifierArgs, SynapseSqlPoolWorkloadClassifierState } from "./synapseSqlPoolWorkloadClassifier";
export type SynapseSqlPoolWorkloadClassifier = import("./synapseSqlPoolWorkloadClassifier").SynapseSqlPoolWorkloadClassifier;
export const SynapseSqlPoolWorkloadClassifier: typeof import("./synapseSqlPoolWorkloadClassifier").SynapseSqlPoolWorkloadClassifier = null as any;
utilities.lazyLoad(exports, ["SynapseSqlPoolWorkloadClassifier"], () => require("./synapseSqlPoolWorkloadClassifier"));

export { SynapseSqlPoolWorkloadGroupArgs, SynapseSqlPoolWorkloadGroupState } from "./synapseSqlPoolWorkloadGroup";
export type SynapseSqlPoolWorkloadGroup = import("./synapseSqlPoolWorkloadGroup").SynapseSqlPoolWorkloadGroup;
export const SynapseSqlPoolWorkloadGroup: typeof import("./synapseSqlPoolWorkloadGroup").SynapseSqlPoolWorkloadGroup = null as any;
utilities.lazyLoad(exports, ["SynapseSqlPoolWorkloadGroup"], () => require("./synapseSqlPoolWorkloadGroup"));

export { SynapseWorkspaceArgs, SynapseWorkspaceState } from "./synapseWorkspace";
export type SynapseWorkspace = import("./synapseWorkspace").SynapseWorkspace;
export const SynapseWorkspace: typeof import("./synapseWorkspace").SynapseWorkspace = null as any;
utilities.lazyLoad(exports, ["SynapseWorkspace"], () => require("./synapseWorkspace"));

export { SynapseWorkspaceAadAdminArgs, SynapseWorkspaceAadAdminState } from "./synapseWorkspaceAadAdmin";
export type SynapseWorkspaceAadAdmin = import("./synapseWorkspaceAadAdmin").SynapseWorkspaceAadAdmin;
export const SynapseWorkspaceAadAdmin: typeof import("./synapseWorkspaceAadAdmin").SynapseWorkspaceAadAdmin = null as any;
utilities.lazyLoad(exports, ["SynapseWorkspaceAadAdmin"], () => require("./synapseWorkspaceAadAdmin"));

export { SynapseWorkspaceExtendedAuditingPolicyArgs, SynapseWorkspaceExtendedAuditingPolicyState } from "./synapseWorkspaceExtendedAuditingPolicy";
export type SynapseWorkspaceExtendedAuditingPolicy = import("./synapseWorkspaceExtendedAuditingPolicy").SynapseWorkspaceExtendedAuditingPolicy;
export const SynapseWorkspaceExtendedAuditingPolicy: typeof import("./synapseWorkspaceExtendedAuditingPolicy").SynapseWorkspaceExtendedAuditingPolicy = null as any;
utilities.lazyLoad(exports, ["SynapseWorkspaceExtendedAuditingPolicy"], () => require("./synapseWorkspaceExtendedAuditingPolicy"));

export { SynapseWorkspaceKeyArgs, SynapseWorkspaceKeyState } from "./synapseWorkspaceKey";
export type SynapseWorkspaceKey = import("./synapseWorkspaceKey").SynapseWorkspaceKey;
export const SynapseWorkspaceKey: typeof import("./synapseWorkspaceKey").SynapseWorkspaceKey = null as any;
utilities.lazyLoad(exports, ["SynapseWorkspaceKey"], () => require("./synapseWorkspaceKey"));

export { SynapseWorkspaceSecurityAlertPolicyArgs, SynapseWorkspaceSecurityAlertPolicyState } from "./synapseWorkspaceSecurityAlertPolicy";
export type SynapseWorkspaceSecurityAlertPolicy = import("./synapseWorkspaceSecurityAlertPolicy").SynapseWorkspaceSecurityAlertPolicy;
export const SynapseWorkspaceSecurityAlertPolicy: typeof import("./synapseWorkspaceSecurityAlertPolicy").SynapseWorkspaceSecurityAlertPolicy = null as any;
utilities.lazyLoad(exports, ["SynapseWorkspaceSecurityAlertPolicy"], () => require("./synapseWorkspaceSecurityAlertPolicy"));

export { SynapseWorkspaceSqlAadAdminArgs, SynapseWorkspaceSqlAadAdminState } from "./synapseWorkspaceSqlAadAdmin";
export type SynapseWorkspaceSqlAadAdmin = import("./synapseWorkspaceSqlAadAdmin").SynapseWorkspaceSqlAadAdmin;
export const SynapseWorkspaceSqlAadAdmin: typeof import("./synapseWorkspaceSqlAadAdmin").SynapseWorkspaceSqlAadAdmin = null as any;
utilities.lazyLoad(exports, ["SynapseWorkspaceSqlAadAdmin"], () => require("./synapseWorkspaceSqlAadAdmin"));

export { SynapseWorkspaceVulnerabilityAssessmentArgs, SynapseWorkspaceVulnerabilityAssessmentState } from "./synapseWorkspaceVulnerabilityAssessment";
export type SynapseWorkspaceVulnerabilityAssessment = import("./synapseWorkspaceVulnerabilityAssessment").SynapseWorkspaceVulnerabilityAssessment;
export const SynapseWorkspaceVulnerabilityAssessment: typeof import("./synapseWorkspaceVulnerabilityAssessment").SynapseWorkspaceVulnerabilityAssessment = null as any;
utilities.lazyLoad(exports, ["SynapseWorkspaceVulnerabilityAssessment"], () => require("./synapseWorkspaceVulnerabilityAssessment"));

export { SystemCenterVirtualMachineManagerAvailabilitySetArgs, SystemCenterVirtualMachineManagerAvailabilitySetState } from "./systemCenterVirtualMachineManagerAvailabilitySet";
export type SystemCenterVirtualMachineManagerAvailabilitySet = import("./systemCenterVirtualMachineManagerAvailabilitySet").SystemCenterVirtualMachineManagerAvailabilitySet;
export const SystemCenterVirtualMachineManagerAvailabilitySet: typeof import("./systemCenterVirtualMachineManagerAvailabilitySet").SystemCenterVirtualMachineManagerAvailabilitySet = null as any;
utilities.lazyLoad(exports, ["SystemCenterVirtualMachineManagerAvailabilitySet"], () => require("./systemCenterVirtualMachineManagerAvailabilitySet"));

export { SystemCenterVirtualMachineManagerCloudArgs, SystemCenterVirtualMachineManagerCloudState } from "./systemCenterVirtualMachineManagerCloud";
export type SystemCenterVirtualMachineManagerCloud = import("./systemCenterVirtualMachineManagerCloud").SystemCenterVirtualMachineManagerCloud;
export const SystemCenterVirtualMachineManagerCloud: typeof import("./systemCenterVirtualMachineManagerCloud").SystemCenterVirtualMachineManagerCloud = null as any;
utilities.lazyLoad(exports, ["SystemCenterVirtualMachineManagerCloud"], () => require("./systemCenterVirtualMachineManagerCloud"));

export { SystemCenterVirtualMachineManagerServerArgs, SystemCenterVirtualMachineManagerServerState } from "./systemCenterVirtualMachineManagerServer";
export type SystemCenterVirtualMachineManagerServer = import("./systemCenterVirtualMachineManagerServer").SystemCenterVirtualMachineManagerServer;
export const SystemCenterVirtualMachineManagerServer: typeof import("./systemCenterVirtualMachineManagerServer").SystemCenterVirtualMachineManagerServer = null as any;
utilities.lazyLoad(exports, ["SystemCenterVirtualMachineManagerServer"], () => require("./systemCenterVirtualMachineManagerServer"));

export { SystemCenterVirtualMachineManagerVirtualMachineTemplateArgs, SystemCenterVirtualMachineManagerVirtualMachineTemplateState } from "./systemCenterVirtualMachineManagerVirtualMachineTemplate";
export type SystemCenterVirtualMachineManagerVirtualMachineTemplate = import("./systemCenterVirtualMachineManagerVirtualMachineTemplate").SystemCenterVirtualMachineManagerVirtualMachineTemplate;
export const SystemCenterVirtualMachineManagerVirtualMachineTemplate: typeof import("./systemCenterVirtualMachineManagerVirtualMachineTemplate").SystemCenterVirtualMachineManagerVirtualMachineTemplate = null as any;
utilities.lazyLoad(exports, ["SystemCenterVirtualMachineManagerVirtualMachineTemplate"], () => require("./systemCenterVirtualMachineManagerVirtualMachineTemplate"));

export { SystemCenterVirtualMachineManagerVirtualNetworkArgs, SystemCenterVirtualMachineManagerVirtualNetworkState } from "./systemCenterVirtualMachineManagerVirtualNetwork";
export type SystemCenterVirtualMachineManagerVirtualNetwork = import("./systemCenterVirtualMachineManagerVirtualNetwork").SystemCenterVirtualMachineManagerVirtualNetwork;
export const SystemCenterVirtualMachineManagerVirtualNetwork: typeof import("./systemCenterVirtualMachineManagerVirtualNetwork").SystemCenterVirtualMachineManagerVirtualNetwork = null as any;
utilities.lazyLoad(exports, ["SystemCenterVirtualMachineManagerVirtualNetwork"], () => require("./systemCenterVirtualMachineManagerVirtualNetwork"));

export { TenantTemplateDeploymentArgs, TenantTemplateDeploymentState } from "./tenantTemplateDeployment";
export type TenantTemplateDeployment = import("./tenantTemplateDeployment").TenantTemplateDeployment;
export const TenantTemplateDeployment: typeof import("./tenantTemplateDeployment").TenantTemplateDeployment = null as any;
utilities.lazyLoad(exports, ["TenantTemplateDeployment"], () => require("./tenantTemplateDeployment"));

export { TrafficManagerAzureEndpointArgs, TrafficManagerAzureEndpointState } from "./trafficManagerAzureEndpoint";
export type TrafficManagerAzureEndpoint = import("./trafficManagerAzureEndpoint").TrafficManagerAzureEndpoint;
export const TrafficManagerAzureEndpoint: typeof import("./trafficManagerAzureEndpoint").TrafficManagerAzureEndpoint = null as any;
utilities.lazyLoad(exports, ["TrafficManagerAzureEndpoint"], () => require("./trafficManagerAzureEndpoint"));

export { TrafficManagerExternalEndpointArgs, TrafficManagerExternalEndpointState } from "./trafficManagerExternalEndpoint";
export type TrafficManagerExternalEndpoint = import("./trafficManagerExternalEndpoint").TrafficManagerExternalEndpoint;
export const TrafficManagerExternalEndpoint: typeof import("./trafficManagerExternalEndpoint").TrafficManagerExternalEndpoint = null as any;
utilities.lazyLoad(exports, ["TrafficManagerExternalEndpoint"], () => require("./trafficManagerExternalEndpoint"));

export { TrafficManagerNestedEndpointArgs, TrafficManagerNestedEndpointState } from "./trafficManagerNestedEndpoint";
export type TrafficManagerNestedEndpoint = import("./trafficManagerNestedEndpoint").TrafficManagerNestedEndpoint;
export const TrafficManagerNestedEndpoint: typeof import("./trafficManagerNestedEndpoint").TrafficManagerNestedEndpoint = null as any;
utilities.lazyLoad(exports, ["TrafficManagerNestedEndpoint"], () => require("./trafficManagerNestedEndpoint"));

export { TrafficManagerProfileArgs, TrafficManagerProfileState } from "./trafficManagerProfile";
export type TrafficManagerProfile = import("./trafficManagerProfile").TrafficManagerProfile;
export const TrafficManagerProfile: typeof import("./trafficManagerProfile").TrafficManagerProfile = null as any;
utilities.lazyLoad(exports, ["TrafficManagerProfile"], () => require("./trafficManagerProfile"));

export { UserAssignedIdentityArgs, UserAssignedIdentityState } from "./userAssignedIdentity";
export type UserAssignedIdentity = import("./userAssignedIdentity").UserAssignedIdentity;
export const UserAssignedIdentity: typeof import("./userAssignedIdentity").UserAssignedIdentity = null as any;
utilities.lazyLoad(exports, ["UserAssignedIdentity"], () => require("./userAssignedIdentity"));

export { VirtualDesktopApplicationArgs, VirtualDesktopApplicationState } from "./virtualDesktopApplication";
export type VirtualDesktopApplication = import("./virtualDesktopApplication").VirtualDesktopApplication;
export const VirtualDesktopApplication: typeof import("./virtualDesktopApplication").VirtualDesktopApplication = null as any;
utilities.lazyLoad(exports, ["VirtualDesktopApplication"], () => require("./virtualDesktopApplication"));

export { VirtualDesktopApplicationGroupArgs, VirtualDesktopApplicationGroupState } from "./virtualDesktopApplicationGroup";
export type VirtualDesktopApplicationGroup = import("./virtualDesktopApplicationGroup").VirtualDesktopApplicationGroup;
export const VirtualDesktopApplicationGroup: typeof import("./virtualDesktopApplicationGroup").VirtualDesktopApplicationGroup = null as any;
utilities.lazyLoad(exports, ["VirtualDesktopApplicationGroup"], () => require("./virtualDesktopApplicationGroup"));

export { VirtualDesktopHostPoolArgs, VirtualDesktopHostPoolState } from "./virtualDesktopHostPool";
export type VirtualDesktopHostPool = import("./virtualDesktopHostPool").VirtualDesktopHostPool;
export const VirtualDesktopHostPool: typeof import("./virtualDesktopHostPool").VirtualDesktopHostPool = null as any;
utilities.lazyLoad(exports, ["VirtualDesktopHostPool"], () => require("./virtualDesktopHostPool"));

export { VirtualDesktopHostPoolRegistrationInfoArgs, VirtualDesktopHostPoolRegistrationInfoState } from "./virtualDesktopHostPoolRegistrationInfo";
export type VirtualDesktopHostPoolRegistrationInfo = import("./virtualDesktopHostPoolRegistrationInfo").VirtualDesktopHostPoolRegistrationInfo;
export const VirtualDesktopHostPoolRegistrationInfo: typeof import("./virtualDesktopHostPoolRegistrationInfo").VirtualDesktopHostPoolRegistrationInfo = null as any;
utilities.lazyLoad(exports, ["VirtualDesktopHostPoolRegistrationInfo"], () => require("./virtualDesktopHostPoolRegistrationInfo"));

export { VirtualDesktopScalingPlanArgs, VirtualDesktopScalingPlanState } from "./virtualDesktopScalingPlan";
export type VirtualDesktopScalingPlan = import("./virtualDesktopScalingPlan").VirtualDesktopScalingPlan;
export const VirtualDesktopScalingPlan: typeof import("./virtualDesktopScalingPlan").VirtualDesktopScalingPlan = null as any;
utilities.lazyLoad(exports, ["VirtualDesktopScalingPlan"], () => require("./virtualDesktopScalingPlan"));

export { VirtualDesktopScalingPlanHostPoolAssociationArgs, VirtualDesktopScalingPlanHostPoolAssociationState } from "./virtualDesktopScalingPlanHostPoolAssociation";
export type VirtualDesktopScalingPlanHostPoolAssociation = import("./virtualDesktopScalingPlanHostPoolAssociation").VirtualDesktopScalingPlanHostPoolAssociation;
export const VirtualDesktopScalingPlanHostPoolAssociation: typeof import("./virtualDesktopScalingPlanHostPoolAssociation").VirtualDesktopScalingPlanHostPoolAssociation = null as any;
utilities.lazyLoad(exports, ["VirtualDesktopScalingPlanHostPoolAssociation"], () => require("./virtualDesktopScalingPlanHostPoolAssociation"));

export { VirtualDesktopWorkspaceArgs, VirtualDesktopWorkspaceState } from "./virtualDesktopWorkspace";
export type VirtualDesktopWorkspace = import("./virtualDesktopWorkspace").VirtualDesktopWorkspace;
export const VirtualDesktopWorkspace: typeof import("./virtualDesktopWorkspace").VirtualDesktopWorkspace = null as any;
utilities.lazyLoad(exports, ["VirtualDesktopWorkspace"], () => require("./virtualDesktopWorkspace"));

export { VirtualDesktopWorkspaceApplicationGroupAssociationArgs, VirtualDesktopWorkspaceApplicationGroupAssociationState } from "./virtualDesktopWorkspaceApplicationGroupAssociation";
export type VirtualDesktopWorkspaceApplicationGroupAssociation = import("./virtualDesktopWorkspaceApplicationGroupAssociation").VirtualDesktopWorkspaceApplicationGroupAssociation;
export const VirtualDesktopWorkspaceApplicationGroupAssociation: typeof import("./virtualDesktopWorkspaceApplicationGroupAssociation").VirtualDesktopWorkspaceApplicationGroupAssociation = null as any;
utilities.lazyLoad(exports, ["VirtualDesktopWorkspaceApplicationGroupAssociation"], () => require("./virtualDesktopWorkspaceApplicationGroupAssociation"));

export { VirtualHubArgs, VirtualHubState } from "./virtualHub";
export type VirtualHub = import("./virtualHub").VirtualHub;
export const VirtualHub: typeof import("./virtualHub").VirtualHub = null as any;
utilities.lazyLoad(exports, ["VirtualHub"], () => require("./virtualHub"));

export { VirtualHubBgpConnectionArgs, VirtualHubBgpConnectionState } from "./virtualHubBgpConnection";
export type VirtualHubBgpConnection = import("./virtualHubBgpConnection").VirtualHubBgpConnection;
export const VirtualHubBgpConnection: typeof import("./virtualHubBgpConnection").VirtualHubBgpConnection = null as any;
utilities.lazyLoad(exports, ["VirtualHubBgpConnection"], () => require("./virtualHubBgpConnection"));

export { VirtualHubConnectionArgs, VirtualHubConnectionState } from "./virtualHubConnection";
export type VirtualHubConnection = import("./virtualHubConnection").VirtualHubConnection;
export const VirtualHubConnection: typeof import("./virtualHubConnection").VirtualHubConnection = null as any;
utilities.lazyLoad(exports, ["VirtualHubConnection"], () => require("./virtualHubConnection"));

export { VirtualHubIpArgs, VirtualHubIpState } from "./virtualHubIp";
export type VirtualHubIp = import("./virtualHubIp").VirtualHubIp;
export const VirtualHubIp: typeof import("./virtualHubIp").VirtualHubIp = null as any;
utilities.lazyLoad(exports, ["VirtualHubIp"], () => require("./virtualHubIp"));

export { VirtualHubRouteTableArgs, VirtualHubRouteTableState } from "./virtualHubRouteTable";
export type VirtualHubRouteTable = import("./virtualHubRouteTable").VirtualHubRouteTable;
export const VirtualHubRouteTable: typeof import("./virtualHubRouteTable").VirtualHubRouteTable = null as any;
utilities.lazyLoad(exports, ["VirtualHubRouteTable"], () => require("./virtualHubRouteTable"));

export { VirtualHubRouteTableRouteArgs, VirtualHubRouteTableRouteState } from "./virtualHubRouteTableRoute";
export type VirtualHubRouteTableRoute = import("./virtualHubRouteTableRoute").VirtualHubRouteTableRoute;
export const VirtualHubRouteTableRoute: typeof import("./virtualHubRouteTableRoute").VirtualHubRouteTableRoute = null as any;
utilities.lazyLoad(exports, ["VirtualHubRouteTableRoute"], () => require("./virtualHubRouteTableRoute"));

export { VirtualHubRoutingIntentArgs, VirtualHubRoutingIntentState } from "./virtualHubRoutingIntent";
export type VirtualHubRoutingIntent = import("./virtualHubRoutingIntent").VirtualHubRoutingIntent;
export const VirtualHubRoutingIntent: typeof import("./virtualHubRoutingIntent").VirtualHubRoutingIntent = null as any;
utilities.lazyLoad(exports, ["VirtualHubRoutingIntent"], () => require("./virtualHubRoutingIntent"));

export { VirtualHubSecurityPartnerProviderArgs, VirtualHubSecurityPartnerProviderState } from "./virtualHubSecurityPartnerProvider";
export type VirtualHubSecurityPartnerProvider = import("./virtualHubSecurityPartnerProvider").VirtualHubSecurityPartnerProvider;
export const VirtualHubSecurityPartnerProvider: typeof import("./virtualHubSecurityPartnerProvider").VirtualHubSecurityPartnerProvider = null as any;
utilities.lazyLoad(exports, ["VirtualHubSecurityPartnerProvider"], () => require("./virtualHubSecurityPartnerProvider"));

export { VirtualMachineArgs, VirtualMachineState } from "./virtualMachine";
export type VirtualMachine = import("./virtualMachine").VirtualMachine;
export const VirtualMachine: typeof import("./virtualMachine").VirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));

export { VirtualMachineAutomanageConfigurationAssignmentArgs, VirtualMachineAutomanageConfigurationAssignmentState } from "./virtualMachineAutomanageConfigurationAssignment";
export type VirtualMachineAutomanageConfigurationAssignment = import("./virtualMachineAutomanageConfigurationAssignment").VirtualMachineAutomanageConfigurationAssignment;
export const VirtualMachineAutomanageConfigurationAssignment: typeof import("./virtualMachineAutomanageConfigurationAssignment").VirtualMachineAutomanageConfigurationAssignment = null as any;
utilities.lazyLoad(exports, ["VirtualMachineAutomanageConfigurationAssignment"], () => require("./virtualMachineAutomanageConfigurationAssignment"));

export { VirtualMachineDataDiskAttachmentArgs, VirtualMachineDataDiskAttachmentState } from "./virtualMachineDataDiskAttachment";
export type VirtualMachineDataDiskAttachment = import("./virtualMachineDataDiskAttachment").VirtualMachineDataDiskAttachment;
export const VirtualMachineDataDiskAttachment: typeof import("./virtualMachineDataDiskAttachment").VirtualMachineDataDiskAttachment = null as any;
utilities.lazyLoad(exports, ["VirtualMachineDataDiskAttachment"], () => require("./virtualMachineDataDiskAttachment"));

export { VirtualMachineExtensionArgs, VirtualMachineExtensionState } from "./virtualMachineExtension";
export type VirtualMachineExtension = import("./virtualMachineExtension").VirtualMachineExtension;
export const VirtualMachineExtension: typeof import("./virtualMachineExtension").VirtualMachineExtension = null as any;
utilities.lazyLoad(exports, ["VirtualMachineExtension"], () => require("./virtualMachineExtension"));

export { VirtualMachineGalleryApplicationAssignmentArgs, VirtualMachineGalleryApplicationAssignmentState } from "./virtualMachineGalleryApplicationAssignment";
export type VirtualMachineGalleryApplicationAssignment = import("./virtualMachineGalleryApplicationAssignment").VirtualMachineGalleryApplicationAssignment;
export const VirtualMachineGalleryApplicationAssignment: typeof import("./virtualMachineGalleryApplicationAssignment").VirtualMachineGalleryApplicationAssignment = null as any;
utilities.lazyLoad(exports, ["VirtualMachineGalleryApplicationAssignment"], () => require("./virtualMachineGalleryApplicationAssignment"));

export { VirtualMachineImplicitDataDiskFromSourceArgs, VirtualMachineImplicitDataDiskFromSourceState } from "./virtualMachineImplicitDataDiskFromSource";
export type VirtualMachineImplicitDataDiskFromSource = import("./virtualMachineImplicitDataDiskFromSource").VirtualMachineImplicitDataDiskFromSource;
export const VirtualMachineImplicitDataDiskFromSource: typeof import("./virtualMachineImplicitDataDiskFromSource").VirtualMachineImplicitDataDiskFromSource = null as any;
utilities.lazyLoad(exports, ["VirtualMachineImplicitDataDiskFromSource"], () => require("./virtualMachineImplicitDataDiskFromSource"));

export { VirtualMachinePacketCaptureArgs, VirtualMachinePacketCaptureState } from "./virtualMachinePacketCapture";
export type VirtualMachinePacketCapture = import("./virtualMachinePacketCapture").VirtualMachinePacketCapture;
export const VirtualMachinePacketCapture: typeof import("./virtualMachinePacketCapture").VirtualMachinePacketCapture = null as any;
utilities.lazyLoad(exports, ["VirtualMachinePacketCapture"], () => require("./virtualMachinePacketCapture"));

export { VirtualMachineRestorePointArgs, VirtualMachineRestorePointState } from "./virtualMachineRestorePoint";
export type VirtualMachineRestorePoint = import("./virtualMachineRestorePoint").VirtualMachineRestorePoint;
export const VirtualMachineRestorePoint: typeof import("./virtualMachineRestorePoint").VirtualMachineRestorePoint = null as any;
utilities.lazyLoad(exports, ["VirtualMachineRestorePoint"], () => require("./virtualMachineRestorePoint"));

export { VirtualMachineRestorePointCollectionArgs, VirtualMachineRestorePointCollectionState } from "./virtualMachineRestorePointCollection";
export type VirtualMachineRestorePointCollection = import("./virtualMachineRestorePointCollection").VirtualMachineRestorePointCollection;
export const VirtualMachineRestorePointCollection: typeof import("./virtualMachineRestorePointCollection").VirtualMachineRestorePointCollection = null as any;
utilities.lazyLoad(exports, ["VirtualMachineRestorePointCollection"], () => require("./virtualMachineRestorePointCollection"));

export { VirtualMachineRunCommandArgs, VirtualMachineRunCommandState } from "./virtualMachineRunCommand";
export type VirtualMachineRunCommand = import("./virtualMachineRunCommand").VirtualMachineRunCommand;
export const VirtualMachineRunCommand: typeof import("./virtualMachineRunCommand").VirtualMachineRunCommand = null as any;
utilities.lazyLoad(exports, ["VirtualMachineRunCommand"], () => require("./virtualMachineRunCommand"));

export { VirtualMachineScaleSetArgs, VirtualMachineScaleSetState } from "./virtualMachineScaleSet";
export type VirtualMachineScaleSet = import("./virtualMachineScaleSet").VirtualMachineScaleSet;
export const VirtualMachineScaleSet: typeof import("./virtualMachineScaleSet").VirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["VirtualMachineScaleSet"], () => require("./virtualMachineScaleSet"));

export { VirtualMachineScaleSetExtensionArgs, VirtualMachineScaleSetExtensionState } from "./virtualMachineScaleSetExtension";
export type VirtualMachineScaleSetExtension = import("./virtualMachineScaleSetExtension").VirtualMachineScaleSetExtension;
export const VirtualMachineScaleSetExtension: typeof import("./virtualMachineScaleSetExtension").VirtualMachineScaleSetExtension = null as any;
utilities.lazyLoad(exports, ["VirtualMachineScaleSetExtension"], () => require("./virtualMachineScaleSetExtension"));

export { VirtualMachineScaleSetPacketCaptureArgs, VirtualMachineScaleSetPacketCaptureState } from "./virtualMachineScaleSetPacketCapture";
export type VirtualMachineScaleSetPacketCapture = import("./virtualMachineScaleSetPacketCapture").VirtualMachineScaleSetPacketCapture;
export const VirtualMachineScaleSetPacketCapture: typeof import("./virtualMachineScaleSetPacketCapture").VirtualMachineScaleSetPacketCapture = null as any;
utilities.lazyLoad(exports, ["VirtualMachineScaleSetPacketCapture"], () => require("./virtualMachineScaleSetPacketCapture"));

export { VirtualNetworkArgs, VirtualNetworkState } from "./virtualNetwork";
export type VirtualNetwork = import("./virtualNetwork").VirtualNetwork;
export const VirtualNetwork: typeof import("./virtualNetwork").VirtualNetwork = null as any;
utilities.lazyLoad(exports, ["VirtualNetwork"], () => require("./virtualNetwork"));

export { VirtualNetworkDnsServersArgs, VirtualNetworkDnsServersState } from "./virtualNetworkDnsServers";
export type VirtualNetworkDnsServers = import("./virtualNetworkDnsServers").VirtualNetworkDnsServers;
export const VirtualNetworkDnsServers: typeof import("./virtualNetworkDnsServers").VirtualNetworkDnsServers = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkDnsServers"], () => require("./virtualNetworkDnsServers"));

export { VirtualNetworkGatewayArgs, VirtualNetworkGatewayState } from "./virtualNetworkGateway";
export type VirtualNetworkGateway = import("./virtualNetworkGateway").VirtualNetworkGateway;
export const VirtualNetworkGateway: typeof import("./virtualNetworkGateway").VirtualNetworkGateway = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkGateway"], () => require("./virtualNetworkGateway"));

export { VirtualNetworkGatewayConnectionArgs, VirtualNetworkGatewayConnectionState } from "./virtualNetworkGatewayConnection";
export type VirtualNetworkGatewayConnection = import("./virtualNetworkGatewayConnection").VirtualNetworkGatewayConnection;
export const VirtualNetworkGatewayConnection: typeof import("./virtualNetworkGatewayConnection").VirtualNetworkGatewayConnection = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkGatewayConnection"], () => require("./virtualNetworkGatewayConnection"));

export { VirtualNetworkGatewayNatRuleArgs, VirtualNetworkGatewayNatRuleState } from "./virtualNetworkGatewayNatRule";
export type VirtualNetworkGatewayNatRule = import("./virtualNetworkGatewayNatRule").VirtualNetworkGatewayNatRule;
export const VirtualNetworkGatewayNatRule: typeof import("./virtualNetworkGatewayNatRule").VirtualNetworkGatewayNatRule = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkGatewayNatRule"], () => require("./virtualNetworkGatewayNatRule"));

export { VirtualNetworkPeeringArgs, VirtualNetworkPeeringState } from "./virtualNetworkPeering";
export type VirtualNetworkPeering = import("./virtualNetworkPeering").VirtualNetworkPeering;
export const VirtualNetworkPeering: typeof import("./virtualNetworkPeering").VirtualNetworkPeering = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkPeering"], () => require("./virtualNetworkPeering"));

export { VirtualWanArgs, VirtualWanState } from "./virtualWan";
export type VirtualWan = import("./virtualWan").VirtualWan;
export const VirtualWan: typeof import("./virtualWan").VirtualWan = null as any;
utilities.lazyLoad(exports, ["VirtualWan"], () => require("./virtualWan"));

export { VmwareClusterArgs, VmwareClusterState } from "./vmwareCluster";
export type VmwareCluster = import("./vmwareCluster").VmwareCluster;
export const VmwareCluster: typeof import("./vmwareCluster").VmwareCluster = null as any;
utilities.lazyLoad(exports, ["VmwareCluster"], () => require("./vmwareCluster"));

export { VmwareExpressRouteAuthorizationArgs, VmwareExpressRouteAuthorizationState } from "./vmwareExpressRouteAuthorization";
export type VmwareExpressRouteAuthorization = import("./vmwareExpressRouteAuthorization").VmwareExpressRouteAuthorization;
export const VmwareExpressRouteAuthorization: typeof import("./vmwareExpressRouteAuthorization").VmwareExpressRouteAuthorization = null as any;
utilities.lazyLoad(exports, ["VmwareExpressRouteAuthorization"], () => require("./vmwareExpressRouteAuthorization"));

export { VmwareNetappVolumeAttachmentArgs, VmwareNetappVolumeAttachmentState } from "./vmwareNetappVolumeAttachment";
export type VmwareNetappVolumeAttachment = import("./vmwareNetappVolumeAttachment").VmwareNetappVolumeAttachment;
export const VmwareNetappVolumeAttachment: typeof import("./vmwareNetappVolumeAttachment").VmwareNetappVolumeAttachment = null as any;
utilities.lazyLoad(exports, ["VmwareNetappVolumeAttachment"], () => require("./vmwareNetappVolumeAttachment"));

export { VmwarePrivateCloudArgs, VmwarePrivateCloudState } from "./vmwarePrivateCloud";
export type VmwarePrivateCloud = import("./vmwarePrivateCloud").VmwarePrivateCloud;
export const VmwarePrivateCloud: typeof import("./vmwarePrivateCloud").VmwarePrivateCloud = null as any;
utilities.lazyLoad(exports, ["VmwarePrivateCloud"], () => require("./vmwarePrivateCloud"));

export { VoiceServicesCommunicationsGatewayArgs, VoiceServicesCommunicationsGatewayState } from "./voiceServicesCommunicationsGateway";
export type VoiceServicesCommunicationsGateway = import("./voiceServicesCommunicationsGateway").VoiceServicesCommunicationsGateway;
export const VoiceServicesCommunicationsGateway: typeof import("./voiceServicesCommunicationsGateway").VoiceServicesCommunicationsGateway = null as any;
utilities.lazyLoad(exports, ["VoiceServicesCommunicationsGateway"], () => require("./voiceServicesCommunicationsGateway"));

export { VoiceServicesCommunicationsGatewayTestLineArgs, VoiceServicesCommunicationsGatewayTestLineState } from "./voiceServicesCommunicationsGatewayTestLine";
export type VoiceServicesCommunicationsGatewayTestLine = import("./voiceServicesCommunicationsGatewayTestLine").VoiceServicesCommunicationsGatewayTestLine;
export const VoiceServicesCommunicationsGatewayTestLine: typeof import("./voiceServicesCommunicationsGatewayTestLine").VoiceServicesCommunicationsGatewayTestLine = null as any;
utilities.lazyLoad(exports, ["VoiceServicesCommunicationsGatewayTestLine"], () => require("./voiceServicesCommunicationsGatewayTestLine"));

export { VpnGatewayArgs, VpnGatewayState } from "./vpnGateway";
export type VpnGateway = import("./vpnGateway").VpnGateway;
export const VpnGateway: typeof import("./vpnGateway").VpnGateway = null as any;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));

export { VpnGatewayConnectionArgs, VpnGatewayConnectionState } from "./vpnGatewayConnection";
export type VpnGatewayConnection = import("./vpnGatewayConnection").VpnGatewayConnection;
export const VpnGatewayConnection: typeof import("./vpnGatewayConnection").VpnGatewayConnection = null as any;
utilities.lazyLoad(exports, ["VpnGatewayConnection"], () => require("./vpnGatewayConnection"));

export { VpnGatewayNatRuleArgs, VpnGatewayNatRuleState } from "./vpnGatewayNatRule";
export type VpnGatewayNatRule = import("./vpnGatewayNatRule").VpnGatewayNatRule;
export const VpnGatewayNatRule: typeof import("./vpnGatewayNatRule").VpnGatewayNatRule = null as any;
utilities.lazyLoad(exports, ["VpnGatewayNatRule"], () => require("./vpnGatewayNatRule"));

export { VpnServerConfigurationArgs, VpnServerConfigurationState } from "./vpnServerConfiguration";
export type VpnServerConfiguration = import("./vpnServerConfiguration").VpnServerConfiguration;
export const VpnServerConfiguration: typeof import("./vpnServerConfiguration").VpnServerConfiguration = null as any;
utilities.lazyLoad(exports, ["VpnServerConfiguration"], () => require("./vpnServerConfiguration"));

export { VpnServerConfigurationPolicyGroupArgs, VpnServerConfigurationPolicyGroupState } from "./vpnServerConfigurationPolicyGroup";
export type VpnServerConfigurationPolicyGroup = import("./vpnServerConfigurationPolicyGroup").VpnServerConfigurationPolicyGroup;
export const VpnServerConfigurationPolicyGroup: typeof import("./vpnServerConfigurationPolicyGroup").VpnServerConfigurationPolicyGroup = null as any;
utilities.lazyLoad(exports, ["VpnServerConfigurationPolicyGroup"], () => require("./vpnServerConfigurationPolicyGroup"));

export { VpnSiteArgs, VpnSiteState } from "./vpnSite";
export type VpnSite = import("./vpnSite").VpnSite;
export const VpnSite: typeof import("./vpnSite").VpnSite = null as any;
utilities.lazyLoad(exports, ["VpnSite"], () => require("./vpnSite"));

export { WebAppActiveSlotArgs, WebAppActiveSlotState } from "./webAppActiveSlot";
export type WebAppActiveSlot = import("./webAppActiveSlot").WebAppActiveSlot;
export const WebAppActiveSlot: typeof import("./webAppActiveSlot").WebAppActiveSlot = null as any;
utilities.lazyLoad(exports, ["WebAppActiveSlot"], () => require("./webAppActiveSlot"));

export { WebAppHybridConnectionArgs, WebAppHybridConnectionState } from "./webAppHybridConnection";
export type WebAppHybridConnection = import("./webAppHybridConnection").WebAppHybridConnection;
export const WebAppHybridConnection: typeof import("./webAppHybridConnection").WebAppHybridConnection = null as any;
utilities.lazyLoad(exports, ["WebAppHybridConnection"], () => require("./webAppHybridConnection"));

export { WebApplicationFirewallPolicyArgs, WebApplicationFirewallPolicyState } from "./webApplicationFirewallPolicy";
export type WebApplicationFirewallPolicy = import("./webApplicationFirewallPolicy").WebApplicationFirewallPolicy;
export const WebApplicationFirewallPolicy: typeof import("./webApplicationFirewallPolicy").WebApplicationFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["WebApplicationFirewallPolicy"], () => require("./webApplicationFirewallPolicy"));

export { WebPubsubArgs, WebPubsubState } from "./webPubsub";
export type WebPubsub = import("./webPubsub").WebPubsub;
export const WebPubsub: typeof import("./webPubsub").WebPubsub = null as any;
utilities.lazyLoad(exports, ["WebPubsub"], () => require("./webPubsub"));

export { WebPubsubCustomCertificateArgs, WebPubsubCustomCertificateState } from "./webPubsubCustomCertificate";
export type WebPubsubCustomCertificate = import("./webPubsubCustomCertificate").WebPubsubCustomCertificate;
export const WebPubsubCustomCertificate: typeof import("./webPubsubCustomCertificate").WebPubsubCustomCertificate = null as any;
utilities.lazyLoad(exports, ["WebPubsubCustomCertificate"], () => require("./webPubsubCustomCertificate"));

export { WebPubsubCustomDomainArgs, WebPubsubCustomDomainState } from "./webPubsubCustomDomain";
export type WebPubsubCustomDomain = import("./webPubsubCustomDomain").WebPubsubCustomDomain;
export const WebPubsubCustomDomain: typeof import("./webPubsubCustomDomain").WebPubsubCustomDomain = null as any;
utilities.lazyLoad(exports, ["WebPubsubCustomDomain"], () => require("./webPubsubCustomDomain"));

export { WebPubsubHubArgs, WebPubsubHubState } from "./webPubsubHub";
export type WebPubsubHub = import("./webPubsubHub").WebPubsubHub;
export const WebPubsubHub: typeof import("./webPubsubHub").WebPubsubHub = null as any;
utilities.lazyLoad(exports, ["WebPubsubHub"], () => require("./webPubsubHub"));

export { WebPubsubNetworkAclArgs, WebPubsubNetworkAclState } from "./webPubsubNetworkAcl";
export type WebPubsubNetworkAcl = import("./webPubsubNetworkAcl").WebPubsubNetworkAcl;
export const WebPubsubNetworkAcl: typeof import("./webPubsubNetworkAcl").WebPubsubNetworkAcl = null as any;
utilities.lazyLoad(exports, ["WebPubsubNetworkAcl"], () => require("./webPubsubNetworkAcl"));

export { WebPubsubSharedPrivateLinkResourceArgs, WebPubsubSharedPrivateLinkResourceState } from "./webPubsubSharedPrivateLinkResource";
export type WebPubsubSharedPrivateLinkResource = import("./webPubsubSharedPrivateLinkResource").WebPubsubSharedPrivateLinkResource;
export const WebPubsubSharedPrivateLinkResource: typeof import("./webPubsubSharedPrivateLinkResource").WebPubsubSharedPrivateLinkResource = null as any;
utilities.lazyLoad(exports, ["WebPubsubSharedPrivateLinkResource"], () => require("./webPubsubSharedPrivateLinkResource"));

export { WindowsFunctionAppArgs, WindowsFunctionAppState } from "./windowsFunctionApp";
export type WindowsFunctionApp = import("./windowsFunctionApp").WindowsFunctionApp;
export const WindowsFunctionApp: typeof import("./windowsFunctionApp").WindowsFunctionApp = null as any;
utilities.lazyLoad(exports, ["WindowsFunctionApp"], () => require("./windowsFunctionApp"));

export { WindowsFunctionAppSlotArgs, WindowsFunctionAppSlotState } from "./windowsFunctionAppSlot";
export type WindowsFunctionAppSlot = import("./windowsFunctionAppSlot").WindowsFunctionAppSlot;
export const WindowsFunctionAppSlot: typeof import("./windowsFunctionAppSlot").WindowsFunctionAppSlot = null as any;
utilities.lazyLoad(exports, ["WindowsFunctionAppSlot"], () => require("./windowsFunctionAppSlot"));

export { WindowsVirtualMachineArgs, WindowsVirtualMachineState } from "./windowsVirtualMachine";
export type WindowsVirtualMachine = import("./windowsVirtualMachine").WindowsVirtualMachine;
export const WindowsVirtualMachine: typeof import("./windowsVirtualMachine").WindowsVirtualMachine = null as any;
utilities.lazyLoad(exports, ["WindowsVirtualMachine"], () => require("./windowsVirtualMachine"));

export { WindowsVirtualMachineScaleSetArgs, WindowsVirtualMachineScaleSetState } from "./windowsVirtualMachineScaleSet";
export type WindowsVirtualMachineScaleSet = import("./windowsVirtualMachineScaleSet").WindowsVirtualMachineScaleSet;
export const WindowsVirtualMachineScaleSet: typeof import("./windowsVirtualMachineScaleSet").WindowsVirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["WindowsVirtualMachineScaleSet"], () => require("./windowsVirtualMachineScaleSet"));

export { WindowsWebAppArgs, WindowsWebAppState } from "./windowsWebApp";
export type WindowsWebApp = import("./windowsWebApp").WindowsWebApp;
export const WindowsWebApp: typeof import("./windowsWebApp").WindowsWebApp = null as any;
utilities.lazyLoad(exports, ["WindowsWebApp"], () => require("./windowsWebApp"));

export { WindowsWebAppSlotArgs, WindowsWebAppSlotState } from "./windowsWebAppSlot";
export type WindowsWebAppSlot = import("./windowsWebAppSlot").WindowsWebAppSlot;
export const WindowsWebAppSlot: typeof import("./windowsWebAppSlot").WindowsWebAppSlot = null as any;
utilities.lazyLoad(exports, ["WindowsWebAppSlot"], () => require("./windowsWebAppSlot"));

export { WorkloadsSapDiscoveryVirtualInstanceArgs, WorkloadsSapDiscoveryVirtualInstanceState } from "./workloadsSapDiscoveryVirtualInstance";
export type WorkloadsSapDiscoveryVirtualInstance = import("./workloadsSapDiscoveryVirtualInstance").WorkloadsSapDiscoveryVirtualInstance;
export const WorkloadsSapDiscoveryVirtualInstance: typeof import("./workloadsSapDiscoveryVirtualInstance").WorkloadsSapDiscoveryVirtualInstance = null as any;
utilities.lazyLoad(exports, ["WorkloadsSapDiscoveryVirtualInstance"], () => require("./workloadsSapDiscoveryVirtualInstance"));

export { WorkloadsSapSingleNodeVirtualInstanceArgs, WorkloadsSapSingleNodeVirtualInstanceState } from "./workloadsSapSingleNodeVirtualInstance";
export type WorkloadsSapSingleNodeVirtualInstance = import("./workloadsSapSingleNodeVirtualInstance").WorkloadsSapSingleNodeVirtualInstance;
export const WorkloadsSapSingleNodeVirtualInstance: typeof import("./workloadsSapSingleNodeVirtualInstance").WorkloadsSapSingleNodeVirtualInstance = null as any;
utilities.lazyLoad(exports, ["WorkloadsSapSingleNodeVirtualInstance"], () => require("./workloadsSapSingleNodeVirtualInstance"));

export { WorkloadsSapThreeTierVirtualInstanceArgs, WorkloadsSapThreeTierVirtualInstanceState } from "./workloadsSapThreeTierVirtualInstance";
export type WorkloadsSapThreeTierVirtualInstance = import("./workloadsSapThreeTierVirtualInstance").WorkloadsSapThreeTierVirtualInstance;
export const WorkloadsSapThreeTierVirtualInstance: typeof import("./workloadsSapThreeTierVirtualInstance").WorkloadsSapThreeTierVirtualInstance = null as any;
utilities.lazyLoad(exports, ["WorkloadsSapThreeTierVirtualInstance"], () => require("./workloadsSapThreeTierVirtualInstance"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azurerm:index/aadb2cDirectory:Aadb2cDirectory":
                return new Aadb2cDirectory(name, <any>undefined, { urn })
            case "azurerm:index/activeDirectoryDomainService:ActiveDirectoryDomainService":
                return new ActiveDirectoryDomainService(name, <any>undefined, { urn })
            case "azurerm:index/activeDirectoryDomainServiceReplicaSet:ActiveDirectoryDomainServiceReplicaSet":
                return new ActiveDirectoryDomainServiceReplicaSet(name, <any>undefined, { urn })
            case "azurerm:index/activeDirectoryDomainServiceTrust:ActiveDirectoryDomainServiceTrust":
                return new ActiveDirectoryDomainServiceTrust(name, <any>undefined, { urn })
            case "azurerm:index/advancedThreatProtection:AdvancedThreatProtection":
                return new AdvancedThreatProtection(name, <any>undefined, { urn })
            case "azurerm:index/aiServices:AiServices":
                return new AiServices(name, <any>undefined, { urn })
            case "azurerm:index/analysisServicesServer:AnalysisServicesServer":
                return new AnalysisServicesServer(name, <any>undefined, { urn })
            case "azurerm:index/apiConnection:ApiConnection":
                return new ApiConnection(name, <any>undefined, { urn })
            case "azurerm:index/apiManagement:ApiManagement":
                return new ApiManagement(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApi:ApiManagementApi":
                return new ApiManagementApi(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApiDiagnostic:ApiManagementApiDiagnostic":
                return new ApiManagementApiDiagnostic(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApiOperation:ApiManagementApiOperation":
                return new ApiManagementApiOperation(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApiOperationPolicy:ApiManagementApiOperationPolicy":
                return new ApiManagementApiOperationPolicy(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApiOperationTag:ApiManagementApiOperationTag":
                return new ApiManagementApiOperationTag(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApiPolicy:ApiManagementApiPolicy":
                return new ApiManagementApiPolicy(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApiRelease:ApiManagementApiRelease":
                return new ApiManagementApiRelease(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApiSchema:ApiManagementApiSchema":
                return new ApiManagementApiSchema(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApiTag:ApiManagementApiTag":
                return new ApiManagementApiTag(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApiTagDescription:ApiManagementApiTagDescription":
                return new ApiManagementApiTagDescription(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementApiVersionSet:ApiManagementApiVersionSet":
                return new ApiManagementApiVersionSet(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementAuthorizationServer:ApiManagementAuthorizationServer":
                return new ApiManagementAuthorizationServer(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementBackend:ApiManagementBackend":
                return new ApiManagementBackend(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementCertificate:ApiManagementCertificate":
                return new ApiManagementCertificate(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementCustomDomain:ApiManagementCustomDomain":
                return new ApiManagementCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementDiagnostic:ApiManagementDiagnostic":
                return new ApiManagementDiagnostic(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementEmailTemplate:ApiManagementEmailTemplate":
                return new ApiManagementEmailTemplate(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementGateway:ApiManagementGateway":
                return new ApiManagementGateway(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementGatewayApi:ApiManagementGatewayApi":
                return new ApiManagementGatewayApi(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementGatewayCertificateAuthority:ApiManagementGatewayCertificateAuthority":
                return new ApiManagementGatewayCertificateAuthority(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementGatewayHostNameConfiguration:ApiManagementGatewayHostNameConfiguration":
                return new ApiManagementGatewayHostNameConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementGlobalSchema:ApiManagementGlobalSchema":
                return new ApiManagementGlobalSchema(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementGroup:ApiManagementGroup":
                return new ApiManagementGroup(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementGroupUser:ApiManagementGroupUser":
                return new ApiManagementGroupUser(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementIdentityProviderAad:ApiManagementIdentityProviderAad":
                return new ApiManagementIdentityProviderAad(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementIdentityProviderAadb2c:ApiManagementIdentityProviderAadb2c":
                return new ApiManagementIdentityProviderAadb2c(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementIdentityProviderFacebook:ApiManagementIdentityProviderFacebook":
                return new ApiManagementIdentityProviderFacebook(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementIdentityProviderGoogle:ApiManagementIdentityProviderGoogle":
                return new ApiManagementIdentityProviderGoogle(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementIdentityProviderMicrosoft:ApiManagementIdentityProviderMicrosoft":
                return new ApiManagementIdentityProviderMicrosoft(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementIdentityProviderTwitter:ApiManagementIdentityProviderTwitter":
                return new ApiManagementIdentityProviderTwitter(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementLogger:ApiManagementLogger":
                return new ApiManagementLogger(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementNamedValue:ApiManagementNamedValue":
                return new ApiManagementNamedValue(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementNotificationRecipientEmail:ApiManagementNotificationRecipientEmail":
                return new ApiManagementNotificationRecipientEmail(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementNotificationRecipientUser:ApiManagementNotificationRecipientUser":
                return new ApiManagementNotificationRecipientUser(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementOpenidConnectProvider:ApiManagementOpenidConnectProvider":
                return new ApiManagementOpenidConnectProvider(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementPolicy:ApiManagementPolicy":
                return new ApiManagementPolicy(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementPolicyFragment:ApiManagementPolicyFragment":
                return new ApiManagementPolicyFragment(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementProduct:ApiManagementProduct":
                return new ApiManagementProduct(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementProductApi:ApiManagementProductApi":
                return new ApiManagementProductApi(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementProductGroup:ApiManagementProductGroup":
                return new ApiManagementProductGroup(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementProductPolicy:ApiManagementProductPolicy":
                return new ApiManagementProductPolicy(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementProductTag:ApiManagementProductTag":
                return new ApiManagementProductTag(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementRedisCache:ApiManagementRedisCache":
                return new ApiManagementRedisCache(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementSubscription:ApiManagementSubscription":
                return new ApiManagementSubscription(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementTag:ApiManagementTag":
                return new ApiManagementTag(name, <any>undefined, { urn })
            case "azurerm:index/apiManagementUser:ApiManagementUser":
                return new ApiManagementUser(name, <any>undefined, { urn })
            case "azurerm:index/appConfiguration:AppConfiguration":
                return new AppConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/appConfigurationFeature:AppConfigurationFeature":
                return new AppConfigurationFeature(name, <any>undefined, { urn })
            case "azurerm:index/appConfigurationKey:AppConfigurationKey":
                return new AppConfigurationKey(name, <any>undefined, { urn })
            case "azurerm:index/appService:AppService":
                return new AppService(name, <any>undefined, { urn })
            case "azurerm:index/appServiceActiveSlot:AppServiceActiveSlot":
                return new AppServiceActiveSlot(name, <any>undefined, { urn })
            case "azurerm:index/appServiceCertificate:AppServiceCertificate":
                return new AppServiceCertificate(name, <any>undefined, { urn })
            case "azurerm:index/appServiceCertificateBinding:AppServiceCertificateBinding":
                return new AppServiceCertificateBinding(name, <any>undefined, { urn })
            case "azurerm:index/appServiceCertificateOrder:AppServiceCertificateOrder":
                return new AppServiceCertificateOrder(name, <any>undefined, { urn })
            case "azurerm:index/appServiceConnection:AppServiceConnection":
                return new AppServiceConnection(name, <any>undefined, { urn })
            case "azurerm:index/appServiceCustomHostnameBinding:AppServiceCustomHostnameBinding":
                return new AppServiceCustomHostnameBinding(name, <any>undefined, { urn })
            case "azurerm:index/appServiceEnvironmentV3:AppServiceEnvironmentV3":
                return new AppServiceEnvironmentV3(name, <any>undefined, { urn })
            case "azurerm:index/appServiceHybridConnection:AppServiceHybridConnection":
                return new AppServiceHybridConnection(name, <any>undefined, { urn })
            case "azurerm:index/appServiceManagedCertificate:AppServiceManagedCertificate":
                return new AppServiceManagedCertificate(name, <any>undefined, { urn })
            case "azurerm:index/appServicePlan:AppServicePlan":
                return new AppServicePlan(name, <any>undefined, { urn })
            case "azurerm:index/appServicePublicCertificate:AppServicePublicCertificate":
                return new AppServicePublicCertificate(name, <any>undefined, { urn })
            case "azurerm:index/appServiceSlot:AppServiceSlot":
                return new AppServiceSlot(name, <any>undefined, { urn })
            case "azurerm:index/appServiceSlotCustomHostnameBinding:AppServiceSlotCustomHostnameBinding":
                return new AppServiceSlotCustomHostnameBinding(name, <any>undefined, { urn })
            case "azurerm:index/appServiceSlotVirtualNetworkSwiftConnection:AppServiceSlotVirtualNetworkSwiftConnection":
                return new AppServiceSlotVirtualNetworkSwiftConnection(name, <any>undefined, { urn })
            case "azurerm:index/appServiceSourceControl:AppServiceSourceControl":
                return new AppServiceSourceControl(name, <any>undefined, { urn })
            case "azurerm:index/appServiceSourceControlSlot:AppServiceSourceControlSlot":
                return new AppServiceSourceControlSlot(name, <any>undefined, { urn })
            case "azurerm:index/appServiceSourceControlToken:AppServiceSourceControlToken":
                return new AppServiceSourceControlToken(name, <any>undefined, { urn })
            case "azurerm:index/appServiceVirtualNetworkSwiftConnection:AppServiceVirtualNetworkSwiftConnection":
                return new AppServiceVirtualNetworkSwiftConnection(name, <any>undefined, { urn })
            case "azurerm:index/applicationGateway:ApplicationGateway":
                return new ApplicationGateway(name, <any>undefined, { urn })
            case "azurerm:index/applicationInsights:ApplicationInsights":
                return new ApplicationInsights(name, <any>undefined, { urn })
            case "azurerm:index/applicationInsightsAnalyticsItem:ApplicationInsightsAnalyticsItem":
                return new ApplicationInsightsAnalyticsItem(name, <any>undefined, { urn })
            case "azurerm:index/applicationInsightsApiKey:ApplicationInsightsApiKey":
                return new ApplicationInsightsApiKey(name, <any>undefined, { urn })
            case "azurerm:index/applicationInsightsSmartDetectionRule:ApplicationInsightsSmartDetectionRule":
                return new ApplicationInsightsSmartDetectionRule(name, <any>undefined, { urn })
            case "azurerm:index/applicationInsightsStandardWebTest:ApplicationInsightsStandardWebTest":
                return new ApplicationInsightsStandardWebTest(name, <any>undefined, { urn })
            case "azurerm:index/applicationInsightsWebTest:ApplicationInsightsWebTest":
                return new ApplicationInsightsWebTest(name, <any>undefined, { urn })
            case "azurerm:index/applicationInsightsWorkbook:ApplicationInsightsWorkbook":
                return new ApplicationInsightsWorkbook(name, <any>undefined, { urn })
            case "azurerm:index/applicationInsightsWorkbookTemplate:ApplicationInsightsWorkbookTemplate":
                return new ApplicationInsightsWorkbookTemplate(name, <any>undefined, { urn })
            case "azurerm:index/applicationLoadBalancer:ApplicationLoadBalancer":
                return new ApplicationLoadBalancer(name, <any>undefined, { urn })
            case "azurerm:index/applicationLoadBalancerFrontend:ApplicationLoadBalancerFrontend":
                return new ApplicationLoadBalancerFrontend(name, <any>undefined, { urn })
            case "azurerm:index/applicationLoadBalancerSubnetAssociation:ApplicationLoadBalancerSubnetAssociation":
                return new ApplicationLoadBalancerSubnetAssociation(name, <any>undefined, { urn })
            case "azurerm:index/applicationSecurityGroup:ApplicationSecurityGroup":
                return new ApplicationSecurityGroup(name, <any>undefined, { urn })
            case "azurerm:index/arcKubernetesCluster:ArcKubernetesCluster":
                return new ArcKubernetesCluster(name, <any>undefined, { urn })
            case "azurerm:index/arcKubernetesClusterExtension:ArcKubernetesClusterExtension":
                return new ArcKubernetesClusterExtension(name, <any>undefined, { urn })
            case "azurerm:index/arcKubernetesFluxConfiguration:ArcKubernetesFluxConfiguration":
                return new ArcKubernetesFluxConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/arcMachineExtension:ArcMachineExtension":
                return new ArcMachineExtension(name, <any>undefined, { urn })
            case "azurerm:index/arcPrivateLinkScope:ArcPrivateLinkScope":
                return new ArcPrivateLinkScope(name, <any>undefined, { urn })
            case "azurerm:index/arcResourceBridgeAppliance:ArcResourceBridgeAppliance":
                return new ArcResourceBridgeAppliance(name, <any>undefined, { urn })
            case "azurerm:index/attestationProvider:AttestationProvider":
                return new AttestationProvider(name, <any>undefined, { urn })
            case "azurerm:index/automanageConfiguration:AutomanageConfiguration":
                return new AutomanageConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/automationAccount:AutomationAccount":
                return new AutomationAccount(name, <any>undefined, { urn })
            case "azurerm:index/automationCertificate:AutomationCertificate":
                return new AutomationCertificate(name, <any>undefined, { urn })
            case "azurerm:index/automationConnection:AutomationConnection":
                return new AutomationConnection(name, <any>undefined, { urn })
            case "azurerm:index/automationConnectionCertificate:AutomationConnectionCertificate":
                return new AutomationConnectionCertificate(name, <any>undefined, { urn })
            case "azurerm:index/automationConnectionClassicCertificate:AutomationConnectionClassicCertificate":
                return new AutomationConnectionClassicCertificate(name, <any>undefined, { urn })
            case "azurerm:index/automationConnectionServicePrincipal:AutomationConnectionServicePrincipal":
                return new AutomationConnectionServicePrincipal(name, <any>undefined, { urn })
            case "azurerm:index/automationConnectionType:AutomationConnectionType":
                return new AutomationConnectionType(name, <any>undefined, { urn })
            case "azurerm:index/automationCredential:AutomationCredential":
                return new AutomationCredential(name, <any>undefined, { urn })
            case "azurerm:index/automationDscConfiguration:AutomationDscConfiguration":
                return new AutomationDscConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/automationDscNodeconfiguration:AutomationDscNodeconfiguration":
                return new AutomationDscNodeconfiguration(name, <any>undefined, { urn })
            case "azurerm:index/automationHybridRunbookWorker:AutomationHybridRunbookWorker":
                return new AutomationHybridRunbookWorker(name, <any>undefined, { urn })
            case "azurerm:index/automationHybridRunbookWorkerGroup:AutomationHybridRunbookWorkerGroup":
                return new AutomationHybridRunbookWorkerGroup(name, <any>undefined, { urn })
            case "azurerm:index/automationJobSchedule:AutomationJobSchedule":
                return new AutomationJobSchedule(name, <any>undefined, { urn })
            case "azurerm:index/automationModule:AutomationModule":
                return new AutomationModule(name, <any>undefined, { urn })
            case "azurerm:index/automationPowershell72Module:AutomationPowershell72Module":
                return new AutomationPowershell72Module(name, <any>undefined, { urn })
            case "azurerm:index/automationPython3Package:AutomationPython3Package":
                return new AutomationPython3Package(name, <any>undefined, { urn })
            case "azurerm:index/automationRunbook:AutomationRunbook":
                return new AutomationRunbook(name, <any>undefined, { urn })
            case "azurerm:index/automationSchedule:AutomationSchedule":
                return new AutomationSchedule(name, <any>undefined, { urn })
            case "azurerm:index/automationSoftwareUpdateConfiguration:AutomationSoftwareUpdateConfiguration":
                return new AutomationSoftwareUpdateConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/automationSourceControl:AutomationSourceControl":
                return new AutomationSourceControl(name, <any>undefined, { urn })
            case "azurerm:index/automationVariableBool:AutomationVariableBool":
                return new AutomationVariableBool(name, <any>undefined, { urn })
            case "azurerm:index/automationVariableDatetime:AutomationVariableDatetime":
                return new AutomationVariableDatetime(name, <any>undefined, { urn })
            case "azurerm:index/automationVariableInt:AutomationVariableInt":
                return new AutomationVariableInt(name, <any>undefined, { urn })
            case "azurerm:index/automationVariableObject:AutomationVariableObject":
                return new AutomationVariableObject(name, <any>undefined, { urn })
            case "azurerm:index/automationVariableString:AutomationVariableString":
                return new AutomationVariableString(name, <any>undefined, { urn })
            case "azurerm:index/automationWatcher:AutomationWatcher":
                return new AutomationWatcher(name, <any>undefined, { urn })
            case "azurerm:index/automationWebhook:AutomationWebhook":
                return new AutomationWebhook(name, <any>undefined, { urn })
            case "azurerm:index/availabilitySet:AvailabilitySet":
                return new AvailabilitySet(name, <any>undefined, { urn })
            case "azurerm:index/backupContainerStorageAccount:BackupContainerStorageAccount":
                return new BackupContainerStorageAccount(name, <any>undefined, { urn })
            case "azurerm:index/backupPolicyFileShare:BackupPolicyFileShare":
                return new BackupPolicyFileShare(name, <any>undefined, { urn })
            case "azurerm:index/backupPolicyVm:BackupPolicyVm":
                return new BackupPolicyVm(name, <any>undefined, { urn })
            case "azurerm:index/backupPolicyVmWorkload:BackupPolicyVmWorkload":
                return new BackupPolicyVmWorkload(name, <any>undefined, { urn })
            case "azurerm:index/backupProtectedFileShare:BackupProtectedFileShare":
                return new BackupProtectedFileShare(name, <any>undefined, { urn })
            case "azurerm:index/backupProtectedVm:BackupProtectedVm":
                return new BackupProtectedVm(name, <any>undefined, { urn })
            case "azurerm:index/bastionHost:BastionHost":
                return new BastionHost(name, <any>undefined, { urn })
            case "azurerm:index/batchAccount:BatchAccount":
                return new BatchAccount(name, <any>undefined, { urn })
            case "azurerm:index/batchApplication:BatchApplication":
                return new BatchApplication(name, <any>undefined, { urn })
            case "azurerm:index/batchCertificate:BatchCertificate":
                return new BatchCertificate(name, <any>undefined, { urn })
            case "azurerm:index/batchJob:BatchJob":
                return new BatchJob(name, <any>undefined, { urn })
            case "azurerm:index/batchPool:BatchPool":
                return new BatchPool(name, <any>undefined, { urn })
            case "azurerm:index/billingAccountCostManagementExport:BillingAccountCostManagementExport":
                return new BillingAccountCostManagementExport(name, <any>undefined, { urn })
            case "azurerm:index/blueprintAssignment:BlueprintAssignment":
                return new BlueprintAssignment(name, <any>undefined, { urn })
            case "azurerm:index/botChannelAlexa:BotChannelAlexa":
                return new BotChannelAlexa(name, <any>undefined, { urn })
            case "azurerm:index/botChannelDirectLineSpeech:BotChannelDirectLineSpeech":
                return new BotChannelDirectLineSpeech(name, <any>undefined, { urn })
            case "azurerm:index/botChannelDirectline:BotChannelDirectline":
                return new BotChannelDirectline(name, <any>undefined, { urn })
            case "azurerm:index/botChannelEmail:BotChannelEmail":
                return new BotChannelEmail(name, <any>undefined, { urn })
            case "azurerm:index/botChannelFacebook:BotChannelFacebook":
                return new BotChannelFacebook(name, <any>undefined, { urn })
            case "azurerm:index/botChannelLine:BotChannelLine":
                return new BotChannelLine(name, <any>undefined, { urn })
            case "azurerm:index/botChannelMsTeams:BotChannelMsTeams":
                return new BotChannelMsTeams(name, <any>undefined, { urn })
            case "azurerm:index/botChannelSlack:BotChannelSlack":
                return new BotChannelSlack(name, <any>undefined, { urn })
            case "azurerm:index/botChannelSms:BotChannelSms":
                return new BotChannelSms(name, <any>undefined, { urn })
            case "azurerm:index/botChannelWebChat:BotChannelWebChat":
                return new BotChannelWebChat(name, <any>undefined, { urn })
            case "azurerm:index/botChannelsRegistration:BotChannelsRegistration":
                return new BotChannelsRegistration(name, <any>undefined, { urn })
            case "azurerm:index/botConnection:BotConnection":
                return new BotConnection(name, <any>undefined, { urn })
            case "azurerm:index/botServiceAzureBot:BotServiceAzureBot":
                return new BotServiceAzureBot(name, <any>undefined, { urn })
            case "azurerm:index/botWebApp:BotWebApp":
                return new BotWebApp(name, <any>undefined, { urn })
            case "azurerm:index/capacityReservation:CapacityReservation":
                return new CapacityReservation(name, <any>undefined, { urn })
            case "azurerm:index/capacityReservationGroup:CapacityReservationGroup":
                return new CapacityReservationGroup(name, <any>undefined, { urn })
            case "azurerm:index/cdnEndpoint:CdnEndpoint":
                return new CdnEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/cdnEndpointCustomDomain:CdnEndpointCustomDomain":
                return new CdnEndpointCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorCustomDomain:CdnFrontdoorCustomDomain":
                return new CdnFrontdoorCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorCustomDomainAssociation:CdnFrontdoorCustomDomainAssociation":
                return new CdnFrontdoorCustomDomainAssociation(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorEndpoint:CdnFrontdoorEndpoint":
                return new CdnFrontdoorEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorFirewallPolicy:CdnFrontdoorFirewallPolicy":
                return new CdnFrontdoorFirewallPolicy(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorOrigin:CdnFrontdoorOrigin":
                return new CdnFrontdoorOrigin(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorOriginGroup:CdnFrontdoorOriginGroup":
                return new CdnFrontdoorOriginGroup(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorProfile:CdnFrontdoorProfile":
                return new CdnFrontdoorProfile(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorRoute:CdnFrontdoorRoute":
                return new CdnFrontdoorRoute(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorRule:CdnFrontdoorRule":
                return new CdnFrontdoorRule(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorRuleSet:CdnFrontdoorRuleSet":
                return new CdnFrontdoorRuleSet(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorSecret:CdnFrontdoorSecret":
                return new CdnFrontdoorSecret(name, <any>undefined, { urn })
            case "azurerm:index/cdnFrontdoorSecurityPolicy:CdnFrontdoorSecurityPolicy":
                return new CdnFrontdoorSecurityPolicy(name, <any>undefined, { urn })
            case "azurerm:index/cdnProfile:CdnProfile":
                return new CdnProfile(name, <any>undefined, { urn })
            case "azurerm:index/chaosStudioCapability:ChaosStudioCapability":
                return new ChaosStudioCapability(name, <any>undefined, { urn })
            case "azurerm:index/chaosStudioExperiment:ChaosStudioExperiment":
                return new ChaosStudioExperiment(name, <any>undefined, { urn })
            case "azurerm:index/chaosStudioTarget:ChaosStudioTarget":
                return new ChaosStudioTarget(name, <any>undefined, { urn })
            case "azurerm:index/cognitiveAccount:CognitiveAccount":
                return new CognitiveAccount(name, <any>undefined, { urn })
            case "azurerm:index/cognitiveAccountCustomerManagedKey:CognitiveAccountCustomerManagedKey":
                return new CognitiveAccountCustomerManagedKey(name, <any>undefined, { urn })
            case "azurerm:index/cognitiveDeployment:CognitiveDeployment":
                return new CognitiveDeployment(name, <any>undefined, { urn })
            case "azurerm:index/communicationService:CommunicationService":
                return new CommunicationService(name, <any>undefined, { urn })
            case "azurerm:index/communicationServiceEmailDomainAssociation:CommunicationServiceEmailDomainAssociation":
                return new CommunicationServiceEmailDomainAssociation(name, <any>undefined, { urn })
            case "azurerm:index/confidentialLedger:ConfidentialLedger":
                return new ConfidentialLedger(name, <any>undefined, { urn })
            case "azurerm:index/consumptionBudgetManagementGroup:ConsumptionBudgetManagementGroup":
                return new ConsumptionBudgetManagementGroup(name, <any>undefined, { urn })
            case "azurerm:index/consumptionBudgetResourceGroup:ConsumptionBudgetResourceGroup":
                return new ConsumptionBudgetResourceGroup(name, <any>undefined, { urn })
            case "azurerm:index/consumptionBudgetSubscription:ConsumptionBudgetSubscription":
                return new ConsumptionBudgetSubscription(name, <any>undefined, { urn })
            case "azurerm:index/containerApp:ContainerApp":
                return new ContainerApp(name, <any>undefined, { urn })
            case "azurerm:index/containerAppCustomDomain:ContainerAppCustomDomain":
                return new ContainerAppCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/containerAppEnvironment:ContainerAppEnvironment":
                return new ContainerAppEnvironment(name, <any>undefined, { urn })
            case "azurerm:index/containerAppEnvironmentCertificate:ContainerAppEnvironmentCertificate":
                return new ContainerAppEnvironmentCertificate(name, <any>undefined, { urn })
            case "azurerm:index/containerAppEnvironmentCustomDomain:ContainerAppEnvironmentCustomDomain":
                return new ContainerAppEnvironmentCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/containerAppEnvironmentDaprComponent:ContainerAppEnvironmentDaprComponent":
                return new ContainerAppEnvironmentDaprComponent(name, <any>undefined, { urn })
            case "azurerm:index/containerAppEnvironmentStorage:ContainerAppEnvironmentStorage":
                return new ContainerAppEnvironmentStorage(name, <any>undefined, { urn })
            case "azurerm:index/containerAppJob:ContainerAppJob":
                return new ContainerAppJob(name, <any>undefined, { urn })
            case "azurerm:index/containerConnectedRegistry:ContainerConnectedRegistry":
                return new ContainerConnectedRegistry(name, <any>undefined, { urn })
            case "azurerm:index/containerGroup:ContainerGroup":
                return new ContainerGroup(name, <any>undefined, { urn })
            case "azurerm:index/containerRegistry:ContainerRegistry":
                return new ContainerRegistry(name, <any>undefined, { urn })
            case "azurerm:index/containerRegistryAgentPool:ContainerRegistryAgentPool":
                return new ContainerRegistryAgentPool(name, <any>undefined, { urn })
            case "azurerm:index/containerRegistryCacheRule:ContainerRegistryCacheRule":
                return new ContainerRegistryCacheRule(name, <any>undefined, { urn })
            case "azurerm:index/containerRegistryScopeMap:ContainerRegistryScopeMap":
                return new ContainerRegistryScopeMap(name, <any>undefined, { urn })
            case "azurerm:index/containerRegistryTask:ContainerRegistryTask":
                return new ContainerRegistryTask(name, <any>undefined, { urn })
            case "azurerm:index/containerRegistryTaskScheduleRunNow:ContainerRegistryTaskScheduleRunNow":
                return new ContainerRegistryTaskScheduleRunNow(name, <any>undefined, { urn })
            case "azurerm:index/containerRegistryToken:ContainerRegistryToken":
                return new ContainerRegistryToken(name, <any>undefined, { urn })
            case "azurerm:index/containerRegistryTokenPassword:ContainerRegistryTokenPassword":
                return new ContainerRegistryTokenPassword(name, <any>undefined, { urn })
            case "azurerm:index/containerRegistryWebhook:ContainerRegistryWebhook":
                return new ContainerRegistryWebhook(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbAccount:CosmosdbAccount":
                return new CosmosdbAccount(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbCassandraCluster:CosmosdbCassandraCluster":
                return new CosmosdbCassandraCluster(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbCassandraDatacenter:CosmosdbCassandraDatacenter":
                return new CosmosdbCassandraDatacenter(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbCassandraKeyspace:CosmosdbCassandraKeyspace":
                return new CosmosdbCassandraKeyspace(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbCassandraTable:CosmosdbCassandraTable":
                return new CosmosdbCassandraTable(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbGremlinDatabase:CosmosdbGremlinDatabase":
                return new CosmosdbGremlinDatabase(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbGremlinGraph:CosmosdbGremlinGraph":
                return new CosmosdbGremlinGraph(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbMongoCollection:CosmosdbMongoCollection":
                return new CosmosdbMongoCollection(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbMongoDatabase:CosmosdbMongoDatabase":
                return new CosmosdbMongoDatabase(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbMongoRoleDefinition:CosmosdbMongoRoleDefinition":
                return new CosmosdbMongoRoleDefinition(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbMongoUserDefinition:CosmosdbMongoUserDefinition":
                return new CosmosdbMongoUserDefinition(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbPostgresqlCluster:CosmosdbPostgresqlCluster":
                return new CosmosdbPostgresqlCluster(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbPostgresqlCoordinatorConfiguration:CosmosdbPostgresqlCoordinatorConfiguration":
                return new CosmosdbPostgresqlCoordinatorConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbPostgresqlFirewallRule:CosmosdbPostgresqlFirewallRule":
                return new CosmosdbPostgresqlFirewallRule(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbPostgresqlNodeConfiguration:CosmosdbPostgresqlNodeConfiguration":
                return new CosmosdbPostgresqlNodeConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbPostgresqlRole:CosmosdbPostgresqlRole":
                return new CosmosdbPostgresqlRole(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbSqlContainer:CosmosdbSqlContainer":
                return new CosmosdbSqlContainer(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbSqlDatabase:CosmosdbSqlDatabase":
                return new CosmosdbSqlDatabase(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbSqlDedicatedGateway:CosmosdbSqlDedicatedGateway":
                return new CosmosdbSqlDedicatedGateway(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbSqlFunction:CosmosdbSqlFunction":
                return new CosmosdbSqlFunction(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbSqlRoleAssignment:CosmosdbSqlRoleAssignment":
                return new CosmosdbSqlRoleAssignment(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbSqlRoleDefinition:CosmosdbSqlRoleDefinition":
                return new CosmosdbSqlRoleDefinition(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbSqlStoredProcedure:CosmosdbSqlStoredProcedure":
                return new CosmosdbSqlStoredProcedure(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbSqlTrigger:CosmosdbSqlTrigger":
                return new CosmosdbSqlTrigger(name, <any>undefined, { urn })
            case "azurerm:index/cosmosdbTable:CosmosdbTable":
                return new CosmosdbTable(name, <any>undefined, { urn })
            case "azurerm:index/costAnomalyAlert:CostAnomalyAlert":
                return new CostAnomalyAlert(name, <any>undefined, { urn })
            case "azurerm:index/costManagementScheduledAction:CostManagementScheduledAction":
                return new CostManagementScheduledAction(name, <any>undefined, { urn })
            case "azurerm:index/customIpPrefix:CustomIpPrefix":
                return new CustomIpPrefix(name, <any>undefined, { urn })
            case "azurerm:index/customProvider:CustomProvider":
                return new CustomProvider(name, <any>undefined, { urn })
            case "azurerm:index/dashboardGrafana:DashboardGrafana":
                return new DashboardGrafana(name, <any>undefined, { urn })
            case "azurerm:index/dataFactory:DataFactory":
                return new DataFactory(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryCredentialServicePrincipal:DataFactoryCredentialServicePrincipal":
                return new DataFactoryCredentialServicePrincipal(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryCredentialUserManagedIdentity:DataFactoryCredentialUserManagedIdentity":
                return new DataFactoryCredentialUserManagedIdentity(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryCustomDataset:DataFactoryCustomDataset":
                return new DataFactoryCustomDataset(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDataFlow:DataFactoryDataFlow":
                return new DataFactoryDataFlow(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetAzureBlob:DataFactoryDatasetAzureBlob":
                return new DataFactoryDatasetAzureBlob(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetAzureSqlTable:DataFactoryDatasetAzureSqlTable":
                return new DataFactoryDatasetAzureSqlTable(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetBinary:DataFactoryDatasetBinary":
                return new DataFactoryDatasetBinary(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetCosmosdbSqlapi:DataFactoryDatasetCosmosdbSqlapi":
                return new DataFactoryDatasetCosmosdbSqlapi(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetDelimitedText:DataFactoryDatasetDelimitedText":
                return new DataFactoryDatasetDelimitedText(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetHttp:DataFactoryDatasetHttp":
                return new DataFactoryDatasetHttp(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetJson:DataFactoryDatasetJson":
                return new DataFactoryDatasetJson(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetMysql:DataFactoryDatasetMysql":
                return new DataFactoryDatasetMysql(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetParquet:DataFactoryDatasetParquet":
                return new DataFactoryDatasetParquet(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetPostgresql:DataFactoryDatasetPostgresql":
                return new DataFactoryDatasetPostgresql(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetSnowflake:DataFactoryDatasetSnowflake":
                return new DataFactoryDatasetSnowflake(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryDatasetSqlServerTable:DataFactoryDatasetSqlServerTable":
                return new DataFactoryDatasetSqlServerTable(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryFlowletDataFlow:DataFactoryFlowletDataFlow":
                return new DataFactoryFlowletDataFlow(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryIntegrationRuntimeAzure:DataFactoryIntegrationRuntimeAzure":
                return new DataFactoryIntegrationRuntimeAzure(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryIntegrationRuntimeAzureSsis:DataFactoryIntegrationRuntimeAzureSsis":
                return new DataFactoryIntegrationRuntimeAzureSsis(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryIntegrationRuntimeSelfHosted:DataFactoryIntegrationRuntimeSelfHosted":
                return new DataFactoryIntegrationRuntimeSelfHosted(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedCustomService:DataFactoryLinkedCustomService":
                return new DataFactoryLinkedCustomService(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceAzureBlobStorage:DataFactoryLinkedServiceAzureBlobStorage":
                return new DataFactoryLinkedServiceAzureBlobStorage(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceAzureDatabricks:DataFactoryLinkedServiceAzureDatabricks":
                return new DataFactoryLinkedServiceAzureDatabricks(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceAzureFileStorage:DataFactoryLinkedServiceAzureFileStorage":
                return new DataFactoryLinkedServiceAzureFileStorage(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceAzureFunction:DataFactoryLinkedServiceAzureFunction":
                return new DataFactoryLinkedServiceAzureFunction(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceAzureSearch:DataFactoryLinkedServiceAzureSearch":
                return new DataFactoryLinkedServiceAzureSearch(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceAzureSqlDatabase:DataFactoryLinkedServiceAzureSqlDatabase":
                return new DataFactoryLinkedServiceAzureSqlDatabase(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceAzureTableStorage:DataFactoryLinkedServiceAzureTableStorage":
                return new DataFactoryLinkedServiceAzureTableStorage(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceCosmosdb:DataFactoryLinkedServiceCosmosdb":
                return new DataFactoryLinkedServiceCosmosdb(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceCosmosdbMongoapi:DataFactoryLinkedServiceCosmosdbMongoapi":
                return new DataFactoryLinkedServiceCosmosdbMongoapi(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceDataLakeStorageGen2:DataFactoryLinkedServiceDataLakeStorageGen2":
                return new DataFactoryLinkedServiceDataLakeStorageGen2(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceKeyVault:DataFactoryLinkedServiceKeyVault":
                return new DataFactoryLinkedServiceKeyVault(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceKusto:DataFactoryLinkedServiceKusto":
                return new DataFactoryLinkedServiceKusto(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceMysql:DataFactoryLinkedServiceMysql":
                return new DataFactoryLinkedServiceMysql(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceOdata:DataFactoryLinkedServiceOdata":
                return new DataFactoryLinkedServiceOdata(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceOdbc:DataFactoryLinkedServiceOdbc":
                return new DataFactoryLinkedServiceOdbc(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServicePostgresql:DataFactoryLinkedServicePostgresql":
                return new DataFactoryLinkedServicePostgresql(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceSftp:DataFactoryLinkedServiceSftp":
                return new DataFactoryLinkedServiceSftp(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceSnowflake:DataFactoryLinkedServiceSnowflake":
                return new DataFactoryLinkedServiceSnowflake(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceSqlServer:DataFactoryLinkedServiceSqlServer":
                return new DataFactoryLinkedServiceSqlServer(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceSynapse:DataFactoryLinkedServiceSynapse":
                return new DataFactoryLinkedServiceSynapse(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryLinkedServiceWeb:DataFactoryLinkedServiceWeb":
                return new DataFactoryLinkedServiceWeb(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryManagedPrivateEndpoint:DataFactoryManagedPrivateEndpoint":
                return new DataFactoryManagedPrivateEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryPipeline:DataFactoryPipeline":
                return new DataFactoryPipeline(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryTriggerBlobEvent:DataFactoryTriggerBlobEvent":
                return new DataFactoryTriggerBlobEvent(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryTriggerCustomEvent:DataFactoryTriggerCustomEvent":
                return new DataFactoryTriggerCustomEvent(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryTriggerSchedule:DataFactoryTriggerSchedule":
                return new DataFactoryTriggerSchedule(name, <any>undefined, { urn })
            case "azurerm:index/dataFactoryTriggerTumblingWindow:DataFactoryTriggerTumblingWindow":
                return new DataFactoryTriggerTumblingWindow(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupInstanceBlobStorage:DataProtectionBackupInstanceBlobStorage":
                return new DataProtectionBackupInstanceBlobStorage(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupInstanceDisk:DataProtectionBackupInstanceDisk":
                return new DataProtectionBackupInstanceDisk(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupInstanceKubernetesCluster:DataProtectionBackupInstanceKubernetesCluster":
                return new DataProtectionBackupInstanceKubernetesCluster(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupInstancePostgresql:DataProtectionBackupInstancePostgresql":
                return new DataProtectionBackupInstancePostgresql(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupInstancePostgresqlFlexibleServer:DataProtectionBackupInstancePostgresqlFlexibleServer":
                return new DataProtectionBackupInstancePostgresqlFlexibleServer(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupPolicyBlobStorage:DataProtectionBackupPolicyBlobStorage":
                return new DataProtectionBackupPolicyBlobStorage(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupPolicyDisk:DataProtectionBackupPolicyDisk":
                return new DataProtectionBackupPolicyDisk(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupPolicyKubernetesCluster:DataProtectionBackupPolicyKubernetesCluster":
                return new DataProtectionBackupPolicyKubernetesCluster(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupPolicyPostgresql:DataProtectionBackupPolicyPostgresql":
                return new DataProtectionBackupPolicyPostgresql(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupPolicyPostgresqlFlexibleServer:DataProtectionBackupPolicyPostgresqlFlexibleServer":
                return new DataProtectionBackupPolicyPostgresqlFlexibleServer(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionBackupVault:DataProtectionBackupVault":
                return new DataProtectionBackupVault(name, <any>undefined, { urn })
            case "azurerm:index/dataProtectionResourceGuard:DataProtectionResourceGuard":
                return new DataProtectionResourceGuard(name, <any>undefined, { urn })
            case "azurerm:index/dataShare:DataShare":
                return new DataShare(name, <any>undefined, { urn })
            case "azurerm:index/dataShareAccount:DataShareAccount":
                return new DataShareAccount(name, <any>undefined, { urn })
            case "azurerm:index/dataShareDatasetBlobStorage:DataShareDatasetBlobStorage":
                return new DataShareDatasetBlobStorage(name, <any>undefined, { urn })
            case "azurerm:index/dataShareDatasetDataLakeGen2:DataShareDatasetDataLakeGen2":
                return new DataShareDatasetDataLakeGen2(name, <any>undefined, { urn })
            case "azurerm:index/dataShareDatasetKustoCluster:DataShareDatasetKustoCluster":
                return new DataShareDatasetKustoCluster(name, <any>undefined, { urn })
            case "azurerm:index/dataShareDatasetKustoDatabase:DataShareDatasetKustoDatabase":
                return new DataShareDatasetKustoDatabase(name, <any>undefined, { urn })
            case "azurerm:index/databaseMigrationProject:DatabaseMigrationProject":
                return new DatabaseMigrationProject(name, <any>undefined, { urn })
            case "azurerm:index/databaseMigrationService:DatabaseMigrationService":
                return new DatabaseMigrationService(name, <any>undefined, { urn })
            case "azurerm:index/databoxEdgeDevice:DataboxEdgeDevice":
                return new DataboxEdgeDevice(name, <any>undefined, { urn })
            case "azurerm:index/databricksAccessConnector:DatabricksAccessConnector":
                return new DatabricksAccessConnector(name, <any>undefined, { urn })
            case "azurerm:index/databricksVirtualNetworkPeering:DatabricksVirtualNetworkPeering":
                return new DatabricksVirtualNetworkPeering(name, <any>undefined, { urn })
            case "azurerm:index/databricksWorkspace:DatabricksWorkspace":
                return new DatabricksWorkspace(name, <any>undefined, { urn })
            case "azurerm:index/databricksWorkspaceCustomerManagedKey:DatabricksWorkspaceCustomerManagedKey":
                return new DatabricksWorkspaceCustomerManagedKey(name, <any>undefined, { urn })
            case "azurerm:index/databricksWorkspaceRootDbfsCustomerManagedKey:DatabricksWorkspaceRootDbfsCustomerManagedKey":
                return new DatabricksWorkspaceRootDbfsCustomerManagedKey(name, <any>undefined, { urn })
            case "azurerm:index/datadogMonitor:DatadogMonitor":
                return new DatadogMonitor(name, <any>undefined, { urn })
            case "azurerm:index/datadogMonitorSsoConfiguration:DatadogMonitorSsoConfiguration":
                return new DatadogMonitorSsoConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/datadogMonitorTagRule:DatadogMonitorTagRule":
                return new DatadogMonitorTagRule(name, <any>undefined, { urn })
            case "azurerm:index/dedicatedHardwareSecurityModule:DedicatedHardwareSecurityModule":
                return new DedicatedHardwareSecurityModule(name, <any>undefined, { urn })
            case "azurerm:index/dedicatedHost:DedicatedHost":
                return new DedicatedHost(name, <any>undefined, { urn })
            case "azurerm:index/dedicatedHostGroup:DedicatedHostGroup":
                return new DedicatedHostGroup(name, <any>undefined, { urn })
            case "azurerm:index/devCenter:DevCenter":
                return new DevCenter(name, <any>undefined, { urn })
            case "azurerm:index/devCenterCatalog:DevCenterCatalog":
                return new DevCenterCatalog(name, <any>undefined, { urn })
            case "azurerm:index/devCenterDevBoxDefinition:DevCenterDevBoxDefinition":
                return new DevCenterDevBoxDefinition(name, <any>undefined, { urn })
            case "azurerm:index/devCenterEnvironmentType:DevCenterEnvironmentType":
                return new DevCenterEnvironmentType(name, <any>undefined, { urn })
            case "azurerm:index/devCenterGallery:DevCenterGallery":
                return new DevCenterGallery(name, <any>undefined, { urn })
            case "azurerm:index/devCenterNetworkConnection:DevCenterNetworkConnection":
                return new DevCenterNetworkConnection(name, <any>undefined, { urn })
            case "azurerm:index/devCenterProject:DevCenterProject":
                return new DevCenterProject(name, <any>undefined, { urn })
            case "azurerm:index/devCenterProjectEnvironmentType:DevCenterProjectEnvironmentType":
                return new DevCenterProjectEnvironmentType(name, <any>undefined, { urn })
            case "azurerm:index/devTestGlobalVmShutdownSchedule:DevTestGlobalVmShutdownSchedule":
                return new DevTestGlobalVmShutdownSchedule(name, <any>undefined, { urn })
            case "azurerm:index/devTestLab:DevTestLab":
                return new DevTestLab(name, <any>undefined, { urn })
            case "azurerm:index/devTestLinuxVirtualMachine:DevTestLinuxVirtualMachine":
                return new DevTestLinuxVirtualMachine(name, <any>undefined, { urn })
            case "azurerm:index/devTestPolicy:DevTestPolicy":
                return new DevTestPolicy(name, <any>undefined, { urn })
            case "azurerm:index/devTestSchedule:DevTestSchedule":
                return new DevTestSchedule(name, <any>undefined, { urn })
            case "azurerm:index/devTestVirtualNetwork:DevTestVirtualNetwork":
                return new DevTestVirtualNetwork(name, <any>undefined, { urn })
            case "azurerm:index/devTestWindowsVirtualMachine:DevTestWindowsVirtualMachine":
                return new DevTestWindowsVirtualMachine(name, <any>undefined, { urn })
            case "azurerm:index/digitalTwinsEndpointEventgrid:DigitalTwinsEndpointEventgrid":
                return new DigitalTwinsEndpointEventgrid(name, <any>undefined, { urn })
            case "azurerm:index/digitalTwinsEndpointEventhub:DigitalTwinsEndpointEventhub":
                return new DigitalTwinsEndpointEventhub(name, <any>undefined, { urn })
            case "azurerm:index/digitalTwinsEndpointServicebus:DigitalTwinsEndpointServicebus":
                return new DigitalTwinsEndpointServicebus(name, <any>undefined, { urn })
            case "azurerm:index/digitalTwinsInstance:DigitalTwinsInstance":
                return new DigitalTwinsInstance(name, <any>undefined, { urn })
            case "azurerm:index/digitalTwinsTimeSeriesDatabaseConnection:DigitalTwinsTimeSeriesDatabaseConnection":
                return new DigitalTwinsTimeSeriesDatabaseConnection(name, <any>undefined, { urn })
            case "azurerm:index/diskAccess:DiskAccess":
                return new DiskAccess(name, <any>undefined, { urn })
            case "azurerm:index/diskEncryptionSet:DiskEncryptionSet":
                return new DiskEncryptionSet(name, <any>undefined, { urn })
            case "azurerm:index/dnsARecord:DnsARecord":
                return new DnsARecord(name, <any>undefined, { urn })
            case "azurerm:index/dnsAaaaRecord:DnsAaaaRecord":
                return new DnsAaaaRecord(name, <any>undefined, { urn })
            case "azurerm:index/dnsCaaRecord:DnsCaaRecord":
                return new DnsCaaRecord(name, <any>undefined, { urn })
            case "azurerm:index/dnsCnameRecord:DnsCnameRecord":
                return new DnsCnameRecord(name, <any>undefined, { urn })
            case "azurerm:index/dnsMxRecord:DnsMxRecord":
                return new DnsMxRecord(name, <any>undefined, { urn })
            case "azurerm:index/dnsNsRecord:DnsNsRecord":
                return new DnsNsRecord(name, <any>undefined, { urn })
            case "azurerm:index/dnsPtrRecord:DnsPtrRecord":
                return new DnsPtrRecord(name, <any>undefined, { urn })
            case "azurerm:index/dnsSrvRecord:DnsSrvRecord":
                return new DnsSrvRecord(name, <any>undefined, { urn })
            case "azurerm:index/dnsTxtRecord:DnsTxtRecord":
                return new DnsTxtRecord(name, <any>undefined, { urn })
            case "azurerm:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "azurerm:index/elasticCloudElasticsearch:ElasticCloudElasticsearch":
                return new ElasticCloudElasticsearch(name, <any>undefined, { urn })
            case "azurerm:index/elasticSan:ElasticSan":
                return new ElasticSan(name, <any>undefined, { urn })
            case "azurerm:index/elasticSanVolume:ElasticSanVolume":
                return new ElasticSanVolume(name, <any>undefined, { urn })
            case "azurerm:index/elasticSanVolumeGroup:ElasticSanVolumeGroup":
                return new ElasticSanVolumeGroup(name, <any>undefined, { urn })
            case "azurerm:index/emailCommunicationService:EmailCommunicationService":
                return new EmailCommunicationService(name, <any>undefined, { urn })
            case "azurerm:index/emailCommunicationServiceDomain:EmailCommunicationServiceDomain":
                return new EmailCommunicationServiceDomain(name, <any>undefined, { urn })
            case "azurerm:index/eventgridDomain:EventgridDomain":
                return new EventgridDomain(name, <any>undefined, { urn })
            case "azurerm:index/eventgridDomainTopic:EventgridDomainTopic":
                return new EventgridDomainTopic(name, <any>undefined, { urn })
            case "azurerm:index/eventgridEventSubscription:EventgridEventSubscription":
                return new EventgridEventSubscription(name, <any>undefined, { urn })
            case "azurerm:index/eventgridSystemTopic:EventgridSystemTopic":
                return new EventgridSystemTopic(name, <any>undefined, { urn })
            case "azurerm:index/eventgridSystemTopicEventSubscription:EventgridSystemTopicEventSubscription":
                return new EventgridSystemTopicEventSubscription(name, <any>undefined, { urn })
            case "azurerm:index/eventgridTopic:EventgridTopic":
                return new EventgridTopic(name, <any>undefined, { urn })
            case "azurerm:index/eventhub:Eventhub":
                return new Eventhub(name, <any>undefined, { urn })
            case "azurerm:index/eventhubAuthorizationRule:EventhubAuthorizationRule":
                return new EventhubAuthorizationRule(name, <any>undefined, { urn })
            case "azurerm:index/eventhubCluster:EventhubCluster":
                return new EventhubCluster(name, <any>undefined, { urn })
            case "azurerm:index/eventhubConsumerGroup:EventhubConsumerGroup":
                return new EventhubConsumerGroup(name, <any>undefined, { urn })
            case "azurerm:index/eventhubNamespace:EventhubNamespace":
                return new EventhubNamespace(name, <any>undefined, { urn })
            case "azurerm:index/eventhubNamespaceAuthorizationRule:EventhubNamespaceAuthorizationRule":
                return new EventhubNamespaceAuthorizationRule(name, <any>undefined, { urn })
            case "azurerm:index/eventhubNamespaceCustomerManagedKey:EventhubNamespaceCustomerManagedKey":
                return new EventhubNamespaceCustomerManagedKey(name, <any>undefined, { urn })
            case "azurerm:index/eventhubNamespaceDisasterRecoveryConfig:EventhubNamespaceDisasterRecoveryConfig":
                return new EventhubNamespaceDisasterRecoveryConfig(name, <any>undefined, { urn })
            case "azurerm:index/eventhubNamespaceSchemaGroup:EventhubNamespaceSchemaGroup":
                return new EventhubNamespaceSchemaGroup(name, <any>undefined, { urn })
            case "azurerm:index/expressRouteCircuit:ExpressRouteCircuit":
                return new ExpressRouteCircuit(name, <any>undefined, { urn })
            case "azurerm:index/expressRouteCircuitAuthorization:ExpressRouteCircuitAuthorization":
                return new ExpressRouteCircuitAuthorization(name, <any>undefined, { urn })
            case "azurerm:index/expressRouteCircuitConnection:ExpressRouteCircuitConnection":
                return new ExpressRouteCircuitConnection(name, <any>undefined, { urn })
            case "azurerm:index/expressRouteCircuitPeering:ExpressRouteCircuitPeering":
                return new ExpressRouteCircuitPeering(name, <any>undefined, { urn })
            case "azurerm:index/expressRouteConnection:ExpressRouteConnection":
                return new ExpressRouteConnection(name, <any>undefined, { urn })
            case "azurerm:index/expressRouteGateway:ExpressRouteGateway":
                return new ExpressRouteGateway(name, <any>undefined, { urn })
            case "azurerm:index/expressRoutePort:ExpressRoutePort":
                return new ExpressRoutePort(name, <any>undefined, { urn })
            case "azurerm:index/expressRoutePortAuthorization:ExpressRoutePortAuthorization":
                return new ExpressRoutePortAuthorization(name, <any>undefined, { urn })
            case "azurerm:index/extendedCustomLocation:ExtendedCustomLocation":
                return new ExtendedCustomLocation(name, <any>undefined, { urn })
            case "azurerm:index/federatedIdentityCredential:FederatedIdentityCredential":
                return new FederatedIdentityCredential(name, <any>undefined, { urn })
            case "azurerm:index/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "azurerm:index/firewallApplicationRuleCollection:FirewallApplicationRuleCollection":
                return new FirewallApplicationRuleCollection(name, <any>undefined, { urn })
            case "azurerm:index/firewallNatRuleCollection:FirewallNatRuleCollection":
                return new FirewallNatRuleCollection(name, <any>undefined, { urn })
            case "azurerm:index/firewallNetworkRuleCollection:FirewallNetworkRuleCollection":
                return new FirewallNetworkRuleCollection(name, <any>undefined, { urn })
            case "azurerm:index/firewallPolicy:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "azurerm:index/firewallPolicyRuleCollectionGroup:FirewallPolicyRuleCollectionGroup":
                return new FirewallPolicyRuleCollectionGroup(name, <any>undefined, { urn })
            case "azurerm:index/fluidRelayServer:FluidRelayServer":
                return new FluidRelayServer(name, <any>undefined, { urn })
            case "azurerm:index/frontdoor:Frontdoor":
                return new Frontdoor(name, <any>undefined, { urn })
            case "azurerm:index/frontdoorCustomHttpsConfiguration:FrontdoorCustomHttpsConfiguration":
                return new FrontdoorCustomHttpsConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/frontdoorFirewallPolicy:FrontdoorFirewallPolicy":
                return new FrontdoorFirewallPolicy(name, <any>undefined, { urn })
            case "azurerm:index/frontdoorRulesEngine:FrontdoorRulesEngine":
                return new FrontdoorRulesEngine(name, <any>undefined, { urn })
            case "azurerm:index/functionApp:FunctionApp":
                return new FunctionApp(name, <any>undefined, { urn })
            case "azurerm:index/functionAppActiveSlot:FunctionAppActiveSlot":
                return new FunctionAppActiveSlot(name, <any>undefined, { urn })
            case "azurerm:index/functionAppConnection:FunctionAppConnection":
                return new FunctionAppConnection(name, <any>undefined, { urn })
            case "azurerm:index/functionAppFunction:FunctionAppFunction":
                return new FunctionAppFunction(name, <any>undefined, { urn })
            case "azurerm:index/functionAppHybridConnection:FunctionAppHybridConnection":
                return new FunctionAppHybridConnection(name, <any>undefined, { urn })
            case "azurerm:index/functionAppSlot:FunctionAppSlot":
                return new FunctionAppSlot(name, <any>undefined, { urn })
            case "azurerm:index/galleryApplication:GalleryApplication":
                return new GalleryApplication(name, <any>undefined, { urn })
            case "azurerm:index/galleryApplicationVersion:GalleryApplicationVersion":
                return new GalleryApplicationVersion(name, <any>undefined, { urn })
            case "azurerm:index/graphServicesAccount:GraphServicesAccount":
                return new GraphServicesAccount(name, <any>undefined, { urn })
            case "azurerm:index/hdinsightHadoopCluster:HdinsightHadoopCluster":
                return new HdinsightHadoopCluster(name, <any>undefined, { urn })
            case "azurerm:index/hdinsightHbaseCluster:HdinsightHbaseCluster":
                return new HdinsightHbaseCluster(name, <any>undefined, { urn })
            case "azurerm:index/hdinsightInteractiveQueryCluster:HdinsightInteractiveQueryCluster":
                return new HdinsightInteractiveQueryCluster(name, <any>undefined, { urn })
            case "azurerm:index/hdinsightKafkaCluster:HdinsightKafkaCluster":
                return new HdinsightKafkaCluster(name, <any>undefined, { urn })
            case "azurerm:index/hdinsightSparkCluster:HdinsightSparkCluster":
                return new HdinsightSparkCluster(name, <any>undefined, { urn })
            case "azurerm:index/healthbot:Healthbot":
                return new Healthbot(name, <any>undefined, { urn })
            case "azurerm:index/healthcareDicomService:HealthcareDicomService":
                return new HealthcareDicomService(name, <any>undefined, { urn })
            case "azurerm:index/healthcareFhirService:HealthcareFhirService":
                return new HealthcareFhirService(name, <any>undefined, { urn })
            case "azurerm:index/healthcareMedtechService:HealthcareMedtechService":
                return new HealthcareMedtechService(name, <any>undefined, { urn })
            case "azurerm:index/healthcareMedtechServiceFhirDestination:HealthcareMedtechServiceFhirDestination":
                return new HealthcareMedtechServiceFhirDestination(name, <any>undefined, { urn })
            case "azurerm:index/healthcareService:HealthcareService":
                return new HealthcareService(name, <any>undefined, { urn })
            case "azurerm:index/healthcareWorkspace:HealthcareWorkspace":
                return new HealthcareWorkspace(name, <any>undefined, { urn })
            case "azurerm:index/hpcCache:HpcCache":
                return new HpcCache(name, <any>undefined, { urn })
            case "azurerm:index/hpcCacheAccessPolicy:HpcCacheAccessPolicy":
                return new HpcCacheAccessPolicy(name, <any>undefined, { urn })
            case "azurerm:index/hpcCacheBlobNfsTarget:HpcCacheBlobNfsTarget":
                return new HpcCacheBlobNfsTarget(name, <any>undefined, { urn })
            case "azurerm:index/hpcCacheBlobTarget:HpcCacheBlobTarget":
                return new HpcCacheBlobTarget(name, <any>undefined, { urn })
            case "azurerm:index/hpcCacheNfsTarget:HpcCacheNfsTarget":
                return new HpcCacheNfsTarget(name, <any>undefined, { urn })
            case "azurerm:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "azurerm:index/iotSecurityDeviceGroup:IotSecurityDeviceGroup":
                return new IotSecurityDeviceGroup(name, <any>undefined, { urn })
            case "azurerm:index/iotSecuritySolution:IotSecuritySolution":
                return new IotSecuritySolution(name, <any>undefined, { urn })
            case "azurerm:index/iotcentralApplication:IotcentralApplication":
                return new IotcentralApplication(name, <any>undefined, { urn })
            case "azurerm:index/iotcentralApplicationNetworkRuleSet:IotcentralApplicationNetworkRuleSet":
                return new IotcentralApplicationNetworkRuleSet(name, <any>undefined, { urn })
            case "azurerm:index/iotcentralOrganization:IotcentralOrganization":
                return new IotcentralOrganization(name, <any>undefined, { urn })
            case "azurerm:index/iothub:Iothub":
                return new Iothub(name, <any>undefined, { urn })
            case "azurerm:index/iothubCertificate:IothubCertificate":
                return new IothubCertificate(name, <any>undefined, { urn })
            case "azurerm:index/iothubConsumerGroup:IothubConsumerGroup":
                return new IothubConsumerGroup(name, <any>undefined, { urn })
            case "azurerm:index/iothubDeviceUpdateAccount:IothubDeviceUpdateAccount":
                return new IothubDeviceUpdateAccount(name, <any>undefined, { urn })
            case "azurerm:index/iothubDeviceUpdateInstance:IothubDeviceUpdateInstance":
                return new IothubDeviceUpdateInstance(name, <any>undefined, { urn })
            case "azurerm:index/iothubDps:IothubDps":
                return new IothubDps(name, <any>undefined, { urn })
            case "azurerm:index/iothubDpsCertificate:IothubDpsCertificate":
                return new IothubDpsCertificate(name, <any>undefined, { urn })
            case "azurerm:index/iothubDpsSharedAccessPolicy:IothubDpsSharedAccessPolicy":
                return new IothubDpsSharedAccessPolicy(name, <any>undefined, { urn })
            case "azurerm:index/iothubEndpointCosmosdbAccount:IothubEndpointCosmosdbAccount":
                return new IothubEndpointCosmosdbAccount(name, <any>undefined, { urn })
            case "azurerm:index/iothubEndpointEventhub:IothubEndpointEventhub":
                return new IothubEndpointEventhub(name, <any>undefined, { urn })
            case "azurerm:index/iothubEndpointServicebusQueue:IothubEndpointServicebusQueue":
                return new IothubEndpointServicebusQueue(name, <any>undefined, { urn })
            case "azurerm:index/iothubEndpointServicebusTopic:IothubEndpointServicebusTopic":
                return new IothubEndpointServicebusTopic(name, <any>undefined, { urn })
            case "azurerm:index/iothubEndpointStorageContainer:IothubEndpointStorageContainer":
                return new IothubEndpointStorageContainer(name, <any>undefined, { urn })
            case "azurerm:index/iothubEnrichment:IothubEnrichment":
                return new IothubEnrichment(name, <any>undefined, { urn })
            case "azurerm:index/iothubFallbackRoute:IothubFallbackRoute":
                return new IothubFallbackRoute(name, <any>undefined, { urn })
            case "azurerm:index/iothubFileUpload:IothubFileUpload":
                return new IothubFileUpload(name, <any>undefined, { urn })
            case "azurerm:index/iothubRoute:IothubRoute":
                return new IothubRoute(name, <any>undefined, { urn })
            case "azurerm:index/iothubSharedAccessPolicy:IothubSharedAccessPolicy":
                return new IothubSharedAccessPolicy(name, <any>undefined, { urn })
            case "azurerm:index/ipGroup:IpGroup":
                return new IpGroup(name, <any>undefined, { urn })
            case "azurerm:index/ipGroupCidr:IpGroupCidr":
                return new IpGroupCidr(name, <any>undefined, { urn })
            case "azurerm:index/keyVault:KeyVault":
                return new KeyVault(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultAccessPolicy:KeyVaultAccessPolicy":
                return new KeyVaultAccessPolicy(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultCertificate:KeyVaultCertificate":
                return new KeyVaultCertificate(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultCertificateContacts:KeyVaultCertificateContacts":
                return new KeyVaultCertificateContacts(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultCertificateIssuer:KeyVaultCertificateIssuer":
                return new KeyVaultCertificateIssuer(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultKey:KeyVaultKey":
                return new KeyVaultKey(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultManagedHardwareSecurityModule:KeyVaultManagedHardwareSecurityModule":
                return new KeyVaultManagedHardwareSecurityModule(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultManagedHardwareSecurityModuleKey:KeyVaultManagedHardwareSecurityModuleKey":
                return new KeyVaultManagedHardwareSecurityModuleKey(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultManagedHardwareSecurityModuleRoleAssignment:KeyVaultManagedHardwareSecurityModuleRoleAssignment":
                return new KeyVaultManagedHardwareSecurityModuleRoleAssignment(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultManagedHardwareSecurityModuleRoleDefinition:KeyVaultManagedHardwareSecurityModuleRoleDefinition":
                return new KeyVaultManagedHardwareSecurityModuleRoleDefinition(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultManagedStorageAccount:KeyVaultManagedStorageAccount":
                return new KeyVaultManagedStorageAccount(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultManagedStorageAccountSasTokenDefinition:KeyVaultManagedStorageAccountSasTokenDefinition":
                return new KeyVaultManagedStorageAccountSasTokenDefinition(name, <any>undefined, { urn })
            case "azurerm:index/keyVaultSecret:KeyVaultSecret":
                return new KeyVaultSecret(name, <any>undefined, { urn })
            case "azurerm:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "azurerm:index/kubernetesClusterExtension:KubernetesClusterExtension":
                return new KubernetesClusterExtension(name, <any>undefined, { urn })
            case "azurerm:index/kubernetesClusterNodePool:KubernetesClusterNodePool":
                return new KubernetesClusterNodePool(name, <any>undefined, { urn })
            case "azurerm:index/kubernetesClusterTrustedAccessRoleBinding:KubernetesClusterTrustedAccessRoleBinding":
                return new KubernetesClusterTrustedAccessRoleBinding(name, <any>undefined, { urn })
            case "azurerm:index/kubernetesFleetManager:KubernetesFleetManager":
                return new KubernetesFleetManager(name, <any>undefined, { urn })
            case "azurerm:index/kubernetesFleetMember:KubernetesFleetMember":
                return new KubernetesFleetMember(name, <any>undefined, { urn })
            case "azurerm:index/kubernetesFleetUpdateRun:KubernetesFleetUpdateRun":
                return new KubernetesFleetUpdateRun(name, <any>undefined, { urn })
            case "azurerm:index/kubernetesFleetUpdateStrategy:KubernetesFleetUpdateStrategy":
                return new KubernetesFleetUpdateStrategy(name, <any>undefined, { urn })
            case "azurerm:index/kubernetesFluxConfiguration:KubernetesFluxConfiguration":
                return new KubernetesFluxConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/kustoAttachedDatabaseConfiguration:KustoAttachedDatabaseConfiguration":
                return new KustoAttachedDatabaseConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/kustoCluster:KustoCluster":
                return new KustoCluster(name, <any>undefined, { urn })
            case "azurerm:index/kustoClusterCustomerManagedKey:KustoClusterCustomerManagedKey":
                return new KustoClusterCustomerManagedKey(name, <any>undefined, { urn })
            case "azurerm:index/kustoClusterManagedPrivateEndpoint:KustoClusterManagedPrivateEndpoint":
                return new KustoClusterManagedPrivateEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/kustoClusterPrincipalAssignment:KustoClusterPrincipalAssignment":
                return new KustoClusterPrincipalAssignment(name, <any>undefined, { urn })
            case "azurerm:index/kustoCosmosdbDataConnection:KustoCosmosdbDataConnection":
                return new KustoCosmosdbDataConnection(name, <any>undefined, { urn })
            case "azurerm:index/kustoDatabase:KustoDatabase":
                return new KustoDatabase(name, <any>undefined, { urn })
            case "azurerm:index/kustoDatabasePrincipalAssignment:KustoDatabasePrincipalAssignment":
                return new KustoDatabasePrincipalAssignment(name, <any>undefined, { urn })
            case "azurerm:index/kustoEventgridDataConnection:KustoEventgridDataConnection":
                return new KustoEventgridDataConnection(name, <any>undefined, { urn })
            case "azurerm:index/kustoEventhubDataConnection:KustoEventhubDataConnection":
                return new KustoEventhubDataConnection(name, <any>undefined, { urn })
            case "azurerm:index/kustoIothubDataConnection:KustoIothubDataConnection":
                return new KustoIothubDataConnection(name, <any>undefined, { urn })
            case "azurerm:index/kustoScript:KustoScript":
                return new KustoScript(name, <any>undefined, { urn })
            case "azurerm:index/lb:Lb":
                return new Lb(name, <any>undefined, { urn })
            case "azurerm:index/lbBackendAddressPool:LbBackendAddressPool":
                return new LbBackendAddressPool(name, <any>undefined, { urn })
            case "azurerm:index/lbBackendAddressPoolAddress:LbBackendAddressPoolAddress":
                return new LbBackendAddressPoolAddress(name, <any>undefined, { urn })
            case "azurerm:index/lbNatPool:LbNatPool":
                return new LbNatPool(name, <any>undefined, { urn })
            case "azurerm:index/lbNatRule:LbNatRule":
                return new LbNatRule(name, <any>undefined, { urn })
            case "azurerm:index/lbOutboundRule:LbOutboundRule":
                return new LbOutboundRule(name, <any>undefined, { urn })
            case "azurerm:index/lbProbe:LbProbe":
                return new LbProbe(name, <any>undefined, { urn })
            case "azurerm:index/lbRule:LbRule":
                return new LbRule(name, <any>undefined, { urn })
            case "azurerm:index/lighthouseAssignment:LighthouseAssignment":
                return new LighthouseAssignment(name, <any>undefined, { urn })
            case "azurerm:index/lighthouseDefinition:LighthouseDefinition":
                return new LighthouseDefinition(name, <any>undefined, { urn })
            case "azurerm:index/linuxFunctionApp:LinuxFunctionApp":
                return new LinuxFunctionApp(name, <any>undefined, { urn })
            case "azurerm:index/linuxFunctionAppSlot:LinuxFunctionAppSlot":
                return new LinuxFunctionAppSlot(name, <any>undefined, { urn })
            case "azurerm:index/linuxVirtualMachine:LinuxVirtualMachine":
                return new LinuxVirtualMachine(name, <any>undefined, { urn })
            case "azurerm:index/linuxVirtualMachineScaleSet:LinuxVirtualMachineScaleSet":
                return new LinuxVirtualMachineScaleSet(name, <any>undefined, { urn })
            case "azurerm:index/linuxWebApp:LinuxWebApp":
                return new LinuxWebApp(name, <any>undefined, { urn })
            case "azurerm:index/linuxWebAppSlot:LinuxWebAppSlot":
                return new LinuxWebAppSlot(name, <any>undefined, { urn })
            case "azurerm:index/loadTest:LoadTest":
                return new LoadTest(name, <any>undefined, { urn })
            case "azurerm:index/localNetworkGateway:LocalNetworkGateway":
                return new LocalNetworkGateway(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsCluster:LogAnalyticsCluster":
                return new LogAnalyticsCluster(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsClusterCustomerManagedKey:LogAnalyticsClusterCustomerManagedKey":
                return new LogAnalyticsClusterCustomerManagedKey(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsDataExportRule:LogAnalyticsDataExportRule":
                return new LogAnalyticsDataExportRule(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsDatasourceWindowsEvent:LogAnalyticsDatasourceWindowsEvent":
                return new LogAnalyticsDatasourceWindowsEvent(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsDatasourceWindowsPerformanceCounter:LogAnalyticsDatasourceWindowsPerformanceCounter":
                return new LogAnalyticsDatasourceWindowsPerformanceCounter(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsLinkedService:LogAnalyticsLinkedService":
                return new LogAnalyticsLinkedService(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsLinkedStorageAccount:LogAnalyticsLinkedStorageAccount":
                return new LogAnalyticsLinkedStorageAccount(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsQueryPack:LogAnalyticsQueryPack":
                return new LogAnalyticsQueryPack(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsQueryPackQuery:LogAnalyticsQueryPackQuery":
                return new LogAnalyticsQueryPackQuery(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsSavedSearch:LogAnalyticsSavedSearch":
                return new LogAnalyticsSavedSearch(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsSolution:LogAnalyticsSolution":
                return new LogAnalyticsSolution(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsStorageInsights:LogAnalyticsStorageInsights":
                return new LogAnalyticsStorageInsights(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsWorkspace:LogAnalyticsWorkspace":
                return new LogAnalyticsWorkspace(name, <any>undefined, { urn })
            case "azurerm:index/logAnalyticsWorkspaceTable:LogAnalyticsWorkspaceTable":
                return new LogAnalyticsWorkspaceTable(name, <any>undefined, { urn })
            case "azurerm:index/logicAppActionCustom:LogicAppActionCustom":
                return new LogicAppActionCustom(name, <any>undefined, { urn })
            case "azurerm:index/logicAppActionHttp:LogicAppActionHttp":
                return new LogicAppActionHttp(name, <any>undefined, { urn })
            case "azurerm:index/logicAppIntegrationAccount:LogicAppIntegrationAccount":
                return new LogicAppIntegrationAccount(name, <any>undefined, { urn })
            case "azurerm:index/logicAppIntegrationAccountAgreement:LogicAppIntegrationAccountAgreement":
                return new LogicAppIntegrationAccountAgreement(name, <any>undefined, { urn })
            case "azurerm:index/logicAppIntegrationAccountAssembly:LogicAppIntegrationAccountAssembly":
                return new LogicAppIntegrationAccountAssembly(name, <any>undefined, { urn })
            case "azurerm:index/logicAppIntegrationAccountBatchConfiguration:LogicAppIntegrationAccountBatchConfiguration":
                return new LogicAppIntegrationAccountBatchConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/logicAppIntegrationAccountCertificate:LogicAppIntegrationAccountCertificate":
                return new LogicAppIntegrationAccountCertificate(name, <any>undefined, { urn })
            case "azurerm:index/logicAppIntegrationAccountMap:LogicAppIntegrationAccountMap":
                return new LogicAppIntegrationAccountMap(name, <any>undefined, { urn })
            case "azurerm:index/logicAppIntegrationAccountPartner:LogicAppIntegrationAccountPartner":
                return new LogicAppIntegrationAccountPartner(name, <any>undefined, { urn })
            case "azurerm:index/logicAppIntegrationAccountSchema:LogicAppIntegrationAccountSchema":
                return new LogicAppIntegrationAccountSchema(name, <any>undefined, { urn })
            case "azurerm:index/logicAppIntegrationAccountSession:LogicAppIntegrationAccountSession":
                return new LogicAppIntegrationAccountSession(name, <any>undefined, { urn })
            case "azurerm:index/logicAppStandard:LogicAppStandard":
                return new LogicAppStandard(name, <any>undefined, { urn })
            case "azurerm:index/logicAppTriggerCustom:LogicAppTriggerCustom":
                return new LogicAppTriggerCustom(name, <any>undefined, { urn })
            case "azurerm:index/logicAppTriggerHttpRequest:LogicAppTriggerHttpRequest":
                return new LogicAppTriggerHttpRequest(name, <any>undefined, { urn })
            case "azurerm:index/logicAppTriggerRecurrence:LogicAppTriggerRecurrence":
                return new LogicAppTriggerRecurrence(name, <any>undefined, { urn })
            case "azurerm:index/logicAppWorkflow:LogicAppWorkflow":
                return new LogicAppWorkflow(name, <any>undefined, { urn })
            case "azurerm:index/machineLearningComputeCluster:MachineLearningComputeCluster":
                return new MachineLearningComputeCluster(name, <any>undefined, { urn })
            case "azurerm:index/machineLearningComputeInstance:MachineLearningComputeInstance":
                return new MachineLearningComputeInstance(name, <any>undefined, { urn })
            case "azurerm:index/machineLearningDatastoreBlobstorage:MachineLearningDatastoreBlobstorage":
                return new MachineLearningDatastoreBlobstorage(name, <any>undefined, { urn })
            case "azurerm:index/machineLearningDatastoreDatalakeGen2:MachineLearningDatastoreDatalakeGen2":
                return new MachineLearningDatastoreDatalakeGen2(name, <any>undefined, { urn })
            case "azurerm:index/machineLearningDatastoreFileshare:MachineLearningDatastoreFileshare":
                return new MachineLearningDatastoreFileshare(name, <any>undefined, { urn })
            case "azurerm:index/machineLearningInferenceCluster:MachineLearningInferenceCluster":
                return new MachineLearningInferenceCluster(name, <any>undefined, { urn })
            case "azurerm:index/machineLearningSynapseSpark:MachineLearningSynapseSpark":
                return new MachineLearningSynapseSpark(name, <any>undefined, { urn })
            case "azurerm:index/machineLearningWorkspace:MachineLearningWorkspace":
                return new MachineLearningWorkspace(name, <any>undefined, { urn })
            case "azurerm:index/maintenanceAssignmentDedicatedHost:MaintenanceAssignmentDedicatedHost":
                return new MaintenanceAssignmentDedicatedHost(name, <any>undefined, { urn })
            case "azurerm:index/maintenanceAssignmentDynamicScope:MaintenanceAssignmentDynamicScope":
                return new MaintenanceAssignmentDynamicScope(name, <any>undefined, { urn })
            case "azurerm:index/maintenanceAssignmentVirtualMachine:MaintenanceAssignmentVirtualMachine":
                return new MaintenanceAssignmentVirtualMachine(name, <any>undefined, { urn })
            case "azurerm:index/maintenanceAssignmentVirtualMachineScaleSet:MaintenanceAssignmentVirtualMachineScaleSet":
                return new MaintenanceAssignmentVirtualMachineScaleSet(name, <any>undefined, { urn })
            case "azurerm:index/maintenanceConfiguration:MaintenanceConfiguration":
                return new MaintenanceConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/managedApplication:ManagedApplication":
                return new ManagedApplication(name, <any>undefined, { urn })
            case "azurerm:index/managedApplicationDefinition:ManagedApplicationDefinition":
                return new ManagedApplicationDefinition(name, <any>undefined, { urn })
            case "azurerm:index/managedDisk:ManagedDisk":
                return new ManagedDisk(name, <any>undefined, { urn })
            case "azurerm:index/managedDiskSasToken:ManagedDiskSasToken":
                return new ManagedDiskSasToken(name, <any>undefined, { urn })
            case "azurerm:index/managedLustreFileSystem:ManagedLustreFileSystem":
                return new ManagedLustreFileSystem(name, <any>undefined, { urn })
            case "azurerm:index/managementGroup:ManagementGroup":
                return new ManagementGroup(name, <any>undefined, { urn })
            case "azurerm:index/managementGroupPolicyAssignment:ManagementGroupPolicyAssignment":
                return new ManagementGroupPolicyAssignment(name, <any>undefined, { urn })
            case "azurerm:index/managementGroupPolicyExemption:ManagementGroupPolicyExemption":
                return new ManagementGroupPolicyExemption(name, <any>undefined, { urn })
            case "azurerm:index/managementGroupPolicyRemediation:ManagementGroupPolicyRemediation":
                return new ManagementGroupPolicyRemediation(name, <any>undefined, { urn })
            case "azurerm:index/managementGroupSubscriptionAssociation:ManagementGroupSubscriptionAssociation":
                return new ManagementGroupSubscriptionAssociation(name, <any>undefined, { urn })
            case "azurerm:index/managementGroupTemplateDeployment:ManagementGroupTemplateDeployment":
                return new ManagementGroupTemplateDeployment(name, <any>undefined, { urn })
            case "azurerm:index/managementLock:ManagementLock":
                return new ManagementLock(name, <any>undefined, { urn })
            case "azurerm:index/mapsAccount:MapsAccount":
                return new MapsAccount(name, <any>undefined, { urn })
            case "azurerm:index/mapsCreator:MapsCreator":
                return new MapsCreator(name, <any>undefined, { urn })
            case "azurerm:index/marketplaceAgreement:MarketplaceAgreement":
                return new MarketplaceAgreement(name, <any>undefined, { urn })
            case "azurerm:index/marketplaceRoleAssignment:MarketplaceRoleAssignment":
                return new MarketplaceRoleAssignment(name, <any>undefined, { urn })
            case "azurerm:index/mediaServicesAccountFilter:MediaServicesAccountFilter":
                return new MediaServicesAccountFilter(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetwork:MobileNetwork":
                return new MobileNetwork(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetworkAttachedDataNetwork:MobileNetworkAttachedDataNetwork":
                return new MobileNetworkAttachedDataNetwork(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetworkDataNetwork:MobileNetworkDataNetwork":
                return new MobileNetworkDataNetwork(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetworkPacketCoreControlPlane:MobileNetworkPacketCoreControlPlane":
                return new MobileNetworkPacketCoreControlPlane(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetworkPacketCoreDataPlane:MobileNetworkPacketCoreDataPlane":
                return new MobileNetworkPacketCoreDataPlane(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetworkService:MobileNetworkService":
                return new MobileNetworkService(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetworkSim:MobileNetworkSim":
                return new MobileNetworkSim(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetworkSimGroup:MobileNetworkSimGroup":
                return new MobileNetworkSimGroup(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetworkSimPolicy:MobileNetworkSimPolicy":
                return new MobileNetworkSimPolicy(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetworkSite:MobileNetworkSite":
                return new MobileNetworkSite(name, <any>undefined, { urn })
            case "azurerm:index/mobileNetworkSlice:MobileNetworkSlice":
                return new MobileNetworkSlice(name, <any>undefined, { urn })
            case "azurerm:index/monitorAadDiagnosticSetting:MonitorAadDiagnosticSetting":
                return new MonitorAadDiagnosticSetting(name, <any>undefined, { urn })
            case "azurerm:index/monitorActionGroup:MonitorActionGroup":
                return new MonitorActionGroup(name, <any>undefined, { urn })
            case "azurerm:index/monitorActivityLogAlert:MonitorActivityLogAlert":
                return new MonitorActivityLogAlert(name, <any>undefined, { urn })
            case "azurerm:index/monitorAlertProcessingRuleActionGroup:MonitorAlertProcessingRuleActionGroup":
                return new MonitorAlertProcessingRuleActionGroup(name, <any>undefined, { urn })
            case "azurerm:index/monitorAlertProcessingRuleSuppression:MonitorAlertProcessingRuleSuppression":
                return new MonitorAlertProcessingRuleSuppression(name, <any>undefined, { urn })
            case "azurerm:index/monitorAlertPrometheusRuleGroup:MonitorAlertPrometheusRuleGroup":
                return new MonitorAlertPrometheusRuleGroup(name, <any>undefined, { urn })
            case "azurerm:index/monitorAutoscaleSetting:MonitorAutoscaleSetting":
                return new MonitorAutoscaleSetting(name, <any>undefined, { urn })
            case "azurerm:index/monitorDataCollectionEndpoint:MonitorDataCollectionEndpoint":
                return new MonitorDataCollectionEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/monitorDataCollectionRule:MonitorDataCollectionRule":
                return new MonitorDataCollectionRule(name, <any>undefined, { urn })
            case "azurerm:index/monitorDataCollectionRuleAssociation:MonitorDataCollectionRuleAssociation":
                return new MonitorDataCollectionRuleAssociation(name, <any>undefined, { urn })
            case "azurerm:index/monitorDiagnosticSetting:MonitorDiagnosticSetting":
                return new MonitorDiagnosticSetting(name, <any>undefined, { urn })
            case "azurerm:index/monitorLogProfile:MonitorLogProfile":
                return new MonitorLogProfile(name, <any>undefined, { urn })
            case "azurerm:index/monitorMetricAlert:MonitorMetricAlert":
                return new MonitorMetricAlert(name, <any>undefined, { urn })
            case "azurerm:index/monitorPrivateLinkScope:MonitorPrivateLinkScope":
                return new MonitorPrivateLinkScope(name, <any>undefined, { urn })
            case "azurerm:index/monitorPrivateLinkScopedService:MonitorPrivateLinkScopedService":
                return new MonitorPrivateLinkScopedService(name, <any>undefined, { urn })
            case "azurerm:index/monitorScheduledQueryRulesAlert:MonitorScheduledQueryRulesAlert":
                return new MonitorScheduledQueryRulesAlert(name, <any>undefined, { urn })
            case "azurerm:index/monitorScheduledQueryRulesAlertV2:MonitorScheduledQueryRulesAlertV2":
                return new MonitorScheduledQueryRulesAlertV2(name, <any>undefined, { urn })
            case "azurerm:index/monitorScheduledQueryRulesLog:MonitorScheduledQueryRulesLog":
                return new MonitorScheduledQueryRulesLog(name, <any>undefined, { urn })
            case "azurerm:index/monitorSmartDetectorAlertRule:MonitorSmartDetectorAlertRule":
                return new MonitorSmartDetectorAlertRule(name, <any>undefined, { urn })
            case "azurerm:index/monitorWorkspace:MonitorWorkspace":
                return new MonitorWorkspace(name, <any>undefined, { urn })
            case "azurerm:index/mssqlDatabase:MssqlDatabase":
                return new MssqlDatabase(name, <any>undefined, { urn })
            case "azurerm:index/mssqlDatabaseExtendedAuditingPolicy:MssqlDatabaseExtendedAuditingPolicy":
                return new MssqlDatabaseExtendedAuditingPolicy(name, <any>undefined, { urn })
            case "azurerm:index/mssqlDatabaseVulnerabilityAssessmentRuleBaseline:MssqlDatabaseVulnerabilityAssessmentRuleBaseline":
                return new MssqlDatabaseVulnerabilityAssessmentRuleBaseline(name, <any>undefined, { urn })
            case "azurerm:index/mssqlElasticpool:MssqlElasticpool":
                return new MssqlElasticpool(name, <any>undefined, { urn })
            case "azurerm:index/mssqlFailoverGroup:MssqlFailoverGroup":
                return new MssqlFailoverGroup(name, <any>undefined, { urn })
            case "azurerm:index/mssqlFirewallRule:MssqlFirewallRule":
                return new MssqlFirewallRule(name, <any>undefined, { urn })
            case "azurerm:index/mssqlJobAgent:MssqlJobAgent":
                return new MssqlJobAgent(name, <any>undefined, { urn })
            case "azurerm:index/mssqlJobCredential:MssqlJobCredential":
                return new MssqlJobCredential(name, <any>undefined, { urn })
            case "azurerm:index/mssqlManagedDatabase:MssqlManagedDatabase":
                return new MssqlManagedDatabase(name, <any>undefined, { urn })
            case "azurerm:index/mssqlManagedInstance:MssqlManagedInstance":
                return new MssqlManagedInstance(name, <any>undefined, { urn })
            case "azurerm:index/mssqlManagedInstanceActiveDirectoryAdministrator:MssqlManagedInstanceActiveDirectoryAdministrator":
                return new MssqlManagedInstanceActiveDirectoryAdministrator(name, <any>undefined, { urn })
            case "azurerm:index/mssqlManagedInstanceFailoverGroup:MssqlManagedInstanceFailoverGroup":
                return new MssqlManagedInstanceFailoverGroup(name, <any>undefined, { urn })
            case "azurerm:index/mssqlManagedInstanceSecurityAlertPolicy:MssqlManagedInstanceSecurityAlertPolicy":
                return new MssqlManagedInstanceSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azurerm:index/mssqlManagedInstanceTransparentDataEncryption:MssqlManagedInstanceTransparentDataEncryption":
                return new MssqlManagedInstanceTransparentDataEncryption(name, <any>undefined, { urn })
            case "azurerm:index/mssqlManagedInstanceVulnerabilityAssessment:MssqlManagedInstanceVulnerabilityAssessment":
                return new MssqlManagedInstanceVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azurerm:index/mssqlOutboundFirewallRule:MssqlOutboundFirewallRule":
                return new MssqlOutboundFirewallRule(name, <any>undefined, { urn })
            case "azurerm:index/mssqlServer:MssqlServer":
                return new MssqlServer(name, <any>undefined, { urn })
            case "azurerm:index/mssqlServerDnsAlias:MssqlServerDnsAlias":
                return new MssqlServerDnsAlias(name, <any>undefined, { urn })
            case "azurerm:index/mssqlServerExtendedAuditingPolicy:MssqlServerExtendedAuditingPolicy":
                return new MssqlServerExtendedAuditingPolicy(name, <any>undefined, { urn })
            case "azurerm:index/mssqlServerMicrosoftSupportAuditingPolicy:MssqlServerMicrosoftSupportAuditingPolicy":
                return new MssqlServerMicrosoftSupportAuditingPolicy(name, <any>undefined, { urn })
            case "azurerm:index/mssqlServerSecurityAlertPolicy:MssqlServerSecurityAlertPolicy":
                return new MssqlServerSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azurerm:index/mssqlServerTransparentDataEncryption:MssqlServerTransparentDataEncryption":
                return new MssqlServerTransparentDataEncryption(name, <any>undefined, { urn })
            case "azurerm:index/mssqlServerVulnerabilityAssessment:MssqlServerVulnerabilityAssessment":
                return new MssqlServerVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azurerm:index/mssqlVirtualMachine:MssqlVirtualMachine":
                return new MssqlVirtualMachine(name, <any>undefined, { urn })
            case "azurerm:index/mssqlVirtualMachineAvailabilityGroupListener:MssqlVirtualMachineAvailabilityGroupListener":
                return new MssqlVirtualMachineAvailabilityGroupListener(name, <any>undefined, { urn })
            case "azurerm:index/mssqlVirtualMachineGroup:MssqlVirtualMachineGroup":
                return new MssqlVirtualMachineGroup(name, <any>undefined, { urn })
            case "azurerm:index/mssqlVirtualNetworkRule:MssqlVirtualNetworkRule":
                return new MssqlVirtualNetworkRule(name, <any>undefined, { urn })
            case "azurerm:index/mysqlFlexibleDatabase:MysqlFlexibleDatabase":
                return new MysqlFlexibleDatabase(name, <any>undefined, { urn })
            case "azurerm:index/mysqlFlexibleServer:MysqlFlexibleServer":
                return new MysqlFlexibleServer(name, <any>undefined, { urn })
            case "azurerm:index/mysqlFlexibleServerActiveDirectoryAdministrator:MysqlFlexibleServerActiveDirectoryAdministrator":
                return new MysqlFlexibleServerActiveDirectoryAdministrator(name, <any>undefined, { urn })
            case "azurerm:index/mysqlFlexibleServerConfiguration:MysqlFlexibleServerConfiguration":
                return new MysqlFlexibleServerConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/mysqlFlexibleServerFirewallRule:MysqlFlexibleServerFirewallRule":
                return new MysqlFlexibleServerFirewallRule(name, <any>undefined, { urn })
            case "azurerm:index/natGateway:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "azurerm:index/natGatewayPublicIpAssociation:NatGatewayPublicIpAssociation":
                return new NatGatewayPublicIpAssociation(name, <any>undefined, { urn })
            case "azurerm:index/natGatewayPublicIpPrefixAssociation:NatGatewayPublicIpPrefixAssociation":
                return new NatGatewayPublicIpPrefixAssociation(name, <any>undefined, { urn })
            case "azurerm:index/netappAccount:NetappAccount":
                return new NetappAccount(name, <any>undefined, { urn })
            case "azurerm:index/netappAccountEncryption:NetappAccountEncryption":
                return new NetappAccountEncryption(name, <any>undefined, { urn })
            case "azurerm:index/netappPool:NetappPool":
                return new NetappPool(name, <any>undefined, { urn })
            case "azurerm:index/netappSnapshot:NetappSnapshot":
                return new NetappSnapshot(name, <any>undefined, { urn })
            case "azurerm:index/netappSnapshotPolicy:NetappSnapshotPolicy":
                return new NetappSnapshotPolicy(name, <any>undefined, { urn })
            case "azurerm:index/netappVolume:NetappVolume":
                return new NetappVolume(name, <any>undefined, { urn })
            case "azurerm:index/netappVolumeGroupSapHana:NetappVolumeGroupSapHana":
                return new NetappVolumeGroupSapHana(name, <any>undefined, { urn })
            case "azurerm:index/netappVolumeQuotaRule:NetappVolumeQuotaRule":
                return new NetappVolumeQuotaRule(name, <any>undefined, { urn })
            case "azurerm:index/networkConnectionMonitor:NetworkConnectionMonitor":
                return new NetworkConnectionMonitor(name, <any>undefined, { urn })
            case "azurerm:index/networkDdosProtectionPlan:NetworkDdosProtectionPlan":
                return new NetworkDdosProtectionPlan(name, <any>undefined, { urn })
            case "azurerm:index/networkFunctionAzureTrafficCollector:NetworkFunctionAzureTrafficCollector":
                return new NetworkFunctionAzureTrafficCollector(name, <any>undefined, { urn })
            case "azurerm:index/networkFunctionCollectorPolicy:NetworkFunctionCollectorPolicy":
                return new NetworkFunctionCollectorPolicy(name, <any>undefined, { urn })
            case "azurerm:index/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "azurerm:index/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation":
                return new NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(name, <any>undefined, { urn })
            case "azurerm:index/networkInterfaceApplicationSecurityGroupAssociation:NetworkInterfaceApplicationSecurityGroupAssociation":
                return new NetworkInterfaceApplicationSecurityGroupAssociation(name, <any>undefined, { urn })
            case "azurerm:index/networkInterfaceBackendAddressPoolAssociation:NetworkInterfaceBackendAddressPoolAssociation":
                return new NetworkInterfaceBackendAddressPoolAssociation(name, <any>undefined, { urn })
            case "azurerm:index/networkInterfaceNatRuleAssociation:NetworkInterfaceNatRuleAssociation":
                return new NetworkInterfaceNatRuleAssociation(name, <any>undefined, { urn })
            case "azurerm:index/networkInterfaceSecurityGroupAssociation:NetworkInterfaceSecurityGroupAssociation":
                return new NetworkInterfaceSecurityGroupAssociation(name, <any>undefined, { urn })
            case "azurerm:index/networkManager:NetworkManager":
                return new NetworkManager(name, <any>undefined, { urn })
            case "azurerm:index/networkManagerAdminRule:NetworkManagerAdminRule":
                return new NetworkManagerAdminRule(name, <any>undefined, { urn })
            case "azurerm:index/networkManagerAdminRuleCollection:NetworkManagerAdminRuleCollection":
                return new NetworkManagerAdminRuleCollection(name, <any>undefined, { urn })
            case "azurerm:index/networkManagerConnectivityConfiguration:NetworkManagerConnectivityConfiguration":
                return new NetworkManagerConnectivityConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/networkManagerDeployment:NetworkManagerDeployment":
                return new NetworkManagerDeployment(name, <any>undefined, { urn })
            case "azurerm:index/networkManagerManagementGroupConnection:NetworkManagerManagementGroupConnection":
                return new NetworkManagerManagementGroupConnection(name, <any>undefined, { urn })
            case "azurerm:index/networkManagerNetworkGroup:NetworkManagerNetworkGroup":
                return new NetworkManagerNetworkGroup(name, <any>undefined, { urn })
            case "azurerm:index/networkManagerScopeConnection:NetworkManagerScopeConnection":
                return new NetworkManagerScopeConnection(name, <any>undefined, { urn })
            case "azurerm:index/networkManagerSecurityAdminConfiguration:NetworkManagerSecurityAdminConfiguration":
                return new NetworkManagerSecurityAdminConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/networkManagerStaticMember:NetworkManagerStaticMember":
                return new NetworkManagerStaticMember(name, <any>undefined, { urn })
            case "azurerm:index/networkManagerSubscriptionConnection:NetworkManagerSubscriptionConnection":
                return new NetworkManagerSubscriptionConnection(name, <any>undefined, { urn })
            case "azurerm:index/networkPacketCapture:NetworkPacketCapture":
                return new NetworkPacketCapture(name, <any>undefined, { urn })
            case "azurerm:index/networkProfile:NetworkProfile":
                return new NetworkProfile(name, <any>undefined, { urn })
            case "azurerm:index/networkSecurityGroup:NetworkSecurityGroup":
                return new NetworkSecurityGroup(name, <any>undefined, { urn })
            case "azurerm:index/networkSecurityRule:NetworkSecurityRule":
                return new NetworkSecurityRule(name, <any>undefined, { urn })
            case "azurerm:index/networkWatcher:NetworkWatcher":
                return new NetworkWatcher(name, <any>undefined, { urn })
            case "azurerm:index/networkWatcherFlowLog:NetworkWatcherFlowLog":
                return new NetworkWatcherFlowLog(name, <any>undefined, { urn })
            case "azurerm:index/newRelicMonitor:NewRelicMonitor":
                return new NewRelicMonitor(name, <any>undefined, { urn })
            case "azurerm:index/newRelicTagRule:NewRelicTagRule":
                return new NewRelicTagRule(name, <any>undefined, { urn })
            case "azurerm:index/nginxCertificate:NginxCertificate":
                return new NginxCertificate(name, <any>undefined, { urn })
            case "azurerm:index/nginxConfiguration:NginxConfiguration":
                return new NginxConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/nginxDeployment:NginxDeployment":
                return new NginxDeployment(name, <any>undefined, { urn })
            case "azurerm:index/notificationHub:NotificationHub":
                return new NotificationHub(name, <any>undefined, { urn })
            case "azurerm:index/notificationHubAuthorizationRule:NotificationHubAuthorizationRule":
                return new NotificationHubAuthorizationRule(name, <any>undefined, { urn })
            case "azurerm:index/notificationHubNamespace:NotificationHubNamespace":
                return new NotificationHubNamespace(name, <any>undefined, { urn })
            case "azurerm:index/orbitalContact:OrbitalContact":
                return new OrbitalContact(name, <any>undefined, { urn })
            case "azurerm:index/orbitalContactProfile:OrbitalContactProfile":
                return new OrbitalContactProfile(name, <any>undefined, { urn })
            case "azurerm:index/orbitalSpacecraft:OrbitalSpacecraft":
                return new OrbitalSpacecraft(name, <any>undefined, { urn })
            case "azurerm:index/orchestratedVirtualMachineScaleSet:OrchestratedVirtualMachineScaleSet":
                return new OrchestratedVirtualMachineScaleSet(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoLocalRulestack:PaloAltoLocalRulestack":
                return new PaloAltoLocalRulestack(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoLocalRulestackCertificate:PaloAltoLocalRulestackCertificate":
                return new PaloAltoLocalRulestackCertificate(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoLocalRulestackFqdnList:PaloAltoLocalRulestackFqdnList":
                return new PaloAltoLocalRulestackFqdnList(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoLocalRulestackOutboundTrustCertificateAssociation:PaloAltoLocalRulestackOutboundTrustCertificateAssociation":
                return new PaloAltoLocalRulestackOutboundTrustCertificateAssociation(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoLocalRulestackOutboundUntrustCertificateAssociation:PaloAltoLocalRulestackOutboundUntrustCertificateAssociation":
                return new PaloAltoLocalRulestackOutboundUntrustCertificateAssociation(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoLocalRulestackPrefixList:PaloAltoLocalRulestackPrefixList":
                return new PaloAltoLocalRulestackPrefixList(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoLocalRulestackRule:PaloAltoLocalRulestackRule":
                return new PaloAltoLocalRulestackRule(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoNextGenerationFirewallVirtualHubLocalRulestack:PaloAltoNextGenerationFirewallVirtualHubLocalRulestack":
                return new PaloAltoNextGenerationFirewallVirtualHubLocalRulestack(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoNextGenerationFirewallVirtualHubPanorama:PaloAltoNextGenerationFirewallVirtualHubPanorama":
                return new PaloAltoNextGenerationFirewallVirtualHubPanorama(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoNextGenerationFirewallVirtualNetworkLocalRulestack:PaloAltoNextGenerationFirewallVirtualNetworkLocalRulestack":
                return new PaloAltoNextGenerationFirewallVirtualNetworkLocalRulestack(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoNextGenerationFirewallVirtualNetworkPanorama:PaloAltoNextGenerationFirewallVirtualNetworkPanorama":
                return new PaloAltoNextGenerationFirewallVirtualNetworkPanorama(name, <any>undefined, { urn })
            case "azurerm:index/paloAltoVirtualNetworkAppliance:PaloAltoVirtualNetworkAppliance":
                return new PaloAltoVirtualNetworkAppliance(name, <any>undefined, { urn })
            case "azurerm:index/pimActiveRoleAssignment:PimActiveRoleAssignment":
                return new PimActiveRoleAssignment(name, <any>undefined, { urn })
            case "azurerm:index/pimEligibleRoleAssignment:PimEligibleRoleAssignment":
                return new PimEligibleRoleAssignment(name, <any>undefined, { urn })
            case "azurerm:index/pointToSiteVpnGateway:PointToSiteVpnGateway":
                return new PointToSiteVpnGateway(name, <any>undefined, { urn })
            case "azurerm:index/policyDefinition:PolicyDefinition":
                return new PolicyDefinition(name, <any>undefined, { urn })
            case "azurerm:index/policySetDefinition:PolicySetDefinition":
                return new PolicySetDefinition(name, <any>undefined, { urn })
            case "azurerm:index/policyVirtualMachineConfigurationAssignment:PolicyVirtualMachineConfigurationAssignment":
                return new PolicyVirtualMachineConfigurationAssignment(name, <any>undefined, { urn })
            case "azurerm:index/portalDashboard:PortalDashboard":
                return new PortalDashboard(name, <any>undefined, { urn })
            case "azurerm:index/portalTenantConfiguration:PortalTenantConfiguration":
                return new PortalTenantConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlActiveDirectoryAdministrator:PostgresqlActiveDirectoryAdministrator":
                return new PostgresqlActiveDirectoryAdministrator(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlConfiguration:PostgresqlConfiguration":
                return new PostgresqlConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlDatabase:PostgresqlDatabase":
                return new PostgresqlDatabase(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlFirewallRule:PostgresqlFirewallRule":
                return new PostgresqlFirewallRule(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlFlexibleServer:PostgresqlFlexibleServer":
                return new PostgresqlFlexibleServer(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlFlexibleServerActiveDirectoryAdministrator:PostgresqlFlexibleServerActiveDirectoryAdministrator":
                return new PostgresqlFlexibleServerActiveDirectoryAdministrator(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlFlexibleServerConfiguration:PostgresqlFlexibleServerConfiguration":
                return new PostgresqlFlexibleServerConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlFlexibleServerDatabase:PostgresqlFlexibleServerDatabase":
                return new PostgresqlFlexibleServerDatabase(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlFlexibleServerFirewallRule:PostgresqlFlexibleServerFirewallRule":
                return new PostgresqlFlexibleServerFirewallRule(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlFlexibleServerVirtualEndpoint:PostgresqlFlexibleServerVirtualEndpoint":
                return new PostgresqlFlexibleServerVirtualEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlServer:PostgresqlServer":
                return new PostgresqlServer(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlServerKey:PostgresqlServerKey":
                return new PostgresqlServerKey(name, <any>undefined, { urn })
            case "azurerm:index/postgresqlVirtualNetworkRule:PostgresqlVirtualNetworkRule":
                return new PostgresqlVirtualNetworkRule(name, <any>undefined, { urn })
            case "azurerm:index/powerbiEmbedded:PowerbiEmbedded":
                return new PowerbiEmbedded(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsARecord:PrivateDnsARecord":
                return new PrivateDnsARecord(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsAaaaRecord:PrivateDnsAaaaRecord":
                return new PrivateDnsAaaaRecord(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsCnameRecord:PrivateDnsCnameRecord":
                return new PrivateDnsCnameRecord(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsMxRecord:PrivateDnsMxRecord":
                return new PrivateDnsMxRecord(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsPtrRecord:PrivateDnsPtrRecord":
                return new PrivateDnsPtrRecord(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsResolver:PrivateDnsResolver":
                return new PrivateDnsResolver(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsResolverDnsForwardingRuleset:PrivateDnsResolverDnsForwardingRuleset":
                return new PrivateDnsResolverDnsForwardingRuleset(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsResolverForwardingRule:PrivateDnsResolverForwardingRule":
                return new PrivateDnsResolverForwardingRule(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsResolverInboundEndpoint:PrivateDnsResolverInboundEndpoint":
                return new PrivateDnsResolverInboundEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsResolverOutboundEndpoint:PrivateDnsResolverOutboundEndpoint":
                return new PrivateDnsResolverOutboundEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsResolverVirtualNetworkLink:PrivateDnsResolverVirtualNetworkLink":
                return new PrivateDnsResolverVirtualNetworkLink(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsSrvRecord:PrivateDnsSrvRecord":
                return new PrivateDnsSrvRecord(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsTxtRecord:PrivateDnsTxtRecord":
                return new PrivateDnsTxtRecord(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsZone:PrivateDnsZone":
                return new PrivateDnsZone(name, <any>undefined, { urn })
            case "azurerm:index/privateDnsZoneVirtualNetworkLink:PrivateDnsZoneVirtualNetworkLink":
                return new PrivateDnsZoneVirtualNetworkLink(name, <any>undefined, { urn })
            case "azurerm:index/privateEndpoint:PrivateEndpoint":
                return new PrivateEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/privateEndpointApplicationSecurityGroupAssociation:PrivateEndpointApplicationSecurityGroupAssociation":
                return new PrivateEndpointApplicationSecurityGroupAssociation(name, <any>undefined, { urn })
            case "azurerm:index/privateLinkService:PrivateLinkService":
                return new PrivateLinkService(name, <any>undefined, { urn })
            case "azurerm:index/proximityPlacementGroup:ProximityPlacementGroup":
                return new ProximityPlacementGroup(name, <any>undefined, { urn })
            case "azurerm:index/publicIp:PublicIp":
                return new PublicIp(name, <any>undefined, { urn })
            case "azurerm:index/publicIpPrefix:PublicIpPrefix":
                return new PublicIpPrefix(name, <any>undefined, { urn })
            case "azurerm:index/purviewAccount:PurviewAccount":
                return new PurviewAccount(name, <any>undefined, { urn })
            case "azurerm:index/recoveryServicesVault:RecoveryServicesVault":
                return new RecoveryServicesVault(name, <any>undefined, { urn })
            case "azurerm:index/recoveryServicesVaultResourceGuardAssociation:RecoveryServicesVaultResourceGuardAssociation":
                return new RecoveryServicesVaultResourceGuardAssociation(name, <any>undefined, { urn })
            case "azurerm:index/redhatOpenshiftCluster:RedhatOpenshiftCluster":
                return new RedhatOpenshiftCluster(name, <any>undefined, { urn })
            case "azurerm:index/redisCache:RedisCache":
                return new RedisCache(name, <any>undefined, { urn })
            case "azurerm:index/redisCacheAccessPolicy:RedisCacheAccessPolicy":
                return new RedisCacheAccessPolicy(name, <any>undefined, { urn })
            case "azurerm:index/redisCacheAccessPolicyAssignment:RedisCacheAccessPolicyAssignment":
                return new RedisCacheAccessPolicyAssignment(name, <any>undefined, { urn })
            case "azurerm:index/redisEnterpriseCluster:RedisEnterpriseCluster":
                return new RedisEnterpriseCluster(name, <any>undefined, { urn })
            case "azurerm:index/redisEnterpriseDatabase:RedisEnterpriseDatabase":
                return new RedisEnterpriseDatabase(name, <any>undefined, { urn })
            case "azurerm:index/redisFirewallRule:RedisFirewallRule":
                return new RedisFirewallRule(name, <any>undefined, { urn })
            case "azurerm:index/redisLinkedServer:RedisLinkedServer":
                return new RedisLinkedServer(name, <any>undefined, { urn })
            case "azurerm:index/relayHybridConnection:RelayHybridConnection":
                return new RelayHybridConnection(name, <any>undefined, { urn })
            case "azurerm:index/relayHybridConnectionAuthorizationRule:RelayHybridConnectionAuthorizationRule":
                return new RelayHybridConnectionAuthorizationRule(name, <any>undefined, { urn })
            case "azurerm:index/relayNamespace:RelayNamespace":
                return new RelayNamespace(name, <any>undefined, { urn })
            case "azurerm:index/relayNamespaceAuthorizationRule:RelayNamespaceAuthorizationRule":
                return new RelayNamespaceAuthorizationRule(name, <any>undefined, { urn })
            case "azurerm:index/resourceDeploymentScriptAzureCli:ResourceDeploymentScriptAzureCli":
                return new ResourceDeploymentScriptAzureCli(name, <any>undefined, { urn })
            case "azurerm:index/resourceDeploymentScriptAzurePowerShell:ResourceDeploymentScriptAzurePowerShell":
                return new ResourceDeploymentScriptAzurePowerShell(name, <any>undefined, { urn })
            case "azurerm:index/resourceGroup:ResourceGroup":
                return new ResourceGroup(name, <any>undefined, { urn })
            case "azurerm:index/resourceGroupCostManagementExport:ResourceGroupCostManagementExport":
                return new ResourceGroupCostManagementExport(name, <any>undefined, { urn })
            case "azurerm:index/resourceGroupCostManagementView:ResourceGroupCostManagementView":
                return new ResourceGroupCostManagementView(name, <any>undefined, { urn })
            case "azurerm:index/resourceGroupPolicyAssignment:ResourceGroupPolicyAssignment":
                return new ResourceGroupPolicyAssignment(name, <any>undefined, { urn })
            case "azurerm:index/resourceGroupPolicyExemption:ResourceGroupPolicyExemption":
                return new ResourceGroupPolicyExemption(name, <any>undefined, { urn })
            case "azurerm:index/resourceGroupPolicyRemediation:ResourceGroupPolicyRemediation":
                return new ResourceGroupPolicyRemediation(name, <any>undefined, { urn })
            case "azurerm:index/resourceGroupTemplateDeployment:ResourceGroupTemplateDeployment":
                return new ResourceGroupTemplateDeployment(name, <any>undefined, { urn })
            case "azurerm:index/resourceManagementPrivateLink:ResourceManagementPrivateLink":
                return new ResourceManagementPrivateLink(name, <any>undefined, { urn })
            case "azurerm:index/resourceManagementPrivateLinkAssociation:ResourceManagementPrivateLinkAssociation":
                return new ResourceManagementPrivateLinkAssociation(name, <any>undefined, { urn })
            case "azurerm:index/resourcePolicyAssignment:ResourcePolicyAssignment":
                return new ResourcePolicyAssignment(name, <any>undefined, { urn })
            case "azurerm:index/resourcePolicyExemption:ResourcePolicyExemption":
                return new ResourcePolicyExemption(name, <any>undefined, { urn })
            case "azurerm:index/resourcePolicyRemediation:ResourcePolicyRemediation":
                return new ResourcePolicyRemediation(name, <any>undefined, { urn })
            case "azurerm:index/resourceProviderRegistration:ResourceProviderRegistration":
                return new ResourceProviderRegistration(name, <any>undefined, { urn })
            case "azurerm:index/restorePointCollection:RestorePointCollection":
                return new RestorePointCollection(name, <any>undefined, { urn })
            case "azurerm:index/roleAssignment:RoleAssignment":
                return new RoleAssignment(name, <any>undefined, { urn })
            case "azurerm:index/roleDefinition:RoleDefinition":
                return new RoleDefinition(name, <any>undefined, { urn })
            case "azurerm:index/roleManagementPolicy:RoleManagementPolicy":
                return new RoleManagementPolicy(name, <any>undefined, { urn })
            case "azurerm:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "azurerm:index/routeFilter:RouteFilter":
                return new RouteFilter(name, <any>undefined, { urn })
            case "azurerm:index/routeMap:RouteMap":
                return new RouteMap(name, <any>undefined, { urn })
            case "azurerm:index/routeServer:RouteServer":
                return new RouteServer(name, <any>undefined, { urn })
            case "azurerm:index/routeServerBgpConnection:RouteServerBgpConnection":
                return new RouteServerBgpConnection(name, <any>undefined, { urn })
            case "azurerm:index/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "azurerm:index/searchService:SearchService":
                return new SearchService(name, <any>undefined, { urn })
            case "azurerm:index/searchSharedPrivateLinkService:SearchSharedPrivateLinkService":
                return new SearchSharedPrivateLinkService(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterAssessment:SecurityCenterAssessment":
                return new SecurityCenterAssessment(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterAssessmentPolicy:SecurityCenterAssessmentPolicy":
                return new SecurityCenterAssessmentPolicy(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterAutoProvisioning:SecurityCenterAutoProvisioning":
                return new SecurityCenterAutoProvisioning(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterAutomation:SecurityCenterAutomation":
                return new SecurityCenterAutomation(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterContact:SecurityCenterContact":
                return new SecurityCenterContact(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterServerVulnerabilityAssessmentVirtualMachine:SecurityCenterServerVulnerabilityAssessmentVirtualMachine":
                return new SecurityCenterServerVulnerabilityAssessmentVirtualMachine(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterServerVulnerabilityAssessmentsSetting:SecurityCenterServerVulnerabilityAssessmentsSetting":
                return new SecurityCenterServerVulnerabilityAssessmentsSetting(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterSetting:SecurityCenterSetting":
                return new SecurityCenterSetting(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterStorageDefender:SecurityCenterStorageDefender":
                return new SecurityCenterStorageDefender(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterSubscriptionPricing:SecurityCenterSubscriptionPricing":
                return new SecurityCenterSubscriptionPricing(name, <any>undefined, { urn })
            case "azurerm:index/securityCenterWorkspace:SecurityCenterWorkspace":
                return new SecurityCenterWorkspace(name, <any>undefined, { urn })
            case "azurerm:index/sentinelAlertRuleAnomalyBuiltIn:SentinelAlertRuleAnomalyBuiltIn":
                return new SentinelAlertRuleAnomalyBuiltIn(name, <any>undefined, { urn })
            case "azurerm:index/sentinelAlertRuleAnomalyDuplicate:SentinelAlertRuleAnomalyDuplicate":
                return new SentinelAlertRuleAnomalyDuplicate(name, <any>undefined, { urn })
            case "azurerm:index/sentinelAlertRuleFusion:SentinelAlertRuleFusion":
                return new SentinelAlertRuleFusion(name, <any>undefined, { urn })
            case "azurerm:index/sentinelAlertRuleMachineLearningBehaviorAnalytics:SentinelAlertRuleMachineLearningBehaviorAnalytics":
                return new SentinelAlertRuleMachineLearningBehaviorAnalytics(name, <any>undefined, { urn })
            case "azurerm:index/sentinelAlertRuleMsSecurityIncident:SentinelAlertRuleMsSecurityIncident":
                return new SentinelAlertRuleMsSecurityIncident(name, <any>undefined, { urn })
            case "azurerm:index/sentinelAlertRuleNrt:SentinelAlertRuleNrt":
                return new SentinelAlertRuleNrt(name, <any>undefined, { urn })
            case "azurerm:index/sentinelAlertRuleScheduled:SentinelAlertRuleScheduled":
                return new SentinelAlertRuleScheduled(name, <any>undefined, { urn })
            case "azurerm:index/sentinelAlertRuleThreatIntelligence:SentinelAlertRuleThreatIntelligence":
                return new SentinelAlertRuleThreatIntelligence(name, <any>undefined, { urn })
            case "azurerm:index/sentinelAutomationRule:SentinelAutomationRule":
                return new SentinelAutomationRule(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorAwsCloudTrail:SentinelDataConnectorAwsCloudTrail":
                return new SentinelDataConnectorAwsCloudTrail(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorAwsS3:SentinelDataConnectorAwsS3":
                return new SentinelDataConnectorAwsS3(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorAzureActiveDirectory:SentinelDataConnectorAzureActiveDirectory":
                return new SentinelDataConnectorAzureActiveDirectory(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorAzureAdvancedThreatProtection:SentinelDataConnectorAzureAdvancedThreatProtection":
                return new SentinelDataConnectorAzureAdvancedThreatProtection(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorAzureSecurityCenter:SentinelDataConnectorAzureSecurityCenter":
                return new SentinelDataConnectorAzureSecurityCenter(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorDynamics365:SentinelDataConnectorDynamics365":
                return new SentinelDataConnectorDynamics365(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorIot:SentinelDataConnectorIot":
                return new SentinelDataConnectorIot(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorMicrosoftCloudAppSecurity:SentinelDataConnectorMicrosoftCloudAppSecurity":
                return new SentinelDataConnectorMicrosoftCloudAppSecurity(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection:SentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection":
                return new SentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorMicrosoftThreatIntelligence:SentinelDataConnectorMicrosoftThreatIntelligence":
                return new SentinelDataConnectorMicrosoftThreatIntelligence(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorMicrosoftThreatProtection:SentinelDataConnectorMicrosoftThreatProtection":
                return new SentinelDataConnectorMicrosoftThreatProtection(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorOffice365:SentinelDataConnectorOffice365":
                return new SentinelDataConnectorOffice365(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorOffice365Project:SentinelDataConnectorOffice365Project":
                return new SentinelDataConnectorOffice365Project(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorOfficeAtp:SentinelDataConnectorOfficeAtp":
                return new SentinelDataConnectorOfficeAtp(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorOfficeIrm:SentinelDataConnectorOfficeIrm":
                return new SentinelDataConnectorOfficeIrm(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorOfficePowerBi:SentinelDataConnectorOfficePowerBi":
                return new SentinelDataConnectorOfficePowerBi(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorThreatIntelligence:SentinelDataConnectorThreatIntelligence":
                return new SentinelDataConnectorThreatIntelligence(name, <any>undefined, { urn })
            case "azurerm:index/sentinelDataConnectorThreatIntelligenceTaxii:SentinelDataConnectorThreatIntelligenceTaxii":
                return new SentinelDataConnectorThreatIntelligenceTaxii(name, <any>undefined, { urn })
            case "azurerm:index/sentinelLogAnalyticsWorkspaceOnboarding:SentinelLogAnalyticsWorkspaceOnboarding":
                return new SentinelLogAnalyticsWorkspaceOnboarding(name, <any>undefined, { urn })
            case "azurerm:index/sentinelMetadata:SentinelMetadata":
                return new SentinelMetadata(name, <any>undefined, { urn })
            case "azurerm:index/sentinelThreatIntelligenceIndicator:SentinelThreatIntelligenceIndicator":
                return new SentinelThreatIntelligenceIndicator(name, <any>undefined, { urn })
            case "azurerm:index/sentinelWatchlist:SentinelWatchlist":
                return new SentinelWatchlist(name, <any>undefined, { urn })
            case "azurerm:index/sentinelWatchlistItem:SentinelWatchlistItem":
                return new SentinelWatchlistItem(name, <any>undefined, { urn })
            case "azurerm:index/serviceFabricCluster:ServiceFabricCluster":
                return new ServiceFabricCluster(name, <any>undefined, { urn })
            case "azurerm:index/serviceFabricManagedCluster:ServiceFabricManagedCluster":
                return new ServiceFabricManagedCluster(name, <any>undefined, { urn })
            case "azurerm:index/servicePlan:ServicePlan":
                return new ServicePlan(name, <any>undefined, { urn })
            case "azurerm:index/servicebusNamespace:ServicebusNamespace":
                return new ServicebusNamespace(name, <any>undefined, { urn })
            case "azurerm:index/servicebusNamespaceAuthorizationRule:ServicebusNamespaceAuthorizationRule":
                return new ServicebusNamespaceAuthorizationRule(name, <any>undefined, { urn })
            case "azurerm:index/servicebusNamespaceDisasterRecoveryConfig:ServicebusNamespaceDisasterRecoveryConfig":
                return new ServicebusNamespaceDisasterRecoveryConfig(name, <any>undefined, { urn })
            case "azurerm:index/servicebusQueue:ServicebusQueue":
                return new ServicebusQueue(name, <any>undefined, { urn })
            case "azurerm:index/servicebusQueueAuthorizationRule:ServicebusQueueAuthorizationRule":
                return new ServicebusQueueAuthorizationRule(name, <any>undefined, { urn })
            case "azurerm:index/servicebusSubscription:ServicebusSubscription":
                return new ServicebusSubscription(name, <any>undefined, { urn })
            case "azurerm:index/servicebusSubscriptionRule:ServicebusSubscriptionRule":
                return new ServicebusSubscriptionRule(name, <any>undefined, { urn })
            case "azurerm:index/servicebusTopic:ServicebusTopic":
                return new ServicebusTopic(name, <any>undefined, { urn })
            case "azurerm:index/servicebusTopicAuthorizationRule:ServicebusTopicAuthorizationRule":
                return new ServicebusTopicAuthorizationRule(name, <any>undefined, { urn })
            case "azurerm:index/sharedImage:SharedImage":
                return new SharedImage(name, <any>undefined, { urn })
            case "azurerm:index/sharedImageGallery:SharedImageGallery":
                return new SharedImageGallery(name, <any>undefined, { urn })
            case "azurerm:index/sharedImageVersion:SharedImageVersion":
                return new SharedImageVersion(name, <any>undefined, { urn })
            case "azurerm:index/signalrService:SignalrService":
                return new SignalrService(name, <any>undefined, { urn })
            case "azurerm:index/signalrServiceCustomCertificate:SignalrServiceCustomCertificate":
                return new SignalrServiceCustomCertificate(name, <any>undefined, { urn })
            case "azurerm:index/signalrServiceCustomDomain:SignalrServiceCustomDomain":
                return new SignalrServiceCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/signalrServiceNetworkAcl:SignalrServiceNetworkAcl":
                return new SignalrServiceNetworkAcl(name, <any>undefined, { urn })
            case "azurerm:index/signalrSharedPrivateLinkResource:SignalrSharedPrivateLinkResource":
                return new SignalrSharedPrivateLinkResource(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryFabric:SiteRecoveryFabric":
                return new SiteRecoveryFabric(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryHypervNetworkMapping:SiteRecoveryHypervNetworkMapping":
                return new SiteRecoveryHypervNetworkMapping(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryHypervReplicationPolicy:SiteRecoveryHypervReplicationPolicy":
                return new SiteRecoveryHypervReplicationPolicy(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryHypervReplicationPolicyAssociation:SiteRecoveryHypervReplicationPolicyAssociation":
                return new SiteRecoveryHypervReplicationPolicyAssociation(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryNetworkMapping:SiteRecoveryNetworkMapping":
                return new SiteRecoveryNetworkMapping(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryProtectionContainer:SiteRecoveryProtectionContainer":
                return new SiteRecoveryProtectionContainer(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryProtectionContainerMapping:SiteRecoveryProtectionContainerMapping":
                return new SiteRecoveryProtectionContainerMapping(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryReplicatedVm:SiteRecoveryReplicatedVm":
                return new SiteRecoveryReplicatedVm(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryReplicationPolicy:SiteRecoveryReplicationPolicy":
                return new SiteRecoveryReplicationPolicy(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryReplicationRecoveryPlan:SiteRecoveryReplicationRecoveryPlan":
                return new SiteRecoveryReplicationRecoveryPlan(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryServicesVaultHypervSite:SiteRecoveryServicesVaultHypervSite":
                return new SiteRecoveryServicesVaultHypervSite(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryVmwareReplicatedVm:SiteRecoveryVmwareReplicatedVm":
                return new SiteRecoveryVmwareReplicatedVm(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryVmwareReplicationPolicy:SiteRecoveryVmwareReplicationPolicy":
                return new SiteRecoveryVmwareReplicationPolicy(name, <any>undefined, { urn })
            case "azurerm:index/siteRecoveryVmwareReplicationPolicyAssociation:SiteRecoveryVmwareReplicationPolicyAssociation":
                return new SiteRecoveryVmwareReplicationPolicyAssociation(name, <any>undefined, { urn })
            case "azurerm:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "azurerm:index/sourceControlToken:SourceControlToken":
                return new SourceControlToken(name, <any>undefined, { urn })
            case "azurerm:index/spatialAnchorsAccount:SpatialAnchorsAccount":
                return new SpatialAnchorsAccount(name, <any>undefined, { urn })
            case "azurerm:index/springCloudAccelerator:SpringCloudAccelerator":
                return new SpringCloudAccelerator(name, <any>undefined, { urn })
            case "azurerm:index/springCloudActiveDeployment:SpringCloudActiveDeployment":
                return new SpringCloudActiveDeployment(name, <any>undefined, { urn })
            case "azurerm:index/springCloudApiPortal:SpringCloudApiPortal":
                return new SpringCloudApiPortal(name, <any>undefined, { urn })
            case "azurerm:index/springCloudApiPortalCustomDomain:SpringCloudApiPortalCustomDomain":
                return new SpringCloudApiPortalCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/springCloudApp:SpringCloudApp":
                return new SpringCloudApp(name, <any>undefined, { urn })
            case "azurerm:index/springCloudAppCosmosdbAssociation:SpringCloudAppCosmosdbAssociation":
                return new SpringCloudAppCosmosdbAssociation(name, <any>undefined, { urn })
            case "azurerm:index/springCloudAppDynamicsApplicationPerformanceMonitoring:SpringCloudAppDynamicsApplicationPerformanceMonitoring":
                return new SpringCloudAppDynamicsApplicationPerformanceMonitoring(name, <any>undefined, { urn })
            case "azurerm:index/springCloudAppMysqlAssociation:SpringCloudAppMysqlAssociation":
                return new SpringCloudAppMysqlAssociation(name, <any>undefined, { urn })
            case "azurerm:index/springCloudAppRedisAssociation:SpringCloudAppRedisAssociation":
                return new SpringCloudAppRedisAssociation(name, <any>undefined, { urn })
            case "azurerm:index/springCloudApplicationInsightsApplicationPerformanceMonitoring:SpringCloudApplicationInsightsApplicationPerformanceMonitoring":
                return new SpringCloudApplicationInsightsApplicationPerformanceMonitoring(name, <any>undefined, { urn })
            case "azurerm:index/springCloudApplicationLiveView:SpringCloudApplicationLiveView":
                return new SpringCloudApplicationLiveView(name, <any>undefined, { urn })
            case "azurerm:index/springCloudBuildDeployment:SpringCloudBuildDeployment":
                return new SpringCloudBuildDeployment(name, <any>undefined, { urn })
            case "azurerm:index/springCloudBuildPackBinding:SpringCloudBuildPackBinding":
                return new SpringCloudBuildPackBinding(name, <any>undefined, { urn })
            case "azurerm:index/springCloudBuilder:SpringCloudBuilder":
                return new SpringCloudBuilder(name, <any>undefined, { urn })
            case "azurerm:index/springCloudCertificate:SpringCloudCertificate":
                return new SpringCloudCertificate(name, <any>undefined, { urn })
            case "azurerm:index/springCloudConfigurationService:SpringCloudConfigurationService":
                return new SpringCloudConfigurationService(name, <any>undefined, { urn })
            case "azurerm:index/springCloudConnection:SpringCloudConnection":
                return new SpringCloudConnection(name, <any>undefined, { urn })
            case "azurerm:index/springCloudContainerDeployment:SpringCloudContainerDeployment":
                return new SpringCloudContainerDeployment(name, <any>undefined, { urn })
            case "azurerm:index/springCloudCustomDomain:SpringCloudCustomDomain":
                return new SpringCloudCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/springCloudCustomizedAccelerator:SpringCloudCustomizedAccelerator":
                return new SpringCloudCustomizedAccelerator(name, <any>undefined, { urn })
            case "azurerm:index/springCloudDevToolPortal:SpringCloudDevToolPortal":
                return new SpringCloudDevToolPortal(name, <any>undefined, { urn })
            case "azurerm:index/springCloudDynatraceApplicationPerformanceMonitoring:SpringCloudDynatraceApplicationPerformanceMonitoring":
                return new SpringCloudDynatraceApplicationPerformanceMonitoring(name, <any>undefined, { urn })
            case "azurerm:index/springCloudElasticApplicationPerformanceMonitoring:SpringCloudElasticApplicationPerformanceMonitoring":
                return new SpringCloudElasticApplicationPerformanceMonitoring(name, <any>undefined, { urn })
            case "azurerm:index/springCloudGateway:SpringCloudGateway":
                return new SpringCloudGateway(name, <any>undefined, { urn })
            case "azurerm:index/springCloudGatewayCustomDomain:SpringCloudGatewayCustomDomain":
                return new SpringCloudGatewayCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/springCloudGatewayRouteConfig:SpringCloudGatewayRouteConfig":
                return new SpringCloudGatewayRouteConfig(name, <any>undefined, { urn })
            case "azurerm:index/springCloudJavaDeployment:SpringCloudJavaDeployment":
                return new SpringCloudJavaDeployment(name, <any>undefined, { urn })
            case "azurerm:index/springCloudNewRelicApplicationPerformanceMonitoring:SpringCloudNewRelicApplicationPerformanceMonitoring":
                return new SpringCloudNewRelicApplicationPerformanceMonitoring(name, <any>undefined, { urn })
            case "azurerm:index/springCloudService:SpringCloudService":
                return new SpringCloudService(name, <any>undefined, { urn })
            case "azurerm:index/springCloudStorage:SpringCloudStorage":
                return new SpringCloudStorage(name, <any>undefined, { urn })
            case "azurerm:index/sshPublicKey:SshPublicKey":
                return new SshPublicKey(name, <any>undefined, { urn })
            case "azurerm:index/stackHciCluster:StackHciCluster":
                return new StackHciCluster(name, <any>undefined, { urn })
            case "azurerm:index/stackHciLogicalNetwork:StackHciLogicalNetwork":
                return new StackHciLogicalNetwork(name, <any>undefined, { urn })
            case "azurerm:index/staticSite:StaticSite":
                return new StaticSite(name, <any>undefined, { urn })
            case "azurerm:index/staticSiteCustomDomain:StaticSiteCustomDomain":
                return new StaticSiteCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/staticWebApp:StaticWebApp":
                return new StaticWebApp(name, <any>undefined, { urn })
            case "azurerm:index/staticWebAppCustomDomain:StaticWebAppCustomDomain":
                return new StaticWebAppCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/staticWebAppFunctionAppRegistration:StaticWebAppFunctionAppRegistration":
                return new StaticWebAppFunctionAppRegistration(name, <any>undefined, { urn })
            case "azurerm:index/storageAccount:StorageAccount":
                return new StorageAccount(name, <any>undefined, { urn })
            case "azurerm:index/storageAccountCustomerManagedKey:StorageAccountCustomerManagedKey":
                return new StorageAccountCustomerManagedKey(name, <any>undefined, { urn })
            case "azurerm:index/storageAccountLocalUser:StorageAccountLocalUser":
                return new StorageAccountLocalUser(name, <any>undefined, { urn })
            case "azurerm:index/storageAccountNetworkRules:StorageAccountNetworkRules":
                return new StorageAccountNetworkRules(name, <any>undefined, { urn })
            case "azurerm:index/storageBlob:StorageBlob":
                return new StorageBlob(name, <any>undefined, { urn })
            case "azurerm:index/storageBlobInventoryPolicy:StorageBlobInventoryPolicy":
                return new StorageBlobInventoryPolicy(name, <any>undefined, { urn })
            case "azurerm:index/storageContainer:StorageContainer":
                return new StorageContainer(name, <any>undefined, { urn })
            case "azurerm:index/storageContainerImmutabilityPolicy:StorageContainerImmutabilityPolicy":
                return new StorageContainerImmutabilityPolicy(name, <any>undefined, { urn })
            case "azurerm:index/storageDataLakeGen2Filesystem:StorageDataLakeGen2Filesystem":
                return new StorageDataLakeGen2Filesystem(name, <any>undefined, { urn })
            case "azurerm:index/storageDataLakeGen2Path:StorageDataLakeGen2Path":
                return new StorageDataLakeGen2Path(name, <any>undefined, { urn })
            case "azurerm:index/storageEncryptionScope:StorageEncryptionScope":
                return new StorageEncryptionScope(name, <any>undefined, { urn })
            case "azurerm:index/storageManagementPolicy:StorageManagementPolicy":
                return new StorageManagementPolicy(name, <any>undefined, { urn })
            case "azurerm:index/storageMover:StorageMover":
                return new StorageMover(name, <any>undefined, { urn })
            case "azurerm:index/storageMoverAgent:StorageMoverAgent":
                return new StorageMoverAgent(name, <any>undefined, { urn })
            case "azurerm:index/storageMoverJobDefinition:StorageMoverJobDefinition":
                return new StorageMoverJobDefinition(name, <any>undefined, { urn })
            case "azurerm:index/storageMoverProject:StorageMoverProject":
                return new StorageMoverProject(name, <any>undefined, { urn })
            case "azurerm:index/storageMoverSourceEndpoint:StorageMoverSourceEndpoint":
                return new StorageMoverSourceEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/storageMoverTargetEndpoint:StorageMoverTargetEndpoint":
                return new StorageMoverTargetEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/storageObjectReplication:StorageObjectReplication":
                return new StorageObjectReplication(name, <any>undefined, { urn })
            case "azurerm:index/storageQueue:StorageQueue":
                return new StorageQueue(name, <any>undefined, { urn })
            case "azurerm:index/storageShare:StorageShare":
                return new StorageShare(name, <any>undefined, { urn })
            case "azurerm:index/storageShareDirectory:StorageShareDirectory":
                return new StorageShareDirectory(name, <any>undefined, { urn })
            case "azurerm:index/storageShareFile:StorageShareFile":
                return new StorageShareFile(name, <any>undefined, { urn })
            case "azurerm:index/storageSync:StorageSync":
                return new StorageSync(name, <any>undefined, { urn })
            case "azurerm:index/storageSyncCloudEndpoint:StorageSyncCloudEndpoint":
                return new StorageSyncCloudEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/storageSyncGroup:StorageSyncGroup":
                return new StorageSyncGroup(name, <any>undefined, { urn })
            case "azurerm:index/storageSyncServerEndpoint:StorageSyncServerEndpoint":
                return new StorageSyncServerEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/storageTable:StorageTable":
                return new StorageTable(name, <any>undefined, { urn })
            case "azurerm:index/storageTableEntity:StorageTableEntity":
                return new StorageTableEntity(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsCluster:StreamAnalyticsCluster":
                return new StreamAnalyticsCluster(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsFunctionJavascriptUda:StreamAnalyticsFunctionJavascriptUda":
                return new StreamAnalyticsFunctionJavascriptUda(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsFunctionJavascriptUdf:StreamAnalyticsFunctionJavascriptUdf":
                return new StreamAnalyticsFunctionJavascriptUdf(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsJob:StreamAnalyticsJob":
                return new StreamAnalyticsJob(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsJobSchedule:StreamAnalyticsJobSchedule":
                return new StreamAnalyticsJobSchedule(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsManagedPrivateEndpoint:StreamAnalyticsManagedPrivateEndpoint":
                return new StreamAnalyticsManagedPrivateEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsOutputBlob:StreamAnalyticsOutputBlob":
                return new StreamAnalyticsOutputBlob(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsOutputCosmosdb:StreamAnalyticsOutputCosmosdb":
                return new StreamAnalyticsOutputCosmosdb(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsOutputEventhub:StreamAnalyticsOutputEventhub":
                return new StreamAnalyticsOutputEventhub(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsOutputFunction:StreamAnalyticsOutputFunction":
                return new StreamAnalyticsOutputFunction(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsOutputMssql:StreamAnalyticsOutputMssql":
                return new StreamAnalyticsOutputMssql(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsOutputPowerbi:StreamAnalyticsOutputPowerbi":
                return new StreamAnalyticsOutputPowerbi(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsOutputServicebusQueue:StreamAnalyticsOutputServicebusQueue":
                return new StreamAnalyticsOutputServicebusQueue(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsOutputServicebusTopic:StreamAnalyticsOutputServicebusTopic":
                return new StreamAnalyticsOutputServicebusTopic(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsOutputSynapse:StreamAnalyticsOutputSynapse":
                return new StreamAnalyticsOutputSynapse(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsOutputTable:StreamAnalyticsOutputTable":
                return new StreamAnalyticsOutputTable(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsReferenceInputBlob:StreamAnalyticsReferenceInputBlob":
                return new StreamAnalyticsReferenceInputBlob(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsReferenceInputMssql:StreamAnalyticsReferenceInputMssql":
                return new StreamAnalyticsReferenceInputMssql(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsStreamInputBlob:StreamAnalyticsStreamInputBlob":
                return new StreamAnalyticsStreamInputBlob(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsStreamInputEventhub:StreamAnalyticsStreamInputEventhub":
                return new StreamAnalyticsStreamInputEventhub(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsStreamInputEventhubV2:StreamAnalyticsStreamInputEventhubV2":
                return new StreamAnalyticsStreamInputEventhubV2(name, <any>undefined, { urn })
            case "azurerm:index/streamAnalyticsStreamInputIothub:StreamAnalyticsStreamInputIothub":
                return new StreamAnalyticsStreamInputIothub(name, <any>undefined, { urn })
            case "azurerm:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "azurerm:index/subnetNatGatewayAssociation:SubnetNatGatewayAssociation":
                return new SubnetNatGatewayAssociation(name, <any>undefined, { urn })
            case "azurerm:index/subnetNetworkSecurityGroupAssociation:SubnetNetworkSecurityGroupAssociation":
                return new SubnetNetworkSecurityGroupAssociation(name, <any>undefined, { urn })
            case "azurerm:index/subnetRouteTableAssociation:SubnetRouteTableAssociation":
                return new SubnetRouteTableAssociation(name, <any>undefined, { urn })
            case "azurerm:index/subnetServiceEndpointStoragePolicy:SubnetServiceEndpointStoragePolicy":
                return new SubnetServiceEndpointStoragePolicy(name, <any>undefined, { urn })
            case "azurerm:index/subscription:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            case "azurerm:index/subscriptionCostManagementExport:SubscriptionCostManagementExport":
                return new SubscriptionCostManagementExport(name, <any>undefined, { urn })
            case "azurerm:index/subscriptionCostManagementView:SubscriptionCostManagementView":
                return new SubscriptionCostManagementView(name, <any>undefined, { urn })
            case "azurerm:index/subscriptionPolicyAssignment:SubscriptionPolicyAssignment":
                return new SubscriptionPolicyAssignment(name, <any>undefined, { urn })
            case "azurerm:index/subscriptionPolicyExemption:SubscriptionPolicyExemption":
                return new SubscriptionPolicyExemption(name, <any>undefined, { urn })
            case "azurerm:index/subscriptionPolicyRemediation:SubscriptionPolicyRemediation":
                return new SubscriptionPolicyRemediation(name, <any>undefined, { urn })
            case "azurerm:index/subscriptionTemplateDeployment:SubscriptionTemplateDeployment":
                return new SubscriptionTemplateDeployment(name, <any>undefined, { urn })
            case "azurerm:index/synapseFirewallRule:SynapseFirewallRule":
                return new SynapseFirewallRule(name, <any>undefined, { urn })
            case "azurerm:index/synapseIntegrationRuntimeAzure:SynapseIntegrationRuntimeAzure":
                return new SynapseIntegrationRuntimeAzure(name, <any>undefined, { urn })
            case "azurerm:index/synapseIntegrationRuntimeSelfHosted:SynapseIntegrationRuntimeSelfHosted":
                return new SynapseIntegrationRuntimeSelfHosted(name, <any>undefined, { urn })
            case "azurerm:index/synapseLinkedService:SynapseLinkedService":
                return new SynapseLinkedService(name, <any>undefined, { urn })
            case "azurerm:index/synapseManagedPrivateEndpoint:SynapseManagedPrivateEndpoint":
                return new SynapseManagedPrivateEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/synapsePrivateLinkHub:SynapsePrivateLinkHub":
                return new SynapsePrivateLinkHub(name, <any>undefined, { urn })
            case "azurerm:index/synapseRoleAssignment:SynapseRoleAssignment":
                return new SynapseRoleAssignment(name, <any>undefined, { urn })
            case "azurerm:index/synapseSparkPool:SynapseSparkPool":
                return new SynapseSparkPool(name, <any>undefined, { urn })
            case "azurerm:index/synapseSqlPool:SynapseSqlPool":
                return new SynapseSqlPool(name, <any>undefined, { urn })
            case "azurerm:index/synapseSqlPoolExtendedAuditingPolicy:SynapseSqlPoolExtendedAuditingPolicy":
                return new SynapseSqlPoolExtendedAuditingPolicy(name, <any>undefined, { urn })
            case "azurerm:index/synapseSqlPoolSecurityAlertPolicy:SynapseSqlPoolSecurityAlertPolicy":
                return new SynapseSqlPoolSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azurerm:index/synapseSqlPoolVulnerabilityAssessment:SynapseSqlPoolVulnerabilityAssessment":
                return new SynapseSqlPoolVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azurerm:index/synapseSqlPoolVulnerabilityAssessmentBaseline:SynapseSqlPoolVulnerabilityAssessmentBaseline":
                return new SynapseSqlPoolVulnerabilityAssessmentBaseline(name, <any>undefined, { urn })
            case "azurerm:index/synapseSqlPoolWorkloadClassifier:SynapseSqlPoolWorkloadClassifier":
                return new SynapseSqlPoolWorkloadClassifier(name, <any>undefined, { urn })
            case "azurerm:index/synapseSqlPoolWorkloadGroup:SynapseSqlPoolWorkloadGroup":
                return new SynapseSqlPoolWorkloadGroup(name, <any>undefined, { urn })
            case "azurerm:index/synapseWorkspace:SynapseWorkspace":
                return new SynapseWorkspace(name, <any>undefined, { urn })
            case "azurerm:index/synapseWorkspaceAadAdmin:SynapseWorkspaceAadAdmin":
                return new SynapseWorkspaceAadAdmin(name, <any>undefined, { urn })
            case "azurerm:index/synapseWorkspaceExtendedAuditingPolicy:SynapseWorkspaceExtendedAuditingPolicy":
                return new SynapseWorkspaceExtendedAuditingPolicy(name, <any>undefined, { urn })
            case "azurerm:index/synapseWorkspaceKey:SynapseWorkspaceKey":
                return new SynapseWorkspaceKey(name, <any>undefined, { urn })
            case "azurerm:index/synapseWorkspaceSecurityAlertPolicy:SynapseWorkspaceSecurityAlertPolicy":
                return new SynapseWorkspaceSecurityAlertPolicy(name, <any>undefined, { urn })
            case "azurerm:index/synapseWorkspaceSqlAadAdmin:SynapseWorkspaceSqlAadAdmin":
                return new SynapseWorkspaceSqlAadAdmin(name, <any>undefined, { urn })
            case "azurerm:index/synapseWorkspaceVulnerabilityAssessment:SynapseWorkspaceVulnerabilityAssessment":
                return new SynapseWorkspaceVulnerabilityAssessment(name, <any>undefined, { urn })
            case "azurerm:index/systemCenterVirtualMachineManagerAvailabilitySet:SystemCenterVirtualMachineManagerAvailabilitySet":
                return new SystemCenterVirtualMachineManagerAvailabilitySet(name, <any>undefined, { urn })
            case "azurerm:index/systemCenterVirtualMachineManagerCloud:SystemCenterVirtualMachineManagerCloud":
                return new SystemCenterVirtualMachineManagerCloud(name, <any>undefined, { urn })
            case "azurerm:index/systemCenterVirtualMachineManagerServer:SystemCenterVirtualMachineManagerServer":
                return new SystemCenterVirtualMachineManagerServer(name, <any>undefined, { urn })
            case "azurerm:index/systemCenterVirtualMachineManagerVirtualMachineTemplate:SystemCenterVirtualMachineManagerVirtualMachineTemplate":
                return new SystemCenterVirtualMachineManagerVirtualMachineTemplate(name, <any>undefined, { urn })
            case "azurerm:index/systemCenterVirtualMachineManagerVirtualNetwork:SystemCenterVirtualMachineManagerVirtualNetwork":
                return new SystemCenterVirtualMachineManagerVirtualNetwork(name, <any>undefined, { urn })
            case "azurerm:index/tenantTemplateDeployment:TenantTemplateDeployment":
                return new TenantTemplateDeployment(name, <any>undefined, { urn })
            case "azurerm:index/trafficManagerAzureEndpoint:TrafficManagerAzureEndpoint":
                return new TrafficManagerAzureEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/trafficManagerExternalEndpoint:TrafficManagerExternalEndpoint":
                return new TrafficManagerExternalEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/trafficManagerNestedEndpoint:TrafficManagerNestedEndpoint":
                return new TrafficManagerNestedEndpoint(name, <any>undefined, { urn })
            case "azurerm:index/trafficManagerProfile:TrafficManagerProfile":
                return new TrafficManagerProfile(name, <any>undefined, { urn })
            case "azurerm:index/userAssignedIdentity:UserAssignedIdentity":
                return new UserAssignedIdentity(name, <any>undefined, { urn })
            case "azurerm:index/virtualDesktopApplication:VirtualDesktopApplication":
                return new VirtualDesktopApplication(name, <any>undefined, { urn })
            case "azurerm:index/virtualDesktopApplicationGroup:VirtualDesktopApplicationGroup":
                return new VirtualDesktopApplicationGroup(name, <any>undefined, { urn })
            case "azurerm:index/virtualDesktopHostPool:VirtualDesktopHostPool":
                return new VirtualDesktopHostPool(name, <any>undefined, { urn })
            case "azurerm:index/virtualDesktopHostPoolRegistrationInfo:VirtualDesktopHostPoolRegistrationInfo":
                return new VirtualDesktopHostPoolRegistrationInfo(name, <any>undefined, { urn })
            case "azurerm:index/virtualDesktopScalingPlan:VirtualDesktopScalingPlan":
                return new VirtualDesktopScalingPlan(name, <any>undefined, { urn })
            case "azurerm:index/virtualDesktopScalingPlanHostPoolAssociation:VirtualDesktopScalingPlanHostPoolAssociation":
                return new VirtualDesktopScalingPlanHostPoolAssociation(name, <any>undefined, { urn })
            case "azurerm:index/virtualDesktopWorkspace:VirtualDesktopWorkspace":
                return new VirtualDesktopWorkspace(name, <any>undefined, { urn })
            case "azurerm:index/virtualDesktopWorkspaceApplicationGroupAssociation:VirtualDesktopWorkspaceApplicationGroupAssociation":
                return new VirtualDesktopWorkspaceApplicationGroupAssociation(name, <any>undefined, { urn })
            case "azurerm:index/virtualHub:VirtualHub":
                return new VirtualHub(name, <any>undefined, { urn })
            case "azurerm:index/virtualHubBgpConnection:VirtualHubBgpConnection":
                return new VirtualHubBgpConnection(name, <any>undefined, { urn })
            case "azurerm:index/virtualHubConnection:VirtualHubConnection":
                return new VirtualHubConnection(name, <any>undefined, { urn })
            case "azurerm:index/virtualHubIp:VirtualHubIp":
                return new VirtualHubIp(name, <any>undefined, { urn })
            case "azurerm:index/virtualHubRouteTable:VirtualHubRouteTable":
                return new VirtualHubRouteTable(name, <any>undefined, { urn })
            case "azurerm:index/virtualHubRouteTableRoute:VirtualHubRouteTableRoute":
                return new VirtualHubRouteTableRoute(name, <any>undefined, { urn })
            case "azurerm:index/virtualHubRoutingIntent:VirtualHubRoutingIntent":
                return new VirtualHubRoutingIntent(name, <any>undefined, { urn })
            case "azurerm:index/virtualHubSecurityPartnerProvider:VirtualHubSecurityPartnerProvider":
                return new VirtualHubSecurityPartnerProvider(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachine:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineAutomanageConfigurationAssignment:VirtualMachineAutomanageConfigurationAssignment":
                return new VirtualMachineAutomanageConfigurationAssignment(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineDataDiskAttachment:VirtualMachineDataDiskAttachment":
                return new VirtualMachineDataDiskAttachment(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineExtension:VirtualMachineExtension":
                return new VirtualMachineExtension(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineGalleryApplicationAssignment:VirtualMachineGalleryApplicationAssignment":
                return new VirtualMachineGalleryApplicationAssignment(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineImplicitDataDiskFromSource:VirtualMachineImplicitDataDiskFromSource":
                return new VirtualMachineImplicitDataDiskFromSource(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachinePacketCapture:VirtualMachinePacketCapture":
                return new VirtualMachinePacketCapture(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineRestorePoint:VirtualMachineRestorePoint":
                return new VirtualMachineRestorePoint(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineRestorePointCollection:VirtualMachineRestorePointCollection":
                return new VirtualMachineRestorePointCollection(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineRunCommand:VirtualMachineRunCommand":
                return new VirtualMachineRunCommand(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineScaleSet:VirtualMachineScaleSet":
                return new VirtualMachineScaleSet(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineScaleSetExtension:VirtualMachineScaleSetExtension":
                return new VirtualMachineScaleSetExtension(name, <any>undefined, { urn })
            case "azurerm:index/virtualMachineScaleSetPacketCapture:VirtualMachineScaleSetPacketCapture":
                return new VirtualMachineScaleSetPacketCapture(name, <any>undefined, { urn })
            case "azurerm:index/virtualNetwork:VirtualNetwork":
                return new VirtualNetwork(name, <any>undefined, { urn })
            case "azurerm:index/virtualNetworkDnsServers:VirtualNetworkDnsServers":
                return new VirtualNetworkDnsServers(name, <any>undefined, { urn })
            case "azurerm:index/virtualNetworkGateway:VirtualNetworkGateway":
                return new VirtualNetworkGateway(name, <any>undefined, { urn })
            case "azurerm:index/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection":
                return new VirtualNetworkGatewayConnection(name, <any>undefined, { urn })
            case "azurerm:index/virtualNetworkGatewayNatRule:VirtualNetworkGatewayNatRule":
                return new VirtualNetworkGatewayNatRule(name, <any>undefined, { urn })
            case "azurerm:index/virtualNetworkPeering:VirtualNetworkPeering":
                return new VirtualNetworkPeering(name, <any>undefined, { urn })
            case "azurerm:index/virtualWan:VirtualWan":
                return new VirtualWan(name, <any>undefined, { urn })
            case "azurerm:index/vmwareCluster:VmwareCluster":
                return new VmwareCluster(name, <any>undefined, { urn })
            case "azurerm:index/vmwareExpressRouteAuthorization:VmwareExpressRouteAuthorization":
                return new VmwareExpressRouteAuthorization(name, <any>undefined, { urn })
            case "azurerm:index/vmwareNetappVolumeAttachment:VmwareNetappVolumeAttachment":
                return new VmwareNetappVolumeAttachment(name, <any>undefined, { urn })
            case "azurerm:index/vmwarePrivateCloud:VmwarePrivateCloud":
                return new VmwarePrivateCloud(name, <any>undefined, { urn })
            case "azurerm:index/voiceServicesCommunicationsGateway:VoiceServicesCommunicationsGateway":
                return new VoiceServicesCommunicationsGateway(name, <any>undefined, { urn })
            case "azurerm:index/voiceServicesCommunicationsGatewayTestLine:VoiceServicesCommunicationsGatewayTestLine":
                return new VoiceServicesCommunicationsGatewayTestLine(name, <any>undefined, { urn })
            case "azurerm:index/vpnGateway:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "azurerm:index/vpnGatewayConnection:VpnGatewayConnection":
                return new VpnGatewayConnection(name, <any>undefined, { urn })
            case "azurerm:index/vpnGatewayNatRule:VpnGatewayNatRule":
                return new VpnGatewayNatRule(name, <any>undefined, { urn })
            case "azurerm:index/vpnServerConfiguration:VpnServerConfiguration":
                return new VpnServerConfiguration(name, <any>undefined, { urn })
            case "azurerm:index/vpnServerConfigurationPolicyGroup:VpnServerConfigurationPolicyGroup":
                return new VpnServerConfigurationPolicyGroup(name, <any>undefined, { urn })
            case "azurerm:index/vpnSite:VpnSite":
                return new VpnSite(name, <any>undefined, { urn })
            case "azurerm:index/webAppActiveSlot:WebAppActiveSlot":
                return new WebAppActiveSlot(name, <any>undefined, { urn })
            case "azurerm:index/webAppHybridConnection:WebAppHybridConnection":
                return new WebAppHybridConnection(name, <any>undefined, { urn })
            case "azurerm:index/webApplicationFirewallPolicy:WebApplicationFirewallPolicy":
                return new WebApplicationFirewallPolicy(name, <any>undefined, { urn })
            case "azurerm:index/webPubsub:WebPubsub":
                return new WebPubsub(name, <any>undefined, { urn })
            case "azurerm:index/webPubsubCustomCertificate:WebPubsubCustomCertificate":
                return new WebPubsubCustomCertificate(name, <any>undefined, { urn })
            case "azurerm:index/webPubsubCustomDomain:WebPubsubCustomDomain":
                return new WebPubsubCustomDomain(name, <any>undefined, { urn })
            case "azurerm:index/webPubsubHub:WebPubsubHub":
                return new WebPubsubHub(name, <any>undefined, { urn })
            case "azurerm:index/webPubsubNetworkAcl:WebPubsubNetworkAcl":
                return new WebPubsubNetworkAcl(name, <any>undefined, { urn })
            case "azurerm:index/webPubsubSharedPrivateLinkResource:WebPubsubSharedPrivateLinkResource":
                return new WebPubsubSharedPrivateLinkResource(name, <any>undefined, { urn })
            case "azurerm:index/windowsFunctionApp:WindowsFunctionApp":
                return new WindowsFunctionApp(name, <any>undefined, { urn })
            case "azurerm:index/windowsFunctionAppSlot:WindowsFunctionAppSlot":
                return new WindowsFunctionAppSlot(name, <any>undefined, { urn })
            case "azurerm:index/windowsVirtualMachine:WindowsVirtualMachine":
                return new WindowsVirtualMachine(name, <any>undefined, { urn })
            case "azurerm:index/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet":
                return new WindowsVirtualMachineScaleSet(name, <any>undefined, { urn })
            case "azurerm:index/windowsWebApp:WindowsWebApp":
                return new WindowsWebApp(name, <any>undefined, { urn })
            case "azurerm:index/windowsWebAppSlot:WindowsWebAppSlot":
                return new WindowsWebAppSlot(name, <any>undefined, { urn })
            case "azurerm:index/workloadsSapDiscoveryVirtualInstance:WorkloadsSapDiscoveryVirtualInstance":
                return new WorkloadsSapDiscoveryVirtualInstance(name, <any>undefined, { urn })
            case "azurerm:index/workloadsSapSingleNodeVirtualInstance:WorkloadsSapSingleNodeVirtualInstance":
                return new WorkloadsSapSingleNodeVirtualInstance(name, <any>undefined, { urn })
            case "azurerm:index/workloadsSapThreeTierVirtualInstance:WorkloadsSapThreeTierVirtualInstance":
                return new WorkloadsSapThreeTierVirtualInstance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azurerm", "index/aadb2cDirectory", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/activeDirectoryDomainService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/activeDirectoryDomainServiceReplicaSet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/activeDirectoryDomainServiceTrust", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/advancedThreatProtection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/aiServices", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/analysisServicesServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagement", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApi", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApiDiagnostic", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApiOperation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApiOperationPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApiOperationTag", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApiPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApiRelease", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApiSchema", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApiTag", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApiTagDescription", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementApiVersionSet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementAuthorizationServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementBackend", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementDiagnostic", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementEmailTemplate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementGatewayApi", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementGatewayCertificateAuthority", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementGatewayHostNameConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementGlobalSchema", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementGroupUser", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementIdentityProviderAad", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementIdentityProviderAadb2c", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementIdentityProviderFacebook", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementIdentityProviderGoogle", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementIdentityProviderMicrosoft", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementIdentityProviderTwitter", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementLogger", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementNamedValue", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementNotificationRecipientEmail", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementNotificationRecipientUser", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementOpenidConnectProvider", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementPolicyFragment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementProduct", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementProductApi", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementProductGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementProductPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementProductTag", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementRedisCache", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementSubscription", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementTag", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/apiManagementUser", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appConfigurationFeature", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appConfigurationKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceActiveSlot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceCertificateBinding", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceCertificateOrder", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceCustomHostnameBinding", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceEnvironmentV3", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceHybridConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceManagedCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServicePlan", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServicePublicCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceSlot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceSlotCustomHostnameBinding", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceSlotVirtualNetworkSwiftConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceSourceControl", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceSourceControlSlot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceSourceControlToken", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/appServiceVirtualNetworkSwiftConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationInsights", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationInsightsAnalyticsItem", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationInsightsApiKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationInsightsSmartDetectionRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationInsightsStandardWebTest", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationInsightsWebTest", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationInsightsWorkbook", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationInsightsWorkbookTemplate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationLoadBalancer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationLoadBalancerFrontend", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationLoadBalancerSubnetAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/applicationSecurityGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/arcKubernetesCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/arcKubernetesClusterExtension", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/arcKubernetesFluxConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/arcMachineExtension", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/arcPrivateLinkScope", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/arcResourceBridgeAppliance", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/attestationProvider", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automanageConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationConnectionCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationConnectionClassicCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationConnectionServicePrincipal", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationConnectionType", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationCredential", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationDscConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationDscNodeconfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationHybridRunbookWorker", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationHybridRunbookWorkerGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationJobSchedule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationModule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationPowershell72Module", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationPython3Package", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationRunbook", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationSchedule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationSoftwareUpdateConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationSourceControl", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationVariableBool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationVariableDatetime", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationVariableInt", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationVariableObject", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationVariableString", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationWatcher", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/automationWebhook", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/availabilitySet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/backupContainerStorageAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/backupPolicyFileShare", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/backupPolicyVm", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/backupPolicyVmWorkload", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/backupProtectedFileShare", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/backupProtectedVm", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/bastionHost", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/batchAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/batchApplication", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/batchCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/batchJob", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/batchPool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/billingAccountCostManagementExport", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/blueprintAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelAlexa", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelDirectLineSpeech", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelDirectline", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelEmail", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelFacebook", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelLine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelMsTeams", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelSlack", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelSms", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelWebChat", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botChannelsRegistration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botServiceAzureBot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/botWebApp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/capacityReservation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/capacityReservationGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnEndpointCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorCustomDomainAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorOrigin", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorOriginGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorProfile", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorRoute", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorRuleSet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorSecret", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnFrontdoorSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cdnProfile", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/chaosStudioCapability", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/chaosStudioExperiment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/chaosStudioTarget", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cognitiveAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cognitiveAccountCustomerManagedKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cognitiveDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/communicationService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/communicationServiceEmailDomainAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/confidentialLedger", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/consumptionBudgetManagementGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/consumptionBudgetResourceGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/consumptionBudgetSubscription", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerApp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerAppCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerAppEnvironment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerAppEnvironmentCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerAppEnvironmentCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerAppEnvironmentDaprComponent", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerAppEnvironmentStorage", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerAppJob", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerConnectedRegistry", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerRegistry", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerRegistryAgentPool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerRegistryCacheRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerRegistryScopeMap", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerRegistryTask", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerRegistryTaskScheduleRunNow", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerRegistryToken", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerRegistryTokenPassword", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/containerRegistryWebhook", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbCassandraCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbCassandraDatacenter", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbCassandraKeyspace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbCassandraTable", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbGremlinDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbGremlinGraph", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbMongoCollection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbMongoDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbMongoRoleDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbMongoUserDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbPostgresqlCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbPostgresqlCoordinatorConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbPostgresqlFirewallRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbPostgresqlNodeConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbPostgresqlRole", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbSqlContainer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbSqlDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbSqlDedicatedGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbSqlFunction", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbSqlRoleAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbSqlRoleDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbSqlStoredProcedure", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbSqlTrigger", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/cosmosdbTable", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/costAnomalyAlert", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/costManagementScheduledAction", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/customIpPrefix", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/customProvider", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dashboardGrafana", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactory", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryCredentialServicePrincipal", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryCredentialUserManagedIdentity", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryCustomDataset", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDataFlow", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetAzureBlob", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetAzureSqlTable", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetBinary", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetCosmosdbSqlapi", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetDelimitedText", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetHttp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetJson", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetMysql", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetParquet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetPostgresql", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetSnowflake", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryDatasetSqlServerTable", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryFlowletDataFlow", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryIntegrationRuntimeAzure", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryIntegrationRuntimeAzureSsis", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryIntegrationRuntimeSelfHosted", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedCustomService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceAzureBlobStorage", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceAzureDatabricks", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceAzureFileStorage", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceAzureFunction", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceAzureSearch", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceAzureSqlDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceAzureTableStorage", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceCosmosdb", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceCosmosdbMongoapi", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceDataLakeStorageGen2", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceKeyVault", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceKusto", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceMysql", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceOdata", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceOdbc", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServicePostgresql", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceSftp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceSnowflake", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceSqlServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceSynapse", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryLinkedServiceWeb", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryManagedPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryPipeline", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryTriggerBlobEvent", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryTriggerCustomEvent", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryTriggerSchedule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataFactoryTriggerTumblingWindow", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupInstanceBlobStorage", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupInstanceDisk", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupInstanceKubernetesCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupInstancePostgresql", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupInstancePostgresqlFlexibleServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupPolicyBlobStorage", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupPolicyDisk", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupPolicyKubernetesCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupPolicyPostgresql", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupPolicyPostgresqlFlexibleServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionBackupVault", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataProtectionResourceGuard", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataShare", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataShareAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataShareDatasetBlobStorage", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataShareDatasetDataLakeGen2", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataShareDatasetKustoCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dataShareDatasetKustoDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/databaseMigrationProject", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/databaseMigrationService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/databoxEdgeDevice", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/databricksAccessConnector", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/databricksVirtualNetworkPeering", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/databricksWorkspace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/databricksWorkspaceCustomerManagedKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/databricksWorkspaceRootDbfsCustomerManagedKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/datadogMonitor", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/datadogMonitorSsoConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/datadogMonitorTagRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dedicatedHardwareSecurityModule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dedicatedHost", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dedicatedHostGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devCenter", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devCenterCatalog", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devCenterDevBoxDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devCenterEnvironmentType", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devCenterGallery", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devCenterNetworkConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devCenterProject", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devCenterProjectEnvironmentType", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devTestGlobalVmShutdownSchedule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devTestLab", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devTestLinuxVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devTestPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devTestSchedule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devTestVirtualNetwork", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/devTestWindowsVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/digitalTwinsEndpointEventgrid", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/digitalTwinsEndpointEventhub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/digitalTwinsEndpointServicebus", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/digitalTwinsInstance", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/digitalTwinsTimeSeriesDatabaseConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/diskAccess", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/diskEncryptionSet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dnsARecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dnsAaaaRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dnsCaaRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dnsCnameRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dnsMxRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dnsNsRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dnsPtrRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dnsSrvRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dnsTxtRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/elasticCloudElasticsearch", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/elasticSan", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/elasticSanVolume", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/elasticSanVolumeGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/emailCommunicationService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/emailCommunicationServiceDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventgridDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventgridDomainTopic", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventgridEventSubscription", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventgridSystemTopic", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventgridSystemTopicEventSubscription", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventgridTopic", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventhub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventhubAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventhubCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventhubConsumerGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventhubNamespace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventhubNamespaceAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventhubNamespaceCustomerManagedKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventhubNamespaceDisasterRecoveryConfig", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/eventhubNamespaceSchemaGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/expressRouteCircuit", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/expressRouteCircuitAuthorization", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/expressRouteCircuitConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/expressRouteCircuitPeering", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/expressRouteConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/expressRouteGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/expressRoutePort", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/expressRoutePortAuthorization", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/extendedCustomLocation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/federatedIdentityCredential", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/firewall", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/firewallApplicationRuleCollection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/firewallNatRuleCollection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/firewallNetworkRuleCollection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/firewallPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/firewallPolicyRuleCollectionGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/fluidRelayServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/frontdoor", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/frontdoorCustomHttpsConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/frontdoorFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/frontdoorRulesEngine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/functionApp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/functionAppActiveSlot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/functionAppConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/functionAppFunction", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/functionAppHybridConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/functionAppSlot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/galleryApplication", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/galleryApplicationVersion", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/graphServicesAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/hdinsightHadoopCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/hdinsightHbaseCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/hdinsightInteractiveQueryCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/hdinsightKafkaCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/hdinsightSparkCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/healthbot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/healthcareDicomService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/healthcareFhirService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/healthcareMedtechService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/healthcareMedtechServiceFhirDestination", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/healthcareService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/healthcareWorkspace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/hpcCache", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/hpcCacheAccessPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/hpcCacheBlobNfsTarget", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/hpcCacheBlobTarget", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/hpcCacheNfsTarget", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/image", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iotSecurityDeviceGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iotSecuritySolution", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iotcentralApplication", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iotcentralApplicationNetworkRuleSet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iotcentralOrganization", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubConsumerGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubDeviceUpdateAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubDeviceUpdateInstance", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubDps", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubDpsCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubDpsSharedAccessPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubEndpointCosmosdbAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubEndpointEventhub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubEndpointServicebusQueue", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubEndpointServicebusTopic", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubEndpointStorageContainer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubEnrichment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubFallbackRoute", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubFileUpload", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubRoute", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/iothubSharedAccessPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/ipGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/ipGroupCidr", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVault", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultAccessPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultCertificateContacts", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultCertificateIssuer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultManagedHardwareSecurityModule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultManagedHardwareSecurityModuleKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultManagedHardwareSecurityModuleRoleAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultManagedHardwareSecurityModuleRoleDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultManagedStorageAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultManagedStorageAccountSasTokenDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/keyVaultSecret", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kubernetesClusterExtension", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kubernetesClusterNodePool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kubernetesClusterTrustedAccessRoleBinding", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kubernetesFleetManager", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kubernetesFleetMember", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kubernetesFleetUpdateRun", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kubernetesFleetUpdateStrategy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kubernetesFluxConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoAttachedDatabaseConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoClusterCustomerManagedKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoClusterManagedPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoClusterPrincipalAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoCosmosdbDataConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoDatabasePrincipalAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoEventgridDataConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoEventhubDataConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoIothubDataConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/kustoScript", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/lb", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/lbBackendAddressPool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/lbBackendAddressPoolAddress", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/lbNatPool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/lbNatRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/lbOutboundRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/lbProbe", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/lbRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/lighthouseAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/lighthouseDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/linuxFunctionApp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/linuxFunctionAppSlot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/linuxVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/linuxVirtualMachineScaleSet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/linuxWebApp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/linuxWebAppSlot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/loadTest", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/localNetworkGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsClusterCustomerManagedKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsDataExportRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsDatasourceWindowsEvent", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsDatasourceWindowsPerformanceCounter", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsLinkedService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsLinkedStorageAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsQueryPack", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsQueryPackQuery", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsSavedSearch", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsSolution", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsStorageInsights", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsWorkspace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logAnalyticsWorkspaceTable", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppActionCustom", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppActionHttp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppIntegrationAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppIntegrationAccountAgreement", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppIntegrationAccountAssembly", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppIntegrationAccountBatchConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppIntegrationAccountCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppIntegrationAccountMap", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppIntegrationAccountPartner", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppIntegrationAccountSchema", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppIntegrationAccountSession", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppStandard", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppTriggerCustom", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppTriggerHttpRequest", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppTriggerRecurrence", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/logicAppWorkflow", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/machineLearningComputeCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/machineLearningComputeInstance", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/machineLearningDatastoreBlobstorage", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/machineLearningDatastoreDatalakeGen2", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/machineLearningDatastoreFileshare", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/machineLearningInferenceCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/machineLearningSynapseSpark", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/machineLearningWorkspace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/maintenanceAssignmentDedicatedHost", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/maintenanceAssignmentDynamicScope", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/maintenanceAssignmentVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/maintenanceAssignmentVirtualMachineScaleSet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/maintenanceConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managedApplication", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managedApplicationDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managedDisk", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managedDiskSasToken", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managedLustreFileSystem", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managementGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managementGroupPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managementGroupPolicyExemption", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managementGroupPolicyRemediation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managementGroupSubscriptionAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managementGroupTemplateDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/managementLock", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mapsAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mapsCreator", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/marketplaceAgreement", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/marketplaceRoleAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mediaServicesAccountFilter", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetwork", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetworkAttachedDataNetwork", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetworkDataNetwork", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetworkPacketCoreControlPlane", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetworkPacketCoreDataPlane", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetworkService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetworkSim", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetworkSimGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetworkSimPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetworkSite", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mobileNetworkSlice", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorAadDiagnosticSetting", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorActionGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorActivityLogAlert", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorAlertProcessingRuleActionGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorAlertProcessingRuleSuppression", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorAlertPrometheusRuleGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorAutoscaleSetting", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorDataCollectionEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorDataCollectionRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorDataCollectionRuleAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorDiagnosticSetting", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorLogProfile", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorMetricAlert", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorPrivateLinkScope", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorPrivateLinkScopedService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorScheduledQueryRulesAlert", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorScheduledQueryRulesAlertV2", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorScheduledQueryRulesLog", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorSmartDetectorAlertRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/monitorWorkspace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlDatabaseExtendedAuditingPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlDatabaseVulnerabilityAssessmentRuleBaseline", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlElasticpool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlFailoverGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlFirewallRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlJobAgent", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlJobCredential", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlManagedDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlManagedInstance", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlManagedInstanceActiveDirectoryAdministrator", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlManagedInstanceFailoverGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlManagedInstanceSecurityAlertPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlManagedInstanceTransparentDataEncryption", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlManagedInstanceVulnerabilityAssessment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlOutboundFirewallRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlServerDnsAlias", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlServerExtendedAuditingPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlServerMicrosoftSupportAuditingPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlServerSecurityAlertPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlServerTransparentDataEncryption", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlServerVulnerabilityAssessment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlVirtualMachineAvailabilityGroupListener", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlVirtualMachineGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mssqlVirtualNetworkRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mysqlFlexibleDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mysqlFlexibleServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mysqlFlexibleServerActiveDirectoryAdministrator", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mysqlFlexibleServerConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/mysqlFlexibleServerFirewallRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/natGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/natGatewayPublicIpAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/natGatewayPublicIpPrefixAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/netappAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/netappAccountEncryption", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/netappPool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/netappSnapshot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/netappSnapshotPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/netappVolume", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/netappVolumeGroupSapHana", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/netappVolumeQuotaRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkConnectionMonitor", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkDdosProtectionPlan", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkFunctionAzureTrafficCollector", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkFunctionCollectorPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkInterface", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkInterfaceApplicationGatewayBackendAddressPoolAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkInterfaceApplicationSecurityGroupAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkInterfaceBackendAddressPoolAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkInterfaceNatRuleAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkInterfaceSecurityGroupAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManager", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManagerAdminRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManagerAdminRuleCollection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManagerConnectivityConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManagerDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManagerManagementGroupConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManagerNetworkGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManagerScopeConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManagerSecurityAdminConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManagerStaticMember", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkManagerSubscriptionConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkPacketCapture", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkProfile", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkSecurityGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkSecurityRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkWatcher", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/networkWatcherFlowLog", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/newRelicMonitor", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/newRelicTagRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/nginxCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/nginxConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/nginxDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/notificationHub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/notificationHubAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/notificationHubNamespace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/orbitalContact", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/orbitalContactProfile", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/orbitalSpacecraft", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/orchestratedVirtualMachineScaleSet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoLocalRulestack", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoLocalRulestackCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoLocalRulestackFqdnList", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoLocalRulestackOutboundTrustCertificateAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoLocalRulestackOutboundUntrustCertificateAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoLocalRulestackPrefixList", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoLocalRulestackRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoNextGenerationFirewallVirtualHubLocalRulestack", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoNextGenerationFirewallVirtualHubPanorama", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoNextGenerationFirewallVirtualNetworkLocalRulestack", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoNextGenerationFirewallVirtualNetworkPanorama", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/paloAltoVirtualNetworkAppliance", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/pimActiveRoleAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/pimEligibleRoleAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/pointToSiteVpnGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/policyDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/policySetDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/policyVirtualMachineConfigurationAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/portalDashboard", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/portalTenantConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlActiveDirectoryAdministrator", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlFirewallRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlFlexibleServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlFlexibleServerActiveDirectoryAdministrator", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlFlexibleServerConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlFlexibleServerDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlFlexibleServerFirewallRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlFlexibleServerVirtualEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlServerKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/postgresqlVirtualNetworkRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/powerbiEmbedded", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsARecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsAaaaRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsCnameRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsMxRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsPtrRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsResolver", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsResolverDnsForwardingRuleset", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsResolverForwardingRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsResolverInboundEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsResolverOutboundEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsResolverVirtualNetworkLink", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsSrvRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsTxtRecord", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsZone", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateDnsZoneVirtualNetworkLink", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateEndpointApplicationSecurityGroupAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/privateLinkService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/proximityPlacementGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/publicIp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/publicIpPrefix", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/purviewAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/recoveryServicesVault", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/recoveryServicesVaultResourceGuardAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/redhatOpenshiftCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/redisCache", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/redisCacheAccessPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/redisCacheAccessPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/redisEnterpriseCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/redisEnterpriseDatabase", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/redisFirewallRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/redisLinkedServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/relayHybridConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/relayHybridConnectionAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/relayNamespace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/relayNamespaceAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceDeploymentScriptAzureCli", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceDeploymentScriptAzurePowerShell", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceGroupCostManagementExport", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceGroupCostManagementView", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceGroupPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceGroupPolicyExemption", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceGroupPolicyRemediation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceGroupTemplateDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceManagementPrivateLink", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceManagementPrivateLinkAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourcePolicyAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourcePolicyExemption", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourcePolicyRemediation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/resourceProviderRegistration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/restorePointCollection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/roleAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/roleDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/roleManagementPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/route", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/routeFilter", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/routeMap", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/routeServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/routeServerBgpConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/routeTable", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/searchService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/searchSharedPrivateLinkService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterAssessment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterAssessmentPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterAutoProvisioning", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterAutomation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterContact", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterServerVulnerabilityAssessmentVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterServerVulnerabilityAssessmentsSetting", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterSetting", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterStorageDefender", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterSubscriptionPricing", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/securityCenterWorkspace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelAlertRuleAnomalyBuiltIn", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelAlertRuleAnomalyDuplicate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelAlertRuleFusion", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelAlertRuleMachineLearningBehaviorAnalytics", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelAlertRuleMsSecurityIncident", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelAlertRuleNrt", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelAlertRuleScheduled", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelAlertRuleThreatIntelligence", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelAutomationRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorAwsCloudTrail", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorAwsS3", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorAzureActiveDirectory", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorAzureAdvancedThreatProtection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorAzureSecurityCenter", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorDynamics365", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorIot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorMicrosoftCloudAppSecurity", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorMicrosoftDefenderAdvancedThreatProtection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorMicrosoftThreatIntelligence", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorMicrosoftThreatProtection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorOffice365", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorOffice365Project", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorOfficeAtp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorOfficeIrm", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorOfficePowerBi", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorThreatIntelligence", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelDataConnectorThreatIntelligenceTaxii", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelLogAnalyticsWorkspaceOnboarding", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelMetadata", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelThreatIntelligenceIndicator", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelWatchlist", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sentinelWatchlistItem", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/serviceFabricCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/serviceFabricManagedCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/servicePlan", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/servicebusNamespace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/servicebusNamespaceAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/servicebusNamespaceDisasterRecoveryConfig", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/servicebusQueue", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/servicebusQueueAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/servicebusSubscription", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/servicebusSubscriptionRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/servicebusTopic", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/servicebusTopicAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sharedImage", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sharedImageGallery", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sharedImageVersion", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/signalrService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/signalrServiceCustomCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/signalrServiceCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/signalrServiceNetworkAcl", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/signalrSharedPrivateLinkResource", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryFabric", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryHypervNetworkMapping", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryHypervReplicationPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryHypervReplicationPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryNetworkMapping", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryProtectionContainer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryProtectionContainerMapping", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryReplicatedVm", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryReplicationPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryReplicationRecoveryPlan", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryServicesVaultHypervSite", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryVmwareReplicatedVm", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryVmwareReplicationPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/siteRecoveryVmwareReplicationPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sourceControlToken", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/spatialAnchorsAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudAccelerator", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudActiveDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudApiPortal", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudApiPortalCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudApp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudAppCosmosdbAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudAppDynamicsApplicationPerformanceMonitoring", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudAppMysqlAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudAppRedisAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudApplicationInsightsApplicationPerformanceMonitoring", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudApplicationLiveView", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudBuildDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudBuildPackBinding", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudBuilder", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudConfigurationService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudContainerDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudCustomizedAccelerator", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudDevToolPortal", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudDynatraceApplicationPerformanceMonitoring", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudElasticApplicationPerformanceMonitoring", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudGatewayCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudGatewayRouteConfig", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudJavaDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudNewRelicApplicationPerformanceMonitoring", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/springCloudStorage", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/sshPublicKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/stackHciCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/stackHciLogicalNetwork", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/staticSite", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/staticSiteCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/staticWebApp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/staticWebAppCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/staticWebAppFunctionAppRegistration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageAccount", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageAccountCustomerManagedKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageAccountLocalUser", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageAccountNetworkRules", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageBlob", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageBlobInventoryPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageContainer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageContainerImmutabilityPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageDataLakeGen2Filesystem", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageDataLakeGen2Path", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageEncryptionScope", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageManagementPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageMover", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageMoverAgent", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageMoverJobDefinition", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageMoverProject", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageMoverSourceEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageMoverTargetEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageObjectReplication", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageQueue", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageShare", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageShareDirectory", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageShareFile", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageSync", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageSyncCloudEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageSyncGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageSyncServerEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageTable", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/storageTableEntity", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsFunctionJavascriptUda", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsFunctionJavascriptUdf", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsJob", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsJobSchedule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsManagedPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsOutputBlob", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsOutputCosmosdb", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsOutputEventhub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsOutputFunction", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsOutputMssql", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsOutputPowerbi", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsOutputServicebusQueue", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsOutputServicebusTopic", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsOutputSynapse", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsOutputTable", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsReferenceInputBlob", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsReferenceInputMssql", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsStreamInputBlob", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsStreamInputEventhub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsStreamInputEventhubV2", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/streamAnalyticsStreamInputIothub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subnet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subnetNatGatewayAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subnetNetworkSecurityGroupAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subnetRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subnetServiceEndpointStoragePolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subscription", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subscriptionCostManagementExport", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subscriptionCostManagementView", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subscriptionPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subscriptionPolicyExemption", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subscriptionPolicyRemediation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/subscriptionTemplateDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseFirewallRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseIntegrationRuntimeAzure", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseIntegrationRuntimeSelfHosted", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseLinkedService", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseManagedPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapsePrivateLinkHub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseRoleAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseSparkPool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseSqlPool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseSqlPoolExtendedAuditingPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseSqlPoolSecurityAlertPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseSqlPoolVulnerabilityAssessment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseSqlPoolVulnerabilityAssessmentBaseline", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseSqlPoolWorkloadClassifier", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseSqlPoolWorkloadGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseWorkspace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseWorkspaceAadAdmin", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseWorkspaceExtendedAuditingPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseWorkspaceKey", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseWorkspaceSecurityAlertPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseWorkspaceSqlAadAdmin", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/synapseWorkspaceVulnerabilityAssessment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/systemCenterVirtualMachineManagerAvailabilitySet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/systemCenterVirtualMachineManagerCloud", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/systemCenterVirtualMachineManagerServer", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/systemCenterVirtualMachineManagerVirtualMachineTemplate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/systemCenterVirtualMachineManagerVirtualNetwork", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/tenantTemplateDeployment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/trafficManagerAzureEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/trafficManagerExternalEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/trafficManagerNestedEndpoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/trafficManagerProfile", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/userAssignedIdentity", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualDesktopApplication", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualDesktopApplicationGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualDesktopHostPool", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualDesktopHostPoolRegistrationInfo", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualDesktopScalingPlan", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualDesktopScalingPlanHostPoolAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualDesktopWorkspace", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualDesktopWorkspaceApplicationGroupAssociation", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualHub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualHubBgpConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualHubConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualHubIp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualHubRouteTable", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualHubRouteTableRoute", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualHubRoutingIntent", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualHubSecurityPartnerProvider", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineAutomanageConfigurationAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineDataDiskAttachment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineExtension", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineGalleryApplicationAssignment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineImplicitDataDiskFromSource", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachinePacketCapture", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineRestorePoint", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineRestorePointCollection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineRunCommand", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineScaleSet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineScaleSetExtension", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualMachineScaleSetPacketCapture", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualNetwork", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualNetworkDnsServers", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualNetworkGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualNetworkGatewayConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualNetworkGatewayNatRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualNetworkPeering", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/virtualWan", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/vmwareCluster", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/vmwareExpressRouteAuthorization", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/vmwareNetappVolumeAttachment", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/vmwarePrivateCloud", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/voiceServicesCommunicationsGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/voiceServicesCommunicationsGatewayTestLine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/vpnGateway", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/vpnGatewayConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/vpnGatewayNatRule", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/vpnServerConfiguration", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/vpnServerConfigurationPolicyGroup", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/vpnSite", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/webAppActiveSlot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/webAppHybridConnection", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/webApplicationFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/webPubsub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/webPubsubCustomCertificate", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/webPubsubCustomDomain", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/webPubsubHub", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/webPubsubNetworkAcl", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/webPubsubSharedPrivateLinkResource", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/windowsFunctionApp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/windowsFunctionAppSlot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/windowsVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/windowsVirtualMachineScaleSet", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/windowsWebApp", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/windowsWebAppSlot", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/workloadsSapDiscoveryVirtualInstance", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/workloadsSapSingleNodeVirtualInstance", _module)
pulumi.runtime.registerResourceModule("azurerm", "index/workloadsSapThreeTierVirtualInstance", _module)
pulumi.runtime.registerResourcePackage("azurerm", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:azurerm") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
