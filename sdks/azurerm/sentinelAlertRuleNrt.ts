// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SentinelAlertRuleNrt extends pulumi.CustomResource {
    /**
     * Get an existing SentinelAlertRuleNrt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SentinelAlertRuleNrtState, opts?: pulumi.CustomResourceOptions): SentinelAlertRuleNrt {
        return new SentinelAlertRuleNrt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/sentinelAlertRuleNrt:SentinelAlertRuleNrt';

    /**
     * Returns true if the given object is an instance of SentinelAlertRuleNrt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SentinelAlertRuleNrt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SentinelAlertRuleNrt.__pulumiType;
    }

    public readonly alertDetailsOverrides!: pulumi.Output<outputs.SentinelAlertRuleNrtAlertDetailsOverride[] | undefined>;
    public readonly alertRuleTemplateGuid!: pulumi.Output<string | undefined>;
    public readonly alertRuleTemplateVersion!: pulumi.Output<string | undefined>;
    public readonly customDetails!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly entityMappings!: pulumi.Output<outputs.SentinelAlertRuleNrtEntityMapping[] | undefined>;
    public readonly eventGrouping!: pulumi.Output<outputs.SentinelAlertRuleNrtEventGrouping>;
    public readonly incident!: pulumi.Output<outputs.SentinelAlertRuleNrtIncident | undefined>;
    public readonly logAnalyticsWorkspaceId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly query!: pulumi.Output<string>;
    public readonly sentinelEntityMappings!: pulumi.Output<outputs.SentinelAlertRuleNrtSentinelEntityMapping[] | undefined>;
    public readonly severity!: pulumi.Output<string>;
    public readonly suppressionDuration!: pulumi.Output<string | undefined>;
    public readonly suppressionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly tactics!: pulumi.Output<string[] | undefined>;
    public readonly techniques!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SentinelAlertRuleNrtTimeouts | undefined>;

    /**
     * Create a SentinelAlertRuleNrt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SentinelAlertRuleNrtArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SentinelAlertRuleNrtArgs | SentinelAlertRuleNrtState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SentinelAlertRuleNrtState | undefined;
            resourceInputs["alertDetailsOverrides"] = state ? state.alertDetailsOverrides : undefined;
            resourceInputs["alertRuleTemplateGuid"] = state ? state.alertRuleTemplateGuid : undefined;
            resourceInputs["alertRuleTemplateVersion"] = state ? state.alertRuleTemplateVersion : undefined;
            resourceInputs["customDetails"] = state ? state.customDetails : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entityMappings"] = state ? state.entityMappings : undefined;
            resourceInputs["eventGrouping"] = state ? state.eventGrouping : undefined;
            resourceInputs["incident"] = state ? state.incident : undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = state ? state.logAnalyticsWorkspaceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["sentinelEntityMappings"] = state ? state.sentinelEntityMappings : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["suppressionDuration"] = state ? state.suppressionDuration : undefined;
            resourceInputs["suppressionEnabled"] = state ? state.suppressionEnabled : undefined;
            resourceInputs["tactics"] = state ? state.tactics : undefined;
            resourceInputs["techniques"] = state ? state.techniques : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SentinelAlertRuleNrtArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.eventGrouping === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventGrouping'");
            }
            if ((!args || args.logAnalyticsWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logAnalyticsWorkspaceId'");
            }
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            resourceInputs["alertDetailsOverrides"] = args ? args.alertDetailsOverrides : undefined;
            resourceInputs["alertRuleTemplateGuid"] = args ? args.alertRuleTemplateGuid : undefined;
            resourceInputs["alertRuleTemplateVersion"] = args ? args.alertRuleTemplateVersion : undefined;
            resourceInputs["customDetails"] = args ? args.customDetails : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entityMappings"] = args ? args.entityMappings : undefined;
            resourceInputs["eventGrouping"] = args ? args.eventGrouping : undefined;
            resourceInputs["incident"] = args ? args.incident : undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = args ? args.logAnalyticsWorkspaceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["sentinelEntityMappings"] = args ? args.sentinelEntityMappings : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["suppressionDuration"] = args ? args.suppressionDuration : undefined;
            resourceInputs["suppressionEnabled"] = args ? args.suppressionEnabled : undefined;
            resourceInputs["tactics"] = args ? args.tactics : undefined;
            resourceInputs["techniques"] = args ? args.techniques : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SentinelAlertRuleNrt.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SentinelAlertRuleNrt resources.
 */
export interface SentinelAlertRuleNrtState {
    alertDetailsOverrides?: pulumi.Input<pulumi.Input<inputs.SentinelAlertRuleNrtAlertDetailsOverride>[]>;
    alertRuleTemplateGuid?: pulumi.Input<string>;
    alertRuleTemplateVersion?: pulumi.Input<string>;
    customDetails?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    entityMappings?: pulumi.Input<pulumi.Input<inputs.SentinelAlertRuleNrtEntityMapping>[]>;
    eventGrouping?: pulumi.Input<inputs.SentinelAlertRuleNrtEventGrouping>;
    incident?: pulumi.Input<inputs.SentinelAlertRuleNrtIncident>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    sentinelEntityMappings?: pulumi.Input<pulumi.Input<inputs.SentinelAlertRuleNrtSentinelEntityMapping>[]>;
    severity?: pulumi.Input<string>;
    suppressionDuration?: pulumi.Input<string>;
    suppressionEnabled?: pulumi.Input<boolean>;
    tactics?: pulumi.Input<pulumi.Input<string>[]>;
    techniques?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.SentinelAlertRuleNrtTimeouts>;
}

/**
 * The set of arguments for constructing a SentinelAlertRuleNrt resource.
 */
export interface SentinelAlertRuleNrtArgs {
    alertDetailsOverrides?: pulumi.Input<pulumi.Input<inputs.SentinelAlertRuleNrtAlertDetailsOverride>[]>;
    alertRuleTemplateGuid?: pulumi.Input<string>;
    alertRuleTemplateVersion?: pulumi.Input<string>;
    customDetails?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    entityMappings?: pulumi.Input<pulumi.Input<inputs.SentinelAlertRuleNrtEntityMapping>[]>;
    eventGrouping: pulumi.Input<inputs.SentinelAlertRuleNrtEventGrouping>;
    incident?: pulumi.Input<inputs.SentinelAlertRuleNrtIncident>;
    logAnalyticsWorkspaceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    sentinelEntityMappings?: pulumi.Input<pulumi.Input<inputs.SentinelAlertRuleNrtSentinelEntityMapping>[]>;
    severity: pulumi.Input<string>;
    suppressionDuration?: pulumi.Input<string>;
    suppressionEnabled?: pulumi.Input<boolean>;
    tactics?: pulumi.Input<pulumi.Input<string>[]>;
    techniques?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.SentinelAlertRuleNrtTimeouts>;
}
