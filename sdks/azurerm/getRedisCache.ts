// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRedisCache(args: GetRedisCacheArgs, opts?: pulumi.InvokeOptions): Promise<GetRedisCacheResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getRedisCache:getRedisCache", {
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRedisCache.
 */
export interface GetRedisCacheArgs {
    id?: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetRedisCacheTimeouts;
}

/**
 * A collection of values returned by getRedisCache.
 */
export interface GetRedisCacheResult {
    readonly accessKeysAuthenticationEnabled: boolean;
    readonly capacity: number;
    readonly family: string;
    readonly hostname: string;
    readonly id: string;
    readonly location: string;
    readonly minimumTlsVersion: string;
    readonly name: string;
    readonly nonSslPortEnabled: boolean;
    readonly patchSchedules: outputs.GetRedisCachePatchSchedule[];
    readonly port: number;
    readonly primaryAccessKey: string;
    readonly primaryConnectionString: string;
    readonly privateStaticIpAddress: string;
    readonly redisConfigurations: outputs.GetRedisCacheRedisConfiguration[];
    readonly resourceGroupName: string;
    readonly secondaryAccessKey: string;
    readonly secondaryConnectionString: string;
    readonly shardCount: number;
    readonly skuName: string;
    readonly sslPort: number;
    readonly subnetId: string;
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetRedisCacheTimeouts;
    readonly zones: string[];
}
export function getRedisCacheOutput(args: GetRedisCacheOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRedisCacheResult> {
    return pulumi.output(args).apply((a: any) => getRedisCache(a, opts))
}

/**
 * A collection of arguments for invoking getRedisCache.
 */
export interface GetRedisCacheOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetRedisCacheTimeoutsArgs>;
}
