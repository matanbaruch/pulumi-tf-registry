// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogicAppWorkflow extends pulumi.CustomResource {
    /**
     * Get an existing LogicAppWorkflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogicAppWorkflowState, opts?: pulumi.CustomResourceOptions): LogicAppWorkflow {
        return new LogicAppWorkflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/logicAppWorkflow:LogicAppWorkflow';

    /**
     * Returns true if the given object is an instance of LogicAppWorkflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogicAppWorkflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogicAppWorkflow.__pulumiType;
    }

    public readonly accessControl!: pulumi.Output<outputs.LogicAppWorkflowAccessControl | undefined>;
    public /*out*/ readonly accessEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly connectorEndpointIpAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly connectorOutboundIpAddresses!: pulumi.Output<string[]>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly identity!: pulumi.Output<outputs.LogicAppWorkflowIdentity | undefined>;
    public readonly integrationServiceEnvironmentId!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly logicAppIntegrationAccountId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LogicAppWorkflowTimeouts | undefined>;
    public /*out*/ readonly workflowEndpointIpAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly workflowOutboundIpAddresses!: pulumi.Output<string[]>;
    public readonly workflowParameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly workflowSchema!: pulumi.Output<string | undefined>;
    public readonly workflowVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a LogicAppWorkflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogicAppWorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogicAppWorkflowArgs | LogicAppWorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogicAppWorkflowState | undefined;
            resourceInputs["accessControl"] = state ? state.accessControl : undefined;
            resourceInputs["accessEndpoint"] = state ? state.accessEndpoint : undefined;
            resourceInputs["connectorEndpointIpAddresses"] = state ? state.connectorEndpointIpAddresses : undefined;
            resourceInputs["connectorOutboundIpAddresses"] = state ? state.connectorOutboundIpAddresses : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["integrationServiceEnvironmentId"] = state ? state.integrationServiceEnvironmentId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logicAppIntegrationAccountId"] = state ? state.logicAppIntegrationAccountId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workflowEndpointIpAddresses"] = state ? state.workflowEndpointIpAddresses : undefined;
            resourceInputs["workflowOutboundIpAddresses"] = state ? state.workflowOutboundIpAddresses : undefined;
            resourceInputs["workflowParameters"] = state ? state.workflowParameters : undefined;
            resourceInputs["workflowSchema"] = state ? state.workflowSchema : undefined;
            resourceInputs["workflowVersion"] = state ? state.workflowVersion : undefined;
        } else {
            const args = argsOrState as LogicAppWorkflowArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accessControl"] = args ? args.accessControl : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["integrationServiceEnvironmentId"] = args ? args.integrationServiceEnvironmentId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logicAppIntegrationAccountId"] = args ? args.logicAppIntegrationAccountId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workflowParameters"] = args ? args.workflowParameters : undefined;
            resourceInputs["workflowSchema"] = args ? args.workflowSchema : undefined;
            resourceInputs["workflowVersion"] = args ? args.workflowVersion : undefined;
            resourceInputs["accessEndpoint"] = undefined /*out*/;
            resourceInputs["connectorEndpointIpAddresses"] = undefined /*out*/;
            resourceInputs["connectorOutboundIpAddresses"] = undefined /*out*/;
            resourceInputs["workflowEndpointIpAddresses"] = undefined /*out*/;
            resourceInputs["workflowOutboundIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogicAppWorkflow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogicAppWorkflow resources.
 */
export interface LogicAppWorkflowState {
    accessControl?: pulumi.Input<inputs.LogicAppWorkflowAccessControl>;
    accessEndpoint?: pulumi.Input<string>;
    connectorEndpointIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    connectorOutboundIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.LogicAppWorkflowIdentity>;
    integrationServiceEnvironmentId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    logicAppIntegrationAccountId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.LogicAppWorkflowTimeouts>;
    workflowEndpointIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    workflowOutboundIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    workflowParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    workflowSchema?: pulumi.Input<string>;
    workflowVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogicAppWorkflow resource.
 */
export interface LogicAppWorkflowArgs {
    accessControl?: pulumi.Input<inputs.LogicAppWorkflowAccessControl>;
    enabled?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.LogicAppWorkflowIdentity>;
    integrationServiceEnvironmentId?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    logicAppIntegrationAccountId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.LogicAppWorkflowTimeouts>;
    workflowParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    workflowSchema?: pulumi.Input<string>;
    workflowVersion?: pulumi.Input<string>;
}
