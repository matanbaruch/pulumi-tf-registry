// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing AppConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppConfigurationState, opts?: pulumi.CustomResourceOptions): AppConfiguration {
        return new AppConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/appConfiguration:AppConfiguration';

    /**
     * Returns true if the given object is an instance of AppConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppConfiguration.__pulumiType;
    }

    public readonly encryption!: pulumi.Output<outputs.AppConfigurationEncryption | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.AppConfigurationIdentity | undefined>;
    public readonly localAuthEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly primaryReadKeys!: pulumi.Output<outputs.AppConfigurationPrimaryReadKey[]>;
    public /*out*/ readonly primaryWriteKeys!: pulumi.Output<outputs.AppConfigurationPrimaryWriteKey[]>;
    public readonly publicNetworkAccess!: pulumi.Output<string | undefined>;
    public readonly purgeProtectionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly replicas!: pulumi.Output<outputs.AppConfigurationReplica[] | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly secondaryReadKeys!: pulumi.Output<outputs.AppConfigurationSecondaryReadKey[]>;
    public /*out*/ readonly secondaryWriteKeys!: pulumi.Output<outputs.AppConfigurationSecondaryWriteKey[]>;
    public readonly sku!: pulumi.Output<string | undefined>;
    public readonly softDeleteRetentionDays!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AppConfigurationTimeouts | undefined>;

    /**
     * Create a AppConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppConfigurationArgs | AppConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppConfigurationState | undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["localAuthEnabled"] = state ? state.localAuthEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryReadKeys"] = state ? state.primaryReadKeys : undefined;
            resourceInputs["primaryWriteKeys"] = state ? state.primaryWriteKeys : undefined;
            resourceInputs["publicNetworkAccess"] = state ? state.publicNetworkAccess : undefined;
            resourceInputs["purgeProtectionEnabled"] = state ? state.purgeProtectionEnabled : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secondaryReadKeys"] = state ? state.secondaryReadKeys : undefined;
            resourceInputs["secondaryWriteKeys"] = state ? state.secondaryWriteKeys : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["softDeleteRetentionDays"] = state ? state.softDeleteRetentionDays : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AppConfigurationArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["localAuthEnabled"] = args ? args.localAuthEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccess"] = args ? args.publicNetworkAccess : undefined;
            resourceInputs["purgeProtectionEnabled"] = args ? args.purgeProtectionEnabled : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["softDeleteRetentionDays"] = args ? args.softDeleteRetentionDays : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["primaryReadKeys"] = undefined /*out*/;
            resourceInputs["primaryWriteKeys"] = undefined /*out*/;
            resourceInputs["secondaryReadKeys"] = undefined /*out*/;
            resourceInputs["secondaryWriteKeys"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppConfiguration resources.
 */
export interface AppConfigurationState {
    encryption?: pulumi.Input<inputs.AppConfigurationEncryption>;
    endpoint?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.AppConfigurationIdentity>;
    localAuthEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    primaryReadKeys?: pulumi.Input<pulumi.Input<inputs.AppConfigurationPrimaryReadKey>[]>;
    primaryWriteKeys?: pulumi.Input<pulumi.Input<inputs.AppConfigurationPrimaryWriteKey>[]>;
    publicNetworkAccess?: pulumi.Input<string>;
    purgeProtectionEnabled?: pulumi.Input<boolean>;
    replicas?: pulumi.Input<pulumi.Input<inputs.AppConfigurationReplica>[]>;
    resourceGroupName?: pulumi.Input<string>;
    secondaryReadKeys?: pulumi.Input<pulumi.Input<inputs.AppConfigurationSecondaryReadKey>[]>;
    secondaryWriteKeys?: pulumi.Input<pulumi.Input<inputs.AppConfigurationSecondaryWriteKey>[]>;
    sku?: pulumi.Input<string>;
    softDeleteRetentionDays?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AppConfigurationTimeouts>;
}

/**
 * The set of arguments for constructing a AppConfiguration resource.
 */
export interface AppConfigurationArgs {
    encryption?: pulumi.Input<inputs.AppConfigurationEncryption>;
    identity?: pulumi.Input<inputs.AppConfigurationIdentity>;
    localAuthEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicNetworkAccess?: pulumi.Input<string>;
    purgeProtectionEnabled?: pulumi.Input<boolean>;
    replicas?: pulumi.Input<pulumi.Input<inputs.AppConfigurationReplica>[]>;
    resourceGroupName: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    softDeleteRetentionDays?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AppConfigurationTimeouts>;
}
