// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerRegistryCacheRule extends pulumi.CustomResource {
    /**
     * Get an existing ContainerRegistryCacheRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerRegistryCacheRuleState, opts?: pulumi.CustomResourceOptions): ContainerRegistryCacheRule {
        return new ContainerRegistryCacheRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/containerRegistryCacheRule:ContainerRegistryCacheRule';

    /**
     * Returns true if the given object is an instance of ContainerRegistryCacheRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerRegistryCacheRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerRegistryCacheRule.__pulumiType;
    }

    public readonly containerRegistryId!: pulumi.Output<string>;
    /**
     * The ARM resource ID of the credential store which is associated with the cache rule.
     */
    public readonly credentialSetId!: pulumi.Output<string | undefined>;
    /**
     * The name of the cache rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The full source repository path such as 'docker.io/library/ubuntu'.
     */
    public readonly sourceRepo!: pulumi.Output<string>;
    /**
     * The target repository namespace such as 'ubuntu'.
     */
    public readonly targetRepo!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerRegistryCacheRuleTimeouts | undefined>;

    /**
     * Create a ContainerRegistryCacheRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerRegistryCacheRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerRegistryCacheRuleArgs | ContainerRegistryCacheRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerRegistryCacheRuleState | undefined;
            resourceInputs["containerRegistryId"] = state ? state.containerRegistryId : undefined;
            resourceInputs["credentialSetId"] = state ? state.credentialSetId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceRepo"] = state ? state.sourceRepo : undefined;
            resourceInputs["targetRepo"] = state ? state.targetRepo : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ContainerRegistryCacheRuleArgs | undefined;
            if ((!args || args.containerRegistryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerRegistryId'");
            }
            if ((!args || args.sourceRepo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRepo'");
            }
            if ((!args || args.targetRepo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRepo'");
            }
            resourceInputs["containerRegistryId"] = args ? args.containerRegistryId : undefined;
            resourceInputs["credentialSetId"] = args ? args.credentialSetId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceRepo"] = args ? args.sourceRepo : undefined;
            resourceInputs["targetRepo"] = args ? args.targetRepo : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerRegistryCacheRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerRegistryCacheRule resources.
 */
export interface ContainerRegistryCacheRuleState {
    containerRegistryId?: pulumi.Input<string>;
    /**
     * The ARM resource ID of the credential store which is associated with the cache rule.
     */
    credentialSetId?: pulumi.Input<string>;
    /**
     * The name of the cache rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The full source repository path such as 'docker.io/library/ubuntu'.
     */
    sourceRepo?: pulumi.Input<string>;
    /**
     * The target repository namespace such as 'ubuntu'.
     */
    targetRepo?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerRegistryCacheRuleTimeouts>;
}

/**
 * The set of arguments for constructing a ContainerRegistryCacheRule resource.
 */
export interface ContainerRegistryCacheRuleArgs {
    containerRegistryId: pulumi.Input<string>;
    /**
     * The ARM resource ID of the credential store which is associated with the cache rule.
     */
    credentialSetId?: pulumi.Input<string>;
    /**
     * The name of the cache rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The full source repository path such as 'docker.io/library/ubuntu'.
     */
    sourceRepo: pulumi.Input<string>;
    /**
     * The target repository namespace such as 'ubuntu'.
     */
    targetRepo: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerRegistryCacheRuleTimeouts>;
}
