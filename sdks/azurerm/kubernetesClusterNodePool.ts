// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesClusterNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesClusterNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesClusterNodePoolState, opts?: pulumi.CustomResourceOptions): KubernetesClusterNodePool {
        return new KubernetesClusterNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/kubernetesClusterNodePool:KubernetesClusterNodePool';

    /**
     * Returns true if the given object is an instance of KubernetesClusterNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesClusterNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesClusterNodePool.__pulumiType;
    }

    public readonly autoScalingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly capacityReservationGroupId!: pulumi.Output<string | undefined>;
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    public readonly fipsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly gpuInstance!: pulumi.Output<string | undefined>;
    public readonly hostEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly hostGroupId!: pulumi.Output<string | undefined>;
    public readonly kubeletConfig!: pulumi.Output<outputs.KubernetesClusterNodePoolKubeletConfig | undefined>;
    public readonly kubeletDiskType!: pulumi.Output<string>;
    public readonly kubernetesClusterId!: pulumi.Output<string>;
    public readonly linuxOsConfig!: pulumi.Output<outputs.KubernetesClusterNodePoolLinuxOsConfig | undefined>;
    public readonly maxCount!: pulumi.Output<number | undefined>;
    public readonly maxPods!: pulumi.Output<number>;
    public readonly minCount!: pulumi.Output<number | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeCount!: pulumi.Output<number>;
    public readonly nodeLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly nodeNetworkProfile!: pulumi.Output<outputs.KubernetesClusterNodePoolNodeNetworkProfile | undefined>;
    public readonly nodePublicIpEnabled!: pulumi.Output<boolean | undefined>;
    public readonly nodePublicIpPrefixId!: pulumi.Output<string | undefined>;
    public readonly nodeTaints!: pulumi.Output<string[] | undefined>;
    public readonly orchestratorVersion!: pulumi.Output<string>;
    public readonly osDiskSizeGb!: pulumi.Output<number>;
    public readonly osDiskType!: pulumi.Output<string | undefined>;
    public readonly osSku!: pulumi.Output<string>;
    public readonly osType!: pulumi.Output<string | undefined>;
    public readonly podSubnetId!: pulumi.Output<string | undefined>;
    public readonly priority!: pulumi.Output<string | undefined>;
    public readonly proximityPlacementGroupId!: pulumi.Output<string | undefined>;
    public readonly scaleDownMode!: pulumi.Output<string | undefined>;
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    public readonly spotMaxPrice!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.KubernetesClusterNodePoolTimeouts | undefined>;
    public readonly ultraSsdEnabled!: pulumi.Output<boolean | undefined>;
    public readonly upgradeSettings!: pulumi.Output<outputs.KubernetesClusterNodePoolUpgradeSettings | undefined>;
    public readonly vmSize!: pulumi.Output<string>;
    public readonly vnetSubnetId!: pulumi.Output<string | undefined>;
    public readonly windowsProfile!: pulumi.Output<outputs.KubernetesClusterNodePoolWindowsProfile | undefined>;
    public readonly workloadRuntime!: pulumi.Output<string | undefined>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a KubernetesClusterNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesClusterNodePoolArgs | KubernetesClusterNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesClusterNodePoolState | undefined;
            resourceInputs["autoScalingEnabled"] = state ? state.autoScalingEnabled : undefined;
            resourceInputs["capacityReservationGroupId"] = state ? state.capacityReservationGroupId : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["fipsEnabled"] = state ? state.fipsEnabled : undefined;
            resourceInputs["gpuInstance"] = state ? state.gpuInstance : undefined;
            resourceInputs["hostEncryptionEnabled"] = state ? state.hostEncryptionEnabled : undefined;
            resourceInputs["hostGroupId"] = state ? state.hostGroupId : undefined;
            resourceInputs["kubeletConfig"] = state ? state.kubeletConfig : undefined;
            resourceInputs["kubeletDiskType"] = state ? state.kubeletDiskType : undefined;
            resourceInputs["kubernetesClusterId"] = state ? state.kubernetesClusterId : undefined;
            resourceInputs["linuxOsConfig"] = state ? state.linuxOsConfig : undefined;
            resourceInputs["maxCount"] = state ? state.maxCount : undefined;
            resourceInputs["maxPods"] = state ? state.maxPods : undefined;
            resourceInputs["minCount"] = state ? state.minCount : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodeLabels"] = state ? state.nodeLabels : undefined;
            resourceInputs["nodeNetworkProfile"] = state ? state.nodeNetworkProfile : undefined;
            resourceInputs["nodePublicIpEnabled"] = state ? state.nodePublicIpEnabled : undefined;
            resourceInputs["nodePublicIpPrefixId"] = state ? state.nodePublicIpPrefixId : undefined;
            resourceInputs["nodeTaints"] = state ? state.nodeTaints : undefined;
            resourceInputs["orchestratorVersion"] = state ? state.orchestratorVersion : undefined;
            resourceInputs["osDiskSizeGb"] = state ? state.osDiskSizeGb : undefined;
            resourceInputs["osDiskType"] = state ? state.osDiskType : undefined;
            resourceInputs["osSku"] = state ? state.osSku : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["podSubnetId"] = state ? state.podSubnetId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["proximityPlacementGroupId"] = state ? state.proximityPlacementGroupId : undefined;
            resourceInputs["scaleDownMode"] = state ? state.scaleDownMode : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["spotMaxPrice"] = state ? state.spotMaxPrice : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["ultraSsdEnabled"] = state ? state.ultraSsdEnabled : undefined;
            resourceInputs["upgradeSettings"] = state ? state.upgradeSettings : undefined;
            resourceInputs["vmSize"] = state ? state.vmSize : undefined;
            resourceInputs["vnetSubnetId"] = state ? state.vnetSubnetId : undefined;
            resourceInputs["windowsProfile"] = state ? state.windowsProfile : undefined;
            resourceInputs["workloadRuntime"] = state ? state.workloadRuntime : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as KubernetesClusterNodePoolArgs | undefined;
            if ((!args || args.kubernetesClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubernetesClusterId'");
            }
            if ((!args || args.vmSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmSize'");
            }
            resourceInputs["autoScalingEnabled"] = args ? args.autoScalingEnabled : undefined;
            resourceInputs["capacityReservationGroupId"] = args ? args.capacityReservationGroupId : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["fipsEnabled"] = args ? args.fipsEnabled : undefined;
            resourceInputs["gpuInstance"] = args ? args.gpuInstance : undefined;
            resourceInputs["hostEncryptionEnabled"] = args ? args.hostEncryptionEnabled : undefined;
            resourceInputs["hostGroupId"] = args ? args.hostGroupId : undefined;
            resourceInputs["kubeletConfig"] = args ? args.kubeletConfig : undefined;
            resourceInputs["kubeletDiskType"] = args ? args.kubeletDiskType : undefined;
            resourceInputs["kubernetesClusterId"] = args ? args.kubernetesClusterId : undefined;
            resourceInputs["linuxOsConfig"] = args ? args.linuxOsConfig : undefined;
            resourceInputs["maxCount"] = args ? args.maxCount : undefined;
            resourceInputs["maxPods"] = args ? args.maxPods : undefined;
            resourceInputs["minCount"] = args ? args.minCount : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodeLabels"] = args ? args.nodeLabels : undefined;
            resourceInputs["nodeNetworkProfile"] = args ? args.nodeNetworkProfile : undefined;
            resourceInputs["nodePublicIpEnabled"] = args ? args.nodePublicIpEnabled : undefined;
            resourceInputs["nodePublicIpPrefixId"] = args ? args.nodePublicIpPrefixId : undefined;
            resourceInputs["nodeTaints"] = args ? args.nodeTaints : undefined;
            resourceInputs["orchestratorVersion"] = args ? args.orchestratorVersion : undefined;
            resourceInputs["osDiskSizeGb"] = args ? args.osDiskSizeGb : undefined;
            resourceInputs["osDiskType"] = args ? args.osDiskType : undefined;
            resourceInputs["osSku"] = args ? args.osSku : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["podSubnetId"] = args ? args.podSubnetId : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["proximityPlacementGroupId"] = args ? args.proximityPlacementGroupId : undefined;
            resourceInputs["scaleDownMode"] = args ? args.scaleDownMode : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["spotMaxPrice"] = args ? args.spotMaxPrice : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ultraSsdEnabled"] = args ? args.ultraSsdEnabled : undefined;
            resourceInputs["upgradeSettings"] = args ? args.upgradeSettings : undefined;
            resourceInputs["vmSize"] = args ? args.vmSize : undefined;
            resourceInputs["vnetSubnetId"] = args ? args.vnetSubnetId : undefined;
            resourceInputs["windowsProfile"] = args ? args.windowsProfile : undefined;
            resourceInputs["workloadRuntime"] = args ? args.workloadRuntime : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesClusterNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesClusterNodePool resources.
 */
export interface KubernetesClusterNodePoolState {
    autoScalingEnabled?: pulumi.Input<boolean>;
    capacityReservationGroupId?: pulumi.Input<string>;
    evictionPolicy?: pulumi.Input<string>;
    fipsEnabled?: pulumi.Input<boolean>;
    gpuInstance?: pulumi.Input<string>;
    hostEncryptionEnabled?: pulumi.Input<boolean>;
    hostGroupId?: pulumi.Input<string>;
    kubeletConfig?: pulumi.Input<inputs.KubernetesClusterNodePoolKubeletConfig>;
    kubeletDiskType?: pulumi.Input<string>;
    kubernetesClusterId?: pulumi.Input<string>;
    linuxOsConfig?: pulumi.Input<inputs.KubernetesClusterNodePoolLinuxOsConfig>;
    maxCount?: pulumi.Input<number>;
    maxPods?: pulumi.Input<number>;
    minCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodeNetworkProfile?: pulumi.Input<inputs.KubernetesClusterNodePoolNodeNetworkProfile>;
    nodePublicIpEnabled?: pulumi.Input<boolean>;
    nodePublicIpPrefixId?: pulumi.Input<string>;
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    orchestratorVersion?: pulumi.Input<string>;
    osDiskSizeGb?: pulumi.Input<number>;
    osDiskType?: pulumi.Input<string>;
    osSku?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    podSubnetId?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    proximityPlacementGroupId?: pulumi.Input<string>;
    scaleDownMode?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    spotMaxPrice?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KubernetesClusterNodePoolTimeouts>;
    ultraSsdEnabled?: pulumi.Input<boolean>;
    upgradeSettings?: pulumi.Input<inputs.KubernetesClusterNodePoolUpgradeSettings>;
    vmSize?: pulumi.Input<string>;
    vnetSubnetId?: pulumi.Input<string>;
    windowsProfile?: pulumi.Input<inputs.KubernetesClusterNodePoolWindowsProfile>;
    workloadRuntime?: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a KubernetesClusterNodePool resource.
 */
export interface KubernetesClusterNodePoolArgs {
    autoScalingEnabled?: pulumi.Input<boolean>;
    capacityReservationGroupId?: pulumi.Input<string>;
    evictionPolicy?: pulumi.Input<string>;
    fipsEnabled?: pulumi.Input<boolean>;
    gpuInstance?: pulumi.Input<string>;
    hostEncryptionEnabled?: pulumi.Input<boolean>;
    hostGroupId?: pulumi.Input<string>;
    kubeletConfig?: pulumi.Input<inputs.KubernetesClusterNodePoolKubeletConfig>;
    kubeletDiskType?: pulumi.Input<string>;
    kubernetesClusterId: pulumi.Input<string>;
    linuxOsConfig?: pulumi.Input<inputs.KubernetesClusterNodePoolLinuxOsConfig>;
    maxCount?: pulumi.Input<number>;
    maxPods?: pulumi.Input<number>;
    minCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodeNetworkProfile?: pulumi.Input<inputs.KubernetesClusterNodePoolNodeNetworkProfile>;
    nodePublicIpEnabled?: pulumi.Input<boolean>;
    nodePublicIpPrefixId?: pulumi.Input<string>;
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    orchestratorVersion?: pulumi.Input<string>;
    osDiskSizeGb?: pulumi.Input<number>;
    osDiskType?: pulumi.Input<string>;
    osSku?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    podSubnetId?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    proximityPlacementGroupId?: pulumi.Input<string>;
    scaleDownMode?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    spotMaxPrice?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KubernetesClusterNodePoolTimeouts>;
    ultraSsdEnabled?: pulumi.Input<boolean>;
    upgradeSettings?: pulumi.Input<inputs.KubernetesClusterNodePoolUpgradeSettings>;
    vmSize: pulumi.Input<string>;
    vnetSubnetId?: pulumi.Input<string>;
    windowsProfile?: pulumi.Input<inputs.KubernetesClusterNodePoolWindowsProfile>;
    workloadRuntime?: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
