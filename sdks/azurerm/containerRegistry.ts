// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerRegistry extends pulumi.CustomResource {
    /**
     * Get an existing ContainerRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerRegistryState, opts?: pulumi.CustomResourceOptions): ContainerRegistry {
        return new ContainerRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/containerRegistry:ContainerRegistry';

    /**
     * Returns true if the given object is an instance of ContainerRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerRegistry.__pulumiType;
    }

    public readonly adminEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly adminPassword!: pulumi.Output<string>;
    public /*out*/ readonly adminUsername!: pulumi.Output<string>;
    public readonly anonymousPullEnabled!: pulumi.Output<boolean | undefined>;
    public readonly dataEndpointEnabled!: pulumi.Output<boolean | undefined>;
    public readonly encryptions!: pulumi.Output<outputs.ContainerRegistryEncryption[]>;
    public readonly exportPolicyEnabled!: pulumi.Output<boolean | undefined>;
    public readonly georeplications!: pulumi.Output<outputs.ContainerRegistryGeoreplication[] | undefined>;
    public readonly identity!: pulumi.Output<outputs.ContainerRegistryIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public /*out*/ readonly loginServer!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkRuleBypassOption!: pulumi.Output<string | undefined>;
    public readonly networkRuleSets!: pulumi.Output<outputs.ContainerRegistryNetworkRuleSet[]>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly quarantinePolicyEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly retentionPolicyInDays!: pulumi.Output<number | undefined>;
    public readonly sku!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerRegistryTimeouts | undefined>;
    public readonly trustPolicyEnabled!: pulumi.Output<boolean | undefined>;
    public readonly zoneRedundancyEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ContainerRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerRegistryArgs | ContainerRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerRegistryState | undefined;
            resourceInputs["adminEnabled"] = state ? state.adminEnabled : undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["anonymousPullEnabled"] = state ? state.anonymousPullEnabled : undefined;
            resourceInputs["dataEndpointEnabled"] = state ? state.dataEndpointEnabled : undefined;
            resourceInputs["encryptions"] = state ? state.encryptions : undefined;
            resourceInputs["exportPolicyEnabled"] = state ? state.exportPolicyEnabled : undefined;
            resourceInputs["georeplications"] = state ? state.georeplications : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["loginServer"] = state ? state.loginServer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkRuleBypassOption"] = state ? state.networkRuleBypassOption : undefined;
            resourceInputs["networkRuleSets"] = state ? state.networkRuleSets : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["quarantinePolicyEnabled"] = state ? state.quarantinePolicyEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["retentionPolicyInDays"] = state ? state.retentionPolicyInDays : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trustPolicyEnabled"] = state ? state.trustPolicyEnabled : undefined;
            resourceInputs["zoneRedundancyEnabled"] = state ? state.zoneRedundancyEnabled : undefined;
        } else {
            const args = argsOrState as ContainerRegistryArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["adminEnabled"] = args ? args.adminEnabled : undefined;
            resourceInputs["anonymousPullEnabled"] = args ? args.anonymousPullEnabled : undefined;
            resourceInputs["dataEndpointEnabled"] = args ? args.dataEndpointEnabled : undefined;
            resourceInputs["encryptions"] = args ? args.encryptions : undefined;
            resourceInputs["exportPolicyEnabled"] = args ? args.exportPolicyEnabled : undefined;
            resourceInputs["georeplications"] = args ? args.georeplications : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkRuleBypassOption"] = args ? args.networkRuleBypassOption : undefined;
            resourceInputs["networkRuleSets"] = args ? args.networkRuleSets : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["quarantinePolicyEnabled"] = args ? args.quarantinePolicyEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["retentionPolicyInDays"] = args ? args.retentionPolicyInDays : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trustPolicyEnabled"] = args ? args.trustPolicyEnabled : undefined;
            resourceInputs["zoneRedundancyEnabled"] = args ? args.zoneRedundancyEnabled : undefined;
            resourceInputs["adminPassword"] = undefined /*out*/;
            resourceInputs["adminUsername"] = undefined /*out*/;
            resourceInputs["loginServer"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ContainerRegistry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerRegistry resources.
 */
export interface ContainerRegistryState {
    adminEnabled?: pulumi.Input<boolean>;
    adminPassword?: pulumi.Input<string>;
    adminUsername?: pulumi.Input<string>;
    anonymousPullEnabled?: pulumi.Input<boolean>;
    dataEndpointEnabled?: pulumi.Input<boolean>;
    encryptions?: pulumi.Input<pulumi.Input<inputs.ContainerRegistryEncryption>[]>;
    exportPolicyEnabled?: pulumi.Input<boolean>;
    georeplications?: pulumi.Input<pulumi.Input<inputs.ContainerRegistryGeoreplication>[]>;
    identity?: pulumi.Input<inputs.ContainerRegistryIdentity>;
    location?: pulumi.Input<string>;
    loginServer?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkRuleBypassOption?: pulumi.Input<string>;
    networkRuleSets?: pulumi.Input<pulumi.Input<inputs.ContainerRegistryNetworkRuleSet>[]>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    quarantinePolicyEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    retentionPolicyInDays?: pulumi.Input<number>;
    sku?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ContainerRegistryTimeouts>;
    trustPolicyEnabled?: pulumi.Input<boolean>;
    zoneRedundancyEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ContainerRegistry resource.
 */
export interface ContainerRegistryArgs {
    adminEnabled?: pulumi.Input<boolean>;
    anonymousPullEnabled?: pulumi.Input<boolean>;
    dataEndpointEnabled?: pulumi.Input<boolean>;
    encryptions?: pulumi.Input<pulumi.Input<inputs.ContainerRegistryEncryption>[]>;
    exportPolicyEnabled?: pulumi.Input<boolean>;
    georeplications?: pulumi.Input<pulumi.Input<inputs.ContainerRegistryGeoreplication>[]>;
    identity?: pulumi.Input<inputs.ContainerRegistryIdentity>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkRuleBypassOption?: pulumi.Input<string>;
    networkRuleSets?: pulumi.Input<pulumi.Input<inputs.ContainerRegistryNetworkRuleSet>[]>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    quarantinePolicyEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    retentionPolicyInDays?: pulumi.Input<number>;
    sku: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ContainerRegistryTimeouts>;
    trustPolicyEnabled?: pulumi.Input<boolean>;
    zoneRedundancyEnabled?: pulumi.Input<boolean>;
}
