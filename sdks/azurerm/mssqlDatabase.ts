// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MssqlDatabase extends pulumi.CustomResource {
    /**
     * Get an existing MssqlDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MssqlDatabaseState, opts?: pulumi.CustomResourceOptions): MssqlDatabase {
        return new MssqlDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/mssqlDatabase:MssqlDatabase';

    /**
     * Returns true if the given object is an instance of MssqlDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MssqlDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MssqlDatabase.__pulumiType;
    }

    public readonly autoPauseDelayInMinutes!: pulumi.Output<number>;
    public readonly collation!: pulumi.Output<string>;
    public readonly createMode!: pulumi.Output<string | undefined>;
    public readonly creationSourceDatabaseId!: pulumi.Output<string>;
    public readonly elasticPoolId!: pulumi.Output<string | undefined>;
    public readonly enclaveType!: pulumi.Output<string>;
    public readonly geoBackupEnabled!: pulumi.Output<boolean | undefined>;
    public readonly identity!: pulumi.Output<outputs.MssqlDatabaseIdentity | undefined>;
    public readonly import!: pulumi.Output<outputs.MssqlDatabaseImport | undefined>;
    public readonly ledgerEnabled!: pulumi.Output<boolean>;
    public readonly licenseType!: pulumi.Output<string>;
    public readonly longTermRetentionPolicy!: pulumi.Output<outputs.MssqlDatabaseLongTermRetentionPolicy | undefined>;
    public readonly maintenanceConfigurationName!: pulumi.Output<string>;
    public readonly maxSizeGb!: pulumi.Output<number>;
    public readonly minCapacity!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly readReplicaCount!: pulumi.Output<number>;
    public readonly readScale!: pulumi.Output<boolean>;
    public readonly recoverDatabaseId!: pulumi.Output<string | undefined>;
    public readonly recoveryPointId!: pulumi.Output<string | undefined>;
    public readonly restoreDroppedDatabaseId!: pulumi.Output<string | undefined>;
    public readonly restoreLongTermRetentionBackupId!: pulumi.Output<string | undefined>;
    public readonly restorePointInTime!: pulumi.Output<string>;
    public readonly sampleName!: pulumi.Output<string>;
    public readonly secondaryType!: pulumi.Output<string>;
    public readonly serverId!: pulumi.Output<string>;
    public readonly shortTermRetentionPolicy!: pulumi.Output<outputs.MssqlDatabaseShortTermRetentionPolicy | undefined>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly storageAccountType!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly threatDetectionPolicy!: pulumi.Output<outputs.MssqlDatabaseThreatDetectionPolicy | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MssqlDatabaseTimeouts | undefined>;
    public readonly transparentDataEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly transparentDataEncryptionKeyAutomaticRotationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly transparentDataEncryptionKeyVaultKeyId!: pulumi.Output<string | undefined>;
    public readonly zoneRedundant!: pulumi.Output<boolean>;

    /**
     * Create a MssqlDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MssqlDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MssqlDatabaseArgs | MssqlDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MssqlDatabaseState | undefined;
            resourceInputs["autoPauseDelayInMinutes"] = state ? state.autoPauseDelayInMinutes : undefined;
            resourceInputs["collation"] = state ? state.collation : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["creationSourceDatabaseId"] = state ? state.creationSourceDatabaseId : undefined;
            resourceInputs["elasticPoolId"] = state ? state.elasticPoolId : undefined;
            resourceInputs["enclaveType"] = state ? state.enclaveType : undefined;
            resourceInputs["geoBackupEnabled"] = state ? state.geoBackupEnabled : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["import"] = state ? state.import : undefined;
            resourceInputs["ledgerEnabled"] = state ? state.ledgerEnabled : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["longTermRetentionPolicy"] = state ? state.longTermRetentionPolicy : undefined;
            resourceInputs["maintenanceConfigurationName"] = state ? state.maintenanceConfigurationName : undefined;
            resourceInputs["maxSizeGb"] = state ? state.maxSizeGb : undefined;
            resourceInputs["minCapacity"] = state ? state.minCapacity : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["readReplicaCount"] = state ? state.readReplicaCount : undefined;
            resourceInputs["readScale"] = state ? state.readScale : undefined;
            resourceInputs["recoverDatabaseId"] = state ? state.recoverDatabaseId : undefined;
            resourceInputs["recoveryPointId"] = state ? state.recoveryPointId : undefined;
            resourceInputs["restoreDroppedDatabaseId"] = state ? state.restoreDroppedDatabaseId : undefined;
            resourceInputs["restoreLongTermRetentionBackupId"] = state ? state.restoreLongTermRetentionBackupId : undefined;
            resourceInputs["restorePointInTime"] = state ? state.restorePointInTime : undefined;
            resourceInputs["sampleName"] = state ? state.sampleName : undefined;
            resourceInputs["secondaryType"] = state ? state.secondaryType : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["shortTermRetentionPolicy"] = state ? state.shortTermRetentionPolicy : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["storageAccountType"] = state ? state.storageAccountType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threatDetectionPolicy"] = state ? state.threatDetectionPolicy : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transparentDataEncryptionEnabled"] = state ? state.transparentDataEncryptionEnabled : undefined;
            resourceInputs["transparentDataEncryptionKeyAutomaticRotationEnabled"] = state ? state.transparentDataEncryptionKeyAutomaticRotationEnabled : undefined;
            resourceInputs["transparentDataEncryptionKeyVaultKeyId"] = state ? state.transparentDataEncryptionKeyVaultKeyId : undefined;
            resourceInputs["zoneRedundant"] = state ? state.zoneRedundant : undefined;
        } else {
            const args = argsOrState as MssqlDatabaseArgs | undefined;
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["autoPauseDelayInMinutes"] = args ? args.autoPauseDelayInMinutes : undefined;
            resourceInputs["collation"] = args ? args.collation : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["creationSourceDatabaseId"] = args ? args.creationSourceDatabaseId : undefined;
            resourceInputs["elasticPoolId"] = args ? args.elasticPoolId : undefined;
            resourceInputs["enclaveType"] = args ? args.enclaveType : undefined;
            resourceInputs["geoBackupEnabled"] = args ? args.geoBackupEnabled : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["import"] = args ? args.import : undefined;
            resourceInputs["ledgerEnabled"] = args ? args.ledgerEnabled : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["longTermRetentionPolicy"] = args ? args.longTermRetentionPolicy : undefined;
            resourceInputs["maintenanceConfigurationName"] = args ? args.maintenanceConfigurationName : undefined;
            resourceInputs["maxSizeGb"] = args ? args.maxSizeGb : undefined;
            resourceInputs["minCapacity"] = args ? args.minCapacity : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["readReplicaCount"] = args ? args.readReplicaCount : undefined;
            resourceInputs["readScale"] = args ? args.readScale : undefined;
            resourceInputs["recoverDatabaseId"] = args ? args.recoverDatabaseId : undefined;
            resourceInputs["recoveryPointId"] = args ? args.recoveryPointId : undefined;
            resourceInputs["restoreDroppedDatabaseId"] = args ? args.restoreDroppedDatabaseId : undefined;
            resourceInputs["restoreLongTermRetentionBackupId"] = args ? args.restoreLongTermRetentionBackupId : undefined;
            resourceInputs["restorePointInTime"] = args ? args.restorePointInTime : undefined;
            resourceInputs["sampleName"] = args ? args.sampleName : undefined;
            resourceInputs["secondaryType"] = args ? args.secondaryType : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["shortTermRetentionPolicy"] = args ? args.shortTermRetentionPolicy : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["storageAccountType"] = args ? args.storageAccountType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threatDetectionPolicy"] = args ? args.threatDetectionPolicy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transparentDataEncryptionEnabled"] = args ? args.transparentDataEncryptionEnabled : undefined;
            resourceInputs["transparentDataEncryptionKeyAutomaticRotationEnabled"] = args ? args.transparentDataEncryptionKeyAutomaticRotationEnabled : undefined;
            resourceInputs["transparentDataEncryptionKeyVaultKeyId"] = args ? args.transparentDataEncryptionKeyVaultKeyId : undefined;
            resourceInputs["zoneRedundant"] = args ? args.zoneRedundant : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MssqlDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MssqlDatabase resources.
 */
export interface MssqlDatabaseState {
    autoPauseDelayInMinutes?: pulumi.Input<number>;
    collation?: pulumi.Input<string>;
    createMode?: pulumi.Input<string>;
    creationSourceDatabaseId?: pulumi.Input<string>;
    elasticPoolId?: pulumi.Input<string>;
    enclaveType?: pulumi.Input<string>;
    geoBackupEnabled?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.MssqlDatabaseIdentity>;
    import?: pulumi.Input<inputs.MssqlDatabaseImport>;
    ledgerEnabled?: pulumi.Input<boolean>;
    licenseType?: pulumi.Input<string>;
    longTermRetentionPolicy?: pulumi.Input<inputs.MssqlDatabaseLongTermRetentionPolicy>;
    maintenanceConfigurationName?: pulumi.Input<string>;
    maxSizeGb?: pulumi.Input<number>;
    minCapacity?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    readReplicaCount?: pulumi.Input<number>;
    readScale?: pulumi.Input<boolean>;
    recoverDatabaseId?: pulumi.Input<string>;
    recoveryPointId?: pulumi.Input<string>;
    restoreDroppedDatabaseId?: pulumi.Input<string>;
    restoreLongTermRetentionBackupId?: pulumi.Input<string>;
    restorePointInTime?: pulumi.Input<string>;
    sampleName?: pulumi.Input<string>;
    secondaryType?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    shortTermRetentionPolicy?: pulumi.Input<inputs.MssqlDatabaseShortTermRetentionPolicy>;
    skuName?: pulumi.Input<string>;
    storageAccountType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    threatDetectionPolicy?: pulumi.Input<inputs.MssqlDatabaseThreatDetectionPolicy>;
    timeouts?: pulumi.Input<inputs.MssqlDatabaseTimeouts>;
    transparentDataEncryptionEnabled?: pulumi.Input<boolean>;
    transparentDataEncryptionKeyAutomaticRotationEnabled?: pulumi.Input<boolean>;
    transparentDataEncryptionKeyVaultKeyId?: pulumi.Input<string>;
    zoneRedundant?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MssqlDatabase resource.
 */
export interface MssqlDatabaseArgs {
    autoPauseDelayInMinutes?: pulumi.Input<number>;
    collation?: pulumi.Input<string>;
    createMode?: pulumi.Input<string>;
    creationSourceDatabaseId?: pulumi.Input<string>;
    elasticPoolId?: pulumi.Input<string>;
    enclaveType?: pulumi.Input<string>;
    geoBackupEnabled?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.MssqlDatabaseIdentity>;
    import?: pulumi.Input<inputs.MssqlDatabaseImport>;
    ledgerEnabled?: pulumi.Input<boolean>;
    licenseType?: pulumi.Input<string>;
    longTermRetentionPolicy?: pulumi.Input<inputs.MssqlDatabaseLongTermRetentionPolicy>;
    maintenanceConfigurationName?: pulumi.Input<string>;
    maxSizeGb?: pulumi.Input<number>;
    minCapacity?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    readReplicaCount?: pulumi.Input<number>;
    readScale?: pulumi.Input<boolean>;
    recoverDatabaseId?: pulumi.Input<string>;
    recoveryPointId?: pulumi.Input<string>;
    restoreDroppedDatabaseId?: pulumi.Input<string>;
    restoreLongTermRetentionBackupId?: pulumi.Input<string>;
    restorePointInTime?: pulumi.Input<string>;
    sampleName?: pulumi.Input<string>;
    secondaryType?: pulumi.Input<string>;
    serverId: pulumi.Input<string>;
    shortTermRetentionPolicy?: pulumi.Input<inputs.MssqlDatabaseShortTermRetentionPolicy>;
    skuName?: pulumi.Input<string>;
    storageAccountType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    threatDetectionPolicy?: pulumi.Input<inputs.MssqlDatabaseThreatDetectionPolicy>;
    timeouts?: pulumi.Input<inputs.MssqlDatabaseTimeouts>;
    transparentDataEncryptionEnabled?: pulumi.Input<boolean>;
    transparentDataEncryptionKeyAutomaticRotationEnabled?: pulumi.Input<boolean>;
    transparentDataEncryptionKeyVaultKeyId?: pulumi.Input<string>;
    zoneRedundant?: pulumi.Input<boolean>;
}
