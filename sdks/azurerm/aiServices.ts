// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AiServices extends pulumi.CustomResource {
    /**
     * Get an existing AiServices resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AiServicesState, opts?: pulumi.CustomResourceOptions): AiServices {
        return new AiServices(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/aiServices:AiServices';

    /**
     * Returns true if the given object is an instance of AiServices.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AiServices {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AiServices.__pulumiType;
    }

    public readonly customSubdomainName!: pulumi.Output<string | undefined>;
    public readonly customerManagedKey!: pulumi.Output<outputs.AiServicesCustomerManagedKey | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly fqdns!: pulumi.Output<string[] | undefined>;
    public readonly identity!: pulumi.Output<outputs.AiServicesIdentity | undefined>;
    public readonly localAuthenticationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkAcls!: pulumi.Output<outputs.AiServicesNetworkAcls | undefined>;
    public readonly outboundNetworkAccessRestricted!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly primaryAccessKey!: pulumi.Output<string>;
    public readonly publicNetworkAccess!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly secondaryAccessKey!: pulumi.Output<string>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly storages!: pulumi.Output<outputs.AiServicesStorage[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AiServicesTimeouts | undefined>;

    /**
     * Create a AiServices resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AiServicesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AiServicesArgs | AiServicesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AiServicesState | undefined;
            resourceInputs["customSubdomainName"] = state ? state.customSubdomainName : undefined;
            resourceInputs["customerManagedKey"] = state ? state.customerManagedKey : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["fqdns"] = state ? state.fqdns : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["localAuthenticationEnabled"] = state ? state.localAuthenticationEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkAcls"] = state ? state.networkAcls : undefined;
            resourceInputs["outboundNetworkAccessRestricted"] = state ? state.outboundNetworkAccessRestricted : undefined;
            resourceInputs["primaryAccessKey"] = state ? state.primaryAccessKey : undefined;
            resourceInputs["publicNetworkAccess"] = state ? state.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secondaryAccessKey"] = state ? state.secondaryAccessKey : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["storages"] = state ? state.storages : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AiServicesArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            resourceInputs["customSubdomainName"] = args ? args.customSubdomainName : undefined;
            resourceInputs["customerManagedKey"] = args ? args.customerManagedKey : undefined;
            resourceInputs["fqdns"] = args ? args.fqdns : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["localAuthenticationEnabled"] = args ? args.localAuthenticationEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkAcls"] = args ? args.networkAcls : undefined;
            resourceInputs["outboundNetworkAccessRestricted"] = args ? args.outboundNetworkAccessRestricted : undefined;
            resourceInputs["publicNetworkAccess"] = args ? args.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["storages"] = args ? args.storages : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["primaryAccessKey"] = undefined /*out*/;
            resourceInputs["secondaryAccessKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryAccessKey", "secondaryAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AiServices.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AiServices resources.
 */
export interface AiServicesState {
    customSubdomainName?: pulumi.Input<string>;
    customerManagedKey?: pulumi.Input<inputs.AiServicesCustomerManagedKey>;
    endpoint?: pulumi.Input<string>;
    fqdns?: pulumi.Input<pulumi.Input<string>[]>;
    identity?: pulumi.Input<inputs.AiServicesIdentity>;
    localAuthenticationEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkAcls?: pulumi.Input<inputs.AiServicesNetworkAcls>;
    outboundNetworkAccessRestricted?: pulumi.Input<boolean>;
    primaryAccessKey?: pulumi.Input<string>;
    publicNetworkAccess?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    secondaryAccessKey?: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    storages?: pulumi.Input<pulumi.Input<inputs.AiServicesStorage>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AiServicesTimeouts>;
}

/**
 * The set of arguments for constructing a AiServices resource.
 */
export interface AiServicesArgs {
    customSubdomainName?: pulumi.Input<string>;
    customerManagedKey?: pulumi.Input<inputs.AiServicesCustomerManagedKey>;
    fqdns?: pulumi.Input<pulumi.Input<string>[]>;
    identity?: pulumi.Input<inputs.AiServicesIdentity>;
    localAuthenticationEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkAcls?: pulumi.Input<inputs.AiServicesNetworkAcls>;
    outboundNetworkAccessRestricted?: pulumi.Input<boolean>;
    publicNetworkAccess?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    skuName: pulumi.Input<string>;
    storages?: pulumi.Input<pulumi.Input<inputs.AiServicesStorage>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AiServicesTimeouts>;
}
