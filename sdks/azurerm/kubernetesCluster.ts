// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesCluster extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesClusterState, opts?: pulumi.CustomResourceOptions): KubernetesCluster {
        return new KubernetesCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/kubernetesCluster:KubernetesCluster';

    /**
     * Returns true if the given object is an instance of KubernetesCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesCluster.__pulumiType;
    }

    public readonly aciConnectorLinux!: pulumi.Output<outputs.KubernetesClusterAciConnectorLinux | undefined>;
    public readonly apiServerAccessProfile!: pulumi.Output<outputs.KubernetesClusterApiServerAccessProfile | undefined>;
    public readonly autoScalerProfile!: pulumi.Output<outputs.KubernetesClusterAutoScalerProfile | undefined>;
    public readonly automaticUpgradeChannel!: pulumi.Output<string | undefined>;
    public readonly azureActiveDirectoryRoleBasedAccessControl!: pulumi.Output<outputs.KubernetesClusterAzureActiveDirectoryRoleBasedAccessControl | undefined>;
    public readonly azurePolicyEnabled!: pulumi.Output<boolean | undefined>;
    public readonly confidentialComputing!: pulumi.Output<outputs.KubernetesClusterConfidentialComputing | undefined>;
    public readonly costAnalysisEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly currentKubernetesVersion!: pulumi.Output<string>;
    public readonly defaultNodePool!: pulumi.Output<outputs.KubernetesClusterDefaultNodePool>;
    public readonly diskEncryptionSetId!: pulumi.Output<string | undefined>;
    public readonly dnsPrefix!: pulumi.Output<string | undefined>;
    public readonly dnsPrefixPrivateCluster!: pulumi.Output<string | undefined>;
    public readonly edgeZone!: pulumi.Output<string | undefined>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly httpApplicationRoutingEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly httpApplicationRoutingZoneName!: pulumi.Output<string>;
    public readonly httpProxyConfig!: pulumi.Output<outputs.KubernetesClusterHttpProxyConfig | undefined>;
    public readonly identity!: pulumi.Output<outputs.KubernetesClusterIdentity | undefined>;
    public readonly imageCleanerEnabled!: pulumi.Output<boolean | undefined>;
    public readonly imageCleanerIntervalHours!: pulumi.Output<number | undefined>;
    public readonly ingressApplicationGateway!: pulumi.Output<outputs.KubernetesClusterIngressApplicationGateway | undefined>;
    public readonly keyManagementService!: pulumi.Output<outputs.KubernetesClusterKeyManagementService | undefined>;
    public readonly keyVaultSecretsProvider!: pulumi.Output<outputs.KubernetesClusterKeyVaultSecretsProvider | undefined>;
    public /*out*/ readonly kubeAdminConfigRaw!: pulumi.Output<string>;
    public /*out*/ readonly kubeAdminConfigs!: pulumi.Output<outputs.KubernetesClusterKubeAdminConfig[]>;
    public /*out*/ readonly kubeConfigRaw!: pulumi.Output<string>;
    public /*out*/ readonly kubeConfigs!: pulumi.Output<outputs.KubernetesClusterKubeConfig[]>;
    public readonly kubeletIdentity!: pulumi.Output<outputs.KubernetesClusterKubeletIdentity | undefined>;
    public readonly kubernetesVersion!: pulumi.Output<string>;
    public readonly linuxProfile!: pulumi.Output<outputs.KubernetesClusterLinuxProfile | undefined>;
    public readonly localAccountDisabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly maintenanceWindow!: pulumi.Output<outputs.KubernetesClusterMaintenanceWindow | undefined>;
    public readonly maintenanceWindowAutoUpgrade!: pulumi.Output<outputs.KubernetesClusterMaintenanceWindowAutoUpgrade | undefined>;
    public readonly maintenanceWindowNodeOs!: pulumi.Output<outputs.KubernetesClusterMaintenanceWindowNodeOs | undefined>;
    public readonly microsoftDefender!: pulumi.Output<outputs.KubernetesClusterMicrosoftDefender | undefined>;
    public readonly monitorMetrics!: pulumi.Output<outputs.KubernetesClusterMonitorMetrics | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkProfile!: pulumi.Output<outputs.KubernetesClusterNetworkProfile | undefined>;
    public readonly nodeOsUpgradeChannel!: pulumi.Output<string | undefined>;
    public readonly nodeResourceGroup!: pulumi.Output<string>;
    public /*out*/ readonly nodeResourceGroupId!: pulumi.Output<string>;
    public readonly oidcIssuerEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly oidcIssuerUrl!: pulumi.Output<string>;
    public readonly omsAgent!: pulumi.Output<outputs.KubernetesClusterOmsAgent | undefined>;
    public readonly openServiceMeshEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly portalFqdn!: pulumi.Output<string>;
    public readonly privateClusterEnabled!: pulumi.Output<boolean | undefined>;
    public readonly privateClusterPublicFqdnEnabled!: pulumi.Output<boolean | undefined>;
    public readonly privateDnsZoneId!: pulumi.Output<string>;
    public /*out*/ readonly privateFqdn!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly roleBasedAccessControlEnabled!: pulumi.Output<boolean | undefined>;
    public readonly runCommandEnabled!: pulumi.Output<boolean | undefined>;
    public readonly serviceMeshProfile!: pulumi.Output<outputs.KubernetesClusterServiceMeshProfile | undefined>;
    public readonly servicePrincipal!: pulumi.Output<outputs.KubernetesClusterServicePrincipal | undefined>;
    public readonly skuTier!: pulumi.Output<string | undefined>;
    public readonly storageProfile!: pulumi.Output<outputs.KubernetesClusterStorageProfile | undefined>;
    public readonly supportPlan!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.KubernetesClusterTimeouts | undefined>;
    public readonly webAppRouting!: pulumi.Output<outputs.KubernetesClusterWebAppRouting | undefined>;
    public readonly windowsProfile!: pulumi.Output<outputs.KubernetesClusterWindowsProfile | undefined>;
    public readonly workloadAutoscalerProfile!: pulumi.Output<outputs.KubernetesClusterWorkloadAutoscalerProfile | undefined>;
    public readonly workloadIdentityEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a KubernetesCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesClusterArgs | KubernetesClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesClusterState | undefined;
            resourceInputs["aciConnectorLinux"] = state ? state.aciConnectorLinux : undefined;
            resourceInputs["apiServerAccessProfile"] = state ? state.apiServerAccessProfile : undefined;
            resourceInputs["autoScalerProfile"] = state ? state.autoScalerProfile : undefined;
            resourceInputs["automaticUpgradeChannel"] = state ? state.automaticUpgradeChannel : undefined;
            resourceInputs["azureActiveDirectoryRoleBasedAccessControl"] = state ? state.azureActiveDirectoryRoleBasedAccessControl : undefined;
            resourceInputs["azurePolicyEnabled"] = state ? state.azurePolicyEnabled : undefined;
            resourceInputs["confidentialComputing"] = state ? state.confidentialComputing : undefined;
            resourceInputs["costAnalysisEnabled"] = state ? state.costAnalysisEnabled : undefined;
            resourceInputs["currentKubernetesVersion"] = state ? state.currentKubernetesVersion : undefined;
            resourceInputs["defaultNodePool"] = state ? state.defaultNodePool : undefined;
            resourceInputs["diskEncryptionSetId"] = state ? state.diskEncryptionSetId : undefined;
            resourceInputs["dnsPrefix"] = state ? state.dnsPrefix : undefined;
            resourceInputs["dnsPrefixPrivateCluster"] = state ? state.dnsPrefixPrivateCluster : undefined;
            resourceInputs["edgeZone"] = state ? state.edgeZone : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["httpApplicationRoutingEnabled"] = state ? state.httpApplicationRoutingEnabled : undefined;
            resourceInputs["httpApplicationRoutingZoneName"] = state ? state.httpApplicationRoutingZoneName : undefined;
            resourceInputs["httpProxyConfig"] = state ? state.httpProxyConfig : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["imageCleanerEnabled"] = state ? state.imageCleanerEnabled : undefined;
            resourceInputs["imageCleanerIntervalHours"] = state ? state.imageCleanerIntervalHours : undefined;
            resourceInputs["ingressApplicationGateway"] = state ? state.ingressApplicationGateway : undefined;
            resourceInputs["keyManagementService"] = state ? state.keyManagementService : undefined;
            resourceInputs["keyVaultSecretsProvider"] = state ? state.keyVaultSecretsProvider : undefined;
            resourceInputs["kubeAdminConfigRaw"] = state ? state.kubeAdminConfigRaw : undefined;
            resourceInputs["kubeAdminConfigs"] = state ? state.kubeAdminConfigs : undefined;
            resourceInputs["kubeConfigRaw"] = state ? state.kubeConfigRaw : undefined;
            resourceInputs["kubeConfigs"] = state ? state.kubeConfigs : undefined;
            resourceInputs["kubeletIdentity"] = state ? state.kubeletIdentity : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["linuxProfile"] = state ? state.linuxProfile : undefined;
            resourceInputs["localAccountDisabled"] = state ? state.localAccountDisabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["maintenanceWindowAutoUpgrade"] = state ? state.maintenanceWindowAutoUpgrade : undefined;
            resourceInputs["maintenanceWindowNodeOs"] = state ? state.maintenanceWindowNodeOs : undefined;
            resourceInputs["microsoftDefender"] = state ? state.microsoftDefender : undefined;
            resourceInputs["monitorMetrics"] = state ? state.monitorMetrics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProfile"] = state ? state.networkProfile : undefined;
            resourceInputs["nodeOsUpgradeChannel"] = state ? state.nodeOsUpgradeChannel : undefined;
            resourceInputs["nodeResourceGroup"] = state ? state.nodeResourceGroup : undefined;
            resourceInputs["nodeResourceGroupId"] = state ? state.nodeResourceGroupId : undefined;
            resourceInputs["oidcIssuerEnabled"] = state ? state.oidcIssuerEnabled : undefined;
            resourceInputs["oidcIssuerUrl"] = state ? state.oidcIssuerUrl : undefined;
            resourceInputs["omsAgent"] = state ? state.omsAgent : undefined;
            resourceInputs["openServiceMeshEnabled"] = state ? state.openServiceMeshEnabled : undefined;
            resourceInputs["portalFqdn"] = state ? state.portalFqdn : undefined;
            resourceInputs["privateClusterEnabled"] = state ? state.privateClusterEnabled : undefined;
            resourceInputs["privateClusterPublicFqdnEnabled"] = state ? state.privateClusterPublicFqdnEnabled : undefined;
            resourceInputs["privateDnsZoneId"] = state ? state.privateDnsZoneId : undefined;
            resourceInputs["privateFqdn"] = state ? state.privateFqdn : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["roleBasedAccessControlEnabled"] = state ? state.roleBasedAccessControlEnabled : undefined;
            resourceInputs["runCommandEnabled"] = state ? state.runCommandEnabled : undefined;
            resourceInputs["serviceMeshProfile"] = state ? state.serviceMeshProfile : undefined;
            resourceInputs["servicePrincipal"] = state ? state.servicePrincipal : undefined;
            resourceInputs["skuTier"] = state ? state.skuTier : undefined;
            resourceInputs["storageProfile"] = state ? state.storageProfile : undefined;
            resourceInputs["supportPlan"] = state ? state.supportPlan : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["webAppRouting"] = state ? state.webAppRouting : undefined;
            resourceInputs["windowsProfile"] = state ? state.windowsProfile : undefined;
            resourceInputs["workloadAutoscalerProfile"] = state ? state.workloadAutoscalerProfile : undefined;
            resourceInputs["workloadIdentityEnabled"] = state ? state.workloadIdentityEnabled : undefined;
        } else {
            const args = argsOrState as KubernetesClusterArgs | undefined;
            if ((!args || args.defaultNodePool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultNodePool'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["aciConnectorLinux"] = args ? args.aciConnectorLinux : undefined;
            resourceInputs["apiServerAccessProfile"] = args ? args.apiServerAccessProfile : undefined;
            resourceInputs["autoScalerProfile"] = args ? args.autoScalerProfile : undefined;
            resourceInputs["automaticUpgradeChannel"] = args ? args.automaticUpgradeChannel : undefined;
            resourceInputs["azureActiveDirectoryRoleBasedAccessControl"] = args ? args.azureActiveDirectoryRoleBasedAccessControl : undefined;
            resourceInputs["azurePolicyEnabled"] = args ? args.azurePolicyEnabled : undefined;
            resourceInputs["confidentialComputing"] = args ? args.confidentialComputing : undefined;
            resourceInputs["costAnalysisEnabled"] = args ? args.costAnalysisEnabled : undefined;
            resourceInputs["defaultNodePool"] = args ? args.defaultNodePool : undefined;
            resourceInputs["diskEncryptionSetId"] = args ? args.diskEncryptionSetId : undefined;
            resourceInputs["dnsPrefix"] = args ? args.dnsPrefix : undefined;
            resourceInputs["dnsPrefixPrivateCluster"] = args ? args.dnsPrefixPrivateCluster : undefined;
            resourceInputs["edgeZone"] = args ? args.edgeZone : undefined;
            resourceInputs["httpApplicationRoutingEnabled"] = args ? args.httpApplicationRoutingEnabled : undefined;
            resourceInputs["httpProxyConfig"] = args ? args.httpProxyConfig : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["imageCleanerEnabled"] = args ? args.imageCleanerEnabled : undefined;
            resourceInputs["imageCleanerIntervalHours"] = args ? args.imageCleanerIntervalHours : undefined;
            resourceInputs["ingressApplicationGateway"] = args ? args.ingressApplicationGateway : undefined;
            resourceInputs["keyManagementService"] = args ? args.keyManagementService : undefined;
            resourceInputs["keyVaultSecretsProvider"] = args ? args.keyVaultSecretsProvider : undefined;
            resourceInputs["kubeletIdentity"] = args ? args.kubeletIdentity : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["linuxProfile"] = args ? args.linuxProfile : undefined;
            resourceInputs["localAccountDisabled"] = args ? args.localAccountDisabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["maintenanceWindowAutoUpgrade"] = args ? args.maintenanceWindowAutoUpgrade : undefined;
            resourceInputs["maintenanceWindowNodeOs"] = args ? args.maintenanceWindowNodeOs : undefined;
            resourceInputs["microsoftDefender"] = args ? args.microsoftDefender : undefined;
            resourceInputs["monitorMetrics"] = args ? args.monitorMetrics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProfile"] = args ? args.networkProfile : undefined;
            resourceInputs["nodeOsUpgradeChannel"] = args ? args.nodeOsUpgradeChannel : undefined;
            resourceInputs["nodeResourceGroup"] = args ? args.nodeResourceGroup : undefined;
            resourceInputs["oidcIssuerEnabled"] = args ? args.oidcIssuerEnabled : undefined;
            resourceInputs["omsAgent"] = args ? args.omsAgent : undefined;
            resourceInputs["openServiceMeshEnabled"] = args ? args.openServiceMeshEnabled : undefined;
            resourceInputs["privateClusterEnabled"] = args ? args.privateClusterEnabled : undefined;
            resourceInputs["privateClusterPublicFqdnEnabled"] = args ? args.privateClusterPublicFqdnEnabled : undefined;
            resourceInputs["privateDnsZoneId"] = args ? args.privateDnsZoneId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["roleBasedAccessControlEnabled"] = args ? args.roleBasedAccessControlEnabled : undefined;
            resourceInputs["runCommandEnabled"] = args ? args.runCommandEnabled : undefined;
            resourceInputs["serviceMeshProfile"] = args ? args.serviceMeshProfile : undefined;
            resourceInputs["servicePrincipal"] = args ? args.servicePrincipal : undefined;
            resourceInputs["skuTier"] = args ? args.skuTier : undefined;
            resourceInputs["storageProfile"] = args ? args.storageProfile : undefined;
            resourceInputs["supportPlan"] = args ? args.supportPlan : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["webAppRouting"] = args ? args.webAppRouting : undefined;
            resourceInputs["windowsProfile"] = args ? args.windowsProfile : undefined;
            resourceInputs["workloadAutoscalerProfile"] = args ? args.workloadAutoscalerProfile : undefined;
            resourceInputs["workloadIdentityEnabled"] = args ? args.workloadIdentityEnabled : undefined;
            resourceInputs["currentKubernetesVersion"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["httpApplicationRoutingZoneName"] = undefined /*out*/;
            resourceInputs["kubeAdminConfigRaw"] = undefined /*out*/;
            resourceInputs["kubeAdminConfigs"] = undefined /*out*/;
            resourceInputs["kubeConfigRaw"] = undefined /*out*/;
            resourceInputs["kubeConfigs"] = undefined /*out*/;
            resourceInputs["nodeResourceGroupId"] = undefined /*out*/;
            resourceInputs["oidcIssuerUrl"] = undefined /*out*/;
            resourceInputs["portalFqdn"] = undefined /*out*/;
            resourceInputs["privateFqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeAdminConfigRaw", "kubeAdminConfigs", "kubeConfigRaw", "kubeConfigs"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KubernetesCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesCluster resources.
 */
export interface KubernetesClusterState {
    aciConnectorLinux?: pulumi.Input<inputs.KubernetesClusterAciConnectorLinux>;
    apiServerAccessProfile?: pulumi.Input<inputs.KubernetesClusterApiServerAccessProfile>;
    autoScalerProfile?: pulumi.Input<inputs.KubernetesClusterAutoScalerProfile>;
    automaticUpgradeChannel?: pulumi.Input<string>;
    azureActiveDirectoryRoleBasedAccessControl?: pulumi.Input<inputs.KubernetesClusterAzureActiveDirectoryRoleBasedAccessControl>;
    azurePolicyEnabled?: pulumi.Input<boolean>;
    confidentialComputing?: pulumi.Input<inputs.KubernetesClusterConfidentialComputing>;
    costAnalysisEnabled?: pulumi.Input<boolean>;
    currentKubernetesVersion?: pulumi.Input<string>;
    defaultNodePool?: pulumi.Input<inputs.KubernetesClusterDefaultNodePool>;
    diskEncryptionSetId?: pulumi.Input<string>;
    dnsPrefix?: pulumi.Input<string>;
    dnsPrefixPrivateCluster?: pulumi.Input<string>;
    edgeZone?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    httpApplicationRoutingEnabled?: pulumi.Input<boolean>;
    httpApplicationRoutingZoneName?: pulumi.Input<string>;
    httpProxyConfig?: pulumi.Input<inputs.KubernetesClusterHttpProxyConfig>;
    identity?: pulumi.Input<inputs.KubernetesClusterIdentity>;
    imageCleanerEnabled?: pulumi.Input<boolean>;
    imageCleanerIntervalHours?: pulumi.Input<number>;
    ingressApplicationGateway?: pulumi.Input<inputs.KubernetesClusterIngressApplicationGateway>;
    keyManagementService?: pulumi.Input<inputs.KubernetesClusterKeyManagementService>;
    keyVaultSecretsProvider?: pulumi.Input<inputs.KubernetesClusterKeyVaultSecretsProvider>;
    kubeAdminConfigRaw?: pulumi.Input<string>;
    kubeAdminConfigs?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterKubeAdminConfig>[]>;
    kubeConfigRaw?: pulumi.Input<string>;
    kubeConfigs?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterKubeConfig>[]>;
    kubeletIdentity?: pulumi.Input<inputs.KubernetesClusterKubeletIdentity>;
    kubernetesVersion?: pulumi.Input<string>;
    linuxProfile?: pulumi.Input<inputs.KubernetesClusterLinuxProfile>;
    localAccountDisabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    maintenanceWindow?: pulumi.Input<inputs.KubernetesClusterMaintenanceWindow>;
    maintenanceWindowAutoUpgrade?: pulumi.Input<inputs.KubernetesClusterMaintenanceWindowAutoUpgrade>;
    maintenanceWindowNodeOs?: pulumi.Input<inputs.KubernetesClusterMaintenanceWindowNodeOs>;
    microsoftDefender?: pulumi.Input<inputs.KubernetesClusterMicrosoftDefender>;
    monitorMetrics?: pulumi.Input<inputs.KubernetesClusterMonitorMetrics>;
    name?: pulumi.Input<string>;
    networkProfile?: pulumi.Input<inputs.KubernetesClusterNetworkProfile>;
    nodeOsUpgradeChannel?: pulumi.Input<string>;
    nodeResourceGroup?: pulumi.Input<string>;
    nodeResourceGroupId?: pulumi.Input<string>;
    oidcIssuerEnabled?: pulumi.Input<boolean>;
    oidcIssuerUrl?: pulumi.Input<string>;
    omsAgent?: pulumi.Input<inputs.KubernetesClusterOmsAgent>;
    openServiceMeshEnabled?: pulumi.Input<boolean>;
    portalFqdn?: pulumi.Input<string>;
    privateClusterEnabled?: pulumi.Input<boolean>;
    privateClusterPublicFqdnEnabled?: pulumi.Input<boolean>;
    privateDnsZoneId?: pulumi.Input<string>;
    privateFqdn?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    roleBasedAccessControlEnabled?: pulumi.Input<boolean>;
    runCommandEnabled?: pulumi.Input<boolean>;
    serviceMeshProfile?: pulumi.Input<inputs.KubernetesClusterServiceMeshProfile>;
    servicePrincipal?: pulumi.Input<inputs.KubernetesClusterServicePrincipal>;
    skuTier?: pulumi.Input<string>;
    storageProfile?: pulumi.Input<inputs.KubernetesClusterStorageProfile>;
    supportPlan?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KubernetesClusterTimeouts>;
    webAppRouting?: pulumi.Input<inputs.KubernetesClusterWebAppRouting>;
    windowsProfile?: pulumi.Input<inputs.KubernetesClusterWindowsProfile>;
    workloadAutoscalerProfile?: pulumi.Input<inputs.KubernetesClusterWorkloadAutoscalerProfile>;
    workloadIdentityEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a KubernetesCluster resource.
 */
export interface KubernetesClusterArgs {
    aciConnectorLinux?: pulumi.Input<inputs.KubernetesClusterAciConnectorLinux>;
    apiServerAccessProfile?: pulumi.Input<inputs.KubernetesClusterApiServerAccessProfile>;
    autoScalerProfile?: pulumi.Input<inputs.KubernetesClusterAutoScalerProfile>;
    automaticUpgradeChannel?: pulumi.Input<string>;
    azureActiveDirectoryRoleBasedAccessControl?: pulumi.Input<inputs.KubernetesClusterAzureActiveDirectoryRoleBasedAccessControl>;
    azurePolicyEnabled?: pulumi.Input<boolean>;
    confidentialComputing?: pulumi.Input<inputs.KubernetesClusterConfidentialComputing>;
    costAnalysisEnabled?: pulumi.Input<boolean>;
    defaultNodePool: pulumi.Input<inputs.KubernetesClusterDefaultNodePool>;
    diskEncryptionSetId?: pulumi.Input<string>;
    dnsPrefix?: pulumi.Input<string>;
    dnsPrefixPrivateCluster?: pulumi.Input<string>;
    edgeZone?: pulumi.Input<string>;
    httpApplicationRoutingEnabled?: pulumi.Input<boolean>;
    httpProxyConfig?: pulumi.Input<inputs.KubernetesClusterHttpProxyConfig>;
    identity?: pulumi.Input<inputs.KubernetesClusterIdentity>;
    imageCleanerEnabled?: pulumi.Input<boolean>;
    imageCleanerIntervalHours?: pulumi.Input<number>;
    ingressApplicationGateway?: pulumi.Input<inputs.KubernetesClusterIngressApplicationGateway>;
    keyManagementService?: pulumi.Input<inputs.KubernetesClusterKeyManagementService>;
    keyVaultSecretsProvider?: pulumi.Input<inputs.KubernetesClusterKeyVaultSecretsProvider>;
    kubeletIdentity?: pulumi.Input<inputs.KubernetesClusterKubeletIdentity>;
    kubernetesVersion?: pulumi.Input<string>;
    linuxProfile?: pulumi.Input<inputs.KubernetesClusterLinuxProfile>;
    localAccountDisabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    maintenanceWindow?: pulumi.Input<inputs.KubernetesClusterMaintenanceWindow>;
    maintenanceWindowAutoUpgrade?: pulumi.Input<inputs.KubernetesClusterMaintenanceWindowAutoUpgrade>;
    maintenanceWindowNodeOs?: pulumi.Input<inputs.KubernetesClusterMaintenanceWindowNodeOs>;
    microsoftDefender?: pulumi.Input<inputs.KubernetesClusterMicrosoftDefender>;
    monitorMetrics?: pulumi.Input<inputs.KubernetesClusterMonitorMetrics>;
    name?: pulumi.Input<string>;
    networkProfile?: pulumi.Input<inputs.KubernetesClusterNetworkProfile>;
    nodeOsUpgradeChannel?: pulumi.Input<string>;
    nodeResourceGroup?: pulumi.Input<string>;
    oidcIssuerEnabled?: pulumi.Input<boolean>;
    omsAgent?: pulumi.Input<inputs.KubernetesClusterOmsAgent>;
    openServiceMeshEnabled?: pulumi.Input<boolean>;
    privateClusterEnabled?: pulumi.Input<boolean>;
    privateClusterPublicFqdnEnabled?: pulumi.Input<boolean>;
    privateDnsZoneId?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    roleBasedAccessControlEnabled?: pulumi.Input<boolean>;
    runCommandEnabled?: pulumi.Input<boolean>;
    serviceMeshProfile?: pulumi.Input<inputs.KubernetesClusterServiceMeshProfile>;
    servicePrincipal?: pulumi.Input<inputs.KubernetesClusterServicePrincipal>;
    skuTier?: pulumi.Input<string>;
    storageProfile?: pulumi.Input<inputs.KubernetesClusterStorageProfile>;
    supportPlan?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KubernetesClusterTimeouts>;
    webAppRouting?: pulumi.Input<inputs.KubernetesClusterWebAppRouting>;
    windowsProfile?: pulumi.Input<inputs.KubernetesClusterWindowsProfile>;
    workloadAutoscalerProfile?: pulumi.Input<inputs.KubernetesClusterWorkloadAutoscalerProfile>;
    workloadIdentityEnabled?: pulumi.Input<boolean>;
}
