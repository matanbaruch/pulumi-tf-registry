// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagedDisk extends pulumi.CustomResource {
    /**
     * Get an existing ManagedDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedDiskState, opts?: pulumi.CustomResourceOptions): ManagedDisk {
        return new ManagedDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/managedDisk:ManagedDisk';

    /**
     * Returns true if the given object is an instance of ManagedDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedDisk.__pulumiType;
    }

    public readonly createOption!: pulumi.Output<string>;
    public readonly diskAccessId!: pulumi.Output<string | undefined>;
    public readonly diskEncryptionSetId!: pulumi.Output<string | undefined>;
    public readonly diskIopsReadOnly!: pulumi.Output<number>;
    public readonly diskIopsReadWrite!: pulumi.Output<number>;
    public readonly diskMbpsReadOnly!: pulumi.Output<number>;
    public readonly diskMbpsReadWrite!: pulumi.Output<number>;
    public readonly diskSizeGb!: pulumi.Output<number>;
    public readonly edgeZone!: pulumi.Output<string | undefined>;
    public readonly encryptionSettings!: pulumi.Output<outputs.ManagedDiskEncryptionSettings | undefined>;
    public readonly galleryImageReferenceId!: pulumi.Output<string | undefined>;
    public readonly hyperVGeneration!: pulumi.Output<string | undefined>;
    public readonly imageReferenceId!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly logicalSectorSize!: pulumi.Output<number>;
    public readonly maxShares!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkAccessPolicy!: pulumi.Output<string | undefined>;
    public readonly onDemandBurstingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly optimizedFrequentAttachEnabled!: pulumi.Output<boolean | undefined>;
    public readonly osType!: pulumi.Output<string | undefined>;
    public readonly performancePlusEnabled!: pulumi.Output<boolean | undefined>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly secureVmDiskEncryptionSetId!: pulumi.Output<string | undefined>;
    public readonly securityType!: pulumi.Output<string | undefined>;
    public readonly sourceResourceId!: pulumi.Output<string | undefined>;
    public readonly sourceUri!: pulumi.Output<string>;
    public readonly storageAccountId!: pulumi.Output<string | undefined>;
    public readonly storageAccountType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tier!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ManagedDiskTimeouts | undefined>;
    public readonly trustedLaunchEnabled!: pulumi.Output<boolean | undefined>;
    public readonly uploadSizeBytes!: pulumi.Output<number | undefined>;
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a ManagedDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedDiskArgs | ManagedDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedDiskState | undefined;
            resourceInputs["createOption"] = state ? state.createOption : undefined;
            resourceInputs["diskAccessId"] = state ? state.diskAccessId : undefined;
            resourceInputs["diskEncryptionSetId"] = state ? state.diskEncryptionSetId : undefined;
            resourceInputs["diskIopsReadOnly"] = state ? state.diskIopsReadOnly : undefined;
            resourceInputs["diskIopsReadWrite"] = state ? state.diskIopsReadWrite : undefined;
            resourceInputs["diskMbpsReadOnly"] = state ? state.diskMbpsReadOnly : undefined;
            resourceInputs["diskMbpsReadWrite"] = state ? state.diskMbpsReadWrite : undefined;
            resourceInputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            resourceInputs["edgeZone"] = state ? state.edgeZone : undefined;
            resourceInputs["encryptionSettings"] = state ? state.encryptionSettings : undefined;
            resourceInputs["galleryImageReferenceId"] = state ? state.galleryImageReferenceId : undefined;
            resourceInputs["hyperVGeneration"] = state ? state.hyperVGeneration : undefined;
            resourceInputs["imageReferenceId"] = state ? state.imageReferenceId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logicalSectorSize"] = state ? state.logicalSectorSize : undefined;
            resourceInputs["maxShares"] = state ? state.maxShares : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkAccessPolicy"] = state ? state.networkAccessPolicy : undefined;
            resourceInputs["onDemandBurstingEnabled"] = state ? state.onDemandBurstingEnabled : undefined;
            resourceInputs["optimizedFrequentAttachEnabled"] = state ? state.optimizedFrequentAttachEnabled : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["performancePlusEnabled"] = state ? state.performancePlusEnabled : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secureVmDiskEncryptionSetId"] = state ? state.secureVmDiskEncryptionSetId : undefined;
            resourceInputs["securityType"] = state ? state.securityType : undefined;
            resourceInputs["sourceResourceId"] = state ? state.sourceResourceId : undefined;
            resourceInputs["sourceUri"] = state ? state.sourceUri : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["storageAccountType"] = state ? state.storageAccountType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trustedLaunchEnabled"] = state ? state.trustedLaunchEnabled : undefined;
            resourceInputs["uploadSizeBytes"] = state ? state.uploadSizeBytes : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ManagedDiskArgs | undefined;
            if ((!args || args.createOption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'createOption'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageAccountType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountType'");
            }
            resourceInputs["createOption"] = args ? args.createOption : undefined;
            resourceInputs["diskAccessId"] = args ? args.diskAccessId : undefined;
            resourceInputs["diskEncryptionSetId"] = args ? args.diskEncryptionSetId : undefined;
            resourceInputs["diskIopsReadOnly"] = args ? args.diskIopsReadOnly : undefined;
            resourceInputs["diskIopsReadWrite"] = args ? args.diskIopsReadWrite : undefined;
            resourceInputs["diskMbpsReadOnly"] = args ? args.diskMbpsReadOnly : undefined;
            resourceInputs["diskMbpsReadWrite"] = args ? args.diskMbpsReadWrite : undefined;
            resourceInputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            resourceInputs["edgeZone"] = args ? args.edgeZone : undefined;
            resourceInputs["encryptionSettings"] = args ? args.encryptionSettings : undefined;
            resourceInputs["galleryImageReferenceId"] = args ? args.galleryImageReferenceId : undefined;
            resourceInputs["hyperVGeneration"] = args ? args.hyperVGeneration : undefined;
            resourceInputs["imageReferenceId"] = args ? args.imageReferenceId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logicalSectorSize"] = args ? args.logicalSectorSize : undefined;
            resourceInputs["maxShares"] = args ? args.maxShares : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkAccessPolicy"] = args ? args.networkAccessPolicy : undefined;
            resourceInputs["onDemandBurstingEnabled"] = args ? args.onDemandBurstingEnabled : undefined;
            resourceInputs["optimizedFrequentAttachEnabled"] = args ? args.optimizedFrequentAttachEnabled : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["performancePlusEnabled"] = args ? args.performancePlusEnabled : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["secureVmDiskEncryptionSetId"] = args ? args.secureVmDiskEncryptionSetId : undefined;
            resourceInputs["securityType"] = args ? args.securityType : undefined;
            resourceInputs["sourceResourceId"] = args ? args.sourceResourceId : undefined;
            resourceInputs["sourceUri"] = args ? args.sourceUri : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["storageAccountType"] = args ? args.storageAccountType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trustedLaunchEnabled"] = args ? args.trustedLaunchEnabled : undefined;
            resourceInputs["uploadSizeBytes"] = args ? args.uploadSizeBytes : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagedDisk resources.
 */
export interface ManagedDiskState {
    createOption?: pulumi.Input<string>;
    diskAccessId?: pulumi.Input<string>;
    diskEncryptionSetId?: pulumi.Input<string>;
    diskIopsReadOnly?: pulumi.Input<number>;
    diskIopsReadWrite?: pulumi.Input<number>;
    diskMbpsReadOnly?: pulumi.Input<number>;
    diskMbpsReadWrite?: pulumi.Input<number>;
    diskSizeGb?: pulumi.Input<number>;
    edgeZone?: pulumi.Input<string>;
    encryptionSettings?: pulumi.Input<inputs.ManagedDiskEncryptionSettings>;
    galleryImageReferenceId?: pulumi.Input<string>;
    hyperVGeneration?: pulumi.Input<string>;
    imageReferenceId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    logicalSectorSize?: pulumi.Input<number>;
    maxShares?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkAccessPolicy?: pulumi.Input<string>;
    onDemandBurstingEnabled?: pulumi.Input<boolean>;
    optimizedFrequentAttachEnabled?: pulumi.Input<boolean>;
    osType?: pulumi.Input<string>;
    performancePlusEnabled?: pulumi.Input<boolean>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    secureVmDiskEncryptionSetId?: pulumi.Input<string>;
    securityType?: pulumi.Input<string>;
    sourceResourceId?: pulumi.Input<string>;
    sourceUri?: pulumi.Input<string>;
    storageAccountId?: pulumi.Input<string>;
    storageAccountType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tier?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ManagedDiskTimeouts>;
    trustedLaunchEnabled?: pulumi.Input<boolean>;
    uploadSizeBytes?: pulumi.Input<number>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedDisk resource.
 */
export interface ManagedDiskArgs {
    createOption: pulumi.Input<string>;
    diskAccessId?: pulumi.Input<string>;
    diskEncryptionSetId?: pulumi.Input<string>;
    diskIopsReadOnly?: pulumi.Input<number>;
    diskIopsReadWrite?: pulumi.Input<number>;
    diskMbpsReadOnly?: pulumi.Input<number>;
    diskMbpsReadWrite?: pulumi.Input<number>;
    diskSizeGb?: pulumi.Input<number>;
    edgeZone?: pulumi.Input<string>;
    encryptionSettings?: pulumi.Input<inputs.ManagedDiskEncryptionSettings>;
    galleryImageReferenceId?: pulumi.Input<string>;
    hyperVGeneration?: pulumi.Input<string>;
    imageReferenceId?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    logicalSectorSize?: pulumi.Input<number>;
    maxShares?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkAccessPolicy?: pulumi.Input<string>;
    onDemandBurstingEnabled?: pulumi.Input<boolean>;
    optimizedFrequentAttachEnabled?: pulumi.Input<boolean>;
    osType?: pulumi.Input<string>;
    performancePlusEnabled?: pulumi.Input<boolean>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    secureVmDiskEncryptionSetId?: pulumi.Input<string>;
    securityType?: pulumi.Input<string>;
    sourceResourceId?: pulumi.Input<string>;
    sourceUri?: pulumi.Input<string>;
    storageAccountId?: pulumi.Input<string>;
    storageAccountType: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tier?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ManagedDiskTimeouts>;
    trustedLaunchEnabled?: pulumi.Input<boolean>;
    uploadSizeBytes?: pulumi.Input<number>;
    zone?: pulumi.Input<string>;
}
