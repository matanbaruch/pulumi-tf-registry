// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplicationGateway(args: GetApplicationGatewayArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationGatewayResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getApplicationGateway:getApplicationGateway", {
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplicationGateway.
 */
export interface GetApplicationGatewayArgs {
    id?: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetApplicationGatewayTimeouts;
}

/**
 * A collection of values returned by getApplicationGateway.
 */
export interface GetApplicationGatewayResult {
    readonly authenticationCertificates: outputs.GetApplicationGatewayAuthenticationCertificate[];
    readonly autoscaleConfigurations: outputs.GetApplicationGatewayAutoscaleConfiguration[];
    readonly backendAddressPools: outputs.GetApplicationGatewayBackendAddressPool[];
    readonly backendHttpSettings: outputs.GetApplicationGatewayBackendHttpSetting[];
    readonly customErrorConfigurations: outputs.GetApplicationGatewayCustomErrorConfiguration[];
    readonly fipsEnabled: boolean;
    readonly firewallPolicyId: string;
    readonly forceFirewallPolicyAssociation: boolean;
    readonly frontendIpConfigurations: outputs.GetApplicationGatewayFrontendIpConfiguration[];
    readonly frontendPorts: outputs.GetApplicationGatewayFrontendPort[];
    readonly gatewayIpConfigurations: outputs.GetApplicationGatewayGatewayIpConfiguration[];
    readonly globals: outputs.GetApplicationGatewayGlobal[];
    readonly http2Enabled: boolean;
    readonly httpListeners: outputs.GetApplicationGatewayHttpListener[];
    readonly id: string;
    readonly identities: outputs.GetApplicationGatewayIdentity[];
    readonly location: string;
    readonly name: string;
    readonly privateEndpointConnections: outputs.GetApplicationGatewayPrivateEndpointConnection[];
    readonly privateLinkConfigurations: outputs.GetApplicationGatewayPrivateLinkConfiguration[];
    readonly probes: outputs.GetApplicationGatewayProbe[];
    readonly redirectConfigurations: outputs.GetApplicationGatewayRedirectConfiguration[];
    readonly requestRoutingRules: outputs.GetApplicationGatewayRequestRoutingRule[];
    readonly resourceGroupName: string;
    readonly rewriteRuleSets: outputs.GetApplicationGatewayRewriteRuleSet[];
    readonly skus: outputs.GetApplicationGatewaySkus[];
    readonly sslCertificates: outputs.GetApplicationGatewaySslCertificate[];
    readonly sslPolicies: outputs.GetApplicationGatewaySslPolicy[];
    readonly sslProfiles: outputs.GetApplicationGatewaySslProfile[];
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetApplicationGatewayTimeouts;
    readonly trustedClientCertificates: outputs.GetApplicationGatewayTrustedClientCertificate[];
    readonly trustedRootCertificates: outputs.GetApplicationGatewayTrustedRootCertificate[];
    readonly urlPathMaps: outputs.GetApplicationGatewayUrlPathMap[];
    readonly wafConfigurations: outputs.GetApplicationGatewayWafConfiguration[];
    readonly zones: string[];
}
export function getApplicationGatewayOutput(args: GetApplicationGatewayOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplicationGatewayResult> {
    return pulumi.output(args).apply((a: any) => getApplicationGateway(a, opts))
}

/**
 * A collection of arguments for invoking getApplicationGateway.
 */
export interface GetApplicationGatewayOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetApplicationGatewayTimeoutsArgs>;
}
