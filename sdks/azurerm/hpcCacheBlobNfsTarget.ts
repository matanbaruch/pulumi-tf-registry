// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HpcCacheBlobNfsTarget extends pulumi.CustomResource {
    /**
     * Get an existing HpcCacheBlobNfsTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HpcCacheBlobNfsTargetState, opts?: pulumi.CustomResourceOptions): HpcCacheBlobNfsTarget {
        return new HpcCacheBlobNfsTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/hpcCacheBlobNfsTarget:HpcCacheBlobNfsTarget';

    /**
     * Returns true if the given object is an instance of HpcCacheBlobNfsTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HpcCacheBlobNfsTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HpcCacheBlobNfsTarget.__pulumiType;
    }

    public readonly accessPolicyName!: pulumi.Output<string | undefined>;
    public readonly cacheName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespacePath!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly storageContainerId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.HpcCacheBlobNfsTargetTimeouts | undefined>;
    public readonly usageModel!: pulumi.Output<string>;
    public readonly verificationTimerInSeconds!: pulumi.Output<number | undefined>;
    public readonly writeBackTimerInSeconds!: pulumi.Output<number | undefined>;

    /**
     * Create a HpcCacheBlobNfsTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HpcCacheBlobNfsTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HpcCacheBlobNfsTargetArgs | HpcCacheBlobNfsTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HpcCacheBlobNfsTargetState | undefined;
            resourceInputs["accessPolicyName"] = state ? state.accessPolicyName : undefined;
            resourceInputs["cacheName"] = state ? state.cacheName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespacePath"] = state ? state.namespacePath : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["storageContainerId"] = state ? state.storageContainerId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usageModel"] = state ? state.usageModel : undefined;
            resourceInputs["verificationTimerInSeconds"] = state ? state.verificationTimerInSeconds : undefined;
            resourceInputs["writeBackTimerInSeconds"] = state ? state.writeBackTimerInSeconds : undefined;
        } else {
            const args = argsOrState as HpcCacheBlobNfsTargetArgs | undefined;
            if ((!args || args.cacheName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cacheName'");
            }
            if ((!args || args.namespacePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespacePath'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageContainerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageContainerId'");
            }
            if ((!args || args.usageModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usageModel'");
            }
            resourceInputs["accessPolicyName"] = args ? args.accessPolicyName : undefined;
            resourceInputs["cacheName"] = args ? args.cacheName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespacePath"] = args ? args.namespacePath : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["storageContainerId"] = args ? args.storageContainerId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["usageModel"] = args ? args.usageModel : undefined;
            resourceInputs["verificationTimerInSeconds"] = args ? args.verificationTimerInSeconds : undefined;
            resourceInputs["writeBackTimerInSeconds"] = args ? args.writeBackTimerInSeconds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HpcCacheBlobNfsTarget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HpcCacheBlobNfsTarget resources.
 */
export interface HpcCacheBlobNfsTargetState {
    accessPolicyName?: pulumi.Input<string>;
    cacheName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespacePath?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    storageContainerId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HpcCacheBlobNfsTargetTimeouts>;
    usageModel?: pulumi.Input<string>;
    verificationTimerInSeconds?: pulumi.Input<number>;
    writeBackTimerInSeconds?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a HpcCacheBlobNfsTarget resource.
 */
export interface HpcCacheBlobNfsTargetArgs {
    accessPolicyName?: pulumi.Input<string>;
    cacheName: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespacePath: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    storageContainerId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HpcCacheBlobNfsTargetTimeouts>;
    usageModel: pulumi.Input<string>;
    verificationTimerInSeconds?: pulumi.Input<number>;
    writeBackTimerInSeconds?: pulumi.Input<number>;
}
