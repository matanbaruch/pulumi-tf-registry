// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LinuxFunctionAppSlot extends pulumi.CustomResource {
    /**
     * Get an existing LinuxFunctionAppSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinuxFunctionAppSlotState, opts?: pulumi.CustomResourceOptions): LinuxFunctionAppSlot {
        return new LinuxFunctionAppSlot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/linuxFunctionAppSlot:LinuxFunctionAppSlot';

    /**
     * Returns true if the given object is an instance of LinuxFunctionAppSlot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinuxFunctionAppSlot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinuxFunctionAppSlot.__pulumiType;
    }

    /**
     * A map of key-value pairs for [App
     * Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
     */
    public readonly appSettings!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly authSettings!: pulumi.Output<outputs.LinuxFunctionAppSlotAuthSettings | undefined>;
    public readonly authSettingsV2!: pulumi.Output<outputs.LinuxFunctionAppSlotAuthSettingsV2 | undefined>;
    public readonly backup!: pulumi.Output<outputs.LinuxFunctionAppSlotBackup | undefined>;
    /**
     * Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage
     * setting.
     */
    public readonly builtinLoggingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Should the Function App Slot use Client Certificates.
     */
    public readonly clientCertificateEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Paths to exclude when using client certificates, separated by ;
     */
    public readonly clientCertificateExclusionPaths!: pulumi.Output<string | undefined>;
    /**
     * The mode of the Function App Slot's client certificates requirement for incoming requests. Possible values are
     * `Required`, `Optional`, and `OptionalInteractiveUser`.
     */
    public readonly clientCertificateMode!: pulumi.Output<string | undefined>;
    public readonly connectionStrings!: pulumi.Output<outputs.LinuxFunctionAppSlotConnectionString[] | undefined>;
    /**
     * Force disable the content share settings.
     */
    public readonly contentShareForceDisabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly customDomainVerificationId!: pulumi.Output<string>;
    /**
     * The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only
     * affects function apps in Consumption Plans.
     */
    public readonly dailyMemoryTimeQuota!: pulumi.Output<number | undefined>;
    public /*out*/ readonly defaultHostname!: pulumi.Output<string>;
    /**
     * Is the Linux Function App Slot enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly ftpPublishBasicAuthenticationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Linux Function App this Slot is a member of.
     */
    public readonly functionAppId!: pulumi.Output<string>;
    /**
     * The runtime version associated with the Function App Slot.
     */
    public readonly functionsExtensionVersion!: pulumi.Output<string | undefined>;
    public /*out*/ readonly hostingEnvironmentId!: pulumi.Output<string>;
    /**
     * Can the Function App Slot only be accessed via HTTPS?
     */
    public readonly httpsOnly!: pulumi.Output<boolean | undefined>;
    public readonly identity!: pulumi.Output<outputs.LinuxFunctionAppSlotIdentity | undefined>;
    /**
     * The User Assigned Identity to use for Key Vault access.
     */
    public readonly keyVaultReferenceIdentityId!: pulumi.Output<string>;
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * Specifies the name of the Function App Slot.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly outboundIpAddressLists!: pulumi.Output<string[]>;
    public /*out*/ readonly outboundIpAddresses!: pulumi.Output<string>;
    public /*out*/ readonly possibleOutboundIpAddressLists!: pulumi.Output<string[]>;
    public /*out*/ readonly possibleOutboundIpAddresses!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly servicePlanId!: pulumi.Output<string | undefined>;
    public readonly siteConfig!: pulumi.Output<outputs.LinuxFunctionAppSlotSiteConfig>;
    public /*out*/ readonly siteCredentials!: pulumi.Output<outputs.LinuxFunctionAppSlotSiteCredential[]>;
    /**
     * The access key which will be used to access the storage account for the Function App Slot.
     */
    public readonly storageAccountAccessKey!: pulumi.Output<string | undefined>;
    /**
     * The backend storage account name which will be used by this Function App Slot.
     */
    public readonly storageAccountName!: pulumi.Output<string | undefined>;
    public readonly storageAccounts!: pulumi.Output<outputs.LinuxFunctionAppSlotStorageAccount[] | undefined>;
    /**
     * The Key Vault Secret ID, including version, that contains the Connection String to connect to the storage account for
     * this Function App.
     */
    public readonly storageKeyVaultSecretId!: pulumi.Output<string | undefined>;
    /**
     * Should the Function App Slot use its Managed Identity to access storage?
     */
    public readonly storageUsesManagedIdentity!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LinuxFunctionAppSlotTimeouts | undefined>;
    public readonly virtualNetworkSubnetId!: pulumi.Output<string | undefined>;
    /**
     * Is container image pull over virtual network enabled? Defaults to `false`.
     */
    public readonly vnetImagePullEnabled!: pulumi.Output<boolean | undefined>;
    public readonly webdeployPublishBasicAuthenticationEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a LinuxFunctionAppSlot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinuxFunctionAppSlotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinuxFunctionAppSlotArgs | LinuxFunctionAppSlotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinuxFunctionAppSlotState | undefined;
            resourceInputs["appSettings"] = state ? state.appSettings : undefined;
            resourceInputs["authSettings"] = state ? state.authSettings : undefined;
            resourceInputs["authSettingsV2"] = state ? state.authSettingsV2 : undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["builtinLoggingEnabled"] = state ? state.builtinLoggingEnabled : undefined;
            resourceInputs["clientCertificateEnabled"] = state ? state.clientCertificateEnabled : undefined;
            resourceInputs["clientCertificateExclusionPaths"] = state ? state.clientCertificateExclusionPaths : undefined;
            resourceInputs["clientCertificateMode"] = state ? state.clientCertificateMode : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["contentShareForceDisabled"] = state ? state.contentShareForceDisabled : undefined;
            resourceInputs["customDomainVerificationId"] = state ? state.customDomainVerificationId : undefined;
            resourceInputs["dailyMemoryTimeQuota"] = state ? state.dailyMemoryTimeQuota : undefined;
            resourceInputs["defaultHostname"] = state ? state.defaultHostname : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ftpPublishBasicAuthenticationEnabled"] = state ? state.ftpPublishBasicAuthenticationEnabled : undefined;
            resourceInputs["functionAppId"] = state ? state.functionAppId : undefined;
            resourceInputs["functionsExtensionVersion"] = state ? state.functionsExtensionVersion : undefined;
            resourceInputs["hostingEnvironmentId"] = state ? state.hostingEnvironmentId : undefined;
            resourceInputs["httpsOnly"] = state ? state.httpsOnly : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["keyVaultReferenceIdentityId"] = state ? state.keyVaultReferenceIdentityId : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outboundIpAddressLists"] = state ? state.outboundIpAddressLists : undefined;
            resourceInputs["outboundIpAddresses"] = state ? state.outboundIpAddresses : undefined;
            resourceInputs["possibleOutboundIpAddressLists"] = state ? state.possibleOutboundIpAddressLists : undefined;
            resourceInputs["possibleOutboundIpAddresses"] = state ? state.possibleOutboundIpAddresses : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["servicePlanId"] = state ? state.servicePlanId : undefined;
            resourceInputs["siteConfig"] = state ? state.siteConfig : undefined;
            resourceInputs["siteCredentials"] = state ? state.siteCredentials : undefined;
            resourceInputs["storageAccountAccessKey"] = state ? state.storageAccountAccessKey : undefined;
            resourceInputs["storageAccountName"] = state ? state.storageAccountName : undefined;
            resourceInputs["storageAccounts"] = state ? state.storageAccounts : undefined;
            resourceInputs["storageKeyVaultSecretId"] = state ? state.storageKeyVaultSecretId : undefined;
            resourceInputs["storageUsesManagedIdentity"] = state ? state.storageUsesManagedIdentity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualNetworkSubnetId"] = state ? state.virtualNetworkSubnetId : undefined;
            resourceInputs["vnetImagePullEnabled"] = state ? state.vnetImagePullEnabled : undefined;
            resourceInputs["webdeployPublishBasicAuthenticationEnabled"] = state ? state.webdeployPublishBasicAuthenticationEnabled : undefined;
        } else {
            const args = argsOrState as LinuxFunctionAppSlotArgs | undefined;
            if ((!args || args.functionAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionAppId'");
            }
            if ((!args || args.siteConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteConfig'");
            }
            resourceInputs["appSettings"] = args ? args.appSettings : undefined;
            resourceInputs["authSettings"] = args ? args.authSettings : undefined;
            resourceInputs["authSettingsV2"] = args ? args.authSettingsV2 : undefined;
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["builtinLoggingEnabled"] = args ? args.builtinLoggingEnabled : undefined;
            resourceInputs["clientCertificateEnabled"] = args ? args.clientCertificateEnabled : undefined;
            resourceInputs["clientCertificateExclusionPaths"] = args ? args.clientCertificateExclusionPaths : undefined;
            resourceInputs["clientCertificateMode"] = args ? args.clientCertificateMode : undefined;
            resourceInputs["connectionStrings"] = args ? args.connectionStrings : undefined;
            resourceInputs["contentShareForceDisabled"] = args ? args.contentShareForceDisabled : undefined;
            resourceInputs["dailyMemoryTimeQuota"] = args ? args.dailyMemoryTimeQuota : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ftpPublishBasicAuthenticationEnabled"] = args ? args.ftpPublishBasicAuthenticationEnabled : undefined;
            resourceInputs["functionAppId"] = args ? args.functionAppId : undefined;
            resourceInputs["functionsExtensionVersion"] = args ? args.functionsExtensionVersion : undefined;
            resourceInputs["httpsOnly"] = args ? args.httpsOnly : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["keyVaultReferenceIdentityId"] = args ? args.keyVaultReferenceIdentityId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["servicePlanId"] = args ? args.servicePlanId : undefined;
            resourceInputs["siteConfig"] = args ? args.siteConfig : undefined;
            resourceInputs["storageAccountAccessKey"] = args?.storageAccountAccessKey ? pulumi.secret(args.storageAccountAccessKey) : undefined;
            resourceInputs["storageAccountName"] = args ? args.storageAccountName : undefined;
            resourceInputs["storageAccounts"] = args ? args.storageAccounts : undefined;
            resourceInputs["storageKeyVaultSecretId"] = args ? args.storageKeyVaultSecretId : undefined;
            resourceInputs["storageUsesManagedIdentity"] = args ? args.storageUsesManagedIdentity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualNetworkSubnetId"] = args ? args.virtualNetworkSubnetId : undefined;
            resourceInputs["vnetImagePullEnabled"] = args ? args.vnetImagePullEnabled : undefined;
            resourceInputs["webdeployPublishBasicAuthenticationEnabled"] = args ? args.webdeployPublishBasicAuthenticationEnabled : undefined;
            resourceInputs["customDomainVerificationId"] = undefined /*out*/;
            resourceInputs["defaultHostname"] = undefined /*out*/;
            resourceInputs["hostingEnvironmentId"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["outboundIpAddressLists"] = undefined /*out*/;
            resourceInputs["outboundIpAddresses"] = undefined /*out*/;
            resourceInputs["possibleOutboundIpAddressLists"] = undefined /*out*/;
            resourceInputs["possibleOutboundIpAddresses"] = undefined /*out*/;
            resourceInputs["siteCredentials"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["customDomainVerificationId", "siteCredentials", "storageAccountAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LinuxFunctionAppSlot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LinuxFunctionAppSlot resources.
 */
export interface LinuxFunctionAppSlotState {
    /**
     * A map of key-value pairs for [App
     * Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
     */
    appSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    authSettings?: pulumi.Input<inputs.LinuxFunctionAppSlotAuthSettings>;
    authSettingsV2?: pulumi.Input<inputs.LinuxFunctionAppSlotAuthSettingsV2>;
    backup?: pulumi.Input<inputs.LinuxFunctionAppSlotBackup>;
    /**
     * Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage
     * setting.
     */
    builtinLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * Should the Function App Slot use Client Certificates.
     */
    clientCertificateEnabled?: pulumi.Input<boolean>;
    /**
     * Paths to exclude when using client certificates, separated by ;
     */
    clientCertificateExclusionPaths?: pulumi.Input<string>;
    /**
     * The mode of the Function App Slot's client certificates requirement for incoming requests. Possible values are
     * `Required`, `Optional`, and `OptionalInteractiveUser`.
     */
    clientCertificateMode?: pulumi.Input<string>;
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.LinuxFunctionAppSlotConnectionString>[]>;
    /**
     * Force disable the content share settings.
     */
    contentShareForceDisabled?: pulumi.Input<boolean>;
    customDomainVerificationId?: pulumi.Input<string>;
    /**
     * The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only
     * affects function apps in Consumption Plans.
     */
    dailyMemoryTimeQuota?: pulumi.Input<number>;
    defaultHostname?: pulumi.Input<string>;
    /**
     * Is the Linux Function App Slot enabled.
     */
    enabled?: pulumi.Input<boolean>;
    ftpPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Linux Function App this Slot is a member of.
     */
    functionAppId?: pulumi.Input<string>;
    /**
     * The runtime version associated with the Function App Slot.
     */
    functionsExtensionVersion?: pulumi.Input<string>;
    hostingEnvironmentId?: pulumi.Input<string>;
    /**
     * Can the Function App Slot only be accessed via HTTPS?
     */
    httpsOnly?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.LinuxFunctionAppSlotIdentity>;
    /**
     * The User Assigned Identity to use for Key Vault access.
     */
    keyVaultReferenceIdentityId?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    /**
     * Specifies the name of the Function App Slot.
     */
    name?: pulumi.Input<string>;
    outboundIpAddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    outboundIpAddresses?: pulumi.Input<string>;
    possibleOutboundIpAddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    possibleOutboundIpAddresses?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    servicePlanId?: pulumi.Input<string>;
    siteConfig?: pulumi.Input<inputs.LinuxFunctionAppSlotSiteConfig>;
    siteCredentials?: pulumi.Input<pulumi.Input<inputs.LinuxFunctionAppSlotSiteCredential>[]>;
    /**
     * The access key which will be used to access the storage account for the Function App Slot.
     */
    storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * The backend storage account name which will be used by this Function App Slot.
     */
    storageAccountName?: pulumi.Input<string>;
    storageAccounts?: pulumi.Input<pulumi.Input<inputs.LinuxFunctionAppSlotStorageAccount>[]>;
    /**
     * The Key Vault Secret ID, including version, that contains the Connection String to connect to the storage account for
     * this Function App.
     */
    storageKeyVaultSecretId?: pulumi.Input<string>;
    /**
     * Should the Function App Slot use its Managed Identity to access storage?
     */
    storageUsesManagedIdentity?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.LinuxFunctionAppSlotTimeouts>;
    virtualNetworkSubnetId?: pulumi.Input<string>;
    /**
     * Is container image pull over virtual network enabled? Defaults to `false`.
     */
    vnetImagePullEnabled?: pulumi.Input<boolean>;
    webdeployPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LinuxFunctionAppSlot resource.
 */
export interface LinuxFunctionAppSlotArgs {
    /**
     * A map of key-value pairs for [App
     * Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
     */
    appSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    authSettings?: pulumi.Input<inputs.LinuxFunctionAppSlotAuthSettings>;
    authSettingsV2?: pulumi.Input<inputs.LinuxFunctionAppSlotAuthSettingsV2>;
    backup?: pulumi.Input<inputs.LinuxFunctionAppSlotBackup>;
    /**
     * Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage
     * setting.
     */
    builtinLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * Should the Function App Slot use Client Certificates.
     */
    clientCertificateEnabled?: pulumi.Input<boolean>;
    /**
     * Paths to exclude when using client certificates, separated by ;
     */
    clientCertificateExclusionPaths?: pulumi.Input<string>;
    /**
     * The mode of the Function App Slot's client certificates requirement for incoming requests. Possible values are
     * `Required`, `Optional`, and `OptionalInteractiveUser`.
     */
    clientCertificateMode?: pulumi.Input<string>;
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.LinuxFunctionAppSlotConnectionString>[]>;
    /**
     * Force disable the content share settings.
     */
    contentShareForceDisabled?: pulumi.Input<boolean>;
    /**
     * The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only
     * affects function apps in Consumption Plans.
     */
    dailyMemoryTimeQuota?: pulumi.Input<number>;
    /**
     * Is the Linux Function App Slot enabled.
     */
    enabled?: pulumi.Input<boolean>;
    ftpPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Linux Function App this Slot is a member of.
     */
    functionAppId: pulumi.Input<string>;
    /**
     * The runtime version associated with the Function App Slot.
     */
    functionsExtensionVersion?: pulumi.Input<string>;
    /**
     * Can the Function App Slot only be accessed via HTTPS?
     */
    httpsOnly?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.LinuxFunctionAppSlotIdentity>;
    /**
     * The User Assigned Identity to use for Key Vault access.
     */
    keyVaultReferenceIdentityId?: pulumi.Input<string>;
    /**
     * Specifies the name of the Function App Slot.
     */
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    servicePlanId?: pulumi.Input<string>;
    siteConfig: pulumi.Input<inputs.LinuxFunctionAppSlotSiteConfig>;
    /**
     * The access key which will be used to access the storage account for the Function App Slot.
     */
    storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * The backend storage account name which will be used by this Function App Slot.
     */
    storageAccountName?: pulumi.Input<string>;
    storageAccounts?: pulumi.Input<pulumi.Input<inputs.LinuxFunctionAppSlotStorageAccount>[]>;
    /**
     * The Key Vault Secret ID, including version, that contains the Connection String to connect to the storage account for
     * this Function App.
     */
    storageKeyVaultSecretId?: pulumi.Input<string>;
    /**
     * Should the Function App Slot use its Managed Identity to access storage?
     */
    storageUsesManagedIdentity?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.LinuxFunctionAppSlotTimeouts>;
    virtualNetworkSubnetId?: pulumi.Input<string>;
    /**
     * Is container image pull over virtual network enabled? Defaults to `false`.
     */
    vnetImagePullEnabled?: pulumi.Input<boolean>;
    webdeployPublishBasicAuthenticationEnabled?: pulumi.Input<boolean>;
}
