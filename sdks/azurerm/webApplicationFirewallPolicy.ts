// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebApplicationFirewallPolicy extends pulumi.CustomResource {
    /**
     * Get an existing WebApplicationFirewallPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebApplicationFirewallPolicyState, opts?: pulumi.CustomResourceOptions): WebApplicationFirewallPolicy {
        return new WebApplicationFirewallPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/webApplicationFirewallPolicy:WebApplicationFirewallPolicy';

    /**
     * Returns true if the given object is an instance of WebApplicationFirewallPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebApplicationFirewallPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebApplicationFirewallPolicy.__pulumiType;
    }

    public readonly customRules!: pulumi.Output<outputs.WebApplicationFirewallPolicyCustomRule[] | undefined>;
    public /*out*/ readonly httpListenerIds!: pulumi.Output<string[]>;
    public readonly location!: pulumi.Output<string>;
    public readonly managedRules!: pulumi.Output<outputs.WebApplicationFirewallPolicyManagedRules>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly pathBasedRuleIds!: pulumi.Output<string[]>;
    public readonly policySettings!: pulumi.Output<outputs.WebApplicationFirewallPolicyPolicySettings | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.WebApplicationFirewallPolicyTimeouts | undefined>;

    /**
     * Create a WebApplicationFirewallPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebApplicationFirewallPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebApplicationFirewallPolicyArgs | WebApplicationFirewallPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebApplicationFirewallPolicyState | undefined;
            resourceInputs["customRules"] = state ? state.customRules : undefined;
            resourceInputs["httpListenerIds"] = state ? state.httpListenerIds : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedRules"] = state ? state.managedRules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pathBasedRuleIds"] = state ? state.pathBasedRuleIds : undefined;
            resourceInputs["policySettings"] = state ? state.policySettings : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as WebApplicationFirewallPolicyArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.managedRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedRules'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["customRules"] = args ? args.customRules : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedRules"] = args ? args.managedRules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policySettings"] = args ? args.policySettings : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["httpListenerIds"] = undefined /*out*/;
            resourceInputs["pathBasedRuleIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebApplicationFirewallPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebApplicationFirewallPolicy resources.
 */
export interface WebApplicationFirewallPolicyState {
    customRules?: pulumi.Input<pulumi.Input<inputs.WebApplicationFirewallPolicyCustomRule>[]>;
    httpListenerIds?: pulumi.Input<pulumi.Input<string>[]>;
    location?: pulumi.Input<string>;
    managedRules?: pulumi.Input<inputs.WebApplicationFirewallPolicyManagedRules>;
    name?: pulumi.Input<string>;
    pathBasedRuleIds?: pulumi.Input<pulumi.Input<string>[]>;
    policySettings?: pulumi.Input<inputs.WebApplicationFirewallPolicyPolicySettings>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.WebApplicationFirewallPolicyTimeouts>;
}

/**
 * The set of arguments for constructing a WebApplicationFirewallPolicy resource.
 */
export interface WebApplicationFirewallPolicyArgs {
    customRules?: pulumi.Input<pulumi.Input<inputs.WebApplicationFirewallPolicyCustomRule>[]>;
    location: pulumi.Input<string>;
    managedRules: pulumi.Input<inputs.WebApplicationFirewallPolicyManagedRules>;
    name?: pulumi.Input<string>;
    policySettings?: pulumi.Input<inputs.WebApplicationFirewallPolicyPolicySettings>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.WebApplicationFirewallPolicyTimeouts>;
}
