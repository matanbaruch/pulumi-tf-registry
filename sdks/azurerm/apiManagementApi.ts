// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiManagementApi extends pulumi.CustomResource {
    /**
     * Get an existing ApiManagementApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiManagementApiState, opts?: pulumi.CustomResourceOptions): ApiManagementApi {
        return new ApiManagementApi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/apiManagementApi:ApiManagementApi';

    /**
     * Returns true if the given object is an instance of ApiManagementApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiManagementApi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiManagementApi.__pulumiType;
    }

    public readonly apiManagementName!: pulumi.Output<string>;
    public readonly apiType!: pulumi.Output<string>;
    public readonly contact!: pulumi.Output<outputs.ApiManagementApiContact | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly import!: pulumi.Output<outputs.ApiManagementApiImport | undefined>;
    public /*out*/ readonly isCurrent!: pulumi.Output<boolean>;
    public /*out*/ readonly isOnline!: pulumi.Output<boolean>;
    public readonly license!: pulumi.Output<outputs.ApiManagementApiLicense | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly oauth2Authorization!: pulumi.Output<outputs.ApiManagementApiOauth2Authorization | undefined>;
    public readonly openidAuthentication!: pulumi.Output<outputs.ApiManagementApiOpenidAuthentication | undefined>;
    public readonly path!: pulumi.Output<string>;
    public readonly protocols!: pulumi.Output<string[]>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly revision!: pulumi.Output<string>;
    public readonly revisionDescription!: pulumi.Output<string | undefined>;
    public readonly serviceUrl!: pulumi.Output<string>;
    public readonly sourceApiId!: pulumi.Output<string | undefined>;
    public readonly subscriptionKeyParameterNames!: pulumi.Output<outputs.ApiManagementApiSubscriptionKeyParameterNames | undefined>;
    public readonly subscriptionRequired!: pulumi.Output<boolean | undefined>;
    public readonly termsOfServiceUrl!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ApiManagementApiTimeouts | undefined>;
    public readonly version!: pulumi.Output<string>;
    public readonly versionDescription!: pulumi.Output<string | undefined>;
    public readonly versionSetId!: pulumi.Output<string>;

    /**
     * Create a ApiManagementApi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiManagementApiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiManagementApiArgs | ApiManagementApiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiManagementApiState | undefined;
            resourceInputs["apiManagementName"] = state ? state.apiManagementName : undefined;
            resourceInputs["apiType"] = state ? state.apiType : undefined;
            resourceInputs["contact"] = state ? state.contact : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["import"] = state ? state.import : undefined;
            resourceInputs["isCurrent"] = state ? state.isCurrent : undefined;
            resourceInputs["isOnline"] = state ? state.isOnline : undefined;
            resourceInputs["license"] = state ? state.license : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oauth2Authorization"] = state ? state.oauth2Authorization : undefined;
            resourceInputs["openidAuthentication"] = state ? state.openidAuthentication : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["revisionDescription"] = state ? state.revisionDescription : undefined;
            resourceInputs["serviceUrl"] = state ? state.serviceUrl : undefined;
            resourceInputs["sourceApiId"] = state ? state.sourceApiId : undefined;
            resourceInputs["subscriptionKeyParameterNames"] = state ? state.subscriptionKeyParameterNames : undefined;
            resourceInputs["subscriptionRequired"] = state ? state.subscriptionRequired : undefined;
            resourceInputs["termsOfServiceUrl"] = state ? state.termsOfServiceUrl : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["versionDescription"] = state ? state.versionDescription : undefined;
            resourceInputs["versionSetId"] = state ? state.versionSetId : undefined;
        } else {
            const args = argsOrState as ApiManagementApiArgs | undefined;
            if ((!args || args.apiManagementName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.revision === undefined) && !opts.urn) {
                throw new Error("Missing required property 'revision'");
            }
            resourceInputs["apiManagementName"] = args ? args.apiManagementName : undefined;
            resourceInputs["apiType"] = args ? args.apiType : undefined;
            resourceInputs["contact"] = args ? args.contact : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["import"] = args ? args.import : undefined;
            resourceInputs["license"] = args ? args.license : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oauth2Authorization"] = args ? args.oauth2Authorization : undefined;
            resourceInputs["openidAuthentication"] = args ? args.openidAuthentication : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["revision"] = args ? args.revision : undefined;
            resourceInputs["revisionDescription"] = args ? args.revisionDescription : undefined;
            resourceInputs["serviceUrl"] = args ? args.serviceUrl : undefined;
            resourceInputs["sourceApiId"] = args ? args.sourceApiId : undefined;
            resourceInputs["subscriptionKeyParameterNames"] = args ? args.subscriptionKeyParameterNames : undefined;
            resourceInputs["subscriptionRequired"] = args ? args.subscriptionRequired : undefined;
            resourceInputs["termsOfServiceUrl"] = args ? args.termsOfServiceUrl : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["versionDescription"] = args ? args.versionDescription : undefined;
            resourceInputs["versionSetId"] = args ? args.versionSetId : undefined;
            resourceInputs["isCurrent"] = undefined /*out*/;
            resourceInputs["isOnline"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiManagementApi.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiManagementApi resources.
 */
export interface ApiManagementApiState {
    apiManagementName?: pulumi.Input<string>;
    apiType?: pulumi.Input<string>;
    contact?: pulumi.Input<inputs.ApiManagementApiContact>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    import?: pulumi.Input<inputs.ApiManagementApiImport>;
    isCurrent?: pulumi.Input<boolean>;
    isOnline?: pulumi.Input<boolean>;
    license?: pulumi.Input<inputs.ApiManagementApiLicense>;
    name?: pulumi.Input<string>;
    oauth2Authorization?: pulumi.Input<inputs.ApiManagementApiOauth2Authorization>;
    openidAuthentication?: pulumi.Input<inputs.ApiManagementApiOpenidAuthentication>;
    path?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupName?: pulumi.Input<string>;
    revision?: pulumi.Input<string>;
    revisionDescription?: pulumi.Input<string>;
    serviceUrl?: pulumi.Input<string>;
    sourceApiId?: pulumi.Input<string>;
    subscriptionKeyParameterNames?: pulumi.Input<inputs.ApiManagementApiSubscriptionKeyParameterNames>;
    subscriptionRequired?: pulumi.Input<boolean>;
    termsOfServiceUrl?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiManagementApiTimeouts>;
    version?: pulumi.Input<string>;
    versionDescription?: pulumi.Input<string>;
    versionSetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiManagementApi resource.
 */
export interface ApiManagementApiArgs {
    apiManagementName: pulumi.Input<string>;
    apiType?: pulumi.Input<string>;
    contact?: pulumi.Input<inputs.ApiManagementApiContact>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    import?: pulumi.Input<inputs.ApiManagementApiImport>;
    license?: pulumi.Input<inputs.ApiManagementApiLicense>;
    name?: pulumi.Input<string>;
    oauth2Authorization?: pulumi.Input<inputs.ApiManagementApiOauth2Authorization>;
    openidAuthentication?: pulumi.Input<inputs.ApiManagementApiOpenidAuthentication>;
    path?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupName: pulumi.Input<string>;
    revision: pulumi.Input<string>;
    revisionDescription?: pulumi.Input<string>;
    serviceUrl?: pulumi.Input<string>;
    sourceApiId?: pulumi.Input<string>;
    subscriptionKeyParameterNames?: pulumi.Input<inputs.ApiManagementApiSubscriptionKeyParameterNames>;
    subscriptionRequired?: pulumi.Input<boolean>;
    termsOfServiceUrl?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiManagementApiTimeouts>;
    version?: pulumi.Input<string>;
    versionDescription?: pulumi.Input<string>;
    versionSetId?: pulumi.Input<string>;
}
