// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiManagementNotificationRecipientUser extends pulumi.CustomResource {
    /**
     * Get an existing ApiManagementNotificationRecipientUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiManagementNotificationRecipientUserState, opts?: pulumi.CustomResourceOptions): ApiManagementNotificationRecipientUser {
        return new ApiManagementNotificationRecipientUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/apiManagementNotificationRecipientUser:ApiManagementNotificationRecipientUser';

    /**
     * Returns true if the given object is an instance of ApiManagementNotificationRecipientUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiManagementNotificationRecipientUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiManagementNotificationRecipientUser.__pulumiType;
    }

    public readonly apiManagementId!: pulumi.Output<string>;
    public readonly notificationType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ApiManagementNotificationRecipientUserTimeouts | undefined>;
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a ApiManagementNotificationRecipientUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiManagementNotificationRecipientUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiManagementNotificationRecipientUserArgs | ApiManagementNotificationRecipientUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiManagementNotificationRecipientUserState | undefined;
            resourceInputs["apiManagementId"] = state ? state.apiManagementId : undefined;
            resourceInputs["notificationType"] = state ? state.notificationType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ApiManagementNotificationRecipientUserArgs | undefined;
            if ((!args || args.apiManagementId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementId'");
            }
            if ((!args || args.notificationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationType'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["apiManagementId"] = args ? args.apiManagementId : undefined;
            resourceInputs["notificationType"] = args ? args.notificationType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiManagementNotificationRecipientUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiManagementNotificationRecipientUser resources.
 */
export interface ApiManagementNotificationRecipientUserState {
    apiManagementId?: pulumi.Input<string>;
    notificationType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiManagementNotificationRecipientUserTimeouts>;
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiManagementNotificationRecipientUser resource.
 */
export interface ApiManagementNotificationRecipientUserArgs {
    apiManagementId: pulumi.Input<string>;
    notificationType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiManagementNotificationRecipientUserTimeouts>;
    userId: pulumi.Input<string>;
}
