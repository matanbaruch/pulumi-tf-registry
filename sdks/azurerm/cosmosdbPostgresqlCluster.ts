// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CosmosdbPostgresqlCluster extends pulumi.CustomResource {
    /**
     * Get an existing CosmosdbPostgresqlCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CosmosdbPostgresqlClusterState, opts?: pulumi.CustomResourceOptions): CosmosdbPostgresqlCluster {
        return new CosmosdbPostgresqlCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/cosmosdbPostgresqlCluster:CosmosdbPostgresqlCluster';

    /**
     * Returns true if the given object is an instance of CosmosdbPostgresqlCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CosmosdbPostgresqlCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CosmosdbPostgresqlCluster.__pulumiType;
    }

    public readonly administratorLoginPassword!: pulumi.Output<string | undefined>;
    public readonly citusVersion!: pulumi.Output<string>;
    public readonly coordinatorPublicIpAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly coordinatorServerEdition!: pulumi.Output<string | undefined>;
    public readonly coordinatorStorageQuotaInMb!: pulumi.Output<number | undefined>;
    public readonly coordinatorVcoreCount!: pulumi.Output<number | undefined>;
    public /*out*/ readonly earliestRestoreTime!: pulumi.Output<string>;
    public readonly haEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly maintenanceWindow!: pulumi.Output<outputs.CosmosdbPostgresqlClusterMaintenanceWindow | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeCount!: pulumi.Output<number>;
    public readonly nodePublicIpAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly nodeServerEdition!: pulumi.Output<string | undefined>;
    public readonly nodeStorageQuotaInMb!: pulumi.Output<number>;
    public readonly nodeVcores!: pulumi.Output<number>;
    public readonly pointInTimeInUtc!: pulumi.Output<string | undefined>;
    public readonly preferredPrimaryZone!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly servers!: pulumi.Output<outputs.CosmosdbPostgresqlClusterServer[]>;
    public readonly shardsOnCoordinatorEnabled!: pulumi.Output<boolean>;
    public readonly sourceLocation!: pulumi.Output<string | undefined>;
    public readonly sourceResourceId!: pulumi.Output<string | undefined>;
    public readonly sqlVersion!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CosmosdbPostgresqlClusterTimeouts | undefined>;

    /**
     * Create a CosmosdbPostgresqlCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CosmosdbPostgresqlClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CosmosdbPostgresqlClusterArgs | CosmosdbPostgresqlClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CosmosdbPostgresqlClusterState | undefined;
            resourceInputs["administratorLoginPassword"] = state ? state.administratorLoginPassword : undefined;
            resourceInputs["citusVersion"] = state ? state.citusVersion : undefined;
            resourceInputs["coordinatorPublicIpAccessEnabled"] = state ? state.coordinatorPublicIpAccessEnabled : undefined;
            resourceInputs["coordinatorServerEdition"] = state ? state.coordinatorServerEdition : undefined;
            resourceInputs["coordinatorStorageQuotaInMb"] = state ? state.coordinatorStorageQuotaInMb : undefined;
            resourceInputs["coordinatorVcoreCount"] = state ? state.coordinatorVcoreCount : undefined;
            resourceInputs["earliestRestoreTime"] = state ? state.earliestRestoreTime : undefined;
            resourceInputs["haEnabled"] = state ? state.haEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodePublicIpAccessEnabled"] = state ? state.nodePublicIpAccessEnabled : undefined;
            resourceInputs["nodeServerEdition"] = state ? state.nodeServerEdition : undefined;
            resourceInputs["nodeStorageQuotaInMb"] = state ? state.nodeStorageQuotaInMb : undefined;
            resourceInputs["nodeVcores"] = state ? state.nodeVcores : undefined;
            resourceInputs["pointInTimeInUtc"] = state ? state.pointInTimeInUtc : undefined;
            resourceInputs["preferredPrimaryZone"] = state ? state.preferredPrimaryZone : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["shardsOnCoordinatorEnabled"] = state ? state.shardsOnCoordinatorEnabled : undefined;
            resourceInputs["sourceLocation"] = state ? state.sourceLocation : undefined;
            resourceInputs["sourceResourceId"] = state ? state.sourceResourceId : undefined;
            resourceInputs["sqlVersion"] = state ? state.sqlVersion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CosmosdbPostgresqlClusterArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.nodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeCount'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["administratorLoginPassword"] = args?.administratorLoginPassword ? pulumi.secret(args.administratorLoginPassword) : undefined;
            resourceInputs["citusVersion"] = args ? args.citusVersion : undefined;
            resourceInputs["coordinatorPublicIpAccessEnabled"] = args ? args.coordinatorPublicIpAccessEnabled : undefined;
            resourceInputs["coordinatorServerEdition"] = args ? args.coordinatorServerEdition : undefined;
            resourceInputs["coordinatorStorageQuotaInMb"] = args ? args.coordinatorStorageQuotaInMb : undefined;
            resourceInputs["coordinatorVcoreCount"] = args ? args.coordinatorVcoreCount : undefined;
            resourceInputs["haEnabled"] = args ? args.haEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodePublicIpAccessEnabled"] = args ? args.nodePublicIpAccessEnabled : undefined;
            resourceInputs["nodeServerEdition"] = args ? args.nodeServerEdition : undefined;
            resourceInputs["nodeStorageQuotaInMb"] = args ? args.nodeStorageQuotaInMb : undefined;
            resourceInputs["nodeVcores"] = args ? args.nodeVcores : undefined;
            resourceInputs["pointInTimeInUtc"] = args ? args.pointInTimeInUtc : undefined;
            resourceInputs["preferredPrimaryZone"] = args ? args.preferredPrimaryZone : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["shardsOnCoordinatorEnabled"] = args ? args.shardsOnCoordinatorEnabled : undefined;
            resourceInputs["sourceLocation"] = args ? args.sourceLocation : undefined;
            resourceInputs["sourceResourceId"] = args ? args.sourceResourceId : undefined;
            resourceInputs["sqlVersion"] = args ? args.sqlVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["earliestRestoreTime"] = undefined /*out*/;
            resourceInputs["servers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["administratorLoginPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CosmosdbPostgresqlCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CosmosdbPostgresqlCluster resources.
 */
export interface CosmosdbPostgresqlClusterState {
    administratorLoginPassword?: pulumi.Input<string>;
    citusVersion?: pulumi.Input<string>;
    coordinatorPublicIpAccessEnabled?: pulumi.Input<boolean>;
    coordinatorServerEdition?: pulumi.Input<string>;
    coordinatorStorageQuotaInMb?: pulumi.Input<number>;
    coordinatorVcoreCount?: pulumi.Input<number>;
    earliestRestoreTime?: pulumi.Input<string>;
    haEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    maintenanceWindow?: pulumi.Input<inputs.CosmosdbPostgresqlClusterMaintenanceWindow>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    nodePublicIpAccessEnabled?: pulumi.Input<boolean>;
    nodeServerEdition?: pulumi.Input<string>;
    nodeStorageQuotaInMb?: pulumi.Input<number>;
    nodeVcores?: pulumi.Input<number>;
    pointInTimeInUtc?: pulumi.Input<string>;
    preferredPrimaryZone?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.CosmosdbPostgresqlClusterServer>[]>;
    shardsOnCoordinatorEnabled?: pulumi.Input<boolean>;
    sourceLocation?: pulumi.Input<string>;
    sourceResourceId?: pulumi.Input<string>;
    sqlVersion?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CosmosdbPostgresqlClusterTimeouts>;
}

/**
 * The set of arguments for constructing a CosmosdbPostgresqlCluster resource.
 */
export interface CosmosdbPostgresqlClusterArgs {
    administratorLoginPassword?: pulumi.Input<string>;
    citusVersion?: pulumi.Input<string>;
    coordinatorPublicIpAccessEnabled?: pulumi.Input<boolean>;
    coordinatorServerEdition?: pulumi.Input<string>;
    coordinatorStorageQuotaInMb?: pulumi.Input<number>;
    coordinatorVcoreCount?: pulumi.Input<number>;
    haEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    maintenanceWindow?: pulumi.Input<inputs.CosmosdbPostgresqlClusterMaintenanceWindow>;
    name?: pulumi.Input<string>;
    nodeCount: pulumi.Input<number>;
    nodePublicIpAccessEnabled?: pulumi.Input<boolean>;
    nodeServerEdition?: pulumi.Input<string>;
    nodeStorageQuotaInMb?: pulumi.Input<number>;
    nodeVcores?: pulumi.Input<number>;
    pointInTimeInUtc?: pulumi.Input<string>;
    preferredPrimaryZone?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    shardsOnCoordinatorEnabled?: pulumi.Input<boolean>;
    sourceLocation?: pulumi.Input<string>;
    sourceResourceId?: pulumi.Input<string>;
    sqlVersion?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CosmosdbPostgresqlClusterTimeouts>;
}
