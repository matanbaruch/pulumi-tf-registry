// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getArcMachine(args: GetArcMachineArgs, opts?: pulumi.InvokeOptions): Promise<GetArcMachineResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getArcMachine:getArcMachine", {
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getArcMachine.
 */
export interface GetArcMachineArgs {
    id?: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetArcMachineTimeouts;
}

/**
 * A collection of values returned by getArcMachine.
 */
export interface GetArcMachineResult {
    readonly activeDirectoryFqdn: string;
    readonly agentVersion: string;
    readonly agents: outputs.GetArcMachineAgent[];
    readonly clientPublicKey: string;
    readonly cloudMetadatas: outputs.GetArcMachineCloudMetadata[];
    readonly detectedProperties: {[key: string]: string};
    readonly displayName: string;
    readonly dnsFqdn: string;
    readonly domainName: string;
    readonly id: string;
    readonly identities: outputs.GetArcMachineIdentity[];
    readonly lastStatusChangeTime: string;
    readonly location: string;
    readonly locationDatas: outputs.GetArcMachineLocationData[];
    readonly machineFqdn: string;
    readonly mssqlDiscovered: boolean;
    readonly name: string;
    readonly osName: string;
    readonly osProfiles: outputs.GetArcMachineOsProfile[];
    readonly osSku: string;
    readonly osType: string;
    readonly osVersion: string;
    readonly parentClusterResourceId: string;
    readonly privateLinkScopeResourceId: string;
    readonly resourceGroupName: string;
    readonly serviceStatuses: outputs.GetArcMachineServiceStatus[];
    readonly status: string;
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetArcMachineTimeouts;
    readonly vmId: string;
    readonly vmUuid: string;
}
export function getArcMachineOutput(args: GetArcMachineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetArcMachineResult> {
    return pulumi.output(args).apply((a: any) => getArcMachine(a, opts))
}

/**
 * A collection of arguments for invoking getArcMachine.
 */
export interface GetArcMachineOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetArcMachineTimeoutsArgs>;
}
