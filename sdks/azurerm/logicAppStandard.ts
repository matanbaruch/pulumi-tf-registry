// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogicAppStandard extends pulumi.CustomResource {
    /**
     * Get an existing LogicAppStandard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogicAppStandardState, opts?: pulumi.CustomResourceOptions): LogicAppStandard {
        return new LogicAppStandard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/logicAppStandard:LogicAppStandard';

    /**
     * Returns true if the given object is an instance of LogicAppStandard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogicAppStandard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogicAppStandard.__pulumiType;
    }

    public readonly appServicePlanId!: pulumi.Output<string>;
    public readonly appSettings!: pulumi.Output<{[key: string]: string}>;
    public readonly bundleVersion!: pulumi.Output<string | undefined>;
    public readonly clientAffinityEnabled!: pulumi.Output<boolean>;
    public readonly clientCertificateMode!: pulumi.Output<string | undefined>;
    public readonly connectionStrings!: pulumi.Output<outputs.LogicAppStandardConnectionString[] | undefined>;
    public /*out*/ readonly customDomainVerificationId!: pulumi.Output<string>;
    public /*out*/ readonly defaultHostname!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly httpsOnly!: pulumi.Output<boolean | undefined>;
    public readonly identity!: pulumi.Output<outputs.LogicAppStandardIdentity | undefined>;
    public /*out*/ readonly kind!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly outboundIpAddresses!: pulumi.Output<string>;
    public /*out*/ readonly possibleOutboundIpAddresses!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly siteConfig!: pulumi.Output<outputs.LogicAppStandardSiteConfig | undefined>;
    public /*out*/ readonly siteCredentials!: pulumi.Output<outputs.LogicAppStandardSiteCredential[]>;
    public readonly storageAccountAccessKey!: pulumi.Output<string>;
    public readonly storageAccountName!: pulumi.Output<string>;
    public readonly storageAccountShareName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LogicAppStandardTimeouts | undefined>;
    public readonly useExtensionBundle!: pulumi.Output<boolean | undefined>;
    public readonly version!: pulumi.Output<string | undefined>;
    public readonly virtualNetworkSubnetId!: pulumi.Output<string | undefined>;

    /**
     * Create a LogicAppStandard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogicAppStandardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogicAppStandardArgs | LogicAppStandardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogicAppStandardState | undefined;
            resourceInputs["appServicePlanId"] = state ? state.appServicePlanId : undefined;
            resourceInputs["appSettings"] = state ? state.appSettings : undefined;
            resourceInputs["bundleVersion"] = state ? state.bundleVersion : undefined;
            resourceInputs["clientAffinityEnabled"] = state ? state.clientAffinityEnabled : undefined;
            resourceInputs["clientCertificateMode"] = state ? state.clientCertificateMode : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["customDomainVerificationId"] = state ? state.customDomainVerificationId : undefined;
            resourceInputs["defaultHostname"] = state ? state.defaultHostname : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["httpsOnly"] = state ? state.httpsOnly : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outboundIpAddresses"] = state ? state.outboundIpAddresses : undefined;
            resourceInputs["possibleOutboundIpAddresses"] = state ? state.possibleOutboundIpAddresses : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["siteConfig"] = state ? state.siteConfig : undefined;
            resourceInputs["siteCredentials"] = state ? state.siteCredentials : undefined;
            resourceInputs["storageAccountAccessKey"] = state ? state.storageAccountAccessKey : undefined;
            resourceInputs["storageAccountName"] = state ? state.storageAccountName : undefined;
            resourceInputs["storageAccountShareName"] = state ? state.storageAccountShareName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useExtensionBundle"] = state ? state.useExtensionBundle : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["virtualNetworkSubnetId"] = state ? state.virtualNetworkSubnetId : undefined;
        } else {
            const args = argsOrState as LogicAppStandardArgs | undefined;
            if ((!args || args.appServicePlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appServicePlanId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageAccountAccessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountAccessKey'");
            }
            if ((!args || args.storageAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountName'");
            }
            resourceInputs["appServicePlanId"] = args ? args.appServicePlanId : undefined;
            resourceInputs["appSettings"] = args ? args.appSettings : undefined;
            resourceInputs["bundleVersion"] = args ? args.bundleVersion : undefined;
            resourceInputs["clientAffinityEnabled"] = args ? args.clientAffinityEnabled : undefined;
            resourceInputs["clientCertificateMode"] = args ? args.clientCertificateMode : undefined;
            resourceInputs["connectionStrings"] = args ? args.connectionStrings : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["httpsOnly"] = args ? args.httpsOnly : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["siteConfig"] = args ? args.siteConfig : undefined;
            resourceInputs["storageAccountAccessKey"] = args?.storageAccountAccessKey ? pulumi.secret(args.storageAccountAccessKey) : undefined;
            resourceInputs["storageAccountName"] = args ? args.storageAccountName : undefined;
            resourceInputs["storageAccountShareName"] = args ? args.storageAccountShareName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useExtensionBundle"] = args ? args.useExtensionBundle : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["virtualNetworkSubnetId"] = args ? args.virtualNetworkSubnetId : undefined;
            resourceInputs["customDomainVerificationId"] = undefined /*out*/;
            resourceInputs["defaultHostname"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["outboundIpAddresses"] = undefined /*out*/;
            resourceInputs["possibleOutboundIpAddresses"] = undefined /*out*/;
            resourceInputs["siteCredentials"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["storageAccountAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LogicAppStandard.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogicAppStandard resources.
 */
export interface LogicAppStandardState {
    appServicePlanId?: pulumi.Input<string>;
    appSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    bundleVersion?: pulumi.Input<string>;
    clientAffinityEnabled?: pulumi.Input<boolean>;
    clientCertificateMode?: pulumi.Input<string>;
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.LogicAppStandardConnectionString>[]>;
    customDomainVerificationId?: pulumi.Input<string>;
    defaultHostname?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    httpsOnly?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.LogicAppStandardIdentity>;
    kind?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    outboundIpAddresses?: pulumi.Input<string>;
    possibleOutboundIpAddresses?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    siteConfig?: pulumi.Input<inputs.LogicAppStandardSiteConfig>;
    siteCredentials?: pulumi.Input<pulumi.Input<inputs.LogicAppStandardSiteCredential>[]>;
    storageAccountAccessKey?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    storageAccountShareName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.LogicAppStandardTimeouts>;
    useExtensionBundle?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
    virtualNetworkSubnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogicAppStandard resource.
 */
export interface LogicAppStandardArgs {
    appServicePlanId: pulumi.Input<string>;
    appSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    bundleVersion?: pulumi.Input<string>;
    clientAffinityEnabled?: pulumi.Input<boolean>;
    clientCertificateMode?: pulumi.Input<string>;
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.LogicAppStandardConnectionString>[]>;
    enabled?: pulumi.Input<boolean>;
    httpsOnly?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.LogicAppStandardIdentity>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    siteConfig?: pulumi.Input<inputs.LogicAppStandardSiteConfig>;
    storageAccountAccessKey: pulumi.Input<string>;
    storageAccountName: pulumi.Input<string>;
    storageAccountShareName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.LogicAppStandardTimeouts>;
    useExtensionBundle?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
    virtualNetworkSubnetId?: pulumi.Input<string>;
}
