// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceFabricCluster extends pulumi.CustomResource {
    /**
     * Get an existing ServiceFabricCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceFabricClusterState, opts?: pulumi.CustomResourceOptions): ServiceFabricCluster {
        return new ServiceFabricCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/serviceFabricCluster:ServiceFabricCluster';

    /**
     * Returns true if the given object is an instance of ServiceFabricCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceFabricCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceFabricCluster.__pulumiType;
    }

    public readonly addOnFeatures!: pulumi.Output<string[] | undefined>;
    public readonly azureActiveDirectory!: pulumi.Output<outputs.ServiceFabricClusterAzureActiveDirectory | undefined>;
    public readonly certificate!: pulumi.Output<outputs.ServiceFabricClusterCertificate | undefined>;
    public readonly certificateCommonNames!: pulumi.Output<outputs.ServiceFabricClusterCertificateCommonNames | undefined>;
    public readonly clientCertificateCommonNames!: pulumi.Output<outputs.ServiceFabricClusterClientCertificateCommonName[] | undefined>;
    public readonly clientCertificateThumbprints!: pulumi.Output<outputs.ServiceFabricClusterClientCertificateThumbprint[] | undefined>;
    public readonly clusterCodeVersion!: pulumi.Output<string>;
    public /*out*/ readonly clusterEndpoint!: pulumi.Output<string>;
    public readonly diagnosticsConfig!: pulumi.Output<outputs.ServiceFabricClusterDiagnosticsConfig | undefined>;
    public readonly fabricSettings!: pulumi.Output<outputs.ServiceFabricClusterFabricSetting[] | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly managementEndpoint!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeTypes!: pulumi.Output<outputs.ServiceFabricClusterNodeType[]>;
    public readonly reliabilityLevel!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly reverseProxyCertificate!: pulumi.Output<outputs.ServiceFabricClusterReverseProxyCertificate | undefined>;
    public readonly reverseProxyCertificateCommonNames!: pulumi.Output<outputs.ServiceFabricClusterReverseProxyCertificateCommonNames | undefined>;
    public readonly serviceFabricZonalUpgradeMode!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServiceFabricClusterTimeouts | undefined>;
    public readonly upgradeMode!: pulumi.Output<string>;
    public readonly upgradePolicy!: pulumi.Output<outputs.ServiceFabricClusterUpgradePolicy | undefined>;
    public readonly vmImage!: pulumi.Output<string>;
    public readonly vmssZonalUpgradeMode!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceFabricCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceFabricClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceFabricClusterArgs | ServiceFabricClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceFabricClusterState | undefined;
            resourceInputs["addOnFeatures"] = state ? state.addOnFeatures : undefined;
            resourceInputs["azureActiveDirectory"] = state ? state.azureActiveDirectory : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateCommonNames"] = state ? state.certificateCommonNames : undefined;
            resourceInputs["clientCertificateCommonNames"] = state ? state.clientCertificateCommonNames : undefined;
            resourceInputs["clientCertificateThumbprints"] = state ? state.clientCertificateThumbprints : undefined;
            resourceInputs["clusterCodeVersion"] = state ? state.clusterCodeVersion : undefined;
            resourceInputs["clusterEndpoint"] = state ? state.clusterEndpoint : undefined;
            resourceInputs["diagnosticsConfig"] = state ? state.diagnosticsConfig : undefined;
            resourceInputs["fabricSettings"] = state ? state.fabricSettings : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managementEndpoint"] = state ? state.managementEndpoint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeTypes"] = state ? state.nodeTypes : undefined;
            resourceInputs["reliabilityLevel"] = state ? state.reliabilityLevel : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["reverseProxyCertificate"] = state ? state.reverseProxyCertificate : undefined;
            resourceInputs["reverseProxyCertificateCommonNames"] = state ? state.reverseProxyCertificateCommonNames : undefined;
            resourceInputs["serviceFabricZonalUpgradeMode"] = state ? state.serviceFabricZonalUpgradeMode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["upgradeMode"] = state ? state.upgradeMode : undefined;
            resourceInputs["upgradePolicy"] = state ? state.upgradePolicy : undefined;
            resourceInputs["vmImage"] = state ? state.vmImage : undefined;
            resourceInputs["vmssZonalUpgradeMode"] = state ? state.vmssZonalUpgradeMode : undefined;
        } else {
            const args = argsOrState as ServiceFabricClusterArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.managementEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementEndpoint'");
            }
            if ((!args || args.nodeTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeTypes'");
            }
            if ((!args || args.reliabilityLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reliabilityLevel'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.upgradeMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upgradeMode'");
            }
            if ((!args || args.vmImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmImage'");
            }
            resourceInputs["addOnFeatures"] = args ? args.addOnFeatures : undefined;
            resourceInputs["azureActiveDirectory"] = args ? args.azureActiveDirectory : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["certificateCommonNames"] = args ? args.certificateCommonNames : undefined;
            resourceInputs["clientCertificateCommonNames"] = args ? args.clientCertificateCommonNames : undefined;
            resourceInputs["clientCertificateThumbprints"] = args ? args.clientCertificateThumbprints : undefined;
            resourceInputs["clusterCodeVersion"] = args ? args.clusterCodeVersion : undefined;
            resourceInputs["diagnosticsConfig"] = args ? args.diagnosticsConfig : undefined;
            resourceInputs["fabricSettings"] = args ? args.fabricSettings : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managementEndpoint"] = args ? args.managementEndpoint : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeTypes"] = args ? args.nodeTypes : undefined;
            resourceInputs["reliabilityLevel"] = args ? args.reliabilityLevel : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["reverseProxyCertificate"] = args ? args.reverseProxyCertificate : undefined;
            resourceInputs["reverseProxyCertificateCommonNames"] = args ? args.reverseProxyCertificateCommonNames : undefined;
            resourceInputs["serviceFabricZonalUpgradeMode"] = args ? args.serviceFabricZonalUpgradeMode : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["upgradeMode"] = args ? args.upgradeMode : undefined;
            resourceInputs["upgradePolicy"] = args ? args.upgradePolicy : undefined;
            resourceInputs["vmImage"] = args ? args.vmImage : undefined;
            resourceInputs["vmssZonalUpgradeMode"] = args ? args.vmssZonalUpgradeMode : undefined;
            resourceInputs["clusterEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceFabricCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceFabricCluster resources.
 */
export interface ServiceFabricClusterState {
    addOnFeatures?: pulumi.Input<pulumi.Input<string>[]>;
    azureActiveDirectory?: pulumi.Input<inputs.ServiceFabricClusterAzureActiveDirectory>;
    certificate?: pulumi.Input<inputs.ServiceFabricClusterCertificate>;
    certificateCommonNames?: pulumi.Input<inputs.ServiceFabricClusterCertificateCommonNames>;
    clientCertificateCommonNames?: pulumi.Input<pulumi.Input<inputs.ServiceFabricClusterClientCertificateCommonName>[]>;
    clientCertificateThumbprints?: pulumi.Input<pulumi.Input<inputs.ServiceFabricClusterClientCertificateThumbprint>[]>;
    clusterCodeVersion?: pulumi.Input<string>;
    clusterEndpoint?: pulumi.Input<string>;
    diagnosticsConfig?: pulumi.Input<inputs.ServiceFabricClusterDiagnosticsConfig>;
    fabricSettings?: pulumi.Input<pulumi.Input<inputs.ServiceFabricClusterFabricSetting>[]>;
    location?: pulumi.Input<string>;
    managementEndpoint?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeTypes?: pulumi.Input<pulumi.Input<inputs.ServiceFabricClusterNodeType>[]>;
    reliabilityLevel?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    reverseProxyCertificate?: pulumi.Input<inputs.ServiceFabricClusterReverseProxyCertificate>;
    reverseProxyCertificateCommonNames?: pulumi.Input<inputs.ServiceFabricClusterReverseProxyCertificateCommonNames>;
    serviceFabricZonalUpgradeMode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ServiceFabricClusterTimeouts>;
    upgradeMode?: pulumi.Input<string>;
    upgradePolicy?: pulumi.Input<inputs.ServiceFabricClusterUpgradePolicy>;
    vmImage?: pulumi.Input<string>;
    vmssZonalUpgradeMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceFabricCluster resource.
 */
export interface ServiceFabricClusterArgs {
    addOnFeatures?: pulumi.Input<pulumi.Input<string>[]>;
    azureActiveDirectory?: pulumi.Input<inputs.ServiceFabricClusterAzureActiveDirectory>;
    certificate?: pulumi.Input<inputs.ServiceFabricClusterCertificate>;
    certificateCommonNames?: pulumi.Input<inputs.ServiceFabricClusterCertificateCommonNames>;
    clientCertificateCommonNames?: pulumi.Input<pulumi.Input<inputs.ServiceFabricClusterClientCertificateCommonName>[]>;
    clientCertificateThumbprints?: pulumi.Input<pulumi.Input<inputs.ServiceFabricClusterClientCertificateThumbprint>[]>;
    clusterCodeVersion?: pulumi.Input<string>;
    diagnosticsConfig?: pulumi.Input<inputs.ServiceFabricClusterDiagnosticsConfig>;
    fabricSettings?: pulumi.Input<pulumi.Input<inputs.ServiceFabricClusterFabricSetting>[]>;
    location: pulumi.Input<string>;
    managementEndpoint: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeTypes: pulumi.Input<pulumi.Input<inputs.ServiceFabricClusterNodeType>[]>;
    reliabilityLevel: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    reverseProxyCertificate?: pulumi.Input<inputs.ServiceFabricClusterReverseProxyCertificate>;
    reverseProxyCertificateCommonNames?: pulumi.Input<inputs.ServiceFabricClusterReverseProxyCertificateCommonNames>;
    serviceFabricZonalUpgradeMode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ServiceFabricClusterTimeouts>;
    upgradeMode: pulumi.Input<string>;
    upgradePolicy?: pulumi.Input<inputs.ServiceFabricClusterUpgradePolicy>;
    vmImage: pulumi.Input<string>;
    vmssZonalUpgradeMode?: pulumi.Input<string>;
}
