// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HealthcareMedtechService extends pulumi.CustomResource {
    /**
     * Get an existing HealthcareMedtechService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthcareMedtechServiceState, opts?: pulumi.CustomResourceOptions): HealthcareMedtechService {
        return new HealthcareMedtechService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/healthcareMedtechService:HealthcareMedtechService';

    /**
     * Returns true if the given object is an instance of HealthcareMedtechService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthcareMedtechService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthcareMedtechService.__pulumiType;
    }

    public readonly deviceMappingJson!: pulumi.Output<string>;
    public readonly eventhubConsumerGroupName!: pulumi.Output<string>;
    public readonly eventhubName!: pulumi.Output<string>;
    public readonly eventhubNamespaceName!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.HealthcareMedtechServiceIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.HealthcareMedtechServiceTimeouts | undefined>;
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a HealthcareMedtechService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthcareMedtechServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthcareMedtechServiceArgs | HealthcareMedtechServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthcareMedtechServiceState | undefined;
            resourceInputs["deviceMappingJson"] = state ? state.deviceMappingJson : undefined;
            resourceInputs["eventhubConsumerGroupName"] = state ? state.eventhubConsumerGroupName : undefined;
            resourceInputs["eventhubName"] = state ? state.eventhubName : undefined;
            resourceInputs["eventhubNamespaceName"] = state ? state.eventhubNamespaceName : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as HealthcareMedtechServiceArgs | undefined;
            if ((!args || args.deviceMappingJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceMappingJson'");
            }
            if ((!args || args.eventhubConsumerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubConsumerGroupName'");
            }
            if ((!args || args.eventhubName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubName'");
            }
            if ((!args || args.eventhubNamespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubNamespaceName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["deviceMappingJson"] = args ? args.deviceMappingJson : undefined;
            resourceInputs["eventhubConsumerGroupName"] = args ? args.eventhubConsumerGroupName : undefined;
            resourceInputs["eventhubName"] = args ? args.eventhubName : undefined;
            resourceInputs["eventhubNamespaceName"] = args ? args.eventhubNamespaceName : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthcareMedtechService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthcareMedtechService resources.
 */
export interface HealthcareMedtechServiceState {
    deviceMappingJson?: pulumi.Input<string>;
    eventhubConsumerGroupName?: pulumi.Input<string>;
    eventhubName?: pulumi.Input<string>;
    eventhubNamespaceName?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.HealthcareMedtechServiceIdentity>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HealthcareMedtechServiceTimeouts>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthcareMedtechService resource.
 */
export interface HealthcareMedtechServiceArgs {
    deviceMappingJson: pulumi.Input<string>;
    eventhubConsumerGroupName: pulumi.Input<string>;
    eventhubName: pulumi.Input<string>;
    eventhubNamespaceName: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.HealthcareMedtechServiceIdentity>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HealthcareMedtechServiceTimeouts>;
    workspaceId: pulumi.Input<string>;
}
