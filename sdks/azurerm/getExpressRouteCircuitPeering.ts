// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getExpressRouteCircuitPeering(args: GetExpressRouteCircuitPeeringArgs, opts?: pulumi.InvokeOptions): Promise<GetExpressRouteCircuitPeeringResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getExpressRouteCircuitPeering:getExpressRouteCircuitPeering", {
        "expressRouteCircuitName": args.expressRouteCircuitName,
        "id": args.id,
        "peeringType": args.peeringType,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getExpressRouteCircuitPeering.
 */
export interface GetExpressRouteCircuitPeeringArgs {
    expressRouteCircuitName: string;
    id?: string;
    peeringType: string;
    resourceGroupName: string;
    timeouts?: inputs.GetExpressRouteCircuitPeeringTimeouts;
}

/**
 * A collection of values returned by getExpressRouteCircuitPeering.
 */
export interface GetExpressRouteCircuitPeeringResult {
    readonly azureAsn: number;
    readonly expressRouteCircuitName: string;
    readonly gatewayManagerEtag: string;
    readonly id: string;
    readonly ipv4Enabled: boolean;
    readonly peerAsn: number;
    readonly peeringType: string;
    readonly primaryAzurePort: string;
    readonly primaryPeerAddressPrefix: string;
    readonly resourceGroupName: string;
    readonly routeFilterId: string;
    readonly secondaryAzurePort: string;
    readonly secondaryPeerAddressPrefix: string;
    readonly sharedKey: string;
    readonly timeouts?: outputs.GetExpressRouteCircuitPeeringTimeouts;
    readonly vlanId: number;
}
export function getExpressRouteCircuitPeeringOutput(args: GetExpressRouteCircuitPeeringOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetExpressRouteCircuitPeeringResult> {
    return pulumi.output(args).apply((a: any) => getExpressRouteCircuitPeering(a, opts))
}

/**
 * A collection of arguments for invoking getExpressRouteCircuitPeering.
 */
export interface GetExpressRouteCircuitPeeringOutputArgs {
    expressRouteCircuitName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    peeringType: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetExpressRouteCircuitPeeringTimeoutsArgs>;
}
