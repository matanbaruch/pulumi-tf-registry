// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerRegistryTask extends pulumi.CustomResource {
    /**
     * Get an existing ContainerRegistryTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerRegistryTaskState, opts?: pulumi.CustomResourceOptions): ContainerRegistryTask {
        return new ContainerRegistryTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/containerRegistryTask:ContainerRegistryTask';

    /**
     * Returns true if the given object is an instance of ContainerRegistryTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerRegistryTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerRegistryTask.__pulumiType;
    }

    public readonly agentPoolName!: pulumi.Output<string | undefined>;
    public readonly agentSetting!: pulumi.Output<outputs.ContainerRegistryTaskAgentSetting | undefined>;
    public readonly baseImageTrigger!: pulumi.Output<outputs.ContainerRegistryTaskBaseImageTrigger | undefined>;
    public readonly containerRegistryId!: pulumi.Output<string>;
    public readonly dockerStep!: pulumi.Output<outputs.ContainerRegistryTaskDockerStep | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly encodedStep!: pulumi.Output<outputs.ContainerRegistryTaskEncodedStep | undefined>;
    public readonly fileStep!: pulumi.Output<outputs.ContainerRegistryTaskFileStep | undefined>;
    public readonly identity!: pulumi.Output<outputs.ContainerRegistryTaskIdentity | undefined>;
    public readonly isSystemTask!: pulumi.Output<boolean | undefined>;
    public readonly logTemplate!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly platform!: pulumi.Output<outputs.ContainerRegistryTaskPlatform | undefined>;
    public readonly registryCredential!: pulumi.Output<outputs.ContainerRegistryTaskRegistryCredential | undefined>;
    public readonly sourceTriggers!: pulumi.Output<outputs.ContainerRegistryTaskSourceTrigger[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeoutInSeconds!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerRegistryTaskTimeouts | undefined>;
    public readonly timerTriggers!: pulumi.Output<outputs.ContainerRegistryTaskTimerTrigger[] | undefined>;

    /**
     * Create a ContainerRegistryTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerRegistryTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerRegistryTaskArgs | ContainerRegistryTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerRegistryTaskState | undefined;
            resourceInputs["agentPoolName"] = state ? state.agentPoolName : undefined;
            resourceInputs["agentSetting"] = state ? state.agentSetting : undefined;
            resourceInputs["baseImageTrigger"] = state ? state.baseImageTrigger : undefined;
            resourceInputs["containerRegistryId"] = state ? state.containerRegistryId : undefined;
            resourceInputs["dockerStep"] = state ? state.dockerStep : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["encodedStep"] = state ? state.encodedStep : undefined;
            resourceInputs["fileStep"] = state ? state.fileStep : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["isSystemTask"] = state ? state.isSystemTask : undefined;
            resourceInputs["logTemplate"] = state ? state.logTemplate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["registryCredential"] = state ? state.registryCredential : undefined;
            resourceInputs["sourceTriggers"] = state ? state.sourceTriggers : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeoutInSeconds"] = state ? state.timeoutInSeconds : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["timerTriggers"] = state ? state.timerTriggers : undefined;
        } else {
            const args = argsOrState as ContainerRegistryTaskArgs | undefined;
            if ((!args || args.containerRegistryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerRegistryId'");
            }
            resourceInputs["agentPoolName"] = args ? args.agentPoolName : undefined;
            resourceInputs["agentSetting"] = args ? args.agentSetting : undefined;
            resourceInputs["baseImageTrigger"] = args ? args.baseImageTrigger : undefined;
            resourceInputs["containerRegistryId"] = args ? args.containerRegistryId : undefined;
            resourceInputs["dockerStep"] = args ? args.dockerStep : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["encodedStep"] = args ? args.encodedStep : undefined;
            resourceInputs["fileStep"] = args ? args.fileStep : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["isSystemTask"] = args ? args.isSystemTask : undefined;
            resourceInputs["logTemplate"] = args ? args.logTemplate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["registryCredential"] = args ? args.registryCredential : undefined;
            resourceInputs["sourceTriggers"] = args ? args.sourceTriggers : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeoutInSeconds"] = args ? args.timeoutInSeconds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["timerTriggers"] = args ? args.timerTriggers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerRegistryTask.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerRegistryTask resources.
 */
export interface ContainerRegistryTaskState {
    agentPoolName?: pulumi.Input<string>;
    agentSetting?: pulumi.Input<inputs.ContainerRegistryTaskAgentSetting>;
    baseImageTrigger?: pulumi.Input<inputs.ContainerRegistryTaskBaseImageTrigger>;
    containerRegistryId?: pulumi.Input<string>;
    dockerStep?: pulumi.Input<inputs.ContainerRegistryTaskDockerStep>;
    enabled?: pulumi.Input<boolean>;
    encodedStep?: pulumi.Input<inputs.ContainerRegistryTaskEncodedStep>;
    fileStep?: pulumi.Input<inputs.ContainerRegistryTaskFileStep>;
    identity?: pulumi.Input<inputs.ContainerRegistryTaskIdentity>;
    isSystemTask?: pulumi.Input<boolean>;
    logTemplate?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<inputs.ContainerRegistryTaskPlatform>;
    registryCredential?: pulumi.Input<inputs.ContainerRegistryTaskRegistryCredential>;
    sourceTriggers?: pulumi.Input<pulumi.Input<inputs.ContainerRegistryTaskSourceTrigger>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeoutInSeconds?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ContainerRegistryTaskTimeouts>;
    timerTriggers?: pulumi.Input<pulumi.Input<inputs.ContainerRegistryTaskTimerTrigger>[]>;
}

/**
 * The set of arguments for constructing a ContainerRegistryTask resource.
 */
export interface ContainerRegistryTaskArgs {
    agentPoolName?: pulumi.Input<string>;
    agentSetting?: pulumi.Input<inputs.ContainerRegistryTaskAgentSetting>;
    baseImageTrigger?: pulumi.Input<inputs.ContainerRegistryTaskBaseImageTrigger>;
    containerRegistryId: pulumi.Input<string>;
    dockerStep?: pulumi.Input<inputs.ContainerRegistryTaskDockerStep>;
    enabled?: pulumi.Input<boolean>;
    encodedStep?: pulumi.Input<inputs.ContainerRegistryTaskEncodedStep>;
    fileStep?: pulumi.Input<inputs.ContainerRegistryTaskFileStep>;
    identity?: pulumi.Input<inputs.ContainerRegistryTaskIdentity>;
    isSystemTask?: pulumi.Input<boolean>;
    logTemplate?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<inputs.ContainerRegistryTaskPlatform>;
    registryCredential?: pulumi.Input<inputs.ContainerRegistryTaskRegistryCredential>;
    sourceTriggers?: pulumi.Input<pulumi.Input<inputs.ContainerRegistryTaskSourceTrigger>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeoutInSeconds?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ContainerRegistryTaskTimeouts>;
    timerTriggers?: pulumi.Input<pulumi.Input<inputs.ContainerRegistryTaskTimerTrigger>[]>;
}
