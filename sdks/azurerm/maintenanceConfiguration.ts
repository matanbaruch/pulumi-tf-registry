// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MaintenanceConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing MaintenanceConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MaintenanceConfigurationState, opts?: pulumi.CustomResourceOptions): MaintenanceConfiguration {
        return new MaintenanceConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/maintenanceConfiguration:MaintenanceConfiguration';

    /**
     * Returns true if the given object is an instance of MaintenanceConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MaintenanceConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MaintenanceConfiguration.__pulumiType;
    }

    public readonly inGuestUserPatchMode!: pulumi.Output<string | undefined>;
    public readonly installPatches!: pulumi.Output<outputs.MaintenanceConfigurationInstallPatches | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly properties!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MaintenanceConfigurationTimeouts | undefined>;
    public readonly visibility!: pulumi.Output<string | undefined>;
    public readonly window!: pulumi.Output<outputs.MaintenanceConfigurationWindow | undefined>;

    /**
     * Create a MaintenanceConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MaintenanceConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MaintenanceConfigurationArgs | MaintenanceConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MaintenanceConfigurationState | undefined;
            resourceInputs["inGuestUserPatchMode"] = state ? state.inGuestUserPatchMode : undefined;
            resourceInputs["installPatches"] = state ? state.installPatches : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
            resourceInputs["window"] = state ? state.window : undefined;
        } else {
            const args = argsOrState as MaintenanceConfigurationArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["inGuestUserPatchMode"] = args ? args.inGuestUserPatchMode : undefined;
            resourceInputs["installPatches"] = args ? args.installPatches : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
            resourceInputs["window"] = args ? args.window : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MaintenanceConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MaintenanceConfiguration resources.
 */
export interface MaintenanceConfigurationState {
    inGuestUserPatchMode?: pulumi.Input<string>;
    installPatches?: pulumi.Input<inputs.MaintenanceConfigurationInstallPatches>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    resourceGroupName?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MaintenanceConfigurationTimeouts>;
    visibility?: pulumi.Input<string>;
    window?: pulumi.Input<inputs.MaintenanceConfigurationWindow>;
}

/**
 * The set of arguments for constructing a MaintenanceConfiguration resource.
 */
export interface MaintenanceConfigurationArgs {
    inGuestUserPatchMode?: pulumi.Input<string>;
    installPatches?: pulumi.Input<inputs.MaintenanceConfigurationInstallPatches>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    resourceGroupName: pulumi.Input<string>;
    scope: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MaintenanceConfigurationTimeouts>;
    visibility?: pulumi.Input<string>;
    window?: pulumi.Input<inputs.MaintenanceConfigurationWindow>;
}
