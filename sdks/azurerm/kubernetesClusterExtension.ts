// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesClusterExtension extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesClusterExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesClusterExtensionState, opts?: pulumi.CustomResourceOptions): KubernetesClusterExtension {
        return new KubernetesClusterExtension(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/kubernetesClusterExtension:KubernetesClusterExtension';

    /**
     * Returns true if the given object is an instance of KubernetesClusterExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesClusterExtension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesClusterExtension.__pulumiType;
    }

    public /*out*/ readonly aksAssignedIdentities!: pulumi.Output<outputs.KubernetesClusterExtensionAksAssignedIdentity[]>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly configurationProtectedSettings!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly configurationSettings!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly currentVersion!: pulumi.Output<string>;
    public readonly extensionType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly plan!: pulumi.Output<outputs.KubernetesClusterExtensionPlan | undefined>;
    public readonly releaseNamespace!: pulumi.Output<string>;
    public readonly releaseTrain!: pulumi.Output<string>;
    public readonly targetNamespace!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KubernetesClusterExtensionTimeouts | undefined>;
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a KubernetesClusterExtension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesClusterExtensionArgs | KubernetesClusterExtensionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesClusterExtensionState | undefined;
            resourceInputs["aksAssignedIdentities"] = state ? state.aksAssignedIdentities : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["configurationProtectedSettings"] = state ? state.configurationProtectedSettings : undefined;
            resourceInputs["configurationSettings"] = state ? state.configurationSettings : undefined;
            resourceInputs["currentVersion"] = state ? state.currentVersion : undefined;
            resourceInputs["extensionType"] = state ? state.extensionType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["releaseNamespace"] = state ? state.releaseNamespace : undefined;
            resourceInputs["releaseTrain"] = state ? state.releaseTrain : undefined;
            resourceInputs["targetNamespace"] = state ? state.targetNamespace : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as KubernetesClusterExtensionArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.extensionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensionType'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["configurationProtectedSettings"] = args ? args.configurationProtectedSettings : undefined;
            resourceInputs["configurationSettings"] = args ? args.configurationSettings : undefined;
            resourceInputs["extensionType"] = args ? args.extensionType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["releaseNamespace"] = args ? args.releaseNamespace : undefined;
            resourceInputs["releaseTrain"] = args ? args.releaseTrain : undefined;
            resourceInputs["targetNamespace"] = args ? args.targetNamespace : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["aksAssignedIdentities"] = undefined /*out*/;
            resourceInputs["currentVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesClusterExtension.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesClusterExtension resources.
 */
export interface KubernetesClusterExtensionState {
    aksAssignedIdentities?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterExtensionAksAssignedIdentity>[]>;
    clusterId?: pulumi.Input<string>;
    configurationProtectedSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    configurationSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    currentVersion?: pulumi.Input<string>;
    extensionType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.KubernetesClusterExtensionPlan>;
    releaseNamespace?: pulumi.Input<string>;
    releaseTrain?: pulumi.Input<string>;
    targetNamespace?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KubernetesClusterExtensionTimeouts>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesClusterExtension resource.
 */
export interface KubernetesClusterExtensionArgs {
    clusterId: pulumi.Input<string>;
    configurationProtectedSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    configurationSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    extensionType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.KubernetesClusterExtensionPlan>;
    releaseNamespace?: pulumi.Input<string>;
    releaseTrain?: pulumi.Input<string>;
    targetNamespace?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KubernetesClusterExtensionTimeouts>;
    version?: pulumi.Input<string>;
}
