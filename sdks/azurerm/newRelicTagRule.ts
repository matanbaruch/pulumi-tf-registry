// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NewRelicTagRule extends pulumi.CustomResource {
    /**
     * Get an existing NewRelicTagRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NewRelicTagRuleState, opts?: pulumi.CustomResourceOptions): NewRelicTagRule {
        return new NewRelicTagRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/newRelicTagRule:NewRelicTagRule';

    /**
     * Returns true if the given object is an instance of NewRelicTagRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NewRelicTagRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NewRelicTagRule.__pulumiType;
    }

    public readonly activityLogEnabled!: pulumi.Output<boolean | undefined>;
    public readonly azureActiveDirectoryLogEnabled!: pulumi.Output<boolean | undefined>;
    public readonly logTagFilters!: pulumi.Output<outputs.NewRelicTagRuleLogTagFilter[] | undefined>;
    public readonly metricEnabled!: pulumi.Output<boolean | undefined>;
    public readonly metricTagFilters!: pulumi.Output<outputs.NewRelicTagRuleMetricTagFilter[] | undefined>;
    public readonly monitorId!: pulumi.Output<string>;
    public readonly subscriptionLogEnabled!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NewRelicTagRuleTimeouts | undefined>;

    /**
     * Create a NewRelicTagRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NewRelicTagRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NewRelicTagRuleArgs | NewRelicTagRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NewRelicTagRuleState | undefined;
            resourceInputs["activityLogEnabled"] = state ? state.activityLogEnabled : undefined;
            resourceInputs["azureActiveDirectoryLogEnabled"] = state ? state.azureActiveDirectoryLogEnabled : undefined;
            resourceInputs["logTagFilters"] = state ? state.logTagFilters : undefined;
            resourceInputs["metricEnabled"] = state ? state.metricEnabled : undefined;
            resourceInputs["metricTagFilters"] = state ? state.metricTagFilters : undefined;
            resourceInputs["monitorId"] = state ? state.monitorId : undefined;
            resourceInputs["subscriptionLogEnabled"] = state ? state.subscriptionLogEnabled : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NewRelicTagRuleArgs | undefined;
            if ((!args || args.monitorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorId'");
            }
            resourceInputs["activityLogEnabled"] = args ? args.activityLogEnabled : undefined;
            resourceInputs["azureActiveDirectoryLogEnabled"] = args ? args.azureActiveDirectoryLogEnabled : undefined;
            resourceInputs["logTagFilters"] = args ? args.logTagFilters : undefined;
            resourceInputs["metricEnabled"] = args ? args.metricEnabled : undefined;
            resourceInputs["metricTagFilters"] = args ? args.metricTagFilters : undefined;
            resourceInputs["monitorId"] = args ? args.monitorId : undefined;
            resourceInputs["subscriptionLogEnabled"] = args ? args.subscriptionLogEnabled : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NewRelicTagRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NewRelicTagRule resources.
 */
export interface NewRelicTagRuleState {
    activityLogEnabled?: pulumi.Input<boolean>;
    azureActiveDirectoryLogEnabled?: pulumi.Input<boolean>;
    logTagFilters?: pulumi.Input<pulumi.Input<inputs.NewRelicTagRuleLogTagFilter>[]>;
    metricEnabled?: pulumi.Input<boolean>;
    metricTagFilters?: pulumi.Input<pulumi.Input<inputs.NewRelicTagRuleMetricTagFilter>[]>;
    monitorId?: pulumi.Input<string>;
    subscriptionLogEnabled?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.NewRelicTagRuleTimeouts>;
}

/**
 * The set of arguments for constructing a NewRelicTagRule resource.
 */
export interface NewRelicTagRuleArgs {
    activityLogEnabled?: pulumi.Input<boolean>;
    azureActiveDirectoryLogEnabled?: pulumi.Input<boolean>;
    logTagFilters?: pulumi.Input<pulumi.Input<inputs.NewRelicTagRuleLogTagFilter>[]>;
    metricEnabled?: pulumi.Input<boolean>;
    metricTagFilters?: pulumi.Input<pulumi.Input<inputs.NewRelicTagRuleMetricTagFilter>[]>;
    monitorId: pulumi.Input<string>;
    subscriptionLogEnabled?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.NewRelicTagRuleTimeouts>;
}
