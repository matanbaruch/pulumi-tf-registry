// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SiteRecoveryVmwareReplicatedVm extends pulumi.CustomResource {
    /**
     * Get an existing SiteRecoveryVmwareReplicatedVm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteRecoveryVmwareReplicatedVmState, opts?: pulumi.CustomResourceOptions): SiteRecoveryVmwareReplicatedVm {
        return new SiteRecoveryVmwareReplicatedVm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/siteRecoveryVmwareReplicatedVm:SiteRecoveryVmwareReplicatedVm';

    /**
     * Returns true if the given object is an instance of SiteRecoveryVmwareReplicatedVm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteRecoveryVmwareReplicatedVm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteRecoveryVmwareReplicatedVm.__pulumiType;
    }

    public readonly applianceName!: pulumi.Output<string>;
    public readonly defaultLogStorageAccountId!: pulumi.Output<string | undefined>;
    public readonly defaultRecoveryDiskType!: pulumi.Output<string | undefined>;
    public readonly defaultTargetDiskEncryptionSetId!: pulumi.Output<string | undefined>;
    public readonly licenseType!: pulumi.Output<string | undefined>;
    public readonly managedDisks!: pulumi.Output<outputs.SiteRecoveryVmwareReplicatedVmManagedDisk[] | undefined>;
    public readonly multiVmGroupName!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaces!: pulumi.Output<outputs.SiteRecoveryVmwareReplicatedVmNetworkInterface[] | undefined>;
    public readonly physicalServerCredentialName!: pulumi.Output<string>;
    public readonly recoveryReplicationPolicyId!: pulumi.Output<string>;
    public readonly recoveryVaultId!: pulumi.Output<string>;
    public readonly sourceVmName!: pulumi.Output<string>;
    public readonly targetAvailabilitySetId!: pulumi.Output<string | undefined>;
    public readonly targetBootDiagnosticsStorageAccountId!: pulumi.Output<string | undefined>;
    public readonly targetNetworkId!: pulumi.Output<string | undefined>;
    public readonly targetProximityPlacementGroupId!: pulumi.Output<string | undefined>;
    public readonly targetResourceGroupId!: pulumi.Output<string>;
    public readonly targetVmName!: pulumi.Output<string>;
    public readonly targetVmSize!: pulumi.Output<string | undefined>;
    public readonly targetZone!: pulumi.Output<string | undefined>;
    public readonly testNetworkId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SiteRecoveryVmwareReplicatedVmTimeouts | undefined>;

    /**
     * Create a SiteRecoveryVmwareReplicatedVm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteRecoveryVmwareReplicatedVmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteRecoveryVmwareReplicatedVmArgs | SiteRecoveryVmwareReplicatedVmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteRecoveryVmwareReplicatedVmState | undefined;
            resourceInputs["applianceName"] = state ? state.applianceName : undefined;
            resourceInputs["defaultLogStorageAccountId"] = state ? state.defaultLogStorageAccountId : undefined;
            resourceInputs["defaultRecoveryDiskType"] = state ? state.defaultRecoveryDiskType : undefined;
            resourceInputs["defaultTargetDiskEncryptionSetId"] = state ? state.defaultTargetDiskEncryptionSetId : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["managedDisks"] = state ? state.managedDisks : undefined;
            resourceInputs["multiVmGroupName"] = state ? state.multiVmGroupName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["physicalServerCredentialName"] = state ? state.physicalServerCredentialName : undefined;
            resourceInputs["recoveryReplicationPolicyId"] = state ? state.recoveryReplicationPolicyId : undefined;
            resourceInputs["recoveryVaultId"] = state ? state.recoveryVaultId : undefined;
            resourceInputs["sourceVmName"] = state ? state.sourceVmName : undefined;
            resourceInputs["targetAvailabilitySetId"] = state ? state.targetAvailabilitySetId : undefined;
            resourceInputs["targetBootDiagnosticsStorageAccountId"] = state ? state.targetBootDiagnosticsStorageAccountId : undefined;
            resourceInputs["targetNetworkId"] = state ? state.targetNetworkId : undefined;
            resourceInputs["targetProximityPlacementGroupId"] = state ? state.targetProximityPlacementGroupId : undefined;
            resourceInputs["targetResourceGroupId"] = state ? state.targetResourceGroupId : undefined;
            resourceInputs["targetVmName"] = state ? state.targetVmName : undefined;
            resourceInputs["targetVmSize"] = state ? state.targetVmSize : undefined;
            resourceInputs["targetZone"] = state ? state.targetZone : undefined;
            resourceInputs["testNetworkId"] = state ? state.testNetworkId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SiteRecoveryVmwareReplicatedVmArgs | undefined;
            if ((!args || args.applianceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applianceName'");
            }
            if ((!args || args.physicalServerCredentialName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'physicalServerCredentialName'");
            }
            if ((!args || args.recoveryReplicationPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryReplicationPolicyId'");
            }
            if ((!args || args.recoveryVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultId'");
            }
            if ((!args || args.sourceVmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceVmName'");
            }
            if ((!args || args.targetResourceGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceGroupId'");
            }
            if ((!args || args.targetVmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetVmName'");
            }
            resourceInputs["applianceName"] = args ? args.applianceName : undefined;
            resourceInputs["defaultLogStorageAccountId"] = args ? args.defaultLogStorageAccountId : undefined;
            resourceInputs["defaultRecoveryDiskType"] = args ? args.defaultRecoveryDiskType : undefined;
            resourceInputs["defaultTargetDiskEncryptionSetId"] = args ? args.defaultTargetDiskEncryptionSetId : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["managedDisks"] = args ? args.managedDisks : undefined;
            resourceInputs["multiVmGroupName"] = args ? args.multiVmGroupName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["physicalServerCredentialName"] = args ? args.physicalServerCredentialName : undefined;
            resourceInputs["recoveryReplicationPolicyId"] = args ? args.recoveryReplicationPolicyId : undefined;
            resourceInputs["recoveryVaultId"] = args ? args.recoveryVaultId : undefined;
            resourceInputs["sourceVmName"] = args ? args.sourceVmName : undefined;
            resourceInputs["targetAvailabilitySetId"] = args ? args.targetAvailabilitySetId : undefined;
            resourceInputs["targetBootDiagnosticsStorageAccountId"] = args ? args.targetBootDiagnosticsStorageAccountId : undefined;
            resourceInputs["targetNetworkId"] = args ? args.targetNetworkId : undefined;
            resourceInputs["targetProximityPlacementGroupId"] = args ? args.targetProximityPlacementGroupId : undefined;
            resourceInputs["targetResourceGroupId"] = args ? args.targetResourceGroupId : undefined;
            resourceInputs["targetVmName"] = args ? args.targetVmName : undefined;
            resourceInputs["targetVmSize"] = args ? args.targetVmSize : undefined;
            resourceInputs["targetZone"] = args ? args.targetZone : undefined;
            resourceInputs["testNetworkId"] = args ? args.testNetworkId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteRecoveryVmwareReplicatedVm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteRecoveryVmwareReplicatedVm resources.
 */
export interface SiteRecoveryVmwareReplicatedVmState {
    applianceName?: pulumi.Input<string>;
    defaultLogStorageAccountId?: pulumi.Input<string>;
    defaultRecoveryDiskType?: pulumi.Input<string>;
    defaultTargetDiskEncryptionSetId?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    managedDisks?: pulumi.Input<pulumi.Input<inputs.SiteRecoveryVmwareReplicatedVmManagedDisk>[]>;
    multiVmGroupName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.SiteRecoveryVmwareReplicatedVmNetworkInterface>[]>;
    physicalServerCredentialName?: pulumi.Input<string>;
    recoveryReplicationPolicyId?: pulumi.Input<string>;
    recoveryVaultId?: pulumi.Input<string>;
    sourceVmName?: pulumi.Input<string>;
    targetAvailabilitySetId?: pulumi.Input<string>;
    targetBootDiagnosticsStorageAccountId?: pulumi.Input<string>;
    targetNetworkId?: pulumi.Input<string>;
    targetProximityPlacementGroupId?: pulumi.Input<string>;
    targetResourceGroupId?: pulumi.Input<string>;
    targetVmName?: pulumi.Input<string>;
    targetVmSize?: pulumi.Input<string>;
    targetZone?: pulumi.Input<string>;
    testNetworkId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SiteRecoveryVmwareReplicatedVmTimeouts>;
}

/**
 * The set of arguments for constructing a SiteRecoveryVmwareReplicatedVm resource.
 */
export interface SiteRecoveryVmwareReplicatedVmArgs {
    applianceName: pulumi.Input<string>;
    defaultLogStorageAccountId?: pulumi.Input<string>;
    defaultRecoveryDiskType?: pulumi.Input<string>;
    defaultTargetDiskEncryptionSetId?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    managedDisks?: pulumi.Input<pulumi.Input<inputs.SiteRecoveryVmwareReplicatedVmManagedDisk>[]>;
    multiVmGroupName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.SiteRecoveryVmwareReplicatedVmNetworkInterface>[]>;
    physicalServerCredentialName: pulumi.Input<string>;
    recoveryReplicationPolicyId: pulumi.Input<string>;
    recoveryVaultId: pulumi.Input<string>;
    sourceVmName: pulumi.Input<string>;
    targetAvailabilitySetId?: pulumi.Input<string>;
    targetBootDiagnosticsStorageAccountId?: pulumi.Input<string>;
    targetNetworkId?: pulumi.Input<string>;
    targetProximityPlacementGroupId?: pulumi.Input<string>;
    targetResourceGroupId: pulumi.Input<string>;
    targetVmName: pulumi.Input<string>;
    targetVmSize?: pulumi.Input<string>;
    targetZone?: pulumi.Input<string>;
    testNetworkId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SiteRecoveryVmwareReplicatedVmTimeouts>;
}
