// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PostgresqlServer extends pulumi.CustomResource {
    /**
     * Get an existing PostgresqlServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PostgresqlServerState, opts?: pulumi.CustomResourceOptions): PostgresqlServer {
        return new PostgresqlServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/postgresqlServer:PostgresqlServer';

    /**
     * Returns true if the given object is an instance of PostgresqlServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PostgresqlServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PostgresqlServer.__pulumiType;
    }

    public readonly administratorLogin!: pulumi.Output<string>;
    public readonly administratorLoginPassword!: pulumi.Output<string | undefined>;
    public readonly autoGrowEnabled!: pulumi.Output<boolean | undefined>;
    public readonly backupRetentionDays!: pulumi.Output<number>;
    public readonly createMode!: pulumi.Output<string | undefined>;
    public readonly creationSourceServerId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly geoRedundantBackupEnabled!: pulumi.Output<boolean | undefined>;
    public readonly identity!: pulumi.Output<outputs.PostgresqlServerIdentity | undefined>;
    public readonly infrastructureEncryptionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly restorePointInTime!: pulumi.Output<string | undefined>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly sslEnforcementEnabled!: pulumi.Output<boolean>;
    public readonly sslMinimalTlsVersionEnforced!: pulumi.Output<string | undefined>;
    public readonly storageMb!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly threatDetectionPolicy!: pulumi.Output<outputs.PostgresqlServerThreatDetectionPolicy | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PostgresqlServerTimeouts | undefined>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a PostgresqlServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PostgresqlServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PostgresqlServerArgs | PostgresqlServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PostgresqlServerState | undefined;
            resourceInputs["administratorLogin"] = state ? state.administratorLogin : undefined;
            resourceInputs["administratorLoginPassword"] = state ? state.administratorLoginPassword : undefined;
            resourceInputs["autoGrowEnabled"] = state ? state.autoGrowEnabled : undefined;
            resourceInputs["backupRetentionDays"] = state ? state.backupRetentionDays : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["creationSourceServerId"] = state ? state.creationSourceServerId : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["geoRedundantBackupEnabled"] = state ? state.geoRedundantBackupEnabled : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["infrastructureEncryptionEnabled"] = state ? state.infrastructureEncryptionEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["restorePointInTime"] = state ? state.restorePointInTime : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["sslEnforcementEnabled"] = state ? state.sslEnforcementEnabled : undefined;
            resourceInputs["sslMinimalTlsVersionEnforced"] = state ? state.sslMinimalTlsVersionEnforced : undefined;
            resourceInputs["storageMb"] = state ? state.storageMb : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threatDetectionPolicy"] = state ? state.threatDetectionPolicy : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as PostgresqlServerArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if ((!args || args.sslEnforcementEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslEnforcementEnabled'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["administratorLogin"] = args ? args.administratorLogin : undefined;
            resourceInputs["administratorLoginPassword"] = args?.administratorLoginPassword ? pulumi.secret(args.administratorLoginPassword) : undefined;
            resourceInputs["autoGrowEnabled"] = args ? args.autoGrowEnabled : undefined;
            resourceInputs["backupRetentionDays"] = args ? args.backupRetentionDays : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["creationSourceServerId"] = args ? args.creationSourceServerId : undefined;
            resourceInputs["geoRedundantBackupEnabled"] = args ? args.geoRedundantBackupEnabled : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["infrastructureEncryptionEnabled"] = args ? args.infrastructureEncryptionEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["restorePointInTime"] = args ? args.restorePointInTime : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["sslEnforcementEnabled"] = args ? args.sslEnforcementEnabled : undefined;
            resourceInputs["sslMinimalTlsVersionEnforced"] = args ? args.sslMinimalTlsVersionEnforced : undefined;
            resourceInputs["storageMb"] = args ? args.storageMb : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threatDetectionPolicy"] = args ? args.threatDetectionPolicy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["administratorLoginPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PostgresqlServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PostgresqlServer resources.
 */
export interface PostgresqlServerState {
    administratorLogin?: pulumi.Input<string>;
    administratorLoginPassword?: pulumi.Input<string>;
    autoGrowEnabled?: pulumi.Input<boolean>;
    backupRetentionDays?: pulumi.Input<number>;
    createMode?: pulumi.Input<string>;
    creationSourceServerId?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    geoRedundantBackupEnabled?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.PostgresqlServerIdentity>;
    infrastructureEncryptionEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    restorePointInTime?: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    sslEnforcementEnabled?: pulumi.Input<boolean>;
    sslMinimalTlsVersionEnforced?: pulumi.Input<string>;
    storageMb?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    threatDetectionPolicy?: pulumi.Input<inputs.PostgresqlServerThreatDetectionPolicy>;
    timeouts?: pulumi.Input<inputs.PostgresqlServerTimeouts>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PostgresqlServer resource.
 */
export interface PostgresqlServerArgs {
    administratorLogin?: pulumi.Input<string>;
    administratorLoginPassword?: pulumi.Input<string>;
    autoGrowEnabled?: pulumi.Input<boolean>;
    backupRetentionDays?: pulumi.Input<number>;
    createMode?: pulumi.Input<string>;
    creationSourceServerId?: pulumi.Input<string>;
    geoRedundantBackupEnabled?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.PostgresqlServerIdentity>;
    infrastructureEncryptionEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    restorePointInTime?: pulumi.Input<string>;
    skuName: pulumi.Input<string>;
    sslEnforcementEnabled: pulumi.Input<boolean>;
    sslMinimalTlsVersionEnforced?: pulumi.Input<string>;
    storageMb?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    threatDetectionPolicy?: pulumi.Input<inputs.PostgresqlServerThreatDetectionPolicy>;
    timeouts?: pulumi.Input<inputs.PostgresqlServerTimeouts>;
    version: pulumi.Input<string>;
}
