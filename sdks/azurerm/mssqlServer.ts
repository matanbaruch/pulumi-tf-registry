// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MssqlServer extends pulumi.CustomResource {
    /**
     * Get an existing MssqlServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MssqlServerState, opts?: pulumi.CustomResourceOptions): MssqlServer {
        return new MssqlServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/mssqlServer:MssqlServer';

    /**
     * Returns true if the given object is an instance of MssqlServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MssqlServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MssqlServer.__pulumiType;
    }

    public readonly administratorLogin!: pulumi.Output<string>;
    public readonly administratorLoginPassword!: pulumi.Output<string | undefined>;
    public readonly azureadAdministrator!: pulumi.Output<outputs.MssqlServerAzureadAdministrator | undefined>;
    public readonly connectionPolicy!: pulumi.Output<string | undefined>;
    public /*out*/ readonly fullyQualifiedDomainName!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.MssqlServerIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly minimumTlsVersion!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly outboundNetworkRestrictionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly primaryUserAssignedIdentityId!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly restorableDroppedDatabaseIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MssqlServerTimeouts | undefined>;
    public readonly transparentDataEncryptionKeyVaultKeyId!: pulumi.Output<string | undefined>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a MssqlServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MssqlServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MssqlServerArgs | MssqlServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MssqlServerState | undefined;
            resourceInputs["administratorLogin"] = state ? state.administratorLogin : undefined;
            resourceInputs["administratorLoginPassword"] = state ? state.administratorLoginPassword : undefined;
            resourceInputs["azureadAdministrator"] = state ? state.azureadAdministrator : undefined;
            resourceInputs["connectionPolicy"] = state ? state.connectionPolicy : undefined;
            resourceInputs["fullyQualifiedDomainName"] = state ? state.fullyQualifiedDomainName : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["minimumTlsVersion"] = state ? state.minimumTlsVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outboundNetworkRestrictionEnabled"] = state ? state.outboundNetworkRestrictionEnabled : undefined;
            resourceInputs["primaryUserAssignedIdentityId"] = state ? state.primaryUserAssignedIdentityId : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["restorableDroppedDatabaseIds"] = state ? state.restorableDroppedDatabaseIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transparentDataEncryptionKeyVaultKeyId"] = state ? state.transparentDataEncryptionKeyVaultKeyId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MssqlServerArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["administratorLogin"] = args ? args.administratorLogin : undefined;
            resourceInputs["administratorLoginPassword"] = args?.administratorLoginPassword ? pulumi.secret(args.administratorLoginPassword) : undefined;
            resourceInputs["azureadAdministrator"] = args ? args.azureadAdministrator : undefined;
            resourceInputs["connectionPolicy"] = args ? args.connectionPolicy : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["minimumTlsVersion"] = args ? args.minimumTlsVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outboundNetworkRestrictionEnabled"] = args ? args.outboundNetworkRestrictionEnabled : undefined;
            resourceInputs["primaryUserAssignedIdentityId"] = args ? args.primaryUserAssignedIdentityId : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transparentDataEncryptionKeyVaultKeyId"] = args ? args.transparentDataEncryptionKeyVaultKeyId : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["fullyQualifiedDomainName"] = undefined /*out*/;
            resourceInputs["restorableDroppedDatabaseIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["administratorLoginPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MssqlServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MssqlServer resources.
 */
export interface MssqlServerState {
    administratorLogin?: pulumi.Input<string>;
    administratorLoginPassword?: pulumi.Input<string>;
    azureadAdministrator?: pulumi.Input<inputs.MssqlServerAzureadAdministrator>;
    connectionPolicy?: pulumi.Input<string>;
    fullyQualifiedDomainName?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.MssqlServerIdentity>;
    location?: pulumi.Input<string>;
    minimumTlsVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    outboundNetworkRestrictionEnabled?: pulumi.Input<boolean>;
    primaryUserAssignedIdentityId?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    restorableDroppedDatabaseIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MssqlServerTimeouts>;
    transparentDataEncryptionKeyVaultKeyId?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MssqlServer resource.
 */
export interface MssqlServerArgs {
    administratorLogin?: pulumi.Input<string>;
    administratorLoginPassword?: pulumi.Input<string>;
    azureadAdministrator?: pulumi.Input<inputs.MssqlServerAzureadAdministrator>;
    connectionPolicy?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.MssqlServerIdentity>;
    location: pulumi.Input<string>;
    minimumTlsVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    outboundNetworkRestrictionEnabled?: pulumi.Input<boolean>;
    primaryUserAssignedIdentityId?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MssqlServerTimeouts>;
    transparentDataEncryptionKeyVaultKeyId?: pulumi.Input<string>;
    version: pulumi.Input<string>;
}
