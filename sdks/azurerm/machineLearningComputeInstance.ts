// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MachineLearningComputeInstance extends pulumi.CustomResource {
    /**
     * Get an existing MachineLearningComputeInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MachineLearningComputeInstanceState, opts?: pulumi.CustomResourceOptions): MachineLearningComputeInstance {
        return new MachineLearningComputeInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/machineLearningComputeInstance:MachineLearningComputeInstance';

    /**
     * Returns true if the given object is an instance of MachineLearningComputeInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MachineLearningComputeInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MachineLearningComputeInstance.__pulumiType;
    }

    public readonly assignToUser!: pulumi.Output<outputs.MachineLearningComputeInstanceAssignToUser | undefined>;
    public readonly authorizationType!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly identity!: pulumi.Output<outputs.MachineLearningComputeInstanceIdentity | undefined>;
    public readonly localAuthEnabled!: pulumi.Output<boolean | undefined>;
    public readonly machineLearningWorkspaceId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodePublicIpEnabled!: pulumi.Output<boolean | undefined>;
    public readonly ssh!: pulumi.Output<outputs.MachineLearningComputeInstanceSsh | undefined>;
    public readonly subnetResourceId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MachineLearningComputeInstanceTimeouts | undefined>;
    public readonly virtualMachineSize!: pulumi.Output<string>;

    /**
     * Create a MachineLearningComputeInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MachineLearningComputeInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MachineLearningComputeInstanceArgs | MachineLearningComputeInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MachineLearningComputeInstanceState | undefined;
            resourceInputs["assignToUser"] = state ? state.assignToUser : undefined;
            resourceInputs["authorizationType"] = state ? state.authorizationType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["localAuthEnabled"] = state ? state.localAuthEnabled : undefined;
            resourceInputs["machineLearningWorkspaceId"] = state ? state.machineLearningWorkspaceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodePublicIpEnabled"] = state ? state.nodePublicIpEnabled : undefined;
            resourceInputs["ssh"] = state ? state.ssh : undefined;
            resourceInputs["subnetResourceId"] = state ? state.subnetResourceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualMachineSize"] = state ? state.virtualMachineSize : undefined;
        } else {
            const args = argsOrState as MachineLearningComputeInstanceArgs | undefined;
            if ((!args || args.machineLearningWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineLearningWorkspaceId'");
            }
            if ((!args || args.virtualMachineSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineSize'");
            }
            resourceInputs["assignToUser"] = args ? args.assignToUser : undefined;
            resourceInputs["authorizationType"] = args ? args.authorizationType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["localAuthEnabled"] = args ? args.localAuthEnabled : undefined;
            resourceInputs["machineLearningWorkspaceId"] = args ? args.machineLearningWorkspaceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodePublicIpEnabled"] = args ? args.nodePublicIpEnabled : undefined;
            resourceInputs["ssh"] = args ? args.ssh : undefined;
            resourceInputs["subnetResourceId"] = args ? args.subnetResourceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualMachineSize"] = args ? args.virtualMachineSize : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MachineLearningComputeInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MachineLearningComputeInstance resources.
 */
export interface MachineLearningComputeInstanceState {
    assignToUser?: pulumi.Input<inputs.MachineLearningComputeInstanceAssignToUser>;
    authorizationType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.MachineLearningComputeInstanceIdentity>;
    localAuthEnabled?: pulumi.Input<boolean>;
    machineLearningWorkspaceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodePublicIpEnabled?: pulumi.Input<boolean>;
    ssh?: pulumi.Input<inputs.MachineLearningComputeInstanceSsh>;
    subnetResourceId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MachineLearningComputeInstanceTimeouts>;
    virtualMachineSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MachineLearningComputeInstance resource.
 */
export interface MachineLearningComputeInstanceArgs {
    assignToUser?: pulumi.Input<inputs.MachineLearningComputeInstanceAssignToUser>;
    authorizationType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.MachineLearningComputeInstanceIdentity>;
    localAuthEnabled?: pulumi.Input<boolean>;
    machineLearningWorkspaceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodePublicIpEnabled?: pulumi.Input<boolean>;
    ssh?: pulumi.Input<inputs.MachineLearningComputeInstanceSsh>;
    subnetResourceId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MachineLearningComputeInstanceTimeouts>;
    virtualMachineSize: pulumi.Input<string>;
}
