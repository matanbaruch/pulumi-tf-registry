// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServicePlan extends pulumi.CustomResource {
    /**
     * Get an existing ServicePlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePlanState, opts?: pulumi.CustomResourceOptions): ServicePlan {
        return new ServicePlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/servicePlan:ServicePlan';

    /**
     * Returns true if the given object is an instance of ServicePlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicePlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePlan.__pulumiType;
    }

    public readonly appServiceEnvironmentId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly kind!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly maximumElasticWorkerCount!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly osType!: pulumi.Output<string>;
    public readonly perSiteScalingEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly reserved!: pulumi.Output<boolean>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServicePlanTimeouts | undefined>;
    public readonly workerCount!: pulumi.Output<number>;
    public readonly zoneBalancingEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ServicePlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicePlanArgs | ServicePlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicePlanState | undefined;
            resourceInputs["appServiceEnvironmentId"] = state ? state.appServiceEnvironmentId : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maximumElasticWorkerCount"] = state ? state.maximumElasticWorkerCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["perSiteScalingEnabled"] = state ? state.perSiteScalingEnabled : undefined;
            resourceInputs["reserved"] = state ? state.reserved : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workerCount"] = state ? state.workerCount : undefined;
            resourceInputs["zoneBalancingEnabled"] = state ? state.zoneBalancingEnabled : undefined;
        } else {
            const args = argsOrState as ServicePlanArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.osType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            resourceInputs["appServiceEnvironmentId"] = args ? args.appServiceEnvironmentId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maximumElasticWorkerCount"] = args ? args.maximumElasticWorkerCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["perSiteScalingEnabled"] = args ? args.perSiteScalingEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workerCount"] = args ? args.workerCount : undefined;
            resourceInputs["zoneBalancingEnabled"] = args ? args.zoneBalancingEnabled : undefined;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["reserved"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicePlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicePlan resources.
 */
export interface ServicePlanState {
    appServiceEnvironmentId?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    maximumElasticWorkerCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    perSiteScalingEnabled?: pulumi.Input<boolean>;
    reserved?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ServicePlanTimeouts>;
    workerCount?: pulumi.Input<number>;
    zoneBalancingEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ServicePlan resource.
 */
export interface ServicePlanArgs {
    appServiceEnvironmentId?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    maximumElasticWorkerCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osType: pulumi.Input<string>;
    perSiteScalingEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    skuName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ServicePlanTimeouts>;
    workerCount?: pulumi.Input<number>;
    zoneBalancingEnabled?: pulumi.Input<boolean>;
}
