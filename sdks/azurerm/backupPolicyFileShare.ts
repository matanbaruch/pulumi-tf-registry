// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BackupPolicyFileShare extends pulumi.CustomResource {
    /**
     * Get an existing BackupPolicyFileShare resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupPolicyFileShareState, opts?: pulumi.CustomResourceOptions): BackupPolicyFileShare {
        return new BackupPolicyFileShare(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/backupPolicyFileShare:BackupPolicyFileShare';

    /**
     * Returns true if the given object is an instance of BackupPolicyFileShare.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupPolicyFileShare {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupPolicyFileShare.__pulumiType;
    }

    public readonly backup!: pulumi.Output<outputs.BackupPolicyFileShareBackup>;
    public readonly name!: pulumi.Output<string>;
    public readonly recoveryVaultName!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly retentionDaily!: pulumi.Output<outputs.BackupPolicyFileShareRetentionDaily>;
    public readonly retentionMonthly!: pulumi.Output<outputs.BackupPolicyFileShareRetentionMonthly | undefined>;
    public readonly retentionWeekly!: pulumi.Output<outputs.BackupPolicyFileShareRetentionWeekly | undefined>;
    public readonly retentionYearly!: pulumi.Output<outputs.BackupPolicyFileShareRetentionYearly | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BackupPolicyFileShareTimeouts | undefined>;
    public readonly timezone!: pulumi.Output<string | undefined>;

    /**
     * Create a BackupPolicyFileShare resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupPolicyFileShareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupPolicyFileShareArgs | BackupPolicyFileShareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupPolicyFileShareState | undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recoveryVaultName"] = state ? state.recoveryVaultName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["retentionDaily"] = state ? state.retentionDaily : undefined;
            resourceInputs["retentionMonthly"] = state ? state.retentionMonthly : undefined;
            resourceInputs["retentionWeekly"] = state ? state.retentionWeekly : undefined;
            resourceInputs["retentionYearly"] = state ? state.retentionYearly : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as BackupPolicyFileShareArgs | undefined;
            if ((!args || args.backup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backup'");
            }
            if ((!args || args.recoveryVaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.retentionDaily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionDaily'");
            }
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recoveryVaultName"] = args ? args.recoveryVaultName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["retentionDaily"] = args ? args.retentionDaily : undefined;
            resourceInputs["retentionMonthly"] = args ? args.retentionMonthly : undefined;
            resourceInputs["retentionWeekly"] = args ? args.retentionWeekly : undefined;
            resourceInputs["retentionYearly"] = args ? args.retentionYearly : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupPolicyFileShare.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BackupPolicyFileShare resources.
 */
export interface BackupPolicyFileShareState {
    backup?: pulumi.Input<inputs.BackupPolicyFileShareBackup>;
    name?: pulumi.Input<string>;
    recoveryVaultName?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    retentionDaily?: pulumi.Input<inputs.BackupPolicyFileShareRetentionDaily>;
    retentionMonthly?: pulumi.Input<inputs.BackupPolicyFileShareRetentionMonthly>;
    retentionWeekly?: pulumi.Input<inputs.BackupPolicyFileShareRetentionWeekly>;
    retentionYearly?: pulumi.Input<inputs.BackupPolicyFileShareRetentionYearly>;
    timeouts?: pulumi.Input<inputs.BackupPolicyFileShareTimeouts>;
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackupPolicyFileShare resource.
 */
export interface BackupPolicyFileShareArgs {
    backup: pulumi.Input<inputs.BackupPolicyFileShareBackup>;
    name?: pulumi.Input<string>;
    recoveryVaultName: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    retentionDaily: pulumi.Input<inputs.BackupPolicyFileShareRetentionDaily>;
    retentionMonthly?: pulumi.Input<inputs.BackupPolicyFileShareRetentionMonthly>;
    retentionWeekly?: pulumi.Input<inputs.BackupPolicyFileShareRetentionWeekly>;
    retentionYearly?: pulumi.Input<inputs.BackupPolicyFileShareRetentionYearly>;
    timeouts?: pulumi.Input<inputs.BackupPolicyFileShareTimeouts>;
    timezone?: pulumi.Input<string>;
}
