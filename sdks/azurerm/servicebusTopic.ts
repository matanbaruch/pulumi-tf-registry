// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServicebusTopic extends pulumi.CustomResource {
    /**
     * Get an existing ServicebusTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicebusTopicState, opts?: pulumi.CustomResourceOptions): ServicebusTopic {
        return new ServicebusTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/servicebusTopic:ServicebusTopic';

    /**
     * Returns true if the given object is an instance of ServicebusTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicebusTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicebusTopic.__pulumiType;
    }

    public readonly autoDeleteOnIdle!: pulumi.Output<string | undefined>;
    public readonly batchedOperationsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly defaultMessageTtl!: pulumi.Output<string | undefined>;
    public readonly duplicateDetectionHistoryTimeWindow!: pulumi.Output<string | undefined>;
    public readonly expressEnabled!: pulumi.Output<boolean | undefined>;
    public readonly maxMessageSizeInKilobytes!: pulumi.Output<number>;
    public readonly maxSizeInMegabytes!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespaceId!: pulumi.Output<string>;
    public readonly partitioningEnabled!: pulumi.Output<boolean | undefined>;
    public readonly requiresDuplicateDetection!: pulumi.Output<boolean | undefined>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly supportOrdering!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServicebusTopicTimeouts | undefined>;

    /**
     * Create a ServicebusTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicebusTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicebusTopicArgs | ServicebusTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicebusTopicState | undefined;
            resourceInputs["autoDeleteOnIdle"] = state ? state.autoDeleteOnIdle : undefined;
            resourceInputs["batchedOperationsEnabled"] = state ? state.batchedOperationsEnabled : undefined;
            resourceInputs["defaultMessageTtl"] = state ? state.defaultMessageTtl : undefined;
            resourceInputs["duplicateDetectionHistoryTimeWindow"] = state ? state.duplicateDetectionHistoryTimeWindow : undefined;
            resourceInputs["expressEnabled"] = state ? state.expressEnabled : undefined;
            resourceInputs["maxMessageSizeInKilobytes"] = state ? state.maxMessageSizeInKilobytes : undefined;
            resourceInputs["maxSizeInMegabytes"] = state ? state.maxSizeInMegabytes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["partitioningEnabled"] = state ? state.partitioningEnabled : undefined;
            resourceInputs["requiresDuplicateDetection"] = state ? state.requiresDuplicateDetection : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["supportOrdering"] = state ? state.supportOrdering : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ServicebusTopicArgs | undefined;
            if ((!args || args.namespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceId'");
            }
            resourceInputs["autoDeleteOnIdle"] = args ? args.autoDeleteOnIdle : undefined;
            resourceInputs["batchedOperationsEnabled"] = args ? args.batchedOperationsEnabled : undefined;
            resourceInputs["defaultMessageTtl"] = args ? args.defaultMessageTtl : undefined;
            resourceInputs["duplicateDetectionHistoryTimeWindow"] = args ? args.duplicateDetectionHistoryTimeWindow : undefined;
            resourceInputs["expressEnabled"] = args ? args.expressEnabled : undefined;
            resourceInputs["maxMessageSizeInKilobytes"] = args ? args.maxMessageSizeInKilobytes : undefined;
            resourceInputs["maxSizeInMegabytes"] = args ? args.maxSizeInMegabytes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["partitioningEnabled"] = args ? args.partitioningEnabled : undefined;
            resourceInputs["requiresDuplicateDetection"] = args ? args.requiresDuplicateDetection : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["supportOrdering"] = args ? args.supportOrdering : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicebusTopic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicebusTopic resources.
 */
export interface ServicebusTopicState {
    autoDeleteOnIdle?: pulumi.Input<string>;
    batchedOperationsEnabled?: pulumi.Input<boolean>;
    defaultMessageTtl?: pulumi.Input<string>;
    duplicateDetectionHistoryTimeWindow?: pulumi.Input<string>;
    expressEnabled?: pulumi.Input<boolean>;
    maxMessageSizeInKilobytes?: pulumi.Input<number>;
    maxSizeInMegabytes?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    partitioningEnabled?: pulumi.Input<boolean>;
    requiresDuplicateDetection?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    supportOrdering?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.ServicebusTopicTimeouts>;
}

/**
 * The set of arguments for constructing a ServicebusTopic resource.
 */
export interface ServicebusTopicArgs {
    autoDeleteOnIdle?: pulumi.Input<string>;
    batchedOperationsEnabled?: pulumi.Input<boolean>;
    defaultMessageTtl?: pulumi.Input<string>;
    duplicateDetectionHistoryTimeWindow?: pulumi.Input<string>;
    expressEnabled?: pulumi.Input<boolean>;
    maxMessageSizeInKilobytes?: pulumi.Input<number>;
    maxSizeInMegabytes?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namespaceId: pulumi.Input<string>;
    partitioningEnabled?: pulumi.Input<boolean>;
    requiresDuplicateDetection?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    supportOrdering?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.ServicebusTopicTimeouts>;
}
