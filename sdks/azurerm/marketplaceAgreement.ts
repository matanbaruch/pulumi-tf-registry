// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MarketplaceAgreement extends pulumi.CustomResource {
    /**
     * Get an existing MarketplaceAgreement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MarketplaceAgreementState, opts?: pulumi.CustomResourceOptions): MarketplaceAgreement {
        return new MarketplaceAgreement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/marketplaceAgreement:MarketplaceAgreement';

    /**
     * Returns true if the given object is an instance of MarketplaceAgreement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MarketplaceAgreement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MarketplaceAgreement.__pulumiType;
    }

    public /*out*/ readonly licenseTextLink!: pulumi.Output<string>;
    public readonly offer!: pulumi.Output<string>;
    public readonly plan!: pulumi.Output<string>;
    public /*out*/ readonly privacyPolicyLink!: pulumi.Output<string>;
    public readonly publisher!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MarketplaceAgreementTimeouts | undefined>;

    /**
     * Create a MarketplaceAgreement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MarketplaceAgreementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MarketplaceAgreementArgs | MarketplaceAgreementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MarketplaceAgreementState | undefined;
            resourceInputs["licenseTextLink"] = state ? state.licenseTextLink : undefined;
            resourceInputs["offer"] = state ? state.offer : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["privacyPolicyLink"] = state ? state.privacyPolicyLink : undefined;
            resourceInputs["publisher"] = state ? state.publisher : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MarketplaceAgreementArgs | undefined;
            if ((!args || args.offer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'offer'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.publisher === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publisher'");
            }
            resourceInputs["offer"] = args ? args.offer : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["publisher"] = args ? args.publisher : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["licenseTextLink"] = undefined /*out*/;
            resourceInputs["privacyPolicyLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MarketplaceAgreement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MarketplaceAgreement resources.
 */
export interface MarketplaceAgreementState {
    licenseTextLink?: pulumi.Input<string>;
    offer?: pulumi.Input<string>;
    plan?: pulumi.Input<string>;
    privacyPolicyLink?: pulumi.Input<string>;
    publisher?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MarketplaceAgreementTimeouts>;
}

/**
 * The set of arguments for constructing a MarketplaceAgreement resource.
 */
export interface MarketplaceAgreementArgs {
    offer: pulumi.Input<string>;
    plan: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MarketplaceAgreementTimeouts>;
}
