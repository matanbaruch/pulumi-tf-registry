// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbOutboundRule extends pulumi.CustomResource {
    /**
     * Get an existing LbOutboundRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbOutboundRuleState, opts?: pulumi.CustomResourceOptions): LbOutboundRule {
        return new LbOutboundRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/lbOutboundRule:LbOutboundRule';

    /**
     * Returns true if the given object is an instance of LbOutboundRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbOutboundRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbOutboundRule.__pulumiType;
    }

    public readonly allocatedOutboundPorts!: pulumi.Output<number | undefined>;
    public readonly backendAddressPoolId!: pulumi.Output<string>;
    public readonly enableTcpReset!: pulumi.Output<boolean | undefined>;
    public readonly frontendIpConfigurations!: pulumi.Output<outputs.LbOutboundRuleFrontendIpConfiguration[] | undefined>;
    public readonly idleTimeoutInMinutes!: pulumi.Output<number | undefined>;
    public readonly loadbalancerId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LbOutboundRuleTimeouts | undefined>;

    /**
     * Create a LbOutboundRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbOutboundRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbOutboundRuleArgs | LbOutboundRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbOutboundRuleState | undefined;
            resourceInputs["allocatedOutboundPorts"] = state ? state.allocatedOutboundPorts : undefined;
            resourceInputs["backendAddressPoolId"] = state ? state.backendAddressPoolId : undefined;
            resourceInputs["enableTcpReset"] = state ? state.enableTcpReset : undefined;
            resourceInputs["frontendIpConfigurations"] = state ? state.frontendIpConfigurations : undefined;
            resourceInputs["idleTimeoutInMinutes"] = state ? state.idleTimeoutInMinutes : undefined;
            resourceInputs["loadbalancerId"] = state ? state.loadbalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LbOutboundRuleArgs | undefined;
            if ((!args || args.backendAddressPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendAddressPoolId'");
            }
            if ((!args || args.loadbalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["allocatedOutboundPorts"] = args ? args.allocatedOutboundPorts : undefined;
            resourceInputs["backendAddressPoolId"] = args ? args.backendAddressPoolId : undefined;
            resourceInputs["enableTcpReset"] = args ? args.enableTcpReset : undefined;
            resourceInputs["frontendIpConfigurations"] = args ? args.frontendIpConfigurations : undefined;
            resourceInputs["idleTimeoutInMinutes"] = args ? args.idleTimeoutInMinutes : undefined;
            resourceInputs["loadbalancerId"] = args ? args.loadbalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbOutboundRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbOutboundRule resources.
 */
export interface LbOutboundRuleState {
    allocatedOutboundPorts?: pulumi.Input<number>;
    backendAddressPoolId?: pulumi.Input<string>;
    enableTcpReset?: pulumi.Input<boolean>;
    frontendIpConfigurations?: pulumi.Input<pulumi.Input<inputs.LbOutboundRuleFrontendIpConfiguration>[]>;
    idleTimeoutInMinutes?: pulumi.Input<number>;
    loadbalancerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbOutboundRuleTimeouts>;
}

/**
 * The set of arguments for constructing a LbOutboundRule resource.
 */
export interface LbOutboundRuleArgs {
    allocatedOutboundPorts?: pulumi.Input<number>;
    backendAddressPoolId: pulumi.Input<string>;
    enableTcpReset?: pulumi.Input<boolean>;
    frontendIpConfigurations?: pulumi.Input<pulumi.Input<inputs.LbOutboundRuleFrontendIpConfiguration>[]>;
    idleTimeoutInMinutes?: pulumi.Input<number>;
    loadbalancerId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbOutboundRuleTimeouts>;
}
