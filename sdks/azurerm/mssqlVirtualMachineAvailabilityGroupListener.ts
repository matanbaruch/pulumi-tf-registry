// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MssqlVirtualMachineAvailabilityGroupListener extends pulumi.CustomResource {
    /**
     * Get an existing MssqlVirtualMachineAvailabilityGroupListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MssqlVirtualMachineAvailabilityGroupListenerState, opts?: pulumi.CustomResourceOptions): MssqlVirtualMachineAvailabilityGroupListener {
        return new MssqlVirtualMachineAvailabilityGroupListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/mssqlVirtualMachineAvailabilityGroupListener:MssqlVirtualMachineAvailabilityGroupListener';

    /**
     * Returns true if the given object is an instance of MssqlVirtualMachineAvailabilityGroupListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MssqlVirtualMachineAvailabilityGroupListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MssqlVirtualMachineAvailabilityGroupListener.__pulumiType;
    }

    public readonly availabilityGroupName!: pulumi.Output<string | undefined>;
    public readonly loadBalancerConfiguration!: pulumi.Output<outputs.MssqlVirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration | undefined>;
    public readonly multiSubnetIpConfigurations!: pulumi.Output<outputs.MssqlVirtualMachineAvailabilityGroupListenerMultiSubnetIpConfiguration[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly replicas!: pulumi.Output<outputs.MssqlVirtualMachineAvailabilityGroupListenerReplica[]>;
    public readonly sqlVirtualMachineGroupId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MssqlVirtualMachineAvailabilityGroupListenerTimeouts | undefined>;

    /**
     * Create a MssqlVirtualMachineAvailabilityGroupListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MssqlVirtualMachineAvailabilityGroupListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MssqlVirtualMachineAvailabilityGroupListenerArgs | MssqlVirtualMachineAvailabilityGroupListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MssqlVirtualMachineAvailabilityGroupListenerState | undefined;
            resourceInputs["availabilityGroupName"] = state ? state.availabilityGroupName : undefined;
            resourceInputs["loadBalancerConfiguration"] = state ? state.loadBalancerConfiguration : undefined;
            resourceInputs["multiSubnetIpConfigurations"] = state ? state.multiSubnetIpConfigurations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["sqlVirtualMachineGroupId"] = state ? state.sqlVirtualMachineGroupId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MssqlVirtualMachineAvailabilityGroupListenerArgs | undefined;
            if ((!args || args.replicas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicas'");
            }
            if ((!args || args.sqlVirtualMachineGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sqlVirtualMachineGroupId'");
            }
            resourceInputs["availabilityGroupName"] = args ? args.availabilityGroupName : undefined;
            resourceInputs["loadBalancerConfiguration"] = args ? args.loadBalancerConfiguration : undefined;
            resourceInputs["multiSubnetIpConfigurations"] = args ? args.multiSubnetIpConfigurations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["sqlVirtualMachineGroupId"] = args ? args.sqlVirtualMachineGroupId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MssqlVirtualMachineAvailabilityGroupListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MssqlVirtualMachineAvailabilityGroupListener resources.
 */
export interface MssqlVirtualMachineAvailabilityGroupListenerState {
    availabilityGroupName?: pulumi.Input<string>;
    loadBalancerConfiguration?: pulumi.Input<inputs.MssqlVirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration>;
    multiSubnetIpConfigurations?: pulumi.Input<pulumi.Input<inputs.MssqlVirtualMachineAvailabilityGroupListenerMultiSubnetIpConfiguration>[]>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    replicas?: pulumi.Input<pulumi.Input<inputs.MssqlVirtualMachineAvailabilityGroupListenerReplica>[]>;
    sqlVirtualMachineGroupId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MssqlVirtualMachineAvailabilityGroupListenerTimeouts>;
}

/**
 * The set of arguments for constructing a MssqlVirtualMachineAvailabilityGroupListener resource.
 */
export interface MssqlVirtualMachineAvailabilityGroupListenerArgs {
    availabilityGroupName?: pulumi.Input<string>;
    loadBalancerConfiguration?: pulumi.Input<inputs.MssqlVirtualMachineAvailabilityGroupListenerLoadBalancerConfiguration>;
    multiSubnetIpConfigurations?: pulumi.Input<pulumi.Input<inputs.MssqlVirtualMachineAvailabilityGroupListenerMultiSubnetIpConfiguration>[]>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    replicas: pulumi.Input<pulumi.Input<inputs.MssqlVirtualMachineAvailabilityGroupListenerReplica>[]>;
    sqlVirtualMachineGroupId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MssqlVirtualMachineAvailabilityGroupListenerTimeouts>;
}
