// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PurviewAccount extends pulumi.CustomResource {
    /**
     * Get an existing PurviewAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PurviewAccountState, opts?: pulumi.CustomResourceOptions): PurviewAccount {
        return new PurviewAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/purviewAccount:PurviewAccount';

    /**
     * Returns true if the given object is an instance of PurviewAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PurviewAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PurviewAccount.__pulumiType;
    }

    public /*out*/ readonly atlasKafkaEndpointPrimaryConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly atlasKafkaEndpointSecondaryConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly catalogEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly guardianEndpoint!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.PurviewAccountIdentity>;
    public readonly location!: pulumi.Output<string>;
    public readonly managedResourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly managedResources!: pulumi.Output<outputs.PurviewAccountManagedResource[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly publicNetworkEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly scanEndpoint!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PurviewAccountTimeouts | undefined>;

    /**
     * Create a PurviewAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PurviewAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PurviewAccountArgs | PurviewAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PurviewAccountState | undefined;
            resourceInputs["atlasKafkaEndpointPrimaryConnectionString"] = state ? state.atlasKafkaEndpointPrimaryConnectionString : undefined;
            resourceInputs["atlasKafkaEndpointSecondaryConnectionString"] = state ? state.atlasKafkaEndpointSecondaryConnectionString : undefined;
            resourceInputs["catalogEndpoint"] = state ? state.catalogEndpoint : undefined;
            resourceInputs["guardianEndpoint"] = state ? state.guardianEndpoint : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedResourceGroupName"] = state ? state.managedResourceGroupName : undefined;
            resourceInputs["managedResources"] = state ? state.managedResources : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicNetworkEnabled"] = state ? state.publicNetworkEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scanEndpoint"] = state ? state.scanEndpoint : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as PurviewAccountArgs | undefined;
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedResourceGroupName"] = args ? args.managedResourceGroupName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkEnabled"] = args ? args.publicNetworkEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["atlasKafkaEndpointPrimaryConnectionString"] = undefined /*out*/;
            resourceInputs["atlasKafkaEndpointSecondaryConnectionString"] = undefined /*out*/;
            resourceInputs["catalogEndpoint"] = undefined /*out*/;
            resourceInputs["guardianEndpoint"] = undefined /*out*/;
            resourceInputs["managedResources"] = undefined /*out*/;
            resourceInputs["scanEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["atlasKafkaEndpointPrimaryConnectionString", "atlasKafkaEndpointSecondaryConnectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PurviewAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PurviewAccount resources.
 */
export interface PurviewAccountState {
    atlasKafkaEndpointPrimaryConnectionString?: pulumi.Input<string>;
    atlasKafkaEndpointSecondaryConnectionString?: pulumi.Input<string>;
    catalogEndpoint?: pulumi.Input<string>;
    guardianEndpoint?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.PurviewAccountIdentity>;
    location?: pulumi.Input<string>;
    managedResourceGroupName?: pulumi.Input<string>;
    managedResources?: pulumi.Input<pulumi.Input<inputs.PurviewAccountManagedResource>[]>;
    name?: pulumi.Input<string>;
    publicNetworkEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    scanEndpoint?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PurviewAccountTimeouts>;
}

/**
 * The set of arguments for constructing a PurviewAccount resource.
 */
export interface PurviewAccountArgs {
    identity: pulumi.Input<inputs.PurviewAccountIdentity>;
    location: pulumi.Input<string>;
    managedResourceGroupName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicNetworkEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PurviewAccountTimeouts>;
}
