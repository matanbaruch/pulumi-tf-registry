// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogicAppIntegrationAccountCertificate extends pulumi.CustomResource {
    /**
     * Get an existing LogicAppIntegrationAccountCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogicAppIntegrationAccountCertificateState, opts?: pulumi.CustomResourceOptions): LogicAppIntegrationAccountCertificate {
        return new LogicAppIntegrationAccountCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/logicAppIntegrationAccountCertificate:LogicAppIntegrationAccountCertificate';

    /**
     * Returns true if the given object is an instance of LogicAppIntegrationAccountCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogicAppIntegrationAccountCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogicAppIntegrationAccountCertificate.__pulumiType;
    }

    public readonly integrationAccountName!: pulumi.Output<string>;
    public readonly keyVaultKey!: pulumi.Output<outputs.LogicAppIntegrationAccountCertificateKeyVaultKey | undefined>;
    public readonly metadata!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly publicCertificate!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LogicAppIntegrationAccountCertificateTimeouts | undefined>;

    /**
     * Create a LogicAppIntegrationAccountCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogicAppIntegrationAccountCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogicAppIntegrationAccountCertificateArgs | LogicAppIntegrationAccountCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogicAppIntegrationAccountCertificateState | undefined;
            resourceInputs["integrationAccountName"] = state ? state.integrationAccountName : undefined;
            resourceInputs["keyVaultKey"] = state ? state.keyVaultKey : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicCertificate"] = state ? state.publicCertificate : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LogicAppIntegrationAccountCertificateArgs | undefined;
            if ((!args || args.integrationAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationAccountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["integrationAccountName"] = args ? args.integrationAccountName : undefined;
            resourceInputs["keyVaultKey"] = args ? args.keyVaultKey : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicCertificate"] = args ? args.publicCertificate : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogicAppIntegrationAccountCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogicAppIntegrationAccountCertificate resources.
 */
export interface LogicAppIntegrationAccountCertificateState {
    integrationAccountName?: pulumi.Input<string>;
    keyVaultKey?: pulumi.Input<inputs.LogicAppIntegrationAccountCertificateKeyVaultKey>;
    metadata?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicCertificate?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LogicAppIntegrationAccountCertificateTimeouts>;
}

/**
 * The set of arguments for constructing a LogicAppIntegrationAccountCertificate resource.
 */
export interface LogicAppIntegrationAccountCertificateArgs {
    integrationAccountName: pulumi.Input<string>;
    keyVaultKey?: pulumi.Input<inputs.LogicAppIntegrationAccountCertificateKeyVaultKey>;
    metadata?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicCertificate?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LogicAppIntegrationAccountCertificateTimeouts>;
}
