// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getBatchPool(args: GetBatchPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetBatchPoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getBatchPool:getBatchPool", {
        "accountName": args.accountName,
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBatchPool.
 */
export interface GetBatchPoolArgs {
    accountName: string;
    id?: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetBatchPoolTimeouts;
}

/**
 * A collection of values returned by getBatchPool.
 */
export interface GetBatchPoolResult {
    readonly accountName: string;
    readonly autoScales: outputs.GetBatchPoolAutoScale[];
    readonly certificates: outputs.GetBatchPoolCertificate[];
    readonly containerConfigurations: outputs.GetBatchPoolContainerConfiguration[];
    readonly dataDisks: outputs.GetBatchPoolDataDisk[];
    readonly diskEncryptions: outputs.GetBatchPoolDiskEncryption[];
    readonly displayName: string;
    readonly extensions: outputs.GetBatchPoolExtension[];
    readonly fixedScales: outputs.GetBatchPoolFixedScale[];
    readonly id: string;
    readonly interNodeCommunication: string;
    readonly licenseType: string;
    readonly maxTasksPerNode: number;
    readonly metadata: {[key: string]: string};
    readonly mounts: outputs.GetBatchPoolMount[];
    readonly name: string;
    readonly networkConfigurations: outputs.GetBatchPoolNetworkConfiguration[];
    readonly nodeAgentSkuId: string;
    readonly nodePlacements: outputs.GetBatchPoolNodePlacement[];
    readonly osDiskPlacement: string;
    readonly resourceGroupName: string;
    readonly startTasks: outputs.GetBatchPoolStartTask[];
    readonly storageImageReferences: outputs.GetBatchPoolStorageImageReference[];
    readonly taskSchedulingPolicies: outputs.GetBatchPoolTaskSchedulingPolicy[];
    readonly timeouts?: outputs.GetBatchPoolTimeouts;
    readonly userAccounts: outputs.GetBatchPoolUserAccount[];
    readonly vmSize: string;
    readonly windows: outputs.GetBatchPoolWindow[];
}
export function getBatchPoolOutput(args: GetBatchPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBatchPoolResult> {
    return pulumi.output(args).apply((a: any) => getBatchPool(a, opts))
}

/**
 * A collection of arguments for invoking getBatchPool.
 */
export interface GetBatchPoolOutputArgs {
    accountName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetBatchPoolTimeoutsArgs>;
}
