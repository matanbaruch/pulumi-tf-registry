// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ActiveDirectoryDomainService extends pulumi.CustomResource {
    /**
     * Get an existing ActiveDirectoryDomainService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActiveDirectoryDomainServiceState, opts?: pulumi.CustomResourceOptions): ActiveDirectoryDomainService {
        return new ActiveDirectoryDomainService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/activeDirectoryDomainService:ActiveDirectoryDomainService';

    /**
     * Returns true if the given object is an instance of ActiveDirectoryDomainService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActiveDirectoryDomainService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActiveDirectoryDomainService.__pulumiType;
    }

    public /*out*/ readonly deploymentId!: pulumi.Output<string>;
    public readonly domainConfigurationType!: pulumi.Output<string | undefined>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly filteredSyncEnabled!: pulumi.Output<boolean | undefined>;
    public readonly initialReplicaSet!: pulumi.Output<outputs.ActiveDirectoryDomainServiceInitialReplicaSet>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notifications!: pulumi.Output<outputs.ActiveDirectoryDomainServiceNotifications | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    public readonly secureLdap!: pulumi.Output<outputs.ActiveDirectoryDomainServiceSecureLdap | undefined>;
    public readonly security!: pulumi.Output<outputs.ActiveDirectoryDomainServiceSecurity | undefined>;
    public readonly sku!: pulumi.Output<string>;
    public /*out*/ readonly syncOwner!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ActiveDirectoryDomainServiceTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a ActiveDirectoryDomainService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActiveDirectoryDomainServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActiveDirectoryDomainServiceArgs | ActiveDirectoryDomainServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActiveDirectoryDomainServiceState | undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["domainConfigurationType"] = state ? state.domainConfigurationType : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["filteredSyncEnabled"] = state ? state.filteredSyncEnabled : undefined;
            resourceInputs["initialReplicaSet"] = state ? state.initialReplicaSet : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["secureLdap"] = state ? state.secureLdap : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["syncOwner"] = state ? state.syncOwner : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ActiveDirectoryDomainServiceArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.initialReplicaSet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'initialReplicaSet'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["domainConfigurationType"] = args ? args.domainConfigurationType : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["filteredSyncEnabled"] = args ? args.filteredSyncEnabled : undefined;
            resourceInputs["initialReplicaSet"] = args ? args.initialReplicaSet : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["secureLdap"] = args ? args.secureLdap : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["deploymentId"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["syncOwner"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ActiveDirectoryDomainService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ActiveDirectoryDomainService resources.
 */
export interface ActiveDirectoryDomainServiceState {
    deploymentId?: pulumi.Input<string>;
    domainConfigurationType?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    filteredSyncEnabled?: pulumi.Input<boolean>;
    initialReplicaSet?: pulumi.Input<inputs.ActiveDirectoryDomainServiceInitialReplicaSet>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notifications?: pulumi.Input<inputs.ActiveDirectoryDomainServiceNotifications>;
    resourceGroupName?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    secureLdap?: pulumi.Input<inputs.ActiveDirectoryDomainServiceSecureLdap>;
    security?: pulumi.Input<inputs.ActiveDirectoryDomainServiceSecurity>;
    sku?: pulumi.Input<string>;
    syncOwner?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ActiveDirectoryDomainServiceTimeouts>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ActiveDirectoryDomainService resource.
 */
export interface ActiveDirectoryDomainServiceArgs {
    domainConfigurationType?: pulumi.Input<string>;
    domainName: pulumi.Input<string>;
    filteredSyncEnabled?: pulumi.Input<boolean>;
    initialReplicaSet: pulumi.Input<inputs.ActiveDirectoryDomainServiceInitialReplicaSet>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notifications?: pulumi.Input<inputs.ActiveDirectoryDomainServiceNotifications>;
    resourceGroupName: pulumi.Input<string>;
    secureLdap?: pulumi.Input<inputs.ActiveDirectoryDomainServiceSecureLdap>;
    security?: pulumi.Input<inputs.ActiveDirectoryDomainServiceSecurity>;
    sku: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ActiveDirectoryDomainServiceTimeouts>;
}
