// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SiteRecoveryReplicatedVm extends pulumi.CustomResource {
    /**
     * Get an existing SiteRecoveryReplicatedVm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteRecoveryReplicatedVmState, opts?: pulumi.CustomResourceOptions): SiteRecoveryReplicatedVm {
        return new SiteRecoveryReplicatedVm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/siteRecoveryReplicatedVm:SiteRecoveryReplicatedVm';

    /**
     * Returns true if the given object is an instance of SiteRecoveryReplicatedVm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteRecoveryReplicatedVm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteRecoveryReplicatedVm.__pulumiType;
    }

    public readonly managedDisks!: pulumi.Output<outputs.SiteRecoveryReplicatedVmManagedDisk[]>;
    public readonly multiVmGroupName!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaces!: pulumi.Output<outputs.SiteRecoveryReplicatedVmNetworkInterface[]>;
    public readonly recoveryReplicationPolicyId!: pulumi.Output<string>;
    public readonly recoveryVaultName!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly sourceRecoveryFabricName!: pulumi.Output<string>;
    public readonly sourceRecoveryProtectionContainerName!: pulumi.Output<string>;
    public readonly sourceVmId!: pulumi.Output<string>;
    public readonly targetAvailabilitySetId!: pulumi.Output<string | undefined>;
    public readonly targetBootDiagnosticStorageAccountId!: pulumi.Output<string | undefined>;
    public readonly targetCapacityReservationGroupId!: pulumi.Output<string | undefined>;
    public readonly targetEdgeZone!: pulumi.Output<string | undefined>;
    public readonly targetNetworkId!: pulumi.Output<string>;
    public readonly targetProximityPlacementGroupId!: pulumi.Output<string | undefined>;
    public readonly targetRecoveryFabricId!: pulumi.Output<string>;
    public readonly targetRecoveryProtectionContainerId!: pulumi.Output<string>;
    public readonly targetResourceGroupId!: pulumi.Output<string>;
    public readonly targetVirtualMachineScaleSetId!: pulumi.Output<string | undefined>;
    public readonly targetZone!: pulumi.Output<string | undefined>;
    public readonly testNetworkId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SiteRecoveryReplicatedVmTimeouts | undefined>;
    public readonly unmanagedDisks!: pulumi.Output<outputs.SiteRecoveryReplicatedVmUnmanagedDisk[]>;

    /**
     * Create a SiteRecoveryReplicatedVm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteRecoveryReplicatedVmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteRecoveryReplicatedVmArgs | SiteRecoveryReplicatedVmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteRecoveryReplicatedVmState | undefined;
            resourceInputs["managedDisks"] = state ? state.managedDisks : undefined;
            resourceInputs["multiVmGroupName"] = state ? state.multiVmGroupName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["recoveryReplicationPolicyId"] = state ? state.recoveryReplicationPolicyId : undefined;
            resourceInputs["recoveryVaultName"] = state ? state.recoveryVaultName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sourceRecoveryFabricName"] = state ? state.sourceRecoveryFabricName : undefined;
            resourceInputs["sourceRecoveryProtectionContainerName"] = state ? state.sourceRecoveryProtectionContainerName : undefined;
            resourceInputs["sourceVmId"] = state ? state.sourceVmId : undefined;
            resourceInputs["targetAvailabilitySetId"] = state ? state.targetAvailabilitySetId : undefined;
            resourceInputs["targetBootDiagnosticStorageAccountId"] = state ? state.targetBootDiagnosticStorageAccountId : undefined;
            resourceInputs["targetCapacityReservationGroupId"] = state ? state.targetCapacityReservationGroupId : undefined;
            resourceInputs["targetEdgeZone"] = state ? state.targetEdgeZone : undefined;
            resourceInputs["targetNetworkId"] = state ? state.targetNetworkId : undefined;
            resourceInputs["targetProximityPlacementGroupId"] = state ? state.targetProximityPlacementGroupId : undefined;
            resourceInputs["targetRecoveryFabricId"] = state ? state.targetRecoveryFabricId : undefined;
            resourceInputs["targetRecoveryProtectionContainerId"] = state ? state.targetRecoveryProtectionContainerId : undefined;
            resourceInputs["targetResourceGroupId"] = state ? state.targetResourceGroupId : undefined;
            resourceInputs["targetVirtualMachineScaleSetId"] = state ? state.targetVirtualMachineScaleSetId : undefined;
            resourceInputs["targetZone"] = state ? state.targetZone : undefined;
            resourceInputs["testNetworkId"] = state ? state.testNetworkId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["unmanagedDisks"] = state ? state.unmanagedDisks : undefined;
        } else {
            const args = argsOrState as SiteRecoveryReplicatedVmArgs | undefined;
            if ((!args || args.recoveryReplicationPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryReplicationPolicyId'");
            }
            if ((!args || args.recoveryVaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sourceRecoveryFabricName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRecoveryFabricName'");
            }
            if ((!args || args.sourceRecoveryProtectionContainerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRecoveryProtectionContainerName'");
            }
            if ((!args || args.sourceVmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceVmId'");
            }
            if ((!args || args.targetRecoveryFabricId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRecoveryFabricId'");
            }
            if ((!args || args.targetRecoveryProtectionContainerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRecoveryProtectionContainerId'");
            }
            if ((!args || args.targetResourceGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceGroupId'");
            }
            resourceInputs["managedDisks"] = args ? args.managedDisks : undefined;
            resourceInputs["multiVmGroupName"] = args ? args.multiVmGroupName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["recoveryReplicationPolicyId"] = args ? args.recoveryReplicationPolicyId : undefined;
            resourceInputs["recoveryVaultName"] = args ? args.recoveryVaultName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sourceRecoveryFabricName"] = args ? args.sourceRecoveryFabricName : undefined;
            resourceInputs["sourceRecoveryProtectionContainerName"] = args ? args.sourceRecoveryProtectionContainerName : undefined;
            resourceInputs["sourceVmId"] = args ? args.sourceVmId : undefined;
            resourceInputs["targetAvailabilitySetId"] = args ? args.targetAvailabilitySetId : undefined;
            resourceInputs["targetBootDiagnosticStorageAccountId"] = args ? args.targetBootDiagnosticStorageAccountId : undefined;
            resourceInputs["targetCapacityReservationGroupId"] = args ? args.targetCapacityReservationGroupId : undefined;
            resourceInputs["targetEdgeZone"] = args ? args.targetEdgeZone : undefined;
            resourceInputs["targetNetworkId"] = args ? args.targetNetworkId : undefined;
            resourceInputs["targetProximityPlacementGroupId"] = args ? args.targetProximityPlacementGroupId : undefined;
            resourceInputs["targetRecoveryFabricId"] = args ? args.targetRecoveryFabricId : undefined;
            resourceInputs["targetRecoveryProtectionContainerId"] = args ? args.targetRecoveryProtectionContainerId : undefined;
            resourceInputs["targetResourceGroupId"] = args ? args.targetResourceGroupId : undefined;
            resourceInputs["targetVirtualMachineScaleSetId"] = args ? args.targetVirtualMachineScaleSetId : undefined;
            resourceInputs["targetZone"] = args ? args.targetZone : undefined;
            resourceInputs["testNetworkId"] = args ? args.testNetworkId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["unmanagedDisks"] = args ? args.unmanagedDisks : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteRecoveryReplicatedVm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteRecoveryReplicatedVm resources.
 */
export interface SiteRecoveryReplicatedVmState {
    managedDisks?: pulumi.Input<pulumi.Input<inputs.SiteRecoveryReplicatedVmManagedDisk>[]>;
    multiVmGroupName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.SiteRecoveryReplicatedVmNetworkInterface>[]>;
    recoveryReplicationPolicyId?: pulumi.Input<string>;
    recoveryVaultName?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    sourceRecoveryFabricName?: pulumi.Input<string>;
    sourceRecoveryProtectionContainerName?: pulumi.Input<string>;
    sourceVmId?: pulumi.Input<string>;
    targetAvailabilitySetId?: pulumi.Input<string>;
    targetBootDiagnosticStorageAccountId?: pulumi.Input<string>;
    targetCapacityReservationGroupId?: pulumi.Input<string>;
    targetEdgeZone?: pulumi.Input<string>;
    targetNetworkId?: pulumi.Input<string>;
    targetProximityPlacementGroupId?: pulumi.Input<string>;
    targetRecoveryFabricId?: pulumi.Input<string>;
    targetRecoveryProtectionContainerId?: pulumi.Input<string>;
    targetResourceGroupId?: pulumi.Input<string>;
    targetVirtualMachineScaleSetId?: pulumi.Input<string>;
    targetZone?: pulumi.Input<string>;
    testNetworkId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SiteRecoveryReplicatedVmTimeouts>;
    unmanagedDisks?: pulumi.Input<pulumi.Input<inputs.SiteRecoveryReplicatedVmUnmanagedDisk>[]>;
}

/**
 * The set of arguments for constructing a SiteRecoveryReplicatedVm resource.
 */
export interface SiteRecoveryReplicatedVmArgs {
    managedDisks?: pulumi.Input<pulumi.Input<inputs.SiteRecoveryReplicatedVmManagedDisk>[]>;
    multiVmGroupName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.SiteRecoveryReplicatedVmNetworkInterface>[]>;
    recoveryReplicationPolicyId: pulumi.Input<string>;
    recoveryVaultName: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    sourceRecoveryFabricName: pulumi.Input<string>;
    sourceRecoveryProtectionContainerName: pulumi.Input<string>;
    sourceVmId: pulumi.Input<string>;
    targetAvailabilitySetId?: pulumi.Input<string>;
    targetBootDiagnosticStorageAccountId?: pulumi.Input<string>;
    targetCapacityReservationGroupId?: pulumi.Input<string>;
    targetEdgeZone?: pulumi.Input<string>;
    targetNetworkId?: pulumi.Input<string>;
    targetProximityPlacementGroupId?: pulumi.Input<string>;
    targetRecoveryFabricId: pulumi.Input<string>;
    targetRecoveryProtectionContainerId: pulumi.Input<string>;
    targetResourceGroupId: pulumi.Input<string>;
    targetVirtualMachineScaleSetId?: pulumi.Input<string>;
    targetZone?: pulumi.Input<string>;
    testNetworkId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SiteRecoveryReplicatedVmTimeouts>;
    unmanagedDisks?: pulumi.Input<pulumi.Input<inputs.SiteRecoveryReplicatedVmUnmanagedDisk>[]>;
}
