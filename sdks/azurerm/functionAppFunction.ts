// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FunctionAppFunction extends pulumi.CustomResource {
    /**
     * Get an existing FunctionAppFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionAppFunctionState, opts?: pulumi.CustomResourceOptions): FunctionAppFunction {
        return new FunctionAppFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/functionAppFunction:FunctionAppFunction';

    /**
     * Returns true if the given object is an instance of FunctionAppFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionAppFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionAppFunction.__pulumiType;
    }

    /**
     * The config for this Function in JSON format.
     */
    public readonly configJson!: pulumi.Output<string>;
    /**
     * The URL of the configuration JSON.
     */
    public /*out*/ readonly configUrl!: pulumi.Output<string>;
    /**
     * Should this function be enabled. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly files!: pulumi.Output<outputs.FunctionAppFunctionFile[] | undefined>;
    /**
     * The ID of the Function App in which this function should reside.
     */
    public readonly functionAppId!: pulumi.Output<string>;
    /**
     * The invocation URL.
     */
    public /*out*/ readonly invocationUrl!: pulumi.Output<string>;
    /**
     * The language the Function is written in.
     */
    public readonly language!: pulumi.Output<string | undefined>;
    /**
     * The name of the function.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Script root path URL.
     */
    public /*out*/ readonly scriptRootPathUrl!: pulumi.Output<string>;
    /**
     * The script URL.
     */
    public /*out*/ readonly scriptUrl!: pulumi.Output<string>;
    /**
     * The URL for the Secrets File.
     */
    public /*out*/ readonly secretsFileUrl!: pulumi.Output<string>;
    /**
     * The test data for the function.
     */
    public readonly testData!: pulumi.Output<string | undefined>;
    /**
     * The Test data URL.
     */
    public /*out*/ readonly testDataUrl!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FunctionAppFunctionTimeouts | undefined>;
    /**
     * The function URL.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a FunctionAppFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionAppFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionAppFunctionArgs | FunctionAppFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionAppFunctionState | undefined;
            resourceInputs["configJson"] = state ? state.configJson : undefined;
            resourceInputs["configUrl"] = state ? state.configUrl : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["functionAppId"] = state ? state.functionAppId : undefined;
            resourceInputs["invocationUrl"] = state ? state.invocationUrl : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scriptRootPathUrl"] = state ? state.scriptRootPathUrl : undefined;
            resourceInputs["scriptUrl"] = state ? state.scriptUrl : undefined;
            resourceInputs["secretsFileUrl"] = state ? state.secretsFileUrl : undefined;
            resourceInputs["testData"] = state ? state.testData : undefined;
            resourceInputs["testDataUrl"] = state ? state.testDataUrl : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as FunctionAppFunctionArgs | undefined;
            if ((!args || args.configJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configJson'");
            }
            if ((!args || args.functionAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionAppId'");
            }
            resourceInputs["configJson"] = args ? args.configJson : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["functionAppId"] = args ? args.functionAppId : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["testData"] = args ? args.testData : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["configUrl"] = undefined /*out*/;
            resourceInputs["invocationUrl"] = undefined /*out*/;
            resourceInputs["scriptRootPathUrl"] = undefined /*out*/;
            resourceInputs["scriptUrl"] = undefined /*out*/;
            resourceInputs["secretsFileUrl"] = undefined /*out*/;
            resourceInputs["testDataUrl"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionAppFunction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FunctionAppFunction resources.
 */
export interface FunctionAppFunctionState {
    /**
     * The config for this Function in JSON format.
     */
    configJson?: pulumi.Input<string>;
    /**
     * The URL of the configuration JSON.
     */
    configUrl?: pulumi.Input<string>;
    /**
     * Should this function be enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    files?: pulumi.Input<pulumi.Input<inputs.FunctionAppFunctionFile>[]>;
    /**
     * The ID of the Function App in which this function should reside.
     */
    functionAppId?: pulumi.Input<string>;
    /**
     * The invocation URL.
     */
    invocationUrl?: pulumi.Input<string>;
    /**
     * The language the Function is written in.
     */
    language?: pulumi.Input<string>;
    /**
     * The name of the function.
     */
    name?: pulumi.Input<string>;
    /**
     * The Script root path URL.
     */
    scriptRootPathUrl?: pulumi.Input<string>;
    /**
     * The script URL.
     */
    scriptUrl?: pulumi.Input<string>;
    /**
     * The URL for the Secrets File.
     */
    secretsFileUrl?: pulumi.Input<string>;
    /**
     * The test data for the function.
     */
    testData?: pulumi.Input<string>;
    /**
     * The Test data URL.
     */
    testDataUrl?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FunctionAppFunctionTimeouts>;
    /**
     * The function URL.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FunctionAppFunction resource.
 */
export interface FunctionAppFunctionArgs {
    /**
     * The config for this Function in JSON format.
     */
    configJson: pulumi.Input<string>;
    /**
     * Should this function be enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    files?: pulumi.Input<pulumi.Input<inputs.FunctionAppFunctionFile>[]>;
    /**
     * The ID of the Function App in which this function should reside.
     */
    functionAppId: pulumi.Input<string>;
    /**
     * The language the Function is written in.
     */
    language?: pulumi.Input<string>;
    /**
     * The name of the function.
     */
    name?: pulumi.Input<string>;
    /**
     * The test data for the function.
     */
    testData?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FunctionAppFunctionTimeouts>;
}
