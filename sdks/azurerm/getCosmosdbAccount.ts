// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCosmosdbAccount(args: GetCosmosdbAccountArgs, opts?: pulumi.InvokeOptions): Promise<GetCosmosdbAccountResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getCosmosdbAccount:getCosmosdbAccount", {
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCosmosdbAccount.
 */
export interface GetCosmosdbAccountArgs {
    id?: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetCosmosdbAccountTimeouts;
}

/**
 * A collection of values returned by getCosmosdbAccount.
 */
export interface GetCosmosdbAccountResult {
    readonly automaticFailoverEnabled: boolean;
    readonly capabilities: outputs.GetCosmosdbAccountCapability[];
    readonly consistencyPolicies: outputs.GetCosmosdbAccountConsistencyPolicy[];
    readonly endpoint: string;
    readonly freeTierEnabled: boolean;
    readonly geoLocations: outputs.GetCosmosdbAccountGeoLocation[];
    readonly id: string;
    readonly ipRangeFilter: string;
    readonly isVirtualNetworkFilterEnabled: boolean;
    readonly keyVaultKeyId: string;
    readonly kind: string;
    readonly location: string;
    readonly multipleWriteLocationsEnabled: boolean;
    readonly name: string;
    readonly offerType: string;
    readonly primaryKey: string;
    readonly primaryMongodbConnectionString: string;
    readonly primaryReadonlyKey: string;
    readonly primaryReadonlyMongodbConnectionString: string;
    readonly primaryReadonlySqlConnectionString: string;
    readonly primarySqlConnectionString: string;
    readonly readEndpoints: string[];
    readonly resourceGroupName: string;
    readonly secondaryKey: string;
    readonly secondaryMongodbConnectionString: string;
    readonly secondaryReadonlyKey: string;
    readonly secondaryReadonlyMongodbConnectionString: string;
    readonly secondaryReadonlySqlConnectionString: string;
    readonly secondarySqlConnectionString: string;
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetCosmosdbAccountTimeouts;
    readonly virtualNetworkRules: outputs.GetCosmosdbAccountVirtualNetworkRule[];
    readonly writeEndpoints: string[];
}
export function getCosmosdbAccountOutput(args: GetCosmosdbAccountOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCosmosdbAccountResult> {
    return pulumi.output(args).apply((a: any) => getCosmosdbAccount(a, opts))
}

/**
 * A collection of arguments for invoking getCosmosdbAccount.
 */
export interface GetCosmosdbAccountOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetCosmosdbAccountTimeoutsArgs>;
}
