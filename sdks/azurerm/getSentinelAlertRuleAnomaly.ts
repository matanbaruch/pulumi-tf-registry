// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSentinelAlertRuleAnomaly(args: GetSentinelAlertRuleAnomalyArgs, opts?: pulumi.InvokeOptions): Promise<GetSentinelAlertRuleAnomalyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getSentinelAlertRuleAnomaly:getSentinelAlertRuleAnomaly", {
        "displayName": args.displayName,
        "id": args.id,
        "logAnalyticsWorkspaceId": args.logAnalyticsWorkspaceId,
        "name": args.name,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSentinelAlertRuleAnomaly.
 */
export interface GetSentinelAlertRuleAnomalyArgs {
    displayName?: string;
    id?: string;
    logAnalyticsWorkspaceId: string;
    name?: string;
    timeouts?: inputs.GetSentinelAlertRuleAnomalyTimeouts;
}

/**
 * A collection of values returned by getSentinelAlertRuleAnomaly.
 */
export interface GetSentinelAlertRuleAnomalyResult {
    readonly anomalySettingsVersion: number;
    readonly anomalyVersion: string;
    readonly description: string;
    readonly displayName: string;
    readonly enabled: boolean;
    readonly frequency: string;
    readonly id: string;
    readonly logAnalyticsWorkspaceId: string;
    readonly mode: string;
    readonly multiSelectObservations: outputs.GetSentinelAlertRuleAnomalyMultiSelectObservation[];
    readonly name: string;
    readonly prioritizedExcludeObservations: outputs.GetSentinelAlertRuleAnomalyPrioritizedExcludeObservation[];
    readonly requiredDataConnectors: outputs.GetSentinelAlertRuleAnomalyRequiredDataConnector[];
    readonly settingsDefinitionId: string;
    readonly singleSelectObservations: outputs.GetSentinelAlertRuleAnomalySingleSelectObservation[];
    readonly tactics: string[];
    readonly techniques: string[];
    readonly thresholdObservations: outputs.GetSentinelAlertRuleAnomalyThresholdObservation[];
    readonly timeouts?: outputs.GetSentinelAlertRuleAnomalyTimeouts;
}
export function getSentinelAlertRuleAnomalyOutput(args: GetSentinelAlertRuleAnomalyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSentinelAlertRuleAnomalyResult> {
    return pulumi.output(args).apply((a: any) => getSentinelAlertRuleAnomaly(a, opts))
}

/**
 * A collection of arguments for invoking getSentinelAlertRuleAnomaly.
 */
export interface GetSentinelAlertRuleAnomalyOutputArgs {
    displayName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    logAnalyticsWorkspaceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetSentinelAlertRuleAnomalyTimeoutsArgs>;
}
