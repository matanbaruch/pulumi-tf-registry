// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NginxConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing NginxConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NginxConfigurationState, opts?: pulumi.CustomResourceOptions): NginxConfiguration {
        return new NginxConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/nginxConfiguration:NginxConfiguration';

    /**
     * Returns true if the given object is an instance of NginxConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NginxConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NginxConfiguration.__pulumiType;
    }

    public readonly configFiles!: pulumi.Output<outputs.NginxConfigurationConfigFile[] | undefined>;
    public readonly nginxDeploymentId!: pulumi.Output<string>;
    public readonly packageData!: pulumi.Output<string | undefined>;
    public readonly protectedFiles!: pulumi.Output<outputs.NginxConfigurationProtectedFile[] | undefined>;
    public readonly rootFile!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NginxConfigurationTimeouts | undefined>;

    /**
     * Create a NginxConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NginxConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NginxConfigurationArgs | NginxConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NginxConfigurationState | undefined;
            resourceInputs["configFiles"] = state ? state.configFiles : undefined;
            resourceInputs["nginxDeploymentId"] = state ? state.nginxDeploymentId : undefined;
            resourceInputs["packageData"] = state ? state.packageData : undefined;
            resourceInputs["protectedFiles"] = state ? state.protectedFiles : undefined;
            resourceInputs["rootFile"] = state ? state.rootFile : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NginxConfigurationArgs | undefined;
            if ((!args || args.nginxDeploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nginxDeploymentId'");
            }
            if ((!args || args.rootFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootFile'");
            }
            resourceInputs["configFiles"] = args ? args.configFiles : undefined;
            resourceInputs["nginxDeploymentId"] = args ? args.nginxDeploymentId : undefined;
            resourceInputs["packageData"] = args ? args.packageData : undefined;
            resourceInputs["protectedFiles"] = args ? args.protectedFiles : undefined;
            resourceInputs["rootFile"] = args ? args.rootFile : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NginxConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NginxConfiguration resources.
 */
export interface NginxConfigurationState {
    configFiles?: pulumi.Input<pulumi.Input<inputs.NginxConfigurationConfigFile>[]>;
    nginxDeploymentId?: pulumi.Input<string>;
    packageData?: pulumi.Input<string>;
    protectedFiles?: pulumi.Input<pulumi.Input<inputs.NginxConfigurationProtectedFile>[]>;
    rootFile?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NginxConfigurationTimeouts>;
}

/**
 * The set of arguments for constructing a NginxConfiguration resource.
 */
export interface NginxConfigurationArgs {
    configFiles?: pulumi.Input<pulumi.Input<inputs.NginxConfigurationConfigFile>[]>;
    nginxDeploymentId: pulumi.Input<string>;
    packageData?: pulumi.Input<string>;
    protectedFiles?: pulumi.Input<pulumi.Input<inputs.NginxConfigurationProtectedFile>[]>;
    rootFile: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NginxConfigurationTimeouts>;
}
