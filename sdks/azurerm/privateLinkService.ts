// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PrivateLinkService extends pulumi.CustomResource {
    /**
     * Get an existing PrivateLinkService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateLinkServiceState, opts?: pulumi.CustomResourceOptions): PrivateLinkService {
        return new PrivateLinkService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/privateLinkService:PrivateLinkService';

    /**
     * Returns true if the given object is an instance of PrivateLinkService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateLinkService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateLinkService.__pulumiType;
    }

    public /*out*/ readonly alias!: pulumi.Output<string>;
    public readonly autoApprovalSubscriptionIds!: pulumi.Output<string[] | undefined>;
    public readonly enableProxyProtocol!: pulumi.Output<boolean | undefined>;
    public readonly fqdns!: pulumi.Output<string[] | undefined>;
    public readonly loadBalancerFrontendIpConfigurationIds!: pulumi.Output<string[]>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly natIpConfigurations!: pulumi.Output<outputs.PrivateLinkServiceNatIpConfiguration[]>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PrivateLinkServiceTimeouts | undefined>;
    public readonly visibilitySubscriptionIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a PrivateLinkService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateLinkServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateLinkServiceArgs | PrivateLinkServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateLinkServiceState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["autoApprovalSubscriptionIds"] = state ? state.autoApprovalSubscriptionIds : undefined;
            resourceInputs["enableProxyProtocol"] = state ? state.enableProxyProtocol : undefined;
            resourceInputs["fqdns"] = state ? state.fqdns : undefined;
            resourceInputs["loadBalancerFrontendIpConfigurationIds"] = state ? state.loadBalancerFrontendIpConfigurationIds : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natIpConfigurations"] = state ? state.natIpConfigurations : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["visibilitySubscriptionIds"] = state ? state.visibilitySubscriptionIds : undefined;
        } else {
            const args = argsOrState as PrivateLinkServiceArgs | undefined;
            if ((!args || args.loadBalancerFrontendIpConfigurationIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerFrontendIpConfigurationIds'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.natIpConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natIpConfigurations'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["autoApprovalSubscriptionIds"] = args ? args.autoApprovalSubscriptionIds : undefined;
            resourceInputs["enableProxyProtocol"] = args ? args.enableProxyProtocol : undefined;
            resourceInputs["fqdns"] = args ? args.fqdns : undefined;
            resourceInputs["loadBalancerFrontendIpConfigurationIds"] = args ? args.loadBalancerFrontendIpConfigurationIds : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natIpConfigurations"] = args ? args.natIpConfigurations : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["visibilitySubscriptionIds"] = args ? args.visibilitySubscriptionIds : undefined;
            resourceInputs["alias"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivateLinkService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PrivateLinkService resources.
 */
export interface PrivateLinkServiceState {
    alias?: pulumi.Input<string>;
    autoApprovalSubscriptionIds?: pulumi.Input<pulumi.Input<string>[]>;
    enableProxyProtocol?: pulumi.Input<boolean>;
    fqdns?: pulumi.Input<pulumi.Input<string>[]>;
    loadBalancerFrontendIpConfigurationIds?: pulumi.Input<pulumi.Input<string>[]>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    natIpConfigurations?: pulumi.Input<pulumi.Input<inputs.PrivateLinkServiceNatIpConfiguration>[]>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PrivateLinkServiceTimeouts>;
    visibilitySubscriptionIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PrivateLinkService resource.
 */
export interface PrivateLinkServiceArgs {
    autoApprovalSubscriptionIds?: pulumi.Input<pulumi.Input<string>[]>;
    enableProxyProtocol?: pulumi.Input<boolean>;
    fqdns?: pulumi.Input<pulumi.Input<string>[]>;
    loadBalancerFrontendIpConfigurationIds: pulumi.Input<pulumi.Input<string>[]>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    natIpConfigurations: pulumi.Input<pulumi.Input<inputs.PrivateLinkServiceNatIpConfiguration>[]>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PrivateLinkServiceTimeouts>;
    visibilitySubscriptionIds?: pulumi.Input<pulumi.Input<string>[]>;
}
