// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppServiceEnvironmentV3 extends pulumi.CustomResource {
    /**
     * Get an existing AppServiceEnvironmentV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppServiceEnvironmentV3State, opts?: pulumi.CustomResourceOptions): AppServiceEnvironmentV3 {
        return new AppServiceEnvironmentV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/appServiceEnvironmentV3:AppServiceEnvironmentV3';

    /**
     * Returns true if the given object is an instance of AppServiceEnvironmentV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppServiceEnvironmentV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppServiceEnvironmentV3.__pulumiType;
    }

    public readonly allowNewPrivateEndpointConnections!: pulumi.Output<boolean | undefined>;
    public readonly clusterSettings!: pulumi.Output<outputs.AppServiceEnvironmentV3ClusterSetting[] | undefined>;
    public readonly dedicatedHostCount!: pulumi.Output<number | undefined>;
    public /*out*/ readonly dnsSuffix!: pulumi.Output<string>;
    public /*out*/ readonly externalInboundIpAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly inboundNetworkDependencies!: pulumi.Output<outputs.AppServiceEnvironmentV3InboundNetworkDependency[]>;
    public /*out*/ readonly internalInboundIpAddresses!: pulumi.Output<string[]>;
    public readonly internalLoadBalancingMode!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ipSslAddressCount!: pulumi.Output<number>;
    public /*out*/ readonly linuxOutboundIpAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly pricingTier!: pulumi.Output<string>;
    public readonly remoteDebuggingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AppServiceEnvironmentV3Timeouts | undefined>;
    public /*out*/ readonly windowsOutboundIpAddresses!: pulumi.Output<string[]>;
    public readonly zoneRedundant!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AppServiceEnvironmentV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppServiceEnvironmentV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppServiceEnvironmentV3Args | AppServiceEnvironmentV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppServiceEnvironmentV3State | undefined;
            resourceInputs["allowNewPrivateEndpointConnections"] = state ? state.allowNewPrivateEndpointConnections : undefined;
            resourceInputs["clusterSettings"] = state ? state.clusterSettings : undefined;
            resourceInputs["dedicatedHostCount"] = state ? state.dedicatedHostCount : undefined;
            resourceInputs["dnsSuffix"] = state ? state.dnsSuffix : undefined;
            resourceInputs["externalInboundIpAddresses"] = state ? state.externalInboundIpAddresses : undefined;
            resourceInputs["inboundNetworkDependencies"] = state ? state.inboundNetworkDependencies : undefined;
            resourceInputs["internalInboundIpAddresses"] = state ? state.internalInboundIpAddresses : undefined;
            resourceInputs["internalLoadBalancingMode"] = state ? state.internalLoadBalancingMode : undefined;
            resourceInputs["ipSslAddressCount"] = state ? state.ipSslAddressCount : undefined;
            resourceInputs["linuxOutboundIpAddresses"] = state ? state.linuxOutboundIpAddresses : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pricingTier"] = state ? state.pricingTier : undefined;
            resourceInputs["remoteDebuggingEnabled"] = state ? state.remoteDebuggingEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["windowsOutboundIpAddresses"] = state ? state.windowsOutboundIpAddresses : undefined;
            resourceInputs["zoneRedundant"] = state ? state.zoneRedundant : undefined;
        } else {
            const args = argsOrState as AppServiceEnvironmentV3Args | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["allowNewPrivateEndpointConnections"] = args ? args.allowNewPrivateEndpointConnections : undefined;
            resourceInputs["clusterSettings"] = args ? args.clusterSettings : undefined;
            resourceInputs["dedicatedHostCount"] = args ? args.dedicatedHostCount : undefined;
            resourceInputs["internalLoadBalancingMode"] = args ? args.internalLoadBalancingMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remoteDebuggingEnabled"] = args ? args.remoteDebuggingEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zoneRedundant"] = args ? args.zoneRedundant : undefined;
            resourceInputs["dnsSuffix"] = undefined /*out*/;
            resourceInputs["externalInboundIpAddresses"] = undefined /*out*/;
            resourceInputs["inboundNetworkDependencies"] = undefined /*out*/;
            resourceInputs["internalInboundIpAddresses"] = undefined /*out*/;
            resourceInputs["ipSslAddressCount"] = undefined /*out*/;
            resourceInputs["linuxOutboundIpAddresses"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["pricingTier"] = undefined /*out*/;
            resourceInputs["windowsOutboundIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppServiceEnvironmentV3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppServiceEnvironmentV3 resources.
 */
export interface AppServiceEnvironmentV3State {
    allowNewPrivateEndpointConnections?: pulumi.Input<boolean>;
    clusterSettings?: pulumi.Input<pulumi.Input<inputs.AppServiceEnvironmentV3ClusterSetting>[]>;
    dedicatedHostCount?: pulumi.Input<number>;
    dnsSuffix?: pulumi.Input<string>;
    externalInboundIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    inboundNetworkDependencies?: pulumi.Input<pulumi.Input<inputs.AppServiceEnvironmentV3InboundNetworkDependency>[]>;
    internalInboundIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    internalLoadBalancingMode?: pulumi.Input<string>;
    ipSslAddressCount?: pulumi.Input<number>;
    linuxOutboundIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pricingTier?: pulumi.Input<string>;
    remoteDebuggingEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AppServiceEnvironmentV3Timeouts>;
    windowsOutboundIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    zoneRedundant?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AppServiceEnvironmentV3 resource.
 */
export interface AppServiceEnvironmentV3Args {
    allowNewPrivateEndpointConnections?: pulumi.Input<boolean>;
    clusterSettings?: pulumi.Input<pulumi.Input<inputs.AppServiceEnvironmentV3ClusterSetting>[]>;
    dedicatedHostCount?: pulumi.Input<number>;
    internalLoadBalancingMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    remoteDebuggingEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AppServiceEnvironmentV3Timeouts>;
    zoneRedundant?: pulumi.Input<boolean>;
}
