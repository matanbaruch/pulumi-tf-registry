// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventgridTopic extends pulumi.CustomResource {
    /**
     * Get an existing EventgridTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventgridTopicState, opts?: pulumi.CustomResourceOptions): EventgridTopic {
        return new EventgridTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/eventgridTopic:EventgridTopic';

    /**
     * Returns true if the given object is an instance of EventgridTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventgridTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventgridTopic.__pulumiType;
    }

    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.EventgridTopicIdentity | undefined>;
    public readonly inboundIpRules!: pulumi.Output<outputs.EventgridTopicInboundIpRule[] | undefined>;
    public readonly inputMappingDefaultValues!: pulumi.Output<outputs.EventgridTopicInputMappingDefaultValues | undefined>;
    public readonly inputMappingFields!: pulumi.Output<outputs.EventgridTopicInputMappingFields | undefined>;
    public readonly inputSchema!: pulumi.Output<string | undefined>;
    public readonly localAuthEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly primaryAccessKey!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly secondaryAccessKey!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EventgridTopicTimeouts | undefined>;

    /**
     * Create a EventgridTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventgridTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventgridTopicArgs | EventgridTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventgridTopicState | undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["inboundIpRules"] = state ? state.inboundIpRules : undefined;
            resourceInputs["inputMappingDefaultValues"] = state ? state.inputMappingDefaultValues : undefined;
            resourceInputs["inputMappingFields"] = state ? state.inputMappingFields : undefined;
            resourceInputs["inputSchema"] = state ? state.inputSchema : undefined;
            resourceInputs["localAuthEnabled"] = state ? state.localAuthEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryAccessKey"] = state ? state.primaryAccessKey : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secondaryAccessKey"] = state ? state.secondaryAccessKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EventgridTopicArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["inboundIpRules"] = args ? args.inboundIpRules : undefined;
            resourceInputs["inputMappingDefaultValues"] = args ? args.inputMappingDefaultValues : undefined;
            resourceInputs["inputMappingFields"] = args ? args.inputMappingFields : undefined;
            resourceInputs["inputSchema"] = args ? args.inputSchema : undefined;
            resourceInputs["localAuthEnabled"] = args ? args.localAuthEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["primaryAccessKey"] = undefined /*out*/;
            resourceInputs["secondaryAccessKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryAccessKey", "secondaryAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EventgridTopic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventgridTopic resources.
 */
export interface EventgridTopicState {
    endpoint?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.EventgridTopicIdentity>;
    inboundIpRules?: pulumi.Input<pulumi.Input<inputs.EventgridTopicInboundIpRule>[]>;
    inputMappingDefaultValues?: pulumi.Input<inputs.EventgridTopicInputMappingDefaultValues>;
    inputMappingFields?: pulumi.Input<inputs.EventgridTopicInputMappingFields>;
    inputSchema?: pulumi.Input<string>;
    localAuthEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    primaryAccessKey?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    secondaryAccessKey?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EventgridTopicTimeouts>;
}

/**
 * The set of arguments for constructing a EventgridTopic resource.
 */
export interface EventgridTopicArgs {
    identity?: pulumi.Input<inputs.EventgridTopicIdentity>;
    inboundIpRules?: pulumi.Input<pulumi.Input<inputs.EventgridTopicInboundIpRule>[]>;
    inputMappingDefaultValues?: pulumi.Input<inputs.EventgridTopicInputMappingDefaultValues>;
    inputMappingFields?: pulumi.Input<inputs.EventgridTopicInputMappingFields>;
    inputSchema?: pulumi.Input<string>;
    localAuthEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EventgridTopicTimeouts>;
}
