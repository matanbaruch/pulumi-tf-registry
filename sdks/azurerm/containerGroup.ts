// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerGroup extends pulumi.CustomResource {
    /**
     * Get an existing ContainerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerGroupState, opts?: pulumi.CustomResourceOptions): ContainerGroup {
        return new ContainerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/containerGroup:ContainerGroup';

    /**
     * Returns true if the given object is an instance of ContainerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerGroup.__pulumiType;
    }

    public readonly containers!: pulumi.Output<outputs.ContainerGroupContainer[]>;
    public readonly diagnostics!: pulumi.Output<outputs.ContainerGroupDiagnostics | undefined>;
    public readonly dnsConfig!: pulumi.Output<outputs.ContainerGroupDnsConfig | undefined>;
    public readonly dnsNameLabel!: pulumi.Output<string | undefined>;
    public readonly dnsNameLabelReusePolicy!: pulumi.Output<string | undefined>;
    public readonly exposedPorts!: pulumi.Output<outputs.ContainerGroupExposedPort[]>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.ContainerGroupIdentity | undefined>;
    public readonly imageRegistryCredentials!: pulumi.Output<outputs.ContainerGroupImageRegistryCredential[] | undefined>;
    public readonly initContainers!: pulumi.Output<outputs.ContainerGroupInitContainer[] | undefined>;
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    public readonly ipAddressType!: pulumi.Output<string | undefined>;
    public readonly keyVaultKeyId!: pulumi.Output<string | undefined>;
    public readonly keyVaultUserAssignedIdentityId!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly networkProfileId!: pulumi.Output<string>;
    public readonly osType!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly restartPolicy!: pulumi.Output<string | undefined>;
    public readonly sku!: pulumi.Output<string | undefined>;
    public readonly subnetIds!: pulumi.Output<string[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerGroupTimeouts | undefined>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ContainerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerGroupArgs | ContainerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerGroupState | undefined;
            resourceInputs["containers"] = state ? state.containers : undefined;
            resourceInputs["diagnostics"] = state ? state.diagnostics : undefined;
            resourceInputs["dnsConfig"] = state ? state.dnsConfig : undefined;
            resourceInputs["dnsNameLabel"] = state ? state.dnsNameLabel : undefined;
            resourceInputs["dnsNameLabelReusePolicy"] = state ? state.dnsNameLabelReusePolicy : undefined;
            resourceInputs["exposedPorts"] = state ? state.exposedPorts : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["imageRegistryCredentials"] = state ? state.imageRegistryCredentials : undefined;
            resourceInputs["initContainers"] = state ? state.initContainers : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipAddressType"] = state ? state.ipAddressType : undefined;
            resourceInputs["keyVaultKeyId"] = state ? state.keyVaultKeyId : undefined;
            resourceInputs["keyVaultUserAssignedIdentityId"] = state ? state.keyVaultUserAssignedIdentityId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProfileId"] = state ? state.networkProfileId : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["restartPolicy"] = state ? state.restartPolicy : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as ContainerGroupArgs | undefined;
            if ((!args || args.containers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containers'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.osType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["containers"] = args ? args.containers : undefined;
            resourceInputs["diagnostics"] = args ? args.diagnostics : undefined;
            resourceInputs["dnsConfig"] = args ? args.dnsConfig : undefined;
            resourceInputs["dnsNameLabel"] = args ? args.dnsNameLabel : undefined;
            resourceInputs["dnsNameLabelReusePolicy"] = args ? args.dnsNameLabelReusePolicy : undefined;
            resourceInputs["exposedPorts"] = args ? args.exposedPorts : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["imageRegistryCredentials"] = args ? args.imageRegistryCredentials : undefined;
            resourceInputs["initContainers"] = args ? args.initContainers : undefined;
            resourceInputs["ipAddressType"] = args ? args.ipAddressType : undefined;
            resourceInputs["keyVaultKeyId"] = args ? args.keyVaultKeyId : undefined;
            resourceInputs["keyVaultUserAssignedIdentityId"] = args ? args.keyVaultUserAssignedIdentityId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProfileId"] = args ? args.networkProfileId : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["restartPolicy"] = args ? args.restartPolicy : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["ipAddress"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerGroup resources.
 */
export interface ContainerGroupState {
    containers?: pulumi.Input<pulumi.Input<inputs.ContainerGroupContainer>[]>;
    diagnostics?: pulumi.Input<inputs.ContainerGroupDiagnostics>;
    dnsConfig?: pulumi.Input<inputs.ContainerGroupDnsConfig>;
    dnsNameLabel?: pulumi.Input<string>;
    dnsNameLabelReusePolicy?: pulumi.Input<string>;
    exposedPorts?: pulumi.Input<pulumi.Input<inputs.ContainerGroupExposedPort>[]>;
    fqdn?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.ContainerGroupIdentity>;
    imageRegistryCredentials?: pulumi.Input<pulumi.Input<inputs.ContainerGroupImageRegistryCredential>[]>;
    initContainers?: pulumi.Input<pulumi.Input<inputs.ContainerGroupInitContainer>[]>;
    ipAddress?: pulumi.Input<string>;
    ipAddressType?: pulumi.Input<string>;
    keyVaultKeyId?: pulumi.Input<string>;
    keyVaultUserAssignedIdentityId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    networkProfileId?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    restartPolicy?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ContainerGroupTimeouts>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ContainerGroup resource.
 */
export interface ContainerGroupArgs {
    containers: pulumi.Input<pulumi.Input<inputs.ContainerGroupContainer>[]>;
    diagnostics?: pulumi.Input<inputs.ContainerGroupDiagnostics>;
    dnsConfig?: pulumi.Input<inputs.ContainerGroupDnsConfig>;
    dnsNameLabel?: pulumi.Input<string>;
    dnsNameLabelReusePolicy?: pulumi.Input<string>;
    exposedPorts?: pulumi.Input<pulumi.Input<inputs.ContainerGroupExposedPort>[]>;
    identity?: pulumi.Input<inputs.ContainerGroupIdentity>;
    imageRegistryCredentials?: pulumi.Input<pulumi.Input<inputs.ContainerGroupImageRegistryCredential>[]>;
    initContainers?: pulumi.Input<pulumi.Input<inputs.ContainerGroupInitContainer>[]>;
    ipAddressType?: pulumi.Input<string>;
    keyVaultKeyId?: pulumi.Input<string>;
    keyVaultUserAssignedIdentityId?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    networkProfileId?: pulumi.Input<string>;
    osType: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    restartPolicy?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ContainerGroupTimeouts>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
