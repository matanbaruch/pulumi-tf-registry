// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServicebusQueueAuthorizationRule(args: GetServicebusQueueAuthorizationRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetServicebusQueueAuthorizationRuleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getServicebusQueueAuthorizationRule:getServicebusQueueAuthorizationRule", {
        "id": args.id,
        "name": args.name,
        "namespaceName": args.namespaceName,
        "queueId": args.queueId,
        "queueName": args.queueName,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServicebusQueueAuthorizationRule.
 */
export interface GetServicebusQueueAuthorizationRuleArgs {
    id?: string;
    name: string;
    namespaceName?: string;
    queueId?: string;
    queueName?: string;
    resourceGroupName?: string;
    timeouts?: inputs.GetServicebusQueueAuthorizationRuleTimeouts;
}

/**
 * A collection of values returned by getServicebusQueueAuthorizationRule.
 */
export interface GetServicebusQueueAuthorizationRuleResult {
    readonly id: string;
    readonly listen: boolean;
    readonly manage: boolean;
    readonly name: string;
    readonly namespaceName?: string;
    readonly primaryConnectionString: string;
    readonly primaryConnectionStringAlias: string;
    readonly primaryKey: string;
    readonly queueId?: string;
    readonly queueName?: string;
    readonly resourceGroupName?: string;
    readonly secondaryConnectionString: string;
    readonly secondaryConnectionStringAlias: string;
    readonly secondaryKey: string;
    readonly send: boolean;
    readonly timeouts?: outputs.GetServicebusQueueAuthorizationRuleTimeouts;
}
export function getServicebusQueueAuthorizationRuleOutput(args: GetServicebusQueueAuthorizationRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServicebusQueueAuthorizationRuleResult> {
    return pulumi.output(args).apply((a: any) => getServicebusQueueAuthorizationRule(a, opts))
}

/**
 * A collection of arguments for invoking getServicebusQueueAuthorizationRule.
 */
export interface GetServicebusQueueAuthorizationRuleOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    namespaceName?: pulumi.Input<string>;
    queueId?: pulumi.Input<string>;
    queueName?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetServicebusQueueAuthorizationRuleTimeoutsArgs>;
}
