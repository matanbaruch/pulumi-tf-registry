// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageEncryptionScope extends pulumi.CustomResource {
    /**
     * Get an existing StorageEncryptionScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageEncryptionScopeState, opts?: pulumi.CustomResourceOptions): StorageEncryptionScope {
        return new StorageEncryptionScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/storageEncryptionScope:StorageEncryptionScope';

    /**
     * Returns true if the given object is an instance of StorageEncryptionScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageEncryptionScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageEncryptionScope.__pulumiType;
    }

    public readonly infrastructureEncryptionRequired!: pulumi.Output<boolean | undefined>;
    public readonly keyVaultKeyId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string>;
    public readonly storageAccountId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageEncryptionScopeTimeouts | undefined>;

    /**
     * Create a StorageEncryptionScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageEncryptionScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageEncryptionScopeArgs | StorageEncryptionScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageEncryptionScopeState | undefined;
            resourceInputs["infrastructureEncryptionRequired"] = state ? state.infrastructureEncryptionRequired : undefined;
            resourceInputs["keyVaultKeyId"] = state ? state.keyVaultKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StorageEncryptionScopeArgs | undefined;
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.storageAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            resourceInputs["infrastructureEncryptionRequired"] = args ? args.infrastructureEncryptionRequired : undefined;
            resourceInputs["keyVaultKeyId"] = args ? args.keyVaultKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageEncryptionScope.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageEncryptionScope resources.
 */
export interface StorageEncryptionScopeState {
    infrastructureEncryptionRequired?: pulumi.Input<boolean>;
    keyVaultKeyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    storageAccountId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageEncryptionScopeTimeouts>;
}

/**
 * The set of arguments for constructing a StorageEncryptionScope resource.
 */
export interface StorageEncryptionScopeArgs {
    infrastructureEncryptionRequired?: pulumi.Input<boolean>;
    keyVaultKeyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    source: pulumi.Input<string>;
    storageAccountId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageEncryptionScopeTimeouts>;
}
