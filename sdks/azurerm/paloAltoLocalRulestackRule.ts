// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PaloAltoLocalRulestackRule extends pulumi.CustomResource {
    /**
     * Get an existing PaloAltoLocalRulestackRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PaloAltoLocalRulestackRuleState, opts?: pulumi.CustomResourceOptions): PaloAltoLocalRulestackRule {
        return new PaloAltoLocalRulestackRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/paloAltoLocalRulestackRule:PaloAltoLocalRulestackRule';

    /**
     * Returns true if the given object is an instance of PaloAltoLocalRulestackRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PaloAltoLocalRulestackRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PaloAltoLocalRulestackRule.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly applications!: pulumi.Output<string[]>;
    public readonly auditComment!: pulumi.Output<string | undefined>;
    public readonly category!: pulumi.Output<outputs.PaloAltoLocalRulestackRuleCategory | undefined>;
    public readonly decryptionRuleType!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destination!: pulumi.Output<outputs.PaloAltoLocalRulestackRuleDestination>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly inspectionCertificateId!: pulumi.Output<string | undefined>;
    public readonly loggingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly negateDestination!: pulumi.Output<boolean | undefined>;
    public readonly negateSource!: pulumi.Output<boolean | undefined>;
    public readonly priority!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    public readonly protocolPorts!: pulumi.Output<string[] | undefined>;
    public readonly rulestackId!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<outputs.PaloAltoLocalRulestackRuleSource>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PaloAltoLocalRulestackRuleTimeouts | undefined>;

    /**
     * Create a PaloAltoLocalRulestackRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PaloAltoLocalRulestackRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PaloAltoLocalRulestackRuleArgs | PaloAltoLocalRulestackRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PaloAltoLocalRulestackRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["auditComment"] = state ? state.auditComment : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["decryptionRuleType"] = state ? state.decryptionRuleType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["inspectionCertificateId"] = state ? state.inspectionCertificateId : undefined;
            resourceInputs["loggingEnabled"] = state ? state.loggingEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["negateDestination"] = state ? state.negateDestination : undefined;
            resourceInputs["negateSource"] = state ? state.negateSource : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["protocolPorts"] = state ? state.protocolPorts : undefined;
            resourceInputs["rulestackId"] = state ? state.rulestackId : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as PaloAltoLocalRulestackRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.applications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applications'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.rulestackId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rulestackId'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["auditComment"] = args ? args.auditComment : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["decryptionRuleType"] = args ? args.decryptionRuleType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["inspectionCertificateId"] = args ? args.inspectionCertificateId : undefined;
            resourceInputs["loggingEnabled"] = args ? args.loggingEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["negateDestination"] = args ? args.negateDestination : undefined;
            resourceInputs["negateSource"] = args ? args.negateSource : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["protocolPorts"] = args ? args.protocolPorts : undefined;
            resourceInputs["rulestackId"] = args ? args.rulestackId : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PaloAltoLocalRulestackRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PaloAltoLocalRulestackRule resources.
 */
export interface PaloAltoLocalRulestackRuleState {
    action?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    auditComment?: pulumi.Input<string>;
    category?: pulumi.Input<inputs.PaloAltoLocalRulestackRuleCategory>;
    decryptionRuleType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destination?: pulumi.Input<inputs.PaloAltoLocalRulestackRuleDestination>;
    enabled?: pulumi.Input<boolean>;
    inspectionCertificateId?: pulumi.Input<string>;
    loggingEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    negateDestination?: pulumi.Input<boolean>;
    negateSource?: pulumi.Input<boolean>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    protocolPorts?: pulumi.Input<pulumi.Input<string>[]>;
    rulestackId?: pulumi.Input<string>;
    source?: pulumi.Input<inputs.PaloAltoLocalRulestackRuleSource>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PaloAltoLocalRulestackRuleTimeouts>;
}

/**
 * The set of arguments for constructing a PaloAltoLocalRulestackRule resource.
 */
export interface PaloAltoLocalRulestackRuleArgs {
    action: pulumi.Input<string>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    auditComment?: pulumi.Input<string>;
    category?: pulumi.Input<inputs.PaloAltoLocalRulestackRuleCategory>;
    decryptionRuleType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destination: pulumi.Input<inputs.PaloAltoLocalRulestackRuleDestination>;
    enabled?: pulumi.Input<boolean>;
    inspectionCertificateId?: pulumi.Input<string>;
    loggingEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    negateDestination?: pulumi.Input<boolean>;
    negateSource?: pulumi.Input<boolean>;
    priority: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    protocolPorts?: pulumi.Input<pulumi.Input<string>[]>;
    rulestackId: pulumi.Input<string>;
    source: pulumi.Input<inputs.PaloAltoLocalRulestackRuleSource>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PaloAltoLocalRulestackRuleTimeouts>;
}
