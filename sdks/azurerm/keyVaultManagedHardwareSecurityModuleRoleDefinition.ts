// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KeyVaultManagedHardwareSecurityModuleRoleDefinition extends pulumi.CustomResource {
    /**
     * Get an existing KeyVaultManagedHardwareSecurityModuleRoleDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyVaultManagedHardwareSecurityModuleRoleDefinitionState, opts?: pulumi.CustomResourceOptions): KeyVaultManagedHardwareSecurityModuleRoleDefinition {
        return new KeyVaultManagedHardwareSecurityModuleRoleDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/keyVaultManagedHardwareSecurityModuleRoleDefinition:KeyVaultManagedHardwareSecurityModuleRoleDefinition';

    /**
     * Returns true if the given object is an instance of KeyVaultManagedHardwareSecurityModuleRoleDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyVaultManagedHardwareSecurityModuleRoleDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyVaultManagedHardwareSecurityModuleRoleDefinition.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly managedHsmId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly permissions!: pulumi.Output<outputs.KeyVaultManagedHardwareSecurityModuleRoleDefinitionPermission[] | undefined>;
    public /*out*/ readonly resourceManagerId!: pulumi.Output<string>;
    public readonly roleName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly roleType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KeyVaultManagedHardwareSecurityModuleRoleDefinitionTimeouts | undefined>;

    /**
     * Create a KeyVaultManagedHardwareSecurityModuleRoleDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyVaultManagedHardwareSecurityModuleRoleDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyVaultManagedHardwareSecurityModuleRoleDefinitionArgs | KeyVaultManagedHardwareSecurityModuleRoleDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyVaultManagedHardwareSecurityModuleRoleDefinitionState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["managedHsmId"] = state ? state.managedHsmId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["resourceManagerId"] = state ? state.resourceManagerId : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["roleType"] = state ? state.roleType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as KeyVaultManagedHardwareSecurityModuleRoleDefinitionArgs | undefined;
            if ((!args || args.managedHsmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedHsmId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["managedHsmId"] = args ? args.managedHsmId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["resourceManagerId"] = undefined /*out*/;
            resourceInputs["roleType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyVaultManagedHardwareSecurityModuleRoleDefinition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeyVaultManagedHardwareSecurityModuleRoleDefinition resources.
 */
export interface KeyVaultManagedHardwareSecurityModuleRoleDefinitionState {
    description?: pulumi.Input<string>;
    managedHsmId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.KeyVaultManagedHardwareSecurityModuleRoleDefinitionPermission>[]>;
    resourceManagerId?: pulumi.Input<string>;
    roleName?: pulumi.Input<string>;
    roleType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KeyVaultManagedHardwareSecurityModuleRoleDefinitionTimeouts>;
}

/**
 * The set of arguments for constructing a KeyVaultManagedHardwareSecurityModuleRoleDefinition resource.
 */
export interface KeyVaultManagedHardwareSecurityModuleRoleDefinitionArgs {
    description?: pulumi.Input<string>;
    managedHsmId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.KeyVaultManagedHardwareSecurityModuleRoleDefinitionPermission>[]>;
    roleName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KeyVaultManagedHardwareSecurityModuleRoleDefinitionTimeouts>;
}
