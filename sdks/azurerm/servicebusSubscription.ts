// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServicebusSubscription extends pulumi.CustomResource {
    /**
     * Get an existing ServicebusSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicebusSubscriptionState, opts?: pulumi.CustomResourceOptions): ServicebusSubscription {
        return new ServicebusSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/servicebusSubscription:ServicebusSubscription';

    /**
     * Returns true if the given object is an instance of ServicebusSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicebusSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicebusSubscription.__pulumiType;
    }

    public readonly autoDeleteOnIdle!: pulumi.Output<string | undefined>;
    public readonly batchedOperationsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly clientScopedSubscription!: pulumi.Output<outputs.ServicebusSubscriptionClientScopedSubscription | undefined>;
    public readonly clientScopedSubscriptionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly deadLetteringOnFilterEvaluationError!: pulumi.Output<boolean | undefined>;
    public readonly deadLetteringOnMessageExpiration!: pulumi.Output<boolean | undefined>;
    public readonly defaultMessageTtl!: pulumi.Output<string | undefined>;
    public readonly forwardDeadLetteredMessagesTo!: pulumi.Output<string | undefined>;
    public readonly forwardTo!: pulumi.Output<string | undefined>;
    public readonly lockDuration!: pulumi.Output<string | undefined>;
    public readonly maxDeliveryCount!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly requiresSession!: pulumi.Output<boolean | undefined>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServicebusSubscriptionTimeouts | undefined>;
    public readonly topicId!: pulumi.Output<string>;

    /**
     * Create a ServicebusSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicebusSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicebusSubscriptionArgs | ServicebusSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicebusSubscriptionState | undefined;
            resourceInputs["autoDeleteOnIdle"] = state ? state.autoDeleteOnIdle : undefined;
            resourceInputs["batchedOperationsEnabled"] = state ? state.batchedOperationsEnabled : undefined;
            resourceInputs["clientScopedSubscription"] = state ? state.clientScopedSubscription : undefined;
            resourceInputs["clientScopedSubscriptionEnabled"] = state ? state.clientScopedSubscriptionEnabled : undefined;
            resourceInputs["deadLetteringOnFilterEvaluationError"] = state ? state.deadLetteringOnFilterEvaluationError : undefined;
            resourceInputs["deadLetteringOnMessageExpiration"] = state ? state.deadLetteringOnMessageExpiration : undefined;
            resourceInputs["defaultMessageTtl"] = state ? state.defaultMessageTtl : undefined;
            resourceInputs["forwardDeadLetteredMessagesTo"] = state ? state.forwardDeadLetteredMessagesTo : undefined;
            resourceInputs["forwardTo"] = state ? state.forwardTo : undefined;
            resourceInputs["lockDuration"] = state ? state.lockDuration : undefined;
            resourceInputs["maxDeliveryCount"] = state ? state.maxDeliveryCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requiresSession"] = state ? state.requiresSession : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
        } else {
            const args = argsOrState as ServicebusSubscriptionArgs | undefined;
            if ((!args || args.maxDeliveryCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxDeliveryCount'");
            }
            if ((!args || args.topicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicId'");
            }
            resourceInputs["autoDeleteOnIdle"] = args ? args.autoDeleteOnIdle : undefined;
            resourceInputs["batchedOperationsEnabled"] = args ? args.batchedOperationsEnabled : undefined;
            resourceInputs["clientScopedSubscription"] = args ? args.clientScopedSubscription : undefined;
            resourceInputs["clientScopedSubscriptionEnabled"] = args ? args.clientScopedSubscriptionEnabled : undefined;
            resourceInputs["deadLetteringOnFilterEvaluationError"] = args ? args.deadLetteringOnFilterEvaluationError : undefined;
            resourceInputs["deadLetteringOnMessageExpiration"] = args ? args.deadLetteringOnMessageExpiration : undefined;
            resourceInputs["defaultMessageTtl"] = args ? args.defaultMessageTtl : undefined;
            resourceInputs["forwardDeadLetteredMessagesTo"] = args ? args.forwardDeadLetteredMessagesTo : undefined;
            resourceInputs["forwardTo"] = args ? args.forwardTo : undefined;
            resourceInputs["lockDuration"] = args ? args.lockDuration : undefined;
            resourceInputs["maxDeliveryCount"] = args ? args.maxDeliveryCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requiresSession"] = args ? args.requiresSession : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topicId"] = args ? args.topicId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicebusSubscription.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicebusSubscription resources.
 */
export interface ServicebusSubscriptionState {
    autoDeleteOnIdle?: pulumi.Input<string>;
    batchedOperationsEnabled?: pulumi.Input<boolean>;
    clientScopedSubscription?: pulumi.Input<inputs.ServicebusSubscriptionClientScopedSubscription>;
    clientScopedSubscriptionEnabled?: pulumi.Input<boolean>;
    deadLetteringOnFilterEvaluationError?: pulumi.Input<boolean>;
    deadLetteringOnMessageExpiration?: pulumi.Input<boolean>;
    defaultMessageTtl?: pulumi.Input<string>;
    forwardDeadLetteredMessagesTo?: pulumi.Input<string>;
    forwardTo?: pulumi.Input<string>;
    lockDuration?: pulumi.Input<string>;
    maxDeliveryCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    requiresSession?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServicebusSubscriptionTimeouts>;
    topicId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServicebusSubscription resource.
 */
export interface ServicebusSubscriptionArgs {
    autoDeleteOnIdle?: pulumi.Input<string>;
    batchedOperationsEnabled?: pulumi.Input<boolean>;
    clientScopedSubscription?: pulumi.Input<inputs.ServicebusSubscriptionClientScopedSubscription>;
    clientScopedSubscriptionEnabled?: pulumi.Input<boolean>;
    deadLetteringOnFilterEvaluationError?: pulumi.Input<boolean>;
    deadLetteringOnMessageExpiration?: pulumi.Input<boolean>;
    defaultMessageTtl?: pulumi.Input<string>;
    forwardDeadLetteredMessagesTo?: pulumi.Input<string>;
    forwardTo?: pulumi.Input<string>;
    lockDuration?: pulumi.Input<string>;
    maxDeliveryCount: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    requiresSession?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServicebusSubscriptionTimeouts>;
    topicId: pulumi.Input<string>;
}
