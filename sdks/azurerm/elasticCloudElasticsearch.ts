// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticCloudElasticsearch extends pulumi.CustomResource {
    /**
     * Get an existing ElasticCloudElasticsearch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticCloudElasticsearchState, opts?: pulumi.CustomResourceOptions): ElasticCloudElasticsearch {
        return new ElasticCloudElasticsearch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/elasticCloudElasticsearch:ElasticCloudElasticsearch';

    /**
     * Returns true if the given object is an instance of ElasticCloudElasticsearch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticCloudElasticsearch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticCloudElasticsearch.__pulumiType;
    }

    public /*out*/ readonly elasticCloudDeploymentId!: pulumi.Output<string>;
    public readonly elasticCloudEmailAddress!: pulumi.Output<string>;
    public /*out*/ readonly elasticCloudSsoDefaultUrl!: pulumi.Output<string>;
    public /*out*/ readonly elasticCloudUserId!: pulumi.Output<string>;
    public /*out*/ readonly elasticsearchServiceUrl!: pulumi.Output<string>;
    public /*out*/ readonly kibanaServiceUrl!: pulumi.Output<string>;
    public /*out*/ readonly kibanaSsoUri!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly logs!: pulumi.Output<outputs.ElasticCloudElasticsearchLogs | undefined>;
    public readonly monitoringEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ElasticCloudElasticsearchTimeouts | undefined>;

    /**
     * Create a ElasticCloudElasticsearch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticCloudElasticsearchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticCloudElasticsearchArgs | ElasticCloudElasticsearchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticCloudElasticsearchState | undefined;
            resourceInputs["elasticCloudDeploymentId"] = state ? state.elasticCloudDeploymentId : undefined;
            resourceInputs["elasticCloudEmailAddress"] = state ? state.elasticCloudEmailAddress : undefined;
            resourceInputs["elasticCloudSsoDefaultUrl"] = state ? state.elasticCloudSsoDefaultUrl : undefined;
            resourceInputs["elasticCloudUserId"] = state ? state.elasticCloudUserId : undefined;
            resourceInputs["elasticsearchServiceUrl"] = state ? state.elasticsearchServiceUrl : undefined;
            resourceInputs["kibanaServiceUrl"] = state ? state.kibanaServiceUrl : undefined;
            resourceInputs["kibanaSsoUri"] = state ? state.kibanaSsoUri : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logs"] = state ? state.logs : undefined;
            resourceInputs["monitoringEnabled"] = state ? state.monitoringEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ElasticCloudElasticsearchArgs | undefined;
            if ((!args || args.elasticCloudEmailAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'elasticCloudEmailAddress'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            resourceInputs["elasticCloudEmailAddress"] = args ? args.elasticCloudEmailAddress : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logs"] = args ? args.logs : undefined;
            resourceInputs["monitoringEnabled"] = args ? args.monitoringEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["elasticCloudDeploymentId"] = undefined /*out*/;
            resourceInputs["elasticCloudSsoDefaultUrl"] = undefined /*out*/;
            resourceInputs["elasticCloudUserId"] = undefined /*out*/;
            resourceInputs["elasticsearchServiceUrl"] = undefined /*out*/;
            resourceInputs["kibanaServiceUrl"] = undefined /*out*/;
            resourceInputs["kibanaSsoUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticCloudElasticsearch.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticCloudElasticsearch resources.
 */
export interface ElasticCloudElasticsearchState {
    elasticCloudDeploymentId?: pulumi.Input<string>;
    elasticCloudEmailAddress?: pulumi.Input<string>;
    elasticCloudSsoDefaultUrl?: pulumi.Input<string>;
    elasticCloudUserId?: pulumi.Input<string>;
    elasticsearchServiceUrl?: pulumi.Input<string>;
    kibanaServiceUrl?: pulumi.Input<string>;
    kibanaSsoUri?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    logs?: pulumi.Input<inputs.ElasticCloudElasticsearchLogs>;
    monitoringEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ElasticCloudElasticsearchTimeouts>;
}

/**
 * The set of arguments for constructing a ElasticCloudElasticsearch resource.
 */
export interface ElasticCloudElasticsearchArgs {
    elasticCloudEmailAddress: pulumi.Input<string>;
    location: pulumi.Input<string>;
    logs?: pulumi.Input<inputs.ElasticCloudElasticsearchLogs>;
    monitoringEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    skuName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ElasticCloudElasticsearchTimeouts>;
}
