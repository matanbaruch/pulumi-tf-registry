// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiManagementIdentityProviderAadb2c extends pulumi.CustomResource {
    /**
     * Get an existing ApiManagementIdentityProviderAadb2c resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiManagementIdentityProviderAadb2cState, opts?: pulumi.CustomResourceOptions): ApiManagementIdentityProviderAadb2c {
        return new ApiManagementIdentityProviderAadb2c(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/apiManagementIdentityProviderAadb2c:ApiManagementIdentityProviderAadb2c';

    /**
     * Returns true if the given object is an instance of ApiManagementIdentityProviderAadb2c.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiManagementIdentityProviderAadb2c {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiManagementIdentityProviderAadb2c.__pulumiType;
    }

    public readonly allowedTenant!: pulumi.Output<string>;
    public readonly apiManagementName!: pulumi.Output<string>;
    public readonly authority!: pulumi.Output<string>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly clientLibrary!: pulumi.Output<string | undefined>;
    public readonly clientSecret!: pulumi.Output<string>;
    public readonly passwordResetPolicy!: pulumi.Output<string | undefined>;
    public readonly profileEditingPolicy!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly signinPolicy!: pulumi.Output<string>;
    public readonly signinTenant!: pulumi.Output<string>;
    public readonly signupPolicy!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ApiManagementIdentityProviderAadb2cTimeouts | undefined>;

    /**
     * Create a ApiManagementIdentityProviderAadb2c resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiManagementIdentityProviderAadb2cArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiManagementIdentityProviderAadb2cArgs | ApiManagementIdentityProviderAadb2cState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiManagementIdentityProviderAadb2cState | undefined;
            resourceInputs["allowedTenant"] = state ? state.allowedTenant : undefined;
            resourceInputs["apiManagementName"] = state ? state.apiManagementName : undefined;
            resourceInputs["authority"] = state ? state.authority : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientLibrary"] = state ? state.clientLibrary : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["passwordResetPolicy"] = state ? state.passwordResetPolicy : undefined;
            resourceInputs["profileEditingPolicy"] = state ? state.profileEditingPolicy : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["signinPolicy"] = state ? state.signinPolicy : undefined;
            resourceInputs["signinTenant"] = state ? state.signinTenant : undefined;
            resourceInputs["signupPolicy"] = state ? state.signupPolicy : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ApiManagementIdentityProviderAadb2cArgs | undefined;
            if ((!args || args.allowedTenant === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowedTenant'");
            }
            if ((!args || args.apiManagementName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if ((!args || args.authority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authority'");
            }
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.signinPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signinPolicy'");
            }
            if ((!args || args.signinTenant === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signinTenant'");
            }
            if ((!args || args.signupPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signupPolicy'");
            }
            resourceInputs["allowedTenant"] = args ? args.allowedTenant : undefined;
            resourceInputs["apiManagementName"] = args ? args.apiManagementName : undefined;
            resourceInputs["authority"] = args ? args.authority : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientLibrary"] = args ? args.clientLibrary : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["passwordResetPolicy"] = args ? args.passwordResetPolicy : undefined;
            resourceInputs["profileEditingPolicy"] = args ? args.profileEditingPolicy : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["signinPolicy"] = args ? args.signinPolicy : undefined;
            resourceInputs["signinTenant"] = args ? args.signinTenant : undefined;
            resourceInputs["signupPolicy"] = args ? args.signupPolicy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApiManagementIdentityProviderAadb2c.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiManagementIdentityProviderAadb2c resources.
 */
export interface ApiManagementIdentityProviderAadb2cState {
    allowedTenant?: pulumi.Input<string>;
    apiManagementName?: pulumi.Input<string>;
    authority?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    clientLibrary?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    passwordResetPolicy?: pulumi.Input<string>;
    profileEditingPolicy?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    signinPolicy?: pulumi.Input<string>;
    signinTenant?: pulumi.Input<string>;
    signupPolicy?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiManagementIdentityProviderAadb2cTimeouts>;
}

/**
 * The set of arguments for constructing a ApiManagementIdentityProviderAadb2c resource.
 */
export interface ApiManagementIdentityProviderAadb2cArgs {
    allowedTenant: pulumi.Input<string>;
    apiManagementName: pulumi.Input<string>;
    authority: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    clientLibrary?: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    passwordResetPolicy?: pulumi.Input<string>;
    profileEditingPolicy?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    signinPolicy: pulumi.Input<string>;
    signinTenant: pulumi.Input<string>;
    signupPolicy: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiManagementIdentityProviderAadb2cTimeouts>;
}
