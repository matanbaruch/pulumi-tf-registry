// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MssqlVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing MssqlVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MssqlVirtualMachineState, opts?: pulumi.CustomResourceOptions): MssqlVirtualMachine {
        return new MssqlVirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/mssqlVirtualMachine:MssqlVirtualMachine';

    /**
     * Returns true if the given object is an instance of MssqlVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MssqlVirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MssqlVirtualMachine.__pulumiType;
    }

    public readonly assessment!: pulumi.Output<outputs.MssqlVirtualMachineAssessment | undefined>;
    public readonly autoBackup!: pulumi.Output<outputs.MssqlVirtualMachineAutoBackup | undefined>;
    public readonly autoPatching!: pulumi.Output<outputs.MssqlVirtualMachineAutoPatching | undefined>;
    public readonly keyVaultCredential!: pulumi.Output<outputs.MssqlVirtualMachineKeyVaultCredential | undefined>;
    public readonly rServicesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly sqlConnectivityPort!: pulumi.Output<number | undefined>;
    public readonly sqlConnectivityType!: pulumi.Output<string | undefined>;
    public readonly sqlConnectivityUpdatePassword!: pulumi.Output<string | undefined>;
    public readonly sqlConnectivityUpdateUsername!: pulumi.Output<string | undefined>;
    public readonly sqlInstance!: pulumi.Output<outputs.MssqlVirtualMachineSqlInstance | undefined>;
    public readonly sqlLicenseType!: pulumi.Output<string | undefined>;
    public readonly sqlVirtualMachineGroupId!: pulumi.Output<string | undefined>;
    public readonly storageConfiguration!: pulumi.Output<outputs.MssqlVirtualMachineStorageConfiguration | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MssqlVirtualMachineTimeouts | undefined>;
    public readonly virtualMachineId!: pulumi.Output<string>;
    public readonly wsfcDomainCredential!: pulumi.Output<outputs.MssqlVirtualMachineWsfcDomainCredential | undefined>;

    /**
     * Create a MssqlVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MssqlVirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MssqlVirtualMachineArgs | MssqlVirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MssqlVirtualMachineState | undefined;
            resourceInputs["assessment"] = state ? state.assessment : undefined;
            resourceInputs["autoBackup"] = state ? state.autoBackup : undefined;
            resourceInputs["autoPatching"] = state ? state.autoPatching : undefined;
            resourceInputs["keyVaultCredential"] = state ? state.keyVaultCredential : undefined;
            resourceInputs["rServicesEnabled"] = state ? state.rServicesEnabled : undefined;
            resourceInputs["sqlConnectivityPort"] = state ? state.sqlConnectivityPort : undefined;
            resourceInputs["sqlConnectivityType"] = state ? state.sqlConnectivityType : undefined;
            resourceInputs["sqlConnectivityUpdatePassword"] = state ? state.sqlConnectivityUpdatePassword : undefined;
            resourceInputs["sqlConnectivityUpdateUsername"] = state ? state.sqlConnectivityUpdateUsername : undefined;
            resourceInputs["sqlInstance"] = state ? state.sqlInstance : undefined;
            resourceInputs["sqlLicenseType"] = state ? state.sqlLicenseType : undefined;
            resourceInputs["sqlVirtualMachineGroupId"] = state ? state.sqlVirtualMachineGroupId : undefined;
            resourceInputs["storageConfiguration"] = state ? state.storageConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
            resourceInputs["wsfcDomainCredential"] = state ? state.wsfcDomainCredential : undefined;
        } else {
            const args = argsOrState as MssqlVirtualMachineArgs | undefined;
            if ((!args || args.virtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["assessment"] = args ? args.assessment : undefined;
            resourceInputs["autoBackup"] = args ? args.autoBackup : undefined;
            resourceInputs["autoPatching"] = args ? args.autoPatching : undefined;
            resourceInputs["keyVaultCredential"] = args ? args.keyVaultCredential : undefined;
            resourceInputs["rServicesEnabled"] = args ? args.rServicesEnabled : undefined;
            resourceInputs["sqlConnectivityPort"] = args ? args.sqlConnectivityPort : undefined;
            resourceInputs["sqlConnectivityType"] = args ? args.sqlConnectivityType : undefined;
            resourceInputs["sqlConnectivityUpdatePassword"] = args?.sqlConnectivityUpdatePassword ? pulumi.secret(args.sqlConnectivityUpdatePassword) : undefined;
            resourceInputs["sqlConnectivityUpdateUsername"] = args?.sqlConnectivityUpdateUsername ? pulumi.secret(args.sqlConnectivityUpdateUsername) : undefined;
            resourceInputs["sqlInstance"] = args ? args.sqlInstance : undefined;
            resourceInputs["sqlLicenseType"] = args ? args.sqlLicenseType : undefined;
            resourceInputs["sqlVirtualMachineGroupId"] = args ? args.sqlVirtualMachineGroupId : undefined;
            resourceInputs["storageConfiguration"] = args ? args.storageConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
            resourceInputs["wsfcDomainCredential"] = args ? args.wsfcDomainCredential : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sqlConnectivityUpdatePassword", "sqlConnectivityUpdateUsername"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MssqlVirtualMachine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MssqlVirtualMachine resources.
 */
export interface MssqlVirtualMachineState {
    assessment?: pulumi.Input<inputs.MssqlVirtualMachineAssessment>;
    autoBackup?: pulumi.Input<inputs.MssqlVirtualMachineAutoBackup>;
    autoPatching?: pulumi.Input<inputs.MssqlVirtualMachineAutoPatching>;
    keyVaultCredential?: pulumi.Input<inputs.MssqlVirtualMachineKeyVaultCredential>;
    rServicesEnabled?: pulumi.Input<boolean>;
    sqlConnectivityPort?: pulumi.Input<number>;
    sqlConnectivityType?: pulumi.Input<string>;
    sqlConnectivityUpdatePassword?: pulumi.Input<string>;
    sqlConnectivityUpdateUsername?: pulumi.Input<string>;
    sqlInstance?: pulumi.Input<inputs.MssqlVirtualMachineSqlInstance>;
    sqlLicenseType?: pulumi.Input<string>;
    sqlVirtualMachineGroupId?: pulumi.Input<string>;
    storageConfiguration?: pulumi.Input<inputs.MssqlVirtualMachineStorageConfiguration>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MssqlVirtualMachineTimeouts>;
    virtualMachineId?: pulumi.Input<string>;
    wsfcDomainCredential?: pulumi.Input<inputs.MssqlVirtualMachineWsfcDomainCredential>;
}

/**
 * The set of arguments for constructing a MssqlVirtualMachine resource.
 */
export interface MssqlVirtualMachineArgs {
    assessment?: pulumi.Input<inputs.MssqlVirtualMachineAssessment>;
    autoBackup?: pulumi.Input<inputs.MssqlVirtualMachineAutoBackup>;
    autoPatching?: pulumi.Input<inputs.MssqlVirtualMachineAutoPatching>;
    keyVaultCredential?: pulumi.Input<inputs.MssqlVirtualMachineKeyVaultCredential>;
    rServicesEnabled?: pulumi.Input<boolean>;
    sqlConnectivityPort?: pulumi.Input<number>;
    sqlConnectivityType?: pulumi.Input<string>;
    sqlConnectivityUpdatePassword?: pulumi.Input<string>;
    sqlConnectivityUpdateUsername?: pulumi.Input<string>;
    sqlInstance?: pulumi.Input<inputs.MssqlVirtualMachineSqlInstance>;
    sqlLicenseType?: pulumi.Input<string>;
    sqlVirtualMachineGroupId?: pulumi.Input<string>;
    storageConfiguration?: pulumi.Input<inputs.MssqlVirtualMachineStorageConfiguration>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MssqlVirtualMachineTimeouts>;
    virtualMachineId: pulumi.Input<string>;
    wsfcDomainCredential?: pulumi.Input<inputs.MssqlVirtualMachineWsfcDomainCredential>;
}
