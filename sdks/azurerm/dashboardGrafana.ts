// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DashboardGrafana extends pulumi.CustomResource {
    /**
     * Get an existing DashboardGrafana resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardGrafanaState, opts?: pulumi.CustomResourceOptions): DashboardGrafana {
        return new DashboardGrafana(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/dashboardGrafana:DashboardGrafana';

    /**
     * Returns true if the given object is an instance of DashboardGrafana.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DashboardGrafana {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DashboardGrafana.__pulumiType;
    }

    public readonly apiKeyEnabled!: pulumi.Output<boolean | undefined>;
    public readonly autoGeneratedDomainNameLabelScope!: pulumi.Output<string | undefined>;
    public readonly azureMonitorWorkspaceIntegrations!: pulumi.Output<outputs.DashboardGrafanaAzureMonitorWorkspaceIntegration[] | undefined>;
    public readonly deterministicOutboundIpEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly grafanaMajorVersion!: pulumi.Output<string>;
    public /*out*/ readonly grafanaVersion!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.DashboardGrafanaIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly outboundIps!: pulumi.Output<string[]>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly sku!: pulumi.Output<string | undefined>;
    public readonly smtp!: pulumi.Output<outputs.DashboardGrafanaSmtp | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DashboardGrafanaTimeouts | undefined>;
    public readonly zoneRedundancyEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DashboardGrafana resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardGrafanaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardGrafanaArgs | DashboardGrafanaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardGrafanaState | undefined;
            resourceInputs["apiKeyEnabled"] = state ? state.apiKeyEnabled : undefined;
            resourceInputs["autoGeneratedDomainNameLabelScope"] = state ? state.autoGeneratedDomainNameLabelScope : undefined;
            resourceInputs["azureMonitorWorkspaceIntegrations"] = state ? state.azureMonitorWorkspaceIntegrations : undefined;
            resourceInputs["deterministicOutboundIpEnabled"] = state ? state.deterministicOutboundIpEnabled : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["grafanaMajorVersion"] = state ? state.grafanaMajorVersion : undefined;
            resourceInputs["grafanaVersion"] = state ? state.grafanaVersion : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outboundIps"] = state ? state.outboundIps : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["smtp"] = state ? state.smtp : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zoneRedundancyEnabled"] = state ? state.zoneRedundancyEnabled : undefined;
        } else {
            const args = argsOrState as DashboardGrafanaArgs | undefined;
            if ((!args || args.grafanaMajorVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grafanaMajorVersion'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["apiKeyEnabled"] = args ? args.apiKeyEnabled : undefined;
            resourceInputs["autoGeneratedDomainNameLabelScope"] = args ? args.autoGeneratedDomainNameLabelScope : undefined;
            resourceInputs["azureMonitorWorkspaceIntegrations"] = args ? args.azureMonitorWorkspaceIntegrations : undefined;
            resourceInputs["deterministicOutboundIpEnabled"] = args ? args.deterministicOutboundIpEnabled : undefined;
            resourceInputs["grafanaMajorVersion"] = args ? args.grafanaMajorVersion : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["smtp"] = args ? args.smtp : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zoneRedundancyEnabled"] = args ? args.zoneRedundancyEnabled : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["grafanaVersion"] = undefined /*out*/;
            resourceInputs["outboundIps"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DashboardGrafana.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DashboardGrafana resources.
 */
export interface DashboardGrafanaState {
    apiKeyEnabled?: pulumi.Input<boolean>;
    autoGeneratedDomainNameLabelScope?: pulumi.Input<string>;
    azureMonitorWorkspaceIntegrations?: pulumi.Input<pulumi.Input<inputs.DashboardGrafanaAzureMonitorWorkspaceIntegration>[]>;
    deterministicOutboundIpEnabled?: pulumi.Input<boolean>;
    endpoint?: pulumi.Input<string>;
    grafanaMajorVersion?: pulumi.Input<string>;
    grafanaVersion?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.DashboardGrafanaIdentity>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    outboundIps?: pulumi.Input<pulumi.Input<string>[]>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    smtp?: pulumi.Input<inputs.DashboardGrafanaSmtp>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DashboardGrafanaTimeouts>;
    zoneRedundancyEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DashboardGrafana resource.
 */
export interface DashboardGrafanaArgs {
    apiKeyEnabled?: pulumi.Input<boolean>;
    autoGeneratedDomainNameLabelScope?: pulumi.Input<string>;
    azureMonitorWorkspaceIntegrations?: pulumi.Input<pulumi.Input<inputs.DashboardGrafanaAzureMonitorWorkspaceIntegration>[]>;
    deterministicOutboundIpEnabled?: pulumi.Input<boolean>;
    grafanaMajorVersion: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.DashboardGrafanaIdentity>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    smtp?: pulumi.Input<inputs.DashboardGrafanaSmtp>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DashboardGrafanaTimeouts>;
    zoneRedundancyEnabled?: pulumi.Input<boolean>;
}
