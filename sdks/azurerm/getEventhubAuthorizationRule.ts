// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEventhubAuthorizationRule(args: GetEventhubAuthorizationRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetEventhubAuthorizationRuleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getEventhubAuthorizationRule:getEventhubAuthorizationRule", {
        "eventhubName": args.eventhubName,
        "id": args.id,
        "listen": args.listen,
        "manage": args.manage,
        "name": args.name,
        "namespaceName": args.namespaceName,
        "resourceGroupName": args.resourceGroupName,
        "send": args.send,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEventhubAuthorizationRule.
 */
export interface GetEventhubAuthorizationRuleArgs {
    eventhubName: string;
    id?: string;
    listen?: boolean;
    manage?: boolean;
    name: string;
    namespaceName: string;
    resourceGroupName: string;
    send?: boolean;
    timeouts?: inputs.GetEventhubAuthorizationRuleTimeouts;
}

/**
 * A collection of values returned by getEventhubAuthorizationRule.
 */
export interface GetEventhubAuthorizationRuleResult {
    readonly eventhubName: string;
    readonly id: string;
    readonly listen?: boolean;
    readonly manage?: boolean;
    readonly name: string;
    readonly namespaceName: string;
    readonly primaryConnectionString: string;
    readonly primaryConnectionStringAlias: string;
    readonly primaryKey: string;
    readonly resourceGroupName: string;
    readonly secondaryConnectionString: string;
    readonly secondaryConnectionStringAlias: string;
    readonly secondaryKey: string;
    readonly send?: boolean;
    readonly timeouts?: outputs.GetEventhubAuthorizationRuleTimeouts;
}
export function getEventhubAuthorizationRuleOutput(args: GetEventhubAuthorizationRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventhubAuthorizationRuleResult> {
    return pulumi.output(args).apply((a: any) => getEventhubAuthorizationRule(a, opts))
}

/**
 * A collection of arguments for invoking getEventhubAuthorizationRule.
 */
export interface GetEventhubAuthorizationRuleOutputArgs {
    eventhubName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    listen?: pulumi.Input<boolean>;
    manage?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    namespaceName: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    send?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.GetEventhubAuthorizationRuleTimeoutsArgs>;
}
