// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualMachineImplicitDataDiskFromSource extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachineImplicitDataDiskFromSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineImplicitDataDiskFromSourceState, opts?: pulumi.CustomResourceOptions): VirtualMachineImplicitDataDiskFromSource {
        return new VirtualMachineImplicitDataDiskFromSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/virtualMachineImplicitDataDiskFromSource:VirtualMachineImplicitDataDiskFromSource';

    /**
     * Returns true if the given object is an instance of VirtualMachineImplicitDataDiskFromSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachineImplicitDataDiskFromSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachineImplicitDataDiskFromSource.__pulumiType;
    }

    public readonly caching!: pulumi.Output<string | undefined>;
    public readonly createOption!: pulumi.Output<string>;
    public readonly diskSizeGb!: pulumi.Output<number>;
    public readonly lun!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly sourceResourceId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualMachineImplicitDataDiskFromSourceTimeouts | undefined>;
    public readonly virtualMachineId!: pulumi.Output<string>;
    public readonly writeAcceleratorEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a VirtualMachineImplicitDataDiskFromSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineImplicitDataDiskFromSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineImplicitDataDiskFromSourceArgs | VirtualMachineImplicitDataDiskFromSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineImplicitDataDiskFromSourceState | undefined;
            resourceInputs["caching"] = state ? state.caching : undefined;
            resourceInputs["createOption"] = state ? state.createOption : undefined;
            resourceInputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            resourceInputs["lun"] = state ? state.lun : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceResourceId"] = state ? state.sourceResourceId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
            resourceInputs["writeAcceleratorEnabled"] = state ? state.writeAcceleratorEnabled : undefined;
        } else {
            const args = argsOrState as VirtualMachineImplicitDataDiskFromSourceArgs | undefined;
            if ((!args || args.createOption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'createOption'");
            }
            if ((!args || args.diskSizeGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskSizeGb'");
            }
            if ((!args || args.lun === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lun'");
            }
            if ((!args || args.sourceResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceResourceId'");
            }
            if ((!args || args.virtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["caching"] = args ? args.caching : undefined;
            resourceInputs["createOption"] = args ? args.createOption : undefined;
            resourceInputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            resourceInputs["lun"] = args ? args.lun : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceResourceId"] = args ? args.sourceResourceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
            resourceInputs["writeAcceleratorEnabled"] = args ? args.writeAcceleratorEnabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachineImplicitDataDiskFromSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachineImplicitDataDiskFromSource resources.
 */
export interface VirtualMachineImplicitDataDiskFromSourceState {
    caching?: pulumi.Input<string>;
    createOption?: pulumi.Input<string>;
    diskSizeGb?: pulumi.Input<number>;
    lun?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    sourceResourceId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VirtualMachineImplicitDataDiskFromSourceTimeouts>;
    virtualMachineId?: pulumi.Input<string>;
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a VirtualMachineImplicitDataDiskFromSource resource.
 */
export interface VirtualMachineImplicitDataDiskFromSourceArgs {
    caching?: pulumi.Input<string>;
    createOption: pulumi.Input<string>;
    diskSizeGb: pulumi.Input<number>;
    lun: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    sourceResourceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VirtualMachineImplicitDataDiskFromSourceTimeouts>;
    virtualMachineId: pulumi.Input<string>;
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}
