// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SubscriptionCostManagementExport extends pulumi.CustomResource {
    /**
     * Get an existing SubscriptionCostManagementExport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubscriptionCostManagementExportState, opts?: pulumi.CustomResourceOptions): SubscriptionCostManagementExport {
        return new SubscriptionCostManagementExport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/subscriptionCostManagementExport:SubscriptionCostManagementExport';

    /**
     * Returns true if the given object is an instance of SubscriptionCostManagementExport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubscriptionCostManagementExport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubscriptionCostManagementExport.__pulumiType;
    }

    public readonly active!: pulumi.Output<boolean | undefined>;
    public readonly exportDataOptions!: pulumi.Output<outputs.SubscriptionCostManagementExportExportDataOptions>;
    public readonly exportDataStorageLocation!: pulumi.Output<outputs.SubscriptionCostManagementExportExportDataStorageLocation>;
    public readonly name!: pulumi.Output<string>;
    public readonly recurrencePeriodEndDate!: pulumi.Output<string>;
    public readonly recurrencePeriodStartDate!: pulumi.Output<string>;
    public readonly recurrenceType!: pulumi.Output<string>;
    public readonly subscriptionId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SubscriptionCostManagementExportTimeouts | undefined>;

    /**
     * Create a SubscriptionCostManagementExport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionCostManagementExportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubscriptionCostManagementExportArgs | SubscriptionCostManagementExportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubscriptionCostManagementExportState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["exportDataOptions"] = state ? state.exportDataOptions : undefined;
            resourceInputs["exportDataStorageLocation"] = state ? state.exportDataStorageLocation : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recurrencePeriodEndDate"] = state ? state.recurrencePeriodEndDate : undefined;
            resourceInputs["recurrencePeriodStartDate"] = state ? state.recurrencePeriodStartDate : undefined;
            resourceInputs["recurrenceType"] = state ? state.recurrenceType : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SubscriptionCostManagementExportArgs | undefined;
            if ((!args || args.exportDataOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exportDataOptions'");
            }
            if ((!args || args.exportDataStorageLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exportDataStorageLocation'");
            }
            if ((!args || args.recurrencePeriodEndDate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recurrencePeriodEndDate'");
            }
            if ((!args || args.recurrencePeriodStartDate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recurrencePeriodStartDate'");
            }
            if ((!args || args.recurrenceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recurrenceType'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["exportDataOptions"] = args ? args.exportDataOptions : undefined;
            resourceInputs["exportDataStorageLocation"] = args ? args.exportDataStorageLocation : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recurrencePeriodEndDate"] = args ? args.recurrencePeriodEndDate : undefined;
            resourceInputs["recurrencePeriodStartDate"] = args ? args.recurrencePeriodStartDate : undefined;
            resourceInputs["recurrenceType"] = args ? args.recurrenceType : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubscriptionCostManagementExport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SubscriptionCostManagementExport resources.
 */
export interface SubscriptionCostManagementExportState {
    active?: pulumi.Input<boolean>;
    exportDataOptions?: pulumi.Input<inputs.SubscriptionCostManagementExportExportDataOptions>;
    exportDataStorageLocation?: pulumi.Input<inputs.SubscriptionCostManagementExportExportDataStorageLocation>;
    name?: pulumi.Input<string>;
    recurrencePeriodEndDate?: pulumi.Input<string>;
    recurrencePeriodStartDate?: pulumi.Input<string>;
    recurrenceType?: pulumi.Input<string>;
    subscriptionId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SubscriptionCostManagementExportTimeouts>;
}

/**
 * The set of arguments for constructing a SubscriptionCostManagementExport resource.
 */
export interface SubscriptionCostManagementExportArgs {
    active?: pulumi.Input<boolean>;
    exportDataOptions: pulumi.Input<inputs.SubscriptionCostManagementExportExportDataOptions>;
    exportDataStorageLocation: pulumi.Input<inputs.SubscriptionCostManagementExportExportDataStorageLocation>;
    name?: pulumi.Input<string>;
    recurrencePeriodEndDate: pulumi.Input<string>;
    recurrencePeriodStartDate: pulumi.Input<string>;
    recurrenceType: pulumi.Input<string>;
    subscriptionId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SubscriptionCostManagementExportTimeouts>;
}
