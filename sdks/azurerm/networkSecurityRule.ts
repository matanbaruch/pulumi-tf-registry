// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkSecurityRule extends pulumi.CustomResource {
    /**
     * Get an existing NetworkSecurityRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkSecurityRuleState, opts?: pulumi.CustomResourceOptions): NetworkSecurityRule {
        return new NetworkSecurityRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/networkSecurityRule:NetworkSecurityRule';

    /**
     * Returns true if the given object is an instance of NetworkSecurityRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkSecurityRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkSecurityRule.__pulumiType;
    }

    public readonly access!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destinationAddressPrefix!: pulumi.Output<string | undefined>;
    public readonly destinationAddressPrefixes!: pulumi.Output<string[] | undefined>;
    public readonly destinationApplicationSecurityGroupIds!: pulumi.Output<string[] | undefined>;
    public readonly destinationPortRange!: pulumi.Output<string | undefined>;
    public readonly destinationPortRanges!: pulumi.Output<string[] | undefined>;
    public readonly direction!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkSecurityGroupName!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly sourceAddressPrefix!: pulumi.Output<string | undefined>;
    public readonly sourceAddressPrefixes!: pulumi.Output<string[] | undefined>;
    public readonly sourceApplicationSecurityGroupIds!: pulumi.Output<string[] | undefined>;
    public readonly sourcePortRange!: pulumi.Output<string | undefined>;
    public readonly sourcePortRanges!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkSecurityRuleTimeouts | undefined>;

    /**
     * Create a NetworkSecurityRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkSecurityRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkSecurityRuleArgs | NetworkSecurityRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkSecurityRuleState | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationAddressPrefix"] = state ? state.destinationAddressPrefix : undefined;
            resourceInputs["destinationAddressPrefixes"] = state ? state.destinationAddressPrefixes : undefined;
            resourceInputs["destinationApplicationSecurityGroupIds"] = state ? state.destinationApplicationSecurityGroupIds : undefined;
            resourceInputs["destinationPortRange"] = state ? state.destinationPortRange : undefined;
            resourceInputs["destinationPortRanges"] = state ? state.destinationPortRanges : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkSecurityGroupName"] = state ? state.networkSecurityGroupName : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sourceAddressPrefix"] = state ? state.sourceAddressPrefix : undefined;
            resourceInputs["sourceAddressPrefixes"] = state ? state.sourceAddressPrefixes : undefined;
            resourceInputs["sourceApplicationSecurityGroupIds"] = state ? state.sourceApplicationSecurityGroupIds : undefined;
            resourceInputs["sourcePortRange"] = state ? state.sourcePortRange : undefined;
            resourceInputs["sourcePortRanges"] = state ? state.sourcePortRanges : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkSecurityRuleArgs | undefined;
            if ((!args || args.access === undefined) && !opts.urn) {
                throw new Error("Missing required property 'access'");
            }
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.networkSecurityGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkSecurityGroupName'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["access"] = args ? args.access : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationAddressPrefix"] = args ? args.destinationAddressPrefix : undefined;
            resourceInputs["destinationAddressPrefixes"] = args ? args.destinationAddressPrefixes : undefined;
            resourceInputs["destinationApplicationSecurityGroupIds"] = args ? args.destinationApplicationSecurityGroupIds : undefined;
            resourceInputs["destinationPortRange"] = args ? args.destinationPortRange : undefined;
            resourceInputs["destinationPortRanges"] = args ? args.destinationPortRanges : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkSecurityGroupName"] = args ? args.networkSecurityGroupName : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sourceAddressPrefix"] = args ? args.sourceAddressPrefix : undefined;
            resourceInputs["sourceAddressPrefixes"] = args ? args.sourceAddressPrefixes : undefined;
            resourceInputs["sourceApplicationSecurityGroupIds"] = args ? args.sourceApplicationSecurityGroupIds : undefined;
            resourceInputs["sourcePortRange"] = args ? args.sourcePortRange : undefined;
            resourceInputs["sourcePortRanges"] = args ? args.sourcePortRanges : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkSecurityRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkSecurityRule resources.
 */
export interface NetworkSecurityRuleState {
    access?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationAddressPrefix?: pulumi.Input<string>;
    destinationAddressPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    destinationApplicationSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    destinationPortRange?: pulumi.Input<string>;
    destinationPortRanges?: pulumi.Input<pulumi.Input<string>[]>;
    direction?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkSecurityGroupName?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    sourceAddressPrefix?: pulumi.Input<string>;
    sourceAddressPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    sourceApplicationSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourcePortRange?: pulumi.Input<string>;
    sourcePortRanges?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.NetworkSecurityRuleTimeouts>;
}

/**
 * The set of arguments for constructing a NetworkSecurityRule resource.
 */
export interface NetworkSecurityRuleArgs {
    access: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationAddressPrefix?: pulumi.Input<string>;
    destinationAddressPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    destinationApplicationSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    destinationPortRange?: pulumi.Input<string>;
    destinationPortRanges?: pulumi.Input<pulumi.Input<string>[]>;
    direction: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkSecurityGroupName: pulumi.Input<string>;
    priority: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    sourceAddressPrefix?: pulumi.Input<string>;
    sourceAddressPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    sourceApplicationSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourcePortRange?: pulumi.Input<string>;
    sourcePortRanges?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.NetworkSecurityRuleTimeouts>;
}
