// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FirewallPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallPolicyState, opts?: pulumi.CustomResourceOptions): FirewallPolicy {
        return new FirewallPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/firewallPolicy:FirewallPolicy';

    /**
     * Returns true if the given object is an instance of FirewallPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallPolicy.__pulumiType;
    }

    public readonly autoLearnPrivateRangesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly basePolicyId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly childPolicies!: pulumi.Output<string[]>;
    public readonly dns!: pulumi.Output<outputs.FirewallPolicyDns | undefined>;
    public readonly explicitProxy!: pulumi.Output<outputs.FirewallPolicyExplicitProxy | undefined>;
    public /*out*/ readonly firewalls!: pulumi.Output<string[]>;
    public readonly identity!: pulumi.Output<outputs.FirewallPolicyIdentity | undefined>;
    public readonly insights!: pulumi.Output<outputs.FirewallPolicyInsights | undefined>;
    public readonly intrusionDetection!: pulumi.Output<outputs.FirewallPolicyIntrusionDetection | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly privateIpRanges!: pulumi.Output<string[] | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly ruleCollectionGroups!: pulumi.Output<string[]>;
    public readonly sku!: pulumi.Output<string | undefined>;
    public readonly sqlRedirectAllowed!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly threatIntelligenceAllowlist!: pulumi.Output<outputs.FirewallPolicyThreatIntelligenceAllowlist | undefined>;
    public readonly threatIntelligenceMode!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.FirewallPolicyTimeouts | undefined>;
    public readonly tlsCertificate!: pulumi.Output<outputs.FirewallPolicyTlsCertificate | undefined>;

    /**
     * Create a FirewallPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallPolicyArgs | FirewallPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallPolicyState | undefined;
            resourceInputs["autoLearnPrivateRangesEnabled"] = state ? state.autoLearnPrivateRangesEnabled : undefined;
            resourceInputs["basePolicyId"] = state ? state.basePolicyId : undefined;
            resourceInputs["childPolicies"] = state ? state.childPolicies : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["explicitProxy"] = state ? state.explicitProxy : undefined;
            resourceInputs["firewalls"] = state ? state.firewalls : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["insights"] = state ? state.insights : undefined;
            resourceInputs["intrusionDetection"] = state ? state.intrusionDetection : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateIpRanges"] = state ? state.privateIpRanges : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["ruleCollectionGroups"] = state ? state.ruleCollectionGroups : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["sqlRedirectAllowed"] = state ? state.sqlRedirectAllowed : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threatIntelligenceAllowlist"] = state ? state.threatIntelligenceAllowlist : undefined;
            resourceInputs["threatIntelligenceMode"] = state ? state.threatIntelligenceMode : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tlsCertificate"] = state ? state.tlsCertificate : undefined;
        } else {
            const args = argsOrState as FirewallPolicyArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["autoLearnPrivateRangesEnabled"] = args ? args.autoLearnPrivateRangesEnabled : undefined;
            resourceInputs["basePolicyId"] = args ? args.basePolicyId : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["explicitProxy"] = args ? args.explicitProxy : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["insights"] = args ? args.insights : undefined;
            resourceInputs["intrusionDetection"] = args ? args.intrusionDetection : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateIpRanges"] = args ? args.privateIpRanges : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["sqlRedirectAllowed"] = args ? args.sqlRedirectAllowed : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threatIntelligenceAllowlist"] = args ? args.threatIntelligenceAllowlist : undefined;
            resourceInputs["threatIntelligenceMode"] = args ? args.threatIntelligenceMode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tlsCertificate"] = args ? args.tlsCertificate : undefined;
            resourceInputs["childPolicies"] = undefined /*out*/;
            resourceInputs["firewalls"] = undefined /*out*/;
            resourceInputs["ruleCollectionGroups"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallPolicy resources.
 */
export interface FirewallPolicyState {
    autoLearnPrivateRangesEnabled?: pulumi.Input<boolean>;
    basePolicyId?: pulumi.Input<string>;
    childPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    dns?: pulumi.Input<inputs.FirewallPolicyDns>;
    explicitProxy?: pulumi.Input<inputs.FirewallPolicyExplicitProxy>;
    firewalls?: pulumi.Input<pulumi.Input<string>[]>;
    identity?: pulumi.Input<inputs.FirewallPolicyIdentity>;
    insights?: pulumi.Input<inputs.FirewallPolicyInsights>;
    intrusionDetection?: pulumi.Input<inputs.FirewallPolicyIntrusionDetection>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupName?: pulumi.Input<string>;
    ruleCollectionGroups?: pulumi.Input<pulumi.Input<string>[]>;
    sku?: pulumi.Input<string>;
    sqlRedirectAllowed?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    threatIntelligenceAllowlist?: pulumi.Input<inputs.FirewallPolicyThreatIntelligenceAllowlist>;
    threatIntelligenceMode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirewallPolicyTimeouts>;
    tlsCertificate?: pulumi.Input<inputs.FirewallPolicyTlsCertificate>;
}

/**
 * The set of arguments for constructing a FirewallPolicy resource.
 */
export interface FirewallPolicyArgs {
    autoLearnPrivateRangesEnabled?: pulumi.Input<boolean>;
    basePolicyId?: pulumi.Input<string>;
    dns?: pulumi.Input<inputs.FirewallPolicyDns>;
    explicitProxy?: pulumi.Input<inputs.FirewallPolicyExplicitProxy>;
    identity?: pulumi.Input<inputs.FirewallPolicyIdentity>;
    insights?: pulumi.Input<inputs.FirewallPolicyInsights>;
    intrusionDetection?: pulumi.Input<inputs.FirewallPolicyIntrusionDetection>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupName: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    sqlRedirectAllowed?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    threatIntelligenceAllowlist?: pulumi.Input<inputs.FirewallPolicyThreatIntelligenceAllowlist>;
    threatIntelligenceMode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirewallPolicyTimeouts>;
    tlsCertificate?: pulumi.Input<inputs.FirewallPolicyTlsCertificate>;
}
