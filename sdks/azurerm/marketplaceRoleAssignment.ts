// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MarketplaceRoleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing MarketplaceRoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MarketplaceRoleAssignmentState, opts?: pulumi.CustomResourceOptions): MarketplaceRoleAssignment {
        return new MarketplaceRoleAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/marketplaceRoleAssignment:MarketplaceRoleAssignment';

    /**
     * Returns true if the given object is an instance of MarketplaceRoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MarketplaceRoleAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MarketplaceRoleAssignment.__pulumiType;
    }

    public readonly condition!: pulumi.Output<string | undefined>;
    public readonly conditionVersion!: pulumi.Output<string | undefined>;
    public readonly delegatedManagedIdentityResourceId!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly principalId!: pulumi.Output<string>;
    public /*out*/ readonly principalType!: pulumi.Output<string>;
    public readonly roleDefinitionId!: pulumi.Output<string | undefined>;
    public readonly roleDefinitionName!: pulumi.Output<string | undefined>;
    public readonly skipServicePrincipalAadCheck!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MarketplaceRoleAssignmentTimeouts | undefined>;

    /**
     * Create a MarketplaceRoleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MarketplaceRoleAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MarketplaceRoleAssignmentArgs | MarketplaceRoleAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MarketplaceRoleAssignmentState | undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["conditionVersion"] = state ? state.conditionVersion : undefined;
            resourceInputs["delegatedManagedIdentityResourceId"] = state ? state.delegatedManagedIdentityResourceId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["principalType"] = state ? state.principalType : undefined;
            resourceInputs["roleDefinitionId"] = state ? state.roleDefinitionId : undefined;
            resourceInputs["roleDefinitionName"] = state ? state.roleDefinitionName : undefined;
            resourceInputs["skipServicePrincipalAadCheck"] = state ? state.skipServicePrincipalAadCheck : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MarketplaceRoleAssignmentArgs | undefined;
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["conditionVersion"] = args ? args.conditionVersion : undefined;
            resourceInputs["delegatedManagedIdentityResourceId"] = args ? args.delegatedManagedIdentityResourceId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["roleDefinitionId"] = args ? args.roleDefinitionId : undefined;
            resourceInputs["roleDefinitionName"] = args ? args.roleDefinitionName : undefined;
            resourceInputs["skipServicePrincipalAadCheck"] = args ? args.skipServicePrincipalAadCheck : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["principalType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MarketplaceRoleAssignment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MarketplaceRoleAssignment resources.
 */
export interface MarketplaceRoleAssignmentState {
    condition?: pulumi.Input<string>;
    conditionVersion?: pulumi.Input<string>;
    delegatedManagedIdentityResourceId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    principalId?: pulumi.Input<string>;
    principalType?: pulumi.Input<string>;
    roleDefinitionId?: pulumi.Input<string>;
    roleDefinitionName?: pulumi.Input<string>;
    skipServicePrincipalAadCheck?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.MarketplaceRoleAssignmentTimeouts>;
}

/**
 * The set of arguments for constructing a MarketplaceRoleAssignment resource.
 */
export interface MarketplaceRoleAssignmentArgs {
    condition?: pulumi.Input<string>;
    conditionVersion?: pulumi.Input<string>;
    delegatedManagedIdentityResourceId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    principalId: pulumi.Input<string>;
    roleDefinitionId?: pulumi.Input<string>;
    roleDefinitionName?: pulumi.Input<string>;
    skipServicePrincipalAadCheck?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.MarketplaceRoleAssignmentTimeouts>;
}
