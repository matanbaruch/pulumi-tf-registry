// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ResourceDeploymentScriptAzurePowerShell extends pulumi.CustomResource {
    /**
     * Get an existing ResourceDeploymentScriptAzurePowerShell resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceDeploymentScriptAzurePowerShellState, opts?: pulumi.CustomResourceOptions): ResourceDeploymentScriptAzurePowerShell {
        return new ResourceDeploymentScriptAzurePowerShell(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/resourceDeploymentScriptAzurePowerShell:ResourceDeploymentScriptAzurePowerShell';

    /**
     * Returns true if the given object is an instance of ResourceDeploymentScriptAzurePowerShell.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceDeploymentScriptAzurePowerShell {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceDeploymentScriptAzurePowerShell.__pulumiType;
    }

    public readonly cleanupPreference!: pulumi.Output<string | undefined>;
    public readonly commandLine!: pulumi.Output<string | undefined>;
    public readonly container!: pulumi.Output<outputs.ResourceDeploymentScriptAzurePowerShellContainer | undefined>;
    public readonly environmentVariables!: pulumi.Output<outputs.ResourceDeploymentScriptAzurePowerShellEnvironmentVariable[] | undefined>;
    public readonly forceUpdateTag!: pulumi.Output<string | undefined>;
    public readonly identity!: pulumi.Output<outputs.ResourceDeploymentScriptAzurePowerShellIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly outputs!: pulumi.Output<string>;
    public readonly primaryScriptUri!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly retentionInterval!: pulumi.Output<string>;
    public readonly scriptContent!: pulumi.Output<string | undefined>;
    public readonly storageAccount!: pulumi.Output<outputs.ResourceDeploymentScriptAzurePowerShellStorageAccount | undefined>;
    public readonly supportingScriptUris!: pulumi.Output<string[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeout!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ResourceDeploymentScriptAzurePowerShellTimeouts | undefined>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a ResourceDeploymentScriptAzurePowerShell resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceDeploymentScriptAzurePowerShellArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceDeploymentScriptAzurePowerShellArgs | ResourceDeploymentScriptAzurePowerShellState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceDeploymentScriptAzurePowerShellState | undefined;
            resourceInputs["cleanupPreference"] = state ? state.cleanupPreference : undefined;
            resourceInputs["commandLine"] = state ? state.commandLine : undefined;
            resourceInputs["container"] = state ? state.container : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["forceUpdateTag"] = state ? state.forceUpdateTag : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["primaryScriptUri"] = state ? state.primaryScriptUri : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["retentionInterval"] = state ? state.retentionInterval : undefined;
            resourceInputs["scriptContent"] = state ? state.scriptContent : undefined;
            resourceInputs["storageAccount"] = state ? state.storageAccount : undefined;
            resourceInputs["supportingScriptUris"] = state ? state.supportingScriptUris : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ResourceDeploymentScriptAzurePowerShellArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.retentionInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionInterval'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["cleanupPreference"] = args ? args.cleanupPreference : undefined;
            resourceInputs["commandLine"] = args ? args.commandLine : undefined;
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["forceUpdateTag"] = args ? args.forceUpdateTag : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryScriptUri"] = args ? args.primaryScriptUri : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["retentionInterval"] = args ? args.retentionInterval : undefined;
            resourceInputs["scriptContent"] = args ? args.scriptContent : undefined;
            resourceInputs["storageAccount"] = args ? args.storageAccount : undefined;
            resourceInputs["supportingScriptUris"] = args ? args.supportingScriptUris : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["outputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceDeploymentScriptAzurePowerShell.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourceDeploymentScriptAzurePowerShell resources.
 */
export interface ResourceDeploymentScriptAzurePowerShellState {
    cleanupPreference?: pulumi.Input<string>;
    commandLine?: pulumi.Input<string>;
    container?: pulumi.Input<inputs.ResourceDeploymentScriptAzurePowerShellContainer>;
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.ResourceDeploymentScriptAzurePowerShellEnvironmentVariable>[]>;
    forceUpdateTag?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.ResourceDeploymentScriptAzurePowerShellIdentity>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    outputs?: pulumi.Input<string>;
    primaryScriptUri?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    retentionInterval?: pulumi.Input<string>;
    scriptContent?: pulumi.Input<string>;
    storageAccount?: pulumi.Input<inputs.ResourceDeploymentScriptAzurePowerShellStorageAccount>;
    supportingScriptUris?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ResourceDeploymentScriptAzurePowerShellTimeouts>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceDeploymentScriptAzurePowerShell resource.
 */
export interface ResourceDeploymentScriptAzurePowerShellArgs {
    cleanupPreference?: pulumi.Input<string>;
    commandLine?: pulumi.Input<string>;
    container?: pulumi.Input<inputs.ResourceDeploymentScriptAzurePowerShellContainer>;
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.ResourceDeploymentScriptAzurePowerShellEnvironmentVariable>[]>;
    forceUpdateTag?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.ResourceDeploymentScriptAzurePowerShellIdentity>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    primaryScriptUri?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    retentionInterval: pulumi.Input<string>;
    scriptContent?: pulumi.Input<string>;
    storageAccount?: pulumi.Input<inputs.ResourceDeploymentScriptAzurePowerShellStorageAccount>;
    supportingScriptUris?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ResourceDeploymentScriptAzurePowerShellTimeouts>;
    version: pulumi.Input<string>;
}
