// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppServiceCertificateOrder extends pulumi.CustomResource {
    /**
     * Get an existing AppServiceCertificateOrder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppServiceCertificateOrderState, opts?: pulumi.CustomResourceOptions): AppServiceCertificateOrder {
        return new AppServiceCertificateOrder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/appServiceCertificateOrder:AppServiceCertificateOrder';

    /**
     * Returns true if the given object is an instance of AppServiceCertificateOrder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppServiceCertificateOrder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppServiceCertificateOrder.__pulumiType;
    }

    public /*out*/ readonly appServiceCertificateNotRenewableReasons!: pulumi.Output<string[]>;
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly certificates!: pulumi.Output<outputs.AppServiceCertificateOrderCertificate[]>;
    public readonly csr!: pulumi.Output<string>;
    public readonly distinguishedName!: pulumi.Output<string>;
    public /*out*/ readonly domainVerificationToken!: pulumi.Output<string>;
    public /*out*/ readonly expirationTime!: pulumi.Output<string>;
    public /*out*/ readonly intermediateThumbprint!: pulumi.Output<string>;
    public /*out*/ readonly isPrivateKeyExternal!: pulumi.Output<boolean>;
    public readonly keySize!: pulumi.Output<number | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly productType!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly rootThumbprint!: pulumi.Output<string>;
    public /*out*/ readonly signedCertificateThumbprint!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AppServiceCertificateOrderTimeouts | undefined>;
    public readonly validityInYears!: pulumi.Output<number | undefined>;

    /**
     * Create a AppServiceCertificateOrder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppServiceCertificateOrderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppServiceCertificateOrderArgs | AppServiceCertificateOrderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppServiceCertificateOrderState | undefined;
            resourceInputs["appServiceCertificateNotRenewableReasons"] = state ? state.appServiceCertificateNotRenewableReasons : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["csr"] = state ? state.csr : undefined;
            resourceInputs["distinguishedName"] = state ? state.distinguishedName : undefined;
            resourceInputs["domainVerificationToken"] = state ? state.domainVerificationToken : undefined;
            resourceInputs["expirationTime"] = state ? state.expirationTime : undefined;
            resourceInputs["intermediateThumbprint"] = state ? state.intermediateThumbprint : undefined;
            resourceInputs["isPrivateKeyExternal"] = state ? state.isPrivateKeyExternal : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["productType"] = state ? state.productType : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["rootThumbprint"] = state ? state.rootThumbprint : undefined;
            resourceInputs["signedCertificateThumbprint"] = state ? state.signedCertificateThumbprint : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["validityInYears"] = state ? state.validityInYears : undefined;
        } else {
            const args = argsOrState as AppServiceCertificateOrderArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["csr"] = args ? args.csr : undefined;
            resourceInputs["distinguishedName"] = args ? args.distinguishedName : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["productType"] = args ? args.productType : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["validityInYears"] = args ? args.validityInYears : undefined;
            resourceInputs["appServiceCertificateNotRenewableReasons"] = undefined /*out*/;
            resourceInputs["certificates"] = undefined /*out*/;
            resourceInputs["domainVerificationToken"] = undefined /*out*/;
            resourceInputs["expirationTime"] = undefined /*out*/;
            resourceInputs["intermediateThumbprint"] = undefined /*out*/;
            resourceInputs["isPrivateKeyExternal"] = undefined /*out*/;
            resourceInputs["rootThumbprint"] = undefined /*out*/;
            resourceInputs["signedCertificateThumbprint"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppServiceCertificateOrder.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppServiceCertificateOrder resources.
 */
export interface AppServiceCertificateOrderState {
    appServiceCertificateNotRenewableReasons?: pulumi.Input<pulumi.Input<string>[]>;
    autoRenew?: pulumi.Input<boolean>;
    certificates?: pulumi.Input<pulumi.Input<inputs.AppServiceCertificateOrderCertificate>[]>;
    csr?: pulumi.Input<string>;
    distinguishedName?: pulumi.Input<string>;
    domainVerificationToken?: pulumi.Input<string>;
    expirationTime?: pulumi.Input<string>;
    intermediateThumbprint?: pulumi.Input<string>;
    isPrivateKeyExternal?: pulumi.Input<boolean>;
    keySize?: pulumi.Input<number>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    productType?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    rootThumbprint?: pulumi.Input<string>;
    signedCertificateThumbprint?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AppServiceCertificateOrderTimeouts>;
    validityInYears?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AppServiceCertificateOrder resource.
 */
export interface AppServiceCertificateOrderArgs {
    autoRenew?: pulumi.Input<boolean>;
    csr?: pulumi.Input<string>;
    distinguishedName?: pulumi.Input<string>;
    keySize?: pulumi.Input<number>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    productType?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AppServiceCertificateOrderTimeouts>;
    validityInYears?: pulumi.Input<number>;
}
