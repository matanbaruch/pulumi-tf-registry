// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KustoScript extends pulumi.CustomResource {
    /**
     * Get an existing KustoScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KustoScriptState, opts?: pulumi.CustomResourceOptions): KustoScript {
        return new KustoScript(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/kustoScript:KustoScript';

    /**
     * Returns true if the given object is an instance of KustoScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KustoScript {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KustoScript.__pulumiType;
    }

    public readonly continueOnErrorsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly databaseId!: pulumi.Output<string>;
    public readonly forceAnUpdateWhenValueChanged!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly sasToken!: pulumi.Output<string | undefined>;
    public readonly scriptContent!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.KustoScriptTimeouts | undefined>;
    public readonly url!: pulumi.Output<string | undefined>;

    /**
     * Create a KustoScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KustoScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KustoScriptArgs | KustoScriptState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KustoScriptState | undefined;
            resourceInputs["continueOnErrorsEnabled"] = state ? state.continueOnErrorsEnabled : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["forceAnUpdateWhenValueChanged"] = state ? state.forceAnUpdateWhenValueChanged : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sasToken"] = state ? state.sasToken : undefined;
            resourceInputs["scriptContent"] = state ? state.scriptContent : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as KustoScriptArgs | undefined;
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            resourceInputs["continueOnErrorsEnabled"] = args ? args.continueOnErrorsEnabled : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["forceAnUpdateWhenValueChanged"] = args ? args.forceAnUpdateWhenValueChanged : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sasToken"] = args?.sasToken ? pulumi.secret(args.sasToken) : undefined;
            resourceInputs["scriptContent"] = args?.scriptContent ? pulumi.secret(args.scriptContent) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sasToken", "scriptContent"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KustoScript.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KustoScript resources.
 */
export interface KustoScriptState {
    continueOnErrorsEnabled?: pulumi.Input<boolean>;
    databaseId?: pulumi.Input<string>;
    forceAnUpdateWhenValueChanged?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    sasToken?: pulumi.Input<string>;
    scriptContent?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KustoScriptTimeouts>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KustoScript resource.
 */
export interface KustoScriptArgs {
    continueOnErrorsEnabled?: pulumi.Input<boolean>;
    databaseId: pulumi.Input<string>;
    forceAnUpdateWhenValueChanged?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    sasToken?: pulumi.Input<string>;
    scriptContent?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KustoScriptTimeouts>;
    url?: pulumi.Input<string>;
}
