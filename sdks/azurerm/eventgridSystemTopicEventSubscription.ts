// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventgridSystemTopicEventSubscription extends pulumi.CustomResource {
    /**
     * Get an existing EventgridSystemTopicEventSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventgridSystemTopicEventSubscriptionState, opts?: pulumi.CustomResourceOptions): EventgridSystemTopicEventSubscription {
        return new EventgridSystemTopicEventSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/eventgridSystemTopicEventSubscription:EventgridSystemTopicEventSubscription';

    /**
     * Returns true if the given object is an instance of EventgridSystemTopicEventSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventgridSystemTopicEventSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventgridSystemTopicEventSubscription.__pulumiType;
    }

    public readonly advancedFilter!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionAdvancedFilter | undefined>;
    public readonly advancedFilteringOnArraysEnabled!: pulumi.Output<boolean | undefined>;
    public readonly azureFunctionEndpoint!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionAzureFunctionEndpoint | undefined>;
    public readonly deadLetterIdentity!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionDeadLetterIdentity | undefined>;
    public readonly deliveryIdentity!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionDeliveryIdentity | undefined>;
    public readonly deliveryProperties!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionDeliveryProperty[] | undefined>;
    public readonly eventDeliverySchema!: pulumi.Output<string | undefined>;
    public readonly eventhubEndpointId!: pulumi.Output<string>;
    public readonly expirationTimeUtc!: pulumi.Output<string | undefined>;
    public readonly hybridConnectionEndpointId!: pulumi.Output<string>;
    public readonly includedEventTypes!: pulumi.Output<string[]>;
    public readonly labels!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly retryPolicy!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionRetryPolicy | undefined>;
    public readonly serviceBusQueueEndpointId!: pulumi.Output<string | undefined>;
    public readonly serviceBusTopicEndpointId!: pulumi.Output<string | undefined>;
    public readonly storageBlobDeadLetterDestination!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionStorageBlobDeadLetterDestination | undefined>;
    public readonly storageQueueEndpoint!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionStorageQueueEndpoint | undefined>;
    public readonly subjectFilter!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionSubjectFilter | undefined>;
    public readonly systemTopic!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionTimeouts | undefined>;
    public readonly webhookEndpoint!: pulumi.Output<outputs.EventgridSystemTopicEventSubscriptionWebhookEndpoint | undefined>;

    /**
     * Create a EventgridSystemTopicEventSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventgridSystemTopicEventSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventgridSystemTopicEventSubscriptionArgs | EventgridSystemTopicEventSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventgridSystemTopicEventSubscriptionState | undefined;
            resourceInputs["advancedFilter"] = state ? state.advancedFilter : undefined;
            resourceInputs["advancedFilteringOnArraysEnabled"] = state ? state.advancedFilteringOnArraysEnabled : undefined;
            resourceInputs["azureFunctionEndpoint"] = state ? state.azureFunctionEndpoint : undefined;
            resourceInputs["deadLetterIdentity"] = state ? state.deadLetterIdentity : undefined;
            resourceInputs["deliveryIdentity"] = state ? state.deliveryIdentity : undefined;
            resourceInputs["deliveryProperties"] = state ? state.deliveryProperties : undefined;
            resourceInputs["eventDeliverySchema"] = state ? state.eventDeliverySchema : undefined;
            resourceInputs["eventhubEndpointId"] = state ? state.eventhubEndpointId : undefined;
            resourceInputs["expirationTimeUtc"] = state ? state.expirationTimeUtc : undefined;
            resourceInputs["hybridConnectionEndpointId"] = state ? state.hybridConnectionEndpointId : undefined;
            resourceInputs["includedEventTypes"] = state ? state.includedEventTypes : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["retryPolicy"] = state ? state.retryPolicy : undefined;
            resourceInputs["serviceBusQueueEndpointId"] = state ? state.serviceBusQueueEndpointId : undefined;
            resourceInputs["serviceBusTopicEndpointId"] = state ? state.serviceBusTopicEndpointId : undefined;
            resourceInputs["storageBlobDeadLetterDestination"] = state ? state.storageBlobDeadLetterDestination : undefined;
            resourceInputs["storageQueueEndpoint"] = state ? state.storageQueueEndpoint : undefined;
            resourceInputs["subjectFilter"] = state ? state.subjectFilter : undefined;
            resourceInputs["systemTopic"] = state ? state.systemTopic : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["webhookEndpoint"] = state ? state.webhookEndpoint : undefined;
        } else {
            const args = argsOrState as EventgridSystemTopicEventSubscriptionArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.systemTopic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'systemTopic'");
            }
            resourceInputs["advancedFilter"] = args ? args.advancedFilter : undefined;
            resourceInputs["advancedFilteringOnArraysEnabled"] = args ? args.advancedFilteringOnArraysEnabled : undefined;
            resourceInputs["azureFunctionEndpoint"] = args ? args.azureFunctionEndpoint : undefined;
            resourceInputs["deadLetterIdentity"] = args ? args.deadLetterIdentity : undefined;
            resourceInputs["deliveryIdentity"] = args ? args.deliveryIdentity : undefined;
            resourceInputs["deliveryProperties"] = args ? args.deliveryProperties : undefined;
            resourceInputs["eventDeliverySchema"] = args ? args.eventDeliverySchema : undefined;
            resourceInputs["eventhubEndpointId"] = args ? args.eventhubEndpointId : undefined;
            resourceInputs["expirationTimeUtc"] = args ? args.expirationTimeUtc : undefined;
            resourceInputs["hybridConnectionEndpointId"] = args ? args.hybridConnectionEndpointId : undefined;
            resourceInputs["includedEventTypes"] = args ? args.includedEventTypes : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["retryPolicy"] = args ? args.retryPolicy : undefined;
            resourceInputs["serviceBusQueueEndpointId"] = args ? args.serviceBusQueueEndpointId : undefined;
            resourceInputs["serviceBusTopicEndpointId"] = args ? args.serviceBusTopicEndpointId : undefined;
            resourceInputs["storageBlobDeadLetterDestination"] = args ? args.storageBlobDeadLetterDestination : undefined;
            resourceInputs["storageQueueEndpoint"] = args ? args.storageQueueEndpoint : undefined;
            resourceInputs["subjectFilter"] = args ? args.subjectFilter : undefined;
            resourceInputs["systemTopic"] = args ? args.systemTopic : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["webhookEndpoint"] = args ? args.webhookEndpoint : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventgridSystemTopicEventSubscription.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventgridSystemTopicEventSubscription resources.
 */
export interface EventgridSystemTopicEventSubscriptionState {
    advancedFilter?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionAdvancedFilter>;
    advancedFilteringOnArraysEnabled?: pulumi.Input<boolean>;
    azureFunctionEndpoint?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionAzureFunctionEndpoint>;
    deadLetterIdentity?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionDeadLetterIdentity>;
    deliveryIdentity?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionDeliveryIdentity>;
    deliveryProperties?: pulumi.Input<pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionDeliveryProperty>[]>;
    eventDeliverySchema?: pulumi.Input<string>;
    eventhubEndpointId?: pulumi.Input<string>;
    expirationTimeUtc?: pulumi.Input<string>;
    hybridConnectionEndpointId?: pulumi.Input<string>;
    includedEventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    retryPolicy?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionRetryPolicy>;
    serviceBusQueueEndpointId?: pulumi.Input<string>;
    serviceBusTopicEndpointId?: pulumi.Input<string>;
    storageBlobDeadLetterDestination?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionStorageBlobDeadLetterDestination>;
    storageQueueEndpoint?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionStorageQueueEndpoint>;
    subjectFilter?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionSubjectFilter>;
    systemTopic?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionTimeouts>;
    webhookEndpoint?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionWebhookEndpoint>;
}

/**
 * The set of arguments for constructing a EventgridSystemTopicEventSubscription resource.
 */
export interface EventgridSystemTopicEventSubscriptionArgs {
    advancedFilter?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionAdvancedFilter>;
    advancedFilteringOnArraysEnabled?: pulumi.Input<boolean>;
    azureFunctionEndpoint?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionAzureFunctionEndpoint>;
    deadLetterIdentity?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionDeadLetterIdentity>;
    deliveryIdentity?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionDeliveryIdentity>;
    deliveryProperties?: pulumi.Input<pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionDeliveryProperty>[]>;
    eventDeliverySchema?: pulumi.Input<string>;
    eventhubEndpointId?: pulumi.Input<string>;
    expirationTimeUtc?: pulumi.Input<string>;
    hybridConnectionEndpointId?: pulumi.Input<string>;
    includedEventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    retryPolicy?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionRetryPolicy>;
    serviceBusQueueEndpointId?: pulumi.Input<string>;
    serviceBusTopicEndpointId?: pulumi.Input<string>;
    storageBlobDeadLetterDestination?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionStorageBlobDeadLetterDestination>;
    storageQueueEndpoint?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionStorageQueueEndpoint>;
    subjectFilter?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionSubjectFilter>;
    systemTopic: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionTimeouts>;
    webhookEndpoint?: pulumi.Input<inputs.EventgridSystemTopicEventSubscriptionWebhookEndpoint>;
}
