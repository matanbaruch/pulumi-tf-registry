// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HealthcareFhirService extends pulumi.CustomResource {
    /**
     * Get an existing HealthcareFhirService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthcareFhirServiceState, opts?: pulumi.CustomResourceOptions): HealthcareFhirService {
        return new HealthcareFhirService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/healthcareFhirService:HealthcareFhirService';

    /**
     * Returns true if the given object is an instance of HealthcareFhirService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthcareFhirService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthcareFhirService.__pulumiType;
    }

    public readonly accessPolicyObjectIds!: pulumi.Output<string[] | undefined>;
    public readonly authentication!: pulumi.Output<outputs.HealthcareFhirServiceAuthentication>;
    public readonly configurationExportStorageAccountName!: pulumi.Output<string | undefined>;
    public readonly containerRegistryLoginServerUrls!: pulumi.Output<string[] | undefined>;
    public readonly cors!: pulumi.Output<outputs.HealthcareFhirServiceCors | undefined>;
    public readonly identity!: pulumi.Output<outputs.HealthcareFhirServiceIdentity | undefined>;
    public readonly kind!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ociArtifacts!: pulumi.Output<outputs.HealthcareFhirServiceOciArtifact[] | undefined>;
    public /*out*/ readonly publicNetworkAccessEnabled!: pulumi.Output<boolean>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.HealthcareFhirServiceTimeouts | undefined>;
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a HealthcareFhirService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthcareFhirServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthcareFhirServiceArgs | HealthcareFhirServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthcareFhirServiceState | undefined;
            resourceInputs["accessPolicyObjectIds"] = state ? state.accessPolicyObjectIds : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["configurationExportStorageAccountName"] = state ? state.configurationExportStorageAccountName : undefined;
            resourceInputs["containerRegistryLoginServerUrls"] = state ? state.containerRegistryLoginServerUrls : undefined;
            resourceInputs["cors"] = state ? state.cors : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ociArtifacts"] = state ? state.ociArtifacts : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as HealthcareFhirServiceArgs | undefined;
            if ((!args || args.authentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authentication'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["accessPolicyObjectIds"] = args ? args.accessPolicyObjectIds : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["configurationExportStorageAccountName"] = args ? args.configurationExportStorageAccountName : undefined;
            resourceInputs["containerRegistryLoginServerUrls"] = args ? args.containerRegistryLoginServerUrls : undefined;
            resourceInputs["cors"] = args ? args.cors : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ociArtifacts"] = args ? args.ociArtifacts : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthcareFhirService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthcareFhirService resources.
 */
export interface HealthcareFhirServiceState {
    accessPolicyObjectIds?: pulumi.Input<pulumi.Input<string>[]>;
    authentication?: pulumi.Input<inputs.HealthcareFhirServiceAuthentication>;
    configurationExportStorageAccountName?: pulumi.Input<string>;
    containerRegistryLoginServerUrls?: pulumi.Input<pulumi.Input<string>[]>;
    cors?: pulumi.Input<inputs.HealthcareFhirServiceCors>;
    identity?: pulumi.Input<inputs.HealthcareFhirServiceIdentity>;
    kind?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ociArtifacts?: pulumi.Input<pulumi.Input<inputs.HealthcareFhirServiceOciArtifact>[]>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HealthcareFhirServiceTimeouts>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthcareFhirService resource.
 */
export interface HealthcareFhirServiceArgs {
    accessPolicyObjectIds?: pulumi.Input<pulumi.Input<string>[]>;
    authentication: pulumi.Input<inputs.HealthcareFhirServiceAuthentication>;
    configurationExportStorageAccountName?: pulumi.Input<string>;
    containerRegistryLoginServerUrls?: pulumi.Input<pulumi.Input<string>[]>;
    cors?: pulumi.Input<inputs.HealthcareFhirServiceCors>;
    identity?: pulumi.Input<inputs.HealthcareFhirServiceIdentity>;
    kind?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ociArtifacts?: pulumi.Input<pulumi.Input<inputs.HealthcareFhirServiceOciArtifact>[]>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HealthcareFhirServiceTimeouts>;
    workspaceId: pulumi.Input<string>;
}
