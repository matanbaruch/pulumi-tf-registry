// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SharedImage extends pulumi.CustomResource {
    /**
     * Get an existing SharedImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedImageState, opts?: pulumi.CustomResourceOptions): SharedImage {
        return new SharedImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/sharedImage:SharedImage';

    /**
     * Returns true if the given object is an instance of SharedImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SharedImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedImage.__pulumiType;
    }

    public readonly acceleratedNetworkSupportEnabled!: pulumi.Output<boolean | undefined>;
    public readonly architecture!: pulumi.Output<string | undefined>;
    public readonly confidentialVmEnabled!: pulumi.Output<boolean | undefined>;
    public readonly confidentialVmSupported!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly diskTypesNotAlloweds!: pulumi.Output<string[] | undefined>;
    public readonly endOfLifeDate!: pulumi.Output<string | undefined>;
    public readonly eula!: pulumi.Output<string | undefined>;
    public readonly galleryName!: pulumi.Output<string>;
    public readonly hibernationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly hyperVGeneration!: pulumi.Output<string | undefined>;
    public readonly identifier!: pulumi.Output<outputs.SharedImageIdentifier>;
    public readonly location!: pulumi.Output<string>;
    public readonly maxRecommendedMemoryInGb!: pulumi.Output<number | undefined>;
    public readonly maxRecommendedVcpuCount!: pulumi.Output<number | undefined>;
    public readonly minRecommendedMemoryInGb!: pulumi.Output<number | undefined>;
    public readonly minRecommendedVcpuCount!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly osType!: pulumi.Output<string>;
    public readonly privacyStatementUri!: pulumi.Output<string | undefined>;
    public readonly purchasePlan!: pulumi.Output<outputs.SharedImagePurchasePlan | undefined>;
    public readonly releaseNoteUri!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly specialized!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SharedImageTimeouts | undefined>;
    public readonly trustedLaunchEnabled!: pulumi.Output<boolean | undefined>;
    public readonly trustedLaunchSupported!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SharedImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedImageArgs | SharedImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SharedImageState | undefined;
            resourceInputs["acceleratedNetworkSupportEnabled"] = state ? state.acceleratedNetworkSupportEnabled : undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["confidentialVmEnabled"] = state ? state.confidentialVmEnabled : undefined;
            resourceInputs["confidentialVmSupported"] = state ? state.confidentialVmSupported : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskTypesNotAlloweds"] = state ? state.diskTypesNotAlloweds : undefined;
            resourceInputs["endOfLifeDate"] = state ? state.endOfLifeDate : undefined;
            resourceInputs["eula"] = state ? state.eula : undefined;
            resourceInputs["galleryName"] = state ? state.galleryName : undefined;
            resourceInputs["hibernationEnabled"] = state ? state.hibernationEnabled : undefined;
            resourceInputs["hyperVGeneration"] = state ? state.hyperVGeneration : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maxRecommendedMemoryInGb"] = state ? state.maxRecommendedMemoryInGb : undefined;
            resourceInputs["maxRecommendedVcpuCount"] = state ? state.maxRecommendedVcpuCount : undefined;
            resourceInputs["minRecommendedMemoryInGb"] = state ? state.minRecommendedMemoryInGb : undefined;
            resourceInputs["minRecommendedVcpuCount"] = state ? state.minRecommendedVcpuCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["privacyStatementUri"] = state ? state.privacyStatementUri : undefined;
            resourceInputs["purchasePlan"] = state ? state.purchasePlan : undefined;
            resourceInputs["releaseNoteUri"] = state ? state.releaseNoteUri : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["specialized"] = state ? state.specialized : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trustedLaunchEnabled"] = state ? state.trustedLaunchEnabled : undefined;
            resourceInputs["trustedLaunchSupported"] = state ? state.trustedLaunchSupported : undefined;
        } else {
            const args = argsOrState as SharedImageArgs | undefined;
            if ((!args || args.galleryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'galleryName'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.osType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["acceleratedNetworkSupportEnabled"] = args ? args.acceleratedNetworkSupportEnabled : undefined;
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["confidentialVmEnabled"] = args ? args.confidentialVmEnabled : undefined;
            resourceInputs["confidentialVmSupported"] = args ? args.confidentialVmSupported : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskTypesNotAlloweds"] = args ? args.diskTypesNotAlloweds : undefined;
            resourceInputs["endOfLifeDate"] = args ? args.endOfLifeDate : undefined;
            resourceInputs["eula"] = args ? args.eula : undefined;
            resourceInputs["galleryName"] = args ? args.galleryName : undefined;
            resourceInputs["hibernationEnabled"] = args ? args.hibernationEnabled : undefined;
            resourceInputs["hyperVGeneration"] = args ? args.hyperVGeneration : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maxRecommendedMemoryInGb"] = args ? args.maxRecommendedMemoryInGb : undefined;
            resourceInputs["maxRecommendedVcpuCount"] = args ? args.maxRecommendedVcpuCount : undefined;
            resourceInputs["minRecommendedMemoryInGb"] = args ? args.minRecommendedMemoryInGb : undefined;
            resourceInputs["minRecommendedVcpuCount"] = args ? args.minRecommendedVcpuCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["privacyStatementUri"] = args ? args.privacyStatementUri : undefined;
            resourceInputs["purchasePlan"] = args ? args.purchasePlan : undefined;
            resourceInputs["releaseNoteUri"] = args ? args.releaseNoteUri : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["specialized"] = args ? args.specialized : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trustedLaunchEnabled"] = args ? args.trustedLaunchEnabled : undefined;
            resourceInputs["trustedLaunchSupported"] = args ? args.trustedLaunchSupported : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SharedImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SharedImage resources.
 */
export interface SharedImageState {
    acceleratedNetworkSupportEnabled?: pulumi.Input<boolean>;
    architecture?: pulumi.Input<string>;
    confidentialVmEnabled?: pulumi.Input<boolean>;
    confidentialVmSupported?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    diskTypesNotAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    endOfLifeDate?: pulumi.Input<string>;
    eula?: pulumi.Input<string>;
    galleryName?: pulumi.Input<string>;
    hibernationEnabled?: pulumi.Input<boolean>;
    hyperVGeneration?: pulumi.Input<string>;
    identifier?: pulumi.Input<inputs.SharedImageIdentifier>;
    location?: pulumi.Input<string>;
    maxRecommendedMemoryInGb?: pulumi.Input<number>;
    maxRecommendedVcpuCount?: pulumi.Input<number>;
    minRecommendedMemoryInGb?: pulumi.Input<number>;
    minRecommendedVcpuCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    privacyStatementUri?: pulumi.Input<string>;
    purchasePlan?: pulumi.Input<inputs.SharedImagePurchasePlan>;
    releaseNoteUri?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    specialized?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SharedImageTimeouts>;
    trustedLaunchEnabled?: pulumi.Input<boolean>;
    trustedLaunchSupported?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SharedImage resource.
 */
export interface SharedImageArgs {
    acceleratedNetworkSupportEnabled?: pulumi.Input<boolean>;
    architecture?: pulumi.Input<string>;
    confidentialVmEnabled?: pulumi.Input<boolean>;
    confidentialVmSupported?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    diskTypesNotAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    endOfLifeDate?: pulumi.Input<string>;
    eula?: pulumi.Input<string>;
    galleryName: pulumi.Input<string>;
    hibernationEnabled?: pulumi.Input<boolean>;
    hyperVGeneration?: pulumi.Input<string>;
    identifier: pulumi.Input<inputs.SharedImageIdentifier>;
    location: pulumi.Input<string>;
    maxRecommendedMemoryInGb?: pulumi.Input<number>;
    maxRecommendedVcpuCount?: pulumi.Input<number>;
    minRecommendedMemoryInGb?: pulumi.Input<number>;
    minRecommendedVcpuCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osType: pulumi.Input<string>;
    privacyStatementUri?: pulumi.Input<string>;
    purchasePlan?: pulumi.Input<inputs.SharedImagePurchasePlan>;
    releaseNoteUri?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    specialized?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SharedImageTimeouts>;
    trustedLaunchEnabled?: pulumi.Input<boolean>;
    trustedLaunchSupported?: pulumi.Input<boolean>;
}
