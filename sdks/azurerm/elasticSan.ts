// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticSan extends pulumi.CustomResource {
    /**
     * Get an existing ElasticSan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticSanState, opts?: pulumi.CustomResourceOptions): ElasticSan {
        return new ElasticSan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/elasticSan:ElasticSan';

    /**
     * Returns true if the given object is an instance of ElasticSan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticSan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticSan.__pulumiType;
    }

    public readonly baseSizeInTib!: pulumi.Output<number>;
    public readonly extendedSizeInTib!: pulumi.Output<number | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly sku!: pulumi.Output<outputs.ElasticSanSku>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ElasticSanTimeouts | undefined>;
    public /*out*/ readonly totalIops!: pulumi.Output<number>;
    public /*out*/ readonly totalMbps!: pulumi.Output<number>;
    public /*out*/ readonly totalSizeInTib!: pulumi.Output<number>;
    public /*out*/ readonly totalVolumeSizeInGib!: pulumi.Output<number>;
    public /*out*/ readonly volumeGroupCount!: pulumi.Output<number>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ElasticSan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticSanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticSanArgs | ElasticSanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticSanState | undefined;
            resourceInputs["baseSizeInTib"] = state ? state.baseSizeInTib : undefined;
            resourceInputs["extendedSizeInTib"] = state ? state.extendedSizeInTib : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["totalIops"] = state ? state.totalIops : undefined;
            resourceInputs["totalMbps"] = state ? state.totalMbps : undefined;
            resourceInputs["totalSizeInTib"] = state ? state.totalSizeInTib : undefined;
            resourceInputs["totalVolumeSizeInGib"] = state ? state.totalVolumeSizeInGib : undefined;
            resourceInputs["volumeGroupCount"] = state ? state.volumeGroupCount : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as ElasticSanArgs | undefined;
            if ((!args || args.baseSizeInTib === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseSizeInTib'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["baseSizeInTib"] = args ? args.baseSizeInTib : undefined;
            resourceInputs["extendedSizeInTib"] = args ? args.extendedSizeInTib : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["totalIops"] = undefined /*out*/;
            resourceInputs["totalMbps"] = undefined /*out*/;
            resourceInputs["totalSizeInTib"] = undefined /*out*/;
            resourceInputs["totalVolumeSizeInGib"] = undefined /*out*/;
            resourceInputs["volumeGroupCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticSan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticSan resources.
 */
export interface ElasticSanState {
    baseSizeInTib?: pulumi.Input<number>;
    extendedSizeInTib?: pulumi.Input<number>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    sku?: pulumi.Input<inputs.ElasticSanSku>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ElasticSanTimeouts>;
    totalIops?: pulumi.Input<number>;
    totalMbps?: pulumi.Input<number>;
    totalSizeInTib?: pulumi.Input<number>;
    totalVolumeSizeInGib?: pulumi.Input<number>;
    volumeGroupCount?: pulumi.Input<number>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ElasticSan resource.
 */
export interface ElasticSanArgs {
    baseSizeInTib: pulumi.Input<number>;
    extendedSizeInTib?: pulumi.Input<number>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    sku: pulumi.Input<inputs.ElasticSanSku>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ElasticSanTimeouts>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
