// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataFactoryLinkedServiceAzureBlobStorage extends pulumi.CustomResource {
    /**
     * Get an existing DataFactoryLinkedServiceAzureBlobStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataFactoryLinkedServiceAzureBlobStorageState, opts?: pulumi.CustomResourceOptions): DataFactoryLinkedServiceAzureBlobStorage {
        return new DataFactoryLinkedServiceAzureBlobStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/dataFactoryLinkedServiceAzureBlobStorage:DataFactoryLinkedServiceAzureBlobStorage';

    /**
     * Returns true if the given object is an instance of DataFactoryLinkedServiceAzureBlobStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataFactoryLinkedServiceAzureBlobStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataFactoryLinkedServiceAzureBlobStorage.__pulumiType;
    }

    public readonly additionalProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly annotations!: pulumi.Output<string[] | undefined>;
    public readonly connectionString!: pulumi.Output<string | undefined>;
    public readonly connectionStringInsecure!: pulumi.Output<string | undefined>;
    public readonly dataFactoryId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly integrationRuntimeName!: pulumi.Output<string | undefined>;
    public readonly keyVaultSasToken!: pulumi.Output<outputs.DataFactoryLinkedServiceAzureBlobStorageKeyVaultSasToken | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly sasUri!: pulumi.Output<string | undefined>;
    public readonly serviceEndpoint!: pulumi.Output<string | undefined>;
    public readonly servicePrincipalId!: pulumi.Output<string | undefined>;
    public readonly servicePrincipalKey!: pulumi.Output<string | undefined>;
    public readonly servicePrincipalLinkedKeyVaultKey!: pulumi.Output<outputs.DataFactoryLinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey | undefined>;
    public readonly storageKind!: pulumi.Output<string | undefined>;
    public readonly tenantId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DataFactoryLinkedServiceAzureBlobStorageTimeouts | undefined>;
    public readonly useManagedIdentity!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DataFactoryLinkedServiceAzureBlobStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataFactoryLinkedServiceAzureBlobStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataFactoryLinkedServiceAzureBlobStorageArgs | DataFactoryLinkedServiceAzureBlobStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataFactoryLinkedServiceAzureBlobStorageState | undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["connectionStringInsecure"] = state ? state.connectionStringInsecure : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["integrationRuntimeName"] = state ? state.integrationRuntimeName : undefined;
            resourceInputs["keyVaultSasToken"] = state ? state.keyVaultSasToken : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["sasUri"] = state ? state.sasUri : undefined;
            resourceInputs["serviceEndpoint"] = state ? state.serviceEndpoint : undefined;
            resourceInputs["servicePrincipalId"] = state ? state.servicePrincipalId : undefined;
            resourceInputs["servicePrincipalKey"] = state ? state.servicePrincipalKey : undefined;
            resourceInputs["servicePrincipalLinkedKeyVaultKey"] = state ? state.servicePrincipalLinkedKeyVaultKey : undefined;
            resourceInputs["storageKind"] = state ? state.storageKind : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useManagedIdentity"] = state ? state.useManagedIdentity : undefined;
        } else {
            const args = argsOrState as DataFactoryLinkedServiceAzureBlobStorageArgs | undefined;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["connectionString"] = args?.connectionString ? pulumi.secret(args.connectionString) : undefined;
            resourceInputs["connectionStringInsecure"] = args ? args.connectionStringInsecure : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["integrationRuntimeName"] = args ? args.integrationRuntimeName : undefined;
            resourceInputs["keyVaultSasToken"] = args ? args.keyVaultSasToken : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["sasUri"] = args?.sasUri ? pulumi.secret(args.sasUri) : undefined;
            resourceInputs["serviceEndpoint"] = args?.serviceEndpoint ? pulumi.secret(args.serviceEndpoint) : undefined;
            resourceInputs["servicePrincipalId"] = args ? args.servicePrincipalId : undefined;
            resourceInputs["servicePrincipalKey"] = args ? args.servicePrincipalKey : undefined;
            resourceInputs["servicePrincipalLinkedKeyVaultKey"] = args ? args.servicePrincipalLinkedKeyVaultKey : undefined;
            resourceInputs["storageKind"] = args ? args.storageKind : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useManagedIdentity"] = args ? args.useManagedIdentity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionString", "sasUri", "serviceEndpoint"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DataFactoryLinkedServiceAzureBlobStorage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataFactoryLinkedServiceAzureBlobStorage resources.
 */
export interface DataFactoryLinkedServiceAzureBlobStorageState {
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    connectionString?: pulumi.Input<string>;
    connectionStringInsecure?: pulumi.Input<string>;
    dataFactoryId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    integrationRuntimeName?: pulumi.Input<string>;
    keyVaultSasToken?: pulumi.Input<inputs.DataFactoryLinkedServiceAzureBlobStorageKeyVaultSasToken>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sasUri?: pulumi.Input<string>;
    serviceEndpoint?: pulumi.Input<string>;
    servicePrincipalId?: pulumi.Input<string>;
    servicePrincipalKey?: pulumi.Input<string>;
    servicePrincipalLinkedKeyVaultKey?: pulumi.Input<inputs.DataFactoryLinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey>;
    storageKind?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataFactoryLinkedServiceAzureBlobStorageTimeouts>;
    useManagedIdentity?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DataFactoryLinkedServiceAzureBlobStorage resource.
 */
export interface DataFactoryLinkedServiceAzureBlobStorageArgs {
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    connectionString?: pulumi.Input<string>;
    connectionStringInsecure?: pulumi.Input<string>;
    dataFactoryId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    integrationRuntimeName?: pulumi.Input<string>;
    keyVaultSasToken?: pulumi.Input<inputs.DataFactoryLinkedServiceAzureBlobStorageKeyVaultSasToken>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sasUri?: pulumi.Input<string>;
    serviceEndpoint?: pulumi.Input<string>;
    servicePrincipalId?: pulumi.Input<string>;
    servicePrincipalKey?: pulumi.Input<string>;
    servicePrincipalLinkedKeyVaultKey?: pulumi.Input<inputs.DataFactoryLinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey>;
    storageKind?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataFactoryLinkedServiceAzureBlobStorageTimeouts>;
    useManagedIdentity?: pulumi.Input<boolean>;
}
