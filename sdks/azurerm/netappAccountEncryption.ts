// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetappAccountEncryption extends pulumi.CustomResource {
    /**
     * Get an existing NetappAccountEncryption resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetappAccountEncryptionState, opts?: pulumi.CustomResourceOptions): NetappAccountEncryption {
        return new NetappAccountEncryption(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/netappAccountEncryption:NetappAccountEncryption';

    /**
     * Returns true if the given object is an instance of NetappAccountEncryption.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetappAccountEncryption {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetappAccountEncryption.__pulumiType;
    }

    /**
     * The versionless encryption key url.
     */
    public readonly encryptionKey!: pulumi.Output<string>;
    /**
     * The ID of the NetApp Account where encryption will be set.
     */
    public readonly netappAccountId!: pulumi.Output<string>;
    /**
     * The Principal ID of the System Assigned Identity to use for encryption.
     */
    public readonly systemAssignedIdentityPrincipalId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NetappAccountEncryptionTimeouts | undefined>;
    /**
     * The resource ID of the User Assigned Identity to use for encryption.
     */
    public readonly userAssignedIdentityId!: pulumi.Output<string | undefined>;

    /**
     * Create a NetappAccountEncryption resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetappAccountEncryptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetappAccountEncryptionArgs | NetappAccountEncryptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetappAccountEncryptionState | undefined;
            resourceInputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            resourceInputs["netappAccountId"] = state ? state.netappAccountId : undefined;
            resourceInputs["systemAssignedIdentityPrincipalId"] = state ? state.systemAssignedIdentityPrincipalId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userAssignedIdentityId"] = state ? state.userAssignedIdentityId : undefined;
        } else {
            const args = argsOrState as NetappAccountEncryptionArgs | undefined;
            if ((!args || args.encryptionKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionKey'");
            }
            if ((!args || args.netappAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netappAccountId'");
            }
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["netappAccountId"] = args ? args.netappAccountId : undefined;
            resourceInputs["systemAssignedIdentityPrincipalId"] = args ? args.systemAssignedIdentityPrincipalId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userAssignedIdentityId"] = args ? args.userAssignedIdentityId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetappAccountEncryption.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetappAccountEncryption resources.
 */
export interface NetappAccountEncryptionState {
    /**
     * The versionless encryption key url.
     */
    encryptionKey?: pulumi.Input<string>;
    /**
     * The ID of the NetApp Account where encryption will be set.
     */
    netappAccountId?: pulumi.Input<string>;
    /**
     * The Principal ID of the System Assigned Identity to use for encryption.
     */
    systemAssignedIdentityPrincipalId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetappAccountEncryptionTimeouts>;
    /**
     * The resource ID of the User Assigned Identity to use for encryption.
     */
    userAssignedIdentityId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetappAccountEncryption resource.
 */
export interface NetappAccountEncryptionArgs {
    /**
     * The versionless encryption key url.
     */
    encryptionKey: pulumi.Input<string>;
    /**
     * The ID of the NetApp Account where encryption will be set.
     */
    netappAccountId: pulumi.Input<string>;
    /**
     * The Principal ID of the System Assigned Identity to use for encryption.
     */
    systemAssignedIdentityPrincipalId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetappAccountEncryptionTimeouts>;
    /**
     * The resource ID of the User Assigned Identity to use for encryption.
     */
    userAssignedIdentityId?: pulumi.Input<string>;
}
