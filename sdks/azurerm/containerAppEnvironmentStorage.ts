// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerAppEnvironmentStorage extends pulumi.CustomResource {
    /**
     * Get an existing ContainerAppEnvironmentStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerAppEnvironmentStorageState, opts?: pulumi.CustomResourceOptions): ContainerAppEnvironmentStorage {
        return new ContainerAppEnvironmentStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/containerAppEnvironmentStorage:ContainerAppEnvironmentStorage';

    /**
     * Returns true if the given object is an instance of ContainerAppEnvironmentStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerAppEnvironmentStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerAppEnvironmentStorage.__pulumiType;
    }

    /**
     * The Storage Account Access Key.
     */
    public readonly accessKey!: pulumi.Output<string>;
    /**
     * The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`.
     */
    public readonly accessMode!: pulumi.Output<string>;
    /**
     * The Azure Storage Account in which the Share to be used is located.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * The ID of the Container App Environment to which this storage belongs.
     */
    public readonly containerAppEnvironmentId!: pulumi.Output<string>;
    /**
     * The name for this Storage.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Azure Storage Share to use.
     */
    public readonly shareName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerAppEnvironmentStorageTimeouts | undefined>;

    /**
     * Create a ContainerAppEnvironmentStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerAppEnvironmentStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerAppEnvironmentStorageArgs | ContainerAppEnvironmentStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerAppEnvironmentStorageState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["accessMode"] = state ? state.accessMode : undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["containerAppEnvironmentId"] = state ? state.containerAppEnvironmentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["shareName"] = state ? state.shareName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ContainerAppEnvironmentStorageArgs | undefined;
            if ((!args || args.accessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessKey'");
            }
            if ((!args || args.accessMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessMode'");
            }
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.containerAppEnvironmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerAppEnvironmentId'");
            }
            if ((!args || args.shareName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareName'");
            }
            resourceInputs["accessKey"] = args?.accessKey ? pulumi.secret(args.accessKey) : undefined;
            resourceInputs["accessMode"] = args ? args.accessMode : undefined;
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["containerAppEnvironmentId"] = args ? args.containerAppEnvironmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["shareName"] = args ? args.shareName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ContainerAppEnvironmentStorage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerAppEnvironmentStorage resources.
 */
export interface ContainerAppEnvironmentStorageState {
    /**
     * The Storage Account Access Key.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`.
     */
    accessMode?: pulumi.Input<string>;
    /**
     * The Azure Storage Account in which the Share to be used is located.
     */
    accountName?: pulumi.Input<string>;
    /**
     * The ID of the Container App Environment to which this storage belongs.
     */
    containerAppEnvironmentId?: pulumi.Input<string>;
    /**
     * The name for this Storage.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Azure Storage Share to use.
     */
    shareName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerAppEnvironmentStorageTimeouts>;
}

/**
 * The set of arguments for constructing a ContainerAppEnvironmentStorage resource.
 */
export interface ContainerAppEnvironmentStorageArgs {
    /**
     * The Storage Account Access Key.
     */
    accessKey: pulumi.Input<string>;
    /**
     * The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`.
     */
    accessMode: pulumi.Input<string>;
    /**
     * The Azure Storage Account in which the Share to be used is located.
     */
    accountName: pulumi.Input<string>;
    /**
     * The ID of the Container App Environment to which this storage belongs.
     */
    containerAppEnvironmentId: pulumi.Input<string>;
    /**
     * The name for this Storage.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Azure Storage Share to use.
     */
    shareName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerAppEnvironmentStorageTimeouts>;
}
