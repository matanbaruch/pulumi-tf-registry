// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MobileNetworkPacketCoreControlPlane extends pulumi.CustomResource {
    /**
     * Get an existing MobileNetworkPacketCoreControlPlane resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MobileNetworkPacketCoreControlPlaneState, opts?: pulumi.CustomResourceOptions): MobileNetworkPacketCoreControlPlane {
        return new MobileNetworkPacketCoreControlPlane(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/mobileNetworkPacketCoreControlPlane:MobileNetworkPacketCoreControlPlane';

    /**
     * Returns true if the given object is an instance of MobileNetworkPacketCoreControlPlane.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MobileNetworkPacketCoreControlPlane {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MobileNetworkPacketCoreControlPlane.__pulumiType;
    }

    public readonly controlPlaneAccessIpv4Address!: pulumi.Output<string | undefined>;
    public readonly controlPlaneAccessIpv4Gateway!: pulumi.Output<string | undefined>;
    public readonly controlPlaneAccessIpv4Subnet!: pulumi.Output<string | undefined>;
    public readonly controlPlaneAccessName!: pulumi.Output<string | undefined>;
    public readonly coreNetworkTechnology!: pulumi.Output<string | undefined>;
    public readonly identity!: pulumi.Output<outputs.MobileNetworkPacketCoreControlPlaneIdentity | undefined>;
    public readonly interoperabilitySettingsJson!: pulumi.Output<string | undefined>;
    public readonly localDiagnosticsAccess!: pulumi.Output<outputs.MobileNetworkPacketCoreControlPlaneLocalDiagnosticsAccess>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly platform!: pulumi.Output<outputs.MobileNetworkPacketCoreControlPlanePlatform | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly siteIds!: pulumi.Output<string[]>;
    public readonly sku!: pulumi.Output<string>;
    public readonly softwareVersion!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MobileNetworkPacketCoreControlPlaneTimeouts | undefined>;
    public readonly userEquipmentMtuInBytes!: pulumi.Output<number | undefined>;

    /**
     * Create a MobileNetworkPacketCoreControlPlane resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MobileNetworkPacketCoreControlPlaneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MobileNetworkPacketCoreControlPlaneArgs | MobileNetworkPacketCoreControlPlaneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MobileNetworkPacketCoreControlPlaneState | undefined;
            resourceInputs["controlPlaneAccessIpv4Address"] = state ? state.controlPlaneAccessIpv4Address : undefined;
            resourceInputs["controlPlaneAccessIpv4Gateway"] = state ? state.controlPlaneAccessIpv4Gateway : undefined;
            resourceInputs["controlPlaneAccessIpv4Subnet"] = state ? state.controlPlaneAccessIpv4Subnet : undefined;
            resourceInputs["controlPlaneAccessName"] = state ? state.controlPlaneAccessName : undefined;
            resourceInputs["coreNetworkTechnology"] = state ? state.coreNetworkTechnology : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["interoperabilitySettingsJson"] = state ? state.interoperabilitySettingsJson : undefined;
            resourceInputs["localDiagnosticsAccess"] = state ? state.localDiagnosticsAccess : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["siteIds"] = state ? state.siteIds : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["softwareVersion"] = state ? state.softwareVersion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userEquipmentMtuInBytes"] = state ? state.userEquipmentMtuInBytes : undefined;
        } else {
            const args = argsOrState as MobileNetworkPacketCoreControlPlaneArgs | undefined;
            if ((!args || args.localDiagnosticsAccess === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localDiagnosticsAccess'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.siteIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteIds'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["controlPlaneAccessIpv4Address"] = args ? args.controlPlaneAccessIpv4Address : undefined;
            resourceInputs["controlPlaneAccessIpv4Gateway"] = args ? args.controlPlaneAccessIpv4Gateway : undefined;
            resourceInputs["controlPlaneAccessIpv4Subnet"] = args ? args.controlPlaneAccessIpv4Subnet : undefined;
            resourceInputs["controlPlaneAccessName"] = args ? args.controlPlaneAccessName : undefined;
            resourceInputs["coreNetworkTechnology"] = args ? args.coreNetworkTechnology : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["interoperabilitySettingsJson"] = args ? args.interoperabilitySettingsJson : undefined;
            resourceInputs["localDiagnosticsAccess"] = args ? args.localDiagnosticsAccess : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["siteIds"] = args ? args.siteIds : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["softwareVersion"] = args ? args.softwareVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userEquipmentMtuInBytes"] = args ? args.userEquipmentMtuInBytes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MobileNetworkPacketCoreControlPlane.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MobileNetworkPacketCoreControlPlane resources.
 */
export interface MobileNetworkPacketCoreControlPlaneState {
    controlPlaneAccessIpv4Address?: pulumi.Input<string>;
    controlPlaneAccessIpv4Gateway?: pulumi.Input<string>;
    controlPlaneAccessIpv4Subnet?: pulumi.Input<string>;
    controlPlaneAccessName?: pulumi.Input<string>;
    coreNetworkTechnology?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.MobileNetworkPacketCoreControlPlaneIdentity>;
    interoperabilitySettingsJson?: pulumi.Input<string>;
    localDiagnosticsAccess?: pulumi.Input<inputs.MobileNetworkPacketCoreControlPlaneLocalDiagnosticsAccess>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<inputs.MobileNetworkPacketCoreControlPlanePlatform>;
    resourceGroupName?: pulumi.Input<string>;
    siteIds?: pulumi.Input<pulumi.Input<string>[]>;
    sku?: pulumi.Input<string>;
    softwareVersion?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MobileNetworkPacketCoreControlPlaneTimeouts>;
    userEquipmentMtuInBytes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MobileNetworkPacketCoreControlPlane resource.
 */
export interface MobileNetworkPacketCoreControlPlaneArgs {
    controlPlaneAccessIpv4Address?: pulumi.Input<string>;
    controlPlaneAccessIpv4Gateway?: pulumi.Input<string>;
    controlPlaneAccessIpv4Subnet?: pulumi.Input<string>;
    controlPlaneAccessName?: pulumi.Input<string>;
    coreNetworkTechnology?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.MobileNetworkPacketCoreControlPlaneIdentity>;
    interoperabilitySettingsJson?: pulumi.Input<string>;
    localDiagnosticsAccess: pulumi.Input<inputs.MobileNetworkPacketCoreControlPlaneLocalDiagnosticsAccess>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<inputs.MobileNetworkPacketCoreControlPlanePlatform>;
    resourceGroupName: pulumi.Input<string>;
    siteIds: pulumi.Input<pulumi.Input<string>[]>;
    sku: pulumi.Input<string>;
    softwareVersion?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MobileNetworkPacketCoreControlPlaneTimeouts>;
    userEquipmentMtuInBytes?: pulumi.Input<number>;
}
