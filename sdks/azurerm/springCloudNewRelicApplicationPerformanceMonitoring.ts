// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SpringCloudNewRelicApplicationPerformanceMonitoring extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudNewRelicApplicationPerformanceMonitoring resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudNewRelicApplicationPerformanceMonitoringState, opts?: pulumi.CustomResourceOptions): SpringCloudNewRelicApplicationPerformanceMonitoring {
        return new SpringCloudNewRelicApplicationPerformanceMonitoring(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/springCloudNewRelicApplicationPerformanceMonitoring:SpringCloudNewRelicApplicationPerformanceMonitoring';

    /**
     * Returns true if the given object is an instance of SpringCloudNewRelicApplicationPerformanceMonitoring.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudNewRelicApplicationPerformanceMonitoring {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudNewRelicApplicationPerformanceMonitoring.__pulumiType;
    }

    public readonly agentEnabled!: pulumi.Output<boolean | undefined>;
    public readonly appName!: pulumi.Output<string>;
    public readonly appServerPort!: pulumi.Output<number | undefined>;
    public readonly auditModeEnabled!: pulumi.Output<boolean | undefined>;
    public readonly autoAppNamingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly autoTransactionNamingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly customTracingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly globallyEnabled!: pulumi.Output<boolean | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly licenseKey!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly springCloudServiceId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SpringCloudNewRelicApplicationPerformanceMonitoringTimeouts | undefined>;

    /**
     * Create a SpringCloudNewRelicApplicationPerformanceMonitoring resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudNewRelicApplicationPerformanceMonitoringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudNewRelicApplicationPerformanceMonitoringArgs | SpringCloudNewRelicApplicationPerformanceMonitoringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudNewRelicApplicationPerformanceMonitoringState | undefined;
            resourceInputs["agentEnabled"] = state ? state.agentEnabled : undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["appServerPort"] = state ? state.appServerPort : undefined;
            resourceInputs["auditModeEnabled"] = state ? state.auditModeEnabled : undefined;
            resourceInputs["autoAppNamingEnabled"] = state ? state.autoAppNamingEnabled : undefined;
            resourceInputs["autoTransactionNamingEnabled"] = state ? state.autoTransactionNamingEnabled : undefined;
            resourceInputs["customTracingEnabled"] = state ? state.customTracingEnabled : undefined;
            resourceInputs["globallyEnabled"] = state ? state.globallyEnabled : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["licenseKey"] = state ? state.licenseKey : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["springCloudServiceId"] = state ? state.springCloudServiceId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SpringCloudNewRelicApplicationPerformanceMonitoringArgs | undefined;
            if ((!args || args.appName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if ((!args || args.licenseKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseKey'");
            }
            if ((!args || args.springCloudServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudServiceId'");
            }
            resourceInputs["agentEnabled"] = args ? args.agentEnabled : undefined;
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["appServerPort"] = args ? args.appServerPort : undefined;
            resourceInputs["auditModeEnabled"] = args ? args.auditModeEnabled : undefined;
            resourceInputs["autoAppNamingEnabled"] = args ? args.autoAppNamingEnabled : undefined;
            resourceInputs["autoTransactionNamingEnabled"] = args ? args.autoTransactionNamingEnabled : undefined;
            resourceInputs["customTracingEnabled"] = args ? args.customTracingEnabled : undefined;
            resourceInputs["globallyEnabled"] = args ? args.globallyEnabled : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["licenseKey"] = args?.licenseKey ? pulumi.secret(args.licenseKey) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["springCloudServiceId"] = args ? args.springCloudServiceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["licenseKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SpringCloudNewRelicApplicationPerformanceMonitoring.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudNewRelicApplicationPerformanceMonitoring resources.
 */
export interface SpringCloudNewRelicApplicationPerformanceMonitoringState {
    agentEnabled?: pulumi.Input<boolean>;
    appName?: pulumi.Input<string>;
    appServerPort?: pulumi.Input<number>;
    auditModeEnabled?: pulumi.Input<boolean>;
    autoAppNamingEnabled?: pulumi.Input<boolean>;
    autoTransactionNamingEnabled?: pulumi.Input<boolean>;
    customTracingEnabled?: pulumi.Input<boolean>;
    globallyEnabled?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    licenseKey?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    springCloudServiceId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SpringCloudNewRelicApplicationPerformanceMonitoringTimeouts>;
}

/**
 * The set of arguments for constructing a SpringCloudNewRelicApplicationPerformanceMonitoring resource.
 */
export interface SpringCloudNewRelicApplicationPerformanceMonitoringArgs {
    agentEnabled?: pulumi.Input<boolean>;
    appName: pulumi.Input<string>;
    appServerPort?: pulumi.Input<number>;
    auditModeEnabled?: pulumi.Input<boolean>;
    autoAppNamingEnabled?: pulumi.Input<boolean>;
    autoTransactionNamingEnabled?: pulumi.Input<boolean>;
    customTracingEnabled?: pulumi.Input<boolean>;
    globallyEnabled?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    licenseKey: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    springCloudServiceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SpringCloudNewRelicApplicationPerformanceMonitoringTimeouts>;
}
