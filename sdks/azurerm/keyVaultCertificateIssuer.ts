// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KeyVaultCertificateIssuer extends pulumi.CustomResource {
    /**
     * Get an existing KeyVaultCertificateIssuer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyVaultCertificateIssuerState, opts?: pulumi.CustomResourceOptions): KeyVaultCertificateIssuer {
        return new KeyVaultCertificateIssuer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/keyVaultCertificateIssuer:KeyVaultCertificateIssuer';

    /**
     * Returns true if the given object is an instance of KeyVaultCertificateIssuer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyVaultCertificateIssuer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyVaultCertificateIssuer.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string | undefined>;
    public readonly admins!: pulumi.Output<outputs.KeyVaultCertificateIssuerAdmin[] | undefined>;
    public readonly keyVaultId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly orgId!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly providerName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KeyVaultCertificateIssuerTimeouts | undefined>;

    /**
     * Create a KeyVaultCertificateIssuer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyVaultCertificateIssuerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyVaultCertificateIssuerArgs | KeyVaultCertificateIssuerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyVaultCertificateIssuerState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["admins"] = state ? state.admins : undefined;
            resourceInputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as KeyVaultCertificateIssuerArgs | undefined;
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["admins"] = args ? args.admins : undefined;
            resourceInputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KeyVaultCertificateIssuer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeyVaultCertificateIssuer resources.
 */
export interface KeyVaultCertificateIssuerState {
    accountId?: pulumi.Input<string>;
    admins?: pulumi.Input<pulumi.Input<inputs.KeyVaultCertificateIssuerAdmin>[]>;
    keyVaultId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    providerName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KeyVaultCertificateIssuerTimeouts>;
}

/**
 * The set of arguments for constructing a KeyVaultCertificateIssuer resource.
 */
export interface KeyVaultCertificateIssuerArgs {
    accountId?: pulumi.Input<string>;
    admins?: pulumi.Input<pulumi.Input<inputs.KeyVaultCertificateIssuerAdmin>[]>;
    keyVaultId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    providerName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KeyVaultCertificateIssuerTimeouts>;
}
