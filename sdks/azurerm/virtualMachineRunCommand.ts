// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualMachineRunCommand extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachineRunCommand resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineRunCommandState, opts?: pulumi.CustomResourceOptions): VirtualMachineRunCommand {
        return new VirtualMachineRunCommand(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/virtualMachineRunCommand:VirtualMachineRunCommand';

    /**
     * Returns true if the given object is an instance of VirtualMachineRunCommand.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachineRunCommand {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachineRunCommand.__pulumiType;
    }

    public readonly errorBlobManagedIdentity!: pulumi.Output<outputs.VirtualMachineRunCommandErrorBlobManagedIdentity | undefined>;
    public readonly errorBlobUri!: pulumi.Output<string | undefined>;
    public /*out*/ readonly instanceViews!: pulumi.Output<outputs.VirtualMachineRunCommandInstanceView[]>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly outputBlobManagedIdentity!: pulumi.Output<outputs.VirtualMachineRunCommandOutputBlobManagedIdentity | undefined>;
    public readonly outputBlobUri!: pulumi.Output<string | undefined>;
    public readonly parameters!: pulumi.Output<outputs.VirtualMachineRunCommandParameter[] | undefined>;
    public readonly protectedParameters!: pulumi.Output<outputs.VirtualMachineRunCommandProtectedParameter[] | undefined>;
    public readonly runAsPassword!: pulumi.Output<string | undefined>;
    public readonly runAsUser!: pulumi.Output<string | undefined>;
    public readonly source!: pulumi.Output<outputs.VirtualMachineRunCommandSource>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualMachineRunCommandTimeouts | undefined>;
    public readonly virtualMachineId!: pulumi.Output<string>;

    /**
     * Create a VirtualMachineRunCommand resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineRunCommandArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineRunCommandArgs | VirtualMachineRunCommandState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineRunCommandState | undefined;
            resourceInputs["errorBlobManagedIdentity"] = state ? state.errorBlobManagedIdentity : undefined;
            resourceInputs["errorBlobUri"] = state ? state.errorBlobUri : undefined;
            resourceInputs["instanceViews"] = state ? state.instanceViews : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputBlobManagedIdentity"] = state ? state.outputBlobManagedIdentity : undefined;
            resourceInputs["outputBlobUri"] = state ? state.outputBlobUri : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["protectedParameters"] = state ? state.protectedParameters : undefined;
            resourceInputs["runAsPassword"] = state ? state.runAsPassword : undefined;
            resourceInputs["runAsUser"] = state ? state.runAsUser : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
        } else {
            const args = argsOrState as VirtualMachineRunCommandArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.virtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["errorBlobManagedIdentity"] = args ? args.errorBlobManagedIdentity : undefined;
            resourceInputs["errorBlobUri"] = args ? args.errorBlobUri : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputBlobManagedIdentity"] = args ? args.outputBlobManagedIdentity : undefined;
            resourceInputs["outputBlobUri"] = args ? args.outputBlobUri : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["protectedParameters"] = args ? args.protectedParameters : undefined;
            resourceInputs["runAsPassword"] = args?.runAsPassword ? pulumi.secret(args.runAsPassword) : undefined;
            resourceInputs["runAsUser"] = args ? args.runAsUser : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
            resourceInputs["instanceViews"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["runAsPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VirtualMachineRunCommand.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachineRunCommand resources.
 */
export interface VirtualMachineRunCommandState {
    errorBlobManagedIdentity?: pulumi.Input<inputs.VirtualMachineRunCommandErrorBlobManagedIdentity>;
    errorBlobUri?: pulumi.Input<string>;
    instanceViews?: pulumi.Input<pulumi.Input<inputs.VirtualMachineRunCommandInstanceView>[]>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    outputBlobManagedIdentity?: pulumi.Input<inputs.VirtualMachineRunCommandOutputBlobManagedIdentity>;
    outputBlobUri?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.VirtualMachineRunCommandParameter>[]>;
    protectedParameters?: pulumi.Input<pulumi.Input<inputs.VirtualMachineRunCommandProtectedParameter>[]>;
    runAsPassword?: pulumi.Input<string>;
    runAsUser?: pulumi.Input<string>;
    source?: pulumi.Input<inputs.VirtualMachineRunCommandSource>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VirtualMachineRunCommandTimeouts>;
    virtualMachineId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualMachineRunCommand resource.
 */
export interface VirtualMachineRunCommandArgs {
    errorBlobManagedIdentity?: pulumi.Input<inputs.VirtualMachineRunCommandErrorBlobManagedIdentity>;
    errorBlobUri?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    outputBlobManagedIdentity?: pulumi.Input<inputs.VirtualMachineRunCommandOutputBlobManagedIdentity>;
    outputBlobUri?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.VirtualMachineRunCommandParameter>[]>;
    protectedParameters?: pulumi.Input<pulumi.Input<inputs.VirtualMachineRunCommandProtectedParameter>[]>;
    runAsPassword?: pulumi.Input<string>;
    runAsUser?: pulumi.Input<string>;
    source: pulumi.Input<inputs.VirtualMachineRunCommandSource>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VirtualMachineRunCommandTimeouts>;
    virtualMachineId: pulumi.Input<string>;
}
