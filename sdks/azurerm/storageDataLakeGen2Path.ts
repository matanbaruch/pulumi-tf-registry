// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageDataLakeGen2Path extends pulumi.CustomResource {
    /**
     * Get an existing StorageDataLakeGen2Path resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageDataLakeGen2PathState, opts?: pulumi.CustomResourceOptions): StorageDataLakeGen2Path {
        return new StorageDataLakeGen2Path(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/storageDataLakeGen2Path:StorageDataLakeGen2Path';

    /**
     * Returns true if the given object is an instance of StorageDataLakeGen2Path.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageDataLakeGen2Path {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageDataLakeGen2Path.__pulumiType;
    }

    public readonly aces!: pulumi.Output<outputs.StorageDataLakeGen2PathAce[] | undefined>;
    public readonly filesystemName!: pulumi.Output<string>;
    public readonly group!: pulumi.Output<string>;
    public readonly owner!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<string>;
    public readonly resource!: pulumi.Output<string>;
    public readonly storageAccountId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageDataLakeGen2PathTimeouts | undefined>;

    /**
     * Create a StorageDataLakeGen2Path resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageDataLakeGen2PathArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageDataLakeGen2PathArgs | StorageDataLakeGen2PathState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageDataLakeGen2PathState | undefined;
            resourceInputs["aces"] = state ? state.aces : undefined;
            resourceInputs["filesystemName"] = state ? state.filesystemName : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["resource"] = state ? state.resource : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StorageDataLakeGen2PathArgs | undefined;
            if ((!args || args.filesystemName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filesystemName'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.resource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resource'");
            }
            if ((!args || args.storageAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            resourceInputs["aces"] = args ? args.aces : undefined;
            resourceInputs["filesystemName"] = args ? args.filesystemName : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["resource"] = args ? args.resource : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageDataLakeGen2Path.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageDataLakeGen2Path resources.
 */
export interface StorageDataLakeGen2PathState {
    aces?: pulumi.Input<pulumi.Input<inputs.StorageDataLakeGen2PathAce>[]>;
    filesystemName?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    resource?: pulumi.Input<string>;
    storageAccountId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageDataLakeGen2PathTimeouts>;
}

/**
 * The set of arguments for constructing a StorageDataLakeGen2Path resource.
 */
export interface StorageDataLakeGen2PathArgs {
    aces?: pulumi.Input<pulumi.Input<inputs.StorageDataLakeGen2PathAce>[]>;
    filesystemName: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    resource: pulumi.Input<string>;
    storageAccountId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageDataLakeGen2PathTimeouts>;
}
