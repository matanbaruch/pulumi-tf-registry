// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SiteRecoveryHypervNetworkMapping extends pulumi.CustomResource {
    /**
     * Get an existing SiteRecoveryHypervNetworkMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteRecoveryHypervNetworkMappingState, opts?: pulumi.CustomResourceOptions): SiteRecoveryHypervNetworkMapping {
        return new SiteRecoveryHypervNetworkMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/siteRecoveryHypervNetworkMapping:SiteRecoveryHypervNetworkMapping';

    /**
     * Returns true if the given object is an instance of SiteRecoveryHypervNetworkMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteRecoveryHypervNetworkMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteRecoveryHypervNetworkMapping.__pulumiType;
    }

    public readonly name!: pulumi.Output<string>;
    public readonly recoveryVaultId!: pulumi.Output<string>;
    public readonly sourceNetworkName!: pulumi.Output<string>;
    public readonly sourceSystemCenterVirtualMachineManagerName!: pulumi.Output<string>;
    public readonly targetNetworkId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SiteRecoveryHypervNetworkMappingTimeouts | undefined>;

    /**
     * Create a SiteRecoveryHypervNetworkMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteRecoveryHypervNetworkMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteRecoveryHypervNetworkMappingArgs | SiteRecoveryHypervNetworkMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteRecoveryHypervNetworkMappingState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recoveryVaultId"] = state ? state.recoveryVaultId : undefined;
            resourceInputs["sourceNetworkName"] = state ? state.sourceNetworkName : undefined;
            resourceInputs["sourceSystemCenterVirtualMachineManagerName"] = state ? state.sourceSystemCenterVirtualMachineManagerName : undefined;
            resourceInputs["targetNetworkId"] = state ? state.targetNetworkId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SiteRecoveryHypervNetworkMappingArgs | undefined;
            if ((!args || args.recoveryVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultId'");
            }
            if ((!args || args.sourceNetworkName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceNetworkName'");
            }
            if ((!args || args.sourceSystemCenterVirtualMachineManagerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceSystemCenterVirtualMachineManagerName'");
            }
            if ((!args || args.targetNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetNetworkId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recoveryVaultId"] = args ? args.recoveryVaultId : undefined;
            resourceInputs["sourceNetworkName"] = args ? args.sourceNetworkName : undefined;
            resourceInputs["sourceSystemCenterVirtualMachineManagerName"] = args ? args.sourceSystemCenterVirtualMachineManagerName : undefined;
            resourceInputs["targetNetworkId"] = args ? args.targetNetworkId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteRecoveryHypervNetworkMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteRecoveryHypervNetworkMapping resources.
 */
export interface SiteRecoveryHypervNetworkMappingState {
    name?: pulumi.Input<string>;
    recoveryVaultId?: pulumi.Input<string>;
    sourceNetworkName?: pulumi.Input<string>;
    sourceSystemCenterVirtualMachineManagerName?: pulumi.Input<string>;
    targetNetworkId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SiteRecoveryHypervNetworkMappingTimeouts>;
}

/**
 * The set of arguments for constructing a SiteRecoveryHypervNetworkMapping resource.
 */
export interface SiteRecoveryHypervNetworkMappingArgs {
    name?: pulumi.Input<string>;
    recoveryVaultId: pulumi.Input<string>;
    sourceNetworkName: pulumi.Input<string>;
    sourceSystemCenterVirtualMachineManagerName: pulumi.Input<string>;
    targetNetworkId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SiteRecoveryHypervNetworkMappingTimeouts>;
}
