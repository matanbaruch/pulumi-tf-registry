// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataFactoryDatasetMysql extends pulumi.CustomResource {
    /**
     * Get an existing DataFactoryDatasetMysql resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataFactoryDatasetMysqlState, opts?: pulumi.CustomResourceOptions): DataFactoryDatasetMysql {
        return new DataFactoryDatasetMysql(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/dataFactoryDatasetMysql:DataFactoryDatasetMysql';

    /**
     * Returns true if the given object is an instance of DataFactoryDatasetMysql.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataFactoryDatasetMysql {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataFactoryDatasetMysql.__pulumiType;
    }

    public readonly additionalProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly annotations!: pulumi.Output<string[] | undefined>;
    public readonly dataFactoryId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly folder!: pulumi.Output<string | undefined>;
    public readonly linkedServiceName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly schemaColumns!: pulumi.Output<outputs.DataFactoryDatasetMysqlSchemaColumn[] | undefined>;
    public readonly tableName!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DataFactoryDatasetMysqlTimeouts | undefined>;

    /**
     * Create a DataFactoryDatasetMysql resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataFactoryDatasetMysqlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataFactoryDatasetMysqlArgs | DataFactoryDatasetMysqlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataFactoryDatasetMysqlState | undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["linkedServiceName"] = state ? state.linkedServiceName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["schemaColumns"] = state ? state.schemaColumns : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DataFactoryDatasetMysqlArgs | undefined;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if ((!args || args.linkedServiceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkedServiceName'");
            }
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["linkedServiceName"] = args ? args.linkedServiceName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["schemaColumns"] = args ? args.schemaColumns : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataFactoryDatasetMysql.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataFactoryDatasetMysql resources.
 */
export interface DataFactoryDatasetMysqlState {
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    dataFactoryId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    linkedServiceName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    schemaColumns?: pulumi.Input<pulumi.Input<inputs.DataFactoryDatasetMysqlSchemaColumn>[]>;
    tableName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataFactoryDatasetMysqlTimeouts>;
}

/**
 * The set of arguments for constructing a DataFactoryDatasetMysql resource.
 */
export interface DataFactoryDatasetMysqlArgs {
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    dataFactoryId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    linkedServiceName: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    schemaColumns?: pulumi.Input<pulumi.Input<inputs.DataFactoryDatasetMysqlSchemaColumn>[]>;
    tableName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataFactoryDatasetMysqlTimeouts>;
}
