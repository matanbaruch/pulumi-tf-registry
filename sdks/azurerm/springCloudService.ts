// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SpringCloudService extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudServiceState, opts?: pulumi.CustomResourceOptions): SpringCloudService {
        return new SpringCloudService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/springCloudService:SpringCloudService';

    /**
     * Returns true if the given object is an instance of SpringCloudService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudService.__pulumiType;
    }

    public readonly buildAgentPoolSize!: pulumi.Output<string | undefined>;
    public readonly configServerGitSetting!: pulumi.Output<outputs.SpringCloudServiceConfigServerGitSetting | undefined>;
    public readonly containerRegistries!: pulumi.Output<outputs.SpringCloudServiceContainerRegistry[] | undefined>;
    public readonly defaultBuildService!: pulumi.Output<outputs.SpringCloudServiceDefaultBuildService | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly logStreamPublicEndpointEnabled!: pulumi.Output<boolean | undefined>;
    public readonly managedEnvironmentId!: pulumi.Output<string | undefined>;
    public readonly marketplace!: pulumi.Output<outputs.SpringCloudServiceMarketplace | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly network!: pulumi.Output<outputs.SpringCloudServiceNetwork | undefined>;
    public /*out*/ readonly outboundPublicIpAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly requiredNetworkTrafficRules!: pulumi.Output<outputs.SpringCloudServiceRequiredNetworkTrafficRule[]>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly serviceRegistryEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly serviceRegistryId!: pulumi.Output<string>;
    public readonly skuName!: pulumi.Output<string | undefined>;
    public readonly skuTier!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SpringCloudServiceTimeouts | undefined>;
    public readonly trace!: pulumi.Output<outputs.SpringCloudServiceTrace | undefined>;
    public readonly zoneRedundant!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SpringCloudService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudServiceArgs | SpringCloudServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudServiceState | undefined;
            resourceInputs["buildAgentPoolSize"] = state ? state.buildAgentPoolSize : undefined;
            resourceInputs["configServerGitSetting"] = state ? state.configServerGitSetting : undefined;
            resourceInputs["containerRegistries"] = state ? state.containerRegistries : undefined;
            resourceInputs["defaultBuildService"] = state ? state.defaultBuildService : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logStreamPublicEndpointEnabled"] = state ? state.logStreamPublicEndpointEnabled : undefined;
            resourceInputs["managedEnvironmentId"] = state ? state.managedEnvironmentId : undefined;
            resourceInputs["marketplace"] = state ? state.marketplace : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["outboundPublicIpAddresses"] = state ? state.outboundPublicIpAddresses : undefined;
            resourceInputs["requiredNetworkTrafficRules"] = state ? state.requiredNetworkTrafficRules : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["serviceRegistryEnabled"] = state ? state.serviceRegistryEnabled : undefined;
            resourceInputs["serviceRegistryId"] = state ? state.serviceRegistryId : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["skuTier"] = state ? state.skuTier : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trace"] = state ? state.trace : undefined;
            resourceInputs["zoneRedundant"] = state ? state.zoneRedundant : undefined;
        } else {
            const args = argsOrState as SpringCloudServiceArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["buildAgentPoolSize"] = args ? args.buildAgentPoolSize : undefined;
            resourceInputs["configServerGitSetting"] = args ? args.configServerGitSetting : undefined;
            resourceInputs["containerRegistries"] = args ? args.containerRegistries : undefined;
            resourceInputs["defaultBuildService"] = args ? args.defaultBuildService : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logStreamPublicEndpointEnabled"] = args ? args.logStreamPublicEndpointEnabled : undefined;
            resourceInputs["managedEnvironmentId"] = args ? args.managedEnvironmentId : undefined;
            resourceInputs["marketplace"] = args ? args.marketplace : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serviceRegistryEnabled"] = args ? args.serviceRegistryEnabled : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["skuTier"] = args ? args.skuTier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trace"] = args ? args.trace : undefined;
            resourceInputs["zoneRedundant"] = args ? args.zoneRedundant : undefined;
            resourceInputs["outboundPublicIpAddresses"] = undefined /*out*/;
            resourceInputs["requiredNetworkTrafficRules"] = undefined /*out*/;
            resourceInputs["serviceRegistryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpringCloudService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudService resources.
 */
export interface SpringCloudServiceState {
    buildAgentPoolSize?: pulumi.Input<string>;
    configServerGitSetting?: pulumi.Input<inputs.SpringCloudServiceConfigServerGitSetting>;
    containerRegistries?: pulumi.Input<pulumi.Input<inputs.SpringCloudServiceContainerRegistry>[]>;
    defaultBuildService?: pulumi.Input<inputs.SpringCloudServiceDefaultBuildService>;
    location?: pulumi.Input<string>;
    logStreamPublicEndpointEnabled?: pulumi.Input<boolean>;
    managedEnvironmentId?: pulumi.Input<string>;
    marketplace?: pulumi.Input<inputs.SpringCloudServiceMarketplace>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<inputs.SpringCloudServiceNetwork>;
    outboundPublicIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    requiredNetworkTrafficRules?: pulumi.Input<pulumi.Input<inputs.SpringCloudServiceRequiredNetworkTrafficRule>[]>;
    resourceGroupName?: pulumi.Input<string>;
    serviceRegistryEnabled?: pulumi.Input<boolean>;
    serviceRegistryId?: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    skuTier?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SpringCloudServiceTimeouts>;
    trace?: pulumi.Input<inputs.SpringCloudServiceTrace>;
    zoneRedundant?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SpringCloudService resource.
 */
export interface SpringCloudServiceArgs {
    buildAgentPoolSize?: pulumi.Input<string>;
    configServerGitSetting?: pulumi.Input<inputs.SpringCloudServiceConfigServerGitSetting>;
    containerRegistries?: pulumi.Input<pulumi.Input<inputs.SpringCloudServiceContainerRegistry>[]>;
    defaultBuildService?: pulumi.Input<inputs.SpringCloudServiceDefaultBuildService>;
    location: pulumi.Input<string>;
    logStreamPublicEndpointEnabled?: pulumi.Input<boolean>;
    managedEnvironmentId?: pulumi.Input<string>;
    marketplace?: pulumi.Input<inputs.SpringCloudServiceMarketplace>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<inputs.SpringCloudServiceNetwork>;
    resourceGroupName: pulumi.Input<string>;
    serviceRegistryEnabled?: pulumi.Input<boolean>;
    skuName?: pulumi.Input<string>;
    skuTier?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SpringCloudServiceTimeouts>;
    trace?: pulumi.Input<inputs.SpringCloudServiceTrace>;
    zoneRedundant?: pulumi.Input<boolean>;
}
