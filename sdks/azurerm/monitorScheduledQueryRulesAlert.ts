// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitorScheduledQueryRulesAlert extends pulumi.CustomResource {
    /**
     * Get an existing MonitorScheduledQueryRulesAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorScheduledQueryRulesAlertState, opts?: pulumi.CustomResourceOptions): MonitorScheduledQueryRulesAlert {
        return new MonitorScheduledQueryRulesAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/monitorScheduledQueryRulesAlert:MonitorScheduledQueryRulesAlert';

    /**
     * Returns true if the given object is an instance of MonitorScheduledQueryRulesAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorScheduledQueryRulesAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorScheduledQueryRulesAlert.__pulumiType;
    }

    public readonly action!: pulumi.Output<outputs.MonitorScheduledQueryRulesAlertAction>;
    public readonly authorizedResourceIds!: pulumi.Output<string[] | undefined>;
    public readonly autoMitigationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly dataSourceId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly frequency!: pulumi.Output<number>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly query!: pulumi.Output<string>;
    public readonly queryType!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly severity!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly throttling!: pulumi.Output<number | undefined>;
    public readonly timeWindow!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.MonitorScheduledQueryRulesAlertTimeouts | undefined>;
    public readonly trigger!: pulumi.Output<outputs.MonitorScheduledQueryRulesAlertTrigger>;

    /**
     * Create a MonitorScheduledQueryRulesAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorScheduledQueryRulesAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorScheduledQueryRulesAlertArgs | MonitorScheduledQueryRulesAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorScheduledQueryRulesAlertState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["authorizedResourceIds"] = state ? state.authorizedResourceIds : undefined;
            resourceInputs["autoMitigationEnabled"] = state ? state.autoMitigationEnabled : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["queryType"] = state ? state.queryType : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throttling"] = state ? state.throttling : undefined;
            resourceInputs["timeWindow"] = state ? state.timeWindow : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
        } else {
            const args = argsOrState as MonitorScheduledQueryRulesAlertArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.dataSourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceId'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.timeWindow === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeWindow'");
            }
            if ((!args || args.trigger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trigger'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["authorizedResourceIds"] = args ? args.authorizedResourceIds : undefined;
            resourceInputs["autoMitigationEnabled"] = args ? args.autoMitigationEnabled : undefined;
            resourceInputs["dataSourceId"] = args ? args.dataSourceId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["queryType"] = args ? args.queryType : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throttling"] = args ? args.throttling : undefined;
            resourceInputs["timeWindow"] = args ? args.timeWindow : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorScheduledQueryRulesAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorScheduledQueryRulesAlert resources.
 */
export interface MonitorScheduledQueryRulesAlertState {
    action?: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertAction>;
    authorizedResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    autoMitigationEnabled?: pulumi.Input<boolean>;
    dataSourceId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    frequency?: pulumi.Input<number>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    queryType?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    severity?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throttling?: pulumi.Input<number>;
    timeWindow?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertTimeouts>;
    trigger?: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertTrigger>;
}

/**
 * The set of arguments for constructing a MonitorScheduledQueryRulesAlert resource.
 */
export interface MonitorScheduledQueryRulesAlertArgs {
    action: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertAction>;
    authorizedResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    autoMitigationEnabled?: pulumi.Input<boolean>;
    dataSourceId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    frequency: pulumi.Input<number>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    queryType?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    severity?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throttling?: pulumi.Input<number>;
    timeWindow: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertTimeouts>;
    trigger: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertTrigger>;
}
