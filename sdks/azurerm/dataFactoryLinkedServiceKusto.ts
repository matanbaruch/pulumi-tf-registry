// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataFactoryLinkedServiceKusto extends pulumi.CustomResource {
    /**
     * Get an existing DataFactoryLinkedServiceKusto resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataFactoryLinkedServiceKustoState, opts?: pulumi.CustomResourceOptions): DataFactoryLinkedServiceKusto {
        return new DataFactoryLinkedServiceKusto(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/dataFactoryLinkedServiceKusto:DataFactoryLinkedServiceKusto';

    /**
     * Returns true if the given object is an instance of DataFactoryLinkedServiceKusto.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataFactoryLinkedServiceKusto {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataFactoryLinkedServiceKusto.__pulumiType;
    }

    public readonly additionalProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly annotations!: pulumi.Output<string[] | undefined>;
    public readonly dataFactoryId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly integrationRuntimeName!: pulumi.Output<string | undefined>;
    public readonly kustoDatabaseName!: pulumi.Output<string>;
    public readonly kustoEndpoint!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly servicePrincipalId!: pulumi.Output<string | undefined>;
    public readonly servicePrincipalKey!: pulumi.Output<string | undefined>;
    public readonly tenant!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DataFactoryLinkedServiceKustoTimeouts | undefined>;
    public readonly useManagedIdentity!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DataFactoryLinkedServiceKusto resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataFactoryLinkedServiceKustoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataFactoryLinkedServiceKustoArgs | DataFactoryLinkedServiceKustoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataFactoryLinkedServiceKustoState | undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["integrationRuntimeName"] = state ? state.integrationRuntimeName : undefined;
            resourceInputs["kustoDatabaseName"] = state ? state.kustoDatabaseName : undefined;
            resourceInputs["kustoEndpoint"] = state ? state.kustoEndpoint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["servicePrincipalId"] = state ? state.servicePrincipalId : undefined;
            resourceInputs["servicePrincipalKey"] = state ? state.servicePrincipalKey : undefined;
            resourceInputs["tenant"] = state ? state.tenant : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useManagedIdentity"] = state ? state.useManagedIdentity : undefined;
        } else {
            const args = argsOrState as DataFactoryLinkedServiceKustoArgs | undefined;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if ((!args || args.kustoDatabaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kustoDatabaseName'");
            }
            if ((!args || args.kustoEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kustoEndpoint'");
            }
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["integrationRuntimeName"] = args ? args.integrationRuntimeName : undefined;
            resourceInputs["kustoDatabaseName"] = args ? args.kustoDatabaseName : undefined;
            resourceInputs["kustoEndpoint"] = args ? args.kustoEndpoint : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["servicePrincipalId"] = args ? args.servicePrincipalId : undefined;
            resourceInputs["servicePrincipalKey"] = args?.servicePrincipalKey ? pulumi.secret(args.servicePrincipalKey) : undefined;
            resourceInputs["tenant"] = args ? args.tenant : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useManagedIdentity"] = args ? args.useManagedIdentity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["servicePrincipalKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DataFactoryLinkedServiceKusto.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataFactoryLinkedServiceKusto resources.
 */
export interface DataFactoryLinkedServiceKustoState {
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    dataFactoryId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    integrationRuntimeName?: pulumi.Input<string>;
    kustoDatabaseName?: pulumi.Input<string>;
    kustoEndpoint?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    servicePrincipalId?: pulumi.Input<string>;
    servicePrincipalKey?: pulumi.Input<string>;
    tenant?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataFactoryLinkedServiceKustoTimeouts>;
    useManagedIdentity?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DataFactoryLinkedServiceKusto resource.
 */
export interface DataFactoryLinkedServiceKustoArgs {
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    dataFactoryId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    integrationRuntimeName?: pulumi.Input<string>;
    kustoDatabaseName: pulumi.Input<string>;
    kustoEndpoint: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    servicePrincipalId?: pulumi.Input<string>;
    servicePrincipalKey?: pulumi.Input<string>;
    tenant?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataFactoryLinkedServiceKustoTimeouts>;
    useManagedIdentity?: pulumi.Input<boolean>;
}
