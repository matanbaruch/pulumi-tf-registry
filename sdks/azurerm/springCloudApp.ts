// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SpringCloudApp extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudAppState, opts?: pulumi.CustomResourceOptions): SpringCloudApp {
        return new SpringCloudApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/springCloudApp:SpringCloudApp';

    /**
     * Returns true if the given object is an instance of SpringCloudApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudApp.__pulumiType;
    }

    public readonly addonJson!: pulumi.Output<string>;
    public readonly customPersistentDisks!: pulumi.Output<outputs.SpringCloudAppCustomPersistentDisk[] | undefined>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly httpsOnly!: pulumi.Output<boolean | undefined>;
    public readonly identity!: pulumi.Output<outputs.SpringCloudAppIdentity | undefined>;
    public readonly ingressSettings!: pulumi.Output<outputs.SpringCloudAppIngressSettings | undefined>;
    public readonly isPublic!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly persistentDisk!: pulumi.Output<outputs.SpringCloudAppPersistentDisk | undefined>;
    public readonly publicEndpointEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly serviceName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SpringCloudAppTimeouts | undefined>;
    public readonly tlsEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a SpringCloudApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudAppArgs | SpringCloudAppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudAppState | undefined;
            resourceInputs["addonJson"] = state ? state.addonJson : undefined;
            resourceInputs["customPersistentDisks"] = state ? state.customPersistentDisks : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["httpsOnly"] = state ? state.httpsOnly : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["ingressSettings"] = state ? state.ingressSettings : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["persistentDisk"] = state ? state.persistentDisk : undefined;
            resourceInputs["publicEndpointEnabled"] = state ? state.publicEndpointEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tlsEnabled"] = state ? state.tlsEnabled : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as SpringCloudAppArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["addonJson"] = args ? args.addonJson : undefined;
            resourceInputs["customPersistentDisks"] = args ? args.customPersistentDisks : undefined;
            resourceInputs["httpsOnly"] = args ? args.httpsOnly : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["ingressSettings"] = args ? args.ingressSettings : undefined;
            resourceInputs["isPublic"] = args ? args.isPublic : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistentDisk"] = args ? args.persistentDisk : undefined;
            resourceInputs["publicEndpointEnabled"] = args ? args.publicEndpointEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tlsEnabled"] = args ? args.tlsEnabled : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpringCloudApp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudApp resources.
 */
export interface SpringCloudAppState {
    addonJson?: pulumi.Input<string>;
    customPersistentDisks?: pulumi.Input<pulumi.Input<inputs.SpringCloudAppCustomPersistentDisk>[]>;
    fqdn?: pulumi.Input<string>;
    httpsOnly?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.SpringCloudAppIdentity>;
    ingressSettings?: pulumi.Input<inputs.SpringCloudAppIngressSettings>;
    isPublic?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    persistentDisk?: pulumi.Input<inputs.SpringCloudAppPersistentDisk>;
    publicEndpointEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SpringCloudAppTimeouts>;
    tlsEnabled?: pulumi.Input<boolean>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpringCloudApp resource.
 */
export interface SpringCloudAppArgs {
    addonJson?: pulumi.Input<string>;
    customPersistentDisks?: pulumi.Input<pulumi.Input<inputs.SpringCloudAppCustomPersistentDisk>[]>;
    httpsOnly?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.SpringCloudAppIdentity>;
    ingressSettings?: pulumi.Input<inputs.SpringCloudAppIngressSettings>;
    isPublic?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    persistentDisk?: pulumi.Input<inputs.SpringCloudAppPersistentDisk>;
    publicEndpointEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SpringCloudAppTimeouts>;
    tlsEnabled?: pulumi.Input<boolean>;
}
