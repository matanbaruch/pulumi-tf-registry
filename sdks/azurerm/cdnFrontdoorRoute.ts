// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CdnFrontdoorRoute extends pulumi.CustomResource {
    /**
     * Get an existing CdnFrontdoorRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdnFrontdoorRouteState, opts?: pulumi.CustomResourceOptions): CdnFrontdoorRoute {
        return new CdnFrontdoorRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/cdnFrontdoorRoute:CdnFrontdoorRoute';

    /**
     * Returns true if the given object is an instance of CdnFrontdoorRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdnFrontdoorRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdnFrontdoorRoute.__pulumiType;
    }

    public readonly cache!: pulumi.Output<outputs.CdnFrontdoorRouteCache | undefined>;
    public readonly cdnFrontdoorCustomDomainIds!: pulumi.Output<string[] | undefined>;
    public readonly cdnFrontdoorEndpointId!: pulumi.Output<string>;
    public readonly cdnFrontdoorOriginGroupId!: pulumi.Output<string>;
    public readonly cdnFrontdoorOriginIds!: pulumi.Output<string[]>;
    public readonly cdnFrontdoorOriginPath!: pulumi.Output<string | undefined>;
    public readonly cdnFrontdoorRuleSetIds!: pulumi.Output<string[] | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly forwardingProtocol!: pulumi.Output<string | undefined>;
    public readonly httpsRedirectEnabled!: pulumi.Output<boolean | undefined>;
    public readonly linkToDefaultDomain!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly patternsToMatches!: pulumi.Output<string[]>;
    public readonly supportedProtocols!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.CdnFrontdoorRouteTimeouts | undefined>;

    /**
     * Create a CdnFrontdoorRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdnFrontdoorRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdnFrontdoorRouteArgs | CdnFrontdoorRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdnFrontdoorRouteState | undefined;
            resourceInputs["cache"] = state ? state.cache : undefined;
            resourceInputs["cdnFrontdoorCustomDomainIds"] = state ? state.cdnFrontdoorCustomDomainIds : undefined;
            resourceInputs["cdnFrontdoorEndpointId"] = state ? state.cdnFrontdoorEndpointId : undefined;
            resourceInputs["cdnFrontdoorOriginGroupId"] = state ? state.cdnFrontdoorOriginGroupId : undefined;
            resourceInputs["cdnFrontdoorOriginIds"] = state ? state.cdnFrontdoorOriginIds : undefined;
            resourceInputs["cdnFrontdoorOriginPath"] = state ? state.cdnFrontdoorOriginPath : undefined;
            resourceInputs["cdnFrontdoorRuleSetIds"] = state ? state.cdnFrontdoorRuleSetIds : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["forwardingProtocol"] = state ? state.forwardingProtocol : undefined;
            resourceInputs["httpsRedirectEnabled"] = state ? state.httpsRedirectEnabled : undefined;
            resourceInputs["linkToDefaultDomain"] = state ? state.linkToDefaultDomain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["patternsToMatches"] = state ? state.patternsToMatches : undefined;
            resourceInputs["supportedProtocols"] = state ? state.supportedProtocols : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CdnFrontdoorRouteArgs | undefined;
            if ((!args || args.cdnFrontdoorEndpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorEndpointId'");
            }
            if ((!args || args.cdnFrontdoorOriginGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorOriginGroupId'");
            }
            if ((!args || args.cdnFrontdoorOriginIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdnFrontdoorOriginIds'");
            }
            if ((!args || args.patternsToMatches === undefined) && !opts.urn) {
                throw new Error("Missing required property 'patternsToMatches'");
            }
            if ((!args || args.supportedProtocols === undefined) && !opts.urn) {
                throw new Error("Missing required property 'supportedProtocols'");
            }
            resourceInputs["cache"] = args ? args.cache : undefined;
            resourceInputs["cdnFrontdoorCustomDomainIds"] = args ? args.cdnFrontdoorCustomDomainIds : undefined;
            resourceInputs["cdnFrontdoorEndpointId"] = args ? args.cdnFrontdoorEndpointId : undefined;
            resourceInputs["cdnFrontdoorOriginGroupId"] = args ? args.cdnFrontdoorOriginGroupId : undefined;
            resourceInputs["cdnFrontdoorOriginIds"] = args ? args.cdnFrontdoorOriginIds : undefined;
            resourceInputs["cdnFrontdoorOriginPath"] = args ? args.cdnFrontdoorOriginPath : undefined;
            resourceInputs["cdnFrontdoorRuleSetIds"] = args ? args.cdnFrontdoorRuleSetIds : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["forwardingProtocol"] = args ? args.forwardingProtocol : undefined;
            resourceInputs["httpsRedirectEnabled"] = args ? args.httpsRedirectEnabled : undefined;
            resourceInputs["linkToDefaultDomain"] = args ? args.linkToDefaultDomain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["patternsToMatches"] = args ? args.patternsToMatches : undefined;
            resourceInputs["supportedProtocols"] = args ? args.supportedProtocols : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CdnFrontdoorRoute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CdnFrontdoorRoute resources.
 */
export interface CdnFrontdoorRouteState {
    cache?: pulumi.Input<inputs.CdnFrontdoorRouteCache>;
    cdnFrontdoorCustomDomainIds?: pulumi.Input<pulumi.Input<string>[]>;
    cdnFrontdoorEndpointId?: pulumi.Input<string>;
    cdnFrontdoorOriginGroupId?: pulumi.Input<string>;
    cdnFrontdoorOriginIds?: pulumi.Input<pulumi.Input<string>[]>;
    cdnFrontdoorOriginPath?: pulumi.Input<string>;
    cdnFrontdoorRuleSetIds?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    forwardingProtocol?: pulumi.Input<string>;
    httpsRedirectEnabled?: pulumi.Input<boolean>;
    linkToDefaultDomain?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    patternsToMatches?: pulumi.Input<pulumi.Input<string>[]>;
    supportedProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.CdnFrontdoorRouteTimeouts>;
}

/**
 * The set of arguments for constructing a CdnFrontdoorRoute resource.
 */
export interface CdnFrontdoorRouteArgs {
    cache?: pulumi.Input<inputs.CdnFrontdoorRouteCache>;
    cdnFrontdoorCustomDomainIds?: pulumi.Input<pulumi.Input<string>[]>;
    cdnFrontdoorEndpointId: pulumi.Input<string>;
    cdnFrontdoorOriginGroupId: pulumi.Input<string>;
    cdnFrontdoorOriginIds: pulumi.Input<pulumi.Input<string>[]>;
    cdnFrontdoorOriginPath?: pulumi.Input<string>;
    cdnFrontdoorRuleSetIds?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    forwardingProtocol?: pulumi.Input<string>;
    httpsRedirectEnabled?: pulumi.Input<boolean>;
    linkToDefaultDomain?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    patternsToMatches: pulumi.Input<pulumi.Input<string>[]>;
    supportedProtocols: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.CdnFrontdoorRouteTimeouts>;
}
