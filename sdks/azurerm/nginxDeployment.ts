// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NginxDeployment extends pulumi.CustomResource {
    /**
     * Get an existing NginxDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NginxDeploymentState, opts?: pulumi.CustomResourceOptions): NginxDeployment {
        return new NginxDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/nginxDeployment:NginxDeployment';

    /**
     * Returns true if the given object is an instance of NginxDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NginxDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NginxDeployment.__pulumiType;
    }

    public readonly autoScaleProfiles!: pulumi.Output<outputs.NginxDeploymentAutoScaleProfile[] | undefined>;
    public readonly automaticUpgradeChannel!: pulumi.Output<string | undefined>;
    public readonly capacity!: pulumi.Output<number | undefined>;
    public readonly diagnoseSupportEnabled!: pulumi.Output<boolean | undefined>;
    public readonly email!: pulumi.Output<string | undefined>;
    public readonly frontendPrivates!: pulumi.Output<outputs.NginxDeploymentFrontendPrivate[] | undefined>;
    public readonly frontendPublic!: pulumi.Output<outputs.NginxDeploymentFrontendPublic | undefined>;
    public readonly identity!: pulumi.Output<outputs.NginxDeploymentIdentity | undefined>;
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly loggingStorageAccounts!: pulumi.Output<outputs.NginxDeploymentLoggingStorageAccount[] | undefined>;
    public readonly managedResourceGroup!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaces!: pulumi.Output<outputs.NginxDeploymentNetworkInterface[] | undefined>;
    public /*out*/ readonly nginxVersion!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly sku!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NginxDeploymentTimeouts | undefined>;

    /**
     * Create a NginxDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NginxDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NginxDeploymentArgs | NginxDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NginxDeploymentState | undefined;
            resourceInputs["autoScaleProfiles"] = state ? state.autoScaleProfiles : undefined;
            resourceInputs["automaticUpgradeChannel"] = state ? state.automaticUpgradeChannel : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["diagnoseSupportEnabled"] = state ? state.diagnoseSupportEnabled : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["frontendPrivates"] = state ? state.frontendPrivates : undefined;
            resourceInputs["frontendPublic"] = state ? state.frontendPublic : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["loggingStorageAccounts"] = state ? state.loggingStorageAccounts : undefined;
            resourceInputs["managedResourceGroup"] = state ? state.managedResourceGroup : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["nginxVersion"] = state ? state.nginxVersion : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NginxDeploymentArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["autoScaleProfiles"] = args ? args.autoScaleProfiles : undefined;
            resourceInputs["automaticUpgradeChannel"] = args ? args.automaticUpgradeChannel : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["diagnoseSupportEnabled"] = args ? args.diagnoseSupportEnabled : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["frontendPrivates"] = args ? args.frontendPrivates : undefined;
            resourceInputs["frontendPublic"] = args ? args.frontendPublic : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["loggingStorageAccounts"] = args ? args.loggingStorageAccounts : undefined;
            resourceInputs["managedResourceGroup"] = args ? args.managedResourceGroup : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["nginxVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NginxDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NginxDeployment resources.
 */
export interface NginxDeploymentState {
    autoScaleProfiles?: pulumi.Input<pulumi.Input<inputs.NginxDeploymentAutoScaleProfile>[]>;
    automaticUpgradeChannel?: pulumi.Input<string>;
    capacity?: pulumi.Input<number>;
    diagnoseSupportEnabled?: pulumi.Input<boolean>;
    email?: pulumi.Input<string>;
    frontendPrivates?: pulumi.Input<pulumi.Input<inputs.NginxDeploymentFrontendPrivate>[]>;
    frontendPublic?: pulumi.Input<inputs.NginxDeploymentFrontendPublic>;
    identity?: pulumi.Input<inputs.NginxDeploymentIdentity>;
    ipAddress?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    loggingStorageAccounts?: pulumi.Input<pulumi.Input<inputs.NginxDeploymentLoggingStorageAccount>[]>;
    managedResourceGroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.NginxDeploymentNetworkInterface>[]>;
    nginxVersion?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NginxDeploymentTimeouts>;
}

/**
 * The set of arguments for constructing a NginxDeployment resource.
 */
export interface NginxDeploymentArgs {
    autoScaleProfiles?: pulumi.Input<pulumi.Input<inputs.NginxDeploymentAutoScaleProfile>[]>;
    automaticUpgradeChannel?: pulumi.Input<string>;
    capacity?: pulumi.Input<number>;
    diagnoseSupportEnabled?: pulumi.Input<boolean>;
    email?: pulumi.Input<string>;
    frontendPrivates?: pulumi.Input<pulumi.Input<inputs.NginxDeploymentFrontendPrivate>[]>;
    frontendPublic?: pulumi.Input<inputs.NginxDeploymentFrontendPublic>;
    identity?: pulumi.Input<inputs.NginxDeploymentIdentity>;
    location: pulumi.Input<string>;
    loggingStorageAccounts?: pulumi.Input<pulumi.Input<inputs.NginxDeploymentLoggingStorageAccount>[]>;
    managedResourceGroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.NginxDeploymentNetworkInterface>[]>;
    resourceGroupName: pulumi.Input<string>;
    sku: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NginxDeploymentTimeouts>;
}
