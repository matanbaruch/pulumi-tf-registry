// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Firewall extends pulumi.CustomResource {
    /**
     * Get an existing Firewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallState, opts?: pulumi.CustomResourceOptions): Firewall {
        return new Firewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/firewall:Firewall';

    /**
     * Returns true if the given object is an instance of Firewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Firewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Firewall.__pulumiType;
    }

    public readonly dnsProxyEnabled!: pulumi.Output<boolean>;
    public readonly dnsServers!: pulumi.Output<string[] | undefined>;
    public readonly firewallPolicyId!: pulumi.Output<string | undefined>;
    public readonly ipConfigurations!: pulumi.Output<outputs.FirewallIpConfiguration[] | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly managementIpConfiguration!: pulumi.Output<outputs.FirewallManagementIpConfiguration | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly privateIpRanges!: pulumi.Output<string[] | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly skuTier!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly threatIntelMode!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FirewallTimeouts | undefined>;
    public readonly virtualHub!: pulumi.Output<outputs.FirewallVirtualHub | undefined>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Firewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallArgs | FirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallState | undefined;
            resourceInputs["dnsProxyEnabled"] = state ? state.dnsProxyEnabled : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["firewallPolicyId"] = state ? state.firewallPolicyId : undefined;
            resourceInputs["ipConfigurations"] = state ? state.ipConfigurations : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managementIpConfiguration"] = state ? state.managementIpConfiguration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateIpRanges"] = state ? state.privateIpRanges : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["skuTier"] = state ? state.skuTier : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threatIntelMode"] = state ? state.threatIntelMode : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualHub"] = state ? state.virtualHub : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as FirewallArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if ((!args || args.skuTier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuTier'");
            }
            resourceInputs["dnsProxyEnabled"] = args ? args.dnsProxyEnabled : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["firewallPolicyId"] = args ? args.firewallPolicyId : undefined;
            resourceInputs["ipConfigurations"] = args ? args.ipConfigurations : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managementIpConfiguration"] = args ? args.managementIpConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateIpRanges"] = args ? args.privateIpRanges : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["skuTier"] = args ? args.skuTier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threatIntelMode"] = args ? args.threatIntelMode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualHub"] = args ? args.virtualHub : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Firewall.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Firewall resources.
 */
export interface FirewallState {
    dnsProxyEnabled?: pulumi.Input<boolean>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    firewallPolicyId?: pulumi.Input<string>;
    ipConfigurations?: pulumi.Input<pulumi.Input<inputs.FirewallIpConfiguration>[]>;
    location?: pulumi.Input<string>;
    managementIpConfiguration?: pulumi.Input<inputs.FirewallManagementIpConfiguration>;
    name?: pulumi.Input<string>;
    privateIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupName?: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    skuTier?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    threatIntelMode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirewallTimeouts>;
    virtualHub?: pulumi.Input<inputs.FirewallVirtualHub>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Firewall resource.
 */
export interface FirewallArgs {
    dnsProxyEnabled?: pulumi.Input<boolean>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    firewallPolicyId?: pulumi.Input<string>;
    ipConfigurations?: pulumi.Input<pulumi.Input<inputs.FirewallIpConfiguration>[]>;
    location: pulumi.Input<string>;
    managementIpConfiguration?: pulumi.Input<inputs.FirewallManagementIpConfiguration>;
    name?: pulumi.Input<string>;
    privateIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupName: pulumi.Input<string>;
    skuName: pulumi.Input<string>;
    skuTier: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    threatIntelMode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirewallTimeouts>;
    virtualHub?: pulumi.Input<inputs.FirewallVirtualHub>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
