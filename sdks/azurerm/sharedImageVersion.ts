// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SharedImageVersion extends pulumi.CustomResource {
    /**
     * Get an existing SharedImageVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedImageVersionState, opts?: pulumi.CustomResourceOptions): SharedImageVersion {
        return new SharedImageVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/sharedImageVersion:SharedImageVersion';

    /**
     * Returns true if the given object is an instance of SharedImageVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SharedImageVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedImageVersion.__pulumiType;
    }

    public readonly blobUri!: pulumi.Output<string | undefined>;
    public readonly deletionOfReplicatedLocationsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly endOfLifeDate!: pulumi.Output<string | undefined>;
    public readonly excludeFromLatest!: pulumi.Output<boolean | undefined>;
    public readonly galleryName!: pulumi.Output<string>;
    public readonly imageName!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly managedImageId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly osDiskSnapshotId!: pulumi.Output<string | undefined>;
    public readonly replicationMode!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly storageAccountId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly targetRegions!: pulumi.Output<outputs.SharedImageVersionTargetRegion[]>;
    public readonly timeouts!: pulumi.Output<outputs.SharedImageVersionTimeouts | undefined>;

    /**
     * Create a SharedImageVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedImageVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedImageVersionArgs | SharedImageVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SharedImageVersionState | undefined;
            resourceInputs["blobUri"] = state ? state.blobUri : undefined;
            resourceInputs["deletionOfReplicatedLocationsEnabled"] = state ? state.deletionOfReplicatedLocationsEnabled : undefined;
            resourceInputs["endOfLifeDate"] = state ? state.endOfLifeDate : undefined;
            resourceInputs["excludeFromLatest"] = state ? state.excludeFromLatest : undefined;
            resourceInputs["galleryName"] = state ? state.galleryName : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedImageId"] = state ? state.managedImageId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osDiskSnapshotId"] = state ? state.osDiskSnapshotId : undefined;
            resourceInputs["replicationMode"] = state ? state.replicationMode : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetRegions"] = state ? state.targetRegions : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SharedImageVersionArgs | undefined;
            if ((!args || args.galleryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'galleryName'");
            }
            if ((!args || args.imageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.targetRegions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRegions'");
            }
            resourceInputs["blobUri"] = args ? args.blobUri : undefined;
            resourceInputs["deletionOfReplicatedLocationsEnabled"] = args ? args.deletionOfReplicatedLocationsEnabled : undefined;
            resourceInputs["endOfLifeDate"] = args ? args.endOfLifeDate : undefined;
            resourceInputs["excludeFromLatest"] = args ? args.excludeFromLatest : undefined;
            resourceInputs["galleryName"] = args ? args.galleryName : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedImageId"] = args ? args.managedImageId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osDiskSnapshotId"] = args ? args.osDiskSnapshotId : undefined;
            resourceInputs["replicationMode"] = args ? args.replicationMode : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetRegions"] = args ? args.targetRegions : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SharedImageVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SharedImageVersion resources.
 */
export interface SharedImageVersionState {
    blobUri?: pulumi.Input<string>;
    deletionOfReplicatedLocationsEnabled?: pulumi.Input<boolean>;
    endOfLifeDate?: pulumi.Input<string>;
    excludeFromLatest?: pulumi.Input<boolean>;
    galleryName?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    managedImageId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    osDiskSnapshotId?: pulumi.Input<string>;
    replicationMode?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    storageAccountId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetRegions?: pulumi.Input<pulumi.Input<inputs.SharedImageVersionTargetRegion>[]>;
    timeouts?: pulumi.Input<inputs.SharedImageVersionTimeouts>;
}

/**
 * The set of arguments for constructing a SharedImageVersion resource.
 */
export interface SharedImageVersionArgs {
    blobUri?: pulumi.Input<string>;
    deletionOfReplicatedLocationsEnabled?: pulumi.Input<boolean>;
    endOfLifeDate?: pulumi.Input<string>;
    excludeFromLatest?: pulumi.Input<boolean>;
    galleryName: pulumi.Input<string>;
    imageName: pulumi.Input<string>;
    location: pulumi.Input<string>;
    managedImageId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    osDiskSnapshotId?: pulumi.Input<string>;
    replicationMode?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    storageAccountId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetRegions: pulumi.Input<pulumi.Input<inputs.SharedImageVersionTargetRegion>[]>;
    timeouts?: pulumi.Input<inputs.SharedImageVersionTimeouts>;
}
