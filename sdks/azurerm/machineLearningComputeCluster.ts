// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MachineLearningComputeCluster extends pulumi.CustomResource {
    /**
     * Get an existing MachineLearningComputeCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MachineLearningComputeClusterState, opts?: pulumi.CustomResourceOptions): MachineLearningComputeCluster {
        return new MachineLearningComputeCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/machineLearningComputeCluster:MachineLearningComputeCluster';

    /**
     * Returns true if the given object is an instance of MachineLearningComputeCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MachineLearningComputeCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MachineLearningComputeCluster.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly identity!: pulumi.Output<outputs.MachineLearningComputeClusterIdentity | undefined>;
    public readonly localAuthEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly machineLearningWorkspaceId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodePublicIpEnabled!: pulumi.Output<boolean | undefined>;
    public readonly scaleSettings!: pulumi.Output<outputs.MachineLearningComputeClusterScaleSettings>;
    public readonly ssh!: pulumi.Output<outputs.MachineLearningComputeClusterSsh | undefined>;
    public readonly sshPublicAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly subnetResourceId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MachineLearningComputeClusterTimeouts | undefined>;
    public readonly vmPriority!: pulumi.Output<string>;
    public readonly vmSize!: pulumi.Output<string>;

    /**
     * Create a MachineLearningComputeCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MachineLearningComputeClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MachineLearningComputeClusterArgs | MachineLearningComputeClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MachineLearningComputeClusterState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["localAuthEnabled"] = state ? state.localAuthEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["machineLearningWorkspaceId"] = state ? state.machineLearningWorkspaceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodePublicIpEnabled"] = state ? state.nodePublicIpEnabled : undefined;
            resourceInputs["scaleSettings"] = state ? state.scaleSettings : undefined;
            resourceInputs["ssh"] = state ? state.ssh : undefined;
            resourceInputs["sshPublicAccessEnabled"] = state ? state.sshPublicAccessEnabled : undefined;
            resourceInputs["subnetResourceId"] = state ? state.subnetResourceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vmPriority"] = state ? state.vmPriority : undefined;
            resourceInputs["vmSize"] = state ? state.vmSize : undefined;
        } else {
            const args = argsOrState as MachineLearningComputeClusterArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.machineLearningWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineLearningWorkspaceId'");
            }
            if ((!args || args.scaleSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scaleSettings'");
            }
            if ((!args || args.vmPriority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmPriority'");
            }
            if ((!args || args.vmSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmSize'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["localAuthEnabled"] = args ? args.localAuthEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["machineLearningWorkspaceId"] = args ? args.machineLearningWorkspaceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodePublicIpEnabled"] = args ? args.nodePublicIpEnabled : undefined;
            resourceInputs["scaleSettings"] = args ? args.scaleSettings : undefined;
            resourceInputs["ssh"] = args ? args.ssh : undefined;
            resourceInputs["sshPublicAccessEnabled"] = args ? args.sshPublicAccessEnabled : undefined;
            resourceInputs["subnetResourceId"] = args ? args.subnetResourceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmPriority"] = args ? args.vmPriority : undefined;
            resourceInputs["vmSize"] = args ? args.vmSize : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MachineLearningComputeCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MachineLearningComputeCluster resources.
 */
export interface MachineLearningComputeClusterState {
    description?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.MachineLearningComputeClusterIdentity>;
    localAuthEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    machineLearningWorkspaceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodePublicIpEnabled?: pulumi.Input<boolean>;
    scaleSettings?: pulumi.Input<inputs.MachineLearningComputeClusterScaleSettings>;
    ssh?: pulumi.Input<inputs.MachineLearningComputeClusterSsh>;
    sshPublicAccessEnabled?: pulumi.Input<boolean>;
    subnetResourceId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MachineLearningComputeClusterTimeouts>;
    vmPriority?: pulumi.Input<string>;
    vmSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MachineLearningComputeCluster resource.
 */
export interface MachineLearningComputeClusterArgs {
    description?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.MachineLearningComputeClusterIdentity>;
    localAuthEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    machineLearningWorkspaceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodePublicIpEnabled?: pulumi.Input<boolean>;
    scaleSettings: pulumi.Input<inputs.MachineLearningComputeClusterScaleSettings>;
    ssh?: pulumi.Input<inputs.MachineLearningComputeClusterSsh>;
    sshPublicAccessEnabled?: pulumi.Input<boolean>;
    subnetResourceId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MachineLearningComputeClusterTimeouts>;
    vmPriority: pulumi.Input<string>;
    vmSize: pulumi.Input<string>;
}
