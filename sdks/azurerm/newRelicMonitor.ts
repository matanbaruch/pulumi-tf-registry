// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NewRelicMonitor extends pulumi.CustomResource {
    /**
     * Get an existing NewRelicMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NewRelicMonitorState, opts?: pulumi.CustomResourceOptions): NewRelicMonitor {
        return new NewRelicMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/newRelicMonitor:NewRelicMonitor';

    /**
     * Returns true if the given object is an instance of NewRelicMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NewRelicMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NewRelicMonitor.__pulumiType;
    }

    public readonly accountCreationSource!: pulumi.Output<string | undefined>;
    public readonly accountId!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.NewRelicMonitorIdentity | undefined>;
    public readonly ingestionKey!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly orgCreationSource!: pulumi.Output<string | undefined>;
    public readonly organizationId!: pulumi.Output<string>;
    public readonly plan!: pulumi.Output<outputs.NewRelicMonitorPlan>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NewRelicMonitorTimeouts | undefined>;
    public readonly user!: pulumi.Output<outputs.NewRelicMonitorUser>;
    public readonly userId!: pulumi.Output<string | undefined>;

    /**
     * Create a NewRelicMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NewRelicMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NewRelicMonitorArgs | NewRelicMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NewRelicMonitorState | undefined;
            resourceInputs["accountCreationSource"] = state ? state.accountCreationSource : undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["ingestionKey"] = state ? state.ingestionKey : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgCreationSource"] = state ? state.orgCreationSource : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as NewRelicMonitorArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["accountCreationSource"] = args ? args.accountCreationSource : undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["ingestionKey"] = args?.ingestionKey ? pulumi.secret(args.ingestionKey) : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgCreationSource"] = args ? args.orgCreationSource : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["ingestionKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NewRelicMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NewRelicMonitor resources.
 */
export interface NewRelicMonitorState {
    accountCreationSource?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.NewRelicMonitorIdentity>;
    ingestionKey?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orgCreationSource?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.NewRelicMonitorPlan>;
    resourceGroupName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NewRelicMonitorTimeouts>;
    user?: pulumi.Input<inputs.NewRelicMonitorUser>;
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NewRelicMonitor resource.
 */
export interface NewRelicMonitorArgs {
    accountCreationSource?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.NewRelicMonitorIdentity>;
    ingestionKey?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orgCreationSource?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    plan: pulumi.Input<inputs.NewRelicMonitorPlan>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NewRelicMonitorTimeouts>;
    user: pulumi.Input<inputs.NewRelicMonitorUser>;
    userId?: pulumi.Input<string>;
}
