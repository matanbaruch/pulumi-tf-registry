// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppConfigurationKey extends pulumi.CustomResource {
    /**
     * Get an existing AppConfigurationKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppConfigurationKeyState, opts?: pulumi.CustomResourceOptions): AppConfigurationKey {
        return new AppConfigurationKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/appConfigurationKey:AppConfigurationKey';

    /**
     * Returns true if the given object is an instance of AppConfigurationKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppConfigurationKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppConfigurationKey.__pulumiType;
    }

    public readonly configurationStoreId!: pulumi.Output<string>;
    public readonly contentType!: pulumi.Output<string>;
    public readonly etag!: pulumi.Output<string>;
    public readonly key!: pulumi.Output<string>;
    public readonly label!: pulumi.Output<string | undefined>;
    public readonly locked!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AppConfigurationKeyTimeouts | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly value!: pulumi.Output<string | undefined>;
    public readonly vaultKeyReference!: pulumi.Output<string | undefined>;

    /**
     * Create a AppConfigurationKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppConfigurationKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppConfigurationKeyArgs | AppConfigurationKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppConfigurationKeyState | undefined;
            resourceInputs["configurationStoreId"] = state ? state.configurationStoreId : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["vaultKeyReference"] = state ? state.vaultKeyReference : undefined;
        } else {
            const args = argsOrState as AppConfigurationKeyArgs | undefined;
            if ((!args || args.configurationStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationStoreId'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["configurationStoreId"] = args ? args.configurationStoreId : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["vaultKeyReference"] = args ? args.vaultKeyReference : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppConfigurationKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppConfigurationKey resources.
 */
export interface AppConfigurationKeyState {
    configurationStoreId?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    locked?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AppConfigurationKeyTimeouts>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    vaultKeyReference?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppConfigurationKey resource.
 */
export interface AppConfigurationKeyArgs {
    configurationStoreId: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    locked?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AppConfigurationKeyTimeouts>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    vaultKeyReference?: pulumi.Input<string>;
}
