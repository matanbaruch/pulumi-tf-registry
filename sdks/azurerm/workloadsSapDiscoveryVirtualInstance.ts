// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkloadsSapDiscoveryVirtualInstance extends pulumi.CustomResource {
    /**
     * Get an existing WorkloadsSapDiscoveryVirtualInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkloadsSapDiscoveryVirtualInstanceState, opts?: pulumi.CustomResourceOptions): WorkloadsSapDiscoveryVirtualInstance {
        return new WorkloadsSapDiscoveryVirtualInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/workloadsSapDiscoveryVirtualInstance:WorkloadsSapDiscoveryVirtualInstance';

    /**
     * Returns true if the given object is an instance of WorkloadsSapDiscoveryVirtualInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkloadsSapDiscoveryVirtualInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkloadsSapDiscoveryVirtualInstance.__pulumiType;
    }

    public readonly centralServerVirtualMachineId!: pulumi.Output<string>;
    public readonly environment!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.WorkloadsSapDiscoveryVirtualInstanceIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly managedResourceGroupName!: pulumi.Output<string | undefined>;
    public readonly managedStorageAccountName!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly sapProduct!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.WorkloadsSapDiscoveryVirtualInstanceTimeouts | undefined>;

    /**
     * Create a WorkloadsSapDiscoveryVirtualInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkloadsSapDiscoveryVirtualInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkloadsSapDiscoveryVirtualInstanceArgs | WorkloadsSapDiscoveryVirtualInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkloadsSapDiscoveryVirtualInstanceState | undefined;
            resourceInputs["centralServerVirtualMachineId"] = state ? state.centralServerVirtualMachineId : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedResourceGroupName"] = state ? state.managedResourceGroupName : undefined;
            resourceInputs["managedStorageAccountName"] = state ? state.managedStorageAccountName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sapProduct"] = state ? state.sapProduct : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as WorkloadsSapDiscoveryVirtualInstanceArgs | undefined;
            if ((!args || args.centralServerVirtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'centralServerVirtualMachineId'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sapProduct === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sapProduct'");
            }
            resourceInputs["centralServerVirtualMachineId"] = args ? args.centralServerVirtualMachineId : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedResourceGroupName"] = args ? args.managedResourceGroupName : undefined;
            resourceInputs["managedStorageAccountName"] = args ? args.managedStorageAccountName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sapProduct"] = args ? args.sapProduct : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkloadsSapDiscoveryVirtualInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkloadsSapDiscoveryVirtualInstance resources.
 */
export interface WorkloadsSapDiscoveryVirtualInstanceState {
    centralServerVirtualMachineId?: pulumi.Input<string>;
    environment?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.WorkloadsSapDiscoveryVirtualInstanceIdentity>;
    location?: pulumi.Input<string>;
    managedResourceGroupName?: pulumi.Input<string>;
    managedStorageAccountName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    sapProduct?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.WorkloadsSapDiscoveryVirtualInstanceTimeouts>;
}

/**
 * The set of arguments for constructing a WorkloadsSapDiscoveryVirtualInstance resource.
 */
export interface WorkloadsSapDiscoveryVirtualInstanceArgs {
    centralServerVirtualMachineId: pulumi.Input<string>;
    environment: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.WorkloadsSapDiscoveryVirtualInstanceIdentity>;
    location: pulumi.Input<string>;
    managedResourceGroupName?: pulumi.Input<string>;
    managedStorageAccountName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    sapProduct: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.WorkloadsSapDiscoveryVirtualInstanceTimeouts>;
}
