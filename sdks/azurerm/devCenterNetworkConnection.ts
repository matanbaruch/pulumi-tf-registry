// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DevCenterNetworkConnection extends pulumi.CustomResource {
    /**
     * Get an existing DevCenterNetworkConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DevCenterNetworkConnectionState, opts?: pulumi.CustomResourceOptions): DevCenterNetworkConnection {
        return new DevCenterNetworkConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/devCenterNetworkConnection:DevCenterNetworkConnection';

    /**
     * Returns true if the given object is an instance of DevCenterNetworkConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DevCenterNetworkConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DevCenterNetworkConnection.__pulumiType;
    }

    public readonly domainJoinType!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string | undefined>;
    public readonly domainPassword!: pulumi.Output<string | undefined>;
    public readonly domainUsername!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly organizationUnit!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DevCenterNetworkConnectionTimeouts | undefined>;

    /**
     * Create a DevCenterNetworkConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DevCenterNetworkConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DevCenterNetworkConnectionArgs | DevCenterNetworkConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DevCenterNetworkConnectionState | undefined;
            resourceInputs["domainJoinType"] = state ? state.domainJoinType : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainPassword"] = state ? state.domainPassword : undefined;
            resourceInputs["domainUsername"] = state ? state.domainUsername : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationUnit"] = state ? state.organizationUnit : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DevCenterNetworkConnectionArgs | undefined;
            if ((!args || args.domainJoinType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainJoinType'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["domainJoinType"] = args ? args.domainJoinType : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainPassword"] = args?.domainPassword ? pulumi.secret(args.domainPassword) : undefined;
            resourceInputs["domainUsername"] = args ? args.domainUsername : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationUnit"] = args ? args.organizationUnit : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["domainPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DevCenterNetworkConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DevCenterNetworkConnection resources.
 */
export interface DevCenterNetworkConnectionState {
    domainJoinType?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    domainPassword?: pulumi.Input<string>;
    domainUsername?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organizationUnit?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DevCenterNetworkConnectionTimeouts>;
}

/**
 * The set of arguments for constructing a DevCenterNetworkConnection resource.
 */
export interface DevCenterNetworkConnectionArgs {
    domainJoinType: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    domainPassword?: pulumi.Input<string>;
    domainUsername?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organizationUnit?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DevCenterNetworkConnectionTimeouts>;
}
