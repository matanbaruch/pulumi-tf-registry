// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DevTestWindowsVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing DevTestWindowsVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DevTestWindowsVirtualMachineState, opts?: pulumi.CustomResourceOptions): DevTestWindowsVirtualMachine {
        return new DevTestWindowsVirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/devTestWindowsVirtualMachine:DevTestWindowsVirtualMachine';

    /**
     * Returns true if the given object is an instance of DevTestWindowsVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DevTestWindowsVirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DevTestWindowsVirtualMachine.__pulumiType;
    }

    public readonly allowClaim!: pulumi.Output<boolean | undefined>;
    public readonly disallowPublicIpAddress!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly galleryImageReference!: pulumi.Output<outputs.DevTestWindowsVirtualMachineGalleryImageReference>;
    public readonly inboundNatRules!: pulumi.Output<outputs.DevTestWindowsVirtualMachineInboundNatRule[] | undefined>;
    public readonly labName!: pulumi.Output<string>;
    public readonly labSubnetName!: pulumi.Output<string>;
    public readonly labVirtualNetworkId!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notes!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<string>;
    public readonly storageType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DevTestWindowsVirtualMachineTimeouts | undefined>;
    public /*out*/ readonly uniqueIdentifier!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a DevTestWindowsVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DevTestWindowsVirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DevTestWindowsVirtualMachineArgs | DevTestWindowsVirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DevTestWindowsVirtualMachineState | undefined;
            resourceInputs["allowClaim"] = state ? state.allowClaim : undefined;
            resourceInputs["disallowPublicIpAddress"] = state ? state.disallowPublicIpAddress : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["galleryImageReference"] = state ? state.galleryImageReference : undefined;
            resourceInputs["inboundNatRules"] = state ? state.inboundNatRules : undefined;
            resourceInputs["labName"] = state ? state.labName : undefined;
            resourceInputs["labSubnetName"] = state ? state.labSubnetName : undefined;
            resourceInputs["labVirtualNetworkId"] = state ? state.labVirtualNetworkId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uniqueIdentifier"] = state ? state.uniqueIdentifier : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as DevTestWindowsVirtualMachineArgs | undefined;
            if ((!args || args.galleryImageReference === undefined) && !opts.urn) {
                throw new Error("Missing required property 'galleryImageReference'");
            }
            if ((!args || args.labName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labName'");
            }
            if ((!args || args.labSubnetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labSubnetName'");
            }
            if ((!args || args.labVirtualNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labVirtualNetworkId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["allowClaim"] = args ? args.allowClaim : undefined;
            resourceInputs["disallowPublicIpAddress"] = args ? args.disallowPublicIpAddress : undefined;
            resourceInputs["galleryImageReference"] = args ? args.galleryImageReference : undefined;
            resourceInputs["inboundNatRules"] = args ? args.inboundNatRules : undefined;
            resourceInputs["labName"] = args ? args.labName : undefined;
            resourceInputs["labSubnetName"] = args ? args.labSubnetName : undefined;
            resourceInputs["labVirtualNetworkId"] = args ? args.labVirtualNetworkId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["uniqueIdentifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DevTestWindowsVirtualMachine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DevTestWindowsVirtualMachine resources.
 */
export interface DevTestWindowsVirtualMachineState {
    allowClaim?: pulumi.Input<boolean>;
    disallowPublicIpAddress?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    galleryImageReference?: pulumi.Input<inputs.DevTestWindowsVirtualMachineGalleryImageReference>;
    inboundNatRules?: pulumi.Input<pulumi.Input<inputs.DevTestWindowsVirtualMachineInboundNatRule>[]>;
    labName?: pulumi.Input<string>;
    labSubnetName?: pulumi.Input<string>;
    labVirtualNetworkId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    storageType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DevTestWindowsVirtualMachineTimeouts>;
    uniqueIdentifier?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DevTestWindowsVirtualMachine resource.
 */
export interface DevTestWindowsVirtualMachineArgs {
    allowClaim?: pulumi.Input<boolean>;
    disallowPublicIpAddress?: pulumi.Input<boolean>;
    galleryImageReference: pulumi.Input<inputs.DevTestWindowsVirtualMachineGalleryImageReference>;
    inboundNatRules?: pulumi.Input<pulumi.Input<inputs.DevTestWindowsVirtualMachineInboundNatRule>[]>;
    labName: pulumi.Input<string>;
    labSubnetName: pulumi.Input<string>;
    labVirtualNetworkId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    size: pulumi.Input<string>;
    storageType: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DevTestWindowsVirtualMachineTimeouts>;
    username: pulumi.Input<string>;
}
