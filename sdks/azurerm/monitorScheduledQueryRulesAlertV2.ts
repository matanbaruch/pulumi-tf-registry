// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitorScheduledQueryRulesAlertV2 extends pulumi.CustomResource {
    /**
     * Get an existing MonitorScheduledQueryRulesAlertV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorScheduledQueryRulesAlertV2State, opts?: pulumi.CustomResourceOptions): MonitorScheduledQueryRulesAlertV2 {
        return new MonitorScheduledQueryRulesAlertV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/monitorScheduledQueryRulesAlertV2:MonitorScheduledQueryRulesAlertV2';

    /**
     * Returns true if the given object is an instance of MonitorScheduledQueryRulesAlertV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorScheduledQueryRulesAlertV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorScheduledQueryRulesAlertV2.__pulumiType;
    }

    public readonly action!: pulumi.Output<outputs.MonitorScheduledQueryRulesAlertV2Action | undefined>;
    public readonly autoMitigationEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly createdWithApiVersion!: pulumi.Output<string>;
    public readonly criterias!: pulumi.Output<outputs.MonitorScheduledQueryRulesAlertV2Criteria[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly evaluationFrequency!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.MonitorScheduledQueryRulesAlertV2Identity | undefined>;
    public /*out*/ readonly isALegacyLogAnalyticsRule!: pulumi.Output<boolean>;
    public /*out*/ readonly isWorkspaceAlertsStorageConfigured!: pulumi.Output<boolean>;
    public readonly location!: pulumi.Output<string>;
    public readonly muteActionsAfterAlertDuration!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly queryTimeRangeOverride!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly scopes!: pulumi.Output<string[]>;
    public readonly severity!: pulumi.Output<number>;
    public readonly skipQueryValidation!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly targetResourceTypes!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MonitorScheduledQueryRulesAlertV2Timeouts | undefined>;
    public readonly windowDuration!: pulumi.Output<string>;
    public readonly workspaceAlertsStorageEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a MonitorScheduledQueryRulesAlertV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorScheduledQueryRulesAlertV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorScheduledQueryRulesAlertV2Args | MonitorScheduledQueryRulesAlertV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorScheduledQueryRulesAlertV2State | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["autoMitigationEnabled"] = state ? state.autoMitigationEnabled : undefined;
            resourceInputs["createdWithApiVersion"] = state ? state.createdWithApiVersion : undefined;
            resourceInputs["criterias"] = state ? state.criterias : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["evaluationFrequency"] = state ? state.evaluationFrequency : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["isALegacyLogAnalyticsRule"] = state ? state.isALegacyLogAnalyticsRule : undefined;
            resourceInputs["isWorkspaceAlertsStorageConfigured"] = state ? state.isWorkspaceAlertsStorageConfigured : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["muteActionsAfterAlertDuration"] = state ? state.muteActionsAfterAlertDuration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queryTimeRangeOverride"] = state ? state.queryTimeRangeOverride : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["skipQueryValidation"] = state ? state.skipQueryValidation : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetResourceTypes"] = state ? state.targetResourceTypes : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["windowDuration"] = state ? state.windowDuration : undefined;
            resourceInputs["workspaceAlertsStorageEnabled"] = state ? state.workspaceAlertsStorageEnabled : undefined;
        } else {
            const args = argsOrState as MonitorScheduledQueryRulesAlertV2Args | undefined;
            if ((!args || args.criterias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'criterias'");
            }
            if ((!args || args.evaluationFrequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evaluationFrequency'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            if ((!args || args.windowDuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'windowDuration'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["autoMitigationEnabled"] = args ? args.autoMitigationEnabled : undefined;
            resourceInputs["criterias"] = args ? args.criterias : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["evaluationFrequency"] = args ? args.evaluationFrequency : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["muteActionsAfterAlertDuration"] = args ? args.muteActionsAfterAlertDuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryTimeRangeOverride"] = args ? args.queryTimeRangeOverride : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["skipQueryValidation"] = args ? args.skipQueryValidation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetResourceTypes"] = args ? args.targetResourceTypes : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["windowDuration"] = args ? args.windowDuration : undefined;
            resourceInputs["workspaceAlertsStorageEnabled"] = args ? args.workspaceAlertsStorageEnabled : undefined;
            resourceInputs["createdWithApiVersion"] = undefined /*out*/;
            resourceInputs["isALegacyLogAnalyticsRule"] = undefined /*out*/;
            resourceInputs["isWorkspaceAlertsStorageConfigured"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorScheduledQueryRulesAlertV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorScheduledQueryRulesAlertV2 resources.
 */
export interface MonitorScheduledQueryRulesAlertV2State {
    action?: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertV2Action>;
    autoMitigationEnabled?: pulumi.Input<boolean>;
    createdWithApiVersion?: pulumi.Input<string>;
    criterias?: pulumi.Input<pulumi.Input<inputs.MonitorScheduledQueryRulesAlertV2Criteria>[]>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    evaluationFrequency?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertV2Identity>;
    isALegacyLogAnalyticsRule?: pulumi.Input<boolean>;
    isWorkspaceAlertsStorageConfigured?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    muteActionsAfterAlertDuration?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    queryTimeRangeOverride?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    severity?: pulumi.Input<number>;
    skipQueryValidation?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetResourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertV2Timeouts>;
    windowDuration?: pulumi.Input<string>;
    workspaceAlertsStorageEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MonitorScheduledQueryRulesAlertV2 resource.
 */
export interface MonitorScheduledQueryRulesAlertV2Args {
    action?: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertV2Action>;
    autoMitigationEnabled?: pulumi.Input<boolean>;
    criterias: pulumi.Input<pulumi.Input<inputs.MonitorScheduledQueryRulesAlertV2Criteria>[]>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    evaluationFrequency: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertV2Identity>;
    location: pulumi.Input<string>;
    muteActionsAfterAlertDuration?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    queryTimeRangeOverride?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    severity: pulumi.Input<number>;
    skipQueryValidation?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetResourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.MonitorScheduledQueryRulesAlertV2Timeouts>;
    windowDuration: pulumi.Input<string>;
    workspaceAlertsStorageEnabled?: pulumi.Input<boolean>;
}
