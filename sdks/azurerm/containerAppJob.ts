// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerAppJob extends pulumi.CustomResource {
    /**
     * Get an existing ContainerAppJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerAppJobState, opts?: pulumi.CustomResourceOptions): ContainerAppJob {
        return new ContainerAppJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/containerAppJob:ContainerAppJob';

    /**
     * Returns true if the given object is an instance of ContainerAppJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerAppJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerAppJob.__pulumiType;
    }

    public readonly containerAppEnvironmentId!: pulumi.Output<string>;
    public /*out*/ readonly eventStreamEndpoint!: pulumi.Output<string>;
    public readonly eventTriggerConfig!: pulumi.Output<outputs.ContainerAppJobEventTriggerConfig | undefined>;
    public readonly identity!: pulumi.Output<outputs.ContainerAppJobIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly manualTriggerConfig!: pulumi.Output<outputs.ContainerAppJobManualTriggerConfig | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly outboundIpAddresses!: pulumi.Output<string[]>;
    public readonly registries!: pulumi.Output<outputs.ContainerAppJobRegistry[] | undefined>;
    public readonly replicaRetryLimit!: pulumi.Output<number | undefined>;
    public readonly replicaTimeoutInSeconds!: pulumi.Output<number>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly scheduleTriggerConfig!: pulumi.Output<outputs.ContainerAppJobScheduleTriggerConfig | undefined>;
    public readonly secrets!: pulumi.Output<outputs.ContainerAppJobSecret[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly template!: pulumi.Output<outputs.ContainerAppJobTemplate>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerAppJobTimeouts | undefined>;
    public readonly workloadProfileName!: pulumi.Output<string | undefined>;

    /**
     * Create a ContainerAppJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerAppJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerAppJobArgs | ContainerAppJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerAppJobState | undefined;
            resourceInputs["containerAppEnvironmentId"] = state ? state.containerAppEnvironmentId : undefined;
            resourceInputs["eventStreamEndpoint"] = state ? state.eventStreamEndpoint : undefined;
            resourceInputs["eventTriggerConfig"] = state ? state.eventTriggerConfig : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["manualTriggerConfig"] = state ? state.manualTriggerConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outboundIpAddresses"] = state ? state.outboundIpAddresses : undefined;
            resourceInputs["registries"] = state ? state.registries : undefined;
            resourceInputs["replicaRetryLimit"] = state ? state.replicaRetryLimit : undefined;
            resourceInputs["replicaTimeoutInSeconds"] = state ? state.replicaTimeoutInSeconds : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scheduleTriggerConfig"] = state ? state.scheduleTriggerConfig : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workloadProfileName"] = state ? state.workloadProfileName : undefined;
        } else {
            const args = argsOrState as ContainerAppJobArgs | undefined;
            if ((!args || args.containerAppEnvironmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerAppEnvironmentId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.replicaTimeoutInSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicaTimeoutInSeconds'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["containerAppEnvironmentId"] = args ? args.containerAppEnvironmentId : undefined;
            resourceInputs["eventTriggerConfig"] = args ? args.eventTriggerConfig : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["manualTriggerConfig"] = args ? args.manualTriggerConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["registries"] = args ? args.registries : undefined;
            resourceInputs["replicaRetryLimit"] = args ? args.replicaRetryLimit : undefined;
            resourceInputs["replicaTimeoutInSeconds"] = args ? args.replicaTimeoutInSeconds : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scheduleTriggerConfig"] = args ? args.scheduleTriggerConfig : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workloadProfileName"] = args ? args.workloadProfileName : undefined;
            resourceInputs["eventStreamEndpoint"] = undefined /*out*/;
            resourceInputs["outboundIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerAppJob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerAppJob resources.
 */
export interface ContainerAppJobState {
    containerAppEnvironmentId?: pulumi.Input<string>;
    eventStreamEndpoint?: pulumi.Input<string>;
    eventTriggerConfig?: pulumi.Input<inputs.ContainerAppJobEventTriggerConfig>;
    identity?: pulumi.Input<inputs.ContainerAppJobIdentity>;
    location?: pulumi.Input<string>;
    manualTriggerConfig?: pulumi.Input<inputs.ContainerAppJobManualTriggerConfig>;
    name?: pulumi.Input<string>;
    outboundIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    registries?: pulumi.Input<pulumi.Input<inputs.ContainerAppJobRegistry>[]>;
    replicaRetryLimit?: pulumi.Input<number>;
    replicaTimeoutInSeconds?: pulumi.Input<number>;
    resourceGroupName?: pulumi.Input<string>;
    scheduleTriggerConfig?: pulumi.Input<inputs.ContainerAppJobScheduleTriggerConfig>;
    secrets?: pulumi.Input<pulumi.Input<inputs.ContainerAppJobSecret>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    template?: pulumi.Input<inputs.ContainerAppJobTemplate>;
    timeouts?: pulumi.Input<inputs.ContainerAppJobTimeouts>;
    workloadProfileName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerAppJob resource.
 */
export interface ContainerAppJobArgs {
    containerAppEnvironmentId: pulumi.Input<string>;
    eventTriggerConfig?: pulumi.Input<inputs.ContainerAppJobEventTriggerConfig>;
    identity?: pulumi.Input<inputs.ContainerAppJobIdentity>;
    location: pulumi.Input<string>;
    manualTriggerConfig?: pulumi.Input<inputs.ContainerAppJobManualTriggerConfig>;
    name?: pulumi.Input<string>;
    registries?: pulumi.Input<pulumi.Input<inputs.ContainerAppJobRegistry>[]>;
    replicaRetryLimit?: pulumi.Input<number>;
    replicaTimeoutInSeconds: pulumi.Input<number>;
    resourceGroupName: pulumi.Input<string>;
    scheduleTriggerConfig?: pulumi.Input<inputs.ContainerAppJobScheduleTriggerConfig>;
    secrets?: pulumi.Input<pulumi.Input<inputs.ContainerAppJobSecret>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    template: pulumi.Input<inputs.ContainerAppJobTemplate>;
    timeouts?: pulumi.Input<inputs.ContainerAppJobTimeouts>;
    workloadProfileName?: pulumi.Input<string>;
}
