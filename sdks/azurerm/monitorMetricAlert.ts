// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitorMetricAlert extends pulumi.CustomResource {
    /**
     * Get an existing MonitorMetricAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorMetricAlertState, opts?: pulumi.CustomResourceOptions): MonitorMetricAlert {
        return new MonitorMetricAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/monitorMetricAlert:MonitorMetricAlert';

    /**
     * Returns true if the given object is an instance of MonitorMetricAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorMetricAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorMetricAlert.__pulumiType;
    }

    public readonly actions!: pulumi.Output<outputs.MonitorMetricAlertAction[] | undefined>;
    public readonly applicationInsightsWebTestLocationAvailabilityCriteria!: pulumi.Output<outputs.MonitorMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria | undefined>;
    public readonly autoMitigate!: pulumi.Output<boolean | undefined>;
    public readonly criterias!: pulumi.Output<outputs.MonitorMetricAlertCriteria[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dynamicCriteria!: pulumi.Output<outputs.MonitorMetricAlertDynamicCriteria | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly frequency!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly scopes!: pulumi.Output<string[]>;
    public readonly severity!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of the target pluginsdk. Required when using subscription, resource group scope or multiple scopes.
     */
    public readonly targetResourceLocation!: pulumi.Output<string>;
    /**
     * The resource type (e.g. Microsoft.Compute/virtualMachines) of the target pluginsdk. Required when using subscription,
     * resource group scope or multiple scopes.
     */
    public readonly targetResourceType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MonitorMetricAlertTimeouts | undefined>;
    public readonly windowSize!: pulumi.Output<string | undefined>;

    /**
     * Create a MonitorMetricAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorMetricAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorMetricAlertArgs | MonitorMetricAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorMetricAlertState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["applicationInsightsWebTestLocationAvailabilityCriteria"] = state ? state.applicationInsightsWebTestLocationAvailabilityCriteria : undefined;
            resourceInputs["autoMitigate"] = state ? state.autoMitigate : undefined;
            resourceInputs["criterias"] = state ? state.criterias : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dynamicCriteria"] = state ? state.dynamicCriteria : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetResourceLocation"] = state ? state.targetResourceLocation : undefined;
            resourceInputs["targetResourceType"] = state ? state.targetResourceType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["windowSize"] = state ? state.windowSize : undefined;
        } else {
            const args = argsOrState as MonitorMetricAlertArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["applicationInsightsWebTestLocationAvailabilityCriteria"] = args ? args.applicationInsightsWebTestLocationAvailabilityCriteria : undefined;
            resourceInputs["autoMitigate"] = args ? args.autoMitigate : undefined;
            resourceInputs["criterias"] = args ? args.criterias : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dynamicCriteria"] = args ? args.dynamicCriteria : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetResourceLocation"] = args ? args.targetResourceLocation : undefined;
            resourceInputs["targetResourceType"] = args ? args.targetResourceType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["windowSize"] = args ? args.windowSize : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorMetricAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorMetricAlert resources.
 */
export interface MonitorMetricAlertState {
    actions?: pulumi.Input<pulumi.Input<inputs.MonitorMetricAlertAction>[]>;
    applicationInsightsWebTestLocationAvailabilityCriteria?: pulumi.Input<inputs.MonitorMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria>;
    autoMitigate?: pulumi.Input<boolean>;
    criterias?: pulumi.Input<pulumi.Input<inputs.MonitorMetricAlertCriteria>[]>;
    description?: pulumi.Input<string>;
    dynamicCriteria?: pulumi.Input<inputs.MonitorMetricAlertDynamicCriteria>;
    enabled?: pulumi.Input<boolean>;
    frequency?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    severity?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the target pluginsdk. Required when using subscription, resource group scope or multiple scopes.
     */
    targetResourceLocation?: pulumi.Input<string>;
    /**
     * The resource type (e.g. Microsoft.Compute/virtualMachines) of the target pluginsdk. Required when using subscription,
     * resource group scope or multiple scopes.
     */
    targetResourceType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitorMetricAlertTimeouts>;
    windowSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MonitorMetricAlert resource.
 */
export interface MonitorMetricAlertArgs {
    actions?: pulumi.Input<pulumi.Input<inputs.MonitorMetricAlertAction>[]>;
    applicationInsightsWebTestLocationAvailabilityCriteria?: pulumi.Input<inputs.MonitorMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria>;
    autoMitigate?: pulumi.Input<boolean>;
    criterias?: pulumi.Input<pulumi.Input<inputs.MonitorMetricAlertCriteria>[]>;
    description?: pulumi.Input<string>;
    dynamicCriteria?: pulumi.Input<inputs.MonitorMetricAlertDynamicCriteria>;
    enabled?: pulumi.Input<boolean>;
    frequency?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    severity?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of the target pluginsdk. Required when using subscription, resource group scope or multiple scopes.
     */
    targetResourceLocation?: pulumi.Input<string>;
    /**
     * The resource type (e.g. Microsoft.Compute/virtualMachines) of the target pluginsdk. Required when using subscription,
     * resource group scope or multiple scopes.
     */
    targetResourceType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitorMetricAlertTimeouts>;
    windowSize?: pulumi.Input<string>;
}
