// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceFabricManagedCluster extends pulumi.CustomResource {
    /**
     * Get an existing ServiceFabricManagedCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceFabricManagedClusterState, opts?: pulumi.CustomResourceOptions): ServiceFabricManagedCluster {
        return new ServiceFabricManagedCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/serviceFabricManagedCluster:ServiceFabricManagedCluster';

    /**
     * Returns true if the given object is an instance of ServiceFabricManagedCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceFabricManagedCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceFabricManagedCluster.__pulumiType;
    }

    public readonly authentication!: pulumi.Output<outputs.ServiceFabricManagedClusterAuthentication | undefined>;
    public readonly backupServiceEnabled!: pulumi.Output<boolean | undefined>;
    public readonly clientConnectionPort!: pulumi.Output<number>;
    public readonly customFabricSettings!: pulumi.Output<outputs.ServiceFabricManagedClusterCustomFabricSetting[] | undefined>;
    public readonly dnsName!: pulumi.Output<string>;
    public readonly dnsServiceEnabled!: pulumi.Output<boolean | undefined>;
    public readonly httpGatewayPort!: pulumi.Output<number>;
    public readonly lbRules!: pulumi.Output<outputs.ServiceFabricManagedClusterLbRule[]>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeTypes!: pulumi.Output<outputs.ServiceFabricManagedClusterNodeType[] | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly sku!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServiceFabricManagedClusterTimeouts | undefined>;
    public readonly upgradeWave!: pulumi.Output<string | undefined>;
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceFabricManagedCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceFabricManagedClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceFabricManagedClusterArgs | ServiceFabricManagedClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceFabricManagedClusterState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["backupServiceEnabled"] = state ? state.backupServiceEnabled : undefined;
            resourceInputs["clientConnectionPort"] = state ? state.clientConnectionPort : undefined;
            resourceInputs["customFabricSettings"] = state ? state.customFabricSettings : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["dnsServiceEnabled"] = state ? state.dnsServiceEnabled : undefined;
            resourceInputs["httpGatewayPort"] = state ? state.httpGatewayPort : undefined;
            resourceInputs["lbRules"] = state ? state.lbRules : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeTypes"] = state ? state.nodeTypes : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["upgradeWave"] = state ? state.upgradeWave : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ServiceFabricManagedClusterArgs | undefined;
            if ((!args || args.clientConnectionPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientConnectionPort'");
            }
            if ((!args || args.httpGatewayPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpGatewayPort'");
            }
            if ((!args || args.lbRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbRules'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["backupServiceEnabled"] = args ? args.backupServiceEnabled : undefined;
            resourceInputs["clientConnectionPort"] = args ? args.clientConnectionPort : undefined;
            resourceInputs["customFabricSettings"] = args ? args.customFabricSettings : undefined;
            resourceInputs["dnsName"] = args ? args.dnsName : undefined;
            resourceInputs["dnsServiceEnabled"] = args ? args.dnsServiceEnabled : undefined;
            resourceInputs["httpGatewayPort"] = args ? args.httpGatewayPort : undefined;
            resourceInputs["lbRules"] = args ? args.lbRules : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeTypes"] = args ? args.nodeTypes : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["upgradeWave"] = args ? args.upgradeWave : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceFabricManagedCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceFabricManagedCluster resources.
 */
export interface ServiceFabricManagedClusterState {
    authentication?: pulumi.Input<inputs.ServiceFabricManagedClusterAuthentication>;
    backupServiceEnabled?: pulumi.Input<boolean>;
    clientConnectionPort?: pulumi.Input<number>;
    customFabricSettings?: pulumi.Input<pulumi.Input<inputs.ServiceFabricManagedClusterCustomFabricSetting>[]>;
    dnsName?: pulumi.Input<string>;
    dnsServiceEnabled?: pulumi.Input<boolean>;
    httpGatewayPort?: pulumi.Input<number>;
    lbRules?: pulumi.Input<pulumi.Input<inputs.ServiceFabricManagedClusterLbRule>[]>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeTypes?: pulumi.Input<pulumi.Input<inputs.ServiceFabricManagedClusterNodeType>[]>;
    password?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ServiceFabricManagedClusterTimeouts>;
    upgradeWave?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceFabricManagedCluster resource.
 */
export interface ServiceFabricManagedClusterArgs {
    authentication?: pulumi.Input<inputs.ServiceFabricManagedClusterAuthentication>;
    backupServiceEnabled?: pulumi.Input<boolean>;
    clientConnectionPort: pulumi.Input<number>;
    customFabricSettings?: pulumi.Input<pulumi.Input<inputs.ServiceFabricManagedClusterCustomFabricSetting>[]>;
    dnsName?: pulumi.Input<string>;
    dnsServiceEnabled?: pulumi.Input<boolean>;
    httpGatewayPort: pulumi.Input<number>;
    lbRules: pulumi.Input<pulumi.Input<inputs.ServiceFabricManagedClusterLbRule>[]>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeTypes?: pulumi.Input<pulumi.Input<inputs.ServiceFabricManagedClusterNodeType>[]>;
    password?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ServiceFabricManagedClusterTimeouts>;
    upgradeWave?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}
