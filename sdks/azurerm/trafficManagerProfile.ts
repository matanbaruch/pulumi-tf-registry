// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TrafficManagerProfile extends pulumi.CustomResource {
    /**
     * Get an existing TrafficManagerProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficManagerProfileState, opts?: pulumi.CustomResourceOptions): TrafficManagerProfile {
        return new TrafficManagerProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/trafficManagerProfile:TrafficManagerProfile';

    /**
     * Returns true if the given object is an instance of TrafficManagerProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficManagerProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficManagerProfile.__pulumiType;
    }

    public readonly dnsConfig!: pulumi.Output<outputs.TrafficManagerProfileDnsConfig>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly maxReturn!: pulumi.Output<number | undefined>;
    public readonly monitorConfig!: pulumi.Output<outputs.TrafficManagerProfileMonitorConfig>;
    public readonly name!: pulumi.Output<string>;
    public readonly profileStatus!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.TrafficManagerProfileTimeouts | undefined>;
    public readonly trafficRoutingMethod!: pulumi.Output<string>;
    public readonly trafficViewEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a TrafficManagerProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficManagerProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficManagerProfileArgs | TrafficManagerProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficManagerProfileState | undefined;
            resourceInputs["dnsConfig"] = state ? state.dnsConfig : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["maxReturn"] = state ? state.maxReturn : undefined;
            resourceInputs["monitorConfig"] = state ? state.monitorConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["profileStatus"] = state ? state.profileStatus : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trafficRoutingMethod"] = state ? state.trafficRoutingMethod : undefined;
            resourceInputs["trafficViewEnabled"] = state ? state.trafficViewEnabled : undefined;
        } else {
            const args = argsOrState as TrafficManagerProfileArgs | undefined;
            if ((!args || args.dnsConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsConfig'");
            }
            if ((!args || args.monitorConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorConfig'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.trafficRoutingMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficRoutingMethod'");
            }
            resourceInputs["dnsConfig"] = args ? args.dnsConfig : undefined;
            resourceInputs["maxReturn"] = args ? args.maxReturn : undefined;
            resourceInputs["monitorConfig"] = args ? args.monitorConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["profileStatus"] = args ? args.profileStatus : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trafficRoutingMethod"] = args ? args.trafficRoutingMethod : undefined;
            resourceInputs["trafficViewEnabled"] = args ? args.trafficViewEnabled : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficManagerProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TrafficManagerProfile resources.
 */
export interface TrafficManagerProfileState {
    dnsConfig?: pulumi.Input<inputs.TrafficManagerProfileDnsConfig>;
    fqdn?: pulumi.Input<string>;
    maxReturn?: pulumi.Input<number>;
    monitorConfig?: pulumi.Input<inputs.TrafficManagerProfileMonitorConfig>;
    name?: pulumi.Input<string>;
    profileStatus?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.TrafficManagerProfileTimeouts>;
    trafficRoutingMethod?: pulumi.Input<string>;
    trafficViewEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a TrafficManagerProfile resource.
 */
export interface TrafficManagerProfileArgs {
    dnsConfig: pulumi.Input<inputs.TrafficManagerProfileDnsConfig>;
    maxReturn?: pulumi.Input<number>;
    monitorConfig: pulumi.Input<inputs.TrafficManagerProfileMonitorConfig>;
    name?: pulumi.Input<string>;
    profileStatus?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.TrafficManagerProfileTimeouts>;
    trafficRoutingMethod: pulumi.Input<string>;
    trafficViewEnabled?: pulumi.Input<boolean>;
}
