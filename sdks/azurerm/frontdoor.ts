// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Frontdoor extends pulumi.CustomResource {
    /**
     * Get an existing Frontdoor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrontdoorState, opts?: pulumi.CustomResourceOptions): Frontdoor {
        return new Frontdoor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/frontdoor:Frontdoor';

    /**
     * Returns true if the given object is an instance of Frontdoor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Frontdoor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Frontdoor.__pulumiType;
    }

    public readonly backendPool!: pulumi.Output<outputs.FrontdoorBackendPool[]>;
    public readonly backendPoolHealthProbe!: pulumi.Output<outputs.FrontdoorBackendPoolHealthProbe[]>;
    public /*out*/ readonly backendPoolHealthProbes!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly backendPoolLoadBalancingSettings!: pulumi.Output<{[key: string]: string}>;
    public readonly backendPoolLoadBalancings!: pulumi.Output<outputs.FrontdoorBackendPoolLoadBalancing[]>;
    public readonly backendPoolSettings!: pulumi.Output<outputs.FrontdoorBackendPoolSetting[] | undefined>;
    public /*out*/ readonly backendPools!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly cname!: pulumi.Output<string>;
    public /*out*/ readonly explicitResourceOrders!: pulumi.Output<outputs.FrontdoorExplicitResourceOrder[]>;
    public readonly friendlyName!: pulumi.Output<string | undefined>;
    public readonly frontendEndpoint!: pulumi.Output<outputs.FrontdoorFrontendEndpoint[]>;
    public /*out*/ readonly frontendEndpoints!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly headerFrontdoorId!: pulumi.Output<string>;
    public readonly loadBalancerEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly routingRule!: pulumi.Output<outputs.FrontdoorRoutingRule[]>;
    public /*out*/ readonly routingRules!: pulumi.Output<{[key: string]: string}>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.FrontdoorTimeouts | undefined>;

    /**
     * Create a Frontdoor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrontdoorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrontdoorArgs | FrontdoorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrontdoorState | undefined;
            resourceInputs["backendPool"] = state ? state.backendPool : undefined;
            resourceInputs["backendPoolHealthProbe"] = state ? state.backendPoolHealthProbe : undefined;
            resourceInputs["backendPoolHealthProbes"] = state ? state.backendPoolHealthProbes : undefined;
            resourceInputs["backendPoolLoadBalancingSettings"] = state ? state.backendPoolLoadBalancingSettings : undefined;
            resourceInputs["backendPoolLoadBalancings"] = state ? state.backendPoolLoadBalancings : undefined;
            resourceInputs["backendPoolSettings"] = state ? state.backendPoolSettings : undefined;
            resourceInputs["backendPools"] = state ? state.backendPools : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["explicitResourceOrders"] = state ? state.explicitResourceOrders : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["frontendEndpoint"] = state ? state.frontendEndpoint : undefined;
            resourceInputs["frontendEndpoints"] = state ? state.frontendEndpoints : undefined;
            resourceInputs["headerFrontdoorId"] = state ? state.headerFrontdoorId : undefined;
            resourceInputs["loadBalancerEnabled"] = state ? state.loadBalancerEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["routingRule"] = state ? state.routingRule : undefined;
            resourceInputs["routingRules"] = state ? state.routingRules : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FrontdoorArgs | undefined;
            if ((!args || args.backendPool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendPool'");
            }
            if ((!args || args.backendPoolHealthProbe === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendPoolHealthProbe'");
            }
            if ((!args || args.backendPoolLoadBalancings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendPoolLoadBalancings'");
            }
            if ((!args || args.frontendEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendEndpoint'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.routingRule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingRule'");
            }
            resourceInputs["backendPool"] = args ? args.backendPool : undefined;
            resourceInputs["backendPoolHealthProbe"] = args ? args.backendPoolHealthProbe : undefined;
            resourceInputs["backendPoolLoadBalancings"] = args ? args.backendPoolLoadBalancings : undefined;
            resourceInputs["backendPoolSettings"] = args ? args.backendPoolSettings : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["frontendEndpoint"] = args ? args.frontendEndpoint : undefined;
            resourceInputs["loadBalancerEnabled"] = args ? args.loadBalancerEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["routingRule"] = args ? args.routingRule : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["backendPoolHealthProbes"] = undefined /*out*/;
            resourceInputs["backendPoolLoadBalancingSettings"] = undefined /*out*/;
            resourceInputs["backendPools"] = undefined /*out*/;
            resourceInputs["cname"] = undefined /*out*/;
            resourceInputs["explicitResourceOrders"] = undefined /*out*/;
            resourceInputs["frontendEndpoints"] = undefined /*out*/;
            resourceInputs["headerFrontdoorId"] = undefined /*out*/;
            resourceInputs["routingRules"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Frontdoor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Frontdoor resources.
 */
export interface FrontdoorState {
    backendPool?: pulumi.Input<pulumi.Input<inputs.FrontdoorBackendPool>[]>;
    backendPoolHealthProbe?: pulumi.Input<pulumi.Input<inputs.FrontdoorBackendPoolHealthProbe>[]>;
    backendPoolHealthProbes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    backendPoolLoadBalancingSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    backendPoolLoadBalancings?: pulumi.Input<pulumi.Input<inputs.FrontdoorBackendPoolLoadBalancing>[]>;
    backendPoolSettings?: pulumi.Input<pulumi.Input<inputs.FrontdoorBackendPoolSetting>[]>;
    backendPools?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    cname?: pulumi.Input<string>;
    explicitResourceOrders?: pulumi.Input<pulumi.Input<inputs.FrontdoorExplicitResourceOrder>[]>;
    friendlyName?: pulumi.Input<string>;
    frontendEndpoint?: pulumi.Input<pulumi.Input<inputs.FrontdoorFrontendEndpoint>[]>;
    frontendEndpoints?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    headerFrontdoorId?: pulumi.Input<string>;
    loadBalancerEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    routingRule?: pulumi.Input<pulumi.Input<inputs.FrontdoorRoutingRule>[]>;
    routingRules?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.FrontdoorTimeouts>;
}

/**
 * The set of arguments for constructing a Frontdoor resource.
 */
export interface FrontdoorArgs {
    backendPool: pulumi.Input<pulumi.Input<inputs.FrontdoorBackendPool>[]>;
    backendPoolHealthProbe: pulumi.Input<pulumi.Input<inputs.FrontdoorBackendPoolHealthProbe>[]>;
    backendPoolLoadBalancings: pulumi.Input<pulumi.Input<inputs.FrontdoorBackendPoolLoadBalancing>[]>;
    backendPoolSettings?: pulumi.Input<pulumi.Input<inputs.FrontdoorBackendPoolSetting>[]>;
    friendlyName?: pulumi.Input<string>;
    frontendEndpoint: pulumi.Input<pulumi.Input<inputs.FrontdoorFrontendEndpoint>[]>;
    loadBalancerEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    routingRule: pulumi.Input<pulumi.Input<inputs.FrontdoorRoutingRule>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.FrontdoorTimeouts>;
}
