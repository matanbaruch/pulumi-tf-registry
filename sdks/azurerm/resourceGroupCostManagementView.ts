// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ResourceGroupCostManagementView extends pulumi.CustomResource {
    /**
     * Get an existing ResourceGroupCostManagementView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceGroupCostManagementViewState, opts?: pulumi.CustomResourceOptions): ResourceGroupCostManagementView {
        return new ResourceGroupCostManagementView(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/resourceGroupCostManagementView:ResourceGroupCostManagementView';

    /**
     * Returns true if the given object is an instance of ResourceGroupCostManagementView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceGroupCostManagementView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceGroupCostManagementView.__pulumiType;
    }

    public readonly accumulated!: pulumi.Output<boolean>;
    public readonly chartType!: pulumi.Output<string>;
    public readonly dataset!: pulumi.Output<outputs.ResourceGroupCostManagementViewDataset>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly kpis!: pulumi.Output<outputs.ResourceGroupCostManagementViewKpi[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pivots!: pulumi.Output<outputs.ResourceGroupCostManagementViewPivot[] | undefined>;
    public readonly reportType!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly timeframe!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ResourceGroupCostManagementViewTimeouts | undefined>;

    /**
     * Create a ResourceGroupCostManagementView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceGroupCostManagementViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceGroupCostManagementViewArgs | ResourceGroupCostManagementViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceGroupCostManagementViewState | undefined;
            resourceInputs["accumulated"] = state ? state.accumulated : undefined;
            resourceInputs["chartType"] = state ? state.chartType : undefined;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["kpis"] = state ? state.kpis : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pivots"] = state ? state.pivots : undefined;
            resourceInputs["reportType"] = state ? state.reportType : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["timeframe"] = state ? state.timeframe : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ResourceGroupCostManagementViewArgs | undefined;
            if ((!args || args.accumulated === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accumulated'");
            }
            if ((!args || args.chartType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chartType'");
            }
            if ((!args || args.dataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.reportType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reportType'");
            }
            if ((!args || args.resourceGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupId'");
            }
            if ((!args || args.timeframe === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeframe'");
            }
            resourceInputs["accumulated"] = args ? args.accumulated : undefined;
            resourceInputs["chartType"] = args ? args.chartType : undefined;
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["kpis"] = args ? args.kpis : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pivots"] = args ? args.pivots : undefined;
            resourceInputs["reportType"] = args ? args.reportType : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["timeframe"] = args ? args.timeframe : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceGroupCostManagementView.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourceGroupCostManagementView resources.
 */
export interface ResourceGroupCostManagementViewState {
    accumulated?: pulumi.Input<boolean>;
    chartType?: pulumi.Input<string>;
    dataset?: pulumi.Input<inputs.ResourceGroupCostManagementViewDataset>;
    displayName?: pulumi.Input<string>;
    kpis?: pulumi.Input<pulumi.Input<inputs.ResourceGroupCostManagementViewKpi>[]>;
    name?: pulumi.Input<string>;
    pivots?: pulumi.Input<pulumi.Input<inputs.ResourceGroupCostManagementViewPivot>[]>;
    reportType?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ResourceGroupCostManagementViewTimeouts>;
}

/**
 * The set of arguments for constructing a ResourceGroupCostManagementView resource.
 */
export interface ResourceGroupCostManagementViewArgs {
    accumulated: pulumi.Input<boolean>;
    chartType: pulumi.Input<string>;
    dataset: pulumi.Input<inputs.ResourceGroupCostManagementViewDataset>;
    displayName: pulumi.Input<string>;
    kpis?: pulumi.Input<pulumi.Input<inputs.ResourceGroupCostManagementViewKpi>[]>;
    name?: pulumi.Input<string>;
    pivots?: pulumi.Input<pulumi.Input<inputs.ResourceGroupCostManagementViewPivot>[]>;
    reportType: pulumi.Input<string>;
    resourceGroupId: pulumi.Input<string>;
    timeframe: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ResourceGroupCostManagementViewTimeouts>;
}
