// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApiManagement(args: GetApiManagementArgs, opts?: pulumi.InvokeOptions): Promise<GetApiManagementResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getApiManagement:getApiManagement", {
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "tags": args.tags,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApiManagement.
 */
export interface GetApiManagementArgs {
    id?: string;
    name: string;
    resourceGroupName: string;
    tags?: {[key: string]: string};
    timeouts?: inputs.GetApiManagementTimeouts;
}

/**
 * A collection of values returned by getApiManagement.
 */
export interface GetApiManagementResult {
    readonly additionalLocations: outputs.GetApiManagementAdditionalLocation[];
    readonly developerPortalUrl: string;
    readonly gatewayRegionalUrl: string;
    readonly gatewayUrl: string;
    readonly hostnameConfigurations: outputs.GetApiManagementHostnameConfiguration[];
    readonly id: string;
    readonly identities: outputs.GetApiManagementIdentity[];
    readonly location: string;
    readonly managementApiUrl: string;
    readonly name: string;
    readonly notificationSenderEmail: string;
    readonly portalUrl: string;
    readonly privateIpAddresses: string[];
    readonly publicIpAddressId: string;
    readonly publicIpAddresses: string[];
    readonly publisherEmail: string;
    readonly publisherName: string;
    readonly resourceGroupName: string;
    readonly scmUrl: string;
    readonly skuName: string;
    readonly tags?: {[key: string]: string};
    readonly tenantAccesses: outputs.GetApiManagementTenantAccess[];
    readonly timeouts?: outputs.GetApiManagementTimeouts;
}
export function getApiManagementOutput(args: GetApiManagementOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApiManagementResult> {
    return pulumi.output(args).apply((a: any) => getApiManagement(a, opts))
}

/**
 * A collection of arguments for invoking getApiManagement.
 */
export interface GetApiManagementOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GetApiManagementTimeoutsArgs>;
}
