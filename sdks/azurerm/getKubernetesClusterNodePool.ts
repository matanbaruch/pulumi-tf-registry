// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKubernetesClusterNodePool(args: GetKubernetesClusterNodePoolArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesClusterNodePoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getKubernetesClusterNodePool:getKubernetesClusterNodePool", {
        "id": args.id,
        "kubernetesClusterName": args.kubernetesClusterName,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKubernetesClusterNodePool.
 */
export interface GetKubernetesClusterNodePoolArgs {
    id?: string;
    kubernetesClusterName: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetKubernetesClusterNodePoolTimeouts;
}

/**
 * A collection of values returned by getKubernetesClusterNodePool.
 */
export interface GetKubernetesClusterNodePoolResult {
    readonly autoScalingEnabled: boolean;
    readonly evictionPolicy: string;
    readonly id: string;
    readonly kubernetesClusterName: string;
    readonly maxCount: number;
    readonly maxPods: number;
    readonly minCount: number;
    readonly mode: string;
    readonly name: string;
    readonly nodeCount: number;
    readonly nodeLabels: {[key: string]: string};
    readonly nodePublicIpEnabled: boolean;
    readonly nodePublicIpPrefixId: string;
    readonly nodeTaints: string[];
    readonly orchestratorVersion: string;
    readonly osDiskSizeGb: number;
    readonly osDiskType: string;
    readonly osType: string;
    readonly priority: string;
    readonly proximityPlacementGroupId: string;
    readonly resourceGroupName: string;
    readonly spotMaxPrice: number;
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetKubernetesClusterNodePoolTimeouts;
    readonly upgradeSettings: outputs.GetKubernetesClusterNodePoolUpgradeSetting[];
    readonly vmSize: string;
    readonly vnetSubnetId: string;
    readonly zones: string[];
}
export function getKubernetesClusterNodePoolOutput(args: GetKubernetesClusterNodePoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesClusterNodePoolResult> {
    return pulumi.output(args).apply((a: any) => getKubernetesClusterNodePool(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetesClusterNodePool.
 */
export interface GetKubernetesClusterNodePoolOutputArgs {
    id?: pulumi.Input<string>;
    kubernetesClusterName: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetKubernetesClusterNodePoolTimeoutsArgs>;
}
