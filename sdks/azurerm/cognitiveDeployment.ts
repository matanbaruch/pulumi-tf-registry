// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CognitiveDeployment extends pulumi.CustomResource {
    /**
     * Get an existing CognitiveDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CognitiveDeploymentState, opts?: pulumi.CustomResourceOptions): CognitiveDeployment {
        return new CognitiveDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/cognitiveDeployment:CognitiveDeployment';

    /**
     * Returns true if the given object is an instance of CognitiveDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CognitiveDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CognitiveDeployment.__pulumiType;
    }

    public readonly cognitiveAccountId!: pulumi.Output<string>;
    public readonly model!: pulumi.Output<outputs.CognitiveDeploymentModel>;
    public readonly name!: pulumi.Output<string>;
    public readonly raiPolicyName!: pulumi.Output<string | undefined>;
    public readonly sku!: pulumi.Output<outputs.CognitiveDeploymentSku>;
    public readonly timeouts!: pulumi.Output<outputs.CognitiveDeploymentTimeouts | undefined>;
    public readonly versionUpgradeOption!: pulumi.Output<string | undefined>;

    /**
     * Create a CognitiveDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CognitiveDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CognitiveDeploymentArgs | CognitiveDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CognitiveDeploymentState | undefined;
            resourceInputs["cognitiveAccountId"] = state ? state.cognitiveAccountId : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["raiPolicyName"] = state ? state.raiPolicyName : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["versionUpgradeOption"] = state ? state.versionUpgradeOption : undefined;
        } else {
            const args = argsOrState as CognitiveDeploymentArgs | undefined;
            if ((!args || args.cognitiveAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cognitiveAccountId'");
            }
            if ((!args || args.model === undefined) && !opts.urn) {
                throw new Error("Missing required property 'model'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["cognitiveAccountId"] = args ? args.cognitiveAccountId : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["raiPolicyName"] = args ? args.raiPolicyName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["versionUpgradeOption"] = args ? args.versionUpgradeOption : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CognitiveDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CognitiveDeployment resources.
 */
export interface CognitiveDeploymentState {
    cognitiveAccountId?: pulumi.Input<string>;
    model?: pulumi.Input<inputs.CognitiveDeploymentModel>;
    name?: pulumi.Input<string>;
    raiPolicyName?: pulumi.Input<string>;
    sku?: pulumi.Input<inputs.CognitiveDeploymentSku>;
    timeouts?: pulumi.Input<inputs.CognitiveDeploymentTimeouts>;
    versionUpgradeOption?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CognitiveDeployment resource.
 */
export interface CognitiveDeploymentArgs {
    cognitiveAccountId: pulumi.Input<string>;
    model: pulumi.Input<inputs.CognitiveDeploymentModel>;
    name?: pulumi.Input<string>;
    raiPolicyName?: pulumi.Input<string>;
    sku: pulumi.Input<inputs.CognitiveDeploymentSku>;
    timeouts?: pulumi.Input<inputs.CognitiveDeploymentTimeouts>;
    versionUpgradeOption?: pulumi.Input<string>;
}
