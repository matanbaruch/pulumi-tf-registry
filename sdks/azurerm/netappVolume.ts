// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetappVolume extends pulumi.CustomResource {
    /**
     * Get an existing NetappVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetappVolumeState, opts?: pulumi.CustomResourceOptions): NetappVolume {
        return new NetappVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/netappVolume:NetappVolume';

    /**
     * Returns true if the given object is an instance of NetappVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetappVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetappVolume.__pulumiType;
    }

    public readonly accountName!: pulumi.Output<string>;
    public readonly azureVmwareDataStoreEnabled!: pulumi.Output<boolean | undefined>;
    public readonly createFromSnapshotResourceId!: pulumi.Output<string | undefined>;
    public readonly dataProtectionReplication!: pulumi.Output<outputs.NetappVolumeDataProtectionReplication | undefined>;
    public readonly dataProtectionSnapshotPolicy!: pulumi.Output<outputs.NetappVolumeDataProtectionSnapshotPolicy | undefined>;
    public readonly encryptionKeySource!: pulumi.Output<string>;
    public readonly exportPolicyRules!: pulumi.Output<outputs.NetappVolumeExportPolicyRule[] | undefined>;
    /**
     * Enable to allow Kerberos secured volumes. Requires appropriate export rules as well as the parent
     * `azurerm.NetappAccount` having a defined AD connection.
     */
    public readonly kerberosEnabled!: pulumi.Output<boolean | undefined>;
    public readonly keyVaultPrivateEndpointId!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public /*out*/ readonly mountIpAddresses!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkFeatures!: pulumi.Output<string | undefined>;
    public readonly poolName!: pulumi.Output<string>;
    public readonly protocols!: pulumi.Output<string[]>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly securityStyle!: pulumi.Output<string>;
    public readonly serviceLevel!: pulumi.Output<string>;
    /**
     * Enable access based enumeration setting for SMB/Dual Protocol volume. When enabled, users who do not have permission to
     * access a shared folder or file underneath it, do not see that shared resource displayed in their environment.
     */
    public readonly smbAccessBasedEnumerationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Continuous availability option should be used only for SQL and FSLogix workloads. Using it for any other SMB workloads
     * is not supported.
     */
    public readonly smbContinuousAvailabilityEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable non browsable share setting for SMB/Dual Protocol volume. When enabled, it restricts windows clients to browse
     * the share
     */
    public readonly smbNonBrowsableEnabled!: pulumi.Output<boolean | undefined>;
    public readonly snapshotDirectoryVisible!: pulumi.Output<boolean>;
    public readonly storageQuotaInGb!: pulumi.Output<number>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly throughputInMibps!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.NetappVolumeTimeouts | undefined>;
    public readonly volumePath!: pulumi.Output<string>;
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a NetappVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetappVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetappVolumeArgs | NetappVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetappVolumeState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["azureVmwareDataStoreEnabled"] = state ? state.azureVmwareDataStoreEnabled : undefined;
            resourceInputs["createFromSnapshotResourceId"] = state ? state.createFromSnapshotResourceId : undefined;
            resourceInputs["dataProtectionReplication"] = state ? state.dataProtectionReplication : undefined;
            resourceInputs["dataProtectionSnapshotPolicy"] = state ? state.dataProtectionSnapshotPolicy : undefined;
            resourceInputs["encryptionKeySource"] = state ? state.encryptionKeySource : undefined;
            resourceInputs["exportPolicyRules"] = state ? state.exportPolicyRules : undefined;
            resourceInputs["kerberosEnabled"] = state ? state.kerberosEnabled : undefined;
            resourceInputs["keyVaultPrivateEndpointId"] = state ? state.keyVaultPrivateEndpointId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mountIpAddresses"] = state ? state.mountIpAddresses : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkFeatures"] = state ? state.networkFeatures : undefined;
            resourceInputs["poolName"] = state ? state.poolName : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["securityStyle"] = state ? state.securityStyle : undefined;
            resourceInputs["serviceLevel"] = state ? state.serviceLevel : undefined;
            resourceInputs["smbAccessBasedEnumerationEnabled"] = state ? state.smbAccessBasedEnumerationEnabled : undefined;
            resourceInputs["smbContinuousAvailabilityEnabled"] = state ? state.smbContinuousAvailabilityEnabled : undefined;
            resourceInputs["smbNonBrowsableEnabled"] = state ? state.smbNonBrowsableEnabled : undefined;
            resourceInputs["snapshotDirectoryVisible"] = state ? state.snapshotDirectoryVisible : undefined;
            resourceInputs["storageQuotaInGb"] = state ? state.storageQuotaInGb : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throughputInMibps"] = state ? state.throughputInMibps : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumePath"] = state ? state.volumePath : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as NetappVolumeArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.poolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serviceLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceLevel'");
            }
            if ((!args || args.storageQuotaInGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageQuotaInGb'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.volumePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumePath'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["azureVmwareDataStoreEnabled"] = args ? args.azureVmwareDataStoreEnabled : undefined;
            resourceInputs["createFromSnapshotResourceId"] = args ? args.createFromSnapshotResourceId : undefined;
            resourceInputs["dataProtectionReplication"] = args ? args.dataProtectionReplication : undefined;
            resourceInputs["dataProtectionSnapshotPolicy"] = args ? args.dataProtectionSnapshotPolicy : undefined;
            resourceInputs["encryptionKeySource"] = args ? args.encryptionKeySource : undefined;
            resourceInputs["exportPolicyRules"] = args ? args.exportPolicyRules : undefined;
            resourceInputs["kerberosEnabled"] = args ? args.kerberosEnabled : undefined;
            resourceInputs["keyVaultPrivateEndpointId"] = args ? args.keyVaultPrivateEndpointId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkFeatures"] = args ? args.networkFeatures : undefined;
            resourceInputs["poolName"] = args ? args.poolName : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["securityStyle"] = args ? args.securityStyle : undefined;
            resourceInputs["serviceLevel"] = args ? args.serviceLevel : undefined;
            resourceInputs["smbAccessBasedEnumerationEnabled"] = args ? args.smbAccessBasedEnumerationEnabled : undefined;
            resourceInputs["smbContinuousAvailabilityEnabled"] = args ? args.smbContinuousAvailabilityEnabled : undefined;
            resourceInputs["smbNonBrowsableEnabled"] = args ? args.smbNonBrowsableEnabled : undefined;
            resourceInputs["snapshotDirectoryVisible"] = args ? args.snapshotDirectoryVisible : undefined;
            resourceInputs["storageQuotaInGb"] = args ? args.storageQuotaInGb : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throughputInMibps"] = args ? args.throughputInMibps : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumePath"] = args ? args.volumePath : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["mountIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetappVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetappVolume resources.
 */
export interface NetappVolumeState {
    accountName?: pulumi.Input<string>;
    azureVmwareDataStoreEnabled?: pulumi.Input<boolean>;
    createFromSnapshotResourceId?: pulumi.Input<string>;
    dataProtectionReplication?: pulumi.Input<inputs.NetappVolumeDataProtectionReplication>;
    dataProtectionSnapshotPolicy?: pulumi.Input<inputs.NetappVolumeDataProtectionSnapshotPolicy>;
    encryptionKeySource?: pulumi.Input<string>;
    exportPolicyRules?: pulumi.Input<pulumi.Input<inputs.NetappVolumeExportPolicyRule>[]>;
    /**
     * Enable to allow Kerberos secured volumes. Requires appropriate export rules as well as the parent
     * `azurerm.NetappAccount` having a defined AD connection.
     */
    kerberosEnabled?: pulumi.Input<boolean>;
    keyVaultPrivateEndpointId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    mountIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    networkFeatures?: pulumi.Input<string>;
    poolName?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupName?: pulumi.Input<string>;
    securityStyle?: pulumi.Input<string>;
    serviceLevel?: pulumi.Input<string>;
    /**
     * Enable access based enumeration setting for SMB/Dual Protocol volume. When enabled, users who do not have permission to
     * access a shared folder or file underneath it, do not see that shared resource displayed in their environment.
     */
    smbAccessBasedEnumerationEnabled?: pulumi.Input<boolean>;
    /**
     * Continuous availability option should be used only for SQL and FSLogix workloads. Using it for any other SMB workloads
     * is not supported.
     */
    smbContinuousAvailabilityEnabled?: pulumi.Input<boolean>;
    /**
     * Enable non browsable share setting for SMB/Dual Protocol volume. When enabled, it restricts windows clients to browse
     * the share
     */
    smbNonBrowsableEnabled?: pulumi.Input<boolean>;
    snapshotDirectoryVisible?: pulumi.Input<boolean>;
    storageQuotaInGb?: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throughputInMibps?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.NetappVolumeTimeouts>;
    volumePath?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetappVolume resource.
 */
export interface NetappVolumeArgs {
    accountName: pulumi.Input<string>;
    azureVmwareDataStoreEnabled?: pulumi.Input<boolean>;
    createFromSnapshotResourceId?: pulumi.Input<string>;
    dataProtectionReplication?: pulumi.Input<inputs.NetappVolumeDataProtectionReplication>;
    dataProtectionSnapshotPolicy?: pulumi.Input<inputs.NetappVolumeDataProtectionSnapshotPolicy>;
    encryptionKeySource?: pulumi.Input<string>;
    exportPolicyRules?: pulumi.Input<pulumi.Input<inputs.NetappVolumeExportPolicyRule>[]>;
    /**
     * Enable to allow Kerberos secured volumes. Requires appropriate export rules as well as the parent
     * `azurerm.NetappAccount` having a defined AD connection.
     */
    kerberosEnabled?: pulumi.Input<boolean>;
    keyVaultPrivateEndpointId?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkFeatures?: pulumi.Input<string>;
    poolName: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupName: pulumi.Input<string>;
    securityStyle?: pulumi.Input<string>;
    serviceLevel: pulumi.Input<string>;
    /**
     * Enable access based enumeration setting for SMB/Dual Protocol volume. When enabled, users who do not have permission to
     * access a shared folder or file underneath it, do not see that shared resource displayed in their environment.
     */
    smbAccessBasedEnumerationEnabled?: pulumi.Input<boolean>;
    /**
     * Continuous availability option should be used only for SQL and FSLogix workloads. Using it for any other SMB workloads
     * is not supported.
     */
    smbContinuousAvailabilityEnabled?: pulumi.Input<boolean>;
    /**
     * Enable non browsable share setting for SMB/Dual Protocol volume. When enabled, it restricts windows clients to browse
     * the share
     */
    smbNonBrowsableEnabled?: pulumi.Input<boolean>;
    snapshotDirectoryVisible?: pulumi.Input<boolean>;
    storageQuotaInGb: pulumi.Input<number>;
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throughputInMibps?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.NetappVolumeTimeouts>;
    volumePath: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
