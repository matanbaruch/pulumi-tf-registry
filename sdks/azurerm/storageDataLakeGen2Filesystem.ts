// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageDataLakeGen2Filesystem extends pulumi.CustomResource {
    /**
     * Get an existing StorageDataLakeGen2Filesystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageDataLakeGen2FilesystemState, opts?: pulumi.CustomResourceOptions): StorageDataLakeGen2Filesystem {
        return new StorageDataLakeGen2Filesystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/storageDataLakeGen2Filesystem:StorageDataLakeGen2Filesystem';

    /**
     * Returns true if the given object is an instance of StorageDataLakeGen2Filesystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageDataLakeGen2Filesystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageDataLakeGen2Filesystem.__pulumiType;
    }

    public readonly aces!: pulumi.Output<outputs.StorageDataLakeGen2FilesystemAce[] | undefined>;
    public readonly defaultEncryptionScope!: pulumi.Output<string>;
    public readonly group!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly owner!: pulumi.Output<string>;
    public readonly properties!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly storageAccountId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageDataLakeGen2FilesystemTimeouts | undefined>;

    /**
     * Create a StorageDataLakeGen2Filesystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageDataLakeGen2FilesystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageDataLakeGen2FilesystemArgs | StorageDataLakeGen2FilesystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageDataLakeGen2FilesystemState | undefined;
            resourceInputs["aces"] = state ? state.aces : undefined;
            resourceInputs["defaultEncryptionScope"] = state ? state.defaultEncryptionScope : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StorageDataLakeGen2FilesystemArgs | undefined;
            if ((!args || args.storageAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            resourceInputs["aces"] = args ? args.aces : undefined;
            resourceInputs["defaultEncryptionScope"] = args ? args.defaultEncryptionScope : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageDataLakeGen2Filesystem.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageDataLakeGen2Filesystem resources.
 */
export interface StorageDataLakeGen2FilesystemState {
    aces?: pulumi.Input<pulumi.Input<inputs.StorageDataLakeGen2FilesystemAce>[]>;
    defaultEncryptionScope?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    storageAccountId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageDataLakeGen2FilesystemTimeouts>;
}

/**
 * The set of arguments for constructing a StorageDataLakeGen2Filesystem resource.
 */
export interface StorageDataLakeGen2FilesystemArgs {
    aces?: pulumi.Input<pulumi.Input<inputs.StorageDataLakeGen2FilesystemAce>[]>;
    defaultEncryptionScope?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    storageAccountId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageDataLakeGen2FilesystemTimeouts>;
}
