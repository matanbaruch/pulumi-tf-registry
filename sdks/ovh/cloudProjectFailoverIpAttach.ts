// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudProjectFailoverIpAttach extends pulumi.CustomResource {
    /**
     * Get an existing CloudProjectFailoverIpAttach resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudProjectFailoverIpAttachState, opts?: pulumi.CustomResourceOptions): CloudProjectFailoverIpAttach {
        return new CloudProjectFailoverIpAttach(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/cloudProjectFailoverIpAttach:CloudProjectFailoverIpAttach';

    /**
     * Returns true if the given object is an instance of CloudProjectFailoverIpAttach.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudProjectFailoverIpAttach {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudProjectFailoverIpAttach.__pulumiType;
    }

    /**
     * IP block
     */
    public readonly block!: pulumi.Output<string>;
    /**
     * Ip continent
     */
    public readonly continentCode!: pulumi.Output<string>;
    /**
     * Ip location
     */
    public readonly geoLoc!: pulumi.Output<string>;
    /**
     * Ip
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * Current operation progress in percent
     */
    public /*out*/ readonly progress!: pulumi.Output<number>;
    /**
     * Instance where ip is routed to
     */
    public readonly routedTo!: pulumi.Output<string>;
    /**
     * The service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Ip status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * IP sub type
     */
    public /*out*/ readonly subType!: pulumi.Output<string>;

    /**
     * Create a CloudProjectFailoverIpAttach resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudProjectFailoverIpAttachArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudProjectFailoverIpAttachArgs | CloudProjectFailoverIpAttachState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudProjectFailoverIpAttachState | undefined;
            resourceInputs["block"] = state ? state.block : undefined;
            resourceInputs["continentCode"] = state ? state.continentCode : undefined;
            resourceInputs["geoLoc"] = state ? state.geoLoc : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["progress"] = state ? state.progress : undefined;
            resourceInputs["routedTo"] = state ? state.routedTo : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subType"] = state ? state.subType : undefined;
        } else {
            const args = argsOrState as CloudProjectFailoverIpAttachArgs | undefined;
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["block"] = args ? args.block : undefined;
            resourceInputs["continentCode"] = args ? args.continentCode : undefined;
            resourceInputs["geoLoc"] = args ? args.geoLoc : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["routedTo"] = args ? args.routedTo : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["progress"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudProjectFailoverIpAttach.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudProjectFailoverIpAttach resources.
 */
export interface CloudProjectFailoverIpAttachState {
    /**
     * IP block
     */
    block?: pulumi.Input<string>;
    /**
     * Ip continent
     */
    continentCode?: pulumi.Input<string>;
    /**
     * Ip location
     */
    geoLoc?: pulumi.Input<string>;
    /**
     * Ip
     */
    ip?: pulumi.Input<string>;
    /**
     * Current operation progress in percent
     */
    progress?: pulumi.Input<number>;
    /**
     * Instance where ip is routed to
     */
    routedTo?: pulumi.Input<string>;
    /**
     * The service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Ip status
     */
    status?: pulumi.Input<string>;
    /**
     * IP sub type
     */
    subType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudProjectFailoverIpAttach resource.
 */
export interface CloudProjectFailoverIpAttachArgs {
    /**
     * IP block
     */
    block?: pulumi.Input<string>;
    /**
     * Ip continent
     */
    continentCode?: pulumi.Input<string>;
    /**
     * Ip location
     */
    geoLoc?: pulumi.Input<string>;
    /**
     * Ip
     */
    ip?: pulumi.Input<string>;
    /**
     * Instance where ip is routed to
     */
    routedTo?: pulumi.Input<string>;
    /**
     * The service name
     */
    serviceName: pulumi.Input<string>;
}
