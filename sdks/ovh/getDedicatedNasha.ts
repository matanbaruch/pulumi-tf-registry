// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDedicatedNasha(args: GetDedicatedNashaArgs, opts?: pulumi.InvokeOptions): Promise<GetDedicatedNashaResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ovh:index/getDedicatedNasha:getDedicatedNasha", {
        "id": args.id,
        "serviceName": args.serviceName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDedicatedNasha.
 */
export interface GetDedicatedNashaArgs {
    id?: string;
    serviceName: string;
}

/**
 * A collection of values returned by getDedicatedNasha.
 */
export interface GetDedicatedNashaResult {
    readonly canCreatePartition: boolean;
    readonly customName: string;
    readonly datacenter: string;
    readonly diskType: string;
    readonly id: string;
    readonly ip: string;
    readonly monitored: boolean;
    readonly serviceName: string;
    readonly urn: string;
    readonly zpoolCapacity: number;
    readonly zpoolSize: number;
}
export function getDedicatedNashaOutput(args: GetDedicatedNashaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDedicatedNashaResult> {
    return pulumi.output(args).apply((a: any) => getDedicatedNasha(a, opts))
}

/**
 * A collection of arguments for invoking getDedicatedNasha.
 */
export interface GetDedicatedNashaOutputArgs {
    id?: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
}
