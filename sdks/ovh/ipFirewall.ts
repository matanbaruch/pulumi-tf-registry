// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpFirewall extends pulumi.CustomResource {
    /**
     * Get an existing IpFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpFirewallState, opts?: pulumi.CustomResourceOptions): IpFirewall {
        return new IpFirewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/ipFirewall:IpFirewall';

    /**
     * Returns true if the given object is an instance of IpFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpFirewall.__pulumiType;
    }

    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * IPv4 address (e.g., 192.0.2.0)
     */
    public readonly ipOnFirewall!: pulumi.Output<string>;
    /**
     * Current state of your ip on firewall
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a IpFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpFirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpFirewallArgs | IpFirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpFirewallState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipOnFirewall"] = state ? state.ipOnFirewall : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as IpFirewallArgs | undefined;
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.ipOnFirewall === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipOnFirewall'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipOnFirewall"] = args ? args.ipOnFirewall : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpFirewall.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpFirewall resources.
 */
export interface IpFirewallState {
    enabled?: pulumi.Input<boolean>;
    /**
     * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
     */
    ip?: pulumi.Input<string>;
    /**
     * IPv4 address (e.g., 192.0.2.0)
     */
    ipOnFirewall?: pulumi.Input<string>;
    /**
     * Current state of your ip on firewall
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpFirewall resource.
 */
export interface IpFirewallArgs {
    enabled?: pulumi.Input<boolean>;
    /**
     * IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)
     */
    ip: pulumi.Input<string>;
    /**
     * IPv4 address (e.g., 192.0.2.0)
     */
    ipOnFirewall: pulumi.Input<string>;
}
