// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HostingPrivatedatabaseWhitelist extends pulumi.CustomResource {
    /**
     * Get an existing HostingPrivatedatabaseWhitelist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostingPrivatedatabaseWhitelistState, opts?: pulumi.CustomResourceOptions): HostingPrivatedatabaseWhitelist {
        return new HostingPrivatedatabaseWhitelist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/hostingPrivatedatabaseWhitelist:HostingPrivatedatabaseWhitelist';

    /**
     * Returns true if the given object is an instance of HostingPrivatedatabaseWhitelist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HostingPrivatedatabaseWhitelist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HostingPrivatedatabaseWhitelist.__pulumiType;
    }

    /**
     * The whitelisted IP in your instance
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * Custom name for your Whitelisted IP
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Authorize this IP to access service port
     */
    public readonly service!: pulumi.Output<boolean>;
    /**
     * The internal name of your private database
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Authorize this IP to access SFTP port
     */
    public readonly sftp!: pulumi.Output<boolean>;

    /**
     * Create a HostingPrivatedatabaseWhitelist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostingPrivatedatabaseWhitelistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostingPrivatedatabaseWhitelistArgs | HostingPrivatedatabaseWhitelistState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostingPrivatedatabaseWhitelistState | undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["sftp"] = state ? state.sftp : undefined;
        } else {
            const args = argsOrState as HostingPrivatedatabaseWhitelistArgs | undefined;
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.sftp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sftp'");
            }
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["sftp"] = args ? args.sftp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HostingPrivatedatabaseWhitelist.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HostingPrivatedatabaseWhitelist resources.
 */
export interface HostingPrivatedatabaseWhitelistState {
    /**
     * The whitelisted IP in your instance
     */
    ip?: pulumi.Input<string>;
    /**
     * Custom name for your Whitelisted IP
     */
    name?: pulumi.Input<string>;
    /**
     * Authorize this IP to access service port
     */
    service?: pulumi.Input<boolean>;
    /**
     * The internal name of your private database
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Authorize this IP to access SFTP port
     */
    sftp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a HostingPrivatedatabaseWhitelist resource.
 */
export interface HostingPrivatedatabaseWhitelistArgs {
    /**
     * The whitelisted IP in your instance
     */
    ip: pulumi.Input<string>;
    /**
     * Custom name for your Whitelisted IP
     */
    name?: pulumi.Input<string>;
    /**
     * Authorize this IP to access service port
     */
    service: pulumi.Input<boolean>;
    /**
     * The internal name of your private database
     */
    serviceName: pulumi.Input<string>;
    /**
     * Authorize this IP to access SFTP port
     */
    sftp: pulumi.Input<boolean>;
}
