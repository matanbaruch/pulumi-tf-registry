// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CloudProjectArgs, CloudProjectState } from "./cloudProject";
export type CloudProject = import("./cloudProject").CloudProject;
export const CloudProject: typeof import("./cloudProject").CloudProject = null as any;
utilities.lazyLoad(exports, ["CloudProject"], () => require("./cloudProject"));

export { CloudProjectAlertingArgs, CloudProjectAlertingState } from "./cloudProjectAlerting";
export type CloudProjectAlerting = import("./cloudProjectAlerting").CloudProjectAlerting;
export const CloudProjectAlerting: typeof import("./cloudProjectAlerting").CloudProjectAlerting = null as any;
utilities.lazyLoad(exports, ["CloudProjectAlerting"], () => require("./cloudProjectAlerting"));

export { CloudProjectContainerregistryArgs, CloudProjectContainerregistryState } from "./cloudProjectContainerregistry";
export type CloudProjectContainerregistry = import("./cloudProjectContainerregistry").CloudProjectContainerregistry;
export const CloudProjectContainerregistry: typeof import("./cloudProjectContainerregistry").CloudProjectContainerregistry = null as any;
utilities.lazyLoad(exports, ["CloudProjectContainerregistry"], () => require("./cloudProjectContainerregistry"));

export { CloudProjectContainerregistryIpRestrictionsManagementArgs, CloudProjectContainerregistryIpRestrictionsManagementState } from "./cloudProjectContainerregistryIpRestrictionsManagement";
export type CloudProjectContainerregistryIpRestrictionsManagement = import("./cloudProjectContainerregistryIpRestrictionsManagement").CloudProjectContainerregistryIpRestrictionsManagement;
export const CloudProjectContainerregistryIpRestrictionsManagement: typeof import("./cloudProjectContainerregistryIpRestrictionsManagement").CloudProjectContainerregistryIpRestrictionsManagement = null as any;
utilities.lazyLoad(exports, ["CloudProjectContainerregistryIpRestrictionsManagement"], () => require("./cloudProjectContainerregistryIpRestrictionsManagement"));

export { CloudProjectContainerregistryIpRestrictionsRegistryArgs, CloudProjectContainerregistryIpRestrictionsRegistryState } from "./cloudProjectContainerregistryIpRestrictionsRegistry";
export type CloudProjectContainerregistryIpRestrictionsRegistry = import("./cloudProjectContainerregistryIpRestrictionsRegistry").CloudProjectContainerregistryIpRestrictionsRegistry;
export const CloudProjectContainerregistryIpRestrictionsRegistry: typeof import("./cloudProjectContainerregistryIpRestrictionsRegistry").CloudProjectContainerregistryIpRestrictionsRegistry = null as any;
utilities.lazyLoad(exports, ["CloudProjectContainerregistryIpRestrictionsRegistry"], () => require("./cloudProjectContainerregistryIpRestrictionsRegistry"));

export { CloudProjectContainerregistryOidcArgs, CloudProjectContainerregistryOidcState } from "./cloudProjectContainerregistryOidc";
export type CloudProjectContainerregistryOidc = import("./cloudProjectContainerregistryOidc").CloudProjectContainerregistryOidc;
export const CloudProjectContainerregistryOidc: typeof import("./cloudProjectContainerregistryOidc").CloudProjectContainerregistryOidc = null as any;
utilities.lazyLoad(exports, ["CloudProjectContainerregistryOidc"], () => require("./cloudProjectContainerregistryOidc"));

export { CloudProjectContainerregistryUserArgs, CloudProjectContainerregistryUserState } from "./cloudProjectContainerregistryUser";
export type CloudProjectContainerregistryUser = import("./cloudProjectContainerregistryUser").CloudProjectContainerregistryUser;
export const CloudProjectContainerregistryUser: typeof import("./cloudProjectContainerregistryUser").CloudProjectContainerregistryUser = null as any;
utilities.lazyLoad(exports, ["CloudProjectContainerregistryUser"], () => require("./cloudProjectContainerregistryUser"));

export { CloudProjectDatabaseArgs, CloudProjectDatabaseState } from "./cloudProjectDatabase";
export type CloudProjectDatabase = import("./cloudProjectDatabase").CloudProjectDatabase;
export const CloudProjectDatabase: typeof import("./cloudProjectDatabase").CloudProjectDatabase = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabase"], () => require("./cloudProjectDatabase"));

export { CloudProjectDatabaseDatabaseArgs, CloudProjectDatabaseDatabaseState } from "./cloudProjectDatabaseDatabase";
export type CloudProjectDatabaseDatabase = import("./cloudProjectDatabaseDatabase").CloudProjectDatabaseDatabase;
export const CloudProjectDatabaseDatabase: typeof import("./cloudProjectDatabaseDatabase").CloudProjectDatabaseDatabase = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseDatabase"], () => require("./cloudProjectDatabaseDatabase"));

export { CloudProjectDatabaseIntegrationArgs, CloudProjectDatabaseIntegrationState } from "./cloudProjectDatabaseIntegration";
export type CloudProjectDatabaseIntegration = import("./cloudProjectDatabaseIntegration").CloudProjectDatabaseIntegration;
export const CloudProjectDatabaseIntegration: typeof import("./cloudProjectDatabaseIntegration").CloudProjectDatabaseIntegration = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseIntegration"], () => require("./cloudProjectDatabaseIntegration"));

export { CloudProjectDatabaseIpRestrictionArgs, CloudProjectDatabaseIpRestrictionState } from "./cloudProjectDatabaseIpRestriction";
export type CloudProjectDatabaseIpRestriction = import("./cloudProjectDatabaseIpRestriction").CloudProjectDatabaseIpRestriction;
export const CloudProjectDatabaseIpRestriction: typeof import("./cloudProjectDatabaseIpRestriction").CloudProjectDatabaseIpRestriction = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseIpRestriction"], () => require("./cloudProjectDatabaseIpRestriction"));

export { CloudProjectDatabaseKafkaAclArgs, CloudProjectDatabaseKafkaAclState } from "./cloudProjectDatabaseKafkaAcl";
export type CloudProjectDatabaseKafkaAcl = import("./cloudProjectDatabaseKafkaAcl").CloudProjectDatabaseKafkaAcl;
export const CloudProjectDatabaseKafkaAcl: typeof import("./cloudProjectDatabaseKafkaAcl").CloudProjectDatabaseKafkaAcl = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseKafkaAcl"], () => require("./cloudProjectDatabaseKafkaAcl"));

export { CloudProjectDatabaseKafkaSchemaregistryaclArgs, CloudProjectDatabaseKafkaSchemaregistryaclState } from "./cloudProjectDatabaseKafkaSchemaregistryacl";
export type CloudProjectDatabaseKafkaSchemaregistryacl = import("./cloudProjectDatabaseKafkaSchemaregistryacl").CloudProjectDatabaseKafkaSchemaregistryacl;
export const CloudProjectDatabaseKafkaSchemaregistryacl: typeof import("./cloudProjectDatabaseKafkaSchemaregistryacl").CloudProjectDatabaseKafkaSchemaregistryacl = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseKafkaSchemaregistryacl"], () => require("./cloudProjectDatabaseKafkaSchemaregistryacl"));

export { CloudProjectDatabaseKafkaTopicArgs, CloudProjectDatabaseKafkaTopicState } from "./cloudProjectDatabaseKafkaTopic";
export type CloudProjectDatabaseKafkaTopic = import("./cloudProjectDatabaseKafkaTopic").CloudProjectDatabaseKafkaTopic;
export const CloudProjectDatabaseKafkaTopic: typeof import("./cloudProjectDatabaseKafkaTopic").CloudProjectDatabaseKafkaTopic = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseKafkaTopic"], () => require("./cloudProjectDatabaseKafkaTopic"));

export { CloudProjectDatabaseLogSubscriptionArgs, CloudProjectDatabaseLogSubscriptionState } from "./cloudProjectDatabaseLogSubscription";
export type CloudProjectDatabaseLogSubscription = import("./cloudProjectDatabaseLogSubscription").CloudProjectDatabaseLogSubscription;
export const CloudProjectDatabaseLogSubscription: typeof import("./cloudProjectDatabaseLogSubscription").CloudProjectDatabaseLogSubscription = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseLogSubscription"], () => require("./cloudProjectDatabaseLogSubscription"));

export { CloudProjectDatabaseM3dbNamespaceArgs, CloudProjectDatabaseM3dbNamespaceState } from "./cloudProjectDatabaseM3dbNamespace";
export type CloudProjectDatabaseM3dbNamespace = import("./cloudProjectDatabaseM3dbNamespace").CloudProjectDatabaseM3dbNamespace;
export const CloudProjectDatabaseM3dbNamespace: typeof import("./cloudProjectDatabaseM3dbNamespace").CloudProjectDatabaseM3dbNamespace = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseM3dbNamespace"], () => require("./cloudProjectDatabaseM3dbNamespace"));

export { CloudProjectDatabaseM3dbUserArgs, CloudProjectDatabaseM3dbUserState } from "./cloudProjectDatabaseM3dbUser";
export type CloudProjectDatabaseM3dbUser = import("./cloudProjectDatabaseM3dbUser").CloudProjectDatabaseM3dbUser;
export const CloudProjectDatabaseM3dbUser: typeof import("./cloudProjectDatabaseM3dbUser").CloudProjectDatabaseM3dbUser = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseM3dbUser"], () => require("./cloudProjectDatabaseM3dbUser"));

export { CloudProjectDatabaseMongodbUserArgs, CloudProjectDatabaseMongodbUserState } from "./cloudProjectDatabaseMongodbUser";
export type CloudProjectDatabaseMongodbUser = import("./cloudProjectDatabaseMongodbUser").CloudProjectDatabaseMongodbUser;
export const CloudProjectDatabaseMongodbUser: typeof import("./cloudProjectDatabaseMongodbUser").CloudProjectDatabaseMongodbUser = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseMongodbUser"], () => require("./cloudProjectDatabaseMongodbUser"));

export { CloudProjectDatabaseOpensearchPatternArgs, CloudProjectDatabaseOpensearchPatternState } from "./cloudProjectDatabaseOpensearchPattern";
export type CloudProjectDatabaseOpensearchPattern = import("./cloudProjectDatabaseOpensearchPattern").CloudProjectDatabaseOpensearchPattern;
export const CloudProjectDatabaseOpensearchPattern: typeof import("./cloudProjectDatabaseOpensearchPattern").CloudProjectDatabaseOpensearchPattern = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseOpensearchPattern"], () => require("./cloudProjectDatabaseOpensearchPattern"));

export { CloudProjectDatabaseOpensearchUserArgs, CloudProjectDatabaseOpensearchUserState } from "./cloudProjectDatabaseOpensearchUser";
export type CloudProjectDatabaseOpensearchUser = import("./cloudProjectDatabaseOpensearchUser").CloudProjectDatabaseOpensearchUser;
export const CloudProjectDatabaseOpensearchUser: typeof import("./cloudProjectDatabaseOpensearchUser").CloudProjectDatabaseOpensearchUser = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseOpensearchUser"], () => require("./cloudProjectDatabaseOpensearchUser"));

export { CloudProjectDatabasePostgresqlConnectionPoolArgs, CloudProjectDatabasePostgresqlConnectionPoolState } from "./cloudProjectDatabasePostgresqlConnectionPool";
export type CloudProjectDatabasePostgresqlConnectionPool = import("./cloudProjectDatabasePostgresqlConnectionPool").CloudProjectDatabasePostgresqlConnectionPool;
export const CloudProjectDatabasePostgresqlConnectionPool: typeof import("./cloudProjectDatabasePostgresqlConnectionPool").CloudProjectDatabasePostgresqlConnectionPool = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabasePostgresqlConnectionPool"], () => require("./cloudProjectDatabasePostgresqlConnectionPool"));

export { CloudProjectDatabasePostgresqlUserArgs, CloudProjectDatabasePostgresqlUserState } from "./cloudProjectDatabasePostgresqlUser";
export type CloudProjectDatabasePostgresqlUser = import("./cloudProjectDatabasePostgresqlUser").CloudProjectDatabasePostgresqlUser;
export const CloudProjectDatabasePostgresqlUser: typeof import("./cloudProjectDatabasePostgresqlUser").CloudProjectDatabasePostgresqlUser = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabasePostgresqlUser"], () => require("./cloudProjectDatabasePostgresqlUser"));

export { CloudProjectDatabaseRedisUserArgs, CloudProjectDatabaseRedisUserState } from "./cloudProjectDatabaseRedisUser";
export type CloudProjectDatabaseRedisUser = import("./cloudProjectDatabaseRedisUser").CloudProjectDatabaseRedisUser;
export const CloudProjectDatabaseRedisUser: typeof import("./cloudProjectDatabaseRedisUser").CloudProjectDatabaseRedisUser = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseRedisUser"], () => require("./cloudProjectDatabaseRedisUser"));

export { CloudProjectDatabaseUserArgs, CloudProjectDatabaseUserState } from "./cloudProjectDatabaseUser";
export type CloudProjectDatabaseUser = import("./cloudProjectDatabaseUser").CloudProjectDatabaseUser;
export const CloudProjectDatabaseUser: typeof import("./cloudProjectDatabaseUser").CloudProjectDatabaseUser = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseUser"], () => require("./cloudProjectDatabaseUser"));

export { CloudProjectFailoverIpAttachArgs, CloudProjectFailoverIpAttachState } from "./cloudProjectFailoverIpAttach";
export type CloudProjectFailoverIpAttach = import("./cloudProjectFailoverIpAttach").CloudProjectFailoverIpAttach;
export const CloudProjectFailoverIpAttach: typeof import("./cloudProjectFailoverIpAttach").CloudProjectFailoverIpAttach = null as any;
utilities.lazyLoad(exports, ["CloudProjectFailoverIpAttach"], () => require("./cloudProjectFailoverIpAttach"));

export { CloudProjectGatewayArgs, CloudProjectGatewayState } from "./cloudProjectGateway";
export type CloudProjectGateway = import("./cloudProjectGateway").CloudProjectGateway;
export const CloudProjectGateway: typeof import("./cloudProjectGateway").CloudProjectGateway = null as any;
utilities.lazyLoad(exports, ["CloudProjectGateway"], () => require("./cloudProjectGateway"));

export { CloudProjectGatewayInterfaceArgs, CloudProjectGatewayInterfaceState } from "./cloudProjectGatewayInterface";
export type CloudProjectGatewayInterface = import("./cloudProjectGatewayInterface").CloudProjectGatewayInterface;
export const CloudProjectGatewayInterface: typeof import("./cloudProjectGatewayInterface").CloudProjectGatewayInterface = null as any;
utilities.lazyLoad(exports, ["CloudProjectGatewayInterface"], () => require("./cloudProjectGatewayInterface"));

export { CloudProjectKubeArgs, CloudProjectKubeState } from "./cloudProjectKube";
export type CloudProjectKube = import("./cloudProjectKube").CloudProjectKube;
export const CloudProjectKube: typeof import("./cloudProjectKube").CloudProjectKube = null as any;
utilities.lazyLoad(exports, ["CloudProjectKube"], () => require("./cloudProjectKube"));

export { CloudProjectKubeIprestrictionsArgs, CloudProjectKubeIprestrictionsState } from "./cloudProjectKubeIprestrictions";
export type CloudProjectKubeIprestrictions = import("./cloudProjectKubeIprestrictions").CloudProjectKubeIprestrictions;
export const CloudProjectKubeIprestrictions: typeof import("./cloudProjectKubeIprestrictions").CloudProjectKubeIprestrictions = null as any;
utilities.lazyLoad(exports, ["CloudProjectKubeIprestrictions"], () => require("./cloudProjectKubeIprestrictions"));

export { CloudProjectKubeNodepoolArgs, CloudProjectKubeNodepoolState } from "./cloudProjectKubeNodepool";
export type CloudProjectKubeNodepool = import("./cloudProjectKubeNodepool").CloudProjectKubeNodepool;
export const CloudProjectKubeNodepool: typeof import("./cloudProjectKubeNodepool").CloudProjectKubeNodepool = null as any;
utilities.lazyLoad(exports, ["CloudProjectKubeNodepool"], () => require("./cloudProjectKubeNodepool"));

export { CloudProjectKubeOidcArgs, CloudProjectKubeOidcState } from "./cloudProjectKubeOidc";
export type CloudProjectKubeOidc = import("./cloudProjectKubeOidc").CloudProjectKubeOidc;
export const CloudProjectKubeOidc: typeof import("./cloudProjectKubeOidc").CloudProjectKubeOidc = null as any;
utilities.lazyLoad(exports, ["CloudProjectKubeOidc"], () => require("./cloudProjectKubeOidc"));

export { CloudProjectNetworkPrivateArgs, CloudProjectNetworkPrivateState } from "./cloudProjectNetworkPrivate";
export type CloudProjectNetworkPrivate = import("./cloudProjectNetworkPrivate").CloudProjectNetworkPrivate;
export const CloudProjectNetworkPrivate: typeof import("./cloudProjectNetworkPrivate").CloudProjectNetworkPrivate = null as any;
utilities.lazyLoad(exports, ["CloudProjectNetworkPrivate"], () => require("./cloudProjectNetworkPrivate"));

export { CloudProjectNetworkPrivateSubnetArgs, CloudProjectNetworkPrivateSubnetState } from "./cloudProjectNetworkPrivateSubnet";
export type CloudProjectNetworkPrivateSubnet = import("./cloudProjectNetworkPrivateSubnet").CloudProjectNetworkPrivateSubnet;
export const CloudProjectNetworkPrivateSubnet: typeof import("./cloudProjectNetworkPrivateSubnet").CloudProjectNetworkPrivateSubnet = null as any;
utilities.lazyLoad(exports, ["CloudProjectNetworkPrivateSubnet"], () => require("./cloudProjectNetworkPrivateSubnet"));

export { CloudProjectRegionLoadbalancerLogSubscriptionArgs, CloudProjectRegionLoadbalancerLogSubscriptionState } from "./cloudProjectRegionLoadbalancerLogSubscription";
export type CloudProjectRegionLoadbalancerLogSubscription = import("./cloudProjectRegionLoadbalancerLogSubscription").CloudProjectRegionLoadbalancerLogSubscription;
export const CloudProjectRegionLoadbalancerLogSubscription: typeof import("./cloudProjectRegionLoadbalancerLogSubscription").CloudProjectRegionLoadbalancerLogSubscription = null as any;
utilities.lazyLoad(exports, ["CloudProjectRegionLoadbalancerLogSubscription"], () => require("./cloudProjectRegionLoadbalancerLogSubscription"));

export { CloudProjectRegionStoragePresignArgs, CloudProjectRegionStoragePresignState } from "./cloudProjectRegionStoragePresign";
export type CloudProjectRegionStoragePresign = import("./cloudProjectRegionStoragePresign").CloudProjectRegionStoragePresign;
export const CloudProjectRegionStoragePresign: typeof import("./cloudProjectRegionStoragePresign").CloudProjectRegionStoragePresign = null as any;
utilities.lazyLoad(exports, ["CloudProjectRegionStoragePresign"], () => require("./cloudProjectRegionStoragePresign"));

export { CloudProjectUserArgs, CloudProjectUserState } from "./cloudProjectUser";
export type CloudProjectUser = import("./cloudProjectUser").CloudProjectUser;
export const CloudProjectUser: typeof import("./cloudProjectUser").CloudProjectUser = null as any;
utilities.lazyLoad(exports, ["CloudProjectUser"], () => require("./cloudProjectUser"));

export { CloudProjectUserS3CredentialArgs, CloudProjectUserS3CredentialState } from "./cloudProjectUserS3Credential";
export type CloudProjectUserS3Credential = import("./cloudProjectUserS3Credential").CloudProjectUserS3Credential;
export const CloudProjectUserS3Credential: typeof import("./cloudProjectUserS3Credential").CloudProjectUserS3Credential = null as any;
utilities.lazyLoad(exports, ["CloudProjectUserS3Credential"], () => require("./cloudProjectUserS3Credential"));

export { CloudProjectUserS3PolicyArgs, CloudProjectUserS3PolicyState } from "./cloudProjectUserS3Policy";
export type CloudProjectUserS3Policy = import("./cloudProjectUserS3Policy").CloudProjectUserS3Policy;
export const CloudProjectUserS3Policy: typeof import("./cloudProjectUserS3Policy").CloudProjectUserS3Policy = null as any;
utilities.lazyLoad(exports, ["CloudProjectUserS3Policy"], () => require("./cloudProjectUserS3Policy"));

export { CloudProjectWorkflowBackupArgs, CloudProjectWorkflowBackupState } from "./cloudProjectWorkflowBackup";
export type CloudProjectWorkflowBackup = import("./cloudProjectWorkflowBackup").CloudProjectWorkflowBackup;
export const CloudProjectWorkflowBackup: typeof import("./cloudProjectWorkflowBackup").CloudProjectWorkflowBackup = null as any;
utilities.lazyLoad(exports, ["CloudProjectWorkflowBackup"], () => require("./cloudProjectWorkflowBackup"));

export { DbaasLogsClusterArgs, DbaasLogsClusterState } from "./dbaasLogsCluster";
export type DbaasLogsCluster = import("./dbaasLogsCluster").DbaasLogsCluster;
export const DbaasLogsCluster: typeof import("./dbaasLogsCluster").DbaasLogsCluster = null as any;
utilities.lazyLoad(exports, ["DbaasLogsCluster"], () => require("./dbaasLogsCluster"));

export { DbaasLogsInputArgs, DbaasLogsInputState } from "./dbaasLogsInput";
export type DbaasLogsInput = import("./dbaasLogsInput").DbaasLogsInput;
export const DbaasLogsInput: typeof import("./dbaasLogsInput").DbaasLogsInput = null as any;
utilities.lazyLoad(exports, ["DbaasLogsInput"], () => require("./dbaasLogsInput"));

export { DbaasLogsOutputGraylogStreamArgs, DbaasLogsOutputGraylogStreamState } from "./dbaasLogsOutputGraylogStream";
export type DbaasLogsOutputGraylogStream = import("./dbaasLogsOutputGraylogStream").DbaasLogsOutputGraylogStream;
export const DbaasLogsOutputGraylogStream: typeof import("./dbaasLogsOutputGraylogStream").DbaasLogsOutputGraylogStream = null as any;
utilities.lazyLoad(exports, ["DbaasLogsOutputGraylogStream"], () => require("./dbaasLogsOutputGraylogStream"));

export { DbaasLogsTokenArgs, DbaasLogsTokenState } from "./dbaasLogsToken";
export type DbaasLogsToken = import("./dbaasLogsToken").DbaasLogsToken;
export const DbaasLogsToken: typeof import("./dbaasLogsToken").DbaasLogsToken = null as any;
utilities.lazyLoad(exports, ["DbaasLogsToken"], () => require("./dbaasLogsToken"));

export { DedicatedCephAclArgs, DedicatedCephAclState } from "./dedicatedCephAcl";
export type DedicatedCephAcl = import("./dedicatedCephAcl").DedicatedCephAcl;
export const DedicatedCephAcl: typeof import("./dedicatedCephAcl").DedicatedCephAcl = null as any;
utilities.lazyLoad(exports, ["DedicatedCephAcl"], () => require("./dedicatedCephAcl"));

export { DedicatedNashaPartitionArgs, DedicatedNashaPartitionState } from "./dedicatedNashaPartition";
export type DedicatedNashaPartition = import("./dedicatedNashaPartition").DedicatedNashaPartition;
export const DedicatedNashaPartition: typeof import("./dedicatedNashaPartition").DedicatedNashaPartition = null as any;
utilities.lazyLoad(exports, ["DedicatedNashaPartition"], () => require("./dedicatedNashaPartition"));

export { DedicatedNashaPartitionAccessArgs, DedicatedNashaPartitionAccessState } from "./dedicatedNashaPartitionAccess";
export type DedicatedNashaPartitionAccess = import("./dedicatedNashaPartitionAccess").DedicatedNashaPartitionAccess;
export const DedicatedNashaPartitionAccess: typeof import("./dedicatedNashaPartitionAccess").DedicatedNashaPartitionAccess = null as any;
utilities.lazyLoad(exports, ["DedicatedNashaPartitionAccess"], () => require("./dedicatedNashaPartitionAccess"));

export { DedicatedNashaPartitionSnapshotArgs, DedicatedNashaPartitionSnapshotState } from "./dedicatedNashaPartitionSnapshot";
export type DedicatedNashaPartitionSnapshot = import("./dedicatedNashaPartitionSnapshot").DedicatedNashaPartitionSnapshot;
export const DedicatedNashaPartitionSnapshot: typeof import("./dedicatedNashaPartitionSnapshot").DedicatedNashaPartitionSnapshot = null as any;
utilities.lazyLoad(exports, ["DedicatedNashaPartitionSnapshot"], () => require("./dedicatedNashaPartitionSnapshot"));

export { DedicatedServerInstallTaskArgs, DedicatedServerInstallTaskState } from "./dedicatedServerInstallTask";
export type DedicatedServerInstallTask = import("./dedicatedServerInstallTask").DedicatedServerInstallTask;
export const DedicatedServerInstallTask: typeof import("./dedicatedServerInstallTask").DedicatedServerInstallTask = null as any;
utilities.lazyLoad(exports, ["DedicatedServerInstallTask"], () => require("./dedicatedServerInstallTask"));

export { DedicatedServerNetworkingArgs, DedicatedServerNetworkingState } from "./dedicatedServerNetworking";
export type DedicatedServerNetworking = import("./dedicatedServerNetworking").DedicatedServerNetworking;
export const DedicatedServerNetworking: typeof import("./dedicatedServerNetworking").DedicatedServerNetworking = null as any;
utilities.lazyLoad(exports, ["DedicatedServerNetworking"], () => require("./dedicatedServerNetworking"));

export { DedicatedServerRebootTaskArgs, DedicatedServerRebootTaskState } from "./dedicatedServerRebootTask";
export type DedicatedServerRebootTask = import("./dedicatedServerRebootTask").DedicatedServerRebootTask;
export const DedicatedServerRebootTask: typeof import("./dedicatedServerRebootTask").DedicatedServerRebootTask = null as any;
utilities.lazyLoad(exports, ["DedicatedServerRebootTask"], () => require("./dedicatedServerRebootTask"));

export { DedicatedServerUpdateArgs, DedicatedServerUpdateState } from "./dedicatedServerUpdate";
export type DedicatedServerUpdate = import("./dedicatedServerUpdate").DedicatedServerUpdate;
export const DedicatedServerUpdate: typeof import("./dedicatedServerUpdate").DedicatedServerUpdate = null as any;
utilities.lazyLoad(exports, ["DedicatedServerUpdate"], () => require("./dedicatedServerUpdate"));

export { DomainZoneArgs, DomainZoneState } from "./domainZone";
export type DomainZone = import("./domainZone").DomainZone;
export const DomainZone: typeof import("./domainZone").DomainZone = null as any;
utilities.lazyLoad(exports, ["DomainZone"], () => require("./domainZone"));

export { DomainZoneDnssecArgs, DomainZoneDnssecState } from "./domainZoneDnssec";
export type DomainZoneDnssec = import("./domainZoneDnssec").DomainZoneDnssec;
export const DomainZoneDnssec: typeof import("./domainZoneDnssec").DomainZoneDnssec = null as any;
utilities.lazyLoad(exports, ["DomainZoneDnssec"], () => require("./domainZoneDnssec"));

export { DomainZoneRecordArgs, DomainZoneRecordState } from "./domainZoneRecord";
export type DomainZoneRecord = import("./domainZoneRecord").DomainZoneRecord;
export const DomainZoneRecord: typeof import("./domainZoneRecord").DomainZoneRecord = null as any;
utilities.lazyLoad(exports, ["DomainZoneRecord"], () => require("./domainZoneRecord"));

export { DomainZoneRedirectionArgs, DomainZoneRedirectionState } from "./domainZoneRedirection";
export type DomainZoneRedirection = import("./domainZoneRedirection").DomainZoneRedirection;
export const DomainZoneRedirection: typeof import("./domainZoneRedirection").DomainZoneRedirection = null as any;
utilities.lazyLoad(exports, ["DomainZoneRedirection"], () => require("./domainZoneRedirection"));

export { GetCloudProjectArgs, GetCloudProjectResult, GetCloudProjectOutputArgs } from "./getCloudProject";
export const getCloudProject: typeof import("./getCloudProject").getCloudProject = null as any;
export const getCloudProjectOutput: typeof import("./getCloudProject").getCloudProjectOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProject","getCloudProjectOutput"], () => require("./getCloudProject"));

export { GetCloudProjectCapabilitiesContainerregistryArgs, GetCloudProjectCapabilitiesContainerregistryResult, GetCloudProjectCapabilitiesContainerregistryOutputArgs } from "./getCloudProjectCapabilitiesContainerregistry";
export const getCloudProjectCapabilitiesContainerregistry: typeof import("./getCloudProjectCapabilitiesContainerregistry").getCloudProjectCapabilitiesContainerregistry = null as any;
export const getCloudProjectCapabilitiesContainerregistryOutput: typeof import("./getCloudProjectCapabilitiesContainerregistry").getCloudProjectCapabilitiesContainerregistryOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectCapabilitiesContainerregistry","getCloudProjectCapabilitiesContainerregistryOutput"], () => require("./getCloudProjectCapabilitiesContainerregistry"));

export { GetCloudProjectCapabilitiesContainerregistryFilterArgs, GetCloudProjectCapabilitiesContainerregistryFilterResult, GetCloudProjectCapabilitiesContainerregistryFilterOutputArgs } from "./getCloudProjectCapabilitiesContainerregistryFilter";
export const getCloudProjectCapabilitiesContainerregistryFilter: typeof import("./getCloudProjectCapabilitiesContainerregistryFilter").getCloudProjectCapabilitiesContainerregistryFilter = null as any;
export const getCloudProjectCapabilitiesContainerregistryFilterOutput: typeof import("./getCloudProjectCapabilitiesContainerregistryFilter").getCloudProjectCapabilitiesContainerregistryFilterOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectCapabilitiesContainerregistryFilter","getCloudProjectCapabilitiesContainerregistryFilterOutput"], () => require("./getCloudProjectCapabilitiesContainerregistryFilter"));

export { GetCloudProjectContainerregistriesArgs, GetCloudProjectContainerregistriesResult, GetCloudProjectContainerregistriesOutputArgs } from "./getCloudProjectContainerregistries";
export const getCloudProjectContainerregistries: typeof import("./getCloudProjectContainerregistries").getCloudProjectContainerregistries = null as any;
export const getCloudProjectContainerregistriesOutput: typeof import("./getCloudProjectContainerregistries").getCloudProjectContainerregistriesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectContainerregistries","getCloudProjectContainerregistriesOutput"], () => require("./getCloudProjectContainerregistries"));

export { GetCloudProjectContainerregistryArgs, GetCloudProjectContainerregistryResult, GetCloudProjectContainerregistryOutputArgs } from "./getCloudProjectContainerregistry";
export const getCloudProjectContainerregistry: typeof import("./getCloudProjectContainerregistry").getCloudProjectContainerregistry = null as any;
export const getCloudProjectContainerregistryOutput: typeof import("./getCloudProjectContainerregistry").getCloudProjectContainerregistryOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectContainerregistry","getCloudProjectContainerregistryOutput"], () => require("./getCloudProjectContainerregistry"));

export { GetCloudProjectContainerregistryIpRestrictionsManagementArgs, GetCloudProjectContainerregistryIpRestrictionsManagementResult, GetCloudProjectContainerregistryIpRestrictionsManagementOutputArgs } from "./getCloudProjectContainerregistryIpRestrictionsManagement";
export const getCloudProjectContainerregistryIpRestrictionsManagement: typeof import("./getCloudProjectContainerregistryIpRestrictionsManagement").getCloudProjectContainerregistryIpRestrictionsManagement = null as any;
export const getCloudProjectContainerregistryIpRestrictionsManagementOutput: typeof import("./getCloudProjectContainerregistryIpRestrictionsManagement").getCloudProjectContainerregistryIpRestrictionsManagementOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectContainerregistryIpRestrictionsManagement","getCloudProjectContainerregistryIpRestrictionsManagementOutput"], () => require("./getCloudProjectContainerregistryIpRestrictionsManagement"));

export { GetCloudProjectContainerregistryIpRestrictionsRegistryArgs, GetCloudProjectContainerregistryIpRestrictionsRegistryResult, GetCloudProjectContainerregistryIpRestrictionsRegistryOutputArgs } from "./getCloudProjectContainerregistryIpRestrictionsRegistry";
export const getCloudProjectContainerregistryIpRestrictionsRegistry: typeof import("./getCloudProjectContainerregistryIpRestrictionsRegistry").getCloudProjectContainerregistryIpRestrictionsRegistry = null as any;
export const getCloudProjectContainerregistryIpRestrictionsRegistryOutput: typeof import("./getCloudProjectContainerregistryIpRestrictionsRegistry").getCloudProjectContainerregistryIpRestrictionsRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectContainerregistryIpRestrictionsRegistry","getCloudProjectContainerregistryIpRestrictionsRegistryOutput"], () => require("./getCloudProjectContainerregistryIpRestrictionsRegistry"));

export { GetCloudProjectContainerregistryOidcArgs, GetCloudProjectContainerregistryOidcResult, GetCloudProjectContainerregistryOidcOutputArgs } from "./getCloudProjectContainerregistryOidc";
export const getCloudProjectContainerregistryOidc: typeof import("./getCloudProjectContainerregistryOidc").getCloudProjectContainerregistryOidc = null as any;
export const getCloudProjectContainerregistryOidcOutput: typeof import("./getCloudProjectContainerregistryOidc").getCloudProjectContainerregistryOidcOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectContainerregistryOidc","getCloudProjectContainerregistryOidcOutput"], () => require("./getCloudProjectContainerregistryOidc"));

export { GetCloudProjectContainerregistryUsersArgs, GetCloudProjectContainerregistryUsersResult, GetCloudProjectContainerregistryUsersOutputArgs } from "./getCloudProjectContainerregistryUsers";
export const getCloudProjectContainerregistryUsers: typeof import("./getCloudProjectContainerregistryUsers").getCloudProjectContainerregistryUsers = null as any;
export const getCloudProjectContainerregistryUsersOutput: typeof import("./getCloudProjectContainerregistryUsers").getCloudProjectContainerregistryUsersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectContainerregistryUsers","getCloudProjectContainerregistryUsersOutput"], () => require("./getCloudProjectContainerregistryUsers"));

export { GetCloudProjectDatabaseArgs, GetCloudProjectDatabaseResult, GetCloudProjectDatabaseOutputArgs } from "./getCloudProjectDatabase";
export const getCloudProjectDatabase: typeof import("./getCloudProjectDatabase").getCloudProjectDatabase = null as any;
export const getCloudProjectDatabaseOutput: typeof import("./getCloudProjectDatabase").getCloudProjectDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabase","getCloudProjectDatabaseOutput"], () => require("./getCloudProjectDatabase"));

export { GetCloudProjectDatabaseCapabilitiesArgs, GetCloudProjectDatabaseCapabilitiesResult, GetCloudProjectDatabaseCapabilitiesOutputArgs } from "./getCloudProjectDatabaseCapabilities";
export const getCloudProjectDatabaseCapabilities: typeof import("./getCloudProjectDatabaseCapabilities").getCloudProjectDatabaseCapabilities = null as any;
export const getCloudProjectDatabaseCapabilitiesOutput: typeof import("./getCloudProjectDatabaseCapabilities").getCloudProjectDatabaseCapabilitiesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseCapabilities","getCloudProjectDatabaseCapabilitiesOutput"], () => require("./getCloudProjectDatabaseCapabilities"));

export { GetCloudProjectDatabaseCertificatesArgs, GetCloudProjectDatabaseCertificatesResult, GetCloudProjectDatabaseCertificatesOutputArgs } from "./getCloudProjectDatabaseCertificates";
export const getCloudProjectDatabaseCertificates: typeof import("./getCloudProjectDatabaseCertificates").getCloudProjectDatabaseCertificates = null as any;
export const getCloudProjectDatabaseCertificatesOutput: typeof import("./getCloudProjectDatabaseCertificates").getCloudProjectDatabaseCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseCertificates","getCloudProjectDatabaseCertificatesOutput"], () => require("./getCloudProjectDatabaseCertificates"));

export { GetCloudProjectDatabaseDatabaseArgs, GetCloudProjectDatabaseDatabaseResult, GetCloudProjectDatabaseDatabaseOutputArgs } from "./getCloudProjectDatabaseDatabase";
export const getCloudProjectDatabaseDatabase: typeof import("./getCloudProjectDatabaseDatabase").getCloudProjectDatabaseDatabase = null as any;
export const getCloudProjectDatabaseDatabaseOutput: typeof import("./getCloudProjectDatabaseDatabase").getCloudProjectDatabaseDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseDatabase","getCloudProjectDatabaseDatabaseOutput"], () => require("./getCloudProjectDatabaseDatabase"));

export { GetCloudProjectDatabaseDatabasesArgs, GetCloudProjectDatabaseDatabasesResult, GetCloudProjectDatabaseDatabasesOutputArgs } from "./getCloudProjectDatabaseDatabases";
export const getCloudProjectDatabaseDatabases: typeof import("./getCloudProjectDatabaseDatabases").getCloudProjectDatabaseDatabases = null as any;
export const getCloudProjectDatabaseDatabasesOutput: typeof import("./getCloudProjectDatabaseDatabases").getCloudProjectDatabaseDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseDatabases","getCloudProjectDatabaseDatabasesOutput"], () => require("./getCloudProjectDatabaseDatabases"));

export { GetCloudProjectDatabaseIntegrationArgs, GetCloudProjectDatabaseIntegrationResult, GetCloudProjectDatabaseIntegrationOutputArgs } from "./getCloudProjectDatabaseIntegration";
export const getCloudProjectDatabaseIntegration: typeof import("./getCloudProjectDatabaseIntegration").getCloudProjectDatabaseIntegration = null as any;
export const getCloudProjectDatabaseIntegrationOutput: typeof import("./getCloudProjectDatabaseIntegration").getCloudProjectDatabaseIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseIntegration","getCloudProjectDatabaseIntegrationOutput"], () => require("./getCloudProjectDatabaseIntegration"));

export { GetCloudProjectDatabaseIntegrationsArgs, GetCloudProjectDatabaseIntegrationsResult, GetCloudProjectDatabaseIntegrationsOutputArgs } from "./getCloudProjectDatabaseIntegrations";
export const getCloudProjectDatabaseIntegrations: typeof import("./getCloudProjectDatabaseIntegrations").getCloudProjectDatabaseIntegrations = null as any;
export const getCloudProjectDatabaseIntegrationsOutput: typeof import("./getCloudProjectDatabaseIntegrations").getCloudProjectDatabaseIntegrationsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseIntegrations","getCloudProjectDatabaseIntegrationsOutput"], () => require("./getCloudProjectDatabaseIntegrations"));

export { GetCloudProjectDatabaseIpRestrictionsArgs, GetCloudProjectDatabaseIpRestrictionsResult, GetCloudProjectDatabaseIpRestrictionsOutputArgs } from "./getCloudProjectDatabaseIpRestrictions";
export const getCloudProjectDatabaseIpRestrictions: typeof import("./getCloudProjectDatabaseIpRestrictions").getCloudProjectDatabaseIpRestrictions = null as any;
export const getCloudProjectDatabaseIpRestrictionsOutput: typeof import("./getCloudProjectDatabaseIpRestrictions").getCloudProjectDatabaseIpRestrictionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseIpRestrictions","getCloudProjectDatabaseIpRestrictionsOutput"], () => require("./getCloudProjectDatabaseIpRestrictions"));

export { GetCloudProjectDatabaseKafkaAclArgs, GetCloudProjectDatabaseKafkaAclResult, GetCloudProjectDatabaseKafkaAclOutputArgs } from "./getCloudProjectDatabaseKafkaAcl";
export const getCloudProjectDatabaseKafkaAcl: typeof import("./getCloudProjectDatabaseKafkaAcl").getCloudProjectDatabaseKafkaAcl = null as any;
export const getCloudProjectDatabaseKafkaAclOutput: typeof import("./getCloudProjectDatabaseKafkaAcl").getCloudProjectDatabaseKafkaAclOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseKafkaAcl","getCloudProjectDatabaseKafkaAclOutput"], () => require("./getCloudProjectDatabaseKafkaAcl"));

export { GetCloudProjectDatabaseKafkaAclsArgs, GetCloudProjectDatabaseKafkaAclsResult, GetCloudProjectDatabaseKafkaAclsOutputArgs } from "./getCloudProjectDatabaseKafkaAcls";
export const getCloudProjectDatabaseKafkaAcls: typeof import("./getCloudProjectDatabaseKafkaAcls").getCloudProjectDatabaseKafkaAcls = null as any;
export const getCloudProjectDatabaseKafkaAclsOutput: typeof import("./getCloudProjectDatabaseKafkaAcls").getCloudProjectDatabaseKafkaAclsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseKafkaAcls","getCloudProjectDatabaseKafkaAclsOutput"], () => require("./getCloudProjectDatabaseKafkaAcls"));

export { GetCloudProjectDatabaseKafkaSchemaregistryaclArgs, GetCloudProjectDatabaseKafkaSchemaregistryaclResult, GetCloudProjectDatabaseKafkaSchemaregistryaclOutputArgs } from "./getCloudProjectDatabaseKafkaSchemaregistryacl";
export const getCloudProjectDatabaseKafkaSchemaregistryacl: typeof import("./getCloudProjectDatabaseKafkaSchemaregistryacl").getCloudProjectDatabaseKafkaSchemaregistryacl = null as any;
export const getCloudProjectDatabaseKafkaSchemaregistryaclOutput: typeof import("./getCloudProjectDatabaseKafkaSchemaregistryacl").getCloudProjectDatabaseKafkaSchemaregistryaclOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseKafkaSchemaregistryacl","getCloudProjectDatabaseKafkaSchemaregistryaclOutput"], () => require("./getCloudProjectDatabaseKafkaSchemaregistryacl"));

export { GetCloudProjectDatabaseKafkaSchemaregistryaclsArgs, GetCloudProjectDatabaseKafkaSchemaregistryaclsResult, GetCloudProjectDatabaseKafkaSchemaregistryaclsOutputArgs } from "./getCloudProjectDatabaseKafkaSchemaregistryacls";
export const getCloudProjectDatabaseKafkaSchemaregistryacls: typeof import("./getCloudProjectDatabaseKafkaSchemaregistryacls").getCloudProjectDatabaseKafkaSchemaregistryacls = null as any;
export const getCloudProjectDatabaseKafkaSchemaregistryaclsOutput: typeof import("./getCloudProjectDatabaseKafkaSchemaregistryacls").getCloudProjectDatabaseKafkaSchemaregistryaclsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseKafkaSchemaregistryacls","getCloudProjectDatabaseKafkaSchemaregistryaclsOutput"], () => require("./getCloudProjectDatabaseKafkaSchemaregistryacls"));

export { GetCloudProjectDatabaseKafkaTopicArgs, GetCloudProjectDatabaseKafkaTopicResult, GetCloudProjectDatabaseKafkaTopicOutputArgs } from "./getCloudProjectDatabaseKafkaTopic";
export const getCloudProjectDatabaseKafkaTopic: typeof import("./getCloudProjectDatabaseKafkaTopic").getCloudProjectDatabaseKafkaTopic = null as any;
export const getCloudProjectDatabaseKafkaTopicOutput: typeof import("./getCloudProjectDatabaseKafkaTopic").getCloudProjectDatabaseKafkaTopicOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseKafkaTopic","getCloudProjectDatabaseKafkaTopicOutput"], () => require("./getCloudProjectDatabaseKafkaTopic"));

export { GetCloudProjectDatabaseKafkaTopicsArgs, GetCloudProjectDatabaseKafkaTopicsResult, GetCloudProjectDatabaseKafkaTopicsOutputArgs } from "./getCloudProjectDatabaseKafkaTopics";
export const getCloudProjectDatabaseKafkaTopics: typeof import("./getCloudProjectDatabaseKafkaTopics").getCloudProjectDatabaseKafkaTopics = null as any;
export const getCloudProjectDatabaseKafkaTopicsOutput: typeof import("./getCloudProjectDatabaseKafkaTopics").getCloudProjectDatabaseKafkaTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseKafkaTopics","getCloudProjectDatabaseKafkaTopicsOutput"], () => require("./getCloudProjectDatabaseKafkaTopics"));

export { GetCloudProjectDatabaseKafkaUserAccessArgs, GetCloudProjectDatabaseKafkaUserAccessResult, GetCloudProjectDatabaseKafkaUserAccessOutputArgs } from "./getCloudProjectDatabaseKafkaUserAccess";
export const getCloudProjectDatabaseKafkaUserAccess: typeof import("./getCloudProjectDatabaseKafkaUserAccess").getCloudProjectDatabaseKafkaUserAccess = null as any;
export const getCloudProjectDatabaseKafkaUserAccessOutput: typeof import("./getCloudProjectDatabaseKafkaUserAccess").getCloudProjectDatabaseKafkaUserAccessOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseKafkaUserAccess","getCloudProjectDatabaseKafkaUserAccessOutput"], () => require("./getCloudProjectDatabaseKafkaUserAccess"));

export { GetCloudProjectDatabaseLogSubscriptionArgs, GetCloudProjectDatabaseLogSubscriptionResult, GetCloudProjectDatabaseLogSubscriptionOutputArgs } from "./getCloudProjectDatabaseLogSubscription";
export const getCloudProjectDatabaseLogSubscription: typeof import("./getCloudProjectDatabaseLogSubscription").getCloudProjectDatabaseLogSubscription = null as any;
export const getCloudProjectDatabaseLogSubscriptionOutput: typeof import("./getCloudProjectDatabaseLogSubscription").getCloudProjectDatabaseLogSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseLogSubscription","getCloudProjectDatabaseLogSubscriptionOutput"], () => require("./getCloudProjectDatabaseLogSubscription"));

export { GetCloudProjectDatabaseLogSubscriptionsArgs, GetCloudProjectDatabaseLogSubscriptionsResult, GetCloudProjectDatabaseLogSubscriptionsOutputArgs } from "./getCloudProjectDatabaseLogSubscriptions";
export const getCloudProjectDatabaseLogSubscriptions: typeof import("./getCloudProjectDatabaseLogSubscriptions").getCloudProjectDatabaseLogSubscriptions = null as any;
export const getCloudProjectDatabaseLogSubscriptionsOutput: typeof import("./getCloudProjectDatabaseLogSubscriptions").getCloudProjectDatabaseLogSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseLogSubscriptions","getCloudProjectDatabaseLogSubscriptionsOutput"], () => require("./getCloudProjectDatabaseLogSubscriptions"));

export { GetCloudProjectDatabaseM3dbNamespaceArgs, GetCloudProjectDatabaseM3dbNamespaceResult, GetCloudProjectDatabaseM3dbNamespaceOutputArgs } from "./getCloudProjectDatabaseM3dbNamespace";
export const getCloudProjectDatabaseM3dbNamespace: typeof import("./getCloudProjectDatabaseM3dbNamespace").getCloudProjectDatabaseM3dbNamespace = null as any;
export const getCloudProjectDatabaseM3dbNamespaceOutput: typeof import("./getCloudProjectDatabaseM3dbNamespace").getCloudProjectDatabaseM3dbNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseM3dbNamespace","getCloudProjectDatabaseM3dbNamespaceOutput"], () => require("./getCloudProjectDatabaseM3dbNamespace"));

export { GetCloudProjectDatabaseM3dbNamespacesArgs, GetCloudProjectDatabaseM3dbNamespacesResult, GetCloudProjectDatabaseM3dbNamespacesOutputArgs } from "./getCloudProjectDatabaseM3dbNamespaces";
export const getCloudProjectDatabaseM3dbNamespaces: typeof import("./getCloudProjectDatabaseM3dbNamespaces").getCloudProjectDatabaseM3dbNamespaces = null as any;
export const getCloudProjectDatabaseM3dbNamespacesOutput: typeof import("./getCloudProjectDatabaseM3dbNamespaces").getCloudProjectDatabaseM3dbNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseM3dbNamespaces","getCloudProjectDatabaseM3dbNamespacesOutput"], () => require("./getCloudProjectDatabaseM3dbNamespaces"));

export { GetCloudProjectDatabaseM3dbUserArgs, GetCloudProjectDatabaseM3dbUserResult, GetCloudProjectDatabaseM3dbUserOutputArgs } from "./getCloudProjectDatabaseM3dbUser";
export const getCloudProjectDatabaseM3dbUser: typeof import("./getCloudProjectDatabaseM3dbUser").getCloudProjectDatabaseM3dbUser = null as any;
export const getCloudProjectDatabaseM3dbUserOutput: typeof import("./getCloudProjectDatabaseM3dbUser").getCloudProjectDatabaseM3dbUserOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseM3dbUser","getCloudProjectDatabaseM3dbUserOutput"], () => require("./getCloudProjectDatabaseM3dbUser"));

export { GetCloudProjectDatabaseMongodbUserArgs, GetCloudProjectDatabaseMongodbUserResult, GetCloudProjectDatabaseMongodbUserOutputArgs } from "./getCloudProjectDatabaseMongodbUser";
export const getCloudProjectDatabaseMongodbUser: typeof import("./getCloudProjectDatabaseMongodbUser").getCloudProjectDatabaseMongodbUser = null as any;
export const getCloudProjectDatabaseMongodbUserOutput: typeof import("./getCloudProjectDatabaseMongodbUser").getCloudProjectDatabaseMongodbUserOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseMongodbUser","getCloudProjectDatabaseMongodbUserOutput"], () => require("./getCloudProjectDatabaseMongodbUser"));

export { GetCloudProjectDatabaseOpensearchPatternArgs, GetCloudProjectDatabaseOpensearchPatternResult, GetCloudProjectDatabaseOpensearchPatternOutputArgs } from "./getCloudProjectDatabaseOpensearchPattern";
export const getCloudProjectDatabaseOpensearchPattern: typeof import("./getCloudProjectDatabaseOpensearchPattern").getCloudProjectDatabaseOpensearchPattern = null as any;
export const getCloudProjectDatabaseOpensearchPatternOutput: typeof import("./getCloudProjectDatabaseOpensearchPattern").getCloudProjectDatabaseOpensearchPatternOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseOpensearchPattern","getCloudProjectDatabaseOpensearchPatternOutput"], () => require("./getCloudProjectDatabaseOpensearchPattern"));

export { GetCloudProjectDatabaseOpensearchPatternsArgs, GetCloudProjectDatabaseOpensearchPatternsResult, GetCloudProjectDatabaseOpensearchPatternsOutputArgs } from "./getCloudProjectDatabaseOpensearchPatterns";
export const getCloudProjectDatabaseOpensearchPatterns: typeof import("./getCloudProjectDatabaseOpensearchPatterns").getCloudProjectDatabaseOpensearchPatterns = null as any;
export const getCloudProjectDatabaseOpensearchPatternsOutput: typeof import("./getCloudProjectDatabaseOpensearchPatterns").getCloudProjectDatabaseOpensearchPatternsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseOpensearchPatterns","getCloudProjectDatabaseOpensearchPatternsOutput"], () => require("./getCloudProjectDatabaseOpensearchPatterns"));

export { GetCloudProjectDatabaseOpensearchUserArgs, GetCloudProjectDatabaseOpensearchUserResult, GetCloudProjectDatabaseOpensearchUserOutputArgs } from "./getCloudProjectDatabaseOpensearchUser";
export const getCloudProjectDatabaseOpensearchUser: typeof import("./getCloudProjectDatabaseOpensearchUser").getCloudProjectDatabaseOpensearchUser = null as any;
export const getCloudProjectDatabaseOpensearchUserOutput: typeof import("./getCloudProjectDatabaseOpensearchUser").getCloudProjectDatabaseOpensearchUserOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseOpensearchUser","getCloudProjectDatabaseOpensearchUserOutput"], () => require("./getCloudProjectDatabaseOpensearchUser"));

export { GetCloudProjectDatabasePostgresqlConnectionPoolArgs, GetCloudProjectDatabasePostgresqlConnectionPoolResult, GetCloudProjectDatabasePostgresqlConnectionPoolOutputArgs } from "./getCloudProjectDatabasePostgresqlConnectionPool";
export const getCloudProjectDatabasePostgresqlConnectionPool: typeof import("./getCloudProjectDatabasePostgresqlConnectionPool").getCloudProjectDatabasePostgresqlConnectionPool = null as any;
export const getCloudProjectDatabasePostgresqlConnectionPoolOutput: typeof import("./getCloudProjectDatabasePostgresqlConnectionPool").getCloudProjectDatabasePostgresqlConnectionPoolOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabasePostgresqlConnectionPool","getCloudProjectDatabasePostgresqlConnectionPoolOutput"], () => require("./getCloudProjectDatabasePostgresqlConnectionPool"));

export { GetCloudProjectDatabasePostgresqlConnectionPoolsArgs, GetCloudProjectDatabasePostgresqlConnectionPoolsResult, GetCloudProjectDatabasePostgresqlConnectionPoolsOutputArgs } from "./getCloudProjectDatabasePostgresqlConnectionPools";
export const getCloudProjectDatabasePostgresqlConnectionPools: typeof import("./getCloudProjectDatabasePostgresqlConnectionPools").getCloudProjectDatabasePostgresqlConnectionPools = null as any;
export const getCloudProjectDatabasePostgresqlConnectionPoolsOutput: typeof import("./getCloudProjectDatabasePostgresqlConnectionPools").getCloudProjectDatabasePostgresqlConnectionPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabasePostgresqlConnectionPools","getCloudProjectDatabasePostgresqlConnectionPoolsOutput"], () => require("./getCloudProjectDatabasePostgresqlConnectionPools"));

export { GetCloudProjectDatabasePostgresqlUserArgs, GetCloudProjectDatabasePostgresqlUserResult, GetCloudProjectDatabasePostgresqlUserOutputArgs } from "./getCloudProjectDatabasePostgresqlUser";
export const getCloudProjectDatabasePostgresqlUser: typeof import("./getCloudProjectDatabasePostgresqlUser").getCloudProjectDatabasePostgresqlUser = null as any;
export const getCloudProjectDatabasePostgresqlUserOutput: typeof import("./getCloudProjectDatabasePostgresqlUser").getCloudProjectDatabasePostgresqlUserOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabasePostgresqlUser","getCloudProjectDatabasePostgresqlUserOutput"], () => require("./getCloudProjectDatabasePostgresqlUser"));

export { GetCloudProjectDatabaseRedisUserArgs, GetCloudProjectDatabaseRedisUserResult, GetCloudProjectDatabaseRedisUserOutputArgs } from "./getCloudProjectDatabaseRedisUser";
export const getCloudProjectDatabaseRedisUser: typeof import("./getCloudProjectDatabaseRedisUser").getCloudProjectDatabaseRedisUser = null as any;
export const getCloudProjectDatabaseRedisUserOutput: typeof import("./getCloudProjectDatabaseRedisUser").getCloudProjectDatabaseRedisUserOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseRedisUser","getCloudProjectDatabaseRedisUserOutput"], () => require("./getCloudProjectDatabaseRedisUser"));

export { GetCloudProjectDatabaseUserArgs, GetCloudProjectDatabaseUserResult, GetCloudProjectDatabaseUserOutputArgs } from "./getCloudProjectDatabaseUser";
export const getCloudProjectDatabaseUser: typeof import("./getCloudProjectDatabaseUser").getCloudProjectDatabaseUser = null as any;
export const getCloudProjectDatabaseUserOutput: typeof import("./getCloudProjectDatabaseUser").getCloudProjectDatabaseUserOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseUser","getCloudProjectDatabaseUserOutput"], () => require("./getCloudProjectDatabaseUser"));

export { GetCloudProjectDatabaseUsersArgs, GetCloudProjectDatabaseUsersResult, GetCloudProjectDatabaseUsersOutputArgs } from "./getCloudProjectDatabaseUsers";
export const getCloudProjectDatabaseUsers: typeof import("./getCloudProjectDatabaseUsers").getCloudProjectDatabaseUsers = null as any;
export const getCloudProjectDatabaseUsersOutput: typeof import("./getCloudProjectDatabaseUsers").getCloudProjectDatabaseUsersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseUsers","getCloudProjectDatabaseUsersOutput"], () => require("./getCloudProjectDatabaseUsers"));

export { GetCloudProjectDatabasesArgs, GetCloudProjectDatabasesResult, GetCloudProjectDatabasesOutputArgs } from "./getCloudProjectDatabases";
export const getCloudProjectDatabases: typeof import("./getCloudProjectDatabases").getCloudProjectDatabases = null as any;
export const getCloudProjectDatabasesOutput: typeof import("./getCloudProjectDatabases").getCloudProjectDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabases","getCloudProjectDatabasesOutput"], () => require("./getCloudProjectDatabases"));

export { GetCloudProjectFailoverIpAttachArgs, GetCloudProjectFailoverIpAttachResult, GetCloudProjectFailoverIpAttachOutputArgs } from "./getCloudProjectFailoverIpAttach";
export const getCloudProjectFailoverIpAttach: typeof import("./getCloudProjectFailoverIpAttach").getCloudProjectFailoverIpAttach = null as any;
export const getCloudProjectFailoverIpAttachOutput: typeof import("./getCloudProjectFailoverIpAttach").getCloudProjectFailoverIpAttachOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectFailoverIpAttach","getCloudProjectFailoverIpAttachOutput"], () => require("./getCloudProjectFailoverIpAttach"));

export { GetCloudProjectGatewayInterfaceArgs, GetCloudProjectGatewayInterfaceResult, GetCloudProjectGatewayInterfaceOutputArgs } from "./getCloudProjectGatewayInterface";
export const getCloudProjectGatewayInterface: typeof import("./getCloudProjectGatewayInterface").getCloudProjectGatewayInterface = null as any;
export const getCloudProjectGatewayInterfaceOutput: typeof import("./getCloudProjectGatewayInterface").getCloudProjectGatewayInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectGatewayInterface","getCloudProjectGatewayInterfaceOutput"], () => require("./getCloudProjectGatewayInterface"));

export { GetCloudProjectKubeArgs, GetCloudProjectKubeResult, GetCloudProjectKubeOutputArgs } from "./getCloudProjectKube";
export const getCloudProjectKube: typeof import("./getCloudProjectKube").getCloudProjectKube = null as any;
export const getCloudProjectKubeOutput: typeof import("./getCloudProjectKube").getCloudProjectKubeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectKube","getCloudProjectKubeOutput"], () => require("./getCloudProjectKube"));

export { GetCloudProjectKubeIprestrictionsArgs, GetCloudProjectKubeIprestrictionsResult, GetCloudProjectKubeIprestrictionsOutputArgs } from "./getCloudProjectKubeIprestrictions";
export const getCloudProjectKubeIprestrictions: typeof import("./getCloudProjectKubeIprestrictions").getCloudProjectKubeIprestrictions = null as any;
export const getCloudProjectKubeIprestrictionsOutput: typeof import("./getCloudProjectKubeIprestrictions").getCloudProjectKubeIprestrictionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectKubeIprestrictions","getCloudProjectKubeIprestrictionsOutput"], () => require("./getCloudProjectKubeIprestrictions"));

export { GetCloudProjectKubeNodepoolArgs, GetCloudProjectKubeNodepoolResult, GetCloudProjectKubeNodepoolOutputArgs } from "./getCloudProjectKubeNodepool";
export const getCloudProjectKubeNodepool: typeof import("./getCloudProjectKubeNodepool").getCloudProjectKubeNodepool = null as any;
export const getCloudProjectKubeNodepoolOutput: typeof import("./getCloudProjectKubeNodepool").getCloudProjectKubeNodepoolOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectKubeNodepool","getCloudProjectKubeNodepoolOutput"], () => require("./getCloudProjectKubeNodepool"));

export { GetCloudProjectKubeNodepoolNodesArgs, GetCloudProjectKubeNodepoolNodesResult, GetCloudProjectKubeNodepoolNodesOutputArgs } from "./getCloudProjectKubeNodepoolNodes";
export const getCloudProjectKubeNodepoolNodes: typeof import("./getCloudProjectKubeNodepoolNodes").getCloudProjectKubeNodepoolNodes = null as any;
export const getCloudProjectKubeNodepoolNodesOutput: typeof import("./getCloudProjectKubeNodepoolNodes").getCloudProjectKubeNodepoolNodesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectKubeNodepoolNodes","getCloudProjectKubeNodepoolNodesOutput"], () => require("./getCloudProjectKubeNodepoolNodes"));

export { GetCloudProjectKubeNodesArgs, GetCloudProjectKubeNodesResult, GetCloudProjectKubeNodesOutputArgs } from "./getCloudProjectKubeNodes";
export const getCloudProjectKubeNodes: typeof import("./getCloudProjectKubeNodes").getCloudProjectKubeNodes = null as any;
export const getCloudProjectKubeNodesOutput: typeof import("./getCloudProjectKubeNodes").getCloudProjectKubeNodesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectKubeNodes","getCloudProjectKubeNodesOutput"], () => require("./getCloudProjectKubeNodes"));

export { GetCloudProjectKubeOidcArgs, GetCloudProjectKubeOidcResult, GetCloudProjectKubeOidcOutputArgs } from "./getCloudProjectKubeOidc";
export const getCloudProjectKubeOidc: typeof import("./getCloudProjectKubeOidc").getCloudProjectKubeOidc = null as any;
export const getCloudProjectKubeOidcOutput: typeof import("./getCloudProjectKubeOidc").getCloudProjectKubeOidcOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectKubeOidc","getCloudProjectKubeOidcOutput"], () => require("./getCloudProjectKubeOidc"));

export { GetCloudProjectLoadbalancerArgs, GetCloudProjectLoadbalancerResult, GetCloudProjectLoadbalancerOutputArgs } from "./getCloudProjectLoadbalancer";
export const getCloudProjectLoadbalancer: typeof import("./getCloudProjectLoadbalancer").getCloudProjectLoadbalancer = null as any;
export const getCloudProjectLoadbalancerOutput: typeof import("./getCloudProjectLoadbalancer").getCloudProjectLoadbalancerOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectLoadbalancer","getCloudProjectLoadbalancerOutput"], () => require("./getCloudProjectLoadbalancer"));

export { GetCloudProjectLoadbalancersArgs, GetCloudProjectLoadbalancersResult, GetCloudProjectLoadbalancersOutputArgs } from "./getCloudProjectLoadbalancers";
export const getCloudProjectLoadbalancers: typeof import("./getCloudProjectLoadbalancers").getCloudProjectLoadbalancers = null as any;
export const getCloudProjectLoadbalancersOutput: typeof import("./getCloudProjectLoadbalancers").getCloudProjectLoadbalancersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectLoadbalancers","getCloudProjectLoadbalancersOutput"], () => require("./getCloudProjectLoadbalancers"));

export { GetCloudProjectRegionArgs, GetCloudProjectRegionResult, GetCloudProjectRegionOutputArgs } from "./getCloudProjectRegion";
export const getCloudProjectRegion: typeof import("./getCloudProjectRegion").getCloudProjectRegion = null as any;
export const getCloudProjectRegionOutput: typeof import("./getCloudProjectRegion").getCloudProjectRegionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectRegion","getCloudProjectRegionOutput"], () => require("./getCloudProjectRegion"));

export { GetCloudProjectRegionLoadbalancerLogSubscriptionArgs, GetCloudProjectRegionLoadbalancerLogSubscriptionResult, GetCloudProjectRegionLoadbalancerLogSubscriptionOutputArgs } from "./getCloudProjectRegionLoadbalancerLogSubscription";
export const getCloudProjectRegionLoadbalancerLogSubscription: typeof import("./getCloudProjectRegionLoadbalancerLogSubscription").getCloudProjectRegionLoadbalancerLogSubscription = null as any;
export const getCloudProjectRegionLoadbalancerLogSubscriptionOutput: typeof import("./getCloudProjectRegionLoadbalancerLogSubscription").getCloudProjectRegionLoadbalancerLogSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectRegionLoadbalancerLogSubscription","getCloudProjectRegionLoadbalancerLogSubscriptionOutput"], () => require("./getCloudProjectRegionLoadbalancerLogSubscription"));

export { GetCloudProjectRegionLoadbalancerLogSubscriptionsArgs, GetCloudProjectRegionLoadbalancerLogSubscriptionsResult, GetCloudProjectRegionLoadbalancerLogSubscriptionsOutputArgs } from "./getCloudProjectRegionLoadbalancerLogSubscriptions";
export const getCloudProjectRegionLoadbalancerLogSubscriptions: typeof import("./getCloudProjectRegionLoadbalancerLogSubscriptions").getCloudProjectRegionLoadbalancerLogSubscriptions = null as any;
export const getCloudProjectRegionLoadbalancerLogSubscriptionsOutput: typeof import("./getCloudProjectRegionLoadbalancerLogSubscriptions").getCloudProjectRegionLoadbalancerLogSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectRegionLoadbalancerLogSubscriptions","getCloudProjectRegionLoadbalancerLogSubscriptionsOutput"], () => require("./getCloudProjectRegionLoadbalancerLogSubscriptions"));

export { GetCloudProjectRegionsArgs, GetCloudProjectRegionsResult, GetCloudProjectRegionsOutputArgs } from "./getCloudProjectRegions";
export const getCloudProjectRegions: typeof import("./getCloudProjectRegions").getCloudProjectRegions = null as any;
export const getCloudProjectRegionsOutput: typeof import("./getCloudProjectRegions").getCloudProjectRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectRegions","getCloudProjectRegionsOutput"], () => require("./getCloudProjectRegions"));

export { GetCloudProjectUserArgs, GetCloudProjectUserResult, GetCloudProjectUserOutputArgs } from "./getCloudProjectUser";
export const getCloudProjectUser: typeof import("./getCloudProjectUser").getCloudProjectUser = null as any;
export const getCloudProjectUserOutput: typeof import("./getCloudProjectUser").getCloudProjectUserOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectUser","getCloudProjectUserOutput"], () => require("./getCloudProjectUser"));

export { GetCloudProjectUserS3CredentialArgs, GetCloudProjectUserS3CredentialResult, GetCloudProjectUserS3CredentialOutputArgs } from "./getCloudProjectUserS3Credential";
export const getCloudProjectUserS3Credential: typeof import("./getCloudProjectUserS3Credential").getCloudProjectUserS3Credential = null as any;
export const getCloudProjectUserS3CredentialOutput: typeof import("./getCloudProjectUserS3Credential").getCloudProjectUserS3CredentialOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectUserS3Credential","getCloudProjectUserS3CredentialOutput"], () => require("./getCloudProjectUserS3Credential"));

export { GetCloudProjectUserS3CredentialsArgs, GetCloudProjectUserS3CredentialsResult, GetCloudProjectUserS3CredentialsOutputArgs } from "./getCloudProjectUserS3Credentials";
export const getCloudProjectUserS3Credentials: typeof import("./getCloudProjectUserS3Credentials").getCloudProjectUserS3Credentials = null as any;
export const getCloudProjectUserS3CredentialsOutput: typeof import("./getCloudProjectUserS3Credentials").getCloudProjectUserS3CredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectUserS3Credentials","getCloudProjectUserS3CredentialsOutput"], () => require("./getCloudProjectUserS3Credentials"));

export { GetCloudProjectUserS3PolicyArgs, GetCloudProjectUserS3PolicyResult, GetCloudProjectUserS3PolicyOutputArgs } from "./getCloudProjectUserS3Policy";
export const getCloudProjectUserS3Policy: typeof import("./getCloudProjectUserS3Policy").getCloudProjectUserS3Policy = null as any;
export const getCloudProjectUserS3PolicyOutput: typeof import("./getCloudProjectUserS3Policy").getCloudProjectUserS3PolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectUserS3Policy","getCloudProjectUserS3PolicyOutput"], () => require("./getCloudProjectUserS3Policy"));

export { GetCloudProjectUsersArgs, GetCloudProjectUsersResult, GetCloudProjectUsersOutputArgs } from "./getCloudProjectUsers";
export const getCloudProjectUsers: typeof import("./getCloudProjectUsers").getCloudProjectUsers = null as any;
export const getCloudProjectUsersOutput: typeof import("./getCloudProjectUsers").getCloudProjectUsersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectUsers","getCloudProjectUsersOutput"], () => require("./getCloudProjectUsers"));

export { GetCloudProjectVrackArgs, GetCloudProjectVrackResult, GetCloudProjectVrackOutputArgs } from "./getCloudProjectVrack";
export const getCloudProjectVrack: typeof import("./getCloudProjectVrack").getCloudProjectVrack = null as any;
export const getCloudProjectVrackOutput: typeof import("./getCloudProjectVrack").getCloudProjectVrackOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectVrack","getCloudProjectVrackOutput"], () => require("./getCloudProjectVrack"));

export { GetCloudProjectsResult } from "./getCloudProjects";
export const getCloudProjects: typeof import("./getCloudProjects").getCloudProjects = null as any;
export const getCloudProjectsOutput: typeof import("./getCloudProjects").getCloudProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjects","getCloudProjectsOutput"], () => require("./getCloudProjects"));

export { GetDbaasLogsClusterArgs, GetDbaasLogsClusterResult, GetDbaasLogsClusterOutputArgs } from "./getDbaasLogsCluster";
export const getDbaasLogsCluster: typeof import("./getDbaasLogsCluster").getDbaasLogsCluster = null as any;
export const getDbaasLogsClusterOutput: typeof import("./getDbaasLogsCluster").getDbaasLogsClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDbaasLogsCluster","getDbaasLogsClusterOutput"], () => require("./getDbaasLogsCluster"));

export { GetDbaasLogsClusterRetentionArgs, GetDbaasLogsClusterRetentionResult, GetDbaasLogsClusterRetentionOutputArgs } from "./getDbaasLogsClusterRetention";
export const getDbaasLogsClusterRetention: typeof import("./getDbaasLogsClusterRetention").getDbaasLogsClusterRetention = null as any;
export const getDbaasLogsClusterRetentionOutput: typeof import("./getDbaasLogsClusterRetention").getDbaasLogsClusterRetentionOutput = null as any;
utilities.lazyLoad(exports, ["getDbaasLogsClusterRetention","getDbaasLogsClusterRetentionOutput"], () => require("./getDbaasLogsClusterRetention"));

export { GetDbaasLogsClustersArgs, GetDbaasLogsClustersResult, GetDbaasLogsClustersOutputArgs } from "./getDbaasLogsClusters";
export const getDbaasLogsClusters: typeof import("./getDbaasLogsClusters").getDbaasLogsClusters = null as any;
export const getDbaasLogsClustersOutput: typeof import("./getDbaasLogsClusters").getDbaasLogsClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDbaasLogsClusters","getDbaasLogsClustersOutput"], () => require("./getDbaasLogsClusters"));

export { GetDbaasLogsInputEngineArgs, GetDbaasLogsInputEngineResult, GetDbaasLogsInputEngineOutputArgs } from "./getDbaasLogsInputEngine";
export const getDbaasLogsInputEngine: typeof import("./getDbaasLogsInputEngine").getDbaasLogsInputEngine = null as any;
export const getDbaasLogsInputEngineOutput: typeof import("./getDbaasLogsInputEngine").getDbaasLogsInputEngineOutput = null as any;
utilities.lazyLoad(exports, ["getDbaasLogsInputEngine","getDbaasLogsInputEngineOutput"], () => require("./getDbaasLogsInputEngine"));

export { GetDbaasLogsOutputGraylogStreamArgs, GetDbaasLogsOutputGraylogStreamResult, GetDbaasLogsOutputGraylogStreamOutputArgs } from "./getDbaasLogsOutputGraylogStream";
export const getDbaasLogsOutputGraylogStream: typeof import("./getDbaasLogsOutputGraylogStream").getDbaasLogsOutputGraylogStream = null as any;
export const getDbaasLogsOutputGraylogStreamOutput: typeof import("./getDbaasLogsOutputGraylogStream").getDbaasLogsOutputGraylogStreamOutput = null as any;
utilities.lazyLoad(exports, ["getDbaasLogsOutputGraylogStream","getDbaasLogsOutputGraylogStreamOutput"], () => require("./getDbaasLogsOutputGraylogStream"));

export { GetDedicatedCephArgs, GetDedicatedCephResult, GetDedicatedCephOutputArgs } from "./getDedicatedCeph";
export const getDedicatedCeph: typeof import("./getDedicatedCeph").getDedicatedCeph = null as any;
export const getDedicatedCephOutput: typeof import("./getDedicatedCeph").getDedicatedCephOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedCeph","getDedicatedCephOutput"], () => require("./getDedicatedCeph"));

export { GetDedicatedInstallationTemplateArgs, GetDedicatedInstallationTemplateResult, GetDedicatedInstallationTemplateOutputArgs } from "./getDedicatedInstallationTemplate";
export const getDedicatedInstallationTemplate: typeof import("./getDedicatedInstallationTemplate").getDedicatedInstallationTemplate = null as any;
export const getDedicatedInstallationTemplateOutput: typeof import("./getDedicatedInstallationTemplate").getDedicatedInstallationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedInstallationTemplate","getDedicatedInstallationTemplateOutput"], () => require("./getDedicatedInstallationTemplate"));

export { GetDedicatedInstallationTemplatesArgs, GetDedicatedInstallationTemplatesResult, GetDedicatedInstallationTemplatesOutputArgs } from "./getDedicatedInstallationTemplates";
export const getDedicatedInstallationTemplates: typeof import("./getDedicatedInstallationTemplates").getDedicatedInstallationTemplates = null as any;
export const getDedicatedInstallationTemplatesOutput: typeof import("./getDedicatedInstallationTemplates").getDedicatedInstallationTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedInstallationTemplates","getDedicatedInstallationTemplatesOutput"], () => require("./getDedicatedInstallationTemplates"));

export { GetDedicatedNashaArgs, GetDedicatedNashaResult, GetDedicatedNashaOutputArgs } from "./getDedicatedNasha";
export const getDedicatedNasha: typeof import("./getDedicatedNasha").getDedicatedNasha = null as any;
export const getDedicatedNashaOutput: typeof import("./getDedicatedNasha").getDedicatedNashaOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedNasha","getDedicatedNashaOutput"], () => require("./getDedicatedNasha"));

export { GetDedicatedServerArgs, GetDedicatedServerResult, GetDedicatedServerOutputArgs } from "./getDedicatedServer";
export const getDedicatedServer: typeof import("./getDedicatedServer").getDedicatedServer = null as any;
export const getDedicatedServerOutput: typeof import("./getDedicatedServer").getDedicatedServerOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedServer","getDedicatedServerOutput"], () => require("./getDedicatedServer"));

export { GetDedicatedServerBootsArgs, GetDedicatedServerBootsResult, GetDedicatedServerBootsOutputArgs } from "./getDedicatedServerBoots";
export const getDedicatedServerBoots: typeof import("./getDedicatedServerBoots").getDedicatedServerBoots = null as any;
export const getDedicatedServerBootsOutput: typeof import("./getDedicatedServerBoots").getDedicatedServerBootsOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedServerBoots","getDedicatedServerBootsOutput"], () => require("./getDedicatedServerBoots"));

export { GetDedicatedServerSpecificationsHardwareArgs, GetDedicatedServerSpecificationsHardwareResult, GetDedicatedServerSpecificationsHardwareOutputArgs } from "./getDedicatedServerSpecificationsHardware";
export const getDedicatedServerSpecificationsHardware: typeof import("./getDedicatedServerSpecificationsHardware").getDedicatedServerSpecificationsHardware = null as any;
export const getDedicatedServerSpecificationsHardwareOutput: typeof import("./getDedicatedServerSpecificationsHardware").getDedicatedServerSpecificationsHardwareOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedServerSpecificationsHardware","getDedicatedServerSpecificationsHardwareOutput"], () => require("./getDedicatedServerSpecificationsHardware"));

export { GetDedicatedServerSpecificationsNetworkArgs, GetDedicatedServerSpecificationsNetworkResult, GetDedicatedServerSpecificationsNetworkOutputArgs } from "./getDedicatedServerSpecificationsNetwork";
export const getDedicatedServerSpecificationsNetwork: typeof import("./getDedicatedServerSpecificationsNetwork").getDedicatedServerSpecificationsNetwork = null as any;
export const getDedicatedServerSpecificationsNetworkOutput: typeof import("./getDedicatedServerSpecificationsNetwork").getDedicatedServerSpecificationsNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedServerSpecificationsNetwork","getDedicatedServerSpecificationsNetworkOutput"], () => require("./getDedicatedServerSpecificationsNetwork"));

export { GetDedicatedServersArgs, GetDedicatedServersResult, GetDedicatedServersOutputArgs } from "./getDedicatedServers";
export const getDedicatedServers: typeof import("./getDedicatedServers").getDedicatedServers = null as any;
export const getDedicatedServersOutput: typeof import("./getDedicatedServers").getDedicatedServersOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedServers","getDedicatedServersOutput"], () => require("./getDedicatedServers"));

export { GetDomainZoneArgs, GetDomainZoneResult, GetDomainZoneOutputArgs } from "./getDomainZone";
export const getDomainZone: typeof import("./getDomainZone").getDomainZone = null as any;
export const getDomainZoneOutput: typeof import("./getDomainZone").getDomainZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDomainZone","getDomainZoneOutput"], () => require("./getDomainZone"));

export { GetDomainZoneDnssecArgs, GetDomainZoneDnssecResult, GetDomainZoneDnssecOutputArgs } from "./getDomainZoneDnssec";
export const getDomainZoneDnssec: typeof import("./getDomainZoneDnssec").getDomainZoneDnssec = null as any;
export const getDomainZoneDnssecOutput: typeof import("./getDomainZoneDnssec").getDomainZoneDnssecOutput = null as any;
utilities.lazyLoad(exports, ["getDomainZoneDnssec","getDomainZoneDnssecOutput"], () => require("./getDomainZoneDnssec"));

export { GetHostingPrivatedatabaseArgs, GetHostingPrivatedatabaseResult, GetHostingPrivatedatabaseOutputArgs } from "./getHostingPrivatedatabase";
export const getHostingPrivatedatabase: typeof import("./getHostingPrivatedatabase").getHostingPrivatedatabase = null as any;
export const getHostingPrivatedatabaseOutput: typeof import("./getHostingPrivatedatabase").getHostingPrivatedatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getHostingPrivatedatabase","getHostingPrivatedatabaseOutput"], () => require("./getHostingPrivatedatabase"));

export { GetHostingPrivatedatabaseDatabaseArgs, GetHostingPrivatedatabaseDatabaseResult, GetHostingPrivatedatabaseDatabaseOutputArgs } from "./getHostingPrivatedatabaseDatabase";
export const getHostingPrivatedatabaseDatabase: typeof import("./getHostingPrivatedatabaseDatabase").getHostingPrivatedatabaseDatabase = null as any;
export const getHostingPrivatedatabaseDatabaseOutput: typeof import("./getHostingPrivatedatabaseDatabase").getHostingPrivatedatabaseDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getHostingPrivatedatabaseDatabase","getHostingPrivatedatabaseDatabaseOutput"], () => require("./getHostingPrivatedatabaseDatabase"));

export { GetHostingPrivatedatabaseUserArgs, GetHostingPrivatedatabaseUserResult, GetHostingPrivatedatabaseUserOutputArgs } from "./getHostingPrivatedatabaseUser";
export const getHostingPrivatedatabaseUser: typeof import("./getHostingPrivatedatabaseUser").getHostingPrivatedatabaseUser = null as any;
export const getHostingPrivatedatabaseUserOutput: typeof import("./getHostingPrivatedatabaseUser").getHostingPrivatedatabaseUserOutput = null as any;
utilities.lazyLoad(exports, ["getHostingPrivatedatabaseUser","getHostingPrivatedatabaseUserOutput"], () => require("./getHostingPrivatedatabaseUser"));

export { GetHostingPrivatedatabaseUserGrantArgs, GetHostingPrivatedatabaseUserGrantResult, GetHostingPrivatedatabaseUserGrantOutputArgs } from "./getHostingPrivatedatabaseUserGrant";
export const getHostingPrivatedatabaseUserGrant: typeof import("./getHostingPrivatedatabaseUserGrant").getHostingPrivatedatabaseUserGrant = null as any;
export const getHostingPrivatedatabaseUserGrantOutput: typeof import("./getHostingPrivatedatabaseUserGrant").getHostingPrivatedatabaseUserGrantOutput = null as any;
utilities.lazyLoad(exports, ["getHostingPrivatedatabaseUserGrant","getHostingPrivatedatabaseUserGrantOutput"], () => require("./getHostingPrivatedatabaseUserGrant"));

export { GetHostingPrivatedatabaseWhitelistArgs, GetHostingPrivatedatabaseWhitelistResult, GetHostingPrivatedatabaseWhitelistOutputArgs } from "./getHostingPrivatedatabaseWhitelist";
export const getHostingPrivatedatabaseWhitelist: typeof import("./getHostingPrivatedatabaseWhitelist").getHostingPrivatedatabaseWhitelist = null as any;
export const getHostingPrivatedatabaseWhitelistOutput: typeof import("./getHostingPrivatedatabaseWhitelist").getHostingPrivatedatabaseWhitelistOutput = null as any;
utilities.lazyLoad(exports, ["getHostingPrivatedatabaseWhitelist","getHostingPrivatedatabaseWhitelistOutput"], () => require("./getHostingPrivatedatabaseWhitelist"));

export { GetIamPermissionsGroupArgs, GetIamPermissionsGroupResult, GetIamPermissionsGroupOutputArgs } from "./getIamPermissionsGroup";
export const getIamPermissionsGroup: typeof import("./getIamPermissionsGroup").getIamPermissionsGroup = null as any;
export const getIamPermissionsGroupOutput: typeof import("./getIamPermissionsGroup").getIamPermissionsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamPermissionsGroup","getIamPermissionsGroupOutput"], () => require("./getIamPermissionsGroup"));

export { GetIamPermissionsGroupsArgs, GetIamPermissionsGroupsResult, GetIamPermissionsGroupsOutputArgs } from "./getIamPermissionsGroups";
export const getIamPermissionsGroups: typeof import("./getIamPermissionsGroups").getIamPermissionsGroups = null as any;
export const getIamPermissionsGroupsOutput: typeof import("./getIamPermissionsGroups").getIamPermissionsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIamPermissionsGroups","getIamPermissionsGroupsOutput"], () => require("./getIamPermissionsGroups"));

export { GetIamPoliciesArgs, GetIamPoliciesResult, GetIamPoliciesOutputArgs } from "./getIamPolicies";
export const getIamPolicies: typeof import("./getIamPolicies").getIamPolicies = null as any;
export const getIamPoliciesOutput: typeof import("./getIamPolicies").getIamPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicies","getIamPoliciesOutput"], () => require("./getIamPolicies"));

export { GetIamPolicyArgs, GetIamPolicyResult, GetIamPolicyOutputArgs } from "./getIamPolicy";
export const getIamPolicy: typeof import("./getIamPolicy").getIamPolicy = null as any;
export const getIamPolicyOutput: typeof import("./getIamPolicy").getIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicy","getIamPolicyOutput"], () => require("./getIamPolicy"));

export { GetIamReferenceActionsArgs, GetIamReferenceActionsResult, GetIamReferenceActionsOutputArgs } from "./getIamReferenceActions";
export const getIamReferenceActions: typeof import("./getIamReferenceActions").getIamReferenceActions = null as any;
export const getIamReferenceActionsOutput: typeof import("./getIamReferenceActions").getIamReferenceActionsOutput = null as any;
utilities.lazyLoad(exports, ["getIamReferenceActions","getIamReferenceActionsOutput"], () => require("./getIamReferenceActions"));

export { GetIamReferenceResourceTypeArgs, GetIamReferenceResourceTypeResult, GetIamReferenceResourceTypeOutputArgs } from "./getIamReferenceResourceType";
export const getIamReferenceResourceType: typeof import("./getIamReferenceResourceType").getIamReferenceResourceType = null as any;
export const getIamReferenceResourceTypeOutput: typeof import("./getIamReferenceResourceType").getIamReferenceResourceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getIamReferenceResourceType","getIamReferenceResourceTypeOutput"], () => require("./getIamReferenceResourceType"));

export { GetIamResourceGroupArgs, GetIamResourceGroupResult, GetIamResourceGroupOutputArgs } from "./getIamResourceGroup";
export const getIamResourceGroup: typeof import("./getIamResourceGroup").getIamResourceGroup = null as any;
export const getIamResourceGroupOutput: typeof import("./getIamResourceGroup").getIamResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamResourceGroup","getIamResourceGroupOutput"], () => require("./getIamResourceGroup"));

export { GetIamResourceGroupsArgs, GetIamResourceGroupsResult, GetIamResourceGroupsOutputArgs } from "./getIamResourceGroups";
export const getIamResourceGroups: typeof import("./getIamResourceGroups").getIamResourceGroups = null as any;
export const getIamResourceGroupsOutput: typeof import("./getIamResourceGroups").getIamResourceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIamResourceGroups","getIamResourceGroupsOutput"], () => require("./getIamResourceGroups"));

export { GetIpFirewallArgs, GetIpFirewallResult, GetIpFirewallOutputArgs } from "./getIpFirewall";
export const getIpFirewall: typeof import("./getIpFirewall").getIpFirewall = null as any;
export const getIpFirewallOutput: typeof import("./getIpFirewall").getIpFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getIpFirewall","getIpFirewallOutput"], () => require("./getIpFirewall"));

export { GetIpFirewallRuleArgs, GetIpFirewallRuleResult, GetIpFirewallRuleOutputArgs } from "./getIpFirewallRule";
export const getIpFirewallRule: typeof import("./getIpFirewallRule").getIpFirewallRule = null as any;
export const getIpFirewallRuleOutput: typeof import("./getIpFirewallRule").getIpFirewallRuleOutput = null as any;
utilities.lazyLoad(exports, ["getIpFirewallRule","getIpFirewallRuleOutput"], () => require("./getIpFirewallRule"));

export { GetIpMitigationArgs, GetIpMitigationResult, GetIpMitigationOutputArgs } from "./getIpMitigation";
export const getIpMitigation: typeof import("./getIpMitigation").getIpMitigation = null as any;
export const getIpMitigationOutput: typeof import("./getIpMitigation").getIpMitigationOutput = null as any;
utilities.lazyLoad(exports, ["getIpMitigation","getIpMitigationOutput"], () => require("./getIpMitigation"));

export { GetIpServiceArgs, GetIpServiceResult, GetIpServiceOutputArgs } from "./getIpService";
export const getIpService: typeof import("./getIpService").getIpService = null as any;
export const getIpServiceOutput: typeof import("./getIpService").getIpServiceOutput = null as any;
utilities.lazyLoad(exports, ["getIpService","getIpServiceOutput"], () => require("./getIpService"));

export { GetIploadbalancingArgs, GetIploadbalancingResult, GetIploadbalancingOutputArgs } from "./getIploadbalancing";
export const getIploadbalancing: typeof import("./getIploadbalancing").getIploadbalancing = null as any;
export const getIploadbalancingOutput: typeof import("./getIploadbalancing").getIploadbalancingOutput = null as any;
utilities.lazyLoad(exports, ["getIploadbalancing","getIploadbalancingOutput"], () => require("./getIploadbalancing"));

export { GetIploadbalancingVrackNetworkArgs, GetIploadbalancingVrackNetworkResult, GetIploadbalancingVrackNetworkOutputArgs } from "./getIploadbalancingVrackNetwork";
export const getIploadbalancingVrackNetwork: typeof import("./getIploadbalancingVrackNetwork").getIploadbalancingVrackNetwork = null as any;
export const getIploadbalancingVrackNetworkOutput: typeof import("./getIploadbalancingVrackNetwork").getIploadbalancingVrackNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getIploadbalancingVrackNetwork","getIploadbalancingVrackNetworkOutput"], () => require("./getIploadbalancingVrackNetwork"));

export { GetIploadbalancingVrackNetworksArgs, GetIploadbalancingVrackNetworksResult, GetIploadbalancingVrackNetworksOutputArgs } from "./getIploadbalancingVrackNetworks";
export const getIploadbalancingVrackNetworks: typeof import("./getIploadbalancingVrackNetworks").getIploadbalancingVrackNetworks = null as any;
export const getIploadbalancingVrackNetworksOutput: typeof import("./getIploadbalancingVrackNetworks").getIploadbalancingVrackNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getIploadbalancingVrackNetworks","getIploadbalancingVrackNetworksOutput"], () => require("./getIploadbalancingVrackNetworks"));

export { GetMeArgs, GetMeResult, GetMeOutputArgs } from "./getMe";
export const getMe: typeof import("./getMe").getMe = null as any;
export const getMeOutput: typeof import("./getMe").getMeOutput = null as any;
utilities.lazyLoad(exports, ["getMe","getMeOutput"], () => require("./getMe"));

export { GetMeApiOauth2ClientArgs, GetMeApiOauth2ClientResult, GetMeApiOauth2ClientOutputArgs } from "./getMeApiOauth2Client";
export const getMeApiOauth2Client: typeof import("./getMeApiOauth2Client").getMeApiOauth2Client = null as any;
export const getMeApiOauth2ClientOutput: typeof import("./getMeApiOauth2Client").getMeApiOauth2ClientOutput = null as any;
utilities.lazyLoad(exports, ["getMeApiOauth2Client","getMeApiOauth2ClientOutput"], () => require("./getMeApiOauth2Client"));

export { GetMeApiOauth2ClientsArgs, GetMeApiOauth2ClientsResult, GetMeApiOauth2ClientsOutputArgs } from "./getMeApiOauth2Clients";
export const getMeApiOauth2Clients: typeof import("./getMeApiOauth2Clients").getMeApiOauth2Clients = null as any;
export const getMeApiOauth2ClientsOutput: typeof import("./getMeApiOauth2Clients").getMeApiOauth2ClientsOutput = null as any;
utilities.lazyLoad(exports, ["getMeApiOauth2Clients","getMeApiOauth2ClientsOutput"], () => require("./getMeApiOauth2Clients"));

export { GetMeIdentityGroupArgs, GetMeIdentityGroupResult, GetMeIdentityGroupOutputArgs } from "./getMeIdentityGroup";
export const getMeIdentityGroup: typeof import("./getMeIdentityGroup").getMeIdentityGroup = null as any;
export const getMeIdentityGroupOutput: typeof import("./getMeIdentityGroup").getMeIdentityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMeIdentityGroup","getMeIdentityGroupOutput"], () => require("./getMeIdentityGroup"));

export { GetMeIdentityGroupsArgs, GetMeIdentityGroupsResult, GetMeIdentityGroupsOutputArgs } from "./getMeIdentityGroups";
export const getMeIdentityGroups: typeof import("./getMeIdentityGroups").getMeIdentityGroups = null as any;
export const getMeIdentityGroupsOutput: typeof import("./getMeIdentityGroups").getMeIdentityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMeIdentityGroups","getMeIdentityGroupsOutput"], () => require("./getMeIdentityGroups"));

export { GetMeIdentityUserArgs, GetMeIdentityUserResult, GetMeIdentityUserOutputArgs } from "./getMeIdentityUser";
export const getMeIdentityUser: typeof import("./getMeIdentityUser").getMeIdentityUser = null as any;
export const getMeIdentityUserOutput: typeof import("./getMeIdentityUser").getMeIdentityUserOutput = null as any;
utilities.lazyLoad(exports, ["getMeIdentityUser","getMeIdentityUserOutput"], () => require("./getMeIdentityUser"));

export { GetMeIdentityUsersArgs, GetMeIdentityUsersResult, GetMeIdentityUsersOutputArgs } from "./getMeIdentityUsers";
export const getMeIdentityUsers: typeof import("./getMeIdentityUsers").getMeIdentityUsers = null as any;
export const getMeIdentityUsersOutput: typeof import("./getMeIdentityUsers").getMeIdentityUsersOutput = null as any;
utilities.lazyLoad(exports, ["getMeIdentityUsers","getMeIdentityUsersOutput"], () => require("./getMeIdentityUsers"));

export { GetMeInstallationTemplateArgs, GetMeInstallationTemplateResult, GetMeInstallationTemplateOutputArgs } from "./getMeInstallationTemplate";
export const getMeInstallationTemplate: typeof import("./getMeInstallationTemplate").getMeInstallationTemplate = null as any;
export const getMeInstallationTemplateOutput: typeof import("./getMeInstallationTemplate").getMeInstallationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getMeInstallationTemplate","getMeInstallationTemplateOutput"], () => require("./getMeInstallationTemplate"));

export { GetMeInstallationTemplatesArgs, GetMeInstallationTemplatesResult, GetMeInstallationTemplatesOutputArgs } from "./getMeInstallationTemplates";
export const getMeInstallationTemplates: typeof import("./getMeInstallationTemplates").getMeInstallationTemplates = null as any;
export const getMeInstallationTemplatesOutput: typeof import("./getMeInstallationTemplates").getMeInstallationTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getMeInstallationTemplates","getMeInstallationTemplatesOutput"], () => require("./getMeInstallationTemplates"));

export { GetMePaymentmeanBankaccountArgs, GetMePaymentmeanBankaccountResult, GetMePaymentmeanBankaccountOutputArgs } from "./getMePaymentmeanBankaccount";
export const getMePaymentmeanBankaccount: typeof import("./getMePaymentmeanBankaccount").getMePaymentmeanBankaccount = null as any;
export const getMePaymentmeanBankaccountOutput: typeof import("./getMePaymentmeanBankaccount").getMePaymentmeanBankaccountOutput = null as any;
utilities.lazyLoad(exports, ["getMePaymentmeanBankaccount","getMePaymentmeanBankaccountOutput"], () => require("./getMePaymentmeanBankaccount"));

export { GetMePaymentmeanCreditcardArgs, GetMePaymentmeanCreditcardResult, GetMePaymentmeanCreditcardOutputArgs } from "./getMePaymentmeanCreditcard";
export const getMePaymentmeanCreditcard: typeof import("./getMePaymentmeanCreditcard").getMePaymentmeanCreditcard = null as any;
export const getMePaymentmeanCreditcardOutput: typeof import("./getMePaymentmeanCreditcard").getMePaymentmeanCreditcardOutput = null as any;
utilities.lazyLoad(exports, ["getMePaymentmeanCreditcard","getMePaymentmeanCreditcardOutput"], () => require("./getMePaymentmeanCreditcard"));

export { GetOrderCartArgs, GetOrderCartResult, GetOrderCartOutputArgs } from "./getOrderCart";
export const getOrderCart: typeof import("./getOrderCart").getOrderCart = null as any;
export const getOrderCartOutput: typeof import("./getOrderCart").getOrderCartOutput = null as any;
utilities.lazyLoad(exports, ["getOrderCart","getOrderCartOutput"], () => require("./getOrderCart"));

export { GetOrderCartProductArgs, GetOrderCartProductResult, GetOrderCartProductOutputArgs } from "./getOrderCartProduct";
export const getOrderCartProduct: typeof import("./getOrderCartProduct").getOrderCartProduct = null as any;
export const getOrderCartProductOutput: typeof import("./getOrderCartProduct").getOrderCartProductOutput = null as any;
utilities.lazyLoad(exports, ["getOrderCartProduct","getOrderCartProductOutput"], () => require("./getOrderCartProduct"));

export { GetOrderCartProductOptionsArgs, GetOrderCartProductOptionsResult, GetOrderCartProductOptionsOutputArgs } from "./getOrderCartProductOptions";
export const getOrderCartProductOptions: typeof import("./getOrderCartProductOptions").getOrderCartProductOptions = null as any;
export const getOrderCartProductOptionsOutput: typeof import("./getOrderCartProductOptions").getOrderCartProductOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getOrderCartProductOptions","getOrderCartProductOptionsOutput"], () => require("./getOrderCartProductOptions"));

export { GetOrderCartProductOptionsPlanArgs, GetOrderCartProductOptionsPlanResult, GetOrderCartProductOptionsPlanOutputArgs } from "./getOrderCartProductOptionsPlan";
export const getOrderCartProductOptionsPlan: typeof import("./getOrderCartProductOptionsPlan").getOrderCartProductOptionsPlan = null as any;
export const getOrderCartProductOptionsPlanOutput: typeof import("./getOrderCartProductOptionsPlan").getOrderCartProductOptionsPlanOutput = null as any;
utilities.lazyLoad(exports, ["getOrderCartProductOptionsPlan","getOrderCartProductOptionsPlanOutput"], () => require("./getOrderCartProductOptionsPlan"));

export { GetOrderCartProductPlanArgs, GetOrderCartProductPlanResult, GetOrderCartProductPlanOutputArgs } from "./getOrderCartProductPlan";
export const getOrderCartProductPlan: typeof import("./getOrderCartProductPlan").getOrderCartProductPlan = null as any;
export const getOrderCartProductPlanOutput: typeof import("./getOrderCartProductPlan").getOrderCartProductPlanOutput = null as any;
utilities.lazyLoad(exports, ["getOrderCartProductPlan","getOrderCartProductPlanOutput"], () => require("./getOrderCartProductPlan"));

export { GetVpsArgs, GetVpsResult, GetVpsOutputArgs } from "./getVps";
export const getVps: typeof import("./getVps").getVps = null as any;
export const getVpsOutput: typeof import("./getVps").getVpsOutput = null as any;
utilities.lazyLoad(exports, ["getVps","getVpsOutput"], () => require("./getVps"));

export { GetVpssArgs, GetVpssResult, GetVpssOutputArgs } from "./getVpss";
export const getVpss: typeof import("./getVpss").getVpss = null as any;
export const getVpssOutput: typeof import("./getVpss").getVpssOutput = null as any;
utilities.lazyLoad(exports, ["getVpss","getVpssOutput"], () => require("./getVpss"));

export { GetVracksArgs, GetVracksResult, GetVracksOutputArgs } from "./getVracks";
export const getVracks: typeof import("./getVracks").getVracks = null as any;
export const getVracksOutput: typeof import("./getVracks").getVracksOutput = null as any;
utilities.lazyLoad(exports, ["getVracks","getVracksOutput"], () => require("./getVracks"));

export { HostingPrivatedatabaseArgs, HostingPrivatedatabaseState } from "./hostingPrivatedatabase";
export type HostingPrivatedatabase = import("./hostingPrivatedatabase").HostingPrivatedatabase;
export const HostingPrivatedatabase: typeof import("./hostingPrivatedatabase").HostingPrivatedatabase = null as any;
utilities.lazyLoad(exports, ["HostingPrivatedatabase"], () => require("./hostingPrivatedatabase"));

export { HostingPrivatedatabaseDatabaseArgs, HostingPrivatedatabaseDatabaseState } from "./hostingPrivatedatabaseDatabase";
export type HostingPrivatedatabaseDatabase = import("./hostingPrivatedatabaseDatabase").HostingPrivatedatabaseDatabase;
export const HostingPrivatedatabaseDatabase: typeof import("./hostingPrivatedatabaseDatabase").HostingPrivatedatabaseDatabase = null as any;
utilities.lazyLoad(exports, ["HostingPrivatedatabaseDatabase"], () => require("./hostingPrivatedatabaseDatabase"));

export { HostingPrivatedatabaseUserArgs, HostingPrivatedatabaseUserState } from "./hostingPrivatedatabaseUser";
export type HostingPrivatedatabaseUser = import("./hostingPrivatedatabaseUser").HostingPrivatedatabaseUser;
export const HostingPrivatedatabaseUser: typeof import("./hostingPrivatedatabaseUser").HostingPrivatedatabaseUser = null as any;
utilities.lazyLoad(exports, ["HostingPrivatedatabaseUser"], () => require("./hostingPrivatedatabaseUser"));

export { HostingPrivatedatabaseUserGrantArgs, HostingPrivatedatabaseUserGrantState } from "./hostingPrivatedatabaseUserGrant";
export type HostingPrivatedatabaseUserGrant = import("./hostingPrivatedatabaseUserGrant").HostingPrivatedatabaseUserGrant;
export const HostingPrivatedatabaseUserGrant: typeof import("./hostingPrivatedatabaseUserGrant").HostingPrivatedatabaseUserGrant = null as any;
utilities.lazyLoad(exports, ["HostingPrivatedatabaseUserGrant"], () => require("./hostingPrivatedatabaseUserGrant"));

export { HostingPrivatedatabaseWhitelistArgs, HostingPrivatedatabaseWhitelistState } from "./hostingPrivatedatabaseWhitelist";
export type HostingPrivatedatabaseWhitelist = import("./hostingPrivatedatabaseWhitelist").HostingPrivatedatabaseWhitelist;
export const HostingPrivatedatabaseWhitelist: typeof import("./hostingPrivatedatabaseWhitelist").HostingPrivatedatabaseWhitelist = null as any;
utilities.lazyLoad(exports, ["HostingPrivatedatabaseWhitelist"], () => require("./hostingPrivatedatabaseWhitelist"));

export { IamPermissionsGroupArgs, IamPermissionsGroupState } from "./iamPermissionsGroup";
export type IamPermissionsGroup = import("./iamPermissionsGroup").IamPermissionsGroup;
export const IamPermissionsGroup: typeof import("./iamPermissionsGroup").IamPermissionsGroup = null as any;
utilities.lazyLoad(exports, ["IamPermissionsGroup"], () => require("./iamPermissionsGroup"));

export { IamPolicyArgs, IamPolicyState } from "./iamPolicy";
export type IamPolicy = import("./iamPolicy").IamPolicy;
export const IamPolicy: typeof import("./iamPolicy").IamPolicy = null as any;
utilities.lazyLoad(exports, ["IamPolicy"], () => require("./iamPolicy"));

export { IamResourceGroupArgs, IamResourceGroupState } from "./iamResourceGroup";
export type IamResourceGroup = import("./iamResourceGroup").IamResourceGroup;
export const IamResourceGroup: typeof import("./iamResourceGroup").IamResourceGroup = null as any;
utilities.lazyLoad(exports, ["IamResourceGroup"], () => require("./iamResourceGroup"));

export { IpFirewallArgs, IpFirewallState } from "./ipFirewall";
export type IpFirewall = import("./ipFirewall").IpFirewall;
export const IpFirewall: typeof import("./ipFirewall").IpFirewall = null as any;
utilities.lazyLoad(exports, ["IpFirewall"], () => require("./ipFirewall"));

export { IpFirewallRuleArgs, IpFirewallRuleState } from "./ipFirewallRule";
export type IpFirewallRule = import("./ipFirewallRule").IpFirewallRule;
export const IpFirewallRule: typeof import("./ipFirewallRule").IpFirewallRule = null as any;
utilities.lazyLoad(exports, ["IpFirewallRule"], () => require("./ipFirewallRule"));

export { IpMitigationArgs, IpMitigationState } from "./ipMitigation";
export type IpMitigation = import("./ipMitigation").IpMitigation;
export const IpMitigation: typeof import("./ipMitigation").IpMitigation = null as any;
utilities.lazyLoad(exports, ["IpMitigation"], () => require("./ipMitigation"));

export { IpMoveArgs, IpMoveState } from "./ipMove";
export type IpMove = import("./ipMove").IpMove;
export const IpMove: typeof import("./ipMove").IpMove = null as any;
utilities.lazyLoad(exports, ["IpMove"], () => require("./ipMove"));

export { IpReverseArgs, IpReverseState } from "./ipReverse";
export type IpReverse = import("./ipReverse").IpReverse;
export const IpReverse: typeof import("./ipReverse").IpReverse = null as any;
utilities.lazyLoad(exports, ["IpReverse"], () => require("./ipReverse"));

export { IpServiceArgs, IpServiceState } from "./ipService";
export type IpService = import("./ipService").IpService;
export const IpService: typeof import("./ipService").IpService = null as any;
utilities.lazyLoad(exports, ["IpService"], () => require("./ipService"));

export { IploadbalancingArgs, IploadbalancingState } from "./iploadbalancing";
export type Iploadbalancing = import("./iploadbalancing").Iploadbalancing;
export const Iploadbalancing: typeof import("./iploadbalancing").Iploadbalancing = null as any;
utilities.lazyLoad(exports, ["Iploadbalancing"], () => require("./iploadbalancing"));

export { IploadbalancingHttpFarmArgs, IploadbalancingHttpFarmState } from "./iploadbalancingHttpFarm";
export type IploadbalancingHttpFarm = import("./iploadbalancingHttpFarm").IploadbalancingHttpFarm;
export const IploadbalancingHttpFarm: typeof import("./iploadbalancingHttpFarm").IploadbalancingHttpFarm = null as any;
utilities.lazyLoad(exports, ["IploadbalancingHttpFarm"], () => require("./iploadbalancingHttpFarm"));

export { IploadbalancingHttpFarmServerArgs, IploadbalancingHttpFarmServerState } from "./iploadbalancingHttpFarmServer";
export type IploadbalancingHttpFarmServer = import("./iploadbalancingHttpFarmServer").IploadbalancingHttpFarmServer;
export const IploadbalancingHttpFarmServer: typeof import("./iploadbalancingHttpFarmServer").IploadbalancingHttpFarmServer = null as any;
utilities.lazyLoad(exports, ["IploadbalancingHttpFarmServer"], () => require("./iploadbalancingHttpFarmServer"));

export { IploadbalancingHttpFrontendArgs, IploadbalancingHttpFrontendState } from "./iploadbalancingHttpFrontend";
export type IploadbalancingHttpFrontend = import("./iploadbalancingHttpFrontend").IploadbalancingHttpFrontend;
export const IploadbalancingHttpFrontend: typeof import("./iploadbalancingHttpFrontend").IploadbalancingHttpFrontend = null as any;
utilities.lazyLoad(exports, ["IploadbalancingHttpFrontend"], () => require("./iploadbalancingHttpFrontend"));

export { IploadbalancingHttpRouteArgs, IploadbalancingHttpRouteState } from "./iploadbalancingHttpRoute";
export type IploadbalancingHttpRoute = import("./iploadbalancingHttpRoute").IploadbalancingHttpRoute;
export const IploadbalancingHttpRoute: typeof import("./iploadbalancingHttpRoute").IploadbalancingHttpRoute = null as any;
utilities.lazyLoad(exports, ["IploadbalancingHttpRoute"], () => require("./iploadbalancingHttpRoute"));

export { IploadbalancingHttpRouteRuleArgs, IploadbalancingHttpRouteRuleState } from "./iploadbalancingHttpRouteRule";
export type IploadbalancingHttpRouteRule = import("./iploadbalancingHttpRouteRule").IploadbalancingHttpRouteRule;
export const IploadbalancingHttpRouteRule: typeof import("./iploadbalancingHttpRouteRule").IploadbalancingHttpRouteRule = null as any;
utilities.lazyLoad(exports, ["IploadbalancingHttpRouteRule"], () => require("./iploadbalancingHttpRouteRule"));

export { IploadbalancingRefreshArgs, IploadbalancingRefreshState } from "./iploadbalancingRefresh";
export type IploadbalancingRefresh = import("./iploadbalancingRefresh").IploadbalancingRefresh;
export const IploadbalancingRefresh: typeof import("./iploadbalancingRefresh").IploadbalancingRefresh = null as any;
utilities.lazyLoad(exports, ["IploadbalancingRefresh"], () => require("./iploadbalancingRefresh"));

export { IploadbalancingTcpFarmArgs, IploadbalancingTcpFarmState } from "./iploadbalancingTcpFarm";
export type IploadbalancingTcpFarm = import("./iploadbalancingTcpFarm").IploadbalancingTcpFarm;
export const IploadbalancingTcpFarm: typeof import("./iploadbalancingTcpFarm").IploadbalancingTcpFarm = null as any;
utilities.lazyLoad(exports, ["IploadbalancingTcpFarm"], () => require("./iploadbalancingTcpFarm"));

export { IploadbalancingTcpFarmServerArgs, IploadbalancingTcpFarmServerState } from "./iploadbalancingTcpFarmServer";
export type IploadbalancingTcpFarmServer = import("./iploadbalancingTcpFarmServer").IploadbalancingTcpFarmServer;
export const IploadbalancingTcpFarmServer: typeof import("./iploadbalancingTcpFarmServer").IploadbalancingTcpFarmServer = null as any;
utilities.lazyLoad(exports, ["IploadbalancingTcpFarmServer"], () => require("./iploadbalancingTcpFarmServer"));

export { IploadbalancingTcpFrontendArgs, IploadbalancingTcpFrontendState } from "./iploadbalancingTcpFrontend";
export type IploadbalancingTcpFrontend = import("./iploadbalancingTcpFrontend").IploadbalancingTcpFrontend;
export const IploadbalancingTcpFrontend: typeof import("./iploadbalancingTcpFrontend").IploadbalancingTcpFrontend = null as any;
utilities.lazyLoad(exports, ["IploadbalancingTcpFrontend"], () => require("./iploadbalancingTcpFrontend"));

export { IploadbalancingTcpRouteArgs, IploadbalancingTcpRouteState } from "./iploadbalancingTcpRoute";
export type IploadbalancingTcpRoute = import("./iploadbalancingTcpRoute").IploadbalancingTcpRoute;
export const IploadbalancingTcpRoute: typeof import("./iploadbalancingTcpRoute").IploadbalancingTcpRoute = null as any;
utilities.lazyLoad(exports, ["IploadbalancingTcpRoute"], () => require("./iploadbalancingTcpRoute"));

export { IploadbalancingTcpRouteRuleArgs, IploadbalancingTcpRouteRuleState } from "./iploadbalancingTcpRouteRule";
export type IploadbalancingTcpRouteRule = import("./iploadbalancingTcpRouteRule").IploadbalancingTcpRouteRule;
export const IploadbalancingTcpRouteRule: typeof import("./iploadbalancingTcpRouteRule").IploadbalancingTcpRouteRule = null as any;
utilities.lazyLoad(exports, ["IploadbalancingTcpRouteRule"], () => require("./iploadbalancingTcpRouteRule"));

export { IploadbalancingUdpFrontendArgs, IploadbalancingUdpFrontendState } from "./iploadbalancingUdpFrontend";
export type IploadbalancingUdpFrontend = import("./iploadbalancingUdpFrontend").IploadbalancingUdpFrontend;
export const IploadbalancingUdpFrontend: typeof import("./iploadbalancingUdpFrontend").IploadbalancingUdpFrontend = null as any;
utilities.lazyLoad(exports, ["IploadbalancingUdpFrontend"], () => require("./iploadbalancingUdpFrontend"));

export { IploadbalancingVrackNetworkArgs, IploadbalancingVrackNetworkState } from "./iploadbalancingVrackNetwork";
export type IploadbalancingVrackNetwork = import("./iploadbalancingVrackNetwork").IploadbalancingVrackNetwork;
export const IploadbalancingVrackNetwork: typeof import("./iploadbalancingVrackNetwork").IploadbalancingVrackNetwork = null as any;
utilities.lazyLoad(exports, ["IploadbalancingVrackNetwork"], () => require("./iploadbalancingVrackNetwork"));

export { MeApiOauth2ClientArgs, MeApiOauth2ClientState } from "./meApiOauth2Client";
export type MeApiOauth2Client = import("./meApiOauth2Client").MeApiOauth2Client;
export const MeApiOauth2Client: typeof import("./meApiOauth2Client").MeApiOauth2Client = null as any;
utilities.lazyLoad(exports, ["MeApiOauth2Client"], () => require("./meApiOauth2Client"));

export { MeIdentityGroupArgs, MeIdentityGroupState } from "./meIdentityGroup";
export type MeIdentityGroup = import("./meIdentityGroup").MeIdentityGroup;
export const MeIdentityGroup: typeof import("./meIdentityGroup").MeIdentityGroup = null as any;
utilities.lazyLoad(exports, ["MeIdentityGroup"], () => require("./meIdentityGroup"));

export { MeIdentityUserArgs, MeIdentityUserState } from "./meIdentityUser";
export type MeIdentityUser = import("./meIdentityUser").MeIdentityUser;
export const MeIdentityUser: typeof import("./meIdentityUser").MeIdentityUser = null as any;
utilities.lazyLoad(exports, ["MeIdentityUser"], () => require("./meIdentityUser"));

export { MeInstallationTemplateArgs, MeInstallationTemplateState } from "./meInstallationTemplate";
export type MeInstallationTemplate = import("./meInstallationTemplate").MeInstallationTemplate;
export const MeInstallationTemplate: typeof import("./meInstallationTemplate").MeInstallationTemplate = null as any;
utilities.lazyLoad(exports, ["MeInstallationTemplate"], () => require("./meInstallationTemplate"));

export { MeInstallationTemplatePartitionSchemeArgs, MeInstallationTemplatePartitionSchemeState } from "./meInstallationTemplatePartitionScheme";
export type MeInstallationTemplatePartitionScheme = import("./meInstallationTemplatePartitionScheme").MeInstallationTemplatePartitionScheme;
export const MeInstallationTemplatePartitionScheme: typeof import("./meInstallationTemplatePartitionScheme").MeInstallationTemplatePartitionScheme = null as any;
utilities.lazyLoad(exports, ["MeInstallationTemplatePartitionScheme"], () => require("./meInstallationTemplatePartitionScheme"));

export { MeInstallationTemplatePartitionSchemeHardwareRaidArgs, MeInstallationTemplatePartitionSchemeHardwareRaidState } from "./meInstallationTemplatePartitionSchemeHardwareRaid";
export type MeInstallationTemplatePartitionSchemeHardwareRaid = import("./meInstallationTemplatePartitionSchemeHardwareRaid").MeInstallationTemplatePartitionSchemeHardwareRaid;
export const MeInstallationTemplatePartitionSchemeHardwareRaid: typeof import("./meInstallationTemplatePartitionSchemeHardwareRaid").MeInstallationTemplatePartitionSchemeHardwareRaid = null as any;
utilities.lazyLoad(exports, ["MeInstallationTemplatePartitionSchemeHardwareRaid"], () => require("./meInstallationTemplatePartitionSchemeHardwareRaid"));

export { MeInstallationTemplatePartitionSchemePartitionArgs, MeInstallationTemplatePartitionSchemePartitionState } from "./meInstallationTemplatePartitionSchemePartition";
export type MeInstallationTemplatePartitionSchemePartition = import("./meInstallationTemplatePartitionSchemePartition").MeInstallationTemplatePartitionSchemePartition;
export const MeInstallationTemplatePartitionSchemePartition: typeof import("./meInstallationTemplatePartitionSchemePartition").MeInstallationTemplatePartitionSchemePartition = null as any;
utilities.lazyLoad(exports, ["MeInstallationTemplatePartitionSchemePartition"], () => require("./meInstallationTemplatePartitionSchemePartition"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { VpsArgs, VpsState } from "./vps";
export type Vps = import("./vps").Vps;
export const Vps: typeof import("./vps").Vps = null as any;
utilities.lazyLoad(exports, ["Vps"], () => require("./vps"));

export { VrackArgs, VrackState } from "./vrack";
export type Vrack = import("./vrack").Vrack;
export const Vrack: typeof import("./vrack").Vrack = null as any;
utilities.lazyLoad(exports, ["Vrack"], () => require("./vrack"));

export { VrackCloudprojectArgs, VrackCloudprojectState } from "./vrackCloudproject";
export type VrackCloudproject = import("./vrackCloudproject").VrackCloudproject;
export const VrackCloudproject: typeof import("./vrackCloudproject").VrackCloudproject = null as any;
utilities.lazyLoad(exports, ["VrackCloudproject"], () => require("./vrackCloudproject"));

export { VrackDedicatedServerArgs, VrackDedicatedServerState } from "./vrackDedicatedServer";
export type VrackDedicatedServer = import("./vrackDedicatedServer").VrackDedicatedServer;
export const VrackDedicatedServer: typeof import("./vrackDedicatedServer").VrackDedicatedServer = null as any;
utilities.lazyLoad(exports, ["VrackDedicatedServer"], () => require("./vrackDedicatedServer"));

export { VrackDedicatedServerInterfaceArgs, VrackDedicatedServerInterfaceState } from "./vrackDedicatedServerInterface";
export type VrackDedicatedServerInterface = import("./vrackDedicatedServerInterface").VrackDedicatedServerInterface;
export const VrackDedicatedServerInterface: typeof import("./vrackDedicatedServerInterface").VrackDedicatedServerInterface = null as any;
utilities.lazyLoad(exports, ["VrackDedicatedServerInterface"], () => require("./vrackDedicatedServerInterface"));

export { VrackIpArgs, VrackIpState } from "./vrackIp";
export type VrackIp = import("./vrackIp").VrackIp;
export const VrackIp: typeof import("./vrackIp").VrackIp = null as any;
utilities.lazyLoad(exports, ["VrackIp"], () => require("./vrackIp"));

export { VrackIploadbalancingArgs, VrackIploadbalancingState } from "./vrackIploadbalancing";
export type VrackIploadbalancing = import("./vrackIploadbalancing").VrackIploadbalancing;
export const VrackIploadbalancing: typeof import("./vrackIploadbalancing").VrackIploadbalancing = null as any;
utilities.lazyLoad(exports, ["VrackIploadbalancing"], () => require("./vrackIploadbalancing"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:index/cloudProject:CloudProject":
                return new CloudProject(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectAlerting:CloudProjectAlerting":
                return new CloudProjectAlerting(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectContainerregistry:CloudProjectContainerregistry":
                return new CloudProjectContainerregistry(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectContainerregistryIpRestrictionsManagement:CloudProjectContainerregistryIpRestrictionsManagement":
                return new CloudProjectContainerregistryIpRestrictionsManagement(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectContainerregistryIpRestrictionsRegistry:CloudProjectContainerregistryIpRestrictionsRegistry":
                return new CloudProjectContainerregistryIpRestrictionsRegistry(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectContainerregistryOidc:CloudProjectContainerregistryOidc":
                return new CloudProjectContainerregistryOidc(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectContainerregistryUser:CloudProjectContainerregistryUser":
                return new CloudProjectContainerregistryUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabase:CloudProjectDatabase":
                return new CloudProjectDatabase(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseDatabase:CloudProjectDatabaseDatabase":
                return new CloudProjectDatabaseDatabase(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseIntegration:CloudProjectDatabaseIntegration":
                return new CloudProjectDatabaseIntegration(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseIpRestriction:CloudProjectDatabaseIpRestriction":
                return new CloudProjectDatabaseIpRestriction(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseKafkaAcl:CloudProjectDatabaseKafkaAcl":
                return new CloudProjectDatabaseKafkaAcl(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseKafkaSchemaregistryacl:CloudProjectDatabaseKafkaSchemaregistryacl":
                return new CloudProjectDatabaseKafkaSchemaregistryacl(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseKafkaTopic:CloudProjectDatabaseKafkaTopic":
                return new CloudProjectDatabaseKafkaTopic(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseLogSubscription:CloudProjectDatabaseLogSubscription":
                return new CloudProjectDatabaseLogSubscription(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseM3dbNamespace:CloudProjectDatabaseM3dbNamespace":
                return new CloudProjectDatabaseM3dbNamespace(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseM3dbUser:CloudProjectDatabaseM3dbUser":
                return new CloudProjectDatabaseM3dbUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseMongodbUser:CloudProjectDatabaseMongodbUser":
                return new CloudProjectDatabaseMongodbUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseOpensearchPattern:CloudProjectDatabaseOpensearchPattern":
                return new CloudProjectDatabaseOpensearchPattern(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseOpensearchUser:CloudProjectDatabaseOpensearchUser":
                return new CloudProjectDatabaseOpensearchUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabasePostgresqlConnectionPool:CloudProjectDatabasePostgresqlConnectionPool":
                return new CloudProjectDatabasePostgresqlConnectionPool(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabasePostgresqlUser:CloudProjectDatabasePostgresqlUser":
                return new CloudProjectDatabasePostgresqlUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseRedisUser:CloudProjectDatabaseRedisUser":
                return new CloudProjectDatabaseRedisUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseUser:CloudProjectDatabaseUser":
                return new CloudProjectDatabaseUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectFailoverIpAttach:CloudProjectFailoverIpAttach":
                return new CloudProjectFailoverIpAttach(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectGateway:CloudProjectGateway":
                return new CloudProjectGateway(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectGatewayInterface:CloudProjectGatewayInterface":
                return new CloudProjectGatewayInterface(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectKube:CloudProjectKube":
                return new CloudProjectKube(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectKubeIprestrictions:CloudProjectKubeIprestrictions":
                return new CloudProjectKubeIprestrictions(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectKubeNodepool:CloudProjectKubeNodepool":
                return new CloudProjectKubeNodepool(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectKubeOidc:CloudProjectKubeOidc":
                return new CloudProjectKubeOidc(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectNetworkPrivate:CloudProjectNetworkPrivate":
                return new CloudProjectNetworkPrivate(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectNetworkPrivateSubnet:CloudProjectNetworkPrivateSubnet":
                return new CloudProjectNetworkPrivateSubnet(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectRegionLoadbalancerLogSubscription:CloudProjectRegionLoadbalancerLogSubscription":
                return new CloudProjectRegionLoadbalancerLogSubscription(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectRegionStoragePresign:CloudProjectRegionStoragePresign":
                return new CloudProjectRegionStoragePresign(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectUser:CloudProjectUser":
                return new CloudProjectUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectUserS3Credential:CloudProjectUserS3Credential":
                return new CloudProjectUserS3Credential(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectUserS3Policy:CloudProjectUserS3Policy":
                return new CloudProjectUserS3Policy(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectWorkflowBackup:CloudProjectWorkflowBackup":
                return new CloudProjectWorkflowBackup(name, <any>undefined, { urn })
            case "ovh:index/dbaasLogsCluster:DbaasLogsCluster":
                return new DbaasLogsCluster(name, <any>undefined, { urn })
            case "ovh:index/dbaasLogsInput:DbaasLogsInput":
                return new DbaasLogsInput(name, <any>undefined, { urn })
            case "ovh:index/dbaasLogsOutputGraylogStream:DbaasLogsOutputGraylogStream":
                return new DbaasLogsOutputGraylogStream(name, <any>undefined, { urn })
            case "ovh:index/dbaasLogsToken:DbaasLogsToken":
                return new DbaasLogsToken(name, <any>undefined, { urn })
            case "ovh:index/dedicatedCephAcl:DedicatedCephAcl":
                return new DedicatedCephAcl(name, <any>undefined, { urn })
            case "ovh:index/dedicatedNashaPartition:DedicatedNashaPartition":
                return new DedicatedNashaPartition(name, <any>undefined, { urn })
            case "ovh:index/dedicatedNashaPartitionAccess:DedicatedNashaPartitionAccess":
                return new DedicatedNashaPartitionAccess(name, <any>undefined, { urn })
            case "ovh:index/dedicatedNashaPartitionSnapshot:DedicatedNashaPartitionSnapshot":
                return new DedicatedNashaPartitionSnapshot(name, <any>undefined, { urn })
            case "ovh:index/dedicatedServerInstallTask:DedicatedServerInstallTask":
                return new DedicatedServerInstallTask(name, <any>undefined, { urn })
            case "ovh:index/dedicatedServerNetworking:DedicatedServerNetworking":
                return new DedicatedServerNetworking(name, <any>undefined, { urn })
            case "ovh:index/dedicatedServerRebootTask:DedicatedServerRebootTask":
                return new DedicatedServerRebootTask(name, <any>undefined, { urn })
            case "ovh:index/dedicatedServerUpdate:DedicatedServerUpdate":
                return new DedicatedServerUpdate(name, <any>undefined, { urn })
            case "ovh:index/domainZone:DomainZone":
                return new DomainZone(name, <any>undefined, { urn })
            case "ovh:index/domainZoneDnssec:DomainZoneDnssec":
                return new DomainZoneDnssec(name, <any>undefined, { urn })
            case "ovh:index/domainZoneRecord:DomainZoneRecord":
                return new DomainZoneRecord(name, <any>undefined, { urn })
            case "ovh:index/domainZoneRedirection:DomainZoneRedirection":
                return new DomainZoneRedirection(name, <any>undefined, { urn })
            case "ovh:index/hostingPrivatedatabase:HostingPrivatedatabase":
                return new HostingPrivatedatabase(name, <any>undefined, { urn })
            case "ovh:index/hostingPrivatedatabaseDatabase:HostingPrivatedatabaseDatabase":
                return new HostingPrivatedatabaseDatabase(name, <any>undefined, { urn })
            case "ovh:index/hostingPrivatedatabaseUser:HostingPrivatedatabaseUser":
                return new HostingPrivatedatabaseUser(name, <any>undefined, { urn })
            case "ovh:index/hostingPrivatedatabaseUserGrant:HostingPrivatedatabaseUserGrant":
                return new HostingPrivatedatabaseUserGrant(name, <any>undefined, { urn })
            case "ovh:index/hostingPrivatedatabaseWhitelist:HostingPrivatedatabaseWhitelist":
                return new HostingPrivatedatabaseWhitelist(name, <any>undefined, { urn })
            case "ovh:index/iamPermissionsGroup:IamPermissionsGroup":
                return new IamPermissionsGroup(name, <any>undefined, { urn })
            case "ovh:index/iamPolicy:IamPolicy":
                return new IamPolicy(name, <any>undefined, { urn })
            case "ovh:index/iamResourceGroup:IamResourceGroup":
                return new IamResourceGroup(name, <any>undefined, { urn })
            case "ovh:index/ipFirewall:IpFirewall":
                return new IpFirewall(name, <any>undefined, { urn })
            case "ovh:index/ipFirewallRule:IpFirewallRule":
                return new IpFirewallRule(name, <any>undefined, { urn })
            case "ovh:index/ipMitigation:IpMitigation":
                return new IpMitigation(name, <any>undefined, { urn })
            case "ovh:index/ipMove:IpMove":
                return new IpMove(name, <any>undefined, { urn })
            case "ovh:index/ipReverse:IpReverse":
                return new IpReverse(name, <any>undefined, { urn })
            case "ovh:index/ipService:IpService":
                return new IpService(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancing:Iploadbalancing":
                return new Iploadbalancing(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingHttpFarm:IploadbalancingHttpFarm":
                return new IploadbalancingHttpFarm(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingHttpFarmServer:IploadbalancingHttpFarmServer":
                return new IploadbalancingHttpFarmServer(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingHttpFrontend:IploadbalancingHttpFrontend":
                return new IploadbalancingHttpFrontend(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingHttpRoute:IploadbalancingHttpRoute":
                return new IploadbalancingHttpRoute(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingHttpRouteRule:IploadbalancingHttpRouteRule":
                return new IploadbalancingHttpRouteRule(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingRefresh:IploadbalancingRefresh":
                return new IploadbalancingRefresh(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingTcpFarm:IploadbalancingTcpFarm":
                return new IploadbalancingTcpFarm(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingTcpFarmServer:IploadbalancingTcpFarmServer":
                return new IploadbalancingTcpFarmServer(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingTcpFrontend:IploadbalancingTcpFrontend":
                return new IploadbalancingTcpFrontend(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingTcpRoute:IploadbalancingTcpRoute":
                return new IploadbalancingTcpRoute(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingTcpRouteRule:IploadbalancingTcpRouteRule":
                return new IploadbalancingTcpRouteRule(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingUdpFrontend:IploadbalancingUdpFrontend":
                return new IploadbalancingUdpFrontend(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingVrackNetwork:IploadbalancingVrackNetwork":
                return new IploadbalancingVrackNetwork(name, <any>undefined, { urn })
            case "ovh:index/meApiOauth2Client:MeApiOauth2Client":
                return new MeApiOauth2Client(name, <any>undefined, { urn })
            case "ovh:index/meIdentityGroup:MeIdentityGroup":
                return new MeIdentityGroup(name, <any>undefined, { urn })
            case "ovh:index/meIdentityUser:MeIdentityUser":
                return new MeIdentityUser(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplate:MeInstallationTemplate":
                return new MeInstallationTemplate(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplatePartitionScheme:MeInstallationTemplatePartitionScheme":
                return new MeInstallationTemplatePartitionScheme(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid":
                return new MeInstallationTemplatePartitionSchemeHardwareRaid(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplatePartitionSchemePartition:MeInstallationTemplatePartitionSchemePartition":
                return new MeInstallationTemplatePartitionSchemePartition(name, <any>undefined, { urn })
            case "ovh:index/vps:Vps":
                return new Vps(name, <any>undefined, { urn })
            case "ovh:index/vrack:Vrack":
                return new Vrack(name, <any>undefined, { urn })
            case "ovh:index/vrackCloudproject:VrackCloudproject":
                return new VrackCloudproject(name, <any>undefined, { urn })
            case "ovh:index/vrackDedicatedServer:VrackDedicatedServer":
                return new VrackDedicatedServer(name, <any>undefined, { urn })
            case "ovh:index/vrackDedicatedServerInterface:VrackDedicatedServerInterface":
                return new VrackDedicatedServerInterface(name, <any>undefined, { urn })
            case "ovh:index/vrackIp:VrackIp":
                return new VrackIp(name, <any>undefined, { urn })
            case "ovh:index/vrackIploadbalancing:VrackIploadbalancing":
                return new VrackIploadbalancing(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "index/cloudProject", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectAlerting", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectContainerregistry", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectContainerregistryIpRestrictionsManagement", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectContainerregistryIpRestrictionsRegistry", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectContainerregistryOidc", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectContainerregistryUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabase", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseDatabase", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseIntegration", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseIpRestriction", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseKafkaAcl", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseKafkaSchemaregistryacl", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseKafkaTopic", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseLogSubscription", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseM3dbNamespace", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseM3dbUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseMongodbUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseOpensearchPattern", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseOpensearchUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabasePostgresqlConnectionPool", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabasePostgresqlUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseRedisUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectFailoverIpAttach", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectGateway", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectGatewayInterface", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectKube", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectKubeIprestrictions", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectKubeNodepool", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectKubeOidc", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectNetworkPrivate", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectNetworkPrivateSubnet", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectRegionLoadbalancerLogSubscription", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectRegionStoragePresign", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectUserS3Credential", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectUserS3Policy", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectWorkflowBackup", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dbaasLogsCluster", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dbaasLogsInput", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dbaasLogsOutputGraylogStream", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dbaasLogsToken", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedCephAcl", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedNashaPartition", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedNashaPartitionAccess", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedNashaPartitionSnapshot", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedServerInstallTask", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedServerNetworking", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedServerRebootTask", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedServerUpdate", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZone", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZoneDnssec", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZoneRecord", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZoneRedirection", _module)
pulumi.runtime.registerResourceModule("ovh", "index/hostingPrivatedatabase", _module)
pulumi.runtime.registerResourceModule("ovh", "index/hostingPrivatedatabaseDatabase", _module)
pulumi.runtime.registerResourceModule("ovh", "index/hostingPrivatedatabaseUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/hostingPrivatedatabaseUserGrant", _module)
pulumi.runtime.registerResourceModule("ovh", "index/hostingPrivatedatabaseWhitelist", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iamPermissionsGroup", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iamPolicy", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iamResourceGroup", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ipFirewall", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ipFirewallRule", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ipMitigation", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ipMove", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ipReverse", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ipService", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancing", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingHttpFarm", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingHttpFarmServer", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingHttpFrontend", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingHttpRoute", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingHttpRouteRule", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingRefresh", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingTcpFarm", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingTcpFarmServer", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingTcpFrontend", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingTcpRoute", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingTcpRouteRule", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingUdpFrontend", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingVrackNetwork", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meApiOauth2Client", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meIdentityGroup", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meIdentityUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplate", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplatePartitionScheme", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplatePartitionSchemeHardwareRaid", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplatePartitionSchemePartition", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vps", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrack", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackCloudproject", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackDedicatedServer", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackDedicatedServerInterface", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackIp", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackIploadbalancing", _module)
pulumi.runtime.registerResourcePackage("ovh", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ovh") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
