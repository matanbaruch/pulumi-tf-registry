// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApplicationGroup extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationGroupState, opts?: pulumi.CustomResourceOptions): ApplicationGroup {
        return new ApplicationGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/applicationGroup:ApplicationGroup';

    /**
     * Returns true if the given object is an instance of ApplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationGroup.__pulumiType;
    }

    /**
     * The path of the folder in which the application group is located.
     */
    public readonly applicationGroupFolderPath!: pulumi.Output<string | undefined>;
    /**
     * Delivery groups to associate with the application group.
     */
    public readonly deliveryGroups!: pulumi.Output<string[]>;
    /**
     * Description of the application group.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Users who can use this application group. > **Note** User must be in `Domain\UserOrGroupName` or `user@domain.com`
     * format
     */
    public readonly includedUsers!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the application group to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The tag to restrict the application group to.
     */
    public readonly restrictToTag!: pulumi.Output<string | undefined>;
    /**
     * The IDs of the scopes for the application group to be a part of.
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * A set of identifiers of tenants to associate with the application group.
     */
    public readonly tenants!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ApplicationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationGroupArgs | ApplicationGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationGroupState | undefined;
            resourceInputs["applicationGroupFolderPath"] = state ? state.applicationGroupFolderPath : undefined;
            resourceInputs["deliveryGroups"] = state ? state.deliveryGroups : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["includedUsers"] = state ? state.includedUsers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["restrictToTag"] = state ? state.restrictToTag : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["tenants"] = state ? state.tenants : undefined;
        } else {
            const args = argsOrState as ApplicationGroupArgs | undefined;
            if ((!args || args.deliveryGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliveryGroups'");
            }
            resourceInputs["applicationGroupFolderPath"] = args ? args.applicationGroupFolderPath : undefined;
            resourceInputs["deliveryGroups"] = args ? args.deliveryGroups : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["includedUsers"] = args ? args.includedUsers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["restrictToTag"] = args ? args.restrictToTag : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["tenants"] = args ? args.tenants : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationGroup resources.
 */
export interface ApplicationGroupState {
    /**
     * The path of the folder in which the application group is located.
     */
    applicationGroupFolderPath?: pulumi.Input<string>;
    /**
     * Delivery groups to associate with the application group.
     */
    deliveryGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the application group.
     */
    description?: pulumi.Input<string>;
    /**
     * Users who can use this application group. > **Note** User must be in `Domain\UserOrGroupName` or `user@domain.com`
     * format
     */
    includedUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the application group to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The tag to restrict the application group to.
     */
    restrictToTag?: pulumi.Input<string>;
    /**
     * The IDs of the scopes for the application group to be a part of.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of identifiers of tenants to associate with the application group.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ApplicationGroup resource.
 */
export interface ApplicationGroupArgs {
    /**
     * The path of the folder in which the application group is located.
     */
    applicationGroupFolderPath?: pulumi.Input<string>;
    /**
     * Delivery groups to associate with the application group.
     */
    deliveryGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the application group.
     */
    description?: pulumi.Input<string>;
    /**
     * Users who can use this application group. > **Note** User must be in `Domain\UserOrGroupName` or `user@domain.com`
     * format
     */
    includedUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the application group to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The tag to restrict the application group to.
     */
    restrictToTag?: pulumi.Input<string>;
    /**
     * The IDs of the scopes for the application group to be a part of.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of identifiers of tenants to associate with the application group.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
}
