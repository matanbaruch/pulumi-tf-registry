// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StfStoreService extends pulumi.CustomResource {
    /**
     * Get an existing StfStoreService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StfStoreServiceState, opts?: pulumi.CustomResourceOptions): StfStoreService {
        return new StfStoreService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/stfStoreService:StfStoreService';

    /**
     * Returns true if the given object is an instance of StfStoreService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StfStoreService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StfStoreService.__pulumiType;
    }

    /**
     * Whether the Store is anonymous. Anonymous Store not requiring authentication.
     */
    public readonly anonymous!: pulumi.Output<boolean | undefined>;
    /**
     * The Virtual Path of the StoreFront Authentication Service to use for authenticating users.
     */
    public readonly authenticationServiceVirtualPath!: pulumi.Output<string | undefined>;
    /**
     * Enumeration options for the Store
     */
    public readonly enumerationOptions!: pulumi.Output<outputs.StfStoreServiceEnumerationOptions | undefined>;
    /**
     * Store farm configuration settings for the Store.
     */
    public readonly farmSettings!: pulumi.Output<outputs.StfStoreServiceFarmSettings | undefined>;
    /**
     * A list of StoreFront Controller.
     */
    public readonly farms!: pulumi.Output<outputs.StfStoreServiceFarm[]>;
    /**
     * The friendly name of the Store
     */
    public readonly friendlyName!: pulumi.Output<string>;
    /**
     * Launch options for the Store
     */
    public readonly launchOptions!: pulumi.Output<outputs.StfStoreServiceLaunchOptions | undefined>;
    /**
     * Whether the Store is load balanced.
     */
    public readonly loadBalance!: pulumi.Output<boolean | undefined>;
    /**
     * StoreFront PNA (Program Neighborhood Agent) state of the Store
     */
    public readonly pna!: pulumi.Output<outputs.StfStoreServicePna | undefined>;
    /**
     * Roaming account settings for the Store
     */
    public readonly roamingAccount!: pulumi.Output<outputs.StfStoreServiceRoamingAccount | undefined>;
    /**
     * The IIS site id of the StoreFront storeservice. Defaults to 1.
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * The IIS VirtualPath at which the Store will be configured to be accessed by Receivers.
     */
    public readonly virtualPath!: pulumi.Output<string>;

    /**
     * Create a StfStoreService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StfStoreServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StfStoreServiceArgs | StfStoreServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StfStoreServiceState | undefined;
            resourceInputs["anonymous"] = state ? state.anonymous : undefined;
            resourceInputs["authenticationServiceVirtualPath"] = state ? state.authenticationServiceVirtualPath : undefined;
            resourceInputs["enumerationOptions"] = state ? state.enumerationOptions : undefined;
            resourceInputs["farmSettings"] = state ? state.farmSettings : undefined;
            resourceInputs["farms"] = state ? state.farms : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["launchOptions"] = state ? state.launchOptions : undefined;
            resourceInputs["loadBalance"] = state ? state.loadBalance : undefined;
            resourceInputs["pna"] = state ? state.pna : undefined;
            resourceInputs["roamingAccount"] = state ? state.roamingAccount : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["virtualPath"] = state ? state.virtualPath : undefined;
        } else {
            const args = argsOrState as StfStoreServiceArgs | undefined;
            if ((!args || args.farms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'farms'");
            }
            if ((!args || args.virtualPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualPath'");
            }
            resourceInputs["anonymous"] = args ? args.anonymous : undefined;
            resourceInputs["authenticationServiceVirtualPath"] = args ? args.authenticationServiceVirtualPath : undefined;
            resourceInputs["enumerationOptions"] = args ? args.enumerationOptions : undefined;
            resourceInputs["farmSettings"] = args ? args.farmSettings : undefined;
            resourceInputs["farms"] = args ? args.farms : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["launchOptions"] = args ? args.launchOptions : undefined;
            resourceInputs["loadBalance"] = args ? args.loadBalance : undefined;
            resourceInputs["pna"] = args ? args.pna : undefined;
            resourceInputs["roamingAccount"] = args ? args.roamingAccount : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["virtualPath"] = args ? args.virtualPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StfStoreService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StfStoreService resources.
 */
export interface StfStoreServiceState {
    /**
     * Whether the Store is anonymous. Anonymous Store not requiring authentication.
     */
    anonymous?: pulumi.Input<boolean>;
    /**
     * The Virtual Path of the StoreFront Authentication Service to use for authenticating users.
     */
    authenticationServiceVirtualPath?: pulumi.Input<string>;
    /**
     * Enumeration options for the Store
     */
    enumerationOptions?: pulumi.Input<inputs.StfStoreServiceEnumerationOptions>;
    /**
     * Store farm configuration settings for the Store.
     */
    farmSettings?: pulumi.Input<inputs.StfStoreServiceFarmSettings>;
    /**
     * A list of StoreFront Controller.
     */
    farms?: pulumi.Input<pulumi.Input<inputs.StfStoreServiceFarm>[]>;
    /**
     * The friendly name of the Store
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * Launch options for the Store
     */
    launchOptions?: pulumi.Input<inputs.StfStoreServiceLaunchOptions>;
    /**
     * Whether the Store is load balanced.
     */
    loadBalance?: pulumi.Input<boolean>;
    /**
     * StoreFront PNA (Program Neighborhood Agent) state of the Store
     */
    pna?: pulumi.Input<inputs.StfStoreServicePna>;
    /**
     * Roaming account settings for the Store
     */
    roamingAccount?: pulumi.Input<inputs.StfStoreServiceRoamingAccount>;
    /**
     * The IIS site id of the StoreFront storeservice. Defaults to 1.
     */
    siteId?: pulumi.Input<string>;
    /**
     * The IIS VirtualPath at which the Store will be configured to be accessed by Receivers.
     */
    virtualPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StfStoreService resource.
 */
export interface StfStoreServiceArgs {
    /**
     * Whether the Store is anonymous. Anonymous Store not requiring authentication.
     */
    anonymous?: pulumi.Input<boolean>;
    /**
     * The Virtual Path of the StoreFront Authentication Service to use for authenticating users.
     */
    authenticationServiceVirtualPath?: pulumi.Input<string>;
    /**
     * Enumeration options for the Store
     */
    enumerationOptions?: pulumi.Input<inputs.StfStoreServiceEnumerationOptions>;
    /**
     * Store farm configuration settings for the Store.
     */
    farmSettings?: pulumi.Input<inputs.StfStoreServiceFarmSettings>;
    /**
     * A list of StoreFront Controller.
     */
    farms: pulumi.Input<pulumi.Input<inputs.StfStoreServiceFarm>[]>;
    /**
     * The friendly name of the Store
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * Launch options for the Store
     */
    launchOptions?: pulumi.Input<inputs.StfStoreServiceLaunchOptions>;
    /**
     * Whether the Store is load balanced.
     */
    loadBalance?: pulumi.Input<boolean>;
    /**
     * StoreFront PNA (Program Neighborhood Agent) state of the Store
     */
    pna?: pulumi.Input<inputs.StfStoreServicePna>;
    /**
     * Roaming account settings for the Store
     */
    roamingAccount?: pulumi.Input<inputs.StfStoreServiceRoamingAccount>;
    /**
     * The IIS site id of the StoreFront storeservice. Defaults to 1.
     */
    siteId?: pulumi.Input<string>;
    /**
     * The IIS VirtualPath at which the Store will be configured to be accessed by Receivers.
     */
    virtualPath: pulumi.Input<string>;
}
