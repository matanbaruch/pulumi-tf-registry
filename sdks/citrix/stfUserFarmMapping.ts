// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StfUserFarmMapping extends pulumi.CustomResource {
    /**
     * Get an existing StfUserFarmMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StfUserFarmMappingState, opts?: pulumi.CustomResourceOptions): StfUserFarmMapping {
        return new StfUserFarmMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/stfUserFarmMapping:StfUserFarmMapping';

    /**
     * Returns true if the given object is an instance of StfUserFarmMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StfUserFarmMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StfUserFarmMapping.__pulumiType;
    }

    /**
     * Configurations of the EquivalentFarmSets that will be assigned to the UserFarmMapping.
     */
    public readonly equivalentFarmSets!: pulumi.Output<outputs.StfUserFarmMappingEquivalentFarmSet[]>;
    /**
     * The Windows groups to which the UserFarmMapping will apply. Not specifying this field will assign all users to the
     * UserFarmMapping.
     */
    public readonly groupMembers!: pulumi.Output<outputs.StfUserFarmMappingGroupMember[] | undefined>;
    /**
     * The unique name used to identify the UserFarmMapping.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The IIS VirtualPath at which the Store is configured to be accessed by Receivers.
     */
    public readonly storeVirtualPath!: pulumi.Output<string>;

    /**
     * Create a StfUserFarmMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StfUserFarmMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StfUserFarmMappingArgs | StfUserFarmMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StfUserFarmMappingState | undefined;
            resourceInputs["equivalentFarmSets"] = state ? state.equivalentFarmSets : undefined;
            resourceInputs["groupMembers"] = state ? state.groupMembers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["storeVirtualPath"] = state ? state.storeVirtualPath : undefined;
        } else {
            const args = argsOrState as StfUserFarmMappingArgs | undefined;
            if ((!args || args.equivalentFarmSets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'equivalentFarmSets'");
            }
            if ((!args || args.storeVirtualPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storeVirtualPath'");
            }
            resourceInputs["equivalentFarmSets"] = args ? args.equivalentFarmSets : undefined;
            resourceInputs["groupMembers"] = args ? args.groupMembers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["storeVirtualPath"] = args ? args.storeVirtualPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StfUserFarmMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StfUserFarmMapping resources.
 */
export interface StfUserFarmMappingState {
    /**
     * Configurations of the EquivalentFarmSets that will be assigned to the UserFarmMapping.
     */
    equivalentFarmSets?: pulumi.Input<pulumi.Input<inputs.StfUserFarmMappingEquivalentFarmSet>[]>;
    /**
     * The Windows groups to which the UserFarmMapping will apply. Not specifying this field will assign all users to the
     * UserFarmMapping.
     */
    groupMembers?: pulumi.Input<pulumi.Input<inputs.StfUserFarmMappingGroupMember>[]>;
    /**
     * The unique name used to identify the UserFarmMapping.
     */
    name?: pulumi.Input<string>;
    /**
     * The IIS VirtualPath at which the Store is configured to be accessed by Receivers.
     */
    storeVirtualPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StfUserFarmMapping resource.
 */
export interface StfUserFarmMappingArgs {
    /**
     * Configurations of the EquivalentFarmSets that will be assigned to the UserFarmMapping.
     */
    equivalentFarmSets: pulumi.Input<pulumi.Input<inputs.StfUserFarmMappingEquivalentFarmSet>[]>;
    /**
     * The Windows groups to which the UserFarmMapping will apply. Not specifying this field will assign all users to the
     * UserFarmMapping.
     */
    groupMembers?: pulumi.Input<pulumi.Input<inputs.StfUserFarmMappingGroupMember>[]>;
    /**
     * The unique name used to identify the UserFarmMapping.
     */
    name?: pulumi.Input<string>;
    /**
     * The IIS VirtualPath at which the Store is configured to be accessed by Receivers.
     */
    storeVirtualPath: pulumi.Input<string>;
}
