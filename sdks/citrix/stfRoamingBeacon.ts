// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StfRoamingBeacon extends pulumi.CustomResource {
    /**
     * Get an existing StfRoamingBeacon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StfRoamingBeaconState, opts?: pulumi.CustomResourceOptions): StfRoamingBeacon {
        return new StfRoamingBeacon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/stfRoamingBeacon:StfRoamingBeacon';

    /**
     * Returns true if the given object is an instance of StfRoamingBeacon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StfRoamingBeacon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StfRoamingBeacon.__pulumiType;
    }

    /**
     * External IP addresses of the beacon.
     */
    public readonly externalIps!: pulumi.Output<string[] | undefined>;
    /**
     * Internal IP address of the beacon.
     */
    public readonly internalIp!: pulumi.Output<string>;
    /**
     * Site Id of the StoreFront Roaming Service instance.
     */
    public readonly siteId!: pulumi.Output<number>;

    /**
     * Create a StfRoamingBeacon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StfRoamingBeaconArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StfRoamingBeaconArgs | StfRoamingBeaconState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StfRoamingBeaconState | undefined;
            resourceInputs["externalIps"] = state ? state.externalIps : undefined;
            resourceInputs["internalIp"] = state ? state.internalIp : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
        } else {
            const args = argsOrState as StfRoamingBeaconArgs | undefined;
            if ((!args || args.internalIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'internalIp'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["externalIps"] = args ? args.externalIps : undefined;
            resourceInputs["internalIp"] = args ? args.internalIp : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StfRoamingBeacon.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StfRoamingBeacon resources.
 */
export interface StfRoamingBeaconState {
    /**
     * External IP addresses of the beacon.
     */
    externalIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Internal IP address of the beacon.
     */
    internalIp?: pulumi.Input<string>;
    /**
     * Site Id of the StoreFront Roaming Service instance.
     */
    siteId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a StfRoamingBeacon resource.
 */
export interface StfRoamingBeaconArgs {
    /**
     * External IP addresses of the beacon.
     */
    externalIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Internal IP address of the beacon.
     */
    internalIp: pulumi.Input<string>;
    /**
     * Site Id of the StoreFront Roaming Service instance.
     */
    siteId: pulumi.Input<number>;
}
