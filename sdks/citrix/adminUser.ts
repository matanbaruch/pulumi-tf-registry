// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AdminUser extends pulumi.CustomResource {
    /**
     * Get an existing AdminUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdminUserState, opts?: pulumi.CustomResourceOptions): AdminUser {
        return new AdminUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/adminUser:AdminUser';

    /**
     * Returns true if the given object is an instance of AdminUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdminUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdminUser.__pulumiType;
    }

    /**
     * Name of the domain that the user is a part of. For example, if the domain is `example.com`, then provide the value
     * `example` for this field.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Flag to determine if the administrator is to be enabled or not.
     */
    public readonly isEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of an existing user in the active directory.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Rights to be associated with the admin user.
     */
    public readonly rights!: pulumi.Output<outputs.AdminUserRight[]>;

    /**
     * Create a AdminUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdminUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdminUserArgs | AdminUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdminUserState | undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rights"] = state ? state.rights : undefined;
        } else {
            const args = argsOrState as AdminUserArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.rights === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rights'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rights"] = args ? args.rights : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdminUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AdminUser resources.
 */
export interface AdminUserState {
    /**
     * Name of the domain that the user is a part of. For example, if the domain is `example.com`, then provide the value
     * `example` for this field.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Flag to determine if the administrator is to be enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of an existing user in the active directory.
     */
    name?: pulumi.Input<string>;
    /**
     * Rights to be associated with the admin user.
     */
    rights?: pulumi.Input<pulumi.Input<inputs.AdminUserRight>[]>;
}

/**
 * The set of arguments for constructing a AdminUser resource.
 */
export interface AdminUserArgs {
    /**
     * Name of the domain that the user is a part of. For example, if the domain is `example.com`, then provide the value
     * `example` for this field.
     */
    domainName: pulumi.Input<string>;
    /**
     * Flag to determine if the administrator is to be enabled or not.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of an existing user in the active directory.
     */
    name?: pulumi.Input<string>;
    /**
     * Rights to be associated with the admin user.
     */
    rights: pulumi.Input<pulumi.Input<inputs.AdminUserRight>[]>;
}
