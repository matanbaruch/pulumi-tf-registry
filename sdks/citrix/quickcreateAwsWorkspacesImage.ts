// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class QuickcreateAwsWorkspacesImage extends pulumi.CustomResource {
    /**
     * Get an existing QuickcreateAwsWorkspacesImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuickcreateAwsWorkspacesImageState, opts?: pulumi.CustomResourceOptions): QuickcreateAwsWorkspacesImage {
        return new QuickcreateAwsWorkspacesImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/quickcreateAwsWorkspacesImage:QuickcreateAwsWorkspacesImage';

    /**
     * Returns true if the given object is an instance of QuickcreateAwsWorkspacesImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QuickcreateAwsWorkspacesImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QuickcreateAwsWorkspacesImage.__pulumiType;
    }

    /**
     * GUID identifier of the account.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Id of the image on AWS.
     */
    public readonly awsImageId!: pulumi.Output<string>;
    /**
     * Description of the image.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The type of ingestion process of the image. Possible values are `BYOL_REGULAR_BYOP` and `BYOL_GRAPHICS_G4DN_BYOP`.
     */
    public readonly ingestionProcess!: pulumi.Output<string>;
    /**
     * Name of the image.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The type of operating system of the image. Possible values are `WINDOWS` and `LINUX`.
     */
    public readonly operatingSystem!: pulumi.Output<string>;
    /**
     * The supported session type of the image. Possible values are `SingleSession` and `MultiSession`.
     */
    public readonly sessionSupport!: pulumi.Output<string>;
    /**
     * The state of ingestion process of the image.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The type of tenancy of the image.
     */
    public /*out*/ readonly tenancy!: pulumi.Output<string>;

    /**
     * Create a QuickcreateAwsWorkspacesImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuickcreateAwsWorkspacesImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuickcreateAwsWorkspacesImageArgs | QuickcreateAwsWorkspacesImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuickcreateAwsWorkspacesImageState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["awsImageId"] = state ? state.awsImageId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ingestionProcess"] = state ? state.ingestionProcess : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            resourceInputs["sessionSupport"] = state ? state.sessionSupport : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tenancy"] = state ? state.tenancy : undefined;
        } else {
            const args = argsOrState as QuickcreateAwsWorkspacesImageArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.awsImageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsImageId'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.ingestionProcess === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingestionProcess'");
            }
            if ((!args || args.operatingSystem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operatingSystem'");
            }
            if ((!args || args.sessionSupport === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sessionSupport'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["awsImageId"] = args ? args.awsImageId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ingestionProcess"] = args ? args.ingestionProcess : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operatingSystem"] = args ? args.operatingSystem : undefined;
            resourceInputs["sessionSupport"] = args ? args.sessionSupport : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tenancy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QuickcreateAwsWorkspacesImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering QuickcreateAwsWorkspacesImage resources.
 */
export interface QuickcreateAwsWorkspacesImageState {
    /**
     * GUID identifier of the account.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Id of the image on AWS.
     */
    awsImageId?: pulumi.Input<string>;
    /**
     * Description of the image.
     */
    description?: pulumi.Input<string>;
    /**
     * The type of ingestion process of the image. Possible values are `BYOL_REGULAR_BYOP` and `BYOL_GRAPHICS_G4DN_BYOP`.
     */
    ingestionProcess?: pulumi.Input<string>;
    /**
     * Name of the image.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of operating system of the image. Possible values are `WINDOWS` and `LINUX`.
     */
    operatingSystem?: pulumi.Input<string>;
    /**
     * The supported session type of the image. Possible values are `SingleSession` and `MultiSession`.
     */
    sessionSupport?: pulumi.Input<string>;
    /**
     * The state of ingestion process of the image.
     */
    state?: pulumi.Input<string>;
    /**
     * The type of tenancy of the image.
     */
    tenancy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a QuickcreateAwsWorkspacesImage resource.
 */
export interface QuickcreateAwsWorkspacesImageArgs {
    /**
     * GUID identifier of the account.
     */
    accountId: pulumi.Input<string>;
    /**
     * Id of the image on AWS.
     */
    awsImageId: pulumi.Input<string>;
    /**
     * Description of the image.
     */
    description: pulumi.Input<string>;
    /**
     * The type of ingestion process of the image. Possible values are `BYOL_REGULAR_BYOP` and `BYOL_GRAPHICS_G4DN_BYOP`.
     */
    ingestionProcess: pulumi.Input<string>;
    /**
     * Name of the image.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of operating system of the image. Possible values are `WINDOWS` and `LINUX`.
     */
    operatingSystem: pulumi.Input<string>;
    /**
     * The supported session type of the image. Possible values are `SingleSession` and `MultiSession`.
     */
    sessionSupport: pulumi.Input<string>;
}
