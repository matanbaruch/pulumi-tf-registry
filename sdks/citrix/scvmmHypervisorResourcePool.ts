// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ScvmmHypervisorResourcePool extends pulumi.CustomResource {
    /**
     * Get an existing ScvmmHypervisorResourcePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScvmmHypervisorResourcePoolState, opts?: pulumi.CustomResourceOptions): ScvmmHypervisorResourcePool {
        return new ScvmmHypervisorResourcePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/scvmmHypervisorResourcePool:ScvmmHypervisorResourcePool';

    /**
     * Returns true if the given object is an instance of ScvmmHypervisorResourcePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScvmmHypervisorResourcePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScvmmHypervisorResourcePool.__pulumiType;
    }

    /**
     * The name of the host.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Id of the hypervisor for which the resource pool needs to be created.
     */
    public readonly hypervisor!: pulumi.Output<string>;
    /**
     * Name of the resource pool. Name should be unique across all hypervisors.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Networks for allocating resources.
     */
    public readonly networks!: pulumi.Output<string[]>;
    /**
     * Storage resources to use for OS data.
     */
    public readonly storages!: pulumi.Output<outputs.ScvmmHypervisorResourcePoolStorage[]>;
    /**
     * Storage resources to use for temporary data.
     */
    public readonly temporaryStorages!: pulumi.Output<outputs.ScvmmHypervisorResourcePoolTemporaryStorage[]>;
    /**
     * Indicates whether intellicache is enabled to reduce load on the shared storage device. Will only be effective when
     * shared storage is used. Default value is `false`.
     */
    public readonly useLocalStorageCaching!: pulumi.Output<boolean>;

    /**
     * Create a ScvmmHypervisorResourcePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScvmmHypervisorResourcePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScvmmHypervisorResourcePoolArgs | ScvmmHypervisorResourcePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScvmmHypervisorResourcePoolState | undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hypervisor"] = state ? state.hypervisor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["storages"] = state ? state.storages : undefined;
            resourceInputs["temporaryStorages"] = state ? state.temporaryStorages : undefined;
            resourceInputs["useLocalStorageCaching"] = state ? state.useLocalStorageCaching : undefined;
        } else {
            const args = argsOrState as ScvmmHypervisorResourcePoolArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.hypervisor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hypervisor'");
            }
            if ((!args || args.networks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            if ((!args || args.storages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storages'");
            }
            if ((!args || args.temporaryStorages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'temporaryStorages'");
            }
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["hypervisor"] = args ? args.hypervisor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["storages"] = args ? args.storages : undefined;
            resourceInputs["temporaryStorages"] = args ? args.temporaryStorages : undefined;
            resourceInputs["useLocalStorageCaching"] = args ? args.useLocalStorageCaching : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScvmmHypervisorResourcePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ScvmmHypervisorResourcePool resources.
 */
export interface ScvmmHypervisorResourcePoolState {
    /**
     * The name of the host.
     */
    host?: pulumi.Input<string>;
    /**
     * Id of the hypervisor for which the resource pool needs to be created.
     */
    hypervisor?: pulumi.Input<string>;
    /**
     * Name of the resource pool. Name should be unique across all hypervisors.
     */
    name?: pulumi.Input<string>;
    /**
     * Networks for allocating resources.
     */
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Storage resources to use for OS data.
     */
    storages?: pulumi.Input<pulumi.Input<inputs.ScvmmHypervisorResourcePoolStorage>[]>;
    /**
     * Storage resources to use for temporary data.
     */
    temporaryStorages?: pulumi.Input<pulumi.Input<inputs.ScvmmHypervisorResourcePoolTemporaryStorage>[]>;
    /**
     * Indicates whether intellicache is enabled to reduce load on the shared storage device. Will only be effective when
     * shared storage is used. Default value is `false`.
     */
    useLocalStorageCaching?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ScvmmHypervisorResourcePool resource.
 */
export interface ScvmmHypervisorResourcePoolArgs {
    /**
     * The name of the host.
     */
    host: pulumi.Input<string>;
    /**
     * Id of the hypervisor for which the resource pool needs to be created.
     */
    hypervisor: pulumi.Input<string>;
    /**
     * Name of the resource pool. Name should be unique across all hypervisors.
     */
    name?: pulumi.Input<string>;
    /**
     * Networks for allocating resources.
     */
    networks: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Storage resources to use for OS data.
     */
    storages: pulumi.Input<pulumi.Input<inputs.ScvmmHypervisorResourcePoolStorage>[]>;
    /**
     * Storage resources to use for temporary data.
     */
    temporaryStorages: pulumi.Input<pulumi.Input<inputs.ScvmmHypervisorResourcePoolTemporaryStorage>[]>;
    /**
     * Indicates whether intellicache is enabled to reduce load on the shared storage device. Will only be effective when
     * shared storage is used. Default value is `false`.
     */
    useLocalStorageCaching?: pulumi.Input<boolean>;
}
