// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class QuickcreateAwsWorkspacesDeployment extends pulumi.CustomResource {
    /**
     * Get an existing QuickcreateAwsWorkspacesDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuickcreateAwsWorkspacesDeploymentState, opts?: pulumi.CustomResourceOptions): QuickcreateAwsWorkspacesDeployment {
        return new QuickcreateAwsWorkspacesDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/quickcreateAwsWorkspacesDeployment:QuickcreateAwsWorkspacesDeployment';

    /**
     * Returns true if the given object is an instance of QuickcreateAwsWorkspacesDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QuickcreateAwsWorkspacesDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QuickcreateAwsWorkspacesDeployment.__pulumiType;
    }

    /**
     * GUID of the account.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * GUID of the directory.
     */
    public readonly directoryConnectionId!: pulumi.Output<string>;
    /**
     * GUID of the image.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Name of the deployment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Performance of the workspace. Possible Values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `POWERPRO`, `GRAPHICS`,
     * `GRAPHICSPRO`.
     */
    public readonly performance!: pulumi.Output<string>;
    /**
     * Size of the root volume in GB. Possible Values are `80` or any integer between `175` and `2000` (inclusive).
     */
    public readonly rootVolumeSize!: pulumi.Output<number>;
    /**
     * Running mode of the workspace. Possible Values are `ALWAYS_ON` and `MANUAL`.
     */
    public readonly runningMode!: pulumi.Output<string>;
    /**
     * Manual power management configuration for the deployment.
     */
    public readonly scaleSettings!: pulumi.Output<outputs.QuickcreateAwsWorkspacesDeploymentScaleSettings | undefined>;
    /**
     * Indicates if the user decoupled workspaces are enabled.
     */
    public readonly userDecoupledWorkspaces!: pulumi.Output<boolean>;
    /**
     * Size of the user volume in GB. Possible Values are `10`, `50`, or any integer between `100` and `2000` (inclusive).
     */
    public readonly userVolumeSize!: pulumi.Output<number>;
    /**
     * Indicates if the volumes are encrypted.
     */
    public readonly volumesEncrypted!: pulumi.Output<boolean>;
    /**
     * AWS KMS key to be used for workspace encryption. Use `alias/aws/workspaces` for default AWS KMS workspace encryption
     * key.
     */
    public readonly volumesEncryptionKey!: pulumi.Output<string | undefined>;
    /**
     * Set of workspaces with assigned users.
     */
    public readonly workspaces!: pulumi.Output<outputs.QuickcreateAwsWorkspacesDeploymentWorkspace[] | undefined>;

    /**
     * Create a QuickcreateAwsWorkspacesDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuickcreateAwsWorkspacesDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuickcreateAwsWorkspacesDeploymentArgs | QuickcreateAwsWorkspacesDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuickcreateAwsWorkspacesDeploymentState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["directoryConnectionId"] = state ? state.directoryConnectionId : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["performance"] = state ? state.performance : undefined;
            resourceInputs["rootVolumeSize"] = state ? state.rootVolumeSize : undefined;
            resourceInputs["runningMode"] = state ? state.runningMode : undefined;
            resourceInputs["scaleSettings"] = state ? state.scaleSettings : undefined;
            resourceInputs["userDecoupledWorkspaces"] = state ? state.userDecoupledWorkspaces : undefined;
            resourceInputs["userVolumeSize"] = state ? state.userVolumeSize : undefined;
            resourceInputs["volumesEncrypted"] = state ? state.volumesEncrypted : undefined;
            resourceInputs["volumesEncryptionKey"] = state ? state.volumesEncryptionKey : undefined;
            resourceInputs["workspaces"] = state ? state.workspaces : undefined;
        } else {
            const args = argsOrState as QuickcreateAwsWorkspacesDeploymentArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.directoryConnectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryConnectionId'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.performance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'performance'");
            }
            if ((!args || args.rootVolumeSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootVolumeSize'");
            }
            if ((!args || args.runningMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runningMode'");
            }
            if ((!args || args.userDecoupledWorkspaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userDecoupledWorkspaces'");
            }
            if ((!args || args.userVolumeSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userVolumeSize'");
            }
            if ((!args || args.volumesEncrypted === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumesEncrypted'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["directoryConnectionId"] = args ? args.directoryConnectionId : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["performance"] = args ? args.performance : undefined;
            resourceInputs["rootVolumeSize"] = args ? args.rootVolumeSize : undefined;
            resourceInputs["runningMode"] = args ? args.runningMode : undefined;
            resourceInputs["scaleSettings"] = args ? args.scaleSettings : undefined;
            resourceInputs["userDecoupledWorkspaces"] = args ? args.userDecoupledWorkspaces : undefined;
            resourceInputs["userVolumeSize"] = args ? args.userVolumeSize : undefined;
            resourceInputs["volumesEncrypted"] = args ? args.volumesEncrypted : undefined;
            resourceInputs["volumesEncryptionKey"] = args ? args.volumesEncryptionKey : undefined;
            resourceInputs["workspaces"] = args ? args.workspaces : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QuickcreateAwsWorkspacesDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering QuickcreateAwsWorkspacesDeployment resources.
 */
export interface QuickcreateAwsWorkspacesDeploymentState {
    /**
     * GUID of the account.
     */
    accountId?: pulumi.Input<string>;
    /**
     * GUID of the directory.
     */
    directoryConnectionId?: pulumi.Input<string>;
    /**
     * GUID of the image.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Name of the deployment.
     */
    name?: pulumi.Input<string>;
    /**
     * Performance of the workspace. Possible Values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `POWERPRO`, `GRAPHICS`,
     * `GRAPHICSPRO`.
     */
    performance?: pulumi.Input<string>;
    /**
     * Size of the root volume in GB. Possible Values are `80` or any integer between `175` and `2000` (inclusive).
     */
    rootVolumeSize?: pulumi.Input<number>;
    /**
     * Running mode of the workspace. Possible Values are `ALWAYS_ON` and `MANUAL`.
     */
    runningMode?: pulumi.Input<string>;
    /**
     * Manual power management configuration for the deployment.
     */
    scaleSettings?: pulumi.Input<inputs.QuickcreateAwsWorkspacesDeploymentScaleSettings>;
    /**
     * Indicates if the user decoupled workspaces are enabled.
     */
    userDecoupledWorkspaces?: pulumi.Input<boolean>;
    /**
     * Size of the user volume in GB. Possible Values are `10`, `50`, or any integer between `100` and `2000` (inclusive).
     */
    userVolumeSize?: pulumi.Input<number>;
    /**
     * Indicates if the volumes are encrypted.
     */
    volumesEncrypted?: pulumi.Input<boolean>;
    /**
     * AWS KMS key to be used for workspace encryption. Use `alias/aws/workspaces` for default AWS KMS workspace encryption
     * key.
     */
    volumesEncryptionKey?: pulumi.Input<string>;
    /**
     * Set of workspaces with assigned users.
     */
    workspaces?: pulumi.Input<pulumi.Input<inputs.QuickcreateAwsWorkspacesDeploymentWorkspace>[]>;
}

/**
 * The set of arguments for constructing a QuickcreateAwsWorkspacesDeployment resource.
 */
export interface QuickcreateAwsWorkspacesDeploymentArgs {
    /**
     * GUID of the account.
     */
    accountId: pulumi.Input<string>;
    /**
     * GUID of the directory.
     */
    directoryConnectionId: pulumi.Input<string>;
    /**
     * GUID of the image.
     */
    imageId: pulumi.Input<string>;
    /**
     * Name of the deployment.
     */
    name?: pulumi.Input<string>;
    /**
     * Performance of the workspace. Possible Values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `POWERPRO`, `GRAPHICS`,
     * `GRAPHICSPRO`.
     */
    performance: pulumi.Input<string>;
    /**
     * Size of the root volume in GB. Possible Values are `80` or any integer between `175` and `2000` (inclusive).
     */
    rootVolumeSize: pulumi.Input<number>;
    /**
     * Running mode of the workspace. Possible Values are `ALWAYS_ON` and `MANUAL`.
     */
    runningMode: pulumi.Input<string>;
    /**
     * Manual power management configuration for the deployment.
     */
    scaleSettings?: pulumi.Input<inputs.QuickcreateAwsWorkspacesDeploymentScaleSettings>;
    /**
     * Indicates if the user decoupled workspaces are enabled.
     */
    userDecoupledWorkspaces: pulumi.Input<boolean>;
    /**
     * Size of the user volume in GB. Possible Values are `10`, `50`, or any integer between `100` and `2000` (inclusive).
     */
    userVolumeSize: pulumi.Input<number>;
    /**
     * Indicates if the volumes are encrypted.
     */
    volumesEncrypted: pulumi.Input<boolean>;
    /**
     * AWS KMS key to be used for workspace encryption. Use `alias/aws/workspaces` for default AWS KMS workspace encryption
     * key.
     */
    volumesEncryptionKey?: pulumi.Input<string>;
    /**
     * Set of workspaces with assigned users.
     */
    workspaces?: pulumi.Input<pulumi.Input<inputs.QuickcreateAwsWorkspacesDeploymentWorkspace>[]>;
}
