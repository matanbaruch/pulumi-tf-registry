// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AdminUserRight {
    /**
     * Name of the role to be associated with the admin user.
     */
    role: string;
    /**
     * Name of the scope to be associated with the admin user.
     */
    scope: string;
}

export interface ApplicationInstalledAppProperties {
    /**
     * The command-line arguments to use when launching the executable.
     */
    commandLineArguments?: string;
    /**
     * The path of the executable file to launch.
     */
    commandLineExecutable: string;
    /**
     * The working directory which the executable is launched from.
     */
    workingDirectory?: string;
}

export interface DeliveryGroupAppProtection {
    /**
     * Implement contextual App Protection using the connection filters defined in the Access Policy rule.
     */
    applyContextuallies?: outputs.DeliveryGroupAppProtectionApplyContextually[];
    /**
     * When enabled, anti-keylogging is applied when a protected window is in focus.
     */
    enableAntiKeyLogging?: boolean;
    /**
     * Specify whether to use anti-screen capture.
     *
     * > **Note** For Windows and macOS, only the window with protected content is blank. Anti-screen capture is only applied when the window is open. For Linux, the entire screen will appear blank. Anti-screen capture is only applied when the window is open or minimized.
     */
    enableAntiScreenCapture?: boolean;
}

export interface DeliveryGroupAppProtectionApplyContextually {
    /**
     * When enabled, anti-keylogging is applied when a protected window is in focus.
     */
    enableAntiKeyLogging: boolean;
    /**
     * Specify whether to use anti-screen capture.
     *
     * > **Note** For Windows and macOS, only the window with protected content is blank. Anti-screen capture is only applied when the window is open. For Linux, the entire screen will appear blank. Anti-screen capture is only applied when the window is open or minimized.
     */
    enableAntiScreenCapture: boolean;
    /**
     * The name of the policy.
     *
     * > **Note** To refer to default policies, use `Citrix Gateway connections` as the name for the default policy that is Via Access Gateway and `Non-Citrix Gateway connections` as the name for the default policy that is Not Via Access Gateway.
     */
    policyName: string;
}

export interface DeliveryGroupAssociatedMachineCatalog {
    /**
     * Id of the machine catalog from which to add machines.
     */
    machineCatalog: string;
    /**
     * The number of machines to assign from the machine catalog to the delivery group.
     */
    machineCount: number;
}

export interface DeliveryGroupAutoscaleSettings {
    /**
     * Whether auto-scale is enabled for the delivery group.
     */
    autoscaleEnabled: boolean;
    /**
     * Specifies the time in seconds after which an idle session belonging to the delivery group is disconnected during off-peak time.
     */
    disconnectOffPeakIdleSessionAfterSeconds: number;
    /**
     * Specifies the time in seconds after which an idle session belonging to the delivery group is disconnected during peak time.
     */
    disconnectPeakIdleSessionAfterSeconds: number;
    /**
     * Specifies the time in seconds after which a disconnected session belonging to the delivery group is terminated during off peak time.
     */
    logOffOffPeakDisconnectedSessionAfterSeconds: number;
    /**
     * Specifies the time in seconds after which a disconnected session belonging to the delivery group is terminated during peak time.
     */
    logOffPeakDisconnectedSessionAfterSeconds: number;
    /**
     * The percentage of machines in the delivery group that should be kept available in an idle state outside peak hours.
     */
    offPeakBufferSizePercent: number;
    /**
     * The action to be performed after a configurable period of a user session disconnecting outside peak hours. Choose between `Nothing`, `Suspend`, and `Shutdown`. Default is `Nothing`.
     */
    offPeakDisconnectAction: string;
    /**
     * The number of minutes before the configured action should be performed after a user session disconnectts outside peak hours.
     */
    offPeakDisconnectTimeoutMinutes: number;
    /**
     * The action to be performed after a second configurable period of a user session disconnecting outside peak hours. Choose between `Nothing`, `Suspend`, and `Shutdown`. Default is `Nothing`.
     */
    offPeakExtendedDisconnectAction: string;
    /**
     * The number of minutes before the second configured action should be performed after a user session disconnects outside peak hours.
     */
    offPeakExtendedDisconnectTimeoutMinutes: number;
    /**
     * The action to be performed after a configurable period of a user session ending outside peak hours. Choose between `Nothing`, `Suspend`, and `Shutdown`. Default is `Nothing`.
     */
    offPeakLogOffAction: string;
    /**
     * The number of minutes before the configured action should be performed after a user session ends outside peak hours.
     */
    offPeakLogOffTimeoutMinutes: number;
    /**
     * The action to be performed on an assigned machine previously started by autoscale that subsequently remains unused. Choose between `Nothing`, `Suspend`, and `Shutdown`. Default is `Nothing`.
     */
    peakAutoscaleAssignedPowerOnIdleAction: string;
    /**
     * The number of minutes before the configured action is performed on an assigned machine previously started by autoscale that subsequently remains unused.
     */
    peakAutoscaleAssignedPowerOnIdleTimeoutMinutes: number;
    /**
     * The percentage of machines in the delivery group that should be kept available in an idle state in peak hours.
     */
    peakBufferSizePercent: number;
    /**
     * The action to be performed after a configurable period of a user session disconnecting in peak hours. Choose between `Nothing`, `Suspend`, and `Shutdown`. Default is `Nothing`.
     */
    peakDisconnectAction: string;
    /**
     * The number of minutes before the configured action should be performed after a user session disconnects in peak hours.
     */
    peakDisconnectTimeoutMinutes: number;
    /**
     * The action to be performed after a second configurable period of a user session disconnecting in peak hours. Choose between `Nothing`, `Suspend`, and `Shutdown`. Default is `Nothing`.
     */
    peakExtendedDisconnectAction: string;
    /**
     * The number of minutes before the second configured action should be performed after a user session disconnects in peak hours.
     */
    peakExtendedDisconnectTimeoutMinutes: number;
    /**
     * The action to be performed after a configurable period of a user session ending in peak hours. Choose between `Nothing`, `Suspend`, and `Shutdown`. Default is `Nothing`.
     */
    peakLogOffAction: string;
    /**
     * The number of minutes before the configured action should be performed after a user session ends in peak hours.
     */
    peakLogOffTimeoutMinutes: number;
    /**
     * Delay before machines are powered off, when scaling down. Specified in minutes. 
     *
     * > **Please Note** Applies only to multi-session machines. 
     *
     * > **Note** By default, the power-off delay is 30 minutes. You can set it in a range of 0 to 60 minutes.
     */
    powerOffDelayMinutes: number;
    /**
     * Power management time schemes.
     *
     * > **Please Note** It is not allowed to have more than one power time scheme that cover the same day of the week for the same delivery group.
     */
    powerTimeSchemes: outputs.DeliveryGroupAutoscaleSettingsPowerTimeScheme[];
    /**
     * The time zone in which this delivery group's machines reside.
     */
    timezone?: string;
}

export interface DeliveryGroupAutoscaleSettingsPowerTimeScheme {
    /**
     * The pattern of days of the week that the power time scheme covers.
     */
    daysOfWeeks: string[];
    /**
     * The name of the power time scheme as displayed in the console.
     */
    displayName: string;
    /**
     * Peak time ranges during the day. e.g. 09:00-17:00
     */
    peakTimeRanges: string[];
    /**
     * Pool size schedules during the day. Each is specified as a time range and an indicator of the number of machines that should be powered on during that time range. 
     *
     * > **Please Note** Do not specify schedules when no machines should be powered on.
     */
    poolSizeSchedules?: outputs.DeliveryGroupAutoscaleSettingsPowerTimeSchemePoolSizeSchedule[];
    /**
     * Indicates whether the integer values in the pool size array are to be treated as absolute values (if this value is `false`) or as percentages of the number of machines in the delivery group (if this value is `true`).
     */
    poolUsingPercentage: boolean;
}

export interface DeliveryGroupAutoscaleSettingsPowerTimeSchemePoolSizeSchedule {
    /**
     * The number of machines (either as an absolute number or a percentage of the machines in the delivery group, depending on the value of PoolUsingPercentage) that are to be maintained in a running state, whether they are in use or not.
     */
    poolSize: number;
    /**
     * Time range during which the pool size applies. 
     *
     * > **Note** Time range format is `HH:mm-HH:mm`, e.g. `09:00-17:00`
     */
    timeRange: string;
}

export interface DeliveryGroupCustomAccessPolicy {
    /**
     * The behavior of the include filter. Choose between `Filtered`, `ViaAG`, and `NotViaAG`.
     */
    allowedConnection: string;
    /**
     * Whether to enable criteria for exclude connections.
     */
    enableCriteriaForExcludeConnections: boolean;
    /**
     * Whether to enable criteria for include connections.
     */
    enableCriteriaForIncludeConnections: boolean;
    /**
     * Whether the access policy is enabled. Default is `true`.
     */
    enabled: boolean;
    /**
     * The list of filters that meet the criteria for exclude connections.
     */
    excludeCriteriaFilters?: outputs.DeliveryGroupCustomAccessPolicyExcludeCriteriaFilter[];
    /**
     * ID of the resource location.
     */
    id: string;
    /**
     * The type of criteria for include connections. Choose between `MatchAny` and `MatchAll`.
     */
    includeConnectionsCriteriaType?: string;
    /**
     * The list of filters that meet the criteria for include connections.
     */
    includeCriteriaFilters?: outputs.DeliveryGroupCustomAccessPolicyIncludeCriteriaFilter[];
    /**
     * The name of the access policy.
     *
     * > **Note** For default_access_policies, use `Citrix Gateway connections` as the name for the policy that is Via Access Gateway and `Non-Citrix Gateway connections` as the name for the policy that is Not Via Access Gateway.
     */
    name: string;
}

export interface DeliveryGroupCustomAccessPolicyExcludeCriteriaFilter {
    /**
     * The name of the filter.
     */
    filterName: string;
    /**
     * The value of the filter.
     */
    filterValue: string;
}

export interface DeliveryGroupCustomAccessPolicyIncludeCriteriaFilter {
    /**
     * The name of the filter.
     */
    filterName: string;
    /**
     * The value of the filter.
     */
    filterValue: string;
}

export interface DeliveryGroupDefaultAccessPolicy {
    /**
     * The behavior of the include filter. Choose between `Filtered`, `ViaAG`, and `NotViaAG`.
     */
    allowedConnection: string;
    /**
     * Whether to enable criteria for exclude connections.
     */
    enableCriteriaForExcludeConnections: boolean;
    /**
     * Whether to enable criteria for include connections.
     */
    enableCriteriaForIncludeConnections: boolean;
    /**
     * Whether the access policy is enabled. Default is `true`.
     */
    enabled: boolean;
    /**
     * The list of filters that meet the criteria for exclude connections.
     */
    excludeCriteriaFilters?: outputs.DeliveryGroupDefaultAccessPolicyExcludeCriteriaFilter[];
    /**
     * ID of the resource location.
     */
    id: string;
    /**
     * The type of criteria for include connections. Choose between `MatchAny` and `MatchAll`.
     */
    includeConnectionsCriteriaType?: string;
    /**
     * The list of filters that meet the criteria for include connections.
     */
    includeCriteriaFilters?: outputs.DeliveryGroupDefaultAccessPolicyIncludeCriteriaFilter[];
    /**
     * The name of the access policy.
     *
     * > **Note** For default_access_policies, use `Citrix Gateway connections` as the name for the policy that is Via Access Gateway and `Non-Citrix Gateway connections` as the name for the policy that is Not Via Access Gateway.
     */
    name: string;
}

export interface DeliveryGroupDefaultAccessPolicyExcludeCriteriaFilter {
    /**
     * The name of the filter.
     */
    filterName: string;
    /**
     * The value of the filter.
     */
    filterValue: string;
}

export interface DeliveryGroupDefaultAccessPolicyIncludeCriteriaFilter {
    /**
     * The name of the filter.
     */
    filterName: string;
    /**
     * The value of the filter.
     */
    filterValue: string;
}

export interface DeliveryGroupDesktop {
    /**
     * A description for the published desktop. The name and description are shown in Citrix Workspace app.
     */
    description: string;
    /**
     * When enabled, if the user launches this desktop and then moves to another device, the same session is used, and applications are available on both devices. When disabled, the session no longer roams between devices. 
     *
     * > **Please Note** Session roaming should be set to `false` for Remote PC Delivery Group.
     */
    enableSessionRoaming: boolean;
    /**
     * Specify whether to enable the delivery of this desktop. Default is `true`.
     */
    enabled: boolean;
    /**
     * A display name for the desktop.
     */
    publishedName: string;
    /**
     * Restrict access to this Desktop by specifying users and groups in the allow and block list. If no value is specified, all users that have access to this Delivery Group will have access to the Desktop. 
     *
     * > **Please Note** For Remote PC Delivery Groups desktops, `restricted_access_users` has to be set.
     */
    restrictedAccessUsers?: outputs.DeliveryGroupDesktopRestrictedAccessUsers;
}

export interface DeliveryGroupDesktopRestrictedAccessUsers {
    /**
     * Users who can use this Desktop. 
     *
     * > **Note** Users must be in `DOMAIN\UserOrGroupName` or `user@domain.com` format
     */
    allowLists?: string[];
    /**
     * Users who cannot use this Desktop. A block list is meaningful only when used to block users in the allow list. 
     *
     * > **Note** Users must be in `DOMAIN\UserOrGroupName` or `user@domain.com` format
     */
    blockLists?: string[];
}

export interface DeliveryGroupRebootSchedule {
    /**
     * The day in the month on which the reboot schedule runs monthly. Can only be set to `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, or `Saturday`.
     */
    dayInMonth?: string;
    /**
     * The days of the week on which the reboot schedule runs weekly. Can only be set to `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, or `Saturday`.
     */
    daysInWeeks?: string[];
    /**
     * The description of the reboot schedule.
     */
    description: string;
    /**
     * The frequency of the reboot schedule. Can only be set to `Daily`, `Weekly`, `Monthly`, or `Once`.
     */
    frequency: string;
    /**
     * Repeats every X days/weeks/months. Minimum value is `1`.
     */
    frequencyFactor: number;
    /**
     * Whether the reboot schedule ignores machines in the maintenance mode.
     */
    ignoreMaintenanceMode: boolean;
    /**
     * The name of the reboot schedule.
     */
    name: string;
    /**
     * Indicates whether the reboot will be a natural reboot, where the machines will be rebooted when they have no sessions. This should set to false for reboot_duration_minutes to work. Once UseNaturalReboot is set to true, RebootDurationMinutes won't have any effect.
     */
    naturalRebootSchedule: boolean;
    /**
     * Restart all machines within x minutes. 0 means restarting all machines at the same time. To restart machines after draining sessions, set natural_reboot_schedule to true instead.
     */
    rebootDurationMinutes?: number;
    /**
     * The reboot notification for the reboot schedule. 
     *
     * > **Please Note** Not available for natural reboot.
     */
    rebootNotificationToUsers?: outputs.DeliveryGroupRebootScheduleRebootNotificationToUsers;
    /**
     * Whether the reboot schedule is enabled.
     */
    rebootScheduleEnabled: boolean;
    /**
     * The tag to which the reboot schedule is restricted.
     */
    restrictToTag?: string;
    /**
     * The date on which the reboot schedule starts. 
     *
     * > **Note** The date format is `YYYY-MM-DD`.
     */
    startDate: string;
    /**
     * The time at which the reboot schedule starts. 
     *
     * > **Note** The time format is `HH:MM`.
     */
    startTime: string;
    /**
     * The week in the month on which the reboot schedule runs monthly. Can only be set to `First`, `Second`, `Third`, `Fourth`, or `Last`.
     */
    weekInMonth?: string;
}

export interface DeliveryGroupRebootScheduleRebootNotificationToUsers {
    /**
     * Send notification to users X minutes before user is logged off. Can only be `0`, `1`, `5` or `15`. `0` means no notification.
     */
    notificationDurationMinutes: number;
    /**
     * The message to be displayed to users before they are logged off.
     */
    notificationMessage: string;
    /**
     * Repeat notification every 5 minutes. 
     *
     * > **Please Note** notification repeat is available only when `notification_duration_minutes` is set to `15`.
     */
    notificationRepeatEvery5Minutes?: boolean;
    /**
     * The title to be displayed to users before they are logged off.
     */
    notificationTitle: string;
}

export interface DeliveryGroupRestrictedAccessUsers {
    /**
     * Users who can use this Delivery Group. 
     *
     * > **Note** Users must be in `DOMAIN\UserOrGroupName` or `user@domain.com` format
     */
    allowLists?: string[];
    /**
     * Users who cannot use this Delivery Group. A block list is meaningful only when used to block users in the allow list. 
     *
     * > **Note** Users must be in `DOMAIN\UserOrGroupName` or `user@domain.com` format
     */
    blockLists?: string[];
}

export interface GacSettingsAppSettings {
    /**
     * Settings to be applied for users using android platform.
     */
    androids?: outputs.GacSettingsAppSettingsAndroid[];
    /**
     * Settings to be applied for users using chrome os platform.
     */
    chromeos?: outputs.GacSettingsAppSettingsChromeo[];
    /**
     * Settings to be applied for users using html5.
     */
    html5s?: outputs.GacSettingsAppSettingsHtml5[];
    /**
     * Settings to be applied for users using ios platform.
     */
    ios?: outputs.GacSettingsAppSettingsIo[];
    /**
     * Settings to be applied for users using mac os platform.
     */
    macos?: outputs.GacSettingsAppSettingsMaco[];
    /**
     * Settings to be applied for users using windows platform.
     */
    windows?: outputs.GacSettingsAppSettingsWindow[];
}

export interface GacSettingsAppSettingsAndroid {
    /**
     * Defines the category of the setting.
     */
    category: string;
    /**
     * A list of name value pairs for the settings. Please refer to the following [table](https://developer-docs.citrix.com/en-us/server-integration/global-app-configuration-service/getting-started#supported-settings-and-their-values-per-platform) for the supported settings name and their values per platform.
     */
    settings: outputs.GacSettingsAppSettingsAndroidSetting[];
    /**
     * Defines if users can modify or change the value of as obtained settings from the Global App Citrix Workspace configuration service.
     */
    userOverride: boolean;
}

export interface GacSettingsAppSettingsAndroidSetting {
    /**
     * Name of the setting.
     */
    name: string;
    /**
     * List value (if any) associated with the setting.
     */
    valueLists?: string[];
    /**
     * String value (if any) associated with the setting.
     */
    valueString?: string;
}

export interface GacSettingsAppSettingsChromeo {
    /**
     * Defines the category of the setting.
     */
    category: string;
    /**
     * A list of name value pairs for the settings. Please refer to the following [table](https://developer-docs.citrix.com/en-us/server-integration/global-app-configuration-service/getting-started#supported-settings-and-their-values-per-platform) for the supported settings name and their values per platform.
     */
    settings: outputs.GacSettingsAppSettingsChromeoSetting[];
    /**
     * Defines if users can modify or change the value of as obtained settings from the Global App Citrix Workspace configuration service.
     */
    userOverride: boolean;
}

export interface GacSettingsAppSettingsChromeoSetting {
    /**
     * Name of the setting.
     */
    name: string;
    /**
     * List value (if any) associated with the setting.
     */
    valueLists?: string[];
    /**
     * String value (if any) associated with the setting.
     */
    valueString?: string;
}

export interface GacSettingsAppSettingsHtml5 {
    /**
     * Defines the category of the setting.
     */
    category: string;
    /**
     * A list of name value pairs for the settings. Please refer to the following [table](https://developer-docs.citrix.com/en-us/server-integration/global-app-configuration-service/getting-started#supported-settings-and-their-values-per-platform) for the supported settings name and their values per platform.
     */
    settings: outputs.GacSettingsAppSettingsHtml5Setting[];
    /**
     * Defines if users can modify or change the value of as obtained settings from the Global App Citrix Workspace configuration service.
     */
    userOverride: boolean;
}

export interface GacSettingsAppSettingsHtml5Setting {
    /**
     * Name of the setting.
     */
    name: string;
    /**
     * List value (if any) associated with the setting.
     */
    valueLists?: string[];
    /**
     * String value (if any) associated with the setting.
     */
    valueString?: string;
}

export interface GacSettingsAppSettingsIo {
    /**
     * Defines the category of the setting
     */
    category: string;
    /**
     * A list of name value pairs for the settings. Please refer to the following [table](https://developer-docs.citrix.com/en-us/server-integration/global-app-configuration-service/getting-started#supported-settings-and-their-values-per-platform) for the supported settings name and their values per platform.
     */
    settings: outputs.GacSettingsAppSettingsIoSetting[];
    /**
     * Defines if users can modify or change the value of as obtained settings from the Global App Citrix Workspace configuration service.
     */
    userOverride: boolean;
}

export interface GacSettingsAppSettingsIoSetting {
    /**
     * Name of the setting.
     */
    name: string;
    /**
     * String value (if any) associated with the setting.
     */
    valueString?: string;
}

export interface GacSettingsAppSettingsMaco {
    /**
     * Defines the category of the setting.
     */
    category: string;
    /**
     * A list of name value pairs for the settings. Please refer to the following [table](https://developer-docs.citrix.com/en-us/server-integration/global-app-configuration-service/getting-started#supported-settings-and-their-values-per-platform) for the supported settings name and their values per platform.
     */
    settings: outputs.GacSettingsAppSettingsMacoSetting[];
    /**
     * Defines if users can modify or change the value of as obtained settings from the Global App Citrix Workspace configuration service.
     */
    userOverride: boolean;
}

export interface GacSettingsAppSettingsMacoSetting {
    /**
     * Name of the setting.
     */
    name: string;
    /**
     * List value (if any) associated with the setting.
     */
    valueLists?: string[];
    /**
     * String value (if any) associated with the setting.
     */
    valueString?: string;
}

export interface GacSettingsAppSettingsWindow {
    /**
     * Defines the category of the setting.
     */
    category: string;
    /**
     * A list of name value pairs for the settings. Please refer to [table](https://developer-docs.citrix.com/en-us/server-integration/global-app-configuration-service/getting-started#supported-settings-and-their-values-per-platform) for the supported settings name and their values per platform.
     */
    settings: outputs.GacSettingsAppSettingsWindowSetting[];
    /**
     * Defines if users can modify or change the value of as obtained settings from the Global App Citrix Workspace configuration service.
     */
    userOverride: boolean;
}

export interface GacSettingsAppSettingsWindowSetting {
    /**
     * Name of the setting.
     */
    name: string;
    /**
     * List value (if any) associated with the setting.
     */
    valueLists?: string[];
    /**
     * String value (if any) associated with the setting.
     */
    valueString?: string;
}

export interface GetApplicationFolderDetailsApplicationsList {
    /**
     * The path of the folder which the application belongs to
     */
    applicationFolderPath: string;
    /**
     * The delivery groups which the application is associated with.
     */
    deliveryGroups: string[];
    /**
     * The description of the application.
     */
    description: string;
    /**
     * The installed application properties of the application.
     */
    installedAppProperties: outputs.GetApplicationFolderDetailsApplicationsListInstalledAppProperties;
    /**
     * The name of the application.
     */
    name: string;
    /**
     * The published name of the application.
     */
    publishedName: string;
}

export interface GetApplicationFolderDetailsApplicationsListInstalledAppProperties {
    /**
     * The command-line arguments to use when launching the executable. Environment variables can be used.
     */
    commandLineArguments: string;
    /**
     * The name of the executable file to launch. The full path need not be provided if it's already in the path. Environment variables can also be used.
     */
    commandLineExecutable: string;
    /**
     * The working directory which the executable is launched from. Environment variables can be used.
     */
    workingDirectory: string;
}

export interface GetDeliveryGroupVda {
    /**
     * Delivery group which the VDA is associated with.
     */
    associatedDeliveryGroup: string;
    /**
     * Machine catalog which the VDA is associated with.
     */
    associatedMachineCatalog: string;
    /**
     * Machine ID within the hypervisor hosting unit.
     */
    hostedMachineId: string;
    /**
     * Machine name of the VDA.
     */
    machineName: string;
}

export interface GetMachineCatalogVda {
    /**
     * Delivery group which the VDA is associated with.
     */
    associatedDeliveryGroup: string;
    /**
     * Machine catalog which the VDA is associated with.
     */
    associatedMachineCatalog: string;
    /**
     * Machine ID within the hypervisor hosting unit.
     */
    hostedMachineId: string;
    /**
     * Machine name of the VDA.
     */
    machineName: string;
}

export interface GetVdaVda {
    /**
     * Delivery group which the VDA is associated with.
     */
    associatedDeliveryGroup: string;
    /**
     * Machine catalog which the VDA is associated with.
     */
    associatedMachineCatalog: string;
    /**
     * Machine ID within the hypervisor hosting unit.
     */
    hostedMachineId: string;
    /**
     * Machine name of the VDA.
     */
    machineName: string;
}

export interface MachineCatalogMachineAccount {
    /**
     * The Id of the hypervisor in which the machines reside. Required only if `is_power_managed = true`
     */
    hypervisor?: string;
    /**
     * Machines to add to the catalog
     */
    machines: outputs.MachineCatalogMachineAccountMachine[];
}

export interface MachineCatalogMachineAccountMachine {
    /**
     * **[AWS: Required]** The availability zone in which the machine resides. Required only if `is_power_managed = true`
     */
    availabilityZone?: string;
    /**
     * **[vSphere: Optional]** The cluster in which the machine resides. To be used only if `is_power_managed = true`
     */
    cluster?: string;
    /**
     * **[vSphere: Required]** The datacenter in which the machine resides. Required only if `is_power_managed = true`
     */
    datacenter?: string;
    /**
     * **[vSphere, SCVMM: Required]** For vSphere, this is the IP address or FQDN of the host in which the machine resides. For SCVMM, this is the name of the host in which the machine resides. Required only if `is_power_managed = true`
     */
    host?: string;
    /**
     * The Computer AD Account for the machine. Must be in the format DOMAIN\MACHINE.
     */
    machineAccount: string;
    /**
     * The name of the machine. Required only if `is_power_managed = true`
     */
    machineName?: string;
    /**
     * **[GCP: Required]** The project name in which the machine resides. Required only if `is_power_managed = true`
     */
    projectName?: string;
    /**
     * **[Azure, GCP: Required]** The region in which the machine resides. Required only if `is_power_managed = true`
     */
    region?: string;
    /**
     * **[Azure: Required]** The resource group in which the machine resides. Required only if `is_power_managed = true`
     */
    resourceGroupName?: string;
}

export interface MachineCatalogProvisioningScheme {
    /**
     * The Availability Zones for provisioning virtual machines.
     */
    availabilityZones?: string[];
    /**
     * Machine Configuration For AWS EC2 MCS catalog.
     */
    awsMachineConfig?: outputs.MachineCatalogProvisioningSchemeAwsMachineConfig;
    /**
     * Machine Configuration For Azure MCS and PVS Streaming catalogs.
     */
    azureMachineConfig?: outputs.MachineCatalogProvisioningSchemeAzureMachineConfig;
    customProperties?: outputs.MachineCatalogProvisioningSchemeCustomProperty[];
    /**
     * Machine Configuration For GCP MCS catalog.
     */
    gcpMachineConfig?: outputs.MachineCatalogProvisioningSchemeGcpMachineConfig;
    /**
     * Id of the hypervisor for creating the machines. Required only if using power managed machines.
     */
    hypervisor: string;
    /**
     * Id of the hypervisor resource pool that will be used for provisioning operations.
     */
    hypervisorResourcePool: string;
    /**
     * The identity type of the machines to be created. Supported values are`ActiveDirectory`, `AzureAD`, and `HybridAzureAD`.
     */
    identityType: string;
    /**
     * Rules specifying how Active Directory machine accounts should be created when machines are provisioned.
     */
    machineAccountCreationRules: outputs.MachineCatalogProvisioningSchemeMachineAccountCreationRules;
    /**
     * The domain identity for machines in the machine catalog.<br />Required when identity_type is set to `ActiveDirectory`
     */
    machineDomainIdentity?: outputs.MachineCatalogProvisioningSchemeMachineDomainIdentity;
    /**
     * Specifies how the attached NICs are mapped to networks. If this parameter is omitted, provisioned VMs are created with a single NIC, which is mapped to the default network in the hypervisor resource pool.  If this parameter is supplied, machines are created with the number of NICs specified in the map, and each NIC is attached to the specified network.<br />Required when `provisioning_scheme.identity_type` is `AzureAD`.
     */
    networkMappings?: outputs.MachineCatalogProvisioningSchemeNetworkMapping[];
    /**
     * Number of VDA machines allocated in the catalog.
     */
    numberOfTotalMachines: number;
    /**
     * Machine Configuration For Nutanix MCS catalog.
     */
    nutanixMachineConfig?: outputs.MachineCatalogProvisioningSchemeNutanixMachineConfig;
    /**
     * Machine Configuration for SCVMM MCS catalog.
     */
    scvmmMachineConfig?: outputs.MachineCatalogProvisioningSchemeScvmmMachineConfig;
    /**
     * Machine Configuration for vSphere MCS catalog.
     */
    vsphereMachineConfig?: outputs.MachineCatalogProvisioningSchemeVsphereMachineConfig;
    /**
     * Machine Configuration For XenServer MCS catalog.
     */
    xenserverMachineConfig?: outputs.MachineCatalogProvisioningSchemeXenserverMachineConfig;
}

export interface MachineCatalogProvisioningSchemeAwsMachineConfig {
    /**
     * AMI of the AWS image to be used as the template image for the machine catalog.
     */
    imageAmi: string;
    /**
     * The options for how rebooting is performed for image update. When omitted, image update on the VDAs will be performed on next shutdown.
     */
    imageUpdateRebootOptions?: outputs.MachineCatalogProvisioningSchemeAwsMachineConfigImageUpdateRebootOptions;
    /**
     * The name of the virtual machine image that will be used.
     */
    masterImage: string;
    /**
     * The note for the master image.
     */
    masterImageNote: string;
    /**
     * Security groups to associate with the machine. When omitted, the default security group of the VPC will be used by default.
     */
    securityGroups: string[];
    /**
     * The AWS VM Sku to use when creating machines.
     */
    serviceOffering: string;
    /**
     * Tenancy type of the machine. Choose between `Shared`, `Instance` and `Host`.
     */
    tenancyType: string;
}

export interface MachineCatalogProvisioningSchemeAwsMachineConfigImageUpdateRebootOptions {
    /**
     * Approximate maximum duration over which the reboot cycle runs, in minutes. Set to `-1` to skip reboot, and perform image update on the VDAs on next shutdown. Set to `0` to reboot all machines immediately.
     */
    rebootDuration: number;
    /**
     * Time in minutes prior to a machine reboot at which a warning message is displayed in all user sessions on that machine. When omitted, no warning about reboot will be displayed in user session.
     */
    warningDuration?: number;
    /**
     * Warning message displayed in user sessions on a machine scheduled for a reboot.  The optional pattern '%m%' is replaced by the number of minutes until the reboot.
     */
    warningMessage?: string;
    /**
     * Number of minutes to wait before showing the reboot warning message again.
     */
    warningRepeatInterval?: number;
}

export interface MachineCatalogProvisioningSchemeAzureMachineConfig {
    /**
     * Details of the Azure Image to use for creating machines.
     */
    azureMasterImage?: outputs.MachineCatalogProvisioningSchemeAzureMachineConfigAzureMasterImage;
    /**
     * PVS Configuration to create machine catalog using PVSStreaming.
     */
    azurePvsConfig?: outputs.MachineCatalogProvisioningSchemeAzureMachineConfigAzurePvsConfig;
    /**
     * The configuration for Disk Encryption Set (DES). The DES must be in the same subscription and region as your resources. If your master image is encrypted with a DES, use the same DES when creating this machine catalog. When using a DES, if you later disable the key with which the corresponding DES is associated in Azure, you can no longer power on the machines in this catalog or add machines to it.
     */
    diskEncryptionSet?: outputs.MachineCatalogProvisioningSchemeAzureMachineConfigDiskEncryptionSet;
    /**
     * Specify whether to enroll machines in Microsoft Intune. Use this property only when `identity_type` is set to `AzureAD`.
     */
    enrollInIntune?: boolean;
    /**
     * The options for how rebooting is performed for image update. When omitted, image update on the VDAs will be performed on next shutdown.
     */
    imageUpdateRebootOptions?: outputs.MachineCatalogProvisioningSchemeAzureMachineConfigImageUpdateRebootOptions;
    /**
     * Windows license type used to provision virtual machines in Azure at the base compute rate. License types include: `Windows_Client` and `Windows_Server`.
     */
    licenseType?: string;
    /**
     * The name of the virtual machine or template spec that will be used to identify the default value for the tags, virtual machine size, boot diagnostics, host cache property of OS disk, accelerated networking and availability zone.<br />Required when provisioning_type is set to PVSStreaming or when identity_type is set to `AzureAD`
     */
    machineProfile?: outputs.MachineCatalogProvisioningSchemeAzureMachineConfigMachineProfile;
    /**
     * The note for the master image.
     */
    masterImageNote: string;
    /**
     * The Azure VM Sku to use when creating machines.
     */
    serviceOffering: string;
    /**
     * Storage account type used for provisioned virtual machine disks on Azure. Storage types include: `Standard_LRS`, `StandardSSD_LRS` and `Premium_LRS`.
     */
    storageType: string;
    /**
     * Use this to place prepared image in Azure Compute Gallery. Required when `storage_type = Azure_Ephemeral_OS_Disk`.
     */
    useAzureComputeGallery?: outputs.MachineCatalogProvisioningSchemeAzureMachineConfigUseAzureComputeGallery;
    /**
     * Indicate whether to use Azure managed disks for the provisioned virtual machine.
     */
    useManagedDisks?: boolean;
    /**
     * Designated resource group where the VDA VMs will be located on Azure.
     */
    vdaResourceGroup?: string;
    /**
     * Write-back Cache config. Leave this empty to disable Write-back Cache. Write-back Cache requires Machine image with Write-back Cache plugin installed.
     */
    writebackCache?: outputs.MachineCatalogProvisioningSchemeAzureMachineConfigWritebackCache;
}

export interface MachineCatalogProvisioningSchemeAzureMachineConfigAzureMasterImage {
    /**
     * The Azure Storage Account Container where the image VHD for creating machines is located. Only applicable to Azure VHD image blob.
     */
    container?: string;
    /**
     * Details of the Azure Image Gallery image to use for creating machines. Only Applicable to Azure Image Gallery image.
     */
    galleryImage?: outputs.MachineCatalogProvisioningSchemeAzureMachineConfigAzureMasterImageGalleryImage;
    /**
     * The name of the virtual machine snapshot or VM template that will be used. This identifies the hard disk to be used and the default values for the memory and processors. Omit this field if you want to use gallery_image.
     */
    masterImage?: string;
    /**
     * The Azure Resource Group where the image VHD / managed disk / snapshot for creating machines is located.
     */
    resourceGroup: string;
    /**
     * The Azure Subscription ID where the image VHD / managed disk / snapshot for creating machines is located. Only required if the image is not in the same subscription of the hypervisor.
     */
    sharedSubscription?: string;
    /**
     * The Azure Storage Account where the image VHD for creating machines is located. Only applicable to Azure VHD image blob.
     */
    storageAccount?: string;
}

export interface MachineCatalogProvisioningSchemeAzureMachineConfigAzureMasterImageGalleryImage {
    /**
     * The image definition for the image to be used in the Azure Image Gallery. Only applicable to Azure Image Gallery image.
     */
    definition: string;
    /**
     * The Azure Image Gallery where the image for creating machines is located. Only applicable to Azure Image Gallery image.
     */
    gallery: string;
    /**
     * The image version for the image to be used in the Azure Image Gallery. Only applicable to Azure Image Gallery image.
     */
    version: string;
}

export interface MachineCatalogProvisioningSchemeAzureMachineConfigAzurePvsConfig {
    /**
     * The id of the PVS site to use for creating machines.
     */
    pvsSiteId: string;
    /**
     * The id of the PVS vDisk to use for creating machines.
     */
    pvsVdiskId: string;
}

export interface MachineCatalogProvisioningSchemeAzureMachineConfigDiskEncryptionSet {
    /**
     * The name of the disk encryption set.
     */
    diskEncryptionSetName: string;
    /**
     * The name of the resource group in which the disk encryption set resides.
     */
    diskEncryptionSetResourceGroup: string;
}

export interface MachineCatalogProvisioningSchemeAzureMachineConfigImageUpdateRebootOptions {
    /**
     * Approximate maximum duration over which the reboot cycle runs, in minutes. Set to `-1` to skip reboot, and perform image update on the VDAs on next shutdown. Set to `0` to reboot all machines immediately.
     */
    rebootDuration: number;
    /**
     * Time in minutes prior to a machine reboot at which a warning message is displayed in all user sessions on that machine. When omitted, no warning about reboot will be displayed in user session.
     */
    warningDuration?: number;
    /**
     * Warning message displayed in user sessions on a machine scheduled for a reboot.  The optional pattern '%m%' is replaced by the number of minutes until the reboot.
     */
    warningMessage?: string;
    /**
     * Number of minutes to wait before showing the reboot warning message again.
     */
    warningRepeatInterval?: number;
}

export interface MachineCatalogProvisioningSchemeAzureMachineConfigMachineProfile {
    /**
     * The name of the resource group where the machine profile VM or template spec is located.
     */
    machineProfileResourceGroup: string;
    /**
     * The name of the machine profile template spec.
     */
    machineProfileTemplateSpecName?: string;
    /**
     * The version of the machine profile template spec.
     */
    machineProfileTemplateSpecVersion?: string;
    /**
     * The name of the machine profile virtual machine.
     */
    machineProfileVmName?: string;
}

export interface MachineCatalogProvisioningSchemeAzureMachineConfigUseAzureComputeGallery {
    /**
     * The maximum number of image replicas that you want Azure to keep.
     */
    replicaMaximum: number;
    /**
     * The ratio of virtual machines to image replicas that you want Azure to keep.
     */
    replicaRatio: number;
}

export interface MachineCatalogProvisioningSchemeAzureMachineConfigWritebackCache {
    /**
     * Persist the OS disk when power cycling the non-persistent provisioned virtual machine.
     */
    persistOsDisk: boolean;
    /**
     * Persist the non-persistent provisioned virtual machine in Azure environments when power cycling. This property only applies when the PersistOsDisk property is set to True.
     */
    persistVm: boolean;
    /**
     * Persist Write-back Cache
     */
    persistWbc?: boolean;
    /**
     * Save storage cost by downgrading the storage type of the disk to Standard HDD when VM shut down.
     */
    storageCostSaving?: boolean;
    /**
     * Type of naming scheme. Choose between Numeric and Alphabetic.
     */
    wbcDiskStorageType: string;
    /**
     * The size in GB of any temporary storage disk used by the write back cache.
     */
    writebackCacheDiskSizeGb: number;
    /**
     * The size of the in-memory write back cache in MB.
     */
    writebackCacheMemorySizeMb?: number;
}

export interface MachineCatalogProvisioningSchemeCustomProperty {
    /**
     * Name of the custom property.
     */
    name: string;
    /**
     * Value of the custom property.
     */
    value: string;
}

export interface MachineCatalogProvisioningSchemeGcpMachineConfig {
    /**
     * The options for how rebooting is performed for image update. When omitted, image update on the VDAs will be performed on next shutdown.
     */
    imageUpdateRebootOptions?: outputs.MachineCatalogProvisioningSchemeGcpMachineConfigImageUpdateRebootOptions;
    /**
     * The name of the virtual machine template that will be used to identify the default value for the tags, virtual machine size, boot diagnostics, host cache property of OS disk, accelerated networking and availability zone. If not specified, the VM specified in master_image will be used as template.
     */
    machineProfile?: string;
    /**
     * The name of the virtual machine snapshot of a GCP VM that will be used as master image.
     */
    machineSnapshot?: string;
    /**
     * The name of the virtual machine snapshot or VM template that will be used. This identifies the hard disk to be used and the default values for the memory and processors.
     */
    masterImage: string;
    /**
     * The note for the master image.
     */
    masterImageNote: string;
    /**
     * Storage type used for provisioned virtual machine disks on GCP. Storage types include: `pd-standar`, `pd-balanced`, `pd-ssd` and `pd-extreme`.
     */
    storageType: string;
    /**
     * Write-back Cache config. Leave this empty to disable Write-back Cache.
     */
    writebackCache?: outputs.MachineCatalogProvisioningSchemeGcpMachineConfigWritebackCache;
}

export interface MachineCatalogProvisioningSchemeGcpMachineConfigImageUpdateRebootOptions {
    /**
     * Approximate maximum duration over which the reboot cycle runs, in minutes. Set to `-1` to skip reboot, and perform image update on the VDAs on next shutdown. Set to `0` to reboot all machines immediately.
     */
    rebootDuration: number;
    /**
     * Time in minutes prior to a machine reboot at which a warning message is displayed in all user sessions on that machine. When omitted, no warning about reboot will be displayed in user session.
     */
    warningDuration?: number;
    /**
     * Warning message displayed in user sessions on a machine scheduled for a reboot.  The optional pattern '%m%' is replaced by the number of minutes until the reboot.
     */
    warningMessage?: string;
    /**
     * Number of minutes to wait before showing the reboot warning message again.
     */
    warningRepeatInterval?: number;
}

export interface MachineCatalogProvisioningSchemeGcpMachineConfigWritebackCache {
    /**
     * Persist the OS disk when power cycling the non-persistent provisioned virtual machine.
     */
    persistOsDisk: boolean;
    /**
     * Persist Write-back Cache
     */
    persistWbc: boolean;
    /**
     * Type of naming scheme. Choose between Numeric and Alphabetic.
     */
    wbcDiskStorageType: string;
    /**
     * The size in GB of any temporary storage disk used by the write back cache.
     */
    writebackCacheDiskSizeGb: number;
    /**
     * The size of the in-memory write back cache in MB.
     */
    writebackCacheMemorySizeMb: number;
}

export interface MachineCatalogProvisioningSchemeMachineAccountCreationRules {
    /**
     * Defines the template name for AD accounts created in the identity pool.
     */
    namingScheme: string;
    /**
     * Type of naming scheme. This defines the format of the variable part of the AD account names that will be created. Choose between `Numeric`, `Alphabetic` and `Unicode`.
     */
    namingSchemeType: string;
}

export interface MachineCatalogProvisioningSchemeMachineDomainIdentity {
    /**
     * The AD domain name for the pool. Specify this in FQDN format; for example, MyDomain.com.
     */
    domain: string;
    /**
     * The organization unit that computer accounts will be created into.
     */
    domainOu?: string;
    /**
     * Service account for the domain. Only the username is required; do not include the domain name.
     */
    serviceAccount: string;
    /**
     * Service account password for the domain.
     */
    serviceAccountPassword: string;
}

export interface MachineCatalogProvisioningSchemeNetworkMapping {
    /**
     * The name of the virtual network that the device should be attached to. This must be a subnet within a Virtual Private Cloud item in the resource pool to which the Machine Catalog is associated.<br />For AWS, please specify the network mask of the network you want to use within the VPC.
     */
    network: string;
    /**
     * Name or Id of the network device.
     */
    networkDevice: string;
}

export interface MachineCatalogProvisioningSchemeNutanixMachineConfig {
    /**
     * The name of the container where the virtual machines' identity disks will be placed.
     */
    container: string;
    /**
     * The number of cores per processor that virtual machines created from the provisioning scheme should use.
     */
    coresPerCpuCount: number;
    /**
     * The number of processors that virtual machines created from the provisioning scheme should use.
     */
    cpuCount: number;
    /**
     * The options for how rebooting is performed for image update. When omitted, image update on the VDAs will be performed on next shutdown.
     */
    imageUpdateRebootOptions?: outputs.MachineCatalogProvisioningSchemeNutanixMachineConfigImageUpdateRebootOptions;
    /**
     * The name of the master image that will be the template for all virtual machines in this catalog.
     */
    masterImage: string;
    /**
     * The note for the master image.
     */
    masterImageNote: string;
    /**
     * The maximum amount of memory that virtual machines created from the provisioning scheme should use.
     */
    memoryMb: number;
}

export interface MachineCatalogProvisioningSchemeNutanixMachineConfigImageUpdateRebootOptions {
    /**
     * Approximate maximum duration over which the reboot cycle runs, in minutes. Set to `-1` to skip reboot, and perform image update on the VDAs on next shutdown. Set to `0` to reboot all machines immediately.
     */
    rebootDuration: number;
    /**
     * Time in minutes prior to a machine reboot at which a warning message is displayed in all user sessions on that machine. When omitted, no warning about reboot will be displayed in user session.
     */
    warningDuration?: number;
    /**
     * Warning message displayed in user sessions on a machine scheduled for a reboot.  The optional pattern '%m%' is replaced by the number of minutes until the reboot.
     */
    warningMessage?: string;
    /**
     * Number of minutes to wait before showing the reboot warning message again.
     */
    warningRepeatInterval?: number;
}

export interface MachineCatalogProvisioningSchemeScvmmMachineConfig {
    /**
     * The number of processors that virtual machines created from the provisioning scheme should use.
     */
    cpuCount: number;
    /**
     * The Snapshot of the virtual machine specified in `master_image`. Specify the relative path of the snapshot. Eg: snaphost-1/snapshot-2/snapshot-3. This property is case sensitive.
     */
    imageSnapshot: string;
    /**
     * The options for how rebooting is performed for image update. When omitted, image update on the VDAs will be performed on next shutdown.
     */
    imageUpdateRebootOptions?: outputs.MachineCatalogProvisioningSchemeScvmmMachineConfigImageUpdateRebootOptions;
    /**
     * The name of the virtual machine that will be used as master image.
     */
    masterImage: string;
    /**
     * The note for the master image.
     */
    masterImageNote: string;
    /**
     * The maximum amount of memory that virtual machines created from the provisioning scheme should use.
     */
    memoryMb: number;
    /**
     * Specify if virtual machines created from the provisioning scheme should be created using the dedicated full disk clone feature. Default is `false`.
     */
    useFullDiskCloneProvisioning: boolean;
    /**
     * Write-back Cache config. Leave this empty to disable Write-back Cache.
     */
    writebackCache?: outputs.MachineCatalogProvisioningSchemeScvmmMachineConfigWritebackCache;
}

export interface MachineCatalogProvisioningSchemeScvmmMachineConfigImageUpdateRebootOptions {
    /**
     * Approximate maximum duration over which the reboot cycle runs, in minutes. Set to `-1` to skip reboot, and perform image update on the VDAs on next shutdown. Set to `0` to reboot all machines immediately.
     */
    rebootDuration: number;
    /**
     * Time in minutes prior to a machine reboot at which a warning message is displayed in all user sessions on that machine. When omitted, no warning about reboot will be displayed in user session.
     */
    warningDuration?: number;
    /**
     * Warning message displayed in user sessions on a machine scheduled for a reboot.  The optional pattern '%m%' is replaced by the number of minutes until the reboot.
     */
    warningMessage?: string;
    /**
     * Number of minutes to wait before showing the reboot warning message again.
     */
    warningRepeatInterval?: number;
}

export interface MachineCatalogProvisioningSchemeScvmmMachineConfigWritebackCache {
    /**
     * The size in GB of any temporary storage disk used by the write back cache.
     */
    writebackCacheDiskSizeGb: number;
    /**
     * The drive letter assigned for write back cache disk.
     */
    writebackCacheDriveLetter?: string;
    /**
     * The size of the in-memory write back cache in MB.
     */
    writebackCacheMemorySizeMb: number;
}

export interface MachineCatalogProvisioningSchemeVsphereMachineConfig {
    /**
     * The number of processors that virtual machines created from the provisioning scheme should use.
     */
    cpuCount: number;
    /**
     * The Snapshot of the virtual machine specified in `master_image_vm`. Specify the relative path of the snapshot. Eg: snaphost-1/snapshot-2/snapshot-3. This property is case sensitive.
     */
    imageSnapshot: string;
    /**
     * The options for how rebooting is performed for image update. When omitted, image update on the VDAs will be performed on next shutdown.
     */
    imageUpdateRebootOptions?: outputs.MachineCatalogProvisioningSchemeVsphereMachineConfigImageUpdateRebootOptions;
    /**
     * The name of the virtual machine template that will be used to identify the default value for the tags, virtual machine size, boot diagnostics and host cache property of OS disk.
     */
    machineProfile?: string;
    /**
     * The note for the master image.
     */
    masterImageNote: string;
    /**
     * The name of the virtual machine that will be used as master image. This property is case sensitive.
     */
    masterImageVm: string;
    /**
     * The maximum amount of memory that virtual machines created from the provisioning scheme should use.
     */
    memoryMb: number;
    /**
     * Write-back Cache config. Leave this empty to disable Write-back Cache.
     */
    writebackCache?: outputs.MachineCatalogProvisioningSchemeVsphereMachineConfigWritebackCache;
}

export interface MachineCatalogProvisioningSchemeVsphereMachineConfigImageUpdateRebootOptions {
    /**
     * Approximate maximum duration over which the reboot cycle runs, in minutes. Set to `-1` to skip reboot, and perform image update on the VDAs on next shutdown. Set to `0` to reboot all machines immediately.
     */
    rebootDuration: number;
    /**
     * Time in minutes prior to a machine reboot at which a warning message is displayed in all user sessions on that machine. When omitted, no warning about reboot will be displayed in user session.
     */
    warningDuration?: number;
    /**
     * Warning message displayed in user sessions on a machine scheduled for a reboot.  The optional pattern '%m%' is replaced by the number of minutes until the reboot.
     */
    warningMessage?: string;
    /**
     * Number of minutes to wait before showing the reboot warning message again.
     */
    warningRepeatInterval?: number;
}

export interface MachineCatalogProvisioningSchemeVsphereMachineConfigWritebackCache {
    /**
     * The size in GB of any temporary storage disk used by the write back cache.
     */
    writebackCacheDiskSizeGb: number;
    /**
     * The drive letter assigned for write back cache disk.
     */
    writebackCacheDriveLetter?: string;
    /**
     * The size of the in-memory write back cache in MB.
     */
    writebackCacheMemorySizeMb: number;
}

export interface MachineCatalogProvisioningSchemeXenserverMachineConfig {
    /**
     * Number of CPU cores for the VDA VMs.
     */
    cpuCount: number;
    /**
     * The Snapshot of the virtual machine specified in `master_image_vm`. Specify the relative path of the snapshot. Eg: snaphost-1/snapshot-2/snapshot-3. This property is case sensitive.
     */
    imageSnapshot: string;
    /**
     * The options for how rebooting is performed for image update. When omitted, image update on the VDAs will be performed on next shutdown.
     */
    imageUpdateRebootOptions?: outputs.MachineCatalogProvisioningSchemeXenserverMachineConfigImageUpdateRebootOptions;
    /**
     * The note for the master image.
     */
    masterImageNote: string;
    /**
     * The name of the virtual machine that will be used as master image. This property is case sensitive.
     */
    masterImageVm: string;
    /**
     * Size of the memory in MB for the VDA VMs.
     */
    memoryMb: number;
    /**
     * Write-back Cache config. Leave this empty to disable Write-back Cache.
     */
    writebackCache?: outputs.MachineCatalogProvisioningSchemeXenserverMachineConfigWritebackCache;
}

export interface MachineCatalogProvisioningSchemeXenserverMachineConfigImageUpdateRebootOptions {
    /**
     * Approximate maximum duration over which the reboot cycle runs, in minutes. Set to `-1` to skip reboot, and perform image update on the VDAs on next shutdown. Set to `0` to reboot all machines immediately.
     */
    rebootDuration: number;
    /**
     * Time in minutes prior to a machine reboot at which a warning message is displayed in all user sessions on that machine. When omitted, no warning about reboot will be displayed in user session.
     */
    warningDuration?: number;
    /**
     * Warning message displayed in user sessions on a machine scheduled for a reboot.  The optional pattern '%m%' is replaced by the number of minutes until the reboot.
     */
    warningMessage?: string;
    /**
     * Number of minutes to wait before showing the reboot warning message again.
     */
    warningRepeatInterval?: number;
}

export interface MachineCatalogProvisioningSchemeXenserverMachineConfigWritebackCache {
    /**
     * The size in GB of any temporary storage disk used by the write back cache.
     */
    writebackCacheDiskSizeGb: number;
    /**
     * The size of the in-memory write back cache in MB.
     */
    writebackCacheMemorySizeMb: number;
}

export interface MachineCatalogRemotePcOus {
    /**
     * Specify if subfolders should be included.
     */
    includeSubfolders: boolean;
    /**
     * Name of the OU.
     */
    ouName: string;
}

export interface PolicySetPolicy {
    /**
     * Access control policy filters.
     */
    accessControlFilters: outputs.PolicySetPolicyAccessControlFilter[];
    /**
     * Set of policy filters.
     */
    branchRepeaterFilter?: outputs.PolicySetPolicyBranchRepeaterFilter;
    /**
     * Client ip policy filters.
     */
    clientIpFilters: outputs.PolicySetPolicyClientIpFilter[];
    /**
     * Client name policy filters.
     */
    clientNameFilters: outputs.PolicySetPolicyClientNameFilter[];
    /**
     * Delivery group policy filters.
     */
    deliveryGroupFilters: outputs.PolicySetPolicyDeliveryGroupFilter[];
    /**
     * Delivery group type policy filters.
     */
    deliveryGroupTypeFilters: outputs.PolicySetPolicyDeliveryGroupTypeFilter[];
    /**
     * Description of the policy.
     */
    description: string;
    /**
     * Indicate whether the policy is being enabled.
     */
    enabled: boolean;
    /**
     * Name of the policy.
     */
    name: string;
    /**
     * Organizational unit policy filters.
     */
    ouFilters: outputs.PolicySetPolicyOuFilter[];
    /**
     * Set of policy settings.
     */
    policySettings: outputs.PolicySetPolicyPolicySetting[];
    /**
     * Tag policy filters.
     */
    tagFilters: outputs.PolicySetPolicyTagFilter[];
    /**
     * User policy filters.
     */
    userFilters: outputs.PolicySetPolicyUserFilter[];
}

export interface PolicySetPolicyAccessControlFilter {
    /**
     * Indicate the filtered policy is allowed or denied if the filter condition is met.
     */
    allowed: boolean;
    /**
     * Gateway condition for the policy filter.
     */
    condition: string;
    /**
     * Gateway connection for the policy filter.
     */
    connection: string;
    /**
     * Indicate whether the filter is being enabled.
     */
    enabled: boolean;
    /**
     * Gateway for the policy filter.
     */
    gateway: string;
}

export interface PolicySetPolicyBranchRepeaterFilter {
    /**
     * Indicate the filtered policy is allowed or denied if the filter condition is met.
     */
    allowed: boolean;
    /**
     * Indicate whether the filter is being enabled.
     */
    enabled: boolean;
}

export interface PolicySetPolicyClientIpFilter {
    /**
     * Indicate the filtered policy is allowed or denied if the filter condition is met.
     */
    allowed: boolean;
    /**
     * Indicate whether the filter is being enabled.
     */
    enabled: boolean;
    /**
     * IP Address of the client to be filtered.
     */
    ipAddress: string;
}

export interface PolicySetPolicyClientNameFilter {
    /**
     * Indicate the filtered policy is allowed or denied if the filter condition is met.
     */
    allowed: boolean;
    /**
     * Name of the client to be filtered.
     */
    clientName: string;
    /**
     * Indicate whether the filter is being enabled.
     */
    enabled: boolean;
}

export interface PolicySetPolicyDeliveryGroupFilter {
    /**
     * Indicate the filtered policy is allowed or denied if the filter condition is met.
     */
    allowed: boolean;
    /**
     * Id of the delivery group to be filtered.
     */
    deliveryGroupId: string;
    /**
     * Indicate whether the filter is being enabled.
     */
    enabled: boolean;
}

export interface PolicySetPolicyDeliveryGroupTypeFilter {
    /**
     * Indicate the filtered policy is allowed or denied if the filter condition is met.
     */
    allowed: boolean;
    /**
     * Type of the delivery groups to be filtered.
     */
    deliveryGroupType: string;
    /**
     * Indicate whether the filter is being enabled.
     */
    enabled: boolean;
}

export interface PolicySetPolicyOuFilter {
    /**
     * Indicate the filtered policy is allowed or denied if the filter condition is met.
     */
    allowed: boolean;
    /**
     * Indicate whether the filter is being enabled.
     */
    enabled: boolean;
    /**
     * Organizational Unit to be filtered.
     */
    ou: string;
}

export interface PolicySetPolicyPolicySetting {
    /**
     * Whether of the policy setting has enabled or allowed value.
     */
    enabled: boolean;
    /**
     * Name of the policy setting name.
     */
    name: string;
    /**
     * Indicate whether using default value for the policy setting.
     */
    useDefault: boolean;
    /**
     * Value of the policy setting.
     */
    value: string;
}

export interface PolicySetPolicyTagFilter {
    /**
     * Indicate the filtered policy is allowed or denied if the filter condition is met.
     */
    allowed: boolean;
    /**
     * Indicate whether the filter is being enabled.
     */
    enabled: boolean;
    /**
     * Tag to be filtered.
     */
    tag: string;
}

export interface PolicySetPolicyUserFilter {
    /**
     * Indicate the filtered policy is allowed or denied if the filter condition is met.
     */
    allowed: boolean;
    /**
     * Indicate whether the filter is being enabled.
     */
    enabled: boolean;
    /**
     * SID of the user or user group to be filtered.
     */
    sid: string;
}

export interface QuickcreateAwsWorkspacesDeploymentScaleSettings {
    /**
     * Indicates buffer capacity size. Defaults to `0`.
     */
    bufferCapacitySizePercentage: number;
    /**
     * Indicates timespan before disconnect sessions that are idle in minutes. Defaults to `15`.
     */
    disconnectSessionIdleTimeout: number;
    /**
     * Indicates timespan before shut down desktops with disconnected sessions in minutes. Defaults to `15`.
     */
    shutdownDisconnectTimeout: number;
    /**
     * Indicates timespan before shut down desktops after sign-out in minutes. Defaults to `5`.
     */
    shutdownLogOffTimeout: number;
}

export interface QuickcreateAwsWorkspacesDeploymentWorkspace {
    /**
     * GUID identifier of the machine.
     */
    brokerMachineId: string;
    /**
     * Id of the machine.
     */
    machineId: string;
    /**
     * Name of the machine.
     */
    machineName: string;
    /**
     * Indicates if the workspace will be set to maintenance mode.
     */
    maintenanceMode: boolean;
    /**
     * Indicates the root volume size of the workspace.
     */
    rootVolumeSize: number;
    /**
     * Indicates the user volume size of the workspace.
     */
    userVolumeSize: number;
    /**
     * Username of the user to be assigned to this workspace. Required if `user_decoupled_workspaces` is set to `false`.
     */
    username?: string;
    /**
     * Id of the AWS WorkSpaces machine.
     */
    workspaceId: string;
}

export interface ScvmmHypervisorResourcePoolStorage {
    /**
     * The name of the storage.
     */
    storageName: string;
    /**
     * Indicates whether the storage has been superseded. Superseded storage may be used for existing virtual machines, but is not used when provisioning new virtual machines. Use only when updating the resource pool.
     */
    superseded: boolean;
}

export interface ScvmmHypervisorResourcePoolTemporaryStorage {
    /**
     * The name of the storage.
     */
    storageName: string;
    /**
     * Indicates whether the storage has been superseded. Superseded storage may be used for existing virtual machines, but is not used when provisioning new virtual machines. Use only when updating the resource pool.
     */
    superseded: boolean;
}

export interface StfRoamingGatewaySecureTicketAuthorityUrl {
    /**
     * The ID of the Secure Ticket Authority (STA) server.
     */
    authorityId: string;
    /**
     * The URL of the Secure Ticket Authority (STA) server.
     */
    staUrl: string;
    /**
     * Whether Secure Ticket Authority (STA) validation is enabled. Defaults to `false`.
     */
    staValidationEnabled: boolean;
    /**
     * The Secure Ticket Authority (STA) validation secret.
     */
    staValidationSecret?: string;
}

export interface StfStoreServiceEnumerationOptions {
    /**
     * Enable enhanced enumeration. Enumerate multiple farms in parallel to reduce operation time. Default is true.
     */
    enhancedEnumeration: boolean;
    /**
     * Exclude applications and desktops that match the keywords. Default is empty list.
     */
    filterByKeywordsExcludes: string[];
    /**
     * Only include applications and desktops that match the keywords. Default is empty list.
     */
    filterByKeywordsIncludes: string[];
    /**
     * Inclusive resource filter by type (Applications, Desktops or Documents). Default is empty list.
     */
    filterByTypesIncludes: string[];
    /**
     * Maximum farms enumerated in parallel. Default is 0.
     */
    maximumConcurrentEnumerations: number;
    /**
     * Minimum farms required for concurrent enumeration. Default is 3.
     */
    minimumFarmsRequiredForConcurrentEnumeration: number;
}

export interface StfStoreServiceFarm {
    /**
     * Period of time to skip all xml service requests should all servers fail to respond. Defaults to 0.
     */
    allFailedBypassDuration: number;
    /**
     * Period of time to skip a server when is fails to respond. Defaults to 60.
     */
    bypassDuration: number;
    /**
     * A tag indicating the scope of the farm. Valid for cloud deployments only. Defaults to empty string.
     */
    farmGuid: string;
    /**
     * The name of the Farm.
     */
    farmName: string;
    /**
     * The type of the Farm. Can be XenApp, XenDesktop, AppController, VDIinaBox, Store or SPA.
     */
    farmType: string;
    /**
     * Round robin load balance the xml service servers. Defaults to true.
     */
    loadBalance: boolean;
    /**
     * Maximum number of servers within a single farm that can fail before aborting a request.
     */
    maxFailedServersPerRequest: number;
    /**
     * Service communication port. Default is 443
     */
    port: number;
    /**
     * Cloud deployments only otherwise ignored. The product name of the farm configured. Defaults to empty string.
     */
    product: string;
    /**
     * Period of time a RADE launch ticket is valid once requested on pre 7.0 XenApp and XenDesktop farms. Defaults to 100.
     */
    radeTicketTimeToLive: number;
    /**
     * Cloud deployments only otherwise ignored. Restricts GWaaS traffic to the specified POP. Defaults to empty string.
     */
    restrictPops: string;
    /**
     * The url to the service location used to provide web and SaaS apps via this farm.
     */
    serverUrls: string[];
    /**
     * The list of servers in the Farm.
     */
    servers: string[];
    /**
     * The SSL Relay port. Default is 443
     */
    sslRelayPort: number;
    /**
     * Period of time an ICA launch ticket is valid once requested on pre 7.0 XenApp and XenDesktop farms. Defaults to 200
     */
    ticketTimeToLive: number;
    /**
     * Type of transport to use. Http, Https, SSL for example. Default to HTTPs.
     */
    transportType: string;
    /**
     * Enable XML service endpoint validation. Defaults to false.
     */
    xmlValidationEnabled: boolean;
    /**
     * XML service endpoint validation shared secret.
     */
    xmlValidationSecret: string;
    /**
     * The list of Zone names associated with the farm.
     */
    zones: string[];
}

export interface StfStoreServiceFarmSettings {
    /**
     * Indicates whether advanced healthcheck should be performed. Default value is false.
     */
    advancedHealthcheck: boolean;
    /**
     * Period of time between polling servers in timestamp format, which must be in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `0.0:1:0.
     */
    backgroundHealthcheckPolling: string;
    /**
     * Certificate Revocation Policy to use when connecting to XML services using HTTPS. Valid values are NoCheck (Default), MustCheck, FullCheck or NoNetworkAccess.
     */
    certRevocationPolicy: string;
    /**
     * Communication timeout when using to the Xml service in timestamp format, which must be in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `0.0:0:30.
     */
    communicationTimeout: string;
    /**
     * Connection timeout when using to the Xml service in timestamp format, which must be in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `0.0:0:6.
     */
    connectionTimeout: string;
    /**
     * Enable File Type Association so that content is seamlessly redirected to users subscribed applications when they open local files of the appropriate types. Default value is true.
     */
    enableFileTypeAssociation: boolean;
    /**
     * Period of time before retrying a XenDesktop 7 and greater farm in failed leasing mode in timestamp format, which must be in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `0.0:3:0.
     */
    leasingStatusExpiryFailed: string;
    /**
     * Period of time before retrying a XenDesktop 7 and greater farm in leasing mode in timestamp format, which must be in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `0.0:3:0.
     */
    leasingStatusExpiryLeasing: string;
    /**
     * Period of time before retrying a XenDesktop 7 and greater farm in pending leasing mode in timestamp format, which must be in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `0.0:3:0.
     */
    leasingStatusExpiryPending: string;
    /**
     * Use pooled sockets so that StoreFront maintains a pool of sockets. Default value is false.
     */
    pooledSockets: boolean;
    /**
     * Number of server connection attempts before failure. Default value is 1.
     */
    serverCommunicationAttempts: number;
}

export interface StfStoreServiceLaunchOptions {
    /**
     * Specifies the type of address(Dns, DnsPort, IPV4, IPV4Port, Dot, DotPort, Uri, NoChange) to use in the .ica launch file. Default is DnsPort.
     */
    addressResolutionType: string;
    /**
     * Specifies whether or not font smoothing is permitted for ICA sessions. Default is true.
     */
    allowFontSmoothing: boolean;
    /**
     * Redirect special folders such as Documents, Computer and the Desktop. Default is false.
     */
    allowSpecialFolderRedirection: boolean;
    /**
     * Specifies whether to failover to launch without the Federated Auth Service (FAS) should it become uncontactable. Default is false.
     */
    federatedAuthenticationServiceFailover: boolean;
    /**
     * Ica template to use when launching an application or desktop. Default is empty string.
     */
    icaTemplateName: string;
    /**
     * Specifies whether or not to ignore the address provided by the Citrix client. Default is false.
     */
    ignoreClientProvidedClientAddress: boolean;
    /**
     * Specifies whether a logon ticket must be duplicated in a logon ticket entry or placed in a separate .ica launch file ticket entry only. Default is false.
     */
    overlayAutoLoginCredentialsWithTicket: boolean;
    /**
     * Specifies whether or not a Web Interface-generated ID must be passed in the client name entry of an .ica launch file. Default is false.
     */
    overrideIcaClientName: boolean;
    /**
     * Configure the Store to only launch use the RDP protocol. Default is false.
     */
    rdpOnly: boolean;
    /**
     * Specifies TLS settings(SSLAnyCiphers, TLSGovCipers, DetectAnyCiphers). Default is DetectAnyCipher.
     */
    requestIcaClientSecureChannel: string;
    /**
     * Specifies whether or not the use of launch references is enforced. Default is true.
     */
    requireLaunchReference: boolean;
    /**
     * Specifies whether XenApp load bias should be used. Default is false.
     */
    setNoLoadBiasFlag: boolean;
    /**
     * The Vda logon data provider to use during launch. Default is empty string.
     */
    vdaLogonDataProvider: string;
}

export interface StfStoreServicePna {
    /**
     * Whether PNA is enabled for the Store.
     */
    enable: boolean;
}

export interface StfStoreServiceRoamingAccount {
    /**
     * Whether the roaming account is published. Default is false.
     */
    published: boolean;
}

export interface StfUserFarmMappingEquivalentFarmSet {
    /**
     * The AggregationGroupName used to de-duplicate applications and desktops that are available on multiple EquivalentFarmSets. Where multiple EquivalentFarmSets are defined the AggregationGroup will prevent the user seeing the application multiple times if it exists in both places.
     */
    aggregationGroupName: string;
    /**
     * The BackupFarms. The farm names should match those defined in the Store Service.
     */
    backupFarms: string[];
    /**
     * Whether the PrimaryFarms in the EquivalentFarmSet all publish identical resources. Set to true if all resources are identical on all primary farms. Set to false if the deployment has some unique resources per farm. Default to `false`.
     */
    farmsAreIdentical: boolean;
    /**
     * The load balance mode, either `Failover` or `LoadBalanced`.
     */
    loadBalanceMode: string;
    /**
     * The unique Name used to identify the EquivalentFarmSet.
     */
    name: string;
    /**
     * The PrimaryFarms. The farm names should match those defined in the Store service.
     */
    primaryFarms: string[];
}

export interface StfUserFarmMappingGroupMember {
    /**
     * Sid of the account.
     */
    accountSid: string;
    /**
     * A display only group name.
     */
    groupName: string;
}

export interface StfWebreceiverServiceApplicationShortcuts {
    /**
     * Set of gateways through which shortcuts will be provided to users.
     */
    gatewayUrls: string[];
    /**
     * Display confirmation dialog when Receiver for Web cannot determine if an app shortcut originated from a trusted internal site.
     */
    promptForUntrustedShortcuts: boolean;
    /**
     * Set of internal web sites that will provide app shortcuts to users.
     */
    trustedUrls: string[];
}

export interface StfWebreceiverServiceAuthenticationManager {
    /**
     * The URL to initiate a change password operation. Defaults to `ExplicitAuth/GetChangeCredentialForm`.
     */
    changeCredentialsUrl: string;
    /**
     * The URL to obtain the full username. Defaults to `Authentication/GetUserName`.
     */
    getUserNameUrl: string;
    /**
     * The WebReceiver login form timeout in minutes. Defaults to `5`.
     */
    loginFormTimeout: number;
    /**
     * The URL to log off the Citrix Receiver for Web session. Defaults to `Authentication/Logoff`.
     */
    logoffUrl: string;
}

export interface StfWebreceiverServiceCommunication {
    /**
     * The number of attempts WebReceiver should make to contact StoreFront before it gives up. Defaults to `1`.
     */
    attempts: number;
    /**
     * Whether to use the loopback address for communications with the store service, rather than the actual StoreFront server URL. Available values are `On`, `Off`, `OnUsingHttp`. Defaults to `Off`.
     */
    loopback: string;
    /**
     * When loopback is set to `OnUsingHttp`, the port number to use for loopback communications. Defaults to `80`.
     */
    loopbackPortUsingHttp: number;
    /**
     * Whether the communications proxy is enabled. Defaults to `false`.
     */
    proxyEnabled: boolean;
    /**
     * The port to use for the communications proxy. Defaults to `8888`.
     */
    proxyPort: number;
    /**
     * The name of the process acting as proxy. Defaults to `Fiddler`.
     */
    proxyProcessName: string;
    /**
     * Timeout value for communicating with StoreFront in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `0.0:3:0`.
     */
    timeout: string;
}

export interface StfWebreceiverServicePluginAssistant {
    /**
     * Enable the Plugin Assistant.
     */
    enabled: boolean;
    /**
     * The Html5 Chrome Application Origins settings.
     */
    html5ChromeAppOrigins?: string;
    /**
     * The Html5 Chrome Application preferences.
     */
    html5ChromeAppPreferences?: string;
    /**
     * Method of deploying and using the Html5 Receiver.
     */
    html5Enabled: string;
    /**
     * The supported Html5 platforms.
     */
    html5Platforms?: string;
    /**
     * Html5 Receiver preferences.
     */
    html5Preferences?: string;
    /**
     * Launch Html5 Receiver in the same browser tab.
     */
    html5SingleTabLaunch?: boolean;
    /**
     * Minimum version of the MacOS supported.
     */
    macosMinimumSupportedVersion?: string;
    /**
     * Path to the MacOS Receiver.
     */
    macosPath?: string;
    /**
     * Enable the Receiver Protocol Handler.
     */
    protocolHandlerEnabled: boolean;
    /**
     * The supported Protocol Handler platforms.
     */
    protocolHandlerPlatforms?: string;
    /**
     * Skip the Protocol Handle double hop check.
     */
    protocolHandlerSkipDoubleHopCheckWhenDisabled?: boolean;
    /**
     * Show Plugin Assistant after the user logs in.
     */
    showAfterLogin: boolean;
    /**
     * Prompt to upgrade older clients.
     */
    upgradeAtLogin: boolean;
    /**
     * Path to the Windows Receiver.
     */
    win32Path?: string;
}

export interface StfWebreceiverServiceResourcesService {
    /**
     * How long the ICA file data is cached in the memory of the Web Proxy. Defaults to `90`.
     */
    icaFileCacheExpiry: number;
    /**
     * The desired icon size sent to the Store Service in icon requests. Defaults to `128`.
     */
    iconSize: number;
    /**
     * Whether to cache icon data in the local file system. Defaults to `true`.
     */
    persistentIconCacheEnabled: boolean;
    /**
     * Shows the Citrix Desktop Viewer window and toolbar when users access their desktops from legacy clients. Defaults to `true`.
     */
    showDesktopViewer: boolean;
}

export interface StfWebreceiverServiceStrictTransportSecurity {
    /**
     * Whether to enable the HTTP Strict Transport Security feature. Defaults to `false`.
     */
    enabled: boolean;
    /**
     * The time period for which browsers should apply HSTS to the RfWeb site in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `90.0:0:0`.
     */
    policyDuration: string;
}

export interface StfWebreceiverServiceUserInterface {
    /**
     * App shortcuts configuration for the WebReceiver.
     */
    appShortcuts?: outputs.StfWebreceiverServiceUserInterfaceAppShortcuts;
    /**
     * Whether to auto-launch desktop at login if there is only one desktop available for the user. Defaults to `true`.
     */
    autoLaunchDesktop: boolean;
    /**
     * Collapse the category view so that only the immediate contents of the selected category/sub-catagory are displayed. Defaults to `false`.
     */
    categoryViewCollapsed: boolean;
    /**
     * Allows the user to turn off folder view when in a locked-down store or unauthenticated store. Defaults to `true`.
     */
    enableAppsFolderView: boolean;
    /**
     * Move uncategorized apps into a folder named ‘Uncategorized’ when the category view is collapsed. Defaults to `true`.
     */
    moveAppToUncategorized: boolean;
    /**
     * The time period in seconds for which the spinner control is displayed, after the user clicks on the App/Desktop icon within Receiver for Web. Defaults to `3`.
     */
    multiClickTimeout: number;
    /**
     * Prevent download of ICA Files. Defaults to `false`. StoreFront version 2402 or higher is required to modify this setting.
     */
    preventIcaDownloads: boolean;
    /**
     * Progressive Web App configuration for the WebReceiver.
     */
    progressiveWebApp?: outputs.StfWebreceiverServiceUserInterfaceProgressiveWebApp;
    /**
     * Receiver configuration for the WebReceiver.
     */
    receiverConfiguration?: outputs.StfWebreceiverServiceUserInterfaceReceiverConfiguration;
    /**
     * Enable the Activity Manager within the end user interface. Defaults to `true`.
     */
    showActivityManager: boolean;
    /**
     * Enable the showing of the First Time Use screen within the end user interface. Defaults to `true`.
     */
    showFirstTimeUse: boolean;
    /**
     * UI view configuration for the WebReceiver.
     */
    uiViews?: outputs.StfWebreceiverServiceUserInterfaceUiViews;
    /**
     * Workspace control configuration for the WebReceiver.
     */
    workspaceControl?: outputs.StfWebreceiverServiceUserInterfaceWorkspaceControl;
}

export interface StfWebreceiverServiceUserInterfaceAppShortcuts {
    /**
     * Enable App Shortcuts to support session reconnect. Defaults to `false`.
     */
    allowSessionReconnect: boolean;
    /**
     * Enable app shortcuts. Defaults to `false`.
     */
    enabled: boolean;
}

export interface StfWebreceiverServiceUserInterfaceProgressiveWebApp {
    /**
     * Enable Progressive Web App support. Defaults to `false`.
     */
    enabled: boolean;
    /**
     * Enable prompt to install Progressive Web App. Defaults to `false`.
     */
    showInstallPrompt: boolean;
}

export interface StfWebreceiverServiceUserInterfaceReceiverConfiguration {
    /**
     * The URL to download the Receiver Configuration .cr file.
     */
    downloadUrl: string;
    /**
     * Enable the Receiver Configuration .cr file download. Defaults to `true`.
     */
    enabled: boolean;
}

export interface StfWebreceiverServiceUserInterfaceUiViews {
    /**
     * The view to show after logon. Available values are `Auto`, `Desktops`, and `Apps`. Defaults to `Auto`.
     */
    defaultView: string;
    /**
     * Whether to show the apps view tab. Defaults to `true`.
     */
    showAppsView: boolean;
    /**
     * Whether to show the desktops tab. Defaults to `true`.
     */
    showDesktopsView: boolean;
}

export interface StfWebreceiverServiceUserInterfaceWorkspaceControl {
    /**
     * Whether to perform auto-reconnect at login. Defaults to `true`.
     */
    autoReconnectAtLogon: boolean;
    /**
     * Whether to enable workspace control. Defaults to `true`.
     */
    enabled: boolean;
    /**
     * Whether to disconnect or terminate HDX sessions when actively logging off Receiver for Web. Available values are `Disconnect`, `Terminate`, and `None`. Defaults to `Disconnect`.
     */
    logoffAction: string;
    /**
     * Whether to show the disconnect button/link. Defaults to `false`.
     */
    showDisconnectButton: boolean;
    /**
     * Whether to show the reconnect button/link. Defaults to `false`.
     */
    showReconnectButton: boolean;
}

export interface StfWebreceiverServiceWebReceiverSiteStyle {
    /**
     * Sets the background color of the header.
     */
    headerBackgroundColor: string;
    /**
     * Sets the foreground color of the header.
     */
    headerForegroundColor: string;
    /**
     * Points to the Header Logo's path in the system.
     */
    headerLogoPath: string;
    /**
     * Whether to ignore non-existent logo files and continue to set colors.
     */
    ignoreNonExistentLogos?: boolean;
    /**
     * Sets the link color of the page.
     */
    linkColor: string;
    /**
     * Points to the Logon Logo's path in the system.
     */
    logonLogoPath: string;
}

export interface VsphereHypervisorResourcePoolCluster {
    /**
     * The name of the cluster.
     */
    clusterName?: string;
    /**
     * The name of the datacenter.
     */
    datacenter: string;
    /**
     * The IP address or FQDN of the host.
     */
    host?: string;
}

export interface VsphereHypervisorResourcePoolStorage {
    /**
     * The name of the storage.
     */
    storageName: string;
    /**
     * Indicates whether the storage has been superseded. Superseded storage may be used for existing virtual machines, but is not used when provisioning new virtual machines. Use only when updating the resource pool.
     */
    superseded: boolean;
}

export interface VsphereHypervisorResourcePoolTemporaryStorage {
    /**
     * The name of the storage.
     */
    storageName: string;
    /**
     * Indicates whether the storage has been superseded. Superseded storage may be used for existing virtual machines, but is not used when provisioning new virtual machines. Use only when updating the resource pool.
     */
    superseded: boolean;
}

export interface XenserverHypervisorResourcePoolStorage {
    /**
     * The name of the storage.
     */
    storageName: string;
    /**
     * Indicates whether the storage has been superseded. Superseded storage may be used for existing virtual machines, but is not used when provisioning new virtual machines. Use only when updating the resource pool.
     */
    superseded: boolean;
}

export interface XenserverHypervisorResourcePoolTemporaryStorage {
    /**
     * The name of the storage.
     */
    storageName: string;
    /**
     * Indicates whether the storage has been superseded. Superseded storage may be used for existing virtual machines, but is not used when provisioning new virtual machines. Use only when updating the resource pool.
     */
    superseded: boolean;
}

export interface ZoneMetadata {
    /**
     * Metadata name.
     */
    name: string;
    /**
     * Metadata value.
     */
    value: string;
}

export namespace config {
    export interface CvadConfig {
        /**
         * Client Id for Citrix DaaS service authentication. <br />For Citrix On-Premises customers: Use this to specify a DDC administrator username. <br />For Citrix Cloud customers: Use this to specify Cloud API Key Client Id.<br />Can be set via Environment Variable **CITRIX_CLIENT_ID**.
         */
        clientId?: string;
        /**
         * Client Secret for Citrix DaaS service authentication. <br />For Citrix on-premises customers: Use this to specify a DDC administrator password. <br />For Citrix Cloud customers: Use this to specify Cloud API Key Client Secret.<br />Can be set via Environment Variable **CITRIX_CLIENT_SECRET**.
         */
        clientSecret?: string;
        /**
         * Citrix Cloud customer ID. Only applicable for Citrix Cloud customers.<br />Can be set via Environment Variable **CITRIX_CUSTOMER_ID**.
         */
        customerId?: string;
        /**
         * Disable SSL verification against the target DDC. <br />Only applicable to on-premises customers. Citrix Cloud customers should omit this option. Set to true to skip SSL verification only when the target DDC does not have a valid SSL certificate issued by a trusted CA. <br />When set to true, please make sure that your provider config is set for a known DDC hostname. <br />[It is recommended to configure a valid certificate for the target DDC](https://docs.citrix.com/en-us/citrix-virtual-apps-desktops/install-configure/install-core/secure-web-studio-deployment) <br />Can be set via Environment Variable **CITRIX_DISABLE_SSL_VERIFICATION**.
         */
        disableSslVerification?: boolean;
        /**
         * Citrix Cloud environment of the customer. Only applicable for Citrix Cloud customers. Available options: `Production`, `Staging`, `Japan`, `JapanStaging`, `Gov`, `GovStaging`. <br />Can be set via Environment Variable **CITRIX_ENVIRONMENT**.
         */
        environment?: string;
        /**
         * Host name / base URL of Citrix DaaS service. <br />For Citrix on-premises customers (Required): Use this to specify Delivery Controller hostname. <br />For Citrix Cloud customers (Optional): Use this to force override the Citrix DaaS service hostname.<br />Can be set via Environment Variable **CITRIX_HOSTNAME**.
         */
        hostname?: string;
    }

    export interface StorefrontRemoteHost {
        /**
         * Active Directory Admin Password to connect to storefront server <br />Only applicable for Citrix on-premises customers. Use this to specify AD admin password<br />Can be set via Environment Variable **SF_AD_ADMIN_PASSWORD**.
         */
        adAdminPassword: string;
        /**
         * Active Directory Admin Username to connect to storefront server <br />Only applicable for Citrix on-premises customers. Use this to specify AD admin username <br />Can be set via Environment Variable **SF_AD_ADMIN_USERNAME**.
         */
        adAdminUsername: string;
        /**
         * StoreFront server computer Name <br />Only applicable for Citrix on-premises customers. Use this to specify StoreFront server computer name <br />Can be set via Environment Variable **SF_COMPUTER_NAME**.
         */
        computerName: string;
        /**
         * Disable SSL verification against the target storefront server. <br />Only applicable to customers connecting to storefront server remotely. Customers should omit this option when running storefront provider locally. Set to true to skip SSL verification only when the target DDC does not have a valid SSL certificate issued by a trusted CA. <br />When set to true, please make sure that your provider storefront_remote_host is set for a known storefront hostname. <br />Can be set via Environment Variable **SF_DISABLE_SSL_VERIFICATION**.
         */
        disableSslVerification?: boolean;
    }

}
