// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AdminFolderArgs, AdminFolderState } from "./adminFolder";
export type AdminFolder = import("./adminFolder").AdminFolder;
export const AdminFolder: typeof import("./adminFolder").AdminFolder = null as any;
utilities.lazyLoad(exports, ["AdminFolder"], () => require("./adminFolder"));

export { AdminRoleArgs, AdminRoleState } from "./adminRole";
export type AdminRole = import("./adminRole").AdminRole;
export const AdminRole: typeof import("./adminRole").AdminRole = null as any;
utilities.lazyLoad(exports, ["AdminRole"], () => require("./adminRole"));

export { AdminScopeArgs, AdminScopeState } from "./adminScope";
export type AdminScope = import("./adminScope").AdminScope;
export const AdminScope: typeof import("./adminScope").AdminScope = null as any;
utilities.lazyLoad(exports, ["AdminScope"], () => require("./adminScope"));

export { AdminUserArgs, AdminUserState } from "./adminUser";
export type AdminUser = import("./adminUser").AdminUser;
export const AdminUser: typeof import("./adminUser").AdminUser = null as any;
utilities.lazyLoad(exports, ["AdminUser"], () => require("./adminUser"));

export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationGroupArgs, ApplicationGroupState } from "./applicationGroup";
export type ApplicationGroup = import("./applicationGroup").ApplicationGroup;
export const ApplicationGroup: typeof import("./applicationGroup").ApplicationGroup = null as any;
utilities.lazyLoad(exports, ["ApplicationGroup"], () => require("./applicationGroup"));

export { ApplicationIconArgs, ApplicationIconState } from "./applicationIcon";
export type ApplicationIcon = import("./applicationIcon").ApplicationIcon;
export const ApplicationIcon: typeof import("./applicationIcon").ApplicationIcon = null as any;
utilities.lazyLoad(exports, ["ApplicationIcon"], () => require("./applicationIcon"));

export { AwsHypervisorArgs, AwsHypervisorState } from "./awsHypervisor";
export type AwsHypervisor = import("./awsHypervisor").AwsHypervisor;
export const AwsHypervisor: typeof import("./awsHypervisor").AwsHypervisor = null as any;
utilities.lazyLoad(exports, ["AwsHypervisor"], () => require("./awsHypervisor"));

export { AwsHypervisorResourcePoolArgs, AwsHypervisorResourcePoolState } from "./awsHypervisorResourcePool";
export type AwsHypervisorResourcePool = import("./awsHypervisorResourcePool").AwsHypervisorResourcePool;
export const AwsHypervisorResourcePool: typeof import("./awsHypervisorResourcePool").AwsHypervisorResourcePool = null as any;
utilities.lazyLoad(exports, ["AwsHypervisorResourcePool"], () => require("./awsHypervisorResourcePool"));

export { AzureHypervisorArgs, AzureHypervisorState } from "./azureHypervisor";
export type AzureHypervisor = import("./azureHypervisor").AzureHypervisor;
export const AzureHypervisor: typeof import("./azureHypervisor").AzureHypervisor = null as any;
utilities.lazyLoad(exports, ["AzureHypervisor"], () => require("./azureHypervisor"));

export { AzureHypervisorResourcePoolArgs, AzureHypervisorResourcePoolState } from "./azureHypervisorResourcePool";
export type AzureHypervisorResourcePool = import("./azureHypervisorResourcePool").AzureHypervisorResourcePool;
export const AzureHypervisorResourcePool: typeof import("./azureHypervisorResourcePool").AzureHypervisorResourcePool = null as any;
utilities.lazyLoad(exports, ["AzureHypervisorResourcePool"], () => require("./azureHypervisorResourcePool"));

export { CloudAdminUserArgs, CloudAdminUserState } from "./cloudAdminUser";
export type CloudAdminUser = import("./cloudAdminUser").CloudAdminUser;
export const CloudAdminUser: typeof import("./cloudAdminUser").CloudAdminUser = null as any;
utilities.lazyLoad(exports, ["CloudAdminUser"], () => require("./cloudAdminUser"));

export { CloudResourceLocationArgs, CloudResourceLocationState } from "./cloudResourceLocation";
export type CloudResourceLocation = import("./cloudResourceLocation").CloudResourceLocation;
export const CloudResourceLocation: typeof import("./cloudResourceLocation").CloudResourceLocation = null as any;
utilities.lazyLoad(exports, ["CloudResourceLocation"], () => require("./cloudResourceLocation"));

export { DeliveryGroupArgs, DeliveryGroupState } from "./deliveryGroup";
export type DeliveryGroup = import("./deliveryGroup").DeliveryGroup;
export const DeliveryGroup: typeof import("./deliveryGroup").DeliveryGroup = null as any;
utilities.lazyLoad(exports, ["DeliveryGroup"], () => require("./deliveryGroup"));

export { GacSettingsArgs, GacSettingsState } from "./gacSettings";
export type GacSettings = import("./gacSettings").GacSettings;
export const GacSettings: typeof import("./gacSettings").GacSettings = null as any;
utilities.lazyLoad(exports, ["GacSettings"], () => require("./gacSettings"));

export { GcpHypervisorArgs, GcpHypervisorState } from "./gcpHypervisor";
export type GcpHypervisor = import("./gcpHypervisor").GcpHypervisor;
export const GcpHypervisor: typeof import("./gcpHypervisor").GcpHypervisor = null as any;
utilities.lazyLoad(exports, ["GcpHypervisor"], () => require("./gcpHypervisor"));

export { GcpHypervisorResourcePoolArgs, GcpHypervisorResourcePoolState } from "./gcpHypervisorResourcePool";
export type GcpHypervisorResourcePool = import("./gcpHypervisorResourcePool").GcpHypervisorResourcePool;
export const GcpHypervisorResourcePool: typeof import("./gcpHypervisorResourcePool").GcpHypervisorResourcePool = null as any;
utilities.lazyLoad(exports, ["GcpHypervisorResourcePool"], () => require("./gcpHypervisorResourcePool"));

export { GetAdminFolderArgs, GetAdminFolderResult, GetAdminFolderOutputArgs } from "./getAdminFolder";
export const getAdminFolder: typeof import("./getAdminFolder").getAdminFolder = null as any;
export const getAdminFolderOutput: typeof import("./getAdminFolder").getAdminFolderOutput = null as any;
utilities.lazyLoad(exports, ["getAdminFolder","getAdminFolderOutput"], () => require("./getAdminFolder"));

export { GetAdminScopeArgs, GetAdminScopeResult, GetAdminScopeOutputArgs } from "./getAdminScope";
export const getAdminScope: typeof import("./getAdminScope").getAdminScope = null as any;
export const getAdminScopeOutput: typeof import("./getAdminScope").getAdminScopeOutput = null as any;
utilities.lazyLoad(exports, ["getAdminScope","getAdminScopeOutput"], () => require("./getAdminScope"));

export { GetApplicationFolderDetailsArgs, GetApplicationFolderDetailsResult, GetApplicationFolderDetailsOutputArgs } from "./getApplicationFolderDetails";
export const getApplicationFolderDetails: typeof import("./getApplicationFolderDetails").getApplicationFolderDetails = null as any;
export const getApplicationFolderDetailsOutput: typeof import("./getApplicationFolderDetails").getApplicationFolderDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationFolderDetails","getApplicationFolderDetailsOutput"], () => require("./getApplicationFolderDetails"));

export { GetBearerTokenResult } from "./getBearerToken";
export const getBearerToken: typeof import("./getBearerToken").getBearerToken = null as any;
export const getBearerTokenOutput: typeof import("./getBearerToken").getBearerTokenOutput = null as any;
utilities.lazyLoad(exports, ["getBearerToken","getBearerTokenOutput"], () => require("./getBearerToken"));

export { GetDeliveryGroupArgs, GetDeliveryGroupResult, GetDeliveryGroupOutputArgs } from "./getDeliveryGroup";
export const getDeliveryGroup: typeof import("./getDeliveryGroup").getDeliveryGroup = null as any;
export const getDeliveryGroupOutput: typeof import("./getDeliveryGroup").getDeliveryGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDeliveryGroup","getDeliveryGroupOutput"], () => require("./getDeliveryGroup"));

export { GetHypervisorArgs, GetHypervisorResult, GetHypervisorOutputArgs } from "./getHypervisor";
export const getHypervisor: typeof import("./getHypervisor").getHypervisor = null as any;
export const getHypervisorOutput: typeof import("./getHypervisor").getHypervisorOutput = null as any;
utilities.lazyLoad(exports, ["getHypervisor","getHypervisorOutput"], () => require("./getHypervisor"));

export { GetHypervisorResourcePoolArgs, GetHypervisorResourcePoolResult, GetHypervisorResourcePoolOutputArgs } from "./getHypervisorResourcePool";
export const getHypervisorResourcePool: typeof import("./getHypervisorResourcePool").getHypervisorResourcePool = null as any;
export const getHypervisorResourcePoolOutput: typeof import("./getHypervisorResourcePool").getHypervisorResourcePoolOutput = null as any;
utilities.lazyLoad(exports, ["getHypervisorResourcePool","getHypervisorResourcePoolOutput"], () => require("./getHypervisorResourcePool"));

export { GetMachineCatalogArgs, GetMachineCatalogResult, GetMachineCatalogOutputArgs } from "./getMachineCatalog";
export const getMachineCatalog: typeof import("./getMachineCatalog").getMachineCatalog = null as any;
export const getMachineCatalogOutput: typeof import("./getMachineCatalog").getMachineCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getMachineCatalog","getMachineCatalogOutput"], () => require("./getMachineCatalog"));

export { GetPvsArgs, GetPvsResult, GetPvsOutputArgs } from "./getPvs";
export const getPvs: typeof import("./getPvs").getPvs = null as any;
export const getPvsOutput: typeof import("./getPvs").getPvsOutput = null as any;
utilities.lazyLoad(exports, ["getPvs","getPvsOutput"], () => require("./getPvs"));

export { GetQuickcreateAwsWorkspacesAccountArgs, GetQuickcreateAwsWorkspacesAccountResult, GetQuickcreateAwsWorkspacesAccountOutputArgs } from "./getQuickcreateAwsWorkspacesAccount";
export const getQuickcreateAwsWorkspacesAccount: typeof import("./getQuickcreateAwsWorkspacesAccount").getQuickcreateAwsWorkspacesAccount = null as any;
export const getQuickcreateAwsWorkspacesAccountOutput: typeof import("./getQuickcreateAwsWorkspacesAccount").getQuickcreateAwsWorkspacesAccountOutput = null as any;
utilities.lazyLoad(exports, ["getQuickcreateAwsWorkspacesAccount","getQuickcreateAwsWorkspacesAccountOutput"], () => require("./getQuickcreateAwsWorkspacesAccount"));

export { GetQuickcreateAwsWorkspacesDeploymentArgs, GetQuickcreateAwsWorkspacesDeploymentResult, GetQuickcreateAwsWorkspacesDeploymentOutputArgs } from "./getQuickcreateAwsWorkspacesDeployment";
export const getQuickcreateAwsWorkspacesDeployment: typeof import("./getQuickcreateAwsWorkspacesDeployment").getQuickcreateAwsWorkspacesDeployment = null as any;
export const getQuickcreateAwsWorkspacesDeploymentOutput: typeof import("./getQuickcreateAwsWorkspacesDeployment").getQuickcreateAwsWorkspacesDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getQuickcreateAwsWorkspacesDeployment","getQuickcreateAwsWorkspacesDeploymentOutput"], () => require("./getQuickcreateAwsWorkspacesDeployment"));

export { GetQuickcreateAwsWorkspacesDirectoryConnectionArgs, GetQuickcreateAwsWorkspacesDirectoryConnectionResult, GetQuickcreateAwsWorkspacesDirectoryConnectionOutputArgs } from "./getQuickcreateAwsWorkspacesDirectoryConnection";
export const getQuickcreateAwsWorkspacesDirectoryConnection: typeof import("./getQuickcreateAwsWorkspacesDirectoryConnection").getQuickcreateAwsWorkspacesDirectoryConnection = null as any;
export const getQuickcreateAwsWorkspacesDirectoryConnectionOutput: typeof import("./getQuickcreateAwsWorkspacesDirectoryConnection").getQuickcreateAwsWorkspacesDirectoryConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getQuickcreateAwsWorkspacesDirectoryConnection","getQuickcreateAwsWorkspacesDirectoryConnectionOutput"], () => require("./getQuickcreateAwsWorkspacesDirectoryConnection"));

export { GetQuickcreateAwsWorkspacesImageArgs, GetQuickcreateAwsWorkspacesImageResult, GetQuickcreateAwsWorkspacesImageOutputArgs } from "./getQuickcreateAwsWorkspacesImage";
export const getQuickcreateAwsWorkspacesImage: typeof import("./getQuickcreateAwsWorkspacesImage").getQuickcreateAwsWorkspacesImage = null as any;
export const getQuickcreateAwsWorkspacesImageOutput: typeof import("./getQuickcreateAwsWorkspacesImage").getQuickcreateAwsWorkspacesImageOutput = null as any;
utilities.lazyLoad(exports, ["getQuickcreateAwsWorkspacesImage","getQuickcreateAwsWorkspacesImageOutput"], () => require("./getQuickcreateAwsWorkspacesImage"));

export { GetSiteResult } from "./getSite";
export const getSite: typeof import("./getSite").getSite = null as any;
export const getSiteOutput: typeof import("./getSite").getSiteOutput = null as any;
utilities.lazyLoad(exports, ["getSite","getSiteOutput"], () => require("./getSite"));

export { GetStfRoamingServiceArgs, GetStfRoamingServiceResult, GetStfRoamingServiceOutputArgs } from "./getStfRoamingService";
export const getStfRoamingService: typeof import("./getStfRoamingService").getStfRoamingService = null as any;
export const getStfRoamingServiceOutput: typeof import("./getStfRoamingService").getStfRoamingServiceOutput = null as any;
utilities.lazyLoad(exports, ["getStfRoamingService","getStfRoamingServiceOutput"], () => require("./getStfRoamingService"));

export { GetVdaArgs, GetVdaResult, GetVdaOutputArgs } from "./getVda";
export const getVda: typeof import("./getVda").getVda = null as any;
export const getVdaOutput: typeof import("./getVda").getVdaOutput = null as any;
utilities.lazyLoad(exports, ["getVda","getVdaOutput"], () => require("./getVda"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { MachineCatalogArgs, MachineCatalogState } from "./machineCatalog";
export type MachineCatalog = import("./machineCatalog").MachineCatalog;
export const MachineCatalog: typeof import("./machineCatalog").MachineCatalog = null as any;
utilities.lazyLoad(exports, ["MachineCatalog"], () => require("./machineCatalog"));

export { NutanixHypervisorArgs, NutanixHypervisorState } from "./nutanixHypervisor";
export type NutanixHypervisor = import("./nutanixHypervisor").NutanixHypervisor;
export const NutanixHypervisor: typeof import("./nutanixHypervisor").NutanixHypervisor = null as any;
utilities.lazyLoad(exports, ["NutanixHypervisor"], () => require("./nutanixHypervisor"));

export { NutanixHypervisorResourcePoolArgs, NutanixHypervisorResourcePoolState } from "./nutanixHypervisorResourcePool";
export type NutanixHypervisorResourcePool = import("./nutanixHypervisorResourcePool").NutanixHypervisorResourcePool;
export const NutanixHypervisorResourcePool: typeof import("./nutanixHypervisorResourcePool").NutanixHypervisorResourcePool = null as any;
utilities.lazyLoad(exports, ["NutanixHypervisorResourcePool"], () => require("./nutanixHypervisorResourcePool"));

export { PolicySetArgs, PolicySetState } from "./policySet";
export type PolicySet = import("./policySet").PolicySet;
export const PolicySet: typeof import("./policySet").PolicySet = null as any;
utilities.lazyLoad(exports, ["PolicySet"], () => require("./policySet"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QuickcreateAwsWorkspacesAccountArgs, QuickcreateAwsWorkspacesAccountState } from "./quickcreateAwsWorkspacesAccount";
export type QuickcreateAwsWorkspacesAccount = import("./quickcreateAwsWorkspacesAccount").QuickcreateAwsWorkspacesAccount;
export const QuickcreateAwsWorkspacesAccount: typeof import("./quickcreateAwsWorkspacesAccount").QuickcreateAwsWorkspacesAccount = null as any;
utilities.lazyLoad(exports, ["QuickcreateAwsWorkspacesAccount"], () => require("./quickcreateAwsWorkspacesAccount"));

export { QuickcreateAwsWorkspacesDeploymentArgs, QuickcreateAwsWorkspacesDeploymentState } from "./quickcreateAwsWorkspacesDeployment";
export type QuickcreateAwsWorkspacesDeployment = import("./quickcreateAwsWorkspacesDeployment").QuickcreateAwsWorkspacesDeployment;
export const QuickcreateAwsWorkspacesDeployment: typeof import("./quickcreateAwsWorkspacesDeployment").QuickcreateAwsWorkspacesDeployment = null as any;
utilities.lazyLoad(exports, ["QuickcreateAwsWorkspacesDeployment"], () => require("./quickcreateAwsWorkspacesDeployment"));

export { QuickcreateAwsWorkspacesDirectoryConnectionArgs, QuickcreateAwsWorkspacesDirectoryConnectionState } from "./quickcreateAwsWorkspacesDirectoryConnection";
export type QuickcreateAwsWorkspacesDirectoryConnection = import("./quickcreateAwsWorkspacesDirectoryConnection").QuickcreateAwsWorkspacesDirectoryConnection;
export const QuickcreateAwsWorkspacesDirectoryConnection: typeof import("./quickcreateAwsWorkspacesDirectoryConnection").QuickcreateAwsWorkspacesDirectoryConnection = null as any;
utilities.lazyLoad(exports, ["QuickcreateAwsWorkspacesDirectoryConnection"], () => require("./quickcreateAwsWorkspacesDirectoryConnection"));

export { QuickcreateAwsWorkspacesImageArgs, QuickcreateAwsWorkspacesImageState } from "./quickcreateAwsWorkspacesImage";
export type QuickcreateAwsWorkspacesImage = import("./quickcreateAwsWorkspacesImage").QuickcreateAwsWorkspacesImage;
export const QuickcreateAwsWorkspacesImage: typeof import("./quickcreateAwsWorkspacesImage").QuickcreateAwsWorkspacesImage = null as any;
utilities.lazyLoad(exports, ["QuickcreateAwsWorkspacesImage"], () => require("./quickcreateAwsWorkspacesImage"));

export { ScvmmHypervisorArgs, ScvmmHypervisorState } from "./scvmmHypervisor";
export type ScvmmHypervisor = import("./scvmmHypervisor").ScvmmHypervisor;
export const ScvmmHypervisor: typeof import("./scvmmHypervisor").ScvmmHypervisor = null as any;
utilities.lazyLoad(exports, ["ScvmmHypervisor"], () => require("./scvmmHypervisor"));

export { ScvmmHypervisorResourcePoolArgs, ScvmmHypervisorResourcePoolState } from "./scvmmHypervisorResourcePool";
export type ScvmmHypervisorResourcePool = import("./scvmmHypervisorResourcePool").ScvmmHypervisorResourcePool;
export const ScvmmHypervisorResourcePool: typeof import("./scvmmHypervisorResourcePool").ScvmmHypervisorResourcePool = null as any;
utilities.lazyLoad(exports, ["ScvmmHypervisorResourcePool"], () => require("./scvmmHypervisorResourcePool"));

export { StfAuthenticationServiceArgs, StfAuthenticationServiceState } from "./stfAuthenticationService";
export type StfAuthenticationService = import("./stfAuthenticationService").StfAuthenticationService;
export const StfAuthenticationService: typeof import("./stfAuthenticationService").StfAuthenticationService = null as any;
utilities.lazyLoad(exports, ["StfAuthenticationService"], () => require("./stfAuthenticationService"));

export { StfDeploymentArgs, StfDeploymentState } from "./stfDeployment";
export type StfDeployment = import("./stfDeployment").StfDeployment;
export const StfDeployment: typeof import("./stfDeployment").StfDeployment = null as any;
utilities.lazyLoad(exports, ["StfDeployment"], () => require("./stfDeployment"));

export { StfRoamingBeaconArgs, StfRoamingBeaconState } from "./stfRoamingBeacon";
export type StfRoamingBeacon = import("./stfRoamingBeacon").StfRoamingBeacon;
export const StfRoamingBeacon: typeof import("./stfRoamingBeacon").StfRoamingBeacon = null as any;
utilities.lazyLoad(exports, ["StfRoamingBeacon"], () => require("./stfRoamingBeacon"));

export { StfRoamingGatewayArgs, StfRoamingGatewayState } from "./stfRoamingGateway";
export type StfRoamingGateway = import("./stfRoamingGateway").StfRoamingGateway;
export const StfRoamingGateway: typeof import("./stfRoamingGateway").StfRoamingGateway = null as any;
utilities.lazyLoad(exports, ["StfRoamingGateway"], () => require("./stfRoamingGateway"));

export { StfStoreServiceArgs, StfStoreServiceState } from "./stfStoreService";
export type StfStoreService = import("./stfStoreService").StfStoreService;
export const StfStoreService: typeof import("./stfStoreService").StfStoreService = null as any;
utilities.lazyLoad(exports, ["StfStoreService"], () => require("./stfStoreService"));

export { StfUserFarmMappingArgs, StfUserFarmMappingState } from "./stfUserFarmMapping";
export type StfUserFarmMapping = import("./stfUserFarmMapping").StfUserFarmMapping;
export const StfUserFarmMapping: typeof import("./stfUserFarmMapping").StfUserFarmMapping = null as any;
utilities.lazyLoad(exports, ["StfUserFarmMapping"], () => require("./stfUserFarmMapping"));

export { StfWebreceiverServiceArgs, StfWebreceiverServiceState } from "./stfWebreceiverService";
export type StfWebreceiverService = import("./stfWebreceiverService").StfWebreceiverService;
export const StfWebreceiverService: typeof import("./stfWebreceiverService").StfWebreceiverService = null as any;
utilities.lazyLoad(exports, ["StfWebreceiverService"], () => require("./stfWebreceiverService"));

export { StfXenappDefaultStoreArgs, StfXenappDefaultStoreState } from "./stfXenappDefaultStore";
export type StfXenappDefaultStore = import("./stfXenappDefaultStore").StfXenappDefaultStore;
export const StfXenappDefaultStore: typeof import("./stfXenappDefaultStore").StfXenappDefaultStore = null as any;
utilities.lazyLoad(exports, ["StfXenappDefaultStore"], () => require("./stfXenappDefaultStore"));

export { StorefrontServerArgs, StorefrontServerState } from "./storefrontServer";
export type StorefrontServer = import("./storefrontServer").StorefrontServer;
export const StorefrontServer: typeof import("./storefrontServer").StorefrontServer = null as any;
utilities.lazyLoad(exports, ["StorefrontServer"], () => require("./storefrontServer"));

export { VsphereHypervisorArgs, VsphereHypervisorState } from "./vsphereHypervisor";
export type VsphereHypervisor = import("./vsphereHypervisor").VsphereHypervisor;
export const VsphereHypervisor: typeof import("./vsphereHypervisor").VsphereHypervisor = null as any;
utilities.lazyLoad(exports, ["VsphereHypervisor"], () => require("./vsphereHypervisor"));

export { VsphereHypervisorResourcePoolArgs, VsphereHypervisorResourcePoolState } from "./vsphereHypervisorResourcePool";
export type VsphereHypervisorResourcePool = import("./vsphereHypervisorResourcePool").VsphereHypervisorResourcePool;
export const VsphereHypervisorResourcePool: typeof import("./vsphereHypervisorResourcePool").VsphereHypervisorResourcePool = null as any;
utilities.lazyLoad(exports, ["VsphereHypervisorResourcePool"], () => require("./vsphereHypervisorResourcePool"));

export { XenserverHypervisorArgs, XenserverHypervisorState } from "./xenserverHypervisor";
export type XenserverHypervisor = import("./xenserverHypervisor").XenserverHypervisor;
export const XenserverHypervisor: typeof import("./xenserverHypervisor").XenserverHypervisor = null as any;
utilities.lazyLoad(exports, ["XenserverHypervisor"], () => require("./xenserverHypervisor"));

export { XenserverHypervisorResourcePoolArgs, XenserverHypervisorResourcePoolState } from "./xenserverHypervisorResourcePool";
export type XenserverHypervisorResourcePool = import("./xenserverHypervisorResourcePool").XenserverHypervisorResourcePool;
export const XenserverHypervisorResourcePool: typeof import("./xenserverHypervisorResourcePool").XenserverHypervisorResourcePool = null as any;
utilities.lazyLoad(exports, ["XenserverHypervisorResourcePool"], () => require("./xenserverHypervisorResourcePool"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "citrix:index/adminFolder:AdminFolder":
                return new AdminFolder(name, <any>undefined, { urn })
            case "citrix:index/adminRole:AdminRole":
                return new AdminRole(name, <any>undefined, { urn })
            case "citrix:index/adminScope:AdminScope":
                return new AdminScope(name, <any>undefined, { urn })
            case "citrix:index/adminUser:AdminUser":
                return new AdminUser(name, <any>undefined, { urn })
            case "citrix:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "citrix:index/applicationGroup:ApplicationGroup":
                return new ApplicationGroup(name, <any>undefined, { urn })
            case "citrix:index/applicationIcon:ApplicationIcon":
                return new ApplicationIcon(name, <any>undefined, { urn })
            case "citrix:index/awsHypervisor:AwsHypervisor":
                return new AwsHypervisor(name, <any>undefined, { urn })
            case "citrix:index/awsHypervisorResourcePool:AwsHypervisorResourcePool":
                return new AwsHypervisorResourcePool(name, <any>undefined, { urn })
            case "citrix:index/azureHypervisor:AzureHypervisor":
                return new AzureHypervisor(name, <any>undefined, { urn })
            case "citrix:index/azureHypervisorResourcePool:AzureHypervisorResourcePool":
                return new AzureHypervisorResourcePool(name, <any>undefined, { urn })
            case "citrix:index/cloudAdminUser:CloudAdminUser":
                return new CloudAdminUser(name, <any>undefined, { urn })
            case "citrix:index/cloudResourceLocation:CloudResourceLocation":
                return new CloudResourceLocation(name, <any>undefined, { urn })
            case "citrix:index/deliveryGroup:DeliveryGroup":
                return new DeliveryGroup(name, <any>undefined, { urn })
            case "citrix:index/gacSettings:GacSettings":
                return new GacSettings(name, <any>undefined, { urn })
            case "citrix:index/gcpHypervisor:GcpHypervisor":
                return new GcpHypervisor(name, <any>undefined, { urn })
            case "citrix:index/gcpHypervisorResourcePool:GcpHypervisorResourcePool":
                return new GcpHypervisorResourcePool(name, <any>undefined, { urn })
            case "citrix:index/machineCatalog:MachineCatalog":
                return new MachineCatalog(name, <any>undefined, { urn })
            case "citrix:index/nutanixHypervisor:NutanixHypervisor":
                return new NutanixHypervisor(name, <any>undefined, { urn })
            case "citrix:index/nutanixHypervisorResourcePool:NutanixHypervisorResourcePool":
                return new NutanixHypervisorResourcePool(name, <any>undefined, { urn })
            case "citrix:index/policySet:PolicySet":
                return new PolicySet(name, <any>undefined, { urn })
            case "citrix:index/quickcreateAwsWorkspacesAccount:QuickcreateAwsWorkspacesAccount":
                return new QuickcreateAwsWorkspacesAccount(name, <any>undefined, { urn })
            case "citrix:index/quickcreateAwsWorkspacesDeployment:QuickcreateAwsWorkspacesDeployment":
                return new QuickcreateAwsWorkspacesDeployment(name, <any>undefined, { urn })
            case "citrix:index/quickcreateAwsWorkspacesDirectoryConnection:QuickcreateAwsWorkspacesDirectoryConnection":
                return new QuickcreateAwsWorkspacesDirectoryConnection(name, <any>undefined, { urn })
            case "citrix:index/quickcreateAwsWorkspacesImage:QuickcreateAwsWorkspacesImage":
                return new QuickcreateAwsWorkspacesImage(name, <any>undefined, { urn })
            case "citrix:index/scvmmHypervisor:ScvmmHypervisor":
                return new ScvmmHypervisor(name, <any>undefined, { urn })
            case "citrix:index/scvmmHypervisorResourcePool:ScvmmHypervisorResourcePool":
                return new ScvmmHypervisorResourcePool(name, <any>undefined, { urn })
            case "citrix:index/stfAuthenticationService:StfAuthenticationService":
                return new StfAuthenticationService(name, <any>undefined, { urn })
            case "citrix:index/stfDeployment:StfDeployment":
                return new StfDeployment(name, <any>undefined, { urn })
            case "citrix:index/stfRoamingBeacon:StfRoamingBeacon":
                return new StfRoamingBeacon(name, <any>undefined, { urn })
            case "citrix:index/stfRoamingGateway:StfRoamingGateway":
                return new StfRoamingGateway(name, <any>undefined, { urn })
            case "citrix:index/stfStoreService:StfStoreService":
                return new StfStoreService(name, <any>undefined, { urn })
            case "citrix:index/stfUserFarmMapping:StfUserFarmMapping":
                return new StfUserFarmMapping(name, <any>undefined, { urn })
            case "citrix:index/stfWebreceiverService:StfWebreceiverService":
                return new StfWebreceiverService(name, <any>undefined, { urn })
            case "citrix:index/stfXenappDefaultStore:StfXenappDefaultStore":
                return new StfXenappDefaultStore(name, <any>undefined, { urn })
            case "citrix:index/storefrontServer:StorefrontServer":
                return new StorefrontServer(name, <any>undefined, { urn })
            case "citrix:index/vsphereHypervisor:VsphereHypervisor":
                return new VsphereHypervisor(name, <any>undefined, { urn })
            case "citrix:index/vsphereHypervisorResourcePool:VsphereHypervisorResourcePool":
                return new VsphereHypervisorResourcePool(name, <any>undefined, { urn })
            case "citrix:index/xenserverHypervisor:XenserverHypervisor":
                return new XenserverHypervisor(name, <any>undefined, { urn })
            case "citrix:index/xenserverHypervisorResourcePool:XenserverHypervisorResourcePool":
                return new XenserverHypervisorResourcePool(name, <any>undefined, { urn })
            case "citrix:index/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("citrix", "index/adminFolder", _module)
pulumi.runtime.registerResourceModule("citrix", "index/adminRole", _module)
pulumi.runtime.registerResourceModule("citrix", "index/adminScope", _module)
pulumi.runtime.registerResourceModule("citrix", "index/adminUser", _module)
pulumi.runtime.registerResourceModule("citrix", "index/application", _module)
pulumi.runtime.registerResourceModule("citrix", "index/applicationGroup", _module)
pulumi.runtime.registerResourceModule("citrix", "index/applicationIcon", _module)
pulumi.runtime.registerResourceModule("citrix", "index/awsHypervisor", _module)
pulumi.runtime.registerResourceModule("citrix", "index/awsHypervisorResourcePool", _module)
pulumi.runtime.registerResourceModule("citrix", "index/azureHypervisor", _module)
pulumi.runtime.registerResourceModule("citrix", "index/azureHypervisorResourcePool", _module)
pulumi.runtime.registerResourceModule("citrix", "index/cloudAdminUser", _module)
pulumi.runtime.registerResourceModule("citrix", "index/cloudResourceLocation", _module)
pulumi.runtime.registerResourceModule("citrix", "index/deliveryGroup", _module)
pulumi.runtime.registerResourceModule("citrix", "index/gacSettings", _module)
pulumi.runtime.registerResourceModule("citrix", "index/gcpHypervisor", _module)
pulumi.runtime.registerResourceModule("citrix", "index/gcpHypervisorResourcePool", _module)
pulumi.runtime.registerResourceModule("citrix", "index/machineCatalog", _module)
pulumi.runtime.registerResourceModule("citrix", "index/nutanixHypervisor", _module)
pulumi.runtime.registerResourceModule("citrix", "index/nutanixHypervisorResourcePool", _module)
pulumi.runtime.registerResourceModule("citrix", "index/policySet", _module)
pulumi.runtime.registerResourceModule("citrix", "index/quickcreateAwsWorkspacesAccount", _module)
pulumi.runtime.registerResourceModule("citrix", "index/quickcreateAwsWorkspacesDeployment", _module)
pulumi.runtime.registerResourceModule("citrix", "index/quickcreateAwsWorkspacesDirectoryConnection", _module)
pulumi.runtime.registerResourceModule("citrix", "index/quickcreateAwsWorkspacesImage", _module)
pulumi.runtime.registerResourceModule("citrix", "index/scvmmHypervisor", _module)
pulumi.runtime.registerResourceModule("citrix", "index/scvmmHypervisorResourcePool", _module)
pulumi.runtime.registerResourceModule("citrix", "index/stfAuthenticationService", _module)
pulumi.runtime.registerResourceModule("citrix", "index/stfDeployment", _module)
pulumi.runtime.registerResourceModule("citrix", "index/stfRoamingBeacon", _module)
pulumi.runtime.registerResourceModule("citrix", "index/stfRoamingGateway", _module)
pulumi.runtime.registerResourceModule("citrix", "index/stfStoreService", _module)
pulumi.runtime.registerResourceModule("citrix", "index/stfUserFarmMapping", _module)
pulumi.runtime.registerResourceModule("citrix", "index/stfWebreceiverService", _module)
pulumi.runtime.registerResourceModule("citrix", "index/stfXenappDefaultStore", _module)
pulumi.runtime.registerResourceModule("citrix", "index/storefrontServer", _module)
pulumi.runtime.registerResourceModule("citrix", "index/vsphereHypervisor", _module)
pulumi.runtime.registerResourceModule("citrix", "index/vsphereHypervisorResourcePool", _module)
pulumi.runtime.registerResourceModule("citrix", "index/xenserverHypervisor", _module)
pulumi.runtime.registerResourceModule("citrix", "index/xenserverHypervisorResourcePool", _module)
pulumi.runtime.registerResourceModule("citrix", "index/zone", _module)
pulumi.runtime.registerResourcePackage("citrix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:citrix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
