// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MachineCatalog extends pulumi.CustomResource {
    /**
     * Get an existing MachineCatalog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MachineCatalogState, opts?: pulumi.CustomResourceOptions): MachineCatalog {
        return new MachineCatalog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/machineCatalog:MachineCatalog';

    /**
     * Returns true if the given object is an instance of MachineCatalog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MachineCatalog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MachineCatalog.__pulumiType;
    }

    /**
     * Denotes how the machines in the catalog are allocated to a user. Choose between `Static` and `Random`. Allocation type
     * should be `Random` when `session_support = MultiSession`.
     */
    public readonly allocationType!: pulumi.Output<string>;
    /**
     * Description of the machine catalog.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specify if the machines in the machine catalog will be power managed.
     */
    public readonly isPowerManaged!: pulumi.Output<boolean | undefined>;
    /**
     * Specify if this catalog is for Remote PC access.
     */
    public readonly isRemotePc!: pulumi.Output<boolean | undefined>;
    /**
     * Machine accounts to add to the catalog. Only to be used when using `provisioning_type = MANUAL`
     */
    public readonly machineAccounts!: pulumi.Output<outputs.MachineCatalogMachineAccount[] | undefined>;
    /**
     * The path to the folder in which the machine catalog is located.
     */
    public readonly machineCatalogFolderPath!: pulumi.Output<string | undefined>;
    /**
     * Specifies the minimum functional level for the VDA machines in the catalog. Defaults to `L7_20`.
     */
    public readonly minimumFunctionalLevel!: pulumi.Output<string>;
    /**
     * Name of the machine catalog.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Machine catalog provisioning scheme. Required when `provisioning_type = MCS` or `provisioning_type = PVS_STREAMING`.
     */
    public readonly provisioningScheme!: pulumi.Output<outputs.MachineCatalogProvisioningScheme | undefined>;
    /**
     * Specifies how the machines are provisioned in the catalog.
     */
    public readonly provisioningType!: pulumi.Output<string>;
    /**
     * Organizational Units to be included in the Remote PC machine catalog. Only to be used when `is_remote_pc = true`. For
     * adding machines, use `machine_accounts`.
     */
    public readonly remotePcOuses!: pulumi.Output<outputs.MachineCatalogRemotePcOus[] | undefined>;
    /**
     * The IDs of the scopes for the machine catalog to be a part of.
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * Session support type. Choose between `SingleSession` and `MultiSession`. Session support should be SingleSession when
     * `is_remote_pc = true`.
     */
    public readonly sessionSupport!: pulumi.Output<string>;
    /**
     * A set of identifiers of tenants to associate with the machine catalog.
     */
    public readonly tenants!: pulumi.Output<string[] | undefined>;
    /**
     * Type of Vda Upgrade. Choose between LTSR and CR. When omitted, Vda Upgrade is disabled.
     */
    public readonly vdaUpgradeType!: pulumi.Output<string | undefined>;
    /**
     * Id of the zone the machine catalog is associated with.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a MachineCatalog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MachineCatalogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MachineCatalogArgs | MachineCatalogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MachineCatalogState | undefined;
            resourceInputs["allocationType"] = state ? state.allocationType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isPowerManaged"] = state ? state.isPowerManaged : undefined;
            resourceInputs["isRemotePc"] = state ? state.isRemotePc : undefined;
            resourceInputs["machineAccounts"] = state ? state.machineAccounts : undefined;
            resourceInputs["machineCatalogFolderPath"] = state ? state.machineCatalogFolderPath : undefined;
            resourceInputs["minimumFunctionalLevel"] = state ? state.minimumFunctionalLevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisioningScheme"] = state ? state.provisioningScheme : undefined;
            resourceInputs["provisioningType"] = state ? state.provisioningType : undefined;
            resourceInputs["remotePcOuses"] = state ? state.remotePcOuses : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["sessionSupport"] = state ? state.sessionSupport : undefined;
            resourceInputs["tenants"] = state ? state.tenants : undefined;
            resourceInputs["vdaUpgradeType"] = state ? state.vdaUpgradeType : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as MachineCatalogArgs | undefined;
            if ((!args || args.allocationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allocationType'");
            }
            if ((!args || args.provisioningType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisioningType'");
            }
            if ((!args || args.sessionSupport === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sessionSupport'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["allocationType"] = args ? args.allocationType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isPowerManaged"] = args ? args.isPowerManaged : undefined;
            resourceInputs["isRemotePc"] = args ? args.isRemotePc : undefined;
            resourceInputs["machineAccounts"] = args ? args.machineAccounts : undefined;
            resourceInputs["machineCatalogFolderPath"] = args ? args.machineCatalogFolderPath : undefined;
            resourceInputs["minimumFunctionalLevel"] = args ? args.minimumFunctionalLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["provisioningScheme"] = args ? args.provisioningScheme : undefined;
            resourceInputs["provisioningType"] = args ? args.provisioningType : undefined;
            resourceInputs["remotePcOuses"] = args ? args.remotePcOuses : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["sessionSupport"] = args ? args.sessionSupport : undefined;
            resourceInputs["tenants"] = args ? args.tenants : undefined;
            resourceInputs["vdaUpgradeType"] = args ? args.vdaUpgradeType : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MachineCatalog.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MachineCatalog resources.
 */
export interface MachineCatalogState {
    /**
     * Denotes how the machines in the catalog are allocated to a user. Choose between `Static` and `Random`. Allocation type
     * should be `Random` when `session_support = MultiSession`.
     */
    allocationType?: pulumi.Input<string>;
    /**
     * Description of the machine catalog.
     */
    description?: pulumi.Input<string>;
    /**
     * Specify if the machines in the machine catalog will be power managed.
     */
    isPowerManaged?: pulumi.Input<boolean>;
    /**
     * Specify if this catalog is for Remote PC access.
     */
    isRemotePc?: pulumi.Input<boolean>;
    /**
     * Machine accounts to add to the catalog. Only to be used when using `provisioning_type = MANUAL`
     */
    machineAccounts?: pulumi.Input<pulumi.Input<inputs.MachineCatalogMachineAccount>[]>;
    /**
     * The path to the folder in which the machine catalog is located.
     */
    machineCatalogFolderPath?: pulumi.Input<string>;
    /**
     * Specifies the minimum functional level for the VDA machines in the catalog. Defaults to `L7_20`.
     */
    minimumFunctionalLevel?: pulumi.Input<string>;
    /**
     * Name of the machine catalog.
     */
    name?: pulumi.Input<string>;
    /**
     * Machine catalog provisioning scheme. Required when `provisioning_type = MCS` or `provisioning_type = PVS_STREAMING`.
     */
    provisioningScheme?: pulumi.Input<inputs.MachineCatalogProvisioningScheme>;
    /**
     * Specifies how the machines are provisioned in the catalog.
     */
    provisioningType?: pulumi.Input<string>;
    /**
     * Organizational Units to be included in the Remote PC machine catalog. Only to be used when `is_remote_pc = true`. For
     * adding machines, use `machine_accounts`.
     */
    remotePcOuses?: pulumi.Input<pulumi.Input<inputs.MachineCatalogRemotePcOus>[]>;
    /**
     * The IDs of the scopes for the machine catalog to be a part of.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Session support type. Choose between `SingleSession` and `MultiSession`. Session support should be SingleSession when
     * `is_remote_pc = true`.
     */
    sessionSupport?: pulumi.Input<string>;
    /**
     * A set of identifiers of tenants to associate with the machine catalog.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of Vda Upgrade. Choose between LTSR and CR. When omitted, Vda Upgrade is disabled.
     */
    vdaUpgradeType?: pulumi.Input<string>;
    /**
     * Id of the zone the machine catalog is associated with.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MachineCatalog resource.
 */
export interface MachineCatalogArgs {
    /**
     * Denotes how the machines in the catalog are allocated to a user. Choose between `Static` and `Random`. Allocation type
     * should be `Random` when `session_support = MultiSession`.
     */
    allocationType: pulumi.Input<string>;
    /**
     * Description of the machine catalog.
     */
    description?: pulumi.Input<string>;
    /**
     * Specify if the machines in the machine catalog will be power managed.
     */
    isPowerManaged?: pulumi.Input<boolean>;
    /**
     * Specify if this catalog is for Remote PC access.
     */
    isRemotePc?: pulumi.Input<boolean>;
    /**
     * Machine accounts to add to the catalog. Only to be used when using `provisioning_type = MANUAL`
     */
    machineAccounts?: pulumi.Input<pulumi.Input<inputs.MachineCatalogMachineAccount>[]>;
    /**
     * The path to the folder in which the machine catalog is located.
     */
    machineCatalogFolderPath?: pulumi.Input<string>;
    /**
     * Specifies the minimum functional level for the VDA machines in the catalog. Defaults to `L7_20`.
     */
    minimumFunctionalLevel?: pulumi.Input<string>;
    /**
     * Name of the machine catalog.
     */
    name?: pulumi.Input<string>;
    /**
     * Machine catalog provisioning scheme. Required when `provisioning_type = MCS` or `provisioning_type = PVS_STREAMING`.
     */
    provisioningScheme?: pulumi.Input<inputs.MachineCatalogProvisioningScheme>;
    /**
     * Specifies how the machines are provisioned in the catalog.
     */
    provisioningType: pulumi.Input<string>;
    /**
     * Organizational Units to be included in the Remote PC machine catalog. Only to be used when `is_remote_pc = true`. For
     * adding machines, use `machine_accounts`.
     */
    remotePcOuses?: pulumi.Input<pulumi.Input<inputs.MachineCatalogRemotePcOus>[]>;
    /**
     * The IDs of the scopes for the machine catalog to be a part of.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Session support type. Choose between `SingleSession` and `MultiSession`. Session support should be SingleSession when
     * `is_remote_pc = true`.
     */
    sessionSupport: pulumi.Input<string>;
    /**
     * A set of identifiers of tenants to associate with the machine catalog.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of Vda Upgrade. Choose between LTSR and CR. When omitted, Vda Upgrade is disabled.
     */
    vdaUpgradeType?: pulumi.Input<string>;
    /**
     * Id of the zone the machine catalog is associated with.
     */
    zone: pulumi.Input<string>;
}
