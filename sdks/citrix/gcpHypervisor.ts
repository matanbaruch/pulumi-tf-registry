// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GcpHypervisor extends pulumi.CustomResource {
    /**
     * Get an existing GcpHypervisor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpHypervisorState, opts?: pulumi.CustomResourceOptions): GcpHypervisor {
        return new GcpHypervisor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/gcpHypervisor:GcpHypervisor';

    /**
     * Returns true if the given object is an instance of GcpHypervisor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpHypervisor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpHypervisor.__pulumiType;
    }

    /**
     * Name of the hypervisor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The IDs of the scopes for the hypervisor to be a part of.
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * The JSON-encoded service account credentials used to access the Google Cloud APIs.
     */
    public readonly serviceAccountCredentials!: pulumi.Output<string>;
    /**
     * The service account ID used to access the Google Cloud APIs.
     */
    public readonly serviceAccountId!: pulumi.Output<string>;
    /**
     * Id of the zone the hypervisor is associated with.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a GcpHypervisor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpHypervisorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpHypervisorArgs | GcpHypervisorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpHypervisorState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["serviceAccountCredentials"] = state ? state.serviceAccountCredentials : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as GcpHypervisorArgs | undefined;
            if ((!args || args.serviceAccountCredentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountCredentials'");
            }
            if ((!args || args.serviceAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["serviceAccountCredentials"] = args?.serviceAccountCredentials ? pulumi.secret(args.serviceAccountCredentials) : undefined;
            resourceInputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["serviceAccountCredentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GcpHypervisor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GcpHypervisor resources.
 */
export interface GcpHypervisorState {
    /**
     * Name of the hypervisor.
     */
    name?: pulumi.Input<string>;
    /**
     * The IDs of the scopes for the hypervisor to be a part of.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The JSON-encoded service account credentials used to access the Google Cloud APIs.
     */
    serviceAccountCredentials?: pulumi.Input<string>;
    /**
     * The service account ID used to access the Google Cloud APIs.
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * Id of the zone the hypervisor is associated with.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GcpHypervisor resource.
 */
export interface GcpHypervisorArgs {
    /**
     * Name of the hypervisor.
     */
    name?: pulumi.Input<string>;
    /**
     * The IDs of the scopes for the hypervisor to be a part of.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The JSON-encoded service account credentials used to access the Google Cloud APIs.
     */
    serviceAccountCredentials: pulumi.Input<string>;
    /**
     * The service account ID used to access the Google Cloud APIs.
     */
    serviceAccountId: pulumi.Input<string>;
    /**
     * Id of the zone the hypervisor is associated with.
     */
    zone: pulumi.Input<string>;
}
