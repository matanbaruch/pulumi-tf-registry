// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AzureHypervisorResourcePool extends pulumi.CustomResource {
    /**
     * Get an existing AzureHypervisorResourcePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureHypervisorResourcePoolState, opts?: pulumi.CustomResourceOptions): AzureHypervisorResourcePool {
        return new AzureHypervisorResourcePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/azureHypervisorResourcePool:AzureHypervisorResourcePool';

    /**
     * Returns true if the given object is an instance of AzureHypervisorResourcePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureHypervisorResourcePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureHypervisorResourcePool.__pulumiType;
    }

    /**
     * Id of the hypervisor for which the resource pool needs to be created.
     */
    public readonly hypervisor!: pulumi.Output<string>;
    /**
     * Name of the resource pool. Name should be unique across all hypervisors.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Cloud Region where the virtual network sits in.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Subnets to allocate VDAs within the virtual network.
     */
    public readonly subnets!: pulumi.Output<string[]>;
    /**
     * Name of the cloud virtual network.
     */
    public readonly virtualNetwork!: pulumi.Output<string>;
    /**
     * The name of the resource group where the vnet resides.
     */
    public readonly virtualNetworkResourceGroup!: pulumi.Output<string>;

    /**
     * Create a AzureHypervisorResourcePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureHypervisorResourcePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureHypervisorResourcePoolArgs | AzureHypervisorResourcePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureHypervisorResourcePoolState | undefined;
            resourceInputs["hypervisor"] = state ? state.hypervisor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["virtualNetwork"] = state ? state.virtualNetwork : undefined;
            resourceInputs["virtualNetworkResourceGroup"] = state ? state.virtualNetworkResourceGroup : undefined;
        } else {
            const args = argsOrState as AzureHypervisorResourcePoolArgs | undefined;
            if ((!args || args.hypervisor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hypervisor'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.subnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnets'");
            }
            if ((!args || args.virtualNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetwork'");
            }
            if ((!args || args.virtualNetworkResourceGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetworkResourceGroup'");
            }
            resourceInputs["hypervisor"] = args ? args.hypervisor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["virtualNetwork"] = args ? args.virtualNetwork : undefined;
            resourceInputs["virtualNetworkResourceGroup"] = args ? args.virtualNetworkResourceGroup : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureHypervisorResourcePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureHypervisorResourcePool resources.
 */
export interface AzureHypervisorResourcePoolState {
    /**
     * Id of the hypervisor for which the resource pool needs to be created.
     */
    hypervisor?: pulumi.Input<string>;
    /**
     * Name of the resource pool. Name should be unique across all hypervisors.
     */
    name?: pulumi.Input<string>;
    /**
     * Cloud Region where the virtual network sits in.
     */
    region?: pulumi.Input<string>;
    /**
     * Subnets to allocate VDAs within the virtual network.
     */
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the cloud virtual network.
     */
    virtualNetwork?: pulumi.Input<string>;
    /**
     * The name of the resource group where the vnet resides.
     */
    virtualNetworkResourceGroup?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureHypervisorResourcePool resource.
 */
export interface AzureHypervisorResourcePoolArgs {
    /**
     * Id of the hypervisor for which the resource pool needs to be created.
     */
    hypervisor: pulumi.Input<string>;
    /**
     * Name of the resource pool. Name should be unique across all hypervisors.
     */
    name?: pulumi.Input<string>;
    /**
     * Cloud Region where the virtual network sits in.
     */
    region: pulumi.Input<string>;
    /**
     * Subnets to allocate VDAs within the virtual network.
     */
    subnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the cloud virtual network.
     */
    virtualNetwork: pulumi.Input<string>;
    /**
     * The name of the resource group where the vnet resides.
     */
    virtualNetworkResourceGroup: pulumi.Input<string>;
}
