// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AzureHypervisor extends pulumi.CustomResource {
    /**
     * Get an existing AzureHypervisor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureHypervisorState, opts?: pulumi.CustomResourceOptions): AzureHypervisor {
        return new AzureHypervisor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/azureHypervisor:AzureHypervisor';

    /**
     * Returns true if the given object is an instance of AzureHypervisor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureHypervisor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureHypervisor.__pulumiType;
    }

    /**
     * Azure Active Directory ID.
     */
    public readonly activeDirectoryId!: pulumi.Output<string>;
    /**
     * Application ID of the service principal used to access the Azure APIs.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * The Application Secret of the service principal used to access the Azure APIs.
     */
    public readonly applicationSecret!: pulumi.Output<string>;
    /**
     * The expiration date of the application secret of the service principal used to access the Azure APIs. > **Note**
     * Expiration date format is `YYYY-MM-DD`.
     */
    public readonly applicationSecretExpirationDate!: pulumi.Output<string | undefined>;
    /**
     * Enable Azure AD device management. Default is false.
     */
    public readonly enableAzureAdDeviceManagement!: pulumi.Output<boolean>;
    /**
     * Name of the hypervisor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The IDs of the scopes for the hypervisor to be a part of.
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * Azure Subscription ID.
     */
    public readonly subscriptionId!: pulumi.Output<string>;
    /**
     * Id of the zone the hypervisor is associated with.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a AzureHypervisor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureHypervisorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureHypervisorArgs | AzureHypervisorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureHypervisorState | undefined;
            resourceInputs["activeDirectoryId"] = state ? state.activeDirectoryId : undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["applicationSecret"] = state ? state.applicationSecret : undefined;
            resourceInputs["applicationSecretExpirationDate"] = state ? state.applicationSecretExpirationDate : undefined;
            resourceInputs["enableAzureAdDeviceManagement"] = state ? state.enableAzureAdDeviceManagement : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as AzureHypervisorArgs | undefined;
            if ((!args || args.activeDirectoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'activeDirectoryId'");
            }
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.applicationSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationSecret'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["activeDirectoryId"] = args ? args.activeDirectoryId : undefined;
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["applicationSecret"] = args?.applicationSecret ? pulumi.secret(args.applicationSecret) : undefined;
            resourceInputs["applicationSecretExpirationDate"] = args ? args.applicationSecretExpirationDate : undefined;
            resourceInputs["enableAzureAdDeviceManagement"] = args ? args.enableAzureAdDeviceManagement : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["applicationSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AzureHypervisor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureHypervisor resources.
 */
export interface AzureHypervisorState {
    /**
     * Azure Active Directory ID.
     */
    activeDirectoryId?: pulumi.Input<string>;
    /**
     * Application ID of the service principal used to access the Azure APIs.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The Application Secret of the service principal used to access the Azure APIs.
     */
    applicationSecret?: pulumi.Input<string>;
    /**
     * The expiration date of the application secret of the service principal used to access the Azure APIs. > **Note**
     * Expiration date format is `YYYY-MM-DD`.
     */
    applicationSecretExpirationDate?: pulumi.Input<string>;
    /**
     * Enable Azure AD device management. Default is false.
     */
    enableAzureAdDeviceManagement?: pulumi.Input<boolean>;
    /**
     * Name of the hypervisor.
     */
    name?: pulumi.Input<string>;
    /**
     * The IDs of the scopes for the hypervisor to be a part of.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Azure Subscription ID.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * Id of the zone the hypervisor is associated with.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureHypervisor resource.
 */
export interface AzureHypervisorArgs {
    /**
     * Azure Active Directory ID.
     */
    activeDirectoryId: pulumi.Input<string>;
    /**
     * Application ID of the service principal used to access the Azure APIs.
     */
    applicationId: pulumi.Input<string>;
    /**
     * The Application Secret of the service principal used to access the Azure APIs.
     */
    applicationSecret: pulumi.Input<string>;
    /**
     * The expiration date of the application secret of the service principal used to access the Azure APIs. > **Note**
     * Expiration date format is `YYYY-MM-DD`.
     */
    applicationSecretExpirationDate?: pulumi.Input<string>;
    /**
     * Enable Azure AD device management. Default is false.
     */
    enableAzureAdDeviceManagement?: pulumi.Input<boolean>;
    /**
     * Name of the hypervisor.
     */
    name?: pulumi.Input<string>;
    /**
     * The IDs of the scopes for the hypervisor to be a part of.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Azure Subscription ID.
     */
    subscriptionId: pulumi.Input<string>;
    /**
     * Id of the zone the hypervisor is associated with.
     */
    zone: pulumi.Input<string>;
}
