// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DeliveryGroup extends pulumi.CustomResource {
    /**
     * Get an existing DeliveryGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeliveryGroupState, opts?: pulumi.CustomResourceOptions): DeliveryGroup {
        return new DeliveryGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/deliveryGroup:DeliveryGroup';

    /**
     * Returns true if the given object is an instance of DeliveryGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeliveryGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeliveryGroup.__pulumiType;
    }

    /**
     * Give access to unauthenticated (anonymous) users. When set to `True`, no credentials are required to access StoreFront.
     * > **Please Note** This feature requires a StoreFront store for unauthenticated users.
     */
    public readonly allowAnonymousAccess!: pulumi.Output<boolean | undefined>;
    /**
     * App Protection, an add-on feature for the Citrix Workspace app, provides enhanced security for Citrix published apps and
     * desktops. The feature provides anti-keylogging and anti-screen capture capabilities for client sessions, helping protect
     * data from keyloggers and screen scrapers. > **Please Note** Before using the feature, make sure that these
     * [requirements](https://docs.citrix.com/en-us/citrix-workspace-app/app-protection.html#system-requirements) are met.
     */
    public readonly appProtection!: pulumi.Output<outputs.DeliveryGroupAppProtection | undefined>;
    /**
     * Machine catalogs from which to assign machines to the newly created delivery group.
     */
    public readonly associatedMachineCatalogs!: pulumi.Output<outputs.DeliveryGroupAssociatedMachineCatalog[] | undefined>;
    /**
     * The power management settings governing the machine(s) in the delivery group.
     */
    public readonly autoscaleSettings!: pulumi.Output<outputs.DeliveryGroupAutoscaleSettings | undefined>;
    /**
     * Custom Access Policies for the delivery group. To manage built-in access policies use the `default_access_policies`
     * instead.
     */
    public readonly customAccessPolicies!: pulumi.Output<outputs.DeliveryGroupCustomAccessPolicy[] | undefined>;
    /**
     * Manage built-in Access Policies for the delivery group. These are the Citrix Gateway Connections (via Access Gateway)
     * and Non-Citrix Gateway Connections (not via Access Gateway) access policies. > **Please Note** Default Access Policies
     * can only be modified; they cannot be deleted. If using this property, both default policies have to be specified. >
     * **Note** Use `Citrix Gateway connections` as the name for the default policy that is Via Access Gateway and `Non-Citrix
     * Gateway connections` as the name for the default policy that is Not Via Access Gateway.
     */
    public readonly defaultAccessPolicies!: pulumi.Output<outputs.DeliveryGroupDefaultAccessPolicy[] | undefined>;
    /**
     * The path of the folder in which the delivery group is located.
     */
    public readonly deliveryGroupFolderPath!: pulumi.Output<string | undefined>;
    /**
     * Description of the delivery group.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A list of Desktop resources to publish on the delivery group. Only 1 desktop can be added to a Remote PC Delivery Group.
     */
    public readonly desktops!: pulumi.Output<outputs.DeliveryGroupDesktop[] | undefined>;
    /**
     * In the event of a service disruption or loss of connectivity, select if you want Local Host Cache to keep resources in
     * the delivery group available to launch new sessions. Existing sessions are not impacted. > **Please Note** This setting
     * only impacts Single Session OS Random (pooled) desktops which are power managed. LHC is always enabled for Single
     * Session OS static and Multi Session OS desktops. > **Note** When set to `true`, machines will remain available and allow
     * new connections and changes to the machine caused by a user might be present in subsequent sessions. When set to
     * `false`, machines in the delivery group will be unavailable for new connections during a Local Host Cache event.
     */
    public readonly makeResourcesAvailableInLhc!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the minimum functional level for the VDA machines in the delivery group. Defaults to `L7_20`.
     */
    public readonly minimumFunctionalLevel!: pulumi.Output<string>;
    /**
     * Name of the delivery group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * GUID identifier of the policy set.
     */
    public readonly policySetId!: pulumi.Output<string | undefined>;
    /**
     * The reboot schedule for the delivery group.
     */
    public readonly rebootSchedules!: pulumi.Output<outputs.DeliveryGroupRebootSchedule[] | undefined>;
    /**
     * Restrict access to this Delivery Group by specifying users and groups in the allow and block list. If no value is
     * specified, all authenticated users will have access to this Delivery Group. To give access to unauthenticated users, use
     * the `allow_anonymous_access` property.
     */
    public readonly restrictedAccessUsers!: pulumi.Output<outputs.DeliveryGroupRestrictedAccessUsers | undefined>;
    /**
     * The IDs of the scopes for the delivery group to be a part of.
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * The session support for the delivery group. Can only be set to `SingleSession` or `MultiSession`. Specify only if you
     * want to create a Delivery Group wthout any `associated_machine_catalogs`. Ensure session support is same as that of the
     * prospective Machine Catalogs you will associate this Delivery Group with.
     */
    public readonly sessionSupport!: pulumi.Output<string | undefined>;
    /**
     * The sharing kind for the delivery group. Can only be set to `Shared` or `Private`. Specify only if you want to create a
     * Delivery Group wthout any `associated_machine_catalogs`.
     */
    public readonly sharingKind!: pulumi.Output<string | undefined>;
    /**
     * A list of GUID identifiers of StoreFront Servers to associate with the delivery group.
     */
    public readonly storefrontServers!: pulumi.Output<string[] | undefined>;
    /**
     * A set of identifiers of tenants to associate with the delivery group.
     */
    public readonly tenants!: pulumi.Output<string[] | undefined>;
    /**
     * The total number of machines in the delivery group.
     */
    public /*out*/ readonly totalMachines!: pulumi.Output<number>;

    /**
     * Create a DeliveryGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DeliveryGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeliveryGroupArgs | DeliveryGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeliveryGroupState | undefined;
            resourceInputs["allowAnonymousAccess"] = state ? state.allowAnonymousAccess : undefined;
            resourceInputs["appProtection"] = state ? state.appProtection : undefined;
            resourceInputs["associatedMachineCatalogs"] = state ? state.associatedMachineCatalogs : undefined;
            resourceInputs["autoscaleSettings"] = state ? state.autoscaleSettings : undefined;
            resourceInputs["customAccessPolicies"] = state ? state.customAccessPolicies : undefined;
            resourceInputs["defaultAccessPolicies"] = state ? state.defaultAccessPolicies : undefined;
            resourceInputs["deliveryGroupFolderPath"] = state ? state.deliveryGroupFolderPath : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desktops"] = state ? state.desktops : undefined;
            resourceInputs["makeResourcesAvailableInLhc"] = state ? state.makeResourcesAvailableInLhc : undefined;
            resourceInputs["minimumFunctionalLevel"] = state ? state.minimumFunctionalLevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policySetId"] = state ? state.policySetId : undefined;
            resourceInputs["rebootSchedules"] = state ? state.rebootSchedules : undefined;
            resourceInputs["restrictedAccessUsers"] = state ? state.restrictedAccessUsers : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["sessionSupport"] = state ? state.sessionSupport : undefined;
            resourceInputs["sharingKind"] = state ? state.sharingKind : undefined;
            resourceInputs["storefrontServers"] = state ? state.storefrontServers : undefined;
            resourceInputs["tenants"] = state ? state.tenants : undefined;
            resourceInputs["totalMachines"] = state ? state.totalMachines : undefined;
        } else {
            const args = argsOrState as DeliveryGroupArgs | undefined;
            resourceInputs["allowAnonymousAccess"] = args ? args.allowAnonymousAccess : undefined;
            resourceInputs["appProtection"] = args ? args.appProtection : undefined;
            resourceInputs["associatedMachineCatalogs"] = args ? args.associatedMachineCatalogs : undefined;
            resourceInputs["autoscaleSettings"] = args ? args.autoscaleSettings : undefined;
            resourceInputs["customAccessPolicies"] = args ? args.customAccessPolicies : undefined;
            resourceInputs["defaultAccessPolicies"] = args ? args.defaultAccessPolicies : undefined;
            resourceInputs["deliveryGroupFolderPath"] = args ? args.deliveryGroupFolderPath : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desktops"] = args ? args.desktops : undefined;
            resourceInputs["makeResourcesAvailableInLhc"] = args ? args.makeResourcesAvailableInLhc : undefined;
            resourceInputs["minimumFunctionalLevel"] = args ? args.minimumFunctionalLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policySetId"] = args ? args.policySetId : undefined;
            resourceInputs["rebootSchedules"] = args ? args.rebootSchedules : undefined;
            resourceInputs["restrictedAccessUsers"] = args ? args.restrictedAccessUsers : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["sessionSupport"] = args ? args.sessionSupport : undefined;
            resourceInputs["sharingKind"] = args ? args.sharingKind : undefined;
            resourceInputs["storefrontServers"] = args ? args.storefrontServers : undefined;
            resourceInputs["tenants"] = args ? args.tenants : undefined;
            resourceInputs["totalMachines"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeliveryGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeliveryGroup resources.
 */
export interface DeliveryGroupState {
    /**
     * Give access to unauthenticated (anonymous) users. When set to `True`, no credentials are required to access StoreFront.
     * > **Please Note** This feature requires a StoreFront store for unauthenticated users.
     */
    allowAnonymousAccess?: pulumi.Input<boolean>;
    /**
     * App Protection, an add-on feature for the Citrix Workspace app, provides enhanced security for Citrix published apps and
     * desktops. The feature provides anti-keylogging and anti-screen capture capabilities for client sessions, helping protect
     * data from keyloggers and screen scrapers. > **Please Note** Before using the feature, make sure that these
     * [requirements](https://docs.citrix.com/en-us/citrix-workspace-app/app-protection.html#system-requirements) are met.
     */
    appProtection?: pulumi.Input<inputs.DeliveryGroupAppProtection>;
    /**
     * Machine catalogs from which to assign machines to the newly created delivery group.
     */
    associatedMachineCatalogs?: pulumi.Input<pulumi.Input<inputs.DeliveryGroupAssociatedMachineCatalog>[]>;
    /**
     * The power management settings governing the machine(s) in the delivery group.
     */
    autoscaleSettings?: pulumi.Input<inputs.DeliveryGroupAutoscaleSettings>;
    /**
     * Custom Access Policies for the delivery group. To manage built-in access policies use the `default_access_policies`
     * instead.
     */
    customAccessPolicies?: pulumi.Input<pulumi.Input<inputs.DeliveryGroupCustomAccessPolicy>[]>;
    /**
     * Manage built-in Access Policies for the delivery group. These are the Citrix Gateway Connections (via Access Gateway)
     * and Non-Citrix Gateway Connections (not via Access Gateway) access policies. > **Please Note** Default Access Policies
     * can only be modified; they cannot be deleted. If using this property, both default policies have to be specified. >
     * **Note** Use `Citrix Gateway connections` as the name for the default policy that is Via Access Gateway and `Non-Citrix
     * Gateway connections` as the name for the default policy that is Not Via Access Gateway.
     */
    defaultAccessPolicies?: pulumi.Input<pulumi.Input<inputs.DeliveryGroupDefaultAccessPolicy>[]>;
    /**
     * The path of the folder in which the delivery group is located.
     */
    deliveryGroupFolderPath?: pulumi.Input<string>;
    /**
     * Description of the delivery group.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of Desktop resources to publish on the delivery group. Only 1 desktop can be added to a Remote PC Delivery Group.
     */
    desktops?: pulumi.Input<pulumi.Input<inputs.DeliveryGroupDesktop>[]>;
    /**
     * In the event of a service disruption or loss of connectivity, select if you want Local Host Cache to keep resources in
     * the delivery group available to launch new sessions. Existing sessions are not impacted. > **Please Note** This setting
     * only impacts Single Session OS Random (pooled) desktops which are power managed. LHC is always enabled for Single
     * Session OS static and Multi Session OS desktops. > **Note** When set to `true`, machines will remain available and allow
     * new connections and changes to the machine caused by a user might be present in subsequent sessions. When set to
     * `false`, machines in the delivery group will be unavailable for new connections during a Local Host Cache event.
     */
    makeResourcesAvailableInLhc?: pulumi.Input<boolean>;
    /**
     * Specifies the minimum functional level for the VDA machines in the delivery group. Defaults to `L7_20`.
     */
    minimumFunctionalLevel?: pulumi.Input<string>;
    /**
     * Name of the delivery group.
     */
    name?: pulumi.Input<string>;
    /**
     * GUID identifier of the policy set.
     */
    policySetId?: pulumi.Input<string>;
    /**
     * The reboot schedule for the delivery group.
     */
    rebootSchedules?: pulumi.Input<pulumi.Input<inputs.DeliveryGroupRebootSchedule>[]>;
    /**
     * Restrict access to this Delivery Group by specifying users and groups in the allow and block list. If no value is
     * specified, all authenticated users will have access to this Delivery Group. To give access to unauthenticated users, use
     * the `allow_anonymous_access` property.
     */
    restrictedAccessUsers?: pulumi.Input<inputs.DeliveryGroupRestrictedAccessUsers>;
    /**
     * The IDs of the scopes for the delivery group to be a part of.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The session support for the delivery group. Can only be set to `SingleSession` or `MultiSession`. Specify only if you
     * want to create a Delivery Group wthout any `associated_machine_catalogs`. Ensure session support is same as that of the
     * prospective Machine Catalogs you will associate this Delivery Group with.
     */
    sessionSupport?: pulumi.Input<string>;
    /**
     * The sharing kind for the delivery group. Can only be set to `Shared` or `Private`. Specify only if you want to create a
     * Delivery Group wthout any `associated_machine_catalogs`.
     */
    sharingKind?: pulumi.Input<string>;
    /**
     * A list of GUID identifiers of StoreFront Servers to associate with the delivery group.
     */
    storefrontServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of identifiers of tenants to associate with the delivery group.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The total number of machines in the delivery group.
     */
    totalMachines?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DeliveryGroup resource.
 */
export interface DeliveryGroupArgs {
    /**
     * Give access to unauthenticated (anonymous) users. When set to `True`, no credentials are required to access StoreFront.
     * > **Please Note** This feature requires a StoreFront store for unauthenticated users.
     */
    allowAnonymousAccess?: pulumi.Input<boolean>;
    /**
     * App Protection, an add-on feature for the Citrix Workspace app, provides enhanced security for Citrix published apps and
     * desktops. The feature provides anti-keylogging and anti-screen capture capabilities for client sessions, helping protect
     * data from keyloggers and screen scrapers. > **Please Note** Before using the feature, make sure that these
     * [requirements](https://docs.citrix.com/en-us/citrix-workspace-app/app-protection.html#system-requirements) are met.
     */
    appProtection?: pulumi.Input<inputs.DeliveryGroupAppProtection>;
    /**
     * Machine catalogs from which to assign machines to the newly created delivery group.
     */
    associatedMachineCatalogs?: pulumi.Input<pulumi.Input<inputs.DeliveryGroupAssociatedMachineCatalog>[]>;
    /**
     * The power management settings governing the machine(s) in the delivery group.
     */
    autoscaleSettings?: pulumi.Input<inputs.DeliveryGroupAutoscaleSettings>;
    /**
     * Custom Access Policies for the delivery group. To manage built-in access policies use the `default_access_policies`
     * instead.
     */
    customAccessPolicies?: pulumi.Input<pulumi.Input<inputs.DeliveryGroupCustomAccessPolicy>[]>;
    /**
     * Manage built-in Access Policies for the delivery group. These are the Citrix Gateway Connections (via Access Gateway)
     * and Non-Citrix Gateway Connections (not via Access Gateway) access policies. > **Please Note** Default Access Policies
     * can only be modified; they cannot be deleted. If using this property, both default policies have to be specified. >
     * **Note** Use `Citrix Gateway connections` as the name for the default policy that is Via Access Gateway and `Non-Citrix
     * Gateway connections` as the name for the default policy that is Not Via Access Gateway.
     */
    defaultAccessPolicies?: pulumi.Input<pulumi.Input<inputs.DeliveryGroupDefaultAccessPolicy>[]>;
    /**
     * The path of the folder in which the delivery group is located.
     */
    deliveryGroupFolderPath?: pulumi.Input<string>;
    /**
     * Description of the delivery group.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of Desktop resources to publish on the delivery group. Only 1 desktop can be added to a Remote PC Delivery Group.
     */
    desktops?: pulumi.Input<pulumi.Input<inputs.DeliveryGroupDesktop>[]>;
    /**
     * In the event of a service disruption or loss of connectivity, select if you want Local Host Cache to keep resources in
     * the delivery group available to launch new sessions. Existing sessions are not impacted. > **Please Note** This setting
     * only impacts Single Session OS Random (pooled) desktops which are power managed. LHC is always enabled for Single
     * Session OS static and Multi Session OS desktops. > **Note** When set to `true`, machines will remain available and allow
     * new connections and changes to the machine caused by a user might be present in subsequent sessions. When set to
     * `false`, machines in the delivery group will be unavailable for new connections during a Local Host Cache event.
     */
    makeResourcesAvailableInLhc?: pulumi.Input<boolean>;
    /**
     * Specifies the minimum functional level for the VDA machines in the delivery group. Defaults to `L7_20`.
     */
    minimumFunctionalLevel?: pulumi.Input<string>;
    /**
     * Name of the delivery group.
     */
    name?: pulumi.Input<string>;
    /**
     * GUID identifier of the policy set.
     */
    policySetId?: pulumi.Input<string>;
    /**
     * The reboot schedule for the delivery group.
     */
    rebootSchedules?: pulumi.Input<pulumi.Input<inputs.DeliveryGroupRebootSchedule>[]>;
    /**
     * Restrict access to this Delivery Group by specifying users and groups in the allow and block list. If no value is
     * specified, all authenticated users will have access to this Delivery Group. To give access to unauthenticated users, use
     * the `allow_anonymous_access` property.
     */
    restrictedAccessUsers?: pulumi.Input<inputs.DeliveryGroupRestrictedAccessUsers>;
    /**
     * The IDs of the scopes for the delivery group to be a part of.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The session support for the delivery group. Can only be set to `SingleSession` or `MultiSession`. Specify only if you
     * want to create a Delivery Group wthout any `associated_machine_catalogs`. Ensure session support is same as that of the
     * prospective Machine Catalogs you will associate this Delivery Group with.
     */
    sessionSupport?: pulumi.Input<string>;
    /**
     * The sharing kind for the delivery group. Can only be set to `Shared` or `Private`. Specify only if you want to create a
     * Delivery Group wthout any `associated_machine_catalogs`.
     */
    sharingKind?: pulumi.Input<string>;
    /**
     * A list of GUID identifiers of StoreFront Servers to associate with the delivery group.
     */
    storefrontServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of identifiers of tenants to associate with the delivery group.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
}
