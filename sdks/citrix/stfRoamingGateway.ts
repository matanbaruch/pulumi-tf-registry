// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StfRoamingGateway extends pulumi.CustomResource {
    /**
     * Get an existing StfRoamingGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StfRoamingGatewayState, opts?: pulumi.CustomResourceOptions): StfRoamingGateway {
        return new StfRoamingGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/stfRoamingGateway:StfRoamingGateway';

    /**
     * Returns true if the given object is an instance of StfRoamingGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StfRoamingGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StfRoamingGateway.__pulumiType;
    }

    /**
     * The Gateway authentication NetScaler call-back Url.
     */
    public readonly callbackUrl!: pulumi.Output<string>;
    /**
     * The deployment type of the StoreFront gateway.
     */
    public /*out*/ readonly deployment!: pulumi.Output<string>;
    /**
     * The Citrix NetScaler Gateway edition.
     */
    public /*out*/ readonly edition!: pulumi.Output<string>;
    /**
     * The URL of the StoreFront gateway.
     */
    public readonly gatewayUrl!: pulumi.Output<string>;
    /**
     * An optional URL which corresponds to the GSLB domain used by multiple gateways. Defaults to an empty string.
     */
    public readonly gslbUrl!: pulumi.Output<string>;
    /**
     * Whether the Gateway is an instance of Citrix Gateway Service in the cloud. Defaults to `false`.
     */
    public readonly isCloudGateway!: pulumi.Output<boolean>;
    /**
     * The login type required and supported by the Gateway. Possible values are `UsedForHDXOnly`, `Domain`, `RSA`,
     * `DomainAndRSA`, `SMS`, `GatewayKnows`, `SmartCard`, and `None`.
     */
    public readonly logonType!: pulumi.Output<string>;
    /**
     * The name of the StoreFront roaming gateway.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Request STA tickets from two STA servers (Requires two STA servers). Defaults to `false`.
     */
    public readonly requestTicketTwoStas!: pulumi.Output<boolean>;
    /**
     * The Secure Ticket Authority (STA) URLs. The STA servers validate the tickets that are issued by the StoreFront server.
     * The STA servers must be reachable from the StoreFront server.
     */
    public readonly secureTicketAuthorityUrls!: pulumi.Output<outputs.StfRoamingGatewaySecureTicketAuthorityUrl[] | undefined>;
    /**
     * Enable session reliability. Session Reliability keeps sessions active and on the userâ€™s screen when network
     * connectivity is interrupted. Users continue to see the application they are using until network connectivity resumes.
     * Defaults to `false`.
     */
    public readonly sessionReliability!: pulumi.Output<boolean>;
    /**
     * The IIS site id of the StoreFront roaming gateway.
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * The login type to use when SmartCard fails. Possible values are `UsedForHDXOnly`, `Domain`, `RSA`, `DomainAndRSA`,
     * `SMS`, `GatewayKnows`, `SmartCard`, and `None`. Defaults to `None`.
     */
    public readonly smartCardFallbackLogonType!: pulumi.Output<string>;
    /**
     * Time before retrying a failed STA server in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `0.1:0:0`
     */
    public readonly stasBypassDuration!: pulumi.Output<string>;
    /**
     * Use load balancing for the Secure Ticket Authority (STA) servers. Defaults to `false`.
     */
    public readonly stasUseLoadBalancing!: pulumi.Output<boolean>;
    /**
     * The subnet IP address of the StoreFront gateway.
     */
    public readonly subnetIpAddress!: pulumi.Output<string>;
    /**
     * The Citrix NetScaler Gateway version. Possible values are `Version10_0_69_4` and `Version9x`. Defaults to
     * `Version10_0_69_4`.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a StfRoamingGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StfRoamingGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StfRoamingGatewayArgs | StfRoamingGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StfRoamingGatewayState | undefined;
            resourceInputs["callbackUrl"] = state ? state.callbackUrl : undefined;
            resourceInputs["deployment"] = state ? state.deployment : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["gatewayUrl"] = state ? state.gatewayUrl : undefined;
            resourceInputs["gslbUrl"] = state ? state.gslbUrl : undefined;
            resourceInputs["isCloudGateway"] = state ? state.isCloudGateway : undefined;
            resourceInputs["logonType"] = state ? state.logonType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requestTicketTwoStas"] = state ? state.requestTicketTwoStas : undefined;
            resourceInputs["secureTicketAuthorityUrls"] = state ? state.secureTicketAuthorityUrls : undefined;
            resourceInputs["sessionReliability"] = state ? state.sessionReliability : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["smartCardFallbackLogonType"] = state ? state.smartCardFallbackLogonType : undefined;
            resourceInputs["stasBypassDuration"] = state ? state.stasBypassDuration : undefined;
            resourceInputs["stasUseLoadBalancing"] = state ? state.stasUseLoadBalancing : undefined;
            resourceInputs["subnetIpAddress"] = state ? state.subnetIpAddress : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as StfRoamingGatewayArgs | undefined;
            if ((!args || args.gatewayUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayUrl'");
            }
            if ((!args || args.logonType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logonType'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.subnetIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIpAddress'");
            }
            resourceInputs["callbackUrl"] = args ? args.callbackUrl : undefined;
            resourceInputs["gatewayUrl"] = args ? args.gatewayUrl : undefined;
            resourceInputs["gslbUrl"] = args ? args.gslbUrl : undefined;
            resourceInputs["isCloudGateway"] = args ? args.isCloudGateway : undefined;
            resourceInputs["logonType"] = args ? args.logonType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requestTicketTwoStas"] = args ? args.requestTicketTwoStas : undefined;
            resourceInputs["secureTicketAuthorityUrls"] = args ? args.secureTicketAuthorityUrls : undefined;
            resourceInputs["sessionReliability"] = args ? args.sessionReliability : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["smartCardFallbackLogonType"] = args ? args.smartCardFallbackLogonType : undefined;
            resourceInputs["stasBypassDuration"] = args ? args.stasBypassDuration : undefined;
            resourceInputs["stasUseLoadBalancing"] = args ? args.stasUseLoadBalancing : undefined;
            resourceInputs["subnetIpAddress"] = args ? args.subnetIpAddress : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["deployment"] = undefined /*out*/;
            resourceInputs["edition"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StfRoamingGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StfRoamingGateway resources.
 */
export interface StfRoamingGatewayState {
    /**
     * The Gateway authentication NetScaler call-back Url.
     */
    callbackUrl?: pulumi.Input<string>;
    /**
     * The deployment type of the StoreFront gateway.
     */
    deployment?: pulumi.Input<string>;
    /**
     * The Citrix NetScaler Gateway edition.
     */
    edition?: pulumi.Input<string>;
    /**
     * The URL of the StoreFront gateway.
     */
    gatewayUrl?: pulumi.Input<string>;
    /**
     * An optional URL which corresponds to the GSLB domain used by multiple gateways. Defaults to an empty string.
     */
    gslbUrl?: pulumi.Input<string>;
    /**
     * Whether the Gateway is an instance of Citrix Gateway Service in the cloud. Defaults to `false`.
     */
    isCloudGateway?: pulumi.Input<boolean>;
    /**
     * The login type required and supported by the Gateway. Possible values are `UsedForHDXOnly`, `Domain`, `RSA`,
     * `DomainAndRSA`, `SMS`, `GatewayKnows`, `SmartCard`, and `None`.
     */
    logonType?: pulumi.Input<string>;
    /**
     * The name of the StoreFront roaming gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * Request STA tickets from two STA servers (Requires two STA servers). Defaults to `false`.
     */
    requestTicketTwoStas?: pulumi.Input<boolean>;
    /**
     * The Secure Ticket Authority (STA) URLs. The STA servers validate the tickets that are issued by the StoreFront server.
     * The STA servers must be reachable from the StoreFront server.
     */
    secureTicketAuthorityUrls?: pulumi.Input<pulumi.Input<inputs.StfRoamingGatewaySecureTicketAuthorityUrl>[]>;
    /**
     * Enable session reliability. Session Reliability keeps sessions active and on the userâ€™s screen when network
     * connectivity is interrupted. Users continue to see the application they are using until network connectivity resumes.
     * Defaults to `false`.
     */
    sessionReliability?: pulumi.Input<boolean>;
    /**
     * The IIS site id of the StoreFront roaming gateway.
     */
    siteId?: pulumi.Input<string>;
    /**
     * The login type to use when SmartCard fails. Possible values are `UsedForHDXOnly`, `Domain`, `RSA`, `DomainAndRSA`,
     * `SMS`, `GatewayKnows`, `SmartCard`, and `None`. Defaults to `None`.
     */
    smartCardFallbackLogonType?: pulumi.Input<string>;
    /**
     * Time before retrying a failed STA server in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `0.1:0:0`
     */
    stasBypassDuration?: pulumi.Input<string>;
    /**
     * Use load balancing for the Secure Ticket Authority (STA) servers. Defaults to `false`.
     */
    stasUseLoadBalancing?: pulumi.Input<boolean>;
    /**
     * The subnet IP address of the StoreFront gateway.
     */
    subnetIpAddress?: pulumi.Input<string>;
    /**
     * The Citrix NetScaler Gateway version. Possible values are `Version10_0_69_4` and `Version9x`. Defaults to
     * `Version10_0_69_4`.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StfRoamingGateway resource.
 */
export interface StfRoamingGatewayArgs {
    /**
     * The Gateway authentication NetScaler call-back Url.
     */
    callbackUrl?: pulumi.Input<string>;
    /**
     * The URL of the StoreFront gateway.
     */
    gatewayUrl: pulumi.Input<string>;
    /**
     * An optional URL which corresponds to the GSLB domain used by multiple gateways. Defaults to an empty string.
     */
    gslbUrl?: pulumi.Input<string>;
    /**
     * Whether the Gateway is an instance of Citrix Gateway Service in the cloud. Defaults to `false`.
     */
    isCloudGateway?: pulumi.Input<boolean>;
    /**
     * The login type required and supported by the Gateway. Possible values are `UsedForHDXOnly`, `Domain`, `RSA`,
     * `DomainAndRSA`, `SMS`, `GatewayKnows`, `SmartCard`, and `None`.
     */
    logonType: pulumi.Input<string>;
    /**
     * The name of the StoreFront roaming gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * Request STA tickets from two STA servers (Requires two STA servers). Defaults to `false`.
     */
    requestTicketTwoStas?: pulumi.Input<boolean>;
    /**
     * The Secure Ticket Authority (STA) URLs. The STA servers validate the tickets that are issued by the StoreFront server.
     * The STA servers must be reachable from the StoreFront server.
     */
    secureTicketAuthorityUrls?: pulumi.Input<pulumi.Input<inputs.StfRoamingGatewaySecureTicketAuthorityUrl>[]>;
    /**
     * Enable session reliability. Session Reliability keeps sessions active and on the userâ€™s screen when network
     * connectivity is interrupted. Users continue to see the application they are using until network connectivity resumes.
     * Defaults to `false`.
     */
    sessionReliability?: pulumi.Input<boolean>;
    /**
     * The IIS site id of the StoreFront roaming gateway.
     */
    siteId: pulumi.Input<string>;
    /**
     * The login type to use when SmartCard fails. Possible values are `UsedForHDXOnly`, `Domain`, `RSA`, `DomainAndRSA`,
     * `SMS`, `GatewayKnows`, `SmartCard`, and `None`. Defaults to `None`.
     */
    smartCardFallbackLogonType?: pulumi.Input<string>;
    /**
     * Time before retrying a failed STA server in `dd.hh:mm:ss` format with 0's trimmed. Defaults to `0.1:0:0`
     */
    stasBypassDuration?: pulumi.Input<string>;
    /**
     * Use load balancing for the Secure Ticket Authority (STA) servers. Defaults to `false`.
     */
    stasUseLoadBalancing?: pulumi.Input<boolean>;
    /**
     * The subnet IP address of the StoreFront gateway.
     */
    subnetIpAddress: pulumi.Input<string>;
    /**
     * The Citrix NetScaler Gateway version. Possible values are `Version10_0_69_4` and `Version9x`. Defaults to
     * `Version10_0_69_4`.
     */
    version?: pulumi.Input<string>;
}
