// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsHypervisorResourcePool extends pulumi.CustomResource {
    /**
     * Get an existing AwsHypervisorResourcePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsHypervisorResourcePoolState, opts?: pulumi.CustomResourceOptions): AwsHypervisorResourcePool {
        return new AwsHypervisorResourcePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/awsHypervisorResourcePool:AwsHypervisorResourcePool';

    /**
     * Returns true if the given object is an instance of AwsHypervisorResourcePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsHypervisorResourcePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsHypervisorResourcePool.__pulumiType;
    }

    /**
     * The name of the availability zone resource to use for provisioning operations in this resource pool.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Id of the hypervisor for which the resource pool needs to be created.
     */
    public readonly hypervisor!: pulumi.Output<string>;
    /**
     * Name of the resource pool. Name should be unique across all hypervisors.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Subnets to allocate VDAs within the virtual private cloud.
     */
    public readonly subnets!: pulumi.Output<string[]>;
    /**
     * Name of the virtual private cloud.
     */
    public readonly vpc!: pulumi.Output<string>;

    /**
     * Create a AwsHypervisorResourcePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsHypervisorResourcePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsHypervisorResourcePoolArgs | AwsHypervisorResourcePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsHypervisorResourcePoolState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["hypervisor"] = state ? state.hypervisor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["vpc"] = state ? state.vpc : undefined;
        } else {
            const args = argsOrState as AwsHypervisorResourcePoolArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.hypervisor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hypervisor'");
            }
            if ((!args || args.subnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnets'");
            }
            if ((!args || args.vpc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpc'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["hypervisor"] = args ? args.hypervisor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["vpc"] = args ? args.vpc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsHypervisorResourcePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsHypervisorResourcePool resources.
 */
export interface AwsHypervisorResourcePoolState {
    /**
     * The name of the availability zone resource to use for provisioning operations in this resource pool.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Id of the hypervisor for which the resource pool needs to be created.
     */
    hypervisor?: pulumi.Input<string>;
    /**
     * Name of the resource pool. Name should be unique across all hypervisors.
     */
    name?: pulumi.Input<string>;
    /**
     * Subnets to allocate VDAs within the virtual private cloud.
     */
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the virtual private cloud.
     */
    vpc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsHypervisorResourcePool resource.
 */
export interface AwsHypervisorResourcePoolArgs {
    /**
     * The name of the availability zone resource to use for provisioning operations in this resource pool.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * Id of the hypervisor for which the resource pool needs to be created.
     */
    hypervisor: pulumi.Input<string>;
    /**
     * Name of the resource pool. Name should be unique across all hypervisors.
     */
    name?: pulumi.Input<string>;
    /**
     * Subnets to allocate VDAs within the virtual private cloud.
     */
    subnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the virtual private cloud.
     */
    vpc: pulumi.Input<string>;
}
