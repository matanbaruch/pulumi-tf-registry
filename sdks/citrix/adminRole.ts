// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AdminRole extends pulumi.CustomResource {
    /**
     * Get an existing AdminRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdminRoleState, opts?: pulumi.CustomResourceOptions): AdminRole {
        return new AdminRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/adminRole:AdminRole';

    /**
     * Returns true if the given object is an instance of AdminRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdminRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdminRole.__pulumiType;
    }

    /**
     * Flag to determine if the user will have access to the Manage tab on the console. Defaults to `true`. > **Please Note**
     * This field is only applicable for cloud admins. For on-premise admins, the only acceptable value is `true`.
     */
    public readonly canLaunchManage!: pulumi.Output<boolean>;
    /**
     * Flag to determine if the user will have access to the Monitor tab on the console. Defaults to `true`. > **Please Note**
     * This field is only applicable for cloud admins. For on-premise admins, the only acceptable value is `true`.
     */
    public readonly canLaunchMonitor!: pulumi.Output<boolean>;
    /**
     * Description of the admin role.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Flag to determine if the role was built-in or user defined
     */
    public /*out*/ readonly isBuiltIn!: pulumi.Output<boolean>;
    /**
     * Name of the admin role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Permissions to be associated with the admin role. > **Note** To get a list of supported permissions, please refer to
     * [Admin Predefined Permissions for
     * Cloud](https://developer-docs.citrix.com/en-us/citrix-daas-service-apis/citrix-daas-rest-apis/apis/#/Admin-APIs/Admin-GetPredefinedPermissions)
     * and [Admin Predefined Permissions for
     * On-Premise](https://developer-docs.citrix.com/en-us/citrix-virtual-apps-desktops/citrix-cvad-rest-apis/apis/#/Admin-APIs/Admin-GetPredefinedPermissions).
     */
    public readonly permissions!: pulumi.Output<string[]>;

    /**
     * Create a AdminRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdminRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdminRoleArgs | AdminRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdminRoleState | undefined;
            resourceInputs["canLaunchManage"] = state ? state.canLaunchManage : undefined;
            resourceInputs["canLaunchMonitor"] = state ? state.canLaunchMonitor : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isBuiltIn"] = state ? state.isBuiltIn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
        } else {
            const args = argsOrState as AdminRoleArgs | undefined;
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            resourceInputs["canLaunchManage"] = args ? args.canLaunchManage : undefined;
            resourceInputs["canLaunchMonitor"] = args ? args.canLaunchMonitor : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["isBuiltIn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdminRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AdminRole resources.
 */
export interface AdminRoleState {
    /**
     * Flag to determine if the user will have access to the Manage tab on the console. Defaults to `true`. > **Please Note**
     * This field is only applicable for cloud admins. For on-premise admins, the only acceptable value is `true`.
     */
    canLaunchManage?: pulumi.Input<boolean>;
    /**
     * Flag to determine if the user will have access to the Monitor tab on the console. Defaults to `true`. > **Please Note**
     * This field is only applicable for cloud admins. For on-premise admins, the only acceptable value is `true`.
     */
    canLaunchMonitor?: pulumi.Input<boolean>;
    /**
     * Description of the admin role.
     */
    description?: pulumi.Input<string>;
    /**
     * Flag to determine if the role was built-in or user defined
     */
    isBuiltIn?: pulumi.Input<boolean>;
    /**
     * Name of the admin role.
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions to be associated with the admin role. > **Note** To get a list of supported permissions, please refer to
     * [Admin Predefined Permissions for
     * Cloud](https://developer-docs.citrix.com/en-us/citrix-daas-service-apis/citrix-daas-rest-apis/apis/#/Admin-APIs/Admin-GetPredefinedPermissions)
     * and [Admin Predefined Permissions for
     * On-Premise](https://developer-docs.citrix.com/en-us/citrix-virtual-apps-desktops/citrix-cvad-rest-apis/apis/#/Admin-APIs/Admin-GetPredefinedPermissions).
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AdminRole resource.
 */
export interface AdminRoleArgs {
    /**
     * Flag to determine if the user will have access to the Manage tab on the console. Defaults to `true`. > **Please Note**
     * This field is only applicable for cloud admins. For on-premise admins, the only acceptable value is `true`.
     */
    canLaunchManage?: pulumi.Input<boolean>;
    /**
     * Flag to determine if the user will have access to the Monitor tab on the console. Defaults to `true`. > **Please Note**
     * This field is only applicable for cloud admins. For on-premise admins, the only acceptable value is `true`.
     */
    canLaunchMonitor?: pulumi.Input<boolean>;
    /**
     * Description of the admin role.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the admin role.
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions to be associated with the admin role. > **Note** To get a list of supported permissions, please refer to
     * [Admin Predefined Permissions for
     * Cloud](https://developer-docs.citrix.com/en-us/citrix-daas-service-apis/citrix-daas-rest-apis/apis/#/Admin-APIs/Admin-GetPredefinedPermissions)
     * and [Admin Predefined Permissions for
     * On-Premise](https://developer-docs.citrix.com/en-us/citrix-virtual-apps-desktops/citrix-cvad-rest-apis/apis/#/Admin-APIs/Admin-GetPredefinedPermissions).
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}
