// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudAdminUser extends pulumi.CustomResource {
    /**
     * Get an existing CloudAdminUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudAdminUserState, opts?: pulumi.CustomResourceOptions): CloudAdminUser {
        return new CloudAdminUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrix:index/cloudAdminUser:CloudAdminUser';

    /**
     * Returns true if the given object is an instance of CloudAdminUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudAdminUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudAdminUser.__pulumiType;
    }

    /**
     * Access Type of the user. Currently, this attribute can only be set to `Full`
     */
    public readonly accessType!: pulumi.Output<string>;
    /**
     * Display name for the user.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Email of the user where the invitation link will be sent.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * First name of the user.
     */
    public readonly firstName!: pulumi.Output<string | undefined>;
    /**
     * Last name of the user.
     */
    public readonly lastName!: pulumi.Output<string | undefined>;
    /**
     * Identity provider for the administrator or group you want to add. Currently, this attribute can only be set to
     * `CitrixSts`.
     */
    public readonly providerType!: pulumi.Output<string>;
    /**
     * Type of administrator being added. Currently, this attribute can only be set to `AdministratorUser`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Universal claim organization identifier of the administrator.
     */
    public /*out*/ readonly ucoid!: pulumi.Output<string>;
    /**
     * Id of the administrator.
     */
    public /*out*/ readonly userId!: pulumi.Output<string>;

    /**
     * Create a CloudAdminUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudAdminUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudAdminUserArgs | CloudAdminUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudAdminUserState | undefined;
            resourceInputs["accessType"] = state ? state.accessType : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["ucoid"] = state ? state.ucoid : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as CloudAdminUserArgs | undefined;
            if ((!args || args.accessType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessType'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.providerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerType'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accessType"] = args ? args.accessType : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["ucoid"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudAdminUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudAdminUser resources.
 */
export interface CloudAdminUserState {
    /**
     * Access Type of the user. Currently, this attribute can only be set to `Full`
     */
    accessType?: pulumi.Input<string>;
    /**
     * Display name for the user.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Email of the user where the invitation link will be sent.
     */
    email?: pulumi.Input<string>;
    /**
     * First name of the user.
     */
    firstName?: pulumi.Input<string>;
    /**
     * Last name of the user.
     */
    lastName?: pulumi.Input<string>;
    /**
     * Identity provider for the administrator or group you want to add. Currently, this attribute can only be set to
     * `CitrixSts`.
     */
    providerType?: pulumi.Input<string>;
    /**
     * Type of administrator being added. Currently, this attribute can only be set to `AdministratorUser`.
     */
    type?: pulumi.Input<string>;
    /**
     * Universal claim organization identifier of the administrator.
     */
    ucoid?: pulumi.Input<string>;
    /**
     * Id of the administrator.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudAdminUser resource.
 */
export interface CloudAdminUserArgs {
    /**
     * Access Type of the user. Currently, this attribute can only be set to `Full`
     */
    accessType: pulumi.Input<string>;
    /**
     * Display name for the user.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Email of the user where the invitation link will be sent.
     */
    email: pulumi.Input<string>;
    /**
     * First name of the user.
     */
    firstName?: pulumi.Input<string>;
    /**
     * Last name of the user.
     */
    lastName?: pulumi.Input<string>;
    /**
     * Identity provider for the administrator or group you want to add. Currently, this attribute can only be set to
     * `CitrixSts`.
     */
    providerType: pulumi.Input<string>;
    /**
     * Type of administrator being added. Currently, this attribute can only be set to `AdministratorUser`.
     */
    type: pulumi.Input<string>;
}
