// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'launchdarkly:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * A block describing which client-side SDKs can use new flags by default.
     */
    public readonly defaultClientSideAvailabilities!: pulumi.Output<outputs.ProjectDefaultClientSideAvailability[] | undefined>;
    public readonly environments!: pulumi.Output<outputs.ProjectEnvironment[]>;
    /**
     * Whether feature flags created under the project should be available to client-side SDKs by default. Please migrate to
     * `default_client_side_availability` to maintain future compatibility.
     *
     * @deprecated Deprecated
     */
    public readonly includeInSnippet!: pulumi.Output<boolean>;
    /**
     * The project's unique key. A change in this field will force the destruction of the existing resource and the creation of
     * a new one.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The project's name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Tags associated with your resource.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["defaultClientSideAvailabilities"] = state ? state.defaultClientSideAvailabilities : undefined;
            resourceInputs["environments"] = state ? state.environments : undefined;
            resourceInputs["includeInSnippet"] = state ? state.includeInSnippet : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if ((!args || args.environments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environments'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["defaultClientSideAvailabilities"] = args ? args.defaultClientSideAvailabilities : undefined;
            resourceInputs["environments"] = args ? args.environments : undefined;
            resourceInputs["includeInSnippet"] = args ? args.includeInSnippet : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * A block describing which client-side SDKs can use new flags by default.
     */
    defaultClientSideAvailabilities?: pulumi.Input<pulumi.Input<inputs.ProjectDefaultClientSideAvailability>[]>;
    environments?: pulumi.Input<pulumi.Input<inputs.ProjectEnvironment>[]>;
    /**
     * Whether feature flags created under the project should be available to client-side SDKs by default. Please migrate to
     * `default_client_side_availability` to maintain future compatibility.
     *
     * @deprecated Deprecated
     */
    includeInSnippet?: pulumi.Input<boolean>;
    /**
     * The project's unique key. A change in this field will force the destruction of the existing resource and the creation of
     * a new one.
     */
    key?: pulumi.Input<string>;
    /**
     * The project's name.
     */
    name?: pulumi.Input<string>;
    /**
     * Tags associated with your resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * A block describing which client-side SDKs can use new flags by default.
     */
    defaultClientSideAvailabilities?: pulumi.Input<pulumi.Input<inputs.ProjectDefaultClientSideAvailability>[]>;
    environments: pulumi.Input<pulumi.Input<inputs.ProjectEnvironment>[]>;
    /**
     * Whether feature flags created under the project should be available to client-side SDKs by default. Please migrate to
     * `default_client_side_availability` to maintain future compatibility.
     *
     * @deprecated Deprecated
     */
    includeInSnippet?: pulumi.Input<boolean>;
    /**
     * The project's unique key. A change in this field will force the destruction of the existing resource and the creation of
     * a new one.
     */
    key: pulumi.Input<string>;
    /**
     * The project's name.
     */
    name?: pulumi.Input<string>;
    /**
     * Tags associated with your resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
