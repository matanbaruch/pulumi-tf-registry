// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FeatureFlagEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing FeatureFlagEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureFlagEnvironmentState, opts?: pulumi.CustomResourceOptions): FeatureFlagEnvironment {
        return new FeatureFlagEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment';

    /**
     * Returns true if the given object is an instance of FeatureFlagEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FeatureFlagEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FeatureFlagEnvironment.__pulumiType;
    }

    /**
     * The set of nested blocks describing the individual targets for non-user context kinds for each variation.
     */
    public readonly contextTargets!: pulumi.Output<outputs.FeatureFlagEnvironmentContextTarget[] | undefined>;
    /**
     * The environment key. A change in this field will force the destruction of the existing resource and the creation of a
     * new one.
     */
    public readonly envKey!: pulumi.Output<string>;
    /**
     * Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
     */
    public readonly fallthrough!: pulumi.Output<outputs.FeatureFlagEnvironmentFallthrough>;
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction
     * of the existing resource and the creation of a new one.
     */
    public readonly flagId!: pulumi.Output<string>;
    /**
     * The index of the variation to serve if targeting is disabled.
     */
    public readonly offVariation!: pulumi.Output<number>;
    /**
     * Whether targeting is enabled. Defaults to `false` if not set.
     */
    public readonly on!: pulumi.Output<boolean | undefined>;
    /**
     * List of nested blocks describing prerequisite feature flags rules.
     */
    public readonly prerequisites!: pulumi.Output<outputs.FeatureFlagEnvironmentPrerequisite[] | undefined>;
    /**
     * List of logical targeting rules.
     */
    public readonly rules!: pulumi.Output<outputs.FeatureFlagEnvironmentRule[] | undefined>;
    /**
     * Set of nested blocks describing the individual user targets for each variation.
     */
    public readonly targets!: pulumi.Output<outputs.FeatureFlagEnvironmentTarget[] | undefined>;
    /**
     * Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
     */
    public readonly trackEvents!: pulumi.Output<boolean | undefined>;

    /**
     * Create a FeatureFlagEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureFlagEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureFlagEnvironmentArgs | FeatureFlagEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureFlagEnvironmentState | undefined;
            resourceInputs["contextTargets"] = state ? state.contextTargets : undefined;
            resourceInputs["envKey"] = state ? state.envKey : undefined;
            resourceInputs["fallthrough"] = state ? state.fallthrough : undefined;
            resourceInputs["flagId"] = state ? state.flagId : undefined;
            resourceInputs["offVariation"] = state ? state.offVariation : undefined;
            resourceInputs["on"] = state ? state.on : undefined;
            resourceInputs["prerequisites"] = state ? state.prerequisites : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["trackEvents"] = state ? state.trackEvents : undefined;
        } else {
            const args = argsOrState as FeatureFlagEnvironmentArgs | undefined;
            if ((!args || args.envKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envKey'");
            }
            if ((!args || args.fallthrough === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fallthrough'");
            }
            if ((!args || args.flagId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flagId'");
            }
            if ((!args || args.offVariation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'offVariation'");
            }
            resourceInputs["contextTargets"] = args ? args.contextTargets : undefined;
            resourceInputs["envKey"] = args ? args.envKey : undefined;
            resourceInputs["fallthrough"] = args ? args.fallthrough : undefined;
            resourceInputs["flagId"] = args ? args.flagId : undefined;
            resourceInputs["offVariation"] = args ? args.offVariation : undefined;
            resourceInputs["on"] = args ? args.on : undefined;
            resourceInputs["prerequisites"] = args ? args.prerequisites : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["trackEvents"] = args ? args.trackEvents : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FeatureFlagEnvironment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FeatureFlagEnvironment resources.
 */
export interface FeatureFlagEnvironmentState {
    /**
     * The set of nested blocks describing the individual targets for non-user context kinds for each variation.
     */
    contextTargets?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentContextTarget>[]>;
    /**
     * The environment key. A change in this field will force the destruction of the existing resource and the creation of a
     * new one.
     */
    envKey?: pulumi.Input<string>;
    /**
     * Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
     */
    fallthrough?: pulumi.Input<inputs.FeatureFlagEnvironmentFallthrough>;
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction
     * of the existing resource and the creation of a new one.
     */
    flagId?: pulumi.Input<string>;
    /**
     * The index of the variation to serve if targeting is disabled.
     */
    offVariation?: pulumi.Input<number>;
    /**
     * Whether targeting is enabled. Defaults to `false` if not set.
     */
    on?: pulumi.Input<boolean>;
    /**
     * List of nested blocks describing prerequisite feature flags rules.
     */
    prerequisites?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentPrerequisite>[]>;
    /**
     * List of logical targeting rules.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentRule>[]>;
    /**
     * Set of nested blocks describing the individual user targets for each variation.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentTarget>[]>;
    /**
     * Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
     */
    trackEvents?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FeatureFlagEnvironment resource.
 */
export interface FeatureFlagEnvironmentArgs {
    /**
     * The set of nested blocks describing the individual targets for non-user context kinds for each variation.
     */
    contextTargets?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentContextTarget>[]>;
    /**
     * The environment key. A change in this field will force the destruction of the existing resource and the creation of a
     * new one.
     */
    envKey: pulumi.Input<string>;
    /**
     * Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
     */
    fallthrough: pulumi.Input<inputs.FeatureFlagEnvironmentFallthrough>;
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction
     * of the existing resource and the creation of a new one.
     */
    flagId: pulumi.Input<string>;
    /**
     * The index of the variation to serve if targeting is disabled.
     */
    offVariation: pulumi.Input<number>;
    /**
     * Whether targeting is enabled. Defaults to `false` if not set.
     */
    on?: pulumi.Input<boolean>;
    /**
     * List of nested blocks describing prerequisite feature flags rules.
     */
    prerequisites?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentPrerequisite>[]>;
    /**
     * List of logical targeting rules.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentRule>[]>;
    /**
     * Set of nested blocks describing the individual user targets for each variation.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentTarget>[]>;
    /**
     * Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
     */
    trackEvents?: pulumi.Input<boolean>;
}
