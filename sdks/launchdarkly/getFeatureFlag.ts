// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFeatureFlag(args: GetFeatureFlagArgs, opts?: pulumi.InvokeOptions): Promise<GetFeatureFlagResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("launchdarkly:index/getFeatureFlag:getFeatureFlag", {
        "id": args.id,
        "key": args.key,
        "maintainerId": args.maintainerId,
        "maintainerTeamKey": args.maintainerTeamKey,
        "projectKey": args.projectKey,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFeatureFlag.
 */
export interface GetFeatureFlagArgs {
    id?: string;
    key: string;
    maintainerId?: string;
    maintainerTeamKey?: string;
    projectKey: string;
}

/**
 * A collection of values returned by getFeatureFlag.
 */
export interface GetFeatureFlagResult {
    readonly archived: boolean;
    readonly clientSideAvailabilities: outputs.GetFeatureFlagClientSideAvailability[];
    readonly customProperties: outputs.GetFeatureFlagCustomProperty[];
    readonly defaults: outputs.GetFeatureFlagDefault[];
    readonly description: string;
    readonly id: string;
    /**
     * @deprecated Deprecated
     */
    readonly includeInSnippet: boolean;
    readonly key: string;
    readonly maintainerId: string;
    readonly maintainerTeamKey: string;
    readonly name: string;
    readonly projectKey: string;
    readonly tags: string[];
    readonly temporary: boolean;
    readonly variationType: string;
    readonly variations: outputs.GetFeatureFlagVariation[];
}
export function getFeatureFlagOutput(args: GetFeatureFlagOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFeatureFlagResult> {
    return pulumi.output(args).apply((a: any) => getFeatureFlag(a, opts))
}

/**
 * A collection of arguments for invoking getFeatureFlag.
 */
export interface GetFeatureFlagOutputArgs {
    id?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    maintainerId?: pulumi.Input<string>;
    maintainerTeamKey?: pulumi.Input<string>;
    projectKey: pulumi.Input<string>;
}
