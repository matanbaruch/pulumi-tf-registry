// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SslCertificate extends pulumi.CustomResource {
    /**
     * Get an existing SslCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslCertificateState, opts?: pulumi.CustomResourceOptions): SslCertificate {
        return new SslCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gridscale:index/sslCertificate:SslCertificate';

    /**
     * Returns true if the given object is an instance of SslCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslCertificate.__pulumiType;
    }

    /**
     * The PEM-formatted full-chain between the certificate authority and the domain's SSL certificate.
     */
    public readonly certificateChain!: pulumi.Output<string | undefined>;
    /**
     * The date and time of the last object change.
     */
    public /*out*/ readonly changeTime!: pulumi.Output<string>;
    /**
     * The common domain name of the SSL certificate.
     */
    public /*out*/ readonly commonName!: pulumi.Output<string>;
    /**
     * The date and time the object was initially created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Defines a list of unique identifiers generated from the MD5, SHA-1, and SHA-256 fingerprints of the certificate.
     */
    public /*out*/ readonly fingerprints!: pulumi.Output<outputs.SslCertificateFingerprint[]>;
    /**
     * List of labels.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * The PEM-formatted public SSL of the SSL certificate.
     */
    public readonly leafCertificate!: pulumi.Output<string>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Defines the date after which the certificate is not valid.
     */
    public /*out*/ readonly notValidAfter!: pulumi.Output<string>;
    /**
     * The PEM-formatted private-key of the SSL certificate.
     */
    public readonly privateKey!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SslCertificateTimeouts | undefined>;

    /**
     * Create a SslCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslCertificateArgs | SslCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslCertificateState | undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["changeTime"] = state ? state.changeTime : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["fingerprints"] = state ? state.fingerprints : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["leafCertificate"] = state ? state.leafCertificate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notValidAfter"] = state ? state.notValidAfter : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SslCertificateArgs | undefined;
            if ((!args || args.leafCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'leafCertificate'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["certificateChain"] = args?.certificateChain ? pulumi.secret(args.certificateChain) : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["leafCertificate"] = args?.leafCertificate ? pulumi.secret(args.leafCertificate) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["changeTime"] = undefined /*out*/;
            resourceInputs["commonName"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["fingerprints"] = undefined /*out*/;
            resourceInputs["notValidAfter"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certificateChain", "leafCertificate", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SslCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SslCertificate resources.
 */
export interface SslCertificateState {
    /**
     * The PEM-formatted full-chain between the certificate authority and the domain's SSL certificate.
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * The date and time of the last object change.
     */
    changeTime?: pulumi.Input<string>;
    /**
     * The common domain name of the SSL certificate.
     */
    commonName?: pulumi.Input<string>;
    /**
     * The date and time the object was initially created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Defines a list of unique identifiers generated from the MD5, SHA-1, and SHA-256 fingerprints of the certificate.
     */
    fingerprints?: pulumi.Input<pulumi.Input<inputs.SslCertificateFingerprint>[]>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The PEM-formatted public SSL of the SSL certificate.
     */
    leafCertificate?: pulumi.Input<string>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the date after which the certificate is not valid.
     */
    notValidAfter?: pulumi.Input<string>;
    /**
     * The PEM-formatted private-key of the SSL certificate.
     */
    privateKey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SslCertificateTimeouts>;
}

/**
 * The set of arguments for constructing a SslCertificate resource.
 */
export interface SslCertificateArgs {
    /**
     * The PEM-formatted full-chain between the certificate authority and the domain's SSL certificate.
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The PEM-formatted public SSL of the SSL certificate.
     */
    leafCertificate: pulumi.Input<string>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The PEM-formatted private-key of the SSL certificate.
     */
    privateKey: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SslCertificateTimeouts>;
}
