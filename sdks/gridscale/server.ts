// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gridscale:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * If the server should be auto-started in case of a failure (default=true).
     */
    public readonly autoRecovery!: pulumi.Output<boolean>;
    /**
     * Defines which Availability-Zone the Server is placed.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    public /*out*/ readonly changeTime!: pulumi.Output<string>;
    /**
     * The token used by the panel to open the websocket VNC connection to the server console.
     */
    public /*out*/ readonly consoleToken!: pulumi.Output<string>;
    /**
     * The number of server cores.
     */
    public readonly cores!: pulumi.Output<number>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly currentPrice!: pulumi.Output<number>;
    /**
     * Specifies the hardware settings for the virtual machine. Note: hardware_profile and hardware_profile_config parameters
     * can't be used at the same time.
     */
    public readonly hardwareProfile!: pulumi.Output<string>;
    /**
     * Specifies the custom hardware settings for the virtual machine. Note: hardware_profile and hardware_profile_config
     * parameters can't be used at the same time.
     */
    public readonly hardwareProfileConfigs!: pulumi.Output<outputs.ServerHardwareProfileConfig[] | undefined>;
    public readonly ipv4!: pulumi.Output<string | undefined>;
    public readonly ipv6!: pulumi.Output<string | undefined>;
    public readonly isoimage!: pulumi.Output<string | undefined>;
    /**
     * List of labels.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * Legacy-Hardware emulation instead of virtio hardware. If enabled, hotplugging cores, memory, storage, network, etc. will
     * not work, but the server will most likely run every x86 compatible operating system. This mode comes with a performance
     * penalty, as emulated hardware does not benefit from the virtio driver infrastructure.
     */
    public /*out*/ readonly legacy!: pulumi.Output<boolean>;
    /**
     * The location this object is placed.
     */
    public /*out*/ readonly locationUuid!: pulumi.Output<string>;
    /**
     * The amount of server memory in GB.
     */
    public readonly memory!: pulumi.Output<number>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters
     */
    public readonly name!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.ServerNetwork[] | undefined>;
    /**
     * The number of server cores.
     */
    public readonly power!: pulumi.Output<boolean>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A list of storages attached to the server. The first storage in the list is always set as the boot storage of the
     * server.
     */
    public readonly storages!: pulumi.Output<outputs.ServerStorage[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServerTimeouts | undefined>;
    public /*out*/ readonly usageInMinutesCores!: pulumi.Output<number>;
    public /*out*/ readonly usageInMinutesMemory!: pulumi.Output<number>;
    /**
     * For system configuration on first boot. May contain cloud-config data or shell scripting, encoded as base64 string.
     * Supported tools are cloud-init, Cloudbase-init, and Ignition.
     */
    public readonly userDataBase64!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["autoRecovery"] = state ? state.autoRecovery : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["changeTime"] = state ? state.changeTime : undefined;
            resourceInputs["consoleToken"] = state ? state.consoleToken : undefined;
            resourceInputs["cores"] = state ? state.cores : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["currentPrice"] = state ? state.currentPrice : undefined;
            resourceInputs["hardwareProfile"] = state ? state.hardwareProfile : undefined;
            resourceInputs["hardwareProfileConfigs"] = state ? state.hardwareProfileConfigs : undefined;
            resourceInputs["ipv4"] = state ? state.ipv4 : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["isoimage"] = state ? state.isoimage : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["legacy"] = state ? state.legacy : undefined;
            resourceInputs["locationUuid"] = state ? state.locationUuid : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["power"] = state ? state.power : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storages"] = state ? state.storages : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usageInMinutesCores"] = state ? state.usageInMinutesCores : undefined;
            resourceInputs["usageInMinutesMemory"] = state ? state.usageInMinutesMemory : undefined;
            resourceInputs["userDataBase64"] = state ? state.userDataBase64 : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.cores === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cores'");
            }
            if ((!args || args.memory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memory'");
            }
            resourceInputs["autoRecovery"] = args ? args.autoRecovery : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["cores"] = args ? args.cores : undefined;
            resourceInputs["hardwareProfile"] = args ? args.hardwareProfile : undefined;
            resourceInputs["hardwareProfileConfigs"] = args ? args.hardwareProfileConfigs : undefined;
            resourceInputs["ipv4"] = args ? args.ipv4 : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["isoimage"] = args ? args.isoimage : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["power"] = args ? args.power : undefined;
            resourceInputs["storages"] = args ? args.storages : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userDataBase64"] = args ? args.userDataBase64 : undefined;
            resourceInputs["changeTime"] = undefined /*out*/;
            resourceInputs["consoleToken"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["currentPrice"] = undefined /*out*/;
            resourceInputs["legacy"] = undefined /*out*/;
            resourceInputs["locationUuid"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["usageInMinutesCores"] = undefined /*out*/;
            resourceInputs["usageInMinutesMemory"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * If the server should be auto-started in case of a failure (default=true).
     */
    autoRecovery?: pulumi.Input<boolean>;
    /**
     * Defines which Availability-Zone the Server is placed.
     */
    availabilityZone?: pulumi.Input<string>;
    changeTime?: pulumi.Input<string>;
    /**
     * The token used by the panel to open the websocket VNC connection to the server console.
     */
    consoleToken?: pulumi.Input<string>;
    /**
     * The number of server cores.
     */
    cores?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    currentPrice?: pulumi.Input<number>;
    /**
     * Specifies the hardware settings for the virtual machine. Note: hardware_profile and hardware_profile_config parameters
     * can't be used at the same time.
     */
    hardwareProfile?: pulumi.Input<string>;
    /**
     * Specifies the custom hardware settings for the virtual machine. Note: hardware_profile and hardware_profile_config
     * parameters can't be used at the same time.
     */
    hardwareProfileConfigs?: pulumi.Input<pulumi.Input<inputs.ServerHardwareProfileConfig>[]>;
    ipv4?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    isoimage?: pulumi.Input<string>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Legacy-Hardware emulation instead of virtio hardware. If enabled, hotplugging cores, memory, storage, network, etc. will
     * not work, but the server will most likely run every x86 compatible operating system. This mode comes with a performance
     * penalty, as emulated hardware does not benefit from the virtio driver infrastructure.
     */
    legacy?: pulumi.Input<boolean>;
    /**
     * The location this object is placed.
     */
    locationUuid?: pulumi.Input<string>;
    /**
     * The amount of server memory in GB.
     */
    memory?: pulumi.Input<number>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters
     */
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.ServerNetwork>[]>;
    /**
     * The number of server cores.
     */
    power?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    /**
     * A list of storages attached to the server. The first storage in the list is always set as the boot storage of the
     * server.
     */
    storages?: pulumi.Input<pulumi.Input<inputs.ServerStorage>[]>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    usageInMinutesCores?: pulumi.Input<number>;
    usageInMinutesMemory?: pulumi.Input<number>;
    /**
     * For system configuration on first boot. May contain cloud-config data or shell scripting, encoded as base64 string.
     * Supported tools are cloud-init, Cloudbase-init, and Ignition.
     */
    userDataBase64?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * If the server should be auto-started in case of a failure (default=true).
     */
    autoRecovery?: pulumi.Input<boolean>;
    /**
     * Defines which Availability-Zone the Server is placed.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The number of server cores.
     */
    cores: pulumi.Input<number>;
    /**
     * Specifies the hardware settings for the virtual machine. Note: hardware_profile and hardware_profile_config parameters
     * can't be used at the same time.
     */
    hardwareProfile?: pulumi.Input<string>;
    /**
     * Specifies the custom hardware settings for the virtual machine. Note: hardware_profile and hardware_profile_config
     * parameters can't be used at the same time.
     */
    hardwareProfileConfigs?: pulumi.Input<pulumi.Input<inputs.ServerHardwareProfileConfig>[]>;
    ipv4?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    isoimage?: pulumi.Input<string>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of server memory in GB.
     */
    memory: pulumi.Input<number>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters
     */
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.ServerNetwork>[]>;
    /**
     * The number of server cores.
     */
    power?: pulumi.Input<boolean>;
    /**
     * A list of storages attached to the server. The first storage in the list is always set as the boot storage of the
     * server.
     */
    storages?: pulumi.Input<pulumi.Input<inputs.ServerStorage>[]>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    /**
     * For system configuration on first boot. May contain cloud-config data or shell scripting, encoded as base64 string.
     * Supported tools are cloud-init, Cloudbase-init, and Ignition.
     */
    userDataBase64?: pulumi.Input<string>;
}
