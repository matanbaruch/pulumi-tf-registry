// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Loadbalancer extends pulumi.CustomResource {
    /**
     * Get an existing Loadbalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerState, opts?: pulumi.CustomResourceOptions): Loadbalancer {
        return new Loadbalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gridscale:index/loadbalancer:Loadbalancer';

    /**
     * Returns true if the given object is an instance of Loadbalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Loadbalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Loadbalancer.__pulumiType;
    }

    /**
     * The algorithm used to process requests. Accepted values: roundrobin/leastconn.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * List of backend servers.
     */
    public readonly backendServers!: pulumi.Output<outputs.LoadbalancerBackendServer[]>;
    /**
     * List of forwarding rules for the Load balancer.
     */
    public readonly forwardingRules!: pulumi.Output<outputs.LoadbalancerForwardingRule[]>;
    /**
     * List of labels.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * The UUID of the IPv4 address the Load balancer will listen to for incoming requests.
     */
    public readonly listenIpv4Uuid!: pulumi.Output<string>;
    /**
     * The UUID of the IPv6 address the Load balancer will listen to for incoming requests.
     */
    public readonly listenIpv6Uuid!: pulumi.Output<string>;
    /**
     * The location this object is placed.
     */
    public /*out*/ readonly locationUuid!: pulumi.Output<string>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether the Load balancer is forced to redirect requests from HTTP to HTTPS
     */
    public readonly redirectHttpToHttps!: pulumi.Output<boolean>;
    /**
     * Status indicates the status of the object.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LoadbalancerTimeouts | undefined>;

    /**
     * Create a Loadbalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerArgs | LoadbalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["backendServers"] = state ? state.backendServers : undefined;
            resourceInputs["forwardingRules"] = state ? state.forwardingRules : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["listenIpv4Uuid"] = state ? state.listenIpv4Uuid : undefined;
            resourceInputs["listenIpv6Uuid"] = state ? state.listenIpv6Uuid : undefined;
            resourceInputs["locationUuid"] = state ? state.locationUuid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["redirectHttpToHttps"] = state ? state.redirectHttpToHttps : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LoadbalancerArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.backendServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendServers'");
            }
            if ((!args || args.forwardingRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'forwardingRules'");
            }
            if ((!args || args.listenIpv4Uuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenIpv4Uuid'");
            }
            if ((!args || args.listenIpv6Uuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenIpv6Uuid'");
            }
            if ((!args || args.redirectHttpToHttps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redirectHttpToHttps'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["backendServers"] = args ? args.backendServers : undefined;
            resourceInputs["forwardingRules"] = args ? args.forwardingRules : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["listenIpv4Uuid"] = args ? args.listenIpv4Uuid : undefined;
            resourceInputs["listenIpv6Uuid"] = args ? args.listenIpv6Uuid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["redirectHttpToHttps"] = args ? args.redirectHttpToHttps : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["locationUuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Loadbalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Loadbalancer resources.
 */
export interface LoadbalancerState {
    /**
     * The algorithm used to process requests. Accepted values: roundrobin/leastconn.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * List of backend servers.
     */
    backendServers?: pulumi.Input<pulumi.Input<inputs.LoadbalancerBackendServer>[]>;
    /**
     * List of forwarding rules for the Load balancer.
     */
    forwardingRules?: pulumi.Input<pulumi.Input<inputs.LoadbalancerForwardingRule>[]>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The UUID of the IPv4 address the Load balancer will listen to for incoming requests.
     */
    listenIpv4Uuid?: pulumi.Input<string>;
    /**
     * The UUID of the IPv6 address the Load balancer will listen to for incoming requests.
     */
    listenIpv6Uuid?: pulumi.Input<string>;
    /**
     * The location this object is placed.
     */
    locationUuid?: pulumi.Input<string>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the Load balancer is forced to redirect requests from HTTP to HTTPS
     */
    redirectHttpToHttps?: pulumi.Input<boolean>;
    /**
     * Status indicates the status of the object.
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LoadbalancerTimeouts>;
}

/**
 * The set of arguments for constructing a Loadbalancer resource.
 */
export interface LoadbalancerArgs {
    /**
     * The algorithm used to process requests. Accepted values: roundrobin/leastconn.
     */
    algorithm: pulumi.Input<string>;
    /**
     * List of backend servers.
     */
    backendServers: pulumi.Input<pulumi.Input<inputs.LoadbalancerBackendServer>[]>;
    /**
     * List of forwarding rules for the Load balancer.
     */
    forwardingRules: pulumi.Input<pulumi.Input<inputs.LoadbalancerForwardingRule>[]>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The UUID of the IPv4 address the Load balancer will listen to for incoming requests.
     */
    listenIpv4Uuid: pulumi.Input<string>;
    /**
     * The UUID of the IPv6 address the Load balancer will listen to for incoming requests.
     */
    listenIpv6Uuid: pulumi.Input<string>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the Load balancer is forced to redirect requests from HTTP to HTTPS
     */
    redirectHttpToHttps: pulumi.Input<boolean>;
    /**
     * Status indicates the status of the object.
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LoadbalancerTimeouts>;
}
