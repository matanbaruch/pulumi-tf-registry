// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BackupscheduleArgs, BackupscheduleState } from "./backupschedule";
export type Backupschedule = import("./backupschedule").Backupschedule;
export const Backupschedule: typeof import("./backupschedule").Backupschedule = null as any;
utilities.lazyLoad(exports, ["Backupschedule"], () => require("./backupschedule"));

export { FilesystemArgs, FilesystemState } from "./filesystem";
export type Filesystem = import("./filesystem").Filesystem;
export const Filesystem: typeof import("./filesystem").Filesystem = null as any;
utilities.lazyLoad(exports, ["Filesystem"], () => require("./filesystem"));

export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { GetBackupListArgs, GetBackupListResult, GetBackupListOutputArgs } from "./getBackupList";
export const getBackupList: typeof import("./getBackupList").getBackupList = null as any;
export const getBackupListOutput: typeof import("./getBackupList").getBackupListOutput = null as any;
utilities.lazyLoad(exports, ["getBackupList","getBackupListOutput"], () => require("./getBackupList"));

export { GetBackupscheduleArgs, GetBackupscheduleResult, GetBackupscheduleOutputArgs } from "./getBackupschedule";
export const getBackupschedule: typeof import("./getBackupschedule").getBackupschedule = null as any;
export const getBackupscheduleOutput: typeof import("./getBackupschedule").getBackupscheduleOutput = null as any;
utilities.lazyLoad(exports, ["getBackupschedule","getBackupscheduleOutput"], () => require("./getBackupschedule"));

export { GetFirewallArgs, GetFirewallResult, GetFirewallOutputArgs } from "./getFirewall";
export const getFirewall: typeof import("./getFirewall").getFirewall = null as any;
export const getFirewallOutput: typeof import("./getFirewall").getFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getFirewall","getFirewallOutput"], () => require("./getFirewall"));

export { GetIpv4Args, GetIpv4Result, GetIpv4OutputArgs } from "./getIpv4";
export const getIpv4: typeof import("./getIpv4").getIpv4 = null as any;
export const getIpv4Output: typeof import("./getIpv4").getIpv4Output = null as any;
utilities.lazyLoad(exports, ["getIpv4","getIpv4Output"], () => require("./getIpv4"));

export { GetIpv6Args, GetIpv6Result, GetIpv6OutputArgs } from "./getIpv6";
export const getIpv6: typeof import("./getIpv6").getIpv6 = null as any;
export const getIpv6Output: typeof import("./getIpv6").getIpv6Output = null as any;
utilities.lazyLoad(exports, ["getIpv6","getIpv6Output"], () => require("./getIpv6"));

export { GetIsoimageArgs, GetIsoimageResult, GetIsoimageOutputArgs } from "./getIsoimage";
export const getIsoimage: typeof import("./getIsoimage").getIsoimage = null as any;
export const getIsoimageOutput: typeof import("./getIsoimage").getIsoimageOutput = null as any;
utilities.lazyLoad(exports, ["getIsoimage","getIsoimageOutput"], () => require("./getIsoimage"));

export { GetLoadbalancerArgs, GetLoadbalancerResult, GetLoadbalancerOutputArgs } from "./getLoadbalancer";
export const getLoadbalancer: typeof import("./getLoadbalancer").getLoadbalancer = null as any;
export const getLoadbalancerOutput: typeof import("./getLoadbalancer").getLoadbalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadbalancer","getLoadbalancerOutput"], () => require("./getLoadbalancer"));

export { GetMarketplaceApplicationArgs, GetMarketplaceApplicationResult, GetMarketplaceApplicationOutputArgs } from "./getMarketplaceApplication";
export const getMarketplaceApplication: typeof import("./getMarketplaceApplication").getMarketplaceApplication = null as any;
export const getMarketplaceApplicationOutput: typeof import("./getMarketplaceApplication").getMarketplaceApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceApplication","getMarketplaceApplicationOutput"], () => require("./getMarketplaceApplication"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetObjectStorageAccesskeyArgs, GetObjectStorageAccesskeyResult, GetObjectStorageAccesskeyOutputArgs } from "./getObjectStorageAccesskey";
export const getObjectStorageAccesskey: typeof import("./getObjectStorageAccesskey").getObjectStorageAccesskey = null as any;
export const getObjectStorageAccesskeyOutput: typeof import("./getObjectStorageAccesskey").getObjectStorageAccesskeyOutput = null as any;
utilities.lazyLoad(exports, ["getObjectStorageAccesskey","getObjectStorageAccesskeyOutput"], () => require("./getObjectStorageAccesskey"));

export { GetPaasArgs, GetPaasResult, GetPaasOutputArgs } from "./getPaas";
export const getPaas: typeof import("./getPaas").getPaas = null as any;
export const getPaasOutput: typeof import("./getPaas").getPaasOutput = null as any;
utilities.lazyLoad(exports, ["getPaas","getPaasOutput"], () => require("./getPaas"));

export { GetPaasSecurityzoneArgs, GetPaasSecurityzoneResult, GetPaasSecurityzoneOutputArgs } from "./getPaasSecurityzone";
export const getPaasSecurityzone: typeof import("./getPaasSecurityzone").getPaasSecurityzone = null as any;
export const getPaasSecurityzoneOutput: typeof import("./getPaasSecurityzone").getPaasSecurityzoneOutput = null as any;
utilities.lazyLoad(exports, ["getPaasSecurityzone","getPaasSecurityzoneOutput"], () => require("./getPaasSecurityzone"));

export { GetPublicNetworkArgs, GetPublicNetworkResult, GetPublicNetworkOutputArgs } from "./getPublicNetwork";
export const getPublicNetwork: typeof import("./getPublicNetwork").getPublicNetwork = null as any;
export const getPublicNetworkOutput: typeof import("./getPublicNetwork").getPublicNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getPublicNetwork","getPublicNetworkOutput"], () => require("./getPublicNetwork"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { GetSnapshotscheduleArgs, GetSnapshotscheduleResult, GetSnapshotscheduleOutputArgs } from "./getSnapshotschedule";
export const getSnapshotschedule: typeof import("./getSnapshotschedule").getSnapshotschedule = null as any;
export const getSnapshotscheduleOutput: typeof import("./getSnapshotschedule").getSnapshotscheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshotschedule","getSnapshotscheduleOutput"], () => require("./getSnapshotschedule"));

export { GetSshkeyArgs, GetSshkeyResult, GetSshkeyOutputArgs } from "./getSshkey";
export const getSshkey: typeof import("./getSshkey").getSshkey = null as any;
export const getSshkeyOutput: typeof import("./getSshkey").getSshkeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshkey","getSshkeyOutput"], () => require("./getSshkey"));

export { GetSslCertificateArgs, GetSslCertificateResult, GetSslCertificateOutputArgs } from "./getSslCertificate";
export const getSslCertificate: typeof import("./getSslCertificate").getSslCertificate = null as any;
export const getSslCertificateOutput: typeof import("./getSslCertificate").getSslCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getSslCertificate","getSslCertificateOutput"], () => require("./getSslCertificate"));

export { GetStorageArgs, GetStorageResult, GetStorageOutputArgs } from "./getStorage";
export const getStorage: typeof import("./getStorage").getStorage = null as any;
export const getStorageOutput: typeof import("./getStorage").getStorageOutput = null as any;
utilities.lazyLoad(exports, ["getStorage","getStorageOutput"], () => require("./getStorage"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { Ipv4Args, Ipv4State } from "./ipv4";
export type Ipv4 = import("./ipv4").Ipv4;
export const Ipv4: typeof import("./ipv4").Ipv4 = null as any;
utilities.lazyLoad(exports, ["Ipv4"], () => require("./ipv4"));

export { Ipv6Args, Ipv6State } from "./ipv6";
export type Ipv6 = import("./ipv6").Ipv6;
export const Ipv6: typeof import("./ipv6").Ipv6 = null as any;
utilities.lazyLoad(exports, ["Ipv6"], () => require("./ipv6"));

export { IsoimageArgs, IsoimageState } from "./isoimage";
export type Isoimage = import("./isoimage").Isoimage;
export const Isoimage: typeof import("./isoimage").Isoimage = null as any;
utilities.lazyLoad(exports, ["Isoimage"], () => require("./isoimage"));

export { K8sArgs, K8sState } from "./k8s";
export type K8s = import("./k8s").K8s;
export const K8s: typeof import("./k8s").K8s = null as any;
utilities.lazyLoad(exports, ["K8s"], () => require("./k8s"));

export { LoadbalancerArgs, LoadbalancerState } from "./loadbalancer";
export type Loadbalancer = import("./loadbalancer").Loadbalancer;
export const Loadbalancer: typeof import("./loadbalancer").Loadbalancer = null as any;
utilities.lazyLoad(exports, ["Loadbalancer"], () => require("./loadbalancer"));

export { MariadbArgs, MariadbState } from "./mariadb";
export type Mariadb = import("./mariadb").Mariadb;
export const Mariadb: typeof import("./mariadb").Mariadb = null as any;
utilities.lazyLoad(exports, ["Mariadb"], () => require("./mariadb"));

export { MarketplaceApplicationArgs, MarketplaceApplicationState } from "./marketplaceApplication";
export type MarketplaceApplication = import("./marketplaceApplication").MarketplaceApplication;
export const MarketplaceApplication: typeof import("./marketplaceApplication").MarketplaceApplication = null as any;
utilities.lazyLoad(exports, ["MarketplaceApplication"], () => require("./marketplaceApplication"));

export { MarketplaceApplicationImportArgs, MarketplaceApplicationImportState } from "./marketplaceApplicationImport";
export type MarketplaceApplicationImport = import("./marketplaceApplicationImport").MarketplaceApplicationImport;
export const MarketplaceApplicationImport: typeof import("./marketplaceApplicationImport").MarketplaceApplicationImport = null as any;
utilities.lazyLoad(exports, ["MarketplaceApplicationImport"], () => require("./marketplaceApplicationImport"));

export { MemcachedArgs, MemcachedState } from "./memcached";
export type Memcached = import("./memcached").Memcached;
export const Memcached: typeof import("./memcached").Memcached = null as any;
utilities.lazyLoad(exports, ["Memcached"], () => require("./memcached"));

export { MysqlArgs, MysqlState } from "./mysql";
export type Mysql = import("./mysql").Mysql;
export const Mysql: typeof import("./mysql").Mysql = null as any;
utilities.lazyLoad(exports, ["Mysql"], () => require("./mysql"));

export { Mysql80Args, Mysql80State } from "./mysql80";
export type Mysql80 = import("./mysql80").Mysql80;
export const Mysql80: typeof import("./mysql80").Mysql80 = null as any;
utilities.lazyLoad(exports, ["Mysql80"], () => require("./mysql80"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { ObjectStorageAccesskeyArgs, ObjectStorageAccesskeyState } from "./objectStorageAccesskey";
export type ObjectStorageAccesskey = import("./objectStorageAccesskey").ObjectStorageAccesskey;
export const ObjectStorageAccesskey: typeof import("./objectStorageAccesskey").ObjectStorageAccesskey = null as any;
utilities.lazyLoad(exports, ["ObjectStorageAccesskey"], () => require("./objectStorageAccesskey"));

export { ObjectStorageBucketArgs, ObjectStorageBucketState } from "./objectStorageBucket";
export type ObjectStorageBucket = import("./objectStorageBucket").ObjectStorageBucket;
export const ObjectStorageBucket: typeof import("./objectStorageBucket").ObjectStorageBucket = null as any;
utilities.lazyLoad(exports, ["ObjectStorageBucket"], () => require("./objectStorageBucket"));

export { PaasArgs, PaasState } from "./paas";
export type Paas = import("./paas").Paas;
export const Paas: typeof import("./paas").Paas = null as any;
utilities.lazyLoad(exports, ["Paas"], () => require("./paas"));

export { PaasSecurityzoneArgs, PaasSecurityzoneState } from "./paasSecurityzone";
export type PaasSecurityzone = import("./paasSecurityzone").PaasSecurityzone;
export const PaasSecurityzone: typeof import("./paasSecurityzone").PaasSecurityzone = null as any;
utilities.lazyLoad(exports, ["PaasSecurityzone"], () => require("./paasSecurityzone"));

export { PostgresqlArgs, PostgresqlState } from "./postgresql";
export type Postgresql = import("./postgresql").Postgresql;
export const Postgresql: typeof import("./postgresql").Postgresql = null as any;
utilities.lazyLoad(exports, ["Postgresql"], () => require("./postgresql"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RedisCacheArgs, RedisCacheState } from "./redisCache";
export type RedisCache = import("./redisCache").RedisCache;
export const RedisCache: typeof import("./redisCache").RedisCache = null as any;
utilities.lazyLoad(exports, ["RedisCache"], () => require("./redisCache"));

export { RedisStoreArgs, RedisStoreState } from "./redisStore";
export type RedisStore = import("./redisStore").RedisStore;
export const RedisStore: typeof import("./redisStore").RedisStore = null as any;
utilities.lazyLoad(exports, ["RedisStore"], () => require("./redisStore"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SnapshotscheduleArgs, SnapshotscheduleState } from "./snapshotschedule";
export type Snapshotschedule = import("./snapshotschedule").Snapshotschedule;
export const Snapshotschedule: typeof import("./snapshotschedule").Snapshotschedule = null as any;
utilities.lazyLoad(exports, ["Snapshotschedule"], () => require("./snapshotschedule"));

export { SqlserverArgs, SqlserverState } from "./sqlserver";
export type Sqlserver = import("./sqlserver").Sqlserver;
export const Sqlserver: typeof import("./sqlserver").Sqlserver = null as any;
utilities.lazyLoad(exports, ["Sqlserver"], () => require("./sqlserver"));

export { SshkeyArgs, SshkeyState } from "./sshkey";
export type Sshkey = import("./sshkey").Sshkey;
export const Sshkey: typeof import("./sshkey").Sshkey = null as any;
utilities.lazyLoad(exports, ["Sshkey"], () => require("./sshkey"));

export { SslCertificateArgs, SslCertificateState } from "./sslCertificate";
export type SslCertificate = import("./sslCertificate").SslCertificate;
export const SslCertificate: typeof import("./sslCertificate").SslCertificate = null as any;
utilities.lazyLoad(exports, ["SslCertificate"], () => require("./sslCertificate"));

export { StorageArgs, StorageState } from "./storage";
export type Storage = import("./storage").Storage;
export const Storage: typeof import("./storage").Storage = null as any;
utilities.lazyLoad(exports, ["Storage"], () => require("./storage"));

export { StorageCloneArgs, StorageCloneState } from "./storageClone";
export type StorageClone = import("./storageClone").StorageClone;
export const StorageClone: typeof import("./storageClone").StorageClone = null as any;
utilities.lazyLoad(exports, ["StorageClone"], () => require("./storageClone"));

export { StorageImportArgs, StorageImportState } from "./storageImport";
export type StorageImport = import("./storageImport").StorageImport;
export const StorageImport: typeof import("./storageImport").StorageImport = null as any;
utilities.lazyLoad(exports, ["StorageImport"], () => require("./storageImport"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gridscale:index/backupschedule:Backupschedule":
                return new Backupschedule(name, <any>undefined, { urn })
            case "gridscale:index/filesystem:Filesystem":
                return new Filesystem(name, <any>undefined, { urn })
            case "gridscale:index/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "gridscale:index/ipv4:Ipv4":
                return new Ipv4(name, <any>undefined, { urn })
            case "gridscale:index/ipv6:Ipv6":
                return new Ipv6(name, <any>undefined, { urn })
            case "gridscale:index/isoimage:Isoimage":
                return new Isoimage(name, <any>undefined, { urn })
            case "gridscale:index/k8s:K8s":
                return new K8s(name, <any>undefined, { urn })
            case "gridscale:index/loadbalancer:Loadbalancer":
                return new Loadbalancer(name, <any>undefined, { urn })
            case "gridscale:index/mariadb:Mariadb":
                return new Mariadb(name, <any>undefined, { urn })
            case "gridscale:index/marketplaceApplication:MarketplaceApplication":
                return new MarketplaceApplication(name, <any>undefined, { urn })
            case "gridscale:index/marketplaceApplicationImport:MarketplaceApplicationImport":
                return new MarketplaceApplicationImport(name, <any>undefined, { urn })
            case "gridscale:index/memcached:Memcached":
                return new Memcached(name, <any>undefined, { urn })
            case "gridscale:index/mysql80:Mysql80":
                return new Mysql80(name, <any>undefined, { urn })
            case "gridscale:index/mysql:Mysql":
                return new Mysql(name, <any>undefined, { urn })
            case "gridscale:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "gridscale:index/objectStorageAccesskey:ObjectStorageAccesskey":
                return new ObjectStorageAccesskey(name, <any>undefined, { urn })
            case "gridscale:index/objectStorageBucket:ObjectStorageBucket":
                return new ObjectStorageBucket(name, <any>undefined, { urn })
            case "gridscale:index/paas:Paas":
                return new Paas(name, <any>undefined, { urn })
            case "gridscale:index/paasSecurityzone:PaasSecurityzone":
                return new PaasSecurityzone(name, <any>undefined, { urn })
            case "gridscale:index/postgresql:Postgresql":
                return new Postgresql(name, <any>undefined, { urn })
            case "gridscale:index/redisCache:RedisCache":
                return new RedisCache(name, <any>undefined, { urn })
            case "gridscale:index/redisStore:RedisStore":
                return new RedisStore(name, <any>undefined, { urn })
            case "gridscale:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "gridscale:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "gridscale:index/snapshotschedule:Snapshotschedule":
                return new Snapshotschedule(name, <any>undefined, { urn })
            case "gridscale:index/sqlserver:Sqlserver":
                return new Sqlserver(name, <any>undefined, { urn })
            case "gridscale:index/sshkey:Sshkey":
                return new Sshkey(name, <any>undefined, { urn })
            case "gridscale:index/sslCertificate:SslCertificate":
                return new SslCertificate(name, <any>undefined, { urn })
            case "gridscale:index/storage:Storage":
                return new Storage(name, <any>undefined, { urn })
            case "gridscale:index/storageClone:StorageClone":
                return new StorageClone(name, <any>undefined, { urn })
            case "gridscale:index/storageImport:StorageImport":
                return new StorageImport(name, <any>undefined, { urn })
            case "gridscale:index/template:Template":
                return new Template(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gridscale", "index/backupschedule", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/filesystem", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/firewall", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/ipv4", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/ipv6", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/isoimage", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/k8s", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/loadbalancer", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/mariadb", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/marketplaceApplication", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/marketplaceApplicationImport", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/memcached", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/mysql", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/mysql80", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/network", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/objectStorageAccesskey", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/objectStorageBucket", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/paas", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/paasSecurityzone", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/postgresql", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/redisCache", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/redisStore", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/server", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/snapshotschedule", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/sqlserver", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/sshkey", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/sslCertificate", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/storage", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/storageClone", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/storageImport", _module)
pulumi.runtime.registerResourceModule("gridscale", "index/template", _module)
pulumi.runtime.registerResourcePackage("gridscale", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:gridscale") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
