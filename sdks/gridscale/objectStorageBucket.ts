// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectStorageBucket extends pulumi.CustomResource {
    /**
     * Get an existing ObjectStorageBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectStorageBucketState, opts?: pulumi.CustomResourceOptions): ObjectStorageBucket {
        return new ObjectStorageBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gridscale:index/objectStorageBucket:ObjectStorageBucket';

    /**
     * Returns true if the given object is an instance of ObjectStorageBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectStorageBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectStorageBucket.__pulumiType;
    }

    /**
     * The object storage secret_key.
     */
    public readonly accessKey!: pulumi.Output<string>;
    /**
     * The name of the bucket.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * The S3 host.
     */
    public readonly s3Host!: pulumi.Output<string | undefined>;
    /**
     * The object storage access_key.
     */
    public readonly secretKey!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ObjectStorageBucketTimeouts | undefined>;

    /**
     * Create a ObjectStorageBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectStorageBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectStorageBucketArgs | ObjectStorageBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectStorageBucketState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["s3Host"] = state ? state.s3Host : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ObjectStorageBucketArgs | undefined;
            if ((!args || args.accessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessKey'");
            }
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.secretKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            resourceInputs["accessKey"] = args?.accessKey ? pulumi.secret(args.accessKey) : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["s3Host"] = args ? args.s3Host : undefined;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey", "secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ObjectStorageBucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectStorageBucket resources.
 */
export interface ObjectStorageBucketState {
    /**
     * The object storage secret_key.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The name of the bucket.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The S3 host.
     */
    s3Host?: pulumi.Input<string>;
    /**
     * The object storage access_key.
     */
    secretKey?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ObjectStorageBucketTimeouts>;
}

/**
 * The set of arguments for constructing a ObjectStorageBucket resource.
 */
export interface ObjectStorageBucketArgs {
    /**
     * The object storage secret_key.
     */
    accessKey: pulumi.Input<string>;
    /**
     * The name of the bucket.
     */
    bucketName: pulumi.Input<string>;
    /**
     * The S3 host.
     */
    s3Host?: pulumi.Input<string>;
    /**
     * The object storage access_key.
     */
    secretKey: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ObjectStorageBucketTimeouts>;
}
