// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class K8s extends pulumi.CustomResource {
    /**
     * Get an existing K8s resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sState, opts?: pulumi.CustomResourceOptions): K8s {
        return new K8s(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gridscale:index/k8s:K8s';

    /**
     * Returns true if the given object is an instance of K8s.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8s {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8s.__pulumiType;
    }

    /**
     * Time of the last change
     */
    public /*out*/ readonly changeTime!: pulumi.Output<string>;
    /**
     * Time this service was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The gridscale k8s PaaS version (issued by gridscale) of this instance.
     */
    public readonly gskVersion!: pulumi.Output<string | undefined>;
    /**
     * Private network UUID which k8s nodes are attached to. It can be used to attach other PaaS/VMs.
     */
    public /*out*/ readonly k8sPrivateNetworkUuid!: pulumi.Output<string>;
    /**
     * K8s config data
     */
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;
    /**
     * List of labels.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * The port number where this k8s service accepts connections.
     */
    public /*out*/ readonly listenPorts!: pulumi.Output<outputs.K8sListenPort[]>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network UUID containing security zone
     *
     * @deprecated Deprecated
     */
    public /*out*/ readonly networkUuid!: pulumi.Output<string>;
    /**
     * Node pool's specification.
     */
    public readonly nodePool!: pulumi.Output<outputs.K8sNodePool>;
    /**
     * Custom CA from customer in pem format as string.
     */
    public readonly oidcCaPem!: pulumi.Output<string>;
    /**
     * A client ID that all tokens must be issued for.
     */
    public readonly oidcClientId!: pulumi.Output<string>;
    /**
     * Disable or enable OIDC
     */
    public readonly oidcEnabled!: pulumi.Output<boolean>;
    /**
     * JWT claim to use as the user's group.
     */
    public readonly oidcGroupsClaim!: pulumi.Output<string>;
    /**
     * Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value
     * oidc: will create group names like oidc:engineering and oidc:infra.
     */
    public readonly oidcGroupsPrefix!: pulumi.Output<string>;
    /**
     * URL of the provider that allows the API server to discover public signing keys. Only URLs that use the https:// scheme
     * are accepted.
     */
    public readonly oidcIssuerUrl!: pulumi.Output<string>;
    /**
     * A key=value pair that describes a required claim in the ID Token. Multiple claims can be set like this:
     * key1=value1,key2=value2
     */
    public readonly oidcRequiredClaim!: pulumi.Output<string>;
    /**
     * The signing algorithms accepted. Default is 'RS256'. Other option is 'RS512'.
     */
    public readonly oidcSigningAlgs!: pulumi.Output<string>;
    /**
     * JWT claim to use as the user name.
     */
    public readonly oidcUsernameClaim!: pulumi.Output<string>;
    /**
     * Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the
     * value oidc: will create usernames like oidc:jane.doe. If this flag isn't provided and --oidc-username-claim is a value
     * other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of --oidc-issuer-url. The
     * value - can be used to disable all prefixing.
     */
    public readonly oidcUsernamePrefix!: pulumi.Output<string>;
    /**
     * The k8s release of this instance.
     */
    public readonly release!: pulumi.Output<string | undefined>;
    /**
     * Security zone UUID linked to PaaS service.
     *
     * @deprecated Deprecated
     */
    public readonly securityZoneUuid!: pulumi.Output<string>;
    /**
     * PaaS service template identifier for this service.
     */
    public /*out*/ readonly serviceTemplateUuid!: pulumi.Output<string>;
    /**
     * Current status of the service
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.K8sTimeouts | undefined>;
    /**
     * Number of minutes that PaaS service is in use
     */
    public /*out*/ readonly usageInMinutes!: pulumi.Output<number>;

    /**
     * Create a K8s resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sArgs | K8sState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sState | undefined;
            resourceInputs["changeTime"] = state ? state.changeTime : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["gskVersion"] = state ? state.gskVersion : undefined;
            resourceInputs["k8sPrivateNetworkUuid"] = state ? state.k8sPrivateNetworkUuid : undefined;
            resourceInputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["listenPorts"] = state ? state.listenPorts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkUuid"] = state ? state.networkUuid : undefined;
            resourceInputs["nodePool"] = state ? state.nodePool : undefined;
            resourceInputs["oidcCaPem"] = state ? state.oidcCaPem : undefined;
            resourceInputs["oidcClientId"] = state ? state.oidcClientId : undefined;
            resourceInputs["oidcEnabled"] = state ? state.oidcEnabled : undefined;
            resourceInputs["oidcGroupsClaim"] = state ? state.oidcGroupsClaim : undefined;
            resourceInputs["oidcGroupsPrefix"] = state ? state.oidcGroupsPrefix : undefined;
            resourceInputs["oidcIssuerUrl"] = state ? state.oidcIssuerUrl : undefined;
            resourceInputs["oidcRequiredClaim"] = state ? state.oidcRequiredClaim : undefined;
            resourceInputs["oidcSigningAlgs"] = state ? state.oidcSigningAlgs : undefined;
            resourceInputs["oidcUsernameClaim"] = state ? state.oidcUsernameClaim : undefined;
            resourceInputs["oidcUsernamePrefix"] = state ? state.oidcUsernamePrefix : undefined;
            resourceInputs["release"] = state ? state.release : undefined;
            resourceInputs["securityZoneUuid"] = state ? state.securityZoneUuid : undefined;
            resourceInputs["serviceTemplateUuid"] = state ? state.serviceTemplateUuid : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usageInMinutes"] = state ? state.usageInMinutes : undefined;
        } else {
            const args = argsOrState as K8sArgs | undefined;
            if ((!args || args.nodePool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodePool'");
            }
            resourceInputs["gskVersion"] = args ? args.gskVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodePool"] = args ? args.nodePool : undefined;
            resourceInputs["oidcCaPem"] = args ? args.oidcCaPem : undefined;
            resourceInputs["oidcClientId"] = args ? args.oidcClientId : undefined;
            resourceInputs["oidcEnabled"] = args ? args.oidcEnabled : undefined;
            resourceInputs["oidcGroupsClaim"] = args ? args.oidcGroupsClaim : undefined;
            resourceInputs["oidcGroupsPrefix"] = args ? args.oidcGroupsPrefix : undefined;
            resourceInputs["oidcIssuerUrl"] = args ? args.oidcIssuerUrl : undefined;
            resourceInputs["oidcRequiredClaim"] = args ? args.oidcRequiredClaim : undefined;
            resourceInputs["oidcSigningAlgs"] = args ? args.oidcSigningAlgs : undefined;
            resourceInputs["oidcUsernameClaim"] = args ? args.oidcUsernameClaim : undefined;
            resourceInputs["oidcUsernamePrefix"] = args ? args.oidcUsernamePrefix : undefined;
            resourceInputs["release"] = args ? args.release : undefined;
            resourceInputs["securityZoneUuid"] = args ? args.securityZoneUuid : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["changeTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["k8sPrivateNetworkUuid"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["listenPorts"] = undefined /*out*/;
            resourceInputs["networkUuid"] = undefined /*out*/;
            resourceInputs["serviceTemplateUuid"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["usageInMinutes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeconfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(K8s.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering K8s resources.
 */
export interface K8sState {
    /**
     * Time of the last change
     */
    changeTime?: pulumi.Input<string>;
    /**
     * Time this service was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The gridscale k8s PaaS version (issued by gridscale) of this instance.
     */
    gskVersion?: pulumi.Input<string>;
    /**
     * Private network UUID which k8s nodes are attached to. It can be used to attach other PaaS/VMs.
     */
    k8sPrivateNetworkUuid?: pulumi.Input<string>;
    /**
     * K8s config data
     */
    kubeconfig?: pulumi.Input<string>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The port number where this k8s service accepts connections.
     */
    listenPorts?: pulumi.Input<pulumi.Input<inputs.K8sListenPort>[]>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Network UUID containing security zone
     *
     * @deprecated Deprecated
     */
    networkUuid?: pulumi.Input<string>;
    /**
     * Node pool's specification.
     */
    nodePool?: pulumi.Input<inputs.K8sNodePool>;
    /**
     * Custom CA from customer in pem format as string.
     */
    oidcCaPem?: pulumi.Input<string>;
    /**
     * A client ID that all tokens must be issued for.
     */
    oidcClientId?: pulumi.Input<string>;
    /**
     * Disable or enable OIDC
     */
    oidcEnabled?: pulumi.Input<boolean>;
    /**
     * JWT claim to use as the user's group.
     */
    oidcGroupsClaim?: pulumi.Input<string>;
    /**
     * Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value
     * oidc: will create group names like oidc:engineering and oidc:infra.
     */
    oidcGroupsPrefix?: pulumi.Input<string>;
    /**
     * URL of the provider that allows the API server to discover public signing keys. Only URLs that use the https:// scheme
     * are accepted.
     */
    oidcIssuerUrl?: pulumi.Input<string>;
    /**
     * A key=value pair that describes a required claim in the ID Token. Multiple claims can be set like this:
     * key1=value1,key2=value2
     */
    oidcRequiredClaim?: pulumi.Input<string>;
    /**
     * The signing algorithms accepted. Default is 'RS256'. Other option is 'RS512'.
     */
    oidcSigningAlgs?: pulumi.Input<string>;
    /**
     * JWT claim to use as the user name.
     */
    oidcUsernameClaim?: pulumi.Input<string>;
    /**
     * Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the
     * value oidc: will create usernames like oidc:jane.doe. If this flag isn't provided and --oidc-username-claim is a value
     * other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of --oidc-issuer-url. The
     * value - can be used to disable all prefixing.
     */
    oidcUsernamePrefix?: pulumi.Input<string>;
    /**
     * The k8s release of this instance.
     */
    release?: pulumi.Input<string>;
    /**
     * Security zone UUID linked to PaaS service.
     *
     * @deprecated Deprecated
     */
    securityZoneUuid?: pulumi.Input<string>;
    /**
     * PaaS service template identifier for this service.
     */
    serviceTemplateUuid?: pulumi.Input<string>;
    /**
     * Current status of the service
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sTimeouts>;
    /**
     * Number of minutes that PaaS service is in use
     */
    usageInMinutes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a K8s resource.
 */
export interface K8sArgs {
    /**
     * The gridscale k8s PaaS version (issued by gridscale) of this instance.
     */
    gskVersion?: pulumi.Input<string>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Node pool's specification.
     */
    nodePool: pulumi.Input<inputs.K8sNodePool>;
    /**
     * Custom CA from customer in pem format as string.
     */
    oidcCaPem?: pulumi.Input<string>;
    /**
     * A client ID that all tokens must be issued for.
     */
    oidcClientId?: pulumi.Input<string>;
    /**
     * Disable or enable OIDC
     */
    oidcEnabled?: pulumi.Input<boolean>;
    /**
     * JWT claim to use as the user's group.
     */
    oidcGroupsClaim?: pulumi.Input<string>;
    /**
     * Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value
     * oidc: will create group names like oidc:engineering and oidc:infra.
     */
    oidcGroupsPrefix?: pulumi.Input<string>;
    /**
     * URL of the provider that allows the API server to discover public signing keys. Only URLs that use the https:// scheme
     * are accepted.
     */
    oidcIssuerUrl?: pulumi.Input<string>;
    /**
     * A key=value pair that describes a required claim in the ID Token. Multiple claims can be set like this:
     * key1=value1,key2=value2
     */
    oidcRequiredClaim?: pulumi.Input<string>;
    /**
     * The signing algorithms accepted. Default is 'RS256'. Other option is 'RS512'.
     */
    oidcSigningAlgs?: pulumi.Input<string>;
    /**
     * JWT claim to use as the user name.
     */
    oidcUsernameClaim?: pulumi.Input<string>;
    /**
     * Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the
     * value oidc: will create usernames like oidc:jane.doe. If this flag isn't provided and --oidc-username-claim is a value
     * other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of --oidc-issuer-url. The
     * value - can be used to disable all prefixing.
     */
    oidcUsernamePrefix?: pulumi.Input<string>;
    /**
     * The k8s release of this instance.
     */
    release?: pulumi.Input<string>;
    /**
     * Security zone UUID linked to PaaS service.
     *
     * @deprecated Deprecated
     */
    securityZoneUuid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sTimeouts>;
}
