// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Snapshot extends pulumi.CustomResource {
    /**
     * Get an existing Snapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotState, opts?: pulumi.CustomResourceOptions): Snapshot {
        return new Snapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gridscale:index/snapshot:Snapshot';

    /**
     * Returns true if the given object is an instance of Snapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshot.__pulumiType;
    }

    /**
     * The capacity of a storage/ISO image/template/snapshot in GB
     */
    public /*out*/ readonly capacity!: pulumi.Output<number>;
    /**
     * Defines the date and time of the last object change
     */
    public /*out*/ readonly changeTime!: pulumi.Output<string>;
    /**
     * Defines the date and time the object was initially created
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The price for the current period since the last bill
     */
    public /*out*/ readonly currentPrice!: pulumi.Output<number>;
    /**
     * List of labels.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * If a template has been used that requires a license key (e.g. Windows Servers) this shows the product_no of the license
     * (see the /prices endpoint for more details)
     */
    public /*out*/ readonly licenseProductNo!: pulumi.Output<number>;
    /**
     * The human-readable name of the location
     */
    public /*out*/ readonly locationCountry!: pulumi.Output<string>;
    /**
     * Uses IATA airport code, which works as a location identifier
     */
    public /*out*/ readonly locationIata!: pulumi.Output<string>;
    /**
     * The human-readable name of the location
     */
    public /*out*/ readonly locationName!: pulumi.Output<string>;
    /**
     * The location this object is placed.
     */
    public /*out*/ readonly locationUuid!: pulumi.Output<string>;
    /**
     * The human-readable name of the object
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Export snapshot to a object storage
     */
    public readonly objectStorageExports!: pulumi.Output<outputs.SnapshotObjectStorageExport[] | undefined>;
    /**
     * Returns a storage to the state of the selected Snapshot.
     */
    public readonly rollbacks!: pulumi.Output<outputs.SnapshotRollback[] | undefined>;
    /**
     * Status indicates the status of the object
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * UUID of the storage used to create this snapshot
     */
    public readonly storageUuid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SnapshotTimeouts | undefined>;
    /**
     * Total minutes the object has been running
     */
    public /*out*/ readonly usageInMinutes!: pulumi.Output<number>;

    /**
     * Create a Snapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotArgs | SnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotState | undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["changeTime"] = state ? state.changeTime : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["currentPrice"] = state ? state.currentPrice : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["licenseProductNo"] = state ? state.licenseProductNo : undefined;
            resourceInputs["locationCountry"] = state ? state.locationCountry : undefined;
            resourceInputs["locationIata"] = state ? state.locationIata : undefined;
            resourceInputs["locationName"] = state ? state.locationName : undefined;
            resourceInputs["locationUuid"] = state ? state.locationUuid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectStorageExports"] = state ? state.objectStorageExports : undefined;
            resourceInputs["rollbacks"] = state ? state.rollbacks : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageUuid"] = state ? state.storageUuid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usageInMinutes"] = state ? state.usageInMinutes : undefined;
        } else {
            const args = argsOrState as SnapshotArgs | undefined;
            if ((!args || args.storageUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageUuid'");
            }
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectStorageExports"] = args ? args.objectStorageExports : undefined;
            resourceInputs["rollbacks"] = args ? args.rollbacks : undefined;
            resourceInputs["storageUuid"] = args ? args.storageUuid : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["capacity"] = undefined /*out*/;
            resourceInputs["changeTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["currentPrice"] = undefined /*out*/;
            resourceInputs["licenseProductNo"] = undefined /*out*/;
            resourceInputs["locationCountry"] = undefined /*out*/;
            resourceInputs["locationIata"] = undefined /*out*/;
            resourceInputs["locationName"] = undefined /*out*/;
            resourceInputs["locationUuid"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["usageInMinutes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snapshot resources.
 */
export interface SnapshotState {
    /**
     * The capacity of a storage/ISO image/template/snapshot in GB
     */
    capacity?: pulumi.Input<number>;
    /**
     * Defines the date and time of the last object change
     */
    changeTime?: pulumi.Input<string>;
    /**
     * Defines the date and time the object was initially created
     */
    createTime?: pulumi.Input<string>;
    /**
     * The price for the current period since the last bill
     */
    currentPrice?: pulumi.Input<number>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If a template has been used that requires a license key (e.g. Windows Servers) this shows the product_no of the license
     * (see the /prices endpoint for more details)
     */
    licenseProductNo?: pulumi.Input<number>;
    /**
     * The human-readable name of the location
     */
    locationCountry?: pulumi.Input<string>;
    /**
     * Uses IATA airport code, which works as a location identifier
     */
    locationIata?: pulumi.Input<string>;
    /**
     * The human-readable name of the location
     */
    locationName?: pulumi.Input<string>;
    /**
     * The location this object is placed.
     */
    locationUuid?: pulumi.Input<string>;
    /**
     * The human-readable name of the object
     */
    name?: pulumi.Input<string>;
    /**
     * Export snapshot to a object storage
     */
    objectStorageExports?: pulumi.Input<pulumi.Input<inputs.SnapshotObjectStorageExport>[]>;
    /**
     * Returns a storage to the state of the selected Snapshot.
     */
    rollbacks?: pulumi.Input<pulumi.Input<inputs.SnapshotRollback>[]>;
    /**
     * Status indicates the status of the object
     */
    status?: pulumi.Input<string>;
    /**
     * UUID of the storage used to create this snapshot
     */
    storageUuid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SnapshotTimeouts>;
    /**
     * Total minutes the object has been running
     */
    usageInMinutes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Snapshot resource.
 */
export interface SnapshotArgs {
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The human-readable name of the object
     */
    name?: pulumi.Input<string>;
    /**
     * Export snapshot to a object storage
     */
    objectStorageExports?: pulumi.Input<pulumi.Input<inputs.SnapshotObjectStorageExport>[]>;
    /**
     * Returns a storage to the state of the selected Snapshot.
     */
    rollbacks?: pulumi.Input<pulumi.Input<inputs.SnapshotRollback>[]>;
    /**
     * UUID of the storage used to create this snapshot
     */
    storageUuid: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SnapshotTimeouts>;
}
