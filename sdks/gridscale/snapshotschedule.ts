// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Snapshotschedule extends pulumi.CustomResource {
    /**
     * Get an existing Snapshotschedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotscheduleState, opts?: pulumi.CustomResourceOptions): Snapshotschedule {
        return new Snapshotschedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gridscale:index/snapshotschedule:Snapshotschedule';

    /**
     * Returns true if the given object is an instance of Snapshotschedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshotschedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshotschedule.__pulumiType;
    }

    /**
     * Defines the date and time of the last object change
     */
    public /*out*/ readonly changeTime!: pulumi.Output<string>;
    /**
     * Defines the date and time the object was initially created
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The amount of Snapshots to keep before overwriting the last created Snapshot
     */
    public readonly keepSnapshots!: pulumi.Output<number>;
    /**
     * List of labels.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * The human-readable name of the object
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The date and time that the snapshot schedule will be run
     */
    public readonly nextRuntime!: pulumi.Output<string | undefined>;
    /**
     * The date and time that the snapshot schedule will be run. This date and time is computed by gridscale's server.
     */
    public /*out*/ readonly nextRuntimeComputed!: pulumi.Output<string>;
    /**
     * The interval at which the schedule will run (in minutes)
     */
    public readonly runInterval!: pulumi.Output<number>;
    /**
     * Related snashots
     */
    public /*out*/ readonly snapshots!: pulumi.Output<outputs.SnapshotscheduleSnapshot[]>;
    /**
     * Status indicates the status of the object
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * UUID of the storage used to create snapshots
     */
    public readonly storageUuid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SnapshotscheduleTimeouts | undefined>;

    /**
     * Create a Snapshotschedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotscheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotscheduleArgs | SnapshotscheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotscheduleState | undefined;
            resourceInputs["changeTime"] = state ? state.changeTime : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["keepSnapshots"] = state ? state.keepSnapshots : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nextRuntime"] = state ? state.nextRuntime : undefined;
            resourceInputs["nextRuntimeComputed"] = state ? state.nextRuntimeComputed : undefined;
            resourceInputs["runInterval"] = state ? state.runInterval : undefined;
            resourceInputs["snapshots"] = state ? state.snapshots : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageUuid"] = state ? state.storageUuid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SnapshotscheduleArgs | undefined;
            if ((!args || args.keepSnapshots === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keepSnapshots'");
            }
            if ((!args || args.runInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runInterval'");
            }
            if ((!args || args.storageUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageUuid'");
            }
            resourceInputs["keepSnapshots"] = args ? args.keepSnapshots : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nextRuntime"] = args ? args.nextRuntime : undefined;
            resourceInputs["runInterval"] = args ? args.runInterval : undefined;
            resourceInputs["storageUuid"] = args ? args.storageUuid : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["changeTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["nextRuntimeComputed"] = undefined /*out*/;
            resourceInputs["snapshots"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshotschedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snapshotschedule resources.
 */
export interface SnapshotscheduleState {
    /**
     * Defines the date and time of the last object change
     */
    changeTime?: pulumi.Input<string>;
    /**
     * Defines the date and time the object was initially created
     */
    createTime?: pulumi.Input<string>;
    /**
     * The amount of Snapshots to keep before overwriting the last created Snapshot
     */
    keepSnapshots?: pulumi.Input<number>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The human-readable name of the object
     */
    name?: pulumi.Input<string>;
    /**
     * The date and time that the snapshot schedule will be run
     */
    nextRuntime?: pulumi.Input<string>;
    /**
     * The date and time that the snapshot schedule will be run. This date and time is computed by gridscale's server.
     */
    nextRuntimeComputed?: pulumi.Input<string>;
    /**
     * The interval at which the schedule will run (in minutes)
     */
    runInterval?: pulumi.Input<number>;
    /**
     * Related snashots
     */
    snapshots?: pulumi.Input<pulumi.Input<inputs.SnapshotscheduleSnapshot>[]>;
    /**
     * Status indicates the status of the object
     */
    status?: pulumi.Input<string>;
    /**
     * UUID of the storage used to create snapshots
     */
    storageUuid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SnapshotscheduleTimeouts>;
}

/**
 * The set of arguments for constructing a Snapshotschedule resource.
 */
export interface SnapshotscheduleArgs {
    /**
     * The amount of Snapshots to keep before overwriting the last created Snapshot
     */
    keepSnapshots: pulumi.Input<number>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The human-readable name of the object
     */
    name?: pulumi.Input<string>;
    /**
     * The date and time that the snapshot schedule will be run
     */
    nextRuntime?: pulumi.Input<string>;
    /**
     * The interval at which the schedule will run (in minutes)
     */
    runInterval: pulumi.Input<number>;
    /**
     * UUID of the storage used to create snapshots
     */
    storageUuid: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SnapshotscheduleTimeouts>;
}
