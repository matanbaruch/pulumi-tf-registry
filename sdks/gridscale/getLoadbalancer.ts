// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLoadbalancer(args: GetLoadbalancerArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadbalancerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gridscale:index/getLoadbalancer:getLoadbalancer", {
        "id": args.id,
        "resourceId": args.resourceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoadbalancer.
 */
export interface GetLoadbalancerArgs {
    id?: string;
    resourceId: string;
}

/**
 * A collection of values returned by getLoadbalancer.
 */
export interface GetLoadbalancerResult {
    readonly algorithm: string;
    readonly backendServers: outputs.GetLoadbalancerBackendServer[];
    readonly forwardingRules: outputs.GetLoadbalancerForwardingRule[];
    readonly id: string;
    readonly labels: string[];
    readonly listenIpv4Uuid: string;
    readonly listenIpv6Uuid: string;
    readonly locationUuid: string;
    readonly name: string;
    readonly redirectHttpToHttps: boolean;
    readonly resourceId: string;
    readonly status: string;
}
export function getLoadbalancerOutput(args: GetLoadbalancerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadbalancerResult> {
    return pulumi.output(args).apply((a: any) => getLoadbalancer(a, opts))
}

/**
 * A collection of arguments for invoking getLoadbalancer.
 */
export interface GetLoadbalancerOutputArgs {
    id?: pulumi.Input<string>;
    resourceId: pulumi.Input<string>;
}
