// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Sshkey extends pulumi.CustomResource {
    /**
     * Get an existing Sshkey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SshkeyState, opts?: pulumi.CustomResourceOptions): Sshkey {
        return new Sshkey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gridscale:index/sshkey:Sshkey';

    /**
     * Returns true if the given object is an instance of Sshkey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sshkey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sshkey.__pulumiType;
    }

    /**
     * The date and time of the last object change
     */
    public /*out*/ readonly changeTime!: pulumi.Output<string>;
    /**
     * The date and time the object was initially created
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * List of labels.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * sshkey_string is the OpenSSH public key string (all key types are supported => ed25519, ecdsa, dsa, rsa, rsa1)
     */
    public readonly sshkey!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SshkeyTimeouts | undefined>;

    /**
     * Create a Sshkey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SshkeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SshkeyArgs | SshkeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SshkeyState | undefined;
            resourceInputs["changeTime"] = state ? state.changeTime : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sshkey"] = state ? state.sshkey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SshkeyArgs | undefined;
            if ((!args || args.sshkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshkey'");
            }
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sshkey"] = args ? args.sshkey : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["changeTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sshkey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sshkey resources.
 */
export interface SshkeyState {
    /**
     * The date and time of the last object change
     */
    changeTime?: pulumi.Input<string>;
    /**
     * The date and time the object was initially created
     */
    createTime?: pulumi.Input<string>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * sshkey_string is the OpenSSH public key string (all key types are supported => ed25519, ecdsa, dsa, rsa, rsa1)
     */
    sshkey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SshkeyTimeouts>;
}

/**
 * The set of arguments for constructing a Sshkey resource.
 */
export interface SshkeyArgs {
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * sshkey_string is the OpenSSH public key string (all key types are supported => ed25519, ecdsa, dsa, rsa, rsa1)
     */
    sshkey: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SshkeyTimeouts>;
}
