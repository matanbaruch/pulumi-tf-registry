// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectStorageAccesskey extends pulumi.CustomResource {
    /**
     * Get an existing ObjectStorageAccesskey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectStorageAccesskeyState, opts?: pulumi.CustomResourceOptions): ObjectStorageAccesskey {
        return new ObjectStorageAccesskey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gridscale:index/objectStorageAccesskey:ObjectStorageAccesskey';

    /**
     * Returns true if the given object is an instance of ObjectStorageAccesskey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectStorageAccesskey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectStorageAccesskey.__pulumiType;
    }

    /**
     * The object storage secret_key.
     */
    public /*out*/ readonly accessKey!: pulumi.Output<string>;
    /**
     * Comment for the access_key.
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * The object storage access_key.
     */
    public /*out*/ readonly secretKey!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ObjectStorageAccesskeyTimeouts | undefined>;
    /**
     * If a user_uuid is set, a user-specific key will get created. If no user_uuid is set along a user with write-access to
     * the contract will still only create a user-specific key for themselves while a user with admin-access to the contract
     * will create a contract-level admin key.
     */
    public readonly userUuid!: pulumi.Output<string>;

    /**
     * Create a ObjectStorageAccesskey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectStorageAccesskeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectStorageAccesskeyArgs | ObjectStorageAccesskeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectStorageAccesskeyState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userUuid"] = state ? state.userUuid : undefined;
        } else {
            const args = argsOrState as ObjectStorageAccesskeyArgs | undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userUuid"] = args ? args.userUuid : undefined;
            resourceInputs["accessKey"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey", "secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ObjectStorageAccesskey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectStorageAccesskey resources.
 */
export interface ObjectStorageAccesskeyState {
    /**
     * The object storage secret_key.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Comment for the access_key.
     */
    comment?: pulumi.Input<string>;
    /**
     * The object storage access_key.
     */
    secretKey?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ObjectStorageAccesskeyTimeouts>;
    /**
     * If a user_uuid is set, a user-specific key will get created. If no user_uuid is set along a user with write-access to
     * the contract will still only create a user-specific key for themselves while a user with admin-access to the contract
     * will create a contract-level admin key.
     */
    userUuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectStorageAccesskey resource.
 */
export interface ObjectStorageAccesskeyArgs {
    /**
     * Comment for the access_key.
     */
    comment?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ObjectStorageAccesskeyTimeouts>;
    /**
     * If a user_uuid is set, a user-specific key will get created. If no user_uuid is set along a user with write-access to
     * the contract will still only create a user-specific key for themselves while a user with admin-access to the contract
     * will create a contract-level admin key.
     */
    userUuid?: pulumi.Input<string>;
}
