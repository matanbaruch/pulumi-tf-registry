// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Filesystem extends pulumi.CustomResource {
    /**
     * Get an existing Filesystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FilesystemState, opts?: pulumi.CustomResourceOptions): Filesystem {
        return new Filesystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gridscale:index/filesystem:Filesystem';

    /**
     * Returns true if the given object is an instance of Filesystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Filesystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Filesystem.__pulumiType;
    }

    /**
     * Allowed CIDR block or IP address in CIDR notation.
     */
    public readonly allowedIpRanges!: pulumi.Output<string[] | undefined>;
    /**
     * Target group id when root squash is active.
     */
    public readonly anonGid!: pulumi.Output<number | undefined>;
    /**
     * Target user id when root squash is active.
     */
    public readonly anonUid!: pulumi.Output<number | undefined>;
    /**
     * Time of the last change.
     */
    public /*out*/ readonly changeTime!: pulumi.Output<string>;
    /**
     * Date time this service has been created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * List of labels.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * The port numbers where this Filesystem service accepts connections.
     */
    public /*out*/ readonly listenPorts!: pulumi.Output<outputs.FilesystemListenPort[]>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The UUID of the network that the service is attached to.
     */
    public readonly networkUuid!: pulumi.Output<string>;
    /**
     * Performance class of Filesystem service.
     */
    public readonly performanceClass!: pulumi.Output<string>;
    /**
     * The Filesystem service release of this instance.\n For convenience, please use gscloud
     * https://github.com/gridscale/gscloud to get the list of available Filesystem service releases.
     */
    public readonly release!: pulumi.Output<string>;
    /**
     * Map root user/group ownership to anon_uid/anon_gid
     */
    public readonly rootSquash!: pulumi.Output<boolean | undefined>;
    /**
     * Security zone UUID linked to Filesystem service.
     *
     * @deprecated Deprecated
     */
    public readonly securityZoneUuid!: pulumi.Output<string>;
    /**
     * The template service's category used to create the service.
     */
    public /*out*/ readonly serviceTemplateCategory!: pulumi.Output<string>;
    /**
     * PaaS service template that Filesystem service uses.
     */
    public /*out*/ readonly serviceTemplateUuid!: pulumi.Output<string>;
    /**
     * Current status of Filesystem service.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FilesystemTimeouts | undefined>;
    /**
     * Number of minutes that Filesystem service is in use.
     */
    public /*out*/ readonly usageInMinutes!: pulumi.Output<number>;

    /**
     * Create a Filesystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FilesystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FilesystemArgs | FilesystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FilesystemState | undefined;
            resourceInputs["allowedIpRanges"] = state ? state.allowedIpRanges : undefined;
            resourceInputs["anonGid"] = state ? state.anonGid : undefined;
            resourceInputs["anonUid"] = state ? state.anonUid : undefined;
            resourceInputs["changeTime"] = state ? state.changeTime : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["listenPorts"] = state ? state.listenPorts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkUuid"] = state ? state.networkUuid : undefined;
            resourceInputs["performanceClass"] = state ? state.performanceClass : undefined;
            resourceInputs["release"] = state ? state.release : undefined;
            resourceInputs["rootSquash"] = state ? state.rootSquash : undefined;
            resourceInputs["securityZoneUuid"] = state ? state.securityZoneUuid : undefined;
            resourceInputs["serviceTemplateCategory"] = state ? state.serviceTemplateCategory : undefined;
            resourceInputs["serviceTemplateUuid"] = state ? state.serviceTemplateUuid : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usageInMinutes"] = state ? state.usageInMinutes : undefined;
        } else {
            const args = argsOrState as FilesystemArgs | undefined;
            if ((!args || args.performanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'performanceClass'");
            }
            if ((!args || args.release === undefined) && !opts.urn) {
                throw new Error("Missing required property 'release'");
            }
            resourceInputs["allowedIpRanges"] = args ? args.allowedIpRanges : undefined;
            resourceInputs["anonGid"] = args ? args.anonGid : undefined;
            resourceInputs["anonUid"] = args ? args.anonUid : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkUuid"] = args ? args.networkUuid : undefined;
            resourceInputs["performanceClass"] = args ? args.performanceClass : undefined;
            resourceInputs["release"] = args ? args.release : undefined;
            resourceInputs["rootSquash"] = args ? args.rootSquash : undefined;
            resourceInputs["securityZoneUuid"] = args ? args.securityZoneUuid : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["changeTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["listenPorts"] = undefined /*out*/;
            resourceInputs["serviceTemplateCategory"] = undefined /*out*/;
            resourceInputs["serviceTemplateUuid"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["usageInMinutes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Filesystem.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Filesystem resources.
 */
export interface FilesystemState {
    /**
     * Allowed CIDR block or IP address in CIDR notation.
     */
    allowedIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Target group id when root squash is active.
     */
    anonGid?: pulumi.Input<number>;
    /**
     * Target user id when root squash is active.
     */
    anonUid?: pulumi.Input<number>;
    /**
     * Time of the last change.
     */
    changeTime?: pulumi.Input<string>;
    /**
     * Date time this service has been created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The port numbers where this Filesystem service accepts connections.
     */
    listenPorts?: pulumi.Input<pulumi.Input<inputs.FilesystemListenPort>[]>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The UUID of the network that the service is attached to.
     */
    networkUuid?: pulumi.Input<string>;
    /**
     * Performance class of Filesystem service.
     */
    performanceClass?: pulumi.Input<string>;
    /**
     * The Filesystem service release of this instance.\n For convenience, please use gscloud
     * https://github.com/gridscale/gscloud to get the list of available Filesystem service releases.
     */
    release?: pulumi.Input<string>;
    /**
     * Map root user/group ownership to anon_uid/anon_gid
     */
    rootSquash?: pulumi.Input<boolean>;
    /**
     * Security zone UUID linked to Filesystem service.
     *
     * @deprecated Deprecated
     */
    securityZoneUuid?: pulumi.Input<string>;
    /**
     * The template service's category used to create the service.
     */
    serviceTemplateCategory?: pulumi.Input<string>;
    /**
     * PaaS service template that Filesystem service uses.
     */
    serviceTemplateUuid?: pulumi.Input<string>;
    /**
     * Current status of Filesystem service.
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FilesystemTimeouts>;
    /**
     * Number of minutes that Filesystem service is in use.
     */
    usageInMinutes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Filesystem resource.
 */
export interface FilesystemArgs {
    /**
     * Allowed CIDR block or IP address in CIDR notation.
     */
    allowedIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Target group id when root squash is active.
     */
    anonGid?: pulumi.Input<number>;
    /**
     * Target user id when root squash is active.
     */
    anonUid?: pulumi.Input<number>;
    /**
     * List of labels.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The UUID of the network that the service is attached to.
     */
    networkUuid?: pulumi.Input<string>;
    /**
     * Performance class of Filesystem service.
     */
    performanceClass: pulumi.Input<string>;
    /**
     * The Filesystem service release of this instance.\n For convenience, please use gscloud
     * https://github.com/gridscale/gscloud to get the list of available Filesystem service releases.
     */
    release: pulumi.Input<string>;
    /**
     * Map root user/group ownership to anon_uid/anon_gid
     */
    rootSquash?: pulumi.Input<boolean>;
    /**
     * Security zone UUID linked to Filesystem service.
     *
     * @deprecated Deprecated
     */
    securityZoneUuid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FilesystemTimeouts>;
}
