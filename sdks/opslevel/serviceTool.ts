// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceTool extends pulumi.CustomResource {
    /**
     * Get an existing ServiceTool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceToolState, opts?: pulumi.CustomResourceOptions): ServiceTool {
        return new ServiceTool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opslevel:index/serviceTool:ServiceTool';

    /**
     * Returns true if the given object is an instance of ServiceTool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceTool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceTool.__pulumiType;
    }

    /**
     * The category that the tool belongs to. One of `admin`, `api_documentation`, `architecture_diagram`, `backlog`, `code`,
     * `continuous_integration`, `deployment`, `design_documentation`, `errors`, `feature_flag`, `health_checks`, `incidents`,
     * `issue_tracking`, `logs`, `metrics`, `observability`, `orchestrator`, `other`, `resiliency`, `runbooks`,
     * `security_scans`, `status_page`, `wiki`
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * The environment that the tool belongs to.
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * The display name of the tool.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the service that this will be added to.
     */
    public readonly service!: pulumi.Output<string | undefined>;
    /**
     * The alias of the service that this will be added to.
     */
    public readonly serviceAlias!: pulumi.Output<string | undefined>;
    /**
     * The URL of the tool.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a ServiceTool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceToolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceToolArgs | ServiceToolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceToolState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["serviceAlias"] = state ? state.serviceAlias : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ServiceToolArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["serviceAlias"] = args ? args.serviceAlias : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceTool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceTool resources.
 */
export interface ServiceToolState {
    /**
     * The category that the tool belongs to. One of `admin`, `api_documentation`, `architecture_diagram`, `backlog`, `code`,
     * `continuous_integration`, `deployment`, `design_documentation`, `errors`, `feature_flag`, `health_checks`, `incidents`,
     * `issue_tracking`, `logs`, `metrics`, `observability`, `orchestrator`, `other`, `resiliency`, `runbooks`,
     * `security_scans`, `status_page`, `wiki`
     */
    category?: pulumi.Input<string>;
    /**
     * The environment that the tool belongs to.
     */
    environment?: pulumi.Input<string>;
    /**
     * The display name of the tool.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the service that this will be added to.
     */
    service?: pulumi.Input<string>;
    /**
     * The alias of the service that this will be added to.
     */
    serviceAlias?: pulumi.Input<string>;
    /**
     * The URL of the tool.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceTool resource.
 */
export interface ServiceToolArgs {
    /**
     * The category that the tool belongs to. One of `admin`, `api_documentation`, `architecture_diagram`, `backlog`, `code`,
     * `continuous_integration`, `deployment`, `design_documentation`, `errors`, `feature_flag`, `health_checks`, `incidents`,
     * `issue_tracking`, `logs`, `metrics`, `observability`, `orchestrator`, `other`, `resiliency`, `runbooks`,
     * `security_scans`, `status_page`, `wiki`
     */
    category: pulumi.Input<string>;
    /**
     * The environment that the tool belongs to.
     */
    environment?: pulumi.Input<string>;
    /**
     * The display name of the tool.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the service that this will be added to.
     */
    service?: pulumi.Input<string>;
    /**
     * The alias of the service that this will be added to.
     */
    serviceAlias?: pulumi.Input<string>;
    /**
     * The URL of the tool.
     */
    url: pulumi.Input<string>;
}
