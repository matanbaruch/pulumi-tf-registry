// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Tag extends pulumi.CustomResource {
    /**
     * Get an existing Tag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TagState, opts?: pulumi.CustomResourceOptions): Tag {
        return new Tag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opslevel:index/tag:Tag';

    /**
     * Returns true if the given object is an instance of Tag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tag.__pulumiType;
    }

    /**
     * The key of the tag.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The id or human-friendly, unique identifier of the resource this tag belongs to.
     */
    public readonly resourceIdentifier!: pulumi.Output<string>;
    /**
     * The resource type that the tag applies to. One of `Service`, `Repository`, `Team`, `User`, `Domain`, `System`,
     * `InfrastructureResource`
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * The value of the tag.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a Tag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TagArgs | TagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TagState | undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["resourceIdentifier"] = state ? state.resourceIdentifier : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as TagArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.resourceIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceIdentifier'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["resourceIdentifier"] = args ? args.resourceIdentifier : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tag.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Tag resources.
 */
export interface TagState {
    /**
     * The key of the tag.
     */
    key?: pulumi.Input<string>;
    /**
     * The id or human-friendly, unique identifier of the resource this tag belongs to.
     */
    resourceIdentifier?: pulumi.Input<string>;
    /**
     * The resource type that the tag applies to. One of `Service`, `Repository`, `Team`, `User`, `Domain`, `System`,
     * `InfrastructureResource`
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The value of the tag.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Tag resource.
 */
export interface TagArgs {
    /**
     * The key of the tag.
     */
    key: pulumi.Input<string>;
    /**
     * The id or human-friendly, unique identifier of the resource this tag belongs to.
     */
    resourceIdentifier: pulumi.Input<string>;
    /**
     * The resource type that the tag applies to. One of `Service`, `Repository`, `Team`, `User`, `Domain`, `System`,
     * `InfrastructureResource`
     */
    resourceType: pulumi.Input<string>;
    /**
     * The value of the tag.
     */
    value: pulumi.Input<string>;
}
