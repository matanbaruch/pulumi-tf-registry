// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opslevel:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * A list of human-friendly, unique identifiers for the service.
     */
    public readonly aliases!: pulumi.Output<string[] | undefined>;
    /**
     * The relative path from which to fetch the API document. If null, the API document is fetched from the account's default
     * path.
     */
    public readonly apiDocumentPath!: pulumi.Output<string | undefined>;
    /**
     * A brief description of the service.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The primary software development framework that the service uses.
     */
    public readonly framework!: pulumi.Output<string | undefined>;
    /**
     * The primary programming language that the service is written in.
     */
    public readonly language!: pulumi.Output<string | undefined>;
    /**
     * The lifecycle stage of the service.
     */
    public readonly lifecycleAlias!: pulumi.Output<string | undefined>;
    /**
     * The display name of the service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The team that owns the service. ID or Alias may be used.
     */
    public readonly owner!: pulumi.Output<string | undefined>;
    /**
     * The id or alias of the parent system of this service
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * The API document source (PUSH or PULL) used to determine the displayed document. If null, defaults to PUSH.
     */
    public readonly preferredApiDocumentSource!: pulumi.Output<string | undefined>;
    /**
     * A product is an application that your end user interacts with. Multiple services can work together to power a single
     * product.
     */
    public readonly product!: pulumi.Output<string | undefined>;
    /**
     * A list of tags applied to the service.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The software tier that the service belongs to.
     */
    public readonly tierAlias!: pulumi.Output<string | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["aliases"] = state ? state.aliases : undefined;
            resourceInputs["apiDocumentPath"] = state ? state.apiDocumentPath : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["framework"] = state ? state.framework : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["lifecycleAlias"] = state ? state.lifecycleAlias : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["preferredApiDocumentSource"] = state ? state.preferredApiDocumentSource : undefined;
            resourceInputs["product"] = state ? state.product : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tierAlias"] = state ? state.tierAlias : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            resourceInputs["aliases"] = args ? args.aliases : undefined;
            resourceInputs["apiDocumentPath"] = args ? args.apiDocumentPath : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["framework"] = args ? args.framework : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["lifecycleAlias"] = args ? args.lifecycleAlias : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["preferredApiDocumentSource"] = args ? args.preferredApiDocumentSource : undefined;
            resourceInputs["product"] = args ? args.product : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tierAlias"] = args ? args.tierAlias : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * A list of human-friendly, unique identifiers for the service.
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The relative path from which to fetch the API document. If null, the API document is fetched from the account's default
     * path.
     */
    apiDocumentPath?: pulumi.Input<string>;
    /**
     * A brief description of the service.
     */
    description?: pulumi.Input<string>;
    /**
     * The primary software development framework that the service uses.
     */
    framework?: pulumi.Input<string>;
    /**
     * The primary programming language that the service is written in.
     */
    language?: pulumi.Input<string>;
    /**
     * The lifecycle stage of the service.
     */
    lifecycleAlias?: pulumi.Input<string>;
    /**
     * The display name of the service.
     */
    name?: pulumi.Input<string>;
    /**
     * The team that owns the service. ID or Alias may be used.
     */
    owner?: pulumi.Input<string>;
    /**
     * The id or alias of the parent system of this service
     */
    parent?: pulumi.Input<string>;
    /**
     * The API document source (PUSH or PULL) used to determine the displayed document. If null, defaults to PUSH.
     */
    preferredApiDocumentSource?: pulumi.Input<string>;
    /**
     * A product is an application that your end user interacts with. Multiple services can work together to power a single
     * product.
     */
    product?: pulumi.Input<string>;
    /**
     * A list of tags applied to the service.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The software tier that the service belongs to.
     */
    tierAlias?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * A list of human-friendly, unique identifiers for the service.
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The relative path from which to fetch the API document. If null, the API document is fetched from the account's default
     * path.
     */
    apiDocumentPath?: pulumi.Input<string>;
    /**
     * A brief description of the service.
     */
    description?: pulumi.Input<string>;
    /**
     * The primary software development framework that the service uses.
     */
    framework?: pulumi.Input<string>;
    /**
     * The primary programming language that the service is written in.
     */
    language?: pulumi.Input<string>;
    /**
     * The lifecycle stage of the service.
     */
    lifecycleAlias?: pulumi.Input<string>;
    /**
     * The display name of the service.
     */
    name?: pulumi.Input<string>;
    /**
     * The team that owns the service. ID or Alias may be used.
     */
    owner?: pulumi.Input<string>;
    /**
     * The id or alias of the parent system of this service
     */
    parent?: pulumi.Input<string>;
    /**
     * The API document source (PUSH or PULL) used to determine the displayed document. If null, defaults to PUSH.
     */
    preferredApiDocumentSource?: pulumi.Input<string>;
    /**
     * A product is an application that your end user interacts with. Multiple services can work together to power a single
     * product.
     */
    product?: pulumi.Input<string>;
    /**
     * A list of tags applied to the service.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The software tier that the service belongs to.
     */
    tierAlias?: pulumi.Input<string>;
}
