// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Infrastructure extends pulumi.CustomResource {
    /**
     * Get an existing Infrastructure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfrastructureState, opts?: pulumi.CustomResourceOptions): Infrastructure {
        return new Infrastructure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opslevel:index/infrastructure:Infrastructure';

    /**
     * Returns true if the given object is an instance of Infrastructure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Infrastructure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Infrastructure.__pulumiType;
    }

    /**
     * The aliases for the infrastructure resource.
     */
    public readonly aliases!: pulumi.Output<string[] | undefined>;
    /**
     * The data of the infrastructure resource in JSON format.
     */
    public readonly data!: pulumi.Output<string>;
    /**
     * The id of the team that owns the infrastructure resource. Does not support aliases!
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * The provider specific data for the infrastructure resource.
     */
    public readonly providerData!: pulumi.Output<outputs.InfrastructureProviderData | undefined>;
    /**
     * The schema of the infrastructure resource that determines its data specification.
     */
    public readonly schema!: pulumi.Output<string>;

    /**
     * Create a Infrastructure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfrastructureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfrastructureArgs | InfrastructureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfrastructureState | undefined;
            resourceInputs["aliases"] = state ? state.aliases : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["providerData"] = state ? state.providerData : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
        } else {
            const args = argsOrState as InfrastructureArgs | undefined;
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            resourceInputs["aliases"] = args ? args.aliases : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["providerData"] = args ? args.providerData : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Infrastructure.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Infrastructure resources.
 */
export interface InfrastructureState {
    /**
     * The aliases for the infrastructure resource.
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The data of the infrastructure resource in JSON format.
     */
    data?: pulumi.Input<string>;
    /**
     * The id of the team that owns the infrastructure resource. Does not support aliases!
     */
    owner?: pulumi.Input<string>;
    /**
     * The provider specific data for the infrastructure resource.
     */
    providerData?: pulumi.Input<inputs.InfrastructureProviderData>;
    /**
     * The schema of the infrastructure resource that determines its data specification.
     */
    schema?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Infrastructure resource.
 */
export interface InfrastructureArgs {
    /**
     * The aliases for the infrastructure resource.
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The data of the infrastructure resource in JSON format.
     */
    data: pulumi.Input<string>;
    /**
     * The id of the team that owns the infrastructure resource. Does not support aliases!
     */
    owner: pulumi.Input<string>;
    /**
     * The provider specific data for the infrastructure resource.
     */
    providerData?: pulumi.Input<inputs.InfrastructureProviderData>;
    /**
     * The schema of the infrastructure resource that determines its data specification.
     */
    schema: pulumi.Input<string>;
}
