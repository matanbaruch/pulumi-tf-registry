// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLifecycle(args?: GetLifecycleArgs, opts?: pulumi.InvokeOptions): Promise<GetLifecycleResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("opslevel:index/getLifecycle:getLifecycle", {
        "filter": args.filter,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLifecycle.
 */
export interface GetLifecycleArgs {
    filter?: inputs.GetLifecycleFilter;
}

/**
 * A collection of values returned by getLifecycle.
 */
export interface GetLifecycleResult {
    readonly alias: string;
    readonly filter?: outputs.GetLifecycleFilter;
    readonly id: string;
    readonly index: number;
    readonly name: string;
}
export function getLifecycleOutput(args?: GetLifecycleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLifecycleResult> {
    return pulumi.output(args).apply((a: any) => getLifecycle(a, opts))
}

/**
 * A collection of arguments for invoking getLifecycle.
 */
export interface GetLifecycleOutputArgs {
    filter?: pulumi.Input<inputs.GetLifecycleFilterArgs>;
}
