// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Scorecard extends pulumi.CustomResource {
    /**
     * Get an existing Scorecard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScorecardState, opts?: pulumi.CustomResourceOptions): Scorecard {
        return new Scorecard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opslevel:index/scorecard:Scorecard';

    /**
     * Returns true if the given object is an instance of Scorecard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Scorecard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Scorecard.__pulumiType;
    }

    /**
     * Specifies whether the checks on this scorecard affect services' overall maturity level.
     */
    public readonly affectsOverallServiceLevels!: pulumi.Output<boolean>;
    /**
     * The scorecard's aliases.
     */
    public /*out*/ readonly aliases!: pulumi.Output<string[]>;
    /**
     * The ids of the categories on this scorecard.
     */
    public /*out*/ readonly categories!: pulumi.Output<string[]>;
    /**
     * The scorecard's description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The scorecard's filter.
     */
    public readonly filterId!: pulumi.Output<string | undefined>;
    /**
     * The scorecard's name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The scorecard's owner.
     */
    public readonly ownerId!: pulumi.Output<string>;
    /**
     * The scorecard's number of checks that are passing.
     */
    public /*out*/ readonly passingChecks!: pulumi.Output<number>;
    /**
     * The scorecard's number of services matched.
     */
    public /*out*/ readonly serviceCount!: pulumi.Output<number>;
    /**
     * The scorecard's total number of checks.
     */
    public /*out*/ readonly totalChecks!: pulumi.Output<number>;

    /**
     * Create a Scorecard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScorecardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScorecardArgs | ScorecardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScorecardState | undefined;
            resourceInputs["affectsOverallServiceLevels"] = state ? state.affectsOverallServiceLevels : undefined;
            resourceInputs["aliases"] = state ? state.aliases : undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["filterId"] = state ? state.filterId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["passingChecks"] = state ? state.passingChecks : undefined;
            resourceInputs["serviceCount"] = state ? state.serviceCount : undefined;
            resourceInputs["totalChecks"] = state ? state.totalChecks : undefined;
        } else {
            const args = argsOrState as ScorecardArgs | undefined;
            if ((!args || args.affectsOverallServiceLevels === undefined) && !opts.urn) {
                throw new Error("Missing required property 'affectsOverallServiceLevels'");
            }
            if ((!args || args.ownerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerId'");
            }
            resourceInputs["affectsOverallServiceLevels"] = args ? args.affectsOverallServiceLevels : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filterId"] = args ? args.filterId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerId"] = args ? args.ownerId : undefined;
            resourceInputs["aliases"] = undefined /*out*/;
            resourceInputs["categories"] = undefined /*out*/;
            resourceInputs["passingChecks"] = undefined /*out*/;
            resourceInputs["serviceCount"] = undefined /*out*/;
            resourceInputs["totalChecks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Scorecard.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Scorecard resources.
 */
export interface ScorecardState {
    /**
     * Specifies whether the checks on this scorecard affect services' overall maturity level.
     */
    affectsOverallServiceLevels?: pulumi.Input<boolean>;
    /**
     * The scorecard's aliases.
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ids of the categories on this scorecard.
     */
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The scorecard's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The scorecard's filter.
     */
    filterId?: pulumi.Input<string>;
    /**
     * The scorecard's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The scorecard's owner.
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The scorecard's number of checks that are passing.
     */
    passingChecks?: pulumi.Input<number>;
    /**
     * The scorecard's number of services matched.
     */
    serviceCount?: pulumi.Input<number>;
    /**
     * The scorecard's total number of checks.
     */
    totalChecks?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Scorecard resource.
 */
export interface ScorecardArgs {
    /**
     * Specifies whether the checks on this scorecard affect services' overall maturity level.
     */
    affectsOverallServiceLevels: pulumi.Input<boolean>;
    /**
     * The scorecard's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The scorecard's filter.
     */
    filterId?: pulumi.Input<string>;
    /**
     * The scorecard's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The scorecard's owner.
     */
    ownerId: pulumi.Input<string>;
}
