// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceRepository extends pulumi.CustomResource {
    /**
     * Get an existing ServiceRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceRepositoryState, opts?: pulumi.CustomResourceOptions): ServiceRepository {
        return new ServiceRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opslevel:index/serviceRepository:ServiceRepository';

    /**
     * Returns true if the given object is an instance of ServiceRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceRepository.__pulumiType;
    }

    /**
     * The directory in the repository containing opslevel.yml.
     */
    public readonly baseDirectory!: pulumi.Output<string | undefined>;
    /**
     * The name displayed in the UI for the service repository.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the repository that this will be added to.
     */
    public readonly repository!: pulumi.Output<string | undefined>;
    /**
     * The alias of the repository that this will be added to.
     */
    public readonly repositoryAlias!: pulumi.Output<string | undefined>;
    /**
     * The id of the service that this will be added to.
     */
    public readonly service!: pulumi.Output<string | undefined>;
    /**
     * The alias of the service that this will be added to.
     */
    public readonly serviceAlias!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceRepositoryArgs | ServiceRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceRepositoryState | undefined;
            resourceInputs["baseDirectory"] = state ? state.baseDirectory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["repositoryAlias"] = state ? state.repositoryAlias : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["serviceAlias"] = state ? state.serviceAlias : undefined;
        } else {
            const args = argsOrState as ServiceRepositoryArgs | undefined;
            resourceInputs["baseDirectory"] = args ? args.baseDirectory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["repositoryAlias"] = args ? args.repositoryAlias : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["serviceAlias"] = args ? args.serviceAlias : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceRepository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceRepository resources.
 */
export interface ServiceRepositoryState {
    /**
     * The directory in the repository containing opslevel.yml.
     */
    baseDirectory?: pulumi.Input<string>;
    /**
     * The name displayed in the UI for the service repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the repository that this will be added to.
     */
    repository?: pulumi.Input<string>;
    /**
     * The alias of the repository that this will be added to.
     */
    repositoryAlias?: pulumi.Input<string>;
    /**
     * The id of the service that this will be added to.
     */
    service?: pulumi.Input<string>;
    /**
     * The alias of the service that this will be added to.
     */
    serviceAlias?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceRepository resource.
 */
export interface ServiceRepositoryArgs {
    /**
     * The directory in the repository containing opslevel.yml.
     */
    baseDirectory?: pulumi.Input<string>;
    /**
     * The name displayed in the UI for the service repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the repository that this will be added to.
     */
    repository?: pulumi.Input<string>;
    /**
     * The alias of the repository that this will be added to.
     */
    repositoryAlias?: pulumi.Input<string>;
    /**
     * The id of the service that this will be added to.
     */
    service?: pulumi.Input<string>;
    /**
     * The alias of the service that this will be added to.
     */
    serviceAlias?: pulumi.Input<string>;
}
