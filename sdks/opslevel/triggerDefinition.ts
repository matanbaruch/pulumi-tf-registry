// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TriggerDefinition extends pulumi.CustomResource {
    /**
     * Get an existing TriggerDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggerDefinitionState, opts?: pulumi.CustomResourceOptions): TriggerDefinition {
        return new TriggerDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opslevel:index/triggerDefinition:TriggerDefinition';

    /**
     * Returns true if the given object is an instance of TriggerDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TriggerDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TriggerDefinition.__pulumiType;
    }

    /**
     * The set of users that should be able to use the Trigger Definition. One of `everyone`, `admins`, `service_owners`
     */
    public readonly accessControl!: pulumi.Output<string>;
    /**
     * The action that will be triggered by the Trigger Definition.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The description of what the Trigger Definition will do.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The entity type to associate with the Trigger Definition. One of `SERVICE`, `GLOBAL`
     */
    public readonly entityType!: pulumi.Output<string>;
    /**
     * The set of additional teams who can invoke this Trigger Definition.
     */
    public readonly extendedTeamAccesses!: pulumi.Output<string[] | undefined>;
    /**
     * A filter defining which services this Trigger Definition applies to.
     */
    public readonly filter!: pulumi.Output<string | undefined>;
    /**
     * The YAML definition of any custom inputs for this Trigger Definition.
     */
    public readonly manualInputsDefinition!: pulumi.Output<string | undefined>;
    /**
     * The name of the Trigger Definition
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The owner of the Trigger Definition.
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * The published state of the Custom Action; true if the Trigger Definition is ready for use; false if it is a draft.
     */
    public readonly published!: pulumi.Output<boolean>;
    /**
     * The liquid template used to parse the response from the Webhook Action.
     */
    public readonly responseTemplate!: pulumi.Output<string | undefined>;

    /**
     * Create a TriggerDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TriggerDefinitionArgs | TriggerDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TriggerDefinitionState | undefined;
            resourceInputs["accessControl"] = state ? state.accessControl : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entityType"] = state ? state.entityType : undefined;
            resourceInputs["extendedTeamAccesses"] = state ? state.extendedTeamAccesses : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["manualInputsDefinition"] = state ? state.manualInputsDefinition : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["published"] = state ? state.published : undefined;
            resourceInputs["responseTemplate"] = state ? state.responseTemplate : undefined;
        } else {
            const args = argsOrState as TriggerDefinitionArgs | undefined;
            if ((!args || args.accessControl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessControl'");
            }
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if ((!args || args.published === undefined) && !opts.urn) {
                throw new Error("Missing required property 'published'");
            }
            resourceInputs["accessControl"] = args ? args.accessControl : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entityType"] = args ? args.entityType : undefined;
            resourceInputs["extendedTeamAccesses"] = args ? args.extendedTeamAccesses : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["manualInputsDefinition"] = args ? args.manualInputsDefinition : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["published"] = args ? args.published : undefined;
            resourceInputs["responseTemplate"] = args ? args.responseTemplate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TriggerDefinition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TriggerDefinition resources.
 */
export interface TriggerDefinitionState {
    /**
     * The set of users that should be able to use the Trigger Definition. One of `everyone`, `admins`, `service_owners`
     */
    accessControl?: pulumi.Input<string>;
    /**
     * The action that will be triggered by the Trigger Definition.
     */
    action?: pulumi.Input<string>;
    /**
     * The description of what the Trigger Definition will do.
     */
    description?: pulumi.Input<string>;
    /**
     * The entity type to associate with the Trigger Definition. One of `SERVICE`, `GLOBAL`
     */
    entityType?: pulumi.Input<string>;
    /**
     * The set of additional teams who can invoke this Trigger Definition.
     */
    extendedTeamAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter defining which services this Trigger Definition applies to.
     */
    filter?: pulumi.Input<string>;
    /**
     * The YAML definition of any custom inputs for this Trigger Definition.
     */
    manualInputsDefinition?: pulumi.Input<string>;
    /**
     * The name of the Trigger Definition
     */
    name?: pulumi.Input<string>;
    /**
     * The owner of the Trigger Definition.
     */
    owner?: pulumi.Input<string>;
    /**
     * The published state of the Custom Action; true if the Trigger Definition is ready for use; false if it is a draft.
     */
    published?: pulumi.Input<boolean>;
    /**
     * The liquid template used to parse the response from the Webhook Action.
     */
    responseTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TriggerDefinition resource.
 */
export interface TriggerDefinitionArgs {
    /**
     * The set of users that should be able to use the Trigger Definition. One of `everyone`, `admins`, `service_owners`
     */
    accessControl: pulumi.Input<string>;
    /**
     * The action that will be triggered by the Trigger Definition.
     */
    action: pulumi.Input<string>;
    /**
     * The description of what the Trigger Definition will do.
     */
    description?: pulumi.Input<string>;
    /**
     * The entity type to associate with the Trigger Definition. One of `SERVICE`, `GLOBAL`
     */
    entityType?: pulumi.Input<string>;
    /**
     * The set of additional teams who can invoke this Trigger Definition.
     */
    extendedTeamAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter defining which services this Trigger Definition applies to.
     */
    filter?: pulumi.Input<string>;
    /**
     * The YAML definition of any custom inputs for this Trigger Definition.
     */
    manualInputsDefinition?: pulumi.Input<string>;
    /**
     * The name of the Trigger Definition
     */
    name?: pulumi.Input<string>;
    /**
     * The owner of the Trigger Definition.
     */
    owner: pulumi.Input<string>;
    /**
     * The published state of the Custom Action; true if the Trigger Definition is ready for use; false if it is a draft.
     */
    published: pulumi.Input<boolean>;
    /**
     * The liquid template used to parse the response from the Webhook Action.
     */
    responseTemplate?: pulumi.Input<string>;
}
