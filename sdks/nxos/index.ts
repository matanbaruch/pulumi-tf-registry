// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BgpArgs, BgpState } from "./bgp";
export type Bgp = import("./bgp").Bgp;
export const Bgp: typeof import("./bgp").Bgp = null as any;
utilities.lazyLoad(exports, ["Bgp"], () => require("./bgp"));

export { BgpAddressFamilyArgs, BgpAddressFamilyState } from "./bgpAddressFamily";
export type BgpAddressFamily = import("./bgpAddressFamily").BgpAddressFamily;
export const BgpAddressFamily: typeof import("./bgpAddressFamily").BgpAddressFamily = null as any;
utilities.lazyLoad(exports, ["BgpAddressFamily"], () => require("./bgpAddressFamily"));

export { BgpAdvertisedPrefixArgs, BgpAdvertisedPrefixState } from "./bgpAdvertisedPrefix";
export type BgpAdvertisedPrefix = import("./bgpAdvertisedPrefix").BgpAdvertisedPrefix;
export const BgpAdvertisedPrefix: typeof import("./bgpAdvertisedPrefix").BgpAdvertisedPrefix = null as any;
utilities.lazyLoad(exports, ["BgpAdvertisedPrefix"], () => require("./bgpAdvertisedPrefix"));

export { BgpGracefulRestartArgs, BgpGracefulRestartState } from "./bgpGracefulRestart";
export type BgpGracefulRestart = import("./bgpGracefulRestart").BgpGracefulRestart;
export const BgpGracefulRestart: typeof import("./bgpGracefulRestart").BgpGracefulRestart = null as any;
utilities.lazyLoad(exports, ["BgpGracefulRestart"], () => require("./bgpGracefulRestart"));

export { BgpInstanceArgs, BgpInstanceState } from "./bgpInstance";
export type BgpInstance = import("./bgpInstance").BgpInstance;
export const BgpInstance: typeof import("./bgpInstance").BgpInstance = null as any;
utilities.lazyLoad(exports, ["BgpInstance"], () => require("./bgpInstance"));

export { BgpPeerArgs, BgpPeerState } from "./bgpPeer";
export type BgpPeer = import("./bgpPeer").BgpPeer;
export const BgpPeer: typeof import("./bgpPeer").BgpPeer = null as any;
utilities.lazyLoad(exports, ["BgpPeer"], () => require("./bgpPeer"));

export { BgpPeerAddressFamilyArgs, BgpPeerAddressFamilyState } from "./bgpPeerAddressFamily";
export type BgpPeerAddressFamily = import("./bgpPeerAddressFamily").BgpPeerAddressFamily;
export const BgpPeerAddressFamily: typeof import("./bgpPeerAddressFamily").BgpPeerAddressFamily = null as any;
utilities.lazyLoad(exports, ["BgpPeerAddressFamily"], () => require("./bgpPeerAddressFamily"));

export { BgpPeerAddressFamilyPrefixListControlArgs, BgpPeerAddressFamilyPrefixListControlState } from "./bgpPeerAddressFamilyPrefixListControl";
export type BgpPeerAddressFamilyPrefixListControl = import("./bgpPeerAddressFamilyPrefixListControl").BgpPeerAddressFamilyPrefixListControl;
export const BgpPeerAddressFamilyPrefixListControl: typeof import("./bgpPeerAddressFamilyPrefixListControl").BgpPeerAddressFamilyPrefixListControl = null as any;
utilities.lazyLoad(exports, ["BgpPeerAddressFamilyPrefixListControl"], () => require("./bgpPeerAddressFamilyPrefixListControl"));

export { BgpPeerAddressFamilyRouteControlArgs, BgpPeerAddressFamilyRouteControlState } from "./bgpPeerAddressFamilyRouteControl";
export type BgpPeerAddressFamilyRouteControl = import("./bgpPeerAddressFamilyRouteControl").BgpPeerAddressFamilyRouteControl;
export const BgpPeerAddressFamilyRouteControl: typeof import("./bgpPeerAddressFamilyRouteControl").BgpPeerAddressFamilyRouteControl = null as any;
utilities.lazyLoad(exports, ["BgpPeerAddressFamilyRouteControl"], () => require("./bgpPeerAddressFamilyRouteControl"));

export { BgpPeerLocalAsnArgs, BgpPeerLocalAsnState } from "./bgpPeerLocalAsn";
export type BgpPeerLocalAsn = import("./bgpPeerLocalAsn").BgpPeerLocalAsn;
export const BgpPeerLocalAsn: typeof import("./bgpPeerLocalAsn").BgpPeerLocalAsn = null as any;
utilities.lazyLoad(exports, ["BgpPeerLocalAsn"], () => require("./bgpPeerLocalAsn"));

export { BgpPeerTemplateArgs, BgpPeerTemplateState } from "./bgpPeerTemplate";
export type BgpPeerTemplate = import("./bgpPeerTemplate").BgpPeerTemplate;
export const BgpPeerTemplate: typeof import("./bgpPeerTemplate").BgpPeerTemplate = null as any;
utilities.lazyLoad(exports, ["BgpPeerTemplate"], () => require("./bgpPeerTemplate"));

export { BgpPeerTemplateAddressFamilyArgs, BgpPeerTemplateAddressFamilyState } from "./bgpPeerTemplateAddressFamily";
export type BgpPeerTemplateAddressFamily = import("./bgpPeerTemplateAddressFamily").BgpPeerTemplateAddressFamily;
export const BgpPeerTemplateAddressFamily: typeof import("./bgpPeerTemplateAddressFamily").BgpPeerTemplateAddressFamily = null as any;
utilities.lazyLoad(exports, ["BgpPeerTemplateAddressFamily"], () => require("./bgpPeerTemplateAddressFamily"));

export { BgpPeerTemplateMaxPrefixArgs, BgpPeerTemplateMaxPrefixState } from "./bgpPeerTemplateMaxPrefix";
export type BgpPeerTemplateMaxPrefix = import("./bgpPeerTemplateMaxPrefix").BgpPeerTemplateMaxPrefix;
export const BgpPeerTemplateMaxPrefix: typeof import("./bgpPeerTemplateMaxPrefix").BgpPeerTemplateMaxPrefix = null as any;
utilities.lazyLoad(exports, ["BgpPeerTemplateMaxPrefix"], () => require("./bgpPeerTemplateMaxPrefix"));

export { BgpRouteControlArgs, BgpRouteControlState } from "./bgpRouteControl";
export type BgpRouteControl = import("./bgpRouteControl").BgpRouteControl;
export const BgpRouteControl: typeof import("./bgpRouteControl").BgpRouteControl = null as any;
utilities.lazyLoad(exports, ["BgpRouteControl"], () => require("./bgpRouteControl"));

export { BgpRouteRedistributionArgs, BgpRouteRedistributionState } from "./bgpRouteRedistribution";
export type BgpRouteRedistribution = import("./bgpRouteRedistribution").BgpRouteRedistribution;
export const BgpRouteRedistribution: typeof import("./bgpRouteRedistribution").BgpRouteRedistribution = null as any;
utilities.lazyLoad(exports, ["BgpRouteRedistribution"], () => require("./bgpRouteRedistribution"));

export { BgpVrfArgs, BgpVrfState } from "./bgpVrf";
export type BgpVrf = import("./bgpVrf").BgpVrf;
export const BgpVrf: typeof import("./bgpVrf").BgpVrf = null as any;
utilities.lazyLoad(exports, ["BgpVrf"], () => require("./bgpVrf"));

export { BridgeDomainArgs, BridgeDomainState } from "./bridgeDomain";
export type BridgeDomain = import("./bridgeDomain").BridgeDomain;
export const BridgeDomain: typeof import("./bridgeDomain").BridgeDomain = null as any;
utilities.lazyLoad(exports, ["BridgeDomain"], () => require("./bridgeDomain"));

export { DefaultQosClassMapArgs, DefaultQosClassMapState } from "./defaultQosClassMap";
export type DefaultQosClassMap = import("./defaultQosClassMap").DefaultQosClassMap;
export const DefaultQosClassMap: typeof import("./defaultQosClassMap").DefaultQosClassMap = null as any;
utilities.lazyLoad(exports, ["DefaultQosClassMap"], () => require("./defaultQosClassMap"));

export { DefaultQosClassMapDscpArgs, DefaultQosClassMapDscpState } from "./defaultQosClassMapDscp";
export type DefaultQosClassMapDscp = import("./defaultQosClassMapDscp").DefaultQosClassMapDscp;
export const DefaultQosClassMapDscp: typeof import("./defaultQosClassMapDscp").DefaultQosClassMapDscp = null as any;
utilities.lazyLoad(exports, ["DefaultQosClassMapDscp"], () => require("./defaultQosClassMapDscp"));

export { DefaultQosPolicyInterfaceInArgs, DefaultQosPolicyInterfaceInState } from "./defaultQosPolicyInterfaceIn";
export type DefaultQosPolicyInterfaceIn = import("./defaultQosPolicyInterfaceIn").DefaultQosPolicyInterfaceIn;
export const DefaultQosPolicyInterfaceIn: typeof import("./defaultQosPolicyInterfaceIn").DefaultQosPolicyInterfaceIn = null as any;
utilities.lazyLoad(exports, ["DefaultQosPolicyInterfaceIn"], () => require("./defaultQosPolicyInterfaceIn"));

export { DefaultQosPolicyInterfaceInPolicyMapArgs, DefaultQosPolicyInterfaceInPolicyMapState } from "./defaultQosPolicyInterfaceInPolicyMap";
export type DefaultQosPolicyInterfaceInPolicyMap = import("./defaultQosPolicyInterfaceInPolicyMap").DefaultQosPolicyInterfaceInPolicyMap;
export const DefaultQosPolicyInterfaceInPolicyMap: typeof import("./defaultQosPolicyInterfaceInPolicyMap").DefaultQosPolicyInterfaceInPolicyMap = null as any;
utilities.lazyLoad(exports, ["DefaultQosPolicyInterfaceInPolicyMap"], () => require("./defaultQosPolicyInterfaceInPolicyMap"));

export { DefaultQosPolicyMapArgs, DefaultQosPolicyMapState } from "./defaultQosPolicyMap";
export type DefaultQosPolicyMap = import("./defaultQosPolicyMap").DefaultQosPolicyMap;
export const DefaultQosPolicyMap: typeof import("./defaultQosPolicyMap").DefaultQosPolicyMap = null as any;
utilities.lazyLoad(exports, ["DefaultQosPolicyMap"], () => require("./defaultQosPolicyMap"));

export { DefaultQosPolicyMapMatchClassMapArgs, DefaultQosPolicyMapMatchClassMapState } from "./defaultQosPolicyMapMatchClassMap";
export type DefaultQosPolicyMapMatchClassMap = import("./defaultQosPolicyMapMatchClassMap").DefaultQosPolicyMapMatchClassMap;
export const DefaultQosPolicyMapMatchClassMap: typeof import("./defaultQosPolicyMapMatchClassMap").DefaultQosPolicyMapMatchClassMap = null as any;
utilities.lazyLoad(exports, ["DefaultQosPolicyMapMatchClassMap"], () => require("./defaultQosPolicyMapMatchClassMap"));

export { DefaultQosPolicyMapMatchClassMapPoliceArgs, DefaultQosPolicyMapMatchClassMapPoliceState } from "./defaultQosPolicyMapMatchClassMapPolice";
export type DefaultQosPolicyMapMatchClassMapPolice = import("./defaultQosPolicyMapMatchClassMapPolice").DefaultQosPolicyMapMatchClassMapPolice;
export const DefaultQosPolicyMapMatchClassMapPolice: typeof import("./defaultQosPolicyMapMatchClassMapPolice").DefaultQosPolicyMapMatchClassMapPolice = null as any;
utilities.lazyLoad(exports, ["DefaultQosPolicyMapMatchClassMapPolice"], () => require("./defaultQosPolicyMapMatchClassMapPolice"));

export { DefaultQosPolicyMapMatchClassMapSetQosGroupArgs, DefaultQosPolicyMapMatchClassMapSetQosGroupState } from "./defaultQosPolicyMapMatchClassMapSetQosGroup";
export type DefaultQosPolicyMapMatchClassMapSetQosGroup = import("./defaultQosPolicyMapMatchClassMapSetQosGroup").DefaultQosPolicyMapMatchClassMapSetQosGroup;
export const DefaultQosPolicyMapMatchClassMapSetQosGroup: typeof import("./defaultQosPolicyMapMatchClassMapSetQosGroup").DefaultQosPolicyMapMatchClassMapSetQosGroup = null as any;
utilities.lazyLoad(exports, ["DefaultQosPolicyMapMatchClassMapSetQosGroup"], () => require("./defaultQosPolicyMapMatchClassMapSetQosGroup"));

export { DhcpRelayAddressArgs, DhcpRelayAddressState } from "./dhcpRelayAddress";
export type DhcpRelayAddress = import("./dhcpRelayAddress").DhcpRelayAddress;
export const DhcpRelayAddress: typeof import("./dhcpRelayAddress").DhcpRelayAddress = null as any;
utilities.lazyLoad(exports, ["DhcpRelayAddress"], () => require("./dhcpRelayAddress"));

export { DhcpRelayInterfaceArgs, DhcpRelayInterfaceState } from "./dhcpRelayInterface";
export type DhcpRelayInterface = import("./dhcpRelayInterface").DhcpRelayInterface;
export const DhcpRelayInterface: typeof import("./dhcpRelayInterface").DhcpRelayInterface = null as any;
utilities.lazyLoad(exports, ["DhcpRelayInterface"], () => require("./dhcpRelayInterface"));

export { EthernetArgs, EthernetState } from "./ethernet";
export type Ethernet = import("./ethernet").Ethernet;
export const Ethernet: typeof import("./ethernet").Ethernet = null as any;
utilities.lazyLoad(exports, ["Ethernet"], () => require("./ethernet"));

export { EvpnArgs, EvpnState } from "./evpn";
export type Evpn = import("./evpn").Evpn;
export const Evpn: typeof import("./evpn").Evpn = null as any;
utilities.lazyLoad(exports, ["Evpn"], () => require("./evpn"));

export { EvpnVniArgs, EvpnVniState } from "./evpnVni";
export type EvpnVni = import("./evpnVni").EvpnVni;
export const EvpnVni: typeof import("./evpnVni").EvpnVni = null as any;
utilities.lazyLoad(exports, ["EvpnVni"], () => require("./evpnVni"));

export { EvpnVniRouteTargetArgs, EvpnVniRouteTargetState } from "./evpnVniRouteTarget";
export type EvpnVniRouteTarget = import("./evpnVniRouteTarget").EvpnVniRouteTarget;
export const EvpnVniRouteTarget: typeof import("./evpnVniRouteTarget").EvpnVniRouteTarget = null as any;
utilities.lazyLoad(exports, ["EvpnVniRouteTarget"], () => require("./evpnVniRouteTarget"));

export { EvpnVniRouteTargetDirectionArgs, EvpnVniRouteTargetDirectionState } from "./evpnVniRouteTargetDirection";
export type EvpnVniRouteTargetDirection = import("./evpnVniRouteTargetDirection").EvpnVniRouteTargetDirection;
export const EvpnVniRouteTargetDirection: typeof import("./evpnVniRouteTargetDirection").EvpnVniRouteTargetDirection = null as any;
utilities.lazyLoad(exports, ["EvpnVniRouteTargetDirection"], () => require("./evpnVniRouteTargetDirection"));

export { FeatureBfdArgs, FeatureBfdState } from "./featureBfd";
export type FeatureBfd = import("./featureBfd").FeatureBfd;
export const FeatureBfd: typeof import("./featureBfd").FeatureBfd = null as any;
utilities.lazyLoad(exports, ["FeatureBfd"], () => require("./featureBfd"));

export { FeatureBgpArgs, FeatureBgpState } from "./featureBgp";
export type FeatureBgp = import("./featureBgp").FeatureBgp;
export const FeatureBgp: typeof import("./featureBgp").FeatureBgp = null as any;
utilities.lazyLoad(exports, ["FeatureBgp"], () => require("./featureBgp"));

export { FeatureDhcpArgs, FeatureDhcpState } from "./featureDhcp";
export type FeatureDhcp = import("./featureDhcp").FeatureDhcp;
export const FeatureDhcp: typeof import("./featureDhcp").FeatureDhcp = null as any;
utilities.lazyLoad(exports, ["FeatureDhcp"], () => require("./featureDhcp"));

export { FeatureEvpnArgs, FeatureEvpnState } from "./featureEvpn";
export type FeatureEvpn = import("./featureEvpn").FeatureEvpn;
export const FeatureEvpn: typeof import("./featureEvpn").FeatureEvpn = null as any;
utilities.lazyLoad(exports, ["FeatureEvpn"], () => require("./featureEvpn"));

export { FeatureHmmArgs, FeatureHmmState } from "./featureHmm";
export type FeatureHmm = import("./featureHmm").FeatureHmm;
export const FeatureHmm: typeof import("./featureHmm").FeatureHmm = null as any;
utilities.lazyLoad(exports, ["FeatureHmm"], () => require("./featureHmm"));

export { FeatureHsrpArgs, FeatureHsrpState } from "./featureHsrp";
export type FeatureHsrp = import("./featureHsrp").FeatureHsrp;
export const FeatureHsrp: typeof import("./featureHsrp").FeatureHsrp = null as any;
utilities.lazyLoad(exports, ["FeatureHsrp"], () => require("./featureHsrp"));

export { FeatureInterfaceVlanArgs, FeatureInterfaceVlanState } from "./featureInterfaceVlan";
export type FeatureInterfaceVlan = import("./featureInterfaceVlan").FeatureInterfaceVlan;
export const FeatureInterfaceVlan: typeof import("./featureInterfaceVlan").FeatureInterfaceVlan = null as any;
utilities.lazyLoad(exports, ["FeatureInterfaceVlan"], () => require("./featureInterfaceVlan"));

export { FeatureIsisArgs, FeatureIsisState } from "./featureIsis";
export type FeatureIsis = import("./featureIsis").FeatureIsis;
export const FeatureIsis: typeof import("./featureIsis").FeatureIsis = null as any;
utilities.lazyLoad(exports, ["FeatureIsis"], () => require("./featureIsis"));

export { FeatureLacpArgs, FeatureLacpState } from "./featureLacp";
export type FeatureLacp = import("./featureLacp").FeatureLacp;
export const FeatureLacp: typeof import("./featureLacp").FeatureLacp = null as any;
utilities.lazyLoad(exports, ["FeatureLacp"], () => require("./featureLacp"));

export { FeatureLldpArgs, FeatureLldpState } from "./featureLldp";
export type FeatureLldp = import("./featureLldp").FeatureLldp;
export const FeatureLldp: typeof import("./featureLldp").FeatureLldp = null as any;
utilities.lazyLoad(exports, ["FeatureLldp"], () => require("./featureLldp"));

export { FeatureMacsecArgs, FeatureMacsecState } from "./featureMacsec";
export type FeatureMacsec = import("./featureMacsec").FeatureMacsec;
export const FeatureMacsec: typeof import("./featureMacsec").FeatureMacsec = null as any;
utilities.lazyLoad(exports, ["FeatureMacsec"], () => require("./featureMacsec"));

export { FeatureNetflowArgs, FeatureNetflowState } from "./featureNetflow";
export type FeatureNetflow = import("./featureNetflow").FeatureNetflow;
export const FeatureNetflow: typeof import("./featureNetflow").FeatureNetflow = null as any;
utilities.lazyLoad(exports, ["FeatureNetflow"], () => require("./featureNetflow"));

export { FeatureNvOverlayArgs, FeatureNvOverlayState } from "./featureNvOverlay";
export type FeatureNvOverlay = import("./featureNvOverlay").FeatureNvOverlay;
export const FeatureNvOverlay: typeof import("./featureNvOverlay").FeatureNvOverlay = null as any;
utilities.lazyLoad(exports, ["FeatureNvOverlay"], () => require("./featureNvOverlay"));

export { FeatureOspfArgs, FeatureOspfState } from "./featureOspf";
export type FeatureOspf = import("./featureOspf").FeatureOspf;
export const FeatureOspf: typeof import("./featureOspf").FeatureOspf = null as any;
utilities.lazyLoad(exports, ["FeatureOspf"], () => require("./featureOspf"));

export { FeatureOspfv3Args, FeatureOspfv3State } from "./featureOspfv3";
export type FeatureOspfv3 = import("./featureOspfv3").FeatureOspfv3;
export const FeatureOspfv3: typeof import("./featureOspfv3").FeatureOspfv3 = null as any;
utilities.lazyLoad(exports, ["FeatureOspfv3"], () => require("./featureOspfv3"));

export { FeaturePimArgs, FeaturePimState } from "./featurePim";
export type FeaturePim = import("./featurePim").FeaturePim;
export const FeaturePim: typeof import("./featurePim").FeaturePim = null as any;
utilities.lazyLoad(exports, ["FeaturePim"], () => require("./featurePim"));

export { FeaturePtpArgs, FeaturePtpState } from "./featurePtp";
export type FeaturePtp = import("./featurePtp").FeaturePtp;
export const FeaturePtp: typeof import("./featurePtp").FeaturePtp = null as any;
utilities.lazyLoad(exports, ["FeaturePtp"], () => require("./featurePtp"));

export { FeaturePvlanArgs, FeaturePvlanState } from "./featurePvlan";
export type FeaturePvlan = import("./featurePvlan").FeaturePvlan;
export const FeaturePvlan: typeof import("./featurePvlan").FeaturePvlan = null as any;
utilities.lazyLoad(exports, ["FeaturePvlan"], () => require("./featurePvlan"));

export { FeatureSshArgs, FeatureSshState } from "./featureSsh";
export type FeatureSsh = import("./featureSsh").FeatureSsh;
export const FeatureSsh: typeof import("./featureSsh").FeatureSsh = null as any;
utilities.lazyLoad(exports, ["FeatureSsh"], () => require("./featureSsh"));

export { FeatureTacacsArgs, FeatureTacacsState } from "./featureTacacs";
export type FeatureTacacs = import("./featureTacacs").FeatureTacacs;
export const FeatureTacacs: typeof import("./featureTacacs").FeatureTacacs = null as any;
utilities.lazyLoad(exports, ["FeatureTacacs"], () => require("./featureTacacs"));

export { FeatureTelnetArgs, FeatureTelnetState } from "./featureTelnet";
export type FeatureTelnet = import("./featureTelnet").FeatureTelnet;
export const FeatureTelnet: typeof import("./featureTelnet").FeatureTelnet = null as any;
utilities.lazyLoad(exports, ["FeatureTelnet"], () => require("./featureTelnet"));

export { FeatureUdldArgs, FeatureUdldState } from "./featureUdld";
export type FeatureUdld = import("./featureUdld").FeatureUdld;
export const FeatureUdld: typeof import("./featureUdld").FeatureUdld = null as any;
utilities.lazyLoad(exports, ["FeatureUdld"], () => require("./featureUdld"));

export { FeatureVnSegmentArgs, FeatureVnSegmentState } from "./featureVnSegment";
export type FeatureVnSegment = import("./featureVnSegment").FeatureVnSegment;
export const FeatureVnSegment: typeof import("./featureVnSegment").FeatureVnSegment = null as any;
utilities.lazyLoad(exports, ["FeatureVnSegment"], () => require("./featureVnSegment"));

export { FeatureVpcArgs, FeatureVpcState } from "./featureVpc";
export type FeatureVpc = import("./featureVpc").FeatureVpc;
export const FeatureVpc: typeof import("./featureVpc").FeatureVpc = null as any;
utilities.lazyLoad(exports, ["FeatureVpc"], () => require("./featureVpc"));

export { GetBgpArgs, GetBgpResult, GetBgpOutputArgs } from "./getBgp";
export const getBgp: typeof import("./getBgp").getBgp = null as any;
export const getBgpOutput: typeof import("./getBgp").getBgpOutput = null as any;
utilities.lazyLoad(exports, ["getBgp","getBgpOutput"], () => require("./getBgp"));

export { GetBgpAddressFamilyArgs, GetBgpAddressFamilyResult, GetBgpAddressFamilyOutputArgs } from "./getBgpAddressFamily";
export const getBgpAddressFamily: typeof import("./getBgpAddressFamily").getBgpAddressFamily = null as any;
export const getBgpAddressFamilyOutput: typeof import("./getBgpAddressFamily").getBgpAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getBgpAddressFamily","getBgpAddressFamilyOutput"], () => require("./getBgpAddressFamily"));

export { GetBgpAdvertisedPrefixArgs, GetBgpAdvertisedPrefixResult, GetBgpAdvertisedPrefixOutputArgs } from "./getBgpAdvertisedPrefix";
export const getBgpAdvertisedPrefix: typeof import("./getBgpAdvertisedPrefix").getBgpAdvertisedPrefix = null as any;
export const getBgpAdvertisedPrefixOutput: typeof import("./getBgpAdvertisedPrefix").getBgpAdvertisedPrefixOutput = null as any;
utilities.lazyLoad(exports, ["getBgpAdvertisedPrefix","getBgpAdvertisedPrefixOutput"], () => require("./getBgpAdvertisedPrefix"));

export { GetBgpGracefulRestartArgs, GetBgpGracefulRestartResult, GetBgpGracefulRestartOutputArgs } from "./getBgpGracefulRestart";
export const getBgpGracefulRestart: typeof import("./getBgpGracefulRestart").getBgpGracefulRestart = null as any;
export const getBgpGracefulRestartOutput: typeof import("./getBgpGracefulRestart").getBgpGracefulRestartOutput = null as any;
utilities.lazyLoad(exports, ["getBgpGracefulRestart","getBgpGracefulRestartOutput"], () => require("./getBgpGracefulRestart"));

export { GetBgpInstanceArgs, GetBgpInstanceResult, GetBgpInstanceOutputArgs } from "./getBgpInstance";
export const getBgpInstance: typeof import("./getBgpInstance").getBgpInstance = null as any;
export const getBgpInstanceOutput: typeof import("./getBgpInstance").getBgpInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getBgpInstance","getBgpInstanceOutput"], () => require("./getBgpInstance"));

export { GetBgpPeerArgs, GetBgpPeerResult, GetBgpPeerOutputArgs } from "./getBgpPeer";
export const getBgpPeer: typeof import("./getBgpPeer").getBgpPeer = null as any;
export const getBgpPeerOutput: typeof import("./getBgpPeer").getBgpPeerOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeer","getBgpPeerOutput"], () => require("./getBgpPeer"));

export { GetBgpPeerAddressFamilyArgs, GetBgpPeerAddressFamilyResult, GetBgpPeerAddressFamilyOutputArgs } from "./getBgpPeerAddressFamily";
export const getBgpPeerAddressFamily: typeof import("./getBgpPeerAddressFamily").getBgpPeerAddressFamily = null as any;
export const getBgpPeerAddressFamilyOutput: typeof import("./getBgpPeerAddressFamily").getBgpPeerAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeerAddressFamily","getBgpPeerAddressFamilyOutput"], () => require("./getBgpPeerAddressFamily"));

export { GetBgpPeerAddressFamilyPrefixListControlArgs, GetBgpPeerAddressFamilyPrefixListControlResult, GetBgpPeerAddressFamilyPrefixListControlOutputArgs } from "./getBgpPeerAddressFamilyPrefixListControl";
export const getBgpPeerAddressFamilyPrefixListControl: typeof import("./getBgpPeerAddressFamilyPrefixListControl").getBgpPeerAddressFamilyPrefixListControl = null as any;
export const getBgpPeerAddressFamilyPrefixListControlOutput: typeof import("./getBgpPeerAddressFamilyPrefixListControl").getBgpPeerAddressFamilyPrefixListControlOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeerAddressFamilyPrefixListControl","getBgpPeerAddressFamilyPrefixListControlOutput"], () => require("./getBgpPeerAddressFamilyPrefixListControl"));

export { GetBgpPeerAddressFamilyRouteControlArgs, GetBgpPeerAddressFamilyRouteControlResult, GetBgpPeerAddressFamilyRouteControlOutputArgs } from "./getBgpPeerAddressFamilyRouteControl";
export const getBgpPeerAddressFamilyRouteControl: typeof import("./getBgpPeerAddressFamilyRouteControl").getBgpPeerAddressFamilyRouteControl = null as any;
export const getBgpPeerAddressFamilyRouteControlOutput: typeof import("./getBgpPeerAddressFamilyRouteControl").getBgpPeerAddressFamilyRouteControlOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeerAddressFamilyRouteControl","getBgpPeerAddressFamilyRouteControlOutput"], () => require("./getBgpPeerAddressFamilyRouteControl"));

export { GetBgpPeerLocalAsnArgs, GetBgpPeerLocalAsnResult, GetBgpPeerLocalAsnOutputArgs } from "./getBgpPeerLocalAsn";
export const getBgpPeerLocalAsn: typeof import("./getBgpPeerLocalAsn").getBgpPeerLocalAsn = null as any;
export const getBgpPeerLocalAsnOutput: typeof import("./getBgpPeerLocalAsn").getBgpPeerLocalAsnOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeerLocalAsn","getBgpPeerLocalAsnOutput"], () => require("./getBgpPeerLocalAsn"));

export { GetBgpPeerTemplateArgs, GetBgpPeerTemplateResult, GetBgpPeerTemplateOutputArgs } from "./getBgpPeerTemplate";
export const getBgpPeerTemplate: typeof import("./getBgpPeerTemplate").getBgpPeerTemplate = null as any;
export const getBgpPeerTemplateOutput: typeof import("./getBgpPeerTemplate").getBgpPeerTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeerTemplate","getBgpPeerTemplateOutput"], () => require("./getBgpPeerTemplate"));

export { GetBgpPeerTemplateAddressFamilyArgs, GetBgpPeerTemplateAddressFamilyResult, GetBgpPeerTemplateAddressFamilyOutputArgs } from "./getBgpPeerTemplateAddressFamily";
export const getBgpPeerTemplateAddressFamily: typeof import("./getBgpPeerTemplateAddressFamily").getBgpPeerTemplateAddressFamily = null as any;
export const getBgpPeerTemplateAddressFamilyOutput: typeof import("./getBgpPeerTemplateAddressFamily").getBgpPeerTemplateAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeerTemplateAddressFamily","getBgpPeerTemplateAddressFamilyOutput"], () => require("./getBgpPeerTemplateAddressFamily"));

export { GetBgpPeerTemplateMaxPrefixArgs, GetBgpPeerTemplateMaxPrefixResult, GetBgpPeerTemplateMaxPrefixOutputArgs } from "./getBgpPeerTemplateMaxPrefix";
export const getBgpPeerTemplateMaxPrefix: typeof import("./getBgpPeerTemplateMaxPrefix").getBgpPeerTemplateMaxPrefix = null as any;
export const getBgpPeerTemplateMaxPrefixOutput: typeof import("./getBgpPeerTemplateMaxPrefix").getBgpPeerTemplateMaxPrefixOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeerTemplateMaxPrefix","getBgpPeerTemplateMaxPrefixOutput"], () => require("./getBgpPeerTemplateMaxPrefix"));

export { GetBgpRouteControlArgs, GetBgpRouteControlResult, GetBgpRouteControlOutputArgs } from "./getBgpRouteControl";
export const getBgpRouteControl: typeof import("./getBgpRouteControl").getBgpRouteControl = null as any;
export const getBgpRouteControlOutput: typeof import("./getBgpRouteControl").getBgpRouteControlOutput = null as any;
utilities.lazyLoad(exports, ["getBgpRouteControl","getBgpRouteControlOutput"], () => require("./getBgpRouteControl"));

export { GetBgpRouteRedistributionArgs, GetBgpRouteRedistributionResult, GetBgpRouteRedistributionOutputArgs } from "./getBgpRouteRedistribution";
export const getBgpRouteRedistribution: typeof import("./getBgpRouteRedistribution").getBgpRouteRedistribution = null as any;
export const getBgpRouteRedistributionOutput: typeof import("./getBgpRouteRedistribution").getBgpRouteRedistributionOutput = null as any;
utilities.lazyLoad(exports, ["getBgpRouteRedistribution","getBgpRouteRedistributionOutput"], () => require("./getBgpRouteRedistribution"));

export { GetBgpVrfArgs, GetBgpVrfResult, GetBgpVrfOutputArgs } from "./getBgpVrf";
export const getBgpVrf: typeof import("./getBgpVrf").getBgpVrf = null as any;
export const getBgpVrfOutput: typeof import("./getBgpVrf").getBgpVrfOutput = null as any;
utilities.lazyLoad(exports, ["getBgpVrf","getBgpVrfOutput"], () => require("./getBgpVrf"));

export { GetBridgeDomainArgs, GetBridgeDomainResult, GetBridgeDomainOutputArgs } from "./getBridgeDomain";
export const getBridgeDomain: typeof import("./getBridgeDomain").getBridgeDomain = null as any;
export const getBridgeDomainOutput: typeof import("./getBridgeDomain").getBridgeDomainOutput = null as any;
utilities.lazyLoad(exports, ["getBridgeDomain","getBridgeDomainOutput"], () => require("./getBridgeDomain"));

export { GetDefaultQosClassMapArgs, GetDefaultQosClassMapResult, GetDefaultQosClassMapOutputArgs } from "./getDefaultQosClassMap";
export const getDefaultQosClassMap: typeof import("./getDefaultQosClassMap").getDefaultQosClassMap = null as any;
export const getDefaultQosClassMapOutput: typeof import("./getDefaultQosClassMap").getDefaultQosClassMapOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultQosClassMap","getDefaultQosClassMapOutput"], () => require("./getDefaultQosClassMap"));

export { GetDefaultQosClassMapDscpArgs, GetDefaultQosClassMapDscpResult, GetDefaultQosClassMapDscpOutputArgs } from "./getDefaultQosClassMapDscp";
export const getDefaultQosClassMapDscp: typeof import("./getDefaultQosClassMapDscp").getDefaultQosClassMapDscp = null as any;
export const getDefaultQosClassMapDscpOutput: typeof import("./getDefaultQosClassMapDscp").getDefaultQosClassMapDscpOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultQosClassMapDscp","getDefaultQosClassMapDscpOutput"], () => require("./getDefaultQosClassMapDscp"));

export { GetDefaultQosPolicyInterfaceInArgs, GetDefaultQosPolicyInterfaceInResult, GetDefaultQosPolicyInterfaceInOutputArgs } from "./getDefaultQosPolicyInterfaceIn";
export const getDefaultQosPolicyInterfaceIn: typeof import("./getDefaultQosPolicyInterfaceIn").getDefaultQosPolicyInterfaceIn = null as any;
export const getDefaultQosPolicyInterfaceInOutput: typeof import("./getDefaultQosPolicyInterfaceIn").getDefaultQosPolicyInterfaceInOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultQosPolicyInterfaceIn","getDefaultQosPolicyInterfaceInOutput"], () => require("./getDefaultQosPolicyInterfaceIn"));

export { GetDefaultQosPolicyInterfaceInPolicyMapArgs, GetDefaultQosPolicyInterfaceInPolicyMapResult, GetDefaultQosPolicyInterfaceInPolicyMapOutputArgs } from "./getDefaultQosPolicyInterfaceInPolicyMap";
export const getDefaultQosPolicyInterfaceInPolicyMap: typeof import("./getDefaultQosPolicyInterfaceInPolicyMap").getDefaultQosPolicyInterfaceInPolicyMap = null as any;
export const getDefaultQosPolicyInterfaceInPolicyMapOutput: typeof import("./getDefaultQosPolicyInterfaceInPolicyMap").getDefaultQosPolicyInterfaceInPolicyMapOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultQosPolicyInterfaceInPolicyMap","getDefaultQosPolicyInterfaceInPolicyMapOutput"], () => require("./getDefaultQosPolicyInterfaceInPolicyMap"));

export { GetDefaultQosPolicyMapArgs, GetDefaultQosPolicyMapResult, GetDefaultQosPolicyMapOutputArgs } from "./getDefaultQosPolicyMap";
export const getDefaultQosPolicyMap: typeof import("./getDefaultQosPolicyMap").getDefaultQosPolicyMap = null as any;
export const getDefaultQosPolicyMapOutput: typeof import("./getDefaultQosPolicyMap").getDefaultQosPolicyMapOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultQosPolicyMap","getDefaultQosPolicyMapOutput"], () => require("./getDefaultQosPolicyMap"));

export { GetDefaultQosPolicyMapMatchClassMapArgs, GetDefaultQosPolicyMapMatchClassMapResult, GetDefaultQosPolicyMapMatchClassMapOutputArgs } from "./getDefaultQosPolicyMapMatchClassMap";
export const getDefaultQosPolicyMapMatchClassMap: typeof import("./getDefaultQosPolicyMapMatchClassMap").getDefaultQosPolicyMapMatchClassMap = null as any;
export const getDefaultQosPolicyMapMatchClassMapOutput: typeof import("./getDefaultQosPolicyMapMatchClassMap").getDefaultQosPolicyMapMatchClassMapOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultQosPolicyMapMatchClassMap","getDefaultQosPolicyMapMatchClassMapOutput"], () => require("./getDefaultQosPolicyMapMatchClassMap"));

export { GetDefaultQosPolicyMapMatchClassMapPoliceArgs, GetDefaultQosPolicyMapMatchClassMapPoliceResult, GetDefaultQosPolicyMapMatchClassMapPoliceOutputArgs } from "./getDefaultQosPolicyMapMatchClassMapPolice";
export const getDefaultQosPolicyMapMatchClassMapPolice: typeof import("./getDefaultQosPolicyMapMatchClassMapPolice").getDefaultQosPolicyMapMatchClassMapPolice = null as any;
export const getDefaultQosPolicyMapMatchClassMapPoliceOutput: typeof import("./getDefaultQosPolicyMapMatchClassMapPolice").getDefaultQosPolicyMapMatchClassMapPoliceOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultQosPolicyMapMatchClassMapPolice","getDefaultQosPolicyMapMatchClassMapPoliceOutput"], () => require("./getDefaultQosPolicyMapMatchClassMapPolice"));

export { GetDefaultQosPolicyMapMatchClassMapSetQosGroupArgs, GetDefaultQosPolicyMapMatchClassMapSetQosGroupResult, GetDefaultQosPolicyMapMatchClassMapSetQosGroupOutputArgs } from "./getDefaultQosPolicyMapMatchClassMapSetQosGroup";
export const getDefaultQosPolicyMapMatchClassMapSetQosGroup: typeof import("./getDefaultQosPolicyMapMatchClassMapSetQosGroup").getDefaultQosPolicyMapMatchClassMapSetQosGroup = null as any;
export const getDefaultQosPolicyMapMatchClassMapSetQosGroupOutput: typeof import("./getDefaultQosPolicyMapMatchClassMapSetQosGroup").getDefaultQosPolicyMapMatchClassMapSetQosGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultQosPolicyMapMatchClassMapSetQosGroup","getDefaultQosPolicyMapMatchClassMapSetQosGroupOutput"], () => require("./getDefaultQosPolicyMapMatchClassMapSetQosGroup"));

export { GetDhcpRelayAddressArgs, GetDhcpRelayAddressResult, GetDhcpRelayAddressOutputArgs } from "./getDhcpRelayAddress";
export const getDhcpRelayAddress: typeof import("./getDhcpRelayAddress").getDhcpRelayAddress = null as any;
export const getDhcpRelayAddressOutput: typeof import("./getDhcpRelayAddress").getDhcpRelayAddressOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpRelayAddress","getDhcpRelayAddressOutput"], () => require("./getDhcpRelayAddress"));

export { GetDhcpRelayInterfaceArgs, GetDhcpRelayInterfaceResult, GetDhcpRelayInterfaceOutputArgs } from "./getDhcpRelayInterface";
export const getDhcpRelayInterface: typeof import("./getDhcpRelayInterface").getDhcpRelayInterface = null as any;
export const getDhcpRelayInterfaceOutput: typeof import("./getDhcpRelayInterface").getDhcpRelayInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpRelayInterface","getDhcpRelayInterfaceOutput"], () => require("./getDhcpRelayInterface"));

export { GetEthernetArgs, GetEthernetResult, GetEthernetOutputArgs } from "./getEthernet";
export const getEthernet: typeof import("./getEthernet").getEthernet = null as any;
export const getEthernetOutput: typeof import("./getEthernet").getEthernetOutput = null as any;
utilities.lazyLoad(exports, ["getEthernet","getEthernetOutput"], () => require("./getEthernet"));

export { GetEvpnArgs, GetEvpnResult, GetEvpnOutputArgs } from "./getEvpn";
export const getEvpn: typeof import("./getEvpn").getEvpn = null as any;
export const getEvpnOutput: typeof import("./getEvpn").getEvpnOutput = null as any;
utilities.lazyLoad(exports, ["getEvpn","getEvpnOutput"], () => require("./getEvpn"));

export { GetEvpnVniArgs, GetEvpnVniResult, GetEvpnVniOutputArgs } from "./getEvpnVni";
export const getEvpnVni: typeof import("./getEvpnVni").getEvpnVni = null as any;
export const getEvpnVniOutput: typeof import("./getEvpnVni").getEvpnVniOutput = null as any;
utilities.lazyLoad(exports, ["getEvpnVni","getEvpnVniOutput"], () => require("./getEvpnVni"));

export { GetEvpnVniRouteTargetArgs, GetEvpnVniRouteTargetResult, GetEvpnVniRouteTargetOutputArgs } from "./getEvpnVniRouteTarget";
export const getEvpnVniRouteTarget: typeof import("./getEvpnVniRouteTarget").getEvpnVniRouteTarget = null as any;
export const getEvpnVniRouteTargetOutput: typeof import("./getEvpnVniRouteTarget").getEvpnVniRouteTargetOutput = null as any;
utilities.lazyLoad(exports, ["getEvpnVniRouteTarget","getEvpnVniRouteTargetOutput"], () => require("./getEvpnVniRouteTarget"));

export { GetEvpnVniRouteTargetDirectionArgs, GetEvpnVniRouteTargetDirectionResult, GetEvpnVniRouteTargetDirectionOutputArgs } from "./getEvpnVniRouteTargetDirection";
export const getEvpnVniRouteTargetDirection: typeof import("./getEvpnVniRouteTargetDirection").getEvpnVniRouteTargetDirection = null as any;
export const getEvpnVniRouteTargetDirectionOutput: typeof import("./getEvpnVniRouteTargetDirection").getEvpnVniRouteTargetDirectionOutput = null as any;
utilities.lazyLoad(exports, ["getEvpnVniRouteTargetDirection","getEvpnVniRouteTargetDirectionOutput"], () => require("./getEvpnVniRouteTargetDirection"));

export { GetFeatureBfdArgs, GetFeatureBfdResult, GetFeatureBfdOutputArgs } from "./getFeatureBfd";
export const getFeatureBfd: typeof import("./getFeatureBfd").getFeatureBfd = null as any;
export const getFeatureBfdOutput: typeof import("./getFeatureBfd").getFeatureBfdOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureBfd","getFeatureBfdOutput"], () => require("./getFeatureBfd"));

export { GetFeatureBgpArgs, GetFeatureBgpResult, GetFeatureBgpOutputArgs } from "./getFeatureBgp";
export const getFeatureBgp: typeof import("./getFeatureBgp").getFeatureBgp = null as any;
export const getFeatureBgpOutput: typeof import("./getFeatureBgp").getFeatureBgpOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureBgp","getFeatureBgpOutput"], () => require("./getFeatureBgp"));

export { GetFeatureDhcpArgs, GetFeatureDhcpResult, GetFeatureDhcpOutputArgs } from "./getFeatureDhcp";
export const getFeatureDhcp: typeof import("./getFeatureDhcp").getFeatureDhcp = null as any;
export const getFeatureDhcpOutput: typeof import("./getFeatureDhcp").getFeatureDhcpOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureDhcp","getFeatureDhcpOutput"], () => require("./getFeatureDhcp"));

export { GetFeatureEvpnArgs, GetFeatureEvpnResult, GetFeatureEvpnOutputArgs } from "./getFeatureEvpn";
export const getFeatureEvpn: typeof import("./getFeatureEvpn").getFeatureEvpn = null as any;
export const getFeatureEvpnOutput: typeof import("./getFeatureEvpn").getFeatureEvpnOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureEvpn","getFeatureEvpnOutput"], () => require("./getFeatureEvpn"));

export { GetFeatureHmmArgs, GetFeatureHmmResult, GetFeatureHmmOutputArgs } from "./getFeatureHmm";
export const getFeatureHmm: typeof import("./getFeatureHmm").getFeatureHmm = null as any;
export const getFeatureHmmOutput: typeof import("./getFeatureHmm").getFeatureHmmOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureHmm","getFeatureHmmOutput"], () => require("./getFeatureHmm"));

export { GetFeatureHsrpArgs, GetFeatureHsrpResult, GetFeatureHsrpOutputArgs } from "./getFeatureHsrp";
export const getFeatureHsrp: typeof import("./getFeatureHsrp").getFeatureHsrp = null as any;
export const getFeatureHsrpOutput: typeof import("./getFeatureHsrp").getFeatureHsrpOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureHsrp","getFeatureHsrpOutput"], () => require("./getFeatureHsrp"));

export { GetFeatureInterfaceVlanArgs, GetFeatureInterfaceVlanResult, GetFeatureInterfaceVlanOutputArgs } from "./getFeatureInterfaceVlan";
export const getFeatureInterfaceVlan: typeof import("./getFeatureInterfaceVlan").getFeatureInterfaceVlan = null as any;
export const getFeatureInterfaceVlanOutput: typeof import("./getFeatureInterfaceVlan").getFeatureInterfaceVlanOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureInterfaceVlan","getFeatureInterfaceVlanOutput"], () => require("./getFeatureInterfaceVlan"));

export { GetFeatureIsisArgs, GetFeatureIsisResult, GetFeatureIsisOutputArgs } from "./getFeatureIsis";
export const getFeatureIsis: typeof import("./getFeatureIsis").getFeatureIsis = null as any;
export const getFeatureIsisOutput: typeof import("./getFeatureIsis").getFeatureIsisOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureIsis","getFeatureIsisOutput"], () => require("./getFeatureIsis"));

export { GetFeatureLacpArgs, GetFeatureLacpResult, GetFeatureLacpOutputArgs } from "./getFeatureLacp";
export const getFeatureLacp: typeof import("./getFeatureLacp").getFeatureLacp = null as any;
export const getFeatureLacpOutput: typeof import("./getFeatureLacp").getFeatureLacpOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureLacp","getFeatureLacpOutput"], () => require("./getFeatureLacp"));

export { GetFeatureLldpArgs, GetFeatureLldpResult, GetFeatureLldpOutputArgs } from "./getFeatureLldp";
export const getFeatureLldp: typeof import("./getFeatureLldp").getFeatureLldp = null as any;
export const getFeatureLldpOutput: typeof import("./getFeatureLldp").getFeatureLldpOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureLldp","getFeatureLldpOutput"], () => require("./getFeatureLldp"));

export { GetFeatureMacsecArgs, GetFeatureMacsecResult, GetFeatureMacsecOutputArgs } from "./getFeatureMacsec";
export const getFeatureMacsec: typeof import("./getFeatureMacsec").getFeatureMacsec = null as any;
export const getFeatureMacsecOutput: typeof import("./getFeatureMacsec").getFeatureMacsecOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureMacsec","getFeatureMacsecOutput"], () => require("./getFeatureMacsec"));

export { GetFeatureNetflowArgs, GetFeatureNetflowResult, GetFeatureNetflowOutputArgs } from "./getFeatureNetflow";
export const getFeatureNetflow: typeof import("./getFeatureNetflow").getFeatureNetflow = null as any;
export const getFeatureNetflowOutput: typeof import("./getFeatureNetflow").getFeatureNetflowOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureNetflow","getFeatureNetflowOutput"], () => require("./getFeatureNetflow"));

export { GetFeatureNvOverlayArgs, GetFeatureNvOverlayResult, GetFeatureNvOverlayOutputArgs } from "./getFeatureNvOverlay";
export const getFeatureNvOverlay: typeof import("./getFeatureNvOverlay").getFeatureNvOverlay = null as any;
export const getFeatureNvOverlayOutput: typeof import("./getFeatureNvOverlay").getFeatureNvOverlayOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureNvOverlay","getFeatureNvOverlayOutput"], () => require("./getFeatureNvOverlay"));

export { GetFeatureOspfArgs, GetFeatureOspfResult, GetFeatureOspfOutputArgs } from "./getFeatureOspf";
export const getFeatureOspf: typeof import("./getFeatureOspf").getFeatureOspf = null as any;
export const getFeatureOspfOutput: typeof import("./getFeatureOspf").getFeatureOspfOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureOspf","getFeatureOspfOutput"], () => require("./getFeatureOspf"));

export { GetFeatureOspfv3Args, GetFeatureOspfv3Result, GetFeatureOspfv3OutputArgs } from "./getFeatureOspfv3";
export const getFeatureOspfv3: typeof import("./getFeatureOspfv3").getFeatureOspfv3 = null as any;
export const getFeatureOspfv3Output: typeof import("./getFeatureOspfv3").getFeatureOspfv3Output = null as any;
utilities.lazyLoad(exports, ["getFeatureOspfv3","getFeatureOspfv3Output"], () => require("./getFeatureOspfv3"));

export { GetFeaturePimArgs, GetFeaturePimResult, GetFeaturePimOutputArgs } from "./getFeaturePim";
export const getFeaturePim: typeof import("./getFeaturePim").getFeaturePim = null as any;
export const getFeaturePimOutput: typeof import("./getFeaturePim").getFeaturePimOutput = null as any;
utilities.lazyLoad(exports, ["getFeaturePim","getFeaturePimOutput"], () => require("./getFeaturePim"));

export { GetFeaturePtpArgs, GetFeaturePtpResult, GetFeaturePtpOutputArgs } from "./getFeaturePtp";
export const getFeaturePtp: typeof import("./getFeaturePtp").getFeaturePtp = null as any;
export const getFeaturePtpOutput: typeof import("./getFeaturePtp").getFeaturePtpOutput = null as any;
utilities.lazyLoad(exports, ["getFeaturePtp","getFeaturePtpOutput"], () => require("./getFeaturePtp"));

export { GetFeaturePvlanArgs, GetFeaturePvlanResult, GetFeaturePvlanOutputArgs } from "./getFeaturePvlan";
export const getFeaturePvlan: typeof import("./getFeaturePvlan").getFeaturePvlan = null as any;
export const getFeaturePvlanOutput: typeof import("./getFeaturePvlan").getFeaturePvlanOutput = null as any;
utilities.lazyLoad(exports, ["getFeaturePvlan","getFeaturePvlanOutput"], () => require("./getFeaturePvlan"));

export { GetFeatureSshArgs, GetFeatureSshResult, GetFeatureSshOutputArgs } from "./getFeatureSsh";
export const getFeatureSsh: typeof import("./getFeatureSsh").getFeatureSsh = null as any;
export const getFeatureSshOutput: typeof import("./getFeatureSsh").getFeatureSshOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureSsh","getFeatureSshOutput"], () => require("./getFeatureSsh"));

export { GetFeatureTacacsArgs, GetFeatureTacacsResult, GetFeatureTacacsOutputArgs } from "./getFeatureTacacs";
export const getFeatureTacacs: typeof import("./getFeatureTacacs").getFeatureTacacs = null as any;
export const getFeatureTacacsOutput: typeof import("./getFeatureTacacs").getFeatureTacacsOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureTacacs","getFeatureTacacsOutput"], () => require("./getFeatureTacacs"));

export { GetFeatureTelnetArgs, GetFeatureTelnetResult, GetFeatureTelnetOutputArgs } from "./getFeatureTelnet";
export const getFeatureTelnet: typeof import("./getFeatureTelnet").getFeatureTelnet = null as any;
export const getFeatureTelnetOutput: typeof import("./getFeatureTelnet").getFeatureTelnetOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureTelnet","getFeatureTelnetOutput"], () => require("./getFeatureTelnet"));

export { GetFeatureUdldArgs, GetFeatureUdldResult, GetFeatureUdldOutputArgs } from "./getFeatureUdld";
export const getFeatureUdld: typeof import("./getFeatureUdld").getFeatureUdld = null as any;
export const getFeatureUdldOutput: typeof import("./getFeatureUdld").getFeatureUdldOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureUdld","getFeatureUdldOutput"], () => require("./getFeatureUdld"));

export { GetFeatureVnSegmentArgs, GetFeatureVnSegmentResult, GetFeatureVnSegmentOutputArgs } from "./getFeatureVnSegment";
export const getFeatureVnSegment: typeof import("./getFeatureVnSegment").getFeatureVnSegment = null as any;
export const getFeatureVnSegmentOutput: typeof import("./getFeatureVnSegment").getFeatureVnSegmentOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureVnSegment","getFeatureVnSegmentOutput"], () => require("./getFeatureVnSegment"));

export { GetFeatureVpcArgs, GetFeatureVpcResult, GetFeatureVpcOutputArgs } from "./getFeatureVpc";
export const getFeatureVpc: typeof import("./getFeatureVpc").getFeatureVpc = null as any;
export const getFeatureVpcOutput: typeof import("./getFeatureVpc").getFeatureVpcOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureVpc","getFeatureVpcOutput"], () => require("./getFeatureVpc"));

export { GetHmmArgs, GetHmmResult, GetHmmOutputArgs } from "./getHmm";
export const getHmm: typeof import("./getHmm").getHmm = null as any;
export const getHmmOutput: typeof import("./getHmm").getHmmOutput = null as any;
utilities.lazyLoad(exports, ["getHmm","getHmmOutput"], () => require("./getHmm"));

export { GetHmmInstanceArgs, GetHmmInstanceResult, GetHmmInstanceOutputArgs } from "./getHmmInstance";
export const getHmmInstance: typeof import("./getHmmInstance").getHmmInstance = null as any;
export const getHmmInstanceOutput: typeof import("./getHmmInstance").getHmmInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getHmmInstance","getHmmInstanceOutput"], () => require("./getHmmInstance"));

export { GetHmmInterfaceArgs, GetHmmInterfaceResult, GetHmmInterfaceOutputArgs } from "./getHmmInterface";
export const getHmmInterface: typeof import("./getHmmInterface").getHmmInterface = null as any;
export const getHmmInterfaceOutput: typeof import("./getHmmInterface").getHmmInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getHmmInterface","getHmmInterfaceOutput"], () => require("./getHmmInterface"));

export { GetIpv4AccessListArgs, GetIpv4AccessListResult, GetIpv4AccessListOutputArgs } from "./getIpv4AccessList";
export const getIpv4AccessList: typeof import("./getIpv4AccessList").getIpv4AccessList = null as any;
export const getIpv4AccessListOutput: typeof import("./getIpv4AccessList").getIpv4AccessListOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4AccessList","getIpv4AccessListOutput"], () => require("./getIpv4AccessList"));

export { GetIpv4AccessListEntryArgs, GetIpv4AccessListEntryResult, GetIpv4AccessListEntryOutputArgs } from "./getIpv4AccessListEntry";
export const getIpv4AccessListEntry: typeof import("./getIpv4AccessListEntry").getIpv4AccessListEntry = null as any;
export const getIpv4AccessListEntryOutput: typeof import("./getIpv4AccessListEntry").getIpv4AccessListEntryOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4AccessListEntry","getIpv4AccessListEntryOutput"], () => require("./getIpv4AccessListEntry"));

export { GetIpv4AccessListPolicyEgressInterfaceArgs, GetIpv4AccessListPolicyEgressInterfaceResult, GetIpv4AccessListPolicyEgressInterfaceOutputArgs } from "./getIpv4AccessListPolicyEgressInterface";
export const getIpv4AccessListPolicyEgressInterface: typeof import("./getIpv4AccessListPolicyEgressInterface").getIpv4AccessListPolicyEgressInterface = null as any;
export const getIpv4AccessListPolicyEgressInterfaceOutput: typeof import("./getIpv4AccessListPolicyEgressInterface").getIpv4AccessListPolicyEgressInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4AccessListPolicyEgressInterface","getIpv4AccessListPolicyEgressInterfaceOutput"], () => require("./getIpv4AccessListPolicyEgressInterface"));

export { GetIpv4AccessListPolicyIngressInterfaceArgs, GetIpv4AccessListPolicyIngressInterfaceResult, GetIpv4AccessListPolicyIngressInterfaceOutputArgs } from "./getIpv4AccessListPolicyIngressInterface";
export const getIpv4AccessListPolicyIngressInterface: typeof import("./getIpv4AccessListPolicyIngressInterface").getIpv4AccessListPolicyIngressInterface = null as any;
export const getIpv4AccessListPolicyIngressInterfaceOutput: typeof import("./getIpv4AccessListPolicyIngressInterface").getIpv4AccessListPolicyIngressInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4AccessListPolicyIngressInterface","getIpv4AccessListPolicyIngressInterfaceOutput"], () => require("./getIpv4AccessListPolicyIngressInterface"));

export { GetIpv4InterfaceArgs, GetIpv4InterfaceResult, GetIpv4InterfaceOutputArgs } from "./getIpv4Interface";
export const getIpv4Interface: typeof import("./getIpv4Interface").getIpv4Interface = null as any;
export const getIpv4InterfaceOutput: typeof import("./getIpv4Interface").getIpv4InterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4Interface","getIpv4InterfaceOutput"], () => require("./getIpv4Interface"));

export { GetIpv4InterfaceAddressArgs, GetIpv4InterfaceAddressResult, GetIpv4InterfaceAddressOutputArgs } from "./getIpv4InterfaceAddress";
export const getIpv4InterfaceAddress: typeof import("./getIpv4InterfaceAddress").getIpv4InterfaceAddress = null as any;
export const getIpv4InterfaceAddressOutput: typeof import("./getIpv4InterfaceAddress").getIpv4InterfaceAddressOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4InterfaceAddress","getIpv4InterfaceAddressOutput"], () => require("./getIpv4InterfaceAddress"));

export { GetIpv4PrefixListRuleArgs, GetIpv4PrefixListRuleResult, GetIpv4PrefixListRuleOutputArgs } from "./getIpv4PrefixListRule";
export const getIpv4PrefixListRule: typeof import("./getIpv4PrefixListRule").getIpv4PrefixListRule = null as any;
export const getIpv4PrefixListRuleOutput: typeof import("./getIpv4PrefixListRule").getIpv4PrefixListRuleOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4PrefixListRule","getIpv4PrefixListRuleOutput"], () => require("./getIpv4PrefixListRule"));

export { GetIpv4PrefixListRuleEntryArgs, GetIpv4PrefixListRuleEntryResult, GetIpv4PrefixListRuleEntryOutputArgs } from "./getIpv4PrefixListRuleEntry";
export const getIpv4PrefixListRuleEntry: typeof import("./getIpv4PrefixListRuleEntry").getIpv4PrefixListRuleEntry = null as any;
export const getIpv4PrefixListRuleEntryOutput: typeof import("./getIpv4PrefixListRuleEntry").getIpv4PrefixListRuleEntryOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4PrefixListRuleEntry","getIpv4PrefixListRuleEntryOutput"], () => require("./getIpv4PrefixListRuleEntry"));

export { GetIpv4StaticRouteArgs, GetIpv4StaticRouteResult, GetIpv4StaticRouteOutputArgs } from "./getIpv4StaticRoute";
export const getIpv4StaticRoute: typeof import("./getIpv4StaticRoute").getIpv4StaticRoute = null as any;
export const getIpv4StaticRouteOutput: typeof import("./getIpv4StaticRoute").getIpv4StaticRouteOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4StaticRoute","getIpv4StaticRouteOutput"], () => require("./getIpv4StaticRoute"));

export { GetIpv4VrfArgs, GetIpv4VrfResult, GetIpv4VrfOutputArgs } from "./getIpv4Vrf";
export const getIpv4Vrf: typeof import("./getIpv4Vrf").getIpv4Vrf = null as any;
export const getIpv4VrfOutput: typeof import("./getIpv4Vrf").getIpv4VrfOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4Vrf","getIpv4VrfOutput"], () => require("./getIpv4Vrf"));

export { GetIsisArgs, GetIsisResult, GetIsisOutputArgs } from "./getIsis";
export const getIsis: typeof import("./getIsis").getIsis = null as any;
export const getIsisOutput: typeof import("./getIsis").getIsisOutput = null as any;
utilities.lazyLoad(exports, ["getIsis","getIsisOutput"], () => require("./getIsis"));

export { GetIsisInstanceArgs, GetIsisInstanceResult, GetIsisInstanceOutputArgs } from "./getIsisInstance";
export const getIsisInstance: typeof import("./getIsisInstance").getIsisInstance = null as any;
export const getIsisInstanceOutput: typeof import("./getIsisInstance").getIsisInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getIsisInstance","getIsisInstanceOutput"], () => require("./getIsisInstance"));

export { GetIsisInterfaceArgs, GetIsisInterfaceResult, GetIsisInterfaceOutputArgs } from "./getIsisInterface";
export const getIsisInterface: typeof import("./getIsisInterface").getIsisInterface = null as any;
export const getIsisInterfaceOutput: typeof import("./getIsisInterface").getIsisInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getIsisInterface","getIsisInterfaceOutput"], () => require("./getIsisInterface"));

export { GetIsisVrfArgs, GetIsisVrfResult, GetIsisVrfOutputArgs } from "./getIsisVrf";
export const getIsisVrf: typeof import("./getIsisVrf").getIsisVrf = null as any;
export const getIsisVrfOutput: typeof import("./getIsisVrf").getIsisVrfOutput = null as any;
utilities.lazyLoad(exports, ["getIsisVrf","getIsisVrfOutput"], () => require("./getIsisVrf"));

export { GetLoopbackInterfaceArgs, GetLoopbackInterfaceResult, GetLoopbackInterfaceOutputArgs } from "./getLoopbackInterface";
export const getLoopbackInterface: typeof import("./getLoopbackInterface").getLoopbackInterface = null as any;
export const getLoopbackInterfaceOutput: typeof import("./getLoopbackInterface").getLoopbackInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getLoopbackInterface","getLoopbackInterfaceOutput"], () => require("./getLoopbackInterface"));

export { GetLoopbackInterfaceVrfArgs, GetLoopbackInterfaceVrfResult, GetLoopbackInterfaceVrfOutputArgs } from "./getLoopbackInterfaceVrf";
export const getLoopbackInterfaceVrf: typeof import("./getLoopbackInterfaceVrf").getLoopbackInterfaceVrf = null as any;
export const getLoopbackInterfaceVrfOutput: typeof import("./getLoopbackInterfaceVrf").getLoopbackInterfaceVrfOutput = null as any;
utilities.lazyLoad(exports, ["getLoopbackInterfaceVrf","getLoopbackInterfaceVrfOutput"], () => require("./getLoopbackInterfaceVrf"));

export { GetNtpServerArgs, GetNtpServerResult, GetNtpServerOutputArgs } from "./getNtpServer";
export const getNtpServer: typeof import("./getNtpServer").getNtpServer = null as any;
export const getNtpServerOutput: typeof import("./getNtpServer").getNtpServerOutput = null as any;
utilities.lazyLoad(exports, ["getNtpServer","getNtpServerOutput"], () => require("./getNtpServer"));

export { GetNveInterfaceArgs, GetNveInterfaceResult, GetNveInterfaceOutputArgs } from "./getNveInterface";
export const getNveInterface: typeof import("./getNveInterface").getNveInterface = null as any;
export const getNveInterfaceOutput: typeof import("./getNveInterface").getNveInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNveInterface","getNveInterfaceOutput"], () => require("./getNveInterface"));

export { GetNveVniArgs, GetNveVniResult, GetNveVniOutputArgs } from "./getNveVni";
export const getNveVni: typeof import("./getNveVni").getNveVni = null as any;
export const getNveVniOutput: typeof import("./getNveVni").getNveVniOutput = null as any;
utilities.lazyLoad(exports, ["getNveVni","getNveVniOutput"], () => require("./getNveVni"));

export { GetNveVniContainerArgs, GetNveVniContainerResult, GetNveVniContainerOutputArgs } from "./getNveVniContainer";
export const getNveVniContainer: typeof import("./getNveVniContainer").getNveVniContainer = null as any;
export const getNveVniContainerOutput: typeof import("./getNveVniContainer").getNveVniContainerOutput = null as any;
utilities.lazyLoad(exports, ["getNveVniContainer","getNveVniContainerOutput"], () => require("./getNveVniContainer"));

export { GetNveVniIngressReplicationArgs, GetNveVniIngressReplicationResult, GetNveVniIngressReplicationOutputArgs } from "./getNveVniIngressReplication";
export const getNveVniIngressReplication: typeof import("./getNveVniIngressReplication").getNveVniIngressReplication = null as any;
export const getNveVniIngressReplicationOutput: typeof import("./getNveVniIngressReplication").getNveVniIngressReplicationOutput = null as any;
utilities.lazyLoad(exports, ["getNveVniIngressReplication","getNveVniIngressReplicationOutput"], () => require("./getNveVniIngressReplication"));

export { GetOspfArgs, GetOspfResult, GetOspfOutputArgs } from "./getOspf";
export const getOspf: typeof import("./getOspf").getOspf = null as any;
export const getOspfOutput: typeof import("./getOspf").getOspfOutput = null as any;
utilities.lazyLoad(exports, ["getOspf","getOspfOutput"], () => require("./getOspf"));

export { GetOspfAreaArgs, GetOspfAreaResult, GetOspfAreaOutputArgs } from "./getOspfArea";
export const getOspfArea: typeof import("./getOspfArea").getOspfArea = null as any;
export const getOspfAreaOutput: typeof import("./getOspfArea").getOspfAreaOutput = null as any;
utilities.lazyLoad(exports, ["getOspfArea","getOspfAreaOutput"], () => require("./getOspfArea"));

export { GetOspfAuthenticationArgs, GetOspfAuthenticationResult, GetOspfAuthenticationOutputArgs } from "./getOspfAuthentication";
export const getOspfAuthentication: typeof import("./getOspfAuthentication").getOspfAuthentication = null as any;
export const getOspfAuthenticationOutput: typeof import("./getOspfAuthentication").getOspfAuthenticationOutput = null as any;
utilities.lazyLoad(exports, ["getOspfAuthentication","getOspfAuthenticationOutput"], () => require("./getOspfAuthentication"));

export { GetOspfInstanceArgs, GetOspfInstanceResult, GetOspfInstanceOutputArgs } from "./getOspfInstance";
export const getOspfInstance: typeof import("./getOspfInstance").getOspfInstance = null as any;
export const getOspfInstanceOutput: typeof import("./getOspfInstance").getOspfInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOspfInstance","getOspfInstanceOutput"], () => require("./getOspfInstance"));

export { GetOspfInterfaceArgs, GetOspfInterfaceResult, GetOspfInterfaceOutputArgs } from "./getOspfInterface";
export const getOspfInterface: typeof import("./getOspfInterface").getOspfInterface = null as any;
export const getOspfInterfaceOutput: typeof import("./getOspfInterface").getOspfInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getOspfInterface","getOspfInterfaceOutput"], () => require("./getOspfInterface"));

export { GetOspfVrfArgs, GetOspfVrfResult, GetOspfVrfOutputArgs } from "./getOspfVrf";
export const getOspfVrf: typeof import("./getOspfVrf").getOspfVrf = null as any;
export const getOspfVrfOutput: typeof import("./getOspfVrf").getOspfVrfOutput = null as any;
utilities.lazyLoad(exports, ["getOspfVrf","getOspfVrfOutput"], () => require("./getOspfVrf"));

export { GetPhysicalInterfaceArgs, GetPhysicalInterfaceResult, GetPhysicalInterfaceOutputArgs } from "./getPhysicalInterface";
export const getPhysicalInterface: typeof import("./getPhysicalInterface").getPhysicalInterface = null as any;
export const getPhysicalInterfaceOutput: typeof import("./getPhysicalInterface").getPhysicalInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getPhysicalInterface","getPhysicalInterfaceOutput"], () => require("./getPhysicalInterface"));

export { GetPhysicalInterfaceVrfArgs, GetPhysicalInterfaceVrfResult, GetPhysicalInterfaceVrfOutputArgs } from "./getPhysicalInterfaceVrf";
export const getPhysicalInterfaceVrf: typeof import("./getPhysicalInterfaceVrf").getPhysicalInterfaceVrf = null as any;
export const getPhysicalInterfaceVrfOutput: typeof import("./getPhysicalInterfaceVrf").getPhysicalInterfaceVrfOutput = null as any;
utilities.lazyLoad(exports, ["getPhysicalInterfaceVrf","getPhysicalInterfaceVrfOutput"], () => require("./getPhysicalInterfaceVrf"));

export { GetPimArgs, GetPimResult, GetPimOutputArgs } from "./getPim";
export const getPim: typeof import("./getPim").getPim = null as any;
export const getPimOutput: typeof import("./getPim").getPimOutput = null as any;
utilities.lazyLoad(exports, ["getPim","getPimOutput"], () => require("./getPim"));

export { GetPimAnycastRpArgs, GetPimAnycastRpResult, GetPimAnycastRpOutputArgs } from "./getPimAnycastRp";
export const getPimAnycastRp: typeof import("./getPimAnycastRp").getPimAnycastRp = null as any;
export const getPimAnycastRpOutput: typeof import("./getPimAnycastRp").getPimAnycastRpOutput = null as any;
utilities.lazyLoad(exports, ["getPimAnycastRp","getPimAnycastRpOutput"], () => require("./getPimAnycastRp"));

export { GetPimAnycastRpPeerArgs, GetPimAnycastRpPeerResult, GetPimAnycastRpPeerOutputArgs } from "./getPimAnycastRpPeer";
export const getPimAnycastRpPeer: typeof import("./getPimAnycastRpPeer").getPimAnycastRpPeer = null as any;
export const getPimAnycastRpPeerOutput: typeof import("./getPimAnycastRpPeer").getPimAnycastRpPeerOutput = null as any;
utilities.lazyLoad(exports, ["getPimAnycastRpPeer","getPimAnycastRpPeerOutput"], () => require("./getPimAnycastRpPeer"));

export { GetPimInstanceArgs, GetPimInstanceResult, GetPimInstanceOutputArgs } from "./getPimInstance";
export const getPimInstance: typeof import("./getPimInstance").getPimInstance = null as any;
export const getPimInstanceOutput: typeof import("./getPimInstance").getPimInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getPimInstance","getPimInstanceOutput"], () => require("./getPimInstance"));

export { GetPimInterfaceArgs, GetPimInterfaceResult, GetPimInterfaceOutputArgs } from "./getPimInterface";
export const getPimInterface: typeof import("./getPimInterface").getPimInterface = null as any;
export const getPimInterfaceOutput: typeof import("./getPimInterface").getPimInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getPimInterface","getPimInterfaceOutput"], () => require("./getPimInterface"));

export { GetPimSsmPolicyArgs, GetPimSsmPolicyResult, GetPimSsmPolicyOutputArgs } from "./getPimSsmPolicy";
export const getPimSsmPolicy: typeof import("./getPimSsmPolicy").getPimSsmPolicy = null as any;
export const getPimSsmPolicyOutput: typeof import("./getPimSsmPolicy").getPimSsmPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPimSsmPolicy","getPimSsmPolicyOutput"], () => require("./getPimSsmPolicy"));

export { GetPimSsmRangeArgs, GetPimSsmRangeResult, GetPimSsmRangeOutputArgs } from "./getPimSsmRange";
export const getPimSsmRange: typeof import("./getPimSsmRange").getPimSsmRange = null as any;
export const getPimSsmRangeOutput: typeof import("./getPimSsmRange").getPimSsmRangeOutput = null as any;
utilities.lazyLoad(exports, ["getPimSsmRange","getPimSsmRangeOutput"], () => require("./getPimSsmRange"));

export { GetPimStaticRpArgs, GetPimStaticRpResult, GetPimStaticRpOutputArgs } from "./getPimStaticRp";
export const getPimStaticRp: typeof import("./getPimStaticRp").getPimStaticRp = null as any;
export const getPimStaticRpOutput: typeof import("./getPimStaticRp").getPimStaticRpOutput = null as any;
utilities.lazyLoad(exports, ["getPimStaticRp","getPimStaticRpOutput"], () => require("./getPimStaticRp"));

export { GetPimStaticRpGroupListArgs, GetPimStaticRpGroupListResult, GetPimStaticRpGroupListOutputArgs } from "./getPimStaticRpGroupList";
export const getPimStaticRpGroupList: typeof import("./getPimStaticRpGroupList").getPimStaticRpGroupList = null as any;
export const getPimStaticRpGroupListOutput: typeof import("./getPimStaticRpGroupList").getPimStaticRpGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getPimStaticRpGroupList","getPimStaticRpGroupListOutput"], () => require("./getPimStaticRpGroupList"));

export { GetPimStaticRpPolicyArgs, GetPimStaticRpPolicyResult, GetPimStaticRpPolicyOutputArgs } from "./getPimStaticRpPolicy";
export const getPimStaticRpPolicy: typeof import("./getPimStaticRpPolicy").getPimStaticRpPolicy = null as any;
export const getPimStaticRpPolicyOutput: typeof import("./getPimStaticRpPolicy").getPimStaticRpPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPimStaticRpPolicy","getPimStaticRpPolicyOutput"], () => require("./getPimStaticRpPolicy"));

export { GetPimVrfArgs, GetPimVrfResult, GetPimVrfOutputArgs } from "./getPimVrf";
export const getPimVrf: typeof import("./getPimVrf").getPimVrf = null as any;
export const getPimVrfOutput: typeof import("./getPimVrf").getPimVrfOutput = null as any;
utilities.lazyLoad(exports, ["getPimVrf","getPimVrfOutput"], () => require("./getPimVrf"));

export { GetPortChannelInterfaceArgs, GetPortChannelInterfaceResult, GetPortChannelInterfaceOutputArgs } from "./getPortChannelInterface";
export const getPortChannelInterface: typeof import("./getPortChannelInterface").getPortChannelInterface = null as any;
export const getPortChannelInterfaceOutput: typeof import("./getPortChannelInterface").getPortChannelInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getPortChannelInterface","getPortChannelInterfaceOutput"], () => require("./getPortChannelInterface"));

export { GetPortChannelInterfaceMemberArgs, GetPortChannelInterfaceMemberResult, GetPortChannelInterfaceMemberOutputArgs } from "./getPortChannelInterfaceMember";
export const getPortChannelInterfaceMember: typeof import("./getPortChannelInterfaceMember").getPortChannelInterfaceMember = null as any;
export const getPortChannelInterfaceMemberOutput: typeof import("./getPortChannelInterfaceMember").getPortChannelInterfaceMemberOutput = null as any;
utilities.lazyLoad(exports, ["getPortChannelInterfaceMember","getPortChannelInterfaceMemberOutput"], () => require("./getPortChannelInterfaceMember"));

export { GetPortChannelInterfaceVrfArgs, GetPortChannelInterfaceVrfResult, GetPortChannelInterfaceVrfOutputArgs } from "./getPortChannelInterfaceVrf";
export const getPortChannelInterfaceVrf: typeof import("./getPortChannelInterfaceVrf").getPortChannelInterfaceVrf = null as any;
export const getPortChannelInterfaceVrfOutput: typeof import("./getPortChannelInterfaceVrf").getPortChannelInterfaceVrfOutput = null as any;
utilities.lazyLoad(exports, ["getPortChannelInterfaceVrf","getPortChannelInterfaceVrfOutput"], () => require("./getPortChannelInterfaceVrf"));

export { GetQueuingQosPolicyMapArgs, GetQueuingQosPolicyMapResult, GetQueuingQosPolicyMapOutputArgs } from "./getQueuingQosPolicyMap";
export const getQueuingQosPolicyMap: typeof import("./getQueuingQosPolicyMap").getQueuingQosPolicyMap = null as any;
export const getQueuingQosPolicyMapOutput: typeof import("./getQueuingQosPolicyMap").getQueuingQosPolicyMapOutput = null as any;
utilities.lazyLoad(exports, ["getQueuingQosPolicyMap","getQueuingQosPolicyMapOutput"], () => require("./getQueuingQosPolicyMap"));

export { GetQueuingQosPolicyMapMatchClassMapArgs, GetQueuingQosPolicyMapMatchClassMapResult, GetQueuingQosPolicyMapMatchClassMapOutputArgs } from "./getQueuingQosPolicyMapMatchClassMap";
export const getQueuingQosPolicyMapMatchClassMap: typeof import("./getQueuingQosPolicyMapMatchClassMap").getQueuingQosPolicyMapMatchClassMap = null as any;
export const getQueuingQosPolicyMapMatchClassMapOutput: typeof import("./getQueuingQosPolicyMapMatchClassMap").getQueuingQosPolicyMapMatchClassMapOutput = null as any;
utilities.lazyLoad(exports, ["getQueuingQosPolicyMapMatchClassMap","getQueuingQosPolicyMapMatchClassMapOutput"], () => require("./getQueuingQosPolicyMapMatchClassMap"));

export { GetQueuingQosPolicyMapMatchClassMapPriorityArgs, GetQueuingQosPolicyMapMatchClassMapPriorityResult, GetQueuingQosPolicyMapMatchClassMapPriorityOutputArgs } from "./getQueuingQosPolicyMapMatchClassMapPriority";
export const getQueuingQosPolicyMapMatchClassMapPriority: typeof import("./getQueuingQosPolicyMapMatchClassMapPriority").getQueuingQosPolicyMapMatchClassMapPriority = null as any;
export const getQueuingQosPolicyMapMatchClassMapPriorityOutput: typeof import("./getQueuingQosPolicyMapMatchClassMapPriority").getQueuingQosPolicyMapMatchClassMapPriorityOutput = null as any;
utilities.lazyLoad(exports, ["getQueuingQosPolicyMapMatchClassMapPriority","getQueuingQosPolicyMapMatchClassMapPriorityOutput"], () => require("./getQueuingQosPolicyMapMatchClassMapPriority"));

export { GetQueuingQosPolicyMapMatchClassMapRemainingBandwidthArgs, GetQueuingQosPolicyMapMatchClassMapRemainingBandwidthResult, GetQueuingQosPolicyMapMatchClassMapRemainingBandwidthOutputArgs } from "./getQueuingQosPolicyMapMatchClassMapRemainingBandwidth";
export const getQueuingQosPolicyMapMatchClassMapRemainingBandwidth: typeof import("./getQueuingQosPolicyMapMatchClassMapRemainingBandwidth").getQueuingQosPolicyMapMatchClassMapRemainingBandwidth = null as any;
export const getQueuingQosPolicyMapMatchClassMapRemainingBandwidthOutput: typeof import("./getQueuingQosPolicyMapMatchClassMapRemainingBandwidth").getQueuingQosPolicyMapMatchClassMapRemainingBandwidthOutput = null as any;
utilities.lazyLoad(exports, ["getQueuingQosPolicyMapMatchClassMapRemainingBandwidth","getQueuingQosPolicyMapMatchClassMapRemainingBandwidthOutput"], () => require("./getQueuingQosPolicyMapMatchClassMapRemainingBandwidth"));

export { GetQueuingQosPolicySystemOutArgs, GetQueuingQosPolicySystemOutResult, GetQueuingQosPolicySystemOutOutputArgs } from "./getQueuingQosPolicySystemOut";
export const getQueuingQosPolicySystemOut: typeof import("./getQueuingQosPolicySystemOut").getQueuingQosPolicySystemOut = null as any;
export const getQueuingQosPolicySystemOutOutput: typeof import("./getQueuingQosPolicySystemOut").getQueuingQosPolicySystemOutOutput = null as any;
utilities.lazyLoad(exports, ["getQueuingQosPolicySystemOut","getQueuingQosPolicySystemOutOutput"], () => require("./getQueuingQosPolicySystemOut"));

export { GetQueuingQosPolicySystemOutPolicyMapArgs, GetQueuingQosPolicySystemOutPolicyMapResult, GetQueuingQosPolicySystemOutPolicyMapOutputArgs } from "./getQueuingQosPolicySystemOutPolicyMap";
export const getQueuingQosPolicySystemOutPolicyMap: typeof import("./getQueuingQosPolicySystemOutPolicyMap").getQueuingQosPolicySystemOutPolicyMap = null as any;
export const getQueuingQosPolicySystemOutPolicyMapOutput: typeof import("./getQueuingQosPolicySystemOutPolicyMap").getQueuingQosPolicySystemOutPolicyMapOutput = null as any;
utilities.lazyLoad(exports, ["getQueuingQosPolicySystemOutPolicyMap","getQueuingQosPolicySystemOutPolicyMapOutput"], () => require("./getQueuingQosPolicySystemOutPolicyMap"));

export { GetRestArgs, GetRestResult, GetRestOutputArgs } from "./getRest";
export const getRest: typeof import("./getRest").getRest = null as any;
export const getRestOutput: typeof import("./getRest").getRestOutput = null as any;
utilities.lazyLoad(exports, ["getRest","getRestOutput"], () => require("./getRest"));

export { GetRouteMapRuleArgs, GetRouteMapRuleResult, GetRouteMapRuleOutputArgs } from "./getRouteMapRule";
export const getRouteMapRule: typeof import("./getRouteMapRule").getRouteMapRule = null as any;
export const getRouteMapRuleOutput: typeof import("./getRouteMapRule").getRouteMapRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRouteMapRule","getRouteMapRuleOutput"], () => require("./getRouteMapRule"));

export { GetRouteMapRuleEntryArgs, GetRouteMapRuleEntryResult, GetRouteMapRuleEntryOutputArgs } from "./getRouteMapRuleEntry";
export const getRouteMapRuleEntry: typeof import("./getRouteMapRuleEntry").getRouteMapRuleEntry = null as any;
export const getRouteMapRuleEntryOutput: typeof import("./getRouteMapRuleEntry").getRouteMapRuleEntryOutput = null as any;
utilities.lazyLoad(exports, ["getRouteMapRuleEntry","getRouteMapRuleEntryOutput"], () => require("./getRouteMapRuleEntry"));

export { GetRouteMapRuleEntryMatchRouteArgs, GetRouteMapRuleEntryMatchRouteResult, GetRouteMapRuleEntryMatchRouteOutputArgs } from "./getRouteMapRuleEntryMatchRoute";
export const getRouteMapRuleEntryMatchRoute: typeof import("./getRouteMapRuleEntryMatchRoute").getRouteMapRuleEntryMatchRoute = null as any;
export const getRouteMapRuleEntryMatchRouteOutput: typeof import("./getRouteMapRuleEntryMatchRoute").getRouteMapRuleEntryMatchRouteOutput = null as any;
utilities.lazyLoad(exports, ["getRouteMapRuleEntryMatchRoute","getRouteMapRuleEntryMatchRouteOutput"], () => require("./getRouteMapRuleEntryMatchRoute"));

export { GetRouteMapRuleEntryMatchRoutePrefixListArgs, GetRouteMapRuleEntryMatchRoutePrefixListResult, GetRouteMapRuleEntryMatchRoutePrefixListOutputArgs } from "./getRouteMapRuleEntryMatchRoutePrefixList";
export const getRouteMapRuleEntryMatchRoutePrefixList: typeof import("./getRouteMapRuleEntryMatchRoutePrefixList").getRouteMapRuleEntryMatchRoutePrefixList = null as any;
export const getRouteMapRuleEntryMatchRoutePrefixListOutput: typeof import("./getRouteMapRuleEntryMatchRoutePrefixList").getRouteMapRuleEntryMatchRoutePrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getRouteMapRuleEntryMatchRoutePrefixList","getRouteMapRuleEntryMatchRoutePrefixListOutput"], () => require("./getRouteMapRuleEntryMatchRoutePrefixList"));

export { GetRouteMapRuleEntrySetRegularCommunityArgs, GetRouteMapRuleEntrySetRegularCommunityResult, GetRouteMapRuleEntrySetRegularCommunityOutputArgs } from "./getRouteMapRuleEntrySetRegularCommunity";
export const getRouteMapRuleEntrySetRegularCommunity: typeof import("./getRouteMapRuleEntrySetRegularCommunity").getRouteMapRuleEntrySetRegularCommunity = null as any;
export const getRouteMapRuleEntrySetRegularCommunityOutput: typeof import("./getRouteMapRuleEntrySetRegularCommunity").getRouteMapRuleEntrySetRegularCommunityOutput = null as any;
utilities.lazyLoad(exports, ["getRouteMapRuleEntrySetRegularCommunity","getRouteMapRuleEntrySetRegularCommunityOutput"], () => require("./getRouteMapRuleEntrySetRegularCommunity"));

export { GetRouteMapRuleEntrySetRegularCommunityItemArgs, GetRouteMapRuleEntrySetRegularCommunityItemResult, GetRouteMapRuleEntrySetRegularCommunityItemOutputArgs } from "./getRouteMapRuleEntrySetRegularCommunityItem";
export const getRouteMapRuleEntrySetRegularCommunityItem: typeof import("./getRouteMapRuleEntrySetRegularCommunityItem").getRouteMapRuleEntrySetRegularCommunityItem = null as any;
export const getRouteMapRuleEntrySetRegularCommunityItemOutput: typeof import("./getRouteMapRuleEntrySetRegularCommunityItem").getRouteMapRuleEntrySetRegularCommunityItemOutput = null as any;
utilities.lazyLoad(exports, ["getRouteMapRuleEntrySetRegularCommunityItem","getRouteMapRuleEntrySetRegularCommunityItemOutput"], () => require("./getRouteMapRuleEntrySetRegularCommunityItem"));

export { GetSpanningTreeInterfaceArgs, GetSpanningTreeInterfaceResult, GetSpanningTreeInterfaceOutputArgs } from "./getSpanningTreeInterface";
export const getSpanningTreeInterface: typeof import("./getSpanningTreeInterface").getSpanningTreeInterface = null as any;
export const getSpanningTreeInterfaceOutput: typeof import("./getSpanningTreeInterface").getSpanningTreeInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getSpanningTreeInterface","getSpanningTreeInterfaceOutput"], () => require("./getSpanningTreeInterface"));

export { GetSubinterfaceArgs, GetSubinterfaceResult, GetSubinterfaceOutputArgs } from "./getSubinterface";
export const getSubinterface: typeof import("./getSubinterface").getSubinterface = null as any;
export const getSubinterfaceOutput: typeof import("./getSubinterface").getSubinterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getSubinterface","getSubinterfaceOutput"], () => require("./getSubinterface"));

export { GetSubinterfaceVrfArgs, GetSubinterfaceVrfResult, GetSubinterfaceVrfOutputArgs } from "./getSubinterfaceVrf";
export const getSubinterfaceVrf: typeof import("./getSubinterfaceVrf").getSubinterfaceVrf = null as any;
export const getSubinterfaceVrfOutput: typeof import("./getSubinterfaceVrf").getSubinterfaceVrfOutput = null as any;
utilities.lazyLoad(exports, ["getSubinterfaceVrf","getSubinterfaceVrfOutput"], () => require("./getSubinterfaceVrf"));

export { GetSviInterfaceArgs, GetSviInterfaceResult, GetSviInterfaceOutputArgs } from "./getSviInterface";
export const getSviInterface: typeof import("./getSviInterface").getSviInterface = null as any;
export const getSviInterfaceOutput: typeof import("./getSviInterface").getSviInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getSviInterface","getSviInterfaceOutput"], () => require("./getSviInterface"));

export { GetSviInterfaceVrfArgs, GetSviInterfaceVrfResult, GetSviInterfaceVrfOutputArgs } from "./getSviInterfaceVrf";
export const getSviInterfaceVrf: typeof import("./getSviInterfaceVrf").getSviInterfaceVrf = null as any;
export const getSviInterfaceVrfOutput: typeof import("./getSviInterfaceVrf").getSviInterfaceVrfOutput = null as any;
utilities.lazyLoad(exports, ["getSviInterfaceVrf","getSviInterfaceVrfOutput"], () => require("./getSviInterfaceVrf"));

export { GetSystemArgs, GetSystemResult, GetSystemOutputArgs } from "./getSystem";
export const getSystem: typeof import("./getSystem").getSystem = null as any;
export const getSystemOutput: typeof import("./getSystem").getSystemOutput = null as any;
utilities.lazyLoad(exports, ["getSystem","getSystemOutput"], () => require("./getSystem"));

export { GetVpcDomainArgs, GetVpcDomainResult, GetVpcDomainOutputArgs } from "./getVpcDomain";
export const getVpcDomain: typeof import("./getVpcDomain").getVpcDomain = null as any;
export const getVpcDomainOutput: typeof import("./getVpcDomain").getVpcDomainOutput = null as any;
utilities.lazyLoad(exports, ["getVpcDomain","getVpcDomainOutput"], () => require("./getVpcDomain"));

export { GetVpcInstanceArgs, GetVpcInstanceResult, GetVpcInstanceOutputArgs } from "./getVpcInstance";
export const getVpcInstance: typeof import("./getVpcInstance").getVpcInstance = null as any;
export const getVpcInstanceOutput: typeof import("./getVpcInstance").getVpcInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getVpcInstance","getVpcInstanceOutput"], () => require("./getVpcInstance"));

export { GetVpcInterfaceArgs, GetVpcInterfaceResult, GetVpcInterfaceOutputArgs } from "./getVpcInterface";
export const getVpcInterface: typeof import("./getVpcInterface").getVpcInterface = null as any;
export const getVpcInterfaceOutput: typeof import("./getVpcInterface").getVpcInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getVpcInterface","getVpcInterfaceOutput"], () => require("./getVpcInterface"));

export { GetVpcKeepaliveArgs, GetVpcKeepaliveResult, GetVpcKeepaliveOutputArgs } from "./getVpcKeepalive";
export const getVpcKeepalive: typeof import("./getVpcKeepalive").getVpcKeepalive = null as any;
export const getVpcKeepaliveOutput: typeof import("./getVpcKeepalive").getVpcKeepaliveOutput = null as any;
utilities.lazyLoad(exports, ["getVpcKeepalive","getVpcKeepaliveOutput"], () => require("./getVpcKeepalive"));

export { GetVpcPeerlinkArgs, GetVpcPeerlinkResult, GetVpcPeerlinkOutputArgs } from "./getVpcPeerlink";
export const getVpcPeerlink: typeof import("./getVpcPeerlink").getVpcPeerlink = null as any;
export const getVpcPeerlinkOutput: typeof import("./getVpcPeerlink").getVpcPeerlinkOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPeerlink","getVpcPeerlinkOutput"], () => require("./getVpcPeerlink"));

export { GetVrfArgs, GetVrfResult, GetVrfOutputArgs } from "./getVrf";
export const getVrf: typeof import("./getVrf").getVrf = null as any;
export const getVrfOutput: typeof import("./getVrf").getVrfOutput = null as any;
utilities.lazyLoad(exports, ["getVrf","getVrfOutput"], () => require("./getVrf"));

export { GetVrfAddressFamilyArgs, GetVrfAddressFamilyResult, GetVrfAddressFamilyOutputArgs } from "./getVrfAddressFamily";
export const getVrfAddressFamily: typeof import("./getVrfAddressFamily").getVrfAddressFamily = null as any;
export const getVrfAddressFamilyOutput: typeof import("./getVrfAddressFamily").getVrfAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getVrfAddressFamily","getVrfAddressFamilyOutput"], () => require("./getVrfAddressFamily"));

export { GetVrfRouteTargetArgs, GetVrfRouteTargetResult, GetVrfRouteTargetOutputArgs } from "./getVrfRouteTarget";
export const getVrfRouteTarget: typeof import("./getVrfRouteTarget").getVrfRouteTarget = null as any;
export const getVrfRouteTargetOutput: typeof import("./getVrfRouteTarget").getVrfRouteTargetOutput = null as any;
utilities.lazyLoad(exports, ["getVrfRouteTarget","getVrfRouteTargetOutput"], () => require("./getVrfRouteTarget"));

export { GetVrfRouteTargetAddressFamilyArgs, GetVrfRouteTargetAddressFamilyResult, GetVrfRouteTargetAddressFamilyOutputArgs } from "./getVrfRouteTargetAddressFamily";
export const getVrfRouteTargetAddressFamily: typeof import("./getVrfRouteTargetAddressFamily").getVrfRouteTargetAddressFamily = null as any;
export const getVrfRouteTargetAddressFamilyOutput: typeof import("./getVrfRouteTargetAddressFamily").getVrfRouteTargetAddressFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getVrfRouteTargetAddressFamily","getVrfRouteTargetAddressFamilyOutput"], () => require("./getVrfRouteTargetAddressFamily"));

export { GetVrfRouteTargetDirectionArgs, GetVrfRouteTargetDirectionResult, GetVrfRouteTargetDirectionOutputArgs } from "./getVrfRouteTargetDirection";
export const getVrfRouteTargetDirection: typeof import("./getVrfRouteTargetDirection").getVrfRouteTargetDirection = null as any;
export const getVrfRouteTargetDirectionOutput: typeof import("./getVrfRouteTargetDirection").getVrfRouteTargetDirectionOutput = null as any;
utilities.lazyLoad(exports, ["getVrfRouteTargetDirection","getVrfRouteTargetDirectionOutput"], () => require("./getVrfRouteTargetDirection"));

export { GetVrfRoutingArgs, GetVrfRoutingResult, GetVrfRoutingOutputArgs } from "./getVrfRouting";
export const getVrfRouting: typeof import("./getVrfRouting").getVrfRouting = null as any;
export const getVrfRoutingOutput: typeof import("./getVrfRouting").getVrfRoutingOutput = null as any;
utilities.lazyLoad(exports, ["getVrfRouting","getVrfRoutingOutput"], () => require("./getVrfRouting"));

export { HmmArgs, HmmState } from "./hmm";
export type Hmm = import("./hmm").Hmm;
export const Hmm: typeof import("./hmm").Hmm = null as any;
utilities.lazyLoad(exports, ["Hmm"], () => require("./hmm"));

export { HmmInstanceArgs, HmmInstanceState } from "./hmmInstance";
export type HmmInstance = import("./hmmInstance").HmmInstance;
export const HmmInstance: typeof import("./hmmInstance").HmmInstance = null as any;
utilities.lazyLoad(exports, ["HmmInstance"], () => require("./hmmInstance"));

export { HmmInterfaceArgs, HmmInterfaceState } from "./hmmInterface";
export type HmmInterface = import("./hmmInterface").HmmInterface;
export const HmmInterface: typeof import("./hmmInterface").HmmInterface = null as any;
utilities.lazyLoad(exports, ["HmmInterface"], () => require("./hmmInterface"));

export { Ipv4AccessListArgs, Ipv4AccessListState } from "./ipv4AccessList";
export type Ipv4AccessList = import("./ipv4AccessList").Ipv4AccessList;
export const Ipv4AccessList: typeof import("./ipv4AccessList").Ipv4AccessList = null as any;
utilities.lazyLoad(exports, ["Ipv4AccessList"], () => require("./ipv4AccessList"));

export { Ipv4AccessListEntryArgs, Ipv4AccessListEntryState } from "./ipv4AccessListEntry";
export type Ipv4AccessListEntry = import("./ipv4AccessListEntry").Ipv4AccessListEntry;
export const Ipv4AccessListEntry: typeof import("./ipv4AccessListEntry").Ipv4AccessListEntry = null as any;
utilities.lazyLoad(exports, ["Ipv4AccessListEntry"], () => require("./ipv4AccessListEntry"));

export { Ipv4AccessListPolicyEgressInterfaceArgs, Ipv4AccessListPolicyEgressInterfaceState } from "./ipv4AccessListPolicyEgressInterface";
export type Ipv4AccessListPolicyEgressInterface = import("./ipv4AccessListPolicyEgressInterface").Ipv4AccessListPolicyEgressInterface;
export const Ipv4AccessListPolicyEgressInterface: typeof import("./ipv4AccessListPolicyEgressInterface").Ipv4AccessListPolicyEgressInterface = null as any;
utilities.lazyLoad(exports, ["Ipv4AccessListPolicyEgressInterface"], () => require("./ipv4AccessListPolicyEgressInterface"));

export { Ipv4AccessListPolicyIngressInterfaceArgs, Ipv4AccessListPolicyIngressInterfaceState } from "./ipv4AccessListPolicyIngressInterface";
export type Ipv4AccessListPolicyIngressInterface = import("./ipv4AccessListPolicyIngressInterface").Ipv4AccessListPolicyIngressInterface;
export const Ipv4AccessListPolicyIngressInterface: typeof import("./ipv4AccessListPolicyIngressInterface").Ipv4AccessListPolicyIngressInterface = null as any;
utilities.lazyLoad(exports, ["Ipv4AccessListPolicyIngressInterface"], () => require("./ipv4AccessListPolicyIngressInterface"));

export { Ipv4InterfaceArgs, Ipv4InterfaceState } from "./ipv4Interface";
export type Ipv4Interface = import("./ipv4Interface").Ipv4Interface;
export const Ipv4Interface: typeof import("./ipv4Interface").Ipv4Interface = null as any;
utilities.lazyLoad(exports, ["Ipv4Interface"], () => require("./ipv4Interface"));

export { Ipv4InterfaceAddressArgs, Ipv4InterfaceAddressState } from "./ipv4InterfaceAddress";
export type Ipv4InterfaceAddress = import("./ipv4InterfaceAddress").Ipv4InterfaceAddress;
export const Ipv4InterfaceAddress: typeof import("./ipv4InterfaceAddress").Ipv4InterfaceAddress = null as any;
utilities.lazyLoad(exports, ["Ipv4InterfaceAddress"], () => require("./ipv4InterfaceAddress"));

export { Ipv4PrefixListRuleArgs, Ipv4PrefixListRuleState } from "./ipv4PrefixListRule";
export type Ipv4PrefixListRule = import("./ipv4PrefixListRule").Ipv4PrefixListRule;
export const Ipv4PrefixListRule: typeof import("./ipv4PrefixListRule").Ipv4PrefixListRule = null as any;
utilities.lazyLoad(exports, ["Ipv4PrefixListRule"], () => require("./ipv4PrefixListRule"));

export { Ipv4PrefixListRuleEntryArgs, Ipv4PrefixListRuleEntryState } from "./ipv4PrefixListRuleEntry";
export type Ipv4PrefixListRuleEntry = import("./ipv4PrefixListRuleEntry").Ipv4PrefixListRuleEntry;
export const Ipv4PrefixListRuleEntry: typeof import("./ipv4PrefixListRuleEntry").Ipv4PrefixListRuleEntry = null as any;
utilities.lazyLoad(exports, ["Ipv4PrefixListRuleEntry"], () => require("./ipv4PrefixListRuleEntry"));

export { Ipv4StaticRouteArgs, Ipv4StaticRouteState } from "./ipv4StaticRoute";
export type Ipv4StaticRoute = import("./ipv4StaticRoute").Ipv4StaticRoute;
export const Ipv4StaticRoute: typeof import("./ipv4StaticRoute").Ipv4StaticRoute = null as any;
utilities.lazyLoad(exports, ["Ipv4StaticRoute"], () => require("./ipv4StaticRoute"));

export { Ipv4VrfArgs, Ipv4VrfState } from "./ipv4Vrf";
export type Ipv4Vrf = import("./ipv4Vrf").Ipv4Vrf;
export const Ipv4Vrf: typeof import("./ipv4Vrf").Ipv4Vrf = null as any;
utilities.lazyLoad(exports, ["Ipv4Vrf"], () => require("./ipv4Vrf"));

export { IsisArgs, IsisState } from "./isis";
export type Isis = import("./isis").Isis;
export const Isis: typeof import("./isis").Isis = null as any;
utilities.lazyLoad(exports, ["Isis"], () => require("./isis"));

export { IsisInstanceArgs, IsisInstanceState } from "./isisInstance";
export type IsisInstance = import("./isisInstance").IsisInstance;
export const IsisInstance: typeof import("./isisInstance").IsisInstance = null as any;
utilities.lazyLoad(exports, ["IsisInstance"], () => require("./isisInstance"));

export { IsisInterfaceArgs, IsisInterfaceState } from "./isisInterface";
export type IsisInterface = import("./isisInterface").IsisInterface;
export const IsisInterface: typeof import("./isisInterface").IsisInterface = null as any;
utilities.lazyLoad(exports, ["IsisInterface"], () => require("./isisInterface"));

export { IsisVrfArgs, IsisVrfState } from "./isisVrf";
export type IsisVrf = import("./isisVrf").IsisVrf;
export const IsisVrf: typeof import("./isisVrf").IsisVrf = null as any;
utilities.lazyLoad(exports, ["IsisVrf"], () => require("./isisVrf"));

export { LoopbackInterfaceArgs, LoopbackInterfaceState } from "./loopbackInterface";
export type LoopbackInterface = import("./loopbackInterface").LoopbackInterface;
export const LoopbackInterface: typeof import("./loopbackInterface").LoopbackInterface = null as any;
utilities.lazyLoad(exports, ["LoopbackInterface"], () => require("./loopbackInterface"));

export { LoopbackInterfaceVrfArgs, LoopbackInterfaceVrfState } from "./loopbackInterfaceVrf";
export type LoopbackInterfaceVrf = import("./loopbackInterfaceVrf").LoopbackInterfaceVrf;
export const LoopbackInterfaceVrf: typeof import("./loopbackInterfaceVrf").LoopbackInterfaceVrf = null as any;
utilities.lazyLoad(exports, ["LoopbackInterfaceVrf"], () => require("./loopbackInterfaceVrf"));

export { NtpServerArgs, NtpServerState } from "./ntpServer";
export type NtpServer = import("./ntpServer").NtpServer;
export const NtpServer: typeof import("./ntpServer").NtpServer = null as any;
utilities.lazyLoad(exports, ["NtpServer"], () => require("./ntpServer"));

export { NveInterfaceArgs, NveInterfaceState } from "./nveInterface";
export type NveInterface = import("./nveInterface").NveInterface;
export const NveInterface: typeof import("./nveInterface").NveInterface = null as any;
utilities.lazyLoad(exports, ["NveInterface"], () => require("./nveInterface"));

export { NveVniArgs, NveVniState } from "./nveVni";
export type NveVni = import("./nveVni").NveVni;
export const NveVni: typeof import("./nveVni").NveVni = null as any;
utilities.lazyLoad(exports, ["NveVni"], () => require("./nveVni"));

export { NveVniContainerArgs, NveVniContainerState } from "./nveVniContainer";
export type NveVniContainer = import("./nveVniContainer").NveVniContainer;
export const NveVniContainer: typeof import("./nveVniContainer").NveVniContainer = null as any;
utilities.lazyLoad(exports, ["NveVniContainer"], () => require("./nveVniContainer"));

export { NveVniIngressReplicationArgs, NveVniIngressReplicationState } from "./nveVniIngressReplication";
export type NveVniIngressReplication = import("./nveVniIngressReplication").NveVniIngressReplication;
export const NveVniIngressReplication: typeof import("./nveVniIngressReplication").NveVniIngressReplication = null as any;
utilities.lazyLoad(exports, ["NveVniIngressReplication"], () => require("./nveVniIngressReplication"));

export { OspfArgs, OspfState } from "./ospf";
export type Ospf = import("./ospf").Ospf;
export const Ospf: typeof import("./ospf").Ospf = null as any;
utilities.lazyLoad(exports, ["Ospf"], () => require("./ospf"));

export { OspfAreaArgs, OspfAreaState } from "./ospfArea";
export type OspfArea = import("./ospfArea").OspfArea;
export const OspfArea: typeof import("./ospfArea").OspfArea = null as any;
utilities.lazyLoad(exports, ["OspfArea"], () => require("./ospfArea"));

export { OspfAuthenticationArgs, OspfAuthenticationState } from "./ospfAuthentication";
export type OspfAuthentication = import("./ospfAuthentication").OspfAuthentication;
export const OspfAuthentication: typeof import("./ospfAuthentication").OspfAuthentication = null as any;
utilities.lazyLoad(exports, ["OspfAuthentication"], () => require("./ospfAuthentication"));

export { OspfInstanceArgs, OspfInstanceState } from "./ospfInstance";
export type OspfInstance = import("./ospfInstance").OspfInstance;
export const OspfInstance: typeof import("./ospfInstance").OspfInstance = null as any;
utilities.lazyLoad(exports, ["OspfInstance"], () => require("./ospfInstance"));

export { OspfInterfaceArgs, OspfInterfaceState } from "./ospfInterface";
export type OspfInterface = import("./ospfInterface").OspfInterface;
export const OspfInterface: typeof import("./ospfInterface").OspfInterface = null as any;
utilities.lazyLoad(exports, ["OspfInterface"], () => require("./ospfInterface"));

export { OspfVrfArgs, OspfVrfState } from "./ospfVrf";
export type OspfVrf = import("./ospfVrf").OspfVrf;
export const OspfVrf: typeof import("./ospfVrf").OspfVrf = null as any;
utilities.lazyLoad(exports, ["OspfVrf"], () => require("./ospfVrf"));

export { PhysicalInterfaceArgs, PhysicalInterfaceState } from "./physicalInterface";
export type PhysicalInterface = import("./physicalInterface").PhysicalInterface;
export const PhysicalInterface: typeof import("./physicalInterface").PhysicalInterface = null as any;
utilities.lazyLoad(exports, ["PhysicalInterface"], () => require("./physicalInterface"));

export { PhysicalInterfaceVrfArgs, PhysicalInterfaceVrfState } from "./physicalInterfaceVrf";
export type PhysicalInterfaceVrf = import("./physicalInterfaceVrf").PhysicalInterfaceVrf;
export const PhysicalInterfaceVrf: typeof import("./physicalInterfaceVrf").PhysicalInterfaceVrf = null as any;
utilities.lazyLoad(exports, ["PhysicalInterfaceVrf"], () => require("./physicalInterfaceVrf"));

export { PimArgs, PimState } from "./pim";
export type Pim = import("./pim").Pim;
export const Pim: typeof import("./pim").Pim = null as any;
utilities.lazyLoad(exports, ["Pim"], () => require("./pim"));

export { PimAnycastRpArgs, PimAnycastRpState } from "./pimAnycastRp";
export type PimAnycastRp = import("./pimAnycastRp").PimAnycastRp;
export const PimAnycastRp: typeof import("./pimAnycastRp").PimAnycastRp = null as any;
utilities.lazyLoad(exports, ["PimAnycastRp"], () => require("./pimAnycastRp"));

export { PimAnycastRpPeerArgs, PimAnycastRpPeerState } from "./pimAnycastRpPeer";
export type PimAnycastRpPeer = import("./pimAnycastRpPeer").PimAnycastRpPeer;
export const PimAnycastRpPeer: typeof import("./pimAnycastRpPeer").PimAnycastRpPeer = null as any;
utilities.lazyLoad(exports, ["PimAnycastRpPeer"], () => require("./pimAnycastRpPeer"));

export { PimInstanceArgs, PimInstanceState } from "./pimInstance";
export type PimInstance = import("./pimInstance").PimInstance;
export const PimInstance: typeof import("./pimInstance").PimInstance = null as any;
utilities.lazyLoad(exports, ["PimInstance"], () => require("./pimInstance"));

export { PimInterfaceArgs, PimInterfaceState } from "./pimInterface";
export type PimInterface = import("./pimInterface").PimInterface;
export const PimInterface: typeof import("./pimInterface").PimInterface = null as any;
utilities.lazyLoad(exports, ["PimInterface"], () => require("./pimInterface"));

export { PimSsmPolicyArgs, PimSsmPolicyState } from "./pimSsmPolicy";
export type PimSsmPolicy = import("./pimSsmPolicy").PimSsmPolicy;
export const PimSsmPolicy: typeof import("./pimSsmPolicy").PimSsmPolicy = null as any;
utilities.lazyLoad(exports, ["PimSsmPolicy"], () => require("./pimSsmPolicy"));

export { PimSsmRangeArgs, PimSsmRangeState } from "./pimSsmRange";
export type PimSsmRange = import("./pimSsmRange").PimSsmRange;
export const PimSsmRange: typeof import("./pimSsmRange").PimSsmRange = null as any;
utilities.lazyLoad(exports, ["PimSsmRange"], () => require("./pimSsmRange"));

export { PimStaticRpArgs, PimStaticRpState } from "./pimStaticRp";
export type PimStaticRp = import("./pimStaticRp").PimStaticRp;
export const PimStaticRp: typeof import("./pimStaticRp").PimStaticRp = null as any;
utilities.lazyLoad(exports, ["PimStaticRp"], () => require("./pimStaticRp"));

export { PimStaticRpGroupListArgs, PimStaticRpGroupListState } from "./pimStaticRpGroupList";
export type PimStaticRpGroupList = import("./pimStaticRpGroupList").PimStaticRpGroupList;
export const PimStaticRpGroupList: typeof import("./pimStaticRpGroupList").PimStaticRpGroupList = null as any;
utilities.lazyLoad(exports, ["PimStaticRpGroupList"], () => require("./pimStaticRpGroupList"));

export { PimStaticRpPolicyArgs, PimStaticRpPolicyState } from "./pimStaticRpPolicy";
export type PimStaticRpPolicy = import("./pimStaticRpPolicy").PimStaticRpPolicy;
export const PimStaticRpPolicy: typeof import("./pimStaticRpPolicy").PimStaticRpPolicy = null as any;
utilities.lazyLoad(exports, ["PimStaticRpPolicy"], () => require("./pimStaticRpPolicy"));

export { PimVrfArgs, PimVrfState } from "./pimVrf";
export type PimVrf = import("./pimVrf").PimVrf;
export const PimVrf: typeof import("./pimVrf").PimVrf = null as any;
utilities.lazyLoad(exports, ["PimVrf"], () => require("./pimVrf"));

export { PortChannelInterfaceArgs, PortChannelInterfaceState } from "./portChannelInterface";
export type PortChannelInterface = import("./portChannelInterface").PortChannelInterface;
export const PortChannelInterface: typeof import("./portChannelInterface").PortChannelInterface = null as any;
utilities.lazyLoad(exports, ["PortChannelInterface"], () => require("./portChannelInterface"));

export { PortChannelInterfaceMemberArgs, PortChannelInterfaceMemberState } from "./portChannelInterfaceMember";
export type PortChannelInterfaceMember = import("./portChannelInterfaceMember").PortChannelInterfaceMember;
export const PortChannelInterfaceMember: typeof import("./portChannelInterfaceMember").PortChannelInterfaceMember = null as any;
utilities.lazyLoad(exports, ["PortChannelInterfaceMember"], () => require("./portChannelInterfaceMember"));

export { PortChannelInterfaceVrfArgs, PortChannelInterfaceVrfState } from "./portChannelInterfaceVrf";
export type PortChannelInterfaceVrf = import("./portChannelInterfaceVrf").PortChannelInterfaceVrf;
export const PortChannelInterfaceVrf: typeof import("./portChannelInterfaceVrf").PortChannelInterfaceVrf = null as any;
utilities.lazyLoad(exports, ["PortChannelInterfaceVrf"], () => require("./portChannelInterfaceVrf"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QueuingQosPolicyMapArgs, QueuingQosPolicyMapState } from "./queuingQosPolicyMap";
export type QueuingQosPolicyMap = import("./queuingQosPolicyMap").QueuingQosPolicyMap;
export const QueuingQosPolicyMap: typeof import("./queuingQosPolicyMap").QueuingQosPolicyMap = null as any;
utilities.lazyLoad(exports, ["QueuingQosPolicyMap"], () => require("./queuingQosPolicyMap"));

export { QueuingQosPolicyMapMatchClassMapArgs, QueuingQosPolicyMapMatchClassMapState } from "./queuingQosPolicyMapMatchClassMap";
export type QueuingQosPolicyMapMatchClassMap = import("./queuingQosPolicyMapMatchClassMap").QueuingQosPolicyMapMatchClassMap;
export const QueuingQosPolicyMapMatchClassMap: typeof import("./queuingQosPolicyMapMatchClassMap").QueuingQosPolicyMapMatchClassMap = null as any;
utilities.lazyLoad(exports, ["QueuingQosPolicyMapMatchClassMap"], () => require("./queuingQosPolicyMapMatchClassMap"));

export { QueuingQosPolicyMapMatchClassMapPriorityArgs, QueuingQosPolicyMapMatchClassMapPriorityState } from "./queuingQosPolicyMapMatchClassMapPriority";
export type QueuingQosPolicyMapMatchClassMapPriority = import("./queuingQosPolicyMapMatchClassMapPriority").QueuingQosPolicyMapMatchClassMapPriority;
export const QueuingQosPolicyMapMatchClassMapPriority: typeof import("./queuingQosPolicyMapMatchClassMapPriority").QueuingQosPolicyMapMatchClassMapPriority = null as any;
utilities.lazyLoad(exports, ["QueuingQosPolicyMapMatchClassMapPriority"], () => require("./queuingQosPolicyMapMatchClassMapPriority"));

export { QueuingQosPolicyMapMatchClassMapRemainingBandwidthArgs, QueuingQosPolicyMapMatchClassMapRemainingBandwidthState } from "./queuingQosPolicyMapMatchClassMapRemainingBandwidth";
export type QueuingQosPolicyMapMatchClassMapRemainingBandwidth = import("./queuingQosPolicyMapMatchClassMapRemainingBandwidth").QueuingQosPolicyMapMatchClassMapRemainingBandwidth;
export const QueuingQosPolicyMapMatchClassMapRemainingBandwidth: typeof import("./queuingQosPolicyMapMatchClassMapRemainingBandwidth").QueuingQosPolicyMapMatchClassMapRemainingBandwidth = null as any;
utilities.lazyLoad(exports, ["QueuingQosPolicyMapMatchClassMapRemainingBandwidth"], () => require("./queuingQosPolicyMapMatchClassMapRemainingBandwidth"));

export { QueuingQosPolicySystemOutArgs, QueuingQosPolicySystemOutState } from "./queuingQosPolicySystemOut";
export type QueuingQosPolicySystemOut = import("./queuingQosPolicySystemOut").QueuingQosPolicySystemOut;
export const QueuingQosPolicySystemOut: typeof import("./queuingQosPolicySystemOut").QueuingQosPolicySystemOut = null as any;
utilities.lazyLoad(exports, ["QueuingQosPolicySystemOut"], () => require("./queuingQosPolicySystemOut"));

export { QueuingQosPolicySystemOutPolicyMapArgs, QueuingQosPolicySystemOutPolicyMapState } from "./queuingQosPolicySystemOutPolicyMap";
export type QueuingQosPolicySystemOutPolicyMap = import("./queuingQosPolicySystemOutPolicyMap").QueuingQosPolicySystemOutPolicyMap;
export const QueuingQosPolicySystemOutPolicyMap: typeof import("./queuingQosPolicySystemOutPolicyMap").QueuingQosPolicySystemOutPolicyMap = null as any;
utilities.lazyLoad(exports, ["QueuingQosPolicySystemOutPolicyMap"], () => require("./queuingQosPolicySystemOutPolicyMap"));

export { RestArgs, RestState } from "./rest";
export type Rest = import("./rest").Rest;
export const Rest: typeof import("./rest").Rest = null as any;
utilities.lazyLoad(exports, ["Rest"], () => require("./rest"));

export { RouteMapRuleArgs, RouteMapRuleState } from "./routeMapRule";
export type RouteMapRule = import("./routeMapRule").RouteMapRule;
export const RouteMapRule: typeof import("./routeMapRule").RouteMapRule = null as any;
utilities.lazyLoad(exports, ["RouteMapRule"], () => require("./routeMapRule"));

export { RouteMapRuleEntryArgs, RouteMapRuleEntryState } from "./routeMapRuleEntry";
export type RouteMapRuleEntry = import("./routeMapRuleEntry").RouteMapRuleEntry;
export const RouteMapRuleEntry: typeof import("./routeMapRuleEntry").RouteMapRuleEntry = null as any;
utilities.lazyLoad(exports, ["RouteMapRuleEntry"], () => require("./routeMapRuleEntry"));

export { RouteMapRuleEntryMatchRouteArgs, RouteMapRuleEntryMatchRouteState } from "./routeMapRuleEntryMatchRoute";
export type RouteMapRuleEntryMatchRoute = import("./routeMapRuleEntryMatchRoute").RouteMapRuleEntryMatchRoute;
export const RouteMapRuleEntryMatchRoute: typeof import("./routeMapRuleEntryMatchRoute").RouteMapRuleEntryMatchRoute = null as any;
utilities.lazyLoad(exports, ["RouteMapRuleEntryMatchRoute"], () => require("./routeMapRuleEntryMatchRoute"));

export { RouteMapRuleEntryMatchRoutePrefixListArgs, RouteMapRuleEntryMatchRoutePrefixListState } from "./routeMapRuleEntryMatchRoutePrefixList";
export type RouteMapRuleEntryMatchRoutePrefixList = import("./routeMapRuleEntryMatchRoutePrefixList").RouteMapRuleEntryMatchRoutePrefixList;
export const RouteMapRuleEntryMatchRoutePrefixList: typeof import("./routeMapRuleEntryMatchRoutePrefixList").RouteMapRuleEntryMatchRoutePrefixList = null as any;
utilities.lazyLoad(exports, ["RouteMapRuleEntryMatchRoutePrefixList"], () => require("./routeMapRuleEntryMatchRoutePrefixList"));

export { RouteMapRuleEntrySetRegularCommunityArgs, RouteMapRuleEntrySetRegularCommunityState } from "./routeMapRuleEntrySetRegularCommunity";
export type RouteMapRuleEntrySetRegularCommunity = import("./routeMapRuleEntrySetRegularCommunity").RouteMapRuleEntrySetRegularCommunity;
export const RouteMapRuleEntrySetRegularCommunity: typeof import("./routeMapRuleEntrySetRegularCommunity").RouteMapRuleEntrySetRegularCommunity = null as any;
utilities.lazyLoad(exports, ["RouteMapRuleEntrySetRegularCommunity"], () => require("./routeMapRuleEntrySetRegularCommunity"));

export { RouteMapRuleEntrySetRegularCommunityItemArgs, RouteMapRuleEntrySetRegularCommunityItemState } from "./routeMapRuleEntrySetRegularCommunityItem";
export type RouteMapRuleEntrySetRegularCommunityItem = import("./routeMapRuleEntrySetRegularCommunityItem").RouteMapRuleEntrySetRegularCommunityItem;
export const RouteMapRuleEntrySetRegularCommunityItem: typeof import("./routeMapRuleEntrySetRegularCommunityItem").RouteMapRuleEntrySetRegularCommunityItem = null as any;
utilities.lazyLoad(exports, ["RouteMapRuleEntrySetRegularCommunityItem"], () => require("./routeMapRuleEntrySetRegularCommunityItem"));

export { SaveConfigArgs, SaveConfigState } from "./saveConfig";
export type SaveConfig = import("./saveConfig").SaveConfig;
export const SaveConfig: typeof import("./saveConfig").SaveConfig = null as any;
utilities.lazyLoad(exports, ["SaveConfig"], () => require("./saveConfig"));

export { SpanningTreeInterfaceArgs, SpanningTreeInterfaceState } from "./spanningTreeInterface";
export type SpanningTreeInterface = import("./spanningTreeInterface").SpanningTreeInterface;
export const SpanningTreeInterface: typeof import("./spanningTreeInterface").SpanningTreeInterface = null as any;
utilities.lazyLoad(exports, ["SpanningTreeInterface"], () => require("./spanningTreeInterface"));

export { SubinterfaceArgs, SubinterfaceState } from "./subinterface";
export type Subinterface = import("./subinterface").Subinterface;
export const Subinterface: typeof import("./subinterface").Subinterface = null as any;
utilities.lazyLoad(exports, ["Subinterface"], () => require("./subinterface"));

export { SubinterfaceVrfArgs, SubinterfaceVrfState } from "./subinterfaceVrf";
export type SubinterfaceVrf = import("./subinterfaceVrf").SubinterfaceVrf;
export const SubinterfaceVrf: typeof import("./subinterfaceVrf").SubinterfaceVrf = null as any;
utilities.lazyLoad(exports, ["SubinterfaceVrf"], () => require("./subinterfaceVrf"));

export { SviInterfaceArgs, SviInterfaceState } from "./sviInterface";
export type SviInterface = import("./sviInterface").SviInterface;
export const SviInterface: typeof import("./sviInterface").SviInterface = null as any;
utilities.lazyLoad(exports, ["SviInterface"], () => require("./sviInterface"));

export { SviInterfaceVrfArgs, SviInterfaceVrfState } from "./sviInterfaceVrf";
export type SviInterfaceVrf = import("./sviInterfaceVrf").SviInterfaceVrf;
export const SviInterfaceVrf: typeof import("./sviInterfaceVrf").SviInterfaceVrf = null as any;
utilities.lazyLoad(exports, ["SviInterfaceVrf"], () => require("./sviInterfaceVrf"));

export { SystemArgs, SystemState } from "./system";
export type System = import("./system").System;
export const System: typeof import("./system").System = null as any;
utilities.lazyLoad(exports, ["System"], () => require("./system"));

export { VpcDomainArgs, VpcDomainState } from "./vpcDomain";
export type VpcDomain = import("./vpcDomain").VpcDomain;
export const VpcDomain: typeof import("./vpcDomain").VpcDomain = null as any;
utilities.lazyLoad(exports, ["VpcDomain"], () => require("./vpcDomain"));

export { VpcInstanceArgs, VpcInstanceState } from "./vpcInstance";
export type VpcInstance = import("./vpcInstance").VpcInstance;
export const VpcInstance: typeof import("./vpcInstance").VpcInstance = null as any;
utilities.lazyLoad(exports, ["VpcInstance"], () => require("./vpcInstance"));

export { VpcInterfaceArgs, VpcInterfaceState } from "./vpcInterface";
export type VpcInterface = import("./vpcInterface").VpcInterface;
export const VpcInterface: typeof import("./vpcInterface").VpcInterface = null as any;
utilities.lazyLoad(exports, ["VpcInterface"], () => require("./vpcInterface"));

export { VpcKeepaliveArgs, VpcKeepaliveState } from "./vpcKeepalive";
export type VpcKeepalive = import("./vpcKeepalive").VpcKeepalive;
export const VpcKeepalive: typeof import("./vpcKeepalive").VpcKeepalive = null as any;
utilities.lazyLoad(exports, ["VpcKeepalive"], () => require("./vpcKeepalive"));

export { VpcPeerlinkArgs, VpcPeerlinkState } from "./vpcPeerlink";
export type VpcPeerlink = import("./vpcPeerlink").VpcPeerlink;
export const VpcPeerlink: typeof import("./vpcPeerlink").VpcPeerlink = null as any;
utilities.lazyLoad(exports, ["VpcPeerlink"], () => require("./vpcPeerlink"));

export { VrfArgs, VrfState } from "./vrf";
export type Vrf = import("./vrf").Vrf;
export const Vrf: typeof import("./vrf").Vrf = null as any;
utilities.lazyLoad(exports, ["Vrf"], () => require("./vrf"));

export { VrfAddressFamilyArgs, VrfAddressFamilyState } from "./vrfAddressFamily";
export type VrfAddressFamily = import("./vrfAddressFamily").VrfAddressFamily;
export const VrfAddressFamily: typeof import("./vrfAddressFamily").VrfAddressFamily = null as any;
utilities.lazyLoad(exports, ["VrfAddressFamily"], () => require("./vrfAddressFamily"));

export { VrfRouteTargetArgs, VrfRouteTargetState } from "./vrfRouteTarget";
export type VrfRouteTarget = import("./vrfRouteTarget").VrfRouteTarget;
export const VrfRouteTarget: typeof import("./vrfRouteTarget").VrfRouteTarget = null as any;
utilities.lazyLoad(exports, ["VrfRouteTarget"], () => require("./vrfRouteTarget"));

export { VrfRouteTargetAddressFamilyArgs, VrfRouteTargetAddressFamilyState } from "./vrfRouteTargetAddressFamily";
export type VrfRouteTargetAddressFamily = import("./vrfRouteTargetAddressFamily").VrfRouteTargetAddressFamily;
export const VrfRouteTargetAddressFamily: typeof import("./vrfRouteTargetAddressFamily").VrfRouteTargetAddressFamily = null as any;
utilities.lazyLoad(exports, ["VrfRouteTargetAddressFamily"], () => require("./vrfRouteTargetAddressFamily"));

export { VrfRouteTargetDirectionArgs, VrfRouteTargetDirectionState } from "./vrfRouteTargetDirection";
export type VrfRouteTargetDirection = import("./vrfRouteTargetDirection").VrfRouteTargetDirection;
export const VrfRouteTargetDirection: typeof import("./vrfRouteTargetDirection").VrfRouteTargetDirection = null as any;
utilities.lazyLoad(exports, ["VrfRouteTargetDirection"], () => require("./vrfRouteTargetDirection"));

export { VrfRoutingArgs, VrfRoutingState } from "./vrfRouting";
export type VrfRouting = import("./vrfRouting").VrfRouting;
export const VrfRouting: typeof import("./vrfRouting").VrfRouting = null as any;
utilities.lazyLoad(exports, ["VrfRouting"], () => require("./vrfRouting"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nxos:index/bgp:Bgp":
                return new Bgp(name, <any>undefined, { urn })
            case "nxos:index/bgpAddressFamily:BgpAddressFamily":
                return new BgpAddressFamily(name, <any>undefined, { urn })
            case "nxos:index/bgpAdvertisedPrefix:BgpAdvertisedPrefix":
                return new BgpAdvertisedPrefix(name, <any>undefined, { urn })
            case "nxos:index/bgpGracefulRestart:BgpGracefulRestart":
                return new BgpGracefulRestart(name, <any>undefined, { urn })
            case "nxos:index/bgpInstance:BgpInstance":
                return new BgpInstance(name, <any>undefined, { urn })
            case "nxos:index/bgpPeer:BgpPeer":
                return new BgpPeer(name, <any>undefined, { urn })
            case "nxos:index/bgpPeerAddressFamily:BgpPeerAddressFamily":
                return new BgpPeerAddressFamily(name, <any>undefined, { urn })
            case "nxos:index/bgpPeerAddressFamilyPrefixListControl:BgpPeerAddressFamilyPrefixListControl":
                return new BgpPeerAddressFamilyPrefixListControl(name, <any>undefined, { urn })
            case "nxos:index/bgpPeerAddressFamilyRouteControl:BgpPeerAddressFamilyRouteControl":
                return new BgpPeerAddressFamilyRouteControl(name, <any>undefined, { urn })
            case "nxos:index/bgpPeerLocalAsn:BgpPeerLocalAsn":
                return new BgpPeerLocalAsn(name, <any>undefined, { urn })
            case "nxos:index/bgpPeerTemplate:BgpPeerTemplate":
                return new BgpPeerTemplate(name, <any>undefined, { urn })
            case "nxos:index/bgpPeerTemplateAddressFamily:BgpPeerTemplateAddressFamily":
                return new BgpPeerTemplateAddressFamily(name, <any>undefined, { urn })
            case "nxos:index/bgpPeerTemplateMaxPrefix:BgpPeerTemplateMaxPrefix":
                return new BgpPeerTemplateMaxPrefix(name, <any>undefined, { urn })
            case "nxos:index/bgpRouteControl:BgpRouteControl":
                return new BgpRouteControl(name, <any>undefined, { urn })
            case "nxos:index/bgpRouteRedistribution:BgpRouteRedistribution":
                return new BgpRouteRedistribution(name, <any>undefined, { urn })
            case "nxos:index/bgpVrf:BgpVrf":
                return new BgpVrf(name, <any>undefined, { urn })
            case "nxos:index/bridgeDomain:BridgeDomain":
                return new BridgeDomain(name, <any>undefined, { urn })
            case "nxos:index/defaultQosClassMap:DefaultQosClassMap":
                return new DefaultQosClassMap(name, <any>undefined, { urn })
            case "nxos:index/defaultQosClassMapDscp:DefaultQosClassMapDscp":
                return new DefaultQosClassMapDscp(name, <any>undefined, { urn })
            case "nxos:index/defaultQosPolicyInterfaceIn:DefaultQosPolicyInterfaceIn":
                return new DefaultQosPolicyInterfaceIn(name, <any>undefined, { urn })
            case "nxos:index/defaultQosPolicyInterfaceInPolicyMap:DefaultQosPolicyInterfaceInPolicyMap":
                return new DefaultQosPolicyInterfaceInPolicyMap(name, <any>undefined, { urn })
            case "nxos:index/defaultQosPolicyMap:DefaultQosPolicyMap":
                return new DefaultQosPolicyMap(name, <any>undefined, { urn })
            case "nxos:index/defaultQosPolicyMapMatchClassMap:DefaultQosPolicyMapMatchClassMap":
                return new DefaultQosPolicyMapMatchClassMap(name, <any>undefined, { urn })
            case "nxos:index/defaultQosPolicyMapMatchClassMapPolice:DefaultQosPolicyMapMatchClassMapPolice":
                return new DefaultQosPolicyMapMatchClassMapPolice(name, <any>undefined, { urn })
            case "nxos:index/defaultQosPolicyMapMatchClassMapSetQosGroup:DefaultQosPolicyMapMatchClassMapSetQosGroup":
                return new DefaultQosPolicyMapMatchClassMapSetQosGroup(name, <any>undefined, { urn })
            case "nxos:index/dhcpRelayAddress:DhcpRelayAddress":
                return new DhcpRelayAddress(name, <any>undefined, { urn })
            case "nxos:index/dhcpRelayInterface:DhcpRelayInterface":
                return new DhcpRelayInterface(name, <any>undefined, { urn })
            case "nxos:index/ethernet:Ethernet":
                return new Ethernet(name, <any>undefined, { urn })
            case "nxos:index/evpn:Evpn":
                return new Evpn(name, <any>undefined, { urn })
            case "nxos:index/evpnVni:EvpnVni":
                return new EvpnVni(name, <any>undefined, { urn })
            case "nxos:index/evpnVniRouteTarget:EvpnVniRouteTarget":
                return new EvpnVniRouteTarget(name, <any>undefined, { urn })
            case "nxos:index/evpnVniRouteTargetDirection:EvpnVniRouteTargetDirection":
                return new EvpnVniRouteTargetDirection(name, <any>undefined, { urn })
            case "nxos:index/featureBfd:FeatureBfd":
                return new FeatureBfd(name, <any>undefined, { urn })
            case "nxos:index/featureBgp:FeatureBgp":
                return new FeatureBgp(name, <any>undefined, { urn })
            case "nxos:index/featureDhcp:FeatureDhcp":
                return new FeatureDhcp(name, <any>undefined, { urn })
            case "nxos:index/featureEvpn:FeatureEvpn":
                return new FeatureEvpn(name, <any>undefined, { urn })
            case "nxos:index/featureHmm:FeatureHmm":
                return new FeatureHmm(name, <any>undefined, { urn })
            case "nxos:index/featureHsrp:FeatureHsrp":
                return new FeatureHsrp(name, <any>undefined, { urn })
            case "nxos:index/featureInterfaceVlan:FeatureInterfaceVlan":
                return new FeatureInterfaceVlan(name, <any>undefined, { urn })
            case "nxos:index/featureIsis:FeatureIsis":
                return new FeatureIsis(name, <any>undefined, { urn })
            case "nxos:index/featureLacp:FeatureLacp":
                return new FeatureLacp(name, <any>undefined, { urn })
            case "nxos:index/featureLldp:FeatureLldp":
                return new FeatureLldp(name, <any>undefined, { urn })
            case "nxos:index/featureMacsec:FeatureMacsec":
                return new FeatureMacsec(name, <any>undefined, { urn })
            case "nxos:index/featureNetflow:FeatureNetflow":
                return new FeatureNetflow(name, <any>undefined, { urn })
            case "nxos:index/featureNvOverlay:FeatureNvOverlay":
                return new FeatureNvOverlay(name, <any>undefined, { urn })
            case "nxos:index/featureOspf:FeatureOspf":
                return new FeatureOspf(name, <any>undefined, { urn })
            case "nxos:index/featureOspfv3:FeatureOspfv3":
                return new FeatureOspfv3(name, <any>undefined, { urn })
            case "nxos:index/featurePim:FeaturePim":
                return new FeaturePim(name, <any>undefined, { urn })
            case "nxos:index/featurePtp:FeaturePtp":
                return new FeaturePtp(name, <any>undefined, { urn })
            case "nxos:index/featurePvlan:FeaturePvlan":
                return new FeaturePvlan(name, <any>undefined, { urn })
            case "nxos:index/featureSsh:FeatureSsh":
                return new FeatureSsh(name, <any>undefined, { urn })
            case "nxos:index/featureTacacs:FeatureTacacs":
                return new FeatureTacacs(name, <any>undefined, { urn })
            case "nxos:index/featureTelnet:FeatureTelnet":
                return new FeatureTelnet(name, <any>undefined, { urn })
            case "nxos:index/featureUdld:FeatureUdld":
                return new FeatureUdld(name, <any>undefined, { urn })
            case "nxos:index/featureVnSegment:FeatureVnSegment":
                return new FeatureVnSegment(name, <any>undefined, { urn })
            case "nxos:index/featureVpc:FeatureVpc":
                return new FeatureVpc(name, <any>undefined, { urn })
            case "nxos:index/hmm:Hmm":
                return new Hmm(name, <any>undefined, { urn })
            case "nxos:index/hmmInstance:HmmInstance":
                return new HmmInstance(name, <any>undefined, { urn })
            case "nxos:index/hmmInterface:HmmInterface":
                return new HmmInterface(name, <any>undefined, { urn })
            case "nxos:index/ipv4AccessList:Ipv4AccessList":
                return new Ipv4AccessList(name, <any>undefined, { urn })
            case "nxos:index/ipv4AccessListEntry:Ipv4AccessListEntry":
                return new Ipv4AccessListEntry(name, <any>undefined, { urn })
            case "nxos:index/ipv4AccessListPolicyEgressInterface:Ipv4AccessListPolicyEgressInterface":
                return new Ipv4AccessListPolicyEgressInterface(name, <any>undefined, { urn })
            case "nxos:index/ipv4AccessListPolicyIngressInterface:Ipv4AccessListPolicyIngressInterface":
                return new Ipv4AccessListPolicyIngressInterface(name, <any>undefined, { urn })
            case "nxos:index/ipv4Interface:Ipv4Interface":
                return new Ipv4Interface(name, <any>undefined, { urn })
            case "nxos:index/ipv4InterfaceAddress:Ipv4InterfaceAddress":
                return new Ipv4InterfaceAddress(name, <any>undefined, { urn })
            case "nxos:index/ipv4PrefixListRule:Ipv4PrefixListRule":
                return new Ipv4PrefixListRule(name, <any>undefined, { urn })
            case "nxos:index/ipv4PrefixListRuleEntry:Ipv4PrefixListRuleEntry":
                return new Ipv4PrefixListRuleEntry(name, <any>undefined, { urn })
            case "nxos:index/ipv4StaticRoute:Ipv4StaticRoute":
                return new Ipv4StaticRoute(name, <any>undefined, { urn })
            case "nxos:index/ipv4Vrf:Ipv4Vrf":
                return new Ipv4Vrf(name, <any>undefined, { urn })
            case "nxos:index/isis:Isis":
                return new Isis(name, <any>undefined, { urn })
            case "nxos:index/isisInstance:IsisInstance":
                return new IsisInstance(name, <any>undefined, { urn })
            case "nxos:index/isisInterface:IsisInterface":
                return new IsisInterface(name, <any>undefined, { urn })
            case "nxos:index/isisVrf:IsisVrf":
                return new IsisVrf(name, <any>undefined, { urn })
            case "nxos:index/loopbackInterface:LoopbackInterface":
                return new LoopbackInterface(name, <any>undefined, { urn })
            case "nxos:index/loopbackInterfaceVrf:LoopbackInterfaceVrf":
                return new LoopbackInterfaceVrf(name, <any>undefined, { urn })
            case "nxos:index/ntpServer:NtpServer":
                return new NtpServer(name, <any>undefined, { urn })
            case "nxos:index/nveInterface:NveInterface":
                return new NveInterface(name, <any>undefined, { urn })
            case "nxos:index/nveVni:NveVni":
                return new NveVni(name, <any>undefined, { urn })
            case "nxos:index/nveVniContainer:NveVniContainer":
                return new NveVniContainer(name, <any>undefined, { urn })
            case "nxos:index/nveVniIngressReplication:NveVniIngressReplication":
                return new NveVniIngressReplication(name, <any>undefined, { urn })
            case "nxos:index/ospf:Ospf":
                return new Ospf(name, <any>undefined, { urn })
            case "nxos:index/ospfArea:OspfArea":
                return new OspfArea(name, <any>undefined, { urn })
            case "nxos:index/ospfAuthentication:OspfAuthentication":
                return new OspfAuthentication(name, <any>undefined, { urn })
            case "nxos:index/ospfInstance:OspfInstance":
                return new OspfInstance(name, <any>undefined, { urn })
            case "nxos:index/ospfInterface:OspfInterface":
                return new OspfInterface(name, <any>undefined, { urn })
            case "nxos:index/ospfVrf:OspfVrf":
                return new OspfVrf(name, <any>undefined, { urn })
            case "nxos:index/physicalInterface:PhysicalInterface":
                return new PhysicalInterface(name, <any>undefined, { urn })
            case "nxos:index/physicalInterfaceVrf:PhysicalInterfaceVrf":
                return new PhysicalInterfaceVrf(name, <any>undefined, { urn })
            case "nxos:index/pim:Pim":
                return new Pim(name, <any>undefined, { urn })
            case "nxos:index/pimAnycastRp:PimAnycastRp":
                return new PimAnycastRp(name, <any>undefined, { urn })
            case "nxos:index/pimAnycastRpPeer:PimAnycastRpPeer":
                return new PimAnycastRpPeer(name, <any>undefined, { urn })
            case "nxos:index/pimInstance:PimInstance":
                return new PimInstance(name, <any>undefined, { urn })
            case "nxos:index/pimInterface:PimInterface":
                return new PimInterface(name, <any>undefined, { urn })
            case "nxos:index/pimSsmPolicy:PimSsmPolicy":
                return new PimSsmPolicy(name, <any>undefined, { urn })
            case "nxos:index/pimSsmRange:PimSsmRange":
                return new PimSsmRange(name, <any>undefined, { urn })
            case "nxos:index/pimStaticRp:PimStaticRp":
                return new PimStaticRp(name, <any>undefined, { urn })
            case "nxos:index/pimStaticRpGroupList:PimStaticRpGroupList":
                return new PimStaticRpGroupList(name, <any>undefined, { urn })
            case "nxos:index/pimStaticRpPolicy:PimStaticRpPolicy":
                return new PimStaticRpPolicy(name, <any>undefined, { urn })
            case "nxos:index/pimVrf:PimVrf":
                return new PimVrf(name, <any>undefined, { urn })
            case "nxos:index/portChannelInterface:PortChannelInterface":
                return new PortChannelInterface(name, <any>undefined, { urn })
            case "nxos:index/portChannelInterfaceMember:PortChannelInterfaceMember":
                return new PortChannelInterfaceMember(name, <any>undefined, { urn })
            case "nxos:index/portChannelInterfaceVrf:PortChannelInterfaceVrf":
                return new PortChannelInterfaceVrf(name, <any>undefined, { urn })
            case "nxos:index/queuingQosPolicyMap:QueuingQosPolicyMap":
                return new QueuingQosPolicyMap(name, <any>undefined, { urn })
            case "nxos:index/queuingQosPolicyMapMatchClassMap:QueuingQosPolicyMapMatchClassMap":
                return new QueuingQosPolicyMapMatchClassMap(name, <any>undefined, { urn })
            case "nxos:index/queuingQosPolicyMapMatchClassMapPriority:QueuingQosPolicyMapMatchClassMapPriority":
                return new QueuingQosPolicyMapMatchClassMapPriority(name, <any>undefined, { urn })
            case "nxos:index/queuingQosPolicyMapMatchClassMapRemainingBandwidth:QueuingQosPolicyMapMatchClassMapRemainingBandwidth":
                return new QueuingQosPolicyMapMatchClassMapRemainingBandwidth(name, <any>undefined, { urn })
            case "nxos:index/queuingQosPolicySystemOut:QueuingQosPolicySystemOut":
                return new QueuingQosPolicySystemOut(name, <any>undefined, { urn })
            case "nxos:index/queuingQosPolicySystemOutPolicyMap:QueuingQosPolicySystemOutPolicyMap":
                return new QueuingQosPolicySystemOutPolicyMap(name, <any>undefined, { urn })
            case "nxos:index/rest:Rest":
                return new Rest(name, <any>undefined, { urn })
            case "nxos:index/routeMapRule:RouteMapRule":
                return new RouteMapRule(name, <any>undefined, { urn })
            case "nxos:index/routeMapRuleEntry:RouteMapRuleEntry":
                return new RouteMapRuleEntry(name, <any>undefined, { urn })
            case "nxos:index/routeMapRuleEntryMatchRoute:RouteMapRuleEntryMatchRoute":
                return new RouteMapRuleEntryMatchRoute(name, <any>undefined, { urn })
            case "nxos:index/routeMapRuleEntryMatchRoutePrefixList:RouteMapRuleEntryMatchRoutePrefixList":
                return new RouteMapRuleEntryMatchRoutePrefixList(name, <any>undefined, { urn })
            case "nxos:index/routeMapRuleEntrySetRegularCommunity:RouteMapRuleEntrySetRegularCommunity":
                return new RouteMapRuleEntrySetRegularCommunity(name, <any>undefined, { urn })
            case "nxos:index/routeMapRuleEntrySetRegularCommunityItem:RouteMapRuleEntrySetRegularCommunityItem":
                return new RouteMapRuleEntrySetRegularCommunityItem(name, <any>undefined, { urn })
            case "nxos:index/saveConfig:SaveConfig":
                return new SaveConfig(name, <any>undefined, { urn })
            case "nxos:index/spanningTreeInterface:SpanningTreeInterface":
                return new SpanningTreeInterface(name, <any>undefined, { urn })
            case "nxos:index/subinterface:Subinterface":
                return new Subinterface(name, <any>undefined, { urn })
            case "nxos:index/subinterfaceVrf:SubinterfaceVrf":
                return new SubinterfaceVrf(name, <any>undefined, { urn })
            case "nxos:index/sviInterface:SviInterface":
                return new SviInterface(name, <any>undefined, { urn })
            case "nxos:index/sviInterfaceVrf:SviInterfaceVrf":
                return new SviInterfaceVrf(name, <any>undefined, { urn })
            case "nxos:index/system:System":
                return new System(name, <any>undefined, { urn })
            case "nxos:index/vpcDomain:VpcDomain":
                return new VpcDomain(name, <any>undefined, { urn })
            case "nxos:index/vpcInstance:VpcInstance":
                return new VpcInstance(name, <any>undefined, { urn })
            case "nxos:index/vpcInterface:VpcInterface":
                return new VpcInterface(name, <any>undefined, { urn })
            case "nxos:index/vpcKeepalive:VpcKeepalive":
                return new VpcKeepalive(name, <any>undefined, { urn })
            case "nxos:index/vpcPeerlink:VpcPeerlink":
                return new VpcPeerlink(name, <any>undefined, { urn })
            case "nxos:index/vrf:Vrf":
                return new Vrf(name, <any>undefined, { urn })
            case "nxos:index/vrfAddressFamily:VrfAddressFamily":
                return new VrfAddressFamily(name, <any>undefined, { urn })
            case "nxos:index/vrfRouteTarget:VrfRouteTarget":
                return new VrfRouteTarget(name, <any>undefined, { urn })
            case "nxos:index/vrfRouteTargetAddressFamily:VrfRouteTargetAddressFamily":
                return new VrfRouteTargetAddressFamily(name, <any>undefined, { urn })
            case "nxos:index/vrfRouteTargetDirection:VrfRouteTargetDirection":
                return new VrfRouteTargetDirection(name, <any>undefined, { urn })
            case "nxos:index/vrfRouting:VrfRouting":
                return new VrfRouting(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nxos", "index/bgp", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpAddressFamily", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpAdvertisedPrefix", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpGracefulRestart", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpInstance", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpPeer", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpPeerAddressFamily", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpPeerAddressFamilyPrefixListControl", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpPeerAddressFamilyRouteControl", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpPeerLocalAsn", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpPeerTemplate", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpPeerTemplateAddressFamily", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpPeerTemplateMaxPrefix", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpRouteControl", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpRouteRedistribution", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bgpVrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/bridgeDomain", _module)
pulumi.runtime.registerResourceModule("nxos", "index/defaultQosClassMap", _module)
pulumi.runtime.registerResourceModule("nxos", "index/defaultQosClassMapDscp", _module)
pulumi.runtime.registerResourceModule("nxos", "index/defaultQosPolicyInterfaceIn", _module)
pulumi.runtime.registerResourceModule("nxos", "index/defaultQosPolicyInterfaceInPolicyMap", _module)
pulumi.runtime.registerResourceModule("nxos", "index/defaultQosPolicyMap", _module)
pulumi.runtime.registerResourceModule("nxos", "index/defaultQosPolicyMapMatchClassMap", _module)
pulumi.runtime.registerResourceModule("nxos", "index/defaultQosPolicyMapMatchClassMapPolice", _module)
pulumi.runtime.registerResourceModule("nxos", "index/defaultQosPolicyMapMatchClassMapSetQosGroup", _module)
pulumi.runtime.registerResourceModule("nxos", "index/dhcpRelayAddress", _module)
pulumi.runtime.registerResourceModule("nxos", "index/dhcpRelayInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ethernet", _module)
pulumi.runtime.registerResourceModule("nxos", "index/evpn", _module)
pulumi.runtime.registerResourceModule("nxos", "index/evpnVni", _module)
pulumi.runtime.registerResourceModule("nxos", "index/evpnVniRouteTarget", _module)
pulumi.runtime.registerResourceModule("nxos", "index/evpnVniRouteTargetDirection", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureBfd", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureBgp", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureDhcp", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureEvpn", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureHmm", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureHsrp", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureInterfaceVlan", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureIsis", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureLacp", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureLldp", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureMacsec", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureNetflow", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureNvOverlay", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureOspf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureOspfv3", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featurePim", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featurePtp", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featurePvlan", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureSsh", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureTacacs", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureTelnet", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureUdld", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureVnSegment", _module)
pulumi.runtime.registerResourceModule("nxos", "index/featureVpc", _module)
pulumi.runtime.registerResourceModule("nxos", "index/hmm", _module)
pulumi.runtime.registerResourceModule("nxos", "index/hmmInstance", _module)
pulumi.runtime.registerResourceModule("nxos", "index/hmmInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ipv4AccessList", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ipv4AccessListEntry", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ipv4AccessListPolicyEgressInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ipv4AccessListPolicyIngressInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ipv4Interface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ipv4InterfaceAddress", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ipv4PrefixListRule", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ipv4PrefixListRuleEntry", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ipv4StaticRoute", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ipv4Vrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/isis", _module)
pulumi.runtime.registerResourceModule("nxos", "index/isisInstance", _module)
pulumi.runtime.registerResourceModule("nxos", "index/isisInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/isisVrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/loopbackInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/loopbackInterfaceVrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ntpServer", _module)
pulumi.runtime.registerResourceModule("nxos", "index/nveInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/nveVni", _module)
pulumi.runtime.registerResourceModule("nxos", "index/nveVniContainer", _module)
pulumi.runtime.registerResourceModule("nxos", "index/nveVniIngressReplication", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ospf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ospfArea", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ospfAuthentication", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ospfInstance", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ospfInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/ospfVrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/physicalInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/physicalInterfaceVrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pim", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pimAnycastRp", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pimAnycastRpPeer", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pimInstance", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pimInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pimSsmPolicy", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pimSsmRange", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pimStaticRp", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pimStaticRpGroupList", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pimStaticRpPolicy", _module)
pulumi.runtime.registerResourceModule("nxos", "index/pimVrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/portChannelInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/portChannelInterfaceMember", _module)
pulumi.runtime.registerResourceModule("nxos", "index/portChannelInterfaceVrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/queuingQosPolicyMap", _module)
pulumi.runtime.registerResourceModule("nxos", "index/queuingQosPolicyMapMatchClassMap", _module)
pulumi.runtime.registerResourceModule("nxos", "index/queuingQosPolicyMapMatchClassMapPriority", _module)
pulumi.runtime.registerResourceModule("nxos", "index/queuingQosPolicyMapMatchClassMapRemainingBandwidth", _module)
pulumi.runtime.registerResourceModule("nxos", "index/queuingQosPolicySystemOut", _module)
pulumi.runtime.registerResourceModule("nxos", "index/queuingQosPolicySystemOutPolicyMap", _module)
pulumi.runtime.registerResourceModule("nxos", "index/rest", _module)
pulumi.runtime.registerResourceModule("nxos", "index/routeMapRule", _module)
pulumi.runtime.registerResourceModule("nxos", "index/routeMapRuleEntry", _module)
pulumi.runtime.registerResourceModule("nxos", "index/routeMapRuleEntryMatchRoute", _module)
pulumi.runtime.registerResourceModule("nxos", "index/routeMapRuleEntryMatchRoutePrefixList", _module)
pulumi.runtime.registerResourceModule("nxos", "index/routeMapRuleEntrySetRegularCommunity", _module)
pulumi.runtime.registerResourceModule("nxos", "index/routeMapRuleEntrySetRegularCommunityItem", _module)
pulumi.runtime.registerResourceModule("nxos", "index/saveConfig", _module)
pulumi.runtime.registerResourceModule("nxos", "index/spanningTreeInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/subinterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/subinterfaceVrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/sviInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/sviInterfaceVrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/system", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vpcDomain", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vpcInstance", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vpcInterface", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vpcKeepalive", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vpcPeerlink", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vrf", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vrfAddressFamily", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vrfRouteTarget", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vrfRouteTargetAddressFamily", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vrfRouteTargetDirection", _module)
pulumi.runtime.registerResourceModule("nxos", "index/vrfRouting", _module)
pulumi.runtime.registerResourcePackage("nxos", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nxos") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
