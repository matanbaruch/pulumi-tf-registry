// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SviInterface extends pulumi.CustomResource {
    /**
     * Get an existing SviInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SviInterfaceState, opts?: pulumi.CustomResourceOptions): SviInterface {
        return new SviInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nxos:index/sviInterface:SviInterface';

    /**
     * Returns true if the given object is an instance of SviInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SviInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SviInterface.__pulumiType;
    }

    /**
     * Administrative port state. - Choices: `up`, `down` - Default value: `up`
     */
    public readonly adminState!: pulumi.Output<string>;
    /**
     * Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
     */
    public readonly bandwidth!: pulumi.Output<number>;
    /**
     * Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
     */
    public readonly delay!: pulumi.Output<number>;
    /**
     * Interface description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Must match first field in the output of `show intf brief`. Example: `vlan100`.
     */
    public readonly interfaceId!: pulumi.Output<string>;
    /**
     * The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
     */
    public readonly medium!: pulumi.Output<string>;
    /**
     * Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
     */
    public readonly mtu!: pulumi.Output<number>;

    /**
     * Create a SviInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SviInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SviInterfaceArgs | SviInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SviInterfaceState | undefined;
            resourceInputs["adminState"] = state ? state.adminState : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["interfaceId"] = state ? state.interfaceId : undefined;
            resourceInputs["medium"] = state ? state.medium : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
        } else {
            const args = argsOrState as SviInterfaceArgs | undefined;
            if ((!args || args.interfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaceId'");
            }
            resourceInputs["adminState"] = args ? args.adminState : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["interfaceId"] = args ? args.interfaceId : undefined;
            resourceInputs["medium"] = args ? args.medium : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SviInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SviInterface resources.
 */
export interface SviInterfaceState {
    /**
     * Administrative port state. - Choices: `up`, `down` - Default value: `up`
     */
    adminState?: pulumi.Input<string>;
    /**
     * Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
     */
    delay?: pulumi.Input<number>;
    /**
     * Interface description.
     */
    description?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Must match first field in the output of `show intf brief`. Example: `vlan100`.
     */
    interfaceId?: pulumi.Input<string>;
    /**
     * The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
     */
    medium?: pulumi.Input<string>;
    /**
     * Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
     */
    mtu?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SviInterface resource.
 */
export interface SviInterfaceArgs {
    /**
     * Administrative port state. - Choices: `up`, `down` - Default value: `up`
     */
    adminState?: pulumi.Input<string>;
    /**
     * Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
     */
    delay?: pulumi.Input<number>;
    /**
     * Interface description.
     */
    description?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Must match first field in the output of `show intf brief`. Example: `vlan100`.
     */
    interfaceId: pulumi.Input<string>;
    /**
     * The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
     */
    medium?: pulumi.Input<string>;
    /**
     * Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
     */
    mtu?: pulumi.Input<number>;
}
