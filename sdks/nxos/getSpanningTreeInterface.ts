// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSpanningTreeInterface(args: GetSpanningTreeInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetSpanningTreeInterfaceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nxos:index/getSpanningTreeInterface:getSpanningTreeInterface", {
        "device": args.device,
        "interfaceId": args.interfaceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSpanningTreeInterface.
 */
export interface GetSpanningTreeInterfaceArgs {
    device?: string;
    interfaceId: string;
}

/**
 * A collection of values returned by getSpanningTreeInterface.
 */
export interface GetSpanningTreeInterfaceResult {
    readonly adminState: string;
    readonly bpduFilter: string;
    readonly bpduGuard: string;
    readonly cost: number;
    readonly device?: string;
    readonly guard: string;
    readonly id: string;
    readonly interfaceId: string;
    readonly linkType: string;
    readonly mode: string;
    readonly priority: number;
}
export function getSpanningTreeInterfaceOutput(args: GetSpanningTreeInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSpanningTreeInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getSpanningTreeInterface(a, opts))
}

/**
 * A collection of arguments for invoking getSpanningTreeInterface.
 */
export interface GetSpanningTreeInterfaceOutputArgs {
    device?: pulumi.Input<string>;
    interfaceId: pulumi.Input<string>;
}
