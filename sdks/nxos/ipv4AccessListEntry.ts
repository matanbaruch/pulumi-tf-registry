// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ipv4AccessListEntry extends pulumi.CustomResource {
    /**
     * Get an existing Ipv4AccessListEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ipv4AccessListEntryState, opts?: pulumi.CustomResourceOptions): Ipv4AccessListEntry {
        return new Ipv4AccessListEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nxos:index/ipv4AccessListEntry:Ipv4AccessListEntry';

    /**
     * Returns true if the given object is an instance of Ipv4AccessListEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ipv4AccessListEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ipv4AccessListEntry.__pulumiType;
    }

    /**
     * Match TCP ACK flag.
     */
    public readonly ack!: pulumi.Output<boolean | undefined>;
    /**
     * Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Destination address group.
     */
    public readonly destinationAddressGroup!: pulumi.Output<string | undefined>;
    /**
     * First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    public readonly destinationPort1!: pulumi.Output<string | undefined>;
    /**
     * Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    public readonly destinationPort2!: pulumi.Output<string | undefined>;
    /**
     * Destination port group.
     */
    public readonly destinationPortGroup!: pulumi.Output<string | undefined>;
    /**
     * Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    public readonly destinationPortMask!: pulumi.Output<string | undefined>;
    /**
     * Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     */
    public readonly destinationPortOperator!: pulumi.Output<string>;
    /**
     * Destination prefix.
     */
    public readonly destinationPrefix!: pulumi.Output<string | undefined>;
    /**
     * Destination prefix length.
     */
    public readonly destinationPrefixLength!: pulumi.Output<string | undefined>;
    /**
     * Destination prefix mask.
     */
    public readonly destinationPrefixMask!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Match DSCP. - Range: `0`-`63`
     */
    public readonly dscp!: pulumi.Output<number | undefined>;
    /**
     * Match TCP EST flag.
     */
    public readonly est!: pulumi.Output<boolean | undefined>;
    /**
     * Match TCP FIN flag.
     */
    public readonly fin!: pulumi.Output<boolean | undefined>;
    /**
     * Match non-initial fragment.
     */
    public readonly fragment!: pulumi.Output<boolean | undefined>;
    /**
     * HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
     * `invalid`
     */
    public readonly httpOptionType!: pulumi.Output<string>;
    /**
     * ICMP code. - Range: `0`-`256` - Default value: `256`
     */
    public readonly icmpCode!: pulumi.Output<number>;
    /**
     * ICMP type. - Range: `0`-`256` - Default value: `256`
     */
    public readonly icmpType!: pulumi.Output<number>;
    /**
     * Log matches against ACL entry. - Default value: `false`
     */
    public readonly logging!: pulumi.Output<boolean>;
    /**
     * Access list name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
     */
    public readonly packetLength1!: pulumi.Output<string>;
    /**
     * Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
     */
    public readonly packetLength2!: pulumi.Output<string>;
    /**
     * Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     */
    public readonly packetLengthOperator!: pulumi.Output<string>;
    /**
     * Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
     */
    public readonly precedence!: pulumi.Output<string>;
    /**
     * Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
     * `pim`, `pcp`, `udf`
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
     * `nos`, `pim`, `pcp`, `udf`
     */
    public readonly protocolMask!: pulumi.Output<string | undefined>;
    /**
     * Match TCP PSH flag.
     */
    public readonly psh!: pulumi.Output<boolean | undefined>;
    /**
     * Redirect action.
     */
    public readonly redirect!: pulumi.Output<string | undefined>;
    /**
     * ACL comment.
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * Match TCP REV flag.
     */
    public readonly rev!: pulumi.Output<boolean | undefined>;
    /**
     * Match TCP RST flag.
     */
    public readonly rst!: pulumi.Output<boolean | undefined>;
    /**
     * Sequence number.
     */
    public readonly sequenceNumber!: pulumi.Output<number>;
    /**
     * Source address group.
     */
    public readonly sourceAddressGroup!: pulumi.Output<string | undefined>;
    /**
     * First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    public readonly sourcePort1!: pulumi.Output<string | undefined>;
    /**
     * Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    public readonly sourcePort2!: pulumi.Output<string | undefined>;
    /**
     * Source port group.
     */
    public readonly sourcePortGroup!: pulumi.Output<string | undefined>;
    /**
     * Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    public readonly sourcePortMask!: pulumi.Output<string | undefined>;
    /**
     * Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     */
    public readonly sourcePortOperator!: pulumi.Output<string>;
    /**
     * Source prefix.
     */
    public readonly sourcePrefix!: pulumi.Output<string | undefined>;
    /**
     * Source prefix length.
     */
    public readonly sourcePrefixLength!: pulumi.Output<string | undefined>;
    /**
     * Source prefix mask.
     */
    public readonly sourcePrefixMask!: pulumi.Output<string | undefined>;
    /**
     * Match TCP SYN flag.
     */
    public readonly syn!: pulumi.Output<boolean | undefined>;
    /**
     * Time range name.
     */
    public readonly timeRange!: pulumi.Output<string | undefined>;
    /**
     * TTL. - Range: `0`-`255` - Default value: `0`
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * Match TCP URG flag.
     */
    public readonly urg!: pulumi.Output<boolean | undefined>;
    /**
     * VLAN ID. - Range: `0`-`4095` - Default value: `4095`
     */
    public readonly vlan!: pulumi.Output<number>;
    /**
     * NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
     */
    public readonly vni!: pulumi.Output<string>;

    /**
     * Create a Ipv4AccessListEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ipv4AccessListEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ipv4AccessListEntryArgs | Ipv4AccessListEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ipv4AccessListEntryState | undefined;
            resourceInputs["ack"] = state ? state.ack : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["destinationAddressGroup"] = state ? state.destinationAddressGroup : undefined;
            resourceInputs["destinationPort1"] = state ? state.destinationPort1 : undefined;
            resourceInputs["destinationPort2"] = state ? state.destinationPort2 : undefined;
            resourceInputs["destinationPortGroup"] = state ? state.destinationPortGroup : undefined;
            resourceInputs["destinationPortMask"] = state ? state.destinationPortMask : undefined;
            resourceInputs["destinationPortOperator"] = state ? state.destinationPortOperator : undefined;
            resourceInputs["destinationPrefix"] = state ? state.destinationPrefix : undefined;
            resourceInputs["destinationPrefixLength"] = state ? state.destinationPrefixLength : undefined;
            resourceInputs["destinationPrefixMask"] = state ? state.destinationPrefixMask : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["dscp"] = state ? state.dscp : undefined;
            resourceInputs["est"] = state ? state.est : undefined;
            resourceInputs["fin"] = state ? state.fin : undefined;
            resourceInputs["fragment"] = state ? state.fragment : undefined;
            resourceInputs["httpOptionType"] = state ? state.httpOptionType : undefined;
            resourceInputs["icmpCode"] = state ? state.icmpCode : undefined;
            resourceInputs["icmpType"] = state ? state.icmpType : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetLength1"] = state ? state.packetLength1 : undefined;
            resourceInputs["packetLength2"] = state ? state.packetLength2 : undefined;
            resourceInputs["packetLengthOperator"] = state ? state.packetLengthOperator : undefined;
            resourceInputs["precedence"] = state ? state.precedence : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["protocolMask"] = state ? state.protocolMask : undefined;
            resourceInputs["psh"] = state ? state.psh : undefined;
            resourceInputs["redirect"] = state ? state.redirect : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["rev"] = state ? state.rev : undefined;
            resourceInputs["rst"] = state ? state.rst : undefined;
            resourceInputs["sequenceNumber"] = state ? state.sequenceNumber : undefined;
            resourceInputs["sourceAddressGroup"] = state ? state.sourceAddressGroup : undefined;
            resourceInputs["sourcePort1"] = state ? state.sourcePort1 : undefined;
            resourceInputs["sourcePort2"] = state ? state.sourcePort2 : undefined;
            resourceInputs["sourcePortGroup"] = state ? state.sourcePortGroup : undefined;
            resourceInputs["sourcePortMask"] = state ? state.sourcePortMask : undefined;
            resourceInputs["sourcePortOperator"] = state ? state.sourcePortOperator : undefined;
            resourceInputs["sourcePrefix"] = state ? state.sourcePrefix : undefined;
            resourceInputs["sourcePrefixLength"] = state ? state.sourcePrefixLength : undefined;
            resourceInputs["sourcePrefixMask"] = state ? state.sourcePrefixMask : undefined;
            resourceInputs["syn"] = state ? state.syn : undefined;
            resourceInputs["timeRange"] = state ? state.timeRange : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["urg"] = state ? state.urg : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["vni"] = state ? state.vni : undefined;
        } else {
            const args = argsOrState as Ipv4AccessListEntryArgs | undefined;
            if ((!args || args.sequenceNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sequenceNumber'");
            }
            resourceInputs["ack"] = args ? args.ack : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["destinationAddressGroup"] = args ? args.destinationAddressGroup : undefined;
            resourceInputs["destinationPort1"] = args ? args.destinationPort1 : undefined;
            resourceInputs["destinationPort2"] = args ? args.destinationPort2 : undefined;
            resourceInputs["destinationPortGroup"] = args ? args.destinationPortGroup : undefined;
            resourceInputs["destinationPortMask"] = args ? args.destinationPortMask : undefined;
            resourceInputs["destinationPortOperator"] = args ? args.destinationPortOperator : undefined;
            resourceInputs["destinationPrefix"] = args ? args.destinationPrefix : undefined;
            resourceInputs["destinationPrefixLength"] = args ? args.destinationPrefixLength : undefined;
            resourceInputs["destinationPrefixMask"] = args ? args.destinationPrefixMask : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["dscp"] = args ? args.dscp : undefined;
            resourceInputs["est"] = args ? args.est : undefined;
            resourceInputs["fin"] = args ? args.fin : undefined;
            resourceInputs["fragment"] = args ? args.fragment : undefined;
            resourceInputs["httpOptionType"] = args ? args.httpOptionType : undefined;
            resourceInputs["icmpCode"] = args ? args.icmpCode : undefined;
            resourceInputs["icmpType"] = args ? args.icmpType : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetLength1"] = args ? args.packetLength1 : undefined;
            resourceInputs["packetLength2"] = args ? args.packetLength2 : undefined;
            resourceInputs["packetLengthOperator"] = args ? args.packetLengthOperator : undefined;
            resourceInputs["precedence"] = args ? args.precedence : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["protocolMask"] = args ? args.protocolMask : undefined;
            resourceInputs["psh"] = args ? args.psh : undefined;
            resourceInputs["redirect"] = args ? args.redirect : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["rev"] = args ? args.rev : undefined;
            resourceInputs["rst"] = args ? args.rst : undefined;
            resourceInputs["sequenceNumber"] = args ? args.sequenceNumber : undefined;
            resourceInputs["sourceAddressGroup"] = args ? args.sourceAddressGroup : undefined;
            resourceInputs["sourcePort1"] = args ? args.sourcePort1 : undefined;
            resourceInputs["sourcePort2"] = args ? args.sourcePort2 : undefined;
            resourceInputs["sourcePortGroup"] = args ? args.sourcePortGroup : undefined;
            resourceInputs["sourcePortMask"] = args ? args.sourcePortMask : undefined;
            resourceInputs["sourcePortOperator"] = args ? args.sourcePortOperator : undefined;
            resourceInputs["sourcePrefix"] = args ? args.sourcePrefix : undefined;
            resourceInputs["sourcePrefixLength"] = args ? args.sourcePrefixLength : undefined;
            resourceInputs["sourcePrefixMask"] = args ? args.sourcePrefixMask : undefined;
            resourceInputs["syn"] = args ? args.syn : undefined;
            resourceInputs["timeRange"] = args ? args.timeRange : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["urg"] = args ? args.urg : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["vni"] = args ? args.vni : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ipv4AccessListEntry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ipv4AccessListEntry resources.
 */
export interface Ipv4AccessListEntryState {
    /**
     * Match TCP ACK flag.
     */
    ack?: pulumi.Input<boolean>;
    /**
     * Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
     */
    action?: pulumi.Input<string>;
    /**
     * Destination address group.
     */
    destinationAddressGroup?: pulumi.Input<string>;
    /**
     * First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    destinationPort1?: pulumi.Input<string>;
    /**
     * Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    destinationPort2?: pulumi.Input<string>;
    /**
     * Destination port group.
     */
    destinationPortGroup?: pulumi.Input<string>;
    /**
     * Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    destinationPortMask?: pulumi.Input<string>;
    /**
     * Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     */
    destinationPortOperator?: pulumi.Input<string>;
    /**
     * Destination prefix.
     */
    destinationPrefix?: pulumi.Input<string>;
    /**
     * Destination prefix length.
     */
    destinationPrefixLength?: pulumi.Input<string>;
    /**
     * Destination prefix mask.
     */
    destinationPrefixMask?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Match DSCP. - Range: `0`-`63`
     */
    dscp?: pulumi.Input<number>;
    /**
     * Match TCP EST flag.
     */
    est?: pulumi.Input<boolean>;
    /**
     * Match TCP FIN flag.
     */
    fin?: pulumi.Input<boolean>;
    /**
     * Match non-initial fragment.
     */
    fragment?: pulumi.Input<boolean>;
    /**
     * HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
     * `invalid`
     */
    httpOptionType?: pulumi.Input<string>;
    /**
     * ICMP code. - Range: `0`-`256` - Default value: `256`
     */
    icmpCode?: pulumi.Input<number>;
    /**
     * ICMP type. - Range: `0`-`256` - Default value: `256`
     */
    icmpType?: pulumi.Input<number>;
    /**
     * Log matches against ACL entry. - Default value: `false`
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Access list name.
     */
    name?: pulumi.Input<string>;
    /**
     * First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
     */
    packetLength1?: pulumi.Input<string>;
    /**
     * Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
     */
    packetLength2?: pulumi.Input<string>;
    /**
     * Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     */
    packetLengthOperator?: pulumi.Input<string>;
    /**
     * Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
     */
    precedence?: pulumi.Input<string>;
    /**
     * Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
     * `pim`, `pcp`, `udf`
     */
    protocol?: pulumi.Input<string>;
    /**
     * Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
     * `nos`, `pim`, `pcp`, `udf`
     */
    protocolMask?: pulumi.Input<string>;
    /**
     * Match TCP PSH flag.
     */
    psh?: pulumi.Input<boolean>;
    /**
     * Redirect action.
     */
    redirect?: pulumi.Input<string>;
    /**
     * ACL comment.
     */
    remark?: pulumi.Input<string>;
    /**
     * Match TCP REV flag.
     */
    rev?: pulumi.Input<boolean>;
    /**
     * Match TCP RST flag.
     */
    rst?: pulumi.Input<boolean>;
    /**
     * Sequence number.
     */
    sequenceNumber?: pulumi.Input<number>;
    /**
     * Source address group.
     */
    sourceAddressGroup?: pulumi.Input<string>;
    /**
     * First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    sourcePort1?: pulumi.Input<string>;
    /**
     * Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    sourcePort2?: pulumi.Input<string>;
    /**
     * Source port group.
     */
    sourcePortGroup?: pulumi.Input<string>;
    /**
     * Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    sourcePortMask?: pulumi.Input<string>;
    /**
     * Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     */
    sourcePortOperator?: pulumi.Input<string>;
    /**
     * Source prefix.
     */
    sourcePrefix?: pulumi.Input<string>;
    /**
     * Source prefix length.
     */
    sourcePrefixLength?: pulumi.Input<string>;
    /**
     * Source prefix mask.
     */
    sourcePrefixMask?: pulumi.Input<string>;
    /**
     * Match TCP SYN flag.
     */
    syn?: pulumi.Input<boolean>;
    /**
     * Time range name.
     */
    timeRange?: pulumi.Input<string>;
    /**
     * TTL. - Range: `0`-`255` - Default value: `0`
     */
    ttl?: pulumi.Input<number>;
    /**
     * Match TCP URG flag.
     */
    urg?: pulumi.Input<boolean>;
    /**
     * VLAN ID. - Range: `0`-`4095` - Default value: `4095`
     */
    vlan?: pulumi.Input<number>;
    /**
     * NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
     */
    vni?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ipv4AccessListEntry resource.
 */
export interface Ipv4AccessListEntryArgs {
    /**
     * Match TCP ACK flag.
     */
    ack?: pulumi.Input<boolean>;
    /**
     * Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
     */
    action?: pulumi.Input<string>;
    /**
     * Destination address group.
     */
    destinationAddressGroup?: pulumi.Input<string>;
    /**
     * First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    destinationPort1?: pulumi.Input<string>;
    /**
     * Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    destinationPort2?: pulumi.Input<string>;
    /**
     * Destination port group.
     */
    destinationPortGroup?: pulumi.Input<string>;
    /**
     * Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    destinationPortMask?: pulumi.Input<string>;
    /**
     * Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     */
    destinationPortOperator?: pulumi.Input<string>;
    /**
     * Destination prefix.
     */
    destinationPrefix?: pulumi.Input<string>;
    /**
     * Destination prefix length.
     */
    destinationPrefixLength?: pulumi.Input<string>;
    /**
     * Destination prefix mask.
     */
    destinationPrefixMask?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Match DSCP. - Range: `0`-`63`
     */
    dscp?: pulumi.Input<number>;
    /**
     * Match TCP EST flag.
     */
    est?: pulumi.Input<boolean>;
    /**
     * Match TCP FIN flag.
     */
    fin?: pulumi.Input<boolean>;
    /**
     * Match non-initial fragment.
     */
    fragment?: pulumi.Input<boolean>;
    /**
     * HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
     * `invalid`
     */
    httpOptionType?: pulumi.Input<string>;
    /**
     * ICMP code. - Range: `0`-`256` - Default value: `256`
     */
    icmpCode?: pulumi.Input<number>;
    /**
     * ICMP type. - Range: `0`-`256` - Default value: `256`
     */
    icmpType?: pulumi.Input<number>;
    /**
     * Log matches against ACL entry. - Default value: `false`
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Access list name.
     */
    name?: pulumi.Input<string>;
    /**
     * First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
     */
    packetLength1?: pulumi.Input<string>;
    /**
     * Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
     */
    packetLength2?: pulumi.Input<string>;
    /**
     * Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     */
    packetLengthOperator?: pulumi.Input<string>;
    /**
     * Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
     */
    precedence?: pulumi.Input<string>;
    /**
     * Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
     * `pim`, `pcp`, `udf`
     */
    protocol?: pulumi.Input<string>;
    /**
     * Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
     * `nos`, `pim`, `pcp`, `udf`
     */
    protocolMask?: pulumi.Input<string>;
    /**
     * Match TCP PSH flag.
     */
    psh?: pulumi.Input<boolean>;
    /**
     * Redirect action.
     */
    redirect?: pulumi.Input<string>;
    /**
     * ACL comment.
     */
    remark?: pulumi.Input<string>;
    /**
     * Match TCP REV flag.
     */
    rev?: pulumi.Input<boolean>;
    /**
     * Match TCP RST flag.
     */
    rst?: pulumi.Input<boolean>;
    /**
     * Sequence number.
     */
    sequenceNumber: pulumi.Input<number>;
    /**
     * Source address group.
     */
    sourceAddressGroup?: pulumi.Input<string>;
    /**
     * First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    sourcePort1?: pulumi.Input<string>;
    /**
     * Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    sourcePort2?: pulumi.Input<string>;
    /**
     * Source port group.
     */
    sourcePortGroup?: pulumi.Input<string>;
    /**
     * Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     */
    sourcePortMask?: pulumi.Input<string>;
    /**
     * Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     */
    sourcePortOperator?: pulumi.Input<string>;
    /**
     * Source prefix.
     */
    sourcePrefix?: pulumi.Input<string>;
    /**
     * Source prefix length.
     */
    sourcePrefixLength?: pulumi.Input<string>;
    /**
     * Source prefix mask.
     */
    sourcePrefixMask?: pulumi.Input<string>;
    /**
     * Match TCP SYN flag.
     */
    syn?: pulumi.Input<boolean>;
    /**
     * Time range name.
     */
    timeRange?: pulumi.Input<string>;
    /**
     * TTL. - Range: `0`-`255` - Default value: `0`
     */
    ttl?: pulumi.Input<number>;
    /**
     * Match TCP URG flag.
     */
    urg?: pulumi.Input<boolean>;
    /**
     * VLAN ID. - Range: `0`-`4095` - Default value: `4095`
     */
    vlan?: pulumi.Input<number>;
    /**
     * NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
     */
    vni?: pulumi.Input<string>;
}
