// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPimAnycastRpPeer(args: GetPimAnycastRpPeerArgs, opts?: pulumi.InvokeOptions): Promise<GetPimAnycastRpPeerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nxos:index/getPimAnycastRpPeer:getPimAnycastRpPeer", {
        "address": args.address,
        "device": args.device,
        "rpSetAddress": args.rpSetAddress,
        "vrfName": args.vrfName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPimAnycastRpPeer.
 */
export interface GetPimAnycastRpPeerArgs {
    address: string;
    device?: string;
    rpSetAddress: string;
    vrfName: string;
}

/**
 * A collection of values returned by getPimAnycastRpPeer.
 */
export interface GetPimAnycastRpPeerResult {
    readonly address: string;
    readonly device?: string;
    readonly id: string;
    readonly rpSetAddress: string;
    readonly vrfName: string;
}
export function getPimAnycastRpPeerOutput(args: GetPimAnycastRpPeerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPimAnycastRpPeerResult> {
    return pulumi.output(args).apply((a: any) => getPimAnycastRpPeer(a, opts))
}

/**
 * A collection of arguments for invoking getPimAnycastRpPeer.
 */
export interface GetPimAnycastRpPeerOutputArgs {
    address: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    rpSetAddress: pulumi.Input<string>;
    vrfName: pulumi.Input<string>;
}
