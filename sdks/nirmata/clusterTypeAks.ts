// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClusterTypeAks extends pulumi.CustomResource {
    /**
     * Get an existing ClusterTypeAks resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterTypeAksState, opts?: pulumi.CustomResourceOptions): ClusterTypeAks {
        return new ClusterTypeAks(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nirmata:index/clusterTypeAks:ClusterTypeAks';

    /**
     * Returns true if the given object is an instance of ClusterTypeAks.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterTypeAks {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterTypeAks.__pulumiType;
    }

    public readonly allowOverrideCredentials!: pulumi.Output<boolean | undefined>;
    public readonly autoSyncNamespaces!: pulumi.Output<boolean>;
    public readonly clusterFieldOverride!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly credentials!: pulumi.Output<string>;
    public readonly dnsServiceIp!: pulumi.Output<string>;
    public readonly dockerBridgeCidr!: pulumi.Output<string>;
    public readonly enablePrivateCluster!: pulumi.Output<boolean>;
    public readonly httpsApplicationRouting!: pulumi.Output<boolean>;
    public readonly monitoring!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkPolicy!: pulumi.Output<string>;
    public readonly networkProfile!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly resourceGroup!: pulumi.Output<string>;
    public readonly serviceCidr!: pulumi.Output<string>;
    public readonly systemMetadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ClusterTypeAksTimeouts | undefined>;
    public readonly version!: pulumi.Output<string>;
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a ClusterTypeAks resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterTypeAksArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterTypeAksArgs | ClusterTypeAksState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterTypeAksState | undefined;
            resourceInputs["allowOverrideCredentials"] = state ? state.allowOverrideCredentials : undefined;
            resourceInputs["autoSyncNamespaces"] = state ? state.autoSyncNamespaces : undefined;
            resourceInputs["clusterFieldOverride"] = state ? state.clusterFieldOverride : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["dnsServiceIp"] = state ? state.dnsServiceIp : undefined;
            resourceInputs["dockerBridgeCidr"] = state ? state.dockerBridgeCidr : undefined;
            resourceInputs["enablePrivateCluster"] = state ? state.enablePrivateCluster : undefined;
            resourceInputs["httpsApplicationRouting"] = state ? state.httpsApplicationRouting : undefined;
            resourceInputs["monitoring"] = state ? state.monitoring : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkPolicy"] = state ? state.networkPolicy : undefined;
            resourceInputs["networkProfile"] = state ? state.networkProfile : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            resourceInputs["serviceCidr"] = state ? state.serviceCidr : undefined;
            resourceInputs["systemMetadata"] = state ? state.systemMetadata : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as ClusterTypeAksArgs | undefined;
            if ((!args || args.autoSyncNamespaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoSyncNamespaces'");
            }
            if ((!args || args.credentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if ((!args || args.dnsServiceIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsServiceIp'");
            }
            if ((!args || args.dockerBridgeCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dockerBridgeCidr'");
            }
            if ((!args || args.enablePrivateCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enablePrivateCluster'");
            }
            if ((!args || args.httpsApplicationRouting === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpsApplicationRouting'");
            }
            if ((!args || args.monitoring === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitoring'");
            }
            if ((!args || args.networkPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkPolicy'");
            }
            if ((!args || args.networkProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkProfile'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.resourceGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroup'");
            }
            if ((!args || args.serviceCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceCidr'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["allowOverrideCredentials"] = args ? args.allowOverrideCredentials : undefined;
            resourceInputs["autoSyncNamespaces"] = args ? args.autoSyncNamespaces : undefined;
            resourceInputs["clusterFieldOverride"] = args ? args.clusterFieldOverride : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["dnsServiceIp"] = args ? args.dnsServiceIp : undefined;
            resourceInputs["dockerBridgeCidr"] = args ? args.dockerBridgeCidr : undefined;
            resourceInputs["enablePrivateCluster"] = args ? args.enablePrivateCluster : undefined;
            resourceInputs["httpsApplicationRouting"] = args ? args.httpsApplicationRouting : undefined;
            resourceInputs["monitoring"] = args ? args.monitoring : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkPolicy"] = args ? args.networkPolicy : undefined;
            resourceInputs["networkProfile"] = args ? args.networkProfile : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            resourceInputs["serviceCidr"] = args ? args.serviceCidr : undefined;
            resourceInputs["systemMetadata"] = args ? args.systemMetadata : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterTypeAks.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClusterTypeAks resources.
 */
export interface ClusterTypeAksState {
    allowOverrideCredentials?: pulumi.Input<boolean>;
    autoSyncNamespaces?: pulumi.Input<boolean>;
    clusterFieldOverride?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    credentials?: pulumi.Input<string>;
    dnsServiceIp?: pulumi.Input<string>;
    dockerBridgeCidr?: pulumi.Input<string>;
    enablePrivateCluster?: pulumi.Input<boolean>;
    httpsApplicationRouting?: pulumi.Input<boolean>;
    monitoring?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkPolicy?: pulumi.Input<string>;
    networkProfile?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    serviceCidr?: pulumi.Input<string>;
    systemMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ClusterTypeAksTimeouts>;
    version?: pulumi.Input<string>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterTypeAks resource.
 */
export interface ClusterTypeAksArgs {
    allowOverrideCredentials?: pulumi.Input<boolean>;
    autoSyncNamespaces: pulumi.Input<boolean>;
    clusterFieldOverride?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    credentials: pulumi.Input<string>;
    dnsServiceIp: pulumi.Input<string>;
    dockerBridgeCidr: pulumi.Input<string>;
    enablePrivateCluster: pulumi.Input<boolean>;
    httpsApplicationRouting: pulumi.Input<boolean>;
    monitoring: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkPolicy: pulumi.Input<string>;
    networkProfile: pulumi.Input<string>;
    region: pulumi.Input<string>;
    resourceGroup: pulumi.Input<string>;
    serviceCidr: pulumi.Input<string>;
    systemMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ClusterTypeAksTimeouts>;
    version: pulumi.Input<string>;
    workspaceId: pulumi.Input<string>;
}
