// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ClusterAddons extends pulumi.CustomResource {
    /**
     * Get an existing ClusterAddons resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterAddonsState, opts?: pulumi.CustomResourceOptions): ClusterAddons {
        return new ClusterAddons(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nirmata:index/clusterAddons:ClusterAddons';

    /**
     * Returns true if the given object is an instance of ClusterAddons.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterAddons {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterAddons.__pulumiType;
    }

    public readonly application!: pulumi.Output<string>;
    public readonly catalog!: pulumi.Output<string>;
    public readonly channel!: pulumi.Output<string | undefined>;
    public readonly cluster!: pulumi.Output<string>;
    public readonly environment!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string | undefined>;

    /**
     * Create a ClusterAddons resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterAddonsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterAddonsArgs | ClusterAddonsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterAddonsState | undefined;
            resourceInputs["application"] = state ? state.application : undefined;
            resourceInputs["catalog"] = state ? state.catalog : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
        } else {
            const args = argsOrState as ClusterAddonsArgs | undefined;
            if ((!args || args.application === undefined) && !opts.urn) {
                throw new Error("Missing required property 'application'");
            }
            if ((!args || args.catalog === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catalog'");
            }
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            resourceInputs["application"] = args ? args.application : undefined;
            resourceInputs["catalog"] = args ? args.catalog : undefined;
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterAddons.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClusterAddons resources.
 */
export interface ClusterAddonsState {
    application?: pulumi.Input<string>;
    catalog?: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    cluster?: pulumi.Input<string>;
    environment?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterAddons resource.
 */
export interface ClusterAddonsArgs {
    application: pulumi.Input<string>;
    catalog: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    cluster: pulumi.Input<string>;
    environment?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
}
