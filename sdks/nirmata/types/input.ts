// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterImportedTimeouts {
    create?: pulumi.Input<string>;
}

export interface ClusterImportedVaultAuth {
    addonName: pulumi.Input<string>;
    credentialsId?: pulumi.Input<string>;
    credentialsName?: pulumi.Input<string>;
    deleteAuthPath?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<inputs.ClusterImportedVaultAuthRole>[]>;
}

export interface ClusterImportedVaultAuthRole {
    name: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    policies: pulumi.Input<string>;
    serviceAccountName: pulumi.Input<string>;
}

export interface ClusterNodepool {
    enableAutoScaling?: pulumi.Input<boolean>;
    maxCount?: pulumi.Input<number>;
    minCount?: pulumi.Input<number>;
    nodeCount: pulumi.Input<number>;
}

export interface ClusterRegisteredAccessControlList {
    entityType: pulumi.Input<string>;
    name: pulumi.Input<string>;
    permission: pulumi.Input<string>;
}

export interface ClusterRegisteredOwnerInfo {
    ownerName: pulumi.Input<string>;
    ownerType: pulumi.Input<string>;
}

export interface ClusterRegisteredTimeouts {
    create?: pulumi.Input<string>;
}

export interface ClusterTypeAksTimeouts {
    create?: pulumi.Input<string>;
}

export interface ClusterTypeEksAddon {
    addonSelector: pulumi.Input<string>;
    catalog: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    sequenceNumber: pulumi.Input<number>;
}

export interface ClusterTypeEksNodepool {
    amiType?: pulumi.Input<string>;
    diskSize: pulumi.Input<number>;
    iamRole: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nodeAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    securityGroups: pulumi.Input<pulumi.Input<string>[]>;
    sshKeyName?: pulumi.Input<string>;
}

export interface ClusterTypeEksTimeouts {
    create?: pulumi.Input<string>;
}

export interface ClusterTypeEksVaultAuth {
    addonName: pulumi.Input<string>;
    credentialsId?: pulumi.Input<string>;
    credentialsName?: pulumi.Input<string>;
    deleteAuthPath?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<inputs.ClusterTypeEksVaultAuthRole>[]>;
}

export interface ClusterTypeEksVaultAuthRole {
    name: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    policies: pulumi.Input<string>;
    serviceAccountName: pulumi.Input<string>;
}

export interface ClusterTypeGkeAddon {
    addonSelector: pulumi.Input<string>;
    catalog: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    sequenceNumber: pulumi.Input<number>;
}

export interface ClusterTypeGkeNodepool {
    autoRepair: pulumi.Input<boolean>;
    autoUpgrade: pulumi.Input<boolean>;
    diskSize: pulumi.Input<number>;
    enablePreemptibleNodes?: pulumi.Input<boolean>;
    machineType: pulumi.Input<string>;
    maxSurge?: pulumi.Input<number>;
    maxUnavailable?: pulumi.Input<number>;
    nodeAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    serviceAccount?: pulumi.Input<string>;
}

export interface ClusterTypeGkeTimeouts {
    create?: pulumi.Input<string>;
}

export interface ClusterTypeGkeVaultAuth {
    addonName: pulumi.Input<string>;
    credentialsId?: pulumi.Input<string>;
    credentialsName?: pulumi.Input<string>;
    deleteAuthPath?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<inputs.ClusterTypeGkeVaultAuthRole>[]>;
}

export interface ClusterTypeGkeVaultAuthRole {
    name: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    policies: pulumi.Input<string>;
    serviceAccountName: pulumi.Input<string>;
}

export interface ClusterTypeOkeTimeouts {
    create?: pulumi.Input<string>;
}

export interface ClusterTypeRegisteredAddon {
    addonSelector: pulumi.Input<string>;
    catalog: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    sequenceNumber: pulumi.Input<number>;
}

export interface ClusterTypeRegisteredClusterRole {
    apiGroups?: pulumi.Input<pulumi.Input<string>[]>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    verbs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClusterTypeRegisteredVaultAuth {
    addonName: pulumi.Input<string>;
    credentialsId?: pulumi.Input<string>;
    credentialsName?: pulumi.Input<string>;
    deleteAuthPath?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<inputs.ClusterTypeRegisteredVaultAuthRole>[]>;
}

export interface ClusterTypeRegisteredVaultAuthRole {
    name: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    policies: pulumi.Input<string>;
    serviceAccountName: pulumi.Input<string>;
}
