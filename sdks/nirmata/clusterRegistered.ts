// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClusterRegistered extends pulumi.CustomResource {
    /**
     * Get an existing ClusterRegistered resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterRegisteredState, opts?: pulumi.CustomResourceOptions): ClusterRegistered {
        return new ClusterRegistered(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nirmata:index/clusterRegistered:ClusterRegistered';

    /**
     * Returns true if the given object is an instance of ClusterRegistered.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterRegistered {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterRegistered.__pulumiType;
    }

    public readonly accessControlLists!: pulumi.Output<outputs.ClusterRegisteredAccessControlList[] | undefined>;
    public readonly clusterType!: pulumi.Output<string>;
    public /*out*/ readonly controllerCrdYamlsCount!: pulumi.Output<number>;
    public /*out*/ readonly controllerDeployYamlsCount!: pulumi.Output<number>;
    public /*out*/ readonly controllerNsYamlsCount!: pulumi.Output<number>;
    public /*out*/ readonly controllerSaYamlsCount!: pulumi.Output<number>;
    public /*out*/ readonly controllerYamls!: pulumi.Output<string>;
    public /*out*/ readonly controllerYamlsCount!: pulumi.Output<number>;
    public readonly controllerYamlsFolder!: pulumi.Output<string>;
    public readonly deleteAction!: pulumi.Output<string | undefined>;
    public readonly endpoint!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ownerInfo!: pulumi.Output<outputs.ClusterRegisteredOwnerInfo | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ClusterRegisteredTimeouts | undefined>;

    /**
     * Create a ClusterRegistered resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterRegisteredArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterRegisteredArgs | ClusterRegisteredState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterRegisteredState | undefined;
            resourceInputs["accessControlLists"] = state ? state.accessControlLists : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["controllerCrdYamlsCount"] = state ? state.controllerCrdYamlsCount : undefined;
            resourceInputs["controllerDeployYamlsCount"] = state ? state.controllerDeployYamlsCount : undefined;
            resourceInputs["controllerNsYamlsCount"] = state ? state.controllerNsYamlsCount : undefined;
            resourceInputs["controllerSaYamlsCount"] = state ? state.controllerSaYamlsCount : undefined;
            resourceInputs["controllerYamls"] = state ? state.controllerYamls : undefined;
            resourceInputs["controllerYamlsCount"] = state ? state.controllerYamlsCount : undefined;
            resourceInputs["controllerYamlsFolder"] = state ? state.controllerYamlsFolder : undefined;
            resourceInputs["deleteAction"] = state ? state.deleteAction : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerInfo"] = state ? state.ownerInfo : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ClusterRegisteredArgs | undefined;
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            resourceInputs["accessControlLists"] = args ? args.accessControlLists : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["controllerYamlsFolder"] = args ? args.controllerYamlsFolder : undefined;
            resourceInputs["deleteAction"] = args ? args.deleteAction : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerInfo"] = args ? args.ownerInfo : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["controllerCrdYamlsCount"] = undefined /*out*/;
            resourceInputs["controllerDeployYamlsCount"] = undefined /*out*/;
            resourceInputs["controllerNsYamlsCount"] = undefined /*out*/;
            resourceInputs["controllerSaYamlsCount"] = undefined /*out*/;
            resourceInputs["controllerYamls"] = undefined /*out*/;
            resourceInputs["controllerYamlsCount"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterRegistered.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClusterRegistered resources.
 */
export interface ClusterRegisteredState {
    accessControlLists?: pulumi.Input<pulumi.Input<inputs.ClusterRegisteredAccessControlList>[]>;
    clusterType?: pulumi.Input<string>;
    controllerCrdYamlsCount?: pulumi.Input<number>;
    controllerDeployYamlsCount?: pulumi.Input<number>;
    controllerNsYamlsCount?: pulumi.Input<number>;
    controllerSaYamlsCount?: pulumi.Input<number>;
    controllerYamls?: pulumi.Input<string>;
    controllerYamlsCount?: pulumi.Input<number>;
    controllerYamlsFolder?: pulumi.Input<string>;
    deleteAction?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    ownerInfo?: pulumi.Input<inputs.ClusterRegisteredOwnerInfo>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClusterRegisteredTimeouts>;
}

/**
 * The set of arguments for constructing a ClusterRegistered resource.
 */
export interface ClusterRegisteredArgs {
    accessControlLists?: pulumi.Input<pulumi.Input<inputs.ClusterRegisteredAccessControlList>[]>;
    clusterType: pulumi.Input<string>;
    controllerYamlsFolder?: pulumi.Input<string>;
    deleteAction?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    ownerInfo?: pulumi.Input<inputs.ClusterRegisteredOwnerInfo>;
    timeouts?: pulumi.Input<inputs.ClusterRegisteredTimeouts>;
}
