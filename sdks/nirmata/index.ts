// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AwsCloudCredentialsArgs, AwsCloudCredentialsState } from "./awsCloudCredentials";
export type AwsCloudCredentials = import("./awsCloudCredentials").AwsCloudCredentials;
export const AwsCloudCredentials: typeof import("./awsCloudCredentials").AwsCloudCredentials = null as any;
utilities.lazyLoad(exports, ["AwsCloudCredentials"], () => require("./awsCloudCredentials"));

export { CatalogArgs, CatalogState } from "./catalog";
export type Catalog = import("./catalog").Catalog;
export const Catalog: typeof import("./catalog").Catalog = null as any;
utilities.lazyLoad(exports, ["Catalog"], () => require("./catalog"));

export { CatalogApplicationArgs, CatalogApplicationState } from "./catalogApplication";
export type CatalogApplication = import("./catalogApplication").CatalogApplication;
export const CatalogApplication: typeof import("./catalogApplication").CatalogApplication = null as any;
utilities.lazyLoad(exports, ["CatalogApplication"], () => require("./catalogApplication"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterAddonsArgs, ClusterAddonsState } from "./clusterAddons";
export type ClusterAddons = import("./clusterAddons").ClusterAddons;
export const ClusterAddons: typeof import("./clusterAddons").ClusterAddons = null as any;
utilities.lazyLoad(exports, ["ClusterAddons"], () => require("./clusterAddons"));

export { ClusterDirectConnectArgs, ClusterDirectConnectState } from "./clusterDirectConnect";
export type ClusterDirectConnect = import("./clusterDirectConnect").ClusterDirectConnect;
export const ClusterDirectConnect: typeof import("./clusterDirectConnect").ClusterDirectConnect = null as any;
utilities.lazyLoad(exports, ["ClusterDirectConnect"], () => require("./clusterDirectConnect"));

export { ClusterImportedArgs, ClusterImportedState } from "./clusterImported";
export type ClusterImported = import("./clusterImported").ClusterImported;
export const ClusterImported: typeof import("./clusterImported").ClusterImported = null as any;
utilities.lazyLoad(exports, ["ClusterImported"], () => require("./clusterImported"));

export { ClusterRegisteredArgs, ClusterRegisteredState } from "./clusterRegistered";
export type ClusterRegistered = import("./clusterRegistered").ClusterRegistered;
export const ClusterRegistered: typeof import("./clusterRegistered").ClusterRegistered = null as any;
utilities.lazyLoad(exports, ["ClusterRegistered"], () => require("./clusterRegistered"));

export { ClusterTypeAksArgs, ClusterTypeAksState } from "./clusterTypeAks";
export type ClusterTypeAks = import("./clusterTypeAks").ClusterTypeAks;
export const ClusterTypeAks: typeof import("./clusterTypeAks").ClusterTypeAks = null as any;
utilities.lazyLoad(exports, ["ClusterTypeAks"], () => require("./clusterTypeAks"));

export { ClusterTypeEksArgs, ClusterTypeEksState } from "./clusterTypeEks";
export type ClusterTypeEks = import("./clusterTypeEks").ClusterTypeEks;
export const ClusterTypeEks: typeof import("./clusterTypeEks").ClusterTypeEks = null as any;
utilities.lazyLoad(exports, ["ClusterTypeEks"], () => require("./clusterTypeEks"));

export { ClusterTypeGkeArgs, ClusterTypeGkeState } from "./clusterTypeGke";
export type ClusterTypeGke = import("./clusterTypeGke").ClusterTypeGke;
export const ClusterTypeGke: typeof import("./clusterTypeGke").ClusterTypeGke = null as any;
utilities.lazyLoad(exports, ["ClusterTypeGke"], () => require("./clusterTypeGke"));

export { ClusterTypeOkeArgs, ClusterTypeOkeState } from "./clusterTypeOke";
export type ClusterTypeOke = import("./clusterTypeOke").ClusterTypeOke;
export const ClusterTypeOke: typeof import("./clusterTypeOke").ClusterTypeOke = null as any;
utilities.lazyLoad(exports, ["ClusterTypeOke"], () => require("./clusterTypeOke"));

export { ClusterTypeRegisteredArgs, ClusterTypeRegisteredState } from "./clusterTypeRegistered";
export type ClusterTypeRegistered = import("./clusterTypeRegistered").ClusterTypeRegistered;
export const ClusterTypeRegistered: typeof import("./clusterTypeRegistered").ClusterTypeRegistered = null as any;
utilities.lazyLoad(exports, ["ClusterTypeRegistered"], () => require("./clusterTypeRegistered"));

export { DeployPolicySetArgs, DeployPolicySetState } from "./deployPolicySet";
export type DeployPolicySet = import("./deployPolicySet").DeployPolicySet;
export const DeployPolicySet: typeof import("./deployPolicySet").DeployPolicySet = null as any;
utilities.lazyLoad(exports, ["DeployPolicySet"], () => require("./deployPolicySet"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { EnvironmentTypeArgs, EnvironmentTypeState } from "./environmentType";
export type EnvironmentType = import("./environmentType").EnvironmentType;
export const EnvironmentType: typeof import("./environmentType").EnvironmentType = null as any;
utilities.lazyLoad(exports, ["EnvironmentType"], () => require("./environmentType"));

export { GitApplicationArgs, GitApplicationState } from "./gitApplication";
export type GitApplication = import("./gitApplication").GitApplication;
export const GitApplication: typeof import("./gitApplication").GitApplication = null as any;
utilities.lazyLoad(exports, ["GitApplication"], () => require("./gitApplication"));

export { HelmApplicationArgs, HelmApplicationState } from "./helmApplication";
export type HelmApplication = import("./helmApplication").HelmApplication;
export const HelmApplication: typeof import("./helmApplication").HelmApplication = null as any;
utilities.lazyLoad(exports, ["HelmApplication"], () => require("./helmApplication"));

export { HostGroupDirectConnectArgs, HostGroupDirectConnectState } from "./hostGroupDirectConnect";
export type HostGroupDirectConnect = import("./hostGroupDirectConnect").HostGroupDirectConnect;
export const HostGroupDirectConnect: typeof import("./hostGroupDirectConnect").HostGroupDirectConnect = null as any;
utilities.lazyLoad(exports, ["HostGroupDirectConnect"], () => require("./hostGroupDirectConnect"));

export { PolicySetArgs, PolicySetState } from "./policySet";
export type PolicySet = import("./policySet").PolicySet;
export const PolicySet: typeof import("./policySet").PolicySet = null as any;
utilities.lazyLoad(exports, ["PolicySet"], () => require("./policySet"));

export { PromoteVersionArgs, PromoteVersionState } from "./promoteVersion";
export type PromoteVersion = import("./promoteVersion").PromoteVersion;
export const PromoteVersion: typeof import("./promoteVersion").PromoteVersion = null as any;
utilities.lazyLoad(exports, ["PromoteVersion"], () => require("./promoteVersion"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RunApplicationArgs, RunApplicationState } from "./runApplication";
export type RunApplication = import("./runApplication").RunApplication;
export const RunApplication: typeof import("./runApplication").RunApplication = null as any;
utilities.lazyLoad(exports, ["RunApplication"], () => require("./runApplication"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nirmata:index/awsCloudCredentials:AwsCloudCredentials":
                return new AwsCloudCredentials(name, <any>undefined, { urn })
            case "nirmata:index/catalog:Catalog":
                return new Catalog(name, <any>undefined, { urn })
            case "nirmata:index/catalogApplication:CatalogApplication":
                return new CatalogApplication(name, <any>undefined, { urn })
            case "nirmata:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "nirmata:index/clusterAddons:ClusterAddons":
                return new ClusterAddons(name, <any>undefined, { urn })
            case "nirmata:index/clusterDirectConnect:ClusterDirectConnect":
                return new ClusterDirectConnect(name, <any>undefined, { urn })
            case "nirmata:index/clusterImported:ClusterImported":
                return new ClusterImported(name, <any>undefined, { urn })
            case "nirmata:index/clusterRegistered:ClusterRegistered":
                return new ClusterRegistered(name, <any>undefined, { urn })
            case "nirmata:index/clusterTypeAks:ClusterTypeAks":
                return new ClusterTypeAks(name, <any>undefined, { urn })
            case "nirmata:index/clusterTypeEks:ClusterTypeEks":
                return new ClusterTypeEks(name, <any>undefined, { urn })
            case "nirmata:index/clusterTypeGke:ClusterTypeGke":
                return new ClusterTypeGke(name, <any>undefined, { urn })
            case "nirmata:index/clusterTypeOke:ClusterTypeOke":
                return new ClusterTypeOke(name, <any>undefined, { urn })
            case "nirmata:index/clusterTypeRegistered:ClusterTypeRegistered":
                return new ClusterTypeRegistered(name, <any>undefined, { urn })
            case "nirmata:index/deployPolicySet:DeployPolicySet":
                return new DeployPolicySet(name, <any>undefined, { urn })
            case "nirmata:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "nirmata:index/environmentType:EnvironmentType":
                return new EnvironmentType(name, <any>undefined, { urn })
            case "nirmata:index/gitApplication:GitApplication":
                return new GitApplication(name, <any>undefined, { urn })
            case "nirmata:index/helmApplication:HelmApplication":
                return new HelmApplication(name, <any>undefined, { urn })
            case "nirmata:index/hostGroupDirectConnect:HostGroupDirectConnect":
                return new HostGroupDirectConnect(name, <any>undefined, { urn })
            case "nirmata:index/policySet:PolicySet":
                return new PolicySet(name, <any>undefined, { urn })
            case "nirmata:index/promoteVersion:PromoteVersion":
                return new PromoteVersion(name, <any>undefined, { urn })
            case "nirmata:index/runApplication:RunApplication":
                return new RunApplication(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nirmata", "index/awsCloudCredentials", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/catalog", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/catalogApplication", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/cluster", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/clusterAddons", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/clusterDirectConnect", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/clusterImported", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/clusterRegistered", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/clusterTypeAks", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/clusterTypeEks", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/clusterTypeGke", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/clusterTypeOke", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/clusterTypeRegistered", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/deployPolicySet", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/environment", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/environmentType", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/gitApplication", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/helmApplication", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/hostGroupDirectConnect", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/policySet", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/promoteVersion", _module)
pulumi.runtime.registerResourceModule("nirmata", "index/runApplication", _module)
pulumi.runtime.registerResourcePackage("nirmata", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nirmata") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
