// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClusterTypeGke extends pulumi.CustomResource {
    /**
     * Get an existing ClusterTypeGke resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterTypeGkeState, opts?: pulumi.CustomResourceOptions): ClusterTypeGke {
        return new ClusterTypeGke(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nirmata:index/clusterTypeGke:ClusterTypeGke';

    /**
     * Returns true if the given object is an instance of ClusterTypeGke.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterTypeGke {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterTypeGke.__pulumiType;
    }

    public readonly addons!: pulumi.Output<outputs.ClusterTypeGkeAddon[] | undefined>;
    public readonly allowOverrideCredentials!: pulumi.Output<boolean | undefined>;
    public readonly autoSyncNamespaces!: pulumi.Output<boolean | undefined>;
    public readonly channel!: pulumi.Output<string | undefined>;
    public readonly clusterFieldOverrides!: pulumi.Output<string[] | undefined>;
    public readonly clusterIpv4Cidr!: pulumi.Output<string | undefined>;
    public readonly credentials!: pulumi.Output<string>;
    public readonly enableCloudRun!: pulumi.Output<boolean | undefined>;
    public readonly enableHorizontalPodAutoscaling!: pulumi.Output<boolean | undefined>;
    public readonly enableHttpLoadBalancing!: pulumi.Output<boolean | undefined>;
    public readonly enableMaintenancePolicy!: pulumi.Output<boolean | undefined>;
    public readonly enableNetworkPolicy!: pulumi.Output<boolean | undefined>;
    public readonly enableSecretsEncryption!: pulumi.Output<boolean | undefined>;
    public readonly enableVerticalPodAutoscaling!: pulumi.Output<boolean | undefined>;
    public readonly enableWorkloadIdentity!: pulumi.Output<boolean | undefined>;
    public readonly locationType!: pulumi.Output<string>;
    public readonly maintenanceDuration!: pulumi.Output<string | undefined>;
    public readonly maintenanceExclusionTimewindow!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly maintenanceRecurrence!: pulumi.Output<string | undefined>;
    public readonly maintenanceStartTime!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly network!: pulumi.Output<string>;
    public readonly nodeLocations!: pulumi.Output<string[] | undefined>;
    public readonly nodepoolFieldOverrides!: pulumi.Output<string[] | undefined>;
    public readonly nodepools!: pulumi.Output<outputs.ClusterTypeGkeNodepool[]>;
    public readonly project!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly secretsEncryptionKey!: pulumi.Output<string | undefined>;
    public readonly servicesIpv4Cidr!: pulumi.Output<string | undefined>;
    public readonly subnetwork!: pulumi.Output<string>;
    public readonly systemMetadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ClusterTypeGkeTimeouts | undefined>;
    public readonly vaultAuth!: pulumi.Output<outputs.ClusterTypeGkeVaultAuth | undefined>;
    public readonly version!: pulumi.Output<string>;
    public readonly workloadPool!: pulumi.Output<string | undefined>;
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a ClusterTypeGke resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterTypeGkeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterTypeGkeArgs | ClusterTypeGkeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterTypeGkeState | undefined;
            resourceInputs["addons"] = state ? state.addons : undefined;
            resourceInputs["allowOverrideCredentials"] = state ? state.allowOverrideCredentials : undefined;
            resourceInputs["autoSyncNamespaces"] = state ? state.autoSyncNamespaces : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["clusterFieldOverrides"] = state ? state.clusterFieldOverrides : undefined;
            resourceInputs["clusterIpv4Cidr"] = state ? state.clusterIpv4Cidr : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["enableCloudRun"] = state ? state.enableCloudRun : undefined;
            resourceInputs["enableHorizontalPodAutoscaling"] = state ? state.enableHorizontalPodAutoscaling : undefined;
            resourceInputs["enableHttpLoadBalancing"] = state ? state.enableHttpLoadBalancing : undefined;
            resourceInputs["enableMaintenancePolicy"] = state ? state.enableMaintenancePolicy : undefined;
            resourceInputs["enableNetworkPolicy"] = state ? state.enableNetworkPolicy : undefined;
            resourceInputs["enableSecretsEncryption"] = state ? state.enableSecretsEncryption : undefined;
            resourceInputs["enableVerticalPodAutoscaling"] = state ? state.enableVerticalPodAutoscaling : undefined;
            resourceInputs["enableWorkloadIdentity"] = state ? state.enableWorkloadIdentity : undefined;
            resourceInputs["locationType"] = state ? state.locationType : undefined;
            resourceInputs["maintenanceDuration"] = state ? state.maintenanceDuration : undefined;
            resourceInputs["maintenanceExclusionTimewindow"] = state ? state.maintenanceExclusionTimewindow : undefined;
            resourceInputs["maintenanceRecurrence"] = state ? state.maintenanceRecurrence : undefined;
            resourceInputs["maintenanceStartTime"] = state ? state.maintenanceStartTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["nodeLocations"] = state ? state.nodeLocations : undefined;
            resourceInputs["nodepoolFieldOverrides"] = state ? state.nodepoolFieldOverrides : undefined;
            resourceInputs["nodepools"] = state ? state.nodepools : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretsEncryptionKey"] = state ? state.secretsEncryptionKey : undefined;
            resourceInputs["servicesIpv4Cidr"] = state ? state.servicesIpv4Cidr : undefined;
            resourceInputs["subnetwork"] = state ? state.subnetwork : undefined;
            resourceInputs["systemMetadata"] = state ? state.systemMetadata : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vaultAuth"] = state ? state.vaultAuth : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["workloadPool"] = state ? state.workloadPool : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ClusterTypeGkeArgs | undefined;
            if ((!args || args.credentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if ((!args || args.locationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationType'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.nodepools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodepools'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.subnetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetwork'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["addons"] = args ? args.addons : undefined;
            resourceInputs["allowOverrideCredentials"] = args ? args.allowOverrideCredentials : undefined;
            resourceInputs["autoSyncNamespaces"] = args ? args.autoSyncNamespaces : undefined;
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["clusterFieldOverrides"] = args ? args.clusterFieldOverrides : undefined;
            resourceInputs["clusterIpv4Cidr"] = args ? args.clusterIpv4Cidr : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["enableCloudRun"] = args ? args.enableCloudRun : undefined;
            resourceInputs["enableHorizontalPodAutoscaling"] = args ? args.enableHorizontalPodAutoscaling : undefined;
            resourceInputs["enableHttpLoadBalancing"] = args ? args.enableHttpLoadBalancing : undefined;
            resourceInputs["enableMaintenancePolicy"] = args ? args.enableMaintenancePolicy : undefined;
            resourceInputs["enableNetworkPolicy"] = args ? args.enableNetworkPolicy : undefined;
            resourceInputs["enableSecretsEncryption"] = args ? args.enableSecretsEncryption : undefined;
            resourceInputs["enableVerticalPodAutoscaling"] = args ? args.enableVerticalPodAutoscaling : undefined;
            resourceInputs["enableWorkloadIdentity"] = args ? args.enableWorkloadIdentity : undefined;
            resourceInputs["locationType"] = args ? args.locationType : undefined;
            resourceInputs["maintenanceDuration"] = args ? args.maintenanceDuration : undefined;
            resourceInputs["maintenanceExclusionTimewindow"] = args ? args.maintenanceExclusionTimewindow : undefined;
            resourceInputs["maintenanceRecurrence"] = args ? args.maintenanceRecurrence : undefined;
            resourceInputs["maintenanceStartTime"] = args ? args.maintenanceStartTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["nodeLocations"] = args ? args.nodeLocations : undefined;
            resourceInputs["nodepoolFieldOverrides"] = args ? args.nodepoolFieldOverrides : undefined;
            resourceInputs["nodepools"] = args ? args.nodepools : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretsEncryptionKey"] = args ? args.secretsEncryptionKey : undefined;
            resourceInputs["servicesIpv4Cidr"] = args ? args.servicesIpv4Cidr : undefined;
            resourceInputs["subnetwork"] = args ? args.subnetwork : undefined;
            resourceInputs["systemMetadata"] = args ? args.systemMetadata : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vaultAuth"] = args ? args.vaultAuth : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["workloadPool"] = args ? args.workloadPool : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterTypeGke.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClusterTypeGke resources.
 */
export interface ClusterTypeGkeState {
    addons?: pulumi.Input<pulumi.Input<inputs.ClusterTypeGkeAddon>[]>;
    allowOverrideCredentials?: pulumi.Input<boolean>;
    autoSyncNamespaces?: pulumi.Input<boolean>;
    channel?: pulumi.Input<string>;
    clusterFieldOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    clusterIpv4Cidr?: pulumi.Input<string>;
    credentials?: pulumi.Input<string>;
    enableCloudRun?: pulumi.Input<boolean>;
    enableHorizontalPodAutoscaling?: pulumi.Input<boolean>;
    enableHttpLoadBalancing?: pulumi.Input<boolean>;
    enableMaintenancePolicy?: pulumi.Input<boolean>;
    enableNetworkPolicy?: pulumi.Input<boolean>;
    enableSecretsEncryption?: pulumi.Input<boolean>;
    enableVerticalPodAutoscaling?: pulumi.Input<boolean>;
    enableWorkloadIdentity?: pulumi.Input<boolean>;
    locationType?: pulumi.Input<string>;
    maintenanceDuration?: pulumi.Input<string>;
    maintenanceExclusionTimewindow?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceRecurrence?: pulumi.Input<string>;
    maintenanceStartTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<string>;
    nodeLocations?: pulumi.Input<pulumi.Input<string>[]>;
    nodepoolFieldOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    nodepools?: pulumi.Input<pulumi.Input<inputs.ClusterTypeGkeNodepool>[]>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretsEncryptionKey?: pulumi.Input<string>;
    servicesIpv4Cidr?: pulumi.Input<string>;
    subnetwork?: pulumi.Input<string>;
    systemMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ClusterTypeGkeTimeouts>;
    vaultAuth?: pulumi.Input<inputs.ClusterTypeGkeVaultAuth>;
    version?: pulumi.Input<string>;
    workloadPool?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterTypeGke resource.
 */
export interface ClusterTypeGkeArgs {
    addons?: pulumi.Input<pulumi.Input<inputs.ClusterTypeGkeAddon>[]>;
    allowOverrideCredentials?: pulumi.Input<boolean>;
    autoSyncNamespaces?: pulumi.Input<boolean>;
    channel?: pulumi.Input<string>;
    clusterFieldOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    clusterIpv4Cidr?: pulumi.Input<string>;
    credentials: pulumi.Input<string>;
    enableCloudRun?: pulumi.Input<boolean>;
    enableHorizontalPodAutoscaling?: pulumi.Input<boolean>;
    enableHttpLoadBalancing?: pulumi.Input<boolean>;
    enableMaintenancePolicy?: pulumi.Input<boolean>;
    enableNetworkPolicy?: pulumi.Input<boolean>;
    enableSecretsEncryption?: pulumi.Input<boolean>;
    enableVerticalPodAutoscaling?: pulumi.Input<boolean>;
    enableWorkloadIdentity?: pulumi.Input<boolean>;
    locationType: pulumi.Input<string>;
    maintenanceDuration?: pulumi.Input<string>;
    maintenanceExclusionTimewindow?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceRecurrence?: pulumi.Input<string>;
    maintenanceStartTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    network: pulumi.Input<string>;
    nodeLocations?: pulumi.Input<pulumi.Input<string>[]>;
    nodepoolFieldOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    nodepools: pulumi.Input<pulumi.Input<inputs.ClusterTypeGkeNodepool>[]>;
    project: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretsEncryptionKey?: pulumi.Input<string>;
    servicesIpv4Cidr?: pulumi.Input<string>;
    subnetwork: pulumi.Input<string>;
    systemMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ClusterTypeGkeTimeouts>;
    vaultAuth?: pulumi.Input<inputs.ClusterTypeGkeVaultAuth>;
    version: pulumi.Input<string>;
    workloadPool?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
