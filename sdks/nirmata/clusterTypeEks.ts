// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClusterTypeEks extends pulumi.CustomResource {
    /**
     * Get an existing ClusterTypeEks resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterTypeEksState, opts?: pulumi.CustomResourceOptions): ClusterTypeEks {
        return new ClusterTypeEks(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nirmata:index/clusterTypeEks:ClusterTypeEks';

    /**
     * Returns true if the given object is an instance of ClusterTypeEks.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterTypeEks {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterTypeEks.__pulumiType;
    }

    public readonly addons!: pulumi.Output<outputs.ClusterTypeEksAddon[] | undefined>;
    public readonly allowOverrideCredentials!: pulumi.Output<boolean | undefined>;
    public readonly autoSyncNamespaces!: pulumi.Output<boolean>;
    public readonly clusterFieldOverride!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly clusterRoleArn!: pulumi.Output<string>;
    public readonly credentials!: pulumi.Output<string>;
    public readonly enableFargate!: pulumi.Output<boolean | undefined>;
    public readonly enableIdentityProvider!: pulumi.Output<boolean | undefined>;
    public readonly enablePrivateEndpoint!: pulumi.Output<boolean | undefined>;
    public readonly enableSecretsEncryption!: pulumi.Output<boolean | undefined>;
    public readonly kmsKeyArn!: pulumi.Output<string | undefined>;
    public readonly logTypes!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespaceLabelSelectors!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly nodepoolFieldOverride!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly nodepools!: pulumi.Output<outputs.ClusterTypeEksNodepool[]>;
    public readonly podExecutionRoleArn!: pulumi.Output<string | undefined>;
    public readonly podLabelSelectors!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly subnets!: pulumi.Output<string[] | undefined>;
    public readonly systemMetadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ClusterTypeEksTimeouts | undefined>;
    public readonly vaultAuth!: pulumi.Output<outputs.ClusterTypeEksVaultAuth | undefined>;
    public readonly version!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a ClusterTypeEks resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterTypeEksArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterTypeEksArgs | ClusterTypeEksState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterTypeEksState | undefined;
            resourceInputs["addons"] = state ? state.addons : undefined;
            resourceInputs["allowOverrideCredentials"] = state ? state.allowOverrideCredentials : undefined;
            resourceInputs["autoSyncNamespaces"] = state ? state.autoSyncNamespaces : undefined;
            resourceInputs["clusterFieldOverride"] = state ? state.clusterFieldOverride : undefined;
            resourceInputs["clusterRoleArn"] = state ? state.clusterRoleArn : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["enableFargate"] = state ? state.enableFargate : undefined;
            resourceInputs["enableIdentityProvider"] = state ? state.enableIdentityProvider : undefined;
            resourceInputs["enablePrivateEndpoint"] = state ? state.enablePrivateEndpoint : undefined;
            resourceInputs["enableSecretsEncryption"] = state ? state.enableSecretsEncryption : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["logTypes"] = state ? state.logTypes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceLabelSelectors"] = state ? state.namespaceLabelSelectors : undefined;
            resourceInputs["nodepoolFieldOverride"] = state ? state.nodepoolFieldOverride : undefined;
            resourceInputs["nodepools"] = state ? state.nodepools : undefined;
            resourceInputs["podExecutionRoleArn"] = state ? state.podExecutionRoleArn : undefined;
            resourceInputs["podLabelSelectors"] = state ? state.podLabelSelectors : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["systemMetadata"] = state ? state.systemMetadata : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vaultAuth"] = state ? state.vaultAuth : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ClusterTypeEksArgs | undefined;
            if ((!args || args.autoSyncNamespaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoSyncNamespaces'");
            }
            if ((!args || args.clusterRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterRoleArn'");
            }
            if ((!args || args.credentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if ((!args || args.nodepools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodepools'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.securityGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroups'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["addons"] = args ? args.addons : undefined;
            resourceInputs["allowOverrideCredentials"] = args ? args.allowOverrideCredentials : undefined;
            resourceInputs["autoSyncNamespaces"] = args ? args.autoSyncNamespaces : undefined;
            resourceInputs["clusterFieldOverride"] = args ? args.clusterFieldOverride : undefined;
            resourceInputs["clusterRoleArn"] = args ? args.clusterRoleArn : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["enableFargate"] = args ? args.enableFargate : undefined;
            resourceInputs["enableIdentityProvider"] = args ? args.enableIdentityProvider : undefined;
            resourceInputs["enablePrivateEndpoint"] = args ? args.enablePrivateEndpoint : undefined;
            resourceInputs["enableSecretsEncryption"] = args ? args.enableSecretsEncryption : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["logTypes"] = args ? args.logTypes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceLabelSelectors"] = args ? args.namespaceLabelSelectors : undefined;
            resourceInputs["nodepoolFieldOverride"] = args ? args.nodepoolFieldOverride : undefined;
            resourceInputs["nodepools"] = args ? args.nodepools : undefined;
            resourceInputs["podExecutionRoleArn"] = args ? args.podExecutionRoleArn : undefined;
            resourceInputs["podLabelSelectors"] = args ? args.podLabelSelectors : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["systemMetadata"] = args ? args.systemMetadata : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vaultAuth"] = args ? args.vaultAuth : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterTypeEks.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClusterTypeEks resources.
 */
export interface ClusterTypeEksState {
    addons?: pulumi.Input<pulumi.Input<inputs.ClusterTypeEksAddon>[]>;
    allowOverrideCredentials?: pulumi.Input<boolean>;
    autoSyncNamespaces?: pulumi.Input<boolean>;
    clusterFieldOverride?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clusterRoleArn?: pulumi.Input<string>;
    credentials?: pulumi.Input<string>;
    enableFargate?: pulumi.Input<boolean>;
    enableIdentityProvider?: pulumi.Input<boolean>;
    enablePrivateEndpoint?: pulumi.Input<boolean>;
    enableSecretsEncryption?: pulumi.Input<boolean>;
    kmsKeyArn?: pulumi.Input<string>;
    logTypes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    namespaceLabelSelectors?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodepoolFieldOverride?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodepools?: pulumi.Input<pulumi.Input<inputs.ClusterTypeEksNodepool>[]>;
    podExecutionRoleArn?: pulumi.Input<string>;
    podLabelSelectors?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    region?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    systemMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ClusterTypeEksTimeouts>;
    vaultAuth?: pulumi.Input<inputs.ClusterTypeEksVaultAuth>;
    version?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterTypeEks resource.
 */
export interface ClusterTypeEksArgs {
    addons?: pulumi.Input<pulumi.Input<inputs.ClusterTypeEksAddon>[]>;
    allowOverrideCredentials?: pulumi.Input<boolean>;
    autoSyncNamespaces: pulumi.Input<boolean>;
    clusterFieldOverride?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clusterRoleArn: pulumi.Input<string>;
    credentials: pulumi.Input<string>;
    enableFargate?: pulumi.Input<boolean>;
    enableIdentityProvider?: pulumi.Input<boolean>;
    enablePrivateEndpoint?: pulumi.Input<boolean>;
    enableSecretsEncryption?: pulumi.Input<boolean>;
    kmsKeyArn?: pulumi.Input<string>;
    logTypes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    namespaceLabelSelectors?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodepoolFieldOverride?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodepools: pulumi.Input<pulumi.Input<inputs.ClusterTypeEksNodepool>[]>;
    podExecutionRoleArn?: pulumi.Input<string>;
    podLabelSelectors?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    region: pulumi.Input<string>;
    securityGroups: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    systemMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ClusterTypeEksTimeouts>;
    vaultAuth?: pulumi.Input<inputs.ClusterTypeEksVaultAuth>;
    version: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
}
