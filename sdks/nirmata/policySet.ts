// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicySet extends pulumi.CustomResource {
    /**
     * Get an existing PolicySet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicySetState, opts?: pulumi.CustomResourceOptions): PolicySet {
        return new PolicySet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nirmata:index/policySet:PolicySet';

    /**
     * Returns true if the given object is an instance of PolicySet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicySet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicySet.__pulumiType;
    }

    public readonly deleteFromCluster!: pulumi.Output<boolean | undefined>;
    public readonly fixedKustomization!: pulumi.Output<boolean | undefined>;
    public readonly gitBranch!: pulumi.Output<string>;
    public readonly gitCredentials!: pulumi.Output<string>;
    public readonly gitDirectoryLists!: pulumi.Output<string[] | undefined>;
    public readonly gitRepository!: pulumi.Output<string>;
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    public readonly kustomizationFilePath!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly targetBasedKustomization!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PolicySet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicySetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicySetArgs | PolicySetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicySetState | undefined;
            resourceInputs["deleteFromCluster"] = state ? state.deleteFromCluster : undefined;
            resourceInputs["fixedKustomization"] = state ? state.fixedKustomization : undefined;
            resourceInputs["gitBranch"] = state ? state.gitBranch : undefined;
            resourceInputs["gitCredentials"] = state ? state.gitCredentials : undefined;
            resourceInputs["gitDirectoryLists"] = state ? state.gitDirectoryLists : undefined;
            resourceInputs["gitRepository"] = state ? state.gitRepository : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["kustomizationFilePath"] = state ? state.kustomizationFilePath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["targetBasedKustomization"] = state ? state.targetBasedKustomization : undefined;
        } else {
            const args = argsOrState as PolicySetArgs | undefined;
            if ((!args || args.gitBranch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gitBranch'");
            }
            if ((!args || args.gitCredentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gitCredentials'");
            }
            if ((!args || args.gitRepository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gitRepository'");
            }
            resourceInputs["deleteFromCluster"] = args ? args.deleteFromCluster : undefined;
            resourceInputs["fixedKustomization"] = args ? args.fixedKustomization : undefined;
            resourceInputs["gitBranch"] = args ? args.gitBranch : undefined;
            resourceInputs["gitCredentials"] = args ? args.gitCredentials : undefined;
            resourceInputs["gitDirectoryLists"] = args ? args.gitDirectoryLists : undefined;
            resourceInputs["gitRepository"] = args ? args.gitRepository : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["kustomizationFilePath"] = args ? args.kustomizationFilePath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["targetBasedKustomization"] = args ? args.targetBasedKustomization : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicySet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicySet resources.
 */
export interface PolicySetState {
    deleteFromCluster?: pulumi.Input<boolean>;
    fixedKustomization?: pulumi.Input<boolean>;
    gitBranch?: pulumi.Input<string>;
    gitCredentials?: pulumi.Input<string>;
    gitDirectoryLists?: pulumi.Input<pulumi.Input<string>[]>;
    gitRepository?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    kustomizationFilePath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    targetBasedKustomization?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PolicySet resource.
 */
export interface PolicySetArgs {
    deleteFromCluster?: pulumi.Input<boolean>;
    fixedKustomization?: pulumi.Input<boolean>;
    gitBranch: pulumi.Input<string>;
    gitCredentials: pulumi.Input<string>;
    gitDirectoryLists?: pulumi.Input<pulumi.Input<string>[]>;
    gitRepository: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    kustomizationFilePath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    targetBasedKustomization?: pulumi.Input<boolean>;
}
