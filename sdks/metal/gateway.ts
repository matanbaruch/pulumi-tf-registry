// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'metal:index/gateway:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    /**
     * UUID of the Public or VRF IP Reservation to associate, must be in the same metro as the VLAN
     */
    public readonly ipReservationId!: pulumi.Output<string | undefined>;
    /**
     * Size of the private IPv4 subnet to create for this gateway, one of [8 16 32 64 128]
     */
    public readonly privateIpv4SubnetSize!: pulumi.Output<number>;
    /**
     * UUID of the Project where the Gateway is scoped to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Status of the gateway resource
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * UUID of the VLAN to associate
     */
    public readonly vlanId!: pulumi.Output<string>;
    /**
     * UUID of the VRF associated with the IP Reservation
     */
    public /*out*/ readonly vrfId!: pulumi.Output<string>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayState | undefined;
            resourceInputs["ipReservationId"] = state ? state.ipReservationId : undefined;
            resourceInputs["privateIpv4SubnetSize"] = state ? state.privateIpv4SubnetSize : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
            resourceInputs["vrfId"] = state ? state.vrfId : undefined;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.vlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanId'");
            }
            resourceInputs["ipReservationId"] = args ? args.ipReservationId : undefined;
            resourceInputs["privateIpv4SubnetSize"] = args ? args.privateIpv4SubnetSize : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["vrfId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    /**
     * UUID of the Public or VRF IP Reservation to associate, must be in the same metro as the VLAN
     */
    ipReservationId?: pulumi.Input<string>;
    /**
     * Size of the private IPv4 subnet to create for this gateway, one of [8 16 32 64 128]
     */
    privateIpv4SubnetSize?: pulumi.Input<number>;
    /**
     * UUID of the Project where the Gateway is scoped to
     */
    projectId?: pulumi.Input<string>;
    /**
     * Status of the gateway resource
     */
    state?: pulumi.Input<string>;
    /**
     * UUID of the VLAN to associate
     */
    vlanId?: pulumi.Input<string>;
    /**
     * UUID of the VRF associated with the IP Reservation
     */
    vrfId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    /**
     * UUID of the Public or VRF IP Reservation to associate, must be in the same metro as the VLAN
     */
    ipReservationId?: pulumi.Input<string>;
    /**
     * Size of the private IPv4 subnet to create for this gateway, one of [8 16 32 64 128]
     */
    privateIpv4SubnetSize?: pulumi.Input<number>;
    /**
     * UUID of the Project where the Gateway is scoped to
     */
    projectId: pulumi.Input<string>;
    /**
     * UUID of the VLAN to associate
     */
    vlanId: pulumi.Input<string>;
}
