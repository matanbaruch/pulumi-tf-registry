// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ConnectionPort {
    id: string;
    linkStatus: string;
    name: string;
    role: string;
    speed: number;
    status: string;
    virtualCircuitIds: string[];
}

export interface ConnectionServiceToken {
    expiresAt: string;
    id: string;
    maxAllowedSpeed: string;
    role: string;
    state: string;
    type: string;
}

export interface DeviceIpAddress {
    /**
     * CIDR suffix for IP block assigned to this device
     */
    cidr?: number;
    /**
     * IDs of reservations to pick the blocks from
     */
    reservationIds?: string[];
    /**
     * one of public_ipv4,private_ipv4,public_ipv6
     */
    type: string;
}

export interface DeviceNetwork {
    address: string;
    cidr: number;
    family: number;
    gateway: string;
    public: boolean;
}

export interface DevicePort {
    bonded: boolean;
    id: string;
    mac: string;
    name: string;
    type: string;
}

export interface DeviceReinstall {
    /**
     * Whether the OS disk should be filled with `00h` bytes before reinstall
     */
    deprovisionFast?: boolean;
    /**
     * Whether the device should be reinstalled instead of destroyed
     */
    enabled?: boolean;
    /**
     * Whether the non-OS disks should be kept or wiped during reinstall
     */
    preserveData?: boolean;
}

export interface DeviceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GetConnectionPort {
    id: string;
    linkStatus: string;
    name: string;
    role: string;
    speed: number;
    status: string;
    virtualCircuitIds: string[];
}

export interface GetConnectionServiceToken {
    expiresAt: string;
    id: string;
    maxAllowedSpeed: string;
    role: string;
    state: string;
    type: string;
}

export interface GetDeviceBgpNeighborsBgpNeighbor {
    addressFamily: number;
    customerAs: number;
    customerIp: string;
    md5Enabled: boolean;
    md5Password: string;
    multihop: boolean;
    peerAs: number;
    peerIps: string[];
    routesIns: outputs.GetDeviceBgpNeighborsBgpNeighborRoutesIn[];
    routesOuts: outputs.GetDeviceBgpNeighborsBgpNeighborRoutesOut[];
}

export interface GetDeviceBgpNeighborsBgpNeighborRoutesIn {
    exact: boolean;
    route: string;
}

export interface GetDeviceBgpNeighborsBgpNeighborRoutesOut {
    exact: boolean;
    route: string;
}

export interface GetDeviceNetwork {
    address: string;
    cidr: number;
    family: number;
    gateway: string;
    public: boolean;
}

export interface GetDevicePort {
    bonded: boolean;
    id: string;
    mac: string;
    name: string;
    type: string;
}

export interface GetFacilityCapacity {
    /**
     * Plan which has to be available in selected location
     */
    plan: string;
    quantity?: number;
}

export interface GetMetroCapacity {
    /**
     * Plan which has to be available in selected location
     */
    plan: string;
    quantity?: number;
}

export interface GetOrganizationAddress {
    address: string;
    city: string;
    country: string;
    state: string;
    zipCode: string;
}

export interface GetPlansFilter {
    /**
     * If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values
     */
    all?: boolean;
    /**
     * The attribute used to filter. Filter attributes are case-sensitive
     */
    attribute: string;
    /**
     * The type of comparison to apply. One of: in (default), re, substring, less_than, less_than_or_equal, greater_than, greater_than_or_equal
     */
    matchBy?: string;
    /**
     * The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
     */
    values: string[];
}

export interface GetPlansPlan {
    availableInMetros: string[];
    availableIns: string[];
    class: string;
    deploymentTypes: string[];
    description: string;
    id: string;
    legacy: boolean;
    line: string;
    name: string;
    pricingHour: number;
    pricingMonth: number;
    slug: string;
}

export interface GetPlansSort {
    /**
     * The attribute used to sort the results. Sort attributes are case-sensitive
     */
    attribute: string;
    /**
     * Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc
     */
    direction?: string;
}

export interface GetProjectBgpConfig {
    asn: number;
    deploymentType: string;
    maxPrefix: number;
    md5: string;
    status: string;
}

export interface GetSpotMarketRequestTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetVolumeSnapshotPolicy {
    snapshotCount: number;
    snapshotFrequency: string;
}

export interface OrganizationAddress {
    /**
     * Postal address
     */
    address: string;
    /**
     * City name
     */
    city: string;
    /**
     * Two letter country code (ISO 3166-1 alpha-2), e.g. US
     */
    country: string;
    /**
     * State name
     */
    state?: string;
    /**
     * Zip Code
     */
    zipCode: string;
}

export interface PortTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ProjectBgpConfig {
    /**
     * Autonomous System Number for local BGP deployment
     */
    asn: number;
    /**
     * "local" or "global", the local is likely to be usable immediately, the global will need to be review by Equinix Metal engineers
     */
    deploymentType: string;
    /**
     * The maximum number of route filters allowed per server
     */
    maxPrefix: number;
    /**
     * Password for BGP session in plaintext (not a checksum)
     */
    md5?: string;
    /**
     * Status of BGP configuration in the project
     */
    status: string;
}

export interface ReservedIpBlockTimeouts {
    create?: string;
}

export interface SpotMarketRequestInstanceParameters {
    alwaysPxe?: boolean;
    billingCycle: string;
    customdata?: string;
    description?: string;
    features?: string[];
    hostname: string;
    ipxeScriptUrl?: string;
    locked?: boolean;
    operatingSystem: string;
    plan: string;
    projectSshKeys?: string[];
    tags?: string[];
    termintationTime: string;
    userSshKeys?: string[];
    userdata?: string;
}

export interface SpotMarketRequestTimeouts {
    create?: string;
    delete?: string;
}

export interface VolumeAttachment {
    href: string;
}

export interface VolumeSnapshotPolicy {
    snapshotCount: number;
    snapshotFrequency: string;
}

export interface VrfTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

