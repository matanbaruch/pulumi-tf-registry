// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpsecTunnels extends pulumi.CustomResource {
    /**
     * Get an existing IpsecTunnels resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpsecTunnelsState, opts?: pulumi.CustomResourceOptions): IpsecTunnels {
        return new IpsecTunnels(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netskope:index/ipsecTunnels:IpsecTunnels';

    /**
     * Returns true if the given object is an instance of IpsecTunnels.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpsecTunnels {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpsecTunnels.__pulumiType;
    }

    public readonly bandwidth!: pulumi.Output<number>;
    public readonly enable!: pulumi.Output<boolean | undefined>;
    public readonly encryption!: pulumi.Output<string>;
    public readonly notes!: pulumi.Output<string | undefined>;
    public readonly pops!: pulumi.Output<string[]>;
    public readonly psk!: pulumi.Output<string>;
    public readonly site!: pulumi.Output<string>;
    public readonly sourcetype!: pulumi.Output<string | undefined>;
    public readonly srcidentity!: pulumi.Output<string>;
    public readonly srcipidentity!: pulumi.Output<string | undefined>;

    /**
     * Create a IpsecTunnels resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpsecTunnelsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpsecTunnelsArgs | IpsecTunnelsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpsecTunnelsState | undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["pops"] = state ? state.pops : undefined;
            resourceInputs["psk"] = state ? state.psk : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["sourcetype"] = state ? state.sourcetype : undefined;
            resourceInputs["srcidentity"] = state ? state.srcidentity : undefined;
            resourceInputs["srcipidentity"] = state ? state.srcipidentity : undefined;
        } else {
            const args = argsOrState as IpsecTunnelsArgs | undefined;
            if ((!args || args.bandwidth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bandwidth'");
            }
            if ((!args || args.encryption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryption'");
            }
            if ((!args || args.pops === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pops'");
            }
            if ((!args || args.psk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'psk'");
            }
            if ((!args || args.site === undefined) && !opts.urn) {
                throw new Error("Missing required property 'site'");
            }
            if ((!args || args.srcidentity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcidentity'");
            }
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["pops"] = args ? args.pops : undefined;
            resourceInputs["psk"] = args ? args.psk : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["sourcetype"] = args ? args.sourcetype : undefined;
            resourceInputs["srcidentity"] = args ? args.srcidentity : undefined;
            resourceInputs["srcipidentity"] = args ? args.srcipidentity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpsecTunnels.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpsecTunnels resources.
 */
export interface IpsecTunnelsState {
    bandwidth?: pulumi.Input<number>;
    enable?: pulumi.Input<boolean>;
    encryption?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    pops?: pulumi.Input<pulumi.Input<string>[]>;
    psk?: pulumi.Input<string>;
    site?: pulumi.Input<string>;
    sourcetype?: pulumi.Input<string>;
    srcidentity?: pulumi.Input<string>;
    srcipidentity?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpsecTunnels resource.
 */
export interface IpsecTunnelsArgs {
    bandwidth: pulumi.Input<number>;
    enable?: pulumi.Input<boolean>;
    encryption: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    pops: pulumi.Input<pulumi.Input<string>[]>;
    psk: pulumi.Input<string>;
    site: pulumi.Input<string>;
    sourcetype?: pulumi.Input<string>;
    srcidentity: pulumi.Input<string>;
    srcipidentity?: pulumi.Input<string>;
}
