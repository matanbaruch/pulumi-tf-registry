// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetIpsecPopsIpsecPop {
    closestpop: boolean;
    gateway: string;
    id: number;
    location: string;
    name: string;
    probeip: string;
    region: string;
}

export interface GetIpsecTunnelsIpsecTunnel {
    enabled: boolean;
    encryption: string;
    id: number;
    notes: string;
    pops: outputs.GetIpsecTunnelsIpsecTunnelPop[];
    site: string;
    sourcetype: string;
    srcidentity: string;
    srcipidentity: string;
    status: {[key: string]: string};
    template: string;
}

export interface GetIpsecTunnelsIpsecTunnelPop {
    gateway: string;
    name: string;
    primary: boolean;
    probeip: string;
}

export interface GetPrivateappsPrivateApp {
    appId: number;
    appName: string;
    clientlessAccess: boolean;
    host: string;
    privateAppProtocol: string;
    protocols: outputs.GetPrivateappsPrivateAppProtocol[];
    reachability: {[key: string]: boolean};
    servicePublisherAssignments: outputs.GetPrivateappsPrivateAppServicePublisherAssignment[];
    tags: outputs.GetPrivateappsPrivateAppTag[];
    trustSelfSignedCerts: boolean;
    usePublisherDns: boolean;
}

export interface GetPrivateappsPrivateAppProtocol {
    createdAt: string;
    id: number;
    port: string;
    serviceId: number;
    transport: string;
    updatedAt: string;
}

export interface GetPrivateappsPrivateAppServicePublisherAssignment {
    primary: string;
    publisherId: number;
    reachability: {[key: string]: boolean};
    serviceId: number;
}

export interface GetPrivateappsPrivateAppTag {
    tagName: string;
}

export interface GetPublisherUpgradeProfilesUpgradeProfile {
    createdAt: string;
    dockerTag: string;
    enabled: boolean;
    externalId: number;
    frequency: string;
    id: number;
    name: string;
    nextUpdateTime: number;
    numAssociatedPublisher: number;
    releaseType: string;
    timezone: string;
    updatedAt: string;
    upgradingStage: number;
    willStart: boolean;
}

export interface GetPublishersPublisher {
    assessment: {[key: string]: string};
    commonName: string;
    lbrokerconnect: boolean;
    publisherId: number;
    publisherName: string;
    publisherUpgradeProfilesExternalId: number;
    publisherUpgradeProfilesId: string;
    registered: boolean;
    status: string;
    stitcherId: number;
    tags: string[];
    upgradeFailedReason: {[key: string]: string};
    upgradeRequest: boolean;
    upgradeStatus: {[key: string]: string};
}

export interface PrivateappsProtocol {
    port: string;
    type: string;
}

export interface PrivateappsPublisher {
    publisherId: string;
    publisherName: string;
}

export interface PrivateappsTag {
    tagName: string;
}

export interface PublishersTag {
    tagName: string;
}

