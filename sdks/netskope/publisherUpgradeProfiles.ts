// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PublisherUpgradeProfiles extends pulumi.CustomResource {
    /**
     * Get an existing PublisherUpgradeProfiles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PublisherUpgradeProfilesState, opts?: pulumi.CustomResourceOptions): PublisherUpgradeProfiles {
        return new PublisherUpgradeProfiles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netskope:index/publisherUpgradeProfiles:PublisherUpgradeProfiles';

    /**
     * Returns true if the given object is an instance of PublisherUpgradeProfiles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PublisherUpgradeProfiles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PublisherUpgradeProfiles.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly dockerTag!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly frequency!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly nextUpdateTime!: pulumi.Output<number>;
    public readonly releaseType!: pulumi.Output<string>;
    public readonly timezone!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public /*out*/ readonly upgradingStage!: pulumi.Output<number>;
    public /*out*/ readonly willStart!: pulumi.Output<boolean>;

    /**
     * Create a PublisherUpgradeProfiles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PublisherUpgradeProfilesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PublisherUpgradeProfilesArgs | PublisherUpgradeProfilesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PublisherUpgradeProfilesState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dockerTag"] = state ? state.dockerTag : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nextUpdateTime"] = state ? state.nextUpdateTime : undefined;
            resourceInputs["releaseType"] = state ? state.releaseType : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["upgradingStage"] = state ? state.upgradingStage : undefined;
            resourceInputs["willStart"] = state ? state.willStart : undefined;
        } else {
            const args = argsOrState as PublisherUpgradeProfilesArgs | undefined;
            if ((!args || args.dockerTag === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dockerTag'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.releaseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseType'");
            }
            if ((!args || args.timezone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timezone'");
            }
            resourceInputs["dockerTag"] = args ? args.dockerTag : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["releaseType"] = args ? args.releaseType : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["nextUpdateTime"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["upgradingStage"] = undefined /*out*/;
            resourceInputs["willStart"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PublisherUpgradeProfiles.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PublisherUpgradeProfiles resources.
 */
export interface PublisherUpgradeProfilesState {
    createdAt?: pulumi.Input<string>;
    dockerTag?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    frequency?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nextUpdateTime?: pulumi.Input<number>;
    releaseType?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    upgradingStage?: pulumi.Input<number>;
    willStart?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PublisherUpgradeProfiles resource.
 */
export interface PublisherUpgradeProfilesArgs {
    dockerTag: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
    frequency: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    releaseType: pulumi.Input<string>;
    timezone: pulumi.Input<string>;
}
