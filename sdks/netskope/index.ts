// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetIpsecPopsArgs, GetIpsecPopsResult, GetIpsecPopsOutputArgs } from "./getIpsecPops";
export const getIpsecPops: typeof import("./getIpsecPops").getIpsecPops = null as any;
export const getIpsecPopsOutput: typeof import("./getIpsecPops").getIpsecPopsOutput = null as any;
utilities.lazyLoad(exports, ["getIpsecPops","getIpsecPopsOutput"], () => require("./getIpsecPops"));

export { GetIpsecTunnelsArgs, GetIpsecTunnelsResult, GetIpsecTunnelsOutputArgs } from "./getIpsecTunnels";
export const getIpsecTunnels: typeof import("./getIpsecTunnels").getIpsecTunnels = null as any;
export const getIpsecTunnelsOutput: typeof import("./getIpsecTunnels").getIpsecTunnelsOutput = null as any;
utilities.lazyLoad(exports, ["getIpsecTunnels","getIpsecTunnelsOutput"], () => require("./getIpsecTunnels"));

export { GetPrivateappsArgs, GetPrivateappsResult, GetPrivateappsOutputArgs } from "./getPrivateapps";
export const getPrivateapps: typeof import("./getPrivateapps").getPrivateapps = null as any;
export const getPrivateappsOutput: typeof import("./getPrivateapps").getPrivateappsOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateapps","getPrivateappsOutput"], () => require("./getPrivateapps"));

export { GetPublisherUpgradeProfilesArgs, GetPublisherUpgradeProfilesResult, GetPublisherUpgradeProfilesOutputArgs } from "./getPublisherUpgradeProfiles";
export const getPublisherUpgradeProfiles: typeof import("./getPublisherUpgradeProfiles").getPublisherUpgradeProfiles = null as any;
export const getPublisherUpgradeProfilesOutput: typeof import("./getPublisherUpgradeProfiles").getPublisherUpgradeProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getPublisherUpgradeProfiles","getPublisherUpgradeProfilesOutput"], () => require("./getPublisherUpgradeProfiles"));

export { GetPublishersArgs, GetPublishersResult, GetPublishersOutputArgs } from "./getPublishers";
export const getPublishers: typeof import("./getPublishers").getPublishers = null as any;
export const getPublishersOutput: typeof import("./getPublishers").getPublishersOutput = null as any;
utilities.lazyLoad(exports, ["getPublishers","getPublishersOutput"], () => require("./getPublishers"));

export { IpsecTunnelsArgs, IpsecTunnelsState } from "./ipsecTunnels";
export type IpsecTunnels = import("./ipsecTunnels").IpsecTunnels;
export const IpsecTunnels: typeof import("./ipsecTunnels").IpsecTunnels = null as any;
utilities.lazyLoad(exports, ["IpsecTunnels"], () => require("./ipsecTunnels"));

export { PrivateappsArgs, PrivateappsState } from "./privateapps";
export type Privateapps = import("./privateapps").Privateapps;
export const Privateapps: typeof import("./privateapps").Privateapps = null as any;
utilities.lazyLoad(exports, ["Privateapps"], () => require("./privateapps"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublisherUpgradeProfilesArgs, PublisherUpgradeProfilesState } from "./publisherUpgradeProfiles";
export type PublisherUpgradeProfiles = import("./publisherUpgradeProfiles").PublisherUpgradeProfiles;
export const PublisherUpgradeProfiles: typeof import("./publisherUpgradeProfiles").PublisherUpgradeProfiles = null as any;
utilities.lazyLoad(exports, ["PublisherUpgradeProfiles"], () => require("./publisherUpgradeProfiles"));

export { PublishersArgs, PublishersState } from "./publishers";
export type Publishers = import("./publishers").Publishers;
export const Publishers: typeof import("./publishers").Publishers = null as any;
utilities.lazyLoad(exports, ["Publishers"], () => require("./publishers"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netskope:index/ipsecTunnels:IpsecTunnels":
                return new IpsecTunnels(name, <any>undefined, { urn })
            case "netskope:index/privateapps:Privateapps":
                return new Privateapps(name, <any>undefined, { urn })
            case "netskope:index/publisherUpgradeProfiles:PublisherUpgradeProfiles":
                return new PublisherUpgradeProfiles(name, <any>undefined, { urn })
            case "netskope:index/publishers:Publishers":
                return new Publishers(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netskope", "index/ipsecTunnels", _module)
pulumi.runtime.registerResourceModule("netskope", "index/privateapps", _module)
pulumi.runtime.registerResourceModule("netskope", "index/publisherUpgradeProfiles", _module)
pulumi.runtime.registerResourceModule("netskope", "index/publishers", _module)
pulumi.runtime.registerResourcePackage("netskope", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:netskope") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
