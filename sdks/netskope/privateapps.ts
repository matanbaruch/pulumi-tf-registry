// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Privateapps extends pulumi.CustomResource {
    /**
     * Get an existing Privateapps resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateappsState, opts?: pulumi.CustomResourceOptions): Privateapps {
        return new Privateapps(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netskope:index/privateapps:Privateapps';

    /**
     * Returns true if the given object is an instance of Privateapps.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Privateapps {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Privateapps.__pulumiType;
    }

    public readonly appName!: pulumi.Output<string>;
    public readonly clientlessAccess!: pulumi.Output<boolean | undefined>;
    public readonly host!: pulumi.Output<string>;
    public readonly protocols!: pulumi.Output<outputs.PrivateappsProtocol[]>;
    public readonly publishers!: pulumi.Output<outputs.PrivateappsPublisher[] | undefined>;
    public readonly tags!: pulumi.Output<outputs.PrivateappsTag[] | undefined>;
    public readonly trustSelfSignedCerts!: pulumi.Output<boolean | undefined>;
    public readonly usePublisherDns!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Privateapps resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateappsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateappsArgs | PrivateappsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateappsState | undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["clientlessAccess"] = state ? state.clientlessAccess : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["publishers"] = state ? state.publishers : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trustSelfSignedCerts"] = state ? state.trustSelfSignedCerts : undefined;
            resourceInputs["usePublisherDns"] = state ? state.usePublisherDns : undefined;
        } else {
            const args = argsOrState as PrivateappsArgs | undefined;
            if ((!args || args.appName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.protocols === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocols'");
            }
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["clientlessAccess"] = args ? args.clientlessAccess : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["publishers"] = args ? args.publishers : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trustSelfSignedCerts"] = args ? args.trustSelfSignedCerts : undefined;
            resourceInputs["usePublisherDns"] = args ? args.usePublisherDns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Privateapps.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Privateapps resources.
 */
export interface PrivateappsState {
    appName?: pulumi.Input<string>;
    clientlessAccess?: pulumi.Input<boolean>;
    host?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<inputs.PrivateappsProtocol>[]>;
    publishers?: pulumi.Input<pulumi.Input<inputs.PrivateappsPublisher>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.PrivateappsTag>[]>;
    trustSelfSignedCerts?: pulumi.Input<boolean>;
    usePublisherDns?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Privateapps resource.
 */
export interface PrivateappsArgs {
    appName: pulumi.Input<string>;
    clientlessAccess?: pulumi.Input<boolean>;
    host: pulumi.Input<string>;
    protocols: pulumi.Input<pulumi.Input<inputs.PrivateappsProtocol>[]>;
    publishers?: pulumi.Input<pulumi.Input<inputs.PrivateappsPublisher>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.PrivateappsTag>[]>;
    trustSelfSignedCerts?: pulumi.Input<boolean>;
    usePublisherDns?: pulumi.Input<boolean>;
}
