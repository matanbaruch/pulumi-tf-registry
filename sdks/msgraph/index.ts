// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationPasswordArgs, ApplicationPasswordState } from "./applicationPassword";
export type ApplicationPassword = import("./applicationPassword").ApplicationPassword;
export const ApplicationPassword: typeof import("./applicationPassword").ApplicationPassword = null as any;
utilities.lazyLoad(exports, ["ApplicationPassword"], () => require("./applicationPassword"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMemberArgs, GroupMemberState } from "./groupMember";
export type GroupMember = import("./groupMember").GroupMember;
export const GroupMember: typeof import("./groupMember").GroupMember = null as any;
utilities.lazyLoad(exports, ["GroupMember"], () => require("./groupMember"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "msgraph:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "msgraph:index/applicationPassword:ApplicationPassword":
                return new ApplicationPassword(name, <any>undefined, { urn })
            case "msgraph:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "msgraph:index/groupMember:GroupMember":
                return new GroupMember(name, <any>undefined, { urn })
            case "msgraph:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("msgraph", "index/application", _module)
pulumi.runtime.registerResourceModule("msgraph", "index/applicationPassword", _module)
pulumi.runtime.registerResourceModule("msgraph", "index/group", _module)
pulumi.runtime.registerResourceModule("msgraph", "index/groupMember", _module)
pulumi.runtime.registerResourceModule("msgraph", "index/user", _module)
pulumi.runtime.registerResourcePackage("msgraph", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:msgraph") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
