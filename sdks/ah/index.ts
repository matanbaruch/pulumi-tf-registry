// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CloudServerArgs, CloudServerState } from "./cloudServer";
export type CloudServer = import("./cloudServer").CloudServer;
export const CloudServer: typeof import("./cloudServer").CloudServer = null as any;
utilities.lazyLoad(exports, ["CloudServer"], () => require("./cloudServer"));

export { CloudServerSnapshotArgs, CloudServerSnapshotState } from "./cloudServerSnapshot";
export type CloudServerSnapshot = import("./cloudServerSnapshot").CloudServerSnapshot;
export const CloudServerSnapshot: typeof import("./cloudServerSnapshot").CloudServerSnapshot = null as any;
utilities.lazyLoad(exports, ["CloudServerSnapshot"], () => require("./cloudServerSnapshot"));

export { GetCloudImagesArgs, GetCloudImagesResult, GetCloudImagesOutputArgs } from "./getCloudImages";
export const getCloudImages: typeof import("./getCloudImages").getCloudImages = null as any;
export const getCloudImagesOutput: typeof import("./getCloudImages").getCloudImagesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudImages","getCloudImagesOutput"], () => require("./getCloudImages"));

export { GetCloudServerPlansArgs, GetCloudServerPlansResult, GetCloudServerPlansOutputArgs } from "./getCloudServerPlans";
export const getCloudServerPlans: typeof import("./getCloudServerPlans").getCloudServerPlans = null as any;
export const getCloudServerPlansOutput: typeof import("./getCloudServerPlans").getCloudServerPlansOutput = null as any;
utilities.lazyLoad(exports, ["getCloudServerPlans","getCloudServerPlansOutput"], () => require("./getCloudServerPlans"));

export { GetCloudServerProductsArgs, GetCloudServerProductsResult, GetCloudServerProductsOutputArgs } from "./getCloudServerProducts";
export const getCloudServerProducts: typeof import("./getCloudServerProducts").getCloudServerProducts = null as any;
export const getCloudServerProductsOutput: typeof import("./getCloudServerProducts").getCloudServerProductsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudServerProducts","getCloudServerProductsOutput"], () => require("./getCloudServerProducts"));

export { GetCloudServerSnapshotAndBackupsArgs, GetCloudServerSnapshotAndBackupsResult, GetCloudServerSnapshotAndBackupsOutputArgs } from "./getCloudServerSnapshotAndBackups";
export const getCloudServerSnapshotAndBackups: typeof import("./getCloudServerSnapshotAndBackups").getCloudServerSnapshotAndBackups = null as any;
export const getCloudServerSnapshotAndBackupsOutput: typeof import("./getCloudServerSnapshotAndBackups").getCloudServerSnapshotAndBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudServerSnapshotAndBackups","getCloudServerSnapshotAndBackupsOutput"], () => require("./getCloudServerSnapshotAndBackups"));

export { GetCloudServersArgs, GetCloudServersResult, GetCloudServersOutputArgs } from "./getCloudServers";
export const getCloudServers: typeof import("./getCloudServers").getCloudServers = null as any;
export const getCloudServersOutput: typeof import("./getCloudServers").getCloudServersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudServers","getCloudServersOutput"], () => require("./getCloudServers"));

export { GetDatacentersArgs, GetDatacentersResult, GetDatacentersOutputArgs } from "./getDatacenters";
export const getDatacenters: typeof import("./getDatacenters").getDatacenters = null as any;
export const getDatacentersOutput: typeof import("./getDatacenters").getDatacentersOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenters","getDatacentersOutput"], () => require("./getDatacenters"));

export { GetIpsArgs, GetIpsResult, GetIpsOutputArgs } from "./getIps";
export const getIps: typeof import("./getIps").getIps = null as any;
export const getIpsOutput: typeof import("./getIps").getIpsOutput = null as any;
utilities.lazyLoad(exports, ["getIps","getIpsOutput"], () => require("./getIps"));

export { GetPrivateNetworksArgs, GetPrivateNetworksResult, GetPrivateNetworksOutputArgs } from "./getPrivateNetworks";
export const getPrivateNetworks: typeof import("./getPrivateNetworks").getPrivateNetworks = null as any;
export const getPrivateNetworksOutput: typeof import("./getPrivateNetworks").getPrivateNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateNetworks","getPrivateNetworksOutput"], () => require("./getPrivateNetworks"));

export { GetSshKeysArgs, GetSshKeysResult, GetSshKeysOutputArgs } from "./getSshKeys";
export const getSshKeys: typeof import("./getSshKeys").getSshKeys = null as any;
export const getSshKeysOutput: typeof import("./getSshKeys").getSshKeysOutput = null as any;
utilities.lazyLoad(exports, ["getSshKeys","getSshKeysOutput"], () => require("./getSshKeys"));

export { GetVolumePlansArgs, GetVolumePlansResult, GetVolumePlansOutputArgs } from "./getVolumePlans";
export const getVolumePlans: typeof import("./getVolumePlans").getVolumePlans = null as any;
export const getVolumePlansOutput: typeof import("./getVolumePlans").getVolumePlansOutput = null as any;
utilities.lazyLoad(exports, ["getVolumePlans","getVolumePlansOutput"], () => require("./getVolumePlans"));

export { GetVolumeProductsArgs, GetVolumeProductsResult, GetVolumeProductsOutputArgs } from "./getVolumeProducts";
export const getVolumeProducts: typeof import("./getVolumeProducts").getVolumeProducts = null as any;
export const getVolumeProductsOutput: typeof import("./getVolumeProducts").getVolumeProductsOutput = null as any;
utilities.lazyLoad(exports, ["getVolumeProducts","getVolumeProductsOutput"], () => require("./getVolumeProducts"));

export { GetVolumesArgs, GetVolumesResult, GetVolumesOutputArgs } from "./getVolumes";
export const getVolumes: typeof import("./getVolumes").getVolumes = null as any;
export const getVolumesOutput: typeof import("./getVolumes").getVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getVolumes","getVolumesOutput"], () => require("./getVolumes"));

export { IpArgs, IpState } from "./ip";
export type Ip = import("./ip").Ip;
export const Ip: typeof import("./ip").Ip = null as any;
utilities.lazyLoad(exports, ["Ip"], () => require("./ip"));

export { IpAssignmentArgs, IpAssignmentState } from "./ipAssignment";
export type IpAssignment = import("./ipAssignment").IpAssignment;
export const IpAssignment: typeof import("./ipAssignment").IpAssignment = null as any;
utilities.lazyLoad(exports, ["IpAssignment"], () => require("./ipAssignment"));

export { K8sClusterArgs, K8sClusterState } from "./k8sCluster";
export type K8sCluster = import("./k8sCluster").K8sCluster;
export const K8sCluster: typeof import("./k8sCluster").K8sCluster = null as any;
utilities.lazyLoad(exports, ["K8sCluster"], () => require("./k8sCluster"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { PrivateNetworkArgs, PrivateNetworkState } from "./privateNetwork";
export type PrivateNetwork = import("./privateNetwork").PrivateNetwork;
export const PrivateNetwork: typeof import("./privateNetwork").PrivateNetwork = null as any;
utilities.lazyLoad(exports, ["PrivateNetwork"], () => require("./privateNetwork"));

export { PrivateNetworkConnectionArgs, PrivateNetworkConnectionState } from "./privateNetworkConnection";
export type PrivateNetworkConnection = import("./privateNetworkConnection").PrivateNetworkConnection;
export const PrivateNetworkConnection: typeof import("./privateNetworkConnection").PrivateNetworkConnection = null as any;
utilities.lazyLoad(exports, ["PrivateNetworkConnection"], () => require("./privateNetworkConnection"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumeAttachmentArgs, VolumeAttachmentState } from "./volumeAttachment";
export type VolumeAttachment = import("./volumeAttachment").VolumeAttachment;
export const VolumeAttachment: typeof import("./volumeAttachment").VolumeAttachment = null as any;
utilities.lazyLoad(exports, ["VolumeAttachment"], () => require("./volumeAttachment"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ah:index/cloudServer:CloudServer":
                return new CloudServer(name, <any>undefined, { urn })
            case "ah:index/cloudServerSnapshot:CloudServerSnapshot":
                return new CloudServerSnapshot(name, <any>undefined, { urn })
            case "ah:index/ip:Ip":
                return new Ip(name, <any>undefined, { urn })
            case "ah:index/ipAssignment:IpAssignment":
                return new IpAssignment(name, <any>undefined, { urn })
            case "ah:index/k8sCluster:K8sCluster":
                return new K8sCluster(name, <any>undefined, { urn })
            case "ah:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "ah:index/privateNetwork:PrivateNetwork":
                return new PrivateNetwork(name, <any>undefined, { urn })
            case "ah:index/privateNetworkConnection:PrivateNetworkConnection":
                return new PrivateNetworkConnection(name, <any>undefined, { urn })
            case "ah:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "ah:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "ah:index/volumeAttachment:VolumeAttachment":
                return new VolumeAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ah", "index/cloudServer", _module)
pulumi.runtime.registerResourceModule("ah", "index/cloudServerSnapshot", _module)
pulumi.runtime.registerResourceModule("ah", "index/ip", _module)
pulumi.runtime.registerResourceModule("ah", "index/ipAssignment", _module)
pulumi.runtime.registerResourceModule("ah", "index/k8sCluster", _module)
pulumi.runtime.registerResourceModule("ah", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("ah", "index/privateNetwork", _module)
pulumi.runtime.registerResourceModule("ah", "index/privateNetworkConnection", _module)
pulumi.runtime.registerResourceModule("ah", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("ah", "index/volume", _module)
pulumi.runtime.registerResourceModule("ah", "index/volumeAttachment", _module)
pulumi.runtime.registerResourcePackage("ah", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ah") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
