// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudServer extends pulumi.CustomResource {
    /**
     * Get an existing CloudServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudServerState, opts?: pulumi.CustomResourceOptions): CloudServer {
        return new CloudServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ah:index/cloudServer:CloudServer';

    /**
     * Returns true if the given object is an instance of CloudServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudServer.__pulumiType;
    }

    public readonly backups!: pulumi.Output<boolean | undefined>;
    public readonly clusterId!: pulumi.Output<string | undefined>;
    public readonly createPublicIpAddress!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly datacenter!: pulumi.Output<string>;
    public readonly disk!: pulumi.Output<number>;
    public readonly image!: pulumi.Output<string>;
    public /*out*/ readonly ips!: pulumi.Output<outputs.CloudServerIp[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeId!: pulumi.Output<string | undefined>;
    public readonly plan!: pulumi.Output<string | undefined>;
    public readonly privateCloud!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly product!: pulumi.Output<string | undefined>;
    public readonly ram!: pulumi.Output<number>;
    public readonly sshKeys!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly usePassword!: pulumi.Output<boolean | undefined>;
    public readonly vcpu!: pulumi.Output<number>;

    /**
     * Create a CloudServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudServerArgs | CloudServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudServerState | undefined;
            resourceInputs["backups"] = state ? state.backups : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["createPublicIpAddress"] = state ? state.createPublicIpAddress : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["privateCloud"] = state ? state.privateCloud : undefined;
            resourceInputs["product"] = state ? state.product : undefined;
            resourceInputs["ram"] = state ? state.ram : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["usePassword"] = state ? state.usePassword : undefined;
            resourceInputs["vcpu"] = state ? state.vcpu : undefined;
        } else {
            const args = argsOrState as CloudServerArgs | undefined;
            if ((!args || args.datacenter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenter'");
            }
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            resourceInputs["backups"] = args ? args.backups : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["createPublicIpAddress"] = args ? args.createPublicIpAddress : undefined;
            resourceInputs["datacenter"] = args ? args.datacenter : undefined;
            resourceInputs["disk"] = args ? args.disk : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["privateCloud"] = args ? args.privateCloud : undefined;
            resourceInputs["product"] = args ? args.product : undefined;
            resourceInputs["ram"] = args ? args.ram : undefined;
            resourceInputs["sshKeys"] = args ? args.sshKeys : undefined;
            resourceInputs["usePassword"] = args ? args.usePassword : undefined;
            resourceInputs["vcpu"] = args ? args.vcpu : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["ips"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudServer resources.
 */
export interface CloudServerState {
    backups?: pulumi.Input<boolean>;
    clusterId?: pulumi.Input<string>;
    createPublicIpAddress?: pulumi.Input<boolean>;
    createdAt?: pulumi.Input<string>;
    datacenter?: pulumi.Input<string>;
    disk?: pulumi.Input<number>;
    image?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.CloudServerIp>[]>;
    name?: pulumi.Input<string>;
    nodeId?: pulumi.Input<string>;
    plan?: pulumi.Input<string>;
    privateCloud?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    product?: pulumi.Input<string>;
    ram?: pulumi.Input<number>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
    usePassword?: pulumi.Input<boolean>;
    vcpu?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CloudServer resource.
 */
export interface CloudServerArgs {
    backups?: pulumi.Input<boolean>;
    clusterId?: pulumi.Input<string>;
    createPublicIpAddress?: pulumi.Input<boolean>;
    datacenter: pulumi.Input<string>;
    disk?: pulumi.Input<number>;
    image: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeId?: pulumi.Input<string>;
    plan?: pulumi.Input<string>;
    privateCloud?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    product?: pulumi.Input<string>;
    ram?: pulumi.Input<number>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    usePassword?: pulumi.Input<boolean>;
    vcpu?: pulumi.Input<number>;
}
