// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer {
        return new LoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ah:index/loadBalancer:LoadBalancer';

    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }

    public readonly backendNodes!: pulumi.Output<outputs.LoadBalancerBackendNode[] | undefined>;
    public readonly balancingAlgorithm!: pulumi.Output<string | undefined>;
    public readonly createPublicIpAddress!: pulumi.Output<boolean | undefined>;
    public readonly datacenter!: pulumi.Output<string>;
    public readonly forwardingRules!: pulumi.Output<outputs.LoadBalancerForwardingRule[] | undefined>;
    public readonly healthCheck!: pulumi.Output<outputs.LoadBalancerHealthCheck | undefined>;
    public readonly ipAddresses!: pulumi.Output<outputs.LoadBalancerIpAddress[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly privateNetworks!: pulumi.Output<outputs.LoadBalancerPrivateNetwork[] | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerState | undefined;
            resourceInputs["backendNodes"] = state ? state.backendNodes : undefined;
            resourceInputs["balancingAlgorithm"] = state ? state.balancingAlgorithm : undefined;
            resourceInputs["createPublicIpAddress"] = state ? state.createPublicIpAddress : undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["forwardingRules"] = state ? state.forwardingRules : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateNetworks"] = state ? state.privateNetworks : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            if ((!args || args.datacenter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenter'");
            }
            resourceInputs["backendNodes"] = args ? args.backendNodes : undefined;
            resourceInputs["balancingAlgorithm"] = args ? args.balancingAlgorithm : undefined;
            resourceInputs["createPublicIpAddress"] = args ? args.createPublicIpAddress : undefined;
            resourceInputs["datacenter"] = args ? args.datacenter : undefined;
            resourceInputs["forwardingRules"] = args ? args.forwardingRules : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["ipAddresses"] = args ? args.ipAddresses : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateNetworks"] = args ? args.privateNetworks : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    backendNodes?: pulumi.Input<pulumi.Input<inputs.LoadBalancerBackendNode>[]>;
    balancingAlgorithm?: pulumi.Input<string>;
    createPublicIpAddress?: pulumi.Input<boolean>;
    datacenter?: pulumi.Input<string>;
    forwardingRules?: pulumi.Input<pulumi.Input<inputs.LoadBalancerForwardingRule>[]>;
    healthCheck?: pulumi.Input<inputs.LoadBalancerHealthCheck>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.LoadBalancerIpAddress>[]>;
    name?: pulumi.Input<string>;
    privateNetworks?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPrivateNetwork>[]>;
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    backendNodes?: pulumi.Input<pulumi.Input<inputs.LoadBalancerBackendNode>[]>;
    balancingAlgorithm?: pulumi.Input<string>;
    createPublicIpAddress?: pulumi.Input<boolean>;
    datacenter: pulumi.Input<string>;
    forwardingRules?: pulumi.Input<pulumi.Input<inputs.LoadBalancerForwardingRule>[]>;
    healthCheck?: pulumi.Input<inputs.LoadBalancerHealthCheck>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.LoadBalancerIpAddress>[]>;
    name?: pulumi.Input<string>;
    privateNetworks?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPrivateNetwork>[]>;
}
