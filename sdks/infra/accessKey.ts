// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AccessKey extends pulumi.CustomResource {
    /**
     * Get an existing AccessKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessKeyState, opts?: pulumi.CustomResourceOptions): AccessKey {
        return new AccessKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infra:index/accessKey:AccessKey';

    /**
     * Returns true if the given object is an instance of AccessKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessKey.__pulumiType;
    }

    /**
     * The date-time when the access key will expire. Format is a RFC3339 timestamp, e.g. "2006-01-02T15:04:05Z07:00." Cannot
     * be used with `expires_in`.
     */
    public readonly expiresAt!: pulumi.Output<string>;
    /**
     * The total amount of time before the access key expires. Format is a duration string, a sequence of decimal numbers, each
     * with optional fraction and a unit suffix, such as "300s" or "2h45m". Valid time units are "s", "m", "h". Default is
     * 8766h0m0s. Cannot be used with `expires_at`.
     */
    public readonly expiresIn!: pulumi.Output<string>;
    /**
     * The amount of time before the access key expires if left unused. If the access key is used before it expires, it will be
     * renewed for the same duration. Format is a duration string, a sequence of decimal numbers, each with optional fraction
     * and a unit suffix, such as "300s" or "2h45m". Valid time units are "s", "m", "h". If value is greater than or equal to
     * the remaining lifetime of the access key, the access key will not be renewed. Default is 72h0m0s.
     */
    public readonly inactivityTimeout!: pulumi.Output<string>;
    /**
     * The access key's name. If omitted, a name will be automatically generated. Identity provider names may include letters
     * (uppercase and lowercase), numbers, underscores `_`, hyphens `-`, and periods `.`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The access key secret.
     */
    public /*out*/ readonly secret!: pulumi.Output<string>;

    /**
     * Create a AccessKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AccessKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessKeyArgs | AccessKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessKeyState | undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["expiresIn"] = state ? state.expiresIn : undefined;
            resourceInputs["inactivityTimeout"] = state ? state.inactivityTimeout : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
        } else {
            const args = argsOrState as AccessKeyArgs | undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["expiresIn"] = args ? args.expiresIn : undefined;
            resourceInputs["inactivityTimeout"] = args ? args.inactivityTimeout : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AccessKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AccessKey resources.
 */
export interface AccessKeyState {
    /**
     * The date-time when the access key will expire. Format is a RFC3339 timestamp, e.g. "2006-01-02T15:04:05Z07:00." Cannot
     * be used with `expires_in`.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The total amount of time before the access key expires. Format is a duration string, a sequence of decimal numbers, each
     * with optional fraction and a unit suffix, such as "300s" or "2h45m". Valid time units are "s", "m", "h". Default is
     * 8766h0m0s. Cannot be used with `expires_at`.
     */
    expiresIn?: pulumi.Input<string>;
    /**
     * The amount of time before the access key expires if left unused. If the access key is used before it expires, it will be
     * renewed for the same duration. Format is a duration string, a sequence of decimal numbers, each with optional fraction
     * and a unit suffix, such as "300s" or "2h45m". Valid time units are "s", "m", "h". If value is greater than or equal to
     * the remaining lifetime of the access key, the access key will not be renewed. Default is 72h0m0s.
     */
    inactivityTimeout?: pulumi.Input<string>;
    /**
     * The access key's name. If omitted, a name will be automatically generated. Identity provider names may include letters
     * (uppercase and lowercase), numbers, underscores `_`, hyphens `-`, and periods `.`.
     */
    name?: pulumi.Input<string>;
    /**
     * The access key secret.
     */
    secret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessKey resource.
 */
export interface AccessKeyArgs {
    /**
     * The date-time when the access key will expire. Format is a RFC3339 timestamp, e.g. "2006-01-02T15:04:05Z07:00." Cannot
     * be used with `expires_in`.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The total amount of time before the access key expires. Format is a duration string, a sequence of decimal numbers, each
     * with optional fraction and a unit suffix, such as "300s" or "2h45m". Valid time units are "s", "m", "h". Default is
     * 8766h0m0s. Cannot be used with `expires_at`.
     */
    expiresIn?: pulumi.Input<string>;
    /**
     * The amount of time before the access key expires if left unused. If the access key is used before it expires, it will be
     * renewed for the same duration. Format is a duration string, a sequence of decimal numbers, each with optional fraction
     * and a unit suffix, such as "300s" or "2h45m". Valid time units are "s", "m", "h". If value is greater than or equal to
     * the remaining lifetime of the access key, the access key will not be renewed. Default is 72h0m0s.
     */
    inactivityTimeout?: pulumi.Input<string>;
    /**
     * The access key's name. If omitted, a name will be automatically generated. Identity provider names may include letters
     * (uppercase and lowercase), numbers, underscores `_`, hyphens `-`, and periods `.`.
     */
    name?: pulumi.Input<string>;
}
