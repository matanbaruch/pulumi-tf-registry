// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessKeyArgs, AccessKeyState } from "./accessKey";
export type AccessKey = import("./accessKey").AccessKey;
export const AccessKey: typeof import("./accessKey").AccessKey = null as any;
utilities.lazyLoad(exports, ["AccessKey"], () => require("./accessKey"));

export { GetDestinationsArgs, GetDestinationsResult, GetDestinationsOutputArgs } from "./getDestinations";
export const getDestinations: typeof import("./getDestinations").getDestinations = null as any;
export const getDestinationsOutput: typeof import("./getDestinations").getDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getDestinations","getDestinationsOutput"], () => require("./getDestinations"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GrantArgs, GrantState } from "./grant";
export type Grant = import("./grant").Grant;
export const Grant: typeof import("./grant").Grant = null as any;
utilities.lazyLoad(exports, ["Grant"], () => require("./grant"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMembershipArgs, GroupMembershipState } from "./groupMembership";
export type GroupMembership = import("./groupMembership").GroupMembership;
export const GroupMembership: typeof import("./groupMembership").GroupMembership = null as any;
utilities.lazyLoad(exports, ["GroupMembership"], () => require("./groupMembership"));

export { IdentityProviderArgs, IdentityProviderState } from "./identityProvider";
export type IdentityProvider = import("./identityProvider").IdentityProvider;
export const IdentityProvider: typeof import("./identityProvider").IdentityProvider = null as any;
utilities.lazyLoad(exports, ["IdentityProvider"], () => require("./identityProvider"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "infra:index/accessKey:AccessKey":
                return new AccessKey(name, <any>undefined, { urn })
            case "infra:index/grant:Grant":
                return new Grant(name, <any>undefined, { urn })
            case "infra:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "infra:index/groupMembership:GroupMembership":
                return new GroupMembership(name, <any>undefined, { urn })
            case "infra:index/identityProvider:IdentityProvider":
                return new IdentityProvider(name, <any>undefined, { urn })
            case "infra:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("infra", "index/accessKey", _module)
pulumi.runtime.registerResourceModule("infra", "index/grant", _module)
pulumi.runtime.registerResourceModule("infra", "index/group", _module)
pulumi.runtime.registerResourceModule("infra", "index/groupMembership", _module)
pulumi.runtime.registerResourceModule("infra", "index/identityProvider", _module)
pulumi.runtime.registerResourceModule("infra", "index/user", _module)
pulumi.runtime.registerResourcePackage("infra", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:infra") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
