// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PrivateEndpointRegistration extends pulumi.CustomResource {
    /**
     * Get an existing PrivateEndpointRegistration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateEndpointRegistrationState, opts?: pulumi.CustomResourceOptions): PrivateEndpointRegistration {
        return new PrivateEndpointRegistration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'clickhouse:index/privateEndpointRegistration:PrivateEndpointRegistration';

    /**
     * Returns true if the given object is an instance of PrivateEndpointRegistration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateEndpointRegistration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateEndpointRegistration.__pulumiType;
    }

    /**
     * Cloud provider of the private endpoint ID
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * Description of the private endpoint
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * ID of the private endpoint (replaces deprecated attribute `id`)
     */
    public readonly privateEndpointId!: pulumi.Output<string>;
    /**
     * Region of the private endpoint
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a PrivateEndpointRegistration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateEndpointRegistrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateEndpointRegistrationArgs | PrivateEndpointRegistrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateEndpointRegistrationState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["privateEndpointId"] = state ? state.privateEndpointId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as PrivateEndpointRegistrationArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.privateEndpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateEndpointId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["privateEndpointId"] = args ? args.privateEndpointId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivateEndpointRegistration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PrivateEndpointRegistration resources.
 */
export interface PrivateEndpointRegistrationState {
    /**
     * Cloud provider of the private endpoint ID
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Description of the private endpoint
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the private endpoint (replaces deprecated attribute `id`)
     */
    privateEndpointId?: pulumi.Input<string>;
    /**
     * Region of the private endpoint
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PrivateEndpointRegistration resource.
 */
export interface PrivateEndpointRegistrationArgs {
    /**
     * Cloud provider of the private endpoint ID
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Description of the private endpoint
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the private endpoint (replaces deprecated attribute `id`)
     */
    privateEndpointId: pulumi.Input<string>;
    /**
     * Region of the private endpoint
     */
    region: pulumi.Input<string>;
}
