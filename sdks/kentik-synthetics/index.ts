// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetAgentArgs, GetAgentResult, GetAgentOutputArgs } from "./getAgent";
export const getAgent: typeof import("./getAgent").getAgent = null as any;
export const getAgentOutput: typeof import("./getAgent").getAgentOutput = null as any;
utilities.lazyLoad(exports, ["getAgent","getAgentOutput"], () => require("./getAgent"));

export { GetAgentsArgs, GetAgentsResult, GetAgentsOutputArgs } from "./getAgents";
export const getAgents: typeof import("./getAgents").getAgents = null as any;
export const getAgentsOutput: typeof import("./getAgents").getAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getAgents","getAgentsOutput"], () => require("./getAgents"));

export { GetTestArgs, GetTestResult, GetTestOutputArgs } from "./getTest";
export const getTest: typeof import("./getTest").getTest = null as any;
export const getTestOutput: typeof import("./getTest").getTestOutput = null as any;
utilities.lazyLoad(exports, ["getTest","getTestOutput"], () => require("./getTest"));

export { GetTestsArgs, GetTestsResult, GetTestsOutputArgs } from "./getTests";
export const getTests: typeof import("./getTests").getTests = null as any;
export const getTestsOutput: typeof import("./getTests").getTestsOutput = null as any;
utilities.lazyLoad(exports, ["getTests","getTestsOutput"], () => require("./getTests"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TestArgs, TestState } from "./test";
export type Test = import("./test").Test;
export const Test: typeof import("./test").Test = null as any;
utilities.lazyLoad(exports, ["Test"], () => require("./test"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kentik-synthetics:index/test:Test":
                return new Test(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kentik-synthetics", "index/test", _module)
pulumi.runtime.registerResourcePackage("kentik-synthetics", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kentik-synthetics") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
