// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Test extends pulumi.CustomResource {
    /**
     * Get an existing Test resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TestState, opts?: pulumi.CustomResourceOptions): Test {
        return new Test(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kentik-synthetics:index/test:Test';

    /**
     * Returns true if the given object is an instance of Test.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Test {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Test.__pulumiType;
    }

    public /*out*/ readonly cdate!: pulumi.Output<string>;
    public /*out*/ readonly createdBies!: pulumi.Output<outputs.TestCreatedBy[]>;
    public /*out*/ readonly edate!: pulumi.Output<string>;
    public /*out*/ readonly expiresOn!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdatedBies!: pulumi.Output<outputs.TestLastUpdatedBy[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly settings!: pulumi.Output<outputs.TestSetting[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Test resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TestArgs | TestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TestState | undefined;
            resourceInputs["cdate"] = state ? state.cdate : undefined;
            resourceInputs["createdBies"] = state ? state.createdBies : undefined;
            resourceInputs["edate"] = state ? state.edate : undefined;
            resourceInputs["expiresOn"] = state ? state.expiresOn : undefined;
            resourceInputs["lastUpdatedBies"] = state ? state.lastUpdatedBies : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as TestArgs | undefined;
            if ((!args || args.settings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settings'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["cdate"] = undefined /*out*/;
            resourceInputs["createdBies"] = undefined /*out*/;
            resourceInputs["edate"] = undefined /*out*/;
            resourceInputs["expiresOn"] = undefined /*out*/;
            resourceInputs["lastUpdatedBies"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Test.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Test resources.
 */
export interface TestState {
    cdate?: pulumi.Input<string>;
    createdBies?: pulumi.Input<pulumi.Input<inputs.TestCreatedBy>[]>;
    edate?: pulumi.Input<string>;
    expiresOn?: pulumi.Input<string>;
    lastUpdatedBies?: pulumi.Input<pulumi.Input<inputs.TestLastUpdatedBy>[]>;
    name?: pulumi.Input<string>;
    settings?: pulumi.Input<pulumi.Input<inputs.TestSetting>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Test resource.
 */
export interface TestArgs {
    name?: pulumi.Input<string>;
    settings: pulumi.Input<pulumi.Input<inputs.TestSetting>[]>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
