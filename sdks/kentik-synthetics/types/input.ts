// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ProviderRetry {
    /**
     * Maximum number of request retry attempts. Minimum valid value: 1 (0 fallbacks to default). Default: 100. Can also be specified with KTAPI_RETRY_MAX_ATTEMPTS environment variable.
     */
    maxAttempts?: pulumi.Input<number>;
    /**
     * Maximum delay before request retry. Expected Go time duration format, e.g. 1s (see: <https://pkg.go.dev/time#ParseDuration>). Default: 5m (5 minutes). Can also be specified with KTAPI_RETRY_MAX_DELAY environment variable.
     */
    maxDelay?: pulumi.Input<string>;
    /**
     * Minimum delay before request retry. Expected Go time duration format, e.g. 1s (see: <https://pkg.go.dev/time#ParseDuration>). Default: 1s (1 second). Can also be specified with KTAPI_RETRY_MIN_DELAY environment variable.
     */
    minDelay?: pulumi.Input<string>;
}

export interface TestCreatedBy {
    email: pulumi.Input<string>;
    fullName: pulumi.Input<string>;
    id: pulumi.Input<string>;
}

export interface TestLastUpdatedBy {
    email: pulumi.Input<string>;
    fullName: pulumi.Input<string>;
    id: pulumi.Input<string>;
}

export interface TestSetting {
    agentIds: pulumi.Input<pulumi.Input<string>[]>;
    agents?: pulumi.Input<pulumi.Input<inputs.TestSettingAgent>[]>;
    count?: pulumi.Input<number>;
    dns?: pulumi.Input<pulumi.Input<inputs.TestSettingDn>[]>;
    dnsGrids?: pulumi.Input<pulumi.Input<inputs.TestSettingDnsGrid>[]>;
    expiry?: pulumi.Input<number>;
    family: pulumi.Input<string>;
    flows?: pulumi.Input<pulumi.Input<inputs.TestSettingFlow>[]>;
    healthSettings?: pulumi.Input<pulumi.Input<inputs.TestSettingHealthSetting>[]>;
    hostnames?: pulumi.Input<pulumi.Input<inputs.TestSettingHostname>[]>;
    https?: pulumi.Input<pulumi.Input<inputs.TestSettingHttp>[]>;
    ips?: pulumi.Input<pulumi.Input<inputs.TestSettingIp>[]>;
    limit?: pulumi.Input<number>;
    monitoringSettings?: pulumi.Input<pulumi.Input<inputs.TestSettingMonitoringSetting>[]>;
    networkGrids?: pulumi.Input<pulumi.Input<inputs.TestSettingNetworkGrid>[]>;
    pageLoads?: pulumi.Input<pulumi.Input<inputs.TestSettingPageLoad>[]>;
    period?: pulumi.Input<number>;
    pings?: pulumi.Input<pulumi.Input<inputs.TestSettingPing>[]>;
    port?: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    rollupLevel: pulumi.Input<number>;
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    sites?: pulumi.Input<pulumi.Input<inputs.TestSettingSite>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.TestSettingTag>[]>;
    tasks: pulumi.Input<pulumi.Input<string>[]>;
    traces: pulumi.Input<pulumi.Input<inputs.TestSettingTrace>[]>;
    urls?: pulumi.Input<pulumi.Input<inputs.TestSettingUrl>[]>;
}

export interface TestSettingAgent {
    target: pulumi.Input<string>;
}

export interface TestSettingDn {
    target: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface TestSettingDnsGrid {
    targets: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
}

export interface TestSettingFlow {
    direction?: pulumi.Input<string>;
    inetDirection?: pulumi.Input<string>;
    maxTasks?: pulumi.Input<number>;
    target: pulumi.Input<string>;
    targetRefreshIntervalMillis?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface TestSettingHealthSetting {
    dnsValidCodes?: pulumi.Input<pulumi.Input<number>[]>;
    httpLatencyCritical?: pulumi.Input<number>;
    httpLatencyCriticalStddev?: pulumi.Input<number>;
    httpLatencyWarning?: pulumi.Input<number>;
    httpLatencyWarningStddev?: pulumi.Input<number>;
    httpValidCodes?: pulumi.Input<pulumi.Input<number>[]>;
    jitterCritical?: pulumi.Input<number>;
    jitterCriticalStddev?: pulumi.Input<number>;
    jitterWarning?: pulumi.Input<number>;
    jitterWarningStddev?: pulumi.Input<number>;
    latencyCritical?: pulumi.Input<number>;
    latencyCriticalStddev?: pulumi.Input<number>;
    latencyWarning?: pulumi.Input<number>;
    latencyWarningStddev?: pulumi.Input<number>;
    packetLossCritical?: pulumi.Input<number>;
    packetLossWarning?: pulumi.Input<number>;
}

export interface TestSettingHostname {
    target: pulumi.Input<string>;
}

export interface TestSettingHttp {
    body?: pulumi.Input<string>;
    cssSelectors?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    expiry?: pulumi.Input<number>;
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ignoreTlsErrors?: pulumi.Input<boolean>;
    method?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
}

export interface TestSettingIp {
    targets: pulumi.Input<pulumi.Input<string>[]>;
}

export interface TestSettingMonitoringSetting {
    notificationChannels?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface TestSettingNetworkGrid {
    targets: pulumi.Input<pulumi.Input<string>[]>;
}

export interface TestSettingPageLoad {
    target: pulumi.Input<string>;
}

export interface TestSettingPing {
    count?: pulumi.Input<number>;
    delay?: pulumi.Input<number>;
    expiry?: pulumi.Input<number>;
    period: pulumi.Input<number>;
}

export interface TestSettingSite {
    target: pulumi.Input<string>;
}

export interface TestSettingTag {
    target: pulumi.Input<string>;
}

export interface TestSettingTrace {
    count?: pulumi.Input<number>;
    delay?: pulumi.Input<number>;
    expiry?: pulumi.Input<number>;
    limit?: pulumi.Input<number>;
    period: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
}

export interface TestSettingUrl {
    target: pulumi.Input<string>;
}
export namespace config {
}
