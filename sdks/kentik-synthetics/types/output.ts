// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetAgentsItem {
    agentImpl: string;
    alias: string;
    asn: number;
    city: string;
    cloudVpc: string;
    country: string;
    family: string;
    id: string;
    ip: string;
    lastAuthed: string;
    lat: number;
    localIp: string;
    long: number;
    name: string;
    os: string;
    region: string;
    siteId: string;
    status: string;
    testIds: string[];
    type: string;
    version: string;
}

export interface GetTestCreatedBy {
    email: string;
    fullName: string;
    id: string;
}

export interface GetTestLastUpdatedBy {
    email: string;
    fullName: string;
    id: string;
}

export interface GetTestSetting {
    agentIds: string[];
    agents: outputs.GetTestSettingAgent[];
    count: number;
    dns: outputs.GetTestSettingDn[];
    dnsGrids: outputs.GetTestSettingDnsGrid[];
    expiry: number;
    family: string;
    flows: outputs.GetTestSettingFlow[];
    healthSettings: outputs.GetTestSettingHealthSetting[];
    hostnames: outputs.GetTestSettingHostname[];
    https: outputs.GetTestSettingHttp[];
    ips: outputs.GetTestSettingIp[];
    limit: number;
    monitoringSettings: outputs.GetTestSettingMonitoringSetting[];
    networkGrids: outputs.GetTestSettingNetworkGrid[];
    pageLoads: outputs.GetTestSettingPageLoad[];
    period: number;
    pings: outputs.GetTestSettingPing[];
    port: number;
    protocol: string;
    rollupLevel: number;
    servers: string[];
    sites: outputs.GetTestSettingSite[];
    tags: outputs.GetTestSettingTag[];
    tasks: string[];
    traces: outputs.GetTestSettingTrace[];
    urls: outputs.GetTestSettingUrl[];
}

export interface GetTestSettingAgent {
    target: string;
}

export interface GetTestSettingDn {
    target: string;
    type: string;
}

export interface GetTestSettingDnsGrid {
    targets: string[];
    type: string;
}

export interface GetTestSettingFlow {
    direction: string;
    inetDirection: string;
    maxTasks: number;
    target: string;
    targetRefreshIntervalMillis: number;
    type: string;
}

export interface GetTestSettingHealthSetting {
    dnsValidCodes: number[];
    httpLatencyCritical: number;
    httpLatencyCriticalStddev: number;
    httpLatencyWarning: number;
    httpLatencyWarningStddev: number;
    httpValidCodes: number[];
    jitterCritical: number;
    jitterCriticalStddev: number;
    jitterWarning: number;
    jitterWarningStddev: number;
    latencyCritical: number;
    latencyCriticalStddev: number;
    latencyWarning: number;
    latencyWarningStddev: number;
    packetLossCritical: number;
    packetLossWarning: number;
}

export interface GetTestSettingHostname {
    target: string;
}

export interface GetTestSettingHttp {
    body: string;
    cssSelectors: {[key: string]: string};
    expiry: number;
    headers: {[key: string]: string};
    ignoreTlsErrors: boolean;
    method: string;
    period: number;
}

export interface GetTestSettingIp {
    targets: string[];
}

export interface GetTestSettingMonitoringSetting {
    notificationChannels: string[];
}

export interface GetTestSettingNetworkGrid {
    targets: string[];
}

export interface GetTestSettingPageLoad {
    target: string;
}

export interface GetTestSettingPing {
    count: number;
    delay: number;
    expiry: number;
    period: number;
}

export interface GetTestSettingSite {
    target: string;
}

export interface GetTestSettingTag {
    target: string;
}

export interface GetTestSettingTrace {
    count: number;
    delay: number;
    expiry: number;
    limit: number;
    period: number;
    port: number;
    protocol: string;
}

export interface GetTestSettingUrl {
    target: string;
}

export interface GetTestsItem {
    cdate: string;
    createdBies: outputs.GetTestsItemCreatedBy[];
    edate: string;
    expiresOn: string;
    id: string;
    lastUpdatedBies: outputs.GetTestsItemLastUpdatedBy[];
    name: string;
    settings: outputs.GetTestsItemSetting[];
    status: string;
    type: string;
}

export interface GetTestsItemCreatedBy {
    email: string;
    fullName: string;
    id: string;
}

export interface GetTestsItemLastUpdatedBy {
    email: string;
    fullName: string;
    id: string;
}

export interface GetTestsItemSetting {
    agentIds: string[];
    agents: outputs.GetTestsItemSettingAgent[];
    count: number;
    dns: outputs.GetTestsItemSettingDn[];
    dnsGrids: outputs.GetTestsItemSettingDnsGrid[];
    expiry: number;
    family: string;
    flows: outputs.GetTestsItemSettingFlow[];
    healthSettings: outputs.GetTestsItemSettingHealthSetting[];
    hostnames: outputs.GetTestsItemSettingHostname[];
    https: outputs.GetTestsItemSettingHttp[];
    ips: outputs.GetTestsItemSettingIp[];
    limit: number;
    monitoringSettings: outputs.GetTestsItemSettingMonitoringSetting[];
    networkGrids: outputs.GetTestsItemSettingNetworkGrid[];
    pageLoads: outputs.GetTestsItemSettingPageLoad[];
    period: number;
    pings: outputs.GetTestsItemSettingPing[];
    port: number;
    protocol: string;
    rollupLevel: number;
    servers: string[];
    sites: outputs.GetTestsItemSettingSite[];
    tags: outputs.GetTestsItemSettingTag[];
    tasks: string[];
    traces: outputs.GetTestsItemSettingTrace[];
    urls: outputs.GetTestsItemSettingUrl[];
}

export interface GetTestsItemSettingAgent {
    target: string;
}

export interface GetTestsItemSettingDn {
    target: string;
    type: string;
}

export interface GetTestsItemSettingDnsGrid {
    targets: string[];
    type: string;
}

export interface GetTestsItemSettingFlow {
    direction: string;
    inetDirection: string;
    maxTasks: number;
    target: string;
    targetRefreshIntervalMillis: number;
    type: string;
}

export interface GetTestsItemSettingHealthSetting {
    dnsValidCodes: number[];
    httpLatencyCritical: number;
    httpLatencyCriticalStddev: number;
    httpLatencyWarning: number;
    httpLatencyWarningStddev: number;
    httpValidCodes: number[];
    jitterCritical: number;
    jitterCriticalStddev: number;
    jitterWarning: number;
    jitterWarningStddev: number;
    latencyCritical: number;
    latencyCriticalStddev: number;
    latencyWarning: number;
    latencyWarningStddev: number;
    packetLossCritical: number;
    packetLossWarning: number;
}

export interface GetTestsItemSettingHostname {
    target: string;
}

export interface GetTestsItemSettingHttp {
    body: string;
    cssSelectors: {[key: string]: string};
    expiry: number;
    headers: {[key: string]: string};
    ignoreTlsErrors: boolean;
    method: string;
    period: number;
}

export interface GetTestsItemSettingIp {
    targets: string[];
}

export interface GetTestsItemSettingMonitoringSetting {
    notificationChannels: string[];
}

export interface GetTestsItemSettingNetworkGrid {
    targets: string[];
}

export interface GetTestsItemSettingPageLoad {
    target: string;
}

export interface GetTestsItemSettingPing {
    count: number;
    delay: number;
    expiry: number;
    period: number;
}

export interface GetTestsItemSettingSite {
    target: string;
}

export interface GetTestsItemSettingTag {
    target: string;
}

export interface GetTestsItemSettingTrace {
    count: number;
    delay: number;
    expiry: number;
    limit: number;
    period: number;
    port: number;
    protocol: string;
}

export interface GetTestsItemSettingUrl {
    target: string;
}

export interface TestCreatedBy {
    email: string;
    fullName: string;
    id: string;
}

export interface TestLastUpdatedBy {
    email: string;
    fullName: string;
    id: string;
}

export interface TestSetting {
    agentIds: string[];
    agents?: outputs.TestSettingAgent[];
    count?: number;
    dns?: outputs.TestSettingDn[];
    dnsGrids?: outputs.TestSettingDnsGrid[];
    expiry?: number;
    family: string;
    flows?: outputs.TestSettingFlow[];
    healthSettings?: outputs.TestSettingHealthSetting[];
    hostnames?: outputs.TestSettingHostname[];
    https?: outputs.TestSettingHttp[];
    ips?: outputs.TestSettingIp[];
    limit?: number;
    monitoringSettings?: outputs.TestSettingMonitoringSetting[];
    networkGrids?: outputs.TestSettingNetworkGrid[];
    pageLoads?: outputs.TestSettingPageLoad[];
    period?: number;
    pings?: outputs.TestSettingPing[];
    port?: number;
    protocol: string;
    rollupLevel: number;
    servers?: string[];
    sites?: outputs.TestSettingSite[];
    tags?: outputs.TestSettingTag[];
    tasks: string[];
    traces: outputs.TestSettingTrace[];
    urls?: outputs.TestSettingUrl[];
}

export interface TestSettingAgent {
    target: string;
}

export interface TestSettingDn {
    target: string;
    type?: string;
}

export interface TestSettingDnsGrid {
    targets: string[];
    type: string;
}

export interface TestSettingFlow {
    direction?: string;
    inetDirection?: string;
    maxTasks?: number;
    target: string;
    targetRefreshIntervalMillis?: number;
    type: string;
}

export interface TestSettingHealthSetting {
    dnsValidCodes?: number[];
    httpLatencyCritical?: number;
    httpLatencyCriticalStddev?: number;
    httpLatencyWarning?: number;
    httpLatencyWarningStddev?: number;
    httpValidCodes?: number[];
    jitterCritical?: number;
    jitterCriticalStddev?: number;
    jitterWarning?: number;
    jitterWarningStddev?: number;
    latencyCritical?: number;
    latencyCriticalStddev?: number;
    latencyWarning?: number;
    latencyWarningStddev?: number;
    packetLossCritical?: number;
    packetLossWarning?: number;
}

export interface TestSettingHostname {
    target: string;
}

export interface TestSettingHttp {
    body?: string;
    cssSelectors?: {[key: string]: string};
    expiry?: number;
    headers?: {[key: string]: string};
    ignoreTlsErrors?: boolean;
    method?: string;
    period?: number;
}

export interface TestSettingIp {
    targets: string[];
}

export interface TestSettingMonitoringSetting {
    notificationChannels?: string[];
}

export interface TestSettingNetworkGrid {
    targets: string[];
}

export interface TestSettingPageLoad {
    target: string;
}

export interface TestSettingPing {
    count?: number;
    delay?: number;
    expiry?: number;
    period: number;
}

export interface TestSettingSite {
    target: string;
}

export interface TestSettingTag {
    target: string;
}

export interface TestSettingTrace {
    count?: number;
    delay?: number;
    expiry?: number;
    limit?: number;
    period: number;
    port?: number;
    protocol: string;
}

export interface TestSettingUrl {
    target: string;
}

export namespace config {
    export interface Retry {
        /**
         * Maximum number of request retry attempts. Minimum valid value: 1 (0 fallbacks to default). Default: 100. Can also be specified with KTAPI_RETRY_MAX_ATTEMPTS environment variable.
         */
        maxAttempts?: number;
        /**
         * Maximum delay before request retry. Expected Go time duration format, e.g. 1s (see: <https://pkg.go.dev/time#ParseDuration>). Default: 5m (5 minutes). Can also be specified with KTAPI_RETRY_MAX_DELAY environment variable.
         */
        maxDelay?: string;
        /**
         * Minimum delay before request retry. Expected Go time duration format, e.g. 1s (see: <https://pkg.go.dev/time#ParseDuration>). Default: 1s (1 second). Can also be specified with KTAPI_RETRY_MIN_DELAY environment variable.
         */
        minDelay?: string;
    }

}
