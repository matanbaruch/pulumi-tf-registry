// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BotprofileCaptchaBinding extends pulumi.CustomResource {
    /**
     * Get an existing BotprofileCaptchaBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BotprofileCaptchaBindingState, opts?: pulumi.CustomResourceOptions): BotprofileCaptchaBinding {
        return new BotprofileCaptchaBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/botprofileCaptchaBinding:BotprofileCaptchaBinding';

    /**
     * Returns true if the given object is an instance of BotprofileCaptchaBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BotprofileCaptchaBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BotprofileCaptchaBinding.__pulumiType;
    }

    public readonly botBindComment!: pulumi.Output<string>;
    public readonly botCaptchaActions!: pulumi.Output<string[]>;
    public readonly botCaptchaEnabled!: pulumi.Output<string>;
    public readonly botCaptchaUrl!: pulumi.Output<string>;
    public readonly captcharesource!: pulumi.Output<boolean>;
    public readonly graceperiod!: pulumi.Output<number>;
    public readonly logmessage!: pulumi.Output<string>;
    public readonly muteperiod!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly requestsizelimit!: pulumi.Output<number>;
    public readonly retryattempts!: pulumi.Output<number>;
    public readonly waittime!: pulumi.Output<number>;

    /**
     * Create a BotprofileCaptchaBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BotprofileCaptchaBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BotprofileCaptchaBindingArgs | BotprofileCaptchaBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BotprofileCaptchaBindingState | undefined;
            resourceInputs["botBindComment"] = state ? state.botBindComment : undefined;
            resourceInputs["botCaptchaActions"] = state ? state.botCaptchaActions : undefined;
            resourceInputs["botCaptchaEnabled"] = state ? state.botCaptchaEnabled : undefined;
            resourceInputs["botCaptchaUrl"] = state ? state.botCaptchaUrl : undefined;
            resourceInputs["captcharesource"] = state ? state.captcharesource : undefined;
            resourceInputs["graceperiod"] = state ? state.graceperiod : undefined;
            resourceInputs["logmessage"] = state ? state.logmessage : undefined;
            resourceInputs["muteperiod"] = state ? state.muteperiod : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requestsizelimit"] = state ? state.requestsizelimit : undefined;
            resourceInputs["retryattempts"] = state ? state.retryattempts : undefined;
            resourceInputs["waittime"] = state ? state.waittime : undefined;
        } else {
            const args = argsOrState as BotprofileCaptchaBindingArgs | undefined;
            if ((!args || args.botCaptchaUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botCaptchaUrl'");
            }
            resourceInputs["botBindComment"] = args ? args.botBindComment : undefined;
            resourceInputs["botCaptchaActions"] = args ? args.botCaptchaActions : undefined;
            resourceInputs["botCaptchaEnabled"] = args ? args.botCaptchaEnabled : undefined;
            resourceInputs["botCaptchaUrl"] = args ? args.botCaptchaUrl : undefined;
            resourceInputs["captcharesource"] = args ? args.captcharesource : undefined;
            resourceInputs["graceperiod"] = args ? args.graceperiod : undefined;
            resourceInputs["logmessage"] = args ? args.logmessage : undefined;
            resourceInputs["muteperiod"] = args ? args.muteperiod : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requestsizelimit"] = args ? args.requestsizelimit : undefined;
            resourceInputs["retryattempts"] = args ? args.retryattempts : undefined;
            resourceInputs["waittime"] = args ? args.waittime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BotprofileCaptchaBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BotprofileCaptchaBinding resources.
 */
export interface BotprofileCaptchaBindingState {
    botBindComment?: pulumi.Input<string>;
    botCaptchaActions?: pulumi.Input<pulumi.Input<string>[]>;
    botCaptchaEnabled?: pulumi.Input<string>;
    botCaptchaUrl?: pulumi.Input<string>;
    captcharesource?: pulumi.Input<boolean>;
    graceperiod?: pulumi.Input<number>;
    logmessage?: pulumi.Input<string>;
    muteperiod?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    requestsizelimit?: pulumi.Input<number>;
    retryattempts?: pulumi.Input<number>;
    waittime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BotprofileCaptchaBinding resource.
 */
export interface BotprofileCaptchaBindingArgs {
    botBindComment?: pulumi.Input<string>;
    botCaptchaActions?: pulumi.Input<pulumi.Input<string>[]>;
    botCaptchaEnabled?: pulumi.Input<string>;
    botCaptchaUrl: pulumi.Input<string>;
    captcharesource?: pulumi.Input<boolean>;
    graceperiod?: pulumi.Input<number>;
    logmessage?: pulumi.Input<string>;
    muteperiod?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    requestsizelimit?: pulumi.Input<number>;
    retryattempts?: pulumi.Input<number>;
    waittime?: pulumi.Input<number>;
}
