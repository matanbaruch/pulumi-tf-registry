// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sslaction extends pulumi.CustomResource {
    /**
     * Get an existing Sslaction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslactionState, opts?: pulumi.CustomResourceOptions): Sslaction {
        return new Sslaction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/sslaction:Sslaction';

    /**
     * Returns true if the given object is an instance of Sslaction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sslaction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sslaction.__pulumiType;
    }

    public readonly cacertgrpname!: pulumi.Output<string>;
    public readonly certfingerprintdigest!: pulumi.Output<string>;
    public readonly certfingerprintheader!: pulumi.Output<string>;
    public readonly certhashheader!: pulumi.Output<string>;
    public readonly certheader!: pulumi.Output<string>;
    public readonly certissuerheader!: pulumi.Output<string>;
    public readonly certnotafterheader!: pulumi.Output<string>;
    public readonly certnotbeforeheader!: pulumi.Output<string>;
    public readonly certserialheader!: pulumi.Output<string>;
    public readonly certsubjectheader!: pulumi.Output<string>;
    public readonly cipher!: pulumi.Output<string>;
    public readonly cipherheader!: pulumi.Output<string>;
    public readonly clientauth!: pulumi.Output<string>;
    public readonly clientcert!: pulumi.Output<string>;
    public readonly clientcertfingerprint!: pulumi.Output<string>;
    public readonly clientcerthash!: pulumi.Output<string>;
    public readonly clientcertissuer!: pulumi.Output<string>;
    public readonly clientcertnotafter!: pulumi.Output<string>;
    public readonly clientcertnotbefore!: pulumi.Output<string>;
    public readonly clientcertserialnumber!: pulumi.Output<string>;
    public readonly clientcertsubject!: pulumi.Output<string>;
    public readonly clientcertverification!: pulumi.Output<string>;
    public readonly forward!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly owasupport!: pulumi.Output<string>;
    public readonly sessionid!: pulumi.Output<string>;
    public readonly sessionidheader!: pulumi.Output<string>;
    public readonly ssllogprofile!: pulumi.Output<string>;

    /**
     * Create a Sslaction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SslactionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslactionArgs | SslactionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslactionState | undefined;
            resourceInputs["cacertgrpname"] = state ? state.cacertgrpname : undefined;
            resourceInputs["certfingerprintdigest"] = state ? state.certfingerprintdigest : undefined;
            resourceInputs["certfingerprintheader"] = state ? state.certfingerprintheader : undefined;
            resourceInputs["certhashheader"] = state ? state.certhashheader : undefined;
            resourceInputs["certheader"] = state ? state.certheader : undefined;
            resourceInputs["certissuerheader"] = state ? state.certissuerheader : undefined;
            resourceInputs["certnotafterheader"] = state ? state.certnotafterheader : undefined;
            resourceInputs["certnotbeforeheader"] = state ? state.certnotbeforeheader : undefined;
            resourceInputs["certserialheader"] = state ? state.certserialheader : undefined;
            resourceInputs["certsubjectheader"] = state ? state.certsubjectheader : undefined;
            resourceInputs["cipher"] = state ? state.cipher : undefined;
            resourceInputs["cipherheader"] = state ? state.cipherheader : undefined;
            resourceInputs["clientauth"] = state ? state.clientauth : undefined;
            resourceInputs["clientcert"] = state ? state.clientcert : undefined;
            resourceInputs["clientcertfingerprint"] = state ? state.clientcertfingerprint : undefined;
            resourceInputs["clientcerthash"] = state ? state.clientcerthash : undefined;
            resourceInputs["clientcertissuer"] = state ? state.clientcertissuer : undefined;
            resourceInputs["clientcertnotafter"] = state ? state.clientcertnotafter : undefined;
            resourceInputs["clientcertnotbefore"] = state ? state.clientcertnotbefore : undefined;
            resourceInputs["clientcertserialnumber"] = state ? state.clientcertserialnumber : undefined;
            resourceInputs["clientcertsubject"] = state ? state.clientcertsubject : undefined;
            resourceInputs["clientcertverification"] = state ? state.clientcertverification : undefined;
            resourceInputs["forward"] = state ? state.forward : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owasupport"] = state ? state.owasupport : undefined;
            resourceInputs["sessionid"] = state ? state.sessionid : undefined;
            resourceInputs["sessionidheader"] = state ? state.sessionidheader : undefined;
            resourceInputs["ssllogprofile"] = state ? state.ssllogprofile : undefined;
        } else {
            const args = argsOrState as SslactionArgs | undefined;
            resourceInputs["cacertgrpname"] = args ? args.cacertgrpname : undefined;
            resourceInputs["certfingerprintdigest"] = args ? args.certfingerprintdigest : undefined;
            resourceInputs["certfingerprintheader"] = args ? args.certfingerprintheader : undefined;
            resourceInputs["certhashheader"] = args ? args.certhashheader : undefined;
            resourceInputs["certheader"] = args ? args.certheader : undefined;
            resourceInputs["certissuerheader"] = args ? args.certissuerheader : undefined;
            resourceInputs["certnotafterheader"] = args ? args.certnotafterheader : undefined;
            resourceInputs["certnotbeforeheader"] = args ? args.certnotbeforeheader : undefined;
            resourceInputs["certserialheader"] = args ? args.certserialheader : undefined;
            resourceInputs["certsubjectheader"] = args ? args.certsubjectheader : undefined;
            resourceInputs["cipher"] = args ? args.cipher : undefined;
            resourceInputs["cipherheader"] = args ? args.cipherheader : undefined;
            resourceInputs["clientauth"] = args ? args.clientauth : undefined;
            resourceInputs["clientcert"] = args ? args.clientcert : undefined;
            resourceInputs["clientcertfingerprint"] = args ? args.clientcertfingerprint : undefined;
            resourceInputs["clientcerthash"] = args ? args.clientcerthash : undefined;
            resourceInputs["clientcertissuer"] = args ? args.clientcertissuer : undefined;
            resourceInputs["clientcertnotafter"] = args ? args.clientcertnotafter : undefined;
            resourceInputs["clientcertnotbefore"] = args ? args.clientcertnotbefore : undefined;
            resourceInputs["clientcertserialnumber"] = args ? args.clientcertserialnumber : undefined;
            resourceInputs["clientcertsubject"] = args ? args.clientcertsubject : undefined;
            resourceInputs["clientcertverification"] = args ? args.clientcertverification : undefined;
            resourceInputs["forward"] = args ? args.forward : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owasupport"] = args ? args.owasupport : undefined;
            resourceInputs["sessionid"] = args ? args.sessionid : undefined;
            resourceInputs["sessionidheader"] = args ? args.sessionidheader : undefined;
            resourceInputs["ssllogprofile"] = args ? args.ssllogprofile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sslaction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sslaction resources.
 */
export interface SslactionState {
    cacertgrpname?: pulumi.Input<string>;
    certfingerprintdigest?: pulumi.Input<string>;
    certfingerprintheader?: pulumi.Input<string>;
    certhashheader?: pulumi.Input<string>;
    certheader?: pulumi.Input<string>;
    certissuerheader?: pulumi.Input<string>;
    certnotafterheader?: pulumi.Input<string>;
    certnotbeforeheader?: pulumi.Input<string>;
    certserialheader?: pulumi.Input<string>;
    certsubjectheader?: pulumi.Input<string>;
    cipher?: pulumi.Input<string>;
    cipherheader?: pulumi.Input<string>;
    clientauth?: pulumi.Input<string>;
    clientcert?: pulumi.Input<string>;
    clientcertfingerprint?: pulumi.Input<string>;
    clientcerthash?: pulumi.Input<string>;
    clientcertissuer?: pulumi.Input<string>;
    clientcertnotafter?: pulumi.Input<string>;
    clientcertnotbefore?: pulumi.Input<string>;
    clientcertserialnumber?: pulumi.Input<string>;
    clientcertsubject?: pulumi.Input<string>;
    clientcertverification?: pulumi.Input<string>;
    forward?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owasupport?: pulumi.Input<string>;
    sessionid?: pulumi.Input<string>;
    sessionidheader?: pulumi.Input<string>;
    ssllogprofile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sslaction resource.
 */
export interface SslactionArgs {
    cacertgrpname?: pulumi.Input<string>;
    certfingerprintdigest?: pulumi.Input<string>;
    certfingerprintheader?: pulumi.Input<string>;
    certhashheader?: pulumi.Input<string>;
    certheader?: pulumi.Input<string>;
    certissuerheader?: pulumi.Input<string>;
    certnotafterheader?: pulumi.Input<string>;
    certnotbeforeheader?: pulumi.Input<string>;
    certserialheader?: pulumi.Input<string>;
    certsubjectheader?: pulumi.Input<string>;
    cipher?: pulumi.Input<string>;
    cipherheader?: pulumi.Input<string>;
    clientauth?: pulumi.Input<string>;
    clientcert?: pulumi.Input<string>;
    clientcertfingerprint?: pulumi.Input<string>;
    clientcerthash?: pulumi.Input<string>;
    clientcertissuer?: pulumi.Input<string>;
    clientcertnotafter?: pulumi.Input<string>;
    clientcertnotbefore?: pulumi.Input<string>;
    clientcertserialnumber?: pulumi.Input<string>;
    clientcertsubject?: pulumi.Input<string>;
    clientcertverification?: pulumi.Input<string>;
    forward?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owasupport?: pulumi.Input<string>;
    sessionid?: pulumi.Input<string>;
    sessionidheader?: pulumi.Input<string>;
    ssllogprofile?: pulumi.Input<string>;
}
