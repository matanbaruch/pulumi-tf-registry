// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Snmptrap extends pulumi.CustomResource {
    /**
     * Get an existing Snmptrap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmptrapState, opts?: pulumi.CustomResourceOptions): Snmptrap {
        return new Snmptrap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/snmptrap:Snmptrap';

    /**
     * Returns true if the given object is an instance of Snmptrap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snmptrap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snmptrap.__pulumiType;
    }

    public readonly allpartitions!: pulumi.Output<string>;
    public readonly communityname!: pulumi.Output<string>;
    public readonly destport!: pulumi.Output<number>;
    public readonly severity!: pulumi.Output<string>;
    public readonly srcip!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<number>;
    public readonly trapclass!: pulumi.Output<string>;
    public readonly trapdestination!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a Snmptrap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnmptrapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmptrapArgs | SnmptrapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmptrapState | undefined;
            resourceInputs["allpartitions"] = state ? state.allpartitions : undefined;
            resourceInputs["communityname"] = state ? state.communityname : undefined;
            resourceInputs["destport"] = state ? state.destport : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["srcip"] = state ? state.srcip : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["trapclass"] = state ? state.trapclass : undefined;
            resourceInputs["trapdestination"] = state ? state.trapdestination : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SnmptrapArgs | undefined;
            if ((!args || args.trapclass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trapclass'");
            }
            if ((!args || args.trapdestination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trapdestination'");
            }
            resourceInputs["allpartitions"] = args ? args.allpartitions : undefined;
            resourceInputs["communityname"] = args ? args.communityname : undefined;
            resourceInputs["destport"] = args ? args.destport : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["srcip"] = args ? args.srcip : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["trapclass"] = args ? args.trapclass : undefined;
            resourceInputs["trapdestination"] = args ? args.trapdestination : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snmptrap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snmptrap resources.
 */
export interface SnmptrapState {
    allpartitions?: pulumi.Input<string>;
    communityname?: pulumi.Input<string>;
    destport?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    srcip?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    trapclass?: pulumi.Input<string>;
    trapdestination?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Snmptrap resource.
 */
export interface SnmptrapArgs {
    allpartitions?: pulumi.Input<string>;
    communityname?: pulumi.Input<string>;
    destport?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    srcip?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    trapclass: pulumi.Input<string>;
    trapdestination: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
