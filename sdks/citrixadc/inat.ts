// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Inat extends pulumi.CustomResource {
    /**
     * Get an existing Inat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InatState, opts?: pulumi.CustomResourceOptions): Inat {
        return new Inat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/inat:Inat';

    /**
     * Returns true if the given object is an instance of Inat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Inat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Inat.__pulumiType;
    }

    public readonly ftp!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly privateip!: pulumi.Output<string>;
    public readonly proxyip!: pulumi.Output<string>;
    public readonly publicip!: pulumi.Output<string>;
    public readonly tcpproxy!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<number>;
    public readonly tftp!: pulumi.Output<string>;
    public readonly useproxyport!: pulumi.Output<string>;
    public readonly usip!: pulumi.Output<string>;
    public readonly usnip!: pulumi.Output<string>;

    /**
     * Create a Inat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InatArgs | InatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InatState | undefined;
            resourceInputs["ftp"] = state ? state.ftp : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateip"] = state ? state.privateip : undefined;
            resourceInputs["proxyip"] = state ? state.proxyip : undefined;
            resourceInputs["publicip"] = state ? state.publicip : undefined;
            resourceInputs["tcpproxy"] = state ? state.tcpproxy : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["tftp"] = state ? state.tftp : undefined;
            resourceInputs["useproxyport"] = state ? state.useproxyport : undefined;
            resourceInputs["usip"] = state ? state.usip : undefined;
            resourceInputs["usnip"] = state ? state.usnip : undefined;
        } else {
            const args = argsOrState as InatArgs | undefined;
            resourceInputs["ftp"] = args ? args.ftp : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateip"] = args ? args.privateip : undefined;
            resourceInputs["proxyip"] = args ? args.proxyip : undefined;
            resourceInputs["publicip"] = args ? args.publicip : undefined;
            resourceInputs["tcpproxy"] = args ? args.tcpproxy : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["tftp"] = args ? args.tftp : undefined;
            resourceInputs["useproxyport"] = args ? args.useproxyport : undefined;
            resourceInputs["usip"] = args ? args.usip : undefined;
            resourceInputs["usnip"] = args ? args.usnip : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Inat.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Inat resources.
 */
export interface InatState {
    ftp?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateip?: pulumi.Input<string>;
    proxyip?: pulumi.Input<string>;
    publicip?: pulumi.Input<string>;
    tcpproxy?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    tftp?: pulumi.Input<string>;
    useproxyport?: pulumi.Input<string>;
    usip?: pulumi.Input<string>;
    usnip?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Inat resource.
 */
export interface InatArgs {
    ftp?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateip?: pulumi.Input<string>;
    proxyip?: pulumi.Input<string>;
    publicip?: pulumi.Input<string>;
    tcpproxy?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    tftp?: pulumi.Input<string>;
    useproxyport?: pulumi.Input<string>;
    usip?: pulumi.Input<string>;
    usnip?: pulumi.Input<string>;
}
