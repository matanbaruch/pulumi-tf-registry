// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nsvariable extends pulumi.CustomResource {
    /**
     * Get an existing Nsvariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsvariableState, opts?: pulumi.CustomResourceOptions): Nsvariable {
        return new Nsvariable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nsvariable:Nsvariable';

    /**
     * Returns true if the given object is an instance of Nsvariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nsvariable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nsvariable.__pulumiType;
    }

    public readonly comment!: pulumi.Output<string>;
    public readonly expires!: pulumi.Output<number>;
    public readonly iffull!: pulumi.Output<string>;
    public readonly ifnovalue!: pulumi.Output<string>;
    public readonly ifvaluetoobig!: pulumi.Output<string>;
    public readonly init!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Nsvariable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsvariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsvariableArgs | NsvariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsvariableState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["expires"] = state ? state.expires : undefined;
            resourceInputs["iffull"] = state ? state.iffull : undefined;
            resourceInputs["ifnovalue"] = state ? state.ifnovalue : undefined;
            resourceInputs["ifvaluetoobig"] = state ? state.ifvaluetoobig : undefined;
            resourceInputs["init"] = state ? state.init : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NsvariableArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["expires"] = args ? args.expires : undefined;
            resourceInputs["iffull"] = args ? args.iffull : undefined;
            resourceInputs["ifnovalue"] = args ? args.ifnovalue : undefined;
            resourceInputs["ifvaluetoobig"] = args ? args.ifvaluetoobig : undefined;
            resourceInputs["init"] = args ? args.init : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nsvariable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nsvariable resources.
 */
export interface NsvariableState {
    comment?: pulumi.Input<string>;
    expires?: pulumi.Input<number>;
    iffull?: pulumi.Input<string>;
    ifnovalue?: pulumi.Input<string>;
    ifvaluetoobig?: pulumi.Input<string>;
    init?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nsvariable resource.
 */
export interface NsvariableArgs {
    comment?: pulumi.Input<string>;
    expires?: pulumi.Input<number>;
    iffull?: pulumi.Input<string>;
    ifnovalue?: pulumi.Input<string>;
    ifvaluetoobig?: pulumi.Input<string>;
    init?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
