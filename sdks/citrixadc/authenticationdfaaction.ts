// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Authenticationdfaaction extends pulumi.CustomResource {
    /**
     * Get an existing Authenticationdfaaction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticationdfaactionState, opts?: pulumi.CustomResourceOptions): Authenticationdfaaction {
        return new Authenticationdfaaction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/authenticationdfaaction:Authenticationdfaaction';

    /**
     * Returns true if the given object is an instance of Authenticationdfaaction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Authenticationdfaaction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authenticationdfaaction.__pulumiType;
    }

    public readonly clientid!: pulumi.Output<string>;
    public readonly defaultauthenticationgroup!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly passphrase!: pulumi.Output<string>;
    public readonly serverurl!: pulumi.Output<string>;

    /**
     * Create a Authenticationdfaaction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthenticationdfaactionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticationdfaactionArgs | AuthenticationdfaactionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticationdfaactionState | undefined;
            resourceInputs["clientid"] = state ? state.clientid : undefined;
            resourceInputs["defaultauthenticationgroup"] = state ? state.defaultauthenticationgroup : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["serverurl"] = state ? state.serverurl : undefined;
        } else {
            const args = argsOrState as AuthenticationdfaactionArgs | undefined;
            if ((!args || args.clientid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientid'");
            }
            if ((!args || args.passphrase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'passphrase'");
            }
            if ((!args || args.serverurl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverurl'");
            }
            resourceInputs["clientid"] = args ? args.clientid : undefined;
            resourceInputs["defaultauthenticationgroup"] = args ? args.defaultauthenticationgroup : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passphrase"] = args ? args.passphrase : undefined;
            resourceInputs["serverurl"] = args ? args.serverurl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Authenticationdfaaction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Authenticationdfaaction resources.
 */
export interface AuthenticationdfaactionState {
    clientid?: pulumi.Input<string>;
    defaultauthenticationgroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passphrase?: pulumi.Input<string>;
    serverurl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Authenticationdfaaction resource.
 */
export interface AuthenticationdfaactionArgs {
    clientid: pulumi.Input<string>;
    defaultauthenticationgroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passphrase: pulumi.Input<string>;
    serverurl: pulumi.Input<string>;
}
