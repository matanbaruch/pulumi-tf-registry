// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Lbparameter extends pulumi.CustomResource {
    /**
     * Get an existing Lbparameter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbparameterState, opts?: pulumi.CustomResourceOptions): Lbparameter {
        return new Lbparameter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/lbparameter:Lbparameter';

    /**
     * Returns true if the given object is an instance of Lbparameter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lbparameter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lbparameter.__pulumiType;
    }

    public readonly allowboundsvcremoval!: pulumi.Output<string>;
    public readonly computedadccookieattribute!: pulumi.Output<string>;
    public readonly consolidatedlconn!: pulumi.Output<string>;
    public readonly cookiepassphrase!: pulumi.Output<string>;
    public readonly dbsttl!: pulumi.Output<number>;
    public readonly dropmqttjumbomessage!: pulumi.Output<string>;
    public readonly httponlycookieflag!: pulumi.Output<string>;
    public readonly lbhashalgorithm!: pulumi.Output<string>;
    public readonly lbhashfingers!: pulumi.Output<number>;
    public readonly literaladccookieattribute!: pulumi.Output<string>;
    public readonly maxpipelinenat!: pulumi.Output<number>;
    public readonly monitorconnectionclose!: pulumi.Output<string>;
    public readonly monitorskipmaxclient!: pulumi.Output<string>;
    public readonly preferdirectroute!: pulumi.Output<string>;
    public readonly retainservicestate!: pulumi.Output<string>;
    public readonly sessionsthreshold!: pulumi.Output<number>;
    public readonly startuprrfactor!: pulumi.Output<number>;
    public readonly storemqttclientidandusername!: pulumi.Output<string>;
    public readonly useencryptedpersistencecookie!: pulumi.Output<string>;
    public readonly useportforhashlb!: pulumi.Output<string>;
    public readonly usesecuredpersistencecookie!: pulumi.Output<string>;
    public readonly vserverspecificmac!: pulumi.Output<string>;

    /**
     * Create a Lbparameter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LbparameterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbparameterArgs | LbparameterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbparameterState | undefined;
            resourceInputs["allowboundsvcremoval"] = state ? state.allowboundsvcremoval : undefined;
            resourceInputs["computedadccookieattribute"] = state ? state.computedadccookieattribute : undefined;
            resourceInputs["consolidatedlconn"] = state ? state.consolidatedlconn : undefined;
            resourceInputs["cookiepassphrase"] = state ? state.cookiepassphrase : undefined;
            resourceInputs["dbsttl"] = state ? state.dbsttl : undefined;
            resourceInputs["dropmqttjumbomessage"] = state ? state.dropmqttjumbomessage : undefined;
            resourceInputs["httponlycookieflag"] = state ? state.httponlycookieflag : undefined;
            resourceInputs["lbhashalgorithm"] = state ? state.lbhashalgorithm : undefined;
            resourceInputs["lbhashfingers"] = state ? state.lbhashfingers : undefined;
            resourceInputs["literaladccookieattribute"] = state ? state.literaladccookieattribute : undefined;
            resourceInputs["maxpipelinenat"] = state ? state.maxpipelinenat : undefined;
            resourceInputs["monitorconnectionclose"] = state ? state.monitorconnectionclose : undefined;
            resourceInputs["monitorskipmaxclient"] = state ? state.monitorskipmaxclient : undefined;
            resourceInputs["preferdirectroute"] = state ? state.preferdirectroute : undefined;
            resourceInputs["retainservicestate"] = state ? state.retainservicestate : undefined;
            resourceInputs["sessionsthreshold"] = state ? state.sessionsthreshold : undefined;
            resourceInputs["startuprrfactor"] = state ? state.startuprrfactor : undefined;
            resourceInputs["storemqttclientidandusername"] = state ? state.storemqttclientidandusername : undefined;
            resourceInputs["useencryptedpersistencecookie"] = state ? state.useencryptedpersistencecookie : undefined;
            resourceInputs["useportforhashlb"] = state ? state.useportforhashlb : undefined;
            resourceInputs["usesecuredpersistencecookie"] = state ? state.usesecuredpersistencecookie : undefined;
            resourceInputs["vserverspecificmac"] = state ? state.vserverspecificmac : undefined;
        } else {
            const args = argsOrState as LbparameterArgs | undefined;
            resourceInputs["allowboundsvcremoval"] = args ? args.allowboundsvcremoval : undefined;
            resourceInputs["computedadccookieattribute"] = args ? args.computedadccookieattribute : undefined;
            resourceInputs["consolidatedlconn"] = args ? args.consolidatedlconn : undefined;
            resourceInputs["cookiepassphrase"] = args ? args.cookiepassphrase : undefined;
            resourceInputs["dbsttl"] = args ? args.dbsttl : undefined;
            resourceInputs["dropmqttjumbomessage"] = args ? args.dropmqttjumbomessage : undefined;
            resourceInputs["httponlycookieflag"] = args ? args.httponlycookieflag : undefined;
            resourceInputs["lbhashalgorithm"] = args ? args.lbhashalgorithm : undefined;
            resourceInputs["lbhashfingers"] = args ? args.lbhashfingers : undefined;
            resourceInputs["literaladccookieattribute"] = args ? args.literaladccookieattribute : undefined;
            resourceInputs["maxpipelinenat"] = args ? args.maxpipelinenat : undefined;
            resourceInputs["monitorconnectionclose"] = args ? args.monitorconnectionclose : undefined;
            resourceInputs["monitorskipmaxclient"] = args ? args.monitorskipmaxclient : undefined;
            resourceInputs["preferdirectroute"] = args ? args.preferdirectroute : undefined;
            resourceInputs["retainservicestate"] = args ? args.retainservicestate : undefined;
            resourceInputs["sessionsthreshold"] = args ? args.sessionsthreshold : undefined;
            resourceInputs["startuprrfactor"] = args ? args.startuprrfactor : undefined;
            resourceInputs["storemqttclientidandusername"] = args ? args.storemqttclientidandusername : undefined;
            resourceInputs["useencryptedpersistencecookie"] = args ? args.useencryptedpersistencecookie : undefined;
            resourceInputs["useportforhashlb"] = args ? args.useportforhashlb : undefined;
            resourceInputs["usesecuredpersistencecookie"] = args ? args.usesecuredpersistencecookie : undefined;
            resourceInputs["vserverspecificmac"] = args ? args.vserverspecificmac : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lbparameter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lbparameter resources.
 */
export interface LbparameterState {
    allowboundsvcremoval?: pulumi.Input<string>;
    computedadccookieattribute?: pulumi.Input<string>;
    consolidatedlconn?: pulumi.Input<string>;
    cookiepassphrase?: pulumi.Input<string>;
    dbsttl?: pulumi.Input<number>;
    dropmqttjumbomessage?: pulumi.Input<string>;
    httponlycookieflag?: pulumi.Input<string>;
    lbhashalgorithm?: pulumi.Input<string>;
    lbhashfingers?: pulumi.Input<number>;
    literaladccookieattribute?: pulumi.Input<string>;
    maxpipelinenat?: pulumi.Input<number>;
    monitorconnectionclose?: pulumi.Input<string>;
    monitorskipmaxclient?: pulumi.Input<string>;
    preferdirectroute?: pulumi.Input<string>;
    retainservicestate?: pulumi.Input<string>;
    sessionsthreshold?: pulumi.Input<number>;
    startuprrfactor?: pulumi.Input<number>;
    storemqttclientidandusername?: pulumi.Input<string>;
    useencryptedpersistencecookie?: pulumi.Input<string>;
    useportforhashlb?: pulumi.Input<string>;
    usesecuredpersistencecookie?: pulumi.Input<string>;
    vserverspecificmac?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lbparameter resource.
 */
export interface LbparameterArgs {
    allowboundsvcremoval?: pulumi.Input<string>;
    computedadccookieattribute?: pulumi.Input<string>;
    consolidatedlconn?: pulumi.Input<string>;
    cookiepassphrase?: pulumi.Input<string>;
    dbsttl?: pulumi.Input<number>;
    dropmqttjumbomessage?: pulumi.Input<string>;
    httponlycookieflag?: pulumi.Input<string>;
    lbhashalgorithm?: pulumi.Input<string>;
    lbhashfingers?: pulumi.Input<number>;
    literaladccookieattribute?: pulumi.Input<string>;
    maxpipelinenat?: pulumi.Input<number>;
    monitorconnectionclose?: pulumi.Input<string>;
    monitorskipmaxclient?: pulumi.Input<string>;
    preferdirectroute?: pulumi.Input<string>;
    retainservicestate?: pulumi.Input<string>;
    sessionsthreshold?: pulumi.Input<number>;
    startuprrfactor?: pulumi.Input<number>;
    storemqttclientidandusername?: pulumi.Input<string>;
    useencryptedpersistencecookie?: pulumi.Input<string>;
    useportforhashlb?: pulumi.Input<string>;
    usesecuredpersistencecookie?: pulumi.Input<string>;
    vserverspecificmac?: pulumi.Input<string>;
}
