// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nssimpleacl6 extends pulumi.CustomResource {
    /**
     * Get an existing Nssimpleacl6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Nssimpleacl6State, opts?: pulumi.CustomResourceOptions): Nssimpleacl6 {
        return new Nssimpleacl6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nssimpleacl6:Nssimpleacl6';

    /**
     * Returns true if the given object is an instance of Nssimpleacl6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nssimpleacl6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nssimpleacl6.__pulumiType;
    }

    public readonly aclaction!: pulumi.Output<string>;
    public readonly aclname!: pulumi.Output<string>;
    public readonly destport!: pulumi.Output<number>;
    public readonly estsessions!: pulumi.Output<boolean>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly srcipv6!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<number>;
    public readonly ttl!: pulumi.Output<number>;

    /**
     * Create a Nssimpleacl6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Nssimpleacl6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Nssimpleacl6Args | Nssimpleacl6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Nssimpleacl6State | undefined;
            resourceInputs["aclaction"] = state ? state.aclaction : undefined;
            resourceInputs["aclname"] = state ? state.aclname : undefined;
            resourceInputs["destport"] = state ? state.destport : undefined;
            resourceInputs["estsessions"] = state ? state.estsessions : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["srcipv6"] = state ? state.srcipv6 : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as Nssimpleacl6Args | undefined;
            if ((!args || args.aclaction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclaction'");
            }
            if ((!args || args.aclname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclname'");
            }
            if ((!args || args.srcipv6 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcipv6'");
            }
            resourceInputs["aclaction"] = args ? args.aclaction : undefined;
            resourceInputs["aclname"] = args ? args.aclname : undefined;
            resourceInputs["destport"] = args ? args.destport : undefined;
            resourceInputs["estsessions"] = args ? args.estsessions : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["srcipv6"] = args ? args.srcipv6 : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nssimpleacl6.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nssimpleacl6 resources.
 */
export interface Nssimpleacl6State {
    aclaction?: pulumi.Input<string>;
    aclname?: pulumi.Input<string>;
    destport?: pulumi.Input<number>;
    estsessions?: pulumi.Input<boolean>;
    protocol?: pulumi.Input<string>;
    srcipv6?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Nssimpleacl6 resource.
 */
export interface Nssimpleacl6Args {
    aclaction: pulumi.Input<string>;
    aclname: pulumi.Input<string>;
    destport?: pulumi.Input<number>;
    estsessions?: pulumi.Input<boolean>;
    protocol?: pulumi.Input<string>;
    srcipv6: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
}
