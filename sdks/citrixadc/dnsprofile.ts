// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Dnsprofile extends pulumi.CustomResource {
    /**
     * Get an existing Dnsprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsprofileState, opts?: pulumi.CustomResourceOptions): Dnsprofile {
        return new Dnsprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/dnsprofile:Dnsprofile';

    /**
     * Returns true if the given object is an instance of Dnsprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dnsprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dnsprofile.__pulumiType;
    }

    public readonly cacheecsresponses!: pulumi.Output<string>;
    public readonly cachenegativeresponses!: pulumi.Output<string>;
    public readonly cacherecords!: pulumi.Output<string>;
    public readonly dnsanswerseclogging!: pulumi.Output<string>;
    public readonly dnserrorlogging!: pulumi.Output<string>;
    public readonly dnsextendedlogging!: pulumi.Output<string>;
    public readonly dnsprofilename!: pulumi.Output<string>;
    public readonly dnsquerylogging!: pulumi.Output<string>;
    public readonly dropmultiqueryrequest!: pulumi.Output<string>;

    /**
     * Create a Dnsprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsprofileArgs | DnsprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsprofileState | undefined;
            resourceInputs["cacheecsresponses"] = state ? state.cacheecsresponses : undefined;
            resourceInputs["cachenegativeresponses"] = state ? state.cachenegativeresponses : undefined;
            resourceInputs["cacherecords"] = state ? state.cacherecords : undefined;
            resourceInputs["dnsanswerseclogging"] = state ? state.dnsanswerseclogging : undefined;
            resourceInputs["dnserrorlogging"] = state ? state.dnserrorlogging : undefined;
            resourceInputs["dnsextendedlogging"] = state ? state.dnsextendedlogging : undefined;
            resourceInputs["dnsprofilename"] = state ? state.dnsprofilename : undefined;
            resourceInputs["dnsquerylogging"] = state ? state.dnsquerylogging : undefined;
            resourceInputs["dropmultiqueryrequest"] = state ? state.dropmultiqueryrequest : undefined;
        } else {
            const args = argsOrState as DnsprofileArgs | undefined;
            if ((!args || args.dnsprofilename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsprofilename'");
            }
            resourceInputs["cacheecsresponses"] = args ? args.cacheecsresponses : undefined;
            resourceInputs["cachenegativeresponses"] = args ? args.cachenegativeresponses : undefined;
            resourceInputs["cacherecords"] = args ? args.cacherecords : undefined;
            resourceInputs["dnsanswerseclogging"] = args ? args.dnsanswerseclogging : undefined;
            resourceInputs["dnserrorlogging"] = args ? args.dnserrorlogging : undefined;
            resourceInputs["dnsextendedlogging"] = args ? args.dnsextendedlogging : undefined;
            resourceInputs["dnsprofilename"] = args ? args.dnsprofilename : undefined;
            resourceInputs["dnsquerylogging"] = args ? args.dnsquerylogging : undefined;
            resourceInputs["dropmultiqueryrequest"] = args ? args.dropmultiqueryrequest : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dnsprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dnsprofile resources.
 */
export interface DnsprofileState {
    cacheecsresponses?: pulumi.Input<string>;
    cachenegativeresponses?: pulumi.Input<string>;
    cacherecords?: pulumi.Input<string>;
    dnsanswerseclogging?: pulumi.Input<string>;
    dnserrorlogging?: pulumi.Input<string>;
    dnsextendedlogging?: pulumi.Input<string>;
    dnsprofilename?: pulumi.Input<string>;
    dnsquerylogging?: pulumi.Input<string>;
    dropmultiqueryrequest?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dnsprofile resource.
 */
export interface DnsprofileArgs {
    cacheecsresponses?: pulumi.Input<string>;
    cachenegativeresponses?: pulumi.Input<string>;
    cacherecords?: pulumi.Input<string>;
    dnsanswerseclogging?: pulumi.Input<string>;
    dnserrorlogging?: pulumi.Input<string>;
    dnsextendedlogging?: pulumi.Input<string>;
    dnsprofilename: pulumi.Input<string>;
    dnsquerylogging?: pulumi.Input<string>;
    dropmultiqueryrequest?: pulumi.Input<string>;
}
