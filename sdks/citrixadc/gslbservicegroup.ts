// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Gslbservicegroup extends pulumi.CustomResource {
    /**
     * Get an existing Gslbservicegroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbservicegroupState, opts?: pulumi.CustomResourceOptions): Gslbservicegroup {
        return new Gslbservicegroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/gslbservicegroup:Gslbservicegroup';

    /**
     * Returns true if the given object is an instance of Gslbservicegroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gslbservicegroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gslbservicegroup.__pulumiType;
    }

    public readonly appflowlog!: pulumi.Output<string>;
    public readonly autoscale!: pulumi.Output<string>;
    public readonly cip!: pulumi.Output<string>;
    public readonly cipheader!: pulumi.Output<string>;
    public readonly clttimeout!: pulumi.Output<number>;
    public readonly comment!: pulumi.Output<string>;
    public readonly delay!: pulumi.Output<number>;
    public readonly downstateflush!: pulumi.Output<string>;
    public readonly dupweight!: pulumi.Output<number>;
    public readonly graceful!: pulumi.Output<string>;
    public readonly hashid!: pulumi.Output<number>;
    public readonly healthmonitor!: pulumi.Output<string>;
    public readonly includemembers!: pulumi.Output<boolean>;
    public readonly maxbandwidth!: pulumi.Output<number>;
    public readonly maxclient!: pulumi.Output<number>;
    public readonly monitornamesvc!: pulumi.Output<string>;
    public readonly monthreshold!: pulumi.Output<number>;
    public readonly port!: pulumi.Output<number>;
    public readonly publicip!: pulumi.Output<string>;
    public readonly publicport!: pulumi.Output<number>;
    public readonly servername!: pulumi.Output<string>;
    public readonly servicegroupname!: pulumi.Output<string>;
    public readonly servicetype!: pulumi.Output<string>;
    public readonly sitename!: pulumi.Output<string>;
    public readonly sitepersistence!: pulumi.Output<string>;
    public readonly siteprefix!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly svrtimeout!: pulumi.Output<number>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a Gslbservicegroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GslbservicegroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbservicegroupArgs | GslbservicegroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbservicegroupState | undefined;
            resourceInputs["appflowlog"] = state ? state.appflowlog : undefined;
            resourceInputs["autoscale"] = state ? state.autoscale : undefined;
            resourceInputs["cip"] = state ? state.cip : undefined;
            resourceInputs["cipheader"] = state ? state.cipheader : undefined;
            resourceInputs["clttimeout"] = state ? state.clttimeout : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["downstateflush"] = state ? state.downstateflush : undefined;
            resourceInputs["dupweight"] = state ? state.dupweight : undefined;
            resourceInputs["graceful"] = state ? state.graceful : undefined;
            resourceInputs["hashid"] = state ? state.hashid : undefined;
            resourceInputs["healthmonitor"] = state ? state.healthmonitor : undefined;
            resourceInputs["includemembers"] = state ? state.includemembers : undefined;
            resourceInputs["maxbandwidth"] = state ? state.maxbandwidth : undefined;
            resourceInputs["maxclient"] = state ? state.maxclient : undefined;
            resourceInputs["monitornamesvc"] = state ? state.monitornamesvc : undefined;
            resourceInputs["monthreshold"] = state ? state.monthreshold : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["publicip"] = state ? state.publicip : undefined;
            resourceInputs["publicport"] = state ? state.publicport : undefined;
            resourceInputs["servername"] = state ? state.servername : undefined;
            resourceInputs["servicegroupname"] = state ? state.servicegroupname : undefined;
            resourceInputs["servicetype"] = state ? state.servicetype : undefined;
            resourceInputs["sitename"] = state ? state.sitename : undefined;
            resourceInputs["sitepersistence"] = state ? state.sitepersistence : undefined;
            resourceInputs["siteprefix"] = state ? state.siteprefix : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["svrtimeout"] = state ? state.svrtimeout : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as GslbservicegroupArgs | undefined;
            if ((!args || args.servicegroupname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicegroupname'");
            }
            resourceInputs["appflowlog"] = args ? args.appflowlog : undefined;
            resourceInputs["autoscale"] = args ? args.autoscale : undefined;
            resourceInputs["cip"] = args ? args.cip : undefined;
            resourceInputs["cipheader"] = args ? args.cipheader : undefined;
            resourceInputs["clttimeout"] = args ? args.clttimeout : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["downstateflush"] = args ? args.downstateflush : undefined;
            resourceInputs["dupweight"] = args ? args.dupweight : undefined;
            resourceInputs["graceful"] = args ? args.graceful : undefined;
            resourceInputs["hashid"] = args ? args.hashid : undefined;
            resourceInputs["healthmonitor"] = args ? args.healthmonitor : undefined;
            resourceInputs["includemembers"] = args ? args.includemembers : undefined;
            resourceInputs["maxbandwidth"] = args ? args.maxbandwidth : undefined;
            resourceInputs["maxclient"] = args ? args.maxclient : undefined;
            resourceInputs["monitornamesvc"] = args ? args.monitornamesvc : undefined;
            resourceInputs["monthreshold"] = args ? args.monthreshold : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["publicip"] = args ? args.publicip : undefined;
            resourceInputs["publicport"] = args ? args.publicport : undefined;
            resourceInputs["servername"] = args ? args.servername : undefined;
            resourceInputs["servicegroupname"] = args ? args.servicegroupname : undefined;
            resourceInputs["servicetype"] = args ? args.servicetype : undefined;
            resourceInputs["sitename"] = args ? args.sitename : undefined;
            resourceInputs["sitepersistence"] = args ? args.sitepersistence : undefined;
            resourceInputs["siteprefix"] = args ? args.siteprefix : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["svrtimeout"] = args ? args.svrtimeout : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gslbservicegroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Gslbservicegroup resources.
 */
export interface GslbservicegroupState {
    appflowlog?: pulumi.Input<string>;
    autoscale?: pulumi.Input<string>;
    cip?: pulumi.Input<string>;
    cipheader?: pulumi.Input<string>;
    clttimeout?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    delay?: pulumi.Input<number>;
    downstateflush?: pulumi.Input<string>;
    dupweight?: pulumi.Input<number>;
    graceful?: pulumi.Input<string>;
    hashid?: pulumi.Input<number>;
    healthmonitor?: pulumi.Input<string>;
    includemembers?: pulumi.Input<boolean>;
    maxbandwidth?: pulumi.Input<number>;
    maxclient?: pulumi.Input<number>;
    monitornamesvc?: pulumi.Input<string>;
    monthreshold?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    publicip?: pulumi.Input<string>;
    publicport?: pulumi.Input<number>;
    servername?: pulumi.Input<string>;
    servicegroupname?: pulumi.Input<string>;
    servicetype?: pulumi.Input<string>;
    sitename?: pulumi.Input<string>;
    sitepersistence?: pulumi.Input<string>;
    siteprefix?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    svrtimeout?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Gslbservicegroup resource.
 */
export interface GslbservicegroupArgs {
    appflowlog?: pulumi.Input<string>;
    autoscale?: pulumi.Input<string>;
    cip?: pulumi.Input<string>;
    cipheader?: pulumi.Input<string>;
    clttimeout?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    delay?: pulumi.Input<number>;
    downstateflush?: pulumi.Input<string>;
    dupweight?: pulumi.Input<number>;
    graceful?: pulumi.Input<string>;
    hashid?: pulumi.Input<number>;
    healthmonitor?: pulumi.Input<string>;
    includemembers?: pulumi.Input<boolean>;
    maxbandwidth?: pulumi.Input<number>;
    maxclient?: pulumi.Input<number>;
    monitornamesvc?: pulumi.Input<string>;
    monthreshold?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    publicip?: pulumi.Input<string>;
    publicport?: pulumi.Input<number>;
    servername?: pulumi.Input<string>;
    servicegroupname: pulumi.Input<string>;
    servicetype?: pulumi.Input<string>;
    sitename?: pulumi.Input<string>;
    sitepersistence?: pulumi.Input<string>;
    siteprefix?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    svrtimeout?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}
