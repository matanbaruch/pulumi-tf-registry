// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Feoaction extends pulumi.CustomResource {
    /**
     * Get an existing Feoaction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeoactionState, opts?: pulumi.CustomResourceOptions): Feoaction {
        return new Feoaction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/feoaction:Feoaction';

    /**
     * Returns true if the given object is an instance of Feoaction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Feoaction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Feoaction.__pulumiType;
    }

    public readonly cachemaxage!: pulumi.Output<string>;
    public readonly clientsidemeasurements!: pulumi.Output<boolean>;
    public readonly convertimporttolink!: pulumi.Output<boolean>;
    public readonly csscombine!: pulumi.Output<boolean>;
    public readonly cssimginline!: pulumi.Output<boolean>;
    public readonly cssinline!: pulumi.Output<boolean>;
    public readonly cssminify!: pulumi.Output<boolean>;
    public readonly cssmovetohead!: pulumi.Output<boolean>;
    public readonly dnsshards!: pulumi.Output<string[]>;
    public readonly domainsharding!: pulumi.Output<string>;
    public readonly htmlminify!: pulumi.Output<boolean>;
    public readonly imggiftopng!: pulumi.Output<boolean>;
    public readonly imginline!: pulumi.Output<boolean>;
    public readonly imglazyload!: pulumi.Output<boolean>;
    public readonly imgshrinktoattrib!: pulumi.Output<boolean>;
    public readonly imgtojpegxr!: pulumi.Output<boolean>;
    public readonly imgtowebp!: pulumi.Output<boolean>;
    public readonly jpgoptimize!: pulumi.Output<boolean>;
    public readonly jsinline!: pulumi.Output<boolean>;
    public readonly jsminify!: pulumi.Output<boolean>;
    public readonly jsmovetoend!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly pageextendcache!: pulumi.Output<boolean>;

    /**
     * Create a Feoaction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FeoactionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeoactionArgs | FeoactionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeoactionState | undefined;
            resourceInputs["cachemaxage"] = state ? state.cachemaxage : undefined;
            resourceInputs["clientsidemeasurements"] = state ? state.clientsidemeasurements : undefined;
            resourceInputs["convertimporttolink"] = state ? state.convertimporttolink : undefined;
            resourceInputs["csscombine"] = state ? state.csscombine : undefined;
            resourceInputs["cssimginline"] = state ? state.cssimginline : undefined;
            resourceInputs["cssinline"] = state ? state.cssinline : undefined;
            resourceInputs["cssminify"] = state ? state.cssminify : undefined;
            resourceInputs["cssmovetohead"] = state ? state.cssmovetohead : undefined;
            resourceInputs["dnsshards"] = state ? state.dnsshards : undefined;
            resourceInputs["domainsharding"] = state ? state.domainsharding : undefined;
            resourceInputs["htmlminify"] = state ? state.htmlminify : undefined;
            resourceInputs["imggiftopng"] = state ? state.imggiftopng : undefined;
            resourceInputs["imginline"] = state ? state.imginline : undefined;
            resourceInputs["imglazyload"] = state ? state.imglazyload : undefined;
            resourceInputs["imgshrinktoattrib"] = state ? state.imgshrinktoattrib : undefined;
            resourceInputs["imgtojpegxr"] = state ? state.imgtojpegxr : undefined;
            resourceInputs["imgtowebp"] = state ? state.imgtowebp : undefined;
            resourceInputs["jpgoptimize"] = state ? state.jpgoptimize : undefined;
            resourceInputs["jsinline"] = state ? state.jsinline : undefined;
            resourceInputs["jsminify"] = state ? state.jsminify : undefined;
            resourceInputs["jsmovetoend"] = state ? state.jsmovetoend : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pageextendcache"] = state ? state.pageextendcache : undefined;
        } else {
            const args = argsOrState as FeoactionArgs | undefined;
            resourceInputs["cachemaxage"] = args ? args.cachemaxage : undefined;
            resourceInputs["clientsidemeasurements"] = args ? args.clientsidemeasurements : undefined;
            resourceInputs["convertimporttolink"] = args ? args.convertimporttolink : undefined;
            resourceInputs["csscombine"] = args ? args.csscombine : undefined;
            resourceInputs["cssimginline"] = args ? args.cssimginline : undefined;
            resourceInputs["cssinline"] = args ? args.cssinline : undefined;
            resourceInputs["cssminify"] = args ? args.cssminify : undefined;
            resourceInputs["cssmovetohead"] = args ? args.cssmovetohead : undefined;
            resourceInputs["dnsshards"] = args ? args.dnsshards : undefined;
            resourceInputs["domainsharding"] = args ? args.domainsharding : undefined;
            resourceInputs["htmlminify"] = args ? args.htmlminify : undefined;
            resourceInputs["imggiftopng"] = args ? args.imggiftopng : undefined;
            resourceInputs["imginline"] = args ? args.imginline : undefined;
            resourceInputs["imglazyload"] = args ? args.imglazyload : undefined;
            resourceInputs["imgshrinktoattrib"] = args ? args.imgshrinktoattrib : undefined;
            resourceInputs["imgtojpegxr"] = args ? args.imgtojpegxr : undefined;
            resourceInputs["imgtowebp"] = args ? args.imgtowebp : undefined;
            resourceInputs["jpgoptimize"] = args ? args.jpgoptimize : undefined;
            resourceInputs["jsinline"] = args ? args.jsinline : undefined;
            resourceInputs["jsminify"] = args ? args.jsminify : undefined;
            resourceInputs["jsmovetoend"] = args ? args.jsmovetoend : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pageextendcache"] = args ? args.pageextendcache : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Feoaction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Feoaction resources.
 */
export interface FeoactionState {
    cachemaxage?: pulumi.Input<string>;
    clientsidemeasurements?: pulumi.Input<boolean>;
    convertimporttolink?: pulumi.Input<boolean>;
    csscombine?: pulumi.Input<boolean>;
    cssimginline?: pulumi.Input<boolean>;
    cssinline?: pulumi.Input<boolean>;
    cssminify?: pulumi.Input<boolean>;
    cssmovetohead?: pulumi.Input<boolean>;
    dnsshards?: pulumi.Input<pulumi.Input<string>[]>;
    domainsharding?: pulumi.Input<string>;
    htmlminify?: pulumi.Input<boolean>;
    imggiftopng?: pulumi.Input<boolean>;
    imginline?: pulumi.Input<boolean>;
    imglazyload?: pulumi.Input<boolean>;
    imgshrinktoattrib?: pulumi.Input<boolean>;
    imgtojpegxr?: pulumi.Input<boolean>;
    imgtowebp?: pulumi.Input<boolean>;
    jpgoptimize?: pulumi.Input<boolean>;
    jsinline?: pulumi.Input<boolean>;
    jsminify?: pulumi.Input<boolean>;
    jsmovetoend?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    pageextendcache?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Feoaction resource.
 */
export interface FeoactionArgs {
    cachemaxage?: pulumi.Input<string>;
    clientsidemeasurements?: pulumi.Input<boolean>;
    convertimporttolink?: pulumi.Input<boolean>;
    csscombine?: pulumi.Input<boolean>;
    cssimginline?: pulumi.Input<boolean>;
    cssinline?: pulumi.Input<boolean>;
    cssminify?: pulumi.Input<boolean>;
    cssmovetohead?: pulumi.Input<boolean>;
    dnsshards?: pulumi.Input<pulumi.Input<string>[]>;
    domainsharding?: pulumi.Input<string>;
    htmlminify?: pulumi.Input<boolean>;
    imggiftopng?: pulumi.Input<boolean>;
    imginline?: pulumi.Input<boolean>;
    imglazyload?: pulumi.Input<boolean>;
    imgshrinktoattrib?: pulumi.Input<boolean>;
    imgtojpegxr?: pulumi.Input<boolean>;
    imgtowebp?: pulumi.Input<boolean>;
    jpgoptimize?: pulumi.Input<boolean>;
    jsinline?: pulumi.Input<boolean>;
    jsminify?: pulumi.Input<boolean>;
    jsmovetoend?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    pageextendcache?: pulumi.Input<boolean>;
}
