// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nsip extends pulumi.CustomResource {
    /**
     * Get an existing Nsip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsipState, opts?: pulumi.CustomResourceOptions): Nsip {
        return new Nsip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nsip:Nsip';

    /**
     * Returns true if the given object is an instance of Nsip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nsip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nsip.__pulumiType;
    }

    public readonly advertiseondefaultpartition!: pulumi.Output<string>;
    public readonly arp!: pulumi.Output<string>;
    public readonly arpresponse!: pulumi.Output<string>;
    public readonly bgp!: pulumi.Output<string>;
    public readonly decrementttl!: pulumi.Output<string>;
    public readonly dynamicrouting!: pulumi.Output<string>;
    public readonly ftp!: pulumi.Output<string>;
    public readonly gui!: pulumi.Output<string>;
    public readonly hostroute!: pulumi.Output<string>;
    public readonly hostrtgw!: pulumi.Output<string>;
    public readonly icmp!: pulumi.Output<string>;
    public readonly icmpresponse!: pulumi.Output<string>;
    public readonly ipaddress!: pulumi.Output<string>;
    public readonly metric!: pulumi.Output<number>;
    public readonly mgmtaccess!: pulumi.Output<string>;
    public readonly mptcpadvertise!: pulumi.Output<string>;
    public readonly netmask!: pulumi.Output<string>;
    public readonly networkroute!: pulumi.Output<string>;
    public readonly ospf!: pulumi.Output<string>;
    public readonly ospfarea!: pulumi.Output<number>;
    public readonly ospflsatype!: pulumi.Output<string>;
    public readonly ownerdownresponse!: pulumi.Output<string>;
    public readonly ownernode!: pulumi.Output<string>;
    public readonly restrictaccess!: pulumi.Output<string>;
    public readonly rip!: pulumi.Output<string>;
    public readonly snmp!: pulumi.Output<string>;
    public readonly ssh!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly tag!: pulumi.Output<number>;
    public readonly td!: pulumi.Output<number>;
    public readonly telnet!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly vrid!: pulumi.Output<number>;
    public readonly vserver!: pulumi.Output<string>;
    public readonly vserverrhilevel!: pulumi.Output<string>;
    public readonly vserverrhimode!: pulumi.Output<string>;

    /**
     * Create a Nsip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsipArgs | NsipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsipState | undefined;
            resourceInputs["advertiseondefaultpartition"] = state ? state.advertiseondefaultpartition : undefined;
            resourceInputs["arp"] = state ? state.arp : undefined;
            resourceInputs["arpresponse"] = state ? state.arpresponse : undefined;
            resourceInputs["bgp"] = state ? state.bgp : undefined;
            resourceInputs["decrementttl"] = state ? state.decrementttl : undefined;
            resourceInputs["dynamicrouting"] = state ? state.dynamicrouting : undefined;
            resourceInputs["ftp"] = state ? state.ftp : undefined;
            resourceInputs["gui"] = state ? state.gui : undefined;
            resourceInputs["hostroute"] = state ? state.hostroute : undefined;
            resourceInputs["hostrtgw"] = state ? state.hostrtgw : undefined;
            resourceInputs["icmp"] = state ? state.icmp : undefined;
            resourceInputs["icmpresponse"] = state ? state.icmpresponse : undefined;
            resourceInputs["ipaddress"] = state ? state.ipaddress : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["mgmtaccess"] = state ? state.mgmtaccess : undefined;
            resourceInputs["mptcpadvertise"] = state ? state.mptcpadvertise : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["networkroute"] = state ? state.networkroute : undefined;
            resourceInputs["ospf"] = state ? state.ospf : undefined;
            resourceInputs["ospfarea"] = state ? state.ospfarea : undefined;
            resourceInputs["ospflsatype"] = state ? state.ospflsatype : undefined;
            resourceInputs["ownerdownresponse"] = state ? state.ownerdownresponse : undefined;
            resourceInputs["ownernode"] = state ? state.ownernode : undefined;
            resourceInputs["restrictaccess"] = state ? state.restrictaccess : undefined;
            resourceInputs["rip"] = state ? state.rip : undefined;
            resourceInputs["snmp"] = state ? state.snmp : undefined;
            resourceInputs["ssh"] = state ? state.ssh : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["telnet"] = state ? state.telnet : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vrid"] = state ? state.vrid : undefined;
            resourceInputs["vserver"] = state ? state.vserver : undefined;
            resourceInputs["vserverrhilevel"] = state ? state.vserverrhilevel : undefined;
            resourceInputs["vserverrhimode"] = state ? state.vserverrhimode : undefined;
        } else {
            const args = argsOrState as NsipArgs | undefined;
            if ((!args || args.ipaddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipaddress'");
            }
            if ((!args || args.netmask === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netmask'");
            }
            resourceInputs["advertiseondefaultpartition"] = args ? args.advertiseondefaultpartition : undefined;
            resourceInputs["arp"] = args ? args.arp : undefined;
            resourceInputs["arpresponse"] = args ? args.arpresponse : undefined;
            resourceInputs["bgp"] = args ? args.bgp : undefined;
            resourceInputs["decrementttl"] = args ? args.decrementttl : undefined;
            resourceInputs["dynamicrouting"] = args ? args.dynamicrouting : undefined;
            resourceInputs["ftp"] = args ? args.ftp : undefined;
            resourceInputs["gui"] = args ? args.gui : undefined;
            resourceInputs["hostroute"] = args ? args.hostroute : undefined;
            resourceInputs["hostrtgw"] = args ? args.hostrtgw : undefined;
            resourceInputs["icmp"] = args ? args.icmp : undefined;
            resourceInputs["icmpresponse"] = args ? args.icmpresponse : undefined;
            resourceInputs["ipaddress"] = args ? args.ipaddress : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["mgmtaccess"] = args ? args.mgmtaccess : undefined;
            resourceInputs["mptcpadvertise"] = args ? args.mptcpadvertise : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["networkroute"] = args ? args.networkroute : undefined;
            resourceInputs["ospf"] = args ? args.ospf : undefined;
            resourceInputs["ospfarea"] = args ? args.ospfarea : undefined;
            resourceInputs["ospflsatype"] = args ? args.ospflsatype : undefined;
            resourceInputs["ownerdownresponse"] = args ? args.ownerdownresponse : undefined;
            resourceInputs["ownernode"] = args ? args.ownernode : undefined;
            resourceInputs["restrictaccess"] = args ? args.restrictaccess : undefined;
            resourceInputs["rip"] = args ? args.rip : undefined;
            resourceInputs["snmp"] = args ? args.snmp : undefined;
            resourceInputs["ssh"] = args ? args.ssh : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tag"] = args ? args.tag : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["telnet"] = args ? args.telnet : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vrid"] = args ? args.vrid : undefined;
            resourceInputs["vserver"] = args ? args.vserver : undefined;
            resourceInputs["vserverrhilevel"] = args ? args.vserverrhilevel : undefined;
            resourceInputs["vserverrhimode"] = args ? args.vserverrhimode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nsip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nsip resources.
 */
export interface NsipState {
    advertiseondefaultpartition?: pulumi.Input<string>;
    arp?: pulumi.Input<string>;
    arpresponse?: pulumi.Input<string>;
    bgp?: pulumi.Input<string>;
    decrementttl?: pulumi.Input<string>;
    dynamicrouting?: pulumi.Input<string>;
    ftp?: pulumi.Input<string>;
    gui?: pulumi.Input<string>;
    hostroute?: pulumi.Input<string>;
    hostrtgw?: pulumi.Input<string>;
    icmp?: pulumi.Input<string>;
    icmpresponse?: pulumi.Input<string>;
    ipaddress?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    mgmtaccess?: pulumi.Input<string>;
    mptcpadvertise?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    networkroute?: pulumi.Input<string>;
    ospf?: pulumi.Input<string>;
    ospfarea?: pulumi.Input<number>;
    ospflsatype?: pulumi.Input<string>;
    ownerdownresponse?: pulumi.Input<string>;
    ownernode?: pulumi.Input<string>;
    restrictaccess?: pulumi.Input<string>;
    rip?: pulumi.Input<string>;
    snmp?: pulumi.Input<string>;
    ssh?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
    td?: pulumi.Input<number>;
    telnet?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vrid?: pulumi.Input<number>;
    vserver?: pulumi.Input<string>;
    vserverrhilevel?: pulumi.Input<string>;
    vserverrhimode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nsip resource.
 */
export interface NsipArgs {
    advertiseondefaultpartition?: pulumi.Input<string>;
    arp?: pulumi.Input<string>;
    arpresponse?: pulumi.Input<string>;
    bgp?: pulumi.Input<string>;
    decrementttl?: pulumi.Input<string>;
    dynamicrouting?: pulumi.Input<string>;
    ftp?: pulumi.Input<string>;
    gui?: pulumi.Input<string>;
    hostroute?: pulumi.Input<string>;
    hostrtgw?: pulumi.Input<string>;
    icmp?: pulumi.Input<string>;
    icmpresponse?: pulumi.Input<string>;
    ipaddress: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    mgmtaccess?: pulumi.Input<string>;
    mptcpadvertise?: pulumi.Input<string>;
    netmask: pulumi.Input<string>;
    networkroute?: pulumi.Input<string>;
    ospf?: pulumi.Input<string>;
    ospfarea?: pulumi.Input<number>;
    ospflsatype?: pulumi.Input<string>;
    ownerdownresponse?: pulumi.Input<string>;
    ownernode?: pulumi.Input<string>;
    restrictaccess?: pulumi.Input<string>;
    rip?: pulumi.Input<string>;
    snmp?: pulumi.Input<string>;
    ssh?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
    td?: pulumi.Input<number>;
    telnet?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vrid?: pulumi.Input<number>;
    vserver?: pulumi.Input<string>;
    vserverrhilevel?: pulumi.Input<string>;
    vserverrhimode?: pulumi.Input<string>;
}
