// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nsip6 extends pulumi.CustomResource {
    /**
     * Get an existing Nsip6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Nsip6State, opts?: pulumi.CustomResourceOptions): Nsip6 {
        return new Nsip6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nsip6:Nsip6';

    /**
     * Returns true if the given object is an instance of Nsip6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nsip6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nsip6.__pulumiType;
    }

    public readonly advertiseondefaultpartition!: pulumi.Output<string>;
    public readonly decrementhoplimit!: pulumi.Output<string>;
    public readonly dynamicrouting!: pulumi.Output<string>;
    public readonly ftp!: pulumi.Output<string>;
    public readonly gui!: pulumi.Output<string>;
    public readonly hostroute!: pulumi.Output<string>;
    public readonly icmp!: pulumi.Output<string>;
    public readonly ip6hostrtgw!: pulumi.Output<string>;
    public readonly ipv6address!: pulumi.Output<string>;
    public readonly map!: pulumi.Output<string>;
    public readonly metric!: pulumi.Output<number>;
    public readonly mgmtaccess!: pulumi.Output<string>;
    public readonly mptcpadvertise!: pulumi.Output<string>;
    public readonly nd!: pulumi.Output<string>;
    public readonly networkroute!: pulumi.Output<string>;
    public readonly ospf6lsatype!: pulumi.Output<string>;
    public readonly ospfarea!: pulumi.Output<number>;
    public readonly ownerdownresponse!: pulumi.Output<string>;
    public readonly ownernode!: pulumi.Output<number>;
    public readonly restrictaccess!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<string>;
    public readonly snmp!: pulumi.Output<string>;
    public readonly ssh!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly tag!: pulumi.Output<number>;
    public readonly td!: pulumi.Output<number>;
    public readonly telnet!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly vlan!: pulumi.Output<number>;
    public readonly vrid6!: pulumi.Output<number>;
    public readonly vserver!: pulumi.Output<string>;
    public readonly vserverrhilevel!: pulumi.Output<string>;

    /**
     * Create a Nsip6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Nsip6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Nsip6Args | Nsip6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Nsip6State | undefined;
            resourceInputs["advertiseondefaultpartition"] = state ? state.advertiseondefaultpartition : undefined;
            resourceInputs["decrementhoplimit"] = state ? state.decrementhoplimit : undefined;
            resourceInputs["dynamicrouting"] = state ? state.dynamicrouting : undefined;
            resourceInputs["ftp"] = state ? state.ftp : undefined;
            resourceInputs["gui"] = state ? state.gui : undefined;
            resourceInputs["hostroute"] = state ? state.hostroute : undefined;
            resourceInputs["icmp"] = state ? state.icmp : undefined;
            resourceInputs["ip6hostrtgw"] = state ? state.ip6hostrtgw : undefined;
            resourceInputs["ipv6address"] = state ? state.ipv6address : undefined;
            resourceInputs["map"] = state ? state.map : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["mgmtaccess"] = state ? state.mgmtaccess : undefined;
            resourceInputs["mptcpadvertise"] = state ? state.mptcpadvertise : undefined;
            resourceInputs["nd"] = state ? state.nd : undefined;
            resourceInputs["networkroute"] = state ? state.networkroute : undefined;
            resourceInputs["ospf6lsatype"] = state ? state.ospf6lsatype : undefined;
            resourceInputs["ospfarea"] = state ? state.ospfarea : undefined;
            resourceInputs["ownerdownresponse"] = state ? state.ownerdownresponse : undefined;
            resourceInputs["ownernode"] = state ? state.ownernode : undefined;
            resourceInputs["restrictaccess"] = state ? state.restrictaccess : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["snmp"] = state ? state.snmp : undefined;
            resourceInputs["ssh"] = state ? state.ssh : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["telnet"] = state ? state.telnet : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["vrid6"] = state ? state.vrid6 : undefined;
            resourceInputs["vserver"] = state ? state.vserver : undefined;
            resourceInputs["vserverrhilevel"] = state ? state.vserverrhilevel : undefined;
        } else {
            const args = argsOrState as Nsip6Args | undefined;
            if ((!args || args.ipv6address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipv6address'");
            }
            resourceInputs["advertiseondefaultpartition"] = args ? args.advertiseondefaultpartition : undefined;
            resourceInputs["decrementhoplimit"] = args ? args.decrementhoplimit : undefined;
            resourceInputs["dynamicrouting"] = args ? args.dynamicrouting : undefined;
            resourceInputs["ftp"] = args ? args.ftp : undefined;
            resourceInputs["gui"] = args ? args.gui : undefined;
            resourceInputs["hostroute"] = args ? args.hostroute : undefined;
            resourceInputs["icmp"] = args ? args.icmp : undefined;
            resourceInputs["ip6hostrtgw"] = args ? args.ip6hostrtgw : undefined;
            resourceInputs["ipv6address"] = args ? args.ipv6address : undefined;
            resourceInputs["map"] = args ? args.map : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["mgmtaccess"] = args ? args.mgmtaccess : undefined;
            resourceInputs["mptcpadvertise"] = args ? args.mptcpadvertise : undefined;
            resourceInputs["nd"] = args ? args.nd : undefined;
            resourceInputs["networkroute"] = args ? args.networkroute : undefined;
            resourceInputs["ospf6lsatype"] = args ? args.ospf6lsatype : undefined;
            resourceInputs["ospfarea"] = args ? args.ospfarea : undefined;
            resourceInputs["ownerdownresponse"] = args ? args.ownerdownresponse : undefined;
            resourceInputs["ownernode"] = args ? args.ownernode : undefined;
            resourceInputs["restrictaccess"] = args ? args.restrictaccess : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["snmp"] = args ? args.snmp : undefined;
            resourceInputs["ssh"] = args ? args.ssh : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tag"] = args ? args.tag : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["telnet"] = args ? args.telnet : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["vrid6"] = args ? args.vrid6 : undefined;
            resourceInputs["vserver"] = args ? args.vserver : undefined;
            resourceInputs["vserverrhilevel"] = args ? args.vserverrhilevel : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nsip6.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nsip6 resources.
 */
export interface Nsip6State {
    advertiseondefaultpartition?: pulumi.Input<string>;
    decrementhoplimit?: pulumi.Input<string>;
    dynamicrouting?: pulumi.Input<string>;
    ftp?: pulumi.Input<string>;
    gui?: pulumi.Input<string>;
    hostroute?: pulumi.Input<string>;
    icmp?: pulumi.Input<string>;
    ip6hostrtgw?: pulumi.Input<string>;
    ipv6address?: pulumi.Input<string>;
    map?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    mgmtaccess?: pulumi.Input<string>;
    mptcpadvertise?: pulumi.Input<string>;
    nd?: pulumi.Input<string>;
    networkroute?: pulumi.Input<string>;
    ospf6lsatype?: pulumi.Input<string>;
    ospfarea?: pulumi.Input<number>;
    ownerdownresponse?: pulumi.Input<string>;
    ownernode?: pulumi.Input<number>;
    restrictaccess?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    snmp?: pulumi.Input<string>;
    ssh?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
    td?: pulumi.Input<number>;
    telnet?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
    vrid6?: pulumi.Input<number>;
    vserver?: pulumi.Input<string>;
    vserverrhilevel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nsip6 resource.
 */
export interface Nsip6Args {
    advertiseondefaultpartition?: pulumi.Input<string>;
    decrementhoplimit?: pulumi.Input<string>;
    dynamicrouting?: pulumi.Input<string>;
    ftp?: pulumi.Input<string>;
    gui?: pulumi.Input<string>;
    hostroute?: pulumi.Input<string>;
    icmp?: pulumi.Input<string>;
    ip6hostrtgw?: pulumi.Input<string>;
    ipv6address: pulumi.Input<string>;
    map?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    mgmtaccess?: pulumi.Input<string>;
    mptcpadvertise?: pulumi.Input<string>;
    nd?: pulumi.Input<string>;
    networkroute?: pulumi.Input<string>;
    ospf6lsatype?: pulumi.Input<string>;
    ospfarea?: pulumi.Input<number>;
    ownerdownresponse?: pulumi.Input<string>;
    ownernode?: pulumi.Input<number>;
    restrictaccess?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    snmp?: pulumi.Input<string>;
    ssh?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
    td?: pulumi.Input<number>;
    telnet?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
    vrid6?: pulumi.Input<number>;
    vserver?: pulumi.Input<string>;
    vserverrhilevel?: pulumi.Input<string>;
}
