// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class L3param extends pulumi.CustomResource {
    /**
     * Get an existing L3param resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L3paramState, opts?: pulumi.CustomResourceOptions): L3param {
        return new L3param(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/l3param:L3param';

    /**
     * Returns true if the given object is an instance of L3param.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L3param {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L3param.__pulumiType;
    }

    public readonly acllogtime!: pulumi.Output<number>;
    public readonly allowclasseipv4!: pulumi.Output<string>;
    public readonly dropdfflag!: pulumi.Output<string>;
    public readonly dropipfragments!: pulumi.Output<string>;
    public readonly dynamicrouting!: pulumi.Output<string>;
    public readonly externalloopback!: pulumi.Output<string>;
    public readonly forwardicmpfragments!: pulumi.Output<string>;
    public readonly icmpgenratethreshold!: pulumi.Output<number>;
    public readonly implicitaclallow!: pulumi.Output<string>;
    public readonly ipv6dynamicrouting!: pulumi.Output<string>;
    public readonly miproundrobin!: pulumi.Output<string>;
    public readonly overridernat!: pulumi.Output<string>;
    public readonly srcnat!: pulumi.Output<string>;
    public readonly tnlpmtuwoconn!: pulumi.Output<string>;
    public readonly usipserverstraypkt!: pulumi.Output<string>;

    /**
     * Create a L3param resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: L3paramArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L3paramArgs | L3paramState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L3paramState | undefined;
            resourceInputs["acllogtime"] = state ? state.acllogtime : undefined;
            resourceInputs["allowclasseipv4"] = state ? state.allowclasseipv4 : undefined;
            resourceInputs["dropdfflag"] = state ? state.dropdfflag : undefined;
            resourceInputs["dropipfragments"] = state ? state.dropipfragments : undefined;
            resourceInputs["dynamicrouting"] = state ? state.dynamicrouting : undefined;
            resourceInputs["externalloopback"] = state ? state.externalloopback : undefined;
            resourceInputs["forwardicmpfragments"] = state ? state.forwardicmpfragments : undefined;
            resourceInputs["icmpgenratethreshold"] = state ? state.icmpgenratethreshold : undefined;
            resourceInputs["implicitaclallow"] = state ? state.implicitaclallow : undefined;
            resourceInputs["ipv6dynamicrouting"] = state ? state.ipv6dynamicrouting : undefined;
            resourceInputs["miproundrobin"] = state ? state.miproundrobin : undefined;
            resourceInputs["overridernat"] = state ? state.overridernat : undefined;
            resourceInputs["srcnat"] = state ? state.srcnat : undefined;
            resourceInputs["tnlpmtuwoconn"] = state ? state.tnlpmtuwoconn : undefined;
            resourceInputs["usipserverstraypkt"] = state ? state.usipserverstraypkt : undefined;
        } else {
            const args = argsOrState as L3paramArgs | undefined;
            resourceInputs["acllogtime"] = args ? args.acllogtime : undefined;
            resourceInputs["allowclasseipv4"] = args ? args.allowclasseipv4 : undefined;
            resourceInputs["dropdfflag"] = args ? args.dropdfflag : undefined;
            resourceInputs["dropipfragments"] = args ? args.dropipfragments : undefined;
            resourceInputs["dynamicrouting"] = args ? args.dynamicrouting : undefined;
            resourceInputs["externalloopback"] = args ? args.externalloopback : undefined;
            resourceInputs["forwardicmpfragments"] = args ? args.forwardicmpfragments : undefined;
            resourceInputs["icmpgenratethreshold"] = args ? args.icmpgenratethreshold : undefined;
            resourceInputs["implicitaclallow"] = args ? args.implicitaclallow : undefined;
            resourceInputs["ipv6dynamicrouting"] = args ? args.ipv6dynamicrouting : undefined;
            resourceInputs["miproundrobin"] = args ? args.miproundrobin : undefined;
            resourceInputs["overridernat"] = args ? args.overridernat : undefined;
            resourceInputs["srcnat"] = args ? args.srcnat : undefined;
            resourceInputs["tnlpmtuwoconn"] = args ? args.tnlpmtuwoconn : undefined;
            resourceInputs["usipserverstraypkt"] = args ? args.usipserverstraypkt : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L3param.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering L3param resources.
 */
export interface L3paramState {
    acllogtime?: pulumi.Input<number>;
    allowclasseipv4?: pulumi.Input<string>;
    dropdfflag?: pulumi.Input<string>;
    dropipfragments?: pulumi.Input<string>;
    dynamicrouting?: pulumi.Input<string>;
    externalloopback?: pulumi.Input<string>;
    forwardicmpfragments?: pulumi.Input<string>;
    icmpgenratethreshold?: pulumi.Input<number>;
    implicitaclallow?: pulumi.Input<string>;
    ipv6dynamicrouting?: pulumi.Input<string>;
    miproundrobin?: pulumi.Input<string>;
    overridernat?: pulumi.Input<string>;
    srcnat?: pulumi.Input<string>;
    tnlpmtuwoconn?: pulumi.Input<string>;
    usipserverstraypkt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a L3param resource.
 */
export interface L3paramArgs {
    acllogtime?: pulumi.Input<number>;
    allowclasseipv4?: pulumi.Input<string>;
    dropdfflag?: pulumi.Input<string>;
    dropipfragments?: pulumi.Input<string>;
    dynamicrouting?: pulumi.Input<string>;
    externalloopback?: pulumi.Input<string>;
    forwardicmpfragments?: pulumi.Input<string>;
    icmpgenratethreshold?: pulumi.Input<number>;
    implicitaclallow?: pulumi.Input<string>;
    ipv6dynamicrouting?: pulumi.Input<string>;
    miproundrobin?: pulumi.Input<string>;
    overridernat?: pulumi.Input<string>;
    srcnat?: pulumi.Input<string>;
    tnlpmtuwoconn?: pulumi.Input<string>;
    usipserverstraypkt?: pulumi.Input<string>;
}
