// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Dnszone extends pulumi.CustomResource {
    /**
     * Get an existing Dnszone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnszoneState, opts?: pulumi.CustomResourceOptions): Dnszone {
        return new Dnszone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/dnszone:Dnszone';

    /**
     * Returns true if the given object is an instance of Dnszone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dnszone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dnszone.__pulumiType;
    }

    public readonly dnssecoffload!: pulumi.Output<string>;
    public readonly keynames!: pulumi.Output<string[]>;
    public readonly nsec!: pulumi.Output<string>;
    public readonly proxymode!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly zonename!: pulumi.Output<string>;

    /**
     * Create a Dnszone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnszoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnszoneArgs | DnszoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnszoneState | undefined;
            resourceInputs["dnssecoffload"] = state ? state.dnssecoffload : undefined;
            resourceInputs["keynames"] = state ? state.keynames : undefined;
            resourceInputs["nsec"] = state ? state.nsec : undefined;
            resourceInputs["proxymode"] = state ? state.proxymode : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zonename"] = state ? state.zonename : undefined;
        } else {
            const args = argsOrState as DnszoneArgs | undefined;
            if ((!args || args.proxymode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proxymode'");
            }
            if ((!args || args.zonename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zonename'");
            }
            resourceInputs["dnssecoffload"] = args ? args.dnssecoffload : undefined;
            resourceInputs["keynames"] = args ? args.keynames : undefined;
            resourceInputs["nsec"] = args ? args.nsec : undefined;
            resourceInputs["proxymode"] = args ? args.proxymode : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zonename"] = args ? args.zonename : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dnszone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dnszone resources.
 */
export interface DnszoneState {
    dnssecoffload?: pulumi.Input<string>;
    keynames?: pulumi.Input<pulumi.Input<string>[]>;
    nsec?: pulumi.Input<string>;
    proxymode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    zonename?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dnszone resource.
 */
export interface DnszoneArgs {
    dnssecoffload?: pulumi.Input<string>;
    keynames?: pulumi.Input<pulumi.Input<string>[]>;
    nsec?: pulumi.Input<string>;
    proxymode: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    zonename: pulumi.Input<string>;
}
