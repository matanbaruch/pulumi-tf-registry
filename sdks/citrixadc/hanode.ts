// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Hanode extends pulumi.CustomResource {
    /**
     * Get an existing Hanode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HanodeState, opts?: pulumi.CustomResourceOptions): Hanode {
        return new Hanode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/hanode:Hanode';

    /**
     * Returns true if the given object is an instance of Hanode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hanode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hanode.__pulumiType;
    }

    public readonly deadinterval!: pulumi.Output<number>;
    public readonly failsafe!: pulumi.Output<string>;
    public readonly hanodeId!: pulumi.Output<number>;
    public readonly haprop!: pulumi.Output<string>;
    public readonly hastatus!: pulumi.Output<string>;
    public readonly hasync!: pulumi.Output<string>;
    public readonly hellointerval!: pulumi.Output<number>;
    public readonly inc!: pulumi.Output<string>;
    public readonly ipaddress!: pulumi.Output<string | undefined>;
    public readonly maxflips!: pulumi.Output<number>;
    public readonly maxfliptime!: pulumi.Output<number>;
    public readonly syncstatusstrictmode!: pulumi.Output<string>;
    public readonly syncvlan!: pulumi.Output<number>;

    /**
     * Create a Hanode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HanodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HanodeArgs | HanodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HanodeState | undefined;
            resourceInputs["deadinterval"] = state ? state.deadinterval : undefined;
            resourceInputs["failsafe"] = state ? state.failsafe : undefined;
            resourceInputs["hanodeId"] = state ? state.hanodeId : undefined;
            resourceInputs["haprop"] = state ? state.haprop : undefined;
            resourceInputs["hastatus"] = state ? state.hastatus : undefined;
            resourceInputs["hasync"] = state ? state.hasync : undefined;
            resourceInputs["hellointerval"] = state ? state.hellointerval : undefined;
            resourceInputs["inc"] = state ? state.inc : undefined;
            resourceInputs["ipaddress"] = state ? state.ipaddress : undefined;
            resourceInputs["maxflips"] = state ? state.maxflips : undefined;
            resourceInputs["maxfliptime"] = state ? state.maxfliptime : undefined;
            resourceInputs["syncstatusstrictmode"] = state ? state.syncstatusstrictmode : undefined;
            resourceInputs["syncvlan"] = state ? state.syncvlan : undefined;
        } else {
            const args = argsOrState as HanodeArgs | undefined;
            if ((!args || args.hanodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hanodeId'");
            }
            resourceInputs["deadinterval"] = args ? args.deadinterval : undefined;
            resourceInputs["failsafe"] = args ? args.failsafe : undefined;
            resourceInputs["hanodeId"] = args ? args.hanodeId : undefined;
            resourceInputs["haprop"] = args ? args.haprop : undefined;
            resourceInputs["hastatus"] = args ? args.hastatus : undefined;
            resourceInputs["hasync"] = args ? args.hasync : undefined;
            resourceInputs["hellointerval"] = args ? args.hellointerval : undefined;
            resourceInputs["inc"] = args ? args.inc : undefined;
            resourceInputs["ipaddress"] = args ? args.ipaddress : undefined;
            resourceInputs["maxflips"] = args ? args.maxflips : undefined;
            resourceInputs["maxfliptime"] = args ? args.maxfliptime : undefined;
            resourceInputs["syncstatusstrictmode"] = args ? args.syncstatusstrictmode : undefined;
            resourceInputs["syncvlan"] = args ? args.syncvlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Hanode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Hanode resources.
 */
export interface HanodeState {
    deadinterval?: pulumi.Input<number>;
    failsafe?: pulumi.Input<string>;
    hanodeId?: pulumi.Input<number>;
    haprop?: pulumi.Input<string>;
    hastatus?: pulumi.Input<string>;
    hasync?: pulumi.Input<string>;
    hellointerval?: pulumi.Input<number>;
    inc?: pulumi.Input<string>;
    ipaddress?: pulumi.Input<string>;
    maxflips?: pulumi.Input<number>;
    maxfliptime?: pulumi.Input<number>;
    syncstatusstrictmode?: pulumi.Input<string>;
    syncvlan?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Hanode resource.
 */
export interface HanodeArgs {
    deadinterval?: pulumi.Input<number>;
    failsafe?: pulumi.Input<string>;
    hanodeId: pulumi.Input<number>;
    haprop?: pulumi.Input<string>;
    hastatus?: pulumi.Input<string>;
    hasync?: pulumi.Input<string>;
    hellointerval?: pulumi.Input<number>;
    inc?: pulumi.Input<string>;
    ipaddress?: pulumi.Input<string>;
    maxflips?: pulumi.Input<number>;
    maxfliptime?: pulumi.Input<number>;
    syncstatusstrictmode?: pulumi.Input<string>;
    syncvlan?: pulumi.Input<number>;
}
