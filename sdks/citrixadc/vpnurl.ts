// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vpnurl extends pulumi.CustomResource {
    /**
     * Get an existing Vpnurl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnurlState, opts?: pulumi.CustomResourceOptions): Vpnurl {
        return new Vpnurl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/vpnurl:Vpnurl';

    /**
     * Returns true if the given object is an instance of Vpnurl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpnurl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpnurl.__pulumiType;
    }

    public readonly actualurl!: pulumi.Output<string>;
    public readonly appjson!: pulumi.Output<string>;
    public readonly applicationtype!: pulumi.Output<string>;
    public readonly clientlessaccess!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly iconurl!: pulumi.Output<string>;
    public readonly linkname!: pulumi.Output<string>;
    public readonly samlssoprofile!: pulumi.Output<string>;
    public readonly ssotype!: pulumi.Output<string>;
    public readonly urlname!: pulumi.Output<string>;
    public readonly vservername!: pulumi.Output<string>;

    /**
     * Create a Vpnurl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnurlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnurlArgs | VpnurlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnurlState | undefined;
            resourceInputs["actualurl"] = state ? state.actualurl : undefined;
            resourceInputs["appjson"] = state ? state.appjson : undefined;
            resourceInputs["applicationtype"] = state ? state.applicationtype : undefined;
            resourceInputs["clientlessaccess"] = state ? state.clientlessaccess : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["iconurl"] = state ? state.iconurl : undefined;
            resourceInputs["linkname"] = state ? state.linkname : undefined;
            resourceInputs["samlssoprofile"] = state ? state.samlssoprofile : undefined;
            resourceInputs["ssotype"] = state ? state.ssotype : undefined;
            resourceInputs["urlname"] = state ? state.urlname : undefined;
            resourceInputs["vservername"] = state ? state.vservername : undefined;
        } else {
            const args = argsOrState as VpnurlArgs | undefined;
            if ((!args || args.actualurl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actualurl'");
            }
            if ((!args || args.linkname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkname'");
            }
            if ((!args || args.urlname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'urlname'");
            }
            resourceInputs["actualurl"] = args ? args.actualurl : undefined;
            resourceInputs["appjson"] = args ? args.appjson : undefined;
            resourceInputs["applicationtype"] = args ? args.applicationtype : undefined;
            resourceInputs["clientlessaccess"] = args ? args.clientlessaccess : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["iconurl"] = args ? args.iconurl : undefined;
            resourceInputs["linkname"] = args ? args.linkname : undefined;
            resourceInputs["samlssoprofile"] = args ? args.samlssoprofile : undefined;
            resourceInputs["ssotype"] = args ? args.ssotype : undefined;
            resourceInputs["urlname"] = args ? args.urlname : undefined;
            resourceInputs["vservername"] = args ? args.vservername : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vpnurl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vpnurl resources.
 */
export interface VpnurlState {
    actualurl?: pulumi.Input<string>;
    appjson?: pulumi.Input<string>;
    applicationtype?: pulumi.Input<string>;
    clientlessaccess?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    iconurl?: pulumi.Input<string>;
    linkname?: pulumi.Input<string>;
    samlssoprofile?: pulumi.Input<string>;
    ssotype?: pulumi.Input<string>;
    urlname?: pulumi.Input<string>;
    vservername?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vpnurl resource.
 */
export interface VpnurlArgs {
    actualurl: pulumi.Input<string>;
    appjson?: pulumi.Input<string>;
    applicationtype?: pulumi.Input<string>;
    clientlessaccess?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    iconurl?: pulumi.Input<string>;
    linkname: pulumi.Input<string>;
    samlssoprofile?: pulumi.Input<string>;
    ssotype?: pulumi.Input<string>;
    urlname: pulumi.Input<string>;
    vservername?: pulumi.Input<string>;
}
