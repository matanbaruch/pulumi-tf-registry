// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Lsnhttphdrlogprofile extends pulumi.CustomResource {
    /**
     * Get an existing Lsnhttphdrlogprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LsnhttphdrlogprofileState, opts?: pulumi.CustomResourceOptions): Lsnhttphdrlogprofile {
        return new Lsnhttphdrlogprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/lsnhttphdrlogprofile:Lsnhttphdrlogprofile';

    /**
     * Returns true if the given object is an instance of Lsnhttphdrlogprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lsnhttphdrlogprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lsnhttphdrlogprofile.__pulumiType;
    }

    public readonly httphdrlogprofilename!: pulumi.Output<string>;
    public readonly loghost!: pulumi.Output<string>;
    public readonly logmethod!: pulumi.Output<string>;
    public readonly logurl!: pulumi.Output<string>;
    public readonly logversion!: pulumi.Output<string>;

    /**
     * Create a Lsnhttphdrlogprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LsnhttphdrlogprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LsnhttphdrlogprofileArgs | LsnhttphdrlogprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LsnhttphdrlogprofileState | undefined;
            resourceInputs["httphdrlogprofilename"] = state ? state.httphdrlogprofilename : undefined;
            resourceInputs["loghost"] = state ? state.loghost : undefined;
            resourceInputs["logmethod"] = state ? state.logmethod : undefined;
            resourceInputs["logurl"] = state ? state.logurl : undefined;
            resourceInputs["logversion"] = state ? state.logversion : undefined;
        } else {
            const args = argsOrState as LsnhttphdrlogprofileArgs | undefined;
            if ((!args || args.httphdrlogprofilename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httphdrlogprofilename'");
            }
            resourceInputs["httphdrlogprofilename"] = args ? args.httphdrlogprofilename : undefined;
            resourceInputs["loghost"] = args ? args.loghost : undefined;
            resourceInputs["logmethod"] = args ? args.logmethod : undefined;
            resourceInputs["logurl"] = args ? args.logurl : undefined;
            resourceInputs["logversion"] = args ? args.logversion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lsnhttphdrlogprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lsnhttphdrlogprofile resources.
 */
export interface LsnhttphdrlogprofileState {
    httphdrlogprofilename?: pulumi.Input<string>;
    loghost?: pulumi.Input<string>;
    logmethod?: pulumi.Input<string>;
    logurl?: pulumi.Input<string>;
    logversion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lsnhttphdrlogprofile resource.
 */
export interface LsnhttphdrlogprofileArgs {
    httphdrlogprofilename: pulumi.Input<string>;
    loghost?: pulumi.Input<string>;
    logmethod?: pulumi.Input<string>;
    logurl?: pulumi.Input<string>;
    logversion?: pulumi.Input<string>;
}
