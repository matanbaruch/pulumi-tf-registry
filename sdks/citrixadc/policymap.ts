// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Policymap extends pulumi.CustomResource {
    /**
     * Get an existing Policymap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicymapState, opts?: pulumi.CustomResourceOptions): Policymap {
        return new Policymap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/policymap:Policymap';

    /**
     * Returns true if the given object is an instance of Policymap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policymap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policymap.__pulumiType;
    }

    public readonly mappolicyname!: pulumi.Output<string>;
    public readonly sd!: pulumi.Output<string>;
    public readonly su!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<string>;
    public readonly tu!: pulumi.Output<string>;

    /**
     * Create a Policymap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicymapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicymapArgs | PolicymapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicymapState | undefined;
            resourceInputs["mappolicyname"] = state ? state.mappolicyname : undefined;
            resourceInputs["sd"] = state ? state.sd : undefined;
            resourceInputs["su"] = state ? state.su : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["tu"] = state ? state.tu : undefined;
        } else {
            const args = argsOrState as PolicymapArgs | undefined;
            if ((!args || args.mappolicyname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mappolicyname'");
            }
            if ((!args || args.sd === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sd'");
            }
            if ((!args || args.td === undefined) && !opts.urn) {
                throw new Error("Missing required property 'td'");
            }
            resourceInputs["mappolicyname"] = args ? args.mappolicyname : undefined;
            resourceInputs["sd"] = args ? args.sd : undefined;
            resourceInputs["su"] = args ? args.su : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["tu"] = args ? args.tu : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policymap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Policymap resources.
 */
export interface PolicymapState {
    mappolicyname?: pulumi.Input<string>;
    sd?: pulumi.Input<string>;
    su?: pulumi.Input<string>;
    td?: pulumi.Input<string>;
    tu?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policymap resource.
 */
export interface PolicymapArgs {
    mappolicyname: pulumi.Input<string>;
    sd: pulumi.Input<string>;
    su?: pulumi.Input<string>;
    td: pulumi.Input<string>;
    tu?: pulumi.Input<string>;
}
