// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Rewritepolicy extends pulumi.CustomResource {
    /**
     * Get an existing Rewritepolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RewritepolicyState, opts?: pulumi.CustomResourceOptions): Rewritepolicy {
        return new Rewritepolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/rewritepolicy:Rewritepolicy';

    /**
     * Returns true if the given object is an instance of Rewritepolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rewritepolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rewritepolicy.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly csvserverbindings!: pulumi.Output<outputs.RewritepolicyCsvserverbinding[] | undefined>;
    public readonly globalbindings!: pulumi.Output<outputs.RewritepolicyGlobalbinding[] | undefined>;
    public readonly lbvserverbindings!: pulumi.Output<outputs.RewritepolicyLbvserverbinding[] | undefined>;
    public readonly logaction!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly rule!: pulumi.Output<string>;
    public readonly undefaction!: pulumi.Output<string>;

    /**
     * Create a Rewritepolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RewritepolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RewritepolicyArgs | RewritepolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RewritepolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["csvserverbindings"] = state ? state.csvserverbindings : undefined;
            resourceInputs["globalbindings"] = state ? state.globalbindings : undefined;
            resourceInputs["lbvserverbindings"] = state ? state.lbvserverbindings : undefined;
            resourceInputs["logaction"] = state ? state.logaction : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["undefaction"] = state ? state.undefaction : undefined;
        } else {
            const args = argsOrState as RewritepolicyArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["csvserverbindings"] = args ? args.csvserverbindings : undefined;
            resourceInputs["globalbindings"] = args ? args.globalbindings : undefined;
            resourceInputs["lbvserverbindings"] = args ? args.lbvserverbindings : undefined;
            resourceInputs["logaction"] = args ? args.logaction : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["undefaction"] = args ? args.undefaction : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rewritepolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Rewritepolicy resources.
 */
export interface RewritepolicyState {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    csvserverbindings?: pulumi.Input<pulumi.Input<inputs.RewritepolicyCsvserverbinding>[]>;
    globalbindings?: pulumi.Input<pulumi.Input<inputs.RewritepolicyGlobalbinding>[]>;
    lbvserverbindings?: pulumi.Input<pulumi.Input<inputs.RewritepolicyLbvserverbinding>[]>;
    logaction?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
    undefaction?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Rewritepolicy resource.
 */
export interface RewritepolicyArgs {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    csvserverbindings?: pulumi.Input<pulumi.Input<inputs.RewritepolicyCsvserverbinding>[]>;
    globalbindings?: pulumi.Input<pulumi.Input<inputs.RewritepolicyGlobalbinding>[]>;
    lbvserverbindings?: pulumi.Input<pulumi.Input<inputs.RewritepolicyLbvserverbinding>[]>;
    logaction?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
    undefaction?: pulumi.Input<string>;
}
