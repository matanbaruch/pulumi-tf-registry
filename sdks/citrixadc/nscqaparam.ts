// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nscqaparam extends pulumi.CustomResource {
    /**
     * Get an existing Nscqaparam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NscqaparamState, opts?: pulumi.CustomResourceOptions): Nscqaparam {
        return new Nscqaparam(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nscqaparam:Nscqaparam';

    /**
     * Returns true if the given object is an instance of Nscqaparam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nscqaparam {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nscqaparam.__pulumiType;
    }

    public readonly harqretxdelay!: pulumi.Output<number>;
    public readonly lr1coeflist!: pulumi.Output<string>;
    public readonly lr1probthresh!: pulumi.Output<number>;
    public readonly lr2coeflist!: pulumi.Output<string>;
    public readonly lr2probthresh!: pulumi.Output<number>;
    public readonly minrttnet1!: pulumi.Output<number>;
    public readonly minrttnet2!: pulumi.Output<number>;
    public readonly minrttnet3!: pulumi.Output<number>;
    public readonly net1cclscale!: pulumi.Output<string>;
    public readonly net1csqscale!: pulumi.Output<string>;
    public readonly net1label!: pulumi.Output<string>;
    public readonly net1logcoef!: pulumi.Output<string>;
    public readonly net2cclscale!: pulumi.Output<string>;
    public readonly net2csqscale!: pulumi.Output<string>;
    public readonly net2label!: pulumi.Output<string>;
    public readonly net2logcoef!: pulumi.Output<string>;
    public readonly net3cclscale!: pulumi.Output<string>;
    public readonly net3csqscale!: pulumi.Output<string>;
    public readonly net3label!: pulumi.Output<string>;
    public readonly net3logcoef!: pulumi.Output<string>;

    /**
     * Create a Nscqaparam resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NscqaparamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NscqaparamArgs | NscqaparamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NscqaparamState | undefined;
            resourceInputs["harqretxdelay"] = state ? state.harqretxdelay : undefined;
            resourceInputs["lr1coeflist"] = state ? state.lr1coeflist : undefined;
            resourceInputs["lr1probthresh"] = state ? state.lr1probthresh : undefined;
            resourceInputs["lr2coeflist"] = state ? state.lr2coeflist : undefined;
            resourceInputs["lr2probthresh"] = state ? state.lr2probthresh : undefined;
            resourceInputs["minrttnet1"] = state ? state.minrttnet1 : undefined;
            resourceInputs["minrttnet2"] = state ? state.minrttnet2 : undefined;
            resourceInputs["minrttnet3"] = state ? state.minrttnet3 : undefined;
            resourceInputs["net1cclscale"] = state ? state.net1cclscale : undefined;
            resourceInputs["net1csqscale"] = state ? state.net1csqscale : undefined;
            resourceInputs["net1label"] = state ? state.net1label : undefined;
            resourceInputs["net1logcoef"] = state ? state.net1logcoef : undefined;
            resourceInputs["net2cclscale"] = state ? state.net2cclscale : undefined;
            resourceInputs["net2csqscale"] = state ? state.net2csqscale : undefined;
            resourceInputs["net2label"] = state ? state.net2label : undefined;
            resourceInputs["net2logcoef"] = state ? state.net2logcoef : undefined;
            resourceInputs["net3cclscale"] = state ? state.net3cclscale : undefined;
            resourceInputs["net3csqscale"] = state ? state.net3csqscale : undefined;
            resourceInputs["net3label"] = state ? state.net3label : undefined;
            resourceInputs["net3logcoef"] = state ? state.net3logcoef : undefined;
        } else {
            const args = argsOrState as NscqaparamArgs | undefined;
            resourceInputs["harqretxdelay"] = args ? args.harqretxdelay : undefined;
            resourceInputs["lr1coeflist"] = args ? args.lr1coeflist : undefined;
            resourceInputs["lr1probthresh"] = args ? args.lr1probthresh : undefined;
            resourceInputs["lr2coeflist"] = args ? args.lr2coeflist : undefined;
            resourceInputs["lr2probthresh"] = args ? args.lr2probthresh : undefined;
            resourceInputs["minrttnet1"] = args ? args.minrttnet1 : undefined;
            resourceInputs["minrttnet2"] = args ? args.minrttnet2 : undefined;
            resourceInputs["minrttnet3"] = args ? args.minrttnet3 : undefined;
            resourceInputs["net1cclscale"] = args ? args.net1cclscale : undefined;
            resourceInputs["net1csqscale"] = args ? args.net1csqscale : undefined;
            resourceInputs["net1label"] = args ? args.net1label : undefined;
            resourceInputs["net1logcoef"] = args ? args.net1logcoef : undefined;
            resourceInputs["net2cclscale"] = args ? args.net2cclscale : undefined;
            resourceInputs["net2csqscale"] = args ? args.net2csqscale : undefined;
            resourceInputs["net2label"] = args ? args.net2label : undefined;
            resourceInputs["net2logcoef"] = args ? args.net2logcoef : undefined;
            resourceInputs["net3cclscale"] = args ? args.net3cclscale : undefined;
            resourceInputs["net3csqscale"] = args ? args.net3csqscale : undefined;
            resourceInputs["net3label"] = args ? args.net3label : undefined;
            resourceInputs["net3logcoef"] = args ? args.net3logcoef : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nscqaparam.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nscqaparam resources.
 */
export interface NscqaparamState {
    harqretxdelay?: pulumi.Input<number>;
    lr1coeflist?: pulumi.Input<string>;
    lr1probthresh?: pulumi.Input<number>;
    lr2coeflist?: pulumi.Input<string>;
    lr2probthresh?: pulumi.Input<number>;
    minrttnet1?: pulumi.Input<number>;
    minrttnet2?: pulumi.Input<number>;
    minrttnet3?: pulumi.Input<number>;
    net1cclscale?: pulumi.Input<string>;
    net1csqscale?: pulumi.Input<string>;
    net1label?: pulumi.Input<string>;
    net1logcoef?: pulumi.Input<string>;
    net2cclscale?: pulumi.Input<string>;
    net2csqscale?: pulumi.Input<string>;
    net2label?: pulumi.Input<string>;
    net2logcoef?: pulumi.Input<string>;
    net3cclscale?: pulumi.Input<string>;
    net3csqscale?: pulumi.Input<string>;
    net3label?: pulumi.Input<string>;
    net3logcoef?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nscqaparam resource.
 */
export interface NscqaparamArgs {
    harqretxdelay?: pulumi.Input<number>;
    lr1coeflist?: pulumi.Input<string>;
    lr1probthresh?: pulumi.Input<number>;
    lr2coeflist?: pulumi.Input<string>;
    lr2probthresh?: pulumi.Input<number>;
    minrttnet1?: pulumi.Input<number>;
    minrttnet2?: pulumi.Input<number>;
    minrttnet3?: pulumi.Input<number>;
    net1cclscale?: pulumi.Input<string>;
    net1csqscale?: pulumi.Input<string>;
    net1label?: pulumi.Input<string>;
    net1logcoef?: pulumi.Input<string>;
    net2cclscale?: pulumi.Input<string>;
    net2csqscale?: pulumi.Input<string>;
    net2label?: pulumi.Input<string>;
    net2logcoef?: pulumi.Input<string>;
    net3cclscale?: pulumi.Input<string>;
    net3csqscale?: pulumi.Input<string>;
    net3label?: pulumi.Input<string>;
    net3logcoef?: pulumi.Input<string>;
}
