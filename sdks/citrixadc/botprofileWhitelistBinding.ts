// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BotprofileWhitelistBinding extends pulumi.CustomResource {
    /**
     * Get an existing BotprofileWhitelistBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BotprofileWhitelistBindingState, opts?: pulumi.CustomResourceOptions): BotprofileWhitelistBinding {
        return new BotprofileWhitelistBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/botprofileWhitelistBinding:BotprofileWhitelistBinding';

    /**
     * Returns true if the given object is an instance of BotprofileWhitelistBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BotprofileWhitelistBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BotprofileWhitelistBinding.__pulumiType;
    }

    public readonly botBindComment!: pulumi.Output<string>;
    public readonly botWhitelist!: pulumi.Output<boolean>;
    public readonly botWhitelistEnabled!: pulumi.Output<string>;
    public readonly botWhitelistType!: pulumi.Output<string>;
    public readonly botWhitelistValue!: pulumi.Output<string>;
    public readonly log!: pulumi.Output<string>;
    public readonly logmessage!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a BotprofileWhitelistBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BotprofileWhitelistBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BotprofileWhitelistBindingArgs | BotprofileWhitelistBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BotprofileWhitelistBindingState | undefined;
            resourceInputs["botBindComment"] = state ? state.botBindComment : undefined;
            resourceInputs["botWhitelist"] = state ? state.botWhitelist : undefined;
            resourceInputs["botWhitelistEnabled"] = state ? state.botWhitelistEnabled : undefined;
            resourceInputs["botWhitelistType"] = state ? state.botWhitelistType : undefined;
            resourceInputs["botWhitelistValue"] = state ? state.botWhitelistValue : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["logmessage"] = state ? state.logmessage : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as BotprofileWhitelistBindingArgs | undefined;
            if ((!args || args.botWhitelistValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botWhitelistValue'");
            }
            resourceInputs["botBindComment"] = args ? args.botBindComment : undefined;
            resourceInputs["botWhitelist"] = args ? args.botWhitelist : undefined;
            resourceInputs["botWhitelistEnabled"] = args ? args.botWhitelistEnabled : undefined;
            resourceInputs["botWhitelistType"] = args ? args.botWhitelistType : undefined;
            resourceInputs["botWhitelistValue"] = args ? args.botWhitelistValue : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["logmessage"] = args ? args.logmessage : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BotprofileWhitelistBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BotprofileWhitelistBinding resources.
 */
export interface BotprofileWhitelistBindingState {
    botBindComment?: pulumi.Input<string>;
    botWhitelist?: pulumi.Input<boolean>;
    botWhitelistEnabled?: pulumi.Input<string>;
    botWhitelistType?: pulumi.Input<string>;
    botWhitelistValue?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logmessage?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BotprofileWhitelistBinding resource.
 */
export interface BotprofileWhitelistBindingArgs {
    botBindComment?: pulumi.Input<string>;
    botWhitelist?: pulumi.Input<boolean>;
    botWhitelistEnabled?: pulumi.Input<string>;
    botWhitelistType?: pulumi.Input<string>;
    botWhitelistValue: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logmessage?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
