// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Auditsyslogaction extends pulumi.CustomResource {
    /**
     * Get an existing Auditsyslogaction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuditsyslogactionState, opts?: pulumi.CustomResourceOptions): Auditsyslogaction {
        return new Auditsyslogaction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/auditsyslogaction:Auditsyslogaction';

    /**
     * Returns true if the given object is an instance of Auditsyslogaction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Auditsyslogaction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Auditsyslogaction.__pulumiType;
    }

    public readonly acl!: pulumi.Output<string>;
    public readonly alg!: pulumi.Output<string>;
    public readonly appflowexport!: pulumi.Output<string>;
    public readonly contentinspectionlog!: pulumi.Output<string>;
    public readonly dateformat!: pulumi.Output<string>;
    public readonly dns!: pulumi.Output<string>;
    public readonly domainresolvenow!: pulumi.Output<boolean>;
    public readonly domainresolveretry!: pulumi.Output<number>;
    public readonly lbvservername!: pulumi.Output<string>;
    public readonly logfacility!: pulumi.Output<string>;
    public readonly loglevels!: pulumi.Output<string[]>;
    public readonly lsn!: pulumi.Output<string>;
    public readonly maxlogdatasizetohold!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly netprofile!: pulumi.Output<string>;
    public readonly serverdomainname!: pulumi.Output<string>;
    public readonly serverip!: pulumi.Output<string>;
    public readonly serverport!: pulumi.Output<number>;
    public readonly sslinterception!: pulumi.Output<string>;
    public readonly subscriberlog!: pulumi.Output<string>;
    public readonly tcp!: pulumi.Output<string>;
    public readonly tcpprofilename!: pulumi.Output<string>;
    public readonly timezone!: pulumi.Output<string>;
    public readonly transport!: pulumi.Output<string>;
    public readonly urlfiltering!: pulumi.Output<string>;
    public readonly userdefinedauditlog!: pulumi.Output<string>;

    /**
     * Create a Auditsyslogaction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AuditsyslogactionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuditsyslogactionArgs | AuditsyslogactionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuditsyslogactionState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["alg"] = state ? state.alg : undefined;
            resourceInputs["appflowexport"] = state ? state.appflowexport : undefined;
            resourceInputs["contentinspectionlog"] = state ? state.contentinspectionlog : undefined;
            resourceInputs["dateformat"] = state ? state.dateformat : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["domainresolvenow"] = state ? state.domainresolvenow : undefined;
            resourceInputs["domainresolveretry"] = state ? state.domainresolveretry : undefined;
            resourceInputs["lbvservername"] = state ? state.lbvservername : undefined;
            resourceInputs["logfacility"] = state ? state.logfacility : undefined;
            resourceInputs["loglevels"] = state ? state.loglevels : undefined;
            resourceInputs["lsn"] = state ? state.lsn : undefined;
            resourceInputs["maxlogdatasizetohold"] = state ? state.maxlogdatasizetohold : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netprofile"] = state ? state.netprofile : undefined;
            resourceInputs["serverdomainname"] = state ? state.serverdomainname : undefined;
            resourceInputs["serverip"] = state ? state.serverip : undefined;
            resourceInputs["serverport"] = state ? state.serverport : undefined;
            resourceInputs["sslinterception"] = state ? state.sslinterception : undefined;
            resourceInputs["subscriberlog"] = state ? state.subscriberlog : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["tcpprofilename"] = state ? state.tcpprofilename : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["transport"] = state ? state.transport : undefined;
            resourceInputs["urlfiltering"] = state ? state.urlfiltering : undefined;
            resourceInputs["userdefinedauditlog"] = state ? state.userdefinedauditlog : undefined;
        } else {
            const args = argsOrState as AuditsyslogactionArgs | undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["alg"] = args ? args.alg : undefined;
            resourceInputs["appflowexport"] = args ? args.appflowexport : undefined;
            resourceInputs["contentinspectionlog"] = args ? args.contentinspectionlog : undefined;
            resourceInputs["dateformat"] = args ? args.dateformat : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["domainresolvenow"] = args ? args.domainresolvenow : undefined;
            resourceInputs["domainresolveretry"] = args ? args.domainresolveretry : undefined;
            resourceInputs["lbvservername"] = args ? args.lbvservername : undefined;
            resourceInputs["logfacility"] = args ? args.logfacility : undefined;
            resourceInputs["loglevels"] = args ? args.loglevels : undefined;
            resourceInputs["lsn"] = args ? args.lsn : undefined;
            resourceInputs["maxlogdatasizetohold"] = args ? args.maxlogdatasizetohold : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netprofile"] = args ? args.netprofile : undefined;
            resourceInputs["serverdomainname"] = args ? args.serverdomainname : undefined;
            resourceInputs["serverip"] = args ? args.serverip : undefined;
            resourceInputs["serverport"] = args ? args.serverport : undefined;
            resourceInputs["sslinterception"] = args ? args.sslinterception : undefined;
            resourceInputs["subscriberlog"] = args ? args.subscriberlog : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["tcpprofilename"] = args ? args.tcpprofilename : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["transport"] = args ? args.transport : undefined;
            resourceInputs["urlfiltering"] = args ? args.urlfiltering : undefined;
            resourceInputs["userdefinedauditlog"] = args ? args.userdefinedauditlog : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Auditsyslogaction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Auditsyslogaction resources.
 */
export interface AuditsyslogactionState {
    acl?: pulumi.Input<string>;
    alg?: pulumi.Input<string>;
    appflowexport?: pulumi.Input<string>;
    contentinspectionlog?: pulumi.Input<string>;
    dateformat?: pulumi.Input<string>;
    dns?: pulumi.Input<string>;
    domainresolvenow?: pulumi.Input<boolean>;
    domainresolveretry?: pulumi.Input<number>;
    lbvservername?: pulumi.Input<string>;
    logfacility?: pulumi.Input<string>;
    loglevels?: pulumi.Input<pulumi.Input<string>[]>;
    lsn?: pulumi.Input<string>;
    maxlogdatasizetohold?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    netprofile?: pulumi.Input<string>;
    serverdomainname?: pulumi.Input<string>;
    serverip?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    sslinterception?: pulumi.Input<string>;
    subscriberlog?: pulumi.Input<string>;
    tcp?: pulumi.Input<string>;
    tcpprofilename?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    transport?: pulumi.Input<string>;
    urlfiltering?: pulumi.Input<string>;
    userdefinedauditlog?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Auditsyslogaction resource.
 */
export interface AuditsyslogactionArgs {
    acl?: pulumi.Input<string>;
    alg?: pulumi.Input<string>;
    appflowexport?: pulumi.Input<string>;
    contentinspectionlog?: pulumi.Input<string>;
    dateformat?: pulumi.Input<string>;
    dns?: pulumi.Input<string>;
    domainresolvenow?: pulumi.Input<boolean>;
    domainresolveretry?: pulumi.Input<number>;
    lbvservername?: pulumi.Input<string>;
    logfacility?: pulumi.Input<string>;
    loglevels?: pulumi.Input<pulumi.Input<string>[]>;
    lsn?: pulumi.Input<string>;
    maxlogdatasizetohold?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    netprofile?: pulumi.Input<string>;
    serverdomainname?: pulumi.Input<string>;
    serverip?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    sslinterception?: pulumi.Input<string>;
    subscriberlog?: pulumi.Input<string>;
    tcp?: pulumi.Input<string>;
    tcpprofilename?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    transport?: pulumi.Input<string>;
    urlfiltering?: pulumi.Input<string>;
    userdefinedauditlog?: pulumi.Input<string>;
}
