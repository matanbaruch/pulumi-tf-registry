// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Bridgetable extends pulumi.CustomResource {
    /**
     * Get an existing Bridgetable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BridgetableState, opts?: pulumi.CustomResourceOptions): Bridgetable {
        return new Bridgetable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/bridgetable:Bridgetable';

    /**
     * Returns true if the given object is an instance of Bridgetable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bridgetable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bridgetable.__pulumiType;
    }

    public readonly bridgeage!: pulumi.Output<number>;
    public readonly devicevlan!: pulumi.Output<number>;
    public readonly ifnum!: pulumi.Output<string>;
    public readonly mac!: pulumi.Output<string>;
    public readonly nodeid!: pulumi.Output<number>;
    public readonly vlan!: pulumi.Output<number>;
    public readonly vni!: pulumi.Output<number>;
    public readonly vtep!: pulumi.Output<string>;
    public readonly vxlan!: pulumi.Output<number>;

    /**
     * Create a Bridgetable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BridgetableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BridgetableArgs | BridgetableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BridgetableState | undefined;
            resourceInputs["bridgeage"] = state ? state.bridgeage : undefined;
            resourceInputs["devicevlan"] = state ? state.devicevlan : undefined;
            resourceInputs["ifnum"] = state ? state.ifnum : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["nodeid"] = state ? state.nodeid : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["vni"] = state ? state.vni : undefined;
            resourceInputs["vtep"] = state ? state.vtep : undefined;
            resourceInputs["vxlan"] = state ? state.vxlan : undefined;
        } else {
            const args = argsOrState as BridgetableArgs | undefined;
            if ((!args || args.mac === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mac'");
            }
            if ((!args || args.vtep === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vtep'");
            }
            if ((!args || args.vxlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vxlan'");
            }
            resourceInputs["bridgeage"] = args ? args.bridgeage : undefined;
            resourceInputs["devicevlan"] = args ? args.devicevlan : undefined;
            resourceInputs["ifnum"] = args ? args.ifnum : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["nodeid"] = args ? args.nodeid : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["vni"] = args ? args.vni : undefined;
            resourceInputs["vtep"] = args ? args.vtep : undefined;
            resourceInputs["vxlan"] = args ? args.vxlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bridgetable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Bridgetable resources.
 */
export interface BridgetableState {
    bridgeage?: pulumi.Input<number>;
    devicevlan?: pulumi.Input<number>;
    ifnum?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    nodeid?: pulumi.Input<number>;
    vlan?: pulumi.Input<number>;
    vni?: pulumi.Input<number>;
    vtep?: pulumi.Input<string>;
    vxlan?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Bridgetable resource.
 */
export interface BridgetableArgs {
    bridgeage?: pulumi.Input<number>;
    devicevlan?: pulumi.Input<number>;
    ifnum?: pulumi.Input<string>;
    mac: pulumi.Input<string>;
    nodeid?: pulumi.Input<number>;
    vlan?: pulumi.Input<number>;
    vni?: pulumi.Input<number>;
    vtep: pulumi.Input<string>;
    vxlan: pulumi.Input<number>;
}
