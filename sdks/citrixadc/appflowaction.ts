// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Appflowaction extends pulumi.CustomResource {
    /**
     * Get an existing Appflowaction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppflowactionState, opts?: pulumi.CustomResourceOptions): Appflowaction {
        return new Appflowaction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/appflowaction:Appflowaction';

    /**
     * Returns true if the given object is an instance of Appflowaction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Appflowaction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Appflowaction.__pulumiType;
    }

    public readonly botinsight!: pulumi.Output<string>;
    public readonly ciinsight!: pulumi.Output<string>;
    public readonly clientsidemeasurements!: pulumi.Output<string>;
    public readonly collectors!: pulumi.Output<string[]>;
    public readonly comment!: pulumi.Output<string>;
    public readonly distributionalgorithm!: pulumi.Output<string>;
    public readonly metricslog!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly pagetracking!: pulumi.Output<string>;
    public readonly securityinsight!: pulumi.Output<string>;
    public readonly transactionlog!: pulumi.Output<string>;
    public readonly videoanalytics!: pulumi.Output<string>;
    public readonly webinsight!: pulumi.Output<string>;

    /**
     * Create a Appflowaction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AppflowactionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppflowactionArgs | AppflowactionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppflowactionState | undefined;
            resourceInputs["botinsight"] = state ? state.botinsight : undefined;
            resourceInputs["ciinsight"] = state ? state.ciinsight : undefined;
            resourceInputs["clientsidemeasurements"] = state ? state.clientsidemeasurements : undefined;
            resourceInputs["collectors"] = state ? state.collectors : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["distributionalgorithm"] = state ? state.distributionalgorithm : undefined;
            resourceInputs["metricslog"] = state ? state.metricslog : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pagetracking"] = state ? state.pagetracking : undefined;
            resourceInputs["securityinsight"] = state ? state.securityinsight : undefined;
            resourceInputs["transactionlog"] = state ? state.transactionlog : undefined;
            resourceInputs["videoanalytics"] = state ? state.videoanalytics : undefined;
            resourceInputs["webinsight"] = state ? state.webinsight : undefined;
        } else {
            const args = argsOrState as AppflowactionArgs | undefined;
            resourceInputs["botinsight"] = args ? args.botinsight : undefined;
            resourceInputs["ciinsight"] = args ? args.ciinsight : undefined;
            resourceInputs["clientsidemeasurements"] = args ? args.clientsidemeasurements : undefined;
            resourceInputs["collectors"] = args ? args.collectors : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["distributionalgorithm"] = args ? args.distributionalgorithm : undefined;
            resourceInputs["metricslog"] = args ? args.metricslog : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pagetracking"] = args ? args.pagetracking : undefined;
            resourceInputs["securityinsight"] = args ? args.securityinsight : undefined;
            resourceInputs["transactionlog"] = args ? args.transactionlog : undefined;
            resourceInputs["videoanalytics"] = args ? args.videoanalytics : undefined;
            resourceInputs["webinsight"] = args ? args.webinsight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Appflowaction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Appflowaction resources.
 */
export interface AppflowactionState {
    botinsight?: pulumi.Input<string>;
    ciinsight?: pulumi.Input<string>;
    clientsidemeasurements?: pulumi.Input<string>;
    collectors?: pulumi.Input<pulumi.Input<string>[]>;
    comment?: pulumi.Input<string>;
    distributionalgorithm?: pulumi.Input<string>;
    metricslog?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    pagetracking?: pulumi.Input<string>;
    securityinsight?: pulumi.Input<string>;
    transactionlog?: pulumi.Input<string>;
    videoanalytics?: pulumi.Input<string>;
    webinsight?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Appflowaction resource.
 */
export interface AppflowactionArgs {
    botinsight?: pulumi.Input<string>;
    ciinsight?: pulumi.Input<string>;
    clientsidemeasurements?: pulumi.Input<string>;
    collectors?: pulumi.Input<pulumi.Input<string>[]>;
    comment?: pulumi.Input<string>;
    distributionalgorithm?: pulumi.Input<string>;
    metricslog?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    pagetracking?: pulumi.Input<string>;
    securityinsight?: pulumi.Input<string>;
    transactionlog?: pulumi.Input<string>;
    videoanalytics?: pulumi.Input<string>;
    webinsight?: pulumi.Input<string>;
}
