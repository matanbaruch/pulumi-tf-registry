// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nshttpprofile extends pulumi.CustomResource {
    /**
     * Get an existing Nshttpprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NshttpprofileState, opts?: pulumi.CustomResourceOptions): Nshttpprofile {
        return new Nshttpprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nshttpprofile:Nshttpprofile';

    /**
     * Returns true if the given object is an instance of Nshttpprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nshttpprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nshttpprofile.__pulumiType;
    }

    public readonly adpttimeout!: pulumi.Output<string>;
    public readonly altsvc!: pulumi.Output<string>;
    public readonly altsvcvalue!: pulumi.Output<string>;
    public readonly apdexcltresptimethreshold!: pulumi.Output<number>;
    public readonly clientiphdrexpr!: pulumi.Output<string>;
    public readonly cmponpush!: pulumi.Output<string>;
    public readonly conmultiplex!: pulumi.Output<string>;
    public readonly dropextracrlf!: pulumi.Output<string>;
    public readonly dropextradata!: pulumi.Output<string>;
    public readonly dropinvalreqs!: pulumi.Output<string>;
    public readonly grpcholdlimit!: pulumi.Output<number>;
    public readonly grpcholdtimeout!: pulumi.Output<number>;
    public readonly grpclengthdelimitation!: pulumi.Output<string>;
    public readonly http2!: pulumi.Output<string>;
    public readonly http2altsvcframe!: pulumi.Output<string>;
    public readonly http2direct!: pulumi.Output<string>;
    public readonly http2headertablesize!: pulumi.Output<number>;
    public readonly http2initialconnwindowsize!: pulumi.Output<number>;
    public readonly http2initialwindowsize!: pulumi.Output<number>;
    public readonly http2maxconcurrentstreams!: pulumi.Output<number>;
    public readonly http2maxemptyframespermin!: pulumi.Output<number>;
    public readonly http2maxframesize!: pulumi.Output<number>;
    public readonly http2maxheaderlistsize!: pulumi.Output<number>;
    public readonly http2maxpingframespermin!: pulumi.Output<number>;
    public readonly http2maxresetframespermin!: pulumi.Output<number>;
    public readonly http2maxsettingsframespermin!: pulumi.Output<number>;
    public readonly http2minseverconn!: pulumi.Output<number>;
    public readonly http2strictcipher!: pulumi.Output<string>;
    public readonly http3!: pulumi.Output<string>;
    public readonly http3maxheaderblockedstreams!: pulumi.Output<number>;
    public readonly http3maxheaderfieldsectionsize!: pulumi.Output<number>;
    public readonly http3maxheadertablesize!: pulumi.Output<number>;
    public readonly incomphdrdelay!: pulumi.Output<number>;
    public readonly markconnreqinval!: pulumi.Output<string>;
    public readonly markhttp09inval!: pulumi.Output<string>;
    public readonly markhttpheaderextrawserror!: pulumi.Output<string>;
    public readonly markrfc7230noncompliantinval!: pulumi.Output<string>;
    public readonly marktracereqinval!: pulumi.Output<string>;
    public readonly maxheaderlen!: pulumi.Output<number>;
    public readonly maxreq!: pulumi.Output<number>;
    public readonly maxreusepool!: pulumi.Output<number>;
    public readonly minreusepool!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly persistentetag!: pulumi.Output<string>;
    public readonly reqtimeout!: pulumi.Output<number>;
    public readonly reqtimeoutaction!: pulumi.Output<string>;
    public readonly reusepooltimeout!: pulumi.Output<number>;
    public readonly rtsptunnel!: pulumi.Output<string>;
    public readonly spdy!: pulumi.Output<string>;
    public readonly weblog!: pulumi.Output<string>;
    public readonly websocket!: pulumi.Output<string>;

    /**
     * Create a Nshttpprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NshttpprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NshttpprofileArgs | NshttpprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NshttpprofileState | undefined;
            resourceInputs["adpttimeout"] = state ? state.adpttimeout : undefined;
            resourceInputs["altsvc"] = state ? state.altsvc : undefined;
            resourceInputs["altsvcvalue"] = state ? state.altsvcvalue : undefined;
            resourceInputs["apdexcltresptimethreshold"] = state ? state.apdexcltresptimethreshold : undefined;
            resourceInputs["clientiphdrexpr"] = state ? state.clientiphdrexpr : undefined;
            resourceInputs["cmponpush"] = state ? state.cmponpush : undefined;
            resourceInputs["conmultiplex"] = state ? state.conmultiplex : undefined;
            resourceInputs["dropextracrlf"] = state ? state.dropextracrlf : undefined;
            resourceInputs["dropextradata"] = state ? state.dropextradata : undefined;
            resourceInputs["dropinvalreqs"] = state ? state.dropinvalreqs : undefined;
            resourceInputs["grpcholdlimit"] = state ? state.grpcholdlimit : undefined;
            resourceInputs["grpcholdtimeout"] = state ? state.grpcholdtimeout : undefined;
            resourceInputs["grpclengthdelimitation"] = state ? state.grpclengthdelimitation : undefined;
            resourceInputs["http2"] = state ? state.http2 : undefined;
            resourceInputs["http2altsvcframe"] = state ? state.http2altsvcframe : undefined;
            resourceInputs["http2direct"] = state ? state.http2direct : undefined;
            resourceInputs["http2headertablesize"] = state ? state.http2headertablesize : undefined;
            resourceInputs["http2initialconnwindowsize"] = state ? state.http2initialconnwindowsize : undefined;
            resourceInputs["http2initialwindowsize"] = state ? state.http2initialwindowsize : undefined;
            resourceInputs["http2maxconcurrentstreams"] = state ? state.http2maxconcurrentstreams : undefined;
            resourceInputs["http2maxemptyframespermin"] = state ? state.http2maxemptyframespermin : undefined;
            resourceInputs["http2maxframesize"] = state ? state.http2maxframesize : undefined;
            resourceInputs["http2maxheaderlistsize"] = state ? state.http2maxheaderlistsize : undefined;
            resourceInputs["http2maxpingframespermin"] = state ? state.http2maxpingframespermin : undefined;
            resourceInputs["http2maxresetframespermin"] = state ? state.http2maxresetframespermin : undefined;
            resourceInputs["http2maxsettingsframespermin"] = state ? state.http2maxsettingsframespermin : undefined;
            resourceInputs["http2minseverconn"] = state ? state.http2minseverconn : undefined;
            resourceInputs["http2strictcipher"] = state ? state.http2strictcipher : undefined;
            resourceInputs["http3"] = state ? state.http3 : undefined;
            resourceInputs["http3maxheaderblockedstreams"] = state ? state.http3maxheaderblockedstreams : undefined;
            resourceInputs["http3maxheaderfieldsectionsize"] = state ? state.http3maxheaderfieldsectionsize : undefined;
            resourceInputs["http3maxheadertablesize"] = state ? state.http3maxheadertablesize : undefined;
            resourceInputs["incomphdrdelay"] = state ? state.incomphdrdelay : undefined;
            resourceInputs["markconnreqinval"] = state ? state.markconnreqinval : undefined;
            resourceInputs["markhttp09inval"] = state ? state.markhttp09inval : undefined;
            resourceInputs["markhttpheaderextrawserror"] = state ? state.markhttpheaderextrawserror : undefined;
            resourceInputs["markrfc7230noncompliantinval"] = state ? state.markrfc7230noncompliantinval : undefined;
            resourceInputs["marktracereqinval"] = state ? state.marktracereqinval : undefined;
            resourceInputs["maxheaderlen"] = state ? state.maxheaderlen : undefined;
            resourceInputs["maxreq"] = state ? state.maxreq : undefined;
            resourceInputs["maxreusepool"] = state ? state.maxreusepool : undefined;
            resourceInputs["minreusepool"] = state ? state.minreusepool : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["persistentetag"] = state ? state.persistentetag : undefined;
            resourceInputs["reqtimeout"] = state ? state.reqtimeout : undefined;
            resourceInputs["reqtimeoutaction"] = state ? state.reqtimeoutaction : undefined;
            resourceInputs["reusepooltimeout"] = state ? state.reusepooltimeout : undefined;
            resourceInputs["rtsptunnel"] = state ? state.rtsptunnel : undefined;
            resourceInputs["spdy"] = state ? state.spdy : undefined;
            resourceInputs["weblog"] = state ? state.weblog : undefined;
            resourceInputs["websocket"] = state ? state.websocket : undefined;
        } else {
            const args = argsOrState as NshttpprofileArgs | undefined;
            resourceInputs["adpttimeout"] = args ? args.adpttimeout : undefined;
            resourceInputs["altsvc"] = args ? args.altsvc : undefined;
            resourceInputs["altsvcvalue"] = args ? args.altsvcvalue : undefined;
            resourceInputs["apdexcltresptimethreshold"] = args ? args.apdexcltresptimethreshold : undefined;
            resourceInputs["clientiphdrexpr"] = args ? args.clientiphdrexpr : undefined;
            resourceInputs["cmponpush"] = args ? args.cmponpush : undefined;
            resourceInputs["conmultiplex"] = args ? args.conmultiplex : undefined;
            resourceInputs["dropextracrlf"] = args ? args.dropextracrlf : undefined;
            resourceInputs["dropextradata"] = args ? args.dropextradata : undefined;
            resourceInputs["dropinvalreqs"] = args ? args.dropinvalreqs : undefined;
            resourceInputs["grpcholdlimit"] = args ? args.grpcholdlimit : undefined;
            resourceInputs["grpcholdtimeout"] = args ? args.grpcholdtimeout : undefined;
            resourceInputs["grpclengthdelimitation"] = args ? args.grpclengthdelimitation : undefined;
            resourceInputs["http2"] = args ? args.http2 : undefined;
            resourceInputs["http2altsvcframe"] = args ? args.http2altsvcframe : undefined;
            resourceInputs["http2direct"] = args ? args.http2direct : undefined;
            resourceInputs["http2headertablesize"] = args ? args.http2headertablesize : undefined;
            resourceInputs["http2initialconnwindowsize"] = args ? args.http2initialconnwindowsize : undefined;
            resourceInputs["http2initialwindowsize"] = args ? args.http2initialwindowsize : undefined;
            resourceInputs["http2maxconcurrentstreams"] = args ? args.http2maxconcurrentstreams : undefined;
            resourceInputs["http2maxemptyframespermin"] = args ? args.http2maxemptyframespermin : undefined;
            resourceInputs["http2maxframesize"] = args ? args.http2maxframesize : undefined;
            resourceInputs["http2maxheaderlistsize"] = args ? args.http2maxheaderlistsize : undefined;
            resourceInputs["http2maxpingframespermin"] = args ? args.http2maxpingframespermin : undefined;
            resourceInputs["http2maxresetframespermin"] = args ? args.http2maxresetframespermin : undefined;
            resourceInputs["http2maxsettingsframespermin"] = args ? args.http2maxsettingsframespermin : undefined;
            resourceInputs["http2minseverconn"] = args ? args.http2minseverconn : undefined;
            resourceInputs["http2strictcipher"] = args ? args.http2strictcipher : undefined;
            resourceInputs["http3"] = args ? args.http3 : undefined;
            resourceInputs["http3maxheaderblockedstreams"] = args ? args.http3maxheaderblockedstreams : undefined;
            resourceInputs["http3maxheaderfieldsectionsize"] = args ? args.http3maxheaderfieldsectionsize : undefined;
            resourceInputs["http3maxheadertablesize"] = args ? args.http3maxheadertablesize : undefined;
            resourceInputs["incomphdrdelay"] = args ? args.incomphdrdelay : undefined;
            resourceInputs["markconnreqinval"] = args ? args.markconnreqinval : undefined;
            resourceInputs["markhttp09inval"] = args ? args.markhttp09inval : undefined;
            resourceInputs["markhttpheaderextrawserror"] = args ? args.markhttpheaderextrawserror : undefined;
            resourceInputs["markrfc7230noncompliantinval"] = args ? args.markrfc7230noncompliantinval : undefined;
            resourceInputs["marktracereqinval"] = args ? args.marktracereqinval : undefined;
            resourceInputs["maxheaderlen"] = args ? args.maxheaderlen : undefined;
            resourceInputs["maxreq"] = args ? args.maxreq : undefined;
            resourceInputs["maxreusepool"] = args ? args.maxreusepool : undefined;
            resourceInputs["minreusepool"] = args ? args.minreusepool : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistentetag"] = args ? args.persistentetag : undefined;
            resourceInputs["reqtimeout"] = args ? args.reqtimeout : undefined;
            resourceInputs["reqtimeoutaction"] = args ? args.reqtimeoutaction : undefined;
            resourceInputs["reusepooltimeout"] = args ? args.reusepooltimeout : undefined;
            resourceInputs["rtsptunnel"] = args ? args.rtsptunnel : undefined;
            resourceInputs["spdy"] = args ? args.spdy : undefined;
            resourceInputs["weblog"] = args ? args.weblog : undefined;
            resourceInputs["websocket"] = args ? args.websocket : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nshttpprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nshttpprofile resources.
 */
export interface NshttpprofileState {
    adpttimeout?: pulumi.Input<string>;
    altsvc?: pulumi.Input<string>;
    altsvcvalue?: pulumi.Input<string>;
    apdexcltresptimethreshold?: pulumi.Input<number>;
    clientiphdrexpr?: pulumi.Input<string>;
    cmponpush?: pulumi.Input<string>;
    conmultiplex?: pulumi.Input<string>;
    dropextracrlf?: pulumi.Input<string>;
    dropextradata?: pulumi.Input<string>;
    dropinvalreqs?: pulumi.Input<string>;
    grpcholdlimit?: pulumi.Input<number>;
    grpcholdtimeout?: pulumi.Input<number>;
    grpclengthdelimitation?: pulumi.Input<string>;
    http2?: pulumi.Input<string>;
    http2altsvcframe?: pulumi.Input<string>;
    http2direct?: pulumi.Input<string>;
    http2headertablesize?: pulumi.Input<number>;
    http2initialconnwindowsize?: pulumi.Input<number>;
    http2initialwindowsize?: pulumi.Input<number>;
    http2maxconcurrentstreams?: pulumi.Input<number>;
    http2maxemptyframespermin?: pulumi.Input<number>;
    http2maxframesize?: pulumi.Input<number>;
    http2maxheaderlistsize?: pulumi.Input<number>;
    http2maxpingframespermin?: pulumi.Input<number>;
    http2maxresetframespermin?: pulumi.Input<number>;
    http2maxsettingsframespermin?: pulumi.Input<number>;
    http2minseverconn?: pulumi.Input<number>;
    http2strictcipher?: pulumi.Input<string>;
    http3?: pulumi.Input<string>;
    http3maxheaderblockedstreams?: pulumi.Input<number>;
    http3maxheaderfieldsectionsize?: pulumi.Input<number>;
    http3maxheadertablesize?: pulumi.Input<number>;
    incomphdrdelay?: pulumi.Input<number>;
    markconnreqinval?: pulumi.Input<string>;
    markhttp09inval?: pulumi.Input<string>;
    markhttpheaderextrawserror?: pulumi.Input<string>;
    markrfc7230noncompliantinval?: pulumi.Input<string>;
    marktracereqinval?: pulumi.Input<string>;
    maxheaderlen?: pulumi.Input<number>;
    maxreq?: pulumi.Input<number>;
    maxreusepool?: pulumi.Input<number>;
    minreusepool?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    persistentetag?: pulumi.Input<string>;
    reqtimeout?: pulumi.Input<number>;
    reqtimeoutaction?: pulumi.Input<string>;
    reusepooltimeout?: pulumi.Input<number>;
    rtsptunnel?: pulumi.Input<string>;
    spdy?: pulumi.Input<string>;
    weblog?: pulumi.Input<string>;
    websocket?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nshttpprofile resource.
 */
export interface NshttpprofileArgs {
    adpttimeout?: pulumi.Input<string>;
    altsvc?: pulumi.Input<string>;
    altsvcvalue?: pulumi.Input<string>;
    apdexcltresptimethreshold?: pulumi.Input<number>;
    clientiphdrexpr?: pulumi.Input<string>;
    cmponpush?: pulumi.Input<string>;
    conmultiplex?: pulumi.Input<string>;
    dropextracrlf?: pulumi.Input<string>;
    dropextradata?: pulumi.Input<string>;
    dropinvalreqs?: pulumi.Input<string>;
    grpcholdlimit?: pulumi.Input<number>;
    grpcholdtimeout?: pulumi.Input<number>;
    grpclengthdelimitation?: pulumi.Input<string>;
    http2?: pulumi.Input<string>;
    http2altsvcframe?: pulumi.Input<string>;
    http2direct?: pulumi.Input<string>;
    http2headertablesize?: pulumi.Input<number>;
    http2initialconnwindowsize?: pulumi.Input<number>;
    http2initialwindowsize?: pulumi.Input<number>;
    http2maxconcurrentstreams?: pulumi.Input<number>;
    http2maxemptyframespermin?: pulumi.Input<number>;
    http2maxframesize?: pulumi.Input<number>;
    http2maxheaderlistsize?: pulumi.Input<number>;
    http2maxpingframespermin?: pulumi.Input<number>;
    http2maxresetframespermin?: pulumi.Input<number>;
    http2maxsettingsframespermin?: pulumi.Input<number>;
    http2minseverconn?: pulumi.Input<number>;
    http2strictcipher?: pulumi.Input<string>;
    http3?: pulumi.Input<string>;
    http3maxheaderblockedstreams?: pulumi.Input<number>;
    http3maxheaderfieldsectionsize?: pulumi.Input<number>;
    http3maxheadertablesize?: pulumi.Input<number>;
    incomphdrdelay?: pulumi.Input<number>;
    markconnreqinval?: pulumi.Input<string>;
    markhttp09inval?: pulumi.Input<string>;
    markhttpheaderextrawserror?: pulumi.Input<string>;
    markrfc7230noncompliantinval?: pulumi.Input<string>;
    marktracereqinval?: pulumi.Input<string>;
    maxheaderlen?: pulumi.Input<number>;
    maxreq?: pulumi.Input<number>;
    maxreusepool?: pulumi.Input<number>;
    minreusepool?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    persistentetag?: pulumi.Input<string>;
    reqtimeout?: pulumi.Input<number>;
    reqtimeoutaction?: pulumi.Input<string>;
    reusepooltimeout?: pulumi.Input<number>;
    rtsptunnel?: pulumi.Input<string>;
    spdy?: pulumi.Input<string>;
    weblog?: pulumi.Input<string>;
    websocket?: pulumi.Input<string>;
}
