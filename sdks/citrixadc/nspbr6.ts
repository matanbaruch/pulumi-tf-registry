// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nspbr6 extends pulumi.CustomResource {
    /**
     * Get an existing Nspbr6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Nspbr6State, opts?: pulumi.CustomResourceOptions): Nspbr6 {
        return new Nspbr6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nspbr6:Nspbr6';

    /**
     * Returns true if the given object is an instance of Nspbr6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nspbr6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nspbr6.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly destipop!: pulumi.Output<string>;
    public readonly destipv6!: pulumi.Output<boolean>;
    public readonly destipv6val!: pulumi.Output<string>;
    public readonly destport!: pulumi.Output<boolean>;
    public readonly destportop!: pulumi.Output<string>;
    public readonly destportval!: pulumi.Output<string>;
    public readonly detail!: pulumi.Output<boolean>;
    public readonly interface!: pulumi.Output<string>;
    public readonly iptunnel!: pulumi.Output<string>;
    public readonly monitor!: pulumi.Output<string>;
    public readonly msr!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nexthop!: pulumi.Output<boolean>;
    public readonly nexthopval!: pulumi.Output<string>;
    public readonly nexthopvlan!: pulumi.Output<number>;
    public readonly ownergroup!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly protocolnumber!: pulumi.Output<number>;
    public readonly srcipop!: pulumi.Output<string>;
    public readonly srcipv6!: pulumi.Output<boolean>;
    public readonly srcipv6val!: pulumi.Output<string>;
    public readonly srcmac!: pulumi.Output<string>;
    public readonly srcmacmask!: pulumi.Output<string>;
    public readonly srcport!: pulumi.Output<boolean>;
    public readonly srcportop!: pulumi.Output<string>;
    public readonly srcportval!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<number>;
    public readonly vlan!: pulumi.Output<number>;
    public readonly vxlan!: pulumi.Output<number>;
    public readonly vxlanvlanmap!: pulumi.Output<string>;

    /**
     * Create a Nspbr6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Nspbr6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Nspbr6Args | Nspbr6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Nspbr6State | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["destipop"] = state ? state.destipop : undefined;
            resourceInputs["destipv6"] = state ? state.destipv6 : undefined;
            resourceInputs["destipv6val"] = state ? state.destipv6val : undefined;
            resourceInputs["destport"] = state ? state.destport : undefined;
            resourceInputs["destportop"] = state ? state.destportop : undefined;
            resourceInputs["destportval"] = state ? state.destportval : undefined;
            resourceInputs["detail"] = state ? state.detail : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["iptunnel"] = state ? state.iptunnel : undefined;
            resourceInputs["monitor"] = state ? state.monitor : undefined;
            resourceInputs["msr"] = state ? state.msr : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nexthop"] = state ? state.nexthop : undefined;
            resourceInputs["nexthopval"] = state ? state.nexthopval : undefined;
            resourceInputs["nexthopvlan"] = state ? state.nexthopvlan : undefined;
            resourceInputs["ownergroup"] = state ? state.ownergroup : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["protocolnumber"] = state ? state.protocolnumber : undefined;
            resourceInputs["srcipop"] = state ? state.srcipop : undefined;
            resourceInputs["srcipv6"] = state ? state.srcipv6 : undefined;
            resourceInputs["srcipv6val"] = state ? state.srcipv6val : undefined;
            resourceInputs["srcmac"] = state ? state.srcmac : undefined;
            resourceInputs["srcmacmask"] = state ? state.srcmacmask : undefined;
            resourceInputs["srcport"] = state ? state.srcport : undefined;
            resourceInputs["srcportop"] = state ? state.srcportop : undefined;
            resourceInputs["srcportval"] = state ? state.srcportval : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["vxlan"] = state ? state.vxlan : undefined;
            resourceInputs["vxlanvlanmap"] = state ? state.vxlanvlanmap : undefined;
        } else {
            const args = argsOrState as Nspbr6Args | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["destipop"] = args ? args.destipop : undefined;
            resourceInputs["destipv6"] = args ? args.destipv6 : undefined;
            resourceInputs["destipv6val"] = args ? args.destipv6val : undefined;
            resourceInputs["destport"] = args ? args.destport : undefined;
            resourceInputs["destportop"] = args ? args.destportop : undefined;
            resourceInputs["destportval"] = args ? args.destportval : undefined;
            resourceInputs["detail"] = args ? args.detail : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["iptunnel"] = args ? args.iptunnel : undefined;
            resourceInputs["monitor"] = args ? args.monitor : undefined;
            resourceInputs["msr"] = args ? args.msr : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nexthop"] = args ? args.nexthop : undefined;
            resourceInputs["nexthopval"] = args ? args.nexthopval : undefined;
            resourceInputs["nexthopvlan"] = args ? args.nexthopvlan : undefined;
            resourceInputs["ownergroup"] = args ? args.ownergroup : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["protocolnumber"] = args ? args.protocolnumber : undefined;
            resourceInputs["srcipop"] = args ? args.srcipop : undefined;
            resourceInputs["srcipv6"] = args ? args.srcipv6 : undefined;
            resourceInputs["srcipv6val"] = args ? args.srcipv6val : undefined;
            resourceInputs["srcmac"] = args ? args.srcmac : undefined;
            resourceInputs["srcmacmask"] = args ? args.srcmacmask : undefined;
            resourceInputs["srcport"] = args ? args.srcport : undefined;
            resourceInputs["srcportop"] = args ? args.srcportop : undefined;
            resourceInputs["srcportval"] = args ? args.srcportval : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["vxlan"] = args ? args.vxlan : undefined;
            resourceInputs["vxlanvlanmap"] = args ? args.vxlanvlanmap : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nspbr6.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nspbr6 resources.
 */
export interface Nspbr6State {
    action?: pulumi.Input<string>;
    destipop?: pulumi.Input<string>;
    destipv6?: pulumi.Input<boolean>;
    destipv6val?: pulumi.Input<string>;
    destport?: pulumi.Input<boolean>;
    destportop?: pulumi.Input<string>;
    destportval?: pulumi.Input<string>;
    detail?: pulumi.Input<boolean>;
    interface?: pulumi.Input<string>;
    iptunnel?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    msr?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nexthop?: pulumi.Input<boolean>;
    nexthopval?: pulumi.Input<string>;
    nexthopvlan?: pulumi.Input<number>;
    ownergroup?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    protocolnumber?: pulumi.Input<number>;
    srcipop?: pulumi.Input<string>;
    srcipv6?: pulumi.Input<boolean>;
    srcipv6val?: pulumi.Input<string>;
    srcmac?: pulumi.Input<string>;
    srcmacmask?: pulumi.Input<string>;
    srcport?: pulumi.Input<boolean>;
    srcportop?: pulumi.Input<string>;
    srcportval?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    vlan?: pulumi.Input<number>;
    vxlan?: pulumi.Input<number>;
    vxlanvlanmap?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nspbr6 resource.
 */
export interface Nspbr6Args {
    action: pulumi.Input<string>;
    destipop?: pulumi.Input<string>;
    destipv6?: pulumi.Input<boolean>;
    destipv6val?: pulumi.Input<string>;
    destport?: pulumi.Input<boolean>;
    destportop?: pulumi.Input<string>;
    destportval?: pulumi.Input<string>;
    detail?: pulumi.Input<boolean>;
    interface?: pulumi.Input<string>;
    iptunnel?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    msr?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nexthop?: pulumi.Input<boolean>;
    nexthopval?: pulumi.Input<string>;
    nexthopvlan?: pulumi.Input<number>;
    ownergroup?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    protocolnumber?: pulumi.Input<number>;
    srcipop?: pulumi.Input<string>;
    srcipv6?: pulumi.Input<boolean>;
    srcipv6val?: pulumi.Input<string>;
    srcmac?: pulumi.Input<string>;
    srcmacmask?: pulumi.Input<string>;
    srcport?: pulumi.Input<boolean>;
    srcportop?: pulumi.Input<string>;
    srcportval?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    vlan?: pulumi.Input<number>;
    vxlan?: pulumi.Input<number>;
    vxlanvlanmap?: pulumi.Input<string>;
}
