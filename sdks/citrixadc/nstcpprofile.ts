// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nstcpprofile extends pulumi.CustomResource {
    /**
     * Get an existing Nstcpprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NstcpprofileState, opts?: pulumi.CustomResourceOptions): Nstcpprofile {
        return new Nstcpprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nstcpprofile:Nstcpprofile';

    /**
     * Returns true if the given object is an instance of Nstcpprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nstcpprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nstcpprofile.__pulumiType;
    }

    public readonly ackaggregation!: pulumi.Output<string>;
    public readonly ackonpush!: pulumi.Output<string>;
    public readonly applyadaptivetcp!: pulumi.Output<string>;
    public readonly buffersize!: pulumi.Output<number>;
    public readonly burstratecontrol!: pulumi.Output<string>;
    public readonly clientiptcpoption!: pulumi.Output<string>;
    public readonly clientiptcpoptionnumber!: pulumi.Output<number>;
    public readonly delayedack!: pulumi.Output<number>;
    public readonly dropestconnontimeout!: pulumi.Output<string>;
    public readonly drophalfclosedconnontimeout!: pulumi.Output<string>;
    public readonly dsack!: pulumi.Output<string>;
    public readonly dupackthresh!: pulumi.Output<number>;
    public readonly dynamicreceivebuffering!: pulumi.Output<string>;
    public readonly ecn!: pulumi.Output<string>;
    public readonly establishclientconn!: pulumi.Output<string>;
    public readonly fack!: pulumi.Output<string>;
    public readonly flavor!: pulumi.Output<string>;
    public readonly frto!: pulumi.Output<string>;
    public readonly hystart!: pulumi.Output<string>;
    public readonly initialcwnd!: pulumi.Output<number>;
    public readonly ka!: pulumi.Output<string>;
    public readonly kaconnidletime!: pulumi.Output<number>;
    public readonly kamaxprobes!: pulumi.Output<number>;
    public readonly kaprobeinterval!: pulumi.Output<number>;
    public readonly kaprobeupdatelastactivity!: pulumi.Output<string>;
    public readonly maxburst!: pulumi.Output<number>;
    public readonly maxcwnd!: pulumi.Output<number>;
    public readonly maxpktpermss!: pulumi.Output<number>;
    public readonly minrto!: pulumi.Output<number>;
    public readonly mpcapablecbit!: pulumi.Output<string>;
    public readonly mptcp!: pulumi.Output<string>;
    public readonly mptcpdropdataonpreestsf!: pulumi.Output<string>;
    public readonly mptcpfastopen!: pulumi.Output<string>;
    public readonly mptcpsessiontimeout!: pulumi.Output<number>;
    public readonly mss!: pulumi.Output<number>;
    public readonly nagle!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly oooqsize!: pulumi.Output<number>;
    public readonly pktperretx!: pulumi.Output<number>;
    public readonly rateqmax!: pulumi.Output<number>;
    public readonly rstmaxack!: pulumi.Output<string>;
    public readonly rstwindowattenuate!: pulumi.Output<string>;
    public readonly sack!: pulumi.Output<string>;
    public readonly sendbuffsize!: pulumi.Output<number>;
    public readonly sendclientportintcpoption!: pulumi.Output<string>;
    public readonly slowstartincr!: pulumi.Output<number>;
    public readonly slowstartthreshold!: pulumi.Output<number>;
    public readonly spoofsyndrop!: pulumi.Output<string>;
    public readonly syncookie!: pulumi.Output<string>;
    public readonly taillossprobe!: pulumi.Output<string>;
    public readonly tcpfastopen!: pulumi.Output<string>;
    public readonly tcpfastopencookiesize!: pulumi.Output<number>;
    public readonly tcpmode!: pulumi.Output<string>;
    public readonly tcprate!: pulumi.Output<number>;
    public readonly tcpsegoffload!: pulumi.Output<string>;
    public readonly timestamp!: pulumi.Output<string>;
    public readonly ws!: pulumi.Output<string>;
    public readonly wsval!: pulumi.Output<number>;

    /**
     * Create a Nstcpprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NstcpprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NstcpprofileArgs | NstcpprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NstcpprofileState | undefined;
            resourceInputs["ackaggregation"] = state ? state.ackaggregation : undefined;
            resourceInputs["ackonpush"] = state ? state.ackonpush : undefined;
            resourceInputs["applyadaptivetcp"] = state ? state.applyadaptivetcp : undefined;
            resourceInputs["buffersize"] = state ? state.buffersize : undefined;
            resourceInputs["burstratecontrol"] = state ? state.burstratecontrol : undefined;
            resourceInputs["clientiptcpoption"] = state ? state.clientiptcpoption : undefined;
            resourceInputs["clientiptcpoptionnumber"] = state ? state.clientiptcpoptionnumber : undefined;
            resourceInputs["delayedack"] = state ? state.delayedack : undefined;
            resourceInputs["dropestconnontimeout"] = state ? state.dropestconnontimeout : undefined;
            resourceInputs["drophalfclosedconnontimeout"] = state ? state.drophalfclosedconnontimeout : undefined;
            resourceInputs["dsack"] = state ? state.dsack : undefined;
            resourceInputs["dupackthresh"] = state ? state.dupackthresh : undefined;
            resourceInputs["dynamicreceivebuffering"] = state ? state.dynamicreceivebuffering : undefined;
            resourceInputs["ecn"] = state ? state.ecn : undefined;
            resourceInputs["establishclientconn"] = state ? state.establishclientconn : undefined;
            resourceInputs["fack"] = state ? state.fack : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["frto"] = state ? state.frto : undefined;
            resourceInputs["hystart"] = state ? state.hystart : undefined;
            resourceInputs["initialcwnd"] = state ? state.initialcwnd : undefined;
            resourceInputs["ka"] = state ? state.ka : undefined;
            resourceInputs["kaconnidletime"] = state ? state.kaconnidletime : undefined;
            resourceInputs["kamaxprobes"] = state ? state.kamaxprobes : undefined;
            resourceInputs["kaprobeinterval"] = state ? state.kaprobeinterval : undefined;
            resourceInputs["kaprobeupdatelastactivity"] = state ? state.kaprobeupdatelastactivity : undefined;
            resourceInputs["maxburst"] = state ? state.maxburst : undefined;
            resourceInputs["maxcwnd"] = state ? state.maxcwnd : undefined;
            resourceInputs["maxpktpermss"] = state ? state.maxpktpermss : undefined;
            resourceInputs["minrto"] = state ? state.minrto : undefined;
            resourceInputs["mpcapablecbit"] = state ? state.mpcapablecbit : undefined;
            resourceInputs["mptcp"] = state ? state.mptcp : undefined;
            resourceInputs["mptcpdropdataonpreestsf"] = state ? state.mptcpdropdataonpreestsf : undefined;
            resourceInputs["mptcpfastopen"] = state ? state.mptcpfastopen : undefined;
            resourceInputs["mptcpsessiontimeout"] = state ? state.mptcpsessiontimeout : undefined;
            resourceInputs["mss"] = state ? state.mss : undefined;
            resourceInputs["nagle"] = state ? state.nagle : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oooqsize"] = state ? state.oooqsize : undefined;
            resourceInputs["pktperretx"] = state ? state.pktperretx : undefined;
            resourceInputs["rateqmax"] = state ? state.rateqmax : undefined;
            resourceInputs["rstmaxack"] = state ? state.rstmaxack : undefined;
            resourceInputs["rstwindowattenuate"] = state ? state.rstwindowattenuate : undefined;
            resourceInputs["sack"] = state ? state.sack : undefined;
            resourceInputs["sendbuffsize"] = state ? state.sendbuffsize : undefined;
            resourceInputs["sendclientportintcpoption"] = state ? state.sendclientportintcpoption : undefined;
            resourceInputs["slowstartincr"] = state ? state.slowstartincr : undefined;
            resourceInputs["slowstartthreshold"] = state ? state.slowstartthreshold : undefined;
            resourceInputs["spoofsyndrop"] = state ? state.spoofsyndrop : undefined;
            resourceInputs["syncookie"] = state ? state.syncookie : undefined;
            resourceInputs["taillossprobe"] = state ? state.taillossprobe : undefined;
            resourceInputs["tcpfastopen"] = state ? state.tcpfastopen : undefined;
            resourceInputs["tcpfastopencookiesize"] = state ? state.tcpfastopencookiesize : undefined;
            resourceInputs["tcpmode"] = state ? state.tcpmode : undefined;
            resourceInputs["tcprate"] = state ? state.tcprate : undefined;
            resourceInputs["tcpsegoffload"] = state ? state.tcpsegoffload : undefined;
            resourceInputs["timestamp"] = state ? state.timestamp : undefined;
            resourceInputs["ws"] = state ? state.ws : undefined;
            resourceInputs["wsval"] = state ? state.wsval : undefined;
        } else {
            const args = argsOrState as NstcpprofileArgs | undefined;
            resourceInputs["ackaggregation"] = args ? args.ackaggregation : undefined;
            resourceInputs["ackonpush"] = args ? args.ackonpush : undefined;
            resourceInputs["applyadaptivetcp"] = args ? args.applyadaptivetcp : undefined;
            resourceInputs["buffersize"] = args ? args.buffersize : undefined;
            resourceInputs["burstratecontrol"] = args ? args.burstratecontrol : undefined;
            resourceInputs["clientiptcpoption"] = args ? args.clientiptcpoption : undefined;
            resourceInputs["clientiptcpoptionnumber"] = args ? args.clientiptcpoptionnumber : undefined;
            resourceInputs["delayedack"] = args ? args.delayedack : undefined;
            resourceInputs["dropestconnontimeout"] = args ? args.dropestconnontimeout : undefined;
            resourceInputs["drophalfclosedconnontimeout"] = args ? args.drophalfclosedconnontimeout : undefined;
            resourceInputs["dsack"] = args ? args.dsack : undefined;
            resourceInputs["dupackthresh"] = args ? args.dupackthresh : undefined;
            resourceInputs["dynamicreceivebuffering"] = args ? args.dynamicreceivebuffering : undefined;
            resourceInputs["ecn"] = args ? args.ecn : undefined;
            resourceInputs["establishclientconn"] = args ? args.establishclientconn : undefined;
            resourceInputs["fack"] = args ? args.fack : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["frto"] = args ? args.frto : undefined;
            resourceInputs["hystart"] = args ? args.hystart : undefined;
            resourceInputs["initialcwnd"] = args ? args.initialcwnd : undefined;
            resourceInputs["ka"] = args ? args.ka : undefined;
            resourceInputs["kaconnidletime"] = args ? args.kaconnidletime : undefined;
            resourceInputs["kamaxprobes"] = args ? args.kamaxprobes : undefined;
            resourceInputs["kaprobeinterval"] = args ? args.kaprobeinterval : undefined;
            resourceInputs["kaprobeupdatelastactivity"] = args ? args.kaprobeupdatelastactivity : undefined;
            resourceInputs["maxburst"] = args ? args.maxburst : undefined;
            resourceInputs["maxcwnd"] = args ? args.maxcwnd : undefined;
            resourceInputs["maxpktpermss"] = args ? args.maxpktpermss : undefined;
            resourceInputs["minrto"] = args ? args.minrto : undefined;
            resourceInputs["mpcapablecbit"] = args ? args.mpcapablecbit : undefined;
            resourceInputs["mptcp"] = args ? args.mptcp : undefined;
            resourceInputs["mptcpdropdataonpreestsf"] = args ? args.mptcpdropdataonpreestsf : undefined;
            resourceInputs["mptcpfastopen"] = args ? args.mptcpfastopen : undefined;
            resourceInputs["mptcpsessiontimeout"] = args ? args.mptcpsessiontimeout : undefined;
            resourceInputs["mss"] = args ? args.mss : undefined;
            resourceInputs["nagle"] = args ? args.nagle : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oooqsize"] = args ? args.oooqsize : undefined;
            resourceInputs["pktperretx"] = args ? args.pktperretx : undefined;
            resourceInputs["rateqmax"] = args ? args.rateqmax : undefined;
            resourceInputs["rstmaxack"] = args ? args.rstmaxack : undefined;
            resourceInputs["rstwindowattenuate"] = args ? args.rstwindowattenuate : undefined;
            resourceInputs["sack"] = args ? args.sack : undefined;
            resourceInputs["sendbuffsize"] = args ? args.sendbuffsize : undefined;
            resourceInputs["sendclientportintcpoption"] = args ? args.sendclientportintcpoption : undefined;
            resourceInputs["slowstartincr"] = args ? args.slowstartincr : undefined;
            resourceInputs["slowstartthreshold"] = args ? args.slowstartthreshold : undefined;
            resourceInputs["spoofsyndrop"] = args ? args.spoofsyndrop : undefined;
            resourceInputs["syncookie"] = args ? args.syncookie : undefined;
            resourceInputs["taillossprobe"] = args ? args.taillossprobe : undefined;
            resourceInputs["tcpfastopen"] = args ? args.tcpfastopen : undefined;
            resourceInputs["tcpfastopencookiesize"] = args ? args.tcpfastopencookiesize : undefined;
            resourceInputs["tcpmode"] = args ? args.tcpmode : undefined;
            resourceInputs["tcprate"] = args ? args.tcprate : undefined;
            resourceInputs["tcpsegoffload"] = args ? args.tcpsegoffload : undefined;
            resourceInputs["timestamp"] = args ? args.timestamp : undefined;
            resourceInputs["ws"] = args ? args.ws : undefined;
            resourceInputs["wsval"] = args ? args.wsval : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nstcpprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nstcpprofile resources.
 */
export interface NstcpprofileState {
    ackaggregation?: pulumi.Input<string>;
    ackonpush?: pulumi.Input<string>;
    applyadaptivetcp?: pulumi.Input<string>;
    buffersize?: pulumi.Input<number>;
    burstratecontrol?: pulumi.Input<string>;
    clientiptcpoption?: pulumi.Input<string>;
    clientiptcpoptionnumber?: pulumi.Input<number>;
    delayedack?: pulumi.Input<number>;
    dropestconnontimeout?: pulumi.Input<string>;
    drophalfclosedconnontimeout?: pulumi.Input<string>;
    dsack?: pulumi.Input<string>;
    dupackthresh?: pulumi.Input<number>;
    dynamicreceivebuffering?: pulumi.Input<string>;
    ecn?: pulumi.Input<string>;
    establishclientconn?: pulumi.Input<string>;
    fack?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    frto?: pulumi.Input<string>;
    hystart?: pulumi.Input<string>;
    initialcwnd?: pulumi.Input<number>;
    ka?: pulumi.Input<string>;
    kaconnidletime?: pulumi.Input<number>;
    kamaxprobes?: pulumi.Input<number>;
    kaprobeinterval?: pulumi.Input<number>;
    kaprobeupdatelastactivity?: pulumi.Input<string>;
    maxburst?: pulumi.Input<number>;
    maxcwnd?: pulumi.Input<number>;
    maxpktpermss?: pulumi.Input<number>;
    minrto?: pulumi.Input<number>;
    mpcapablecbit?: pulumi.Input<string>;
    mptcp?: pulumi.Input<string>;
    mptcpdropdataonpreestsf?: pulumi.Input<string>;
    mptcpfastopen?: pulumi.Input<string>;
    mptcpsessiontimeout?: pulumi.Input<number>;
    mss?: pulumi.Input<number>;
    nagle?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oooqsize?: pulumi.Input<number>;
    pktperretx?: pulumi.Input<number>;
    rateqmax?: pulumi.Input<number>;
    rstmaxack?: pulumi.Input<string>;
    rstwindowattenuate?: pulumi.Input<string>;
    sack?: pulumi.Input<string>;
    sendbuffsize?: pulumi.Input<number>;
    sendclientportintcpoption?: pulumi.Input<string>;
    slowstartincr?: pulumi.Input<number>;
    slowstartthreshold?: pulumi.Input<number>;
    spoofsyndrop?: pulumi.Input<string>;
    syncookie?: pulumi.Input<string>;
    taillossprobe?: pulumi.Input<string>;
    tcpfastopen?: pulumi.Input<string>;
    tcpfastopencookiesize?: pulumi.Input<number>;
    tcpmode?: pulumi.Input<string>;
    tcprate?: pulumi.Input<number>;
    tcpsegoffload?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
    ws?: pulumi.Input<string>;
    wsval?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Nstcpprofile resource.
 */
export interface NstcpprofileArgs {
    ackaggregation?: pulumi.Input<string>;
    ackonpush?: pulumi.Input<string>;
    applyadaptivetcp?: pulumi.Input<string>;
    buffersize?: pulumi.Input<number>;
    burstratecontrol?: pulumi.Input<string>;
    clientiptcpoption?: pulumi.Input<string>;
    clientiptcpoptionnumber?: pulumi.Input<number>;
    delayedack?: pulumi.Input<number>;
    dropestconnontimeout?: pulumi.Input<string>;
    drophalfclosedconnontimeout?: pulumi.Input<string>;
    dsack?: pulumi.Input<string>;
    dupackthresh?: pulumi.Input<number>;
    dynamicreceivebuffering?: pulumi.Input<string>;
    ecn?: pulumi.Input<string>;
    establishclientconn?: pulumi.Input<string>;
    fack?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    frto?: pulumi.Input<string>;
    hystart?: pulumi.Input<string>;
    initialcwnd?: pulumi.Input<number>;
    ka?: pulumi.Input<string>;
    kaconnidletime?: pulumi.Input<number>;
    kamaxprobes?: pulumi.Input<number>;
    kaprobeinterval?: pulumi.Input<number>;
    kaprobeupdatelastactivity?: pulumi.Input<string>;
    maxburst?: pulumi.Input<number>;
    maxcwnd?: pulumi.Input<number>;
    maxpktpermss?: pulumi.Input<number>;
    minrto?: pulumi.Input<number>;
    mpcapablecbit?: pulumi.Input<string>;
    mptcp?: pulumi.Input<string>;
    mptcpdropdataonpreestsf?: pulumi.Input<string>;
    mptcpfastopen?: pulumi.Input<string>;
    mptcpsessiontimeout?: pulumi.Input<number>;
    mss?: pulumi.Input<number>;
    nagle?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oooqsize?: pulumi.Input<number>;
    pktperretx?: pulumi.Input<number>;
    rateqmax?: pulumi.Input<number>;
    rstmaxack?: pulumi.Input<string>;
    rstwindowattenuate?: pulumi.Input<string>;
    sack?: pulumi.Input<string>;
    sendbuffsize?: pulumi.Input<number>;
    sendclientportintcpoption?: pulumi.Input<string>;
    slowstartincr?: pulumi.Input<number>;
    slowstartthreshold?: pulumi.Input<number>;
    spoofsyndrop?: pulumi.Input<string>;
    syncookie?: pulumi.Input<string>;
    taillossprobe?: pulumi.Input<string>;
    tcpfastopen?: pulumi.Input<string>;
    tcpfastopencookiesize?: pulumi.Input<number>;
    tcpmode?: pulumi.Input<string>;
    tcprate?: pulumi.Input<number>;
    tcpsegoffload?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
    ws?: pulumi.Input<string>;
    wsval?: pulumi.Input<number>;
}
