// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Auditsyslogparams extends pulumi.CustomResource {
    /**
     * Get an existing Auditsyslogparams resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuditsyslogparamsState, opts?: pulumi.CustomResourceOptions): Auditsyslogparams {
        return new Auditsyslogparams(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/auditsyslogparams:Auditsyslogparams';

    /**
     * Returns true if the given object is an instance of Auditsyslogparams.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Auditsyslogparams {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Auditsyslogparams.__pulumiType;
    }

    public readonly acl!: pulumi.Output<string>;
    public readonly alg!: pulumi.Output<string>;
    public readonly appflowexport!: pulumi.Output<string>;
    public readonly contentinspectionlog!: pulumi.Output<string>;
    public readonly dateformat!: pulumi.Output<string>;
    public readonly dns!: pulumi.Output<string>;
    public readonly logfacility!: pulumi.Output<string>;
    public readonly loglevels!: pulumi.Output<string[]>;
    public readonly lsn!: pulumi.Output<string>;
    public readonly serverip!: pulumi.Output<string>;
    public readonly serverport!: pulumi.Output<number>;
    public readonly sslinterception!: pulumi.Output<string>;
    public readonly subscriberlog!: pulumi.Output<string>;
    public readonly tcp!: pulumi.Output<string>;
    public readonly timezone!: pulumi.Output<string>;
    public readonly urlfiltering!: pulumi.Output<string>;
    public readonly userdefinedauditlog!: pulumi.Output<string>;

    /**
     * Create a Auditsyslogparams resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AuditsyslogparamsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuditsyslogparamsArgs | AuditsyslogparamsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuditsyslogparamsState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["alg"] = state ? state.alg : undefined;
            resourceInputs["appflowexport"] = state ? state.appflowexport : undefined;
            resourceInputs["contentinspectionlog"] = state ? state.contentinspectionlog : undefined;
            resourceInputs["dateformat"] = state ? state.dateformat : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["logfacility"] = state ? state.logfacility : undefined;
            resourceInputs["loglevels"] = state ? state.loglevels : undefined;
            resourceInputs["lsn"] = state ? state.lsn : undefined;
            resourceInputs["serverip"] = state ? state.serverip : undefined;
            resourceInputs["serverport"] = state ? state.serverport : undefined;
            resourceInputs["sslinterception"] = state ? state.sslinterception : undefined;
            resourceInputs["subscriberlog"] = state ? state.subscriberlog : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["urlfiltering"] = state ? state.urlfiltering : undefined;
            resourceInputs["userdefinedauditlog"] = state ? state.userdefinedauditlog : undefined;
        } else {
            const args = argsOrState as AuditsyslogparamsArgs | undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["alg"] = args ? args.alg : undefined;
            resourceInputs["appflowexport"] = args ? args.appflowexport : undefined;
            resourceInputs["contentinspectionlog"] = args ? args.contentinspectionlog : undefined;
            resourceInputs["dateformat"] = args ? args.dateformat : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["logfacility"] = args ? args.logfacility : undefined;
            resourceInputs["loglevels"] = args ? args.loglevels : undefined;
            resourceInputs["lsn"] = args ? args.lsn : undefined;
            resourceInputs["serverip"] = args ? args.serverip : undefined;
            resourceInputs["serverport"] = args ? args.serverport : undefined;
            resourceInputs["sslinterception"] = args ? args.sslinterception : undefined;
            resourceInputs["subscriberlog"] = args ? args.subscriberlog : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["urlfiltering"] = args ? args.urlfiltering : undefined;
            resourceInputs["userdefinedauditlog"] = args ? args.userdefinedauditlog : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Auditsyslogparams.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Auditsyslogparams resources.
 */
export interface AuditsyslogparamsState {
    acl?: pulumi.Input<string>;
    alg?: pulumi.Input<string>;
    appflowexport?: pulumi.Input<string>;
    contentinspectionlog?: pulumi.Input<string>;
    dateformat?: pulumi.Input<string>;
    dns?: pulumi.Input<string>;
    logfacility?: pulumi.Input<string>;
    loglevels?: pulumi.Input<pulumi.Input<string>[]>;
    lsn?: pulumi.Input<string>;
    serverip?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    sslinterception?: pulumi.Input<string>;
    subscriberlog?: pulumi.Input<string>;
    tcp?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    urlfiltering?: pulumi.Input<string>;
    userdefinedauditlog?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Auditsyslogparams resource.
 */
export interface AuditsyslogparamsArgs {
    acl?: pulumi.Input<string>;
    alg?: pulumi.Input<string>;
    appflowexport?: pulumi.Input<string>;
    contentinspectionlog?: pulumi.Input<string>;
    dateformat?: pulumi.Input<string>;
    dns?: pulumi.Input<string>;
    logfacility?: pulumi.Input<string>;
    loglevels?: pulumi.Input<pulumi.Input<string>[]>;
    lsn?: pulumi.Input<string>;
    serverip?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    sslinterception?: pulumi.Input<string>;
    subscriberlog?: pulumi.Input<string>;
    tcp?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    urlfiltering?: pulumi.Input<string>;
    userdefinedauditlog?: pulumi.Input<string>;
}
