// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Forwardingsession extends pulumi.CustomResource {
    /**
     * Get an existing Forwardingsession resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ForwardingsessionState, opts?: pulumi.CustomResourceOptions): Forwardingsession {
        return new Forwardingsession(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/forwardingsession:Forwardingsession';

    /**
     * Returns true if the given object is an instance of Forwardingsession.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Forwardingsession {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Forwardingsession.__pulumiType;
    }

    public readonly acl6name!: pulumi.Output<string>;
    public readonly aclname!: pulumi.Output<string>;
    public readonly connfailover!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly netmask!: pulumi.Output<string>;
    public readonly network!: pulumi.Output<string>;
    public readonly processlocal!: pulumi.Output<string>;
    public readonly sourceroutecache!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<number>;

    /**
     * Create a Forwardingsession resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ForwardingsessionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ForwardingsessionArgs | ForwardingsessionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ForwardingsessionState | undefined;
            resourceInputs["acl6name"] = state ? state.acl6name : undefined;
            resourceInputs["aclname"] = state ? state.aclname : undefined;
            resourceInputs["connfailover"] = state ? state.connfailover : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["processlocal"] = state ? state.processlocal : undefined;
            resourceInputs["sourceroutecache"] = state ? state.sourceroutecache : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
        } else {
            const args = argsOrState as ForwardingsessionArgs | undefined;
            resourceInputs["acl6name"] = args ? args.acl6name : undefined;
            resourceInputs["aclname"] = args ? args.aclname : undefined;
            resourceInputs["connfailover"] = args ? args.connfailover : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["processlocal"] = args ? args.processlocal : undefined;
            resourceInputs["sourceroutecache"] = args ? args.sourceroutecache : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Forwardingsession.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Forwardingsession resources.
 */
export interface ForwardingsessionState {
    acl6name?: pulumi.Input<string>;
    aclname?: pulumi.Input<string>;
    connfailover?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    network?: pulumi.Input<string>;
    processlocal?: pulumi.Input<string>;
    sourceroutecache?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Forwardingsession resource.
 */
export interface ForwardingsessionArgs {
    acl6name?: pulumi.Input<string>;
    aclname?: pulumi.Input<string>;
    connfailover?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    network?: pulumi.Input<string>;
    processlocal?: pulumi.Input<string>;
    sourceroutecache?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
}
