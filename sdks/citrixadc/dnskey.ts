// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Dnskey extends pulumi.CustomResource {
    /**
     * Get an existing Dnskey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnskeyState, opts?: pulumi.CustomResourceOptions): Dnskey {
        return new Dnskey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/dnskey:Dnskey';

    /**
     * Returns true if the given object is an instance of Dnskey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dnskey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dnskey.__pulumiType;
    }

    public readonly algorithm!: pulumi.Output<string>;
    public readonly expires!: pulumi.Output<number>;
    public readonly filenameprefix!: pulumi.Output<string>;
    public readonly keyname!: pulumi.Output<string>;
    public readonly keysize!: pulumi.Output<number>;
    public readonly keytype!: pulumi.Output<string>;
    public readonly notificationperiod!: pulumi.Output<number>;
    public readonly password!: pulumi.Output<string>;
    public readonly privatekey!: pulumi.Output<string>;
    public readonly publickey!: pulumi.Output<string>;
    public readonly src!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<number>;
    public readonly units1!: pulumi.Output<string>;
    public readonly units2!: pulumi.Output<string>;
    public readonly zonename!: pulumi.Output<string>;

    /**
     * Create a Dnskey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnskeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnskeyArgs | DnskeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnskeyState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["expires"] = state ? state.expires : undefined;
            resourceInputs["filenameprefix"] = state ? state.filenameprefix : undefined;
            resourceInputs["keyname"] = state ? state.keyname : undefined;
            resourceInputs["keysize"] = state ? state.keysize : undefined;
            resourceInputs["keytype"] = state ? state.keytype : undefined;
            resourceInputs["notificationperiod"] = state ? state.notificationperiod : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["privatekey"] = state ? state.privatekey : undefined;
            resourceInputs["publickey"] = state ? state.publickey : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["units1"] = state ? state.units1 : undefined;
            resourceInputs["units2"] = state ? state.units2 : undefined;
            resourceInputs["zonename"] = state ? state.zonename : undefined;
        } else {
            const args = argsOrState as DnskeyArgs | undefined;
            if ((!args || args.keyname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyname'");
            }
            if ((!args || args.privatekey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privatekey'");
            }
            if ((!args || args.publickey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publickey'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["expires"] = args ? args.expires : undefined;
            resourceInputs["filenameprefix"] = args ? args.filenameprefix : undefined;
            resourceInputs["keyname"] = args ? args.keyname : undefined;
            resourceInputs["keysize"] = args ? args.keysize : undefined;
            resourceInputs["keytype"] = args ? args.keytype : undefined;
            resourceInputs["notificationperiod"] = args ? args.notificationperiod : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["privatekey"] = args ? args.privatekey : undefined;
            resourceInputs["publickey"] = args ? args.publickey : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["units1"] = args ? args.units1 : undefined;
            resourceInputs["units2"] = args ? args.units2 : undefined;
            resourceInputs["zonename"] = args ? args.zonename : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dnskey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dnskey resources.
 */
export interface DnskeyState {
    algorithm?: pulumi.Input<string>;
    expires?: pulumi.Input<number>;
    filenameprefix?: pulumi.Input<string>;
    keyname?: pulumi.Input<string>;
    keysize?: pulumi.Input<number>;
    keytype?: pulumi.Input<string>;
    notificationperiod?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    privatekey?: pulumi.Input<string>;
    publickey?: pulumi.Input<string>;
    src?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    units1?: pulumi.Input<string>;
    units2?: pulumi.Input<string>;
    zonename?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dnskey resource.
 */
export interface DnskeyArgs {
    algorithm?: pulumi.Input<string>;
    expires?: pulumi.Input<number>;
    filenameprefix?: pulumi.Input<string>;
    keyname: pulumi.Input<string>;
    keysize?: pulumi.Input<number>;
    keytype?: pulumi.Input<string>;
    notificationperiod?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    privatekey: pulumi.Input<string>;
    publickey: pulumi.Input<string>;
    src?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    units1?: pulumi.Input<string>;
    units2?: pulumi.Input<string>;
    zonename?: pulumi.Input<string>;
}
