// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sslfipskey extends pulumi.CustomResource {
    /**
     * Get an existing Sslfipskey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslfipskeyState, opts?: pulumi.CustomResourceOptions): Sslfipskey {
        return new Sslfipskey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/sslfipskey:Sslfipskey';

    /**
     * Returns true if the given object is an instance of Sslfipskey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sslfipskey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sslfipskey.__pulumiType;
    }

    public readonly curve!: pulumi.Output<string>;
    public readonly exponent!: pulumi.Output<string>;
    public readonly fipskeyname!: pulumi.Output<string>;
    public readonly inform!: pulumi.Output<string>;
    public readonly iv!: pulumi.Output<string>;
    public readonly key!: pulumi.Output<string>;
    public readonly keytype!: pulumi.Output<string>;
    public readonly modulus!: pulumi.Output<number>;
    public readonly wrapkeyname!: pulumi.Output<string>;

    /**
     * Create a Sslfipskey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslfipskeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslfipskeyArgs | SslfipskeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslfipskeyState | undefined;
            resourceInputs["curve"] = state ? state.curve : undefined;
            resourceInputs["exponent"] = state ? state.exponent : undefined;
            resourceInputs["fipskeyname"] = state ? state.fipskeyname : undefined;
            resourceInputs["inform"] = state ? state.inform : undefined;
            resourceInputs["iv"] = state ? state.iv : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["keytype"] = state ? state.keytype : undefined;
            resourceInputs["modulus"] = state ? state.modulus : undefined;
            resourceInputs["wrapkeyname"] = state ? state.wrapkeyname : undefined;
        } else {
            const args = argsOrState as SslfipskeyArgs | undefined;
            if ((!args || args.fipskeyname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fipskeyname'");
            }
            if ((!args || args.keytype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keytype'");
            }
            resourceInputs["curve"] = args ? args.curve : undefined;
            resourceInputs["exponent"] = args ? args.exponent : undefined;
            resourceInputs["fipskeyname"] = args ? args.fipskeyname : undefined;
            resourceInputs["inform"] = args ? args.inform : undefined;
            resourceInputs["iv"] = args ? args.iv : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["keytype"] = args ? args.keytype : undefined;
            resourceInputs["modulus"] = args ? args.modulus : undefined;
            resourceInputs["wrapkeyname"] = args ? args.wrapkeyname : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sslfipskey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sslfipskey resources.
 */
export interface SslfipskeyState {
    curve?: pulumi.Input<string>;
    exponent?: pulumi.Input<string>;
    fipskeyname?: pulumi.Input<string>;
    inform?: pulumi.Input<string>;
    iv?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    keytype?: pulumi.Input<string>;
    modulus?: pulumi.Input<number>;
    wrapkeyname?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sslfipskey resource.
 */
export interface SslfipskeyArgs {
    curve?: pulumi.Input<string>;
    exponent?: pulumi.Input<string>;
    fipskeyname: pulumi.Input<string>;
    inform?: pulumi.Input<string>;
    iv?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    keytype: pulumi.Input<string>;
    modulus?: pulumi.Input<number>;
    wrapkeyname?: pulumi.Input<string>;
}
