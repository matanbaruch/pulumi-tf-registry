// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sslocspresponder extends pulumi.CustomResource {
    /**
     * Get an existing Sslocspresponder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslocspresponderState, opts?: pulumi.CustomResourceOptions): Sslocspresponder {
        return new Sslocspresponder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/sslocspresponder:Sslocspresponder';

    /**
     * Returns true if the given object is an instance of Sslocspresponder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sslocspresponder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sslocspresponder.__pulumiType;
    }

    public readonly batchingdelay!: pulumi.Output<number>;
    public readonly batchingdepth!: pulumi.Output<number>;
    public readonly cache!: pulumi.Output<string>;
    public readonly cachetimeout!: pulumi.Output<number>;
    public readonly httpmethod!: pulumi.Output<string>;
    public readonly insertclientcert!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ocspurlresolvetimeout!: pulumi.Output<number>;
    public readonly producedattimeskew!: pulumi.Output<number>;
    public readonly respondercert!: pulumi.Output<string>;
    public readonly resptimeout!: pulumi.Output<number>;
    public readonly signingcert!: pulumi.Output<string>;
    public readonly trustresponder!: pulumi.Output<boolean>;
    public readonly url!: pulumi.Output<string>;
    public readonly usenonce!: pulumi.Output<string>;

    /**
     * Create a Sslocspresponder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslocspresponderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslocspresponderArgs | SslocspresponderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslocspresponderState | undefined;
            resourceInputs["batchingdelay"] = state ? state.batchingdelay : undefined;
            resourceInputs["batchingdepth"] = state ? state.batchingdepth : undefined;
            resourceInputs["cache"] = state ? state.cache : undefined;
            resourceInputs["cachetimeout"] = state ? state.cachetimeout : undefined;
            resourceInputs["httpmethod"] = state ? state.httpmethod : undefined;
            resourceInputs["insertclientcert"] = state ? state.insertclientcert : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ocspurlresolvetimeout"] = state ? state.ocspurlresolvetimeout : undefined;
            resourceInputs["producedattimeskew"] = state ? state.producedattimeskew : undefined;
            resourceInputs["respondercert"] = state ? state.respondercert : undefined;
            resourceInputs["resptimeout"] = state ? state.resptimeout : undefined;
            resourceInputs["signingcert"] = state ? state.signingcert : undefined;
            resourceInputs["trustresponder"] = state ? state.trustresponder : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["usenonce"] = state ? state.usenonce : undefined;
        } else {
            const args = argsOrState as SslocspresponderArgs | undefined;
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["batchingdelay"] = args ? args.batchingdelay : undefined;
            resourceInputs["batchingdepth"] = args ? args.batchingdepth : undefined;
            resourceInputs["cache"] = args ? args.cache : undefined;
            resourceInputs["cachetimeout"] = args ? args.cachetimeout : undefined;
            resourceInputs["httpmethod"] = args ? args.httpmethod : undefined;
            resourceInputs["insertclientcert"] = args ? args.insertclientcert : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ocspurlresolvetimeout"] = args ? args.ocspurlresolvetimeout : undefined;
            resourceInputs["producedattimeskew"] = args ? args.producedattimeskew : undefined;
            resourceInputs["respondercert"] = args ? args.respondercert : undefined;
            resourceInputs["resptimeout"] = args ? args.resptimeout : undefined;
            resourceInputs["signingcert"] = args ? args.signingcert : undefined;
            resourceInputs["trustresponder"] = args ? args.trustresponder : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["usenonce"] = args ? args.usenonce : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sslocspresponder.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sslocspresponder resources.
 */
export interface SslocspresponderState {
    batchingdelay?: pulumi.Input<number>;
    batchingdepth?: pulumi.Input<number>;
    cache?: pulumi.Input<string>;
    cachetimeout?: pulumi.Input<number>;
    httpmethod?: pulumi.Input<string>;
    insertclientcert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ocspurlresolvetimeout?: pulumi.Input<number>;
    producedattimeskew?: pulumi.Input<number>;
    respondercert?: pulumi.Input<string>;
    resptimeout?: pulumi.Input<number>;
    signingcert?: pulumi.Input<string>;
    trustresponder?: pulumi.Input<boolean>;
    url?: pulumi.Input<string>;
    usenonce?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sslocspresponder resource.
 */
export interface SslocspresponderArgs {
    batchingdelay?: pulumi.Input<number>;
    batchingdepth?: pulumi.Input<number>;
    cache?: pulumi.Input<string>;
    cachetimeout?: pulumi.Input<number>;
    httpmethod?: pulumi.Input<string>;
    insertclientcert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ocspurlresolvetimeout?: pulumi.Input<number>;
    producedattimeskew?: pulumi.Input<number>;
    respondercert?: pulumi.Input<string>;
    resptimeout?: pulumi.Input<number>;
    signingcert?: pulumi.Input<string>;
    trustresponder?: pulumi.Input<boolean>;
    url: pulumi.Input<string>;
    usenonce?: pulumi.Input<string>;
}
