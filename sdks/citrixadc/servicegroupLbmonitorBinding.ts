// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServicegroupLbmonitorBinding extends pulumi.CustomResource {
    /**
     * Get an existing ServicegroupLbmonitorBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicegroupLbmonitorBindingState, opts?: pulumi.CustomResourceOptions): ServicegroupLbmonitorBinding {
        return new ServicegroupLbmonitorBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/servicegroupLbmonitorBinding:ServicegroupLbmonitorBinding';

    /**
     * Returns true if the given object is an instance of ServicegroupLbmonitorBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicegroupLbmonitorBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicegroupLbmonitorBinding.__pulumiType;
    }

    public readonly customserverid!: pulumi.Output<string>;
    public readonly dbsttl!: pulumi.Output<number>;
    public readonly hashid!: pulumi.Output<number>;
    public readonly monitorname!: pulumi.Output<string>;
    public readonly monstate!: pulumi.Output<string>;
    public readonly nameserver!: pulumi.Output<string>;
    public readonly passive!: pulumi.Output<boolean>;
    public readonly port!: pulumi.Output<number>;
    public readonly serverid!: pulumi.Output<number>;
    public readonly servicegroupname!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a ServicegroupLbmonitorBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicegroupLbmonitorBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicegroupLbmonitorBindingArgs | ServicegroupLbmonitorBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicegroupLbmonitorBindingState | undefined;
            resourceInputs["customserverid"] = state ? state.customserverid : undefined;
            resourceInputs["dbsttl"] = state ? state.dbsttl : undefined;
            resourceInputs["hashid"] = state ? state.hashid : undefined;
            resourceInputs["monitorname"] = state ? state.monitorname : undefined;
            resourceInputs["monstate"] = state ? state.monstate : undefined;
            resourceInputs["nameserver"] = state ? state.nameserver : undefined;
            resourceInputs["passive"] = state ? state.passive : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["serverid"] = state ? state.serverid : undefined;
            resourceInputs["servicegroupname"] = state ? state.servicegroupname : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as ServicegroupLbmonitorBindingArgs | undefined;
            if ((!args || args.monitorname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorname'");
            }
            if ((!args || args.servicegroupname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicegroupname'");
            }
            resourceInputs["customserverid"] = args ? args.customserverid : undefined;
            resourceInputs["dbsttl"] = args ? args.dbsttl : undefined;
            resourceInputs["hashid"] = args ? args.hashid : undefined;
            resourceInputs["monitorname"] = args ? args.monitorname : undefined;
            resourceInputs["monstate"] = args ? args.monstate : undefined;
            resourceInputs["nameserver"] = args ? args.nameserver : undefined;
            resourceInputs["passive"] = args ? args.passive : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["serverid"] = args ? args.serverid : undefined;
            resourceInputs["servicegroupname"] = args ? args.servicegroupname : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicegroupLbmonitorBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicegroupLbmonitorBinding resources.
 */
export interface ServicegroupLbmonitorBindingState {
    customserverid?: pulumi.Input<string>;
    dbsttl?: pulumi.Input<number>;
    hashid?: pulumi.Input<number>;
    monitorname?: pulumi.Input<string>;
    monstate?: pulumi.Input<string>;
    nameserver?: pulumi.Input<string>;
    passive?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    serverid?: pulumi.Input<number>;
    servicegroupname?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ServicegroupLbmonitorBinding resource.
 */
export interface ServicegroupLbmonitorBindingArgs {
    customserverid?: pulumi.Input<string>;
    dbsttl?: pulumi.Input<number>;
    hashid?: pulumi.Input<number>;
    monitorname: pulumi.Input<string>;
    monstate?: pulumi.Input<string>;
    nameserver?: pulumi.Input<string>;
    passive?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    serverid?: pulumi.Input<number>;
    servicegroupname: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}
