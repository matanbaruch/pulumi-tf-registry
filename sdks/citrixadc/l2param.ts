// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class L2param extends pulumi.CustomResource {
    /**
     * Get an existing L2param resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L2paramState, opts?: pulumi.CustomResourceOptions): L2param {
        return new L2param(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/l2param:L2param';

    /**
     * Returns true if the given object is an instance of L2param.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L2param {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L2param.__pulumiType;
    }

    public readonly bdggrpproxyarp!: pulumi.Output<string>;
    public readonly bdgsetting!: pulumi.Output<string>;
    public readonly bridgeagetimeout!: pulumi.Output<number>;
    public readonly garponvridintf!: pulumi.Output<string>;
    public readonly garpreply!: pulumi.Output<string>;
    public readonly macmodefwdmypkt!: pulumi.Output<string>;
    public readonly maxbridgecollision!: pulumi.Output<number>;
    public readonly mbfinstlearning!: pulumi.Output<string>;
    public readonly mbfpeermacupdate!: pulumi.Output<number>;
    public readonly proxyarp!: pulumi.Output<string>;
    public readonly returntoethernetsender!: pulumi.Output<string>;
    public readonly rstintfonhafo!: pulumi.Output<string>;
    public readonly skipproxyingbsdtraffic!: pulumi.Output<string>;
    public readonly stopmacmoveupdate!: pulumi.Output<string>;
    public readonly usemymac!: pulumi.Output<string>;
    public readonly usenetprofilebsdtraffic!: pulumi.Output<string>;

    /**
     * Create a L2param resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: L2paramArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L2paramArgs | L2paramState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L2paramState | undefined;
            resourceInputs["bdggrpproxyarp"] = state ? state.bdggrpproxyarp : undefined;
            resourceInputs["bdgsetting"] = state ? state.bdgsetting : undefined;
            resourceInputs["bridgeagetimeout"] = state ? state.bridgeagetimeout : undefined;
            resourceInputs["garponvridintf"] = state ? state.garponvridintf : undefined;
            resourceInputs["garpreply"] = state ? state.garpreply : undefined;
            resourceInputs["macmodefwdmypkt"] = state ? state.macmodefwdmypkt : undefined;
            resourceInputs["maxbridgecollision"] = state ? state.maxbridgecollision : undefined;
            resourceInputs["mbfinstlearning"] = state ? state.mbfinstlearning : undefined;
            resourceInputs["mbfpeermacupdate"] = state ? state.mbfpeermacupdate : undefined;
            resourceInputs["proxyarp"] = state ? state.proxyarp : undefined;
            resourceInputs["returntoethernetsender"] = state ? state.returntoethernetsender : undefined;
            resourceInputs["rstintfonhafo"] = state ? state.rstintfonhafo : undefined;
            resourceInputs["skipproxyingbsdtraffic"] = state ? state.skipproxyingbsdtraffic : undefined;
            resourceInputs["stopmacmoveupdate"] = state ? state.stopmacmoveupdate : undefined;
            resourceInputs["usemymac"] = state ? state.usemymac : undefined;
            resourceInputs["usenetprofilebsdtraffic"] = state ? state.usenetprofilebsdtraffic : undefined;
        } else {
            const args = argsOrState as L2paramArgs | undefined;
            resourceInputs["bdggrpproxyarp"] = args ? args.bdggrpproxyarp : undefined;
            resourceInputs["bdgsetting"] = args ? args.bdgsetting : undefined;
            resourceInputs["bridgeagetimeout"] = args ? args.bridgeagetimeout : undefined;
            resourceInputs["garponvridintf"] = args ? args.garponvridintf : undefined;
            resourceInputs["garpreply"] = args ? args.garpreply : undefined;
            resourceInputs["macmodefwdmypkt"] = args ? args.macmodefwdmypkt : undefined;
            resourceInputs["maxbridgecollision"] = args ? args.maxbridgecollision : undefined;
            resourceInputs["mbfinstlearning"] = args ? args.mbfinstlearning : undefined;
            resourceInputs["mbfpeermacupdate"] = args ? args.mbfpeermacupdate : undefined;
            resourceInputs["proxyarp"] = args ? args.proxyarp : undefined;
            resourceInputs["returntoethernetsender"] = args ? args.returntoethernetsender : undefined;
            resourceInputs["rstintfonhafo"] = args ? args.rstintfonhafo : undefined;
            resourceInputs["skipproxyingbsdtraffic"] = args ? args.skipproxyingbsdtraffic : undefined;
            resourceInputs["stopmacmoveupdate"] = args ? args.stopmacmoveupdate : undefined;
            resourceInputs["usemymac"] = args ? args.usemymac : undefined;
            resourceInputs["usenetprofilebsdtraffic"] = args ? args.usenetprofilebsdtraffic : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L2param.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering L2param resources.
 */
export interface L2paramState {
    bdggrpproxyarp?: pulumi.Input<string>;
    bdgsetting?: pulumi.Input<string>;
    bridgeagetimeout?: pulumi.Input<number>;
    garponvridintf?: pulumi.Input<string>;
    garpreply?: pulumi.Input<string>;
    macmodefwdmypkt?: pulumi.Input<string>;
    maxbridgecollision?: pulumi.Input<number>;
    mbfinstlearning?: pulumi.Input<string>;
    mbfpeermacupdate?: pulumi.Input<number>;
    proxyarp?: pulumi.Input<string>;
    returntoethernetsender?: pulumi.Input<string>;
    rstintfonhafo?: pulumi.Input<string>;
    skipproxyingbsdtraffic?: pulumi.Input<string>;
    stopmacmoveupdate?: pulumi.Input<string>;
    usemymac?: pulumi.Input<string>;
    usenetprofilebsdtraffic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a L2param resource.
 */
export interface L2paramArgs {
    bdggrpproxyarp?: pulumi.Input<string>;
    bdgsetting?: pulumi.Input<string>;
    bridgeagetimeout?: pulumi.Input<number>;
    garponvridintf?: pulumi.Input<string>;
    garpreply?: pulumi.Input<string>;
    macmodefwdmypkt?: pulumi.Input<string>;
    maxbridgecollision?: pulumi.Input<number>;
    mbfinstlearning?: pulumi.Input<string>;
    mbfpeermacupdate?: pulumi.Input<number>;
    proxyarp?: pulumi.Input<string>;
    returntoethernetsender?: pulumi.Input<string>;
    rstintfonhafo?: pulumi.Input<string>;
    skipproxyingbsdtraffic?: pulumi.Input<string>;
    stopmacmoveupdate?: pulumi.Input<string>;
    usemymac?: pulumi.Input<string>;
    usenetprofilebsdtraffic?: pulumi.Input<string>;
}
