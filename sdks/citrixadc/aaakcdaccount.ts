// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Aaakcdaccount extends pulumi.CustomResource {
    /**
     * Get an existing Aaakcdaccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AaakcdaccountState, opts?: pulumi.CustomResourceOptions): Aaakcdaccount {
        return new Aaakcdaccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/aaakcdaccount:Aaakcdaccount';

    /**
     * Returns true if the given object is an instance of Aaakcdaccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Aaakcdaccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Aaakcdaccount.__pulumiType;
    }

    public readonly cacert!: pulumi.Output<string>;
    public readonly delegateduser!: pulumi.Output<string>;
    public readonly enterpriserealm!: pulumi.Output<string>;
    public readonly kcdaccount!: pulumi.Output<string>;
    public readonly kcdpassword!: pulumi.Output<string>;
    public readonly keytab!: pulumi.Output<string>;
    public readonly realmstr!: pulumi.Output<string>;
    public readonly servicespn!: pulumi.Output<string>;
    public readonly usercert!: pulumi.Output<string>;
    public readonly userrealm!: pulumi.Output<string>;

    /**
     * Create a Aaakcdaccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AaakcdaccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AaakcdaccountArgs | AaakcdaccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AaakcdaccountState | undefined;
            resourceInputs["cacert"] = state ? state.cacert : undefined;
            resourceInputs["delegateduser"] = state ? state.delegateduser : undefined;
            resourceInputs["enterpriserealm"] = state ? state.enterpriserealm : undefined;
            resourceInputs["kcdaccount"] = state ? state.kcdaccount : undefined;
            resourceInputs["kcdpassword"] = state ? state.kcdpassword : undefined;
            resourceInputs["keytab"] = state ? state.keytab : undefined;
            resourceInputs["realmstr"] = state ? state.realmstr : undefined;
            resourceInputs["servicespn"] = state ? state.servicespn : undefined;
            resourceInputs["usercert"] = state ? state.usercert : undefined;
            resourceInputs["userrealm"] = state ? state.userrealm : undefined;
        } else {
            const args = argsOrState as AaakcdaccountArgs | undefined;
            if ((!args || args.kcdaccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kcdaccount'");
            }
            resourceInputs["cacert"] = args ? args.cacert : undefined;
            resourceInputs["delegateduser"] = args ? args.delegateduser : undefined;
            resourceInputs["enterpriserealm"] = args ? args.enterpriserealm : undefined;
            resourceInputs["kcdaccount"] = args ? args.kcdaccount : undefined;
            resourceInputs["kcdpassword"] = args ? args.kcdpassword : undefined;
            resourceInputs["keytab"] = args ? args.keytab : undefined;
            resourceInputs["realmstr"] = args ? args.realmstr : undefined;
            resourceInputs["servicespn"] = args ? args.servicespn : undefined;
            resourceInputs["usercert"] = args ? args.usercert : undefined;
            resourceInputs["userrealm"] = args ? args.userrealm : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Aaakcdaccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Aaakcdaccount resources.
 */
export interface AaakcdaccountState {
    cacert?: pulumi.Input<string>;
    delegateduser?: pulumi.Input<string>;
    enterpriserealm?: pulumi.Input<string>;
    kcdaccount?: pulumi.Input<string>;
    kcdpassword?: pulumi.Input<string>;
    keytab?: pulumi.Input<string>;
    realmstr?: pulumi.Input<string>;
    servicespn?: pulumi.Input<string>;
    usercert?: pulumi.Input<string>;
    userrealm?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Aaakcdaccount resource.
 */
export interface AaakcdaccountArgs {
    cacert?: pulumi.Input<string>;
    delegateduser?: pulumi.Input<string>;
    enterpriserealm?: pulumi.Input<string>;
    kcdaccount: pulumi.Input<string>;
    kcdpassword?: pulumi.Input<string>;
    keytab?: pulumi.Input<string>;
    realmstr?: pulumi.Input<string>;
    servicespn?: pulumi.Input<string>;
    usercert?: pulumi.Input<string>;
    userrealm?: pulumi.Input<string>;
}
