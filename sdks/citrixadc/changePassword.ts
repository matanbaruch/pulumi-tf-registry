// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ChangePassword extends pulumi.CustomResource {
    /**
     * Get an existing ChangePassword resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChangePasswordState, opts?: pulumi.CustomResourceOptions): ChangePassword {
        return new ChangePassword(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/changePassword:ChangePassword';

    /**
     * Returns true if the given object is an instance of ChangePassword.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ChangePassword {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ChangePassword.__pulumiType;
    }

    /**
     * Value is 'true' if the user is changing the default password, else value is 'false' if user wants to change password at
     * any point later
     */
    public readonly firstTimePasswordReset!: pulumi.Output<boolean>;
    public readonly newPassword!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ChangePassword resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChangePasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChangePasswordArgs | ChangePasswordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChangePasswordState | undefined;
            resourceInputs["firstTimePasswordReset"] = state ? state.firstTimePasswordReset : undefined;
            resourceInputs["newPassword"] = state ? state.newPassword : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ChangePasswordArgs | undefined;
            if ((!args || args.firstTimePasswordReset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firstTimePasswordReset'");
            }
            if ((!args || args.newPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'newPassword'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["firstTimePasswordReset"] = args ? args.firstTimePasswordReset : undefined;
            resourceInputs["newPassword"] = args?.newPassword ? pulumi.secret(args.newPassword) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["newPassword", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ChangePassword.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ChangePassword resources.
 */
export interface ChangePasswordState {
    /**
     * Value is 'true' if the user is changing the default password, else value is 'false' if user wants to change password at
     * any point later
     */
    firstTimePasswordReset?: pulumi.Input<boolean>;
    newPassword?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ChangePassword resource.
 */
export interface ChangePasswordArgs {
    /**
     * Value is 'true' if the user is changing the default password, else value is 'false' if user wants to change password at
     * any point later
     */
    firstTimePasswordReset: pulumi.Input<boolean>;
    newPassword: pulumi.Input<string>;
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}
