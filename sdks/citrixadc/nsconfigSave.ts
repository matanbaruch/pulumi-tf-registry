// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NsconfigSave extends pulumi.CustomResource {
    /**
     * Get an existing NsconfigSave resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsconfigSaveState, opts?: pulumi.CustomResourceOptions): NsconfigSave {
        return new NsconfigSave(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nsconfigSave:NsconfigSave';

    /**
     * Returns true if the given object is an instance of NsconfigSave.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsconfigSave {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsconfigSave.__pulumiType;
    }

    public readonly all!: pulumi.Output<boolean>;
    public readonly concurrentSaveInterval!: pulumi.Output<string | undefined>;
    public readonly concurrentSaveOk!: pulumi.Output<boolean | undefined>;
    public readonly concurrentSaveRetries!: pulumi.Output<number | undefined>;
    public readonly concurrentSaveTimeout!: pulumi.Output<string | undefined>;
    public readonly saveOnDestroy!: pulumi.Output<boolean | undefined>;
    public readonly timestamp!: pulumi.Output<string>;

    /**
     * Create a NsconfigSave resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsconfigSaveArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsconfigSaveArgs | NsconfigSaveState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsconfigSaveState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["concurrentSaveInterval"] = state ? state.concurrentSaveInterval : undefined;
            resourceInputs["concurrentSaveOk"] = state ? state.concurrentSaveOk : undefined;
            resourceInputs["concurrentSaveRetries"] = state ? state.concurrentSaveRetries : undefined;
            resourceInputs["concurrentSaveTimeout"] = state ? state.concurrentSaveTimeout : undefined;
            resourceInputs["saveOnDestroy"] = state ? state.saveOnDestroy : undefined;
            resourceInputs["timestamp"] = state ? state.timestamp : undefined;
        } else {
            const args = argsOrState as NsconfigSaveArgs | undefined;
            if ((!args || args.timestamp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timestamp'");
            }
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["concurrentSaveInterval"] = args ? args.concurrentSaveInterval : undefined;
            resourceInputs["concurrentSaveOk"] = args ? args.concurrentSaveOk : undefined;
            resourceInputs["concurrentSaveRetries"] = args ? args.concurrentSaveRetries : undefined;
            resourceInputs["concurrentSaveTimeout"] = args ? args.concurrentSaveTimeout : undefined;
            resourceInputs["saveOnDestroy"] = args ? args.saveOnDestroy : undefined;
            resourceInputs["timestamp"] = args ? args.timestamp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsconfigSave.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NsconfigSave resources.
 */
export interface NsconfigSaveState {
    all?: pulumi.Input<boolean>;
    concurrentSaveInterval?: pulumi.Input<string>;
    concurrentSaveOk?: pulumi.Input<boolean>;
    concurrentSaveRetries?: pulumi.Input<number>;
    concurrentSaveTimeout?: pulumi.Input<string>;
    saveOnDestroy?: pulumi.Input<boolean>;
    timestamp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsconfigSave resource.
 */
export interface NsconfigSaveArgs {
    all?: pulumi.Input<boolean>;
    concurrentSaveInterval?: pulumi.Input<string>;
    concurrentSaveOk?: pulumi.Input<boolean>;
    concurrentSaveRetries?: pulumi.Input<number>;
    concurrentSaveTimeout?: pulumi.Input<string>;
    saveOnDestroy?: pulumi.Input<boolean>;
    timestamp: pulumi.Input<string>;
}
