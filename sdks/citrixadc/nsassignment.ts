// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nsassignment extends pulumi.CustomResource {
    /**
     * Get an existing Nsassignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsassignmentState, opts?: pulumi.CustomResourceOptions): Nsassignment {
        return new Nsassignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nsassignment:Nsassignment';

    /**
     * Returns true if the given object is an instance of Nsassignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nsassignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nsassignment.__pulumiType;
    }

    public readonly add!: pulumi.Output<string>;
    public readonly append!: pulumi.Output<string>;
    public readonly clear!: pulumi.Output<boolean>;
    public readonly comment!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly newname!: pulumi.Output<string>;
    public readonly set!: pulumi.Output<string>;
    public readonly sub!: pulumi.Output<string>;
    public readonly variable!: pulumi.Output<string>;

    /**
     * Create a Nsassignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsassignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsassignmentArgs | NsassignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsassignmentState | undefined;
            resourceInputs["add"] = state ? state.add : undefined;
            resourceInputs["append"] = state ? state.append : undefined;
            resourceInputs["clear"] = state ? state.clear : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newname"] = state ? state.newname : undefined;
            resourceInputs["set"] = state ? state.set : undefined;
            resourceInputs["sub"] = state ? state.sub : undefined;
            resourceInputs["variable"] = state ? state.variable : undefined;
        } else {
            const args = argsOrState as NsassignmentArgs | undefined;
            if ((!args || args.variable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'variable'");
            }
            resourceInputs["add"] = args ? args.add : undefined;
            resourceInputs["append"] = args ? args.append : undefined;
            resourceInputs["clear"] = args ? args.clear : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newname"] = args ? args.newname : undefined;
            resourceInputs["set"] = args ? args.set : undefined;
            resourceInputs["sub"] = args ? args.sub : undefined;
            resourceInputs["variable"] = args ? args.variable : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nsassignment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nsassignment resources.
 */
export interface NsassignmentState {
    add?: pulumi.Input<string>;
    append?: pulumi.Input<string>;
    clear?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    newname?: pulumi.Input<string>;
    set?: pulumi.Input<string>;
    sub?: pulumi.Input<string>;
    variable?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nsassignment resource.
 */
export interface NsassignmentArgs {
    add?: pulumi.Input<string>;
    append?: pulumi.Input<string>;
    clear?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    newname?: pulumi.Input<string>;
    set?: pulumi.Input<string>;
    sub?: pulumi.Input<string>;
    variable: pulumi.Input<string>;
}
