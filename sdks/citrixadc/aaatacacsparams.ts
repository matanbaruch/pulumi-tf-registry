// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Aaatacacsparams extends pulumi.CustomResource {
    /**
     * Get an existing Aaatacacsparams resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AaatacacsparamsState, opts?: pulumi.CustomResourceOptions): Aaatacacsparams {
        return new Aaatacacsparams(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/aaatacacsparams:Aaatacacsparams';

    /**
     * Returns true if the given object is an instance of Aaatacacsparams.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Aaatacacsparams {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Aaatacacsparams.__pulumiType;
    }

    public readonly accounting!: pulumi.Output<string>;
    public readonly auditfailedcmds!: pulumi.Output<string>;
    public readonly authorization!: pulumi.Output<string>;
    public readonly authtimeout!: pulumi.Output<number>;
    public readonly defaultauthenticationgroup!: pulumi.Output<string>;
    public readonly groupattrname!: pulumi.Output<string>;
    public readonly serverip!: pulumi.Output<string>;
    public readonly serverport!: pulumi.Output<number>;
    public readonly tacacssecret!: pulumi.Output<string>;

    /**
     * Create a Aaatacacsparams resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AaatacacsparamsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AaatacacsparamsArgs | AaatacacsparamsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AaatacacsparamsState | undefined;
            resourceInputs["accounting"] = state ? state.accounting : undefined;
            resourceInputs["auditfailedcmds"] = state ? state.auditfailedcmds : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["authtimeout"] = state ? state.authtimeout : undefined;
            resourceInputs["defaultauthenticationgroup"] = state ? state.defaultauthenticationgroup : undefined;
            resourceInputs["groupattrname"] = state ? state.groupattrname : undefined;
            resourceInputs["serverip"] = state ? state.serverip : undefined;
            resourceInputs["serverport"] = state ? state.serverport : undefined;
            resourceInputs["tacacssecret"] = state ? state.tacacssecret : undefined;
        } else {
            const args = argsOrState as AaatacacsparamsArgs | undefined;
            resourceInputs["accounting"] = args ? args.accounting : undefined;
            resourceInputs["auditfailedcmds"] = args ? args.auditfailedcmds : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["authtimeout"] = args ? args.authtimeout : undefined;
            resourceInputs["defaultauthenticationgroup"] = args ? args.defaultauthenticationgroup : undefined;
            resourceInputs["groupattrname"] = args ? args.groupattrname : undefined;
            resourceInputs["serverip"] = args ? args.serverip : undefined;
            resourceInputs["serverport"] = args ? args.serverport : undefined;
            resourceInputs["tacacssecret"] = args ? args.tacacssecret : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Aaatacacsparams.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Aaatacacsparams resources.
 */
export interface AaatacacsparamsState {
    accounting?: pulumi.Input<string>;
    auditfailedcmds?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    authtimeout?: pulumi.Input<number>;
    defaultauthenticationgroup?: pulumi.Input<string>;
    groupattrname?: pulumi.Input<string>;
    serverip?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    tacacssecret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Aaatacacsparams resource.
 */
export interface AaatacacsparamsArgs {
    accounting?: pulumi.Input<string>;
    auditfailedcmds?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    authtimeout?: pulumi.Input<number>;
    defaultauthenticationgroup?: pulumi.Input<string>;
    groupattrname?: pulumi.Input<string>;
    serverip?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    tacacssecret?: pulumi.Input<string>;
}
