// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lbvserver extends pulumi.CustomResource {
    /**
     * Get an existing Lbvserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbvserverState, opts?: pulumi.CustomResourceOptions): Lbvserver {
        return new Lbvserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/lbvserver:Lbvserver';

    /**
     * Returns true if the given object is an instance of Lbvserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lbvserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lbvserver.__pulumiType;
    }

    public readonly appflowlog!: pulumi.Output<string>;
    public readonly authentication!: pulumi.Output<string>;
    public readonly authenticationhost!: pulumi.Output<string>;
    public readonly authn401!: pulumi.Output<string>;
    public readonly authnprofile!: pulumi.Output<string>;
    public readonly authnvsname!: pulumi.Output<string>;
    public readonly backuplbmethod!: pulumi.Output<string>;
    public readonly backuppersistencetimeout!: pulumi.Output<number>;
    public readonly backupvserver!: pulumi.Output<string>;
    public readonly bypassaaaa!: pulumi.Output<string>;
    public readonly cacheable!: pulumi.Output<string>;
    public readonly ciphers!: pulumi.Output<string[] | undefined>;
    public readonly ciphersuites!: pulumi.Output<string[] | undefined>;
    public readonly clttimeout!: pulumi.Output<number>;
    public readonly comment!: pulumi.Output<string>;
    public readonly connfailover!: pulumi.Output<string>;
    public readonly cookiename!: pulumi.Output<string>;
    public readonly datalength!: pulumi.Output<number>;
    public readonly dataoffset!: pulumi.Output<number>;
    public readonly dbprofilename!: pulumi.Output<string>;
    public readonly dbslb!: pulumi.Output<string>;
    public readonly disableprimaryondown!: pulumi.Output<string>;
    public readonly dns64!: pulumi.Output<string>;
    public readonly dnsprofilename!: pulumi.Output<string>;
    public readonly downstateflush!: pulumi.Output<string>;
    public readonly hashlength!: pulumi.Output<number>;
    public readonly healththreshold!: pulumi.Output<number>;
    public readonly httpprofilename!: pulumi.Output<string>;
    public readonly httpsredirecturl!: pulumi.Output<string>;
    public readonly icmpvsrresponse!: pulumi.Output<string>;
    public readonly insertvserveripport!: pulumi.Output<string>;
    public readonly ipmask!: pulumi.Output<string>;
    public readonly ippattern!: pulumi.Output<string>;
    public readonly ipset!: pulumi.Output<string>;
    public readonly ipv46!: pulumi.Output<string>;
    public readonly l2conn!: pulumi.Output<string>;
    public readonly lbmethod!: pulumi.Output<string>;
    public readonly lbprofilename!: pulumi.Output<string>;
    public readonly listenpolicy!: pulumi.Output<string>;
    public readonly listenpriority!: pulumi.Output<number>;
    public readonly m!: pulumi.Output<string>;
    public readonly macmoderetainvlan!: pulumi.Output<string>;
    public readonly maxautoscalemembers!: pulumi.Output<number>;
    public readonly minautoscalemembers!: pulumi.Output<number>;
    public readonly mssqlserverversion!: pulumi.Output<string>;
    public readonly mysqlcharacterset!: pulumi.Output<number>;
    public readonly mysqlprotocolversion!: pulumi.Output<number>;
    public readonly mysqlservercapabilities!: pulumi.Output<number>;
    public readonly mysqlserverversion!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly netmask!: pulumi.Output<string>;
    public readonly netprofile!: pulumi.Output<string>;
    public readonly newname!: pulumi.Output<string>;
    public readonly newservicerequest!: pulumi.Output<number>;
    public readonly newservicerequestincrementinterval!: pulumi.Output<number>;
    public readonly newservicerequestunit!: pulumi.Output<string>;
    public readonly oracleserverversion!: pulumi.Output<string>;
    public readonly persistencebackup!: pulumi.Output<string>;
    public readonly persistencetype!: pulumi.Output<string>;
    public readonly persistmask!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly pq!: pulumi.Output<string>;
    public readonly probeport!: pulumi.Output<number>;
    public readonly probeprotocol!: pulumi.Output<string>;
    public readonly processlocal!: pulumi.Output<string>;
    public readonly push!: pulumi.Output<string>;
    public readonly pushlabel!: pulumi.Output<string>;
    public readonly pushmulticlients!: pulumi.Output<string>;
    public readonly pushvserver!: pulumi.Output<string>;
    public readonly quicbridgeprofilename!: pulumi.Output<string | undefined>;
    public readonly range!: pulumi.Output<number>;
    public readonly recursionavailable!: pulumi.Output<string>;
    public readonly redirectfromport!: pulumi.Output<number>;
    public readonly redirectportrewrite!: pulumi.Output<string>;
    public readonly redirurl!: pulumi.Output<string>;
    public readonly redirurlflags!: pulumi.Output<boolean>;
    public readonly resrule!: pulumi.Output<string>;
    public readonly retainconnectionsoncluster!: pulumi.Output<string>;
    public readonly rhistate!: pulumi.Output<string>;
    public readonly rtspnat!: pulumi.Output<string>;
    public readonly rule!: pulumi.Output<string>;
    public readonly sc!: pulumi.Output<string>;
    public readonly servicename!: pulumi.Output<string>;
    public readonly servicetype!: pulumi.Output<string>;
    public readonly sessionless!: pulumi.Output<string>;
    public readonly skippersistency!: pulumi.Output<string>;
    public readonly snisslcertkeys!: pulumi.Output<string[] | undefined>;
    public readonly sobackupaction!: pulumi.Output<string>;
    public readonly somethod!: pulumi.Output<string>;
    public readonly sopersistence!: pulumi.Output<string>;
    public readonly sopersistencetimeout!: pulumi.Output<number>;
    public readonly sothreshold!: pulumi.Output<number>;
    public readonly sslcertkey!: pulumi.Output<string | undefined>;
    public readonly sslpolicybindings!: pulumi.Output<outputs.LbvserverSslpolicybinding[] | undefined>;
    public readonly sslprofile!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly tcpprofilename!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<number>;
    public readonly timeout!: pulumi.Output<number | undefined>;
    public readonly tosid!: pulumi.Output<number>;
    public readonly trofspersistence!: pulumi.Output<string>;
    public readonly v6netmasklen!: pulumi.Output<number>;
    public readonly v6persistmasklen!: pulumi.Output<number>;
    public readonly vipheader!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a Lbvserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LbvserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbvserverArgs | LbvserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbvserverState | undefined;
            resourceInputs["appflowlog"] = state ? state.appflowlog : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["authenticationhost"] = state ? state.authenticationhost : undefined;
            resourceInputs["authn401"] = state ? state.authn401 : undefined;
            resourceInputs["authnprofile"] = state ? state.authnprofile : undefined;
            resourceInputs["authnvsname"] = state ? state.authnvsname : undefined;
            resourceInputs["backuplbmethod"] = state ? state.backuplbmethod : undefined;
            resourceInputs["backuppersistencetimeout"] = state ? state.backuppersistencetimeout : undefined;
            resourceInputs["backupvserver"] = state ? state.backupvserver : undefined;
            resourceInputs["bypassaaaa"] = state ? state.bypassaaaa : undefined;
            resourceInputs["cacheable"] = state ? state.cacheable : undefined;
            resourceInputs["ciphers"] = state ? state.ciphers : undefined;
            resourceInputs["ciphersuites"] = state ? state.ciphersuites : undefined;
            resourceInputs["clttimeout"] = state ? state.clttimeout : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["connfailover"] = state ? state.connfailover : undefined;
            resourceInputs["cookiename"] = state ? state.cookiename : undefined;
            resourceInputs["datalength"] = state ? state.datalength : undefined;
            resourceInputs["dataoffset"] = state ? state.dataoffset : undefined;
            resourceInputs["dbprofilename"] = state ? state.dbprofilename : undefined;
            resourceInputs["dbslb"] = state ? state.dbslb : undefined;
            resourceInputs["disableprimaryondown"] = state ? state.disableprimaryondown : undefined;
            resourceInputs["dns64"] = state ? state.dns64 : undefined;
            resourceInputs["dnsprofilename"] = state ? state.dnsprofilename : undefined;
            resourceInputs["downstateflush"] = state ? state.downstateflush : undefined;
            resourceInputs["hashlength"] = state ? state.hashlength : undefined;
            resourceInputs["healththreshold"] = state ? state.healththreshold : undefined;
            resourceInputs["httpprofilename"] = state ? state.httpprofilename : undefined;
            resourceInputs["httpsredirecturl"] = state ? state.httpsredirecturl : undefined;
            resourceInputs["icmpvsrresponse"] = state ? state.icmpvsrresponse : undefined;
            resourceInputs["insertvserveripport"] = state ? state.insertvserveripport : undefined;
            resourceInputs["ipmask"] = state ? state.ipmask : undefined;
            resourceInputs["ippattern"] = state ? state.ippattern : undefined;
            resourceInputs["ipset"] = state ? state.ipset : undefined;
            resourceInputs["ipv46"] = state ? state.ipv46 : undefined;
            resourceInputs["l2conn"] = state ? state.l2conn : undefined;
            resourceInputs["lbmethod"] = state ? state.lbmethod : undefined;
            resourceInputs["lbprofilename"] = state ? state.lbprofilename : undefined;
            resourceInputs["listenpolicy"] = state ? state.listenpolicy : undefined;
            resourceInputs["listenpriority"] = state ? state.listenpriority : undefined;
            resourceInputs["m"] = state ? state.m : undefined;
            resourceInputs["macmoderetainvlan"] = state ? state.macmoderetainvlan : undefined;
            resourceInputs["maxautoscalemembers"] = state ? state.maxautoscalemembers : undefined;
            resourceInputs["minautoscalemembers"] = state ? state.minautoscalemembers : undefined;
            resourceInputs["mssqlserverversion"] = state ? state.mssqlserverversion : undefined;
            resourceInputs["mysqlcharacterset"] = state ? state.mysqlcharacterset : undefined;
            resourceInputs["mysqlprotocolversion"] = state ? state.mysqlprotocolversion : undefined;
            resourceInputs["mysqlservercapabilities"] = state ? state.mysqlservercapabilities : undefined;
            resourceInputs["mysqlserverversion"] = state ? state.mysqlserverversion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["netprofile"] = state ? state.netprofile : undefined;
            resourceInputs["newname"] = state ? state.newname : undefined;
            resourceInputs["newservicerequest"] = state ? state.newservicerequest : undefined;
            resourceInputs["newservicerequestincrementinterval"] = state ? state.newservicerequestincrementinterval : undefined;
            resourceInputs["newservicerequestunit"] = state ? state.newservicerequestunit : undefined;
            resourceInputs["oracleserverversion"] = state ? state.oracleserverversion : undefined;
            resourceInputs["persistencebackup"] = state ? state.persistencebackup : undefined;
            resourceInputs["persistencetype"] = state ? state.persistencetype : undefined;
            resourceInputs["persistmask"] = state ? state.persistmask : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["pq"] = state ? state.pq : undefined;
            resourceInputs["probeport"] = state ? state.probeport : undefined;
            resourceInputs["probeprotocol"] = state ? state.probeprotocol : undefined;
            resourceInputs["processlocal"] = state ? state.processlocal : undefined;
            resourceInputs["push"] = state ? state.push : undefined;
            resourceInputs["pushlabel"] = state ? state.pushlabel : undefined;
            resourceInputs["pushmulticlients"] = state ? state.pushmulticlients : undefined;
            resourceInputs["pushvserver"] = state ? state.pushvserver : undefined;
            resourceInputs["quicbridgeprofilename"] = state ? state.quicbridgeprofilename : undefined;
            resourceInputs["range"] = state ? state.range : undefined;
            resourceInputs["recursionavailable"] = state ? state.recursionavailable : undefined;
            resourceInputs["redirectfromport"] = state ? state.redirectfromport : undefined;
            resourceInputs["redirectportrewrite"] = state ? state.redirectportrewrite : undefined;
            resourceInputs["redirurl"] = state ? state.redirurl : undefined;
            resourceInputs["redirurlflags"] = state ? state.redirurlflags : undefined;
            resourceInputs["resrule"] = state ? state.resrule : undefined;
            resourceInputs["retainconnectionsoncluster"] = state ? state.retainconnectionsoncluster : undefined;
            resourceInputs["rhistate"] = state ? state.rhistate : undefined;
            resourceInputs["rtspnat"] = state ? state.rtspnat : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["sc"] = state ? state.sc : undefined;
            resourceInputs["servicename"] = state ? state.servicename : undefined;
            resourceInputs["servicetype"] = state ? state.servicetype : undefined;
            resourceInputs["sessionless"] = state ? state.sessionless : undefined;
            resourceInputs["skippersistency"] = state ? state.skippersistency : undefined;
            resourceInputs["snisslcertkeys"] = state ? state.snisslcertkeys : undefined;
            resourceInputs["sobackupaction"] = state ? state.sobackupaction : undefined;
            resourceInputs["somethod"] = state ? state.somethod : undefined;
            resourceInputs["sopersistence"] = state ? state.sopersistence : undefined;
            resourceInputs["sopersistencetimeout"] = state ? state.sopersistencetimeout : undefined;
            resourceInputs["sothreshold"] = state ? state.sothreshold : undefined;
            resourceInputs["sslcertkey"] = state ? state.sslcertkey : undefined;
            resourceInputs["sslpolicybindings"] = state ? state.sslpolicybindings : undefined;
            resourceInputs["sslprofile"] = state ? state.sslprofile : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tcpprofilename"] = state ? state.tcpprofilename : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["tosid"] = state ? state.tosid : undefined;
            resourceInputs["trofspersistence"] = state ? state.trofspersistence : undefined;
            resourceInputs["v6netmasklen"] = state ? state.v6netmasklen : undefined;
            resourceInputs["v6persistmasklen"] = state ? state.v6persistmasklen : undefined;
            resourceInputs["vipheader"] = state ? state.vipheader : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as LbvserverArgs | undefined;
            resourceInputs["appflowlog"] = args ? args.appflowlog : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["authenticationhost"] = args ? args.authenticationhost : undefined;
            resourceInputs["authn401"] = args ? args.authn401 : undefined;
            resourceInputs["authnprofile"] = args ? args.authnprofile : undefined;
            resourceInputs["authnvsname"] = args ? args.authnvsname : undefined;
            resourceInputs["backuplbmethod"] = args ? args.backuplbmethod : undefined;
            resourceInputs["backuppersistencetimeout"] = args ? args.backuppersistencetimeout : undefined;
            resourceInputs["backupvserver"] = args ? args.backupvserver : undefined;
            resourceInputs["bypassaaaa"] = args ? args.bypassaaaa : undefined;
            resourceInputs["cacheable"] = args ? args.cacheable : undefined;
            resourceInputs["ciphers"] = args ? args.ciphers : undefined;
            resourceInputs["ciphersuites"] = args ? args.ciphersuites : undefined;
            resourceInputs["clttimeout"] = args ? args.clttimeout : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["connfailover"] = args ? args.connfailover : undefined;
            resourceInputs["cookiename"] = args ? args.cookiename : undefined;
            resourceInputs["datalength"] = args ? args.datalength : undefined;
            resourceInputs["dataoffset"] = args ? args.dataoffset : undefined;
            resourceInputs["dbprofilename"] = args ? args.dbprofilename : undefined;
            resourceInputs["dbslb"] = args ? args.dbslb : undefined;
            resourceInputs["disableprimaryondown"] = args ? args.disableprimaryondown : undefined;
            resourceInputs["dns64"] = args ? args.dns64 : undefined;
            resourceInputs["dnsprofilename"] = args ? args.dnsprofilename : undefined;
            resourceInputs["downstateflush"] = args ? args.downstateflush : undefined;
            resourceInputs["hashlength"] = args ? args.hashlength : undefined;
            resourceInputs["healththreshold"] = args ? args.healththreshold : undefined;
            resourceInputs["httpprofilename"] = args ? args.httpprofilename : undefined;
            resourceInputs["httpsredirecturl"] = args ? args.httpsredirecturl : undefined;
            resourceInputs["icmpvsrresponse"] = args ? args.icmpvsrresponse : undefined;
            resourceInputs["insertvserveripport"] = args ? args.insertvserveripport : undefined;
            resourceInputs["ipmask"] = args ? args.ipmask : undefined;
            resourceInputs["ippattern"] = args ? args.ippattern : undefined;
            resourceInputs["ipset"] = args ? args.ipset : undefined;
            resourceInputs["ipv46"] = args ? args.ipv46 : undefined;
            resourceInputs["l2conn"] = args ? args.l2conn : undefined;
            resourceInputs["lbmethod"] = args ? args.lbmethod : undefined;
            resourceInputs["lbprofilename"] = args ? args.lbprofilename : undefined;
            resourceInputs["listenpolicy"] = args ? args.listenpolicy : undefined;
            resourceInputs["listenpriority"] = args ? args.listenpriority : undefined;
            resourceInputs["m"] = args ? args.m : undefined;
            resourceInputs["macmoderetainvlan"] = args ? args.macmoderetainvlan : undefined;
            resourceInputs["maxautoscalemembers"] = args ? args.maxautoscalemembers : undefined;
            resourceInputs["minautoscalemembers"] = args ? args.minautoscalemembers : undefined;
            resourceInputs["mssqlserverversion"] = args ? args.mssqlserverversion : undefined;
            resourceInputs["mysqlcharacterset"] = args ? args.mysqlcharacterset : undefined;
            resourceInputs["mysqlprotocolversion"] = args ? args.mysqlprotocolversion : undefined;
            resourceInputs["mysqlservercapabilities"] = args ? args.mysqlservercapabilities : undefined;
            resourceInputs["mysqlserverversion"] = args ? args.mysqlserverversion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["netprofile"] = args ? args.netprofile : undefined;
            resourceInputs["newname"] = args ? args.newname : undefined;
            resourceInputs["newservicerequest"] = args ? args.newservicerequest : undefined;
            resourceInputs["newservicerequestincrementinterval"] = args ? args.newservicerequestincrementinterval : undefined;
            resourceInputs["newservicerequestunit"] = args ? args.newservicerequestunit : undefined;
            resourceInputs["oracleserverversion"] = args ? args.oracleserverversion : undefined;
            resourceInputs["persistencebackup"] = args ? args.persistencebackup : undefined;
            resourceInputs["persistencetype"] = args ? args.persistencetype : undefined;
            resourceInputs["persistmask"] = args ? args.persistmask : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["pq"] = args ? args.pq : undefined;
            resourceInputs["probeport"] = args ? args.probeport : undefined;
            resourceInputs["probeprotocol"] = args ? args.probeprotocol : undefined;
            resourceInputs["processlocal"] = args ? args.processlocal : undefined;
            resourceInputs["push"] = args ? args.push : undefined;
            resourceInputs["pushlabel"] = args ? args.pushlabel : undefined;
            resourceInputs["pushmulticlients"] = args ? args.pushmulticlients : undefined;
            resourceInputs["pushvserver"] = args ? args.pushvserver : undefined;
            resourceInputs["quicbridgeprofilename"] = args ? args.quicbridgeprofilename : undefined;
            resourceInputs["range"] = args ? args.range : undefined;
            resourceInputs["recursionavailable"] = args ? args.recursionavailable : undefined;
            resourceInputs["redirectfromport"] = args ? args.redirectfromport : undefined;
            resourceInputs["redirectportrewrite"] = args ? args.redirectportrewrite : undefined;
            resourceInputs["redirurl"] = args ? args.redirurl : undefined;
            resourceInputs["redirurlflags"] = args ? args.redirurlflags : undefined;
            resourceInputs["resrule"] = args ? args.resrule : undefined;
            resourceInputs["retainconnectionsoncluster"] = args ? args.retainconnectionsoncluster : undefined;
            resourceInputs["rhistate"] = args ? args.rhistate : undefined;
            resourceInputs["rtspnat"] = args ? args.rtspnat : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["sc"] = args ? args.sc : undefined;
            resourceInputs["servicename"] = args ? args.servicename : undefined;
            resourceInputs["servicetype"] = args ? args.servicetype : undefined;
            resourceInputs["sessionless"] = args ? args.sessionless : undefined;
            resourceInputs["skippersistency"] = args ? args.skippersistency : undefined;
            resourceInputs["snisslcertkeys"] = args ? args.snisslcertkeys : undefined;
            resourceInputs["sobackupaction"] = args ? args.sobackupaction : undefined;
            resourceInputs["somethod"] = args ? args.somethod : undefined;
            resourceInputs["sopersistence"] = args ? args.sopersistence : undefined;
            resourceInputs["sopersistencetimeout"] = args ? args.sopersistencetimeout : undefined;
            resourceInputs["sothreshold"] = args ? args.sothreshold : undefined;
            resourceInputs["sslcertkey"] = args ? args.sslcertkey : undefined;
            resourceInputs["sslpolicybindings"] = args ? args.sslpolicybindings : undefined;
            resourceInputs["sslprofile"] = args ? args.sslprofile : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tcpprofilename"] = args ? args.tcpprofilename : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["tosid"] = args ? args.tosid : undefined;
            resourceInputs["trofspersistence"] = args ? args.trofspersistence : undefined;
            resourceInputs["v6netmasklen"] = args ? args.v6netmasklen : undefined;
            resourceInputs["v6persistmasklen"] = args ? args.v6persistmasklen : undefined;
            resourceInputs["vipheader"] = args ? args.vipheader : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lbvserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lbvserver resources.
 */
export interface LbvserverState {
    appflowlog?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    authenticationhost?: pulumi.Input<string>;
    authn401?: pulumi.Input<string>;
    authnprofile?: pulumi.Input<string>;
    authnvsname?: pulumi.Input<string>;
    backuplbmethod?: pulumi.Input<string>;
    backuppersistencetimeout?: pulumi.Input<number>;
    backupvserver?: pulumi.Input<string>;
    bypassaaaa?: pulumi.Input<string>;
    cacheable?: pulumi.Input<string>;
    ciphers?: pulumi.Input<pulumi.Input<string>[]>;
    ciphersuites?: pulumi.Input<pulumi.Input<string>[]>;
    clttimeout?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    connfailover?: pulumi.Input<string>;
    cookiename?: pulumi.Input<string>;
    datalength?: pulumi.Input<number>;
    dataoffset?: pulumi.Input<number>;
    dbprofilename?: pulumi.Input<string>;
    dbslb?: pulumi.Input<string>;
    disableprimaryondown?: pulumi.Input<string>;
    dns64?: pulumi.Input<string>;
    dnsprofilename?: pulumi.Input<string>;
    downstateflush?: pulumi.Input<string>;
    hashlength?: pulumi.Input<number>;
    healththreshold?: pulumi.Input<number>;
    httpprofilename?: pulumi.Input<string>;
    httpsredirecturl?: pulumi.Input<string>;
    icmpvsrresponse?: pulumi.Input<string>;
    insertvserveripport?: pulumi.Input<string>;
    ipmask?: pulumi.Input<string>;
    ippattern?: pulumi.Input<string>;
    ipset?: pulumi.Input<string>;
    ipv46?: pulumi.Input<string>;
    l2conn?: pulumi.Input<string>;
    lbmethod?: pulumi.Input<string>;
    lbprofilename?: pulumi.Input<string>;
    listenpolicy?: pulumi.Input<string>;
    listenpriority?: pulumi.Input<number>;
    m?: pulumi.Input<string>;
    macmoderetainvlan?: pulumi.Input<string>;
    maxautoscalemembers?: pulumi.Input<number>;
    minautoscalemembers?: pulumi.Input<number>;
    mssqlserverversion?: pulumi.Input<string>;
    mysqlcharacterset?: pulumi.Input<number>;
    mysqlprotocolversion?: pulumi.Input<number>;
    mysqlservercapabilities?: pulumi.Input<number>;
    mysqlserverversion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    netprofile?: pulumi.Input<string>;
    newname?: pulumi.Input<string>;
    newservicerequest?: pulumi.Input<number>;
    newservicerequestincrementinterval?: pulumi.Input<number>;
    newservicerequestunit?: pulumi.Input<string>;
    oracleserverversion?: pulumi.Input<string>;
    persistencebackup?: pulumi.Input<string>;
    persistencetype?: pulumi.Input<string>;
    persistmask?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    pq?: pulumi.Input<string>;
    probeport?: pulumi.Input<number>;
    probeprotocol?: pulumi.Input<string>;
    processlocal?: pulumi.Input<string>;
    push?: pulumi.Input<string>;
    pushlabel?: pulumi.Input<string>;
    pushmulticlients?: pulumi.Input<string>;
    pushvserver?: pulumi.Input<string>;
    quicbridgeprofilename?: pulumi.Input<string>;
    range?: pulumi.Input<number>;
    recursionavailable?: pulumi.Input<string>;
    redirectfromport?: pulumi.Input<number>;
    redirectportrewrite?: pulumi.Input<string>;
    redirurl?: pulumi.Input<string>;
    redirurlflags?: pulumi.Input<boolean>;
    resrule?: pulumi.Input<string>;
    retainconnectionsoncluster?: pulumi.Input<string>;
    rhistate?: pulumi.Input<string>;
    rtspnat?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
    sc?: pulumi.Input<string>;
    servicename?: pulumi.Input<string>;
    servicetype?: pulumi.Input<string>;
    sessionless?: pulumi.Input<string>;
    skippersistency?: pulumi.Input<string>;
    snisslcertkeys?: pulumi.Input<pulumi.Input<string>[]>;
    sobackupaction?: pulumi.Input<string>;
    somethod?: pulumi.Input<string>;
    sopersistence?: pulumi.Input<string>;
    sopersistencetimeout?: pulumi.Input<number>;
    sothreshold?: pulumi.Input<number>;
    sslcertkey?: pulumi.Input<string>;
    sslpolicybindings?: pulumi.Input<pulumi.Input<inputs.LbvserverSslpolicybinding>[]>;
    sslprofile?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tcpprofilename?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    tosid?: pulumi.Input<number>;
    trofspersistence?: pulumi.Input<string>;
    v6netmasklen?: pulumi.Input<number>;
    v6persistmasklen?: pulumi.Input<number>;
    vipheader?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Lbvserver resource.
 */
export interface LbvserverArgs {
    appflowlog?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    authenticationhost?: pulumi.Input<string>;
    authn401?: pulumi.Input<string>;
    authnprofile?: pulumi.Input<string>;
    authnvsname?: pulumi.Input<string>;
    backuplbmethod?: pulumi.Input<string>;
    backuppersistencetimeout?: pulumi.Input<number>;
    backupvserver?: pulumi.Input<string>;
    bypassaaaa?: pulumi.Input<string>;
    cacheable?: pulumi.Input<string>;
    ciphers?: pulumi.Input<pulumi.Input<string>[]>;
    ciphersuites?: pulumi.Input<pulumi.Input<string>[]>;
    clttimeout?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    connfailover?: pulumi.Input<string>;
    cookiename?: pulumi.Input<string>;
    datalength?: pulumi.Input<number>;
    dataoffset?: pulumi.Input<number>;
    dbprofilename?: pulumi.Input<string>;
    dbslb?: pulumi.Input<string>;
    disableprimaryondown?: pulumi.Input<string>;
    dns64?: pulumi.Input<string>;
    dnsprofilename?: pulumi.Input<string>;
    downstateflush?: pulumi.Input<string>;
    hashlength?: pulumi.Input<number>;
    healththreshold?: pulumi.Input<number>;
    httpprofilename?: pulumi.Input<string>;
    httpsredirecturl?: pulumi.Input<string>;
    icmpvsrresponse?: pulumi.Input<string>;
    insertvserveripport?: pulumi.Input<string>;
    ipmask?: pulumi.Input<string>;
    ippattern?: pulumi.Input<string>;
    ipset?: pulumi.Input<string>;
    ipv46?: pulumi.Input<string>;
    l2conn?: pulumi.Input<string>;
    lbmethod?: pulumi.Input<string>;
    lbprofilename?: pulumi.Input<string>;
    listenpolicy?: pulumi.Input<string>;
    listenpriority?: pulumi.Input<number>;
    m?: pulumi.Input<string>;
    macmoderetainvlan?: pulumi.Input<string>;
    maxautoscalemembers?: pulumi.Input<number>;
    minautoscalemembers?: pulumi.Input<number>;
    mssqlserverversion?: pulumi.Input<string>;
    mysqlcharacterset?: pulumi.Input<number>;
    mysqlprotocolversion?: pulumi.Input<number>;
    mysqlservercapabilities?: pulumi.Input<number>;
    mysqlserverversion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    netprofile?: pulumi.Input<string>;
    newname?: pulumi.Input<string>;
    newservicerequest?: pulumi.Input<number>;
    newservicerequestincrementinterval?: pulumi.Input<number>;
    newservicerequestunit?: pulumi.Input<string>;
    oracleserverversion?: pulumi.Input<string>;
    persistencebackup?: pulumi.Input<string>;
    persistencetype?: pulumi.Input<string>;
    persistmask?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    pq?: pulumi.Input<string>;
    probeport?: pulumi.Input<number>;
    probeprotocol?: pulumi.Input<string>;
    processlocal?: pulumi.Input<string>;
    push?: pulumi.Input<string>;
    pushlabel?: pulumi.Input<string>;
    pushmulticlients?: pulumi.Input<string>;
    pushvserver?: pulumi.Input<string>;
    quicbridgeprofilename?: pulumi.Input<string>;
    range?: pulumi.Input<number>;
    recursionavailable?: pulumi.Input<string>;
    redirectfromport?: pulumi.Input<number>;
    redirectportrewrite?: pulumi.Input<string>;
    redirurl?: pulumi.Input<string>;
    redirurlflags?: pulumi.Input<boolean>;
    resrule?: pulumi.Input<string>;
    retainconnectionsoncluster?: pulumi.Input<string>;
    rhistate?: pulumi.Input<string>;
    rtspnat?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
    sc?: pulumi.Input<string>;
    servicename?: pulumi.Input<string>;
    servicetype?: pulumi.Input<string>;
    sessionless?: pulumi.Input<string>;
    skippersistency?: pulumi.Input<string>;
    snisslcertkeys?: pulumi.Input<pulumi.Input<string>[]>;
    sobackupaction?: pulumi.Input<string>;
    somethod?: pulumi.Input<string>;
    sopersistence?: pulumi.Input<string>;
    sopersistencetimeout?: pulumi.Input<number>;
    sothreshold?: pulumi.Input<number>;
    sslcertkey?: pulumi.Input<string>;
    sslpolicybindings?: pulumi.Input<pulumi.Input<inputs.LbvserverSslpolicybinding>[]>;
    sslprofile?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tcpprofilename?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    tosid?: pulumi.Input<number>;
    trofspersistence?: pulumi.Input<string>;
    v6netmasklen?: pulumi.Input<number>;
    v6persistmasklen?: pulumi.Input<number>;
    vipheader?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}
