// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BotprofileTpsBinding extends pulumi.CustomResource {
    /**
     * Get an existing BotprofileTpsBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BotprofileTpsBindingState, opts?: pulumi.CustomResourceOptions): BotprofileTpsBinding {
        return new BotprofileTpsBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/botprofileTpsBinding:BotprofileTpsBinding';

    /**
     * Returns true if the given object is an instance of BotprofileTpsBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BotprofileTpsBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BotprofileTpsBinding.__pulumiType;
    }

    public readonly botBindComment!: pulumi.Output<string>;
    public readonly botTps!: pulumi.Output<boolean>;
    public readonly botTpsActions!: pulumi.Output<string[]>;
    public readonly botTpsType!: pulumi.Output<string>;
    public readonly logmessage!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly percentage!: pulumi.Output<number>;
    public readonly threshold!: pulumi.Output<number>;

    /**
     * Create a BotprofileTpsBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BotprofileTpsBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BotprofileTpsBindingArgs | BotprofileTpsBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BotprofileTpsBindingState | undefined;
            resourceInputs["botBindComment"] = state ? state.botBindComment : undefined;
            resourceInputs["botTps"] = state ? state.botTps : undefined;
            resourceInputs["botTpsActions"] = state ? state.botTpsActions : undefined;
            resourceInputs["botTpsType"] = state ? state.botTpsType : undefined;
            resourceInputs["logmessage"] = state ? state.logmessage : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["percentage"] = state ? state.percentage : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
        } else {
            const args = argsOrState as BotprofileTpsBindingArgs | undefined;
            if ((!args || args.botTpsType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botTpsType'");
            }
            resourceInputs["botBindComment"] = args ? args.botBindComment : undefined;
            resourceInputs["botTps"] = args ? args.botTps : undefined;
            resourceInputs["botTpsActions"] = args ? args.botTpsActions : undefined;
            resourceInputs["botTpsType"] = args ? args.botTpsType : undefined;
            resourceInputs["logmessage"] = args ? args.logmessage : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["percentage"] = args ? args.percentage : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BotprofileTpsBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BotprofileTpsBinding resources.
 */
export interface BotprofileTpsBindingState {
    botBindComment?: pulumi.Input<string>;
    botTps?: pulumi.Input<boolean>;
    botTpsActions?: pulumi.Input<pulumi.Input<string>[]>;
    botTpsType?: pulumi.Input<string>;
    logmessage?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    percentage?: pulumi.Input<number>;
    threshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BotprofileTpsBinding resource.
 */
export interface BotprofileTpsBindingArgs {
    botBindComment?: pulumi.Input<string>;
    botTps?: pulumi.Input<boolean>;
    botTpsActions?: pulumi.Input<pulumi.Input<string>[]>;
    botTpsType: pulumi.Input<string>;
    logmessage?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    percentage?: pulumi.Input<number>;
    threshold?: pulumi.Input<number>;
}
