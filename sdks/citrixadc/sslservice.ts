// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sslservice extends pulumi.CustomResource {
    /**
     * Get an existing Sslservice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslserviceState, opts?: pulumi.CustomResourceOptions): Sslservice {
        return new Sslservice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/sslservice:Sslservice';

    /**
     * Returns true if the given object is an instance of Sslservice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sslservice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sslservice.__pulumiType;
    }

    public readonly cipherredirect!: pulumi.Output<string>;
    public readonly cipherurl!: pulumi.Output<string>;
    public readonly clientauth!: pulumi.Output<string>;
    public readonly clientcert!: pulumi.Output<string>;
    public readonly commonname!: pulumi.Output<string>;
    public readonly dh!: pulumi.Output<string>;
    public readonly dhcount!: pulumi.Output<number>;
    public readonly dhfile!: pulumi.Output<string>;
    public readonly dhkeyexpsizelimit!: pulumi.Output<string>;
    public readonly dtls1!: pulumi.Output<string>;
    public readonly dtls12!: pulumi.Output<string>;
    public readonly dtlsprofilename!: pulumi.Output<string>;
    public readonly ersa!: pulumi.Output<string>;
    public readonly ersacount!: pulumi.Output<number>;
    public readonly ocspstapling!: pulumi.Output<string>;
    public readonly pushenctrigger!: pulumi.Output<string>;
    public readonly redirectportrewrite!: pulumi.Output<string>;
    public readonly sendclosenotify!: pulumi.Output<string>;
    public readonly serverauth!: pulumi.Output<string>;
    public readonly servicename!: pulumi.Output<string>;
    public readonly sessreuse!: pulumi.Output<string>;
    public readonly sesstimeout!: pulumi.Output<number>;
    public readonly snienable!: pulumi.Output<string>;
    public readonly ssl2!: pulumi.Output<string>;
    public readonly ssl3!: pulumi.Output<string>;
    public readonly sslprofile!: pulumi.Output<string>;
    public readonly sslredirect!: pulumi.Output<string>;
    public readonly sslv2redirect!: pulumi.Output<string>;
    public readonly sslv2url!: pulumi.Output<string>;
    public readonly strictsigdigestcheck!: pulumi.Output<string>;
    public readonly tls1!: pulumi.Output<string>;
    public readonly tls11!: pulumi.Output<string>;
    public readonly tls12!: pulumi.Output<string>;
    public readonly tls13!: pulumi.Output<string>;

    /**
     * Create a Sslservice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslserviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslserviceArgs | SslserviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslserviceState | undefined;
            resourceInputs["cipherredirect"] = state ? state.cipherredirect : undefined;
            resourceInputs["cipherurl"] = state ? state.cipherurl : undefined;
            resourceInputs["clientauth"] = state ? state.clientauth : undefined;
            resourceInputs["clientcert"] = state ? state.clientcert : undefined;
            resourceInputs["commonname"] = state ? state.commonname : undefined;
            resourceInputs["dh"] = state ? state.dh : undefined;
            resourceInputs["dhcount"] = state ? state.dhcount : undefined;
            resourceInputs["dhfile"] = state ? state.dhfile : undefined;
            resourceInputs["dhkeyexpsizelimit"] = state ? state.dhkeyexpsizelimit : undefined;
            resourceInputs["dtls1"] = state ? state.dtls1 : undefined;
            resourceInputs["dtls12"] = state ? state.dtls12 : undefined;
            resourceInputs["dtlsprofilename"] = state ? state.dtlsprofilename : undefined;
            resourceInputs["ersa"] = state ? state.ersa : undefined;
            resourceInputs["ersacount"] = state ? state.ersacount : undefined;
            resourceInputs["ocspstapling"] = state ? state.ocspstapling : undefined;
            resourceInputs["pushenctrigger"] = state ? state.pushenctrigger : undefined;
            resourceInputs["redirectportrewrite"] = state ? state.redirectportrewrite : undefined;
            resourceInputs["sendclosenotify"] = state ? state.sendclosenotify : undefined;
            resourceInputs["serverauth"] = state ? state.serverauth : undefined;
            resourceInputs["servicename"] = state ? state.servicename : undefined;
            resourceInputs["sessreuse"] = state ? state.sessreuse : undefined;
            resourceInputs["sesstimeout"] = state ? state.sesstimeout : undefined;
            resourceInputs["snienable"] = state ? state.snienable : undefined;
            resourceInputs["ssl2"] = state ? state.ssl2 : undefined;
            resourceInputs["ssl3"] = state ? state.ssl3 : undefined;
            resourceInputs["sslprofile"] = state ? state.sslprofile : undefined;
            resourceInputs["sslredirect"] = state ? state.sslredirect : undefined;
            resourceInputs["sslv2redirect"] = state ? state.sslv2redirect : undefined;
            resourceInputs["sslv2url"] = state ? state.sslv2url : undefined;
            resourceInputs["strictsigdigestcheck"] = state ? state.strictsigdigestcheck : undefined;
            resourceInputs["tls1"] = state ? state.tls1 : undefined;
            resourceInputs["tls11"] = state ? state.tls11 : undefined;
            resourceInputs["tls12"] = state ? state.tls12 : undefined;
            resourceInputs["tls13"] = state ? state.tls13 : undefined;
        } else {
            const args = argsOrState as SslserviceArgs | undefined;
            if ((!args || args.servicename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicename'");
            }
            resourceInputs["cipherredirect"] = args ? args.cipherredirect : undefined;
            resourceInputs["cipherurl"] = args ? args.cipherurl : undefined;
            resourceInputs["clientauth"] = args ? args.clientauth : undefined;
            resourceInputs["clientcert"] = args ? args.clientcert : undefined;
            resourceInputs["commonname"] = args ? args.commonname : undefined;
            resourceInputs["dh"] = args ? args.dh : undefined;
            resourceInputs["dhcount"] = args ? args.dhcount : undefined;
            resourceInputs["dhfile"] = args ? args.dhfile : undefined;
            resourceInputs["dhkeyexpsizelimit"] = args ? args.dhkeyexpsizelimit : undefined;
            resourceInputs["dtls1"] = args ? args.dtls1 : undefined;
            resourceInputs["dtls12"] = args ? args.dtls12 : undefined;
            resourceInputs["dtlsprofilename"] = args ? args.dtlsprofilename : undefined;
            resourceInputs["ersa"] = args ? args.ersa : undefined;
            resourceInputs["ersacount"] = args ? args.ersacount : undefined;
            resourceInputs["ocspstapling"] = args ? args.ocspstapling : undefined;
            resourceInputs["pushenctrigger"] = args ? args.pushenctrigger : undefined;
            resourceInputs["redirectportrewrite"] = args ? args.redirectportrewrite : undefined;
            resourceInputs["sendclosenotify"] = args ? args.sendclosenotify : undefined;
            resourceInputs["serverauth"] = args ? args.serverauth : undefined;
            resourceInputs["servicename"] = args ? args.servicename : undefined;
            resourceInputs["sessreuse"] = args ? args.sessreuse : undefined;
            resourceInputs["sesstimeout"] = args ? args.sesstimeout : undefined;
            resourceInputs["snienable"] = args ? args.snienable : undefined;
            resourceInputs["ssl2"] = args ? args.ssl2 : undefined;
            resourceInputs["ssl3"] = args ? args.ssl3 : undefined;
            resourceInputs["sslprofile"] = args ? args.sslprofile : undefined;
            resourceInputs["sslredirect"] = args ? args.sslredirect : undefined;
            resourceInputs["sslv2redirect"] = args ? args.sslv2redirect : undefined;
            resourceInputs["sslv2url"] = args ? args.sslv2url : undefined;
            resourceInputs["strictsigdigestcheck"] = args ? args.strictsigdigestcheck : undefined;
            resourceInputs["tls1"] = args ? args.tls1 : undefined;
            resourceInputs["tls11"] = args ? args.tls11 : undefined;
            resourceInputs["tls12"] = args ? args.tls12 : undefined;
            resourceInputs["tls13"] = args ? args.tls13 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sslservice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sslservice resources.
 */
export interface SslserviceState {
    cipherredirect?: pulumi.Input<string>;
    cipherurl?: pulumi.Input<string>;
    clientauth?: pulumi.Input<string>;
    clientcert?: pulumi.Input<string>;
    commonname?: pulumi.Input<string>;
    dh?: pulumi.Input<string>;
    dhcount?: pulumi.Input<number>;
    dhfile?: pulumi.Input<string>;
    dhkeyexpsizelimit?: pulumi.Input<string>;
    dtls1?: pulumi.Input<string>;
    dtls12?: pulumi.Input<string>;
    dtlsprofilename?: pulumi.Input<string>;
    ersa?: pulumi.Input<string>;
    ersacount?: pulumi.Input<number>;
    ocspstapling?: pulumi.Input<string>;
    pushenctrigger?: pulumi.Input<string>;
    redirectportrewrite?: pulumi.Input<string>;
    sendclosenotify?: pulumi.Input<string>;
    serverauth?: pulumi.Input<string>;
    servicename?: pulumi.Input<string>;
    sessreuse?: pulumi.Input<string>;
    sesstimeout?: pulumi.Input<number>;
    snienable?: pulumi.Input<string>;
    ssl2?: pulumi.Input<string>;
    ssl3?: pulumi.Input<string>;
    sslprofile?: pulumi.Input<string>;
    sslredirect?: pulumi.Input<string>;
    sslv2redirect?: pulumi.Input<string>;
    sslv2url?: pulumi.Input<string>;
    strictsigdigestcheck?: pulumi.Input<string>;
    tls1?: pulumi.Input<string>;
    tls11?: pulumi.Input<string>;
    tls12?: pulumi.Input<string>;
    tls13?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sslservice resource.
 */
export interface SslserviceArgs {
    cipherredirect?: pulumi.Input<string>;
    cipherurl?: pulumi.Input<string>;
    clientauth?: pulumi.Input<string>;
    clientcert?: pulumi.Input<string>;
    commonname?: pulumi.Input<string>;
    dh?: pulumi.Input<string>;
    dhcount?: pulumi.Input<number>;
    dhfile?: pulumi.Input<string>;
    dhkeyexpsizelimit?: pulumi.Input<string>;
    dtls1?: pulumi.Input<string>;
    dtls12?: pulumi.Input<string>;
    dtlsprofilename?: pulumi.Input<string>;
    ersa?: pulumi.Input<string>;
    ersacount?: pulumi.Input<number>;
    ocspstapling?: pulumi.Input<string>;
    pushenctrigger?: pulumi.Input<string>;
    redirectportrewrite?: pulumi.Input<string>;
    sendclosenotify?: pulumi.Input<string>;
    serverauth?: pulumi.Input<string>;
    servicename: pulumi.Input<string>;
    sessreuse?: pulumi.Input<string>;
    sesstimeout?: pulumi.Input<number>;
    snienable?: pulumi.Input<string>;
    ssl2?: pulumi.Input<string>;
    ssl3?: pulumi.Input<string>;
    sslprofile?: pulumi.Input<string>;
    sslredirect?: pulumi.Input<string>;
    sslv2redirect?: pulumi.Input<string>;
    sslv2url?: pulumi.Input<string>;
    strictsigdigestcheck?: pulumi.Input<string>;
    tls1?: pulumi.Input<string>;
    tls11?: pulumi.Input<string>;
    tls12?: pulumi.Input<string>;
    tls13?: pulumi.Input<string>;
}
