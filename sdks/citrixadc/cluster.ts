// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly backplanebasedview!: pulumi.Output<string>;
    public readonly bootstrapPollDelay!: pulumi.Output<string | undefined>;
    public readonly bootstrapPollInterval!: pulumi.Output<string | undefined>;
    public readonly bootstrapPollTimeout!: pulumi.Output<string | undefined>;
    public readonly bootstrapTotalTimeout!: pulumi.Output<string | undefined>;
    public readonly clid!: pulumi.Output<number>;
    public readonly clip!: pulumi.Output<string>;
    public readonly clipMigrationPollDelay!: pulumi.Output<string | undefined>;
    public readonly clipMigrationPollInterval!: pulumi.Output<string | undefined>;
    public readonly clipMigrationPollTimeout!: pulumi.Output<string | undefined>;
    public readonly clipMigrationTotalTimeout!: pulumi.Output<string | undefined>;
    public readonly clusternodegroups!: pulumi.Output<outputs.ClusterClusternodegroup[] | undefined>;
    public readonly clusternodes!: pulumi.Output<outputs.ClusterClusternode[]>;
    public readonly deadinterval!: pulumi.Output<number>;
    public readonly hellointerval!: pulumi.Output<number>;
    public readonly inc!: pulumi.Output<string>;
    public readonly nodeAddPollDelay!: pulumi.Output<string | undefined>;
    public readonly nodeAddPollInterval!: pulumi.Output<string | undefined>;
    public readonly nodeAddTotalTimeout!: pulumi.Output<string | undefined>;
    public readonly nodegroup!: pulumi.Output<string | undefined>;
    public readonly preemption!: pulumi.Output<string>;
    public readonly processlocal!: pulumi.Output<string>;
    public readonly quorumtype!: pulumi.Output<string>;
    public readonly retainconnectionsoncluster!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["backplanebasedview"] = state ? state.backplanebasedview : undefined;
            resourceInputs["bootstrapPollDelay"] = state ? state.bootstrapPollDelay : undefined;
            resourceInputs["bootstrapPollInterval"] = state ? state.bootstrapPollInterval : undefined;
            resourceInputs["bootstrapPollTimeout"] = state ? state.bootstrapPollTimeout : undefined;
            resourceInputs["bootstrapTotalTimeout"] = state ? state.bootstrapTotalTimeout : undefined;
            resourceInputs["clid"] = state ? state.clid : undefined;
            resourceInputs["clip"] = state ? state.clip : undefined;
            resourceInputs["clipMigrationPollDelay"] = state ? state.clipMigrationPollDelay : undefined;
            resourceInputs["clipMigrationPollInterval"] = state ? state.clipMigrationPollInterval : undefined;
            resourceInputs["clipMigrationPollTimeout"] = state ? state.clipMigrationPollTimeout : undefined;
            resourceInputs["clipMigrationTotalTimeout"] = state ? state.clipMigrationTotalTimeout : undefined;
            resourceInputs["clusternodegroups"] = state ? state.clusternodegroups : undefined;
            resourceInputs["clusternodes"] = state ? state.clusternodes : undefined;
            resourceInputs["deadinterval"] = state ? state.deadinterval : undefined;
            resourceInputs["hellointerval"] = state ? state.hellointerval : undefined;
            resourceInputs["inc"] = state ? state.inc : undefined;
            resourceInputs["nodeAddPollDelay"] = state ? state.nodeAddPollDelay : undefined;
            resourceInputs["nodeAddPollInterval"] = state ? state.nodeAddPollInterval : undefined;
            resourceInputs["nodeAddTotalTimeout"] = state ? state.nodeAddTotalTimeout : undefined;
            resourceInputs["nodegroup"] = state ? state.nodegroup : undefined;
            resourceInputs["preemption"] = state ? state.preemption : undefined;
            resourceInputs["processlocal"] = state ? state.processlocal : undefined;
            resourceInputs["quorumtype"] = state ? state.quorumtype : undefined;
            resourceInputs["retainconnectionsoncluster"] = state ? state.retainconnectionsoncluster : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.clid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clid'");
            }
            if ((!args || args.clip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clip'");
            }
            if ((!args || args.clusternodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusternodes'");
            }
            resourceInputs["backplanebasedview"] = args ? args.backplanebasedview : undefined;
            resourceInputs["bootstrapPollDelay"] = args ? args.bootstrapPollDelay : undefined;
            resourceInputs["bootstrapPollInterval"] = args ? args.bootstrapPollInterval : undefined;
            resourceInputs["bootstrapPollTimeout"] = args ? args.bootstrapPollTimeout : undefined;
            resourceInputs["bootstrapTotalTimeout"] = args ? args.bootstrapTotalTimeout : undefined;
            resourceInputs["clid"] = args ? args.clid : undefined;
            resourceInputs["clip"] = args ? args.clip : undefined;
            resourceInputs["clipMigrationPollDelay"] = args ? args.clipMigrationPollDelay : undefined;
            resourceInputs["clipMigrationPollInterval"] = args ? args.clipMigrationPollInterval : undefined;
            resourceInputs["clipMigrationPollTimeout"] = args ? args.clipMigrationPollTimeout : undefined;
            resourceInputs["clipMigrationTotalTimeout"] = args ? args.clipMigrationTotalTimeout : undefined;
            resourceInputs["clusternodegroups"] = args ? args.clusternodegroups : undefined;
            resourceInputs["clusternodes"] = args ? args.clusternodes : undefined;
            resourceInputs["deadinterval"] = args ? args.deadinterval : undefined;
            resourceInputs["hellointerval"] = args ? args.hellointerval : undefined;
            resourceInputs["inc"] = args ? args.inc : undefined;
            resourceInputs["nodeAddPollDelay"] = args ? args.nodeAddPollDelay : undefined;
            resourceInputs["nodeAddPollInterval"] = args ? args.nodeAddPollInterval : undefined;
            resourceInputs["nodeAddTotalTimeout"] = args ? args.nodeAddTotalTimeout : undefined;
            resourceInputs["nodegroup"] = args ? args.nodegroup : undefined;
            resourceInputs["preemption"] = args ? args.preemption : undefined;
            resourceInputs["processlocal"] = args ? args.processlocal : undefined;
            resourceInputs["quorumtype"] = args ? args.quorumtype : undefined;
            resourceInputs["retainconnectionsoncluster"] = args ? args.retainconnectionsoncluster : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    backplanebasedview?: pulumi.Input<string>;
    bootstrapPollDelay?: pulumi.Input<string>;
    bootstrapPollInterval?: pulumi.Input<string>;
    bootstrapPollTimeout?: pulumi.Input<string>;
    bootstrapTotalTimeout?: pulumi.Input<string>;
    clid?: pulumi.Input<number>;
    clip?: pulumi.Input<string>;
    clipMigrationPollDelay?: pulumi.Input<string>;
    clipMigrationPollInterval?: pulumi.Input<string>;
    clipMigrationPollTimeout?: pulumi.Input<string>;
    clipMigrationTotalTimeout?: pulumi.Input<string>;
    clusternodegroups?: pulumi.Input<pulumi.Input<inputs.ClusterClusternodegroup>[]>;
    clusternodes?: pulumi.Input<pulumi.Input<inputs.ClusterClusternode>[]>;
    deadinterval?: pulumi.Input<number>;
    hellointerval?: pulumi.Input<number>;
    inc?: pulumi.Input<string>;
    nodeAddPollDelay?: pulumi.Input<string>;
    nodeAddPollInterval?: pulumi.Input<string>;
    nodeAddTotalTimeout?: pulumi.Input<string>;
    nodegroup?: pulumi.Input<string>;
    preemption?: pulumi.Input<string>;
    processlocal?: pulumi.Input<string>;
    quorumtype?: pulumi.Input<string>;
    retainconnectionsoncluster?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    backplanebasedview?: pulumi.Input<string>;
    bootstrapPollDelay?: pulumi.Input<string>;
    bootstrapPollInterval?: pulumi.Input<string>;
    bootstrapPollTimeout?: pulumi.Input<string>;
    bootstrapTotalTimeout?: pulumi.Input<string>;
    clid: pulumi.Input<number>;
    clip: pulumi.Input<string>;
    clipMigrationPollDelay?: pulumi.Input<string>;
    clipMigrationPollInterval?: pulumi.Input<string>;
    clipMigrationPollTimeout?: pulumi.Input<string>;
    clipMigrationTotalTimeout?: pulumi.Input<string>;
    clusternodegroups?: pulumi.Input<pulumi.Input<inputs.ClusterClusternodegroup>[]>;
    clusternodes: pulumi.Input<pulumi.Input<inputs.ClusterClusternode>[]>;
    deadinterval?: pulumi.Input<number>;
    hellointerval?: pulumi.Input<number>;
    inc?: pulumi.Input<string>;
    nodeAddPollDelay?: pulumi.Input<string>;
    nodeAddPollInterval?: pulumi.Input<string>;
    nodeAddTotalTimeout?: pulumi.Input<string>;
    nodegroup?: pulumi.Input<string>;
    preemption?: pulumi.Input<string>;
    processlocal?: pulumi.Input<string>;
    quorumtype?: pulumi.Input<string>;
    retainconnectionsoncluster?: pulumi.Input<string>;
}
