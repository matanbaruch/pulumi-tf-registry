// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sslcert extends pulumi.CustomResource {
    /**
     * Get an existing Sslcert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslcertState, opts?: pulumi.CustomResourceOptions): Sslcert {
        return new Sslcert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/sslcert:Sslcert';

    /**
     * Returns true if the given object is an instance of Sslcert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sslcert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sslcert.__pulumiType;
    }

    public readonly cacert!: pulumi.Output<string>;
    public readonly cacertform!: pulumi.Output<string>;
    public readonly cakey!: pulumi.Output<string>;
    public readonly cakeyform!: pulumi.Output<string>;
    public readonly caserial!: pulumi.Output<string>;
    public readonly certfile!: pulumi.Output<string>;
    public readonly certform!: pulumi.Output<string>;
    public readonly certtype!: pulumi.Output<string>;
    public readonly days!: pulumi.Output<number>;
    public readonly keyfile!: pulumi.Output<string>;
    public readonly keyform!: pulumi.Output<string>;
    public readonly pempassphrase!: pulumi.Output<string>;
    public readonly reqfile!: pulumi.Output<string>;
    public readonly subjectaltname!: pulumi.Output<string>;

    /**
     * Create a Sslcert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslcertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslcertArgs | SslcertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslcertState | undefined;
            resourceInputs["cacert"] = state ? state.cacert : undefined;
            resourceInputs["cacertform"] = state ? state.cacertform : undefined;
            resourceInputs["cakey"] = state ? state.cakey : undefined;
            resourceInputs["cakeyform"] = state ? state.cakeyform : undefined;
            resourceInputs["caserial"] = state ? state.caserial : undefined;
            resourceInputs["certfile"] = state ? state.certfile : undefined;
            resourceInputs["certform"] = state ? state.certform : undefined;
            resourceInputs["certtype"] = state ? state.certtype : undefined;
            resourceInputs["days"] = state ? state.days : undefined;
            resourceInputs["keyfile"] = state ? state.keyfile : undefined;
            resourceInputs["keyform"] = state ? state.keyform : undefined;
            resourceInputs["pempassphrase"] = state ? state.pempassphrase : undefined;
            resourceInputs["reqfile"] = state ? state.reqfile : undefined;
            resourceInputs["subjectaltname"] = state ? state.subjectaltname : undefined;
        } else {
            const args = argsOrState as SslcertArgs | undefined;
            if ((!args || args.certfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certfile'");
            }
            if ((!args || args.certtype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certtype'");
            }
            if ((!args || args.reqfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reqfile'");
            }
            resourceInputs["cacert"] = args ? args.cacert : undefined;
            resourceInputs["cacertform"] = args ? args.cacertform : undefined;
            resourceInputs["cakey"] = args ? args.cakey : undefined;
            resourceInputs["cakeyform"] = args ? args.cakeyform : undefined;
            resourceInputs["caserial"] = args ? args.caserial : undefined;
            resourceInputs["certfile"] = args ? args.certfile : undefined;
            resourceInputs["certform"] = args ? args.certform : undefined;
            resourceInputs["certtype"] = args ? args.certtype : undefined;
            resourceInputs["days"] = args ? args.days : undefined;
            resourceInputs["keyfile"] = args ? args.keyfile : undefined;
            resourceInputs["keyform"] = args ? args.keyform : undefined;
            resourceInputs["pempassphrase"] = args ? args.pempassphrase : undefined;
            resourceInputs["reqfile"] = args ? args.reqfile : undefined;
            resourceInputs["subjectaltname"] = args ? args.subjectaltname : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sslcert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sslcert resources.
 */
export interface SslcertState {
    cacert?: pulumi.Input<string>;
    cacertform?: pulumi.Input<string>;
    cakey?: pulumi.Input<string>;
    cakeyform?: pulumi.Input<string>;
    caserial?: pulumi.Input<string>;
    certfile?: pulumi.Input<string>;
    certform?: pulumi.Input<string>;
    certtype?: pulumi.Input<string>;
    days?: pulumi.Input<number>;
    keyfile?: pulumi.Input<string>;
    keyform?: pulumi.Input<string>;
    pempassphrase?: pulumi.Input<string>;
    reqfile?: pulumi.Input<string>;
    subjectaltname?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sslcert resource.
 */
export interface SslcertArgs {
    cacert?: pulumi.Input<string>;
    cacertform?: pulumi.Input<string>;
    cakey?: pulumi.Input<string>;
    cakeyform?: pulumi.Input<string>;
    caserial?: pulumi.Input<string>;
    certfile: pulumi.Input<string>;
    certform?: pulumi.Input<string>;
    certtype: pulumi.Input<string>;
    days?: pulumi.Input<number>;
    keyfile?: pulumi.Input<string>;
    keyform?: pulumi.Input<string>;
    pempassphrase?: pulumi.Input<string>;
    reqfile: pulumi.Input<string>;
    subjectaltname?: pulumi.Input<string>;
}
