// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nscapacity extends pulumi.CustomResource {
    /**
     * Get an existing Nscapacity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NscapacityState, opts?: pulumi.CustomResourceOptions): Nscapacity {
        return new Nscapacity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nscapacity:Nscapacity';

    /**
     * Returns true if the given object is an instance of Nscapacity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nscapacity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nscapacity.__pulumiType;
    }

    public readonly bandwidth!: pulumi.Output<number>;
    public readonly edition!: pulumi.Output<string>;
    public readonly nodeid!: pulumi.Output<number>;
    public readonly platform!: pulumi.Output<string>;
    public readonly unit!: pulumi.Output<string>;
    public readonly vcpu!: pulumi.Output<boolean>;

    /**
     * Create a Nscapacity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NscapacityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NscapacityArgs | NscapacityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NscapacityState | undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["nodeid"] = state ? state.nodeid : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["unit"] = state ? state.unit : undefined;
            resourceInputs["vcpu"] = state ? state.vcpu : undefined;
        } else {
            const args = argsOrState as NscapacityArgs | undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["nodeid"] = args ? args.nodeid : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["vcpu"] = args ? args.vcpu : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nscapacity.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nscapacity resources.
 */
export interface NscapacityState {
    bandwidth?: pulumi.Input<number>;
    edition?: pulumi.Input<string>;
    nodeid?: pulumi.Input<number>;
    platform?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    vcpu?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Nscapacity resource.
 */
export interface NscapacityArgs {
    bandwidth?: pulumi.Input<number>;
    edition?: pulumi.Input<string>;
    nodeid?: pulumi.Input<number>;
    platform?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    vcpu?: pulumi.Input<boolean>;
}
