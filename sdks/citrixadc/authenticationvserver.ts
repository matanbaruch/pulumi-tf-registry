// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Authenticationvserver extends pulumi.CustomResource {
    /**
     * Get an existing Authenticationvserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticationvserverState, opts?: pulumi.CustomResourceOptions): Authenticationvserver {
        return new Authenticationvserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/authenticationvserver:Authenticationvserver';

    /**
     * Returns true if the given object is an instance of Authenticationvserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Authenticationvserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authenticationvserver.__pulumiType;
    }

    public readonly appflowlog!: pulumi.Output<string>;
    public readonly authentication!: pulumi.Output<string>;
    public readonly authenticationdomain!: pulumi.Output<string>;
    public readonly certkeynames!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly failedlogintimeout!: pulumi.Output<number>;
    public readonly ipv46!: pulumi.Output<string>;
    public readonly maxloginattempts!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly newname!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly range!: pulumi.Output<number>;
    public readonly samesite!: pulumi.Output<string>;
    public readonly servicetype!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<number>;

    /**
     * Create a Authenticationvserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AuthenticationvserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticationvserverArgs | AuthenticationvserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticationvserverState | undefined;
            resourceInputs["appflowlog"] = state ? state.appflowlog : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["authenticationdomain"] = state ? state.authenticationdomain : undefined;
            resourceInputs["certkeynames"] = state ? state.certkeynames : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["failedlogintimeout"] = state ? state.failedlogintimeout : undefined;
            resourceInputs["ipv46"] = state ? state.ipv46 : undefined;
            resourceInputs["maxloginattempts"] = state ? state.maxloginattempts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newname"] = state ? state.newname : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["range"] = state ? state.range : undefined;
            resourceInputs["samesite"] = state ? state.samesite : undefined;
            resourceInputs["servicetype"] = state ? state.servicetype : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
        } else {
            const args = argsOrState as AuthenticationvserverArgs | undefined;
            resourceInputs["appflowlog"] = args ? args.appflowlog : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["authenticationdomain"] = args ? args.authenticationdomain : undefined;
            resourceInputs["certkeynames"] = args ? args.certkeynames : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["failedlogintimeout"] = args ? args.failedlogintimeout : undefined;
            resourceInputs["ipv46"] = args ? args.ipv46 : undefined;
            resourceInputs["maxloginattempts"] = args ? args.maxloginattempts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newname"] = args ? args.newname : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["range"] = args ? args.range : undefined;
            resourceInputs["samesite"] = args ? args.samesite : undefined;
            resourceInputs["servicetype"] = args ? args.servicetype : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Authenticationvserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Authenticationvserver resources.
 */
export interface AuthenticationvserverState {
    appflowlog?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    authenticationdomain?: pulumi.Input<string>;
    certkeynames?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    failedlogintimeout?: pulumi.Input<number>;
    ipv46?: pulumi.Input<string>;
    maxloginattempts?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    newname?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    range?: pulumi.Input<number>;
    samesite?: pulumi.Input<string>;
    servicetype?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Authenticationvserver resource.
 */
export interface AuthenticationvserverArgs {
    appflowlog?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    authenticationdomain?: pulumi.Input<string>;
    certkeynames?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    failedlogintimeout?: pulumi.Input<number>;
    ipv46?: pulumi.Input<string>;
    maxloginattempts?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    newname?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    range?: pulumi.Input<number>;
    samesite?: pulumi.Input<string>;
    servicetype?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
}
