// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nsmode extends pulumi.CustomResource {
    /**
     * Get an existing Nsmode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsmodeState, opts?: pulumi.CustomResourceOptions): Nsmode {
        return new Nsmode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nsmode:Nsmode';

    /**
     * Returns true if the given object is an instance of Nsmode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nsmode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nsmode.__pulumiType;
    }

    public readonly bridgebpdus!: pulumi.Output<boolean>;
    public readonly cka!: pulumi.Output<boolean>;
    public readonly dradv!: pulumi.Output<boolean>;
    public readonly dradv6!: pulumi.Output<boolean>;
    public readonly edge!: pulumi.Output<boolean>;
    public readonly fr!: pulumi.Output<boolean>;
    public readonly iradv!: pulumi.Output<boolean>;
    public readonly l2!: pulumi.Output<boolean>;
    public readonly l3!: pulumi.Output<boolean>;
    public readonly mbf!: pulumi.Output<boolean>;
    public readonly mediaclassification!: pulumi.Output<boolean>;
    public readonly pmtud!: pulumi.Output<boolean>;
    public readonly sradv!: pulumi.Output<boolean>;
    public readonly sradv6!: pulumi.Output<boolean>;
    public readonly tcpb!: pulumi.Output<boolean>;
    public readonly ulfd!: pulumi.Output<boolean>;
    public readonly usip!: pulumi.Output<boolean>;
    public readonly usnip!: pulumi.Output<boolean>;

    /**
     * Create a Nsmode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NsmodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsmodeArgs | NsmodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsmodeState | undefined;
            resourceInputs["bridgebpdus"] = state ? state.bridgebpdus : undefined;
            resourceInputs["cka"] = state ? state.cka : undefined;
            resourceInputs["dradv"] = state ? state.dradv : undefined;
            resourceInputs["dradv6"] = state ? state.dradv6 : undefined;
            resourceInputs["edge"] = state ? state.edge : undefined;
            resourceInputs["fr"] = state ? state.fr : undefined;
            resourceInputs["iradv"] = state ? state.iradv : undefined;
            resourceInputs["l2"] = state ? state.l2 : undefined;
            resourceInputs["l3"] = state ? state.l3 : undefined;
            resourceInputs["mbf"] = state ? state.mbf : undefined;
            resourceInputs["mediaclassification"] = state ? state.mediaclassification : undefined;
            resourceInputs["pmtud"] = state ? state.pmtud : undefined;
            resourceInputs["sradv"] = state ? state.sradv : undefined;
            resourceInputs["sradv6"] = state ? state.sradv6 : undefined;
            resourceInputs["tcpb"] = state ? state.tcpb : undefined;
            resourceInputs["ulfd"] = state ? state.ulfd : undefined;
            resourceInputs["usip"] = state ? state.usip : undefined;
            resourceInputs["usnip"] = state ? state.usnip : undefined;
        } else {
            const args = argsOrState as NsmodeArgs | undefined;
            resourceInputs["bridgebpdus"] = args ? args.bridgebpdus : undefined;
            resourceInputs["cka"] = args ? args.cka : undefined;
            resourceInputs["dradv"] = args ? args.dradv : undefined;
            resourceInputs["dradv6"] = args ? args.dradv6 : undefined;
            resourceInputs["edge"] = args ? args.edge : undefined;
            resourceInputs["fr"] = args ? args.fr : undefined;
            resourceInputs["iradv"] = args ? args.iradv : undefined;
            resourceInputs["l2"] = args ? args.l2 : undefined;
            resourceInputs["l3"] = args ? args.l3 : undefined;
            resourceInputs["mbf"] = args ? args.mbf : undefined;
            resourceInputs["mediaclassification"] = args ? args.mediaclassification : undefined;
            resourceInputs["pmtud"] = args ? args.pmtud : undefined;
            resourceInputs["sradv"] = args ? args.sradv : undefined;
            resourceInputs["sradv6"] = args ? args.sradv6 : undefined;
            resourceInputs["tcpb"] = args ? args.tcpb : undefined;
            resourceInputs["ulfd"] = args ? args.ulfd : undefined;
            resourceInputs["usip"] = args ? args.usip : undefined;
            resourceInputs["usnip"] = args ? args.usnip : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nsmode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nsmode resources.
 */
export interface NsmodeState {
    bridgebpdus?: pulumi.Input<boolean>;
    cka?: pulumi.Input<boolean>;
    dradv?: pulumi.Input<boolean>;
    dradv6?: pulumi.Input<boolean>;
    edge?: pulumi.Input<boolean>;
    fr?: pulumi.Input<boolean>;
    iradv?: pulumi.Input<boolean>;
    l2?: pulumi.Input<boolean>;
    l3?: pulumi.Input<boolean>;
    mbf?: pulumi.Input<boolean>;
    mediaclassification?: pulumi.Input<boolean>;
    pmtud?: pulumi.Input<boolean>;
    sradv?: pulumi.Input<boolean>;
    sradv6?: pulumi.Input<boolean>;
    tcpb?: pulumi.Input<boolean>;
    ulfd?: pulumi.Input<boolean>;
    usip?: pulumi.Input<boolean>;
    usnip?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Nsmode resource.
 */
export interface NsmodeArgs {
    bridgebpdus?: pulumi.Input<boolean>;
    cka?: pulumi.Input<boolean>;
    dradv?: pulumi.Input<boolean>;
    dradv6?: pulumi.Input<boolean>;
    edge?: pulumi.Input<boolean>;
    fr?: pulumi.Input<boolean>;
    iradv?: pulumi.Input<boolean>;
    l2?: pulumi.Input<boolean>;
    l3?: pulumi.Input<boolean>;
    mbf?: pulumi.Input<boolean>;
    mediaclassification?: pulumi.Input<boolean>;
    pmtud?: pulumi.Input<boolean>;
    sradv?: pulumi.Input<boolean>;
    sradv6?: pulumi.Input<boolean>;
    tcpb?: pulumi.Input<boolean>;
    ulfd?: pulumi.Input<boolean>;
    usip?: pulumi.Input<boolean>;
    usnip?: pulumi.Input<boolean>;
}
