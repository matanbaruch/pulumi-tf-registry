// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sslcrl extends pulumi.CustomResource {
    /**
     * Get an existing Sslcrl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslcrlState, opts?: pulumi.CustomResourceOptions): Sslcrl {
        return new Sslcrl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/sslcrl:Sslcrl';

    /**
     * Returns true if the given object is an instance of Sslcrl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sslcrl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sslcrl.__pulumiType;
    }

    public readonly basedn!: pulumi.Output<string>;
    public readonly binary!: pulumi.Output<string>;
    public readonly binddn!: pulumi.Output<string>;
    public readonly cacert!: pulumi.Output<string>;
    public readonly cacertfile!: pulumi.Output<string>;
    public readonly cakeyfile!: pulumi.Output<string>;
    public readonly crlname!: pulumi.Output<string>;
    public readonly crlpath!: pulumi.Output<string>;
    public readonly day!: pulumi.Output<number>;
    public readonly gencrl!: pulumi.Output<string>;
    public readonly indexfile!: pulumi.Output<string>;
    public readonly inform!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<string>;
    public readonly method!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly refresh!: pulumi.Output<string>;
    public readonly revoke!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<string>;
    public readonly server!: pulumi.Output<string>;
    public readonly time!: pulumi.Output<string>;
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a Sslcrl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslcrlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslcrlArgs | SslcrlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslcrlState | undefined;
            resourceInputs["basedn"] = state ? state.basedn : undefined;
            resourceInputs["binary"] = state ? state.binary : undefined;
            resourceInputs["binddn"] = state ? state.binddn : undefined;
            resourceInputs["cacert"] = state ? state.cacert : undefined;
            resourceInputs["cacertfile"] = state ? state.cacertfile : undefined;
            resourceInputs["cakeyfile"] = state ? state.cakeyfile : undefined;
            resourceInputs["crlname"] = state ? state.crlname : undefined;
            resourceInputs["crlpath"] = state ? state.crlpath : undefined;
            resourceInputs["day"] = state ? state.day : undefined;
            resourceInputs["gencrl"] = state ? state.gencrl : undefined;
            resourceInputs["indexfile"] = state ? state.indexfile : undefined;
            resourceInputs["inform"] = state ? state.inform : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["refresh"] = state ? state.refresh : undefined;
            resourceInputs["revoke"] = state ? state.revoke : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["time"] = state ? state.time : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as SslcrlArgs | undefined;
            if ((!args || args.crlname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'crlname'");
            }
            if ((!args || args.crlpath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'crlpath'");
            }
            resourceInputs["basedn"] = args ? args.basedn : undefined;
            resourceInputs["binary"] = args ? args.binary : undefined;
            resourceInputs["binddn"] = args ? args.binddn : undefined;
            resourceInputs["cacert"] = args ? args.cacert : undefined;
            resourceInputs["cacertfile"] = args ? args.cacertfile : undefined;
            resourceInputs["cakeyfile"] = args ? args.cakeyfile : undefined;
            resourceInputs["crlname"] = args ? args.crlname : undefined;
            resourceInputs["crlpath"] = args ? args.crlpath : undefined;
            resourceInputs["day"] = args ? args.day : undefined;
            resourceInputs["gencrl"] = args ? args.gencrl : undefined;
            resourceInputs["indexfile"] = args ? args.indexfile : undefined;
            resourceInputs["inform"] = args ? args.inform : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["refresh"] = args ? args.refresh : undefined;
            resourceInputs["revoke"] = args ? args.revoke : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["time"] = args ? args.time : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sslcrl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sslcrl resources.
 */
export interface SslcrlState {
    basedn?: pulumi.Input<string>;
    binary?: pulumi.Input<string>;
    binddn?: pulumi.Input<string>;
    cacert?: pulumi.Input<string>;
    cacertfile?: pulumi.Input<string>;
    cakeyfile?: pulumi.Input<string>;
    crlname?: pulumi.Input<string>;
    crlpath?: pulumi.Input<string>;
    day?: pulumi.Input<number>;
    gencrl?: pulumi.Input<string>;
    indexfile?: pulumi.Input<string>;
    inform?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    refresh?: pulumi.Input<string>;
    revoke?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sslcrl resource.
 */
export interface SslcrlArgs {
    basedn?: pulumi.Input<string>;
    binary?: pulumi.Input<string>;
    binddn?: pulumi.Input<string>;
    cacert?: pulumi.Input<string>;
    cacertfile?: pulumi.Input<string>;
    cakeyfile?: pulumi.Input<string>;
    crlname: pulumi.Input<string>;
    crlpath: pulumi.Input<string>;
    day?: pulumi.Input<number>;
    gencrl?: pulumi.Input<string>;
    indexfile?: pulumi.Input<string>;
    inform?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    refresh?: pulumi.Input<string>;
    revoke?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}
