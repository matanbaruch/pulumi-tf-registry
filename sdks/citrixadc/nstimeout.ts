// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nstimeout extends pulumi.CustomResource {
    /**
     * Get an existing Nstimeout resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NstimeoutState, opts?: pulumi.CustomResourceOptions): Nstimeout {
        return new Nstimeout(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nstimeout:Nstimeout';

    /**
     * Returns true if the given object is an instance of Nstimeout.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nstimeout {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nstimeout.__pulumiType;
    }

    public readonly anyclient!: pulumi.Output<number>;
    public readonly anyserver!: pulumi.Output<number>;
    public readonly anytcpclient!: pulumi.Output<number>;
    public readonly anytcpserver!: pulumi.Output<number>;
    public readonly client!: pulumi.Output<number>;
    public readonly halfclose!: pulumi.Output<number>;
    public readonly httpclient!: pulumi.Output<number>;
    public readonly httpserver!: pulumi.Output<number>;
    public readonly newconnidletimeout!: pulumi.Output<number>;
    public readonly nontcpzombie!: pulumi.Output<number>;
    public readonly reducedfintimeout!: pulumi.Output<number>;
    public readonly reducedrsttimeout!: pulumi.Output<number>;
    public readonly server!: pulumi.Output<number>;
    public readonly tcpclient!: pulumi.Output<number>;
    public readonly tcpserver!: pulumi.Output<number>;
    public readonly zombie!: pulumi.Output<number>;

    /**
     * Create a Nstimeout resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NstimeoutArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NstimeoutArgs | NstimeoutState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NstimeoutState | undefined;
            resourceInputs["anyclient"] = state ? state.anyclient : undefined;
            resourceInputs["anyserver"] = state ? state.anyserver : undefined;
            resourceInputs["anytcpclient"] = state ? state.anytcpclient : undefined;
            resourceInputs["anytcpserver"] = state ? state.anytcpserver : undefined;
            resourceInputs["client"] = state ? state.client : undefined;
            resourceInputs["halfclose"] = state ? state.halfclose : undefined;
            resourceInputs["httpclient"] = state ? state.httpclient : undefined;
            resourceInputs["httpserver"] = state ? state.httpserver : undefined;
            resourceInputs["newconnidletimeout"] = state ? state.newconnidletimeout : undefined;
            resourceInputs["nontcpzombie"] = state ? state.nontcpzombie : undefined;
            resourceInputs["reducedfintimeout"] = state ? state.reducedfintimeout : undefined;
            resourceInputs["reducedrsttimeout"] = state ? state.reducedrsttimeout : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["tcpclient"] = state ? state.tcpclient : undefined;
            resourceInputs["tcpserver"] = state ? state.tcpserver : undefined;
            resourceInputs["zombie"] = state ? state.zombie : undefined;
        } else {
            const args = argsOrState as NstimeoutArgs | undefined;
            resourceInputs["anyclient"] = args ? args.anyclient : undefined;
            resourceInputs["anyserver"] = args ? args.anyserver : undefined;
            resourceInputs["anytcpclient"] = args ? args.anytcpclient : undefined;
            resourceInputs["anytcpserver"] = args ? args.anytcpserver : undefined;
            resourceInputs["client"] = args ? args.client : undefined;
            resourceInputs["halfclose"] = args ? args.halfclose : undefined;
            resourceInputs["httpclient"] = args ? args.httpclient : undefined;
            resourceInputs["httpserver"] = args ? args.httpserver : undefined;
            resourceInputs["newconnidletimeout"] = args ? args.newconnidletimeout : undefined;
            resourceInputs["nontcpzombie"] = args ? args.nontcpzombie : undefined;
            resourceInputs["reducedfintimeout"] = args ? args.reducedfintimeout : undefined;
            resourceInputs["reducedrsttimeout"] = args ? args.reducedrsttimeout : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["tcpclient"] = args ? args.tcpclient : undefined;
            resourceInputs["tcpserver"] = args ? args.tcpserver : undefined;
            resourceInputs["zombie"] = args ? args.zombie : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nstimeout.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nstimeout resources.
 */
export interface NstimeoutState {
    anyclient?: pulumi.Input<number>;
    anyserver?: pulumi.Input<number>;
    anytcpclient?: pulumi.Input<number>;
    anytcpserver?: pulumi.Input<number>;
    client?: pulumi.Input<number>;
    halfclose?: pulumi.Input<number>;
    httpclient?: pulumi.Input<number>;
    httpserver?: pulumi.Input<number>;
    newconnidletimeout?: pulumi.Input<number>;
    nontcpzombie?: pulumi.Input<number>;
    reducedfintimeout?: pulumi.Input<number>;
    reducedrsttimeout?: pulumi.Input<number>;
    server?: pulumi.Input<number>;
    tcpclient?: pulumi.Input<number>;
    tcpserver?: pulumi.Input<number>;
    zombie?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Nstimeout resource.
 */
export interface NstimeoutArgs {
    anyclient?: pulumi.Input<number>;
    anyserver?: pulumi.Input<number>;
    anytcpclient?: pulumi.Input<number>;
    anytcpserver?: pulumi.Input<number>;
    client?: pulumi.Input<number>;
    halfclose?: pulumi.Input<number>;
    httpclient?: pulumi.Input<number>;
    httpserver?: pulumi.Input<number>;
    newconnidletimeout?: pulumi.Input<number>;
    nontcpzombie?: pulumi.Input<number>;
    reducedfintimeout?: pulumi.Input<number>;
    reducedrsttimeout?: pulumi.Input<number>;
    server?: pulumi.Input<number>;
    tcpclient?: pulumi.Input<number>;
    tcpserver?: pulumi.Input<number>;
    zombie?: pulumi.Input<number>;
}
