// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Interface extends pulumi.CustomResource {
    /**
     * Get an existing Interface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceState, opts?: pulumi.CustomResourceOptions): Interface {
        return new Interface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/interface:Interface';

    /**
     * Returns true if the given object is an instance of Interface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Interface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Interface.__pulumiType;
    }

    public readonly autoneg!: pulumi.Output<string>;
    public readonly bandwidthhigh!: pulumi.Output<number>;
    public readonly bandwidthnormal!: pulumi.Output<number>;
    public readonly duplex!: pulumi.Output<string>;
    public readonly flowctl!: pulumi.Output<string>;
    public readonly haheartbeat!: pulumi.Output<string>;
    public readonly hamonitor!: pulumi.Output<string>;
    public readonly ifalias!: pulumi.Output<string>;
    public readonly interfaceId!: pulumi.Output<string>;
    public readonly lacpkey!: pulumi.Output<number>;
    public readonly lacpmode!: pulumi.Output<string>;
    public readonly lacppriority!: pulumi.Output<number>;
    public readonly lacptimeout!: pulumi.Output<string>;
    public readonly lagtype!: pulumi.Output<string>;
    public readonly linkredundancy!: pulumi.Output<string>;
    public readonly lldpmode!: pulumi.Output<string>;
    public readonly lrsetpriority!: pulumi.Output<number>;
    public readonly mtu!: pulumi.Output<number>;
    public readonly ringsize!: pulumi.Output<number>;
    public readonly ringtype!: pulumi.Output<string>;
    public readonly speed!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly tagall!: pulumi.Output<string>;
    public readonly throughput!: pulumi.Output<number>;
    public readonly trunk!: pulumi.Output<string>;
    public readonly trunkmode!: pulumi.Output<string>;

    /**
     * Create a Interface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceArgs | InterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceState | undefined;
            resourceInputs["autoneg"] = state ? state.autoneg : undefined;
            resourceInputs["bandwidthhigh"] = state ? state.bandwidthhigh : undefined;
            resourceInputs["bandwidthnormal"] = state ? state.bandwidthnormal : undefined;
            resourceInputs["duplex"] = state ? state.duplex : undefined;
            resourceInputs["flowctl"] = state ? state.flowctl : undefined;
            resourceInputs["haheartbeat"] = state ? state.haheartbeat : undefined;
            resourceInputs["hamonitor"] = state ? state.hamonitor : undefined;
            resourceInputs["ifalias"] = state ? state.ifalias : undefined;
            resourceInputs["interfaceId"] = state ? state.interfaceId : undefined;
            resourceInputs["lacpkey"] = state ? state.lacpkey : undefined;
            resourceInputs["lacpmode"] = state ? state.lacpmode : undefined;
            resourceInputs["lacppriority"] = state ? state.lacppriority : undefined;
            resourceInputs["lacptimeout"] = state ? state.lacptimeout : undefined;
            resourceInputs["lagtype"] = state ? state.lagtype : undefined;
            resourceInputs["linkredundancy"] = state ? state.linkredundancy : undefined;
            resourceInputs["lldpmode"] = state ? state.lldpmode : undefined;
            resourceInputs["lrsetpriority"] = state ? state.lrsetpriority : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["ringsize"] = state ? state.ringsize : undefined;
            resourceInputs["ringtype"] = state ? state.ringtype : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tagall"] = state ? state.tagall : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["trunk"] = state ? state.trunk : undefined;
            resourceInputs["trunkmode"] = state ? state.trunkmode : undefined;
        } else {
            const args = argsOrState as InterfaceArgs | undefined;
            if ((!args || args.interfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaceId'");
            }
            resourceInputs["autoneg"] = args ? args.autoneg : undefined;
            resourceInputs["bandwidthhigh"] = args ? args.bandwidthhigh : undefined;
            resourceInputs["bandwidthnormal"] = args ? args.bandwidthnormal : undefined;
            resourceInputs["duplex"] = args ? args.duplex : undefined;
            resourceInputs["flowctl"] = args ? args.flowctl : undefined;
            resourceInputs["haheartbeat"] = args ? args.haheartbeat : undefined;
            resourceInputs["hamonitor"] = args ? args.hamonitor : undefined;
            resourceInputs["ifalias"] = args ? args.ifalias : undefined;
            resourceInputs["interfaceId"] = args ? args.interfaceId : undefined;
            resourceInputs["lacpkey"] = args ? args.lacpkey : undefined;
            resourceInputs["lacpmode"] = args ? args.lacpmode : undefined;
            resourceInputs["lacppriority"] = args ? args.lacppriority : undefined;
            resourceInputs["lacptimeout"] = args ? args.lacptimeout : undefined;
            resourceInputs["lagtype"] = args ? args.lagtype : undefined;
            resourceInputs["linkredundancy"] = args ? args.linkredundancy : undefined;
            resourceInputs["lldpmode"] = args ? args.lldpmode : undefined;
            resourceInputs["lrsetpriority"] = args ? args.lrsetpriority : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["ringsize"] = args ? args.ringsize : undefined;
            resourceInputs["ringtype"] = args ? args.ringtype : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tagall"] = args ? args.tagall : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["trunk"] = args ? args.trunk : undefined;
            resourceInputs["trunkmode"] = args ? args.trunkmode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Interface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Interface resources.
 */
export interface InterfaceState {
    autoneg?: pulumi.Input<string>;
    bandwidthhigh?: pulumi.Input<number>;
    bandwidthnormal?: pulumi.Input<number>;
    duplex?: pulumi.Input<string>;
    flowctl?: pulumi.Input<string>;
    haheartbeat?: pulumi.Input<string>;
    hamonitor?: pulumi.Input<string>;
    ifalias?: pulumi.Input<string>;
    interfaceId?: pulumi.Input<string>;
    lacpkey?: pulumi.Input<number>;
    lacpmode?: pulumi.Input<string>;
    lacppriority?: pulumi.Input<number>;
    lacptimeout?: pulumi.Input<string>;
    lagtype?: pulumi.Input<string>;
    linkredundancy?: pulumi.Input<string>;
    lldpmode?: pulumi.Input<string>;
    lrsetpriority?: pulumi.Input<number>;
    mtu?: pulumi.Input<number>;
    ringsize?: pulumi.Input<number>;
    ringtype?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tagall?: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
    trunk?: pulumi.Input<string>;
    trunkmode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Interface resource.
 */
export interface InterfaceArgs {
    autoneg?: pulumi.Input<string>;
    bandwidthhigh?: pulumi.Input<number>;
    bandwidthnormal?: pulumi.Input<number>;
    duplex?: pulumi.Input<string>;
    flowctl?: pulumi.Input<string>;
    haheartbeat?: pulumi.Input<string>;
    hamonitor?: pulumi.Input<string>;
    ifalias?: pulumi.Input<string>;
    interfaceId: pulumi.Input<string>;
    lacpkey?: pulumi.Input<number>;
    lacpmode?: pulumi.Input<string>;
    lacppriority?: pulumi.Input<number>;
    lacptimeout?: pulumi.Input<string>;
    lagtype?: pulumi.Input<string>;
    linkredundancy?: pulumi.Input<string>;
    lldpmode?: pulumi.Input<string>;
    lrsetpriority?: pulumi.Input<number>;
    mtu?: pulumi.Input<number>;
    ringsize?: pulumi.Input<number>;
    ringtype?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tagall?: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
    trunk?: pulumi.Input<string>;
    trunkmode?: pulumi.Input<string>;
}
