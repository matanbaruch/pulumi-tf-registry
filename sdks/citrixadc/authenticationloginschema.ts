// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Authenticationloginschema extends pulumi.CustomResource {
    /**
     * Get an existing Authenticationloginschema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticationloginschemaState, opts?: pulumi.CustomResourceOptions): Authenticationloginschema {
        return new Authenticationloginschema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/authenticationloginschema:Authenticationloginschema';

    /**
     * Returns true if the given object is an instance of Authenticationloginschema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Authenticationloginschema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authenticationloginschema.__pulumiType;
    }

    public readonly authenticationschema!: pulumi.Output<string>;
    public readonly authenticationstrength!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly passwdexpression!: pulumi.Output<string>;
    public readonly passwordcredentialindex!: pulumi.Output<number>;
    public readonly ssocredentials!: pulumi.Output<string>;
    public readonly usercredentialindex!: pulumi.Output<number>;
    public readonly userexpression!: pulumi.Output<string>;

    /**
     * Create a Authenticationloginschema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthenticationloginschemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticationloginschemaArgs | AuthenticationloginschemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticationloginschemaState | undefined;
            resourceInputs["authenticationschema"] = state ? state.authenticationschema : undefined;
            resourceInputs["authenticationstrength"] = state ? state.authenticationstrength : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwdexpression"] = state ? state.passwdexpression : undefined;
            resourceInputs["passwordcredentialindex"] = state ? state.passwordcredentialindex : undefined;
            resourceInputs["ssocredentials"] = state ? state.ssocredentials : undefined;
            resourceInputs["usercredentialindex"] = state ? state.usercredentialindex : undefined;
            resourceInputs["userexpression"] = state ? state.userexpression : undefined;
        } else {
            const args = argsOrState as AuthenticationloginschemaArgs | undefined;
            if ((!args || args.authenticationschema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationschema'");
            }
            resourceInputs["authenticationschema"] = args ? args.authenticationschema : undefined;
            resourceInputs["authenticationstrength"] = args ? args.authenticationstrength : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwdexpression"] = args ? args.passwdexpression : undefined;
            resourceInputs["passwordcredentialindex"] = args ? args.passwordcredentialindex : undefined;
            resourceInputs["ssocredentials"] = args ? args.ssocredentials : undefined;
            resourceInputs["usercredentialindex"] = args ? args.usercredentialindex : undefined;
            resourceInputs["userexpression"] = args ? args.userexpression : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Authenticationloginschema.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Authenticationloginschema resources.
 */
export interface AuthenticationloginschemaState {
    authenticationschema?: pulumi.Input<string>;
    authenticationstrength?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passwdexpression?: pulumi.Input<string>;
    passwordcredentialindex?: pulumi.Input<number>;
    ssocredentials?: pulumi.Input<string>;
    usercredentialindex?: pulumi.Input<number>;
    userexpression?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Authenticationloginschema resource.
 */
export interface AuthenticationloginschemaArgs {
    authenticationschema: pulumi.Input<string>;
    authenticationstrength?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passwdexpression?: pulumi.Input<string>;
    passwordcredentialindex?: pulumi.Input<number>;
    ssocredentials?: pulumi.Input<string>;
    usercredentialindex?: pulumi.Input<number>;
    userexpression?: pulumi.Input<string>;
}
