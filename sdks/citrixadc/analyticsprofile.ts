// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Analyticsprofile extends pulumi.CustomResource {
    /**
     * Get an existing Analyticsprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AnalyticsprofileState, opts?: pulumi.CustomResourceOptions): Analyticsprofile {
        return new Analyticsprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/analyticsprofile:Analyticsprofile';

    /**
     * Returns true if the given object is an instance of Analyticsprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Analyticsprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Analyticsprofile.__pulumiType;
    }

    public readonly allhttpheaders!: pulumi.Output<string>;
    public readonly auditlogs!: pulumi.Output<string>;
    public readonly collectors!: pulumi.Output<string>;
    public readonly cqareporting!: pulumi.Output<string>;
    public readonly events!: pulumi.Output<string>;
    public readonly grpcstatus!: pulumi.Output<string>;
    public readonly httpauthentication!: pulumi.Output<string>;
    public readonly httpclientsidemeasurements!: pulumi.Output<string>;
    public readonly httpcontenttype!: pulumi.Output<string>;
    public readonly httpcookie!: pulumi.Output<string>;
    public readonly httpdomainname!: pulumi.Output<string>;
    public readonly httphost!: pulumi.Output<string>;
    public readonly httplocation!: pulumi.Output<string>;
    public readonly httpmethod!: pulumi.Output<string>;
    public readonly httppagetracking!: pulumi.Output<string>;
    public readonly httpreferer!: pulumi.Output<string>;
    public readonly httpsetcookie!: pulumi.Output<string>;
    public readonly httpsetcookie2!: pulumi.Output<string>;
    public readonly httpurl!: pulumi.Output<string>;
    public readonly httpurlquery!: pulumi.Output<string>;
    public readonly httpuseragent!: pulumi.Output<string>;
    public readonly httpvia!: pulumi.Output<string>;
    public readonly httpxforwardedforheader!: pulumi.Output<string>;
    public readonly integratedcache!: pulumi.Output<string>;
    public readonly metrics!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly outputmode!: pulumi.Output<string>;
    public readonly schemafile!: pulumi.Output<string>;
    public readonly servemode!: pulumi.Output<string>;
    public readonly tcpburstreporting!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly urlcategory!: pulumi.Output<string>;

    /**
     * Create a Analyticsprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AnalyticsprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AnalyticsprofileArgs | AnalyticsprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AnalyticsprofileState | undefined;
            resourceInputs["allhttpheaders"] = state ? state.allhttpheaders : undefined;
            resourceInputs["auditlogs"] = state ? state.auditlogs : undefined;
            resourceInputs["collectors"] = state ? state.collectors : undefined;
            resourceInputs["cqareporting"] = state ? state.cqareporting : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["grpcstatus"] = state ? state.grpcstatus : undefined;
            resourceInputs["httpauthentication"] = state ? state.httpauthentication : undefined;
            resourceInputs["httpclientsidemeasurements"] = state ? state.httpclientsidemeasurements : undefined;
            resourceInputs["httpcontenttype"] = state ? state.httpcontenttype : undefined;
            resourceInputs["httpcookie"] = state ? state.httpcookie : undefined;
            resourceInputs["httpdomainname"] = state ? state.httpdomainname : undefined;
            resourceInputs["httphost"] = state ? state.httphost : undefined;
            resourceInputs["httplocation"] = state ? state.httplocation : undefined;
            resourceInputs["httpmethod"] = state ? state.httpmethod : undefined;
            resourceInputs["httppagetracking"] = state ? state.httppagetracking : undefined;
            resourceInputs["httpreferer"] = state ? state.httpreferer : undefined;
            resourceInputs["httpsetcookie"] = state ? state.httpsetcookie : undefined;
            resourceInputs["httpsetcookie2"] = state ? state.httpsetcookie2 : undefined;
            resourceInputs["httpurl"] = state ? state.httpurl : undefined;
            resourceInputs["httpurlquery"] = state ? state.httpurlquery : undefined;
            resourceInputs["httpuseragent"] = state ? state.httpuseragent : undefined;
            resourceInputs["httpvia"] = state ? state.httpvia : undefined;
            resourceInputs["httpxforwardedforheader"] = state ? state.httpxforwardedforheader : undefined;
            resourceInputs["integratedcache"] = state ? state.integratedcache : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputmode"] = state ? state.outputmode : undefined;
            resourceInputs["schemafile"] = state ? state.schemafile : undefined;
            resourceInputs["servemode"] = state ? state.servemode : undefined;
            resourceInputs["tcpburstreporting"] = state ? state.tcpburstreporting : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["urlcategory"] = state ? state.urlcategory : undefined;
        } else {
            const args = argsOrState as AnalyticsprofileArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allhttpheaders"] = args ? args.allhttpheaders : undefined;
            resourceInputs["auditlogs"] = args ? args.auditlogs : undefined;
            resourceInputs["collectors"] = args ? args.collectors : undefined;
            resourceInputs["cqareporting"] = args ? args.cqareporting : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["grpcstatus"] = args ? args.grpcstatus : undefined;
            resourceInputs["httpauthentication"] = args ? args.httpauthentication : undefined;
            resourceInputs["httpclientsidemeasurements"] = args ? args.httpclientsidemeasurements : undefined;
            resourceInputs["httpcontenttype"] = args ? args.httpcontenttype : undefined;
            resourceInputs["httpcookie"] = args ? args.httpcookie : undefined;
            resourceInputs["httpdomainname"] = args ? args.httpdomainname : undefined;
            resourceInputs["httphost"] = args ? args.httphost : undefined;
            resourceInputs["httplocation"] = args ? args.httplocation : undefined;
            resourceInputs["httpmethod"] = args ? args.httpmethod : undefined;
            resourceInputs["httppagetracking"] = args ? args.httppagetracking : undefined;
            resourceInputs["httpreferer"] = args ? args.httpreferer : undefined;
            resourceInputs["httpsetcookie"] = args ? args.httpsetcookie : undefined;
            resourceInputs["httpsetcookie2"] = args ? args.httpsetcookie2 : undefined;
            resourceInputs["httpurl"] = args ? args.httpurl : undefined;
            resourceInputs["httpurlquery"] = args ? args.httpurlquery : undefined;
            resourceInputs["httpuseragent"] = args ? args.httpuseragent : undefined;
            resourceInputs["httpvia"] = args ? args.httpvia : undefined;
            resourceInputs["httpxforwardedforheader"] = args ? args.httpxforwardedforheader : undefined;
            resourceInputs["integratedcache"] = args ? args.integratedcache : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputmode"] = args ? args.outputmode : undefined;
            resourceInputs["schemafile"] = args ? args.schemafile : undefined;
            resourceInputs["servemode"] = args ? args.servemode : undefined;
            resourceInputs["tcpburstreporting"] = args ? args.tcpburstreporting : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["urlcategory"] = args ? args.urlcategory : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Analyticsprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Analyticsprofile resources.
 */
export interface AnalyticsprofileState {
    allhttpheaders?: pulumi.Input<string>;
    auditlogs?: pulumi.Input<string>;
    collectors?: pulumi.Input<string>;
    cqareporting?: pulumi.Input<string>;
    events?: pulumi.Input<string>;
    grpcstatus?: pulumi.Input<string>;
    httpauthentication?: pulumi.Input<string>;
    httpclientsidemeasurements?: pulumi.Input<string>;
    httpcontenttype?: pulumi.Input<string>;
    httpcookie?: pulumi.Input<string>;
    httpdomainname?: pulumi.Input<string>;
    httphost?: pulumi.Input<string>;
    httplocation?: pulumi.Input<string>;
    httpmethod?: pulumi.Input<string>;
    httppagetracking?: pulumi.Input<string>;
    httpreferer?: pulumi.Input<string>;
    httpsetcookie?: pulumi.Input<string>;
    httpsetcookie2?: pulumi.Input<string>;
    httpurl?: pulumi.Input<string>;
    httpurlquery?: pulumi.Input<string>;
    httpuseragent?: pulumi.Input<string>;
    httpvia?: pulumi.Input<string>;
    httpxforwardedforheader?: pulumi.Input<string>;
    integratedcache?: pulumi.Input<string>;
    metrics?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    outputmode?: pulumi.Input<string>;
    schemafile?: pulumi.Input<string>;
    servemode?: pulumi.Input<string>;
    tcpburstreporting?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    urlcategory?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Analyticsprofile resource.
 */
export interface AnalyticsprofileArgs {
    allhttpheaders?: pulumi.Input<string>;
    auditlogs?: pulumi.Input<string>;
    collectors?: pulumi.Input<string>;
    cqareporting?: pulumi.Input<string>;
    events?: pulumi.Input<string>;
    grpcstatus?: pulumi.Input<string>;
    httpauthentication?: pulumi.Input<string>;
    httpclientsidemeasurements?: pulumi.Input<string>;
    httpcontenttype?: pulumi.Input<string>;
    httpcookie?: pulumi.Input<string>;
    httpdomainname?: pulumi.Input<string>;
    httphost?: pulumi.Input<string>;
    httplocation?: pulumi.Input<string>;
    httpmethod?: pulumi.Input<string>;
    httppagetracking?: pulumi.Input<string>;
    httpreferer?: pulumi.Input<string>;
    httpsetcookie?: pulumi.Input<string>;
    httpsetcookie2?: pulumi.Input<string>;
    httpurl?: pulumi.Input<string>;
    httpurlquery?: pulumi.Input<string>;
    httpuseragent?: pulumi.Input<string>;
    httpvia?: pulumi.Input<string>;
    httpxforwardedforheader?: pulumi.Input<string>;
    integratedcache?: pulumi.Input<string>;
    metrics?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    outputmode?: pulumi.Input<string>;
    schemafile?: pulumi.Input<string>;
    servemode?: pulumi.Input<string>;
    tcpburstreporting?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    urlcategory?: pulumi.Input<string>;
}
