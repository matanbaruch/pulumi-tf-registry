// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Channel extends pulumi.CustomResource {
    /**
     * Get an existing Channel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChannelState, opts?: pulumi.CustomResourceOptions): Channel {
        return new Channel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/channel:Channel';

    /**
     * Returns true if the given object is an instance of Channel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Channel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Channel.__pulumiType;
    }

    public readonly bandwidthhigh!: pulumi.Output<number>;
    public readonly bandwidthnormal!: pulumi.Output<number>;
    public readonly channelId!: pulumi.Output<string>;
    public readonly conndistr!: pulumi.Output<string>;
    public readonly flowctl!: pulumi.Output<string>;
    public readonly haheartbeat!: pulumi.Output<string>;
    public readonly hamonitor!: pulumi.Output<string>;
    public readonly ifalias!: pulumi.Output<string>;
    public readonly ifnums!: pulumi.Output<string[]>;
    public readonly lamac!: pulumi.Output<string>;
    public readonly linkredundancy!: pulumi.Output<string>;
    public readonly lrminthroughput!: pulumi.Output<number>;
    public readonly macdistr!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly mtu!: pulumi.Output<number>;
    public readonly speed!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly tagall!: pulumi.Output<string>;
    public readonly throughput!: pulumi.Output<number>;
    public readonly trunk!: pulumi.Output<string>;

    /**
     * Create a Channel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChannelArgs | ChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChannelState | undefined;
            resourceInputs["bandwidthhigh"] = state ? state.bandwidthhigh : undefined;
            resourceInputs["bandwidthnormal"] = state ? state.bandwidthnormal : undefined;
            resourceInputs["channelId"] = state ? state.channelId : undefined;
            resourceInputs["conndistr"] = state ? state.conndistr : undefined;
            resourceInputs["flowctl"] = state ? state.flowctl : undefined;
            resourceInputs["haheartbeat"] = state ? state.haheartbeat : undefined;
            resourceInputs["hamonitor"] = state ? state.hamonitor : undefined;
            resourceInputs["ifalias"] = state ? state.ifalias : undefined;
            resourceInputs["ifnums"] = state ? state.ifnums : undefined;
            resourceInputs["lamac"] = state ? state.lamac : undefined;
            resourceInputs["linkredundancy"] = state ? state.linkredundancy : undefined;
            resourceInputs["lrminthroughput"] = state ? state.lrminthroughput : undefined;
            resourceInputs["macdistr"] = state ? state.macdistr : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tagall"] = state ? state.tagall : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["trunk"] = state ? state.trunk : undefined;
        } else {
            const args = argsOrState as ChannelArgs | undefined;
            if ((!args || args.channelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelId'");
            }
            resourceInputs["bandwidthhigh"] = args ? args.bandwidthhigh : undefined;
            resourceInputs["bandwidthnormal"] = args ? args.bandwidthnormal : undefined;
            resourceInputs["channelId"] = args ? args.channelId : undefined;
            resourceInputs["conndistr"] = args ? args.conndistr : undefined;
            resourceInputs["flowctl"] = args ? args.flowctl : undefined;
            resourceInputs["haheartbeat"] = args ? args.haheartbeat : undefined;
            resourceInputs["hamonitor"] = args ? args.hamonitor : undefined;
            resourceInputs["ifalias"] = args ? args.ifalias : undefined;
            resourceInputs["ifnums"] = args ? args.ifnums : undefined;
            resourceInputs["lamac"] = args ? args.lamac : undefined;
            resourceInputs["linkredundancy"] = args ? args.linkredundancy : undefined;
            resourceInputs["lrminthroughput"] = args ? args.lrminthroughput : undefined;
            resourceInputs["macdistr"] = args ? args.macdistr : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tagall"] = args ? args.tagall : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["trunk"] = args ? args.trunk : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Channel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Channel resources.
 */
export interface ChannelState {
    bandwidthhigh?: pulumi.Input<number>;
    bandwidthnormal?: pulumi.Input<number>;
    channelId?: pulumi.Input<string>;
    conndistr?: pulumi.Input<string>;
    flowctl?: pulumi.Input<string>;
    haheartbeat?: pulumi.Input<string>;
    hamonitor?: pulumi.Input<string>;
    ifalias?: pulumi.Input<string>;
    ifnums?: pulumi.Input<pulumi.Input<string>[]>;
    lamac?: pulumi.Input<string>;
    linkredundancy?: pulumi.Input<string>;
    lrminthroughput?: pulumi.Input<number>;
    macdistr?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    speed?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tagall?: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
    trunk?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Channel resource.
 */
export interface ChannelArgs {
    bandwidthhigh?: pulumi.Input<number>;
    bandwidthnormal?: pulumi.Input<number>;
    channelId: pulumi.Input<string>;
    conndistr?: pulumi.Input<string>;
    flowctl?: pulumi.Input<string>;
    haheartbeat?: pulumi.Input<string>;
    hamonitor?: pulumi.Input<string>;
    ifalias?: pulumi.Input<string>;
    ifnums?: pulumi.Input<pulumi.Input<string>[]>;
    lamac?: pulumi.Input<string>;
    linkredundancy?: pulumi.Input<string>;
    lrminthroughput?: pulumi.Input<number>;
    macdistr?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    speed?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tagall?: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
    trunk?: pulumi.Input<string>;
}
