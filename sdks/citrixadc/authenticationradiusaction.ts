// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Authenticationradiusaction extends pulumi.CustomResource {
    /**
     * Get an existing Authenticationradiusaction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticationradiusactionState, opts?: pulumi.CustomResourceOptions): Authenticationradiusaction {
        return new Authenticationradiusaction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/authenticationradiusaction:Authenticationradiusaction';

    /**
     * Returns true if the given object is an instance of Authenticationradiusaction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Authenticationradiusaction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authenticationradiusaction.__pulumiType;
    }

    public readonly accounting!: pulumi.Output<string>;
    public readonly authentication!: pulumi.Output<string>;
    public readonly authservretry!: pulumi.Output<number>;
    public readonly authtimeout!: pulumi.Output<number>;
    public readonly callingstationid!: pulumi.Output<string>;
    public readonly defaultauthenticationgroup!: pulumi.Output<string>;
    public readonly ipattributetype!: pulumi.Output<number>;
    public readonly ipvendorid!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly passencoding!: pulumi.Output<string>;
    public readonly pwdattributetype!: pulumi.Output<number>;
    public readonly pwdvendorid!: pulumi.Output<number>;
    public readonly radattributetype!: pulumi.Output<number>;
    public readonly radgroupseparator!: pulumi.Output<string>;
    public readonly radgroupsprefix!: pulumi.Output<string>;
    public readonly radkey!: pulumi.Output<string>;
    public readonly radnasid!: pulumi.Output<string>;
    public readonly radnasip!: pulumi.Output<string>;
    public readonly radvendorid!: pulumi.Output<number>;
    public readonly serverip!: pulumi.Output<string>;
    public readonly servername!: pulumi.Output<string>;
    public readonly serverport!: pulumi.Output<number>;
    public readonly tunnelendpointclientip!: pulumi.Output<string>;

    /**
     * Create a Authenticationradiusaction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthenticationradiusactionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticationradiusactionArgs | AuthenticationradiusactionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticationradiusactionState | undefined;
            resourceInputs["accounting"] = state ? state.accounting : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["authservretry"] = state ? state.authservretry : undefined;
            resourceInputs["authtimeout"] = state ? state.authtimeout : undefined;
            resourceInputs["callingstationid"] = state ? state.callingstationid : undefined;
            resourceInputs["defaultauthenticationgroup"] = state ? state.defaultauthenticationgroup : undefined;
            resourceInputs["ipattributetype"] = state ? state.ipattributetype : undefined;
            resourceInputs["ipvendorid"] = state ? state.ipvendorid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passencoding"] = state ? state.passencoding : undefined;
            resourceInputs["pwdattributetype"] = state ? state.pwdattributetype : undefined;
            resourceInputs["pwdvendorid"] = state ? state.pwdvendorid : undefined;
            resourceInputs["radattributetype"] = state ? state.radattributetype : undefined;
            resourceInputs["radgroupseparator"] = state ? state.radgroupseparator : undefined;
            resourceInputs["radgroupsprefix"] = state ? state.radgroupsprefix : undefined;
            resourceInputs["radkey"] = state ? state.radkey : undefined;
            resourceInputs["radnasid"] = state ? state.radnasid : undefined;
            resourceInputs["radnasip"] = state ? state.radnasip : undefined;
            resourceInputs["radvendorid"] = state ? state.radvendorid : undefined;
            resourceInputs["serverip"] = state ? state.serverip : undefined;
            resourceInputs["servername"] = state ? state.servername : undefined;
            resourceInputs["serverport"] = state ? state.serverport : undefined;
            resourceInputs["tunnelendpointclientip"] = state ? state.tunnelendpointclientip : undefined;
        } else {
            const args = argsOrState as AuthenticationradiusactionArgs | undefined;
            if ((!args || args.radkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'radkey'");
            }
            resourceInputs["accounting"] = args ? args.accounting : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["authservretry"] = args ? args.authservretry : undefined;
            resourceInputs["authtimeout"] = args ? args.authtimeout : undefined;
            resourceInputs["callingstationid"] = args ? args.callingstationid : undefined;
            resourceInputs["defaultauthenticationgroup"] = args ? args.defaultauthenticationgroup : undefined;
            resourceInputs["ipattributetype"] = args ? args.ipattributetype : undefined;
            resourceInputs["ipvendorid"] = args ? args.ipvendorid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passencoding"] = args ? args.passencoding : undefined;
            resourceInputs["pwdattributetype"] = args ? args.pwdattributetype : undefined;
            resourceInputs["pwdvendorid"] = args ? args.pwdvendorid : undefined;
            resourceInputs["radattributetype"] = args ? args.radattributetype : undefined;
            resourceInputs["radgroupseparator"] = args ? args.radgroupseparator : undefined;
            resourceInputs["radgroupsprefix"] = args ? args.radgroupsprefix : undefined;
            resourceInputs["radkey"] = args ? args.radkey : undefined;
            resourceInputs["radnasid"] = args ? args.radnasid : undefined;
            resourceInputs["radnasip"] = args ? args.radnasip : undefined;
            resourceInputs["radvendorid"] = args ? args.radvendorid : undefined;
            resourceInputs["serverip"] = args ? args.serverip : undefined;
            resourceInputs["servername"] = args ? args.servername : undefined;
            resourceInputs["serverport"] = args ? args.serverport : undefined;
            resourceInputs["tunnelendpointclientip"] = args ? args.tunnelendpointclientip : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Authenticationradiusaction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Authenticationradiusaction resources.
 */
export interface AuthenticationradiusactionState {
    accounting?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    authservretry?: pulumi.Input<number>;
    authtimeout?: pulumi.Input<number>;
    callingstationid?: pulumi.Input<string>;
    defaultauthenticationgroup?: pulumi.Input<string>;
    ipattributetype?: pulumi.Input<number>;
    ipvendorid?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passencoding?: pulumi.Input<string>;
    pwdattributetype?: pulumi.Input<number>;
    pwdvendorid?: pulumi.Input<number>;
    radattributetype?: pulumi.Input<number>;
    radgroupseparator?: pulumi.Input<string>;
    radgroupsprefix?: pulumi.Input<string>;
    radkey?: pulumi.Input<string>;
    radnasid?: pulumi.Input<string>;
    radnasip?: pulumi.Input<string>;
    radvendorid?: pulumi.Input<number>;
    serverip?: pulumi.Input<string>;
    servername?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    tunnelendpointclientip?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Authenticationradiusaction resource.
 */
export interface AuthenticationradiusactionArgs {
    accounting?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    authservretry?: pulumi.Input<number>;
    authtimeout?: pulumi.Input<number>;
    callingstationid?: pulumi.Input<string>;
    defaultauthenticationgroup?: pulumi.Input<string>;
    ipattributetype?: pulumi.Input<number>;
    ipvendorid?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passencoding?: pulumi.Input<string>;
    pwdattributetype?: pulumi.Input<number>;
    pwdvendorid?: pulumi.Input<number>;
    radattributetype?: pulumi.Input<number>;
    radgroupseparator?: pulumi.Input<string>;
    radgroupsprefix?: pulumi.Input<string>;
    radkey: pulumi.Input<string>;
    radnasid?: pulumi.Input<string>;
    radnasip?: pulumi.Input<string>;
    radvendorid?: pulumi.Input<number>;
    serverip?: pulumi.Input<string>;
    servername?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    tunnelendpointclientip?: pulumi.Input<string>;
}
