// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sslparameter extends pulumi.CustomResource {
    /**
     * Get an existing Sslparameter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslparameterState, opts?: pulumi.CustomResourceOptions): Sslparameter {
        return new Sslparameter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/sslparameter:Sslparameter';

    /**
     * Returns true if the given object is an instance of Sslparameter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sslparameter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sslparameter.__pulumiType;
    }

    public readonly crlmemorysizemb!: pulumi.Output<number>;
    public readonly cryptodevdisablelimit!: pulumi.Output<number>;
    public readonly defaultprofile!: pulumi.Output<string>;
    public readonly denysslreneg!: pulumi.Output<string>;
    public readonly dropreqwithnohostheader!: pulumi.Output<string>;
    public readonly encrypttriggerpktcount!: pulumi.Output<number>;
    public readonly heterogeneoussslhw!: pulumi.Output<string>;
    public readonly hybridfipsmode!: pulumi.Output<string>;
    public readonly insertcertspace!: pulumi.Output<string>;
    public readonly insertionencoding!: pulumi.Output<string>;
    public readonly ndcppcompliancecertcheck!: pulumi.Output<string>;
    public readonly ocspcachesize!: pulumi.Output<number>;
    public readonly pushenctriggertimeout!: pulumi.Output<number>;
    public readonly pushflag!: pulumi.Output<number>;
    public readonly quantumsize!: pulumi.Output<string>;
    public readonly sendclosenotify!: pulumi.Output<string>;
    public readonly snihttphostmatch!: pulumi.Output<string>;
    public readonly softwarecryptothreshold!: pulumi.Output<number>;
    public readonly sslierrorcache!: pulumi.Output<string>;
    public readonly sslimaxerrorcachemem!: pulumi.Output<number>;
    public readonly ssltriggertimeout!: pulumi.Output<number>;
    public readonly strictcachecks!: pulumi.Output<string>;
    public readonly undefactioncontrol!: pulumi.Output<string>;
    public readonly undefactiondata!: pulumi.Output<string>;

    /**
     * Create a Sslparameter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SslparameterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslparameterArgs | SslparameterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslparameterState | undefined;
            resourceInputs["crlmemorysizemb"] = state ? state.crlmemorysizemb : undefined;
            resourceInputs["cryptodevdisablelimit"] = state ? state.cryptodevdisablelimit : undefined;
            resourceInputs["defaultprofile"] = state ? state.defaultprofile : undefined;
            resourceInputs["denysslreneg"] = state ? state.denysslreneg : undefined;
            resourceInputs["dropreqwithnohostheader"] = state ? state.dropreqwithnohostheader : undefined;
            resourceInputs["encrypttriggerpktcount"] = state ? state.encrypttriggerpktcount : undefined;
            resourceInputs["heterogeneoussslhw"] = state ? state.heterogeneoussslhw : undefined;
            resourceInputs["hybridfipsmode"] = state ? state.hybridfipsmode : undefined;
            resourceInputs["insertcertspace"] = state ? state.insertcertspace : undefined;
            resourceInputs["insertionencoding"] = state ? state.insertionencoding : undefined;
            resourceInputs["ndcppcompliancecertcheck"] = state ? state.ndcppcompliancecertcheck : undefined;
            resourceInputs["ocspcachesize"] = state ? state.ocspcachesize : undefined;
            resourceInputs["pushenctriggertimeout"] = state ? state.pushenctriggertimeout : undefined;
            resourceInputs["pushflag"] = state ? state.pushflag : undefined;
            resourceInputs["quantumsize"] = state ? state.quantumsize : undefined;
            resourceInputs["sendclosenotify"] = state ? state.sendclosenotify : undefined;
            resourceInputs["snihttphostmatch"] = state ? state.snihttphostmatch : undefined;
            resourceInputs["softwarecryptothreshold"] = state ? state.softwarecryptothreshold : undefined;
            resourceInputs["sslierrorcache"] = state ? state.sslierrorcache : undefined;
            resourceInputs["sslimaxerrorcachemem"] = state ? state.sslimaxerrorcachemem : undefined;
            resourceInputs["ssltriggertimeout"] = state ? state.ssltriggertimeout : undefined;
            resourceInputs["strictcachecks"] = state ? state.strictcachecks : undefined;
            resourceInputs["undefactioncontrol"] = state ? state.undefactioncontrol : undefined;
            resourceInputs["undefactiondata"] = state ? state.undefactiondata : undefined;
        } else {
            const args = argsOrState as SslparameterArgs | undefined;
            resourceInputs["crlmemorysizemb"] = args ? args.crlmemorysizemb : undefined;
            resourceInputs["cryptodevdisablelimit"] = args ? args.cryptodevdisablelimit : undefined;
            resourceInputs["defaultprofile"] = args ? args.defaultprofile : undefined;
            resourceInputs["denysslreneg"] = args ? args.denysslreneg : undefined;
            resourceInputs["dropreqwithnohostheader"] = args ? args.dropreqwithnohostheader : undefined;
            resourceInputs["encrypttriggerpktcount"] = args ? args.encrypttriggerpktcount : undefined;
            resourceInputs["heterogeneoussslhw"] = args ? args.heterogeneoussslhw : undefined;
            resourceInputs["hybridfipsmode"] = args ? args.hybridfipsmode : undefined;
            resourceInputs["insertcertspace"] = args ? args.insertcertspace : undefined;
            resourceInputs["insertionencoding"] = args ? args.insertionencoding : undefined;
            resourceInputs["ndcppcompliancecertcheck"] = args ? args.ndcppcompliancecertcheck : undefined;
            resourceInputs["ocspcachesize"] = args ? args.ocspcachesize : undefined;
            resourceInputs["pushenctriggertimeout"] = args ? args.pushenctriggertimeout : undefined;
            resourceInputs["pushflag"] = args ? args.pushflag : undefined;
            resourceInputs["quantumsize"] = args ? args.quantumsize : undefined;
            resourceInputs["sendclosenotify"] = args ? args.sendclosenotify : undefined;
            resourceInputs["snihttphostmatch"] = args ? args.snihttphostmatch : undefined;
            resourceInputs["softwarecryptothreshold"] = args ? args.softwarecryptothreshold : undefined;
            resourceInputs["sslierrorcache"] = args ? args.sslierrorcache : undefined;
            resourceInputs["sslimaxerrorcachemem"] = args ? args.sslimaxerrorcachemem : undefined;
            resourceInputs["ssltriggertimeout"] = args ? args.ssltriggertimeout : undefined;
            resourceInputs["strictcachecks"] = args ? args.strictcachecks : undefined;
            resourceInputs["undefactioncontrol"] = args ? args.undefactioncontrol : undefined;
            resourceInputs["undefactiondata"] = args ? args.undefactiondata : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sslparameter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sslparameter resources.
 */
export interface SslparameterState {
    crlmemorysizemb?: pulumi.Input<number>;
    cryptodevdisablelimit?: pulumi.Input<number>;
    defaultprofile?: pulumi.Input<string>;
    denysslreneg?: pulumi.Input<string>;
    dropreqwithnohostheader?: pulumi.Input<string>;
    encrypttriggerpktcount?: pulumi.Input<number>;
    heterogeneoussslhw?: pulumi.Input<string>;
    hybridfipsmode?: pulumi.Input<string>;
    insertcertspace?: pulumi.Input<string>;
    insertionencoding?: pulumi.Input<string>;
    ndcppcompliancecertcheck?: pulumi.Input<string>;
    ocspcachesize?: pulumi.Input<number>;
    pushenctriggertimeout?: pulumi.Input<number>;
    pushflag?: pulumi.Input<number>;
    quantumsize?: pulumi.Input<string>;
    sendclosenotify?: pulumi.Input<string>;
    snihttphostmatch?: pulumi.Input<string>;
    softwarecryptothreshold?: pulumi.Input<number>;
    sslierrorcache?: pulumi.Input<string>;
    sslimaxerrorcachemem?: pulumi.Input<number>;
    ssltriggertimeout?: pulumi.Input<number>;
    strictcachecks?: pulumi.Input<string>;
    undefactioncontrol?: pulumi.Input<string>;
    undefactiondata?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sslparameter resource.
 */
export interface SslparameterArgs {
    crlmemorysizemb?: pulumi.Input<number>;
    cryptodevdisablelimit?: pulumi.Input<number>;
    defaultprofile?: pulumi.Input<string>;
    denysslreneg?: pulumi.Input<string>;
    dropreqwithnohostheader?: pulumi.Input<string>;
    encrypttriggerpktcount?: pulumi.Input<number>;
    heterogeneoussslhw?: pulumi.Input<string>;
    hybridfipsmode?: pulumi.Input<string>;
    insertcertspace?: pulumi.Input<string>;
    insertionencoding?: pulumi.Input<string>;
    ndcppcompliancecertcheck?: pulumi.Input<string>;
    ocspcachesize?: pulumi.Input<number>;
    pushenctriggertimeout?: pulumi.Input<number>;
    pushflag?: pulumi.Input<number>;
    quantumsize?: pulumi.Input<string>;
    sendclosenotify?: pulumi.Input<string>;
    snihttphostmatch?: pulumi.Input<string>;
    softwarecryptothreshold?: pulumi.Input<number>;
    sslierrorcache?: pulumi.Input<string>;
    sslimaxerrorcachemem?: pulumi.Input<number>;
    ssltriggertimeout?: pulumi.Input<number>;
    strictcachecks?: pulumi.Input<string>;
    undefactioncontrol?: pulumi.Input<string>;
    undefactiondata?: pulumi.Input<string>;
}
