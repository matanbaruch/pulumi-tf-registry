// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Responderaction extends pulumi.CustomResource {
    /**
     * Get an existing Responderaction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResponderactionState, opts?: pulumi.CustomResourceOptions): Responderaction {
        return new Responderaction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/responderaction:Responderaction';

    /**
     * Returns true if the given object is an instance of Responderaction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Responderaction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Responderaction.__pulumiType;
    }

    public readonly bypasssafetycheck!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly htmlpage!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly reasonphrase!: pulumi.Output<string>;
    public readonly responsestatuscode!: pulumi.Output<number>;
    public readonly target!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Responderaction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResponderactionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResponderactionArgs | ResponderactionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResponderactionState | undefined;
            resourceInputs["bypasssafetycheck"] = state ? state.bypasssafetycheck : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["htmlpage"] = state ? state.htmlpage : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reasonphrase"] = state ? state.reasonphrase : undefined;
            resourceInputs["responsestatuscode"] = state ? state.responsestatuscode : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ResponderactionArgs | undefined;
            resourceInputs["bypasssafetycheck"] = args ? args.bypasssafetycheck : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["htmlpage"] = args ? args.htmlpage : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reasonphrase"] = args ? args.reasonphrase : undefined;
            resourceInputs["responsestatuscode"] = args ? args.responsestatuscode : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Responderaction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Responderaction resources.
 */
export interface ResponderactionState {
    bypasssafetycheck?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    htmlpage?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    reasonphrase?: pulumi.Input<string>;
    responsestatuscode?: pulumi.Input<number>;
    target?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Responderaction resource.
 */
export interface ResponderactionArgs {
    bypasssafetycheck?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    htmlpage?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    reasonphrase?: pulumi.Input<string>;
    responsestatuscode?: pulumi.Input<number>;
    target?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
