// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Lsnstatic extends pulumi.CustomResource {
    /**
     * Get an existing Lsnstatic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LsnstaticState, opts?: pulumi.CustomResourceOptions): Lsnstatic {
        return new Lsnstatic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/lsnstatic:Lsnstatic';

    /**
     * Returns true if the given object is an instance of Lsnstatic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lsnstatic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lsnstatic.__pulumiType;
    }

    public readonly destip!: pulumi.Output<string | undefined>;
    public readonly dsttd!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly natip!: pulumi.Output<string | undefined>;
    public readonly natport!: pulumi.Output<number | undefined>;
    public readonly nattype!: pulumi.Output<string | undefined>;
    public readonly network6!: pulumi.Output<string | undefined>;
    public readonly subscrip!: pulumi.Output<string | undefined>;
    public readonly subscrport!: pulumi.Output<number | undefined>;
    public readonly td!: pulumi.Output<number | undefined>;
    public readonly transportprotocol!: pulumi.Output<string | undefined>;

    /**
     * Create a Lsnstatic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LsnstaticArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LsnstaticArgs | LsnstaticState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LsnstaticState | undefined;
            resourceInputs["destip"] = state ? state.destip : undefined;
            resourceInputs["dsttd"] = state ? state.dsttd : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natip"] = state ? state.natip : undefined;
            resourceInputs["natport"] = state ? state.natport : undefined;
            resourceInputs["nattype"] = state ? state.nattype : undefined;
            resourceInputs["network6"] = state ? state.network6 : undefined;
            resourceInputs["subscrip"] = state ? state.subscrip : undefined;
            resourceInputs["subscrport"] = state ? state.subscrport : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["transportprotocol"] = state ? state.transportprotocol : undefined;
        } else {
            const args = argsOrState as LsnstaticArgs | undefined;
            resourceInputs["destip"] = args ? args.destip : undefined;
            resourceInputs["dsttd"] = args ? args.dsttd : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natip"] = args ? args.natip : undefined;
            resourceInputs["natport"] = args ? args.natport : undefined;
            resourceInputs["nattype"] = args ? args.nattype : undefined;
            resourceInputs["network6"] = args ? args.network6 : undefined;
            resourceInputs["subscrip"] = args ? args.subscrip : undefined;
            resourceInputs["subscrport"] = args ? args.subscrport : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["transportprotocol"] = args ? args.transportprotocol : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lsnstatic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lsnstatic resources.
 */
export interface LsnstaticState {
    destip?: pulumi.Input<string>;
    dsttd?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    natip?: pulumi.Input<string>;
    natport?: pulumi.Input<number>;
    nattype?: pulumi.Input<string>;
    network6?: pulumi.Input<string>;
    subscrip?: pulumi.Input<string>;
    subscrport?: pulumi.Input<number>;
    td?: pulumi.Input<number>;
    transportprotocol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lsnstatic resource.
 */
export interface LsnstaticArgs {
    destip?: pulumi.Input<string>;
    dsttd?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    natip?: pulumi.Input<string>;
    natport?: pulumi.Input<number>;
    nattype?: pulumi.Input<string>;
    network6?: pulumi.Input<string>;
    subscrip?: pulumi.Input<string>;
    subscrport?: pulumi.Input<number>;
    td?: pulumi.Input<number>;
    transportprotocol?: pulumi.Input<string>;
}
