// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Pinger extends pulumi.CustomResource {
    /**
     * Get an existing Pinger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PingerState, opts?: pulumi.CustomResourceOptions): Pinger {
        return new Pinger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/pinger:Pinger';

    /**
     * Returns true if the given object is an instance of Pinger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pinger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pinger.__pulumiType;
    }

    public readonly c!: pulumi.Output<number>;
    public readonly forcenewIdSets!: pulumi.Output<string[]>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly i!: pulumi.Output<number>;
    public readonly n!: pulumi.Output<boolean>;
    public readonly p!: pulumi.Output<string>;
    public readonly q!: pulumi.Output<boolean>;
    public readonly s!: pulumi.Output<number>;
    public readonly t!: pulumi.Output<number>;

    /**
     * Create a Pinger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PingerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PingerArgs | PingerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PingerState | undefined;
            resourceInputs["c"] = state ? state.c : undefined;
            resourceInputs["forcenewIdSets"] = state ? state.forcenewIdSets : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["i"] = state ? state.i : undefined;
            resourceInputs["n"] = state ? state.n : undefined;
            resourceInputs["p"] = state ? state.p : undefined;
            resourceInputs["q"] = state ? state.q : undefined;
            resourceInputs["s"] = state ? state.s : undefined;
            resourceInputs["t"] = state ? state.t : undefined;
        } else {
            const args = argsOrState as PingerArgs | undefined;
            resourceInputs["c"] = args ? args.c : undefined;
            resourceInputs["forcenewIdSets"] = args ? args.forcenewIdSets : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["i"] = args ? args.i : undefined;
            resourceInputs["n"] = args ? args.n : undefined;
            resourceInputs["p"] = args ? args.p : undefined;
            resourceInputs["q"] = args ? args.q : undefined;
            resourceInputs["s"] = args ? args.s : undefined;
            resourceInputs["t"] = args ? args.t : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pinger.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Pinger resources.
 */
export interface PingerState {
    c?: pulumi.Input<number>;
    forcenewIdSets?: pulumi.Input<pulumi.Input<string>[]>;
    hostname?: pulumi.Input<string>;
    i?: pulumi.Input<number>;
    n?: pulumi.Input<boolean>;
    p?: pulumi.Input<string>;
    q?: pulumi.Input<boolean>;
    s?: pulumi.Input<number>;
    t?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Pinger resource.
 */
export interface PingerArgs {
    c?: pulumi.Input<number>;
    forcenewIdSets?: pulumi.Input<pulumi.Input<string>[]>;
    hostname?: pulumi.Input<string>;
    i?: pulumi.Input<number>;
    n?: pulumi.Input<boolean>;
    p?: pulumi.Input<string>;
    q?: pulumi.Input<boolean>;
    s?: pulumi.Input<number>;
    t?: pulumi.Input<number>;
}
