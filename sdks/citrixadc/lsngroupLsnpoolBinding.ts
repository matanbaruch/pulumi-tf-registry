// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LsngroupLsnpoolBinding extends pulumi.CustomResource {
    /**
     * Get an existing LsngroupLsnpoolBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LsngroupLsnpoolBindingState, opts?: pulumi.CustomResourceOptions): LsngroupLsnpoolBinding {
        return new LsngroupLsnpoolBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/lsngroupLsnpoolBinding:LsngroupLsnpoolBinding';

    /**
     * Returns true if the given object is an instance of LsngroupLsnpoolBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LsngroupLsnpoolBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LsngroupLsnpoolBinding.__pulumiType;
    }

    public readonly groupname!: pulumi.Output<string>;
    public readonly poolname!: pulumi.Output<string>;

    /**
     * Create a LsngroupLsnpoolBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LsngroupLsnpoolBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LsngroupLsnpoolBindingArgs | LsngroupLsnpoolBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LsngroupLsnpoolBindingState | undefined;
            resourceInputs["groupname"] = state ? state.groupname : undefined;
            resourceInputs["poolname"] = state ? state.poolname : undefined;
        } else {
            const args = argsOrState as LsngroupLsnpoolBindingArgs | undefined;
            if ((!args || args.groupname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupname'");
            }
            if ((!args || args.poolname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolname'");
            }
            resourceInputs["groupname"] = args ? args.groupname : undefined;
            resourceInputs["poolname"] = args ? args.poolname : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LsngroupLsnpoolBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LsngroupLsnpoolBinding resources.
 */
export interface LsngroupLsnpoolBindingState {
    groupname?: pulumi.Input<string>;
    poolname?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LsngroupLsnpoolBinding resource.
 */
export interface LsngroupLsnpoolBindingArgs {
    groupname: pulumi.Input<string>;
    poolname: pulumi.Input<string>;
}
