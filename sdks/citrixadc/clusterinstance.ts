// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Clusterinstance extends pulumi.CustomResource {
    /**
     * Get an existing Clusterinstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterinstanceState, opts?: pulumi.CustomResourceOptions): Clusterinstance {
        return new Clusterinstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/clusterinstance:Clusterinstance';

    /**
     * Returns true if the given object is an instance of Clusterinstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Clusterinstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Clusterinstance.__pulumiType;
    }

    public readonly backplanebasedview!: pulumi.Output<string>;
    public readonly clid!: pulumi.Output<number>;
    public readonly deadinterval!: pulumi.Output<number>;
    public readonly hellointerval!: pulumi.Output<number>;
    public readonly inc!: pulumi.Output<string>;
    public readonly nodegroup!: pulumi.Output<string>;
    public readonly preemption!: pulumi.Output<string>;
    public readonly processlocal!: pulumi.Output<string>;
    public readonly quorumtype!: pulumi.Output<string>;
    public readonly retainconnectionsoncluster!: pulumi.Output<string>;
    public readonly syncstatusstrictmode!: pulumi.Output<string>;

    /**
     * Create a Clusterinstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterinstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterinstanceArgs | ClusterinstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterinstanceState | undefined;
            resourceInputs["backplanebasedview"] = state ? state.backplanebasedview : undefined;
            resourceInputs["clid"] = state ? state.clid : undefined;
            resourceInputs["deadinterval"] = state ? state.deadinterval : undefined;
            resourceInputs["hellointerval"] = state ? state.hellointerval : undefined;
            resourceInputs["inc"] = state ? state.inc : undefined;
            resourceInputs["nodegroup"] = state ? state.nodegroup : undefined;
            resourceInputs["preemption"] = state ? state.preemption : undefined;
            resourceInputs["processlocal"] = state ? state.processlocal : undefined;
            resourceInputs["quorumtype"] = state ? state.quorumtype : undefined;
            resourceInputs["retainconnectionsoncluster"] = state ? state.retainconnectionsoncluster : undefined;
            resourceInputs["syncstatusstrictmode"] = state ? state.syncstatusstrictmode : undefined;
        } else {
            const args = argsOrState as ClusterinstanceArgs | undefined;
            if ((!args || args.clid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clid'");
            }
            resourceInputs["backplanebasedview"] = args ? args.backplanebasedview : undefined;
            resourceInputs["clid"] = args ? args.clid : undefined;
            resourceInputs["deadinterval"] = args ? args.deadinterval : undefined;
            resourceInputs["hellointerval"] = args ? args.hellointerval : undefined;
            resourceInputs["inc"] = args ? args.inc : undefined;
            resourceInputs["nodegroup"] = args ? args.nodegroup : undefined;
            resourceInputs["preemption"] = args ? args.preemption : undefined;
            resourceInputs["processlocal"] = args ? args.processlocal : undefined;
            resourceInputs["quorumtype"] = args ? args.quorumtype : undefined;
            resourceInputs["retainconnectionsoncluster"] = args ? args.retainconnectionsoncluster : undefined;
            resourceInputs["syncstatusstrictmode"] = args ? args.syncstatusstrictmode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Clusterinstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Clusterinstance resources.
 */
export interface ClusterinstanceState {
    backplanebasedview?: pulumi.Input<string>;
    clid?: pulumi.Input<number>;
    deadinterval?: pulumi.Input<number>;
    hellointerval?: pulumi.Input<number>;
    inc?: pulumi.Input<string>;
    nodegroup?: pulumi.Input<string>;
    preemption?: pulumi.Input<string>;
    processlocal?: pulumi.Input<string>;
    quorumtype?: pulumi.Input<string>;
    retainconnectionsoncluster?: pulumi.Input<string>;
    syncstatusstrictmode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Clusterinstance resource.
 */
export interface ClusterinstanceArgs {
    backplanebasedview?: pulumi.Input<string>;
    clid: pulumi.Input<number>;
    deadinterval?: pulumi.Input<number>;
    hellointerval?: pulumi.Input<number>;
    inc?: pulumi.Input<string>;
    nodegroup?: pulumi.Input<string>;
    preemption?: pulumi.Input<string>;
    processlocal?: pulumi.Input<string>;
    quorumtype?: pulumi.Input<string>;
    retainconnectionsoncluster?: pulumi.Input<string>;
    syncstatusstrictmode?: pulumi.Input<string>;
}
