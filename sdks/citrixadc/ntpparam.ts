// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ntpparam extends pulumi.CustomResource {
    /**
     * Get an existing Ntpparam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NtpparamState, opts?: pulumi.CustomResourceOptions): Ntpparam {
        return new Ntpparam(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/ntpparam:Ntpparam';

    /**
     * Returns true if the given object is an instance of Ntpparam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ntpparam {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ntpparam.__pulumiType;
    }

    public readonly authentication!: pulumi.Output<string>;
    public readonly autokeylogsec!: pulumi.Output<number>;
    public readonly revokelogsec!: pulumi.Output<number>;
    public readonly trustedkeys!: pulumi.Output<number[]>;

    /**
     * Create a Ntpparam resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NtpparamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NtpparamArgs | NtpparamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NtpparamState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["autokeylogsec"] = state ? state.autokeylogsec : undefined;
            resourceInputs["revokelogsec"] = state ? state.revokelogsec : undefined;
            resourceInputs["trustedkeys"] = state ? state.trustedkeys : undefined;
        } else {
            const args = argsOrState as NtpparamArgs | undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["autokeylogsec"] = args ? args.autokeylogsec : undefined;
            resourceInputs["revokelogsec"] = args ? args.revokelogsec : undefined;
            resourceInputs["trustedkeys"] = args ? args.trustedkeys : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ntpparam.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ntpparam resources.
 */
export interface NtpparamState {
    authentication?: pulumi.Input<string>;
    autokeylogsec?: pulumi.Input<number>;
    revokelogsec?: pulumi.Input<number>;
    trustedkeys?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a Ntpparam resource.
 */
export interface NtpparamArgs {
    authentication?: pulumi.Input<string>;
    autokeylogsec?: pulumi.Input<number>;
    revokelogsec?: pulumi.Input<number>;
    trustedkeys?: pulumi.Input<pulumi.Input<number>[]>;
}
