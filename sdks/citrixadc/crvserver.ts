// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Crvserver extends pulumi.CustomResource {
    /**
     * Get an existing Crvserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CrvserverState, opts?: pulumi.CustomResourceOptions): Crvserver {
        return new Crvserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/crvserver:Crvserver';

    /**
     * Returns true if the given object is an instance of Crvserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Crvserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Crvserver.__pulumiType;
    }

    public readonly appflowlog!: pulumi.Output<string>;
    public readonly arp!: pulumi.Output<string>;
    public readonly backendssl!: pulumi.Output<string>;
    public readonly backupvserver!: pulumi.Output<string>;
    public readonly cachetype!: pulumi.Output<string>;
    public readonly cachevserver!: pulumi.Output<string>;
    public readonly clttimeout!: pulumi.Output<number>;
    public readonly comment!: pulumi.Output<string>;
    public readonly destinationvserver!: pulumi.Output<string>;
    public readonly disableprimaryondown!: pulumi.Output<string>;
    public readonly dnsvservername!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public readonly downstateflush!: pulumi.Output<string>;
    public readonly format!: pulumi.Output<string>;
    public readonly ghost!: pulumi.Output<string>;
    public readonly httpprofilename!: pulumi.Output<string>;
    public readonly icmpvsrresponse!: pulumi.Output<string>;
    public readonly ipset!: pulumi.Output<string>;
    public readonly ipv46!: pulumi.Output<string>;
    public readonly l2conn!: pulumi.Output<string>;
    public readonly listenpolicy!: pulumi.Output<string>;
    public readonly listenpriority!: pulumi.Output<number>;
    public readonly map!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly netprofile!: pulumi.Output<string>;
    public readonly onpolicymatch!: pulumi.Output<string>;
    public readonly originusip!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly precedence!: pulumi.Output<string>;
    public readonly probeport!: pulumi.Output<number>;
    public readonly probeprotocol!: pulumi.Output<string>;
    public readonly probesuccessresponsecode!: pulumi.Output<string>;
    public readonly range!: pulumi.Output<number>;
    public readonly redirect!: pulumi.Output<string>;
    public readonly redirecturl!: pulumi.Output<string>;
    public readonly reuse!: pulumi.Output<string>;
    public readonly rhistate!: pulumi.Output<string>;
    public readonly servicetype!: pulumi.Output<string>;
    public readonly sopersistencetimeout!: pulumi.Output<number>;
    public readonly sothreshold!: pulumi.Output<number>;
    public readonly srcipexpr!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly tcpprobeport!: pulumi.Output<number>;
    public readonly tcpprofilename!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<number>;
    public readonly useoriginipportforcache!: pulumi.Output<string>;
    public readonly useportrange!: pulumi.Output<string>;
    public readonly via!: pulumi.Output<string>;

    /**
     * Create a Crvserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CrvserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CrvserverArgs | CrvserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CrvserverState | undefined;
            resourceInputs["appflowlog"] = state ? state.appflowlog : undefined;
            resourceInputs["arp"] = state ? state.arp : undefined;
            resourceInputs["backendssl"] = state ? state.backendssl : undefined;
            resourceInputs["backupvserver"] = state ? state.backupvserver : undefined;
            resourceInputs["cachetype"] = state ? state.cachetype : undefined;
            resourceInputs["cachevserver"] = state ? state.cachevserver : undefined;
            resourceInputs["clttimeout"] = state ? state.clttimeout : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["destinationvserver"] = state ? state.destinationvserver : undefined;
            resourceInputs["disableprimaryondown"] = state ? state.disableprimaryondown : undefined;
            resourceInputs["dnsvservername"] = state ? state.dnsvservername : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["downstateflush"] = state ? state.downstateflush : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["ghost"] = state ? state.ghost : undefined;
            resourceInputs["httpprofilename"] = state ? state.httpprofilename : undefined;
            resourceInputs["icmpvsrresponse"] = state ? state.icmpvsrresponse : undefined;
            resourceInputs["ipset"] = state ? state.ipset : undefined;
            resourceInputs["ipv46"] = state ? state.ipv46 : undefined;
            resourceInputs["l2conn"] = state ? state.l2conn : undefined;
            resourceInputs["listenpolicy"] = state ? state.listenpolicy : undefined;
            resourceInputs["listenpriority"] = state ? state.listenpriority : undefined;
            resourceInputs["map"] = state ? state.map : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netprofile"] = state ? state.netprofile : undefined;
            resourceInputs["onpolicymatch"] = state ? state.onpolicymatch : undefined;
            resourceInputs["originusip"] = state ? state.originusip : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["precedence"] = state ? state.precedence : undefined;
            resourceInputs["probeport"] = state ? state.probeport : undefined;
            resourceInputs["probeprotocol"] = state ? state.probeprotocol : undefined;
            resourceInputs["probesuccessresponsecode"] = state ? state.probesuccessresponsecode : undefined;
            resourceInputs["range"] = state ? state.range : undefined;
            resourceInputs["redirect"] = state ? state.redirect : undefined;
            resourceInputs["redirecturl"] = state ? state.redirecturl : undefined;
            resourceInputs["reuse"] = state ? state.reuse : undefined;
            resourceInputs["rhistate"] = state ? state.rhistate : undefined;
            resourceInputs["servicetype"] = state ? state.servicetype : undefined;
            resourceInputs["sopersistencetimeout"] = state ? state.sopersistencetimeout : undefined;
            resourceInputs["sothreshold"] = state ? state.sothreshold : undefined;
            resourceInputs["srcipexpr"] = state ? state.srcipexpr : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tcpprobeport"] = state ? state.tcpprobeport : undefined;
            resourceInputs["tcpprofilename"] = state ? state.tcpprofilename : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["useoriginipportforcache"] = state ? state.useoriginipportforcache : undefined;
            resourceInputs["useportrange"] = state ? state.useportrange : undefined;
            resourceInputs["via"] = state ? state.via : undefined;
        } else {
            const args = argsOrState as CrvserverArgs | undefined;
            if ((!args || args.servicetype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicetype'");
            }
            resourceInputs["appflowlog"] = args ? args.appflowlog : undefined;
            resourceInputs["arp"] = args ? args.arp : undefined;
            resourceInputs["backendssl"] = args ? args.backendssl : undefined;
            resourceInputs["backupvserver"] = args ? args.backupvserver : undefined;
            resourceInputs["cachetype"] = args ? args.cachetype : undefined;
            resourceInputs["cachevserver"] = args ? args.cachevserver : undefined;
            resourceInputs["clttimeout"] = args ? args.clttimeout : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["destinationvserver"] = args ? args.destinationvserver : undefined;
            resourceInputs["disableprimaryondown"] = args ? args.disableprimaryondown : undefined;
            resourceInputs["dnsvservername"] = args ? args.dnsvservername : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["downstateflush"] = args ? args.downstateflush : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["ghost"] = args ? args.ghost : undefined;
            resourceInputs["httpprofilename"] = args ? args.httpprofilename : undefined;
            resourceInputs["icmpvsrresponse"] = args ? args.icmpvsrresponse : undefined;
            resourceInputs["ipset"] = args ? args.ipset : undefined;
            resourceInputs["ipv46"] = args ? args.ipv46 : undefined;
            resourceInputs["l2conn"] = args ? args.l2conn : undefined;
            resourceInputs["listenpolicy"] = args ? args.listenpolicy : undefined;
            resourceInputs["listenpriority"] = args ? args.listenpriority : undefined;
            resourceInputs["map"] = args ? args.map : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netprofile"] = args ? args.netprofile : undefined;
            resourceInputs["onpolicymatch"] = args ? args.onpolicymatch : undefined;
            resourceInputs["originusip"] = args ? args.originusip : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["precedence"] = args ? args.precedence : undefined;
            resourceInputs["probeport"] = args ? args.probeport : undefined;
            resourceInputs["probeprotocol"] = args ? args.probeprotocol : undefined;
            resourceInputs["probesuccessresponsecode"] = args ? args.probesuccessresponsecode : undefined;
            resourceInputs["range"] = args ? args.range : undefined;
            resourceInputs["redirect"] = args ? args.redirect : undefined;
            resourceInputs["redirecturl"] = args ? args.redirecturl : undefined;
            resourceInputs["reuse"] = args ? args.reuse : undefined;
            resourceInputs["rhistate"] = args ? args.rhistate : undefined;
            resourceInputs["servicetype"] = args ? args.servicetype : undefined;
            resourceInputs["sopersistencetimeout"] = args ? args.sopersistencetimeout : undefined;
            resourceInputs["sothreshold"] = args ? args.sothreshold : undefined;
            resourceInputs["srcipexpr"] = args ? args.srcipexpr : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tcpprobeport"] = args ? args.tcpprobeport : undefined;
            resourceInputs["tcpprofilename"] = args ? args.tcpprofilename : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["useoriginipportforcache"] = args ? args.useoriginipportforcache : undefined;
            resourceInputs["useportrange"] = args ? args.useportrange : undefined;
            resourceInputs["via"] = args ? args.via : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Crvserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Crvserver resources.
 */
export interface CrvserverState {
    appflowlog?: pulumi.Input<string>;
    arp?: pulumi.Input<string>;
    backendssl?: pulumi.Input<string>;
    backupvserver?: pulumi.Input<string>;
    cachetype?: pulumi.Input<string>;
    cachevserver?: pulumi.Input<string>;
    clttimeout?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    destinationvserver?: pulumi.Input<string>;
    disableprimaryondown?: pulumi.Input<string>;
    dnsvservername?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    downstateflush?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    ghost?: pulumi.Input<string>;
    httpprofilename?: pulumi.Input<string>;
    icmpvsrresponse?: pulumi.Input<string>;
    ipset?: pulumi.Input<string>;
    ipv46?: pulumi.Input<string>;
    l2conn?: pulumi.Input<string>;
    listenpolicy?: pulumi.Input<string>;
    listenpriority?: pulumi.Input<number>;
    map?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netprofile?: pulumi.Input<string>;
    onpolicymatch?: pulumi.Input<string>;
    originusip?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    precedence?: pulumi.Input<string>;
    probeport?: pulumi.Input<number>;
    probeprotocol?: pulumi.Input<string>;
    probesuccessresponsecode?: pulumi.Input<string>;
    range?: pulumi.Input<number>;
    redirect?: pulumi.Input<string>;
    redirecturl?: pulumi.Input<string>;
    reuse?: pulumi.Input<string>;
    rhistate?: pulumi.Input<string>;
    servicetype?: pulumi.Input<string>;
    sopersistencetimeout?: pulumi.Input<number>;
    sothreshold?: pulumi.Input<number>;
    srcipexpr?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tcpprobeport?: pulumi.Input<number>;
    tcpprofilename?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    useoriginipportforcache?: pulumi.Input<string>;
    useportrange?: pulumi.Input<string>;
    via?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Crvserver resource.
 */
export interface CrvserverArgs {
    appflowlog?: pulumi.Input<string>;
    arp?: pulumi.Input<string>;
    backendssl?: pulumi.Input<string>;
    backupvserver?: pulumi.Input<string>;
    cachetype?: pulumi.Input<string>;
    cachevserver?: pulumi.Input<string>;
    clttimeout?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    destinationvserver?: pulumi.Input<string>;
    disableprimaryondown?: pulumi.Input<string>;
    dnsvservername?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    downstateflush?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    ghost?: pulumi.Input<string>;
    httpprofilename?: pulumi.Input<string>;
    icmpvsrresponse?: pulumi.Input<string>;
    ipset?: pulumi.Input<string>;
    ipv46?: pulumi.Input<string>;
    l2conn?: pulumi.Input<string>;
    listenpolicy?: pulumi.Input<string>;
    listenpriority?: pulumi.Input<number>;
    map?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netprofile?: pulumi.Input<string>;
    onpolicymatch?: pulumi.Input<string>;
    originusip?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    precedence?: pulumi.Input<string>;
    probeport?: pulumi.Input<number>;
    probeprotocol?: pulumi.Input<string>;
    probesuccessresponsecode?: pulumi.Input<string>;
    range?: pulumi.Input<number>;
    redirect?: pulumi.Input<string>;
    redirecturl?: pulumi.Input<string>;
    reuse?: pulumi.Input<string>;
    rhistate?: pulumi.Input<string>;
    servicetype: pulumi.Input<string>;
    sopersistencetimeout?: pulumi.Input<number>;
    sothreshold?: pulumi.Input<number>;
    srcipexpr?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tcpprobeport?: pulumi.Input<number>;
    tcpprofilename?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    useoriginipportforcache?: pulumi.Input<string>;
    useportrange?: pulumi.Input<string>;
    via?: pulumi.Input<string>;
}
