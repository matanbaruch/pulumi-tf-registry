// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nsdiameter extends pulumi.CustomResource {
    /**
     * Get an existing Nsdiameter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsdiameterState, opts?: pulumi.CustomResourceOptions): Nsdiameter {
        return new Nsdiameter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nsdiameter:Nsdiameter';

    /**
     * Returns true if the given object is an instance of Nsdiameter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nsdiameter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nsdiameter.__pulumiType;
    }

    public readonly identity!: pulumi.Output<string>;
    public readonly ownernode!: pulumi.Output<number>;
    public readonly realm!: pulumi.Output<string>;
    public readonly serverclosepropagation!: pulumi.Output<string>;

    /**
     * Create a Nsdiameter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NsdiameterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsdiameterArgs | NsdiameterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsdiameterState | undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["ownernode"] = state ? state.ownernode : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["serverclosepropagation"] = state ? state.serverclosepropagation : undefined;
        } else {
            const args = argsOrState as NsdiameterArgs | undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["ownernode"] = args ? args.ownernode : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["serverclosepropagation"] = args ? args.serverclosepropagation : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nsdiameter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nsdiameter resources.
 */
export interface NsdiameterState {
    identity?: pulumi.Input<string>;
    ownernode?: pulumi.Input<number>;
    realm?: pulumi.Input<string>;
    serverclosepropagation?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nsdiameter resource.
 */
export interface NsdiameterArgs {
    identity?: pulumi.Input<string>;
    ownernode?: pulumi.Input<number>;
    realm?: pulumi.Input<string>;
    serverclosepropagation?: pulumi.Input<string>;
}
