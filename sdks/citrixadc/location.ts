// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Location extends pulumi.CustomResource {
    /**
     * Get an existing Location resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocationState, opts?: pulumi.CustomResourceOptions): Location {
        return new Location(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/location:Location';

    /**
     * Returns true if the given object is an instance of Location.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Location {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Location.__pulumiType;
    }

    public readonly ipfrom!: pulumi.Output<string>;
    public readonly ipto!: pulumi.Output<string>;
    public readonly latitude!: pulumi.Output<number>;
    public readonly longitude!: pulumi.Output<number>;
    public readonly preferredlocation!: pulumi.Output<string>;

    /**
     * Create a Location resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocationArgs | LocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocationState | undefined;
            resourceInputs["ipfrom"] = state ? state.ipfrom : undefined;
            resourceInputs["ipto"] = state ? state.ipto : undefined;
            resourceInputs["latitude"] = state ? state.latitude : undefined;
            resourceInputs["longitude"] = state ? state.longitude : undefined;
            resourceInputs["preferredlocation"] = state ? state.preferredlocation : undefined;
        } else {
            const args = argsOrState as LocationArgs | undefined;
            if ((!args || args.ipfrom === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipfrom'");
            }
            if ((!args || args.ipto === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipto'");
            }
            if ((!args || args.preferredlocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'preferredlocation'");
            }
            resourceInputs["ipfrom"] = args ? args.ipfrom : undefined;
            resourceInputs["ipto"] = args ? args.ipto : undefined;
            resourceInputs["latitude"] = args ? args.latitude : undefined;
            resourceInputs["longitude"] = args ? args.longitude : undefined;
            resourceInputs["preferredlocation"] = args ? args.preferredlocation : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Location.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Location resources.
 */
export interface LocationState {
    ipfrom?: pulumi.Input<string>;
    ipto?: pulumi.Input<string>;
    latitude?: pulumi.Input<number>;
    longitude?: pulumi.Input<number>;
    preferredlocation?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Location resource.
 */
export interface LocationArgs {
    ipfrom: pulumi.Input<string>;
    ipto: pulumi.Input<string>;
    latitude?: pulumi.Input<number>;
    longitude?: pulumi.Input<number>;
    preferredlocation: pulumi.Input<string>;
}
