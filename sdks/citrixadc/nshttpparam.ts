// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nshttpparam extends pulumi.CustomResource {
    /**
     * Get an existing Nshttpparam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NshttpparamState, opts?: pulumi.CustomResourceOptions): Nshttpparam {
        return new Nshttpparam(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nshttpparam:Nshttpparam';

    /**
     * Returns true if the given object is an instance of Nshttpparam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nshttpparam {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nshttpparam.__pulumiType;
    }

    public readonly conmultiplex!: pulumi.Output<string>;
    public readonly dropinvalreqs!: pulumi.Output<string>;
    public readonly http2serverside!: pulumi.Output<string>;
    public readonly ignoreconnectcodingscheme!: pulumi.Output<string>;
    public readonly insnssrvrhdr!: pulumi.Output<string>;
    public readonly logerrresp!: pulumi.Output<string>;
    public readonly markconnreqinval!: pulumi.Output<string>;
    public readonly markhttp09inval!: pulumi.Output<string>;
    public readonly maxreusepool!: pulumi.Output<number>;
    public readonly nssrvrhdr!: pulumi.Output<string>;

    /**
     * Create a Nshttpparam resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NshttpparamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NshttpparamArgs | NshttpparamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NshttpparamState | undefined;
            resourceInputs["conmultiplex"] = state ? state.conmultiplex : undefined;
            resourceInputs["dropinvalreqs"] = state ? state.dropinvalreqs : undefined;
            resourceInputs["http2serverside"] = state ? state.http2serverside : undefined;
            resourceInputs["ignoreconnectcodingscheme"] = state ? state.ignoreconnectcodingscheme : undefined;
            resourceInputs["insnssrvrhdr"] = state ? state.insnssrvrhdr : undefined;
            resourceInputs["logerrresp"] = state ? state.logerrresp : undefined;
            resourceInputs["markconnreqinval"] = state ? state.markconnreqinval : undefined;
            resourceInputs["markhttp09inval"] = state ? state.markhttp09inval : undefined;
            resourceInputs["maxreusepool"] = state ? state.maxreusepool : undefined;
            resourceInputs["nssrvrhdr"] = state ? state.nssrvrhdr : undefined;
        } else {
            const args = argsOrState as NshttpparamArgs | undefined;
            resourceInputs["conmultiplex"] = args ? args.conmultiplex : undefined;
            resourceInputs["dropinvalreqs"] = args ? args.dropinvalreqs : undefined;
            resourceInputs["http2serverside"] = args ? args.http2serverside : undefined;
            resourceInputs["ignoreconnectcodingscheme"] = args ? args.ignoreconnectcodingscheme : undefined;
            resourceInputs["insnssrvrhdr"] = args ? args.insnssrvrhdr : undefined;
            resourceInputs["logerrresp"] = args ? args.logerrresp : undefined;
            resourceInputs["markconnreqinval"] = args ? args.markconnreqinval : undefined;
            resourceInputs["markhttp09inval"] = args ? args.markhttp09inval : undefined;
            resourceInputs["maxreusepool"] = args ? args.maxreusepool : undefined;
            resourceInputs["nssrvrhdr"] = args ? args.nssrvrhdr : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nshttpparam.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nshttpparam resources.
 */
export interface NshttpparamState {
    conmultiplex?: pulumi.Input<string>;
    dropinvalreqs?: pulumi.Input<string>;
    http2serverside?: pulumi.Input<string>;
    ignoreconnectcodingscheme?: pulumi.Input<string>;
    insnssrvrhdr?: pulumi.Input<string>;
    logerrresp?: pulumi.Input<string>;
    markconnreqinval?: pulumi.Input<string>;
    markhttp09inval?: pulumi.Input<string>;
    maxreusepool?: pulumi.Input<number>;
    nssrvrhdr?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nshttpparam resource.
 */
export interface NshttpparamArgs {
    conmultiplex?: pulumi.Input<string>;
    dropinvalreqs?: pulumi.Input<string>;
    http2serverside?: pulumi.Input<string>;
    ignoreconnectcodingscheme?: pulumi.Input<string>;
    insnssrvrhdr?: pulumi.Input<string>;
    logerrresp?: pulumi.Input<string>;
    markconnreqinval?: pulumi.Input<string>;
    markhttp09inval?: pulumi.Input<string>;
    maxreusepool?: pulumi.Input<number>;
    nssrvrhdr?: pulumi.Input<string>;
}
