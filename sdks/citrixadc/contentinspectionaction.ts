// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Contentinspectionaction extends pulumi.CustomResource {
    /**
     * Get an existing Contentinspectionaction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContentinspectionactionState, opts?: pulumi.CustomResourceOptions): Contentinspectionaction {
        return new Contentinspectionaction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/contentinspectionaction:Contentinspectionaction';

    /**
     * Returns true if the given object is an instance of Contentinspectionaction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Contentinspectionaction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Contentinspectionaction.__pulumiType;
    }

    public readonly icapprofilename!: pulumi.Output<string>;
    public readonly ifserverdown!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly serverip!: pulumi.Output<string>;
    public readonly servername!: pulumi.Output<string>;
    public readonly serverport!: pulumi.Output<number>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Contentinspectionaction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContentinspectionactionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContentinspectionactionArgs | ContentinspectionactionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContentinspectionactionState | undefined;
            resourceInputs["icapprofilename"] = state ? state.icapprofilename : undefined;
            resourceInputs["ifserverdown"] = state ? state.ifserverdown : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serverip"] = state ? state.serverip : undefined;
            resourceInputs["servername"] = state ? state.servername : undefined;
            resourceInputs["serverport"] = state ? state.serverport : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ContentinspectionactionArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["icapprofilename"] = args ? args.icapprofilename : undefined;
            resourceInputs["ifserverdown"] = args ? args.ifserverdown : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverip"] = args ? args.serverip : undefined;
            resourceInputs["servername"] = args ? args.servername : undefined;
            resourceInputs["serverport"] = args ? args.serverport : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Contentinspectionaction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Contentinspectionaction resources.
 */
export interface ContentinspectionactionState {
    icapprofilename?: pulumi.Input<string>;
    ifserverdown?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serverip?: pulumi.Input<string>;
    servername?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Contentinspectionaction resource.
 */
export interface ContentinspectionactionArgs {
    icapprofilename?: pulumi.Input<string>;
    ifserverdown?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serverip?: pulumi.Input<string>;
    servername?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}
