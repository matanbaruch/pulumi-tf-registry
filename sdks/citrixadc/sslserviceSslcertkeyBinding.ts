// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SslserviceSslcertkeyBinding extends pulumi.CustomResource {
    /**
     * Get an existing SslserviceSslcertkeyBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslserviceSslcertkeyBindingState, opts?: pulumi.CustomResourceOptions): SslserviceSslcertkeyBinding {
        return new SslserviceSslcertkeyBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/sslserviceSslcertkeyBinding:SslserviceSslcertkeyBinding';

    /**
     * Returns true if the given object is an instance of SslserviceSslcertkeyBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslserviceSslcertkeyBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslserviceSslcertkeyBinding.__pulumiType;
    }

    public readonly ca!: pulumi.Output<boolean>;
    public readonly certkeyname!: pulumi.Output<string>;
    public readonly crlcheck!: pulumi.Output<string>;
    public readonly ocspcheck!: pulumi.Output<string>;
    public readonly servicename!: pulumi.Output<string>;
    public readonly skipcaname!: pulumi.Output<boolean>;
    public readonly snicert!: pulumi.Output<boolean>;

    /**
     * Create a SslserviceSslcertkeyBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslserviceSslcertkeyBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslserviceSslcertkeyBindingArgs | SslserviceSslcertkeyBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslserviceSslcertkeyBindingState | undefined;
            resourceInputs["ca"] = state ? state.ca : undefined;
            resourceInputs["certkeyname"] = state ? state.certkeyname : undefined;
            resourceInputs["crlcheck"] = state ? state.crlcheck : undefined;
            resourceInputs["ocspcheck"] = state ? state.ocspcheck : undefined;
            resourceInputs["servicename"] = state ? state.servicename : undefined;
            resourceInputs["skipcaname"] = state ? state.skipcaname : undefined;
            resourceInputs["snicert"] = state ? state.snicert : undefined;
        } else {
            const args = argsOrState as SslserviceSslcertkeyBindingArgs | undefined;
            if ((!args || args.certkeyname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certkeyname'");
            }
            if ((!args || args.servicename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicename'");
            }
            resourceInputs["ca"] = args ? args.ca : undefined;
            resourceInputs["certkeyname"] = args ? args.certkeyname : undefined;
            resourceInputs["crlcheck"] = args ? args.crlcheck : undefined;
            resourceInputs["ocspcheck"] = args ? args.ocspcheck : undefined;
            resourceInputs["servicename"] = args ? args.servicename : undefined;
            resourceInputs["skipcaname"] = args ? args.skipcaname : undefined;
            resourceInputs["snicert"] = args ? args.snicert : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SslserviceSslcertkeyBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SslserviceSslcertkeyBinding resources.
 */
export interface SslserviceSslcertkeyBindingState {
    ca?: pulumi.Input<boolean>;
    certkeyname?: pulumi.Input<string>;
    crlcheck?: pulumi.Input<string>;
    ocspcheck?: pulumi.Input<string>;
    servicename?: pulumi.Input<string>;
    skipcaname?: pulumi.Input<boolean>;
    snicert?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SslserviceSslcertkeyBinding resource.
 */
export interface SslserviceSslcertkeyBindingArgs {
    ca?: pulumi.Input<boolean>;
    certkeyname: pulumi.Input<string>;
    crlcheck?: pulumi.Input<string>;
    ocspcheck?: pulumi.Input<string>;
    servicename: pulumi.Input<string>;
    skipcaname?: pulumi.Input<boolean>;
    snicert?: pulumi.Input<boolean>;
}
