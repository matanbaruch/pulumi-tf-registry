// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Icaaccessprofile extends pulumi.CustomResource {
    /**
     * Get an existing Icaaccessprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IcaaccessprofileState, opts?: pulumi.CustomResourceOptions): Icaaccessprofile {
        return new Icaaccessprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/icaaccessprofile:Icaaccessprofile';

    /**
     * Returns true if the given object is an instance of Icaaccessprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Icaaccessprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Icaaccessprofile.__pulumiType;
    }

    public readonly clientaudioredirection!: pulumi.Output<string>;
    public readonly clientclipboardredirection!: pulumi.Output<string>;
    public readonly clientcomportredirection!: pulumi.Output<string>;
    public readonly clientdriveredirection!: pulumi.Output<string>;
    public readonly clientprinterredirection!: pulumi.Output<string>;
    public readonly clientusbdriveredirection!: pulumi.Output<string>;
    public readonly connectclientlptports!: pulumi.Output<string>;
    public readonly localremotedatasharing!: pulumi.Output<string>;
    public readonly multistream!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Icaaccessprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IcaaccessprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IcaaccessprofileArgs | IcaaccessprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IcaaccessprofileState | undefined;
            resourceInputs["clientaudioredirection"] = state ? state.clientaudioredirection : undefined;
            resourceInputs["clientclipboardredirection"] = state ? state.clientclipboardredirection : undefined;
            resourceInputs["clientcomportredirection"] = state ? state.clientcomportredirection : undefined;
            resourceInputs["clientdriveredirection"] = state ? state.clientdriveredirection : undefined;
            resourceInputs["clientprinterredirection"] = state ? state.clientprinterredirection : undefined;
            resourceInputs["clientusbdriveredirection"] = state ? state.clientusbdriveredirection : undefined;
            resourceInputs["connectclientlptports"] = state ? state.connectclientlptports : undefined;
            resourceInputs["localremotedatasharing"] = state ? state.localremotedatasharing : undefined;
            resourceInputs["multistream"] = state ? state.multistream : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as IcaaccessprofileArgs | undefined;
            resourceInputs["clientaudioredirection"] = args ? args.clientaudioredirection : undefined;
            resourceInputs["clientclipboardredirection"] = args ? args.clientclipboardredirection : undefined;
            resourceInputs["clientcomportredirection"] = args ? args.clientcomportredirection : undefined;
            resourceInputs["clientdriveredirection"] = args ? args.clientdriveredirection : undefined;
            resourceInputs["clientprinterredirection"] = args ? args.clientprinterredirection : undefined;
            resourceInputs["clientusbdriveredirection"] = args ? args.clientusbdriveredirection : undefined;
            resourceInputs["connectclientlptports"] = args ? args.connectclientlptports : undefined;
            resourceInputs["localremotedatasharing"] = args ? args.localremotedatasharing : undefined;
            resourceInputs["multistream"] = args ? args.multistream : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Icaaccessprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Icaaccessprofile resources.
 */
export interface IcaaccessprofileState {
    clientaudioredirection?: pulumi.Input<string>;
    clientclipboardredirection?: pulumi.Input<string>;
    clientcomportredirection?: pulumi.Input<string>;
    clientdriveredirection?: pulumi.Input<string>;
    clientprinterredirection?: pulumi.Input<string>;
    clientusbdriveredirection?: pulumi.Input<string>;
    connectclientlptports?: pulumi.Input<string>;
    localremotedatasharing?: pulumi.Input<string>;
    multistream?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Icaaccessprofile resource.
 */
export interface IcaaccessprofileArgs {
    clientaudioredirection?: pulumi.Input<string>;
    clientclipboardredirection?: pulumi.Input<string>;
    clientcomportredirection?: pulumi.Input<string>;
    clientdriveredirection?: pulumi.Input<string>;
    clientprinterredirection?: pulumi.Input<string>;
    clientusbdriveredirection?: pulumi.Input<string>;
    connectclientlptports?: pulumi.Input<string>;
    localremotedatasharing?: pulumi.Input<string>;
    multistream?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
