// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Cachecontentgroup extends pulumi.CustomResource {
    /**
     * Get an existing Cachecontentgroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CachecontentgroupState, opts?: pulumi.CustomResourceOptions): Cachecontentgroup {
        return new Cachecontentgroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/cachecontentgroup:Cachecontentgroup';

    /**
     * Returns true if the given object is an instance of Cachecontentgroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cachecontentgroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cachecontentgroup.__pulumiType;
    }

    public readonly absexpiries!: pulumi.Output<string[]>;
    public readonly absexpirygmts!: pulumi.Output<string[]>;
    public readonly alwaysevalpolicies!: pulumi.Output<string>;
    public readonly cachecontrol!: pulumi.Output<string>;
    public readonly expireatlastbyte!: pulumi.Output<string>;
    public readonly flashcache!: pulumi.Output<string>;
    public readonly heurexpiryparam!: pulumi.Output<number>;
    public readonly hitparams!: pulumi.Output<string[]>;
    public readonly hitselector!: pulumi.Output<string>;
    public readonly host!: pulumi.Output<string>;
    public readonly ignoreparamvaluecase!: pulumi.Output<string>;
    public readonly ignorereloadreq!: pulumi.Output<string>;
    public readonly ignorereqcachinghdrs!: pulumi.Output<string>;
    public readonly insertage!: pulumi.Output<string>;
    public readonly insertetag!: pulumi.Output<string>;
    public readonly insertvia!: pulumi.Output<string>;
    public readonly invalparams!: pulumi.Output<string[]>;
    public readonly invalrestrictedtohost!: pulumi.Output<string>;
    public readonly invalselector!: pulumi.Output<string>;
    public readonly lazydnsresolve!: pulumi.Output<string>;
    public readonly matchcookies!: pulumi.Output<string>;
    public readonly maxressize!: pulumi.Output<number>;
    public readonly memlimit!: pulumi.Output<number>;
    public readonly minhits!: pulumi.Output<number>;
    public readonly minressize!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly persistha!: pulumi.Output<string>;
    public readonly pinned!: pulumi.Output<string>;
    public readonly polleverytime!: pulumi.Output<string>;
    public readonly prefetch!: pulumi.Output<string>;
    public readonly prefetchmaxpending!: pulumi.Output<number>;
    public readonly prefetchperiod!: pulumi.Output<number>;
    public readonly prefetchperiodmillisec!: pulumi.Output<number>;
    public readonly query!: pulumi.Output<string>;
    public readonly quickabortsize!: pulumi.Output<number>;
    public readonly relexpiry!: pulumi.Output<number>;
    public readonly relexpirymillisec!: pulumi.Output<number>;
    public readonly removecookies!: pulumi.Output<string>;
    public readonly selectorvalue!: pulumi.Output<string>;
    public readonly tosecondary!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly weaknegrelexpiry!: pulumi.Output<number>;
    public readonly weakposrelexpiry!: pulumi.Output<number>;

    /**
     * Create a Cachecontentgroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CachecontentgroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CachecontentgroupArgs | CachecontentgroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CachecontentgroupState | undefined;
            resourceInputs["absexpiries"] = state ? state.absexpiries : undefined;
            resourceInputs["absexpirygmts"] = state ? state.absexpirygmts : undefined;
            resourceInputs["alwaysevalpolicies"] = state ? state.alwaysevalpolicies : undefined;
            resourceInputs["cachecontrol"] = state ? state.cachecontrol : undefined;
            resourceInputs["expireatlastbyte"] = state ? state.expireatlastbyte : undefined;
            resourceInputs["flashcache"] = state ? state.flashcache : undefined;
            resourceInputs["heurexpiryparam"] = state ? state.heurexpiryparam : undefined;
            resourceInputs["hitparams"] = state ? state.hitparams : undefined;
            resourceInputs["hitselector"] = state ? state.hitselector : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["ignoreparamvaluecase"] = state ? state.ignoreparamvaluecase : undefined;
            resourceInputs["ignorereloadreq"] = state ? state.ignorereloadreq : undefined;
            resourceInputs["ignorereqcachinghdrs"] = state ? state.ignorereqcachinghdrs : undefined;
            resourceInputs["insertage"] = state ? state.insertage : undefined;
            resourceInputs["insertetag"] = state ? state.insertetag : undefined;
            resourceInputs["insertvia"] = state ? state.insertvia : undefined;
            resourceInputs["invalparams"] = state ? state.invalparams : undefined;
            resourceInputs["invalrestrictedtohost"] = state ? state.invalrestrictedtohost : undefined;
            resourceInputs["invalselector"] = state ? state.invalselector : undefined;
            resourceInputs["lazydnsresolve"] = state ? state.lazydnsresolve : undefined;
            resourceInputs["matchcookies"] = state ? state.matchcookies : undefined;
            resourceInputs["maxressize"] = state ? state.maxressize : undefined;
            resourceInputs["memlimit"] = state ? state.memlimit : undefined;
            resourceInputs["minhits"] = state ? state.minhits : undefined;
            resourceInputs["minressize"] = state ? state.minressize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["persistha"] = state ? state.persistha : undefined;
            resourceInputs["pinned"] = state ? state.pinned : undefined;
            resourceInputs["polleverytime"] = state ? state.polleverytime : undefined;
            resourceInputs["prefetch"] = state ? state.prefetch : undefined;
            resourceInputs["prefetchmaxpending"] = state ? state.prefetchmaxpending : undefined;
            resourceInputs["prefetchperiod"] = state ? state.prefetchperiod : undefined;
            resourceInputs["prefetchperiodmillisec"] = state ? state.prefetchperiodmillisec : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["quickabortsize"] = state ? state.quickabortsize : undefined;
            resourceInputs["relexpiry"] = state ? state.relexpiry : undefined;
            resourceInputs["relexpirymillisec"] = state ? state.relexpirymillisec : undefined;
            resourceInputs["removecookies"] = state ? state.removecookies : undefined;
            resourceInputs["selectorvalue"] = state ? state.selectorvalue : undefined;
            resourceInputs["tosecondary"] = state ? state.tosecondary : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["weaknegrelexpiry"] = state ? state.weaknegrelexpiry : undefined;
            resourceInputs["weakposrelexpiry"] = state ? state.weakposrelexpiry : undefined;
        } else {
            const args = argsOrState as CachecontentgroupArgs | undefined;
            resourceInputs["absexpiries"] = args ? args.absexpiries : undefined;
            resourceInputs["absexpirygmts"] = args ? args.absexpirygmts : undefined;
            resourceInputs["alwaysevalpolicies"] = args ? args.alwaysevalpolicies : undefined;
            resourceInputs["cachecontrol"] = args ? args.cachecontrol : undefined;
            resourceInputs["expireatlastbyte"] = args ? args.expireatlastbyte : undefined;
            resourceInputs["flashcache"] = args ? args.flashcache : undefined;
            resourceInputs["heurexpiryparam"] = args ? args.heurexpiryparam : undefined;
            resourceInputs["hitparams"] = args ? args.hitparams : undefined;
            resourceInputs["hitselector"] = args ? args.hitselector : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["ignoreparamvaluecase"] = args ? args.ignoreparamvaluecase : undefined;
            resourceInputs["ignorereloadreq"] = args ? args.ignorereloadreq : undefined;
            resourceInputs["ignorereqcachinghdrs"] = args ? args.ignorereqcachinghdrs : undefined;
            resourceInputs["insertage"] = args ? args.insertage : undefined;
            resourceInputs["insertetag"] = args ? args.insertetag : undefined;
            resourceInputs["insertvia"] = args ? args.insertvia : undefined;
            resourceInputs["invalparams"] = args ? args.invalparams : undefined;
            resourceInputs["invalrestrictedtohost"] = args ? args.invalrestrictedtohost : undefined;
            resourceInputs["invalselector"] = args ? args.invalselector : undefined;
            resourceInputs["lazydnsresolve"] = args ? args.lazydnsresolve : undefined;
            resourceInputs["matchcookies"] = args ? args.matchcookies : undefined;
            resourceInputs["maxressize"] = args ? args.maxressize : undefined;
            resourceInputs["memlimit"] = args ? args.memlimit : undefined;
            resourceInputs["minhits"] = args ? args.minhits : undefined;
            resourceInputs["minressize"] = args ? args.minressize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistha"] = args ? args.persistha : undefined;
            resourceInputs["pinned"] = args ? args.pinned : undefined;
            resourceInputs["polleverytime"] = args ? args.polleverytime : undefined;
            resourceInputs["prefetch"] = args ? args.prefetch : undefined;
            resourceInputs["prefetchmaxpending"] = args ? args.prefetchmaxpending : undefined;
            resourceInputs["prefetchperiod"] = args ? args.prefetchperiod : undefined;
            resourceInputs["prefetchperiodmillisec"] = args ? args.prefetchperiodmillisec : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["quickabortsize"] = args ? args.quickabortsize : undefined;
            resourceInputs["relexpiry"] = args ? args.relexpiry : undefined;
            resourceInputs["relexpirymillisec"] = args ? args.relexpirymillisec : undefined;
            resourceInputs["removecookies"] = args ? args.removecookies : undefined;
            resourceInputs["selectorvalue"] = args ? args.selectorvalue : undefined;
            resourceInputs["tosecondary"] = args ? args.tosecondary : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["weaknegrelexpiry"] = args ? args.weaknegrelexpiry : undefined;
            resourceInputs["weakposrelexpiry"] = args ? args.weakposrelexpiry : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cachecontentgroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cachecontentgroup resources.
 */
export interface CachecontentgroupState {
    absexpiries?: pulumi.Input<pulumi.Input<string>[]>;
    absexpirygmts?: pulumi.Input<pulumi.Input<string>[]>;
    alwaysevalpolicies?: pulumi.Input<string>;
    cachecontrol?: pulumi.Input<string>;
    expireatlastbyte?: pulumi.Input<string>;
    flashcache?: pulumi.Input<string>;
    heurexpiryparam?: pulumi.Input<number>;
    hitparams?: pulumi.Input<pulumi.Input<string>[]>;
    hitselector?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    ignoreparamvaluecase?: pulumi.Input<string>;
    ignorereloadreq?: pulumi.Input<string>;
    ignorereqcachinghdrs?: pulumi.Input<string>;
    insertage?: pulumi.Input<string>;
    insertetag?: pulumi.Input<string>;
    insertvia?: pulumi.Input<string>;
    invalparams?: pulumi.Input<pulumi.Input<string>[]>;
    invalrestrictedtohost?: pulumi.Input<string>;
    invalselector?: pulumi.Input<string>;
    lazydnsresolve?: pulumi.Input<string>;
    matchcookies?: pulumi.Input<string>;
    maxressize?: pulumi.Input<number>;
    memlimit?: pulumi.Input<number>;
    minhits?: pulumi.Input<number>;
    minressize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    persistha?: pulumi.Input<string>;
    pinned?: pulumi.Input<string>;
    polleverytime?: pulumi.Input<string>;
    prefetch?: pulumi.Input<string>;
    prefetchmaxpending?: pulumi.Input<number>;
    prefetchperiod?: pulumi.Input<number>;
    prefetchperiodmillisec?: pulumi.Input<number>;
    query?: pulumi.Input<string>;
    quickabortsize?: pulumi.Input<number>;
    relexpiry?: pulumi.Input<number>;
    relexpirymillisec?: pulumi.Input<number>;
    removecookies?: pulumi.Input<string>;
    selectorvalue?: pulumi.Input<string>;
    tosecondary?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weaknegrelexpiry?: pulumi.Input<number>;
    weakposrelexpiry?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Cachecontentgroup resource.
 */
export interface CachecontentgroupArgs {
    absexpiries?: pulumi.Input<pulumi.Input<string>[]>;
    absexpirygmts?: pulumi.Input<pulumi.Input<string>[]>;
    alwaysevalpolicies?: pulumi.Input<string>;
    cachecontrol?: pulumi.Input<string>;
    expireatlastbyte?: pulumi.Input<string>;
    flashcache?: pulumi.Input<string>;
    heurexpiryparam?: pulumi.Input<number>;
    hitparams?: pulumi.Input<pulumi.Input<string>[]>;
    hitselector?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    ignoreparamvaluecase?: pulumi.Input<string>;
    ignorereloadreq?: pulumi.Input<string>;
    ignorereqcachinghdrs?: pulumi.Input<string>;
    insertage?: pulumi.Input<string>;
    insertetag?: pulumi.Input<string>;
    insertvia?: pulumi.Input<string>;
    invalparams?: pulumi.Input<pulumi.Input<string>[]>;
    invalrestrictedtohost?: pulumi.Input<string>;
    invalselector?: pulumi.Input<string>;
    lazydnsresolve?: pulumi.Input<string>;
    matchcookies?: pulumi.Input<string>;
    maxressize?: pulumi.Input<number>;
    memlimit?: pulumi.Input<number>;
    minhits?: pulumi.Input<number>;
    minressize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    persistha?: pulumi.Input<string>;
    pinned?: pulumi.Input<string>;
    polleverytime?: pulumi.Input<string>;
    prefetch?: pulumi.Input<string>;
    prefetchmaxpending?: pulumi.Input<number>;
    prefetchperiod?: pulumi.Input<number>;
    prefetchperiodmillisec?: pulumi.Input<number>;
    query?: pulumi.Input<string>;
    quickabortsize?: pulumi.Input<number>;
    relexpiry?: pulumi.Input<number>;
    relexpirymillisec?: pulumi.Input<number>;
    removecookies?: pulumi.Input<string>;
    selectorvalue?: pulumi.Input<string>;
    tosecondary?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weaknegrelexpiry?: pulumi.Input<number>;
    weakposrelexpiry?: pulumi.Input<number>;
}
