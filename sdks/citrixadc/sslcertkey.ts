// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sslcertkey extends pulumi.CustomResource {
    /**
     * Get an existing Sslcertkey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslcertkeyState, opts?: pulumi.CustomResourceOptions): Sslcertkey {
        return new Sslcertkey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/sslcertkey:Sslcertkey';

    /**
     * Returns true if the given object is an instance of Sslcertkey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sslcertkey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sslcertkey.__pulumiType;
    }

    public readonly bundle!: pulumi.Output<string>;
    public readonly cert!: pulumi.Output<string>;
    public readonly certkey!: pulumi.Output<string>;
    public readonly expirymonitor!: pulumi.Output<string>;
    public readonly fipskey!: pulumi.Output<string>;
    public readonly hsmkey!: pulumi.Output<string>;
    public readonly inform!: pulumi.Output<string>;
    public readonly key!: pulumi.Output<string>;
    public readonly linkcertkeyname!: pulumi.Output<string | undefined>;
    public readonly nodomaincheck!: pulumi.Output<boolean>;
    public readonly notificationperiod!: pulumi.Output<number>;
    public readonly ocspstaplingcache!: pulumi.Output<boolean>;
    public readonly passplain!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<boolean>;

    /**
     * Create a Sslcertkey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SslcertkeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslcertkeyArgs | SslcertkeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslcertkeyState | undefined;
            resourceInputs["bundle"] = state ? state.bundle : undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["certkey"] = state ? state.certkey : undefined;
            resourceInputs["expirymonitor"] = state ? state.expirymonitor : undefined;
            resourceInputs["fipskey"] = state ? state.fipskey : undefined;
            resourceInputs["hsmkey"] = state ? state.hsmkey : undefined;
            resourceInputs["inform"] = state ? state.inform : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["linkcertkeyname"] = state ? state.linkcertkeyname : undefined;
            resourceInputs["nodomaincheck"] = state ? state.nodomaincheck : undefined;
            resourceInputs["notificationperiod"] = state ? state.notificationperiod : undefined;
            resourceInputs["ocspstaplingcache"] = state ? state.ocspstaplingcache : undefined;
            resourceInputs["passplain"] = state ? state.passplain : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
        } else {
            const args = argsOrState as SslcertkeyArgs | undefined;
            resourceInputs["bundle"] = args ? args.bundle : undefined;
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["certkey"] = args ? args.certkey : undefined;
            resourceInputs["expirymonitor"] = args ? args.expirymonitor : undefined;
            resourceInputs["fipskey"] = args ? args.fipskey : undefined;
            resourceInputs["hsmkey"] = args ? args.hsmkey : undefined;
            resourceInputs["inform"] = args ? args.inform : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["linkcertkeyname"] = args ? args.linkcertkeyname : undefined;
            resourceInputs["nodomaincheck"] = args ? args.nodomaincheck : undefined;
            resourceInputs["notificationperiod"] = args ? args.notificationperiod : undefined;
            resourceInputs["ocspstaplingcache"] = args ? args.ocspstaplingcache : undefined;
            resourceInputs["passplain"] = args ? args.passplain : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sslcertkey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sslcertkey resources.
 */
export interface SslcertkeyState {
    bundle?: pulumi.Input<string>;
    cert?: pulumi.Input<string>;
    certkey?: pulumi.Input<string>;
    expirymonitor?: pulumi.Input<string>;
    fipskey?: pulumi.Input<string>;
    hsmkey?: pulumi.Input<string>;
    inform?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    linkcertkeyname?: pulumi.Input<string>;
    nodomaincheck?: pulumi.Input<boolean>;
    notificationperiod?: pulumi.Input<number>;
    ocspstaplingcache?: pulumi.Input<boolean>;
    passplain?: pulumi.Input<string>;
    password?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Sslcertkey resource.
 */
export interface SslcertkeyArgs {
    bundle?: pulumi.Input<string>;
    cert?: pulumi.Input<string>;
    certkey?: pulumi.Input<string>;
    expirymonitor?: pulumi.Input<string>;
    fipskey?: pulumi.Input<string>;
    hsmkey?: pulumi.Input<string>;
    inform?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    linkcertkeyname?: pulumi.Input<string>;
    nodomaincheck?: pulumi.Input<boolean>;
    notificationperiod?: pulumi.Input<number>;
    ocspstaplingcache?: pulumi.Input<boolean>;
    passplain?: pulumi.Input<string>;
    password?: pulumi.Input<boolean>;
}
