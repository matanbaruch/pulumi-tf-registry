// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Servicegroup extends pulumi.CustomResource {
    /**
     * Get an existing Servicegroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicegroupState, opts?: pulumi.CustomResourceOptions): Servicegroup {
        return new Servicegroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/servicegroup:Servicegroup';

    /**
     * Returns true if the given object is an instance of Servicegroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Servicegroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Servicegroup.__pulumiType;
    }

    public readonly appflowlog!: pulumi.Output<string>;
    public readonly autodisabledelay!: pulumi.Output<number>;
    public readonly autodisablegraceful!: pulumi.Output<string>;
    public readonly autoscale!: pulumi.Output<string>;
    public readonly cacheable!: pulumi.Output<string>;
    public readonly cachetype!: pulumi.Output<string>;
    public readonly cip!: pulumi.Output<string>;
    public readonly cipheader!: pulumi.Output<string>;
    public readonly cka!: pulumi.Output<string>;
    public readonly clttimeout!: pulumi.Output<number>;
    public readonly cmp!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly customserverid!: pulumi.Output<string>;
    public readonly dbsttl!: pulumi.Output<number>;
    public readonly delay!: pulumi.Output<number>;
    public readonly downstateflush!: pulumi.Output<string>;
    public readonly dupweight!: pulumi.Output<number>;
    public readonly graceful!: pulumi.Output<string>;
    public readonly hashid!: pulumi.Output<number>;
    public readonly healthmonitor!: pulumi.Output<string>;
    public readonly httpprofilename!: pulumi.Output<string>;
    public readonly includemembers!: pulumi.Output<boolean>;
    public readonly lbmonitor!: pulumi.Output<string | undefined>;
    public readonly lbvservers!: pulumi.Output<string[] | undefined>;
    public readonly maxbandwidth!: pulumi.Output<number>;
    public readonly maxclient!: pulumi.Output<number>;
    public readonly maxreq!: pulumi.Output<number>;
    public readonly memberport!: pulumi.Output<number>;
    public readonly monconnectionclose!: pulumi.Output<string>;
    public readonly monitornamesvc!: pulumi.Output<string>;
    public readonly monthreshold!: pulumi.Output<number>;
    public readonly nameserver!: pulumi.Output<string>;
    public readonly netprofile!: pulumi.Output<string>;
    public readonly pathmonitor!: pulumi.Output<string>;
    public readonly pathmonitorindv!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly riseapbrstatsmsgcode!: pulumi.Output<number>;
    public readonly rtspsessionidremap!: pulumi.Output<string>;
    public readonly sc!: pulumi.Output<string>;
    public readonly serverid!: pulumi.Output<number>;
    public readonly servername!: pulumi.Output<string>;
    public readonly servicegroupmembers!: pulumi.Output<string[] | undefined>;
    public readonly servicegroupmembersByServernames!: pulumi.Output<string[] | undefined>;
    public readonly servicegroupname!: pulumi.Output<string>;
    public readonly servicetype!: pulumi.Output<string>;
    public readonly sp!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly svrtimeout!: pulumi.Output<number>;
    public readonly tcpb!: pulumi.Output<string>;
    public readonly tcpprofilename!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<number>;
    public readonly useproxyport!: pulumi.Output<string>;
    public readonly usip!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a Servicegroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServicegroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicegroupArgs | ServicegroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicegroupState | undefined;
            resourceInputs["appflowlog"] = state ? state.appflowlog : undefined;
            resourceInputs["autodisabledelay"] = state ? state.autodisabledelay : undefined;
            resourceInputs["autodisablegraceful"] = state ? state.autodisablegraceful : undefined;
            resourceInputs["autoscale"] = state ? state.autoscale : undefined;
            resourceInputs["cacheable"] = state ? state.cacheable : undefined;
            resourceInputs["cachetype"] = state ? state.cachetype : undefined;
            resourceInputs["cip"] = state ? state.cip : undefined;
            resourceInputs["cipheader"] = state ? state.cipheader : undefined;
            resourceInputs["cka"] = state ? state.cka : undefined;
            resourceInputs["clttimeout"] = state ? state.clttimeout : undefined;
            resourceInputs["cmp"] = state ? state.cmp : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["customserverid"] = state ? state.customserverid : undefined;
            resourceInputs["dbsttl"] = state ? state.dbsttl : undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["downstateflush"] = state ? state.downstateflush : undefined;
            resourceInputs["dupweight"] = state ? state.dupweight : undefined;
            resourceInputs["graceful"] = state ? state.graceful : undefined;
            resourceInputs["hashid"] = state ? state.hashid : undefined;
            resourceInputs["healthmonitor"] = state ? state.healthmonitor : undefined;
            resourceInputs["httpprofilename"] = state ? state.httpprofilename : undefined;
            resourceInputs["includemembers"] = state ? state.includemembers : undefined;
            resourceInputs["lbmonitor"] = state ? state.lbmonitor : undefined;
            resourceInputs["lbvservers"] = state ? state.lbvservers : undefined;
            resourceInputs["maxbandwidth"] = state ? state.maxbandwidth : undefined;
            resourceInputs["maxclient"] = state ? state.maxclient : undefined;
            resourceInputs["maxreq"] = state ? state.maxreq : undefined;
            resourceInputs["memberport"] = state ? state.memberport : undefined;
            resourceInputs["monconnectionclose"] = state ? state.monconnectionclose : undefined;
            resourceInputs["monitornamesvc"] = state ? state.monitornamesvc : undefined;
            resourceInputs["monthreshold"] = state ? state.monthreshold : undefined;
            resourceInputs["nameserver"] = state ? state.nameserver : undefined;
            resourceInputs["netprofile"] = state ? state.netprofile : undefined;
            resourceInputs["pathmonitor"] = state ? state.pathmonitor : undefined;
            resourceInputs["pathmonitorindv"] = state ? state.pathmonitorindv : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["riseapbrstatsmsgcode"] = state ? state.riseapbrstatsmsgcode : undefined;
            resourceInputs["rtspsessionidremap"] = state ? state.rtspsessionidremap : undefined;
            resourceInputs["sc"] = state ? state.sc : undefined;
            resourceInputs["serverid"] = state ? state.serverid : undefined;
            resourceInputs["servername"] = state ? state.servername : undefined;
            resourceInputs["servicegroupmembers"] = state ? state.servicegroupmembers : undefined;
            resourceInputs["servicegroupmembersByServernames"] = state ? state.servicegroupmembersByServernames : undefined;
            resourceInputs["servicegroupname"] = state ? state.servicegroupname : undefined;
            resourceInputs["servicetype"] = state ? state.servicetype : undefined;
            resourceInputs["sp"] = state ? state.sp : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["svrtimeout"] = state ? state.svrtimeout : undefined;
            resourceInputs["tcpb"] = state ? state.tcpb : undefined;
            resourceInputs["tcpprofilename"] = state ? state.tcpprofilename : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["useproxyport"] = state ? state.useproxyport : undefined;
            resourceInputs["usip"] = state ? state.usip : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as ServicegroupArgs | undefined;
            resourceInputs["appflowlog"] = args ? args.appflowlog : undefined;
            resourceInputs["autodisabledelay"] = args ? args.autodisabledelay : undefined;
            resourceInputs["autodisablegraceful"] = args ? args.autodisablegraceful : undefined;
            resourceInputs["autoscale"] = args ? args.autoscale : undefined;
            resourceInputs["cacheable"] = args ? args.cacheable : undefined;
            resourceInputs["cachetype"] = args ? args.cachetype : undefined;
            resourceInputs["cip"] = args ? args.cip : undefined;
            resourceInputs["cipheader"] = args ? args.cipheader : undefined;
            resourceInputs["cka"] = args ? args.cka : undefined;
            resourceInputs["clttimeout"] = args ? args.clttimeout : undefined;
            resourceInputs["cmp"] = args ? args.cmp : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["customserverid"] = args ? args.customserverid : undefined;
            resourceInputs["dbsttl"] = args ? args.dbsttl : undefined;
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["downstateflush"] = args ? args.downstateflush : undefined;
            resourceInputs["dupweight"] = args ? args.dupweight : undefined;
            resourceInputs["graceful"] = args ? args.graceful : undefined;
            resourceInputs["hashid"] = args ? args.hashid : undefined;
            resourceInputs["healthmonitor"] = args ? args.healthmonitor : undefined;
            resourceInputs["httpprofilename"] = args ? args.httpprofilename : undefined;
            resourceInputs["includemembers"] = args ? args.includemembers : undefined;
            resourceInputs["lbmonitor"] = args ? args.lbmonitor : undefined;
            resourceInputs["lbvservers"] = args ? args.lbvservers : undefined;
            resourceInputs["maxbandwidth"] = args ? args.maxbandwidth : undefined;
            resourceInputs["maxclient"] = args ? args.maxclient : undefined;
            resourceInputs["maxreq"] = args ? args.maxreq : undefined;
            resourceInputs["memberport"] = args ? args.memberport : undefined;
            resourceInputs["monconnectionclose"] = args ? args.monconnectionclose : undefined;
            resourceInputs["monitornamesvc"] = args ? args.monitornamesvc : undefined;
            resourceInputs["monthreshold"] = args ? args.monthreshold : undefined;
            resourceInputs["nameserver"] = args ? args.nameserver : undefined;
            resourceInputs["netprofile"] = args ? args.netprofile : undefined;
            resourceInputs["pathmonitor"] = args ? args.pathmonitor : undefined;
            resourceInputs["pathmonitorindv"] = args ? args.pathmonitorindv : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["riseapbrstatsmsgcode"] = args ? args.riseapbrstatsmsgcode : undefined;
            resourceInputs["rtspsessionidremap"] = args ? args.rtspsessionidremap : undefined;
            resourceInputs["sc"] = args ? args.sc : undefined;
            resourceInputs["serverid"] = args ? args.serverid : undefined;
            resourceInputs["servername"] = args ? args.servername : undefined;
            resourceInputs["servicegroupmembers"] = args ? args.servicegroupmembers : undefined;
            resourceInputs["servicegroupmembersByServernames"] = args ? args.servicegroupmembersByServernames : undefined;
            resourceInputs["servicegroupname"] = args ? args.servicegroupname : undefined;
            resourceInputs["servicetype"] = args ? args.servicetype : undefined;
            resourceInputs["sp"] = args ? args.sp : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["svrtimeout"] = args ? args.svrtimeout : undefined;
            resourceInputs["tcpb"] = args ? args.tcpb : undefined;
            resourceInputs["tcpprofilename"] = args ? args.tcpprofilename : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["useproxyport"] = args ? args.useproxyport : undefined;
            resourceInputs["usip"] = args ? args.usip : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Servicegroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Servicegroup resources.
 */
export interface ServicegroupState {
    appflowlog?: pulumi.Input<string>;
    autodisabledelay?: pulumi.Input<number>;
    autodisablegraceful?: pulumi.Input<string>;
    autoscale?: pulumi.Input<string>;
    cacheable?: pulumi.Input<string>;
    cachetype?: pulumi.Input<string>;
    cip?: pulumi.Input<string>;
    cipheader?: pulumi.Input<string>;
    cka?: pulumi.Input<string>;
    clttimeout?: pulumi.Input<number>;
    cmp?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    customserverid?: pulumi.Input<string>;
    dbsttl?: pulumi.Input<number>;
    delay?: pulumi.Input<number>;
    downstateflush?: pulumi.Input<string>;
    dupweight?: pulumi.Input<number>;
    graceful?: pulumi.Input<string>;
    hashid?: pulumi.Input<number>;
    healthmonitor?: pulumi.Input<string>;
    httpprofilename?: pulumi.Input<string>;
    includemembers?: pulumi.Input<boolean>;
    lbmonitor?: pulumi.Input<string>;
    lbvservers?: pulumi.Input<pulumi.Input<string>[]>;
    maxbandwidth?: pulumi.Input<number>;
    maxclient?: pulumi.Input<number>;
    maxreq?: pulumi.Input<number>;
    memberport?: pulumi.Input<number>;
    monconnectionclose?: pulumi.Input<string>;
    monitornamesvc?: pulumi.Input<string>;
    monthreshold?: pulumi.Input<number>;
    nameserver?: pulumi.Input<string>;
    netprofile?: pulumi.Input<string>;
    pathmonitor?: pulumi.Input<string>;
    pathmonitorindv?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    riseapbrstatsmsgcode?: pulumi.Input<number>;
    rtspsessionidremap?: pulumi.Input<string>;
    sc?: pulumi.Input<string>;
    serverid?: pulumi.Input<number>;
    servername?: pulumi.Input<string>;
    servicegroupmembers?: pulumi.Input<pulumi.Input<string>[]>;
    servicegroupmembersByServernames?: pulumi.Input<pulumi.Input<string>[]>;
    servicegroupname?: pulumi.Input<string>;
    servicetype?: pulumi.Input<string>;
    sp?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    svrtimeout?: pulumi.Input<number>;
    tcpb?: pulumi.Input<string>;
    tcpprofilename?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    useproxyport?: pulumi.Input<string>;
    usip?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Servicegroup resource.
 */
export interface ServicegroupArgs {
    appflowlog?: pulumi.Input<string>;
    autodisabledelay?: pulumi.Input<number>;
    autodisablegraceful?: pulumi.Input<string>;
    autoscale?: pulumi.Input<string>;
    cacheable?: pulumi.Input<string>;
    cachetype?: pulumi.Input<string>;
    cip?: pulumi.Input<string>;
    cipheader?: pulumi.Input<string>;
    cka?: pulumi.Input<string>;
    clttimeout?: pulumi.Input<number>;
    cmp?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    customserverid?: pulumi.Input<string>;
    dbsttl?: pulumi.Input<number>;
    delay?: pulumi.Input<number>;
    downstateflush?: pulumi.Input<string>;
    dupweight?: pulumi.Input<number>;
    graceful?: pulumi.Input<string>;
    hashid?: pulumi.Input<number>;
    healthmonitor?: pulumi.Input<string>;
    httpprofilename?: pulumi.Input<string>;
    includemembers?: pulumi.Input<boolean>;
    lbmonitor?: pulumi.Input<string>;
    lbvservers?: pulumi.Input<pulumi.Input<string>[]>;
    maxbandwidth?: pulumi.Input<number>;
    maxclient?: pulumi.Input<number>;
    maxreq?: pulumi.Input<number>;
    memberport?: pulumi.Input<number>;
    monconnectionclose?: pulumi.Input<string>;
    monitornamesvc?: pulumi.Input<string>;
    monthreshold?: pulumi.Input<number>;
    nameserver?: pulumi.Input<string>;
    netprofile?: pulumi.Input<string>;
    pathmonitor?: pulumi.Input<string>;
    pathmonitorindv?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    riseapbrstatsmsgcode?: pulumi.Input<number>;
    rtspsessionidremap?: pulumi.Input<string>;
    sc?: pulumi.Input<string>;
    serverid?: pulumi.Input<number>;
    servername?: pulumi.Input<string>;
    servicegroupmembers?: pulumi.Input<pulumi.Input<string>[]>;
    servicegroupmembersByServernames?: pulumi.Input<pulumi.Input<string>[]>;
    servicegroupname?: pulumi.Input<string>;
    servicetype?: pulumi.Input<string>;
    sp?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    svrtimeout?: pulumi.Input<number>;
    tcpb?: pulumi.Input<string>;
    tcpprofilename?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
    useproxyport?: pulumi.Input<string>;
    usip?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}
