// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Contentinspectionprofile extends pulumi.CustomResource {
    /**
     * Get an existing Contentinspectionprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContentinspectionprofileState, opts?: pulumi.CustomResourceOptions): Contentinspectionprofile {
        return new Contentinspectionprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/contentinspectionprofile:Contentinspectionprofile';

    /**
     * Returns true if the given object is an instance of Contentinspectionprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Contentinspectionprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Contentinspectionprofile.__pulumiType;
    }

    public readonly egressinterface!: pulumi.Output<string>;
    public readonly egressvlan!: pulumi.Output<number>;
    public readonly ingressinterface!: pulumi.Output<string>;
    public readonly ingressvlan!: pulumi.Output<number>;
    public readonly iptunnel!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Contentinspectionprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContentinspectionprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContentinspectionprofileArgs | ContentinspectionprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContentinspectionprofileState | undefined;
            resourceInputs["egressinterface"] = state ? state.egressinterface : undefined;
            resourceInputs["egressvlan"] = state ? state.egressvlan : undefined;
            resourceInputs["ingressinterface"] = state ? state.ingressinterface : undefined;
            resourceInputs["ingressvlan"] = state ? state.ingressvlan : undefined;
            resourceInputs["iptunnel"] = state ? state.iptunnel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ContentinspectionprofileArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["egressinterface"] = args ? args.egressinterface : undefined;
            resourceInputs["egressvlan"] = args ? args.egressvlan : undefined;
            resourceInputs["ingressinterface"] = args ? args.ingressinterface : undefined;
            resourceInputs["ingressvlan"] = args ? args.ingressvlan : undefined;
            resourceInputs["iptunnel"] = args ? args.iptunnel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Contentinspectionprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Contentinspectionprofile resources.
 */
export interface ContentinspectionprofileState {
    egressinterface?: pulumi.Input<string>;
    egressvlan?: pulumi.Input<number>;
    ingressinterface?: pulumi.Input<string>;
    ingressvlan?: pulumi.Input<number>;
    iptunnel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Contentinspectionprofile resource.
 */
export interface ContentinspectionprofileArgs {
    egressinterface?: pulumi.Input<string>;
    egressvlan?: pulumi.Input<number>;
    ingressinterface?: pulumi.Input<string>;
    ingressvlan?: pulumi.Input<number>;
    iptunnel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
