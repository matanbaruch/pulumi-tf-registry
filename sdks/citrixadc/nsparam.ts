// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nsparam extends pulumi.CustomResource {
    /**
     * Get an existing Nsparam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsparamState, opts?: pulumi.CustomResourceOptions): Nsparam {
        return new Nsparam(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nsparam:Nsparam';

    /**
     * Returns true if the given object is an instance of Nsparam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nsparam {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nsparam.__pulumiType;
    }

    public readonly advancedanalyticsstats!: pulumi.Output<string>;
    public readonly aftpallowrandomsourceport!: pulumi.Output<string>;
    public readonly cip!: pulumi.Output<string>;
    public readonly cipheader!: pulumi.Output<string>;
    public readonly cookieversion!: pulumi.Output<string>;
    public readonly crportrange!: pulumi.Output<string>;
    public readonly exclusivequotamaxclient!: pulumi.Output<number>;
    public readonly exclusivequotaspillover!: pulumi.Output<number>;
    public readonly ftpportrange!: pulumi.Output<string>;
    public readonly grantquotamaxclient!: pulumi.Output<number>;
    public readonly grantquotaspillover!: pulumi.Output<number>;
    public readonly internaluserlogin!: pulumi.Output<string>;
    public readonly maxconn!: pulumi.Output<number>;
    public readonly maxreq!: pulumi.Output<number>;
    public readonly mgmthttpport!: pulumi.Output<number>;
    public readonly mgmthttpsport!: pulumi.Output<number>;
    public readonly pmtumin!: pulumi.Output<number>;
    public readonly pmtutimeout!: pulumi.Output<number>;
    public readonly proxyprotocol!: pulumi.Output<string>;
    public readonly securecookie!: pulumi.Output<string>;
    public readonly servicepathingressvlan!: pulumi.Output<number>;
    public readonly tcpcip!: pulumi.Output<string>;
    public readonly timezone!: pulumi.Output<string>;
    public readonly useproxyport!: pulumi.Output<string>;

    /**
     * Create a Nsparam resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NsparamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsparamArgs | NsparamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsparamState | undefined;
            resourceInputs["advancedanalyticsstats"] = state ? state.advancedanalyticsstats : undefined;
            resourceInputs["aftpallowrandomsourceport"] = state ? state.aftpallowrandomsourceport : undefined;
            resourceInputs["cip"] = state ? state.cip : undefined;
            resourceInputs["cipheader"] = state ? state.cipheader : undefined;
            resourceInputs["cookieversion"] = state ? state.cookieversion : undefined;
            resourceInputs["crportrange"] = state ? state.crportrange : undefined;
            resourceInputs["exclusivequotamaxclient"] = state ? state.exclusivequotamaxclient : undefined;
            resourceInputs["exclusivequotaspillover"] = state ? state.exclusivequotaspillover : undefined;
            resourceInputs["ftpportrange"] = state ? state.ftpportrange : undefined;
            resourceInputs["grantquotamaxclient"] = state ? state.grantquotamaxclient : undefined;
            resourceInputs["grantquotaspillover"] = state ? state.grantquotaspillover : undefined;
            resourceInputs["internaluserlogin"] = state ? state.internaluserlogin : undefined;
            resourceInputs["maxconn"] = state ? state.maxconn : undefined;
            resourceInputs["maxreq"] = state ? state.maxreq : undefined;
            resourceInputs["mgmthttpport"] = state ? state.mgmthttpport : undefined;
            resourceInputs["mgmthttpsport"] = state ? state.mgmthttpsport : undefined;
            resourceInputs["pmtumin"] = state ? state.pmtumin : undefined;
            resourceInputs["pmtutimeout"] = state ? state.pmtutimeout : undefined;
            resourceInputs["proxyprotocol"] = state ? state.proxyprotocol : undefined;
            resourceInputs["securecookie"] = state ? state.securecookie : undefined;
            resourceInputs["servicepathingressvlan"] = state ? state.servicepathingressvlan : undefined;
            resourceInputs["tcpcip"] = state ? state.tcpcip : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["useproxyport"] = state ? state.useproxyport : undefined;
        } else {
            const args = argsOrState as NsparamArgs | undefined;
            resourceInputs["advancedanalyticsstats"] = args ? args.advancedanalyticsstats : undefined;
            resourceInputs["aftpallowrandomsourceport"] = args ? args.aftpallowrandomsourceport : undefined;
            resourceInputs["cip"] = args ? args.cip : undefined;
            resourceInputs["cipheader"] = args ? args.cipheader : undefined;
            resourceInputs["cookieversion"] = args ? args.cookieversion : undefined;
            resourceInputs["crportrange"] = args ? args.crportrange : undefined;
            resourceInputs["exclusivequotamaxclient"] = args ? args.exclusivequotamaxclient : undefined;
            resourceInputs["exclusivequotaspillover"] = args ? args.exclusivequotaspillover : undefined;
            resourceInputs["ftpportrange"] = args ? args.ftpportrange : undefined;
            resourceInputs["grantquotamaxclient"] = args ? args.grantquotamaxclient : undefined;
            resourceInputs["grantquotaspillover"] = args ? args.grantquotaspillover : undefined;
            resourceInputs["internaluserlogin"] = args ? args.internaluserlogin : undefined;
            resourceInputs["maxconn"] = args ? args.maxconn : undefined;
            resourceInputs["maxreq"] = args ? args.maxreq : undefined;
            resourceInputs["mgmthttpport"] = args ? args.mgmthttpport : undefined;
            resourceInputs["mgmthttpsport"] = args ? args.mgmthttpsport : undefined;
            resourceInputs["pmtumin"] = args ? args.pmtumin : undefined;
            resourceInputs["pmtutimeout"] = args ? args.pmtutimeout : undefined;
            resourceInputs["proxyprotocol"] = args ? args.proxyprotocol : undefined;
            resourceInputs["securecookie"] = args ? args.securecookie : undefined;
            resourceInputs["servicepathingressvlan"] = args ? args.servicepathingressvlan : undefined;
            resourceInputs["tcpcip"] = args ? args.tcpcip : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["useproxyport"] = args ? args.useproxyport : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nsparam.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nsparam resources.
 */
export interface NsparamState {
    advancedanalyticsstats?: pulumi.Input<string>;
    aftpallowrandomsourceport?: pulumi.Input<string>;
    cip?: pulumi.Input<string>;
    cipheader?: pulumi.Input<string>;
    cookieversion?: pulumi.Input<string>;
    crportrange?: pulumi.Input<string>;
    exclusivequotamaxclient?: pulumi.Input<number>;
    exclusivequotaspillover?: pulumi.Input<number>;
    ftpportrange?: pulumi.Input<string>;
    grantquotamaxclient?: pulumi.Input<number>;
    grantquotaspillover?: pulumi.Input<number>;
    internaluserlogin?: pulumi.Input<string>;
    maxconn?: pulumi.Input<number>;
    maxreq?: pulumi.Input<number>;
    mgmthttpport?: pulumi.Input<number>;
    mgmthttpsport?: pulumi.Input<number>;
    pmtumin?: pulumi.Input<number>;
    pmtutimeout?: pulumi.Input<number>;
    proxyprotocol?: pulumi.Input<string>;
    securecookie?: pulumi.Input<string>;
    servicepathingressvlan?: pulumi.Input<number>;
    tcpcip?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    useproxyport?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nsparam resource.
 */
export interface NsparamArgs {
    advancedanalyticsstats?: pulumi.Input<string>;
    aftpallowrandomsourceport?: pulumi.Input<string>;
    cip?: pulumi.Input<string>;
    cipheader?: pulumi.Input<string>;
    cookieversion?: pulumi.Input<string>;
    crportrange?: pulumi.Input<string>;
    exclusivequotamaxclient?: pulumi.Input<number>;
    exclusivequotaspillover?: pulumi.Input<number>;
    ftpportrange?: pulumi.Input<string>;
    grantquotamaxclient?: pulumi.Input<number>;
    grantquotaspillover?: pulumi.Input<number>;
    internaluserlogin?: pulumi.Input<string>;
    maxconn?: pulumi.Input<number>;
    maxreq?: pulumi.Input<number>;
    mgmthttpport?: pulumi.Input<number>;
    mgmthttpsport?: pulumi.Input<number>;
    pmtumin?: pulumi.Input<number>;
    pmtutimeout?: pulumi.Input<number>;
    proxyprotocol?: pulumi.Input<string>;
    securecookie?: pulumi.Input<string>;
    servicepathingressvlan?: pulumi.Input<number>;
    tcpcip?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    useproxyport?: pulumi.Input<string>;
}
