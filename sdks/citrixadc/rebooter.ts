// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Rebooter extends pulumi.CustomResource {
    /**
     * Get an existing Rebooter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RebooterState, opts?: pulumi.CustomResourceOptions): Rebooter {
        return new Rebooter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/rebooter:Rebooter';

    /**
     * Returns true if the given object is an instance of Rebooter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rebooter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rebooter.__pulumiType;
    }

    public readonly reachablePollDelay!: pulumi.Output<string | undefined>;
    public readonly reachablePollInterval!: pulumi.Output<string | undefined>;
    public readonly reachablePollTimeout!: pulumi.Output<string | undefined>;
    public readonly reachableTimeout!: pulumi.Output<string | undefined>;
    public readonly timestamp!: pulumi.Output<string>;
    public readonly waitUntilReachable!: pulumi.Output<boolean>;
    public readonly warm!: pulumi.Output<boolean>;

    /**
     * Create a Rebooter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RebooterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RebooterArgs | RebooterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RebooterState | undefined;
            resourceInputs["reachablePollDelay"] = state ? state.reachablePollDelay : undefined;
            resourceInputs["reachablePollInterval"] = state ? state.reachablePollInterval : undefined;
            resourceInputs["reachablePollTimeout"] = state ? state.reachablePollTimeout : undefined;
            resourceInputs["reachableTimeout"] = state ? state.reachableTimeout : undefined;
            resourceInputs["timestamp"] = state ? state.timestamp : undefined;
            resourceInputs["waitUntilReachable"] = state ? state.waitUntilReachable : undefined;
            resourceInputs["warm"] = state ? state.warm : undefined;
        } else {
            const args = argsOrState as RebooterArgs | undefined;
            if ((!args || args.timestamp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timestamp'");
            }
            if ((!args || args.waitUntilReachable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'waitUntilReachable'");
            }
            if ((!args || args.warm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'warm'");
            }
            resourceInputs["reachablePollDelay"] = args ? args.reachablePollDelay : undefined;
            resourceInputs["reachablePollInterval"] = args ? args.reachablePollInterval : undefined;
            resourceInputs["reachablePollTimeout"] = args ? args.reachablePollTimeout : undefined;
            resourceInputs["reachableTimeout"] = args ? args.reachableTimeout : undefined;
            resourceInputs["timestamp"] = args ? args.timestamp : undefined;
            resourceInputs["waitUntilReachable"] = args ? args.waitUntilReachable : undefined;
            resourceInputs["warm"] = args ? args.warm : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rebooter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Rebooter resources.
 */
export interface RebooterState {
    reachablePollDelay?: pulumi.Input<string>;
    reachablePollInterval?: pulumi.Input<string>;
    reachablePollTimeout?: pulumi.Input<string>;
    reachableTimeout?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
    waitUntilReachable?: pulumi.Input<boolean>;
    warm?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Rebooter resource.
 */
export interface RebooterArgs {
    reachablePollDelay?: pulumi.Input<string>;
    reachablePollInterval?: pulumi.Input<string>;
    reachablePollTimeout?: pulumi.Input<string>;
    reachableTimeout?: pulumi.Input<string>;
    timestamp: pulumi.Input<string>;
    waitUntilReachable: pulumi.Input<boolean>;
    warm: pulumi.Input<boolean>;
}
