// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnglobalSslcertkeyBinding extends pulumi.CustomResource {
    /**
     * Get an existing VpnglobalSslcertkeyBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnglobalSslcertkeyBindingState, opts?: pulumi.CustomResourceOptions): VpnglobalSslcertkeyBinding {
        return new VpnglobalSslcertkeyBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/vpnglobalSslcertkeyBinding:VpnglobalSslcertkeyBinding';

    /**
     * Returns true if the given object is an instance of VpnglobalSslcertkeyBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnglobalSslcertkeyBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnglobalSslcertkeyBinding.__pulumiType;
    }

    public readonly cacert!: pulumi.Output<string>;
    public readonly certkeyname!: pulumi.Output<string>;
    public readonly crlcheck!: pulumi.Output<string>;
    public readonly gotopriorityexpression!: pulumi.Output<string>;
    public readonly ocspcheck!: pulumi.Output<string>;
    public readonly userdataencryptionkey!: pulumi.Output<string>;

    /**
     * Create a VpnglobalSslcertkeyBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnglobalSslcertkeyBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnglobalSslcertkeyBindingArgs | VpnglobalSslcertkeyBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnglobalSslcertkeyBindingState | undefined;
            resourceInputs["cacert"] = state ? state.cacert : undefined;
            resourceInputs["certkeyname"] = state ? state.certkeyname : undefined;
            resourceInputs["crlcheck"] = state ? state.crlcheck : undefined;
            resourceInputs["gotopriorityexpression"] = state ? state.gotopriorityexpression : undefined;
            resourceInputs["ocspcheck"] = state ? state.ocspcheck : undefined;
            resourceInputs["userdataencryptionkey"] = state ? state.userdataencryptionkey : undefined;
        } else {
            const args = argsOrState as VpnglobalSslcertkeyBindingArgs | undefined;
            if ((!args || args.certkeyname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certkeyname'");
            }
            resourceInputs["cacert"] = args ? args.cacert : undefined;
            resourceInputs["certkeyname"] = args ? args.certkeyname : undefined;
            resourceInputs["crlcheck"] = args ? args.crlcheck : undefined;
            resourceInputs["gotopriorityexpression"] = args ? args.gotopriorityexpression : undefined;
            resourceInputs["ocspcheck"] = args ? args.ocspcheck : undefined;
            resourceInputs["userdataencryptionkey"] = args ? args.userdataencryptionkey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnglobalSslcertkeyBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnglobalSslcertkeyBinding resources.
 */
export interface VpnglobalSslcertkeyBindingState {
    cacert?: pulumi.Input<string>;
    certkeyname?: pulumi.Input<string>;
    crlcheck?: pulumi.Input<string>;
    gotopriorityexpression?: pulumi.Input<string>;
    ocspcheck?: pulumi.Input<string>;
    userdataencryptionkey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnglobalSslcertkeyBinding resource.
 */
export interface VpnglobalSslcertkeyBindingArgs {
    cacert?: pulumi.Input<string>;
    certkeyname: pulumi.Input<string>;
    crlcheck?: pulumi.Input<string>;
    gotopriorityexpression?: pulumi.Input<string>;
    ocspcheck?: pulumi.Input<string>;
    userdataencryptionkey?: pulumi.Input<string>;
}
