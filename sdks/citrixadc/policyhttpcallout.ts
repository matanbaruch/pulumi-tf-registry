// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Policyhttpcallout extends pulumi.CustomResource {
    /**
     * Get an existing Policyhttpcallout resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyhttpcalloutState, opts?: pulumi.CustomResourceOptions): Policyhttpcallout {
        return new Policyhttpcallout(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/policyhttpcallout:Policyhttpcallout';

    /**
     * Returns true if the given object is an instance of Policyhttpcallout.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policyhttpcallout {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policyhttpcallout.__pulumiType;
    }

    public readonly bodyexpr!: pulumi.Output<string>;
    public readonly cacheforsecs!: pulumi.Output<number>;
    public readonly comment!: pulumi.Output<string>;
    public readonly fullreqexpr!: pulumi.Output<string>;
    public readonly headers!: pulumi.Output<string[]>;
    public readonly hostexpr!: pulumi.Output<string>;
    public readonly httpmethod!: pulumi.Output<string>;
    public readonly ipaddress!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<string[]>;
    public readonly port!: pulumi.Output<number>;
    public readonly resultexpr!: pulumi.Output<string>;
    public readonly returntype!: pulumi.Output<string | undefined>;
    public readonly scheme!: pulumi.Output<string>;
    public readonly urlstemexpr!: pulumi.Output<string>;
    public readonly vserver!: pulumi.Output<string>;

    /**
     * Create a Policyhttpcallout resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyhttpcalloutArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyhttpcalloutArgs | PolicyhttpcalloutState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyhttpcalloutState | undefined;
            resourceInputs["bodyexpr"] = state ? state.bodyexpr : undefined;
            resourceInputs["cacheforsecs"] = state ? state.cacheforsecs : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["fullreqexpr"] = state ? state.fullreqexpr : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["hostexpr"] = state ? state.hostexpr : undefined;
            resourceInputs["httpmethod"] = state ? state.httpmethod : undefined;
            resourceInputs["ipaddress"] = state ? state.ipaddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["resultexpr"] = state ? state.resultexpr : undefined;
            resourceInputs["returntype"] = state ? state.returntype : undefined;
            resourceInputs["scheme"] = state ? state.scheme : undefined;
            resourceInputs["urlstemexpr"] = state ? state.urlstemexpr : undefined;
            resourceInputs["vserver"] = state ? state.vserver : undefined;
        } else {
            const args = argsOrState as PolicyhttpcalloutArgs | undefined;
            resourceInputs["bodyexpr"] = args ? args.bodyexpr : undefined;
            resourceInputs["cacheforsecs"] = args ? args.cacheforsecs : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["fullreqexpr"] = args ? args.fullreqexpr : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["hostexpr"] = args ? args.hostexpr : undefined;
            resourceInputs["httpmethod"] = args ? args.httpmethod : undefined;
            resourceInputs["ipaddress"] = args ? args.ipaddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["resultexpr"] = args ? args.resultexpr : undefined;
            resourceInputs["returntype"] = args ? args.returntype : undefined;
            resourceInputs["scheme"] = args ? args.scheme : undefined;
            resourceInputs["urlstemexpr"] = args ? args.urlstemexpr : undefined;
            resourceInputs["vserver"] = args ? args.vserver : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policyhttpcallout.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Policyhttpcallout resources.
 */
export interface PolicyhttpcalloutState {
    bodyexpr?: pulumi.Input<string>;
    cacheforsecs?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    fullreqexpr?: pulumi.Input<string>;
    headers?: pulumi.Input<pulumi.Input<string>[]>;
    hostexpr?: pulumi.Input<string>;
    httpmethod?: pulumi.Input<string>;
    ipaddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    resultexpr?: pulumi.Input<string>;
    returntype?: pulumi.Input<string>;
    scheme?: pulumi.Input<string>;
    urlstemexpr?: pulumi.Input<string>;
    vserver?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policyhttpcallout resource.
 */
export interface PolicyhttpcalloutArgs {
    bodyexpr?: pulumi.Input<string>;
    cacheforsecs?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    fullreqexpr?: pulumi.Input<string>;
    headers?: pulumi.Input<pulumi.Input<string>[]>;
    hostexpr?: pulumi.Input<string>;
    httpmethod?: pulumi.Input<string>;
    ipaddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    resultexpr?: pulumi.Input<string>;
    returntype?: pulumi.Input<string>;
    scheme?: pulumi.Input<string>;
    urlstemexpr?: pulumi.Input<string>;
    vserver?: pulumi.Input<string>;
}
