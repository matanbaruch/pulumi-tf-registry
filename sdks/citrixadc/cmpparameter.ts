// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Cmpparameter extends pulumi.CustomResource {
    /**
     * Get an existing Cmpparameter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmpparameterState, opts?: pulumi.CustomResourceOptions): Cmpparameter {
        return new Cmpparameter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/cmpparameter:Cmpparameter';

    /**
     * Returns true if the given object is an instance of Cmpparameter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cmpparameter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cmpparameter.__pulumiType;
    }

    public readonly addvaryheader!: pulumi.Output<string>;
    public readonly cmpbypasspct!: pulumi.Output<number>;
    public readonly cmplevel!: pulumi.Output<string>;
    public readonly cmponpush!: pulumi.Output<string>;
    public readonly externalcache!: pulumi.Output<string>;
    public readonly heurexpiry!: pulumi.Output<string>;
    public readonly heurexpiryhistwt!: pulumi.Output<number>;
    public readonly heurexpirythres!: pulumi.Output<number>;
    public readonly minressize!: pulumi.Output<number>;
    public readonly policytype!: pulumi.Output<string>;
    public readonly quantumsize!: pulumi.Output<number>;
    public readonly servercmp!: pulumi.Output<string>;
    public readonly varyheadervalue!: pulumi.Output<string>;

    /**
     * Create a Cmpparameter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CmpparameterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmpparameterArgs | CmpparameterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmpparameterState | undefined;
            resourceInputs["addvaryheader"] = state ? state.addvaryheader : undefined;
            resourceInputs["cmpbypasspct"] = state ? state.cmpbypasspct : undefined;
            resourceInputs["cmplevel"] = state ? state.cmplevel : undefined;
            resourceInputs["cmponpush"] = state ? state.cmponpush : undefined;
            resourceInputs["externalcache"] = state ? state.externalcache : undefined;
            resourceInputs["heurexpiry"] = state ? state.heurexpiry : undefined;
            resourceInputs["heurexpiryhistwt"] = state ? state.heurexpiryhistwt : undefined;
            resourceInputs["heurexpirythres"] = state ? state.heurexpirythres : undefined;
            resourceInputs["minressize"] = state ? state.minressize : undefined;
            resourceInputs["policytype"] = state ? state.policytype : undefined;
            resourceInputs["quantumsize"] = state ? state.quantumsize : undefined;
            resourceInputs["servercmp"] = state ? state.servercmp : undefined;
            resourceInputs["varyheadervalue"] = state ? state.varyheadervalue : undefined;
        } else {
            const args = argsOrState as CmpparameterArgs | undefined;
            resourceInputs["addvaryheader"] = args ? args.addvaryheader : undefined;
            resourceInputs["cmpbypasspct"] = args ? args.cmpbypasspct : undefined;
            resourceInputs["cmplevel"] = args ? args.cmplevel : undefined;
            resourceInputs["cmponpush"] = args ? args.cmponpush : undefined;
            resourceInputs["externalcache"] = args ? args.externalcache : undefined;
            resourceInputs["heurexpiry"] = args ? args.heurexpiry : undefined;
            resourceInputs["heurexpiryhistwt"] = args ? args.heurexpiryhistwt : undefined;
            resourceInputs["heurexpirythres"] = args ? args.heurexpirythres : undefined;
            resourceInputs["minressize"] = args ? args.minressize : undefined;
            resourceInputs["policytype"] = args ? args.policytype : undefined;
            resourceInputs["quantumsize"] = args ? args.quantumsize : undefined;
            resourceInputs["servercmp"] = args ? args.servercmp : undefined;
            resourceInputs["varyheadervalue"] = args ? args.varyheadervalue : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cmpparameter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cmpparameter resources.
 */
export interface CmpparameterState {
    addvaryheader?: pulumi.Input<string>;
    cmpbypasspct?: pulumi.Input<number>;
    cmplevel?: pulumi.Input<string>;
    cmponpush?: pulumi.Input<string>;
    externalcache?: pulumi.Input<string>;
    heurexpiry?: pulumi.Input<string>;
    heurexpiryhistwt?: pulumi.Input<number>;
    heurexpirythres?: pulumi.Input<number>;
    minressize?: pulumi.Input<number>;
    policytype?: pulumi.Input<string>;
    quantumsize?: pulumi.Input<number>;
    servercmp?: pulumi.Input<string>;
    varyheadervalue?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cmpparameter resource.
 */
export interface CmpparameterArgs {
    addvaryheader?: pulumi.Input<string>;
    cmpbypasspct?: pulumi.Input<number>;
    cmplevel?: pulumi.Input<string>;
    cmponpush?: pulumi.Input<string>;
    externalcache?: pulumi.Input<string>;
    heurexpiry?: pulumi.Input<string>;
    heurexpiryhistwt?: pulumi.Input<number>;
    heurexpirythres?: pulumi.Input<number>;
    minressize?: pulumi.Input<number>;
    policytype?: pulumi.Input<string>;
    quantumsize?: pulumi.Input<number>;
    servercmp?: pulumi.Input<string>;
    varyheadervalue?: pulumi.Input<string>;
}
