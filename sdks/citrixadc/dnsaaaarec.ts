// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Dnsaaaarec extends pulumi.CustomResource {
    /**
     * Get an existing Dnsaaaarec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsaaaarecState, opts?: pulumi.CustomResourceOptions): Dnsaaaarec {
        return new Dnsaaaarec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/dnsaaaarec:Dnsaaaarec';

    /**
     * Returns true if the given object is an instance of Dnsaaaarec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dnsaaaarec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dnsaaaarec.__pulumiType;
    }

    public readonly ecssubnet!: pulumi.Output<string | undefined>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly ipv6address!: pulumi.Output<string>;
    public readonly nodeid!: pulumi.Output<number | undefined>;
    public readonly ttl!: pulumi.Output<number | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a Dnsaaaarec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsaaaarecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsaaaarecArgs | DnsaaaarecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsaaaarecState | undefined;
            resourceInputs["ecssubnet"] = state ? state.ecssubnet : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ipv6address"] = state ? state.ipv6address : undefined;
            resourceInputs["nodeid"] = state ? state.nodeid : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DnsaaaarecArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.ipv6address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipv6address'");
            }
            resourceInputs["ecssubnet"] = args ? args.ecssubnet : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ipv6address"] = args ? args.ipv6address : undefined;
            resourceInputs["nodeid"] = args ? args.nodeid : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dnsaaaarec.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dnsaaaarec resources.
 */
export interface DnsaaaarecState {
    ecssubnet?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    ipv6address?: pulumi.Input<string>;
    nodeid?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dnsaaaarec resource.
 */
export interface DnsaaaarecArgs {
    ecssubnet?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    ipv6address: pulumi.Input<string>;
    nodeid?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}
