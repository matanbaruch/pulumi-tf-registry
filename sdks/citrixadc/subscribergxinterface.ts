// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Subscribergxinterface extends pulumi.CustomResource {
    /**
     * Get an existing Subscribergxinterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubscribergxinterfaceState, opts?: pulumi.CustomResourceOptions): Subscribergxinterface {
        return new Subscribergxinterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/subscribergxinterface:Subscribergxinterface';

    /**
     * Returns true if the given object is an instance of Subscribergxinterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subscribergxinterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subscribergxinterface.__pulumiType;
    }

    public readonly cerrequesttimeout!: pulumi.Output<number>;
    public readonly healthcheck!: pulumi.Output<string>;
    public readonly healthcheckttl!: pulumi.Output<number>;
    public readonly holdonsubscriberabsence!: pulumi.Output<string>;
    public readonly idlettl!: pulumi.Output<number>;
    public readonly negativettl!: pulumi.Output<number>;
    public readonly negativettllimitedsuccess!: pulumi.Output<string>;
    public readonly nodeid!: pulumi.Output<number>;
    public readonly pcrfrealm!: pulumi.Output<string>;
    public readonly purgesdbongxfailure!: pulumi.Output<string>;
    public readonly requestretryattempts!: pulumi.Output<number>;
    public readonly requesttimeout!: pulumi.Output<number>;
    public readonly revalidationtimeout!: pulumi.Output<number>;
    public readonly service!: pulumi.Output<string>;
    public readonly servicepathavps!: pulumi.Output<number[]>;
    public readonly servicepathvendorid!: pulumi.Output<number>;
    public readonly vserver!: pulumi.Output<string>;

    /**
     * Create a Subscribergxinterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SubscribergxinterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubscribergxinterfaceArgs | SubscribergxinterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubscribergxinterfaceState | undefined;
            resourceInputs["cerrequesttimeout"] = state ? state.cerrequesttimeout : undefined;
            resourceInputs["healthcheck"] = state ? state.healthcheck : undefined;
            resourceInputs["healthcheckttl"] = state ? state.healthcheckttl : undefined;
            resourceInputs["holdonsubscriberabsence"] = state ? state.holdonsubscriberabsence : undefined;
            resourceInputs["idlettl"] = state ? state.idlettl : undefined;
            resourceInputs["negativettl"] = state ? state.negativettl : undefined;
            resourceInputs["negativettllimitedsuccess"] = state ? state.negativettllimitedsuccess : undefined;
            resourceInputs["nodeid"] = state ? state.nodeid : undefined;
            resourceInputs["pcrfrealm"] = state ? state.pcrfrealm : undefined;
            resourceInputs["purgesdbongxfailure"] = state ? state.purgesdbongxfailure : undefined;
            resourceInputs["requestretryattempts"] = state ? state.requestretryattempts : undefined;
            resourceInputs["requesttimeout"] = state ? state.requesttimeout : undefined;
            resourceInputs["revalidationtimeout"] = state ? state.revalidationtimeout : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["servicepathavps"] = state ? state.servicepathavps : undefined;
            resourceInputs["servicepathvendorid"] = state ? state.servicepathvendorid : undefined;
            resourceInputs["vserver"] = state ? state.vserver : undefined;
        } else {
            const args = argsOrState as SubscribergxinterfaceArgs | undefined;
            resourceInputs["cerrequesttimeout"] = args ? args.cerrequesttimeout : undefined;
            resourceInputs["healthcheck"] = args ? args.healthcheck : undefined;
            resourceInputs["healthcheckttl"] = args ? args.healthcheckttl : undefined;
            resourceInputs["holdonsubscriberabsence"] = args ? args.holdonsubscriberabsence : undefined;
            resourceInputs["idlettl"] = args ? args.idlettl : undefined;
            resourceInputs["negativettl"] = args ? args.negativettl : undefined;
            resourceInputs["negativettllimitedsuccess"] = args ? args.negativettllimitedsuccess : undefined;
            resourceInputs["nodeid"] = args ? args.nodeid : undefined;
            resourceInputs["pcrfrealm"] = args ? args.pcrfrealm : undefined;
            resourceInputs["purgesdbongxfailure"] = args ? args.purgesdbongxfailure : undefined;
            resourceInputs["requestretryattempts"] = args ? args.requestretryattempts : undefined;
            resourceInputs["requesttimeout"] = args ? args.requesttimeout : undefined;
            resourceInputs["revalidationtimeout"] = args ? args.revalidationtimeout : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["servicepathavps"] = args ? args.servicepathavps : undefined;
            resourceInputs["servicepathvendorid"] = args ? args.servicepathvendorid : undefined;
            resourceInputs["vserver"] = args ? args.vserver : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subscribergxinterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Subscribergxinterface resources.
 */
export interface SubscribergxinterfaceState {
    cerrequesttimeout?: pulumi.Input<number>;
    healthcheck?: pulumi.Input<string>;
    healthcheckttl?: pulumi.Input<number>;
    holdonsubscriberabsence?: pulumi.Input<string>;
    idlettl?: pulumi.Input<number>;
    negativettl?: pulumi.Input<number>;
    negativettllimitedsuccess?: pulumi.Input<string>;
    nodeid?: pulumi.Input<number>;
    pcrfrealm?: pulumi.Input<string>;
    purgesdbongxfailure?: pulumi.Input<string>;
    requestretryattempts?: pulumi.Input<number>;
    requesttimeout?: pulumi.Input<number>;
    revalidationtimeout?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    servicepathavps?: pulumi.Input<pulumi.Input<number>[]>;
    servicepathvendorid?: pulumi.Input<number>;
    vserver?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subscribergxinterface resource.
 */
export interface SubscribergxinterfaceArgs {
    cerrequesttimeout?: pulumi.Input<number>;
    healthcheck?: pulumi.Input<string>;
    healthcheckttl?: pulumi.Input<number>;
    holdonsubscriberabsence?: pulumi.Input<string>;
    idlettl?: pulumi.Input<number>;
    negativettl?: pulumi.Input<number>;
    negativettllimitedsuccess?: pulumi.Input<string>;
    nodeid?: pulumi.Input<number>;
    pcrfrealm?: pulumi.Input<string>;
    purgesdbongxfailure?: pulumi.Input<string>;
    requestretryattempts?: pulumi.Input<number>;
    requesttimeout?: pulumi.Input<number>;
    revalidationtimeout?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    servicepathavps?: pulumi.Input<pulumi.Input<number>[]>;
    servicepathvendorid?: pulumi.Input<number>;
    vserver?: pulumi.Input<string>;
}
