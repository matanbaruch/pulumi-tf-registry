// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Lsngroup extends pulumi.CustomResource {
    /**
     * Get an existing Lsngroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LsngroupState, opts?: pulumi.CustomResourceOptions): Lsngroup {
        return new Lsngroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/lsngroup:Lsngroup';

    /**
     * Returns true if the given object is an instance of Lsngroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lsngroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lsngroup.__pulumiType;
    }

    public readonly allocpolicy!: pulumi.Output<string | undefined>;
    public readonly clientname!: pulumi.Output<string>;
    public readonly ftp!: pulumi.Output<string>;
    public readonly ftpcm!: pulumi.Output<string>;
    public readonly groupname!: pulumi.Output<string>;
    public readonly ip6profile!: pulumi.Output<string | undefined>;
    public readonly logging!: pulumi.Output<string>;
    public readonly nattype!: pulumi.Output<string | undefined>;
    public readonly portblocksize!: pulumi.Output<number>;
    public readonly pptp!: pulumi.Output<string>;
    public readonly rtspalg!: pulumi.Output<string>;
    public readonly sessionlogging!: pulumi.Output<string>;
    public readonly sessionsync!: pulumi.Output<string>;
    public readonly sipalg!: pulumi.Output<string>;
    public readonly snmptraplimit!: pulumi.Output<string>;

    /**
     * Create a Lsngroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LsngroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LsngroupArgs | LsngroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LsngroupState | undefined;
            resourceInputs["allocpolicy"] = state ? state.allocpolicy : undefined;
            resourceInputs["clientname"] = state ? state.clientname : undefined;
            resourceInputs["ftp"] = state ? state.ftp : undefined;
            resourceInputs["ftpcm"] = state ? state.ftpcm : undefined;
            resourceInputs["groupname"] = state ? state.groupname : undefined;
            resourceInputs["ip6profile"] = state ? state.ip6profile : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["nattype"] = state ? state.nattype : undefined;
            resourceInputs["portblocksize"] = state ? state.portblocksize : undefined;
            resourceInputs["pptp"] = state ? state.pptp : undefined;
            resourceInputs["rtspalg"] = state ? state.rtspalg : undefined;
            resourceInputs["sessionlogging"] = state ? state.sessionlogging : undefined;
            resourceInputs["sessionsync"] = state ? state.sessionsync : undefined;
            resourceInputs["sipalg"] = state ? state.sipalg : undefined;
            resourceInputs["snmptraplimit"] = state ? state.snmptraplimit : undefined;
        } else {
            const args = argsOrState as LsngroupArgs | undefined;
            if ((!args || args.clientname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientname'");
            }
            if ((!args || args.groupname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupname'");
            }
            resourceInputs["allocpolicy"] = args ? args.allocpolicy : undefined;
            resourceInputs["clientname"] = args ? args.clientname : undefined;
            resourceInputs["ftp"] = args ? args.ftp : undefined;
            resourceInputs["ftpcm"] = args ? args.ftpcm : undefined;
            resourceInputs["groupname"] = args ? args.groupname : undefined;
            resourceInputs["ip6profile"] = args ? args.ip6profile : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["nattype"] = args ? args.nattype : undefined;
            resourceInputs["portblocksize"] = args ? args.portblocksize : undefined;
            resourceInputs["pptp"] = args ? args.pptp : undefined;
            resourceInputs["rtspalg"] = args ? args.rtspalg : undefined;
            resourceInputs["sessionlogging"] = args ? args.sessionlogging : undefined;
            resourceInputs["sessionsync"] = args ? args.sessionsync : undefined;
            resourceInputs["sipalg"] = args ? args.sipalg : undefined;
            resourceInputs["snmptraplimit"] = args ? args.snmptraplimit : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lsngroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lsngroup resources.
 */
export interface LsngroupState {
    allocpolicy?: pulumi.Input<string>;
    clientname?: pulumi.Input<string>;
    ftp?: pulumi.Input<string>;
    ftpcm?: pulumi.Input<string>;
    groupname?: pulumi.Input<string>;
    ip6profile?: pulumi.Input<string>;
    logging?: pulumi.Input<string>;
    nattype?: pulumi.Input<string>;
    portblocksize?: pulumi.Input<number>;
    pptp?: pulumi.Input<string>;
    rtspalg?: pulumi.Input<string>;
    sessionlogging?: pulumi.Input<string>;
    sessionsync?: pulumi.Input<string>;
    sipalg?: pulumi.Input<string>;
    snmptraplimit?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lsngroup resource.
 */
export interface LsngroupArgs {
    allocpolicy?: pulumi.Input<string>;
    clientname: pulumi.Input<string>;
    ftp?: pulumi.Input<string>;
    ftpcm?: pulumi.Input<string>;
    groupname: pulumi.Input<string>;
    ip6profile?: pulumi.Input<string>;
    logging?: pulumi.Input<string>;
    nattype?: pulumi.Input<string>;
    portblocksize?: pulumi.Input<number>;
    pptp?: pulumi.Input<string>;
    rtspalg?: pulumi.Input<string>;
    sessionlogging?: pulumi.Input<string>;
    sessionsync?: pulumi.Input<string>;
    sipalg?: pulumi.Input<string>;
    snmptraplimit?: pulumi.Input<string>;
}
