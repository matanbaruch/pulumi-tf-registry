// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNitroInfo(args?: GetNitroInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetNitroInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("citrixadc:index/getNitroInfo:getNitroInfo", {
        "id": args.id,
        "nitroLists": args.nitroLists,
        "nitroObject": args.nitroObject,
        "primaryId": args.primaryId,
        "secondaryId": args.secondaryId,
        "workflow": args.workflow,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNitroInfo.
 */
export interface GetNitroInfoArgs {
    id?: string;
    nitroLists?: inputs.GetNitroInfoNitroList[];
    nitroObject?: {[key: string]: string};
    primaryId?: string;
    secondaryId?: string;
    workflow?: {[key: string]: string};
}

/**
 * A collection of values returned by getNitroInfo.
 */
export interface GetNitroInfoResult {
    readonly id: string;
    readonly nitroLists?: outputs.GetNitroInfoNitroList[];
    readonly nitroObject: {[key: string]: string};
    readonly primaryId: string;
    readonly secondaryId: string;
    readonly workflow: {[key: string]: string};
}
export function getNitroInfoOutput(args?: GetNitroInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNitroInfoResult> {
    return pulumi.output(args).apply((a: any) => getNitroInfo(a, opts))
}

/**
 * A collection of arguments for invoking getNitroInfo.
 */
export interface GetNitroInfoOutputArgs {
    id?: pulumi.Input<string>;
    nitroLists?: pulumi.Input<pulumi.Input<inputs.GetNitroInfoNitroListArgs>[]>;
    nitroObject?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    primaryId?: pulumi.Input<string>;
    secondaryId?: pulumi.Input<string>;
    workflow?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
