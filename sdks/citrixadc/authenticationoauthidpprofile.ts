// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Authenticationoauthidpprofile extends pulumi.CustomResource {
    /**
     * Get an existing Authenticationoauthidpprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticationoauthidpprofileState, opts?: pulumi.CustomResourceOptions): Authenticationoauthidpprofile {
        return new Authenticationoauthidpprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/authenticationoauthidpprofile:Authenticationoauthidpprofile';

    /**
     * Returns true if the given object is an instance of Authenticationoauthidpprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Authenticationoauthidpprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authenticationoauthidpprofile.__pulumiType;
    }

    public readonly attributes!: pulumi.Output<string>;
    public readonly audience!: pulumi.Output<string>;
    public readonly clientid!: pulumi.Output<string>;
    public readonly clientsecret!: pulumi.Output<string>;
    public readonly configservice!: pulumi.Output<string>;
    public readonly defaultauthenticationgroup!: pulumi.Output<string>;
    public readonly encrypttoken!: pulumi.Output<string>;
    public readonly issuer!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly redirecturl!: pulumi.Output<string>;
    public readonly refreshinterval!: pulumi.Output<number>;
    public readonly relyingpartymetadataurl!: pulumi.Output<string>;
    public readonly sendpassword!: pulumi.Output<string>;
    public readonly signaturealg!: pulumi.Output<string>;
    public readonly signatureservice!: pulumi.Output<string>;
    public readonly skewtime!: pulumi.Output<number>;

    /**
     * Create a Authenticationoauthidpprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthenticationoauthidpprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticationoauthidpprofileArgs | AuthenticationoauthidpprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticationoauthidpprofileState | undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["clientid"] = state ? state.clientid : undefined;
            resourceInputs["clientsecret"] = state ? state.clientsecret : undefined;
            resourceInputs["configservice"] = state ? state.configservice : undefined;
            resourceInputs["defaultauthenticationgroup"] = state ? state.defaultauthenticationgroup : undefined;
            resourceInputs["encrypttoken"] = state ? state.encrypttoken : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["redirecturl"] = state ? state.redirecturl : undefined;
            resourceInputs["refreshinterval"] = state ? state.refreshinterval : undefined;
            resourceInputs["relyingpartymetadataurl"] = state ? state.relyingpartymetadataurl : undefined;
            resourceInputs["sendpassword"] = state ? state.sendpassword : undefined;
            resourceInputs["signaturealg"] = state ? state.signaturealg : undefined;
            resourceInputs["signatureservice"] = state ? state.signatureservice : undefined;
            resourceInputs["skewtime"] = state ? state.skewtime : undefined;
        } else {
            const args = argsOrState as AuthenticationoauthidpprofileArgs | undefined;
            if ((!args || args.clientid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientid'");
            }
            if ((!args || args.clientsecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientsecret'");
            }
            if ((!args || args.redirecturl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redirecturl'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["clientid"] = args ? args.clientid : undefined;
            resourceInputs["clientsecret"] = args ? args.clientsecret : undefined;
            resourceInputs["configservice"] = args ? args.configservice : undefined;
            resourceInputs["defaultauthenticationgroup"] = args ? args.defaultauthenticationgroup : undefined;
            resourceInputs["encrypttoken"] = args ? args.encrypttoken : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["redirecturl"] = args ? args.redirecturl : undefined;
            resourceInputs["refreshinterval"] = args ? args.refreshinterval : undefined;
            resourceInputs["relyingpartymetadataurl"] = args ? args.relyingpartymetadataurl : undefined;
            resourceInputs["sendpassword"] = args ? args.sendpassword : undefined;
            resourceInputs["signaturealg"] = args ? args.signaturealg : undefined;
            resourceInputs["signatureservice"] = args ? args.signatureservice : undefined;
            resourceInputs["skewtime"] = args ? args.skewtime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Authenticationoauthidpprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Authenticationoauthidpprofile resources.
 */
export interface AuthenticationoauthidpprofileState {
    attributes?: pulumi.Input<string>;
    audience?: pulumi.Input<string>;
    clientid?: pulumi.Input<string>;
    clientsecret?: pulumi.Input<string>;
    configservice?: pulumi.Input<string>;
    defaultauthenticationgroup?: pulumi.Input<string>;
    encrypttoken?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    redirecturl?: pulumi.Input<string>;
    refreshinterval?: pulumi.Input<number>;
    relyingpartymetadataurl?: pulumi.Input<string>;
    sendpassword?: pulumi.Input<string>;
    signaturealg?: pulumi.Input<string>;
    signatureservice?: pulumi.Input<string>;
    skewtime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Authenticationoauthidpprofile resource.
 */
export interface AuthenticationoauthidpprofileArgs {
    attributes?: pulumi.Input<string>;
    audience?: pulumi.Input<string>;
    clientid: pulumi.Input<string>;
    clientsecret: pulumi.Input<string>;
    configservice?: pulumi.Input<string>;
    defaultauthenticationgroup?: pulumi.Input<string>;
    encrypttoken?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    redirecturl: pulumi.Input<string>;
    refreshinterval?: pulumi.Input<number>;
    relyingpartymetadataurl?: pulumi.Input<string>;
    sendpassword?: pulumi.Input<string>;
    signaturealg?: pulumi.Input<string>;
    signatureservice?: pulumi.Input<string>;
    skewtime?: pulumi.Input<number>;
}
