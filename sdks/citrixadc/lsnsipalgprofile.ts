// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Lsnsipalgprofile extends pulumi.CustomResource {
    /**
     * Get an existing Lsnsipalgprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LsnsipalgprofileState, opts?: pulumi.CustomResourceOptions): Lsnsipalgprofile {
        return new Lsnsipalgprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/lsnsipalgprofile:Lsnsipalgprofile';

    /**
     * Returns true if the given object is an instance of Lsnsipalgprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lsnsipalgprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lsnsipalgprofile.__pulumiType;
    }

    public readonly datasessionidletimeout!: pulumi.Output<number>;
    public readonly opencontactpinhole!: pulumi.Output<string>;
    public readonly openrecordroutepinhole!: pulumi.Output<string>;
    public readonly openregisterpinhole!: pulumi.Output<string>;
    public readonly openroutepinhole!: pulumi.Output<string>;
    public readonly openviapinhole!: pulumi.Output<string>;
    public readonly registrationtimeout!: pulumi.Output<number>;
    public readonly rport!: pulumi.Output<string>;
    public readonly sipalgprofilename!: pulumi.Output<string>;
    public readonly sipdstportrange!: pulumi.Output<string>;
    public readonly sipsessiontimeout!: pulumi.Output<number>;
    public readonly sipsrcportrange!: pulumi.Output<string>;
    public readonly siptransportprotocol!: pulumi.Output<string>;

    /**
     * Create a Lsnsipalgprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LsnsipalgprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LsnsipalgprofileArgs | LsnsipalgprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LsnsipalgprofileState | undefined;
            resourceInputs["datasessionidletimeout"] = state ? state.datasessionidletimeout : undefined;
            resourceInputs["opencontactpinhole"] = state ? state.opencontactpinhole : undefined;
            resourceInputs["openrecordroutepinhole"] = state ? state.openrecordroutepinhole : undefined;
            resourceInputs["openregisterpinhole"] = state ? state.openregisterpinhole : undefined;
            resourceInputs["openroutepinhole"] = state ? state.openroutepinhole : undefined;
            resourceInputs["openviapinhole"] = state ? state.openviapinhole : undefined;
            resourceInputs["registrationtimeout"] = state ? state.registrationtimeout : undefined;
            resourceInputs["rport"] = state ? state.rport : undefined;
            resourceInputs["sipalgprofilename"] = state ? state.sipalgprofilename : undefined;
            resourceInputs["sipdstportrange"] = state ? state.sipdstportrange : undefined;
            resourceInputs["sipsessiontimeout"] = state ? state.sipsessiontimeout : undefined;
            resourceInputs["sipsrcportrange"] = state ? state.sipsrcportrange : undefined;
            resourceInputs["siptransportprotocol"] = state ? state.siptransportprotocol : undefined;
        } else {
            const args = argsOrState as LsnsipalgprofileArgs | undefined;
            if ((!args || args.sipalgprofilename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sipalgprofilename'");
            }
            resourceInputs["datasessionidletimeout"] = args ? args.datasessionidletimeout : undefined;
            resourceInputs["opencontactpinhole"] = args ? args.opencontactpinhole : undefined;
            resourceInputs["openrecordroutepinhole"] = args ? args.openrecordroutepinhole : undefined;
            resourceInputs["openregisterpinhole"] = args ? args.openregisterpinhole : undefined;
            resourceInputs["openroutepinhole"] = args ? args.openroutepinhole : undefined;
            resourceInputs["openviapinhole"] = args ? args.openviapinhole : undefined;
            resourceInputs["registrationtimeout"] = args ? args.registrationtimeout : undefined;
            resourceInputs["rport"] = args ? args.rport : undefined;
            resourceInputs["sipalgprofilename"] = args ? args.sipalgprofilename : undefined;
            resourceInputs["sipdstportrange"] = args ? args.sipdstportrange : undefined;
            resourceInputs["sipsessiontimeout"] = args ? args.sipsessiontimeout : undefined;
            resourceInputs["sipsrcportrange"] = args ? args.sipsrcportrange : undefined;
            resourceInputs["siptransportprotocol"] = args ? args.siptransportprotocol : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lsnsipalgprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lsnsipalgprofile resources.
 */
export interface LsnsipalgprofileState {
    datasessionidletimeout?: pulumi.Input<number>;
    opencontactpinhole?: pulumi.Input<string>;
    openrecordroutepinhole?: pulumi.Input<string>;
    openregisterpinhole?: pulumi.Input<string>;
    openroutepinhole?: pulumi.Input<string>;
    openviapinhole?: pulumi.Input<string>;
    registrationtimeout?: pulumi.Input<number>;
    rport?: pulumi.Input<string>;
    sipalgprofilename?: pulumi.Input<string>;
    sipdstportrange?: pulumi.Input<string>;
    sipsessiontimeout?: pulumi.Input<number>;
    sipsrcportrange?: pulumi.Input<string>;
    siptransportprotocol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lsnsipalgprofile resource.
 */
export interface LsnsipalgprofileArgs {
    datasessionidletimeout?: pulumi.Input<number>;
    opencontactpinhole?: pulumi.Input<string>;
    openrecordroutepinhole?: pulumi.Input<string>;
    openregisterpinhole?: pulumi.Input<string>;
    openroutepinhole?: pulumi.Input<string>;
    openviapinhole?: pulumi.Input<string>;
    registrationtimeout?: pulumi.Input<number>;
    rport?: pulumi.Input<string>;
    sipalgprofilename: pulumi.Input<string>;
    sipdstportrange?: pulumi.Input<string>;
    sipsessiontimeout?: pulumi.Input<number>;
    sipsrcportrange?: pulumi.Input<string>;
    siptransportprotocol?: pulumi.Input<string>;
}
