// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Arp extends pulumi.CustomResource {
    /**
     * Get an existing Arp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArpState, opts?: pulumi.CustomResourceOptions): Arp {
        return new Arp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/arp:Arp';

    /**
     * Returns true if the given object is an instance of Arp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Arp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Arp.__pulumiType;
    }

    public readonly all!: pulumi.Output<boolean>;
    public readonly ifnum!: pulumi.Output<string>;
    public readonly ipaddress!: pulumi.Output<string>;
    public readonly mac!: pulumi.Output<string>;
    public readonly nodeid!: pulumi.Output<number>;
    public readonly ownernode!: pulumi.Output<number>;
    public readonly td!: pulumi.Output<number>;
    public readonly vlan!: pulumi.Output<number>;
    public readonly vtep!: pulumi.Output<string>;
    public readonly vxlan!: pulumi.Output<number>;

    /**
     * Create a Arp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArpArgs | ArpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArpState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["ifnum"] = state ? state.ifnum : undefined;
            resourceInputs["ipaddress"] = state ? state.ipaddress : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["nodeid"] = state ? state.nodeid : undefined;
            resourceInputs["ownernode"] = state ? state.ownernode : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["vtep"] = state ? state.vtep : undefined;
            resourceInputs["vxlan"] = state ? state.vxlan : undefined;
        } else {
            const args = argsOrState as ArpArgs | undefined;
            if ((!args || args.ipaddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipaddress'");
            }
            if ((!args || args.mac === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mac'");
            }
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["ifnum"] = args ? args.ifnum : undefined;
            resourceInputs["ipaddress"] = args ? args.ipaddress : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["nodeid"] = args ? args.nodeid : undefined;
            resourceInputs["ownernode"] = args ? args.ownernode : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["vtep"] = args ? args.vtep : undefined;
            resourceInputs["vxlan"] = args ? args.vxlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Arp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Arp resources.
 */
export interface ArpState {
    all?: pulumi.Input<boolean>;
    ifnum?: pulumi.Input<string>;
    ipaddress?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    nodeid?: pulumi.Input<number>;
    ownernode?: pulumi.Input<number>;
    td?: pulumi.Input<number>;
    vlan?: pulumi.Input<number>;
    vtep?: pulumi.Input<string>;
    vxlan?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Arp resource.
 */
export interface ArpArgs {
    all?: pulumi.Input<boolean>;
    ifnum?: pulumi.Input<string>;
    ipaddress: pulumi.Input<string>;
    mac: pulumi.Input<string>;
    nodeid?: pulumi.Input<number>;
    ownernode?: pulumi.Input<number>;
    td?: pulumi.Input<number>;
    vlan?: pulumi.Input<number>;
    vtep?: pulumi.Input<string>;
    vxlan?: pulumi.Input<number>;
}
