// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nstcpparam extends pulumi.CustomResource {
    /**
     * Get an existing Nstcpparam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NstcpparamState, opts?: pulumi.CustomResourceOptions): Nstcpparam {
        return new Nstcpparam(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nstcpparam:Nstcpparam';

    /**
     * Returns true if the given object is an instance of Nstcpparam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nstcpparam {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nstcpparam.__pulumiType;
    }

    public readonly ackonpush!: pulumi.Output<string>;
    public readonly autosyncookietimeout!: pulumi.Output<number>;
    public readonly connflushifnomem!: pulumi.Output<string>;
    public readonly connflushthres!: pulumi.Output<number>;
    public readonly delayedack!: pulumi.Output<number>;
    public readonly downstaterst!: pulumi.Output<string>;
    public readonly initialcwnd!: pulumi.Output<number>;
    public readonly kaprobeupdatelastactivity!: pulumi.Output<string>;
    public readonly learnvsvrmss!: pulumi.Output<string>;
    public readonly limitedpersist!: pulumi.Output<string>;
    public readonly maxburst!: pulumi.Output<number>;
    public readonly maxdynserverprobes!: pulumi.Output<number>;
    public readonly maxpktpermss!: pulumi.Output<string>;
    public readonly maxsynackretx!: pulumi.Output<number>;
    public readonly maxsynhold!: pulumi.Output<number>;
    public readonly maxsynholdperprobe!: pulumi.Output<number>;
    public readonly maxtimewaitconn!: pulumi.Output<number>;
    public readonly minrto!: pulumi.Output<number>;
    public readonly mptcpchecksum!: pulumi.Output<string>;
    public readonly mptcpclosemptcpsessiononlastsfclose!: pulumi.Output<string>;
    public readonly mptcpconcloseonpassivesf!: pulumi.Output<string>;
    public readonly mptcpimmediatesfcloseonfin!: pulumi.Output<string>;
    public readonly mptcpmaxpendingsf!: pulumi.Output<string>;
    public readonly mptcpmaxsf!: pulumi.Output<number>;
    public readonly mptcppendingjointhreshold!: pulumi.Output<string>;
    public readonly mptcprtostoswitchsf!: pulumi.Output<number>;
    public readonly mptcpsfreplacetimeout!: pulumi.Output<string>;
    public readonly mptcpsftimeout!: pulumi.Output<string>;
    public readonly mptcpusebackupondss!: pulumi.Output<string>;
    public readonly msslearndelay!: pulumi.Output<number>;
    public readonly msslearninterval!: pulumi.Output<number>;
    public readonly nagle!: pulumi.Output<string>;
    public readonly oooqsize!: pulumi.Output<string>;
    public readonly pktperretx!: pulumi.Output<number>;
    public readonly recvbuffsize!: pulumi.Output<number>;
    public readonly sack!: pulumi.Output<string>;
    public readonly slowstartincr!: pulumi.Output<number>;
    public readonly synattackdetection!: pulumi.Output<string>;
    public readonly synholdfastgiveup!: pulumi.Output<number>;
    public readonly tcpfastopencookietimeout!: pulumi.Output<string>;
    public readonly tcpfintimeout!: pulumi.Output<number>;
    public readonly tcpmaxretries!: pulumi.Output<number>;
    public readonly ws!: pulumi.Output<string>;
    public readonly wsval!: pulumi.Output<string>;

    /**
     * Create a Nstcpparam resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NstcpparamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NstcpparamArgs | NstcpparamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NstcpparamState | undefined;
            resourceInputs["ackonpush"] = state ? state.ackonpush : undefined;
            resourceInputs["autosyncookietimeout"] = state ? state.autosyncookietimeout : undefined;
            resourceInputs["connflushifnomem"] = state ? state.connflushifnomem : undefined;
            resourceInputs["connflushthres"] = state ? state.connflushthres : undefined;
            resourceInputs["delayedack"] = state ? state.delayedack : undefined;
            resourceInputs["downstaterst"] = state ? state.downstaterst : undefined;
            resourceInputs["initialcwnd"] = state ? state.initialcwnd : undefined;
            resourceInputs["kaprobeupdatelastactivity"] = state ? state.kaprobeupdatelastactivity : undefined;
            resourceInputs["learnvsvrmss"] = state ? state.learnvsvrmss : undefined;
            resourceInputs["limitedpersist"] = state ? state.limitedpersist : undefined;
            resourceInputs["maxburst"] = state ? state.maxburst : undefined;
            resourceInputs["maxdynserverprobes"] = state ? state.maxdynserverprobes : undefined;
            resourceInputs["maxpktpermss"] = state ? state.maxpktpermss : undefined;
            resourceInputs["maxsynackretx"] = state ? state.maxsynackretx : undefined;
            resourceInputs["maxsynhold"] = state ? state.maxsynhold : undefined;
            resourceInputs["maxsynholdperprobe"] = state ? state.maxsynholdperprobe : undefined;
            resourceInputs["maxtimewaitconn"] = state ? state.maxtimewaitconn : undefined;
            resourceInputs["minrto"] = state ? state.minrto : undefined;
            resourceInputs["mptcpchecksum"] = state ? state.mptcpchecksum : undefined;
            resourceInputs["mptcpclosemptcpsessiononlastsfclose"] = state ? state.mptcpclosemptcpsessiononlastsfclose : undefined;
            resourceInputs["mptcpconcloseonpassivesf"] = state ? state.mptcpconcloseonpassivesf : undefined;
            resourceInputs["mptcpimmediatesfcloseonfin"] = state ? state.mptcpimmediatesfcloseonfin : undefined;
            resourceInputs["mptcpmaxpendingsf"] = state ? state.mptcpmaxpendingsf : undefined;
            resourceInputs["mptcpmaxsf"] = state ? state.mptcpmaxsf : undefined;
            resourceInputs["mptcppendingjointhreshold"] = state ? state.mptcppendingjointhreshold : undefined;
            resourceInputs["mptcprtostoswitchsf"] = state ? state.mptcprtostoswitchsf : undefined;
            resourceInputs["mptcpsfreplacetimeout"] = state ? state.mptcpsfreplacetimeout : undefined;
            resourceInputs["mptcpsftimeout"] = state ? state.mptcpsftimeout : undefined;
            resourceInputs["mptcpusebackupondss"] = state ? state.mptcpusebackupondss : undefined;
            resourceInputs["msslearndelay"] = state ? state.msslearndelay : undefined;
            resourceInputs["msslearninterval"] = state ? state.msslearninterval : undefined;
            resourceInputs["nagle"] = state ? state.nagle : undefined;
            resourceInputs["oooqsize"] = state ? state.oooqsize : undefined;
            resourceInputs["pktperretx"] = state ? state.pktperretx : undefined;
            resourceInputs["recvbuffsize"] = state ? state.recvbuffsize : undefined;
            resourceInputs["sack"] = state ? state.sack : undefined;
            resourceInputs["slowstartincr"] = state ? state.slowstartincr : undefined;
            resourceInputs["synattackdetection"] = state ? state.synattackdetection : undefined;
            resourceInputs["synholdfastgiveup"] = state ? state.synholdfastgiveup : undefined;
            resourceInputs["tcpfastopencookietimeout"] = state ? state.tcpfastopencookietimeout : undefined;
            resourceInputs["tcpfintimeout"] = state ? state.tcpfintimeout : undefined;
            resourceInputs["tcpmaxretries"] = state ? state.tcpmaxretries : undefined;
            resourceInputs["ws"] = state ? state.ws : undefined;
            resourceInputs["wsval"] = state ? state.wsval : undefined;
        } else {
            const args = argsOrState as NstcpparamArgs | undefined;
            resourceInputs["ackonpush"] = args ? args.ackonpush : undefined;
            resourceInputs["autosyncookietimeout"] = args ? args.autosyncookietimeout : undefined;
            resourceInputs["connflushifnomem"] = args ? args.connflushifnomem : undefined;
            resourceInputs["connflushthres"] = args ? args.connflushthres : undefined;
            resourceInputs["delayedack"] = args ? args.delayedack : undefined;
            resourceInputs["downstaterst"] = args ? args.downstaterst : undefined;
            resourceInputs["initialcwnd"] = args ? args.initialcwnd : undefined;
            resourceInputs["kaprobeupdatelastactivity"] = args ? args.kaprobeupdatelastactivity : undefined;
            resourceInputs["learnvsvrmss"] = args ? args.learnvsvrmss : undefined;
            resourceInputs["limitedpersist"] = args ? args.limitedpersist : undefined;
            resourceInputs["maxburst"] = args ? args.maxburst : undefined;
            resourceInputs["maxdynserverprobes"] = args ? args.maxdynserverprobes : undefined;
            resourceInputs["maxpktpermss"] = args ? args.maxpktpermss : undefined;
            resourceInputs["maxsynackretx"] = args ? args.maxsynackretx : undefined;
            resourceInputs["maxsynhold"] = args ? args.maxsynhold : undefined;
            resourceInputs["maxsynholdperprobe"] = args ? args.maxsynholdperprobe : undefined;
            resourceInputs["maxtimewaitconn"] = args ? args.maxtimewaitconn : undefined;
            resourceInputs["minrto"] = args ? args.minrto : undefined;
            resourceInputs["mptcpchecksum"] = args ? args.mptcpchecksum : undefined;
            resourceInputs["mptcpclosemptcpsessiononlastsfclose"] = args ? args.mptcpclosemptcpsessiononlastsfclose : undefined;
            resourceInputs["mptcpconcloseonpassivesf"] = args ? args.mptcpconcloseonpassivesf : undefined;
            resourceInputs["mptcpimmediatesfcloseonfin"] = args ? args.mptcpimmediatesfcloseonfin : undefined;
            resourceInputs["mptcpmaxpendingsf"] = args ? args.mptcpmaxpendingsf : undefined;
            resourceInputs["mptcpmaxsf"] = args ? args.mptcpmaxsf : undefined;
            resourceInputs["mptcppendingjointhreshold"] = args ? args.mptcppendingjointhreshold : undefined;
            resourceInputs["mptcprtostoswitchsf"] = args ? args.mptcprtostoswitchsf : undefined;
            resourceInputs["mptcpsfreplacetimeout"] = args ? args.mptcpsfreplacetimeout : undefined;
            resourceInputs["mptcpsftimeout"] = args ? args.mptcpsftimeout : undefined;
            resourceInputs["mptcpusebackupondss"] = args ? args.mptcpusebackupondss : undefined;
            resourceInputs["msslearndelay"] = args ? args.msslearndelay : undefined;
            resourceInputs["msslearninterval"] = args ? args.msslearninterval : undefined;
            resourceInputs["nagle"] = args ? args.nagle : undefined;
            resourceInputs["oooqsize"] = args ? args.oooqsize : undefined;
            resourceInputs["pktperretx"] = args ? args.pktperretx : undefined;
            resourceInputs["recvbuffsize"] = args ? args.recvbuffsize : undefined;
            resourceInputs["sack"] = args ? args.sack : undefined;
            resourceInputs["slowstartincr"] = args ? args.slowstartincr : undefined;
            resourceInputs["synattackdetection"] = args ? args.synattackdetection : undefined;
            resourceInputs["synholdfastgiveup"] = args ? args.synholdfastgiveup : undefined;
            resourceInputs["tcpfastopencookietimeout"] = args ? args.tcpfastopencookietimeout : undefined;
            resourceInputs["tcpfintimeout"] = args ? args.tcpfintimeout : undefined;
            resourceInputs["tcpmaxretries"] = args ? args.tcpmaxretries : undefined;
            resourceInputs["ws"] = args ? args.ws : undefined;
            resourceInputs["wsval"] = args ? args.wsval : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nstcpparam.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nstcpparam resources.
 */
export interface NstcpparamState {
    ackonpush?: pulumi.Input<string>;
    autosyncookietimeout?: pulumi.Input<number>;
    connflushifnomem?: pulumi.Input<string>;
    connflushthres?: pulumi.Input<number>;
    delayedack?: pulumi.Input<number>;
    downstaterst?: pulumi.Input<string>;
    initialcwnd?: pulumi.Input<number>;
    kaprobeupdatelastactivity?: pulumi.Input<string>;
    learnvsvrmss?: pulumi.Input<string>;
    limitedpersist?: pulumi.Input<string>;
    maxburst?: pulumi.Input<number>;
    maxdynserverprobes?: pulumi.Input<number>;
    maxpktpermss?: pulumi.Input<string>;
    maxsynackretx?: pulumi.Input<number>;
    maxsynhold?: pulumi.Input<number>;
    maxsynholdperprobe?: pulumi.Input<number>;
    maxtimewaitconn?: pulumi.Input<number>;
    minrto?: pulumi.Input<number>;
    mptcpchecksum?: pulumi.Input<string>;
    mptcpclosemptcpsessiononlastsfclose?: pulumi.Input<string>;
    mptcpconcloseonpassivesf?: pulumi.Input<string>;
    mptcpimmediatesfcloseonfin?: pulumi.Input<string>;
    mptcpmaxpendingsf?: pulumi.Input<string>;
    mptcpmaxsf?: pulumi.Input<number>;
    mptcppendingjointhreshold?: pulumi.Input<string>;
    mptcprtostoswitchsf?: pulumi.Input<number>;
    mptcpsfreplacetimeout?: pulumi.Input<string>;
    mptcpsftimeout?: pulumi.Input<string>;
    mptcpusebackupondss?: pulumi.Input<string>;
    msslearndelay?: pulumi.Input<number>;
    msslearninterval?: pulumi.Input<number>;
    nagle?: pulumi.Input<string>;
    oooqsize?: pulumi.Input<string>;
    pktperretx?: pulumi.Input<number>;
    recvbuffsize?: pulumi.Input<number>;
    sack?: pulumi.Input<string>;
    slowstartincr?: pulumi.Input<number>;
    synattackdetection?: pulumi.Input<string>;
    synholdfastgiveup?: pulumi.Input<number>;
    tcpfastopencookietimeout?: pulumi.Input<string>;
    tcpfintimeout?: pulumi.Input<number>;
    tcpmaxretries?: pulumi.Input<number>;
    ws?: pulumi.Input<string>;
    wsval?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nstcpparam resource.
 */
export interface NstcpparamArgs {
    ackonpush?: pulumi.Input<string>;
    autosyncookietimeout?: pulumi.Input<number>;
    connflushifnomem?: pulumi.Input<string>;
    connflushthres?: pulumi.Input<number>;
    delayedack?: pulumi.Input<number>;
    downstaterst?: pulumi.Input<string>;
    initialcwnd?: pulumi.Input<number>;
    kaprobeupdatelastactivity?: pulumi.Input<string>;
    learnvsvrmss?: pulumi.Input<string>;
    limitedpersist?: pulumi.Input<string>;
    maxburst?: pulumi.Input<number>;
    maxdynserverprobes?: pulumi.Input<number>;
    maxpktpermss?: pulumi.Input<string>;
    maxsynackretx?: pulumi.Input<number>;
    maxsynhold?: pulumi.Input<number>;
    maxsynholdperprobe?: pulumi.Input<number>;
    maxtimewaitconn?: pulumi.Input<number>;
    minrto?: pulumi.Input<number>;
    mptcpchecksum?: pulumi.Input<string>;
    mptcpclosemptcpsessiononlastsfclose?: pulumi.Input<string>;
    mptcpconcloseonpassivesf?: pulumi.Input<string>;
    mptcpimmediatesfcloseonfin?: pulumi.Input<string>;
    mptcpmaxpendingsf?: pulumi.Input<string>;
    mptcpmaxsf?: pulumi.Input<number>;
    mptcppendingjointhreshold?: pulumi.Input<string>;
    mptcprtostoswitchsf?: pulumi.Input<number>;
    mptcpsfreplacetimeout?: pulumi.Input<string>;
    mptcpsftimeout?: pulumi.Input<string>;
    mptcpusebackupondss?: pulumi.Input<string>;
    msslearndelay?: pulumi.Input<number>;
    msslearninterval?: pulumi.Input<number>;
    nagle?: pulumi.Input<string>;
    oooqsize?: pulumi.Input<string>;
    pktperretx?: pulumi.Input<number>;
    recvbuffsize?: pulumi.Input<number>;
    sack?: pulumi.Input<string>;
    slowstartincr?: pulumi.Input<number>;
    synattackdetection?: pulumi.Input<string>;
    synholdfastgiveup?: pulumi.Input<number>;
    tcpfastopencookietimeout?: pulumi.Input<string>;
    tcpfintimeout?: pulumi.Input<number>;
    tcpmaxretries?: pulumi.Input<number>;
    ws?: pulumi.Input<string>;
    wsval?: pulumi.Input<string>;
}
