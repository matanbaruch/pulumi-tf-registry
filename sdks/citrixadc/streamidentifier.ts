// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Streamidentifier extends pulumi.CustomResource {
    /**
     * Get an existing Streamidentifier resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamidentifierState, opts?: pulumi.CustomResourceOptions): Streamidentifier {
        return new Streamidentifier(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/streamidentifier:Streamidentifier';

    /**
     * Returns true if the given object is an instance of Streamidentifier.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Streamidentifier {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Streamidentifier.__pulumiType;
    }

    public readonly acceptancethreshold!: pulumi.Output<string>;
    public readonly appflowlog!: pulumi.Output<string>;
    public readonly breachthreshold!: pulumi.Output<number>;
    public readonly interval!: pulumi.Output<number>;
    public readonly maxtransactionthreshold!: pulumi.Output<number>;
    public readonly mintransactionthreshold!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly samplecount!: pulumi.Output<number>;
    public readonly selectorname!: pulumi.Output<string>;
    public readonly snmptrap!: pulumi.Output<string>;
    public readonly sort!: pulumi.Output<string>;
    public readonly trackackonlypackets!: pulumi.Output<string>;
    public readonly tracktransactions!: pulumi.Output<string>;

    /**
     * Create a Streamidentifier resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StreamidentifierArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamidentifierArgs | StreamidentifierState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamidentifierState | undefined;
            resourceInputs["acceptancethreshold"] = state ? state.acceptancethreshold : undefined;
            resourceInputs["appflowlog"] = state ? state.appflowlog : undefined;
            resourceInputs["breachthreshold"] = state ? state.breachthreshold : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["maxtransactionthreshold"] = state ? state.maxtransactionthreshold : undefined;
            resourceInputs["mintransactionthreshold"] = state ? state.mintransactionthreshold : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["samplecount"] = state ? state.samplecount : undefined;
            resourceInputs["selectorname"] = state ? state.selectorname : undefined;
            resourceInputs["snmptrap"] = state ? state.snmptrap : undefined;
            resourceInputs["sort"] = state ? state.sort : undefined;
            resourceInputs["trackackonlypackets"] = state ? state.trackackonlypackets : undefined;
            resourceInputs["tracktransactions"] = state ? state.tracktransactions : undefined;
        } else {
            const args = argsOrState as StreamidentifierArgs | undefined;
            resourceInputs["acceptancethreshold"] = args ? args.acceptancethreshold : undefined;
            resourceInputs["appflowlog"] = args ? args.appflowlog : undefined;
            resourceInputs["breachthreshold"] = args ? args.breachthreshold : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["maxtransactionthreshold"] = args ? args.maxtransactionthreshold : undefined;
            resourceInputs["mintransactionthreshold"] = args ? args.mintransactionthreshold : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["samplecount"] = args ? args.samplecount : undefined;
            resourceInputs["selectorname"] = args ? args.selectorname : undefined;
            resourceInputs["snmptrap"] = args ? args.snmptrap : undefined;
            resourceInputs["sort"] = args ? args.sort : undefined;
            resourceInputs["trackackonlypackets"] = args ? args.trackackonlypackets : undefined;
            resourceInputs["tracktransactions"] = args ? args.tracktransactions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Streamidentifier.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Streamidentifier resources.
 */
export interface StreamidentifierState {
    acceptancethreshold?: pulumi.Input<string>;
    appflowlog?: pulumi.Input<string>;
    breachthreshold?: pulumi.Input<number>;
    interval?: pulumi.Input<number>;
    maxtransactionthreshold?: pulumi.Input<number>;
    mintransactionthreshold?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    samplecount?: pulumi.Input<number>;
    selectorname?: pulumi.Input<string>;
    snmptrap?: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
    trackackonlypackets?: pulumi.Input<string>;
    tracktransactions?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Streamidentifier resource.
 */
export interface StreamidentifierArgs {
    acceptancethreshold?: pulumi.Input<string>;
    appflowlog?: pulumi.Input<string>;
    breachthreshold?: pulumi.Input<number>;
    interval?: pulumi.Input<number>;
    maxtransactionthreshold?: pulumi.Input<number>;
    mintransactionthreshold?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    samplecount?: pulumi.Input<number>;
    selectorname?: pulumi.Input<string>;
    snmptrap?: pulumi.Input<string>;
    sort?: pulumi.Input<string>;
    trackackonlypackets?: pulumi.Input<string>;
    tracktransactions?: pulumi.Input<string>;
}
