// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nsvpxparam extends pulumi.CustomResource {
    /**
     * Get an existing Nsvpxparam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsvpxparamState, opts?: pulumi.CustomResourceOptions): Nsvpxparam {
        return new Nsvpxparam(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nsvpxparam:Nsvpxparam';

    /**
     * Returns true if the given object is an instance of Nsvpxparam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nsvpxparam {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nsvpxparam.__pulumiType;
    }

    public readonly cpuyield!: pulumi.Output<string>;
    public readonly masterclockcpu1!: pulumi.Output<string>;
    public readonly ownernode!: pulumi.Output<string>;

    /**
     * Create a Nsvpxparam resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NsvpxparamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsvpxparamArgs | NsvpxparamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsvpxparamState | undefined;
            resourceInputs["cpuyield"] = state ? state.cpuyield : undefined;
            resourceInputs["masterclockcpu1"] = state ? state.masterclockcpu1 : undefined;
            resourceInputs["ownernode"] = state ? state.ownernode : undefined;
        } else {
            const args = argsOrState as NsvpxparamArgs | undefined;
            resourceInputs["cpuyield"] = args ? args.cpuyield : undefined;
            resourceInputs["masterclockcpu1"] = args ? args.masterclockcpu1 : undefined;
            resourceInputs["ownernode"] = args ? args.ownernode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nsvpxparam.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nsvpxparam resources.
 */
export interface NsvpxparamState {
    cpuyield?: pulumi.Input<string>;
    masterclockcpu1?: pulumi.Input<string>;
    ownernode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nsvpxparam resource.
 */
export interface NsvpxparamArgs {
    cpuyield?: pulumi.Input<string>;
    masterclockcpu1?: pulumi.Input<string>;
    ownernode?: pulumi.Input<string>;
}
