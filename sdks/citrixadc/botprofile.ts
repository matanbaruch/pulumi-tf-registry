// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Botprofile extends pulumi.CustomResource {
    /**
     * Get an existing Botprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BotprofileState, opts?: pulumi.CustomResourceOptions): Botprofile {
        return new Botprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/botprofile:Botprofile';

    /**
     * Returns true if the given object is an instance of Botprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Botprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Botprofile.__pulumiType;
    }

    public readonly botEnableBlackList!: pulumi.Output<string>;
    public readonly botEnableIpReputation!: pulumi.Output<string>;
    public readonly botEnableRateLimit!: pulumi.Output<string>;
    public readonly botEnableTps!: pulumi.Output<string>;
    public readonly botEnableWhiteList!: pulumi.Output<string>;
    public readonly clientipexpression!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly devicefingerprint!: pulumi.Output<string>;
    public readonly devicefingerprintactions!: pulumi.Output<string[]>;
    public readonly devicefingerprintmobiles!: pulumi.Output<string[]>;
    public readonly errorurl!: pulumi.Output<string>;
    public readonly kmdetection!: pulumi.Output<string>;
    public readonly kmeventspostbodylimit!: pulumi.Output<number>;
    public readonly kmjavascriptname!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly signature!: pulumi.Output<string>;
    public readonly signaturemultipleuseragentheaderactions!: pulumi.Output<string[]>;
    public readonly signaturenouseragentheaderactions!: pulumi.Output<string[]>;
    public readonly trap!: pulumi.Output<string>;
    public readonly trapactions!: pulumi.Output<string[]>;
    public readonly trapurl!: pulumi.Output<string>;

    /**
     * Create a Botprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BotprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BotprofileArgs | BotprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BotprofileState | undefined;
            resourceInputs["botEnableBlackList"] = state ? state.botEnableBlackList : undefined;
            resourceInputs["botEnableIpReputation"] = state ? state.botEnableIpReputation : undefined;
            resourceInputs["botEnableRateLimit"] = state ? state.botEnableRateLimit : undefined;
            resourceInputs["botEnableTps"] = state ? state.botEnableTps : undefined;
            resourceInputs["botEnableWhiteList"] = state ? state.botEnableWhiteList : undefined;
            resourceInputs["clientipexpression"] = state ? state.clientipexpression : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["devicefingerprint"] = state ? state.devicefingerprint : undefined;
            resourceInputs["devicefingerprintactions"] = state ? state.devicefingerprintactions : undefined;
            resourceInputs["devicefingerprintmobiles"] = state ? state.devicefingerprintmobiles : undefined;
            resourceInputs["errorurl"] = state ? state.errorurl : undefined;
            resourceInputs["kmdetection"] = state ? state.kmdetection : undefined;
            resourceInputs["kmeventspostbodylimit"] = state ? state.kmeventspostbodylimit : undefined;
            resourceInputs["kmjavascriptname"] = state ? state.kmjavascriptname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["signature"] = state ? state.signature : undefined;
            resourceInputs["signaturemultipleuseragentheaderactions"] = state ? state.signaturemultipleuseragentheaderactions : undefined;
            resourceInputs["signaturenouseragentheaderactions"] = state ? state.signaturenouseragentheaderactions : undefined;
            resourceInputs["trap"] = state ? state.trap : undefined;
            resourceInputs["trapactions"] = state ? state.trapactions : undefined;
            resourceInputs["trapurl"] = state ? state.trapurl : undefined;
        } else {
            const args = argsOrState as BotprofileArgs | undefined;
            resourceInputs["botEnableBlackList"] = args ? args.botEnableBlackList : undefined;
            resourceInputs["botEnableIpReputation"] = args ? args.botEnableIpReputation : undefined;
            resourceInputs["botEnableRateLimit"] = args ? args.botEnableRateLimit : undefined;
            resourceInputs["botEnableTps"] = args ? args.botEnableTps : undefined;
            resourceInputs["botEnableWhiteList"] = args ? args.botEnableWhiteList : undefined;
            resourceInputs["clientipexpression"] = args ? args.clientipexpression : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["devicefingerprint"] = args ? args.devicefingerprint : undefined;
            resourceInputs["devicefingerprintactions"] = args ? args.devicefingerprintactions : undefined;
            resourceInputs["devicefingerprintmobiles"] = args ? args.devicefingerprintmobiles : undefined;
            resourceInputs["errorurl"] = args ? args.errorurl : undefined;
            resourceInputs["kmdetection"] = args ? args.kmdetection : undefined;
            resourceInputs["kmeventspostbodylimit"] = args ? args.kmeventspostbodylimit : undefined;
            resourceInputs["kmjavascriptname"] = args ? args.kmjavascriptname : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["signature"] = args ? args.signature : undefined;
            resourceInputs["signaturemultipleuseragentheaderactions"] = args ? args.signaturemultipleuseragentheaderactions : undefined;
            resourceInputs["signaturenouseragentheaderactions"] = args ? args.signaturenouseragentheaderactions : undefined;
            resourceInputs["trap"] = args ? args.trap : undefined;
            resourceInputs["trapactions"] = args ? args.trapactions : undefined;
            resourceInputs["trapurl"] = args ? args.trapurl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Botprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Botprofile resources.
 */
export interface BotprofileState {
    botEnableBlackList?: pulumi.Input<string>;
    botEnableIpReputation?: pulumi.Input<string>;
    botEnableRateLimit?: pulumi.Input<string>;
    botEnableTps?: pulumi.Input<string>;
    botEnableWhiteList?: pulumi.Input<string>;
    clientipexpression?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    devicefingerprint?: pulumi.Input<string>;
    devicefingerprintactions?: pulumi.Input<pulumi.Input<string>[]>;
    devicefingerprintmobiles?: pulumi.Input<pulumi.Input<string>[]>;
    errorurl?: pulumi.Input<string>;
    kmdetection?: pulumi.Input<string>;
    kmeventspostbodylimit?: pulumi.Input<number>;
    kmjavascriptname?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    signature?: pulumi.Input<string>;
    signaturemultipleuseragentheaderactions?: pulumi.Input<pulumi.Input<string>[]>;
    signaturenouseragentheaderactions?: pulumi.Input<pulumi.Input<string>[]>;
    trap?: pulumi.Input<string>;
    trapactions?: pulumi.Input<pulumi.Input<string>[]>;
    trapurl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Botprofile resource.
 */
export interface BotprofileArgs {
    botEnableBlackList?: pulumi.Input<string>;
    botEnableIpReputation?: pulumi.Input<string>;
    botEnableRateLimit?: pulumi.Input<string>;
    botEnableTps?: pulumi.Input<string>;
    botEnableWhiteList?: pulumi.Input<string>;
    clientipexpression?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    devicefingerprint?: pulumi.Input<string>;
    devicefingerprintactions?: pulumi.Input<pulumi.Input<string>[]>;
    devicefingerprintmobiles?: pulumi.Input<pulumi.Input<string>[]>;
    errorurl?: pulumi.Input<string>;
    kmdetection?: pulumi.Input<string>;
    kmeventspostbodylimit?: pulumi.Input<number>;
    kmjavascriptname?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    signature?: pulumi.Input<string>;
    signaturemultipleuseragentheaderactions?: pulumi.Input<pulumi.Input<string>[]>;
    signaturenouseragentheaderactions?: pulumi.Input<pulumi.Input<string>[]>;
    trap?: pulumi.Input<string>;
    trapactions?: pulumi.Input<pulumi.Input<string>[]>;
    trapurl?: pulumi.Input<string>;
}
