// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HanodeRoutemonitor6Binding extends pulumi.CustomResource {
    /**
     * Get an existing HanodeRoutemonitor6Binding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HanodeRoutemonitor6BindingState, opts?: pulumi.CustomResourceOptions): HanodeRoutemonitor6Binding {
        return new HanodeRoutemonitor6Binding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/hanodeRoutemonitor6Binding:HanodeRoutemonitor6Binding';

    /**
     * Returns true if the given object is an instance of HanodeRoutemonitor6Binding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HanodeRoutemonitor6Binding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HanodeRoutemonitor6Binding.__pulumiType;
    }

    public readonly hanodeId!: pulumi.Output<number>;
    public readonly routemonitor!: pulumi.Output<string>;

    /**
     * Create a HanodeRoutemonitor6Binding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HanodeRoutemonitor6BindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HanodeRoutemonitor6BindingArgs | HanodeRoutemonitor6BindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HanodeRoutemonitor6BindingState | undefined;
            resourceInputs["hanodeId"] = state ? state.hanodeId : undefined;
            resourceInputs["routemonitor"] = state ? state.routemonitor : undefined;
        } else {
            const args = argsOrState as HanodeRoutemonitor6BindingArgs | undefined;
            if ((!args || args.hanodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hanodeId'");
            }
            if ((!args || args.routemonitor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routemonitor'");
            }
            resourceInputs["hanodeId"] = args ? args.hanodeId : undefined;
            resourceInputs["routemonitor"] = args ? args.routemonitor : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HanodeRoutemonitor6Binding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HanodeRoutemonitor6Binding resources.
 */
export interface HanodeRoutemonitor6BindingState {
    hanodeId?: pulumi.Input<number>;
    routemonitor?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HanodeRoutemonitor6Binding resource.
 */
export interface HanodeRoutemonitor6BindingArgs {
    hanodeId: pulumi.Input<number>;
    routemonitor: pulumi.Input<string>;
}
