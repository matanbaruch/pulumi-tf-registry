// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Nslicense extends pulumi.CustomResource {
    /**
     * Get an existing Nslicense resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NslicenseState, opts?: pulumi.CustomResourceOptions): Nslicense {
        return new Nslicense(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/nslicense:Nslicense';

    /**
     * Returns true if the given object is an instance of Nslicense.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nslicense {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nslicense.__pulumiType;
    }

    public readonly licenseFile!: pulumi.Output<string>;
    public readonly pollDelay!: pulumi.Output<string | undefined>;
    public readonly pollInterval!: pulumi.Output<string | undefined>;
    public readonly pollTimeout!: pulumi.Output<string | undefined>;
    public readonly reboot!: pulumi.Output<boolean | undefined>;
    public readonly sshHost!: pulumi.Output<string | undefined>;
    public readonly sshHostPubkey!: pulumi.Output<string>;
    public readonly sshPassword!: pulumi.Output<string | undefined>;
    public readonly sshPort!: pulumi.Output<number>;
    public readonly sshUsername!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NslicenseTimeouts | undefined>;

    /**
     * Create a Nslicense resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NslicenseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NslicenseArgs | NslicenseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NslicenseState | undefined;
            resourceInputs["licenseFile"] = state ? state.licenseFile : undefined;
            resourceInputs["pollDelay"] = state ? state.pollDelay : undefined;
            resourceInputs["pollInterval"] = state ? state.pollInterval : undefined;
            resourceInputs["pollTimeout"] = state ? state.pollTimeout : undefined;
            resourceInputs["reboot"] = state ? state.reboot : undefined;
            resourceInputs["sshHost"] = state ? state.sshHost : undefined;
            resourceInputs["sshHostPubkey"] = state ? state.sshHostPubkey : undefined;
            resourceInputs["sshPassword"] = state ? state.sshPassword : undefined;
            resourceInputs["sshPort"] = state ? state.sshPort : undefined;
            resourceInputs["sshUsername"] = state ? state.sshUsername : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NslicenseArgs | undefined;
            if ((!args || args.licenseFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseFile'");
            }
            if ((!args || args.sshHostPubkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshHostPubkey'");
            }
            resourceInputs["licenseFile"] = args ? args.licenseFile : undefined;
            resourceInputs["pollDelay"] = args ? args.pollDelay : undefined;
            resourceInputs["pollInterval"] = args ? args.pollInterval : undefined;
            resourceInputs["pollTimeout"] = args ? args.pollTimeout : undefined;
            resourceInputs["reboot"] = args ? args.reboot : undefined;
            resourceInputs["sshHost"] = args ? args.sshHost : undefined;
            resourceInputs["sshHostPubkey"] = args ? args.sshHostPubkey : undefined;
            resourceInputs["sshPassword"] = args?.sshPassword ? pulumi.secret(args.sshPassword) : undefined;
            resourceInputs["sshPort"] = args ? args.sshPort : undefined;
            resourceInputs["sshUsername"] = args?.sshUsername ? pulumi.secret(args.sshUsername) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sshPassword", "sshUsername"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Nslicense.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nslicense resources.
 */
export interface NslicenseState {
    licenseFile?: pulumi.Input<string>;
    pollDelay?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<string>;
    pollTimeout?: pulumi.Input<string>;
    reboot?: pulumi.Input<boolean>;
    sshHost?: pulumi.Input<string>;
    sshHostPubkey?: pulumi.Input<string>;
    sshPassword?: pulumi.Input<string>;
    sshPort?: pulumi.Input<number>;
    sshUsername?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NslicenseTimeouts>;
}

/**
 * The set of arguments for constructing a Nslicense resource.
 */
export interface NslicenseArgs {
    licenseFile: pulumi.Input<string>;
    pollDelay?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<string>;
    pollTimeout?: pulumi.Input<string>;
    reboot?: pulumi.Input<boolean>;
    sshHost?: pulumi.Input<string>;
    sshHostPubkey: pulumi.Input<string>;
    sshPassword?: pulumi.Input<string>;
    sshPort?: pulumi.Input<number>;
    sshUsername?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NslicenseTimeouts>;
}
