// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vpnvserver extends pulumi.CustomResource {
    /**
     * Get an existing Vpnvserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnvserverState, opts?: pulumi.CustomResourceOptions): Vpnvserver {
        return new Vpnvserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/vpnvserver:Vpnvserver';

    /**
     * Returns true if the given object is an instance of Vpnvserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpnvserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpnvserver.__pulumiType;
    }

    public readonly advancedepa!: pulumi.Output<string>;
    public readonly appflowlog!: pulumi.Output<string>;
    public readonly authentication!: pulumi.Output<string>;
    public readonly authnprofile!: pulumi.Output<string>;
    public readonly certkeynames!: pulumi.Output<string>;
    public readonly cginfrahomepageredirect!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly deploymenttype!: pulumi.Output<string>;
    public readonly devicecert!: pulumi.Output<string>;
    public readonly doublehop!: pulumi.Output<string>;
    public readonly downstateflush!: pulumi.Output<string>;
    public readonly dtls!: pulumi.Output<string>;
    public readonly failedlogintimeout!: pulumi.Output<number>;
    public readonly httpprofilename!: pulumi.Output<string>;
    public readonly icaonly!: pulumi.Output<string>;
    public readonly icaproxysessionmigration!: pulumi.Output<string>;
    public readonly icmpvsrresponse!: pulumi.Output<string>;
    public readonly ipset!: pulumi.Output<string>;
    public readonly ipv46!: pulumi.Output<string>;
    public readonly l2conn!: pulumi.Output<string>;
    public readonly linuxepapluginupgrade!: pulumi.Output<string>;
    public readonly listenpolicy!: pulumi.Output<string>;
    public readonly listenpriority!: pulumi.Output<number>;
    public readonly loginonce!: pulumi.Output<string>;
    public readonly logoutonsmartcardremoval!: pulumi.Output<string>;
    public readonly macepapluginupgrade!: pulumi.Output<string>;
    public readonly maxaaausers!: pulumi.Output<number>;
    public readonly maxloginattempts!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly netprofile!: pulumi.Output<string>;
    public readonly pcoipvserverprofilename!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly range!: pulumi.Output<number>;
    public readonly rdpserverprofilename!: pulumi.Output<string>;
    public readonly rhistate!: pulumi.Output<string>;
    public readonly samesite!: pulumi.Output<string>;
    public readonly servicetype!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly tcpprofilename!: pulumi.Output<string>;
    public readonly userdomains!: pulumi.Output<string>;
    public readonly vserverfqdn!: pulumi.Output<string>;
    public readonly windowsepapluginupgrade!: pulumi.Output<string>;

    /**
     * Create a Vpnvserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnvserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnvserverArgs | VpnvserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnvserverState | undefined;
            resourceInputs["advancedepa"] = state ? state.advancedepa : undefined;
            resourceInputs["appflowlog"] = state ? state.appflowlog : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["authnprofile"] = state ? state.authnprofile : undefined;
            resourceInputs["certkeynames"] = state ? state.certkeynames : undefined;
            resourceInputs["cginfrahomepageredirect"] = state ? state.cginfrahomepageredirect : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["deploymenttype"] = state ? state.deploymenttype : undefined;
            resourceInputs["devicecert"] = state ? state.devicecert : undefined;
            resourceInputs["doublehop"] = state ? state.doublehop : undefined;
            resourceInputs["downstateflush"] = state ? state.downstateflush : undefined;
            resourceInputs["dtls"] = state ? state.dtls : undefined;
            resourceInputs["failedlogintimeout"] = state ? state.failedlogintimeout : undefined;
            resourceInputs["httpprofilename"] = state ? state.httpprofilename : undefined;
            resourceInputs["icaonly"] = state ? state.icaonly : undefined;
            resourceInputs["icaproxysessionmigration"] = state ? state.icaproxysessionmigration : undefined;
            resourceInputs["icmpvsrresponse"] = state ? state.icmpvsrresponse : undefined;
            resourceInputs["ipset"] = state ? state.ipset : undefined;
            resourceInputs["ipv46"] = state ? state.ipv46 : undefined;
            resourceInputs["l2conn"] = state ? state.l2conn : undefined;
            resourceInputs["linuxepapluginupgrade"] = state ? state.linuxepapluginupgrade : undefined;
            resourceInputs["listenpolicy"] = state ? state.listenpolicy : undefined;
            resourceInputs["listenpriority"] = state ? state.listenpriority : undefined;
            resourceInputs["loginonce"] = state ? state.loginonce : undefined;
            resourceInputs["logoutonsmartcardremoval"] = state ? state.logoutonsmartcardremoval : undefined;
            resourceInputs["macepapluginupgrade"] = state ? state.macepapluginupgrade : undefined;
            resourceInputs["maxaaausers"] = state ? state.maxaaausers : undefined;
            resourceInputs["maxloginattempts"] = state ? state.maxloginattempts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netprofile"] = state ? state.netprofile : undefined;
            resourceInputs["pcoipvserverprofilename"] = state ? state.pcoipvserverprofilename : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["range"] = state ? state.range : undefined;
            resourceInputs["rdpserverprofilename"] = state ? state.rdpserverprofilename : undefined;
            resourceInputs["rhistate"] = state ? state.rhistate : undefined;
            resourceInputs["samesite"] = state ? state.samesite : undefined;
            resourceInputs["servicetype"] = state ? state.servicetype : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tcpprofilename"] = state ? state.tcpprofilename : undefined;
            resourceInputs["userdomains"] = state ? state.userdomains : undefined;
            resourceInputs["vserverfqdn"] = state ? state.vserverfqdn : undefined;
            resourceInputs["windowsepapluginupgrade"] = state ? state.windowsepapluginupgrade : undefined;
        } else {
            const args = argsOrState as VpnvserverArgs | undefined;
            if ((!args || args.servicetype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicetype'");
            }
            resourceInputs["advancedepa"] = args ? args.advancedepa : undefined;
            resourceInputs["appflowlog"] = args ? args.appflowlog : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["authnprofile"] = args ? args.authnprofile : undefined;
            resourceInputs["certkeynames"] = args ? args.certkeynames : undefined;
            resourceInputs["cginfrahomepageredirect"] = args ? args.cginfrahomepageredirect : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["deploymenttype"] = args ? args.deploymenttype : undefined;
            resourceInputs["devicecert"] = args ? args.devicecert : undefined;
            resourceInputs["doublehop"] = args ? args.doublehop : undefined;
            resourceInputs["downstateflush"] = args ? args.downstateflush : undefined;
            resourceInputs["dtls"] = args ? args.dtls : undefined;
            resourceInputs["failedlogintimeout"] = args ? args.failedlogintimeout : undefined;
            resourceInputs["httpprofilename"] = args ? args.httpprofilename : undefined;
            resourceInputs["icaonly"] = args ? args.icaonly : undefined;
            resourceInputs["icaproxysessionmigration"] = args ? args.icaproxysessionmigration : undefined;
            resourceInputs["icmpvsrresponse"] = args ? args.icmpvsrresponse : undefined;
            resourceInputs["ipset"] = args ? args.ipset : undefined;
            resourceInputs["ipv46"] = args ? args.ipv46 : undefined;
            resourceInputs["l2conn"] = args ? args.l2conn : undefined;
            resourceInputs["linuxepapluginupgrade"] = args ? args.linuxepapluginupgrade : undefined;
            resourceInputs["listenpolicy"] = args ? args.listenpolicy : undefined;
            resourceInputs["listenpriority"] = args ? args.listenpriority : undefined;
            resourceInputs["loginonce"] = args ? args.loginonce : undefined;
            resourceInputs["logoutonsmartcardremoval"] = args ? args.logoutonsmartcardremoval : undefined;
            resourceInputs["macepapluginupgrade"] = args ? args.macepapluginupgrade : undefined;
            resourceInputs["maxaaausers"] = args ? args.maxaaausers : undefined;
            resourceInputs["maxloginattempts"] = args ? args.maxloginattempts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netprofile"] = args ? args.netprofile : undefined;
            resourceInputs["pcoipvserverprofilename"] = args ? args.pcoipvserverprofilename : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["range"] = args ? args.range : undefined;
            resourceInputs["rdpserverprofilename"] = args ? args.rdpserverprofilename : undefined;
            resourceInputs["rhistate"] = args ? args.rhistate : undefined;
            resourceInputs["samesite"] = args ? args.samesite : undefined;
            resourceInputs["servicetype"] = args ? args.servicetype : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tcpprofilename"] = args ? args.tcpprofilename : undefined;
            resourceInputs["userdomains"] = args ? args.userdomains : undefined;
            resourceInputs["vserverfqdn"] = args ? args.vserverfqdn : undefined;
            resourceInputs["windowsepapluginupgrade"] = args ? args.windowsepapluginupgrade : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vpnvserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vpnvserver resources.
 */
export interface VpnvserverState {
    advancedepa?: pulumi.Input<string>;
    appflowlog?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    authnprofile?: pulumi.Input<string>;
    certkeynames?: pulumi.Input<string>;
    cginfrahomepageredirect?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    deploymenttype?: pulumi.Input<string>;
    devicecert?: pulumi.Input<string>;
    doublehop?: pulumi.Input<string>;
    downstateflush?: pulumi.Input<string>;
    dtls?: pulumi.Input<string>;
    failedlogintimeout?: pulumi.Input<number>;
    httpprofilename?: pulumi.Input<string>;
    icaonly?: pulumi.Input<string>;
    icaproxysessionmigration?: pulumi.Input<string>;
    icmpvsrresponse?: pulumi.Input<string>;
    ipset?: pulumi.Input<string>;
    ipv46?: pulumi.Input<string>;
    l2conn?: pulumi.Input<string>;
    linuxepapluginupgrade?: pulumi.Input<string>;
    listenpolicy?: pulumi.Input<string>;
    listenpriority?: pulumi.Input<number>;
    loginonce?: pulumi.Input<string>;
    logoutonsmartcardremoval?: pulumi.Input<string>;
    macepapluginupgrade?: pulumi.Input<string>;
    maxaaausers?: pulumi.Input<number>;
    maxloginattempts?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    netprofile?: pulumi.Input<string>;
    pcoipvserverprofilename?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    range?: pulumi.Input<number>;
    rdpserverprofilename?: pulumi.Input<string>;
    rhistate?: pulumi.Input<string>;
    samesite?: pulumi.Input<string>;
    servicetype?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tcpprofilename?: pulumi.Input<string>;
    userdomains?: pulumi.Input<string>;
    vserverfqdn?: pulumi.Input<string>;
    windowsepapluginupgrade?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vpnvserver resource.
 */
export interface VpnvserverArgs {
    advancedepa?: pulumi.Input<string>;
    appflowlog?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    authnprofile?: pulumi.Input<string>;
    certkeynames?: pulumi.Input<string>;
    cginfrahomepageredirect?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    deploymenttype?: pulumi.Input<string>;
    devicecert?: pulumi.Input<string>;
    doublehop?: pulumi.Input<string>;
    downstateflush?: pulumi.Input<string>;
    dtls?: pulumi.Input<string>;
    failedlogintimeout?: pulumi.Input<number>;
    httpprofilename?: pulumi.Input<string>;
    icaonly?: pulumi.Input<string>;
    icaproxysessionmigration?: pulumi.Input<string>;
    icmpvsrresponse?: pulumi.Input<string>;
    ipset?: pulumi.Input<string>;
    ipv46?: pulumi.Input<string>;
    l2conn?: pulumi.Input<string>;
    linuxepapluginupgrade?: pulumi.Input<string>;
    listenpolicy?: pulumi.Input<string>;
    listenpriority?: pulumi.Input<number>;
    loginonce?: pulumi.Input<string>;
    logoutonsmartcardremoval?: pulumi.Input<string>;
    macepapluginupgrade?: pulumi.Input<string>;
    maxaaausers?: pulumi.Input<number>;
    maxloginattempts?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    netprofile?: pulumi.Input<string>;
    pcoipvserverprofilename?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    range?: pulumi.Input<number>;
    rdpserverprofilename?: pulumi.Input<string>;
    rhistate?: pulumi.Input<string>;
    samesite?: pulumi.Input<string>;
    servicetype: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tcpprofilename?: pulumi.Input<string>;
    userdomains?: pulumi.Input<string>;
    vserverfqdn?: pulumi.Input<string>;
    windowsepapluginupgrade?: pulumi.Input<string>;
}
