// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Aaaldapparams extends pulumi.CustomResource {
    /**
     * Get an existing Aaaldapparams resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AaaldapparamsState, opts?: pulumi.CustomResourceOptions): Aaaldapparams {
        return new Aaaldapparams(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/aaaldapparams:Aaaldapparams';

    /**
     * Returns true if the given object is an instance of Aaaldapparams.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Aaaldapparams {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Aaaldapparams.__pulumiType;
    }

    public readonly authtimeout!: pulumi.Output<number>;
    public readonly defaultauthenticationgroup!: pulumi.Output<string>;
    public readonly groupattrname!: pulumi.Output<string>;
    public readonly groupnameidentifier!: pulumi.Output<string>;
    public readonly groupsearchattribute!: pulumi.Output<string>;
    public readonly groupsearchfilter!: pulumi.Output<string>;
    public readonly groupsearchsubattribute!: pulumi.Output<string>;
    public readonly ldapbase!: pulumi.Output<string>;
    public readonly ldapbinddn!: pulumi.Output<string>;
    public readonly ldapbinddnpassword!: pulumi.Output<string>;
    public readonly ldaploginname!: pulumi.Output<string>;
    public readonly maxnestinglevel!: pulumi.Output<number>;
    public readonly nestedgroupextraction!: pulumi.Output<string>;
    public readonly passwdchange!: pulumi.Output<string>;
    public readonly searchfilter!: pulumi.Output<string>;
    public readonly sectype!: pulumi.Output<string>;
    public readonly serverip!: pulumi.Output<string>;
    public readonly serverport!: pulumi.Output<number>;
    public readonly ssonameattribute!: pulumi.Output<string>;
    public readonly subattributename!: pulumi.Output<string>;
    public readonly svrtype!: pulumi.Output<string>;

    /**
     * Create a Aaaldapparams resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AaaldapparamsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AaaldapparamsArgs | AaaldapparamsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AaaldapparamsState | undefined;
            resourceInputs["authtimeout"] = state ? state.authtimeout : undefined;
            resourceInputs["defaultauthenticationgroup"] = state ? state.defaultauthenticationgroup : undefined;
            resourceInputs["groupattrname"] = state ? state.groupattrname : undefined;
            resourceInputs["groupnameidentifier"] = state ? state.groupnameidentifier : undefined;
            resourceInputs["groupsearchattribute"] = state ? state.groupsearchattribute : undefined;
            resourceInputs["groupsearchfilter"] = state ? state.groupsearchfilter : undefined;
            resourceInputs["groupsearchsubattribute"] = state ? state.groupsearchsubattribute : undefined;
            resourceInputs["ldapbase"] = state ? state.ldapbase : undefined;
            resourceInputs["ldapbinddn"] = state ? state.ldapbinddn : undefined;
            resourceInputs["ldapbinddnpassword"] = state ? state.ldapbinddnpassword : undefined;
            resourceInputs["ldaploginname"] = state ? state.ldaploginname : undefined;
            resourceInputs["maxnestinglevel"] = state ? state.maxnestinglevel : undefined;
            resourceInputs["nestedgroupextraction"] = state ? state.nestedgroupextraction : undefined;
            resourceInputs["passwdchange"] = state ? state.passwdchange : undefined;
            resourceInputs["searchfilter"] = state ? state.searchfilter : undefined;
            resourceInputs["sectype"] = state ? state.sectype : undefined;
            resourceInputs["serverip"] = state ? state.serverip : undefined;
            resourceInputs["serverport"] = state ? state.serverport : undefined;
            resourceInputs["ssonameattribute"] = state ? state.ssonameattribute : undefined;
            resourceInputs["subattributename"] = state ? state.subattributename : undefined;
            resourceInputs["svrtype"] = state ? state.svrtype : undefined;
        } else {
            const args = argsOrState as AaaldapparamsArgs | undefined;
            resourceInputs["authtimeout"] = args ? args.authtimeout : undefined;
            resourceInputs["defaultauthenticationgroup"] = args ? args.defaultauthenticationgroup : undefined;
            resourceInputs["groupattrname"] = args ? args.groupattrname : undefined;
            resourceInputs["groupnameidentifier"] = args ? args.groupnameidentifier : undefined;
            resourceInputs["groupsearchattribute"] = args ? args.groupsearchattribute : undefined;
            resourceInputs["groupsearchfilter"] = args ? args.groupsearchfilter : undefined;
            resourceInputs["groupsearchsubattribute"] = args ? args.groupsearchsubattribute : undefined;
            resourceInputs["ldapbase"] = args ? args.ldapbase : undefined;
            resourceInputs["ldapbinddn"] = args ? args.ldapbinddn : undefined;
            resourceInputs["ldapbinddnpassword"] = args ? args.ldapbinddnpassword : undefined;
            resourceInputs["ldaploginname"] = args ? args.ldaploginname : undefined;
            resourceInputs["maxnestinglevel"] = args ? args.maxnestinglevel : undefined;
            resourceInputs["nestedgroupextraction"] = args ? args.nestedgroupextraction : undefined;
            resourceInputs["passwdchange"] = args ? args.passwdchange : undefined;
            resourceInputs["searchfilter"] = args ? args.searchfilter : undefined;
            resourceInputs["sectype"] = args ? args.sectype : undefined;
            resourceInputs["serverip"] = args ? args.serverip : undefined;
            resourceInputs["serverport"] = args ? args.serverport : undefined;
            resourceInputs["ssonameattribute"] = args ? args.ssonameattribute : undefined;
            resourceInputs["subattributename"] = args ? args.subattributename : undefined;
            resourceInputs["svrtype"] = args ? args.svrtype : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Aaaldapparams.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Aaaldapparams resources.
 */
export interface AaaldapparamsState {
    authtimeout?: pulumi.Input<number>;
    defaultauthenticationgroup?: pulumi.Input<string>;
    groupattrname?: pulumi.Input<string>;
    groupnameidentifier?: pulumi.Input<string>;
    groupsearchattribute?: pulumi.Input<string>;
    groupsearchfilter?: pulumi.Input<string>;
    groupsearchsubattribute?: pulumi.Input<string>;
    ldapbase?: pulumi.Input<string>;
    ldapbinddn?: pulumi.Input<string>;
    ldapbinddnpassword?: pulumi.Input<string>;
    ldaploginname?: pulumi.Input<string>;
    maxnestinglevel?: pulumi.Input<number>;
    nestedgroupextraction?: pulumi.Input<string>;
    passwdchange?: pulumi.Input<string>;
    searchfilter?: pulumi.Input<string>;
    sectype?: pulumi.Input<string>;
    serverip?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    ssonameattribute?: pulumi.Input<string>;
    subattributename?: pulumi.Input<string>;
    svrtype?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Aaaldapparams resource.
 */
export interface AaaldapparamsArgs {
    authtimeout?: pulumi.Input<number>;
    defaultauthenticationgroup?: pulumi.Input<string>;
    groupattrname?: pulumi.Input<string>;
    groupnameidentifier?: pulumi.Input<string>;
    groupsearchattribute?: pulumi.Input<string>;
    groupsearchfilter?: pulumi.Input<string>;
    groupsearchsubattribute?: pulumi.Input<string>;
    ldapbase?: pulumi.Input<string>;
    ldapbinddn?: pulumi.Input<string>;
    ldapbinddnpassword?: pulumi.Input<string>;
    ldaploginname?: pulumi.Input<string>;
    maxnestinglevel?: pulumi.Input<number>;
    nestedgroupextraction?: pulumi.Input<string>;
    passwdchange?: pulumi.Input<string>;
    searchfilter?: pulumi.Input<string>;
    sectype?: pulumi.Input<string>;
    serverip?: pulumi.Input<string>;
    serverport?: pulumi.Input<number>;
    ssonameattribute?: pulumi.Input<string>;
    subattributename?: pulumi.Input<string>;
    svrtype?: pulumi.Input<string>;
}
