// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Radiusnode extends pulumi.CustomResource {
    /**
     * Get an existing Radiusnode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RadiusnodeState, opts?: pulumi.CustomResourceOptions): Radiusnode {
        return new Radiusnode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/radiusnode:Radiusnode';

    /**
     * Returns true if the given object is an instance of Radiusnode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Radiusnode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Radiusnode.__pulumiType;
    }

    public readonly nodeprefix!: pulumi.Output<string>;
    public readonly radkey!: pulumi.Output<string>;

    /**
     * Create a Radiusnode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RadiusnodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RadiusnodeArgs | RadiusnodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RadiusnodeState | undefined;
            resourceInputs["nodeprefix"] = state ? state.nodeprefix : undefined;
            resourceInputs["radkey"] = state ? state.radkey : undefined;
        } else {
            const args = argsOrState as RadiusnodeArgs | undefined;
            if ((!args || args.nodeprefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeprefix'");
            }
            if ((!args || args.radkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'radkey'");
            }
            resourceInputs["nodeprefix"] = args ? args.nodeprefix : undefined;
            resourceInputs["radkey"] = args ? args.radkey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Radiusnode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Radiusnode resources.
 */
export interface RadiusnodeState {
    nodeprefix?: pulumi.Input<string>;
    radkey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Radiusnode resource.
 */
export interface RadiusnodeArgs {
    nodeprefix: pulumi.Input<string>;
    radkey: pulumi.Input<string>;
}
