// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MapbmrBmrv4networkBinding extends pulumi.CustomResource {
    /**
     * Get an existing MapbmrBmrv4networkBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MapbmrBmrv4networkBindingState, opts?: pulumi.CustomResourceOptions): MapbmrBmrv4networkBinding {
        return new MapbmrBmrv4networkBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/mapbmrBmrv4networkBinding:MapbmrBmrv4networkBinding';

    /**
     * Returns true if the given object is an instance of MapbmrBmrv4networkBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MapbmrBmrv4networkBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MapbmrBmrv4networkBinding.__pulumiType;
    }

    public readonly name!: pulumi.Output<string>;
    public readonly netmask!: pulumi.Output<string>;
    public readonly network!: pulumi.Output<string>;

    /**
     * Create a MapbmrBmrv4networkBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MapbmrBmrv4networkBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MapbmrBmrv4networkBindingArgs | MapbmrBmrv4networkBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MapbmrBmrv4networkBindingState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
        } else {
            const args = argsOrState as MapbmrBmrv4networkBindingArgs | undefined;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MapbmrBmrv4networkBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MapbmrBmrv4networkBinding resources.
 */
export interface MapbmrBmrv4networkBindingState {
    name?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    network?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MapbmrBmrv4networkBinding resource.
 */
export interface MapbmrBmrv4networkBindingArgs {
    name?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    network: pulumi.Input<string>;
}
