// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Netprofile extends pulumi.CustomResource {
    /**
     * Get an existing Netprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetprofileState, opts?: pulumi.CustomResourceOptions): Netprofile {
        return new Netprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'citrixadc:index/netprofile:Netprofile';

    /**
     * Returns true if the given object is an instance of Netprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Netprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Netprofile.__pulumiType;
    }

    public readonly mbf!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly overridelsn!: pulumi.Output<string>;
    public readonly proxyprotocol!: pulumi.Output<string>;
    public readonly proxyprotocolaftertlshandshake!: pulumi.Output<string>;
    public readonly proxyprotocoltxversion!: pulumi.Output<string>;
    public readonly srcip!: pulumi.Output<string>;
    public readonly srcippersistency!: pulumi.Output<string>;
    public readonly td!: pulumi.Output<number>;

    /**
     * Create a Netprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetprofileArgs | NetprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetprofileState | undefined;
            resourceInputs["mbf"] = state ? state.mbf : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overridelsn"] = state ? state.overridelsn : undefined;
            resourceInputs["proxyprotocol"] = state ? state.proxyprotocol : undefined;
            resourceInputs["proxyprotocolaftertlshandshake"] = state ? state.proxyprotocolaftertlshandshake : undefined;
            resourceInputs["proxyprotocoltxversion"] = state ? state.proxyprotocoltxversion : undefined;
            resourceInputs["srcip"] = state ? state.srcip : undefined;
            resourceInputs["srcippersistency"] = state ? state.srcippersistency : undefined;
            resourceInputs["td"] = state ? state.td : undefined;
        } else {
            const args = argsOrState as NetprofileArgs | undefined;
            resourceInputs["mbf"] = args ? args.mbf : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overridelsn"] = args ? args.overridelsn : undefined;
            resourceInputs["proxyprotocol"] = args ? args.proxyprotocol : undefined;
            resourceInputs["proxyprotocolaftertlshandshake"] = args ? args.proxyprotocolaftertlshandshake : undefined;
            resourceInputs["proxyprotocoltxversion"] = args ? args.proxyprotocoltxversion : undefined;
            resourceInputs["srcip"] = args ? args.srcip : undefined;
            resourceInputs["srcippersistency"] = args ? args.srcippersistency : undefined;
            resourceInputs["td"] = args ? args.td : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Netprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Netprofile resources.
 */
export interface NetprofileState {
    mbf?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overridelsn?: pulumi.Input<string>;
    proxyprotocol?: pulumi.Input<string>;
    proxyprotocolaftertlshandshake?: pulumi.Input<string>;
    proxyprotocoltxversion?: pulumi.Input<string>;
    srcip?: pulumi.Input<string>;
    srcippersistency?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Netprofile resource.
 */
export interface NetprofileArgs {
    mbf?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overridelsn?: pulumi.Input<string>;
    proxyprotocol?: pulumi.Input<string>;
    proxyprotocolaftertlshandshake?: pulumi.Input<string>;
    proxyprotocoltxversion?: pulumi.Input<string>;
    srcip?: pulumi.Input<string>;
    srcippersistency?: pulumi.Input<string>;
    td?: pulumi.Input<number>;
}
