// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UserFssopolling extends pulumi.CustomResource {
    /**
     * Get an existing UserFssopolling resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserFssopollingState, opts?: pulumi.CustomResourceOptions): UserFssopolling {
        return new UserFssopolling(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/userFssopolling:UserFssopolling';

    /**
     * Returns true if the given object is an instance of UserFssopolling.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserFssopolling {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserFssopolling.__pulumiType;
    }

    public readonly adgrps!: pulumi.Output<outputs.UserFssopollingAdgrp[] | undefined>;
    public readonly defaultDomain!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fosid!: pulumi.Output<number>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly ldapServer!: pulumi.Output<string>;
    public readonly logonHistory!: pulumi.Output<number>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly pollingFrequency!: pulumi.Output<number>;
    public readonly port!: pulumi.Output<number>;
    public readonly server!: pulumi.Output<string>;
    public readonly smbNtlmv1Auth!: pulumi.Output<string>;
    public readonly smbv1!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly user!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a UserFssopolling resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserFssopollingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserFssopollingArgs | UserFssopollingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserFssopollingState | undefined;
            resourceInputs["adgrps"] = state ? state.adgrps : undefined;
            resourceInputs["defaultDomain"] = state ? state.defaultDomain : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["ldapServer"] = state ? state.ldapServer : undefined;
            resourceInputs["logonHistory"] = state ? state.logonHistory : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pollingFrequency"] = state ? state.pollingFrequency : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["smbNtlmv1Auth"] = state ? state.smbNtlmv1Auth : undefined;
            resourceInputs["smbv1"] = state ? state.smbv1 : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as UserFssopollingArgs | undefined;
            if ((!args || args.ldapServer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ldapServer'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["adgrps"] = args ? args.adgrps : undefined;
            resourceInputs["defaultDomain"] = args ? args.defaultDomain : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["ldapServer"] = args ? args.ldapServer : undefined;
            resourceInputs["logonHistory"] = args ? args.logonHistory : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["pollingFrequency"] = args ? args.pollingFrequency : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["smbNtlmv1Auth"] = args ? args.smbNtlmv1Auth : undefined;
            resourceInputs["smbv1"] = args ? args.smbv1 : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UserFssopolling.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserFssopolling resources.
 */
export interface UserFssopollingState {
    adgrps?: pulumi.Input<pulumi.Input<inputs.UserFssopollingAdgrp>[]>;
    defaultDomain?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    ldapServer?: pulumi.Input<string>;
    logonHistory?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    pollingFrequency?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    smbNtlmv1Auth?: pulumi.Input<string>;
    smbv1?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserFssopolling resource.
 */
export interface UserFssopollingArgs {
    adgrps?: pulumi.Input<pulumi.Input<inputs.UserFssopollingAdgrp>[]>;
    defaultDomain?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    ldapServer: pulumi.Input<string>;
    logonHistory?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    pollingFrequency?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    server: pulumi.Input<string>;
    smbNtlmv1Auth?: pulumi.Input<string>;
    smbv1?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    user: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
