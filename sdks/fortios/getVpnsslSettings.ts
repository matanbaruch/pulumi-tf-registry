// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVpnsslSettings(args?: GetVpnsslSettingsArgs, opts?: pulumi.InvokeOptions): Promise<GetVpnsslSettingsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:index/getVpnsslSettings:getVpnsslSettings", {
        "id": args.id,
        "vdomparam": args.vdomparam,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVpnsslSettings.
 */
export interface GetVpnsslSettingsArgs {
    id?: string;
    vdomparam?: string;
}

/**
 * A collection of values returned by getVpnsslSettings.
 */
export interface GetVpnsslSettingsResult {
    readonly algorithm: string;
    readonly authSessionCheckSourceIp: string;
    readonly authTimeout: number;
    readonly authenticationRules: outputs.GetVpnsslSettingsAuthenticationRule[];
    readonly autoTunnelStaticRoute: string;
    readonly bannedCipher: string;
    readonly browserLanguageDetection: string;
    readonly checkReferer: string;
    readonly ciphersuite: string;
    readonly clientSigalgs: string;
    readonly defaultPortal: string;
    readonly deflateCompressionLevel: number;
    readonly deflateMinDataSize: number;
    readonly dnsServer1: string;
    readonly dnsServer2: string;
    readonly dnsSuffix: string;
    readonly dtlsHeartbeatFailCount: number;
    readonly dtlsHeartbeatIdleTimeout: number;
    readonly dtlsHeartbeatInterval: number;
    readonly dtlsHelloTimeout: number;
    readonly dtlsMaxProtoVer: string;
    readonly dtlsMinProtoVer: string;
    readonly dtlsTunnel: string;
    readonly dualStackMode: string;
    readonly encode2fSequence: string;
    readonly encryptAndStorePassword: string;
    readonly forceTwoFactorAuth: string;
    readonly headerXForwardedFor: string;
    readonly hstsIncludeSubdomains: string;
    readonly httpCompression: string;
    readonly httpOnlyCookie: string;
    readonly httpRequestBodyTimeout: number;
    readonly httpRequestHeaderTimeout: number;
    readonly httpsRedirect: string;
    readonly id: string;
    readonly idleTimeout: number;
    readonly ipv6DnsServer1: string;
    readonly ipv6DnsServer2: string;
    readonly ipv6WinsServer1: string;
    readonly ipv6WinsServer2: string;
    readonly loginAttemptLimit: number;
    readonly loginBlockTime: number;
    readonly loginTimeout: number;
    readonly port: number;
    readonly portPrecedence: string;
    readonly reqclientcert: string;
    readonly routeSourceInterface: string;
    readonly samlRedirectPort: number;
    readonly serverHostname: string;
    readonly servercert: string;
    readonly sourceAddress6Negate: string;
    readonly sourceAddress6s: outputs.GetVpnsslSettingsSourceAddress6[];
    readonly sourceAddressNegate: string;
    readonly sourceAddresses: outputs.GetVpnsslSettingsSourceAddress[];
    readonly sourceInterfaces: outputs.GetVpnsslSettingsSourceInterface[];
    readonly sslClientRenegotiation: string;
    readonly sslInsertEmptyFragment: string;
    readonly sslMaxProtoVer: string;
    readonly sslMinProtoVer: string;
    readonly status: string;
    readonly tlsv10: string;
    readonly tlsv11: string;
    readonly tlsv12: string;
    readonly tlsv13: string;
    readonly transformBackwardSlashes: string;
    readonly tunnelAddrAssignedMethod: string;
    readonly tunnelConnectWithoutReauth: string;
    readonly tunnelIpPools: outputs.GetVpnsslSettingsTunnelIpPool[];
    readonly tunnelIpv6Pools: outputs.GetVpnsslSettingsTunnelIpv6Pool[];
    readonly tunnelUserSessionTimeout: number;
    readonly unsafeLegacyRenegotiation: string;
    readonly urlObscuration: string;
    readonly userPeer: string;
    readonly vdomparam?: string;
    readonly webModeSnat: string;
    readonly winsServer1: string;
    readonly winsServer2: string;
    readonly xContentTypeOptions: string;
    readonly ztnaTrustedClient: string;
}
export function getVpnsslSettingsOutput(args?: GetVpnsslSettingsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpnsslSettingsResult> {
    return pulumi.output(args).apply((a: any) => getVpnsslSettings(a, opts))
}

/**
 * A collection of arguments for invoking getVpnsslSettings.
 */
export interface GetVpnsslSettingsOutputArgs {
    id?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
