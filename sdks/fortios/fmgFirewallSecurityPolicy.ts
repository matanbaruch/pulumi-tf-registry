// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FmgFirewallSecurityPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FmgFirewallSecurityPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FmgFirewallSecurityPolicyState, opts?: pulumi.CustomResourceOptions): FmgFirewallSecurityPolicy {
        return new FmgFirewallSecurityPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/fmgFirewallSecurityPolicy:FmgFirewallSecurityPolicy';

    /**
     * Returns true if the given object is an instance of FmgFirewallSecurityPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FmgFirewallSecurityPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FmgFirewallSecurityPolicy.__pulumiType;
    }

    public readonly action!: pulumi.Output<string | undefined>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly applicationLists!: pulumi.Output<string[] | undefined>;
    public readonly avProfiles!: pulumi.Output<string[] | undefined>;
    public readonly capturePacket!: pulumi.Output<string | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly dnsfilterProfiles!: pulumi.Output<string[] | undefined>;
    public readonly dstaddrs!: pulumi.Output<string[]>;
    public readonly dstintfs!: pulumi.Output<string[]>;
    public readonly fixedport!: pulumi.Output<string | undefined>;
    public readonly fsso!: pulumi.Output<string | undefined>;
    public readonly groups!: pulumi.Output<string[] | undefined>;
    public readonly inbound!: pulumi.Output<string | undefined>;
    public readonly internetService!: pulumi.Output<string>;
    public readonly internetServiceIds!: pulumi.Output<string[] | undefined>;
    public readonly internetServiceNames!: pulumi.Output<string[] | undefined>;
    public readonly internetServiceSrc!: pulumi.Output<string>;
    public readonly internetServiceSrcIds!: pulumi.Output<string[] | undefined>;
    public readonly internetServiceSrcNames!: pulumi.Output<string[] | undefined>;
    public readonly ippool!: pulumi.Output<string | undefined>;
    public readonly ipsSensors!: pulumi.Output<string[] | undefined>;
    public readonly logtraffic!: pulumi.Output<string | undefined>;
    public readonly logtrafficStart!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nat!: pulumi.Output<string | undefined>;
    public readonly packageName!: pulumi.Output<string | undefined>;
    public readonly perIpShapers!: pulumi.Output<string[] | undefined>;
    public readonly poolnames!: pulumi.Output<string[] | undefined>;
    public readonly profileGroups!: pulumi.Output<string[] | undefined>;
    public readonly profileProtocolOptions!: pulumi.Output<string[] | undefined>;
    public readonly profileType!: pulumi.Output<string | undefined>;
    public readonly rsso!: pulumi.Output<string | undefined>;
    public readonly schedules!: pulumi.Output<string[]>;
    public readonly services!: pulumi.Output<string[]>;
    public readonly srcaddrs!: pulumi.Output<string[]>;
    public readonly srcintfs!: pulumi.Output<string[]>;
    public readonly trafficShaperReverses!: pulumi.Output<string[] | undefined>;
    public readonly trafficShapers!: pulumi.Output<string[] | undefined>;
    public readonly users!: pulumi.Output<string[] | undefined>;
    public readonly utmStatus!: pulumi.Output<string | undefined>;
    public readonly vpnTunnels!: pulumi.Output<string[] | undefined>;
    public readonly wafProfiles!: pulumi.Output<string[] | undefined>;
    public readonly webfilterProfiles!: pulumi.Output<string[] | undefined>;

    /**
     * Create a FmgFirewallSecurityPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FmgFirewallSecurityPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FmgFirewallSecurityPolicyArgs | FmgFirewallSecurityPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FmgFirewallSecurityPolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["applicationLists"] = state ? state.applicationLists : undefined;
            resourceInputs["avProfiles"] = state ? state.avProfiles : undefined;
            resourceInputs["capturePacket"] = state ? state.capturePacket : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dnsfilterProfiles"] = state ? state.dnsfilterProfiles : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dstintfs"] = state ? state.dstintfs : undefined;
            resourceInputs["fixedport"] = state ? state.fixedport : undefined;
            resourceInputs["fsso"] = state ? state.fsso : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["inbound"] = state ? state.inbound : undefined;
            resourceInputs["internetService"] = state ? state.internetService : undefined;
            resourceInputs["internetServiceIds"] = state ? state.internetServiceIds : undefined;
            resourceInputs["internetServiceNames"] = state ? state.internetServiceNames : undefined;
            resourceInputs["internetServiceSrc"] = state ? state.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcIds"] = state ? state.internetServiceSrcIds : undefined;
            resourceInputs["internetServiceSrcNames"] = state ? state.internetServiceSrcNames : undefined;
            resourceInputs["ippool"] = state ? state.ippool : undefined;
            resourceInputs["ipsSensors"] = state ? state.ipsSensors : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = state ? state.logtrafficStart : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nat"] = state ? state.nat : undefined;
            resourceInputs["packageName"] = state ? state.packageName : undefined;
            resourceInputs["perIpShapers"] = state ? state.perIpShapers : undefined;
            resourceInputs["poolnames"] = state ? state.poolnames : undefined;
            resourceInputs["profileGroups"] = state ? state.profileGroups : undefined;
            resourceInputs["profileProtocolOptions"] = state ? state.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = state ? state.profileType : undefined;
            resourceInputs["rsso"] = state ? state.rsso : undefined;
            resourceInputs["schedules"] = state ? state.schedules : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["srcintfs"] = state ? state.srcintfs : undefined;
            resourceInputs["trafficShaperReverses"] = state ? state.trafficShaperReverses : undefined;
            resourceInputs["trafficShapers"] = state ? state.trafficShapers : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["utmStatus"] = state ? state.utmStatus : undefined;
            resourceInputs["vpnTunnels"] = state ? state.vpnTunnels : undefined;
            resourceInputs["wafProfiles"] = state ? state.wafProfiles : undefined;
            resourceInputs["webfilterProfiles"] = state ? state.webfilterProfiles : undefined;
        } else {
            const args = argsOrState as FmgFirewallSecurityPolicyArgs | undefined;
            if ((!args || args.dstaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstaddrs'");
            }
            if ((!args || args.dstintfs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstintfs'");
            }
            if ((!args || args.schedules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedules'");
            }
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if ((!args || args.srcaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcaddrs'");
            }
            if ((!args || args.srcintfs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcintfs'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["applicationLists"] = args ? args.applicationLists : undefined;
            resourceInputs["avProfiles"] = args ? args.avProfiles : undefined;
            resourceInputs["capturePacket"] = args ? args.capturePacket : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dnsfilterProfiles"] = args ? args.dnsfilterProfiles : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dstintfs"] = args ? args.dstintfs : undefined;
            resourceInputs["fixedport"] = args ? args.fixedport : undefined;
            resourceInputs["fsso"] = args ? args.fsso : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["inbound"] = args ? args.inbound : undefined;
            resourceInputs["internetService"] = args ? args.internetService : undefined;
            resourceInputs["internetServiceIds"] = args ? args.internetServiceIds : undefined;
            resourceInputs["internetServiceNames"] = args ? args.internetServiceNames : undefined;
            resourceInputs["internetServiceSrc"] = args ? args.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcIds"] = args ? args.internetServiceSrcIds : undefined;
            resourceInputs["internetServiceSrcNames"] = args ? args.internetServiceSrcNames : undefined;
            resourceInputs["ippool"] = args ? args.ippool : undefined;
            resourceInputs["ipsSensors"] = args ? args.ipsSensors : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = args ? args.logtrafficStart : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nat"] = args ? args.nat : undefined;
            resourceInputs["packageName"] = args ? args.packageName : undefined;
            resourceInputs["perIpShapers"] = args ? args.perIpShapers : undefined;
            resourceInputs["poolnames"] = args ? args.poolnames : undefined;
            resourceInputs["profileGroups"] = args ? args.profileGroups : undefined;
            resourceInputs["profileProtocolOptions"] = args ? args.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["rsso"] = args ? args.rsso : undefined;
            resourceInputs["schedules"] = args ? args.schedules : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["srcintfs"] = args ? args.srcintfs : undefined;
            resourceInputs["trafficShaperReverses"] = args ? args.trafficShaperReverses : undefined;
            resourceInputs["trafficShapers"] = args ? args.trafficShapers : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["utmStatus"] = args ? args.utmStatus : undefined;
            resourceInputs["vpnTunnels"] = args ? args.vpnTunnels : undefined;
            resourceInputs["wafProfiles"] = args ? args.wafProfiles : undefined;
            resourceInputs["webfilterProfiles"] = args ? args.webfilterProfiles : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FmgFirewallSecurityPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FmgFirewallSecurityPolicy resources.
 */
export interface FmgFirewallSecurityPolicyState {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    applicationLists?: pulumi.Input<pulumi.Input<string>[]>;
    avProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    capturePacket?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dnsfilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    fixedport?: pulumi.Input<string>;
    fsso?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    inbound?: pulumi.Input<string>;
    internetService?: pulumi.Input<string>;
    internetServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceNames?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcIds?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<string>[]>;
    ippool?: pulumi.Input<string>;
    ipsSensors?: pulumi.Input<pulumi.Input<string>[]>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nat?: pulumi.Input<string>;
    packageName?: pulumi.Input<string>;
    perIpShapers?: pulumi.Input<pulumi.Input<string>[]>;
    poolnames?: pulumi.Input<pulumi.Input<string>[]>;
    profileGroups?: pulumi.Input<pulumi.Input<string>[]>;
    profileProtocolOptions?: pulumi.Input<pulumi.Input<string>[]>;
    profileType?: pulumi.Input<string>;
    rsso?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<string>[]>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
    trafficShaperReverses?: pulumi.Input<pulumi.Input<string>[]>;
    trafficShapers?: pulumi.Input<pulumi.Input<string>[]>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    utmStatus?: pulumi.Input<string>;
    vpnTunnels?: pulumi.Input<pulumi.Input<string>[]>;
    wafProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    webfilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a FmgFirewallSecurityPolicy resource.
 */
export interface FmgFirewallSecurityPolicyArgs {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    applicationLists?: pulumi.Input<pulumi.Input<string>[]>;
    avProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    capturePacket?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dnsfilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    dstaddrs: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs: pulumi.Input<pulumi.Input<string>[]>;
    fixedport?: pulumi.Input<string>;
    fsso?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    inbound?: pulumi.Input<string>;
    internetService?: pulumi.Input<string>;
    internetServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceNames?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcIds?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<string>[]>;
    ippool?: pulumi.Input<string>;
    ipsSensors?: pulumi.Input<pulumi.Input<string>[]>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nat?: pulumi.Input<string>;
    packageName?: pulumi.Input<string>;
    perIpShapers?: pulumi.Input<pulumi.Input<string>[]>;
    poolnames?: pulumi.Input<pulumi.Input<string>[]>;
    profileGroups?: pulumi.Input<pulumi.Input<string>[]>;
    profileProtocolOptions?: pulumi.Input<pulumi.Input<string>[]>;
    profileType?: pulumi.Input<string>;
    rsso?: pulumi.Input<string>;
    schedules: pulumi.Input<pulumi.Input<string>[]>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrs: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs: pulumi.Input<pulumi.Input<string>[]>;
    trafficShaperReverses?: pulumi.Input<pulumi.Input<string>[]>;
    trafficShapers?: pulumi.Input<pulumi.Input<string>[]>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    utmStatus?: pulumi.Input<string>;
    vpnTunnels?: pulumi.Input<pulumi.Input<string>[]>;
    wafProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    webfilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}
