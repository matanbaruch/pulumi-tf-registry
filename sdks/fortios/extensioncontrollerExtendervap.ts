// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ExtensioncontrollerExtendervap extends pulumi.CustomResource {
    /**
     * Get an existing ExtensioncontrollerExtendervap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtensioncontrollerExtendervapState, opts?: pulumi.CustomResourceOptions): ExtensioncontrollerExtendervap {
        return new ExtensioncontrollerExtendervap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/extensioncontrollerExtendervap:ExtensioncontrollerExtendervap';

    /**
     * Returns true if the given object is an instance of ExtensioncontrollerExtendervap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExtensioncontrollerExtendervap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExtensioncontrollerExtendervap.__pulumiType;
    }

    public readonly allowaccess!: pulumi.Output<string>;
    public readonly authServerAddress!: pulumi.Output<string>;
    public readonly authServerPort!: pulumi.Output<number>;
    public readonly authServerSecret!: pulumi.Output<string>;
    public readonly broadcastSsid!: pulumi.Output<string>;
    public readonly bssColorPartial!: pulumi.Output<string>;
    public readonly dtim!: pulumi.Output<number>;
    public readonly endIp!: pulumi.Output<string>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly maxClients!: pulumi.Output<number>;
    public readonly muMimo!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly passphrase!: pulumi.Output<string | undefined>;
    public readonly pmf!: pulumi.Output<string>;
    public readonly rtsThreshold!: pulumi.Output<number>;
    public readonly saePassword!: pulumi.Output<string | undefined>;
    public readonly security!: pulumi.Output<string>;
    public readonly ssid!: pulumi.Output<string>;
    public readonly startIp!: pulumi.Output<string>;
    public readonly targetWakeTime!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a ExtensioncontrollerExtendervap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ExtensioncontrollerExtendervapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtensioncontrollerExtendervapArgs | ExtensioncontrollerExtendervapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtensioncontrollerExtendervapState | undefined;
            resourceInputs["allowaccess"] = state ? state.allowaccess : undefined;
            resourceInputs["authServerAddress"] = state ? state.authServerAddress : undefined;
            resourceInputs["authServerPort"] = state ? state.authServerPort : undefined;
            resourceInputs["authServerSecret"] = state ? state.authServerSecret : undefined;
            resourceInputs["broadcastSsid"] = state ? state.broadcastSsid : undefined;
            resourceInputs["bssColorPartial"] = state ? state.bssColorPartial : undefined;
            resourceInputs["dtim"] = state ? state.dtim : undefined;
            resourceInputs["endIp"] = state ? state.endIp : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["maxClients"] = state ? state.maxClients : undefined;
            resourceInputs["muMimo"] = state ? state.muMimo : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["pmf"] = state ? state.pmf : undefined;
            resourceInputs["rtsThreshold"] = state ? state.rtsThreshold : undefined;
            resourceInputs["saePassword"] = state ? state.saePassword : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["ssid"] = state ? state.ssid : undefined;
            resourceInputs["startIp"] = state ? state.startIp : undefined;
            resourceInputs["targetWakeTime"] = state ? state.targetWakeTime : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as ExtensioncontrollerExtendervapArgs | undefined;
            resourceInputs["allowaccess"] = args ? args.allowaccess : undefined;
            resourceInputs["authServerAddress"] = args ? args.authServerAddress : undefined;
            resourceInputs["authServerPort"] = args ? args.authServerPort : undefined;
            resourceInputs["authServerSecret"] = args ? args.authServerSecret : undefined;
            resourceInputs["broadcastSsid"] = args ? args.broadcastSsid : undefined;
            resourceInputs["bssColorPartial"] = args ? args.bssColorPartial : undefined;
            resourceInputs["dtim"] = args ? args.dtim : undefined;
            resourceInputs["endIp"] = args ? args.endIp : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["maxClients"] = args ? args.maxClients : undefined;
            resourceInputs["muMimo"] = args ? args.muMimo : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passphrase"] = args ? args.passphrase : undefined;
            resourceInputs["pmf"] = args ? args.pmf : undefined;
            resourceInputs["rtsThreshold"] = args ? args.rtsThreshold : undefined;
            resourceInputs["saePassword"] = args ? args.saePassword : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["ssid"] = args ? args.ssid : undefined;
            resourceInputs["startIp"] = args ? args.startIp : undefined;
            resourceInputs["targetWakeTime"] = args ? args.targetWakeTime : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExtensioncontrollerExtendervap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExtensioncontrollerExtendervap resources.
 */
export interface ExtensioncontrollerExtendervapState {
    allowaccess?: pulumi.Input<string>;
    authServerAddress?: pulumi.Input<string>;
    authServerPort?: pulumi.Input<number>;
    authServerSecret?: pulumi.Input<string>;
    broadcastSsid?: pulumi.Input<string>;
    bssColorPartial?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    endIp?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    maxClients?: pulumi.Input<number>;
    muMimo?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passphrase?: pulumi.Input<string>;
    pmf?: pulumi.Input<string>;
    rtsThreshold?: pulumi.Input<number>;
    saePassword?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    ssid?: pulumi.Input<string>;
    startIp?: pulumi.Input<string>;
    targetWakeTime?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExtensioncontrollerExtendervap resource.
 */
export interface ExtensioncontrollerExtendervapArgs {
    allowaccess?: pulumi.Input<string>;
    authServerAddress?: pulumi.Input<string>;
    authServerPort?: pulumi.Input<number>;
    authServerSecret?: pulumi.Input<string>;
    broadcastSsid?: pulumi.Input<string>;
    bssColorPartial?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    endIp?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    maxClients?: pulumi.Input<number>;
    muMimo?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passphrase?: pulumi.Input<string>;
    pmf?: pulumi.Input<string>;
    rtsThreshold?: pulumi.Input<number>;
    saePassword?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    ssid?: pulumi.Input<string>;
    startIp?: pulumi.Input<string>;
    targetWakeTime?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
