// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UserNacpolicy extends pulumi.CustomResource {
    /**
     * Get an existing UserNacpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserNacpolicyState, opts?: pulumi.CustomResourceOptions): UserNacpolicy {
        return new UserNacpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/userNacpolicy:UserNacpolicy';

    /**
     * Returns true if the given object is an instance of UserNacpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserNacpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserNacpolicy.__pulumiType;
    }

    public readonly category!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly emsTag!: pulumi.Output<string>;
    public readonly family!: pulumi.Output<string>;
    public readonly firewallAddress!: pulumi.Output<string>;
    public readonly fortivoiceTag!: pulumi.Output<string>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly host!: pulumi.Output<string>;
    public readonly hwVendor!: pulumi.Output<string>;
    public readonly hwVersion!: pulumi.Output<string>;
    public readonly mac!: pulumi.Output<string>;
    public readonly matchPeriod!: pulumi.Output<number>;
    public readonly matchType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly os!: pulumi.Output<string>;
    public readonly severities!: pulumi.Output<outputs.UserNacpolicySeverity[] | undefined>;
    public readonly src!: pulumi.Output<string>;
    public readonly ssidPolicy!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly swVersion!: pulumi.Output<string>;
    public readonly switchAutoAuth!: pulumi.Output<string>;
    public readonly switchFortilink!: pulumi.Output<string>;
    public readonly switchGroups!: pulumi.Output<outputs.UserNacpolicySwitchGroup[] | undefined>;
    public readonly switchMacPolicy!: pulumi.Output<string>;
    public readonly switchPortPolicy!: pulumi.Output<string>;
    public readonly switchScopes!: pulumi.Output<outputs.UserNacpolicySwitchScope[] | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly user!: pulumi.Output<string>;
    public readonly userGroup!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a UserNacpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserNacpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserNacpolicyArgs | UserNacpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserNacpolicyState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emsTag"] = state ? state.emsTag : undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["firewallAddress"] = state ? state.firewallAddress : undefined;
            resourceInputs["fortivoiceTag"] = state ? state.fortivoiceTag : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hwVendor"] = state ? state.hwVendor : undefined;
            resourceInputs["hwVersion"] = state ? state.hwVersion : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["matchPeriod"] = state ? state.matchPeriod : undefined;
            resourceInputs["matchType"] = state ? state.matchType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["severities"] = state ? state.severities : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["ssidPolicy"] = state ? state.ssidPolicy : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["swVersion"] = state ? state.swVersion : undefined;
            resourceInputs["switchAutoAuth"] = state ? state.switchAutoAuth : undefined;
            resourceInputs["switchFortilink"] = state ? state.switchFortilink : undefined;
            resourceInputs["switchGroups"] = state ? state.switchGroups : undefined;
            resourceInputs["switchMacPolicy"] = state ? state.switchMacPolicy : undefined;
            resourceInputs["switchPortPolicy"] = state ? state.switchPortPolicy : undefined;
            resourceInputs["switchScopes"] = state ? state.switchScopes : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["userGroup"] = state ? state.userGroup : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as UserNacpolicyArgs | undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emsTag"] = args ? args.emsTag : undefined;
            resourceInputs["family"] = args ? args.family : undefined;
            resourceInputs["firewallAddress"] = args ? args.firewallAddress : undefined;
            resourceInputs["fortivoiceTag"] = args ? args.fortivoiceTag : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["hwVendor"] = args ? args.hwVendor : undefined;
            resourceInputs["hwVersion"] = args ? args.hwVersion : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["matchPeriod"] = args ? args.matchPeriod : undefined;
            resourceInputs["matchType"] = args ? args.matchType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["severities"] = args ? args.severities : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["ssidPolicy"] = args ? args.ssidPolicy : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["swVersion"] = args ? args.swVersion : undefined;
            resourceInputs["switchAutoAuth"] = args ? args.switchAutoAuth : undefined;
            resourceInputs["switchFortilink"] = args ? args.switchFortilink : undefined;
            resourceInputs["switchGroups"] = args ? args.switchGroups : undefined;
            resourceInputs["switchMacPolicy"] = args ? args.switchMacPolicy : undefined;
            resourceInputs["switchPortPolicy"] = args ? args.switchPortPolicy : undefined;
            resourceInputs["switchScopes"] = args ? args.switchScopes : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["userGroup"] = args ? args.userGroup : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserNacpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserNacpolicy resources.
 */
export interface UserNacpolicyState {
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emsTag?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    firewallAddress?: pulumi.Input<string>;
    fortivoiceTag?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    hwVersion?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    matchPeriod?: pulumi.Input<number>;
    matchType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    severities?: pulumi.Input<pulumi.Input<inputs.UserNacpolicySeverity>[]>;
    src?: pulumi.Input<string>;
    ssidPolicy?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    swVersion?: pulumi.Input<string>;
    switchAutoAuth?: pulumi.Input<string>;
    switchFortilink?: pulumi.Input<string>;
    switchGroups?: pulumi.Input<pulumi.Input<inputs.UserNacpolicySwitchGroup>[]>;
    switchMacPolicy?: pulumi.Input<string>;
    switchPortPolicy?: pulumi.Input<string>;
    switchScopes?: pulumi.Input<pulumi.Input<inputs.UserNacpolicySwitchScope>[]>;
    type?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    userGroup?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserNacpolicy resource.
 */
export interface UserNacpolicyArgs {
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emsTag?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    firewallAddress?: pulumi.Input<string>;
    fortivoiceTag?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    hwVersion?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    matchPeriod?: pulumi.Input<number>;
    matchType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    severities?: pulumi.Input<pulumi.Input<inputs.UserNacpolicySeverity>[]>;
    src?: pulumi.Input<string>;
    ssidPolicy?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    swVersion?: pulumi.Input<string>;
    switchAutoAuth?: pulumi.Input<string>;
    switchFortilink?: pulumi.Input<string>;
    switchGroups?: pulumi.Input<pulumi.Input<inputs.UserNacpolicySwitchGroup>[]>;
    switchMacPolicy?: pulumi.Input<string>;
    switchPortPolicy?: pulumi.Input<string>;
    switchScopes?: pulumi.Input<pulumi.Input<inputs.UserNacpolicySwitchScope>[]>;
    type?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    userGroup?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
