// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnipsecManualkey extends pulumi.CustomResource {
    /**
     * Get an existing VpnipsecManualkey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnipsecManualkeyState, opts?: pulumi.CustomResourceOptions): VpnipsecManualkey {
        return new VpnipsecManualkey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vpnipsecManualkey:VpnipsecManualkey';

    /**
     * Returns true if the given object is an instance of VpnipsecManualkey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnipsecManualkey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnipsecManualkey.__pulumiType;
    }

    public readonly authentication!: pulumi.Output<string>;
    public readonly authkey!: pulumi.Output<string>;
    public readonly enckey!: pulumi.Output<string>;
    public readonly encryption!: pulumi.Output<string>;
    public readonly interface!: pulumi.Output<string>;
    public readonly localGw!: pulumi.Output<string>;
    public readonly localspi!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly npuOffload!: pulumi.Output<string>;
    public readonly remoteGw!: pulumi.Output<string>;
    public readonly remotespi!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a VpnipsecManualkey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnipsecManualkeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnipsecManualkeyArgs | VpnipsecManualkeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnipsecManualkeyState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["authkey"] = state ? state.authkey : undefined;
            resourceInputs["enckey"] = state ? state.enckey : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["localGw"] = state ? state.localGw : undefined;
            resourceInputs["localspi"] = state ? state.localspi : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["npuOffload"] = state ? state.npuOffload : undefined;
            resourceInputs["remoteGw"] = state ? state.remoteGw : undefined;
            resourceInputs["remotespi"] = state ? state.remotespi : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as VpnipsecManualkeyArgs | undefined;
            if ((!args || args.authentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authentication'");
            }
            if ((!args || args.encryption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryption'");
            }
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.remoteGw === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteGw'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["authkey"] = args?.authkey ? pulumi.secret(args.authkey) : undefined;
            resourceInputs["enckey"] = args?.enckey ? pulumi.secret(args.enckey) : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["localGw"] = args ? args.localGw : undefined;
            resourceInputs["localspi"] = args ? args.localspi : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["npuOffload"] = args ? args.npuOffload : undefined;
            resourceInputs["remoteGw"] = args ? args.remoteGw : undefined;
            resourceInputs["remotespi"] = args ? args.remotespi : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authkey", "enckey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VpnipsecManualkey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnipsecManualkey resources.
 */
export interface VpnipsecManualkeyState {
    authentication?: pulumi.Input<string>;
    authkey?: pulumi.Input<string>;
    enckey?: pulumi.Input<string>;
    encryption?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    localGw?: pulumi.Input<string>;
    localspi?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    npuOffload?: pulumi.Input<string>;
    remoteGw?: pulumi.Input<string>;
    remotespi?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnipsecManualkey resource.
 */
export interface VpnipsecManualkeyArgs {
    authentication: pulumi.Input<string>;
    authkey?: pulumi.Input<string>;
    enckey?: pulumi.Input<string>;
    encryption: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    localGw?: pulumi.Input<string>;
    localspi?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    npuOffload?: pulumi.Input<string>;
    remoteGw: pulumi.Input<string>;
    remotespi?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
