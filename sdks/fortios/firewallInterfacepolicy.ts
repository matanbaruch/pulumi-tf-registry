// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallInterfacepolicy extends pulumi.CustomResource {
    /**
     * Get an existing FirewallInterfacepolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallInterfacepolicyState, opts?: pulumi.CustomResourceOptions): FirewallInterfacepolicy {
        return new FirewallInterfacepolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallInterfacepolicy:FirewallInterfacepolicy';

    /**
     * Returns true if the given object is an instance of FirewallInterfacepolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallInterfacepolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallInterfacepolicy.__pulumiType;
    }

    public readonly addressType!: pulumi.Output<string>;
    public readonly applicationList!: pulumi.Output<string>;
    public readonly applicationListStatus!: pulumi.Output<string>;
    public readonly avProfile!: pulumi.Output<string>;
    public readonly avProfileStatus!: pulumi.Output<string>;
    public readonly casbProfile!: pulumi.Output<string>;
    public readonly casbProfileStatus!: pulumi.Output<string>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly dlpProfile!: pulumi.Output<string>;
    public readonly dlpProfileStatus!: pulumi.Output<string>;
    public readonly dlpSensor!: pulumi.Output<string>;
    public readonly dlpSensorStatus!: pulumi.Output<string>;
    public readonly dsri!: pulumi.Output<string>;
    public readonly dstaddrs!: pulumi.Output<outputs.FirewallInterfacepolicyDstaddr[]>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly emailfilterProfile!: pulumi.Output<string>;
    public readonly emailfilterProfileStatus!: pulumi.Output<string>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly interface!: pulumi.Output<string>;
    public readonly ipsSensor!: pulumi.Output<string>;
    public readonly ipsSensorStatus!: pulumi.Output<string>;
    public readonly label!: pulumi.Output<string>;
    public readonly logtraffic!: pulumi.Output<string>;
    public readonly policyid!: pulumi.Output<number>;
    public readonly scanBotnetConnections!: pulumi.Output<string>;
    public readonly services!: pulumi.Output<outputs.FirewallInterfacepolicyService[]>;
    public readonly spamfilterProfile!: pulumi.Output<string>;
    public readonly spamfilterProfileStatus!: pulumi.Output<string>;
    public readonly srcaddrs!: pulumi.Output<outputs.FirewallInterfacepolicySrcaddr[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly webfilterProfile!: pulumi.Output<string>;
    public readonly webfilterProfileStatus!: pulumi.Output<string>;

    /**
     * Create a FirewallInterfacepolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallInterfacepolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallInterfacepolicyArgs | FirewallInterfacepolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallInterfacepolicyState | undefined;
            resourceInputs["addressType"] = state ? state.addressType : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["applicationListStatus"] = state ? state.applicationListStatus : undefined;
            resourceInputs["avProfile"] = state ? state.avProfile : undefined;
            resourceInputs["avProfileStatus"] = state ? state.avProfileStatus : undefined;
            resourceInputs["casbProfile"] = state ? state.casbProfile : undefined;
            resourceInputs["casbProfileStatus"] = state ? state.casbProfileStatus : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dlpProfile"] = state ? state.dlpProfile : undefined;
            resourceInputs["dlpProfileStatus"] = state ? state.dlpProfileStatus : undefined;
            resourceInputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            resourceInputs["dlpSensorStatus"] = state ? state.dlpSensorStatus : undefined;
            resourceInputs["dsri"] = state ? state.dsri : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            resourceInputs["emailfilterProfileStatus"] = state ? state.emailfilterProfileStatus : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["ipsSensorStatus"] = state ? state.ipsSensorStatus : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            resourceInputs["spamfilterProfileStatus"] = state ? state.spamfilterProfileStatus : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
            resourceInputs["webfilterProfileStatus"] = state ? state.webfilterProfileStatus : undefined;
        } else {
            const args = argsOrState as FirewallInterfacepolicyArgs | undefined;
            if ((!args || args.dstaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstaddrs'");
            }
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if ((!args || args.srcaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcaddrs'");
            }
            resourceInputs["addressType"] = args ? args.addressType : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["applicationListStatus"] = args ? args.applicationListStatus : undefined;
            resourceInputs["avProfile"] = args ? args.avProfile : undefined;
            resourceInputs["avProfileStatus"] = args ? args.avProfileStatus : undefined;
            resourceInputs["casbProfile"] = args ? args.casbProfile : undefined;
            resourceInputs["casbProfileStatus"] = args ? args.casbProfileStatus : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dlpProfile"] = args ? args.dlpProfile : undefined;
            resourceInputs["dlpProfileStatus"] = args ? args.dlpProfileStatus : undefined;
            resourceInputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            resourceInputs["dlpSensorStatus"] = args ? args.dlpSensorStatus : undefined;
            resourceInputs["dsri"] = args ? args.dsri : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            resourceInputs["emailfilterProfileStatus"] = args ? args.emailfilterProfileStatus : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["ipsSensorStatus"] = args ? args.ipsSensorStatus : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            resourceInputs["spamfilterProfileStatus"] = args ? args.spamfilterProfileStatus : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
            resourceInputs["webfilterProfileStatus"] = args ? args.webfilterProfileStatus : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallInterfacepolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallInterfacepolicy resources.
 */
export interface FirewallInterfacepolicyState {
    addressType?: pulumi.Input<string>;
    applicationList?: pulumi.Input<string>;
    applicationListStatus?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    avProfileStatus?: pulumi.Input<string>;
    casbProfile?: pulumi.Input<string>;
    casbProfileStatus?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dlpProfile?: pulumi.Input<string>;
    dlpProfileStatus?: pulumi.Input<string>;
    dlpSensor?: pulumi.Input<string>;
    dlpSensorStatus?: pulumi.Input<string>;
    dsri?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallInterfacepolicyDstaddr>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emailfilterProfile?: pulumi.Input<string>;
    emailfilterProfileStatus?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    ipsSensorStatus?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    scanBotnetConnections?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.FirewallInterfacepolicyService>[]>;
    spamfilterProfile?: pulumi.Input<string>;
    spamfilterProfileStatus?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallInterfacepolicySrcaddr>[]>;
    status?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
    webfilterProfileStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallInterfacepolicy resource.
 */
export interface FirewallInterfacepolicyArgs {
    addressType?: pulumi.Input<string>;
    applicationList?: pulumi.Input<string>;
    applicationListStatus?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    avProfileStatus?: pulumi.Input<string>;
    casbProfile?: pulumi.Input<string>;
    casbProfileStatus?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dlpProfile?: pulumi.Input<string>;
    dlpProfileStatus?: pulumi.Input<string>;
    dlpSensor?: pulumi.Input<string>;
    dlpSensorStatus?: pulumi.Input<string>;
    dsri?: pulumi.Input<string>;
    dstaddrs: pulumi.Input<pulumi.Input<inputs.FirewallInterfacepolicyDstaddr>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emailfilterProfile?: pulumi.Input<string>;
    emailfilterProfileStatus?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    ipsSensorStatus?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    scanBotnetConnections?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<inputs.FirewallInterfacepolicyService>[]>;
    spamfilterProfile?: pulumi.Input<string>;
    spamfilterProfileStatus?: pulumi.Input<string>;
    srcaddrs: pulumi.Input<pulumi.Input<inputs.FirewallInterfacepolicySrcaddr>[]>;
    status?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
    webfilterProfileStatus?: pulumi.Input<string>;
}
