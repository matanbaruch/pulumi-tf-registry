// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemDns extends pulumi.CustomResource {
    /**
     * Get an existing SystemDns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemDnsState, opts?: pulumi.CustomResourceOptions): SystemDns {
        return new SystemDns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemDns:SystemDns';

    /**
     * Returns true if the given object is an instance of SystemDns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemDns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemDns.__pulumiType;
    }

    public readonly altPrimary!: pulumi.Output<string>;
    public readonly altSecondary!: pulumi.Output<string>;
    public readonly cacheNotfoundResponses!: pulumi.Output<string>;
    public readonly dnsCacheLimit!: pulumi.Output<number>;
    public readonly dnsCacheTtl!: pulumi.Output<number>;
    public readonly dnsOverTls!: pulumi.Output<string>;
    public readonly domains!: pulumi.Output<outputs.SystemDnsDomain[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fqdnCacheTtl!: pulumi.Output<number>;
    public readonly fqdnMaxRefresh!: pulumi.Output<number>;
    public readonly fqdnMinRefresh!: pulumi.Output<number>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly interface!: pulumi.Output<string>;
    public readonly interfaceSelectMethod!: pulumi.Output<string>;
    public readonly ip6Primary!: pulumi.Output<string>;
    public readonly ip6Secondary!: pulumi.Output<string>;
    public readonly log!: pulumi.Output<string>;
    public readonly primary!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly retry!: pulumi.Output<number>;
    public readonly secondary!: pulumi.Output<string>;
    public readonly serverHostnames!: pulumi.Output<outputs.SystemDnsServerHostname[] | undefined>;
    public readonly serverSelectMethod!: pulumi.Output<string>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly sslCertificate!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<number>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a SystemDns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemDnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemDnsArgs | SystemDnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemDnsState | undefined;
            resourceInputs["altPrimary"] = state ? state.altPrimary : undefined;
            resourceInputs["altSecondary"] = state ? state.altSecondary : undefined;
            resourceInputs["cacheNotfoundResponses"] = state ? state.cacheNotfoundResponses : undefined;
            resourceInputs["dnsCacheLimit"] = state ? state.dnsCacheLimit : undefined;
            resourceInputs["dnsCacheTtl"] = state ? state.dnsCacheTtl : undefined;
            resourceInputs["dnsOverTls"] = state ? state.dnsOverTls : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fqdnCacheTtl"] = state ? state.fqdnCacheTtl : undefined;
            resourceInputs["fqdnMaxRefresh"] = state ? state.fqdnMaxRefresh : undefined;
            resourceInputs["fqdnMinRefresh"] = state ? state.fqdnMinRefresh : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["interfaceSelectMethod"] = state ? state.interfaceSelectMethod : undefined;
            resourceInputs["ip6Primary"] = state ? state.ip6Primary : undefined;
            resourceInputs["ip6Secondary"] = state ? state.ip6Secondary : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["primary"] = state ? state.primary : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["secondary"] = state ? state.secondary : undefined;
            resourceInputs["serverHostnames"] = state ? state.serverHostnames : undefined;
            resourceInputs["serverSelectMethod"] = state ? state.serverSelectMethod : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sslCertificate"] = state ? state.sslCertificate : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SystemDnsArgs | undefined;
            if ((!args || args.primary === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primary'");
            }
            resourceInputs["altPrimary"] = args ? args.altPrimary : undefined;
            resourceInputs["altSecondary"] = args ? args.altSecondary : undefined;
            resourceInputs["cacheNotfoundResponses"] = args ? args.cacheNotfoundResponses : undefined;
            resourceInputs["dnsCacheLimit"] = args ? args.dnsCacheLimit : undefined;
            resourceInputs["dnsCacheTtl"] = args ? args.dnsCacheTtl : undefined;
            resourceInputs["dnsOverTls"] = args ? args.dnsOverTls : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fqdnCacheTtl"] = args ? args.fqdnCacheTtl : undefined;
            resourceInputs["fqdnMaxRefresh"] = args ? args.fqdnMaxRefresh : undefined;
            resourceInputs["fqdnMinRefresh"] = args ? args.fqdnMinRefresh : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["interfaceSelectMethod"] = args ? args.interfaceSelectMethod : undefined;
            resourceInputs["ip6Primary"] = args ? args.ip6Primary : undefined;
            resourceInputs["ip6Secondary"] = args ? args.ip6Secondary : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["primary"] = args ? args.primary : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["secondary"] = args ? args.secondary : undefined;
            resourceInputs["serverHostnames"] = args ? args.serverHostnames : undefined;
            resourceInputs["serverSelectMethod"] = args ? args.serverSelectMethod : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sslCertificate"] = args ? args.sslCertificate : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemDns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemDns resources.
 */
export interface SystemDnsState {
    altPrimary?: pulumi.Input<string>;
    altSecondary?: pulumi.Input<string>;
    cacheNotfoundResponses?: pulumi.Input<string>;
    dnsCacheLimit?: pulumi.Input<number>;
    dnsCacheTtl?: pulumi.Input<number>;
    dnsOverTls?: pulumi.Input<string>;
    domains?: pulumi.Input<pulumi.Input<inputs.SystemDnsDomain>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fqdnCacheTtl?: pulumi.Input<number>;
    fqdnMaxRefresh?: pulumi.Input<number>;
    fqdnMinRefresh?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    ip6Primary?: pulumi.Input<string>;
    ip6Secondary?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    primary?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    retry?: pulumi.Input<number>;
    secondary?: pulumi.Input<string>;
    serverHostnames?: pulumi.Input<pulumi.Input<inputs.SystemDnsServerHostname>[]>;
    serverSelectMethod?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sslCertificate?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemDns resource.
 */
export interface SystemDnsArgs {
    altPrimary?: pulumi.Input<string>;
    altSecondary?: pulumi.Input<string>;
    cacheNotfoundResponses?: pulumi.Input<string>;
    dnsCacheLimit?: pulumi.Input<number>;
    dnsCacheTtl?: pulumi.Input<number>;
    dnsOverTls?: pulumi.Input<string>;
    domains?: pulumi.Input<pulumi.Input<inputs.SystemDnsDomain>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fqdnCacheTtl?: pulumi.Input<number>;
    fqdnMaxRefresh?: pulumi.Input<number>;
    fqdnMinRefresh?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    ip6Primary?: pulumi.Input<string>;
    ip6Secondary?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    primary: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    retry?: pulumi.Input<number>;
    secondary?: pulumi.Input<string>;
    serverHostnames?: pulumi.Input<pulumi.Input<inputs.SystemDnsServerHostname>[]>;
    serverSelectMethod?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sslCertificate?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}
