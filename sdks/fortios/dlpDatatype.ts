// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DlpDatatype extends pulumi.CustomResource {
    /**
     * Get an existing DlpDatatype resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DlpDatatypeState, opts?: pulumi.CustomResourceOptions): DlpDatatype {
        return new DlpDatatype(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/dlpDatatype:DlpDatatype';

    /**
     * Returns true if the given object is an instance of DlpDatatype.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DlpDatatype {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DlpDatatype.__pulumiType;
    }

    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly lookAhead!: pulumi.Output<number>;
    public readonly lookBack!: pulumi.Output<number>;
    public readonly matchAhead!: pulumi.Output<number>;
    public readonly matchAround!: pulumi.Output<string>;
    public readonly matchBack!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly pattern!: pulumi.Output<string>;
    public readonly transform!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly verify!: pulumi.Output<string>;
    public readonly verify2!: pulumi.Output<string>;
    public readonly verifyTransformedPattern!: pulumi.Output<string>;

    /**
     * Create a DlpDatatype resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DlpDatatypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DlpDatatypeArgs | DlpDatatypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DlpDatatypeState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["lookAhead"] = state ? state.lookAhead : undefined;
            resourceInputs["lookBack"] = state ? state.lookBack : undefined;
            resourceInputs["matchAhead"] = state ? state.matchAhead : undefined;
            resourceInputs["matchAround"] = state ? state.matchAround : undefined;
            resourceInputs["matchBack"] = state ? state.matchBack : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["transform"] = state ? state.transform : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["verify"] = state ? state.verify : undefined;
            resourceInputs["verify2"] = state ? state.verify2 : undefined;
            resourceInputs["verifyTransformedPattern"] = state ? state.verifyTransformedPattern : undefined;
        } else {
            const args = argsOrState as DlpDatatypeArgs | undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["lookAhead"] = args ? args.lookAhead : undefined;
            resourceInputs["lookBack"] = args ? args.lookBack : undefined;
            resourceInputs["matchAhead"] = args ? args.matchAhead : undefined;
            resourceInputs["matchAround"] = args ? args.matchAround : undefined;
            resourceInputs["matchBack"] = args ? args.matchBack : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["transform"] = args ? args.transform : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["verify"] = args ? args.verify : undefined;
            resourceInputs["verify2"] = args ? args.verify2 : undefined;
            resourceInputs["verifyTransformedPattern"] = args ? args.verifyTransformedPattern : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DlpDatatype.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DlpDatatype resources.
 */
export interface DlpDatatypeState {
    comment?: pulumi.Input<string>;
    lookAhead?: pulumi.Input<number>;
    lookBack?: pulumi.Input<number>;
    matchAhead?: pulumi.Input<number>;
    matchAround?: pulumi.Input<string>;
    matchBack?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    transform?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    verify?: pulumi.Input<string>;
    verify2?: pulumi.Input<string>;
    verifyTransformedPattern?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DlpDatatype resource.
 */
export interface DlpDatatypeArgs {
    comment?: pulumi.Input<string>;
    lookAhead?: pulumi.Input<number>;
    lookBack?: pulumi.Input<number>;
    matchAhead?: pulumi.Input<number>;
    matchAround?: pulumi.Input<string>;
    matchBack?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    transform?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    verify?: pulumi.Input<string>;
    verify2?: pulumi.Input<string>;
    verifyTransformedPattern?: pulumi.Input<string>;
}
