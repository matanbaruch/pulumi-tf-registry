// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnsslClient extends pulumi.CustomResource {
    /**
     * Get an existing VpnsslClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnsslClientState, opts?: pulumi.CustomResourceOptions): VpnsslClient {
        return new VpnsslClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vpnsslClient:VpnsslClient';

    /**
     * Returns true if the given object is an instance of VpnsslClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnsslClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnsslClient.__pulumiType;
    }

    public readonly certificate!: pulumi.Output<string>;
    public readonly classId!: pulumi.Output<number>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly distance!: pulumi.Output<number>;
    public readonly interface!: pulumi.Output<string>;
    public readonly ipv4Subnets!: pulumi.Output<string>;
    public readonly ipv6Subnets!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly peer!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly priority!: pulumi.Output<number>;
    public readonly psk!: pulumi.Output<string | undefined>;
    public readonly realm!: pulumi.Output<string>;
    public readonly server!: pulumi.Output<string>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly user!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a VpnsslClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnsslClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnsslClientArgs | VpnsslClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnsslClientState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipv4Subnets"] = state ? state.ipv4Subnets : undefined;
            resourceInputs["ipv6Subnets"] = state ? state.ipv6Subnets : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peer"] = state ? state.peer : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["psk"] = state ? state.psk : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as VpnsslClientArgs | undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipv4Subnets"] = args ? args.ipv4Subnets : undefined;
            resourceInputs["ipv6Subnets"] = args ? args.ipv6Subnets : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peer"] = args ? args.peer : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["psk"] = args ? args.psk : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnsslClient.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnsslClient resources.
 */
export interface VpnsslClientState {
    certificate?: pulumi.Input<string>;
    classId?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ipv4Subnets?: pulumi.Input<string>;
    ipv6Subnets?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    psk?: pulumi.Input<string>;
    realm?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnsslClient resource.
 */
export interface VpnsslClientArgs {
    certificate?: pulumi.Input<string>;
    classId?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ipv4Subnets?: pulumi.Input<string>;
    ipv6Subnets?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    psk?: pulumi.Input<string>;
    realm?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
