// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UserGroup extends pulumi.CustomResource {
    /**
     * Get an existing UserGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserGroupState, opts?: pulumi.CustomResourceOptions): UserGroup {
        return new UserGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/userGroup:UserGroup';

    /**
     * Returns true if the given object is an instance of UserGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserGroup.__pulumiType;
    }

    public readonly authConcurrentOverride!: pulumi.Output<string>;
    public readonly authConcurrentValue!: pulumi.Output<number>;
    public readonly authtimeout!: pulumi.Output<number>;
    public readonly company!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly email!: pulumi.Output<string>;
    public readonly expire!: pulumi.Output<number>;
    public readonly expireType!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<number>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly groupType!: pulumi.Output<string>;
    public readonly guests!: pulumi.Output<outputs.UserGroupGuest[] | undefined>;
    public readonly httpDigestRealm!: pulumi.Output<string>;
    public readonly matches!: pulumi.Output<outputs.UserGroupMatch[] | undefined>;
    public readonly maxAccounts!: pulumi.Output<number>;
    public readonly members!: pulumi.Output<outputs.UserGroupMember[] | undefined>;
    public readonly mobilePhone!: pulumi.Output<string>;
    public readonly multipleGuestAdd!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly smsCustomServer!: pulumi.Output<string>;
    public readonly smsServer!: pulumi.Output<string>;
    public readonly sponsor!: pulumi.Output<string>;
    public readonly ssoAttributeValue!: pulumi.Output<string>;
    public readonly userId!: pulumi.Output<string>;
    public readonly userName!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a UserGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserGroupArgs | UserGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserGroupState | undefined;
            resourceInputs["authConcurrentOverride"] = state ? state.authConcurrentOverride : undefined;
            resourceInputs["authConcurrentValue"] = state ? state.authConcurrentValue : undefined;
            resourceInputs["authtimeout"] = state ? state.authtimeout : undefined;
            resourceInputs["company"] = state ? state.company : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["expire"] = state ? state.expire : undefined;
            resourceInputs["expireType"] = state ? state.expireType : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["groupType"] = state ? state.groupType : undefined;
            resourceInputs["guests"] = state ? state.guests : undefined;
            resourceInputs["httpDigestRealm"] = state ? state.httpDigestRealm : undefined;
            resourceInputs["matches"] = state ? state.matches : undefined;
            resourceInputs["maxAccounts"] = state ? state.maxAccounts : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["mobilePhone"] = state ? state.mobilePhone : undefined;
            resourceInputs["multipleGuestAdd"] = state ? state.multipleGuestAdd : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["smsCustomServer"] = state ? state.smsCustomServer : undefined;
            resourceInputs["smsServer"] = state ? state.smsServer : undefined;
            resourceInputs["sponsor"] = state ? state.sponsor : undefined;
            resourceInputs["ssoAttributeValue"] = state ? state.ssoAttributeValue : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as UserGroupArgs | undefined;
            resourceInputs["authConcurrentOverride"] = args ? args.authConcurrentOverride : undefined;
            resourceInputs["authConcurrentValue"] = args ? args.authConcurrentValue : undefined;
            resourceInputs["authtimeout"] = args ? args.authtimeout : undefined;
            resourceInputs["company"] = args ? args.company : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["expire"] = args ? args.expire : undefined;
            resourceInputs["expireType"] = args ? args.expireType : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["groupType"] = args ? args.groupType : undefined;
            resourceInputs["guests"] = args ? args.guests : undefined;
            resourceInputs["httpDigestRealm"] = args ? args.httpDigestRealm : undefined;
            resourceInputs["matches"] = args ? args.matches : undefined;
            resourceInputs["maxAccounts"] = args ? args.maxAccounts : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["mobilePhone"] = args ? args.mobilePhone : undefined;
            resourceInputs["multipleGuestAdd"] = args ? args.multipleGuestAdd : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["smsCustomServer"] = args ? args.smsCustomServer : undefined;
            resourceInputs["smsServer"] = args ? args.smsServer : undefined;
            resourceInputs["sponsor"] = args ? args.sponsor : undefined;
            resourceInputs["ssoAttributeValue"] = args ? args.ssoAttributeValue : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserGroup resources.
 */
export interface UserGroupState {
    authConcurrentOverride?: pulumi.Input<string>;
    authConcurrentValue?: pulumi.Input<number>;
    authtimeout?: pulumi.Input<number>;
    company?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    expire?: pulumi.Input<number>;
    expireType?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    groupType?: pulumi.Input<string>;
    guests?: pulumi.Input<pulumi.Input<inputs.UserGroupGuest>[]>;
    httpDigestRealm?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.UserGroupMatch>[]>;
    maxAccounts?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.UserGroupMember>[]>;
    mobilePhone?: pulumi.Input<string>;
    multipleGuestAdd?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    smsCustomServer?: pulumi.Input<string>;
    smsServer?: pulumi.Input<string>;
    sponsor?: pulumi.Input<string>;
    ssoAttributeValue?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserGroup resource.
 */
export interface UserGroupArgs {
    authConcurrentOverride?: pulumi.Input<string>;
    authConcurrentValue?: pulumi.Input<number>;
    authtimeout?: pulumi.Input<number>;
    company?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    expire?: pulumi.Input<number>;
    expireType?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    groupType?: pulumi.Input<string>;
    guests?: pulumi.Input<pulumi.Input<inputs.UserGroupGuest>[]>;
    httpDigestRealm?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.UserGroupMatch>[]>;
    maxAccounts?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.UserGroupMember>[]>;
    mobilePhone?: pulumi.Input<string>;
    multipleGuestAdd?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    smsCustomServer?: pulumi.Input<string>;
    smsServer?: pulumi.Input<string>;
    sponsor?: pulumi.Input<string>;
    ssoAttributeValue?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
