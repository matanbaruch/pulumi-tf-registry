// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFirewallPolicy6(args: GetFirewallPolicy6Args, opts?: pulumi.InvokeOptions): Promise<GetFirewallPolicy6Result> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:index/getFirewallPolicy6:getFirewallPolicy6", {
        "id": args.id,
        "policyid": args.policyid,
        "vdomparam": args.vdomparam,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFirewallPolicy6.
 */
export interface GetFirewallPolicy6Args {
    id?: string;
    policyid: number;
    vdomparam?: string;
}

/**
 * A collection of values returned by getFirewallPolicy6.
 */
export interface GetFirewallPolicy6Result {
    readonly action: string;
    readonly antiReplay: string;
    readonly appCategories: outputs.GetFirewallPolicy6AppCategory[];
    readonly appGroups: outputs.GetFirewallPolicy6AppGroup[];
    readonly applicationList: string;
    readonly applications: outputs.GetFirewallPolicy6Application[];
    readonly autoAsicOffload: string;
    readonly avProfile: string;
    readonly cifsProfile: string;
    readonly comments: string;
    readonly customLogFields: outputs.GetFirewallPolicy6CustomLogField[];
    readonly decryptedTrafficMirror: string;
    readonly devices: outputs.GetFirewallPolicy6Device[];
    readonly diffservForward: string;
    readonly diffservReverse: string;
    readonly diffservcodeForward: string;
    readonly diffservcodeRev: string;
    readonly dlpSensor: string;
    readonly dnsfilterProfile: string;
    readonly dsri: string;
    readonly dstaddrNegate: string;
    readonly dstaddrs: outputs.GetFirewallPolicy6Dstaddr[];
    readonly dstintfs: outputs.GetFirewallPolicy6Dstintf[];
    readonly emailfilterProfile: string;
    readonly firewallSessionDirty: string;
    readonly fixedport: string;
    readonly fssoGroups: outputs.GetFirewallPolicy6FssoGroup[];
    readonly globalLabel: string;
    readonly groups: outputs.GetFirewallPolicy6Group[];
    readonly httpPolicyRedirect: string;
    readonly icapProfile: string;
    readonly id: string;
    readonly inbound: string;
    readonly inspectionMode: string;
    readonly ippool: string;
    readonly ipsSensor: string;
    readonly label: string;
    readonly logtraffic: string;
    readonly logtrafficStart: string;
    readonly name: string;
    readonly nat: string;
    readonly natinbound: string;
    readonly natoutbound: string;
    readonly outbound: string;
    readonly perIpShaper: string;
    readonly policyid: number;
    readonly poolnames: outputs.GetFirewallPolicy6Poolname[];
    readonly profileGroup: string;
    readonly profileProtocolOptions: string;
    readonly profileType: string;
    readonly replacemsgOverrideGroup: string;
    readonly rsso: string;
    readonly schedule: string;
    readonly sendDenyPacket: string;
    readonly serviceNegate: string;
    readonly services: outputs.GetFirewallPolicy6Service[];
    readonly sessionTtl: number;
    readonly spamfilterProfile: string;
    readonly srcaddrNegate: string;
    readonly srcaddrs: outputs.GetFirewallPolicy6Srcaddr[];
    readonly srcintfs: outputs.GetFirewallPolicy6Srcintf[];
    readonly sshFilterProfile: string;
    readonly sshPolicyRedirect: string;
    readonly sslMirror: string;
    readonly sslMirrorIntfs: outputs.GetFirewallPolicy6SslMirrorIntf[];
    readonly sslSshProfile: string;
    readonly status: string;
    readonly tcpMssReceiver: number;
    readonly tcpMssSender: number;
    readonly tcpSessionWithoutSyn: string;
    readonly timeoutSendRst: string;
    readonly tos: string;
    readonly tosMask: string;
    readonly tosNegate: string;
    readonly trafficShaper: string;
    readonly trafficShaperReverse: string;
    readonly urlCategories: outputs.GetFirewallPolicy6UrlCategory[];
    readonly users: outputs.GetFirewallPolicy6User[];
    readonly utmStatus: string;
    readonly uuid: string;
    readonly vdomparam?: string;
    readonly vlanCosFwd: number;
    readonly vlanCosRev: number;
    readonly vlanFilter: string;
    readonly voipProfile: string;
    readonly vpntunnel: string;
    readonly wafProfile: string;
    readonly webcache: string;
    readonly webcacheHttps: string;
    readonly webfilterProfile: string;
    readonly webproxyForwardServer: string;
    readonly webproxyProfile: string;
}
export function getFirewallPolicy6Output(args: GetFirewallPolicy6OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFirewallPolicy6Result> {
    return pulumi.output(args).apply((a: any) => getFirewallPolicy6(a, opts))
}

/**
 * A collection of arguments for invoking getFirewallPolicy6.
 */
export interface GetFirewallPolicy6OutputArgs {
    id?: pulumi.Input<string>;
    policyid: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}
