// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RouterPolicy6 extends pulumi.CustomResource {
    /**
     * Get an existing RouterPolicy6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterPolicy6State, opts?: pulumi.CustomResourceOptions): RouterPolicy6 {
        return new RouterPolicy6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/routerPolicy6:RouterPolicy6';

    /**
     * Returns true if the given object is an instance of RouterPolicy6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterPolicy6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterPolicy6.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly dst!: pulumi.Output<string>;
    public readonly dstNegate!: pulumi.Output<string>;
    public readonly dstaddrs!: pulumi.Output<outputs.RouterPolicy6Dstaddr[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly endPort!: pulumi.Output<number>;
    public readonly endSourcePort!: pulumi.Output<number>;
    public readonly gateway!: pulumi.Output<string>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly inputDevice!: pulumi.Output<string>;
    public readonly inputDeviceNegate!: pulumi.Output<string>;
    public readonly internetServiceCustoms!: pulumi.Output<outputs.RouterPolicy6InternetServiceCustom[] | undefined>;
    public readonly internetServiceIds!: pulumi.Output<outputs.RouterPolicy6InternetServiceId[] | undefined>;
    public readonly outputDevice!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<number>;
    public readonly seqNum!: pulumi.Output<number>;
    public readonly src!: pulumi.Output<string>;
    public readonly srcNegate!: pulumi.Output<string>;
    public readonly srcaddrs!: pulumi.Output<outputs.RouterPolicy6Srcaddr[] | undefined>;
    public readonly startPort!: pulumi.Output<number>;
    public readonly startSourcePort!: pulumi.Output<number>;
    public readonly status!: pulumi.Output<string>;
    public readonly tos!: pulumi.Output<string>;
    public readonly tosMask!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a RouterPolicy6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouterPolicy6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterPolicy6Args | RouterPolicy6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterPolicy6State | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["dstNegate"] = state ? state.dstNegate : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["endPort"] = state ? state.endPort : undefined;
            resourceInputs["endSourcePort"] = state ? state.endSourcePort : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["inputDevice"] = state ? state.inputDevice : undefined;
            resourceInputs["inputDeviceNegate"] = state ? state.inputDeviceNegate : undefined;
            resourceInputs["internetServiceCustoms"] = state ? state.internetServiceCustoms : undefined;
            resourceInputs["internetServiceIds"] = state ? state.internetServiceIds : undefined;
            resourceInputs["outputDevice"] = state ? state.outputDevice : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["seqNum"] = state ? state.seqNum : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["srcNegate"] = state ? state.srcNegate : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["startPort"] = state ? state.startPort : undefined;
            resourceInputs["startSourcePort"] = state ? state.startSourcePort : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tos"] = state ? state.tos : undefined;
            resourceInputs["tosMask"] = state ? state.tosMask : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as RouterPolicy6Args | undefined;
            if ((!args || args.inputDevice === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputDevice'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["dstNegate"] = args ? args.dstNegate : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["endPort"] = args ? args.endPort : undefined;
            resourceInputs["endSourcePort"] = args ? args.endSourcePort : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["inputDevice"] = args ? args.inputDevice : undefined;
            resourceInputs["inputDeviceNegate"] = args ? args.inputDeviceNegate : undefined;
            resourceInputs["internetServiceCustoms"] = args ? args.internetServiceCustoms : undefined;
            resourceInputs["internetServiceIds"] = args ? args.internetServiceIds : undefined;
            resourceInputs["outputDevice"] = args ? args.outputDevice : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["seqNum"] = args ? args.seqNum : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["srcNegate"] = args ? args.srcNegate : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["startPort"] = args ? args.startPort : undefined;
            resourceInputs["startSourcePort"] = args ? args.startSourcePort : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tos"] = args ? args.tos : undefined;
            resourceInputs["tosMask"] = args ? args.tosMask : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterPolicy6.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterPolicy6 resources.
 */
export interface RouterPolicy6State {
    action?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dst?: pulumi.Input<string>;
    dstNegate?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.RouterPolicy6Dstaddr>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    endPort?: pulumi.Input<number>;
    endSourcePort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    inputDevice?: pulumi.Input<string>;
    inputDeviceNegate?: pulumi.Input<string>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.RouterPolicy6InternetServiceCustom>[]>;
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.RouterPolicy6InternetServiceId>[]>;
    outputDevice?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    src?: pulumi.Input<string>;
    srcNegate?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.RouterPolicy6Srcaddr>[]>;
    startPort?: pulumi.Input<number>;
    startSourcePort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouterPolicy6 resource.
 */
export interface RouterPolicy6Args {
    action?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dst?: pulumi.Input<string>;
    dstNegate?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.RouterPolicy6Dstaddr>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    endPort?: pulumi.Input<number>;
    endSourcePort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    inputDevice: pulumi.Input<string>;
    inputDeviceNegate?: pulumi.Input<string>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.RouterPolicy6InternetServiceCustom>[]>;
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.RouterPolicy6InternetServiceId>[]>;
    outputDevice?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    src?: pulumi.Input<string>;
    srcNegate?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.RouterPolicy6Srcaddr>[]>;
    startPort?: pulumi.Input<number>;
    startSourcePort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
