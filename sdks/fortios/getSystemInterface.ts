// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSystemInterface(args: GetSystemInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetSystemInterfaceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:index/getSystemInterface:getSystemInterface", {
        "id": args.id,
        "name": args.name,
        "vdomparam": args.vdomparam,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSystemInterface.
 */
export interface GetSystemInterfaceArgs {
    id?: string;
    name: string;
    vdomparam?: string;
}

/**
 * A collection of values returned by getSystemInterface.
 */
export interface GetSystemInterfaceResult {
    readonly acName: string;
    readonly aggregate: string;
    readonly aggregateType: string;
    readonly algorithm: string;
    readonly alias: string;
    readonly allowaccess: string;
    readonly apDiscover: string;
    readonly arpforward: string;
    readonly authCert: string;
    readonly authPortalAddr: string;
    readonly authType: string;
    readonly autoAuthExtensionDevice: string;
    readonly bandwidthMeasureTime: number;
    readonly bfd: string;
    readonly bfdDesiredMinTx: number;
    readonly bfdDetectMult: number;
    readonly bfdRequiredMinRx: number;
    readonly broadcastForticlientDiscovery: string;
    readonly broadcastForward: string;
    readonly captivePortal: number;
    readonly cliConnStatus: number;
    readonly clientOptions: outputs.GetSystemInterfaceClientOption[];
    readonly color: number;
    readonly dedicatedTo: string;
    readonly defaultPurdueLevel: string;
    readonly defaultgw: string;
    readonly description: string;
    readonly detectedPeerMtu: number;
    readonly detectprotocol: string;
    readonly detectserver: string;
    readonly deviceAccessList: string;
    readonly deviceIdentification: string;
    readonly deviceIdentificationActiveScan: string;
    readonly deviceNetscan: string;
    readonly deviceUserIdentification: string;
    readonly devindex: number;
    readonly dhcpBroadcastFlag: string;
    readonly dhcpClasslessRouteAddition: string;
    readonly dhcpClientIdentifier: string;
    readonly dhcpRelayAgentOption: string;
    readonly dhcpRelayAllowNoEndOption: string;
    readonly dhcpRelayCircuitId: string;
    readonly dhcpRelayInterface: string;
    readonly dhcpRelayInterfaceSelectMethod: string;
    readonly dhcpRelayIp: string;
    readonly dhcpRelayLinkSelection: string;
    readonly dhcpRelayRequestAllServer: string;
    readonly dhcpRelayService: string;
    readonly dhcpRelaySourceIp: string;
    readonly dhcpRelayType: string;
    readonly dhcpRenewTime: number;
    readonly dhcpSmartRelay: string;
    readonly dhcpSnoopingServerLists: outputs.GetSystemInterfaceDhcpSnoopingServerList[];
    readonly discRetryTimeout: number;
    readonly disconnectThreshold: number;
    readonly distance: number;
    readonly dnsServerOverride: string;
    readonly dnsServerProtocol: string;
    readonly dropFragment: string;
    readonly dropOverlappedFragment: string;
    readonly eapCaCert: string;
    readonly eapIdentity: string;
    readonly eapMethod: string;
    readonly eapPassword: string;
    readonly eapSupplicant: string;
    readonly eapUserCert: string;
    readonly egressShapingProfile: string;
    readonly endpointCompliance: string;
    readonly estimatedDownstreamBandwidth: number;
    readonly estimatedUpstreamBandwidth: number;
    readonly explicitFtpProxy: string;
    readonly explicitWebProxy: string;
    readonly external: string;
    readonly failActionOnExtender: string;
    readonly failAlertInterfaces: outputs.GetSystemInterfaceFailAlertInterface[];
    readonly failAlertMethod: string;
    readonly failDetect: string;
    readonly failDetectOption: string;
    readonly fortiheartbeat: string;
    readonly fortilink: string;
    readonly fortilinkBackupLink: number;
    readonly fortilinkNeighborDetect: string;
    readonly fortilinkSplitInterface: string;
    readonly fortilinkStacking: string;
    readonly forwardDomain: number;
    readonly forwardErrorCorrection: string;
    readonly gwdetect: string;
    readonly haPriority: number;
    readonly icmpAcceptRedirect: string;
    readonly icmpSendRedirect: string;
    readonly id: string;
    readonly identAccept: string;
    readonly idleTimeout: number;
    readonly ikeSamlServer: string;
    readonly inbandwidth: number;
    readonly ingressShapingProfile: string;
    readonly ingressSpilloverThreshold: number;
    readonly interface: string;
    readonly internal: number;
    readonly ip: string;
    readonly ipManagedByFortiipam: string;
    readonly ipmac: string;
    readonly ipsSnifferMode: string;
    readonly ipunnumbered: string;
    readonly ipv6s: outputs.GetSystemInterfaceIpv6[];
    readonly l2forward: string;
    readonly lacpHaSecondary: string;
    readonly lacpHaSlave: string;
    readonly lacpMode: string;
    readonly lacpSpeed: string;
    readonly lcpEchoInterval: number;
    readonly lcpMaxEchoFails: number;
    readonly linkUpDelay: number;
    readonly lldpNetworkPolicy: string;
    readonly lldpReception: string;
    readonly lldpTransmission: string;
    readonly macaddr: string;
    readonly managedDevices: outputs.GetSystemInterfaceManagedDevice[];
    readonly managedSubnetworkSize: string;
    readonly managementIp: string;
    readonly measuredDownstreamBandwidth: number;
    readonly measuredUpstreamBandwidth: number;
    readonly mediatype: string;
    readonly members: outputs.GetSystemInterfaceMember[];
    readonly minLinks: number;
    readonly minLinksDown: string;
    readonly mode: string;
    readonly monitorBandwidth: string;
    readonly mtu: number;
    readonly mtuOverride: string;
    readonly name: string;
    readonly ndiscforward: string;
    readonly netbiosForward: string;
    readonly netflowSampler: string;
    readonly outbandwidth: number;
    readonly padtRetryTimeout: number;
    readonly password: string;
    readonly pingServStatus: number;
    readonly pollingInterval: number;
    readonly pppoeUnnumberedNegotiate: string;
    readonly pptpAuthType: string;
    readonly pptpClient: string;
    readonly pptpPassword: string;
    readonly pptpServerIp: string;
    readonly pptpTimeout: number;
    readonly pptpUser: string;
    readonly preserveSessionRoute: string;
    readonly priority: number;
    readonly priorityOverride: string;
    readonly proxyCaptivePortal: string;
    readonly reachableTime: number;
    readonly redundantInterface: string;
    readonly remoteIp: string;
    readonly replacemsgOverrideGroup: string;
    readonly ringRx: number;
    readonly ringTx: number;
    readonly role: string;
    readonly sampleDirection: string;
    readonly sampleRate: number;
    readonly scanBotnetConnections: string;
    readonly secondaryIp: string;
    readonly secondaryips: outputs.GetSystemInterfaceSecondaryip[];
    readonly securityExemptList: string;
    readonly securityExternalLogout: string;
    readonly securityExternalWeb: string;
    readonly securityGroups: outputs.GetSystemInterfaceSecurityGroup[];
    readonly securityMacAuthBypass: string;
    readonly securityMode: string;
    readonly securityRedirectUrl: string;
    readonly serviceName: string;
    readonly sflowSampler: string;
    readonly snmpIndex: number;
    readonly speed: string;
    readonly spilloverThreshold: number;
    readonly srcCheck: string;
    readonly status: string;
    readonly stp: string;
    readonly stpHaSecondary: string;
    readonly stpforward: string;
    readonly stpforwardMode: string;
    readonly subst: string;
    readonly substituteDstMac: string;
    readonly swcFirstCreate: number;
    readonly swcVlan: number;
    readonly switch: string;
    readonly switchControllerAccessVlan: string;
    readonly switchControllerArpInspection: string;
    readonly switchControllerDhcpSnooping: string;
    readonly switchControllerDhcpSnoopingOption82: string;
    readonly switchControllerDhcpSnoopingVerifyMac: string;
    readonly switchControllerDynamic: string;
    readonly switchControllerFeature: string;
    readonly switchControllerIgmpSnooping: string;
    readonly switchControllerIgmpSnoopingFastLeave: string;
    readonly switchControllerIgmpSnoopingProxy: string;
    readonly switchControllerIotScanning: string;
    readonly switchControllerLearningLimit: number;
    readonly switchControllerMgmtVlan: number;
    readonly switchControllerNac: string;
    readonly switchControllerNetflowCollect: string;
    readonly switchControllerOffload: string;
    readonly switchControllerOffloadGw: string;
    readonly switchControllerOffloadIp: string;
    readonly switchControllerRspanMode: string;
    readonly switchControllerSourceIp: string;
    readonly switchControllerTrafficPolicy: string;
    readonly systemId: string;
    readonly systemIdType: string;
    readonly taggings: outputs.GetSystemInterfaceTagging[];
    readonly tcpMss: number;
    readonly trunk: string;
    readonly trustIp1: string;
    readonly trustIp2: string;
    readonly trustIp3: string;
    readonly trustIp61: string;
    readonly trustIp62: string;
    readonly trustIp63: string;
    readonly type: string;
    readonly username: string;
    readonly vdom: string;
    readonly vdomparam?: string;
    readonly vindex: number;
    readonly vlanProtocol: string;
    readonly vlanforward: string;
    readonly vlanid: number;
    readonly vrf: number;
    readonly vrrpVirtualMac: string;
    readonly vrrps: outputs.GetSystemInterfaceVrrp[];
    readonly wccp: string;
    readonly weight: number;
    readonly winsIp: string;
}
export function getSystemInterfaceOutput(args: GetSystemInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSystemInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getSystemInterface(a, opts))
}

/**
 * A collection of arguments for invoking getSystemInterface.
 */
export interface GetSystemInterfaceOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
