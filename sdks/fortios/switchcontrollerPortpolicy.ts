// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwitchcontrollerPortpolicy extends pulumi.CustomResource {
    /**
     * Get an existing SwitchcontrollerPortpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchcontrollerPortpolicyState, opts?: pulumi.CustomResourceOptions): SwitchcontrollerPortpolicy {
        return new SwitchcontrollerPortpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/switchcontrollerPortpolicy:SwitchcontrollerPortpolicy';

    /**
     * Returns true if the given object is an instance of SwitchcontrollerPortpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchcontrollerPortpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchcontrollerPortpolicy.__pulumiType;
    }

    public readonly bouncePortLink!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly fortilink!: pulumi.Output<string>;
    public readonly lldpProfile!: pulumi.Output<string>;
    public readonly n8021x!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly qosPolicy!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly vlanPolicy!: pulumi.Output<string>;

    /**
     * Create a SwitchcontrollerPortpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchcontrollerPortpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchcontrollerPortpolicyArgs | SwitchcontrollerPortpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchcontrollerPortpolicyState | undefined;
            resourceInputs["bouncePortLink"] = state ? state.bouncePortLink : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fortilink"] = state ? state.fortilink : undefined;
            resourceInputs["lldpProfile"] = state ? state.lldpProfile : undefined;
            resourceInputs["n8021x"] = state ? state.n8021x : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["qosPolicy"] = state ? state.qosPolicy : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["vlanPolicy"] = state ? state.vlanPolicy : undefined;
        } else {
            const args = argsOrState as SwitchcontrollerPortpolicyArgs | undefined;
            resourceInputs["bouncePortLink"] = args ? args.bouncePortLink : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fortilink"] = args ? args.fortilink : undefined;
            resourceInputs["lldpProfile"] = args ? args.lldpProfile : undefined;
            resourceInputs["n8021x"] = args ? args.n8021x : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["qosPolicy"] = args ? args.qosPolicy : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["vlanPolicy"] = args ? args.vlanPolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchcontrollerPortpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchcontrollerPortpolicy resources.
 */
export interface SwitchcontrollerPortpolicyState {
    bouncePortLink?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fortilink?: pulumi.Input<string>;
    lldpProfile?: pulumi.Input<string>;
    n8021x?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    qosPolicy?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    vlanPolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchcontrollerPortpolicy resource.
 */
export interface SwitchcontrollerPortpolicyArgs {
    bouncePortLink?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fortilink?: pulumi.Input<string>;
    lldpProfile?: pulumi.Input<string>;
    n8021x?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    qosPolicy?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    vlanPolicy?: pulumi.Input<string>;
}
