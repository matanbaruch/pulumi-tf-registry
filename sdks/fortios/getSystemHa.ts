// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSystemHa(args?: GetSystemHaArgs, opts?: pulumi.InvokeOptions): Promise<GetSystemHaResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:index/getSystemHa:getSystemHa", {
        "id": args.id,
        "vdomparam": args.vdomparam,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSystemHa.
 */
export interface GetSystemHaArgs {
    id?: string;
    vdomparam?: string;
}

/**
 * A collection of values returned by getSystemHa.
 */
export interface GetSystemHaResult {
    readonly arps: number;
    readonly arpsInterval: number;
    readonly authentication: string;
    readonly cpuThreshold: string;
    readonly encryption: string;
    readonly evpnTtl: number;
    readonly failoverHoldTime: number;
    readonly ftpProxyThreshold: string;
    readonly gratuitousArps: string;
    readonly groupId: number;
    readonly groupName: string;
    readonly haDirect: string;
    readonly haEthType: string;
    readonly haMgmtInterfaces: outputs.GetSystemHaHaMgmtInterface[];
    readonly haMgmtStatus: string;
    readonly haUptimeDiffMargin: number;
    readonly hbInterval: number;
    readonly hbIntervalInMilliseconds: string;
    readonly hbLostThreshold: number;
    readonly hbdev: string;
    readonly hcEthType: string;
    readonly helloHolddown: number;
    readonly httpProxyThreshold: string;
    readonly id: string;
    readonly imapProxyThreshold: string;
    readonly interClusterSessionSync: string;
    readonly ipsecPhase2Proposal: string;
    readonly key: string;
    readonly l2epEthType: string;
    readonly linkFailedSignal: string;
    readonly loadBalanceAll: string;
    readonly logicalSn: string;
    readonly memoryBasedFailover: string;
    readonly memoryCompatibleMode: string;
    readonly memoryFailoverFlipTimeout: number;
    readonly memoryFailoverMonitorPeriod: number;
    readonly memoryFailoverSampleRate: number;
    readonly memoryFailoverThreshold: number;
    readonly memoryThreshold: string;
    readonly mode: string;
    readonly monitor: string;
    readonly multicastTtl: number;
    readonly nntpProxyThreshold: string;
    readonly override: string;
    readonly overrideWaitTime: number;
    readonly password: string;
    readonly pingserverFailoverThreshold: number;
    readonly pingserverFlipTimeout: number;
    readonly pingserverMonitorInterface: string;
    readonly pingserverSecondaryForceReset: string;
    readonly pingserverSlaveForceReset: string;
    readonly pop3ProxyThreshold: string;
    readonly priority: number;
    readonly routeHold: number;
    readonly routeTtl: number;
    readonly routeWait: number;
    readonly schedule: string;
    readonly secondaryVclusters: outputs.GetSystemHaSecondaryVcluster[];
    readonly sessionPickup: string;
    readonly sessionPickupConnectionless: string;
    readonly sessionPickupDelay: string;
    readonly sessionPickupExpectation: string;
    readonly sessionPickupNat: string;
    readonly sessionSyncDev: string;
    readonly smtpProxyThreshold: string;
    readonly ssdFailover: string;
    readonly standaloneConfigSync: string;
    readonly standaloneMgmtVdom: string;
    readonly syncConfig: string;
    readonly syncPacketBalance: string;
    readonly unicastGateway: string;
    readonly unicastHb: string;
    readonly unicastHbNetmask: string;
    readonly unicastHbPeerip: string;
    readonly unicastPeers: outputs.GetSystemHaUnicastPeer[];
    readonly unicastStatus: string;
    readonly uninterruptiblePrimaryWait: number;
    readonly uninterruptibleUpgrade: string;
    readonly upgradeMode: string;
    readonly vcluster2: string;
    readonly vclusterId: number;
    readonly vclusterStatus: string;
    readonly vclusters: outputs.GetSystemHaVcluster[];
    readonly vdom: string;
    readonly vdomparam?: string;
    readonly weight: string;
}
export function getSystemHaOutput(args?: GetSystemHaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSystemHaResult> {
    return pulumi.output(args).apply((a: any) => getSystemHa(a, opts))
}

/**
 * A collection of arguments for invoking getSystemHa.
 */
export interface GetSystemHaOutputArgs {
    id?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
