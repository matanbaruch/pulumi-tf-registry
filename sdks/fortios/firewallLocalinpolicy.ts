// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallLocalinpolicy extends pulumi.CustomResource {
    /**
     * Get an existing FirewallLocalinpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallLocalinpolicyState, opts?: pulumi.CustomResourceOptions): FirewallLocalinpolicy {
        return new FirewallLocalinpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallLocalinpolicy:FirewallLocalinpolicy';

    /**
     * Returns true if the given object is an instance of FirewallLocalinpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallLocalinpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallLocalinpolicy.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly dstaddrNegate!: pulumi.Output<string>;
    public readonly dstaddrs!: pulumi.Output<outputs.FirewallLocalinpolicyDstaddr[]>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly haMgmtIntfOnly!: pulumi.Output<string>;
    public readonly internetServiceSrc!: pulumi.Output<string>;
    public readonly internetServiceSrcCustomGroups!: pulumi.Output<outputs.FirewallLocalinpolicyInternetServiceSrcCustomGroup[] | undefined>;
    public readonly internetServiceSrcCustoms!: pulumi.Output<outputs.FirewallLocalinpolicyInternetServiceSrcCustom[] | undefined>;
    public readonly internetServiceSrcGroups!: pulumi.Output<outputs.FirewallLocalinpolicyInternetServiceSrcGroup[] | undefined>;
    public readonly internetServiceSrcNames!: pulumi.Output<outputs.FirewallLocalinpolicyInternetServiceSrcName[] | undefined>;
    public readonly internetServiceSrcNegate!: pulumi.Output<string>;
    public readonly intf!: pulumi.Output<string>;
    public readonly intfBlocks!: pulumi.Output<outputs.FirewallLocalinpolicyIntfBlock[] | undefined>;
    public readonly policyid!: pulumi.Output<number>;
    public readonly schedule!: pulumi.Output<string>;
    public readonly serviceNegate!: pulumi.Output<string>;
    public readonly services!: pulumi.Output<outputs.FirewallLocalinpolicyService[] | undefined>;
    public readonly srcaddrNegate!: pulumi.Output<string>;
    public readonly srcaddrs!: pulumi.Output<outputs.FirewallLocalinpolicySrcaddr[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly virtualPatch!: pulumi.Output<string>;

    /**
     * Create a FirewallLocalinpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallLocalinpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallLocalinpolicyArgs | FirewallLocalinpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallLocalinpolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dstaddrNegate"] = state ? state.dstaddrNegate : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["haMgmtIntfOnly"] = state ? state.haMgmtIntfOnly : undefined;
            resourceInputs["internetServiceSrc"] = state ? state.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustomGroups"] = state ? state.internetServiceSrcCustomGroups : undefined;
            resourceInputs["internetServiceSrcCustoms"] = state ? state.internetServiceSrcCustoms : undefined;
            resourceInputs["internetServiceSrcGroups"] = state ? state.internetServiceSrcGroups : undefined;
            resourceInputs["internetServiceSrcNames"] = state ? state.internetServiceSrcNames : undefined;
            resourceInputs["internetServiceSrcNegate"] = state ? state.internetServiceSrcNegate : undefined;
            resourceInputs["intf"] = state ? state.intf : undefined;
            resourceInputs["intfBlocks"] = state ? state.intfBlocks : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["serviceNegate"] = state ? state.serviceNegate : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["srcaddrNegate"] = state ? state.srcaddrNegate : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["virtualPatch"] = state ? state.virtualPatch : undefined;
        } else {
            const args = argsOrState as FirewallLocalinpolicyArgs | undefined;
            if ((!args || args.dstaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstaddrs'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.srcaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcaddrs'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dstaddrNegate"] = args ? args.dstaddrNegate : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["haMgmtIntfOnly"] = args ? args.haMgmtIntfOnly : undefined;
            resourceInputs["internetServiceSrc"] = args ? args.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustomGroups"] = args ? args.internetServiceSrcCustomGroups : undefined;
            resourceInputs["internetServiceSrcCustoms"] = args ? args.internetServiceSrcCustoms : undefined;
            resourceInputs["internetServiceSrcGroups"] = args ? args.internetServiceSrcGroups : undefined;
            resourceInputs["internetServiceSrcNames"] = args ? args.internetServiceSrcNames : undefined;
            resourceInputs["internetServiceSrcNegate"] = args ? args.internetServiceSrcNegate : undefined;
            resourceInputs["intf"] = args ? args.intf : undefined;
            resourceInputs["intfBlocks"] = args ? args.intfBlocks : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["serviceNegate"] = args ? args.serviceNegate : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["srcaddrNegate"] = args ? args.srcaddrNegate : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["virtualPatch"] = args ? args.virtualPatch : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallLocalinpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallLocalinpolicy resources.
 */
export interface FirewallLocalinpolicyState {
    action?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dstaddrNegate?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyDstaddr>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    haMgmtIntfOnly?: pulumi.Input<string>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcCustomGroups?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyInternetServiceSrcCustomGroup>[]>;
    internetServiceSrcCustoms?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyInternetServiceSrcCustom>[]>;
    internetServiceSrcGroups?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyInternetServiceSrcGroup>[]>;
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyInternetServiceSrcName>[]>;
    internetServiceSrcNegate?: pulumi.Input<string>;
    intf?: pulumi.Input<string>;
    intfBlocks?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyIntfBlock>[]>;
    policyid?: pulumi.Input<number>;
    schedule?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyService>[]>;
    srcaddrNegate?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicySrcaddr>[]>;
    status?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    virtualPatch?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallLocalinpolicy resource.
 */
export interface FirewallLocalinpolicyArgs {
    action?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dstaddrNegate?: pulumi.Input<string>;
    dstaddrs: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyDstaddr>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    haMgmtIntfOnly?: pulumi.Input<string>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcCustomGroups?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyInternetServiceSrcCustomGroup>[]>;
    internetServiceSrcCustoms?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyInternetServiceSrcCustom>[]>;
    internetServiceSrcGroups?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyInternetServiceSrcGroup>[]>;
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyInternetServiceSrcName>[]>;
    internetServiceSrcNegate?: pulumi.Input<string>;
    intf?: pulumi.Input<string>;
    intfBlocks?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyIntfBlock>[]>;
    policyid?: pulumi.Input<number>;
    schedule: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicyService>[]>;
    srcaddrNegate?: pulumi.Input<string>;
    srcaddrs: pulumi.Input<pulumi.Input<inputs.FirewallLocalinpolicySrcaddr>[]>;
    status?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    virtualPatch?: pulumi.Input<string>;
}
