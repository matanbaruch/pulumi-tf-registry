// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationList extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationListState, opts?: pulumi.CustomResourceOptions): ApplicationList {
        return new ApplicationList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/applicationList:ApplicationList';

    /**
     * Returns true if the given object is an instance of ApplicationList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationList.__pulumiType;
    }

    public readonly appReplacemsg!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly controlDefaultNetworkServices!: pulumi.Output<string>;
    public readonly deepAppInspection!: pulumi.Output<string>;
    public readonly defaultNetworkServices!: pulumi.Output<outputs.ApplicationListDefaultNetworkService[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly enforceDefaultAppPort!: pulumi.Output<string>;
    public readonly entries!: pulumi.Output<outputs.ApplicationListEntry[] | undefined>;
    public readonly extendedLog!: pulumi.Output<string>;
    public readonly forceInclusionSslDiSigs!: pulumi.Output<string>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<string>;
    public readonly otherApplicationAction!: pulumi.Output<string>;
    public readonly otherApplicationLog!: pulumi.Output<string>;
    public readonly p2pBlackList!: pulumi.Output<string>;
    public readonly p2pBlockList!: pulumi.Output<string>;
    public readonly replacemsgGroup!: pulumi.Output<string>;
    public readonly unknownApplicationAction!: pulumi.Output<string>;
    public readonly unknownApplicationLog!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a ApplicationList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationListArgs | ApplicationListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationListState | undefined;
            resourceInputs["appReplacemsg"] = state ? state.appReplacemsg : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["controlDefaultNetworkServices"] = state ? state.controlDefaultNetworkServices : undefined;
            resourceInputs["deepAppInspection"] = state ? state.deepAppInspection : undefined;
            resourceInputs["defaultNetworkServices"] = state ? state.defaultNetworkServices : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["enforceDefaultAppPort"] = state ? state.enforceDefaultAppPort : undefined;
            resourceInputs["entries"] = state ? state.entries : undefined;
            resourceInputs["extendedLog"] = state ? state.extendedLog : undefined;
            resourceInputs["forceInclusionSslDiSigs"] = state ? state.forceInclusionSslDiSigs : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["otherApplicationAction"] = state ? state.otherApplicationAction : undefined;
            resourceInputs["otherApplicationLog"] = state ? state.otherApplicationLog : undefined;
            resourceInputs["p2pBlackList"] = state ? state.p2pBlackList : undefined;
            resourceInputs["p2pBlockList"] = state ? state.p2pBlockList : undefined;
            resourceInputs["replacemsgGroup"] = state ? state.replacemsgGroup : undefined;
            resourceInputs["unknownApplicationAction"] = state ? state.unknownApplicationAction : undefined;
            resourceInputs["unknownApplicationLog"] = state ? state.unknownApplicationLog : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as ApplicationListArgs | undefined;
            resourceInputs["appReplacemsg"] = args ? args.appReplacemsg : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["controlDefaultNetworkServices"] = args ? args.controlDefaultNetworkServices : undefined;
            resourceInputs["deepAppInspection"] = args ? args.deepAppInspection : undefined;
            resourceInputs["defaultNetworkServices"] = args ? args.defaultNetworkServices : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["enforceDefaultAppPort"] = args ? args.enforceDefaultAppPort : undefined;
            resourceInputs["entries"] = args ? args.entries : undefined;
            resourceInputs["extendedLog"] = args ? args.extendedLog : undefined;
            resourceInputs["forceInclusionSslDiSigs"] = args ? args.forceInclusionSslDiSigs : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["otherApplicationAction"] = args ? args.otherApplicationAction : undefined;
            resourceInputs["otherApplicationLog"] = args ? args.otherApplicationLog : undefined;
            resourceInputs["p2pBlackList"] = args ? args.p2pBlackList : undefined;
            resourceInputs["p2pBlockList"] = args ? args.p2pBlockList : undefined;
            resourceInputs["replacemsgGroup"] = args ? args.replacemsgGroup : undefined;
            resourceInputs["unknownApplicationAction"] = args ? args.unknownApplicationAction : undefined;
            resourceInputs["unknownApplicationLog"] = args ? args.unknownApplicationLog : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationList.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationList resources.
 */
export interface ApplicationListState {
    appReplacemsg?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    controlDefaultNetworkServices?: pulumi.Input<string>;
    deepAppInspection?: pulumi.Input<string>;
    defaultNetworkServices?: pulumi.Input<pulumi.Input<inputs.ApplicationListDefaultNetworkService>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    enforceDefaultAppPort?: pulumi.Input<string>;
    entries?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntry>[]>;
    extendedLog?: pulumi.Input<string>;
    forceInclusionSslDiSigs?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    otherApplicationAction?: pulumi.Input<string>;
    otherApplicationLog?: pulumi.Input<string>;
    p2pBlackList?: pulumi.Input<string>;
    p2pBlockList?: pulumi.Input<string>;
    replacemsgGroup?: pulumi.Input<string>;
    unknownApplicationAction?: pulumi.Input<string>;
    unknownApplicationLog?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationList resource.
 */
export interface ApplicationListArgs {
    appReplacemsg?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    controlDefaultNetworkServices?: pulumi.Input<string>;
    deepAppInspection?: pulumi.Input<string>;
    defaultNetworkServices?: pulumi.Input<pulumi.Input<inputs.ApplicationListDefaultNetworkService>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    enforceDefaultAppPort?: pulumi.Input<string>;
    entries?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntry>[]>;
    extendedLog?: pulumi.Input<string>;
    forceInclusionSslDiSigs?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    otherApplicationAction?: pulumi.Input<string>;
    otherApplicationLog?: pulumi.Input<string>;
    p2pBlackList?: pulumi.Input<string>;
    p2pBlockList?: pulumi.Input<string>;
    replacemsgGroup?: pulumi.Input<string>;
    unknownApplicationAction?: pulumi.Input<string>;
    unknownApplicationLog?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
