// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WanoptCacheservice extends pulumi.CustomResource {
    /**
     * Get an existing WanoptCacheservice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WanoptCacheserviceState, opts?: pulumi.CustomResourceOptions): WanoptCacheservice {
        return new WanoptCacheservice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/wanoptCacheservice:WanoptCacheservice';

    /**
     * Returns true if the given object is an instance of WanoptCacheservice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WanoptCacheservice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WanoptCacheservice.__pulumiType;
    }

    public readonly acceptableConnections!: pulumi.Output<string>;
    public readonly collaboration!: pulumi.Output<string>;
    public readonly deviceId!: pulumi.Output<string>;
    public readonly dstPeers!: pulumi.Output<outputs.WanoptCacheserviceDstPeer[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly preferScenario!: pulumi.Output<string>;
    public readonly srcPeers!: pulumi.Output<outputs.WanoptCacheserviceSrcPeer[] | undefined>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a WanoptCacheservice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WanoptCacheserviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WanoptCacheserviceArgs | WanoptCacheserviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WanoptCacheserviceState | undefined;
            resourceInputs["acceptableConnections"] = state ? state.acceptableConnections : undefined;
            resourceInputs["collaboration"] = state ? state.collaboration : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["dstPeers"] = state ? state.dstPeers : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["preferScenario"] = state ? state.preferScenario : undefined;
            resourceInputs["srcPeers"] = state ? state.srcPeers : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as WanoptCacheserviceArgs | undefined;
            resourceInputs["acceptableConnections"] = args ? args.acceptableConnections : undefined;
            resourceInputs["collaboration"] = args ? args.collaboration : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["dstPeers"] = args ? args.dstPeers : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["preferScenario"] = args ? args.preferScenario : undefined;
            resourceInputs["srcPeers"] = args ? args.srcPeers : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WanoptCacheservice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WanoptCacheservice resources.
 */
export interface WanoptCacheserviceState {
    acceptableConnections?: pulumi.Input<string>;
    collaboration?: pulumi.Input<string>;
    deviceId?: pulumi.Input<string>;
    dstPeers?: pulumi.Input<pulumi.Input<inputs.WanoptCacheserviceDstPeer>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    preferScenario?: pulumi.Input<string>;
    srcPeers?: pulumi.Input<pulumi.Input<inputs.WanoptCacheserviceSrcPeer>[]>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WanoptCacheservice resource.
 */
export interface WanoptCacheserviceArgs {
    acceptableConnections?: pulumi.Input<string>;
    collaboration?: pulumi.Input<string>;
    deviceId?: pulumi.Input<string>;
    dstPeers?: pulumi.Input<pulumi.Input<inputs.WanoptCacheserviceDstPeer>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    preferScenario?: pulumi.Input<string>;
    srcPeers?: pulumi.Input<pulumi.Input<inputs.WanoptCacheserviceSrcPeer>[]>;
    vdomparam?: pulumi.Input<string>;
}
