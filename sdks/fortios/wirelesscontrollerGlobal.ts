// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelesscontrollerGlobal extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerGlobalState, opts?: pulumi.CustomResourceOptions): WirelesscontrollerGlobal {
        return new WirelesscontrollerGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/wirelesscontrollerGlobal:WirelesscontrollerGlobal';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerGlobal.__pulumiType;
    }

    public readonly acdProcessCount!: pulumi.Output<number>;
    public readonly apLogServer!: pulumi.Output<string>;
    public readonly apLogServerIp!: pulumi.Output<string>;
    public readonly apLogServerPort!: pulumi.Output<number>;
    public readonly controlMessageOffload!: pulumi.Output<string>;
    public readonly dataEthernetIi!: pulumi.Output<string>;
    public readonly dfsLabTest!: pulumi.Output<string>;
    public readonly discoveryMcAddr!: pulumi.Output<string>;
    public readonly fiappEthType!: pulumi.Output<number>;
    public readonly imageDownload!: pulumi.Output<string>;
    public readonly ipsecBaseIp!: pulumi.Output<string>;
    public readonly linkAggregation!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly maxBleDevice!: pulumi.Output<number>;
    public readonly maxClients!: pulumi.Output<number>;
    public readonly maxRetransmit!: pulumi.Output<number>;
    public readonly maxRogueAp!: pulumi.Output<number>;
    public readonly maxRogueApWtp!: pulumi.Output<number>;
    public readonly maxRogueSta!: pulumi.Output<number>;
    public readonly maxStaCap!: pulumi.Output<number>;
    public readonly maxStaCapWtp!: pulumi.Output<number>;
    public readonly meshEthType!: pulumi.Output<number>;
    public readonly nacInterval!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly rogueScanMacAdjacency!: pulumi.Output<number>;
    public readonly rollingWtpUpgrade!: pulumi.Output<string>;
    public readonly rollingWtpUpgradeThreshold!: pulumi.Output<string>;
    public readonly tunnelMode!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly wpadProcessCount!: pulumi.Output<number>;
    public readonly wtpShare!: pulumi.Output<string>;

    /**
     * Create a WirelesscontrollerGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelesscontrollerGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerGlobalArgs | WirelesscontrollerGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerGlobalState | undefined;
            resourceInputs["acdProcessCount"] = state ? state.acdProcessCount : undefined;
            resourceInputs["apLogServer"] = state ? state.apLogServer : undefined;
            resourceInputs["apLogServerIp"] = state ? state.apLogServerIp : undefined;
            resourceInputs["apLogServerPort"] = state ? state.apLogServerPort : undefined;
            resourceInputs["controlMessageOffload"] = state ? state.controlMessageOffload : undefined;
            resourceInputs["dataEthernetIi"] = state ? state.dataEthernetIi : undefined;
            resourceInputs["dfsLabTest"] = state ? state.dfsLabTest : undefined;
            resourceInputs["discoveryMcAddr"] = state ? state.discoveryMcAddr : undefined;
            resourceInputs["fiappEthType"] = state ? state.fiappEthType : undefined;
            resourceInputs["imageDownload"] = state ? state.imageDownload : undefined;
            resourceInputs["ipsecBaseIp"] = state ? state.ipsecBaseIp : undefined;
            resourceInputs["linkAggregation"] = state ? state.linkAggregation : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maxBleDevice"] = state ? state.maxBleDevice : undefined;
            resourceInputs["maxClients"] = state ? state.maxClients : undefined;
            resourceInputs["maxRetransmit"] = state ? state.maxRetransmit : undefined;
            resourceInputs["maxRogueAp"] = state ? state.maxRogueAp : undefined;
            resourceInputs["maxRogueApWtp"] = state ? state.maxRogueApWtp : undefined;
            resourceInputs["maxRogueSta"] = state ? state.maxRogueSta : undefined;
            resourceInputs["maxStaCap"] = state ? state.maxStaCap : undefined;
            resourceInputs["maxStaCapWtp"] = state ? state.maxStaCapWtp : undefined;
            resourceInputs["meshEthType"] = state ? state.meshEthType : undefined;
            resourceInputs["nacInterval"] = state ? state.nacInterval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rogueScanMacAdjacency"] = state ? state.rogueScanMacAdjacency : undefined;
            resourceInputs["rollingWtpUpgrade"] = state ? state.rollingWtpUpgrade : undefined;
            resourceInputs["rollingWtpUpgradeThreshold"] = state ? state.rollingWtpUpgradeThreshold : undefined;
            resourceInputs["tunnelMode"] = state ? state.tunnelMode : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["wpadProcessCount"] = state ? state.wpadProcessCount : undefined;
            resourceInputs["wtpShare"] = state ? state.wtpShare : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerGlobalArgs | undefined;
            resourceInputs["acdProcessCount"] = args ? args.acdProcessCount : undefined;
            resourceInputs["apLogServer"] = args ? args.apLogServer : undefined;
            resourceInputs["apLogServerIp"] = args ? args.apLogServerIp : undefined;
            resourceInputs["apLogServerPort"] = args ? args.apLogServerPort : undefined;
            resourceInputs["controlMessageOffload"] = args ? args.controlMessageOffload : undefined;
            resourceInputs["dataEthernetIi"] = args ? args.dataEthernetIi : undefined;
            resourceInputs["dfsLabTest"] = args ? args.dfsLabTest : undefined;
            resourceInputs["discoveryMcAddr"] = args ? args.discoveryMcAddr : undefined;
            resourceInputs["fiappEthType"] = args ? args.fiappEthType : undefined;
            resourceInputs["imageDownload"] = args ? args.imageDownload : undefined;
            resourceInputs["ipsecBaseIp"] = args ? args.ipsecBaseIp : undefined;
            resourceInputs["linkAggregation"] = args ? args.linkAggregation : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maxBleDevice"] = args ? args.maxBleDevice : undefined;
            resourceInputs["maxClients"] = args ? args.maxClients : undefined;
            resourceInputs["maxRetransmit"] = args ? args.maxRetransmit : undefined;
            resourceInputs["maxRogueAp"] = args ? args.maxRogueAp : undefined;
            resourceInputs["maxRogueApWtp"] = args ? args.maxRogueApWtp : undefined;
            resourceInputs["maxRogueSta"] = args ? args.maxRogueSta : undefined;
            resourceInputs["maxStaCap"] = args ? args.maxStaCap : undefined;
            resourceInputs["maxStaCapWtp"] = args ? args.maxStaCapWtp : undefined;
            resourceInputs["meshEthType"] = args ? args.meshEthType : undefined;
            resourceInputs["nacInterval"] = args ? args.nacInterval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rogueScanMacAdjacency"] = args ? args.rogueScanMacAdjacency : undefined;
            resourceInputs["rollingWtpUpgrade"] = args ? args.rollingWtpUpgrade : undefined;
            resourceInputs["rollingWtpUpgradeThreshold"] = args ? args.rollingWtpUpgradeThreshold : undefined;
            resourceInputs["tunnelMode"] = args ? args.tunnelMode : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["wpadProcessCount"] = args ? args.wpadProcessCount : undefined;
            resourceInputs["wtpShare"] = args ? args.wtpShare : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelesscontrollerGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerGlobal resources.
 */
export interface WirelesscontrollerGlobalState {
    acdProcessCount?: pulumi.Input<number>;
    apLogServer?: pulumi.Input<string>;
    apLogServerIp?: pulumi.Input<string>;
    apLogServerPort?: pulumi.Input<number>;
    controlMessageOffload?: pulumi.Input<string>;
    dataEthernetIi?: pulumi.Input<string>;
    dfsLabTest?: pulumi.Input<string>;
    discoveryMcAddr?: pulumi.Input<string>;
    fiappEthType?: pulumi.Input<number>;
    imageDownload?: pulumi.Input<string>;
    ipsecBaseIp?: pulumi.Input<string>;
    linkAggregation?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    maxBleDevice?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxRetransmit?: pulumi.Input<number>;
    maxRogueAp?: pulumi.Input<number>;
    maxRogueApWtp?: pulumi.Input<number>;
    maxRogueSta?: pulumi.Input<number>;
    maxStaCap?: pulumi.Input<number>;
    maxStaCapWtp?: pulumi.Input<number>;
    meshEthType?: pulumi.Input<number>;
    nacInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    rogueScanMacAdjacency?: pulumi.Input<number>;
    rollingWtpUpgrade?: pulumi.Input<string>;
    rollingWtpUpgradeThreshold?: pulumi.Input<string>;
    tunnelMode?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    wpadProcessCount?: pulumi.Input<number>;
    wtpShare?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerGlobal resource.
 */
export interface WirelesscontrollerGlobalArgs {
    acdProcessCount?: pulumi.Input<number>;
    apLogServer?: pulumi.Input<string>;
    apLogServerIp?: pulumi.Input<string>;
    apLogServerPort?: pulumi.Input<number>;
    controlMessageOffload?: pulumi.Input<string>;
    dataEthernetIi?: pulumi.Input<string>;
    dfsLabTest?: pulumi.Input<string>;
    discoveryMcAddr?: pulumi.Input<string>;
    fiappEthType?: pulumi.Input<number>;
    imageDownload?: pulumi.Input<string>;
    ipsecBaseIp?: pulumi.Input<string>;
    linkAggregation?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    maxBleDevice?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxRetransmit?: pulumi.Input<number>;
    maxRogueAp?: pulumi.Input<number>;
    maxRogueApWtp?: pulumi.Input<number>;
    maxRogueSta?: pulumi.Input<number>;
    maxStaCap?: pulumi.Input<number>;
    maxStaCapWtp?: pulumi.Input<number>;
    meshEthType?: pulumi.Input<number>;
    nacInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    rogueScanMacAdjacency?: pulumi.Input<number>;
    rollingWtpUpgrade?: pulumi.Input<string>;
    rollingWtpUpgradeThreshold?: pulumi.Input<string>;
    tunnelMode?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    wpadProcessCount?: pulumi.Input<number>;
    wtpShare?: pulumi.Input<string>;
}
