// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemClustersync extends pulumi.CustomResource {
    /**
     * Get an existing SystemClustersync resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemClustersyncState, opts?: pulumi.CustomResourceOptions): SystemClustersync {
        return new SystemClustersync(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemClustersync:SystemClustersync';

    /**
     * Returns true if the given object is an instance of SystemClustersync.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemClustersync {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemClustersync.__pulumiType;
    }

    public readonly downIntfsBeforeSessSyncs!: pulumi.Output<outputs.SystemClustersyncDownIntfsBeforeSessSync[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly hbInterval!: pulumi.Output<number>;
    public readonly hbLostThreshold!: pulumi.Output<number>;
    public readonly ikeHeartbeatInterval!: pulumi.Output<number>;
    public readonly ikeMonitor!: pulumi.Output<string>;
    public readonly ikeMonitorInterval!: pulumi.Output<number>;
    public readonly ipsecTunnelSync!: pulumi.Output<string>;
    public readonly peerip!: pulumi.Output<string>;
    public readonly peervd!: pulumi.Output<string>;
    public readonly secondaryAddIpsecRoutes!: pulumi.Output<string>;
    public readonly sessionSyncFilter!: pulumi.Output<outputs.SystemClustersyncSessionSyncFilter | undefined>;
    public readonly slaveAddIkeRoutes!: pulumi.Output<string>;
    public readonly syncId!: pulumi.Output<number>;
    public readonly syncvds!: pulumi.Output<outputs.SystemClustersyncSyncvd[] | undefined>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a SystemClustersync resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemClustersyncArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemClustersyncArgs | SystemClustersyncState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemClustersyncState | undefined;
            resourceInputs["downIntfsBeforeSessSyncs"] = state ? state.downIntfsBeforeSessSyncs : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["hbInterval"] = state ? state.hbInterval : undefined;
            resourceInputs["hbLostThreshold"] = state ? state.hbLostThreshold : undefined;
            resourceInputs["ikeHeartbeatInterval"] = state ? state.ikeHeartbeatInterval : undefined;
            resourceInputs["ikeMonitor"] = state ? state.ikeMonitor : undefined;
            resourceInputs["ikeMonitorInterval"] = state ? state.ikeMonitorInterval : undefined;
            resourceInputs["ipsecTunnelSync"] = state ? state.ipsecTunnelSync : undefined;
            resourceInputs["peerip"] = state ? state.peerip : undefined;
            resourceInputs["peervd"] = state ? state.peervd : undefined;
            resourceInputs["secondaryAddIpsecRoutes"] = state ? state.secondaryAddIpsecRoutes : undefined;
            resourceInputs["sessionSyncFilter"] = state ? state.sessionSyncFilter : undefined;
            resourceInputs["slaveAddIkeRoutes"] = state ? state.slaveAddIkeRoutes : undefined;
            resourceInputs["syncId"] = state ? state.syncId : undefined;
            resourceInputs["syncvds"] = state ? state.syncvds : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SystemClustersyncArgs | undefined;
            resourceInputs["downIntfsBeforeSessSyncs"] = args ? args.downIntfsBeforeSessSyncs : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["hbInterval"] = args ? args.hbInterval : undefined;
            resourceInputs["hbLostThreshold"] = args ? args.hbLostThreshold : undefined;
            resourceInputs["ikeHeartbeatInterval"] = args ? args.ikeHeartbeatInterval : undefined;
            resourceInputs["ikeMonitor"] = args ? args.ikeMonitor : undefined;
            resourceInputs["ikeMonitorInterval"] = args ? args.ikeMonitorInterval : undefined;
            resourceInputs["ipsecTunnelSync"] = args ? args.ipsecTunnelSync : undefined;
            resourceInputs["peerip"] = args ? args.peerip : undefined;
            resourceInputs["peervd"] = args ? args.peervd : undefined;
            resourceInputs["secondaryAddIpsecRoutes"] = args ? args.secondaryAddIpsecRoutes : undefined;
            resourceInputs["sessionSyncFilter"] = args ? args.sessionSyncFilter : undefined;
            resourceInputs["slaveAddIkeRoutes"] = args ? args.slaveAddIkeRoutes : undefined;
            resourceInputs["syncId"] = args ? args.syncId : undefined;
            resourceInputs["syncvds"] = args ? args.syncvds : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemClustersync.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemClustersync resources.
 */
export interface SystemClustersyncState {
    downIntfsBeforeSessSyncs?: pulumi.Input<pulumi.Input<inputs.SystemClustersyncDownIntfsBeforeSessSync>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    hbInterval?: pulumi.Input<number>;
    hbLostThreshold?: pulumi.Input<number>;
    ikeHeartbeatInterval?: pulumi.Input<number>;
    ikeMonitor?: pulumi.Input<string>;
    ikeMonitorInterval?: pulumi.Input<number>;
    ipsecTunnelSync?: pulumi.Input<string>;
    peerip?: pulumi.Input<string>;
    peervd?: pulumi.Input<string>;
    secondaryAddIpsecRoutes?: pulumi.Input<string>;
    sessionSyncFilter?: pulumi.Input<inputs.SystemClustersyncSessionSyncFilter>;
    slaveAddIkeRoutes?: pulumi.Input<string>;
    syncId?: pulumi.Input<number>;
    syncvds?: pulumi.Input<pulumi.Input<inputs.SystemClustersyncSyncvd>[]>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemClustersync resource.
 */
export interface SystemClustersyncArgs {
    downIntfsBeforeSessSyncs?: pulumi.Input<pulumi.Input<inputs.SystemClustersyncDownIntfsBeforeSessSync>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    hbInterval?: pulumi.Input<number>;
    hbLostThreshold?: pulumi.Input<number>;
    ikeHeartbeatInterval?: pulumi.Input<number>;
    ikeMonitor?: pulumi.Input<string>;
    ikeMonitorInterval?: pulumi.Input<number>;
    ipsecTunnelSync?: pulumi.Input<string>;
    peerip?: pulumi.Input<string>;
    peervd?: pulumi.Input<string>;
    secondaryAddIpsecRoutes?: pulumi.Input<string>;
    sessionSyncFilter?: pulumi.Input<inputs.SystemClustersyncSessionSyncFilter>;
    slaveAddIkeRoutes?: pulumi.Input<string>;
    syncId?: pulumi.Input<number>;
    syncvds?: pulumi.Input<pulumi.Input<inputs.SystemClustersyncSyncvd>[]>;
    vdomparam?: pulumi.Input<string>;
}
