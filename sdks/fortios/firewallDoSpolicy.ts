// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallDoSpolicy extends pulumi.CustomResource {
    /**
     * Get an existing FirewallDoSpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallDoSpolicyState, opts?: pulumi.CustomResourceOptions): FirewallDoSpolicy {
        return new FirewallDoSpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallDoSpolicy:FirewallDoSpolicy';

    /**
     * Returns true if the given object is an instance of FirewallDoSpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallDoSpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallDoSpolicy.__pulumiType;
    }

    public readonly anomalies!: pulumi.Output<outputs.FirewallDoSpolicyAnomaly[] | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly dstaddrs!: pulumi.Output<outputs.FirewallDoSpolicyDstaddr[]>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly interface!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly policyid!: pulumi.Output<number>;
    public readonly services!: pulumi.Output<outputs.FirewallDoSpolicyService[] | undefined>;
    public readonly srcaddrs!: pulumi.Output<outputs.FirewallDoSpolicySrcaddr[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a FirewallDoSpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallDoSpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallDoSpolicyArgs | FirewallDoSpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallDoSpolicyState | undefined;
            resourceInputs["anomalies"] = state ? state.anomalies : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as FirewallDoSpolicyArgs | undefined;
            if ((!args || args.dstaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstaddrs'");
            }
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.srcaddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcaddrs'");
            }
            resourceInputs["anomalies"] = args ? args.anomalies : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallDoSpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallDoSpolicy resources.
 */
export interface FirewallDoSpolicyState {
    anomalies?: pulumi.Input<pulumi.Input<inputs.FirewallDoSpolicyAnomaly>[]>;
    comments?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallDoSpolicyDstaddr>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<inputs.FirewallDoSpolicyService>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.FirewallDoSpolicySrcaddr>[]>;
    status?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallDoSpolicy resource.
 */
export interface FirewallDoSpolicyArgs {
    anomalies?: pulumi.Input<pulumi.Input<inputs.FirewallDoSpolicyAnomaly>[]>;
    comments?: pulumi.Input<string>;
    dstaddrs: pulumi.Input<pulumi.Input<inputs.FirewallDoSpolicyDstaddr>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<inputs.FirewallDoSpolicyService>[]>;
    srcaddrs: pulumi.Input<pulumi.Input<inputs.FirewallDoSpolicySrcaddr>[]>;
    status?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
