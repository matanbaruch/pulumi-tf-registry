// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnsslwebPortal extends pulumi.CustomResource {
    /**
     * Get an existing VpnsslwebPortal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnsslwebPortalState, opts?: pulumi.CustomResourceOptions): VpnsslwebPortal {
        return new VpnsslwebPortal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vpnsslwebPortal:VpnsslwebPortal';

    /**
     * Returns true if the given object is an instance of VpnsslwebPortal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnsslwebPortal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnsslwebPortal.__pulumiType;
    }

    public readonly allowUserAccess!: pulumi.Output<string>;
    public readonly autoConnect!: pulumi.Output<string>;
    public readonly bookmarkGroups!: pulumi.Output<outputs.VpnsslwebPortalBookmarkGroup[] | undefined>;
    public readonly clientSrcRange!: pulumi.Output<string>;
    public readonly clipboard!: pulumi.Output<string>;
    public readonly customLang!: pulumi.Output<string>;
    public readonly customizeForticlientDownloadUrl!: pulumi.Output<string>;
    public readonly defaultProtocol!: pulumi.Output<string>;
    public readonly defaultWindowHeight!: pulumi.Output<number>;
    public readonly defaultWindowWidth!: pulumi.Output<number>;
    public readonly dhcp6RaLinkaddr!: pulumi.Output<string>;
    public readonly dhcpIpOverlap!: pulumi.Output<string>;
    public readonly dhcpRaGiaddr!: pulumi.Output<string>;
    public readonly displayBookmark!: pulumi.Output<string>;
    public readonly displayConnectionTools!: pulumi.Output<string>;
    public readonly displayHistory!: pulumi.Output<string>;
    public readonly displayStatus!: pulumi.Output<string>;
    public readonly dnsServer1!: pulumi.Output<string>;
    public readonly dnsServer2!: pulumi.Output<string>;
    public readonly dnsSuffix!: pulumi.Output<string | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly exclusiveRouting!: pulumi.Output<string>;
    public readonly focusBookmark!: pulumi.Output<string>;
    public readonly forticlientDownload!: pulumi.Output<string>;
    public readonly forticlientDownloadMethod!: pulumi.Output<string>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly heading!: pulumi.Output<string>;
    public readonly hideSsoCredential!: pulumi.Output<string>;
    public readonly hostCheck!: pulumi.Output<string>;
    public readonly hostCheckInterval!: pulumi.Output<number>;
    public readonly hostCheckPolicies!: pulumi.Output<outputs.VpnsslwebPortalHostCheckPolicy[] | undefined>;
    public readonly ipMode!: pulumi.Output<string>;
    public readonly ipPools!: pulumi.Output<outputs.VpnsslwebPortalIpPool[] | undefined>;
    public readonly ipv6DnsServer1!: pulumi.Output<string>;
    public readonly ipv6DnsServer2!: pulumi.Output<string>;
    public readonly ipv6ExclusiveRouting!: pulumi.Output<string>;
    public readonly ipv6Pools!: pulumi.Output<outputs.VpnsslwebPortalIpv6Pool[] | undefined>;
    public readonly ipv6ServiceRestriction!: pulumi.Output<string>;
    public readonly ipv6SplitTunneling!: pulumi.Output<string>;
    public readonly ipv6SplitTunnelingRoutingAddresses!: pulumi.Output<outputs.VpnsslwebPortalIpv6SplitTunnelingRoutingAddress[] | undefined>;
    public readonly ipv6SplitTunnelingRoutingNegate!: pulumi.Output<string>;
    public readonly ipv6TunnelMode!: pulumi.Output<string>;
    public readonly ipv6WinsServer1!: pulumi.Output<string>;
    public readonly ipv6WinsServer2!: pulumi.Output<string>;
    public readonly keepAlive!: pulumi.Output<string>;
    public readonly landingPage!: pulumi.Output<outputs.VpnsslwebPortalLandingPage | undefined>;
    public readonly landingPageMode!: pulumi.Output<string>;
    public readonly limitUserLogins!: pulumi.Output<string>;
    public readonly macAddrAction!: pulumi.Output<string>;
    public readonly macAddrCheck!: pulumi.Output<string>;
    public readonly macAddrCheckRules!: pulumi.Output<outputs.VpnsslwebPortalMacAddrCheckRule[] | undefined>;
    public readonly macosForticlientDownloadUrl!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly osCheck!: pulumi.Output<string>;
    public readonly osCheckLists!: pulumi.Output<outputs.VpnsslwebPortalOsCheckList[] | undefined>;
    public readonly preferIpv6Dns!: pulumi.Output<string>;
    public readonly redirUrl!: pulumi.Output<string | undefined>;
    public readonly rewriteIpUriUi!: pulumi.Output<string>;
    public readonly savePassword!: pulumi.Output<string>;
    public readonly serviceRestriction!: pulumi.Output<string>;
    public readonly skipCheckForBrowser!: pulumi.Output<string>;
    public readonly skipCheckForUnsupportedOs!: pulumi.Output<string>;
    public readonly smbMaxVersion!: pulumi.Output<string>;
    public readonly smbMinVersion!: pulumi.Output<string>;
    public readonly smbNtlmv1Auth!: pulumi.Output<string>;
    public readonly smbv1!: pulumi.Output<string>;
    public readonly splitDns!: pulumi.Output<outputs.VpnsslwebPortalSplitDn[] | undefined>;
    public readonly splitTunneling!: pulumi.Output<string>;
    public readonly splitTunnelingRoutingAddresses!: pulumi.Output<outputs.VpnsslwebPortalSplitTunnelingRoutingAddress[] | undefined>;
    public readonly splitTunnelingRoutingNegate!: pulumi.Output<string>;
    public readonly theme!: pulumi.Output<string>;
    public readonly transformBackwardSlashes!: pulumi.Output<string>;
    public readonly tunnelMode!: pulumi.Output<string>;
    public readonly useSdwan!: pulumi.Output<string>;
    public readonly userBookmark!: pulumi.Output<string>;
    public readonly userGroupBookmark!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly webMode!: pulumi.Output<string>;
    public readonly windowsForticlientDownloadUrl!: pulumi.Output<string | undefined>;
    public readonly winsServer1!: pulumi.Output<string>;
    public readonly winsServer2!: pulumi.Output<string>;

    /**
     * Create a VpnsslwebPortal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnsslwebPortalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnsslwebPortalArgs | VpnsslwebPortalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnsslwebPortalState | undefined;
            resourceInputs["allowUserAccess"] = state ? state.allowUserAccess : undefined;
            resourceInputs["autoConnect"] = state ? state.autoConnect : undefined;
            resourceInputs["bookmarkGroups"] = state ? state.bookmarkGroups : undefined;
            resourceInputs["clientSrcRange"] = state ? state.clientSrcRange : undefined;
            resourceInputs["clipboard"] = state ? state.clipboard : undefined;
            resourceInputs["customLang"] = state ? state.customLang : undefined;
            resourceInputs["customizeForticlientDownloadUrl"] = state ? state.customizeForticlientDownloadUrl : undefined;
            resourceInputs["defaultProtocol"] = state ? state.defaultProtocol : undefined;
            resourceInputs["defaultWindowHeight"] = state ? state.defaultWindowHeight : undefined;
            resourceInputs["defaultWindowWidth"] = state ? state.defaultWindowWidth : undefined;
            resourceInputs["dhcp6RaLinkaddr"] = state ? state.dhcp6RaLinkaddr : undefined;
            resourceInputs["dhcpIpOverlap"] = state ? state.dhcpIpOverlap : undefined;
            resourceInputs["dhcpRaGiaddr"] = state ? state.dhcpRaGiaddr : undefined;
            resourceInputs["displayBookmark"] = state ? state.displayBookmark : undefined;
            resourceInputs["displayConnectionTools"] = state ? state.displayConnectionTools : undefined;
            resourceInputs["displayHistory"] = state ? state.displayHistory : undefined;
            resourceInputs["displayStatus"] = state ? state.displayStatus : undefined;
            resourceInputs["dnsServer1"] = state ? state.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = state ? state.dnsServer2 : undefined;
            resourceInputs["dnsSuffix"] = state ? state.dnsSuffix : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["exclusiveRouting"] = state ? state.exclusiveRouting : undefined;
            resourceInputs["focusBookmark"] = state ? state.focusBookmark : undefined;
            resourceInputs["forticlientDownload"] = state ? state.forticlientDownload : undefined;
            resourceInputs["forticlientDownloadMethod"] = state ? state.forticlientDownloadMethod : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["heading"] = state ? state.heading : undefined;
            resourceInputs["hideSsoCredential"] = state ? state.hideSsoCredential : undefined;
            resourceInputs["hostCheck"] = state ? state.hostCheck : undefined;
            resourceInputs["hostCheckInterval"] = state ? state.hostCheckInterval : undefined;
            resourceInputs["hostCheckPolicies"] = state ? state.hostCheckPolicies : undefined;
            resourceInputs["ipMode"] = state ? state.ipMode : undefined;
            resourceInputs["ipPools"] = state ? state.ipPools : undefined;
            resourceInputs["ipv6DnsServer1"] = state ? state.ipv6DnsServer1 : undefined;
            resourceInputs["ipv6DnsServer2"] = state ? state.ipv6DnsServer2 : undefined;
            resourceInputs["ipv6ExclusiveRouting"] = state ? state.ipv6ExclusiveRouting : undefined;
            resourceInputs["ipv6Pools"] = state ? state.ipv6Pools : undefined;
            resourceInputs["ipv6ServiceRestriction"] = state ? state.ipv6ServiceRestriction : undefined;
            resourceInputs["ipv6SplitTunneling"] = state ? state.ipv6SplitTunneling : undefined;
            resourceInputs["ipv6SplitTunnelingRoutingAddresses"] = state ? state.ipv6SplitTunnelingRoutingAddresses : undefined;
            resourceInputs["ipv6SplitTunnelingRoutingNegate"] = state ? state.ipv6SplitTunnelingRoutingNegate : undefined;
            resourceInputs["ipv6TunnelMode"] = state ? state.ipv6TunnelMode : undefined;
            resourceInputs["ipv6WinsServer1"] = state ? state.ipv6WinsServer1 : undefined;
            resourceInputs["ipv6WinsServer2"] = state ? state.ipv6WinsServer2 : undefined;
            resourceInputs["keepAlive"] = state ? state.keepAlive : undefined;
            resourceInputs["landingPage"] = state ? state.landingPage : undefined;
            resourceInputs["landingPageMode"] = state ? state.landingPageMode : undefined;
            resourceInputs["limitUserLogins"] = state ? state.limitUserLogins : undefined;
            resourceInputs["macAddrAction"] = state ? state.macAddrAction : undefined;
            resourceInputs["macAddrCheck"] = state ? state.macAddrCheck : undefined;
            resourceInputs["macAddrCheckRules"] = state ? state.macAddrCheckRules : undefined;
            resourceInputs["macosForticlientDownloadUrl"] = state ? state.macosForticlientDownloadUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osCheck"] = state ? state.osCheck : undefined;
            resourceInputs["osCheckLists"] = state ? state.osCheckLists : undefined;
            resourceInputs["preferIpv6Dns"] = state ? state.preferIpv6Dns : undefined;
            resourceInputs["redirUrl"] = state ? state.redirUrl : undefined;
            resourceInputs["rewriteIpUriUi"] = state ? state.rewriteIpUriUi : undefined;
            resourceInputs["savePassword"] = state ? state.savePassword : undefined;
            resourceInputs["serviceRestriction"] = state ? state.serviceRestriction : undefined;
            resourceInputs["skipCheckForBrowser"] = state ? state.skipCheckForBrowser : undefined;
            resourceInputs["skipCheckForUnsupportedOs"] = state ? state.skipCheckForUnsupportedOs : undefined;
            resourceInputs["smbMaxVersion"] = state ? state.smbMaxVersion : undefined;
            resourceInputs["smbMinVersion"] = state ? state.smbMinVersion : undefined;
            resourceInputs["smbNtlmv1Auth"] = state ? state.smbNtlmv1Auth : undefined;
            resourceInputs["smbv1"] = state ? state.smbv1 : undefined;
            resourceInputs["splitDns"] = state ? state.splitDns : undefined;
            resourceInputs["splitTunneling"] = state ? state.splitTunneling : undefined;
            resourceInputs["splitTunnelingRoutingAddresses"] = state ? state.splitTunnelingRoutingAddresses : undefined;
            resourceInputs["splitTunnelingRoutingNegate"] = state ? state.splitTunnelingRoutingNegate : undefined;
            resourceInputs["theme"] = state ? state.theme : undefined;
            resourceInputs["transformBackwardSlashes"] = state ? state.transformBackwardSlashes : undefined;
            resourceInputs["tunnelMode"] = state ? state.tunnelMode : undefined;
            resourceInputs["useSdwan"] = state ? state.useSdwan : undefined;
            resourceInputs["userBookmark"] = state ? state.userBookmark : undefined;
            resourceInputs["userGroupBookmark"] = state ? state.userGroupBookmark : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["webMode"] = state ? state.webMode : undefined;
            resourceInputs["windowsForticlientDownloadUrl"] = state ? state.windowsForticlientDownloadUrl : undefined;
            resourceInputs["winsServer1"] = state ? state.winsServer1 : undefined;
            resourceInputs["winsServer2"] = state ? state.winsServer2 : undefined;
        } else {
            const args = argsOrState as VpnsslwebPortalArgs | undefined;
            resourceInputs["allowUserAccess"] = args ? args.allowUserAccess : undefined;
            resourceInputs["autoConnect"] = args ? args.autoConnect : undefined;
            resourceInputs["bookmarkGroups"] = args ? args.bookmarkGroups : undefined;
            resourceInputs["clientSrcRange"] = args ? args.clientSrcRange : undefined;
            resourceInputs["clipboard"] = args ? args.clipboard : undefined;
            resourceInputs["customLang"] = args ? args.customLang : undefined;
            resourceInputs["customizeForticlientDownloadUrl"] = args ? args.customizeForticlientDownloadUrl : undefined;
            resourceInputs["defaultProtocol"] = args ? args.defaultProtocol : undefined;
            resourceInputs["defaultWindowHeight"] = args ? args.defaultWindowHeight : undefined;
            resourceInputs["defaultWindowWidth"] = args ? args.defaultWindowWidth : undefined;
            resourceInputs["dhcp6RaLinkaddr"] = args ? args.dhcp6RaLinkaddr : undefined;
            resourceInputs["dhcpIpOverlap"] = args ? args.dhcpIpOverlap : undefined;
            resourceInputs["dhcpRaGiaddr"] = args ? args.dhcpRaGiaddr : undefined;
            resourceInputs["displayBookmark"] = args ? args.displayBookmark : undefined;
            resourceInputs["displayConnectionTools"] = args ? args.displayConnectionTools : undefined;
            resourceInputs["displayHistory"] = args ? args.displayHistory : undefined;
            resourceInputs["displayStatus"] = args ? args.displayStatus : undefined;
            resourceInputs["dnsServer1"] = args ? args.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = args ? args.dnsServer2 : undefined;
            resourceInputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["exclusiveRouting"] = args ? args.exclusiveRouting : undefined;
            resourceInputs["focusBookmark"] = args ? args.focusBookmark : undefined;
            resourceInputs["forticlientDownload"] = args ? args.forticlientDownload : undefined;
            resourceInputs["forticlientDownloadMethod"] = args ? args.forticlientDownloadMethod : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["heading"] = args ? args.heading : undefined;
            resourceInputs["hideSsoCredential"] = args ? args.hideSsoCredential : undefined;
            resourceInputs["hostCheck"] = args ? args.hostCheck : undefined;
            resourceInputs["hostCheckInterval"] = args ? args.hostCheckInterval : undefined;
            resourceInputs["hostCheckPolicies"] = args ? args.hostCheckPolicies : undefined;
            resourceInputs["ipMode"] = args ? args.ipMode : undefined;
            resourceInputs["ipPools"] = args ? args.ipPools : undefined;
            resourceInputs["ipv6DnsServer1"] = args ? args.ipv6DnsServer1 : undefined;
            resourceInputs["ipv6DnsServer2"] = args ? args.ipv6DnsServer2 : undefined;
            resourceInputs["ipv6ExclusiveRouting"] = args ? args.ipv6ExclusiveRouting : undefined;
            resourceInputs["ipv6Pools"] = args ? args.ipv6Pools : undefined;
            resourceInputs["ipv6ServiceRestriction"] = args ? args.ipv6ServiceRestriction : undefined;
            resourceInputs["ipv6SplitTunneling"] = args ? args.ipv6SplitTunneling : undefined;
            resourceInputs["ipv6SplitTunnelingRoutingAddresses"] = args ? args.ipv6SplitTunnelingRoutingAddresses : undefined;
            resourceInputs["ipv6SplitTunnelingRoutingNegate"] = args ? args.ipv6SplitTunnelingRoutingNegate : undefined;
            resourceInputs["ipv6TunnelMode"] = args ? args.ipv6TunnelMode : undefined;
            resourceInputs["ipv6WinsServer1"] = args ? args.ipv6WinsServer1 : undefined;
            resourceInputs["ipv6WinsServer2"] = args ? args.ipv6WinsServer2 : undefined;
            resourceInputs["keepAlive"] = args ? args.keepAlive : undefined;
            resourceInputs["landingPage"] = args ? args.landingPage : undefined;
            resourceInputs["landingPageMode"] = args ? args.landingPageMode : undefined;
            resourceInputs["limitUserLogins"] = args ? args.limitUserLogins : undefined;
            resourceInputs["macAddrAction"] = args ? args.macAddrAction : undefined;
            resourceInputs["macAddrCheck"] = args ? args.macAddrCheck : undefined;
            resourceInputs["macAddrCheckRules"] = args ? args.macAddrCheckRules : undefined;
            resourceInputs["macosForticlientDownloadUrl"] = args ? args.macosForticlientDownloadUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osCheck"] = args ? args.osCheck : undefined;
            resourceInputs["osCheckLists"] = args ? args.osCheckLists : undefined;
            resourceInputs["preferIpv6Dns"] = args ? args.preferIpv6Dns : undefined;
            resourceInputs["redirUrl"] = args ? args.redirUrl : undefined;
            resourceInputs["rewriteIpUriUi"] = args ? args.rewriteIpUriUi : undefined;
            resourceInputs["savePassword"] = args ? args.savePassword : undefined;
            resourceInputs["serviceRestriction"] = args ? args.serviceRestriction : undefined;
            resourceInputs["skipCheckForBrowser"] = args ? args.skipCheckForBrowser : undefined;
            resourceInputs["skipCheckForUnsupportedOs"] = args ? args.skipCheckForUnsupportedOs : undefined;
            resourceInputs["smbMaxVersion"] = args ? args.smbMaxVersion : undefined;
            resourceInputs["smbMinVersion"] = args ? args.smbMinVersion : undefined;
            resourceInputs["smbNtlmv1Auth"] = args ? args.smbNtlmv1Auth : undefined;
            resourceInputs["smbv1"] = args ? args.smbv1 : undefined;
            resourceInputs["splitDns"] = args ? args.splitDns : undefined;
            resourceInputs["splitTunneling"] = args ? args.splitTunneling : undefined;
            resourceInputs["splitTunnelingRoutingAddresses"] = args ? args.splitTunnelingRoutingAddresses : undefined;
            resourceInputs["splitTunnelingRoutingNegate"] = args ? args.splitTunnelingRoutingNegate : undefined;
            resourceInputs["theme"] = args ? args.theme : undefined;
            resourceInputs["transformBackwardSlashes"] = args ? args.transformBackwardSlashes : undefined;
            resourceInputs["tunnelMode"] = args ? args.tunnelMode : undefined;
            resourceInputs["useSdwan"] = args ? args.useSdwan : undefined;
            resourceInputs["userBookmark"] = args ? args.userBookmark : undefined;
            resourceInputs["userGroupBookmark"] = args ? args.userGroupBookmark : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["webMode"] = args ? args.webMode : undefined;
            resourceInputs["windowsForticlientDownloadUrl"] = args ? args.windowsForticlientDownloadUrl : undefined;
            resourceInputs["winsServer1"] = args ? args.winsServer1 : undefined;
            resourceInputs["winsServer2"] = args ? args.winsServer2 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnsslwebPortal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnsslwebPortal resources.
 */
export interface VpnsslwebPortalState {
    allowUserAccess?: pulumi.Input<string>;
    autoConnect?: pulumi.Input<string>;
    bookmarkGroups?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalBookmarkGroup>[]>;
    clientSrcRange?: pulumi.Input<string>;
    clipboard?: pulumi.Input<string>;
    customLang?: pulumi.Input<string>;
    customizeForticlientDownloadUrl?: pulumi.Input<string>;
    defaultProtocol?: pulumi.Input<string>;
    defaultWindowHeight?: pulumi.Input<number>;
    defaultWindowWidth?: pulumi.Input<number>;
    dhcp6RaLinkaddr?: pulumi.Input<string>;
    dhcpIpOverlap?: pulumi.Input<string>;
    dhcpRaGiaddr?: pulumi.Input<string>;
    displayBookmark?: pulumi.Input<string>;
    displayConnectionTools?: pulumi.Input<string>;
    displayHistory?: pulumi.Input<string>;
    displayStatus?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    dnsSuffix?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    exclusiveRouting?: pulumi.Input<string>;
    focusBookmark?: pulumi.Input<string>;
    forticlientDownload?: pulumi.Input<string>;
    forticlientDownloadMethod?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    heading?: pulumi.Input<string>;
    hideSsoCredential?: pulumi.Input<string>;
    hostCheck?: pulumi.Input<string>;
    hostCheckInterval?: pulumi.Input<number>;
    hostCheckPolicies?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalHostCheckPolicy>[]>;
    ipMode?: pulumi.Input<string>;
    ipPools?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalIpPool>[]>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
    ipv6ExclusiveRouting?: pulumi.Input<string>;
    ipv6Pools?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalIpv6Pool>[]>;
    ipv6ServiceRestriction?: pulumi.Input<string>;
    ipv6SplitTunneling?: pulumi.Input<string>;
    ipv6SplitTunnelingRoutingAddresses?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalIpv6SplitTunnelingRoutingAddress>[]>;
    ipv6SplitTunnelingRoutingNegate?: pulumi.Input<string>;
    ipv6TunnelMode?: pulumi.Input<string>;
    ipv6WinsServer1?: pulumi.Input<string>;
    ipv6WinsServer2?: pulumi.Input<string>;
    keepAlive?: pulumi.Input<string>;
    landingPage?: pulumi.Input<inputs.VpnsslwebPortalLandingPage>;
    landingPageMode?: pulumi.Input<string>;
    limitUserLogins?: pulumi.Input<string>;
    macAddrAction?: pulumi.Input<string>;
    macAddrCheck?: pulumi.Input<string>;
    macAddrCheckRules?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalMacAddrCheckRule>[]>;
    macosForticlientDownloadUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    osCheck?: pulumi.Input<string>;
    osCheckLists?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalOsCheckList>[]>;
    preferIpv6Dns?: pulumi.Input<string>;
    redirUrl?: pulumi.Input<string>;
    rewriteIpUriUi?: pulumi.Input<string>;
    savePassword?: pulumi.Input<string>;
    serviceRestriction?: pulumi.Input<string>;
    skipCheckForBrowser?: pulumi.Input<string>;
    skipCheckForUnsupportedOs?: pulumi.Input<string>;
    smbMaxVersion?: pulumi.Input<string>;
    smbMinVersion?: pulumi.Input<string>;
    smbNtlmv1Auth?: pulumi.Input<string>;
    smbv1?: pulumi.Input<string>;
    splitDns?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalSplitDn>[]>;
    splitTunneling?: pulumi.Input<string>;
    splitTunnelingRoutingAddresses?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalSplitTunnelingRoutingAddress>[]>;
    splitTunnelingRoutingNegate?: pulumi.Input<string>;
    theme?: pulumi.Input<string>;
    transformBackwardSlashes?: pulumi.Input<string>;
    tunnelMode?: pulumi.Input<string>;
    useSdwan?: pulumi.Input<string>;
    userBookmark?: pulumi.Input<string>;
    userGroupBookmark?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    webMode?: pulumi.Input<string>;
    windowsForticlientDownloadUrl?: pulumi.Input<string>;
    winsServer1?: pulumi.Input<string>;
    winsServer2?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnsslwebPortal resource.
 */
export interface VpnsslwebPortalArgs {
    allowUserAccess?: pulumi.Input<string>;
    autoConnect?: pulumi.Input<string>;
    bookmarkGroups?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalBookmarkGroup>[]>;
    clientSrcRange?: pulumi.Input<string>;
    clipboard?: pulumi.Input<string>;
    customLang?: pulumi.Input<string>;
    customizeForticlientDownloadUrl?: pulumi.Input<string>;
    defaultProtocol?: pulumi.Input<string>;
    defaultWindowHeight?: pulumi.Input<number>;
    defaultWindowWidth?: pulumi.Input<number>;
    dhcp6RaLinkaddr?: pulumi.Input<string>;
    dhcpIpOverlap?: pulumi.Input<string>;
    dhcpRaGiaddr?: pulumi.Input<string>;
    displayBookmark?: pulumi.Input<string>;
    displayConnectionTools?: pulumi.Input<string>;
    displayHistory?: pulumi.Input<string>;
    displayStatus?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    dnsSuffix?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    exclusiveRouting?: pulumi.Input<string>;
    focusBookmark?: pulumi.Input<string>;
    forticlientDownload?: pulumi.Input<string>;
    forticlientDownloadMethod?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    heading?: pulumi.Input<string>;
    hideSsoCredential?: pulumi.Input<string>;
    hostCheck?: pulumi.Input<string>;
    hostCheckInterval?: pulumi.Input<number>;
    hostCheckPolicies?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalHostCheckPolicy>[]>;
    ipMode?: pulumi.Input<string>;
    ipPools?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalIpPool>[]>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
    ipv6ExclusiveRouting?: pulumi.Input<string>;
    ipv6Pools?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalIpv6Pool>[]>;
    ipv6ServiceRestriction?: pulumi.Input<string>;
    ipv6SplitTunneling?: pulumi.Input<string>;
    ipv6SplitTunnelingRoutingAddresses?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalIpv6SplitTunnelingRoutingAddress>[]>;
    ipv6SplitTunnelingRoutingNegate?: pulumi.Input<string>;
    ipv6TunnelMode?: pulumi.Input<string>;
    ipv6WinsServer1?: pulumi.Input<string>;
    ipv6WinsServer2?: pulumi.Input<string>;
    keepAlive?: pulumi.Input<string>;
    landingPage?: pulumi.Input<inputs.VpnsslwebPortalLandingPage>;
    landingPageMode?: pulumi.Input<string>;
    limitUserLogins?: pulumi.Input<string>;
    macAddrAction?: pulumi.Input<string>;
    macAddrCheck?: pulumi.Input<string>;
    macAddrCheckRules?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalMacAddrCheckRule>[]>;
    macosForticlientDownloadUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    osCheck?: pulumi.Input<string>;
    osCheckLists?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalOsCheckList>[]>;
    preferIpv6Dns?: pulumi.Input<string>;
    redirUrl?: pulumi.Input<string>;
    rewriteIpUriUi?: pulumi.Input<string>;
    savePassword?: pulumi.Input<string>;
    serviceRestriction?: pulumi.Input<string>;
    skipCheckForBrowser?: pulumi.Input<string>;
    skipCheckForUnsupportedOs?: pulumi.Input<string>;
    smbMaxVersion?: pulumi.Input<string>;
    smbMinVersion?: pulumi.Input<string>;
    smbNtlmv1Auth?: pulumi.Input<string>;
    smbv1?: pulumi.Input<string>;
    splitDns?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalSplitDn>[]>;
    splitTunneling?: pulumi.Input<string>;
    splitTunnelingRoutingAddresses?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalSplitTunnelingRoutingAddress>[]>;
    splitTunnelingRoutingNegate?: pulumi.Input<string>;
    theme?: pulumi.Input<string>;
    transformBackwardSlashes?: pulumi.Input<string>;
    tunnelMode?: pulumi.Input<string>;
    useSdwan?: pulumi.Input<string>;
    userBookmark?: pulumi.Input<string>;
    userGroupBookmark?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    webMode?: pulumi.Input<string>;
    windowsForticlientDownloadUrl?: pulumi.Input<string>;
    winsServer1?: pulumi.Input<string>;
    winsServer2?: pulumi.Input<string>;
}
