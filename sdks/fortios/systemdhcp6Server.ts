// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Systemdhcp6Server extends pulumi.CustomResource {
    /**
     * Get an existing Systemdhcp6Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Systemdhcp6ServerState, opts?: pulumi.CustomResourceOptions): Systemdhcp6Server {
        return new Systemdhcp6Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemdhcp6Server:Systemdhcp6Server';

    /**
     * Returns true if the given object is an instance of Systemdhcp6Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Systemdhcp6Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Systemdhcp6Server.__pulumiType;
    }

    public readonly delegatedPrefixIaid!: pulumi.Output<number>;
    public readonly dnsSearchList!: pulumi.Output<string>;
    public readonly dnsServer1!: pulumi.Output<string>;
    public readonly dnsServer2!: pulumi.Output<string>;
    public readonly dnsServer3!: pulumi.Output<string>;
    public readonly dnsServer4!: pulumi.Output<string>;
    public readonly dnsService!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fosid!: pulumi.Output<number>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly interface!: pulumi.Output<string>;
    public readonly ipMode!: pulumi.Output<string>;
    public readonly ipRanges!: pulumi.Output<outputs.Systemdhcp6ServerIpRange[] | undefined>;
    public readonly leaseTime!: pulumi.Output<number>;
    public readonly option1!: pulumi.Output<string>;
    public readonly option2!: pulumi.Output<string>;
    public readonly option3!: pulumi.Output<string>;
    public readonly prefixMode!: pulumi.Output<string>;
    public readonly prefixRanges!: pulumi.Output<outputs.Systemdhcp6ServerPrefixRange[] | undefined>;
    public readonly rapidCommit!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly subnet!: pulumi.Output<string>;
    public readonly upstreamInterface!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a Systemdhcp6Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Systemdhcp6ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Systemdhcp6ServerArgs | Systemdhcp6ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Systemdhcp6ServerState | undefined;
            resourceInputs["delegatedPrefixIaid"] = state ? state.delegatedPrefixIaid : undefined;
            resourceInputs["dnsSearchList"] = state ? state.dnsSearchList : undefined;
            resourceInputs["dnsServer1"] = state ? state.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = state ? state.dnsServer2 : undefined;
            resourceInputs["dnsServer3"] = state ? state.dnsServer3 : undefined;
            resourceInputs["dnsServer4"] = state ? state.dnsServer4 : undefined;
            resourceInputs["dnsService"] = state ? state.dnsService : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipMode"] = state ? state.ipMode : undefined;
            resourceInputs["ipRanges"] = state ? state.ipRanges : undefined;
            resourceInputs["leaseTime"] = state ? state.leaseTime : undefined;
            resourceInputs["option1"] = state ? state.option1 : undefined;
            resourceInputs["option2"] = state ? state.option2 : undefined;
            resourceInputs["option3"] = state ? state.option3 : undefined;
            resourceInputs["prefixMode"] = state ? state.prefixMode : undefined;
            resourceInputs["prefixRanges"] = state ? state.prefixRanges : undefined;
            resourceInputs["rapidCommit"] = state ? state.rapidCommit : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["upstreamInterface"] = state ? state.upstreamInterface : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as Systemdhcp6ServerArgs | undefined;
            if ((!args || args.fosid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fosid'");
            }
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            resourceInputs["delegatedPrefixIaid"] = args ? args.delegatedPrefixIaid : undefined;
            resourceInputs["dnsSearchList"] = args ? args.dnsSearchList : undefined;
            resourceInputs["dnsServer1"] = args ? args.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = args ? args.dnsServer2 : undefined;
            resourceInputs["dnsServer3"] = args ? args.dnsServer3 : undefined;
            resourceInputs["dnsServer4"] = args ? args.dnsServer4 : undefined;
            resourceInputs["dnsService"] = args ? args.dnsService : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipMode"] = args ? args.ipMode : undefined;
            resourceInputs["ipRanges"] = args ? args.ipRanges : undefined;
            resourceInputs["leaseTime"] = args ? args.leaseTime : undefined;
            resourceInputs["option1"] = args ? args.option1 : undefined;
            resourceInputs["option2"] = args ? args.option2 : undefined;
            resourceInputs["option3"] = args ? args.option3 : undefined;
            resourceInputs["prefixMode"] = args ? args.prefixMode : undefined;
            resourceInputs["prefixRanges"] = args ? args.prefixRanges : undefined;
            resourceInputs["rapidCommit"] = args ? args.rapidCommit : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["upstreamInterface"] = args ? args.upstreamInterface : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Systemdhcp6Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Systemdhcp6Server resources.
 */
export interface Systemdhcp6ServerState {
    delegatedPrefixIaid?: pulumi.Input<number>;
    dnsSearchList?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    dnsServer3?: pulumi.Input<string>;
    dnsServer4?: pulumi.Input<string>;
    dnsService?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    ipMode?: pulumi.Input<string>;
    ipRanges?: pulumi.Input<pulumi.Input<inputs.Systemdhcp6ServerIpRange>[]>;
    leaseTime?: pulumi.Input<number>;
    option1?: pulumi.Input<string>;
    option2?: pulumi.Input<string>;
    option3?: pulumi.Input<string>;
    prefixMode?: pulumi.Input<string>;
    prefixRanges?: pulumi.Input<pulumi.Input<inputs.Systemdhcp6ServerPrefixRange>[]>;
    rapidCommit?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    upstreamInterface?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Systemdhcp6Server resource.
 */
export interface Systemdhcp6ServerArgs {
    delegatedPrefixIaid?: pulumi.Input<number>;
    dnsSearchList?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    dnsServer3?: pulumi.Input<string>;
    dnsServer4?: pulumi.Input<string>;
    dnsService?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fosid: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    ipMode?: pulumi.Input<string>;
    ipRanges?: pulumi.Input<pulumi.Input<inputs.Systemdhcp6ServerIpRange>[]>;
    leaseTime?: pulumi.Input<number>;
    option1?: pulumi.Input<string>;
    option2?: pulumi.Input<string>;
    option3?: pulumi.Input<string>;
    prefixMode?: pulumi.Input<string>;
    prefixRanges?: pulumi.Input<pulumi.Input<inputs.Systemdhcp6ServerPrefixRange>[]>;
    rapidCommit?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subnet: pulumi.Input<string>;
    upstreamInterface?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
