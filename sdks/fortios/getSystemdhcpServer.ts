// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSystemdhcpServer(args: GetSystemdhcpServerArgs, opts?: pulumi.InvokeOptions): Promise<GetSystemdhcpServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:index/getSystemdhcpServer:getSystemdhcpServer", {
        "fosid": args.fosid,
        "id": args.id,
        "vdomparam": args.vdomparam,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSystemdhcpServer.
 */
export interface GetSystemdhcpServerArgs {
    fosid: number;
    id?: string;
    vdomparam?: string;
}

/**
 * A collection of values returned by getSystemdhcpServer.
 */
export interface GetSystemdhcpServerResult {
    readonly autoConfiguration: string;
    readonly autoManagedStatus: string;
    readonly conflictedIpTimeout: number;
    readonly ddnsAuth: string;
    readonly ddnsKey: string;
    readonly ddnsKeyname: string;
    readonly ddnsServerIp: string;
    readonly ddnsTtl: number;
    readonly ddnsUpdate: string;
    readonly ddnsUpdateOverride: string;
    readonly ddnsZone: string;
    readonly defaultGateway: string;
    readonly dhcpSettingsFromFortiipam: string;
    readonly dnsServer1: string;
    readonly dnsServer2: string;
    readonly dnsServer3: string;
    readonly dnsServer4: string;
    readonly dnsService: string;
    readonly domain: string;
    readonly excludeRanges: outputs.GetSystemdhcpServerExcludeRange[];
    readonly filename: string;
    readonly forticlientOnNetStatus: string;
    readonly fosid: number;
    readonly id: string;
    readonly interface: string;
    readonly ipMode: string;
    readonly ipRanges: outputs.GetSystemdhcpServerIpRange[];
    readonly ipsecLeaseHold: number;
    readonly leaseTime: number;
    readonly macAclDefaultAction: string;
    readonly netmask: string;
    readonly nextServer: string;
    readonly ntpServer1: string;
    readonly ntpServer2: string;
    readonly ntpServer3: string;
    readonly ntpService: string;
    readonly options: outputs.GetSystemdhcpServerOption[];
    readonly relayAgent: string;
    readonly reservedAddresses: outputs.GetSystemdhcpServerReservedAddress[];
    readonly serverType: string;
    readonly sharedSubnet: string;
    readonly status: string;
    readonly tftpServers: outputs.GetSystemdhcpServerTftpServer[];
    readonly timezone: string;
    readonly timezoneOption: string;
    readonly vciMatch: string;
    readonly vciStrings: outputs.GetSystemdhcpServerVciString[];
    readonly vdomparam?: string;
    readonly wifiAc1: string;
    readonly wifiAc2: string;
    readonly wifiAc3: string;
    readonly wifiAcService: string;
    readonly winsServer1: string;
    readonly winsServer2: string;
}
export function getSystemdhcpServerOutput(args: GetSystemdhcpServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSystemdhcpServerResult> {
    return pulumi.output(args).apply((a: any) => getSystemdhcpServer(a, opts))
}

/**
 * A collection of arguments for invoking getSystemdhcpServer.
 */
export interface GetSystemdhcpServerOutputArgs {
    fosid: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
