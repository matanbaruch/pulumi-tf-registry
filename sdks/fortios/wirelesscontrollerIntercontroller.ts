// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WirelesscontrollerIntercontroller extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerIntercontroller resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerIntercontrollerState, opts?: pulumi.CustomResourceOptions): WirelesscontrollerIntercontroller {
        return new WirelesscontrollerIntercontroller(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/wirelesscontrollerIntercontroller:WirelesscontrollerIntercontroller';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerIntercontroller.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerIntercontroller {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerIntercontroller.__pulumiType;
    }

    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fastFailoverMax!: pulumi.Output<number>;
    public readonly fastFailoverWait!: pulumi.Output<number>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly interControllerKey!: pulumi.Output<string | undefined>;
    public readonly interControllerMode!: pulumi.Output<string>;
    public readonly interControllerPeers!: pulumi.Output<outputs.WirelesscontrollerIntercontrollerInterControllerPeer[] | undefined>;
    public readonly interControllerPri!: pulumi.Output<string>;
    public readonly l3Roaming!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a WirelesscontrollerIntercontroller resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelesscontrollerIntercontrollerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerIntercontrollerArgs | WirelesscontrollerIntercontrollerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerIntercontrollerState | undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fastFailoverMax"] = state ? state.fastFailoverMax : undefined;
            resourceInputs["fastFailoverWait"] = state ? state.fastFailoverWait : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["interControllerKey"] = state ? state.interControllerKey : undefined;
            resourceInputs["interControllerMode"] = state ? state.interControllerMode : undefined;
            resourceInputs["interControllerPeers"] = state ? state.interControllerPeers : undefined;
            resourceInputs["interControllerPri"] = state ? state.interControllerPri : undefined;
            resourceInputs["l3Roaming"] = state ? state.l3Roaming : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerIntercontrollerArgs | undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fastFailoverMax"] = args ? args.fastFailoverMax : undefined;
            resourceInputs["fastFailoverWait"] = args ? args.fastFailoverWait : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["interControllerKey"] = args?.interControllerKey ? pulumi.secret(args.interControllerKey) : undefined;
            resourceInputs["interControllerMode"] = args ? args.interControllerMode : undefined;
            resourceInputs["interControllerPeers"] = args ? args.interControllerPeers : undefined;
            resourceInputs["interControllerPri"] = args ? args.interControllerPri : undefined;
            resourceInputs["l3Roaming"] = args ? args.l3Roaming : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["interControllerKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WirelesscontrollerIntercontroller.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerIntercontroller resources.
 */
export interface WirelesscontrollerIntercontrollerState {
    dynamicSortSubtable?: pulumi.Input<string>;
    fastFailoverMax?: pulumi.Input<number>;
    fastFailoverWait?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    interControllerKey?: pulumi.Input<string>;
    interControllerMode?: pulumi.Input<string>;
    interControllerPeers?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerIntercontrollerInterControllerPeer>[]>;
    interControllerPri?: pulumi.Input<string>;
    l3Roaming?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerIntercontroller resource.
 */
export interface WirelesscontrollerIntercontrollerArgs {
    dynamicSortSubtable?: pulumi.Input<string>;
    fastFailoverMax?: pulumi.Input<number>;
    fastFailoverWait?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    interControllerKey?: pulumi.Input<string>;
    interControllerMode?: pulumi.Input<string>;
    interControllerPeers?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerIntercontrollerInterControllerPeer>[]>;
    interControllerPri?: pulumi.Input<string>;
    l3Roaming?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
