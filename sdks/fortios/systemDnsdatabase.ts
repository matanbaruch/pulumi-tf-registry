// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemDnsdatabase extends pulumi.CustomResource {
    /**
     * Get an existing SystemDnsdatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemDnsdatabaseState, opts?: pulumi.CustomResourceOptions): SystemDnsdatabase {
        return new SystemDnsdatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemDnsdatabase:SystemDnsdatabase';

    /**
     * Returns true if the given object is an instance of SystemDnsdatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemDnsdatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemDnsdatabase.__pulumiType;
    }

    public readonly allowTransfer!: pulumi.Output<string>;
    public readonly authoritative!: pulumi.Output<string>;
    public readonly contact!: pulumi.Output<string>;
    public readonly dnsEntries!: pulumi.Output<outputs.SystemDnsdatabaseDnsEntry[] | undefined>;
    public readonly domain!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly forwarder!: pulumi.Output<string>;
    public readonly forwarder6!: pulumi.Output<string>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly ipMaster!: pulumi.Output<string>;
    public readonly ipPrimary!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly primaryName!: pulumi.Output<string>;
    public readonly rrMax!: pulumi.Output<number>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly sourceIp6!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<number>;
    public readonly type!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly view!: pulumi.Output<string>;

    /**
     * Create a SystemDnsdatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemDnsdatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemDnsdatabaseArgs | SystemDnsdatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemDnsdatabaseState | undefined;
            resourceInputs["allowTransfer"] = state ? state.allowTransfer : undefined;
            resourceInputs["authoritative"] = state ? state.authoritative : undefined;
            resourceInputs["contact"] = state ? state.contact : undefined;
            resourceInputs["dnsEntries"] = state ? state.dnsEntries : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["forwarder"] = state ? state.forwarder : undefined;
            resourceInputs["forwarder6"] = state ? state.forwarder6 : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["ipMaster"] = state ? state.ipMaster : undefined;
            resourceInputs["ipPrimary"] = state ? state.ipPrimary : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryName"] = state ? state.primaryName : undefined;
            resourceInputs["rrMax"] = state ? state.rrMax : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sourceIp6"] = state ? state.sourceIp6 : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["view"] = state ? state.view : undefined;
        } else {
            const args = argsOrState as SystemDnsdatabaseArgs | undefined;
            if ((!args || args.authoritative === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authoritative'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.view === undefined) && !opts.urn) {
                throw new Error("Missing required property 'view'");
            }
            resourceInputs["allowTransfer"] = args ? args.allowTransfer : undefined;
            resourceInputs["authoritative"] = args ? args.authoritative : undefined;
            resourceInputs["contact"] = args ? args.contact : undefined;
            resourceInputs["dnsEntries"] = args ? args.dnsEntries : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["forwarder"] = args ? args.forwarder : undefined;
            resourceInputs["forwarder6"] = args ? args.forwarder6 : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["ipMaster"] = args ? args.ipMaster : undefined;
            resourceInputs["ipPrimary"] = args ? args.ipPrimary : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryName"] = args ? args.primaryName : undefined;
            resourceInputs["rrMax"] = args ? args.rrMax : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sourceIp6"] = args ? args.sourceIp6 : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["view"] = args ? args.view : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemDnsdatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemDnsdatabase resources.
 */
export interface SystemDnsdatabaseState {
    allowTransfer?: pulumi.Input<string>;
    authoritative?: pulumi.Input<string>;
    contact?: pulumi.Input<string>;
    dnsEntries?: pulumi.Input<pulumi.Input<inputs.SystemDnsdatabaseDnsEntry>[]>;
    domain?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    forwarder?: pulumi.Input<string>;
    forwarder6?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    ipMaster?: pulumi.Input<string>;
    ipPrimary?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    primaryName?: pulumi.Input<string>;
    rrMax?: pulumi.Input<number>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemDnsdatabase resource.
 */
export interface SystemDnsdatabaseArgs {
    allowTransfer?: pulumi.Input<string>;
    authoritative: pulumi.Input<string>;
    contact?: pulumi.Input<string>;
    dnsEntries?: pulumi.Input<pulumi.Input<inputs.SystemDnsdatabaseDnsEntry>[]>;
    domain: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    forwarder?: pulumi.Input<string>;
    forwarder6?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    ipMaster?: pulumi.Input<string>;
    ipPrimary?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    primaryName?: pulumi.Input<string>;
    rrMax?: pulumi.Input<number>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    ttl: pulumi.Input<number>;
    type: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    view: pulumi.Input<string>;
}
