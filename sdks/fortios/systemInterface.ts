// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemInterface extends pulumi.CustomResource {
    /**
     * Get an existing SystemInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemInterfaceState, opts?: pulumi.CustomResourceOptions): SystemInterface {
        return new SystemInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemInterface:SystemInterface';

    /**
     * Returns true if the given object is an instance of SystemInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemInterface.__pulumiType;
    }

    public readonly acName!: pulumi.Output<string>;
    public readonly aggregate!: pulumi.Output<string>;
    public readonly aggregateType!: pulumi.Output<string>;
    public readonly algorithm!: pulumi.Output<string>;
    public readonly alias!: pulumi.Output<string>;
    public readonly allowaccess!: pulumi.Output<string>;
    public readonly apDiscover!: pulumi.Output<string>;
    public readonly arpforward!: pulumi.Output<string>;
    public readonly authCert!: pulumi.Output<string>;
    public readonly authPortalAddr!: pulumi.Output<string>;
    public readonly authType!: pulumi.Output<string>;
    public readonly autoAuthExtensionDevice!: pulumi.Output<string>;
    public readonly autogenerated!: pulumi.Output<string>;
    public readonly bandwidthMeasureTime!: pulumi.Output<number>;
    public readonly bfd!: pulumi.Output<string>;
    public readonly bfdDesiredMinTx!: pulumi.Output<number>;
    public readonly bfdDetectMult!: pulumi.Output<number>;
    public readonly bfdRequiredMinRx!: pulumi.Output<number>;
    public readonly broadcastForticlientDiscovery!: pulumi.Output<string>;
    public readonly broadcastForward!: pulumi.Output<string>;
    public readonly captivePortal!: pulumi.Output<number>;
    public readonly cliConnStatus!: pulumi.Output<number>;
    public readonly clientOptions!: pulumi.Output<outputs.SystemInterfaceClientOption[] | undefined>;
    public readonly color!: pulumi.Output<number>;
    public readonly dedicatedTo!: pulumi.Output<string>;
    public readonly defaultPurdueLevel!: pulumi.Output<string>;
    public readonly defaultgw!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly detectedPeerMtu!: pulumi.Output<number>;
    public readonly detectprotocol!: pulumi.Output<string>;
    public readonly detectserver!: pulumi.Output<string>;
    public readonly deviceAccessList!: pulumi.Output<string>;
    public readonly deviceIdentification!: pulumi.Output<string>;
    public readonly deviceIdentificationActiveScan!: pulumi.Output<string>;
    public readonly deviceNetscan!: pulumi.Output<string>;
    public readonly deviceUserIdentification!: pulumi.Output<string>;
    public readonly devindex!: pulumi.Output<number>;
    public readonly dhcpBroadcastFlag!: pulumi.Output<string>;
    public readonly dhcpClasslessRouteAddition!: pulumi.Output<string>;
    public readonly dhcpClientIdentifier!: pulumi.Output<string>;
    public readonly dhcpRelayAgentOption!: pulumi.Output<string>;
    public readonly dhcpRelayAllowNoEndOption!: pulumi.Output<string>;
    public readonly dhcpRelayCircuitId!: pulumi.Output<string>;
    public readonly dhcpRelayInterface!: pulumi.Output<string>;
    public readonly dhcpRelayInterfaceSelectMethod!: pulumi.Output<string>;
    public readonly dhcpRelayIp!: pulumi.Output<string>;
    public readonly dhcpRelayLinkSelection!: pulumi.Output<string>;
    public readonly dhcpRelayRequestAllServer!: pulumi.Output<string>;
    public readonly dhcpRelayService!: pulumi.Output<string>;
    public readonly dhcpRelaySourceIp!: pulumi.Output<string>;
    public readonly dhcpRelayType!: pulumi.Output<string>;
    public readonly dhcpRenewTime!: pulumi.Output<number>;
    public readonly dhcpSmartRelay!: pulumi.Output<string>;
    public readonly dhcpSnoopingServerLists!: pulumi.Output<outputs.SystemInterfaceDhcpSnoopingServerList[] | undefined>;
    public readonly discRetryTimeout!: pulumi.Output<number>;
    public readonly disconnectThreshold!: pulumi.Output<number>;
    public readonly distance!: pulumi.Output<number>;
    public readonly dnsServerOverride!: pulumi.Output<string>;
    public readonly dnsServerProtocol!: pulumi.Output<string>;
    public readonly dropFragment!: pulumi.Output<string>;
    public readonly dropOverlappedFragment!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly eapCaCert!: pulumi.Output<string>;
    public readonly eapIdentity!: pulumi.Output<string>;
    public readonly eapMethod!: pulumi.Output<string>;
    public readonly eapPassword!: pulumi.Output<string | undefined>;
    public readonly eapSupplicant!: pulumi.Output<string>;
    public readonly eapUserCert!: pulumi.Output<string>;
    public readonly egressShapingProfile!: pulumi.Output<string>;
    public readonly endpointCompliance!: pulumi.Output<string>;
    public readonly estimatedDownstreamBandwidth!: pulumi.Output<number>;
    public readonly estimatedUpstreamBandwidth!: pulumi.Output<number>;
    public readonly explicitFtpProxy!: pulumi.Output<string>;
    public readonly explicitWebProxy!: pulumi.Output<string>;
    public readonly external!: pulumi.Output<string>;
    public readonly failActionOnExtender!: pulumi.Output<string>;
    public readonly failAlertInterfaces!: pulumi.Output<outputs.SystemInterfaceFailAlertInterface[] | undefined>;
    public readonly failAlertMethod!: pulumi.Output<string>;
    public readonly failDetect!: pulumi.Output<string>;
    public readonly failDetectOption!: pulumi.Output<string>;
    public readonly fortiheartbeat!: pulumi.Output<string>;
    public readonly fortilink!: pulumi.Output<string>;
    public readonly fortilinkBackupLink!: pulumi.Output<number>;
    public readonly fortilinkNeighborDetect!: pulumi.Output<string>;
    public readonly fortilinkSplitInterface!: pulumi.Output<string>;
    public readonly fortilinkStacking!: pulumi.Output<string>;
    public readonly forwardDomain!: pulumi.Output<number>;
    public readonly forwardErrorCorrection!: pulumi.Output<string>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly gwdetect!: pulumi.Output<string>;
    public readonly haPriority!: pulumi.Output<number>;
    public readonly icmpAcceptRedirect!: pulumi.Output<string>;
    public readonly icmpSendRedirect!: pulumi.Output<string>;
    public readonly identAccept!: pulumi.Output<string>;
    public readonly idleTimeout!: pulumi.Output<number>;
    public readonly ikeSamlServer!: pulumi.Output<string>;
    public readonly inbandwidth!: pulumi.Output<number>;
    public readonly ingressShapingProfile!: pulumi.Output<string>;
    public readonly ingressSpilloverThreshold!: pulumi.Output<number>;
    public readonly interface!: pulumi.Output<string>;
    public readonly internal!: pulumi.Output<number>;
    public readonly ip!: pulumi.Output<string>;
    public readonly ipManagedByFortiipam!: pulumi.Output<string>;
    public readonly ipmac!: pulumi.Output<string>;
    public readonly ipsSnifferMode!: pulumi.Output<string>;
    public readonly ipunnumbered!: pulumi.Output<string>;
    public readonly ipv6!: pulumi.Output<outputs.SystemInterfaceIpv6 | undefined>;
    public readonly l2forward!: pulumi.Output<string>;
    public readonly lacpHaSecondary!: pulumi.Output<string>;
    public readonly lacpHaSlave!: pulumi.Output<string>;
    public readonly lacpMode!: pulumi.Output<string>;
    public readonly lacpSpeed!: pulumi.Output<string>;
    public readonly lcpEchoInterval!: pulumi.Output<number>;
    public readonly lcpMaxEchoFails!: pulumi.Output<number>;
    public readonly linkUpDelay!: pulumi.Output<number>;
    public readonly lldpNetworkPolicy!: pulumi.Output<string>;
    public readonly lldpReception!: pulumi.Output<string>;
    public readonly lldpTransmission!: pulumi.Output<string>;
    public readonly macaddr!: pulumi.Output<string>;
    public readonly managedDevices!: pulumi.Output<outputs.SystemInterfaceManagedDevice[] | undefined>;
    public readonly managedSubnetworkSize!: pulumi.Output<string>;
    public readonly managementIp!: pulumi.Output<string>;
    public readonly measuredDownstreamBandwidth!: pulumi.Output<number>;
    public readonly measuredUpstreamBandwidth!: pulumi.Output<number>;
    public readonly mediatype!: pulumi.Output<string>;
    public readonly members!: pulumi.Output<outputs.SystemInterfaceMember[] | undefined>;
    public readonly minLinks!: pulumi.Output<number>;
    public readonly minLinksDown!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly monitorBandwidth!: pulumi.Output<string>;
    public readonly mtu!: pulumi.Output<number>;
    public readonly mtuOverride!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ndiscforward!: pulumi.Output<string>;
    public readonly netbiosForward!: pulumi.Output<string>;
    public readonly netflowSampler!: pulumi.Output<string>;
    public readonly outbandwidth!: pulumi.Output<number>;
    public readonly padtRetryTimeout!: pulumi.Output<number>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly pingServStatus!: pulumi.Output<number>;
    public readonly pollingInterval!: pulumi.Output<number>;
    public readonly pppoeUnnumberedNegotiate!: pulumi.Output<string>;
    public readonly pptpAuthType!: pulumi.Output<string>;
    public readonly pptpClient!: pulumi.Output<string>;
    public readonly pptpPassword!: pulumi.Output<string | undefined>;
    public readonly pptpServerIp!: pulumi.Output<string>;
    public readonly pptpTimeout!: pulumi.Output<number>;
    public readonly pptpUser!: pulumi.Output<string>;
    public readonly preserveSessionRoute!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public readonly priorityOverride!: pulumi.Output<string>;
    public readonly proxyCaptivePortal!: pulumi.Output<string>;
    public readonly reachableTime!: pulumi.Output<number>;
    public readonly redundantInterface!: pulumi.Output<string>;
    public readonly remoteIp!: pulumi.Output<string>;
    public readonly replacemsgOverrideGroup!: pulumi.Output<string>;
    public readonly ringRx!: pulumi.Output<number>;
    public readonly ringTx!: pulumi.Output<number>;
    public readonly role!: pulumi.Output<string>;
    public readonly sampleDirection!: pulumi.Output<string>;
    public readonly sampleRate!: pulumi.Output<number>;
    public readonly scanBotnetConnections!: pulumi.Output<string>;
    public readonly secondaryIp!: pulumi.Output<string>;
    public readonly secondaryips!: pulumi.Output<outputs.SystemInterfaceSecondaryip[] | undefined>;
    public readonly securityExemptList!: pulumi.Output<string>;
    public readonly securityExternalLogout!: pulumi.Output<string>;
    public readonly securityExternalWeb!: pulumi.Output<string>;
    public readonly securityGroups!: pulumi.Output<outputs.SystemInterfaceSecurityGroup[] | undefined>;
    public readonly securityMacAuthBypass!: pulumi.Output<string>;
    public readonly securityMode!: pulumi.Output<string>;
    public readonly securityRedirectUrl!: pulumi.Output<string>;
    public readonly serviceName!: pulumi.Output<string>;
    public readonly sflowSampler!: pulumi.Output<string>;
    public readonly snmpIndex!: pulumi.Output<number>;
    public readonly speed!: pulumi.Output<string>;
    public readonly spilloverThreshold!: pulumi.Output<number>;
    public readonly srcCheck!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly stp!: pulumi.Output<string>;
    public readonly stpHaSecondary!: pulumi.Output<string>;
    public readonly stpforward!: pulumi.Output<string>;
    public readonly stpforwardMode!: pulumi.Output<string>;
    public readonly subst!: pulumi.Output<string>;
    public readonly substituteDstMac!: pulumi.Output<string>;
    public readonly swcFirstCreate!: pulumi.Output<number>;
    public readonly swcVlan!: pulumi.Output<number>;
    public readonly switch!: pulumi.Output<string>;
    public readonly switchControllerAccessVlan!: pulumi.Output<string>;
    public readonly switchControllerArpInspection!: pulumi.Output<string>;
    public readonly switchControllerDhcpSnooping!: pulumi.Output<string>;
    public readonly switchControllerDhcpSnoopingOption82!: pulumi.Output<string>;
    public readonly switchControllerDhcpSnoopingVerifyMac!: pulumi.Output<string>;
    public readonly switchControllerDynamic!: pulumi.Output<string>;
    public readonly switchControllerFeature!: pulumi.Output<string>;
    public readonly switchControllerIgmpSnooping!: pulumi.Output<string>;
    public readonly switchControllerIgmpSnoopingFastLeave!: pulumi.Output<string>;
    public readonly switchControllerIgmpSnoopingProxy!: pulumi.Output<string>;
    public readonly switchControllerIotScanning!: pulumi.Output<string>;
    public readonly switchControllerLearningLimit!: pulumi.Output<number>;
    public readonly switchControllerMgmtVlan!: pulumi.Output<number>;
    public readonly switchControllerNac!: pulumi.Output<string>;
    public readonly switchControllerNetflowCollect!: pulumi.Output<string>;
    public readonly switchControllerOffload!: pulumi.Output<string>;
    public readonly switchControllerOffloadGw!: pulumi.Output<string>;
    public readonly switchControllerOffloadIp!: pulumi.Output<string>;
    public readonly switchControllerRspanMode!: pulumi.Output<string>;
    public readonly switchControllerSourceIp!: pulumi.Output<string>;
    public readonly switchControllerTrafficPolicy!: pulumi.Output<string>;
    public readonly systemId!: pulumi.Output<string>;
    public readonly systemIdType!: pulumi.Output<string>;
    public readonly taggings!: pulumi.Output<outputs.SystemInterfaceTagging[] | undefined>;
    public readonly tcpMss!: pulumi.Output<number>;
    public readonly trunk!: pulumi.Output<string>;
    public readonly trustIp1!: pulumi.Output<string>;
    public readonly trustIp2!: pulumi.Output<string>;
    public readonly trustIp3!: pulumi.Output<string>;
    public readonly trustIp61!: pulumi.Output<string>;
    public readonly trustIp62!: pulumi.Output<string>;
    public readonly trustIp63!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly vindex!: pulumi.Output<number>;
    public readonly vlanProtocol!: pulumi.Output<string>;
    public readonly vlanforward!: pulumi.Output<string>;
    public readonly vlanid!: pulumi.Output<number>;
    public readonly vrf!: pulumi.Output<number>;
    public readonly vrrpVirtualMac!: pulumi.Output<string>;
    public readonly vrrps!: pulumi.Output<outputs.SystemInterfaceVrrp[] | undefined>;
    public readonly wccp!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<number>;
    public readonly winsIp!: pulumi.Output<string>;

    /**
     * Create a SystemInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemInterfaceArgs | SystemInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemInterfaceState | undefined;
            resourceInputs["acName"] = state ? state.acName : undefined;
            resourceInputs["aggregate"] = state ? state.aggregate : undefined;
            resourceInputs["aggregateType"] = state ? state.aggregateType : undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["allowaccess"] = state ? state.allowaccess : undefined;
            resourceInputs["apDiscover"] = state ? state.apDiscover : undefined;
            resourceInputs["arpforward"] = state ? state.arpforward : undefined;
            resourceInputs["authCert"] = state ? state.authCert : undefined;
            resourceInputs["authPortalAddr"] = state ? state.authPortalAddr : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["autoAuthExtensionDevice"] = state ? state.autoAuthExtensionDevice : undefined;
            resourceInputs["autogenerated"] = state ? state.autogenerated : undefined;
            resourceInputs["bandwidthMeasureTime"] = state ? state.bandwidthMeasureTime : undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["bfdDesiredMinTx"] = state ? state.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = state ? state.bfdDetectMult : undefined;
            resourceInputs["bfdRequiredMinRx"] = state ? state.bfdRequiredMinRx : undefined;
            resourceInputs["broadcastForticlientDiscovery"] = state ? state.broadcastForticlientDiscovery : undefined;
            resourceInputs["broadcastForward"] = state ? state.broadcastForward : undefined;
            resourceInputs["captivePortal"] = state ? state.captivePortal : undefined;
            resourceInputs["cliConnStatus"] = state ? state.cliConnStatus : undefined;
            resourceInputs["clientOptions"] = state ? state.clientOptions : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["dedicatedTo"] = state ? state.dedicatedTo : undefined;
            resourceInputs["defaultPurdueLevel"] = state ? state.defaultPurdueLevel : undefined;
            resourceInputs["defaultgw"] = state ? state.defaultgw : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectedPeerMtu"] = state ? state.detectedPeerMtu : undefined;
            resourceInputs["detectprotocol"] = state ? state.detectprotocol : undefined;
            resourceInputs["detectserver"] = state ? state.detectserver : undefined;
            resourceInputs["deviceAccessList"] = state ? state.deviceAccessList : undefined;
            resourceInputs["deviceIdentification"] = state ? state.deviceIdentification : undefined;
            resourceInputs["deviceIdentificationActiveScan"] = state ? state.deviceIdentificationActiveScan : undefined;
            resourceInputs["deviceNetscan"] = state ? state.deviceNetscan : undefined;
            resourceInputs["deviceUserIdentification"] = state ? state.deviceUserIdentification : undefined;
            resourceInputs["devindex"] = state ? state.devindex : undefined;
            resourceInputs["dhcpBroadcastFlag"] = state ? state.dhcpBroadcastFlag : undefined;
            resourceInputs["dhcpClasslessRouteAddition"] = state ? state.dhcpClasslessRouteAddition : undefined;
            resourceInputs["dhcpClientIdentifier"] = state ? state.dhcpClientIdentifier : undefined;
            resourceInputs["dhcpRelayAgentOption"] = state ? state.dhcpRelayAgentOption : undefined;
            resourceInputs["dhcpRelayAllowNoEndOption"] = state ? state.dhcpRelayAllowNoEndOption : undefined;
            resourceInputs["dhcpRelayCircuitId"] = state ? state.dhcpRelayCircuitId : undefined;
            resourceInputs["dhcpRelayInterface"] = state ? state.dhcpRelayInterface : undefined;
            resourceInputs["dhcpRelayInterfaceSelectMethod"] = state ? state.dhcpRelayInterfaceSelectMethod : undefined;
            resourceInputs["dhcpRelayIp"] = state ? state.dhcpRelayIp : undefined;
            resourceInputs["dhcpRelayLinkSelection"] = state ? state.dhcpRelayLinkSelection : undefined;
            resourceInputs["dhcpRelayRequestAllServer"] = state ? state.dhcpRelayRequestAllServer : undefined;
            resourceInputs["dhcpRelayService"] = state ? state.dhcpRelayService : undefined;
            resourceInputs["dhcpRelaySourceIp"] = state ? state.dhcpRelaySourceIp : undefined;
            resourceInputs["dhcpRelayType"] = state ? state.dhcpRelayType : undefined;
            resourceInputs["dhcpRenewTime"] = state ? state.dhcpRenewTime : undefined;
            resourceInputs["dhcpSmartRelay"] = state ? state.dhcpSmartRelay : undefined;
            resourceInputs["dhcpSnoopingServerLists"] = state ? state.dhcpSnoopingServerLists : undefined;
            resourceInputs["discRetryTimeout"] = state ? state.discRetryTimeout : undefined;
            resourceInputs["disconnectThreshold"] = state ? state.disconnectThreshold : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["dnsServerOverride"] = state ? state.dnsServerOverride : undefined;
            resourceInputs["dnsServerProtocol"] = state ? state.dnsServerProtocol : undefined;
            resourceInputs["dropFragment"] = state ? state.dropFragment : undefined;
            resourceInputs["dropOverlappedFragment"] = state ? state.dropOverlappedFragment : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["eapCaCert"] = state ? state.eapCaCert : undefined;
            resourceInputs["eapIdentity"] = state ? state.eapIdentity : undefined;
            resourceInputs["eapMethod"] = state ? state.eapMethod : undefined;
            resourceInputs["eapPassword"] = state ? state.eapPassword : undefined;
            resourceInputs["eapSupplicant"] = state ? state.eapSupplicant : undefined;
            resourceInputs["eapUserCert"] = state ? state.eapUserCert : undefined;
            resourceInputs["egressShapingProfile"] = state ? state.egressShapingProfile : undefined;
            resourceInputs["endpointCompliance"] = state ? state.endpointCompliance : undefined;
            resourceInputs["estimatedDownstreamBandwidth"] = state ? state.estimatedDownstreamBandwidth : undefined;
            resourceInputs["estimatedUpstreamBandwidth"] = state ? state.estimatedUpstreamBandwidth : undefined;
            resourceInputs["explicitFtpProxy"] = state ? state.explicitFtpProxy : undefined;
            resourceInputs["explicitWebProxy"] = state ? state.explicitWebProxy : undefined;
            resourceInputs["external"] = state ? state.external : undefined;
            resourceInputs["failActionOnExtender"] = state ? state.failActionOnExtender : undefined;
            resourceInputs["failAlertInterfaces"] = state ? state.failAlertInterfaces : undefined;
            resourceInputs["failAlertMethod"] = state ? state.failAlertMethod : undefined;
            resourceInputs["failDetect"] = state ? state.failDetect : undefined;
            resourceInputs["failDetectOption"] = state ? state.failDetectOption : undefined;
            resourceInputs["fortiheartbeat"] = state ? state.fortiheartbeat : undefined;
            resourceInputs["fortilink"] = state ? state.fortilink : undefined;
            resourceInputs["fortilinkBackupLink"] = state ? state.fortilinkBackupLink : undefined;
            resourceInputs["fortilinkNeighborDetect"] = state ? state.fortilinkNeighborDetect : undefined;
            resourceInputs["fortilinkSplitInterface"] = state ? state.fortilinkSplitInterface : undefined;
            resourceInputs["fortilinkStacking"] = state ? state.fortilinkStacking : undefined;
            resourceInputs["forwardDomain"] = state ? state.forwardDomain : undefined;
            resourceInputs["forwardErrorCorrection"] = state ? state.forwardErrorCorrection : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["gwdetect"] = state ? state.gwdetect : undefined;
            resourceInputs["haPriority"] = state ? state.haPriority : undefined;
            resourceInputs["icmpAcceptRedirect"] = state ? state.icmpAcceptRedirect : undefined;
            resourceInputs["icmpSendRedirect"] = state ? state.icmpSendRedirect : undefined;
            resourceInputs["identAccept"] = state ? state.identAccept : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["ikeSamlServer"] = state ? state.ikeSamlServer : undefined;
            resourceInputs["inbandwidth"] = state ? state.inbandwidth : undefined;
            resourceInputs["ingressShapingProfile"] = state ? state.ingressShapingProfile : undefined;
            resourceInputs["ingressSpilloverThreshold"] = state ? state.ingressSpilloverThreshold : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["internal"] = state ? state.internal : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipManagedByFortiipam"] = state ? state.ipManagedByFortiipam : undefined;
            resourceInputs["ipmac"] = state ? state.ipmac : undefined;
            resourceInputs["ipsSnifferMode"] = state ? state.ipsSnifferMode : undefined;
            resourceInputs["ipunnumbered"] = state ? state.ipunnumbered : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["l2forward"] = state ? state.l2forward : undefined;
            resourceInputs["lacpHaSecondary"] = state ? state.lacpHaSecondary : undefined;
            resourceInputs["lacpHaSlave"] = state ? state.lacpHaSlave : undefined;
            resourceInputs["lacpMode"] = state ? state.lacpMode : undefined;
            resourceInputs["lacpSpeed"] = state ? state.lacpSpeed : undefined;
            resourceInputs["lcpEchoInterval"] = state ? state.lcpEchoInterval : undefined;
            resourceInputs["lcpMaxEchoFails"] = state ? state.lcpMaxEchoFails : undefined;
            resourceInputs["linkUpDelay"] = state ? state.linkUpDelay : undefined;
            resourceInputs["lldpNetworkPolicy"] = state ? state.lldpNetworkPolicy : undefined;
            resourceInputs["lldpReception"] = state ? state.lldpReception : undefined;
            resourceInputs["lldpTransmission"] = state ? state.lldpTransmission : undefined;
            resourceInputs["macaddr"] = state ? state.macaddr : undefined;
            resourceInputs["managedDevices"] = state ? state.managedDevices : undefined;
            resourceInputs["managedSubnetworkSize"] = state ? state.managedSubnetworkSize : undefined;
            resourceInputs["managementIp"] = state ? state.managementIp : undefined;
            resourceInputs["measuredDownstreamBandwidth"] = state ? state.measuredDownstreamBandwidth : undefined;
            resourceInputs["measuredUpstreamBandwidth"] = state ? state.measuredUpstreamBandwidth : undefined;
            resourceInputs["mediatype"] = state ? state.mediatype : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["minLinks"] = state ? state.minLinks : undefined;
            resourceInputs["minLinksDown"] = state ? state.minLinksDown : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["monitorBandwidth"] = state ? state.monitorBandwidth : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["mtuOverride"] = state ? state.mtuOverride : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ndiscforward"] = state ? state.ndiscforward : undefined;
            resourceInputs["netbiosForward"] = state ? state.netbiosForward : undefined;
            resourceInputs["netflowSampler"] = state ? state.netflowSampler : undefined;
            resourceInputs["outbandwidth"] = state ? state.outbandwidth : undefined;
            resourceInputs["padtRetryTimeout"] = state ? state.padtRetryTimeout : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pingServStatus"] = state ? state.pingServStatus : undefined;
            resourceInputs["pollingInterval"] = state ? state.pollingInterval : undefined;
            resourceInputs["pppoeUnnumberedNegotiate"] = state ? state.pppoeUnnumberedNegotiate : undefined;
            resourceInputs["pptpAuthType"] = state ? state.pptpAuthType : undefined;
            resourceInputs["pptpClient"] = state ? state.pptpClient : undefined;
            resourceInputs["pptpPassword"] = state ? state.pptpPassword : undefined;
            resourceInputs["pptpServerIp"] = state ? state.pptpServerIp : undefined;
            resourceInputs["pptpTimeout"] = state ? state.pptpTimeout : undefined;
            resourceInputs["pptpUser"] = state ? state.pptpUser : undefined;
            resourceInputs["preserveSessionRoute"] = state ? state.preserveSessionRoute : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["priorityOverride"] = state ? state.priorityOverride : undefined;
            resourceInputs["proxyCaptivePortal"] = state ? state.proxyCaptivePortal : undefined;
            resourceInputs["reachableTime"] = state ? state.reachableTime : undefined;
            resourceInputs["redundantInterface"] = state ? state.redundantInterface : undefined;
            resourceInputs["remoteIp"] = state ? state.remoteIp : undefined;
            resourceInputs["replacemsgOverrideGroup"] = state ? state.replacemsgOverrideGroup : undefined;
            resourceInputs["ringRx"] = state ? state.ringRx : undefined;
            resourceInputs["ringTx"] = state ? state.ringTx : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["sampleDirection"] = state ? state.sampleDirection : undefined;
            resourceInputs["sampleRate"] = state ? state.sampleRate : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["secondaryIp"] = state ? state.secondaryIp : undefined;
            resourceInputs["secondaryips"] = state ? state.secondaryips : undefined;
            resourceInputs["securityExemptList"] = state ? state.securityExemptList : undefined;
            resourceInputs["securityExternalLogout"] = state ? state.securityExternalLogout : undefined;
            resourceInputs["securityExternalWeb"] = state ? state.securityExternalWeb : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["securityMacAuthBypass"] = state ? state.securityMacAuthBypass : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["securityRedirectUrl"] = state ? state.securityRedirectUrl : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["sflowSampler"] = state ? state.sflowSampler : undefined;
            resourceInputs["snmpIndex"] = state ? state.snmpIndex : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["spilloverThreshold"] = state ? state.spilloverThreshold : undefined;
            resourceInputs["srcCheck"] = state ? state.srcCheck : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stp"] = state ? state.stp : undefined;
            resourceInputs["stpHaSecondary"] = state ? state.stpHaSecondary : undefined;
            resourceInputs["stpforward"] = state ? state.stpforward : undefined;
            resourceInputs["stpforwardMode"] = state ? state.stpforwardMode : undefined;
            resourceInputs["subst"] = state ? state.subst : undefined;
            resourceInputs["substituteDstMac"] = state ? state.substituteDstMac : undefined;
            resourceInputs["swcFirstCreate"] = state ? state.swcFirstCreate : undefined;
            resourceInputs["swcVlan"] = state ? state.swcVlan : undefined;
            resourceInputs["switch"] = state ? state.switch : undefined;
            resourceInputs["switchControllerAccessVlan"] = state ? state.switchControllerAccessVlan : undefined;
            resourceInputs["switchControllerArpInspection"] = state ? state.switchControllerArpInspection : undefined;
            resourceInputs["switchControllerDhcpSnooping"] = state ? state.switchControllerDhcpSnooping : undefined;
            resourceInputs["switchControllerDhcpSnoopingOption82"] = state ? state.switchControllerDhcpSnoopingOption82 : undefined;
            resourceInputs["switchControllerDhcpSnoopingVerifyMac"] = state ? state.switchControllerDhcpSnoopingVerifyMac : undefined;
            resourceInputs["switchControllerDynamic"] = state ? state.switchControllerDynamic : undefined;
            resourceInputs["switchControllerFeature"] = state ? state.switchControllerFeature : undefined;
            resourceInputs["switchControllerIgmpSnooping"] = state ? state.switchControllerIgmpSnooping : undefined;
            resourceInputs["switchControllerIgmpSnoopingFastLeave"] = state ? state.switchControllerIgmpSnoopingFastLeave : undefined;
            resourceInputs["switchControllerIgmpSnoopingProxy"] = state ? state.switchControllerIgmpSnoopingProxy : undefined;
            resourceInputs["switchControllerIotScanning"] = state ? state.switchControllerIotScanning : undefined;
            resourceInputs["switchControllerLearningLimit"] = state ? state.switchControllerLearningLimit : undefined;
            resourceInputs["switchControllerMgmtVlan"] = state ? state.switchControllerMgmtVlan : undefined;
            resourceInputs["switchControllerNac"] = state ? state.switchControllerNac : undefined;
            resourceInputs["switchControllerNetflowCollect"] = state ? state.switchControllerNetflowCollect : undefined;
            resourceInputs["switchControllerOffload"] = state ? state.switchControllerOffload : undefined;
            resourceInputs["switchControllerOffloadGw"] = state ? state.switchControllerOffloadGw : undefined;
            resourceInputs["switchControllerOffloadIp"] = state ? state.switchControllerOffloadIp : undefined;
            resourceInputs["switchControllerRspanMode"] = state ? state.switchControllerRspanMode : undefined;
            resourceInputs["switchControllerSourceIp"] = state ? state.switchControllerSourceIp : undefined;
            resourceInputs["switchControllerTrafficPolicy"] = state ? state.switchControllerTrafficPolicy : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
            resourceInputs["systemIdType"] = state ? state.systemIdType : undefined;
            resourceInputs["taggings"] = state ? state.taggings : undefined;
            resourceInputs["tcpMss"] = state ? state.tcpMss : undefined;
            resourceInputs["trunk"] = state ? state.trunk : undefined;
            resourceInputs["trustIp1"] = state ? state.trustIp1 : undefined;
            resourceInputs["trustIp2"] = state ? state.trustIp2 : undefined;
            resourceInputs["trustIp3"] = state ? state.trustIp3 : undefined;
            resourceInputs["trustIp61"] = state ? state.trustIp61 : undefined;
            resourceInputs["trustIp62"] = state ? state.trustIp62 : undefined;
            resourceInputs["trustIp63"] = state ? state.trustIp63 : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["vindex"] = state ? state.vindex : undefined;
            resourceInputs["vlanProtocol"] = state ? state.vlanProtocol : undefined;
            resourceInputs["vlanforward"] = state ? state.vlanforward : undefined;
            resourceInputs["vlanid"] = state ? state.vlanid : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
            resourceInputs["vrrpVirtualMac"] = state ? state.vrrpVirtualMac : undefined;
            resourceInputs["vrrps"] = state ? state.vrrps : undefined;
            resourceInputs["wccp"] = state ? state.wccp : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
            resourceInputs["winsIp"] = state ? state.winsIp : undefined;
        } else {
            const args = argsOrState as SystemInterfaceArgs | undefined;
            if ((!args || args.vdom === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vdom'");
            }
            resourceInputs["acName"] = args ? args.acName : undefined;
            resourceInputs["aggregate"] = args ? args.aggregate : undefined;
            resourceInputs["aggregateType"] = args ? args.aggregateType : undefined;
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["allowaccess"] = args ? args.allowaccess : undefined;
            resourceInputs["apDiscover"] = args ? args.apDiscover : undefined;
            resourceInputs["arpforward"] = args ? args.arpforward : undefined;
            resourceInputs["authCert"] = args ? args.authCert : undefined;
            resourceInputs["authPortalAddr"] = args ? args.authPortalAddr : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["autoAuthExtensionDevice"] = args ? args.autoAuthExtensionDevice : undefined;
            resourceInputs["autogenerated"] = args ? args.autogenerated : undefined;
            resourceInputs["bandwidthMeasureTime"] = args ? args.bandwidthMeasureTime : undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["bfdDesiredMinTx"] = args ? args.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = args ? args.bfdDetectMult : undefined;
            resourceInputs["bfdRequiredMinRx"] = args ? args.bfdRequiredMinRx : undefined;
            resourceInputs["broadcastForticlientDiscovery"] = args ? args.broadcastForticlientDiscovery : undefined;
            resourceInputs["broadcastForward"] = args ? args.broadcastForward : undefined;
            resourceInputs["captivePortal"] = args ? args.captivePortal : undefined;
            resourceInputs["cliConnStatus"] = args ? args.cliConnStatus : undefined;
            resourceInputs["clientOptions"] = args ? args.clientOptions : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["dedicatedTo"] = args ? args.dedicatedTo : undefined;
            resourceInputs["defaultPurdueLevel"] = args ? args.defaultPurdueLevel : undefined;
            resourceInputs["defaultgw"] = args ? args.defaultgw : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectedPeerMtu"] = args ? args.detectedPeerMtu : undefined;
            resourceInputs["detectprotocol"] = args ? args.detectprotocol : undefined;
            resourceInputs["detectserver"] = args ? args.detectserver : undefined;
            resourceInputs["deviceAccessList"] = args ? args.deviceAccessList : undefined;
            resourceInputs["deviceIdentification"] = args ? args.deviceIdentification : undefined;
            resourceInputs["deviceIdentificationActiveScan"] = args ? args.deviceIdentificationActiveScan : undefined;
            resourceInputs["deviceNetscan"] = args ? args.deviceNetscan : undefined;
            resourceInputs["deviceUserIdentification"] = args ? args.deviceUserIdentification : undefined;
            resourceInputs["devindex"] = args ? args.devindex : undefined;
            resourceInputs["dhcpBroadcastFlag"] = args ? args.dhcpBroadcastFlag : undefined;
            resourceInputs["dhcpClasslessRouteAddition"] = args ? args.dhcpClasslessRouteAddition : undefined;
            resourceInputs["dhcpClientIdentifier"] = args ? args.dhcpClientIdentifier : undefined;
            resourceInputs["dhcpRelayAgentOption"] = args ? args.dhcpRelayAgentOption : undefined;
            resourceInputs["dhcpRelayAllowNoEndOption"] = args ? args.dhcpRelayAllowNoEndOption : undefined;
            resourceInputs["dhcpRelayCircuitId"] = args ? args.dhcpRelayCircuitId : undefined;
            resourceInputs["dhcpRelayInterface"] = args ? args.dhcpRelayInterface : undefined;
            resourceInputs["dhcpRelayInterfaceSelectMethod"] = args ? args.dhcpRelayInterfaceSelectMethod : undefined;
            resourceInputs["dhcpRelayIp"] = args ? args.dhcpRelayIp : undefined;
            resourceInputs["dhcpRelayLinkSelection"] = args ? args.dhcpRelayLinkSelection : undefined;
            resourceInputs["dhcpRelayRequestAllServer"] = args ? args.dhcpRelayRequestAllServer : undefined;
            resourceInputs["dhcpRelayService"] = args ? args.dhcpRelayService : undefined;
            resourceInputs["dhcpRelaySourceIp"] = args ? args.dhcpRelaySourceIp : undefined;
            resourceInputs["dhcpRelayType"] = args ? args.dhcpRelayType : undefined;
            resourceInputs["dhcpRenewTime"] = args ? args.dhcpRenewTime : undefined;
            resourceInputs["dhcpSmartRelay"] = args ? args.dhcpSmartRelay : undefined;
            resourceInputs["dhcpSnoopingServerLists"] = args ? args.dhcpSnoopingServerLists : undefined;
            resourceInputs["discRetryTimeout"] = args ? args.discRetryTimeout : undefined;
            resourceInputs["disconnectThreshold"] = args ? args.disconnectThreshold : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["dnsServerOverride"] = args ? args.dnsServerOverride : undefined;
            resourceInputs["dnsServerProtocol"] = args ? args.dnsServerProtocol : undefined;
            resourceInputs["dropFragment"] = args ? args.dropFragment : undefined;
            resourceInputs["dropOverlappedFragment"] = args ? args.dropOverlappedFragment : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["eapCaCert"] = args ? args.eapCaCert : undefined;
            resourceInputs["eapIdentity"] = args ? args.eapIdentity : undefined;
            resourceInputs["eapMethod"] = args ? args.eapMethod : undefined;
            resourceInputs["eapPassword"] = args?.eapPassword ? pulumi.secret(args.eapPassword) : undefined;
            resourceInputs["eapSupplicant"] = args ? args.eapSupplicant : undefined;
            resourceInputs["eapUserCert"] = args ? args.eapUserCert : undefined;
            resourceInputs["egressShapingProfile"] = args ? args.egressShapingProfile : undefined;
            resourceInputs["endpointCompliance"] = args ? args.endpointCompliance : undefined;
            resourceInputs["estimatedDownstreamBandwidth"] = args ? args.estimatedDownstreamBandwidth : undefined;
            resourceInputs["estimatedUpstreamBandwidth"] = args ? args.estimatedUpstreamBandwidth : undefined;
            resourceInputs["explicitFtpProxy"] = args ? args.explicitFtpProxy : undefined;
            resourceInputs["explicitWebProxy"] = args ? args.explicitWebProxy : undefined;
            resourceInputs["external"] = args ? args.external : undefined;
            resourceInputs["failActionOnExtender"] = args ? args.failActionOnExtender : undefined;
            resourceInputs["failAlertInterfaces"] = args ? args.failAlertInterfaces : undefined;
            resourceInputs["failAlertMethod"] = args ? args.failAlertMethod : undefined;
            resourceInputs["failDetect"] = args ? args.failDetect : undefined;
            resourceInputs["failDetectOption"] = args ? args.failDetectOption : undefined;
            resourceInputs["fortiheartbeat"] = args ? args.fortiheartbeat : undefined;
            resourceInputs["fortilink"] = args ? args.fortilink : undefined;
            resourceInputs["fortilinkBackupLink"] = args ? args.fortilinkBackupLink : undefined;
            resourceInputs["fortilinkNeighborDetect"] = args ? args.fortilinkNeighborDetect : undefined;
            resourceInputs["fortilinkSplitInterface"] = args ? args.fortilinkSplitInterface : undefined;
            resourceInputs["fortilinkStacking"] = args ? args.fortilinkStacking : undefined;
            resourceInputs["forwardDomain"] = args ? args.forwardDomain : undefined;
            resourceInputs["forwardErrorCorrection"] = args ? args.forwardErrorCorrection : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["gwdetect"] = args ? args.gwdetect : undefined;
            resourceInputs["haPriority"] = args ? args.haPriority : undefined;
            resourceInputs["icmpAcceptRedirect"] = args ? args.icmpAcceptRedirect : undefined;
            resourceInputs["icmpSendRedirect"] = args ? args.icmpSendRedirect : undefined;
            resourceInputs["identAccept"] = args ? args.identAccept : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["ikeSamlServer"] = args ? args.ikeSamlServer : undefined;
            resourceInputs["inbandwidth"] = args ? args.inbandwidth : undefined;
            resourceInputs["ingressShapingProfile"] = args ? args.ingressShapingProfile : undefined;
            resourceInputs["ingressSpilloverThreshold"] = args ? args.ingressSpilloverThreshold : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["internal"] = args ? args.internal : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipManagedByFortiipam"] = args ? args.ipManagedByFortiipam : undefined;
            resourceInputs["ipmac"] = args ? args.ipmac : undefined;
            resourceInputs["ipsSnifferMode"] = args ? args.ipsSnifferMode : undefined;
            resourceInputs["ipunnumbered"] = args ? args.ipunnumbered : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["l2forward"] = args ? args.l2forward : undefined;
            resourceInputs["lacpHaSecondary"] = args ? args.lacpHaSecondary : undefined;
            resourceInputs["lacpHaSlave"] = args ? args.lacpHaSlave : undefined;
            resourceInputs["lacpMode"] = args ? args.lacpMode : undefined;
            resourceInputs["lacpSpeed"] = args ? args.lacpSpeed : undefined;
            resourceInputs["lcpEchoInterval"] = args ? args.lcpEchoInterval : undefined;
            resourceInputs["lcpMaxEchoFails"] = args ? args.lcpMaxEchoFails : undefined;
            resourceInputs["linkUpDelay"] = args ? args.linkUpDelay : undefined;
            resourceInputs["lldpNetworkPolicy"] = args ? args.lldpNetworkPolicy : undefined;
            resourceInputs["lldpReception"] = args ? args.lldpReception : undefined;
            resourceInputs["lldpTransmission"] = args ? args.lldpTransmission : undefined;
            resourceInputs["macaddr"] = args ? args.macaddr : undefined;
            resourceInputs["managedDevices"] = args ? args.managedDevices : undefined;
            resourceInputs["managedSubnetworkSize"] = args ? args.managedSubnetworkSize : undefined;
            resourceInputs["managementIp"] = args ? args.managementIp : undefined;
            resourceInputs["measuredDownstreamBandwidth"] = args ? args.measuredDownstreamBandwidth : undefined;
            resourceInputs["measuredUpstreamBandwidth"] = args ? args.measuredUpstreamBandwidth : undefined;
            resourceInputs["mediatype"] = args ? args.mediatype : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["minLinks"] = args ? args.minLinks : undefined;
            resourceInputs["minLinksDown"] = args ? args.minLinksDown : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["monitorBandwidth"] = args ? args.monitorBandwidth : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["mtuOverride"] = args ? args.mtuOverride : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ndiscforward"] = args ? args.ndiscforward : undefined;
            resourceInputs["netbiosForward"] = args ? args.netbiosForward : undefined;
            resourceInputs["netflowSampler"] = args ? args.netflowSampler : undefined;
            resourceInputs["outbandwidth"] = args ? args.outbandwidth : undefined;
            resourceInputs["padtRetryTimeout"] = args ? args.padtRetryTimeout : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["pingServStatus"] = args ? args.pingServStatus : undefined;
            resourceInputs["pollingInterval"] = args ? args.pollingInterval : undefined;
            resourceInputs["pppoeUnnumberedNegotiate"] = args ? args.pppoeUnnumberedNegotiate : undefined;
            resourceInputs["pptpAuthType"] = args ? args.pptpAuthType : undefined;
            resourceInputs["pptpClient"] = args ? args.pptpClient : undefined;
            resourceInputs["pptpPassword"] = args?.pptpPassword ? pulumi.secret(args.pptpPassword) : undefined;
            resourceInputs["pptpServerIp"] = args ? args.pptpServerIp : undefined;
            resourceInputs["pptpTimeout"] = args ? args.pptpTimeout : undefined;
            resourceInputs["pptpUser"] = args ? args.pptpUser : undefined;
            resourceInputs["preserveSessionRoute"] = args ? args.preserveSessionRoute : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["priorityOverride"] = args ? args.priorityOverride : undefined;
            resourceInputs["proxyCaptivePortal"] = args ? args.proxyCaptivePortal : undefined;
            resourceInputs["reachableTime"] = args ? args.reachableTime : undefined;
            resourceInputs["redundantInterface"] = args ? args.redundantInterface : undefined;
            resourceInputs["remoteIp"] = args ? args.remoteIp : undefined;
            resourceInputs["replacemsgOverrideGroup"] = args ? args.replacemsgOverrideGroup : undefined;
            resourceInputs["ringRx"] = args ? args.ringRx : undefined;
            resourceInputs["ringTx"] = args ? args.ringTx : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["sampleDirection"] = args ? args.sampleDirection : undefined;
            resourceInputs["sampleRate"] = args ? args.sampleRate : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["secondaryIp"] = args ? args.secondaryIp : undefined;
            resourceInputs["secondaryips"] = args ? args.secondaryips : undefined;
            resourceInputs["securityExemptList"] = args ? args.securityExemptList : undefined;
            resourceInputs["securityExternalLogout"] = args ? args.securityExternalLogout : undefined;
            resourceInputs["securityExternalWeb"] = args ? args.securityExternalWeb : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["securityMacAuthBypass"] = args ? args.securityMacAuthBypass : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["securityRedirectUrl"] = args ? args.securityRedirectUrl : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["sflowSampler"] = args ? args.sflowSampler : undefined;
            resourceInputs["snmpIndex"] = args ? args.snmpIndex : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["spilloverThreshold"] = args ? args.spilloverThreshold : undefined;
            resourceInputs["srcCheck"] = args ? args.srcCheck : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["stp"] = args ? args.stp : undefined;
            resourceInputs["stpHaSecondary"] = args ? args.stpHaSecondary : undefined;
            resourceInputs["stpforward"] = args ? args.stpforward : undefined;
            resourceInputs["stpforwardMode"] = args ? args.stpforwardMode : undefined;
            resourceInputs["subst"] = args ? args.subst : undefined;
            resourceInputs["substituteDstMac"] = args ? args.substituteDstMac : undefined;
            resourceInputs["swcFirstCreate"] = args ? args.swcFirstCreate : undefined;
            resourceInputs["swcVlan"] = args ? args.swcVlan : undefined;
            resourceInputs["switch"] = args ? args.switch : undefined;
            resourceInputs["switchControllerAccessVlan"] = args ? args.switchControllerAccessVlan : undefined;
            resourceInputs["switchControllerArpInspection"] = args ? args.switchControllerArpInspection : undefined;
            resourceInputs["switchControllerDhcpSnooping"] = args ? args.switchControllerDhcpSnooping : undefined;
            resourceInputs["switchControllerDhcpSnoopingOption82"] = args ? args.switchControllerDhcpSnoopingOption82 : undefined;
            resourceInputs["switchControllerDhcpSnoopingVerifyMac"] = args ? args.switchControllerDhcpSnoopingVerifyMac : undefined;
            resourceInputs["switchControllerDynamic"] = args ? args.switchControllerDynamic : undefined;
            resourceInputs["switchControllerFeature"] = args ? args.switchControllerFeature : undefined;
            resourceInputs["switchControllerIgmpSnooping"] = args ? args.switchControllerIgmpSnooping : undefined;
            resourceInputs["switchControllerIgmpSnoopingFastLeave"] = args ? args.switchControllerIgmpSnoopingFastLeave : undefined;
            resourceInputs["switchControllerIgmpSnoopingProxy"] = args ? args.switchControllerIgmpSnoopingProxy : undefined;
            resourceInputs["switchControllerIotScanning"] = args ? args.switchControllerIotScanning : undefined;
            resourceInputs["switchControllerLearningLimit"] = args ? args.switchControllerLearningLimit : undefined;
            resourceInputs["switchControllerMgmtVlan"] = args ? args.switchControllerMgmtVlan : undefined;
            resourceInputs["switchControllerNac"] = args ? args.switchControllerNac : undefined;
            resourceInputs["switchControllerNetflowCollect"] = args ? args.switchControllerNetflowCollect : undefined;
            resourceInputs["switchControllerOffload"] = args ? args.switchControllerOffload : undefined;
            resourceInputs["switchControllerOffloadGw"] = args ? args.switchControllerOffloadGw : undefined;
            resourceInputs["switchControllerOffloadIp"] = args ? args.switchControllerOffloadIp : undefined;
            resourceInputs["switchControllerRspanMode"] = args ? args.switchControllerRspanMode : undefined;
            resourceInputs["switchControllerSourceIp"] = args ? args.switchControllerSourceIp : undefined;
            resourceInputs["switchControllerTrafficPolicy"] = args ? args.switchControllerTrafficPolicy : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
            resourceInputs["systemIdType"] = args ? args.systemIdType : undefined;
            resourceInputs["taggings"] = args ? args.taggings : undefined;
            resourceInputs["tcpMss"] = args ? args.tcpMss : undefined;
            resourceInputs["trunk"] = args ? args.trunk : undefined;
            resourceInputs["trustIp1"] = args ? args.trustIp1 : undefined;
            resourceInputs["trustIp2"] = args ? args.trustIp2 : undefined;
            resourceInputs["trustIp3"] = args ? args.trustIp3 : undefined;
            resourceInputs["trustIp61"] = args ? args.trustIp61 : undefined;
            resourceInputs["trustIp62"] = args ? args.trustIp62 : undefined;
            resourceInputs["trustIp63"] = args ? args.trustIp63 : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["vindex"] = args ? args.vindex : undefined;
            resourceInputs["vlanProtocol"] = args ? args.vlanProtocol : undefined;
            resourceInputs["vlanforward"] = args ? args.vlanforward : undefined;
            resourceInputs["vlanid"] = args ? args.vlanid : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["vrrpVirtualMac"] = args ? args.vrrpVirtualMac : undefined;
            resourceInputs["vrrps"] = args ? args.vrrps : undefined;
            resourceInputs["wccp"] = args ? args.wccp : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["winsIp"] = args ? args.winsIp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["eapPassword", "password", "pptpPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemInterface resources.
 */
export interface SystemInterfaceState {
    acName?: pulumi.Input<string>;
    aggregate?: pulumi.Input<string>;
    aggregateType?: pulumi.Input<string>;
    algorithm?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    allowaccess?: pulumi.Input<string>;
    apDiscover?: pulumi.Input<string>;
    arpforward?: pulumi.Input<string>;
    authCert?: pulumi.Input<string>;
    authPortalAddr?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    autoAuthExtensionDevice?: pulumi.Input<string>;
    autogenerated?: pulumi.Input<string>;
    bandwidthMeasureTime?: pulumi.Input<number>;
    bfd?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    broadcastForticlientDiscovery?: pulumi.Input<string>;
    broadcastForward?: pulumi.Input<string>;
    captivePortal?: pulumi.Input<number>;
    cliConnStatus?: pulumi.Input<number>;
    clientOptions?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceClientOption>[]>;
    color?: pulumi.Input<number>;
    dedicatedTo?: pulumi.Input<string>;
    defaultPurdueLevel?: pulumi.Input<string>;
    defaultgw?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detectedPeerMtu?: pulumi.Input<number>;
    detectprotocol?: pulumi.Input<string>;
    detectserver?: pulumi.Input<string>;
    deviceAccessList?: pulumi.Input<string>;
    deviceIdentification?: pulumi.Input<string>;
    deviceIdentificationActiveScan?: pulumi.Input<string>;
    deviceNetscan?: pulumi.Input<string>;
    deviceUserIdentification?: pulumi.Input<string>;
    devindex?: pulumi.Input<number>;
    dhcpBroadcastFlag?: pulumi.Input<string>;
    dhcpClasslessRouteAddition?: pulumi.Input<string>;
    dhcpClientIdentifier?: pulumi.Input<string>;
    dhcpRelayAgentOption?: pulumi.Input<string>;
    dhcpRelayAllowNoEndOption?: pulumi.Input<string>;
    dhcpRelayCircuitId?: pulumi.Input<string>;
    dhcpRelayInterface?: pulumi.Input<string>;
    dhcpRelayInterfaceSelectMethod?: pulumi.Input<string>;
    dhcpRelayIp?: pulumi.Input<string>;
    dhcpRelayLinkSelection?: pulumi.Input<string>;
    dhcpRelayRequestAllServer?: pulumi.Input<string>;
    dhcpRelayService?: pulumi.Input<string>;
    dhcpRelaySourceIp?: pulumi.Input<string>;
    dhcpRelayType?: pulumi.Input<string>;
    dhcpRenewTime?: pulumi.Input<number>;
    dhcpSmartRelay?: pulumi.Input<string>;
    dhcpSnoopingServerLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceDhcpSnoopingServerList>[]>;
    discRetryTimeout?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    distance?: pulumi.Input<number>;
    dnsServerOverride?: pulumi.Input<string>;
    dnsServerProtocol?: pulumi.Input<string>;
    dropFragment?: pulumi.Input<string>;
    dropOverlappedFragment?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    eapCaCert?: pulumi.Input<string>;
    eapIdentity?: pulumi.Input<string>;
    eapMethod?: pulumi.Input<string>;
    eapPassword?: pulumi.Input<string>;
    eapSupplicant?: pulumi.Input<string>;
    eapUserCert?: pulumi.Input<string>;
    egressShapingProfile?: pulumi.Input<string>;
    endpointCompliance?: pulumi.Input<string>;
    estimatedDownstreamBandwidth?: pulumi.Input<number>;
    estimatedUpstreamBandwidth?: pulumi.Input<number>;
    explicitFtpProxy?: pulumi.Input<string>;
    explicitWebProxy?: pulumi.Input<string>;
    external?: pulumi.Input<string>;
    failActionOnExtender?: pulumi.Input<string>;
    failAlertInterfaces?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceFailAlertInterface>[]>;
    failAlertMethod?: pulumi.Input<string>;
    failDetect?: pulumi.Input<string>;
    failDetectOption?: pulumi.Input<string>;
    fortiheartbeat?: pulumi.Input<string>;
    fortilink?: pulumi.Input<string>;
    fortilinkBackupLink?: pulumi.Input<number>;
    fortilinkNeighborDetect?: pulumi.Input<string>;
    fortilinkSplitInterface?: pulumi.Input<string>;
    fortilinkStacking?: pulumi.Input<string>;
    forwardDomain?: pulumi.Input<number>;
    forwardErrorCorrection?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    icmpAcceptRedirect?: pulumi.Input<string>;
    icmpSendRedirect?: pulumi.Input<string>;
    identAccept?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    ikeSamlServer?: pulumi.Input<string>;
    inbandwidth?: pulumi.Input<number>;
    ingressShapingProfile?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    internal?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ipManagedByFortiipam?: pulumi.Input<string>;
    ipmac?: pulumi.Input<string>;
    ipsSnifferMode?: pulumi.Input<string>;
    ipunnumbered?: pulumi.Input<string>;
    ipv6?: pulumi.Input<inputs.SystemInterfaceIpv6>;
    l2forward?: pulumi.Input<string>;
    lacpHaSecondary?: pulumi.Input<string>;
    lacpHaSlave?: pulumi.Input<string>;
    lacpMode?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    lcpEchoInterval?: pulumi.Input<number>;
    lcpMaxEchoFails?: pulumi.Input<number>;
    linkUpDelay?: pulumi.Input<number>;
    lldpNetworkPolicy?: pulumi.Input<string>;
    lldpReception?: pulumi.Input<string>;
    lldpTransmission?: pulumi.Input<string>;
    macaddr?: pulumi.Input<string>;
    managedDevices?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceManagedDevice>[]>;
    managedSubnetworkSize?: pulumi.Input<string>;
    managementIp?: pulumi.Input<string>;
    measuredDownstreamBandwidth?: pulumi.Input<number>;
    measuredUpstreamBandwidth?: pulumi.Input<number>;
    mediatype?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceMember>[]>;
    minLinks?: pulumi.Input<number>;
    minLinksDown?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    monitorBandwidth?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuOverride?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ndiscforward?: pulumi.Input<string>;
    netbiosForward?: pulumi.Input<string>;
    netflowSampler?: pulumi.Input<string>;
    outbandwidth?: pulumi.Input<number>;
    padtRetryTimeout?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    pollingInterval?: pulumi.Input<number>;
    pppoeUnnumberedNegotiate?: pulumi.Input<string>;
    pptpAuthType?: pulumi.Input<string>;
    pptpClient?: pulumi.Input<string>;
    pptpPassword?: pulumi.Input<string>;
    pptpServerIp?: pulumi.Input<string>;
    pptpTimeout?: pulumi.Input<number>;
    pptpUser?: pulumi.Input<string>;
    preserveSessionRoute?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    priorityOverride?: pulumi.Input<string>;
    proxyCaptivePortal?: pulumi.Input<string>;
    reachableTime?: pulumi.Input<number>;
    redundantInterface?: pulumi.Input<string>;
    remoteIp?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    ringRx?: pulumi.Input<number>;
    ringTx?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    sampleRate?: pulumi.Input<number>;
    scanBotnetConnections?: pulumi.Input<string>;
    secondaryIp?: pulumi.Input<string>;
    secondaryips?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceSecondaryip>[]>;
    securityExemptList?: pulumi.Input<string>;
    securityExternalLogout?: pulumi.Input<string>;
    securityExternalWeb?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceSecurityGroup>[]>;
    securityMacAuthBypass?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    securityRedirectUrl?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    sflowSampler?: pulumi.Input<string>;
    snmpIndex?: pulumi.Input<number>;
    speed?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    srcCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stp?: pulumi.Input<string>;
    stpHaSecondary?: pulumi.Input<string>;
    stpforward?: pulumi.Input<string>;
    stpforwardMode?: pulumi.Input<string>;
    subst?: pulumi.Input<string>;
    substituteDstMac?: pulumi.Input<string>;
    swcFirstCreate?: pulumi.Input<number>;
    swcVlan?: pulumi.Input<number>;
    switch?: pulumi.Input<string>;
    switchControllerAccessVlan?: pulumi.Input<string>;
    switchControllerArpInspection?: pulumi.Input<string>;
    switchControllerDhcpSnooping?: pulumi.Input<string>;
    switchControllerDhcpSnoopingOption82?: pulumi.Input<string>;
    switchControllerDhcpSnoopingVerifyMac?: pulumi.Input<string>;
    switchControllerDynamic?: pulumi.Input<string>;
    switchControllerFeature?: pulumi.Input<string>;
    switchControllerIgmpSnooping?: pulumi.Input<string>;
    switchControllerIgmpSnoopingFastLeave?: pulumi.Input<string>;
    switchControllerIgmpSnoopingProxy?: pulumi.Input<string>;
    switchControllerIotScanning?: pulumi.Input<string>;
    switchControllerLearningLimit?: pulumi.Input<number>;
    switchControllerMgmtVlan?: pulumi.Input<number>;
    switchControllerNac?: pulumi.Input<string>;
    switchControllerNetflowCollect?: pulumi.Input<string>;
    switchControllerOffload?: pulumi.Input<string>;
    switchControllerOffloadGw?: pulumi.Input<string>;
    switchControllerOffloadIp?: pulumi.Input<string>;
    switchControllerRspanMode?: pulumi.Input<string>;
    switchControllerSourceIp?: pulumi.Input<string>;
    switchControllerTrafficPolicy?: pulumi.Input<string>;
    systemId?: pulumi.Input<string>;
    systemIdType?: pulumi.Input<string>;
    taggings?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceTagging>[]>;
    tcpMss?: pulumi.Input<number>;
    trunk?: pulumi.Input<string>;
    trustIp1?: pulumi.Input<string>;
    trustIp2?: pulumi.Input<string>;
    trustIp3?: pulumi.Input<string>;
    trustIp61?: pulumi.Input<string>;
    trustIp62?: pulumi.Input<string>;
    trustIp63?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    vindex?: pulumi.Input<number>;
    vlanProtocol?: pulumi.Input<string>;
    vlanforward?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    vrf?: pulumi.Input<number>;
    vrrpVirtualMac?: pulumi.Input<string>;
    vrrps?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceVrrp>[]>;
    wccp?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
    winsIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemInterface resource.
 */
export interface SystemInterfaceArgs {
    acName?: pulumi.Input<string>;
    aggregate?: pulumi.Input<string>;
    aggregateType?: pulumi.Input<string>;
    algorithm?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    allowaccess?: pulumi.Input<string>;
    apDiscover?: pulumi.Input<string>;
    arpforward?: pulumi.Input<string>;
    authCert?: pulumi.Input<string>;
    authPortalAddr?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    autoAuthExtensionDevice?: pulumi.Input<string>;
    autogenerated?: pulumi.Input<string>;
    bandwidthMeasureTime?: pulumi.Input<number>;
    bfd?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    broadcastForticlientDiscovery?: pulumi.Input<string>;
    broadcastForward?: pulumi.Input<string>;
    captivePortal?: pulumi.Input<number>;
    cliConnStatus?: pulumi.Input<number>;
    clientOptions?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceClientOption>[]>;
    color?: pulumi.Input<number>;
    dedicatedTo?: pulumi.Input<string>;
    defaultPurdueLevel?: pulumi.Input<string>;
    defaultgw?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detectedPeerMtu?: pulumi.Input<number>;
    detectprotocol?: pulumi.Input<string>;
    detectserver?: pulumi.Input<string>;
    deviceAccessList?: pulumi.Input<string>;
    deviceIdentification?: pulumi.Input<string>;
    deviceIdentificationActiveScan?: pulumi.Input<string>;
    deviceNetscan?: pulumi.Input<string>;
    deviceUserIdentification?: pulumi.Input<string>;
    devindex?: pulumi.Input<number>;
    dhcpBroadcastFlag?: pulumi.Input<string>;
    dhcpClasslessRouteAddition?: pulumi.Input<string>;
    dhcpClientIdentifier?: pulumi.Input<string>;
    dhcpRelayAgentOption?: pulumi.Input<string>;
    dhcpRelayAllowNoEndOption?: pulumi.Input<string>;
    dhcpRelayCircuitId?: pulumi.Input<string>;
    dhcpRelayInterface?: pulumi.Input<string>;
    dhcpRelayInterfaceSelectMethod?: pulumi.Input<string>;
    dhcpRelayIp?: pulumi.Input<string>;
    dhcpRelayLinkSelection?: pulumi.Input<string>;
    dhcpRelayRequestAllServer?: pulumi.Input<string>;
    dhcpRelayService?: pulumi.Input<string>;
    dhcpRelaySourceIp?: pulumi.Input<string>;
    dhcpRelayType?: pulumi.Input<string>;
    dhcpRenewTime?: pulumi.Input<number>;
    dhcpSmartRelay?: pulumi.Input<string>;
    dhcpSnoopingServerLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceDhcpSnoopingServerList>[]>;
    discRetryTimeout?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    distance?: pulumi.Input<number>;
    dnsServerOverride?: pulumi.Input<string>;
    dnsServerProtocol?: pulumi.Input<string>;
    dropFragment?: pulumi.Input<string>;
    dropOverlappedFragment?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    eapCaCert?: pulumi.Input<string>;
    eapIdentity?: pulumi.Input<string>;
    eapMethod?: pulumi.Input<string>;
    eapPassword?: pulumi.Input<string>;
    eapSupplicant?: pulumi.Input<string>;
    eapUserCert?: pulumi.Input<string>;
    egressShapingProfile?: pulumi.Input<string>;
    endpointCompliance?: pulumi.Input<string>;
    estimatedDownstreamBandwidth?: pulumi.Input<number>;
    estimatedUpstreamBandwidth?: pulumi.Input<number>;
    explicitFtpProxy?: pulumi.Input<string>;
    explicitWebProxy?: pulumi.Input<string>;
    external?: pulumi.Input<string>;
    failActionOnExtender?: pulumi.Input<string>;
    failAlertInterfaces?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceFailAlertInterface>[]>;
    failAlertMethod?: pulumi.Input<string>;
    failDetect?: pulumi.Input<string>;
    failDetectOption?: pulumi.Input<string>;
    fortiheartbeat?: pulumi.Input<string>;
    fortilink?: pulumi.Input<string>;
    fortilinkBackupLink?: pulumi.Input<number>;
    fortilinkNeighborDetect?: pulumi.Input<string>;
    fortilinkSplitInterface?: pulumi.Input<string>;
    fortilinkStacking?: pulumi.Input<string>;
    forwardDomain?: pulumi.Input<number>;
    forwardErrorCorrection?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    icmpAcceptRedirect?: pulumi.Input<string>;
    icmpSendRedirect?: pulumi.Input<string>;
    identAccept?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    ikeSamlServer?: pulumi.Input<string>;
    inbandwidth?: pulumi.Input<number>;
    ingressShapingProfile?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    internal?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ipManagedByFortiipam?: pulumi.Input<string>;
    ipmac?: pulumi.Input<string>;
    ipsSnifferMode?: pulumi.Input<string>;
    ipunnumbered?: pulumi.Input<string>;
    ipv6?: pulumi.Input<inputs.SystemInterfaceIpv6>;
    l2forward?: pulumi.Input<string>;
    lacpHaSecondary?: pulumi.Input<string>;
    lacpHaSlave?: pulumi.Input<string>;
    lacpMode?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    lcpEchoInterval?: pulumi.Input<number>;
    lcpMaxEchoFails?: pulumi.Input<number>;
    linkUpDelay?: pulumi.Input<number>;
    lldpNetworkPolicy?: pulumi.Input<string>;
    lldpReception?: pulumi.Input<string>;
    lldpTransmission?: pulumi.Input<string>;
    macaddr?: pulumi.Input<string>;
    managedDevices?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceManagedDevice>[]>;
    managedSubnetworkSize?: pulumi.Input<string>;
    managementIp?: pulumi.Input<string>;
    measuredDownstreamBandwidth?: pulumi.Input<number>;
    measuredUpstreamBandwidth?: pulumi.Input<number>;
    mediatype?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceMember>[]>;
    minLinks?: pulumi.Input<number>;
    minLinksDown?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    monitorBandwidth?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuOverride?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ndiscforward?: pulumi.Input<string>;
    netbiosForward?: pulumi.Input<string>;
    netflowSampler?: pulumi.Input<string>;
    outbandwidth?: pulumi.Input<number>;
    padtRetryTimeout?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    pollingInterval?: pulumi.Input<number>;
    pppoeUnnumberedNegotiate?: pulumi.Input<string>;
    pptpAuthType?: pulumi.Input<string>;
    pptpClient?: pulumi.Input<string>;
    pptpPassword?: pulumi.Input<string>;
    pptpServerIp?: pulumi.Input<string>;
    pptpTimeout?: pulumi.Input<number>;
    pptpUser?: pulumi.Input<string>;
    preserveSessionRoute?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    priorityOverride?: pulumi.Input<string>;
    proxyCaptivePortal?: pulumi.Input<string>;
    reachableTime?: pulumi.Input<number>;
    redundantInterface?: pulumi.Input<string>;
    remoteIp?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    ringRx?: pulumi.Input<number>;
    ringTx?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    sampleRate?: pulumi.Input<number>;
    scanBotnetConnections?: pulumi.Input<string>;
    secondaryIp?: pulumi.Input<string>;
    secondaryips?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceSecondaryip>[]>;
    securityExemptList?: pulumi.Input<string>;
    securityExternalLogout?: pulumi.Input<string>;
    securityExternalWeb?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceSecurityGroup>[]>;
    securityMacAuthBypass?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    securityRedirectUrl?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    sflowSampler?: pulumi.Input<string>;
    snmpIndex?: pulumi.Input<number>;
    speed?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    srcCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stp?: pulumi.Input<string>;
    stpHaSecondary?: pulumi.Input<string>;
    stpforward?: pulumi.Input<string>;
    stpforwardMode?: pulumi.Input<string>;
    subst?: pulumi.Input<string>;
    substituteDstMac?: pulumi.Input<string>;
    swcFirstCreate?: pulumi.Input<number>;
    swcVlan?: pulumi.Input<number>;
    switch?: pulumi.Input<string>;
    switchControllerAccessVlan?: pulumi.Input<string>;
    switchControllerArpInspection?: pulumi.Input<string>;
    switchControllerDhcpSnooping?: pulumi.Input<string>;
    switchControllerDhcpSnoopingOption82?: pulumi.Input<string>;
    switchControllerDhcpSnoopingVerifyMac?: pulumi.Input<string>;
    switchControllerDynamic?: pulumi.Input<string>;
    switchControllerFeature?: pulumi.Input<string>;
    switchControllerIgmpSnooping?: pulumi.Input<string>;
    switchControllerIgmpSnoopingFastLeave?: pulumi.Input<string>;
    switchControllerIgmpSnoopingProxy?: pulumi.Input<string>;
    switchControllerIotScanning?: pulumi.Input<string>;
    switchControllerLearningLimit?: pulumi.Input<number>;
    switchControllerMgmtVlan?: pulumi.Input<number>;
    switchControllerNac?: pulumi.Input<string>;
    switchControllerNetflowCollect?: pulumi.Input<string>;
    switchControllerOffload?: pulumi.Input<string>;
    switchControllerOffloadGw?: pulumi.Input<string>;
    switchControllerOffloadIp?: pulumi.Input<string>;
    switchControllerRspanMode?: pulumi.Input<string>;
    switchControllerSourceIp?: pulumi.Input<string>;
    switchControllerTrafficPolicy?: pulumi.Input<string>;
    systemId?: pulumi.Input<string>;
    systemIdType?: pulumi.Input<string>;
    taggings?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceTagging>[]>;
    tcpMss?: pulumi.Input<number>;
    trunk?: pulumi.Input<string>;
    trustIp1?: pulumi.Input<string>;
    trustIp2?: pulumi.Input<string>;
    trustIp3?: pulumi.Input<string>;
    trustIp61?: pulumi.Input<string>;
    trustIp62?: pulumi.Input<string>;
    trustIp63?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vdom: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    vindex?: pulumi.Input<number>;
    vlanProtocol?: pulumi.Input<string>;
    vlanforward?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    vrf?: pulumi.Input<number>;
    vrrpVirtualMac?: pulumi.Input<string>;
    vrrps?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceVrrp>[]>;
    wccp?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
    winsIp?: pulumi.Input<string>;
}
