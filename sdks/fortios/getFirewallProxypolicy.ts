// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFirewallProxypolicy(args: GetFirewallProxypolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetFirewallProxypolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:index/getFirewallProxypolicy:getFirewallProxypolicy", {
        "id": args.id,
        "policyid": args.policyid,
        "vdomparam": args.vdomparam,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFirewallProxypolicy.
 */
export interface GetFirewallProxypolicyArgs {
    id?: string;
    policyid: number;
    vdomparam?: string;
}

/**
 * A collection of values returned by getFirewallProxypolicy.
 */
export interface GetFirewallProxypolicyResult {
    readonly accessProxies: outputs.GetFirewallProxypolicyAccessProxy[];
    readonly accessProxy6s: outputs.GetFirewallProxypolicyAccessProxy6[];
    readonly action: string;
    readonly applicationList: string;
    readonly avProfile: string;
    readonly blockNotification: string;
    readonly casbProfile: string;
    readonly cifsProfile: string;
    readonly comments: string;
    readonly decryptedTrafficMirror: string;
    readonly detectHttpsInHttpRequest: string;
    readonly deviceOwnership: string;
    readonly diameterFilterProfile: string;
    readonly disclaimer: string;
    readonly dlpProfile: string;
    readonly dlpSensor: string;
    readonly dstaddr6s: outputs.GetFirewallProxypolicyDstaddr6[];
    readonly dstaddrNegate: string;
    readonly dstaddrs: outputs.GetFirewallProxypolicyDstaddr[];
    readonly dstintfs: outputs.GetFirewallProxypolicyDstintf[];
    readonly emailfilterProfile: string;
    readonly fileFilterProfile: string;
    readonly globalLabel: string;
    readonly groups: outputs.GetFirewallProxypolicyGroup[];
    readonly httpTunnelAuth: string;
    readonly icapProfile: string;
    readonly id: string;
    readonly internetService: string;
    readonly internetService6: string;
    readonly internetService6CustomGroups: outputs.GetFirewallProxypolicyInternetService6CustomGroup[];
    readonly internetService6Customs: outputs.GetFirewallProxypolicyInternetService6Custom[];
    readonly internetService6Groups: outputs.GetFirewallProxypolicyInternetService6Group[];
    readonly internetService6Names: outputs.GetFirewallProxypolicyInternetService6Name[];
    readonly internetService6Negate: string;
    readonly internetServiceCustomGroups: outputs.GetFirewallProxypolicyInternetServiceCustomGroup[];
    readonly internetServiceCustoms: outputs.GetFirewallProxypolicyInternetServiceCustom[];
    readonly internetServiceGroups: outputs.GetFirewallProxypolicyInternetServiceGroup[];
    readonly internetServiceIds: outputs.GetFirewallProxypolicyInternetServiceId[];
    readonly internetServiceNames: outputs.GetFirewallProxypolicyInternetServiceName[];
    readonly internetServiceNegate: string;
    readonly ipsSensor: string;
    readonly ipsVoipFilter: string;
    readonly label: string;
    readonly logtraffic: string;
    readonly logtrafficStart: string;
    readonly name: string;
    readonly policyid: number;
    readonly poolnames: outputs.GetFirewallProxypolicyPoolname[];
    readonly profileGroup: string;
    readonly profileProtocolOptions: string;
    readonly profileType: string;
    readonly proxy: string;
    readonly redirectUrl: string;
    readonly replacemsgOverrideGroup: string;
    readonly scanBotnetConnections: string;
    readonly schedule: string;
    readonly sctpFilterProfile: string;
    readonly serviceNegate: string;
    readonly services: outputs.GetFirewallProxypolicyService[];
    readonly sessionTtl: number;
    readonly spamfilterProfile: string;
    readonly srcaddr6s: outputs.GetFirewallProxypolicySrcaddr6[];
    readonly srcaddrNegate: string;
    readonly srcaddrs: outputs.GetFirewallProxypolicySrcaddr[];
    readonly srcintfs: outputs.GetFirewallProxypolicySrcintf[];
    readonly sshFilterProfile: string;
    readonly sshPolicyRedirect: string;
    readonly sslSshProfile: string;
    readonly status: string;
    readonly transparent: string;
    readonly users: outputs.GetFirewallProxypolicyUser[];
    readonly utmStatus: string;
    readonly uuid: string;
    readonly vdomparam?: string;
    readonly videofilterProfile: string;
    readonly virtualPatchProfile: string;
    readonly voipProfile: string;
    readonly wafProfile: string;
    readonly webcache: string;
    readonly webcacheHttps: string;
    readonly webfilterProfile: string;
    readonly webproxyForwardServer: string;
    readonly webproxyProfile: string;
    readonly ztnaEmsTags: outputs.GetFirewallProxypolicyZtnaEmsTag[];
    readonly ztnaTagsMatchLogic: string;
}
export function getFirewallProxypolicyOutput(args: GetFirewallProxypolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFirewallProxypolicyResult> {
    return pulumi.output(args).apply((a: any) => getFirewallProxypolicy(a, opts))
}

/**
 * A collection of arguments for invoking getFirewallProxypolicy.
 */
export interface GetFirewallProxypolicyOutputArgs {
    id?: pulumi.Input<string>;
    policyid: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}
