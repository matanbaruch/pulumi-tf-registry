// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SwitchcontrollerVlanpolicy extends pulumi.CustomResource {
    /**
     * Get an existing SwitchcontrollerVlanpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchcontrollerVlanpolicyState, opts?: pulumi.CustomResourceOptions): SwitchcontrollerVlanpolicy {
        return new SwitchcontrollerVlanpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/switchcontrollerVlanpolicy:SwitchcontrollerVlanpolicy';

    /**
     * Returns true if the given object is an instance of SwitchcontrollerVlanpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchcontrollerVlanpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchcontrollerVlanpolicy.__pulumiType;
    }

    public readonly allowedVlans!: pulumi.Output<outputs.SwitchcontrollerVlanpolicyAllowedVlan[] | undefined>;
    public readonly allowedVlansAll!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly discardMode!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fortilink!: pulumi.Output<string>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly untaggedVlans!: pulumi.Output<outputs.SwitchcontrollerVlanpolicyUntaggedVlan[] | undefined>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly vlan!: pulumi.Output<string>;

    /**
     * Create a SwitchcontrollerVlanpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchcontrollerVlanpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchcontrollerVlanpolicyArgs | SwitchcontrollerVlanpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchcontrollerVlanpolicyState | undefined;
            resourceInputs["allowedVlans"] = state ? state.allowedVlans : undefined;
            resourceInputs["allowedVlansAll"] = state ? state.allowedVlansAll : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["discardMode"] = state ? state.discardMode : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fortilink"] = state ? state.fortilink : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["untaggedVlans"] = state ? state.untaggedVlans : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
        } else {
            const args = argsOrState as SwitchcontrollerVlanpolicyArgs | undefined;
            resourceInputs["allowedVlans"] = args ? args.allowedVlans : undefined;
            resourceInputs["allowedVlansAll"] = args ? args.allowedVlansAll : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["discardMode"] = args ? args.discardMode : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fortilink"] = args ? args.fortilink : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["untaggedVlans"] = args ? args.untaggedVlans : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchcontrollerVlanpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchcontrollerVlanpolicy resources.
 */
export interface SwitchcontrollerVlanpolicyState {
    allowedVlans?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerVlanpolicyAllowedVlan>[]>;
    allowedVlansAll?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    discardMode?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fortilink?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    untaggedVlans?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerVlanpolicyUntaggedVlan>[]>;
    vdomparam?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchcontrollerVlanpolicy resource.
 */
export interface SwitchcontrollerVlanpolicyArgs {
    allowedVlans?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerVlanpolicyAllowedVlan>[]>;
    allowedVlansAll?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    discardMode?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fortilink?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    untaggedVlans?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerVlanpolicyUntaggedVlan>[]>;
    vdomparam?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
}
