// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemlldpNetworkpolicy extends pulumi.CustomResource {
    /**
     * Get an existing SystemlldpNetworkpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemlldpNetworkpolicyState, opts?: pulumi.CustomResourceOptions): SystemlldpNetworkpolicy {
        return new SystemlldpNetworkpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemlldpNetworkpolicy:SystemlldpNetworkpolicy';

    /**
     * Returns true if the given object is an instance of SystemlldpNetworkpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemlldpNetworkpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemlldpNetworkpolicy.__pulumiType;
    }

    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly guest!: pulumi.Output<outputs.SystemlldpNetworkpolicyGuest | undefined>;
    public readonly guestVoiceSignaling!: pulumi.Output<outputs.SystemlldpNetworkpolicyGuestVoiceSignaling | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly softphone!: pulumi.Output<outputs.SystemlldpNetworkpolicySoftphone | undefined>;
    public readonly streamingVideo!: pulumi.Output<outputs.SystemlldpNetworkpolicyStreamingVideo | undefined>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly videoConferencing!: pulumi.Output<outputs.SystemlldpNetworkpolicyVideoConferencing | undefined>;
    public readonly videoSignaling!: pulumi.Output<outputs.SystemlldpNetworkpolicyVideoSignaling | undefined>;
    public readonly voice!: pulumi.Output<outputs.SystemlldpNetworkpolicyVoice | undefined>;
    public readonly voiceSignaling!: pulumi.Output<outputs.SystemlldpNetworkpolicyVoiceSignaling | undefined>;

    /**
     * Create a SystemlldpNetworkpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemlldpNetworkpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemlldpNetworkpolicyArgs | SystemlldpNetworkpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemlldpNetworkpolicyState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["guest"] = state ? state.guest : undefined;
            resourceInputs["guestVoiceSignaling"] = state ? state.guestVoiceSignaling : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["softphone"] = state ? state.softphone : undefined;
            resourceInputs["streamingVideo"] = state ? state.streamingVideo : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["videoConferencing"] = state ? state.videoConferencing : undefined;
            resourceInputs["videoSignaling"] = state ? state.videoSignaling : undefined;
            resourceInputs["voice"] = state ? state.voice : undefined;
            resourceInputs["voiceSignaling"] = state ? state.voiceSignaling : undefined;
        } else {
            const args = argsOrState as SystemlldpNetworkpolicyArgs | undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["guest"] = args ? args.guest : undefined;
            resourceInputs["guestVoiceSignaling"] = args ? args.guestVoiceSignaling : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["softphone"] = args ? args.softphone : undefined;
            resourceInputs["streamingVideo"] = args ? args.streamingVideo : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["videoConferencing"] = args ? args.videoConferencing : undefined;
            resourceInputs["videoSignaling"] = args ? args.videoSignaling : undefined;
            resourceInputs["voice"] = args ? args.voice : undefined;
            resourceInputs["voiceSignaling"] = args ? args.voiceSignaling : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemlldpNetworkpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemlldpNetworkpolicy resources.
 */
export interface SystemlldpNetworkpolicyState {
    comment?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    guest?: pulumi.Input<inputs.SystemlldpNetworkpolicyGuest>;
    guestVoiceSignaling?: pulumi.Input<inputs.SystemlldpNetworkpolicyGuestVoiceSignaling>;
    name?: pulumi.Input<string>;
    softphone?: pulumi.Input<inputs.SystemlldpNetworkpolicySoftphone>;
    streamingVideo?: pulumi.Input<inputs.SystemlldpNetworkpolicyStreamingVideo>;
    vdomparam?: pulumi.Input<string>;
    videoConferencing?: pulumi.Input<inputs.SystemlldpNetworkpolicyVideoConferencing>;
    videoSignaling?: pulumi.Input<inputs.SystemlldpNetworkpolicyVideoSignaling>;
    voice?: pulumi.Input<inputs.SystemlldpNetworkpolicyVoice>;
    voiceSignaling?: pulumi.Input<inputs.SystemlldpNetworkpolicyVoiceSignaling>;
}

/**
 * The set of arguments for constructing a SystemlldpNetworkpolicy resource.
 */
export interface SystemlldpNetworkpolicyArgs {
    comment?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    guest?: pulumi.Input<inputs.SystemlldpNetworkpolicyGuest>;
    guestVoiceSignaling?: pulumi.Input<inputs.SystemlldpNetworkpolicyGuestVoiceSignaling>;
    name?: pulumi.Input<string>;
    softphone?: pulumi.Input<inputs.SystemlldpNetworkpolicySoftphone>;
    streamingVideo?: pulumi.Input<inputs.SystemlldpNetworkpolicyStreamingVideo>;
    vdomparam?: pulumi.Input<string>;
    videoConferencing?: pulumi.Input<inputs.SystemlldpNetworkpolicyVideoConferencing>;
    videoSignaling?: pulumi.Input<inputs.SystemlldpNetworkpolicyVideoSignaling>;
    voice?: pulumi.Input<inputs.SystemlldpNetworkpolicyVoice>;
    voiceSignaling?: pulumi.Input<inputs.SystemlldpNetworkpolicyVoiceSignaling>;
}
