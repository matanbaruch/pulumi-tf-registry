// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwitchcontrollerStormcontrolpolicy extends pulumi.CustomResource {
    /**
     * Get an existing SwitchcontrollerStormcontrolpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchcontrollerStormcontrolpolicyState, opts?: pulumi.CustomResourceOptions): SwitchcontrollerStormcontrolpolicy {
        return new SwitchcontrollerStormcontrolpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/switchcontrollerStormcontrolpolicy:SwitchcontrollerStormcontrolpolicy';

    /**
     * Returns true if the given object is an instance of SwitchcontrollerStormcontrolpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchcontrollerStormcontrolpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchcontrollerStormcontrolpolicy.__pulumiType;
    }

    public readonly broadcast!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly rate!: pulumi.Output<number>;
    public readonly stormControlMode!: pulumi.Output<string>;
    public readonly unknownMulticast!: pulumi.Output<string>;
    public readonly unknownUnicast!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a SwitchcontrollerStormcontrolpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchcontrollerStormcontrolpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchcontrollerStormcontrolpolicyArgs | SwitchcontrollerStormcontrolpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchcontrollerStormcontrolpolicyState | undefined;
            resourceInputs["broadcast"] = state ? state.broadcast : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rate"] = state ? state.rate : undefined;
            resourceInputs["stormControlMode"] = state ? state.stormControlMode : undefined;
            resourceInputs["unknownMulticast"] = state ? state.unknownMulticast : undefined;
            resourceInputs["unknownUnicast"] = state ? state.unknownUnicast : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SwitchcontrollerStormcontrolpolicyArgs | undefined;
            resourceInputs["broadcast"] = args ? args.broadcast : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rate"] = args ? args.rate : undefined;
            resourceInputs["stormControlMode"] = args ? args.stormControlMode : undefined;
            resourceInputs["unknownMulticast"] = args ? args.unknownMulticast : undefined;
            resourceInputs["unknownUnicast"] = args ? args.unknownUnicast : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchcontrollerStormcontrolpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchcontrollerStormcontrolpolicy resources.
 */
export interface SwitchcontrollerStormcontrolpolicyState {
    broadcast?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    rate?: pulumi.Input<number>;
    stormControlMode?: pulumi.Input<string>;
    unknownMulticast?: pulumi.Input<string>;
    unknownUnicast?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchcontrollerStormcontrolpolicy resource.
 */
export interface SwitchcontrollerStormcontrolpolicyArgs {
    broadcast?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    rate?: pulumi.Input<number>;
    stormControlMode?: pulumi.Input<string>;
    unknownMulticast?: pulumi.Input<string>;
    unknownUnicast?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
