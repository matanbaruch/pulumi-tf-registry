// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogThreatweight extends pulumi.CustomResource {
    /**
     * Get an existing LogThreatweight resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogThreatweightState, opts?: pulumi.CustomResourceOptions): LogThreatweight {
        return new LogThreatweight(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/logThreatweight:LogThreatweight';

    /**
     * Returns true if the given object is an instance of LogThreatweight.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogThreatweight {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogThreatweight.__pulumiType;
    }

    public readonly applications!: pulumi.Output<outputs.LogThreatweightApplication[] | undefined>;
    public readonly blockedConnection!: pulumi.Output<string>;
    public readonly botnetConnectionDetected!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly failedConnection!: pulumi.Output<string>;
    public readonly geolocations!: pulumi.Output<outputs.LogThreatweightGeolocation[] | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly ips!: pulumi.Output<outputs.LogThreatweightIps | undefined>;
    public readonly level!: pulumi.Output<outputs.LogThreatweightLevel | undefined>;
    public readonly malware!: pulumi.Output<outputs.LogThreatweightMalware | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly urlBlockDetected!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly webs!: pulumi.Output<outputs.LogThreatweightWeb[] | undefined>;

    /**
     * Create a LogThreatweight resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LogThreatweightArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogThreatweightArgs | LogThreatweightState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogThreatweightState | undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["blockedConnection"] = state ? state.blockedConnection : undefined;
            resourceInputs["botnetConnectionDetected"] = state ? state.botnetConnectionDetected : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["failedConnection"] = state ? state.failedConnection : undefined;
            resourceInputs["geolocations"] = state ? state.geolocations : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["malware"] = state ? state.malware : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["urlBlockDetected"] = state ? state.urlBlockDetected : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["webs"] = state ? state.webs : undefined;
        } else {
            const args = argsOrState as LogThreatweightArgs | undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["blockedConnection"] = args ? args.blockedConnection : undefined;
            resourceInputs["botnetConnectionDetected"] = args ? args.botnetConnectionDetected : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["failedConnection"] = args ? args.failedConnection : undefined;
            resourceInputs["geolocations"] = args ? args.geolocations : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["ips"] = args ? args.ips : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["malware"] = args ? args.malware : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["urlBlockDetected"] = args ? args.urlBlockDetected : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["webs"] = args ? args.webs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogThreatweight.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogThreatweight resources.
 */
export interface LogThreatweightState {
    applications?: pulumi.Input<pulumi.Input<inputs.LogThreatweightApplication>[]>;
    blockedConnection?: pulumi.Input<string>;
    botnetConnectionDetected?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    failedConnection?: pulumi.Input<string>;
    geolocations?: pulumi.Input<pulumi.Input<inputs.LogThreatweightGeolocation>[]>;
    getAllTables?: pulumi.Input<string>;
    ips?: pulumi.Input<inputs.LogThreatweightIps>;
    level?: pulumi.Input<inputs.LogThreatweightLevel>;
    malware?: pulumi.Input<inputs.LogThreatweightMalware>;
    status?: pulumi.Input<string>;
    urlBlockDetected?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    webs?: pulumi.Input<pulumi.Input<inputs.LogThreatweightWeb>[]>;
}

/**
 * The set of arguments for constructing a LogThreatweight resource.
 */
export interface LogThreatweightArgs {
    applications?: pulumi.Input<pulumi.Input<inputs.LogThreatweightApplication>[]>;
    blockedConnection?: pulumi.Input<string>;
    botnetConnectionDetected?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    failedConnection?: pulumi.Input<string>;
    geolocations?: pulumi.Input<pulumi.Input<inputs.LogThreatweightGeolocation>[]>;
    getAllTables?: pulumi.Input<string>;
    ips?: pulumi.Input<inputs.LogThreatweightIps>;
    level?: pulumi.Input<inputs.LogThreatweightLevel>;
    malware?: pulumi.Input<inputs.LogThreatweightMalware>;
    status?: pulumi.Input<string>;
    urlBlockDetected?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    webs?: pulumi.Input<pulumi.Input<inputs.LogThreatweightWeb>[]>;
}
