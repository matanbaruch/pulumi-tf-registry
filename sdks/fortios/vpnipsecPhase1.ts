// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnipsecPhase1 extends pulumi.CustomResource {
    /**
     * Get an existing VpnipsecPhase1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnipsecPhase1State, opts?: pulumi.CustomResourceOptions): VpnipsecPhase1 {
        return new VpnipsecPhase1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vpnipsecPhase1:VpnipsecPhase1';

    /**
     * Returns true if the given object is an instance of VpnipsecPhase1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnipsecPhase1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnipsecPhase1.__pulumiType;
    }

    public readonly acctVerify!: pulumi.Output<string>;
    public readonly addGwRoute!: pulumi.Output<string>;
    public readonly addRoute!: pulumi.Output<string>;
    public readonly assignIp!: pulumi.Output<string>;
    public readonly assignIpFrom!: pulumi.Output<string>;
    public readonly authmethod!: pulumi.Output<string>;
    public readonly authmethodRemote!: pulumi.Output<string>;
    public readonly authpasswd!: pulumi.Output<string | undefined>;
    public readonly authusr!: pulumi.Output<string>;
    public readonly authusrgrp!: pulumi.Output<string>;
    public readonly autoNegotiate!: pulumi.Output<string>;
    public readonly azureAdAutoconnect!: pulumi.Output<string>;
    public readonly backupGateways!: pulumi.Output<outputs.VpnipsecPhase1BackupGateway[] | undefined>;
    public readonly banner!: pulumi.Output<string | undefined>;
    public readonly certIdValidation!: pulumi.Output<string>;
    public readonly certPeerUsernameStrip!: pulumi.Output<string>;
    public readonly certPeerUsernameValidation!: pulumi.Output<string>;
    public readonly certTrustStore!: pulumi.Output<string>;
    public readonly certificates!: pulumi.Output<outputs.VpnipsecPhase1Certificate[] | undefined>;
    public readonly childlessIke!: pulumi.Output<string>;
    public readonly clientAutoNegotiate!: pulumi.Output<string>;
    public readonly clientKeepAlive!: pulumi.Output<string>;
    public readonly clientResume!: pulumi.Output<string>;
    public readonly clientResumeInterval!: pulumi.Output<number>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly devId!: pulumi.Output<string>;
    public readonly devIdNotification!: pulumi.Output<string>;
    public readonly dhcp6RaLinkaddr!: pulumi.Output<string>;
    public readonly dhcpRaGiaddr!: pulumi.Output<string>;
    public readonly dhgrp!: pulumi.Output<string>;
    public readonly digitalSignatureAuth!: pulumi.Output<string>;
    public readonly distance!: pulumi.Output<number>;
    public readonly dnsMode!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public readonly dpd!: pulumi.Output<string>;
    public readonly dpdRetrycount!: pulumi.Output<number>;
    public readonly dpdRetryinterval!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly eap!: pulumi.Output<string>;
    public readonly eapCertAuth!: pulumi.Output<string>;
    public readonly eapExcludePeergrp!: pulumi.Output<string>;
    public readonly eapIdentity!: pulumi.Output<string>;
    public readonly emsSnCheck!: pulumi.Output<string>;
    public readonly enforceUniqueId!: pulumi.Output<string>;
    public readonly esn!: pulumi.Output<string>;
    public readonly exchangeFgtDeviceId!: pulumi.Output<string>;
    public readonly fallbackTcpThreshold!: pulumi.Output<number>;
    public readonly fecBase!: pulumi.Output<number>;
    public readonly fecCodec!: pulumi.Output<number>;
    public readonly fecCodecString!: pulumi.Output<string>;
    public readonly fecEgress!: pulumi.Output<string>;
    public readonly fecHealthCheck!: pulumi.Output<string>;
    public readonly fecIngress!: pulumi.Output<string>;
    public readonly fecMappingProfile!: pulumi.Output<string>;
    public readonly fecReceiveTimeout!: pulumi.Output<number>;
    public readonly fecRedundant!: pulumi.Output<number>;
    public readonly fecSendTimeout!: pulumi.Output<number>;
    public readonly fgspSync!: pulumi.Output<string>;
    public readonly forticlientEnforcement!: pulumi.Output<string>;
    public readonly fortinetEsp!: pulumi.Output<string>;
    public readonly fragmentation!: pulumi.Output<string>;
    public readonly fragmentationMtu!: pulumi.Output<number>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly groupAuthentication!: pulumi.Output<string>;
    public readonly groupAuthenticationSecret!: pulumi.Output<string | undefined>;
    public readonly haSyncEspSeqno!: pulumi.Output<string>;
    public readonly idleTimeout!: pulumi.Output<string>;
    public readonly idleTimeoutinterval!: pulumi.Output<number>;
    public readonly ikeVersion!: pulumi.Output<string>;
    public readonly inboundDscpCopy!: pulumi.Output<string>;
    public readonly includeLocalLan!: pulumi.Output<string>;
    public readonly interface!: pulumi.Output<string>;
    public readonly internalDomainLists!: pulumi.Output<outputs.VpnipsecPhase1InternalDomainList[] | undefined>;
    public readonly ipDelayInterval!: pulumi.Output<number>;
    public readonly ipv4DnsServer1!: pulumi.Output<string>;
    public readonly ipv4DnsServer2!: pulumi.Output<string>;
    public readonly ipv4DnsServer3!: pulumi.Output<string>;
    public readonly ipv4EndIp!: pulumi.Output<string>;
    public readonly ipv4ExcludeRanges!: pulumi.Output<outputs.VpnipsecPhase1Ipv4ExcludeRange[] | undefined>;
    public readonly ipv4Name!: pulumi.Output<string>;
    public readonly ipv4Netmask!: pulumi.Output<string>;
    public readonly ipv4SplitExclude!: pulumi.Output<string>;
    public readonly ipv4SplitInclude!: pulumi.Output<string>;
    public readonly ipv4StartIp!: pulumi.Output<string>;
    public readonly ipv4WinsServer1!: pulumi.Output<string>;
    public readonly ipv4WinsServer2!: pulumi.Output<string>;
    public readonly ipv6DnsServer1!: pulumi.Output<string>;
    public readonly ipv6DnsServer2!: pulumi.Output<string>;
    public readonly ipv6DnsServer3!: pulumi.Output<string>;
    public readonly ipv6EndIp!: pulumi.Output<string>;
    public readonly ipv6ExcludeRanges!: pulumi.Output<outputs.VpnipsecPhase1Ipv6ExcludeRange[] | undefined>;
    public readonly ipv6Name!: pulumi.Output<string>;
    public readonly ipv6Prefix!: pulumi.Output<number>;
    public readonly ipv6SplitExclude!: pulumi.Output<string>;
    public readonly ipv6SplitInclude!: pulumi.Output<string>;
    public readonly ipv6StartIp!: pulumi.Output<string>;
    public readonly keepalive!: pulumi.Output<number>;
    public readonly keylife!: pulumi.Output<number>;
    public readonly kms!: pulumi.Output<string>;
    public readonly linkCost!: pulumi.Output<number>;
    public readonly localGw!: pulumi.Output<string>;
    public readonly localid!: pulumi.Output<string>;
    public readonly localidType!: pulumi.Output<string>;
    public readonly loopbackAsymroute!: pulumi.Output<string>;
    public readonly meshSelectorType!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly modeCfg!: pulumi.Output<string>;
    public readonly modeCfgAllowClientSelector!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nattraversal!: pulumi.Output<string>;
    public readonly negotiateTimeout!: pulumi.Output<number>;
    public readonly networkId!: pulumi.Output<number>;
    public readonly networkOverlay!: pulumi.Output<string>;
    public readonly npuOffload!: pulumi.Output<string>;
    public readonly peer!: pulumi.Output<string>;
    public readonly peergrp!: pulumi.Output<string>;
    public readonly peerid!: pulumi.Output<string>;
    public readonly peertype!: pulumi.Output<string>;
    public readonly ppk!: pulumi.Output<string>;
    public readonly ppkIdentity!: pulumi.Output<string>;
    public readonly ppkSecret!: pulumi.Output<string | undefined>;
    public readonly priority!: pulumi.Output<number>;
    public readonly proposal!: pulumi.Output<string>;
    public readonly psksecret!: pulumi.Output<string>;
    public readonly psksecretRemote!: pulumi.Output<string | undefined>;
    public readonly qkd!: pulumi.Output<string>;
    public readonly qkdProfile!: pulumi.Output<string>;
    public readonly reauth!: pulumi.Output<string>;
    public readonly rekey!: pulumi.Output<string>;
    public readonly remoteGw!: pulumi.Output<string>;
    public readonly remoteGw6Country!: pulumi.Output<string>;
    public readonly remoteGw6EndIp!: pulumi.Output<string>;
    public readonly remoteGw6Match!: pulumi.Output<string>;
    public readonly remoteGw6StartIp!: pulumi.Output<string>;
    public readonly remoteGw6Subnet!: pulumi.Output<string>;
    public readonly remoteGwCountry!: pulumi.Output<string>;
    public readonly remoteGwEndIp!: pulumi.Output<string>;
    public readonly remoteGwMatch!: pulumi.Output<string>;
    public readonly remoteGwStartIp!: pulumi.Output<string>;
    public readonly remoteGwSubnet!: pulumi.Output<string>;
    public readonly remotegwDdns!: pulumi.Output<string>;
    public readonly rsaSignatureFormat!: pulumi.Output<string>;
    public readonly rsaSignatureHashOverride!: pulumi.Output<string>;
    public readonly savePassword!: pulumi.Output<string>;
    public readonly sendCertChain!: pulumi.Output<string>;
    public readonly signatureHashAlg!: pulumi.Output<string>;
    public readonly splitIncludeService!: pulumi.Output<string>;
    public readonly suiteB!: pulumi.Output<string>;
    public readonly transport!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly unitySupport!: pulumi.Output<string>;
    public readonly usrgrp!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly wizardType!: pulumi.Output<string>;
    public readonly xauthtype!: pulumi.Output<string>;

    /**
     * Create a VpnipsecPhase1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnipsecPhase1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnipsecPhase1Args | VpnipsecPhase1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnipsecPhase1State | undefined;
            resourceInputs["acctVerify"] = state ? state.acctVerify : undefined;
            resourceInputs["addGwRoute"] = state ? state.addGwRoute : undefined;
            resourceInputs["addRoute"] = state ? state.addRoute : undefined;
            resourceInputs["assignIp"] = state ? state.assignIp : undefined;
            resourceInputs["assignIpFrom"] = state ? state.assignIpFrom : undefined;
            resourceInputs["authmethod"] = state ? state.authmethod : undefined;
            resourceInputs["authmethodRemote"] = state ? state.authmethodRemote : undefined;
            resourceInputs["authpasswd"] = state ? state.authpasswd : undefined;
            resourceInputs["authusr"] = state ? state.authusr : undefined;
            resourceInputs["authusrgrp"] = state ? state.authusrgrp : undefined;
            resourceInputs["autoNegotiate"] = state ? state.autoNegotiate : undefined;
            resourceInputs["azureAdAutoconnect"] = state ? state.azureAdAutoconnect : undefined;
            resourceInputs["backupGateways"] = state ? state.backupGateways : undefined;
            resourceInputs["banner"] = state ? state.banner : undefined;
            resourceInputs["certIdValidation"] = state ? state.certIdValidation : undefined;
            resourceInputs["certPeerUsernameStrip"] = state ? state.certPeerUsernameStrip : undefined;
            resourceInputs["certPeerUsernameValidation"] = state ? state.certPeerUsernameValidation : undefined;
            resourceInputs["certTrustStore"] = state ? state.certTrustStore : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["childlessIke"] = state ? state.childlessIke : undefined;
            resourceInputs["clientAutoNegotiate"] = state ? state.clientAutoNegotiate : undefined;
            resourceInputs["clientKeepAlive"] = state ? state.clientKeepAlive : undefined;
            resourceInputs["clientResume"] = state ? state.clientResume : undefined;
            resourceInputs["clientResumeInterval"] = state ? state.clientResumeInterval : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["devId"] = state ? state.devId : undefined;
            resourceInputs["devIdNotification"] = state ? state.devIdNotification : undefined;
            resourceInputs["dhcp6RaLinkaddr"] = state ? state.dhcp6RaLinkaddr : undefined;
            resourceInputs["dhcpRaGiaddr"] = state ? state.dhcpRaGiaddr : undefined;
            resourceInputs["dhgrp"] = state ? state.dhgrp : undefined;
            resourceInputs["digitalSignatureAuth"] = state ? state.digitalSignatureAuth : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["dnsMode"] = state ? state.dnsMode : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["dpd"] = state ? state.dpd : undefined;
            resourceInputs["dpdRetrycount"] = state ? state.dpdRetrycount : undefined;
            resourceInputs["dpdRetryinterval"] = state ? state.dpdRetryinterval : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["eap"] = state ? state.eap : undefined;
            resourceInputs["eapCertAuth"] = state ? state.eapCertAuth : undefined;
            resourceInputs["eapExcludePeergrp"] = state ? state.eapExcludePeergrp : undefined;
            resourceInputs["eapIdentity"] = state ? state.eapIdentity : undefined;
            resourceInputs["emsSnCheck"] = state ? state.emsSnCheck : undefined;
            resourceInputs["enforceUniqueId"] = state ? state.enforceUniqueId : undefined;
            resourceInputs["esn"] = state ? state.esn : undefined;
            resourceInputs["exchangeFgtDeviceId"] = state ? state.exchangeFgtDeviceId : undefined;
            resourceInputs["fallbackTcpThreshold"] = state ? state.fallbackTcpThreshold : undefined;
            resourceInputs["fecBase"] = state ? state.fecBase : undefined;
            resourceInputs["fecCodec"] = state ? state.fecCodec : undefined;
            resourceInputs["fecCodecString"] = state ? state.fecCodecString : undefined;
            resourceInputs["fecEgress"] = state ? state.fecEgress : undefined;
            resourceInputs["fecHealthCheck"] = state ? state.fecHealthCheck : undefined;
            resourceInputs["fecIngress"] = state ? state.fecIngress : undefined;
            resourceInputs["fecMappingProfile"] = state ? state.fecMappingProfile : undefined;
            resourceInputs["fecReceiveTimeout"] = state ? state.fecReceiveTimeout : undefined;
            resourceInputs["fecRedundant"] = state ? state.fecRedundant : undefined;
            resourceInputs["fecSendTimeout"] = state ? state.fecSendTimeout : undefined;
            resourceInputs["fgspSync"] = state ? state.fgspSync : undefined;
            resourceInputs["forticlientEnforcement"] = state ? state.forticlientEnforcement : undefined;
            resourceInputs["fortinetEsp"] = state ? state.fortinetEsp : undefined;
            resourceInputs["fragmentation"] = state ? state.fragmentation : undefined;
            resourceInputs["fragmentationMtu"] = state ? state.fragmentationMtu : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["groupAuthentication"] = state ? state.groupAuthentication : undefined;
            resourceInputs["groupAuthenticationSecret"] = state ? state.groupAuthenticationSecret : undefined;
            resourceInputs["haSyncEspSeqno"] = state ? state.haSyncEspSeqno : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["idleTimeoutinterval"] = state ? state.idleTimeoutinterval : undefined;
            resourceInputs["ikeVersion"] = state ? state.ikeVersion : undefined;
            resourceInputs["inboundDscpCopy"] = state ? state.inboundDscpCopy : undefined;
            resourceInputs["includeLocalLan"] = state ? state.includeLocalLan : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["internalDomainLists"] = state ? state.internalDomainLists : undefined;
            resourceInputs["ipDelayInterval"] = state ? state.ipDelayInterval : undefined;
            resourceInputs["ipv4DnsServer1"] = state ? state.ipv4DnsServer1 : undefined;
            resourceInputs["ipv4DnsServer2"] = state ? state.ipv4DnsServer2 : undefined;
            resourceInputs["ipv4DnsServer3"] = state ? state.ipv4DnsServer3 : undefined;
            resourceInputs["ipv4EndIp"] = state ? state.ipv4EndIp : undefined;
            resourceInputs["ipv4ExcludeRanges"] = state ? state.ipv4ExcludeRanges : undefined;
            resourceInputs["ipv4Name"] = state ? state.ipv4Name : undefined;
            resourceInputs["ipv4Netmask"] = state ? state.ipv4Netmask : undefined;
            resourceInputs["ipv4SplitExclude"] = state ? state.ipv4SplitExclude : undefined;
            resourceInputs["ipv4SplitInclude"] = state ? state.ipv4SplitInclude : undefined;
            resourceInputs["ipv4StartIp"] = state ? state.ipv4StartIp : undefined;
            resourceInputs["ipv4WinsServer1"] = state ? state.ipv4WinsServer1 : undefined;
            resourceInputs["ipv4WinsServer2"] = state ? state.ipv4WinsServer2 : undefined;
            resourceInputs["ipv6DnsServer1"] = state ? state.ipv6DnsServer1 : undefined;
            resourceInputs["ipv6DnsServer2"] = state ? state.ipv6DnsServer2 : undefined;
            resourceInputs["ipv6DnsServer3"] = state ? state.ipv6DnsServer3 : undefined;
            resourceInputs["ipv6EndIp"] = state ? state.ipv6EndIp : undefined;
            resourceInputs["ipv6ExcludeRanges"] = state ? state.ipv6ExcludeRanges : undefined;
            resourceInputs["ipv6Name"] = state ? state.ipv6Name : undefined;
            resourceInputs["ipv6Prefix"] = state ? state.ipv6Prefix : undefined;
            resourceInputs["ipv6SplitExclude"] = state ? state.ipv6SplitExclude : undefined;
            resourceInputs["ipv6SplitInclude"] = state ? state.ipv6SplitInclude : undefined;
            resourceInputs["ipv6StartIp"] = state ? state.ipv6StartIp : undefined;
            resourceInputs["keepalive"] = state ? state.keepalive : undefined;
            resourceInputs["keylife"] = state ? state.keylife : undefined;
            resourceInputs["kms"] = state ? state.kms : undefined;
            resourceInputs["linkCost"] = state ? state.linkCost : undefined;
            resourceInputs["localGw"] = state ? state.localGw : undefined;
            resourceInputs["localid"] = state ? state.localid : undefined;
            resourceInputs["localidType"] = state ? state.localidType : undefined;
            resourceInputs["loopbackAsymroute"] = state ? state.loopbackAsymroute : undefined;
            resourceInputs["meshSelectorType"] = state ? state.meshSelectorType : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["modeCfg"] = state ? state.modeCfg : undefined;
            resourceInputs["modeCfgAllowClientSelector"] = state ? state.modeCfgAllowClientSelector : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nattraversal"] = state ? state.nattraversal : undefined;
            resourceInputs["negotiateTimeout"] = state ? state.negotiateTimeout : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["networkOverlay"] = state ? state.networkOverlay : undefined;
            resourceInputs["npuOffload"] = state ? state.npuOffload : undefined;
            resourceInputs["peer"] = state ? state.peer : undefined;
            resourceInputs["peergrp"] = state ? state.peergrp : undefined;
            resourceInputs["peerid"] = state ? state.peerid : undefined;
            resourceInputs["peertype"] = state ? state.peertype : undefined;
            resourceInputs["ppk"] = state ? state.ppk : undefined;
            resourceInputs["ppkIdentity"] = state ? state.ppkIdentity : undefined;
            resourceInputs["ppkSecret"] = state ? state.ppkSecret : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["proposal"] = state ? state.proposal : undefined;
            resourceInputs["psksecret"] = state ? state.psksecret : undefined;
            resourceInputs["psksecretRemote"] = state ? state.psksecretRemote : undefined;
            resourceInputs["qkd"] = state ? state.qkd : undefined;
            resourceInputs["qkdProfile"] = state ? state.qkdProfile : undefined;
            resourceInputs["reauth"] = state ? state.reauth : undefined;
            resourceInputs["rekey"] = state ? state.rekey : undefined;
            resourceInputs["remoteGw"] = state ? state.remoteGw : undefined;
            resourceInputs["remoteGw6Country"] = state ? state.remoteGw6Country : undefined;
            resourceInputs["remoteGw6EndIp"] = state ? state.remoteGw6EndIp : undefined;
            resourceInputs["remoteGw6Match"] = state ? state.remoteGw6Match : undefined;
            resourceInputs["remoteGw6StartIp"] = state ? state.remoteGw6StartIp : undefined;
            resourceInputs["remoteGw6Subnet"] = state ? state.remoteGw6Subnet : undefined;
            resourceInputs["remoteGwCountry"] = state ? state.remoteGwCountry : undefined;
            resourceInputs["remoteGwEndIp"] = state ? state.remoteGwEndIp : undefined;
            resourceInputs["remoteGwMatch"] = state ? state.remoteGwMatch : undefined;
            resourceInputs["remoteGwStartIp"] = state ? state.remoteGwStartIp : undefined;
            resourceInputs["remoteGwSubnet"] = state ? state.remoteGwSubnet : undefined;
            resourceInputs["remotegwDdns"] = state ? state.remotegwDdns : undefined;
            resourceInputs["rsaSignatureFormat"] = state ? state.rsaSignatureFormat : undefined;
            resourceInputs["rsaSignatureHashOverride"] = state ? state.rsaSignatureHashOverride : undefined;
            resourceInputs["savePassword"] = state ? state.savePassword : undefined;
            resourceInputs["sendCertChain"] = state ? state.sendCertChain : undefined;
            resourceInputs["signatureHashAlg"] = state ? state.signatureHashAlg : undefined;
            resourceInputs["splitIncludeService"] = state ? state.splitIncludeService : undefined;
            resourceInputs["suiteB"] = state ? state.suiteB : undefined;
            resourceInputs["transport"] = state ? state.transport : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unitySupport"] = state ? state.unitySupport : undefined;
            resourceInputs["usrgrp"] = state ? state.usrgrp : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["wizardType"] = state ? state.wizardType : undefined;
            resourceInputs["xauthtype"] = state ? state.xauthtype : undefined;
        } else {
            const args = argsOrState as VpnipsecPhase1Args | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.proposal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proposal'");
            }
            if ((!args || args.psksecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'psksecret'");
            }
            resourceInputs["acctVerify"] = args ? args.acctVerify : undefined;
            resourceInputs["addGwRoute"] = args ? args.addGwRoute : undefined;
            resourceInputs["addRoute"] = args ? args.addRoute : undefined;
            resourceInputs["assignIp"] = args ? args.assignIp : undefined;
            resourceInputs["assignIpFrom"] = args ? args.assignIpFrom : undefined;
            resourceInputs["authmethod"] = args ? args.authmethod : undefined;
            resourceInputs["authmethodRemote"] = args ? args.authmethodRemote : undefined;
            resourceInputs["authpasswd"] = args?.authpasswd ? pulumi.secret(args.authpasswd) : undefined;
            resourceInputs["authusr"] = args ? args.authusr : undefined;
            resourceInputs["authusrgrp"] = args ? args.authusrgrp : undefined;
            resourceInputs["autoNegotiate"] = args ? args.autoNegotiate : undefined;
            resourceInputs["azureAdAutoconnect"] = args ? args.azureAdAutoconnect : undefined;
            resourceInputs["backupGateways"] = args ? args.backupGateways : undefined;
            resourceInputs["banner"] = args ? args.banner : undefined;
            resourceInputs["certIdValidation"] = args ? args.certIdValidation : undefined;
            resourceInputs["certPeerUsernameStrip"] = args ? args.certPeerUsernameStrip : undefined;
            resourceInputs["certPeerUsernameValidation"] = args ? args.certPeerUsernameValidation : undefined;
            resourceInputs["certTrustStore"] = args ? args.certTrustStore : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["childlessIke"] = args ? args.childlessIke : undefined;
            resourceInputs["clientAutoNegotiate"] = args ? args.clientAutoNegotiate : undefined;
            resourceInputs["clientKeepAlive"] = args ? args.clientKeepAlive : undefined;
            resourceInputs["clientResume"] = args ? args.clientResume : undefined;
            resourceInputs["clientResumeInterval"] = args ? args.clientResumeInterval : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["devId"] = args ? args.devId : undefined;
            resourceInputs["devIdNotification"] = args ? args.devIdNotification : undefined;
            resourceInputs["dhcp6RaLinkaddr"] = args ? args.dhcp6RaLinkaddr : undefined;
            resourceInputs["dhcpRaGiaddr"] = args ? args.dhcpRaGiaddr : undefined;
            resourceInputs["dhgrp"] = args ? args.dhgrp : undefined;
            resourceInputs["digitalSignatureAuth"] = args ? args.digitalSignatureAuth : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["dnsMode"] = args ? args.dnsMode : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["dpd"] = args ? args.dpd : undefined;
            resourceInputs["dpdRetrycount"] = args ? args.dpdRetrycount : undefined;
            resourceInputs["dpdRetryinterval"] = args ? args.dpdRetryinterval : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["eap"] = args ? args.eap : undefined;
            resourceInputs["eapCertAuth"] = args ? args.eapCertAuth : undefined;
            resourceInputs["eapExcludePeergrp"] = args ? args.eapExcludePeergrp : undefined;
            resourceInputs["eapIdentity"] = args ? args.eapIdentity : undefined;
            resourceInputs["emsSnCheck"] = args ? args.emsSnCheck : undefined;
            resourceInputs["enforceUniqueId"] = args ? args.enforceUniqueId : undefined;
            resourceInputs["esn"] = args ? args.esn : undefined;
            resourceInputs["exchangeFgtDeviceId"] = args ? args.exchangeFgtDeviceId : undefined;
            resourceInputs["fallbackTcpThreshold"] = args ? args.fallbackTcpThreshold : undefined;
            resourceInputs["fecBase"] = args ? args.fecBase : undefined;
            resourceInputs["fecCodec"] = args ? args.fecCodec : undefined;
            resourceInputs["fecCodecString"] = args ? args.fecCodecString : undefined;
            resourceInputs["fecEgress"] = args ? args.fecEgress : undefined;
            resourceInputs["fecHealthCheck"] = args ? args.fecHealthCheck : undefined;
            resourceInputs["fecIngress"] = args ? args.fecIngress : undefined;
            resourceInputs["fecMappingProfile"] = args ? args.fecMappingProfile : undefined;
            resourceInputs["fecReceiveTimeout"] = args ? args.fecReceiveTimeout : undefined;
            resourceInputs["fecRedundant"] = args ? args.fecRedundant : undefined;
            resourceInputs["fecSendTimeout"] = args ? args.fecSendTimeout : undefined;
            resourceInputs["fgspSync"] = args ? args.fgspSync : undefined;
            resourceInputs["forticlientEnforcement"] = args ? args.forticlientEnforcement : undefined;
            resourceInputs["fortinetEsp"] = args ? args.fortinetEsp : undefined;
            resourceInputs["fragmentation"] = args ? args.fragmentation : undefined;
            resourceInputs["fragmentationMtu"] = args ? args.fragmentationMtu : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["groupAuthentication"] = args ? args.groupAuthentication : undefined;
            resourceInputs["groupAuthenticationSecret"] = args?.groupAuthenticationSecret ? pulumi.secret(args.groupAuthenticationSecret) : undefined;
            resourceInputs["haSyncEspSeqno"] = args ? args.haSyncEspSeqno : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["idleTimeoutinterval"] = args ? args.idleTimeoutinterval : undefined;
            resourceInputs["ikeVersion"] = args ? args.ikeVersion : undefined;
            resourceInputs["inboundDscpCopy"] = args ? args.inboundDscpCopy : undefined;
            resourceInputs["includeLocalLan"] = args ? args.includeLocalLan : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["internalDomainLists"] = args ? args.internalDomainLists : undefined;
            resourceInputs["ipDelayInterval"] = args ? args.ipDelayInterval : undefined;
            resourceInputs["ipv4DnsServer1"] = args ? args.ipv4DnsServer1 : undefined;
            resourceInputs["ipv4DnsServer2"] = args ? args.ipv4DnsServer2 : undefined;
            resourceInputs["ipv4DnsServer3"] = args ? args.ipv4DnsServer3 : undefined;
            resourceInputs["ipv4EndIp"] = args ? args.ipv4EndIp : undefined;
            resourceInputs["ipv4ExcludeRanges"] = args ? args.ipv4ExcludeRanges : undefined;
            resourceInputs["ipv4Name"] = args ? args.ipv4Name : undefined;
            resourceInputs["ipv4Netmask"] = args ? args.ipv4Netmask : undefined;
            resourceInputs["ipv4SplitExclude"] = args ? args.ipv4SplitExclude : undefined;
            resourceInputs["ipv4SplitInclude"] = args ? args.ipv4SplitInclude : undefined;
            resourceInputs["ipv4StartIp"] = args ? args.ipv4StartIp : undefined;
            resourceInputs["ipv4WinsServer1"] = args ? args.ipv4WinsServer1 : undefined;
            resourceInputs["ipv4WinsServer2"] = args ? args.ipv4WinsServer2 : undefined;
            resourceInputs["ipv6DnsServer1"] = args ? args.ipv6DnsServer1 : undefined;
            resourceInputs["ipv6DnsServer2"] = args ? args.ipv6DnsServer2 : undefined;
            resourceInputs["ipv6DnsServer3"] = args ? args.ipv6DnsServer3 : undefined;
            resourceInputs["ipv6EndIp"] = args ? args.ipv6EndIp : undefined;
            resourceInputs["ipv6ExcludeRanges"] = args ? args.ipv6ExcludeRanges : undefined;
            resourceInputs["ipv6Name"] = args ? args.ipv6Name : undefined;
            resourceInputs["ipv6Prefix"] = args ? args.ipv6Prefix : undefined;
            resourceInputs["ipv6SplitExclude"] = args ? args.ipv6SplitExclude : undefined;
            resourceInputs["ipv6SplitInclude"] = args ? args.ipv6SplitInclude : undefined;
            resourceInputs["ipv6StartIp"] = args ? args.ipv6StartIp : undefined;
            resourceInputs["keepalive"] = args ? args.keepalive : undefined;
            resourceInputs["keylife"] = args ? args.keylife : undefined;
            resourceInputs["kms"] = args ? args.kms : undefined;
            resourceInputs["linkCost"] = args ? args.linkCost : undefined;
            resourceInputs["localGw"] = args ? args.localGw : undefined;
            resourceInputs["localid"] = args ? args.localid : undefined;
            resourceInputs["localidType"] = args ? args.localidType : undefined;
            resourceInputs["loopbackAsymroute"] = args ? args.loopbackAsymroute : undefined;
            resourceInputs["meshSelectorType"] = args ? args.meshSelectorType : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["modeCfg"] = args ? args.modeCfg : undefined;
            resourceInputs["modeCfgAllowClientSelector"] = args ? args.modeCfgAllowClientSelector : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nattraversal"] = args ? args.nattraversal : undefined;
            resourceInputs["negotiateTimeout"] = args ? args.negotiateTimeout : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["networkOverlay"] = args ? args.networkOverlay : undefined;
            resourceInputs["npuOffload"] = args ? args.npuOffload : undefined;
            resourceInputs["peer"] = args ? args.peer : undefined;
            resourceInputs["peergrp"] = args ? args.peergrp : undefined;
            resourceInputs["peerid"] = args ? args.peerid : undefined;
            resourceInputs["peertype"] = args ? args.peertype : undefined;
            resourceInputs["ppk"] = args ? args.ppk : undefined;
            resourceInputs["ppkIdentity"] = args ? args.ppkIdentity : undefined;
            resourceInputs["ppkSecret"] = args?.ppkSecret ? pulumi.secret(args.ppkSecret) : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["proposal"] = args ? args.proposal : undefined;
            resourceInputs["psksecret"] = args?.psksecret ? pulumi.secret(args.psksecret) : undefined;
            resourceInputs["psksecretRemote"] = args?.psksecretRemote ? pulumi.secret(args.psksecretRemote) : undefined;
            resourceInputs["qkd"] = args ? args.qkd : undefined;
            resourceInputs["qkdProfile"] = args ? args.qkdProfile : undefined;
            resourceInputs["reauth"] = args ? args.reauth : undefined;
            resourceInputs["rekey"] = args ? args.rekey : undefined;
            resourceInputs["remoteGw"] = args ? args.remoteGw : undefined;
            resourceInputs["remoteGw6Country"] = args ? args.remoteGw6Country : undefined;
            resourceInputs["remoteGw6EndIp"] = args ? args.remoteGw6EndIp : undefined;
            resourceInputs["remoteGw6Match"] = args ? args.remoteGw6Match : undefined;
            resourceInputs["remoteGw6StartIp"] = args ? args.remoteGw6StartIp : undefined;
            resourceInputs["remoteGw6Subnet"] = args ? args.remoteGw6Subnet : undefined;
            resourceInputs["remoteGwCountry"] = args ? args.remoteGwCountry : undefined;
            resourceInputs["remoteGwEndIp"] = args ? args.remoteGwEndIp : undefined;
            resourceInputs["remoteGwMatch"] = args ? args.remoteGwMatch : undefined;
            resourceInputs["remoteGwStartIp"] = args ? args.remoteGwStartIp : undefined;
            resourceInputs["remoteGwSubnet"] = args ? args.remoteGwSubnet : undefined;
            resourceInputs["remotegwDdns"] = args ? args.remotegwDdns : undefined;
            resourceInputs["rsaSignatureFormat"] = args ? args.rsaSignatureFormat : undefined;
            resourceInputs["rsaSignatureHashOverride"] = args ? args.rsaSignatureHashOverride : undefined;
            resourceInputs["savePassword"] = args ? args.savePassword : undefined;
            resourceInputs["sendCertChain"] = args ? args.sendCertChain : undefined;
            resourceInputs["signatureHashAlg"] = args ? args.signatureHashAlg : undefined;
            resourceInputs["splitIncludeService"] = args ? args.splitIncludeService : undefined;
            resourceInputs["suiteB"] = args ? args.suiteB : undefined;
            resourceInputs["transport"] = args ? args.transport : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["unitySupport"] = args ? args.unitySupport : undefined;
            resourceInputs["usrgrp"] = args ? args.usrgrp : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["wizardType"] = args ? args.wizardType : undefined;
            resourceInputs["xauthtype"] = args ? args.xauthtype : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authpasswd", "groupAuthenticationSecret", "ppkSecret", "psksecret", "psksecretRemote"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VpnipsecPhase1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnipsecPhase1 resources.
 */
export interface VpnipsecPhase1State {
    acctVerify?: pulumi.Input<string>;
    addGwRoute?: pulumi.Input<string>;
    addRoute?: pulumi.Input<string>;
    assignIp?: pulumi.Input<string>;
    assignIpFrom?: pulumi.Input<string>;
    authmethod?: pulumi.Input<string>;
    authmethodRemote?: pulumi.Input<string>;
    authpasswd?: pulumi.Input<string>;
    authusr?: pulumi.Input<string>;
    authusrgrp?: pulumi.Input<string>;
    autoNegotiate?: pulumi.Input<string>;
    azureAdAutoconnect?: pulumi.Input<string>;
    backupGateways?: pulumi.Input<pulumi.Input<inputs.VpnipsecPhase1BackupGateway>[]>;
    banner?: pulumi.Input<string>;
    certIdValidation?: pulumi.Input<string>;
    certPeerUsernameStrip?: pulumi.Input<string>;
    certPeerUsernameValidation?: pulumi.Input<string>;
    certTrustStore?: pulumi.Input<string>;
    certificates?: pulumi.Input<pulumi.Input<inputs.VpnipsecPhase1Certificate>[]>;
    childlessIke?: pulumi.Input<string>;
    clientAutoNegotiate?: pulumi.Input<string>;
    clientKeepAlive?: pulumi.Input<string>;
    clientResume?: pulumi.Input<string>;
    clientResumeInterval?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    devId?: pulumi.Input<string>;
    devIdNotification?: pulumi.Input<string>;
    dhcp6RaLinkaddr?: pulumi.Input<string>;
    dhcpRaGiaddr?: pulumi.Input<string>;
    dhgrp?: pulumi.Input<string>;
    digitalSignatureAuth?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    dnsMode?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    dpd?: pulumi.Input<string>;
    dpdRetrycount?: pulumi.Input<number>;
    dpdRetryinterval?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    eap?: pulumi.Input<string>;
    eapCertAuth?: pulumi.Input<string>;
    eapExcludePeergrp?: pulumi.Input<string>;
    eapIdentity?: pulumi.Input<string>;
    emsSnCheck?: pulumi.Input<string>;
    enforceUniqueId?: pulumi.Input<string>;
    esn?: pulumi.Input<string>;
    exchangeFgtDeviceId?: pulumi.Input<string>;
    fallbackTcpThreshold?: pulumi.Input<number>;
    fecBase?: pulumi.Input<number>;
    fecCodec?: pulumi.Input<number>;
    fecCodecString?: pulumi.Input<string>;
    fecEgress?: pulumi.Input<string>;
    fecHealthCheck?: pulumi.Input<string>;
    fecIngress?: pulumi.Input<string>;
    fecMappingProfile?: pulumi.Input<string>;
    fecReceiveTimeout?: pulumi.Input<number>;
    fecRedundant?: pulumi.Input<number>;
    fecSendTimeout?: pulumi.Input<number>;
    fgspSync?: pulumi.Input<string>;
    forticlientEnforcement?: pulumi.Input<string>;
    fortinetEsp?: pulumi.Input<string>;
    fragmentation?: pulumi.Input<string>;
    fragmentationMtu?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    groupAuthentication?: pulumi.Input<string>;
    groupAuthenticationSecret?: pulumi.Input<string>;
    haSyncEspSeqno?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<string>;
    idleTimeoutinterval?: pulumi.Input<number>;
    ikeVersion?: pulumi.Input<string>;
    inboundDscpCopy?: pulumi.Input<string>;
    includeLocalLan?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    internalDomainLists?: pulumi.Input<pulumi.Input<inputs.VpnipsecPhase1InternalDomainList>[]>;
    ipDelayInterval?: pulumi.Input<number>;
    ipv4DnsServer1?: pulumi.Input<string>;
    ipv4DnsServer2?: pulumi.Input<string>;
    ipv4DnsServer3?: pulumi.Input<string>;
    ipv4EndIp?: pulumi.Input<string>;
    ipv4ExcludeRanges?: pulumi.Input<pulumi.Input<inputs.VpnipsecPhase1Ipv4ExcludeRange>[]>;
    ipv4Name?: pulumi.Input<string>;
    ipv4Netmask?: pulumi.Input<string>;
    ipv4SplitExclude?: pulumi.Input<string>;
    ipv4SplitInclude?: pulumi.Input<string>;
    ipv4StartIp?: pulumi.Input<string>;
    ipv4WinsServer1?: pulumi.Input<string>;
    ipv4WinsServer2?: pulumi.Input<string>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
    ipv6DnsServer3?: pulumi.Input<string>;
    ipv6EndIp?: pulumi.Input<string>;
    ipv6ExcludeRanges?: pulumi.Input<pulumi.Input<inputs.VpnipsecPhase1Ipv6ExcludeRange>[]>;
    ipv6Name?: pulumi.Input<string>;
    ipv6Prefix?: pulumi.Input<number>;
    ipv6SplitExclude?: pulumi.Input<string>;
    ipv6SplitInclude?: pulumi.Input<string>;
    ipv6StartIp?: pulumi.Input<string>;
    keepalive?: pulumi.Input<number>;
    keylife?: pulumi.Input<number>;
    kms?: pulumi.Input<string>;
    linkCost?: pulumi.Input<number>;
    localGw?: pulumi.Input<string>;
    localid?: pulumi.Input<string>;
    localidType?: pulumi.Input<string>;
    loopbackAsymroute?: pulumi.Input<string>;
    meshSelectorType?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    modeCfg?: pulumi.Input<string>;
    modeCfgAllowClientSelector?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nattraversal?: pulumi.Input<string>;
    negotiateTimeout?: pulumi.Input<number>;
    networkId?: pulumi.Input<number>;
    networkOverlay?: pulumi.Input<string>;
    npuOffload?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    peergrp?: pulumi.Input<string>;
    peerid?: pulumi.Input<string>;
    peertype?: pulumi.Input<string>;
    ppk?: pulumi.Input<string>;
    ppkIdentity?: pulumi.Input<string>;
    ppkSecret?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    proposal?: pulumi.Input<string>;
    psksecret?: pulumi.Input<string>;
    psksecretRemote?: pulumi.Input<string>;
    qkd?: pulumi.Input<string>;
    qkdProfile?: pulumi.Input<string>;
    reauth?: pulumi.Input<string>;
    rekey?: pulumi.Input<string>;
    remoteGw?: pulumi.Input<string>;
    remoteGw6Country?: pulumi.Input<string>;
    remoteGw6EndIp?: pulumi.Input<string>;
    remoteGw6Match?: pulumi.Input<string>;
    remoteGw6StartIp?: pulumi.Input<string>;
    remoteGw6Subnet?: pulumi.Input<string>;
    remoteGwCountry?: pulumi.Input<string>;
    remoteGwEndIp?: pulumi.Input<string>;
    remoteGwMatch?: pulumi.Input<string>;
    remoteGwStartIp?: pulumi.Input<string>;
    remoteGwSubnet?: pulumi.Input<string>;
    remotegwDdns?: pulumi.Input<string>;
    rsaSignatureFormat?: pulumi.Input<string>;
    rsaSignatureHashOverride?: pulumi.Input<string>;
    savePassword?: pulumi.Input<string>;
    sendCertChain?: pulumi.Input<string>;
    signatureHashAlg?: pulumi.Input<string>;
    splitIncludeService?: pulumi.Input<string>;
    suiteB?: pulumi.Input<string>;
    transport?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unitySupport?: pulumi.Input<string>;
    usrgrp?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    wizardType?: pulumi.Input<string>;
    xauthtype?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnipsecPhase1 resource.
 */
export interface VpnipsecPhase1Args {
    acctVerify?: pulumi.Input<string>;
    addGwRoute?: pulumi.Input<string>;
    addRoute?: pulumi.Input<string>;
    assignIp?: pulumi.Input<string>;
    assignIpFrom?: pulumi.Input<string>;
    authmethod?: pulumi.Input<string>;
    authmethodRemote?: pulumi.Input<string>;
    authpasswd?: pulumi.Input<string>;
    authusr?: pulumi.Input<string>;
    authusrgrp?: pulumi.Input<string>;
    autoNegotiate?: pulumi.Input<string>;
    azureAdAutoconnect?: pulumi.Input<string>;
    backupGateways?: pulumi.Input<pulumi.Input<inputs.VpnipsecPhase1BackupGateway>[]>;
    banner?: pulumi.Input<string>;
    certIdValidation?: pulumi.Input<string>;
    certPeerUsernameStrip?: pulumi.Input<string>;
    certPeerUsernameValidation?: pulumi.Input<string>;
    certTrustStore?: pulumi.Input<string>;
    certificates?: pulumi.Input<pulumi.Input<inputs.VpnipsecPhase1Certificate>[]>;
    childlessIke?: pulumi.Input<string>;
    clientAutoNegotiate?: pulumi.Input<string>;
    clientKeepAlive?: pulumi.Input<string>;
    clientResume?: pulumi.Input<string>;
    clientResumeInterval?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    devId?: pulumi.Input<string>;
    devIdNotification?: pulumi.Input<string>;
    dhcp6RaLinkaddr?: pulumi.Input<string>;
    dhcpRaGiaddr?: pulumi.Input<string>;
    dhgrp?: pulumi.Input<string>;
    digitalSignatureAuth?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    dnsMode?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    dpd?: pulumi.Input<string>;
    dpdRetrycount?: pulumi.Input<number>;
    dpdRetryinterval?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    eap?: pulumi.Input<string>;
    eapCertAuth?: pulumi.Input<string>;
    eapExcludePeergrp?: pulumi.Input<string>;
    eapIdentity?: pulumi.Input<string>;
    emsSnCheck?: pulumi.Input<string>;
    enforceUniqueId?: pulumi.Input<string>;
    esn?: pulumi.Input<string>;
    exchangeFgtDeviceId?: pulumi.Input<string>;
    fallbackTcpThreshold?: pulumi.Input<number>;
    fecBase?: pulumi.Input<number>;
    fecCodec?: pulumi.Input<number>;
    fecCodecString?: pulumi.Input<string>;
    fecEgress?: pulumi.Input<string>;
    fecHealthCheck?: pulumi.Input<string>;
    fecIngress?: pulumi.Input<string>;
    fecMappingProfile?: pulumi.Input<string>;
    fecReceiveTimeout?: pulumi.Input<number>;
    fecRedundant?: pulumi.Input<number>;
    fecSendTimeout?: pulumi.Input<number>;
    fgspSync?: pulumi.Input<string>;
    forticlientEnforcement?: pulumi.Input<string>;
    fortinetEsp?: pulumi.Input<string>;
    fragmentation?: pulumi.Input<string>;
    fragmentationMtu?: pulumi.Input<number>;
    getAllTables?: pulumi.Input<string>;
    groupAuthentication?: pulumi.Input<string>;
    groupAuthenticationSecret?: pulumi.Input<string>;
    haSyncEspSeqno?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<string>;
    idleTimeoutinterval?: pulumi.Input<number>;
    ikeVersion?: pulumi.Input<string>;
    inboundDscpCopy?: pulumi.Input<string>;
    includeLocalLan?: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    internalDomainLists?: pulumi.Input<pulumi.Input<inputs.VpnipsecPhase1InternalDomainList>[]>;
    ipDelayInterval?: pulumi.Input<number>;
    ipv4DnsServer1?: pulumi.Input<string>;
    ipv4DnsServer2?: pulumi.Input<string>;
    ipv4DnsServer3?: pulumi.Input<string>;
    ipv4EndIp?: pulumi.Input<string>;
    ipv4ExcludeRanges?: pulumi.Input<pulumi.Input<inputs.VpnipsecPhase1Ipv4ExcludeRange>[]>;
    ipv4Name?: pulumi.Input<string>;
    ipv4Netmask?: pulumi.Input<string>;
    ipv4SplitExclude?: pulumi.Input<string>;
    ipv4SplitInclude?: pulumi.Input<string>;
    ipv4StartIp?: pulumi.Input<string>;
    ipv4WinsServer1?: pulumi.Input<string>;
    ipv4WinsServer2?: pulumi.Input<string>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
    ipv6DnsServer3?: pulumi.Input<string>;
    ipv6EndIp?: pulumi.Input<string>;
    ipv6ExcludeRanges?: pulumi.Input<pulumi.Input<inputs.VpnipsecPhase1Ipv6ExcludeRange>[]>;
    ipv6Name?: pulumi.Input<string>;
    ipv6Prefix?: pulumi.Input<number>;
    ipv6SplitExclude?: pulumi.Input<string>;
    ipv6SplitInclude?: pulumi.Input<string>;
    ipv6StartIp?: pulumi.Input<string>;
    keepalive?: pulumi.Input<number>;
    keylife?: pulumi.Input<number>;
    kms?: pulumi.Input<string>;
    linkCost?: pulumi.Input<number>;
    localGw?: pulumi.Input<string>;
    localid?: pulumi.Input<string>;
    localidType?: pulumi.Input<string>;
    loopbackAsymroute?: pulumi.Input<string>;
    meshSelectorType?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    modeCfg?: pulumi.Input<string>;
    modeCfgAllowClientSelector?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nattraversal?: pulumi.Input<string>;
    negotiateTimeout?: pulumi.Input<number>;
    networkId?: pulumi.Input<number>;
    networkOverlay?: pulumi.Input<string>;
    npuOffload?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    peergrp?: pulumi.Input<string>;
    peerid?: pulumi.Input<string>;
    peertype?: pulumi.Input<string>;
    ppk?: pulumi.Input<string>;
    ppkIdentity?: pulumi.Input<string>;
    ppkSecret?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    proposal: pulumi.Input<string>;
    psksecret: pulumi.Input<string>;
    psksecretRemote?: pulumi.Input<string>;
    qkd?: pulumi.Input<string>;
    qkdProfile?: pulumi.Input<string>;
    reauth?: pulumi.Input<string>;
    rekey?: pulumi.Input<string>;
    remoteGw?: pulumi.Input<string>;
    remoteGw6Country?: pulumi.Input<string>;
    remoteGw6EndIp?: pulumi.Input<string>;
    remoteGw6Match?: pulumi.Input<string>;
    remoteGw6StartIp?: pulumi.Input<string>;
    remoteGw6Subnet?: pulumi.Input<string>;
    remoteGwCountry?: pulumi.Input<string>;
    remoteGwEndIp?: pulumi.Input<string>;
    remoteGwMatch?: pulumi.Input<string>;
    remoteGwStartIp?: pulumi.Input<string>;
    remoteGwSubnet?: pulumi.Input<string>;
    remotegwDdns?: pulumi.Input<string>;
    rsaSignatureFormat?: pulumi.Input<string>;
    rsaSignatureHashOverride?: pulumi.Input<string>;
    savePassword?: pulumi.Input<string>;
    sendCertChain?: pulumi.Input<string>;
    signatureHashAlg?: pulumi.Input<string>;
    splitIncludeService?: pulumi.Input<string>;
    suiteB?: pulumi.Input<string>;
    transport?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unitySupport?: pulumi.Input<string>;
    usrgrp?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
    wizardType?: pulumi.Input<string>;
    xauthtype?: pulumi.Input<string>;
}
