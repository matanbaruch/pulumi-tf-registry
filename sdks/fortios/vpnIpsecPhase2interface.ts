// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnIpsecPhase2interface extends pulumi.CustomResource {
    /**
     * Get an existing VpnIpsecPhase2interface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnIpsecPhase2interfaceState, opts?: pulumi.CustomResourceOptions): VpnIpsecPhase2interface {
        return new VpnIpsecPhase2interface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vpnIpsecPhase2interface:VpnIpsecPhase2interface';

    /**
     * Returns true if the given object is an instance of VpnIpsecPhase2interface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnIpsecPhase2interface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnIpsecPhase2interface.__pulumiType;
    }

    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly dstAddrType!: pulumi.Output<string>;
    public readonly dstEndIp!: pulumi.Output<string>;
    public readonly dstName!: pulumi.Output<string>;
    public readonly dstStartIp!: pulumi.Output<string>;
    public readonly dstSubnet!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly phase1name!: pulumi.Output<string>;
    public readonly proposal!: pulumi.Output<string>;
    public readonly srcAddrType!: pulumi.Output<string>;
    public readonly srcEndIp!: pulumi.Output<string>;
    public readonly srcName!: pulumi.Output<string>;
    public readonly srcStartIp!: pulumi.Output<string>;
    public readonly srcSubnet!: pulumi.Output<string>;

    /**
     * Create a VpnIpsecPhase2interface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnIpsecPhase2interfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnIpsecPhase2interfaceArgs | VpnIpsecPhase2interfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnIpsecPhase2interfaceState | undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dstAddrType"] = state ? state.dstAddrType : undefined;
            resourceInputs["dstEndIp"] = state ? state.dstEndIp : undefined;
            resourceInputs["dstName"] = state ? state.dstName : undefined;
            resourceInputs["dstStartIp"] = state ? state.dstStartIp : undefined;
            resourceInputs["dstSubnet"] = state ? state.dstSubnet : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["phase1name"] = state ? state.phase1name : undefined;
            resourceInputs["proposal"] = state ? state.proposal : undefined;
            resourceInputs["srcAddrType"] = state ? state.srcAddrType : undefined;
            resourceInputs["srcEndIp"] = state ? state.srcEndIp : undefined;
            resourceInputs["srcName"] = state ? state.srcName : undefined;
            resourceInputs["srcStartIp"] = state ? state.srcStartIp : undefined;
            resourceInputs["srcSubnet"] = state ? state.srcSubnet : undefined;
        } else {
            const args = argsOrState as VpnIpsecPhase2interfaceArgs | undefined;
            if ((!args || args.phase1name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phase1name'");
            }
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dstAddrType"] = args ? args.dstAddrType : undefined;
            resourceInputs["dstEndIp"] = args ? args.dstEndIp : undefined;
            resourceInputs["dstName"] = args ? args.dstName : undefined;
            resourceInputs["dstStartIp"] = args ? args.dstStartIp : undefined;
            resourceInputs["dstSubnet"] = args ? args.dstSubnet : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["phase1name"] = args ? args.phase1name : undefined;
            resourceInputs["proposal"] = args ? args.proposal : undefined;
            resourceInputs["srcAddrType"] = args ? args.srcAddrType : undefined;
            resourceInputs["srcEndIp"] = args ? args.srcEndIp : undefined;
            resourceInputs["srcName"] = args ? args.srcName : undefined;
            resourceInputs["srcStartIp"] = args ? args.srcStartIp : undefined;
            resourceInputs["srcSubnet"] = args ? args.srcSubnet : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnIpsecPhase2interface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnIpsecPhase2interface resources.
 */
export interface VpnIpsecPhase2interfaceState {
    comments?: pulumi.Input<string>;
    dstAddrType?: pulumi.Input<string>;
    dstEndIp?: pulumi.Input<string>;
    dstName?: pulumi.Input<string>;
    dstStartIp?: pulumi.Input<string>;
    dstSubnet?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    phase1name?: pulumi.Input<string>;
    proposal?: pulumi.Input<string>;
    srcAddrType?: pulumi.Input<string>;
    srcEndIp?: pulumi.Input<string>;
    srcName?: pulumi.Input<string>;
    srcStartIp?: pulumi.Input<string>;
    srcSubnet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnIpsecPhase2interface resource.
 */
export interface VpnIpsecPhase2interfaceArgs {
    comments?: pulumi.Input<string>;
    dstAddrType?: pulumi.Input<string>;
    dstEndIp?: pulumi.Input<string>;
    dstName?: pulumi.Input<string>;
    dstStartIp?: pulumi.Input<string>;
    dstSubnet?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    phase1name: pulumi.Input<string>;
    proposal?: pulumi.Input<string>;
    srcAddrType?: pulumi.Input<string>;
    srcEndIp?: pulumi.Input<string>;
    srcName?: pulumi.Input<string>;
    srcStartIp?: pulumi.Input<string>;
    srcSubnet?: pulumi.Input<string>;
}
