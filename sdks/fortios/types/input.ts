// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AntivirusProfileCifs {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileContentDisarm {
    coverPage?: pulumi.Input<string>;
    detectOnly?: pulumi.Input<string>;
    errorAction?: pulumi.Input<string>;
    officeAction?: pulumi.Input<string>;
    officeDde?: pulumi.Input<string>;
    officeEmbed?: pulumi.Input<string>;
    officeHylink?: pulumi.Input<string>;
    officeLinked?: pulumi.Input<string>;
    officeMacro?: pulumi.Input<string>;
    originalFileDestination?: pulumi.Input<string>;
    pdfActForm?: pulumi.Input<string>;
    pdfActGotor?: pulumi.Input<string>;
    pdfActJava?: pulumi.Input<string>;
    pdfActLaunch?: pulumi.Input<string>;
    pdfActMovie?: pulumi.Input<string>;
    pdfActSound?: pulumi.Input<string>;
    pdfEmbedfile?: pulumi.Input<string>;
    pdfHyperlink?: pulumi.Input<string>;
    pdfJavacode?: pulumi.Input<string>;
}

export interface AntivirusProfileExternalBlocklist {
    name?: pulumi.Input<string>;
}

export interface AntivirusProfileFtp {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileHttp {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    unknownContentEncoding?: pulumi.Input<string>;
}

export interface AntivirusProfileImap {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileMapi {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileNacQuar {
    expiry?: pulumi.Input<string>;
    infected?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
}

export interface AntivirusProfileNntp {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileOutbreakPrevention {
    externalBlocklist?: pulumi.Input<string>;
    ftgdService?: pulumi.Input<string>;
}

export interface AntivirusProfilePop3 {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileSmb {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
}

export interface AntivirusProfileSmtp {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface AntivirusProfileSsh {
    archiveBlock?: pulumi.Input<string>;
    archiveLog?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface ApplicationGroupApplication {
    id?: pulumi.Input<number>;
}

export interface ApplicationGroupCategory {
    id?: pulumi.Input<number>;
}

export interface ApplicationGroupRisk {
    level?: pulumi.Input<number>;
}

export interface ApplicationListDefaultNetworkService {
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    services?: pulumi.Input<string>;
    violationAction?: pulumi.Input<string>;
}

export interface ApplicationListEntry {
    action?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryApplication>[]>;
    behavior?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryCategory>[]>;
    exclusions?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryExclusion>[]>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryParameter>[]>;
    perIpShaper?: pulumi.Input<string>;
    popularity?: pulumi.Input<string>;
    protocols?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    rateCount?: pulumi.Input<number>;
    rateDuration?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    rateTrack?: pulumi.Input<string>;
    risks?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryRisk>[]>;
    sessionTtl?: pulumi.Input<number>;
    shaper?: pulumi.Input<string>;
    shaperReverse?: pulumi.Input<string>;
    subCategories?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntrySubCategory>[]>;
    technology?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
}

export interface ApplicationListEntryApplication {
    id?: pulumi.Input<number>;
}

export interface ApplicationListEntryCategory {
    id?: pulumi.Input<number>;
}

export interface ApplicationListEntryExclusion {
    id?: pulumi.Input<number>;
}

export interface ApplicationListEntryParameter {
    id?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.ApplicationListEntryParameterMember>[]>;
    value?: pulumi.Input<string>;
}

export interface ApplicationListEntryParameterMember {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationListEntryRisk {
    level?: pulumi.Input<number>;
}

export interface ApplicationListEntrySubCategory {
    id?: pulumi.Input<number>;
}

export interface ApplicationNameMetadata {
    id?: pulumi.Input<number>;
    metaid?: pulumi.Input<number>;
    valueid?: pulumi.Input<number>;
}

export interface ApplicationNameParameter {
    name?: pulumi.Input<string>;
}

export interface AuthenticationRuleDstaddr {
    name?: pulumi.Input<string>;
}

export interface AuthenticationRuleDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface AuthenticationRuleSrcaddr {
    name?: pulumi.Input<string>;
}

export interface AuthenticationRuleSrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface AuthenticationRuleSrcintf {
    name?: pulumi.Input<string>;
}

export interface AuthenticationSchemeUserDatabase {
    name?: pulumi.Input<string>;
}

export interface AuthenticationSettingDevRange {
    name?: pulumi.Input<string>;
}

export interface AuthenticationSettingUserCertCa {
    name?: pulumi.Input<string>;
}

export interface CasbProfileSaasApplication {
    accessRules?: pulumi.Input<pulumi.Input<inputs.CasbProfileSaasApplicationAccessRule>[]>;
    customControls?: pulumi.Input<pulumi.Input<inputs.CasbProfileSaasApplicationCustomControl>[]>;
    domainControl?: pulumi.Input<string>;
    domainControlDomains?: pulumi.Input<pulumi.Input<inputs.CasbProfileSaasApplicationDomainControlDomain>[]>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    safeSearch?: pulumi.Input<string>;
    safeSearchControls?: pulumi.Input<pulumi.Input<inputs.CasbProfileSaasApplicationSafeSearchControl>[]>;
    status?: pulumi.Input<string>;
    tenantControl?: pulumi.Input<string>;
    tenantControlTenants?: pulumi.Input<pulumi.Input<inputs.CasbProfileSaasApplicationTenantControlTenant>[]>;
}

export interface CasbProfileSaasApplicationAccessRule {
    action?: pulumi.Input<string>;
    bypass?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface CasbProfileSaasApplicationCustomControl {
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.CasbProfileSaasApplicationCustomControlOption>[]>;
}

export interface CasbProfileSaasApplicationCustomControlOption {
    name?: pulumi.Input<string>;
    userInputs?: pulumi.Input<pulumi.Input<inputs.CasbProfileSaasApplicationCustomControlOptionUserInput>[]>;
}

export interface CasbProfileSaasApplicationCustomControlOptionUserInput {
    value?: pulumi.Input<string>;
}

export interface CasbProfileSaasApplicationDomainControlDomain {
    name?: pulumi.Input<string>;
}

export interface CasbProfileSaasApplicationSafeSearchControl {
    name?: pulumi.Input<string>;
}

export interface CasbProfileSaasApplicationTenantControlTenant {
    name?: pulumi.Input<string>;
}

export interface CasbSaasapplicationDomain {
    domain?: pulumi.Input<string>;
}

export interface CasbUseractivityControlOption {
    name?: pulumi.Input<string>;
    operations?: pulumi.Input<pulumi.Input<inputs.CasbUseractivityControlOptionOperation>[]>;
    status?: pulumi.Input<string>;
}

export interface CasbUseractivityControlOptionOperation {
    action?: pulumi.Input<string>;
    caseSensitive?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    searchKey?: pulumi.Input<string>;
    searchPattern?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    valueFromInput?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.CasbUseractivityControlOptionOperationValue>[]>;
}

export interface CasbUseractivityControlOptionOperationValue {
    value?: pulumi.Input<string>;
}

export interface CasbUseractivityMatch {
    id?: pulumi.Input<number>;
    rules?: pulumi.Input<pulumi.Input<inputs.CasbUseractivityMatchRule>[]>;
    strategy?: pulumi.Input<string>;
}

export interface CasbUseractivityMatchRule {
    caseSensitive?: pulumi.Input<string>;
    domains?: pulumi.Input<pulumi.Input<inputs.CasbUseractivityMatchRuleDomain>[]>;
    headerName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    matchPattern?: pulumi.Input<string>;
    matchValue?: pulumi.Input<string>;
    methods?: pulumi.Input<pulumi.Input<inputs.CasbUseractivityMatchRuleMethod>[]>;
    negate?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface CasbUseractivityMatchRuleDomain {
    domain?: pulumi.Input<string>;
}

export interface CasbUseractivityMatchRuleMethod {
    method?: pulumi.Input<string>;
}

export interface CifsProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.CifsProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface CifsProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<inputs.CifsProfileFileFilterEntryFileType>[]>;
    filter?: pulumi.Input<string>;
}

export interface CifsProfileFileFilterEntryFileType {
    name?: pulumi.Input<string>;
}

export interface CifsProfileServerKeytab {
    keytab?: pulumi.Input<string>;
    principal?: pulumi.Input<string>;
}

export interface DlpDictionaryEntry {
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ignoreCase?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    repeat?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface DlpExactdatamatchColumn {
    index?: pulumi.Input<number>;
    optional?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface DlpFilepatternEntry {
    fileType?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
}

export interface DlpProfileRule {
    action?: pulumi.Input<string>;
    archive?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    fileSize?: pulumi.Input<number>;
    fileType?: pulumi.Input<number>;
    filterBy?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    label?: pulumi.Input<string>;
    matchPercentage?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    proto?: pulumi.Input<string>;
    sensitivities?: pulumi.Input<pulumi.Input<inputs.DlpProfileRuleSensitivity>[]>;
    sensors?: pulumi.Input<pulumi.Input<inputs.DlpProfileRuleSensor>[]>;
    severity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface DlpProfileRuleSensitivity {
    name?: pulumi.Input<string>;
}

export interface DlpProfileRuleSensor {
    name?: pulumi.Input<string>;
}

export interface DlpSensorEntry {
    count?: pulumi.Input<number>;
    dictionary?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface DlpSensorFilter {
    action?: pulumi.Input<string>;
    archive?: pulumi.Input<string>;
    companyIdentifier?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    fileSize?: pulumi.Input<number>;
    fileType?: pulumi.Input<number>;
    filterBy?: pulumi.Input<string>;
    fpSensitivities?: pulumi.Input<pulumi.Input<inputs.DlpSensorFilterFpSensitivity>[]>;
    id?: pulumi.Input<number>;
    matchPercentage?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    proto?: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
    sensitivities?: pulumi.Input<pulumi.Input<inputs.DlpSensorFilterSensitivity>[]>;
    severity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface DlpSensorFilterFpSensitivity {
    name?: pulumi.Input<string>;
}

export interface DlpSensorFilterSensitivity {
    name?: pulumi.Input<string>;
}

export interface DnsfilterDomainfilterEntry {
    action?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface DnsfilterProfileDnsTranslation {
    addrType?: pulumi.Input<string>;
    dst?: pulumi.Input<string>;
    dst6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    netmask?: pulumi.Input<string>;
    prefix?: pulumi.Input<number>;
    src?: pulumi.Input<string>;
    src6?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface DnsfilterProfileDomainFilter {
    domainFilterTable?: pulumi.Input<number>;
}

export interface DnsfilterProfileExternalIpBlocklist {
    name?: pulumi.Input<string>;
}

export interface DnsfilterProfileFtgdDns {
    filters?: pulumi.Input<pulumi.Input<inputs.DnsfilterProfileFtgdDnsFilter>[]>;
    options?: pulumi.Input<string>;
}

export interface DnsfilterProfileFtgdDnsFilter {
    action?: pulumi.Input<string>;
    category?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
}

export interface DnsfilterProfileTransparentDnsDatabase {
    name?: pulumi.Input<string>;
}

export interface DpdkGlobalInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface EmailfilterBlockallowlistEntry {
    action?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    emailPattern?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface EmailfilterBwlEntry {
    action?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    emailPattern?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface EmailfilterBwordEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    language?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    where?: pulumi.Input<string>;
}

export interface EmailfilterDnsblEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface EmailfilterIptrustEntry {
    addrType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface EmailfilterMheaderEntry {
    action?: pulumi.Input<string>;
    fieldbody?: pulumi.Input<string>;
    fieldname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface EmailfilterProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.EmailfilterProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    scanArchiveContents?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface EmailfilterProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<inputs.EmailfilterProfileFileFilterEntryFileType>[]>;
    filter?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface EmailfilterProfileFileFilterEntryFileType {
    name?: pulumi.Input<string>;
}

export interface EmailfilterProfileGmail {
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface EmailfilterProfileImap {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface EmailfilterProfileMapi {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface EmailfilterProfileMsnHotmail {
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface EmailfilterProfileOtherWebmails {
    logAll?: pulumi.Input<string>;
}

export interface EmailfilterProfilePop3 {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface EmailfilterProfileSmtp {
    action?: pulumi.Input<string>;
    hdrip?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface EmailfilterProfileYahooMail {
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileDeviceGroup {
    name?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileForticlientAndroidSettings {
    disableWfWhenProtected?: pulumi.Input<string>;
    forticlientAdvancedVpn?: pulumi.Input<string>;
    forticlientAdvancedVpnBuffer?: pulumi.Input<string>;
    forticlientVpnProvisioning?: pulumi.Input<string>;
    forticlientVpnSettings?: pulumi.Input<pulumi.Input<inputs.EndpointcontrolProfileForticlientAndroidSettingsForticlientVpnSetting>[]>;
    forticlientWf?: pulumi.Input<string>;
    forticlientWfProfile?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileForticlientAndroidSettingsForticlientVpnSetting {
    authMethod?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    presharedKey?: pulumi.Input<string>;
    remoteGw?: pulumi.Input<string>;
    sslvpnAccessPort?: pulumi.Input<number>;
    sslvpnRequireCertificate?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileForticlientIosSettings {
    clientVpnProvisioning?: pulumi.Input<string>;
    clientVpnSettings?: pulumi.Input<pulumi.Input<inputs.EndpointcontrolProfileForticlientIosSettingsClientVpnSetting>[]>;
    configurationContent?: pulumi.Input<string>;
    configurationName?: pulumi.Input<string>;
    disableWfWhenProtected?: pulumi.Input<string>;
    distributeConfigurationProfile?: pulumi.Input<string>;
    forticlientWf?: pulumi.Input<string>;
    forticlientWfProfile?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileForticlientIosSettingsClientVpnSetting {
    authMethod?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    presharedKey?: pulumi.Input<string>;
    remoteGw?: pulumi.Input<string>;
    sslvpnAccessPort?: pulumi.Input<number>;
    sslvpnRequireCertificate?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vpnConfigurationContent?: pulumi.Input<string>;
    vpnConfigurationName?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileForticlientWinmacSettings {
    avRealtimeProtection?: pulumi.Input<string>;
    avSignatureUpToDate?: pulumi.Input<string>;
    forticlientApplicationFirewall?: pulumi.Input<string>;
    forticlientApplicationFirewallList?: pulumi.Input<string>;
    forticlientAv?: pulumi.Input<string>;
    forticlientEmsCompliance?: pulumi.Input<string>;
    forticlientEmsComplianceAction?: pulumi.Input<string>;
    forticlientEmsEntries?: pulumi.Input<pulumi.Input<inputs.EndpointcontrolProfileForticlientWinmacSettingsForticlientEmsEntry>[]>;
    forticlientLinuxVer?: pulumi.Input<string>;
    forticlientLogUpload?: pulumi.Input<string>;
    forticlientLogUploadLevel?: pulumi.Input<string>;
    forticlientLogUploadServer?: pulumi.Input<string>;
    forticlientMacVer?: pulumi.Input<string>;
    forticlientMinimumSoftwareVersion?: pulumi.Input<string>;
    forticlientOperatingSystems?: pulumi.Input<pulumi.Input<inputs.EndpointcontrolProfileForticlientWinmacSettingsForticlientOperatingSystem>[]>;
    forticlientOwnFiles?: pulumi.Input<pulumi.Input<inputs.EndpointcontrolProfileForticlientWinmacSettingsForticlientOwnFile>[]>;
    forticlientRegistrationComplianceAction?: pulumi.Input<string>;
    forticlientRegistryEntries?: pulumi.Input<pulumi.Input<inputs.EndpointcontrolProfileForticlientWinmacSettingsForticlientRegistryEntry>[]>;
    forticlientRunningApps?: pulumi.Input<pulumi.Input<inputs.EndpointcontrolProfileForticlientWinmacSettingsForticlientRunningApp>[]>;
    forticlientSecurityPosture?: pulumi.Input<string>;
    forticlientSecurityPostureComplianceAction?: pulumi.Input<string>;
    forticlientSystemCompliance?: pulumi.Input<string>;
    forticlientSystemComplianceAction?: pulumi.Input<string>;
    forticlientVulnScan?: pulumi.Input<string>;
    forticlientVulnScanComplianceAction?: pulumi.Input<string>;
    forticlientVulnScanEnforce?: pulumi.Input<string>;
    forticlientVulnScanEnforceGrace?: pulumi.Input<number>;
    forticlientVulnScanExempt?: pulumi.Input<string>;
    forticlientWf?: pulumi.Input<string>;
    forticlientWfProfile?: pulumi.Input<string>;
    forticlientWinVer?: pulumi.Input<string>;
    osAvSoftwareInstalled?: pulumi.Input<string>;
    sandboxAddress?: pulumi.Input<string>;
    sandboxAnalysis?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileForticlientWinmacSettingsForticlientEmsEntry {
    name?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileForticlientWinmacSettingsForticlientOperatingSystem {
    id?: pulumi.Input<number>;
    osName?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileForticlientWinmacSettingsForticlientOwnFile {
    file?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface EndpointcontrolProfileForticlientWinmacSettingsForticlientRegistryEntry {
    id?: pulumi.Input<number>;
    registryEntry?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileForticlientWinmacSettingsForticlientRunningApp {
    appName?: pulumi.Input<string>;
    appSha256Signature?: pulumi.Input<string>;
    appSha256Signature2?: pulumi.Input<string>;
    appSha256Signature3?: pulumi.Input<string>;
    appSha256Signature4?: pulumi.Input<string>;
    applicationCheckRule?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    processName?: pulumi.Input<string>;
    processName2?: pulumi.Input<string>;
    processName3?: pulumi.Input<string>;
    processName4?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileOnNetAddr {
    name?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileSrcAddr {
    name?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileUser {
    name?: pulumi.Input<string>;
}

export interface EndpointcontrolProfileUserGroup {
    name?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtender1ControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtender1Modem1 {
    autoSwitch?: pulumi.Input<inputs.ExtendercontrollerExtender1Modem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    ifname?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtender1Modem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtendercontrollerExtender1Modem2 {
    autoSwitch?: pulumi.Input<inputs.ExtendercontrollerExtender1Modem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    ifname?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtender1Modem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtendercontrollerExtenderControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderModem1 {
    autoSwitch?: pulumi.Input<inputs.ExtendercontrollerExtenderModem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    ifname?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderModem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtendercontrollerExtenderModem2 {
    autoSwitch?: pulumi.Input<inputs.ExtendercontrollerExtenderModem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    ifname?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderModem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtendercontrollerExtenderWanExtension {
    modem1Extension?: pulumi.Input<string>;
    modem2Extension?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderprofileCellular {
    controllerReport?: pulumi.Input<inputs.ExtendercontrollerExtenderprofileCellularControllerReport>;
    dataplans?: pulumi.Input<pulumi.Input<inputs.ExtendercontrollerExtenderprofileCellularDataplan>[]>;
    modem1?: pulumi.Input<inputs.ExtendercontrollerExtenderprofileCellularModem1>;
    modem2?: pulumi.Input<inputs.ExtendercontrollerExtenderprofileCellularModem2>;
    smsNotification?: pulumi.Input<inputs.ExtendercontrollerExtenderprofileCellularSmsNotification>;
}

export interface ExtendercontrollerExtenderprofileCellularControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderprofileCellularDataplan {
    name?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderprofileCellularModem1 {
    autoSwitch?: pulumi.Input<inputs.ExtendercontrollerExtenderprofileCellularModem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderprofileCellularModem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtendercontrollerExtenderprofileCellularModem2 {
    autoSwitch?: pulumi.Input<inputs.ExtendercontrollerExtenderprofileCellularModem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderprofileCellularModem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtendercontrollerExtenderprofileCellularSmsNotification {
    alert?: pulumi.Input<inputs.ExtendercontrollerExtenderprofileCellularSmsNotificationAlert>;
    receivers?: pulumi.Input<pulumi.Input<inputs.ExtendercontrollerExtenderprofileCellularSmsNotificationReceiver>[]>;
    status?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderprofileCellularSmsNotificationAlert {
    dataExhausted?: pulumi.Input<string>;
    fgtBackupModeSwitch?: pulumi.Input<string>;
    lowSignalStrength?: pulumi.Input<string>;
    modeSwitch?: pulumi.Input<string>;
    osImageFallback?: pulumi.Input<string>;
    sessionDisconnect?: pulumi.Input<string>;
    systemReboot?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderprofileCellularSmsNotificationReceiver {
    alert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    phoneNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderprofileLanExtension {
    backhaulInterface?: pulumi.Input<string>;
    backhaulIp?: pulumi.Input<string>;
    backhauls?: pulumi.Input<pulumi.Input<inputs.ExtendercontrollerExtenderprofileLanExtensionBackhaul>[]>;
    ipsecTunnel?: pulumi.Input<string>;
    linkLoadbalance?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderprofileLanExtensionBackhaul {
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ExtensioncontrollerExtenderWanExtension {
    modem1Extension?: pulumi.Input<string>;
    modem2Extension?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileCellular {
    controllerReport?: pulumi.Input<inputs.ExtensioncontrollerExtenderprofileCellularControllerReport>;
    dataplans?: pulumi.Input<pulumi.Input<inputs.ExtensioncontrollerExtenderprofileCellularDataplan>[]>;
    modem1?: pulumi.Input<inputs.ExtensioncontrollerExtenderprofileCellularModem1>;
    modem2?: pulumi.Input<inputs.ExtensioncontrollerExtenderprofileCellularModem2>;
    smsNotification?: pulumi.Input<inputs.ExtensioncontrollerExtenderprofileCellularSmsNotification>;
}

export interface ExtensioncontrollerExtenderprofileCellularControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileCellularDataplan {
    name?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileCellularModem1 {
    autoSwitch?: pulumi.Input<inputs.ExtensioncontrollerExtenderprofileCellularModem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileCellularModem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtensioncontrollerExtenderprofileCellularModem2 {
    autoSwitch?: pulumi.Input<inputs.ExtensioncontrollerExtenderprofileCellularModem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCode?: pulumi.Input<string>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCode?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileCellularModem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBack?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
}

export interface ExtensioncontrollerExtenderprofileCellularSmsNotification {
    alert?: pulumi.Input<inputs.ExtensioncontrollerExtenderprofileCellularSmsNotificationAlert>;
    receivers?: pulumi.Input<pulumi.Input<inputs.ExtensioncontrollerExtenderprofileCellularSmsNotificationReceiver>[]>;
    status?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileCellularSmsNotificationAlert {
    dataExhausted?: pulumi.Input<string>;
    fgtBackupModeSwitch?: pulumi.Input<string>;
    lowSignalStrength?: pulumi.Input<string>;
    modeSwitch?: pulumi.Input<string>;
    osImageFallback?: pulumi.Input<string>;
    sessionDisconnect?: pulumi.Input<string>;
    systemReboot?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileCellularSmsNotificationReceiver {
    alert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    phoneNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileLanExtension {
    backhaulInterface?: pulumi.Input<string>;
    backhaulIp?: pulumi.Input<string>;
    backhauls?: pulumi.Input<pulumi.Input<inputs.ExtensioncontrollerExtenderprofileLanExtensionBackhaul>[]>;
    ipsecTunnel?: pulumi.Input<string>;
    linkLoadbalance?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileLanExtensionBackhaul {
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ExtensioncontrollerExtenderprofileWifi {
    country?: pulumi.Input<string>;
    radio1?: pulumi.Input<inputs.ExtensioncontrollerExtenderprofileWifiRadio1>;
    radio2?: pulumi.Input<inputs.ExtensioncontrollerExtenderprofileWifiRadio2>;
}

export interface ExtensioncontrollerExtenderprofileWifiRadio1 {
    band?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    extensionChannel?: pulumi.Input<string>;
    guardInterval?: pulumi.Input<string>;
    lanExtVap?: pulumi.Input<string>;
    localVaps?: pulumi.Input<pulumi.Input<inputs.ExtensioncontrollerExtenderprofileWifiRadio1LocalVap>[]>;
    maxClients?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    operatingStandard?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileWifiRadio1LocalVap {
    name?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileWifiRadio2 {
    band?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    extensionChannel?: pulumi.Input<string>;
    guardInterval?: pulumi.Input<string>;
    lanExtVap?: pulumi.Input<string>;
    localVaps?: pulumi.Input<pulumi.Input<inputs.ExtensioncontrollerExtenderprofileWifiRadio2LocalVap>[]>;
    maxClients?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    operatingStandard?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtensioncontrollerExtenderprofileWifiRadio2LocalVap {
    name?: pulumi.Input<string>;
}

export interface ExtensioncontrollerFortigateprofileLanExtension {
    backhaulInterface?: pulumi.Input<string>;
    backhaulIp?: pulumi.Input<string>;
    ipsecTunnel?: pulumi.Input<string>;
}

export interface FilefilterProfileRule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<inputs.FilefilterProfileRuleFileType>[]>;
    name?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface FilefilterProfileRuleFileType {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessproxy6ApiGateway {
    applications?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxy6ApiGatewayApplication>[]>;
    h2Support?: pulumi.Input<string>;
    h3Support?: pulumi.Input<string>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    quic?: pulumi.Input<inputs.FirewallAccessproxy6ApiGatewayQuic>;
    realservers?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxy6ApiGatewayRealserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxy6ApiGatewaySslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslRenegotiation?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface FirewallAccessproxy6ApiGateway6 {
    applications?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxy6ApiGateway6Application>[]>;
    h2Support?: pulumi.Input<string>;
    h3Support?: pulumi.Input<string>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    quic?: pulumi.Input<inputs.FirewallAccessproxy6ApiGateway6Quic>;
    realservers?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxy6ApiGateway6Realserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxy6ApiGateway6SslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslRenegotiation?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface FirewallAccessproxy6ApiGateway6Application {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessproxy6ApiGateway6Quic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface FirewallAccessproxy6ApiGateway6Realserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxy6ApiGateway6RealserverSshHostKey>[]>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallAccessproxy6ApiGateway6RealserverSshHostKey {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessproxy6ApiGateway6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallAccessproxy6ApiGatewayApplication {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessproxy6ApiGatewayQuic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface FirewallAccessproxy6ApiGatewayRealserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxy6ApiGatewayRealserverSshHostKey>[]>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallAccessproxy6ApiGatewayRealserverSshHostKey {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessproxy6ApiGatewaySslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallAccessproxyApiGateway {
    applications?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxyApiGatewayApplication>[]>;
    h2Support?: pulumi.Input<string>;
    h3Support?: pulumi.Input<string>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    quic?: pulumi.Input<inputs.FirewallAccessproxyApiGatewayQuic>;
    realservers?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxyApiGatewayRealserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxyApiGatewaySslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslRenegotiation?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface FirewallAccessproxyApiGateway6 {
    applications?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxyApiGateway6Application>[]>;
    h2Support?: pulumi.Input<string>;
    h3Support?: pulumi.Input<string>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    quic?: pulumi.Input<inputs.FirewallAccessproxyApiGateway6Quic>;
    realservers?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxyApiGateway6Realserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxyApiGateway6SslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslRenegotiation?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface FirewallAccessproxyApiGateway6Application {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessproxyApiGateway6Quic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface FirewallAccessproxyApiGateway6Realserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxyApiGateway6RealserverSshHostKey>[]>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallAccessproxyApiGateway6RealserverSshHostKey {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessproxyApiGateway6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallAccessproxyApiGatewayApplication {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessproxyApiGatewayQuic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface FirewallAccessproxyApiGatewayRealserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<inputs.FirewallAccessproxyApiGatewayRealserverSshHostKey>[]>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallAccessproxyApiGatewayRealserverSshHostKey {
    name?: pulumi.Input<string>;
}

export interface FirewallAccessproxyApiGatewaySslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallAccessproxysshclientcertCertExtension {
    critical?: pulumi.Input<string>;
    data?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface FirewallAddress6List {
    ip?: pulumi.Input<string>;
}

export interface FirewallAddress6Macaddr {
    macaddr?: pulumi.Input<string>;
}

export interface FirewallAddress6SubnetSegment {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface FirewallAddress6Tagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallAddress6TaggingTag>[]>;
}

export interface FirewallAddress6TaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallAddress6templateSubnetSegment {
    bits?: pulumi.Input<number>;
    exclusive?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.FirewallAddress6templateSubnetSegmentValue>[]>;
}

export interface FirewallAddress6templateSubnetSegmentValue {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface FirewallAddressFssoGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallAddressList {
    ip?: pulumi.Input<string>;
}

export interface FirewallAddressMacaddr {
    macaddr?: pulumi.Input<string>;
}

export interface FirewallAddressTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallAddressTaggingTag>[]>;
}

export interface FirewallAddressTaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrp6ExcludeMember {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrp6Member {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrp6Tagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallAddrgrp6TaggingTag>[]>;
}

export interface FirewallAddrgrp6TaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrpExcludeMember {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrpMember {
    name?: pulumi.Input<string>;
}

export interface FirewallAddrgrpTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallAddrgrpTaggingTag>[]>;
}

export interface FirewallAddrgrpTaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallAuthportalGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralsnatmapDstAddr {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralsnatmapDstAddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralsnatmapDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralsnatmapNatIppool {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralsnatmapNatIppool6 {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralsnatmapOrigAddr {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralsnatmapOrigAddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallCentralsnatmapSortStatePolicyList {
    policyid: pulumi.Input<string>;
}

export interface FirewallCentralsnatmapSrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallCountryRegion {
    id?: pulumi.Input<number>;
}

export interface FirewallDecryptedtrafficmirrorInterface {
    name?: pulumi.Input<string>;
}

export interface FirewallDoSpolicy6Anomaly {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholddefault?: pulumi.Input<number>;
}

export interface FirewallDoSpolicy6Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallDoSpolicy6Service {
    name?: pulumi.Input<string>;
}

export interface FirewallDoSpolicy6Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallDoSpolicyAnomaly {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholddefault?: pulumi.Input<number>;
}

export interface FirewallDoSpolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallDoSpolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallDoSpolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallIdentitybasedrouteRule {
    device?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.FirewallIdentitybasedrouteRuleGroup>[]>;
    id?: pulumi.Input<number>;
}

export interface FirewallIdentitybasedrouteRuleGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacepolicy6Dstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacepolicy6Service6 {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacepolicy6Srcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacepolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacepolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallInterfacepolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetserviceadditionEntry {
    addrMode?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceadditionEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface FirewallInternetserviceadditionEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetservicecustomEntry {
    addrMode?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<inputs.FirewallInternetservicecustomEntryDst6>[]>;
    dsts?: pulumi.Input<pulumi.Input<inputs.FirewallInternetservicecustomEntryDst>[]>;
    id?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetservicecustomEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface FirewallInternetservicecustomEntryDst {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetservicecustomEntryDst6 {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetservicecustomEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetservicecustomgroupMember {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetservicedefinitionEntry {
    categoryId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetservicedefinitionEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
}

export interface FirewallInternetservicedefinitionEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetserviceextensionDisableEntry {
    addrMode?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip6Ranges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceextensionDisableEntryIp6Range>[]>;
    ipRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceextensionDisableEntryIpRange>[]>;
    port?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceextensionDisableEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface FirewallInternetserviceextensionDisableEntryIp6Range {
    endIp6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp6?: pulumi.Input<string>;
}

export interface FirewallInternetserviceextensionDisableEntryIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface FirewallInternetserviceextensionDisableEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetserviceextensionEntry {
    addrMode?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceextensionEntryDst6>[]>;
    dsts?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceextensionEntryDst>[]>;
    id?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceextensionEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface FirewallInternetserviceextensionEntryDst {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetserviceextensionEntryDst6 {
    name?: pulumi.Input<string>;
}

export interface FirewallInternetserviceextensionEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetservicegroupMember {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface FirewallInternetservicesubappSubApp {
    id?: pulumi.Input<number>;
}

export interface FirewallLocalinpolicy6Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicy6InternetService6SrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicy6InternetService6SrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicy6InternetService6SrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicy6InternetService6SrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicy6IntfBlock {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicy6Service {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicy6Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicyInternetServiceSrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicyInternetServiceSrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicyInternetServiceSrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicyInternetServiceSrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicyIntfBlock {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallLocalinpolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastaddress6Tagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallMulticastaddress6TaggingTag>[]>;
}

export interface FirewallMulticastaddress6TaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastaddressTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallMulticastaddressTaggingTag>[]>;
}

export interface FirewallMulticastaddressTaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastpolicy6Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastpolicy6Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastpolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallMulticastpolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallOndemandsnifferHost {
    host?: pulumi.Input<string>;
}

export interface FirewallOndemandsnifferPort {
    port?: pulumi.Input<number>;
}

export interface FirewallOndemandsnifferProtocol {
    protocol?: pulumi.Input<number>;
}

export interface FirewallPolicy46Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy46Poolname {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy46Service {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy46Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy64Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy64Poolname {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy64Service {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy64Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6AppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicy6AppGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Application {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicy6CustomLogField {
    fieldId?: pulumi.Input<string>;
}

export interface FirewallPolicy6Device {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Dstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Dstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6FssoGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Group {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Poolname {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Service {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Srcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6Srcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6SslMirrorIntf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicy6UrlCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicy6User {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyAppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicyAppGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyApplication {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicyCustomLogField {
    fieldId?: pulumi.Input<string>;
}

export interface FirewallPolicyDevice {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyFssoGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6Custom {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6CustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6Group {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6Name {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6SrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6SrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6SrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetService6SrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicyInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceSrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceSrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceSrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyInternetServiceSrcId {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicyInternetServiceSrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyNetworkServiceDynamic {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyNetworkServiceSrcDynamic {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyNtlmEnabledBrowser {
    userAgentString?: pulumi.Input<string>;
}

export interface FirewallPolicyPcpPoolname {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyPoolname {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyPoolname6 {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyRtpAddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicySgt {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicySortStatePolicyList {
    action: pulumi.Input<string>;
    name: pulumi.Input<string>;
    policyid: pulumi.Input<string>;
}

export interface FirewallPolicySrcVendorMac {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicySrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicySslMirrorIntf {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyUrlCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallPolicyUser {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyZtnaEmsTag {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyZtnaEmsTagSecondary {
    name?: pulumi.Input<string>;
}

export interface FirewallPolicyZtnaGeoTag {
    name?: pulumi.Input<string>;
}

export interface FirewallProfileprotocoloptionsCifs {
    domainController?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    serverCredentialType?: pulumi.Input<string>;
    serverKeytabs?: pulumi.Input<pulumi.Input<inputs.FirewallProfileprotocoloptionsCifsServerKeytab>[]>;
    status?: pulumi.Input<string>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileprotocoloptionsCifsServerKeytab {
    keytab?: pulumi.Input<string>;
    principal?: pulumi.Input<string>;
}

export interface FirewallProfileprotocoloptionsDns {
    ports?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface FirewallProfileprotocoloptionsFtp {
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    explicitFtpTls?: pulumi.Input<string>;
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileprotocoloptionsHttp {
    addressIpRating?: pulumi.Input<string>;
    blockPageStatusCode?: pulumi.Input<number>;
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    fortinetBar?: pulumi.Input<string>;
    fortinetBarPort?: pulumi.Input<number>;
    h2c?: pulumi.Input<string>;
    httpPolicy?: pulumi.Input<string>;
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    postLang?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    rangeBlock?: pulumi.Input<string>;
    retryCount?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    streamingContentBypass?: pulumi.Input<string>;
    stripXForwardedFor?: pulumi.Input<string>;
    switchingProtocols?: pulumi.Input<string>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    tunnelNonHttp?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
    unknownContentEncoding?: pulumi.Input<string>;
    unknownHttpVersion?: pulumi.Input<string>;
    verifyDnsForPolicyMatching?: pulumi.Input<string>;
}

export interface FirewallProfileprotocoloptionsImap {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileprotocoloptionsMailSignature {
    signature?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface FirewallProfileprotocoloptionsMapi {
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileprotocoloptionsNntp {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileprotocoloptionsPop3 {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileprotocoloptionsSmtp {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<number>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    serverBusy?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProfileprotocoloptionsSsh {
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    options?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface FirewallProxyaddressApplication {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyaddressCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallProxyaddressHeaderGroup {
    caseSensitivity?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface FirewallProxyaddressTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallProxyaddressTaggingTag>[]>;
}

export interface FirewallProxyaddressTaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyaddrgrpMember {
    name?: pulumi.Input<string>;
}

export interface FirewallProxyaddrgrpTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.FirewallProxyaddrgrpTaggingTag>[]>;
}

export interface FirewallProxyaddrgrpTaggingTag {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyAccessProxy {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyAccessProxy6 {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyInternetService6Custom {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyInternetService6CustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyInternetService6Group {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyInternetService6Name {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface FirewallProxypolicyInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyPoolname {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicySortStatePolicyList {
    action: pulumi.Input<string>;
    name: pulumi.Input<string>;
    policyid: pulumi.Input<string>;
}

export interface FirewallProxypolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicySrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyUser {
    name?: pulumi.Input<string>;
}

export interface FirewallProxypolicyZtnaEmsTag {
    name?: pulumi.Input<string>;
}

export interface FirewallRegionCity {
    id?: pulumi.Input<number>;
}

export interface FirewallSecurityPolicyseqStatePolicyList {
    action: pulumi.Input<string>;
    name: pulumi.Input<string>;
    policyid: pulumi.Input<string>;
}

export interface FirewallSecurityPolicysortStatePolicyList {
    action: pulumi.Input<string>;
    name: pulumi.Input<string>;
    policyid: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyAppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallSecuritypolicyAppGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyApplication {
    id?: pulumi.Input<number>;
}

export interface FirewallSecuritypolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyDstaddr4 {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyFssoGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetService6Custom {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetService6CustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetService6Group {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetService6Name {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetService6SrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetService6SrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetService6SrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetService6SrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface FirewallSecuritypolicyInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetServiceSrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetServiceSrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetServiceSrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyInternetServiceSrcId {
    id?: pulumi.Input<number>;
}

export interface FirewallSecuritypolicyInternetServiceSrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicySortStatePolicyList {
    action: pulumi.Input<string>;
    name: pulumi.Input<string>;
    policyid: pulumi.Input<string>;
}

export interface FirewallSecuritypolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicySrcaddr4 {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicySrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallSecuritypolicyUrlCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallSecuritypolicyUser {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyAppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallShapingpolicyAppGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyApplication {
    id?: pulumi.Input<number>;
}

export interface FirewallShapingpolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface FirewallShapingpolicyInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyInternetServiceSrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyInternetServiceSrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyInternetServiceSrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyInternetServiceSrcId {
    id?: pulumi.Input<number>;
}

export interface FirewallShapingpolicyInternetServiceSrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicySrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingpolicyUrlCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallShapingpolicyUser {
    name?: pulumi.Input<string>;
}

export interface FirewallShapingprofileShapingEntry {
    burstInMsec?: pulumi.Input<number>;
    cburstInMsec?: pulumi.Input<number>;
    classId?: pulumi.Input<number>;
    guaranteedBandwidthPercentage?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    limit?: pulumi.Input<number>;
    max?: pulumi.Input<number>;
    maximumBandwidthPercentage?: pulumi.Input<number>;
    min?: pulumi.Input<number>;
    priority?: pulumi.Input<string>;
    redProbability?: pulumi.Input<number>;
}

export interface FirewallSnifferAnomaly {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholddefault?: pulumi.Input<number>;
}

export interface FirewallSnifferIpThreatfeed {
    name?: pulumi.Input<string>;
}

export interface FirewallSslsshprofileDot {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    quic?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslsshprofileEchOuterSni {
    name?: pulumi.Input<string>;
    sni?: pulumi.Input<string>;
}

export interface FirewallSslsshprofileFtps {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslsshprofileHttps {
    certProbeFailure?: pulumi.Input<string>;
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    encryptedClientHello?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    quic?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslsshprofileImaps {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslsshprofilePop3s {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslsshprofileSmtps {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslsshprofileSsh {
    inspectAll?: pulumi.Input<string>;
    ports?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    sshAlgorithm?: pulumi.Input<string>;
    sshPolicyCheck?: pulumi.Input<string>;
    sshTunPolicyCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedVersion?: pulumi.Input<string>;
}

export interface FirewallSslsshprofileSsl {
    certProbeFailure?: pulumi.Input<string>;
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    encryptedClientHello?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    inspectAll?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface FirewallSslsshprofileSslExempt {
    address?: pulumi.Input<string>;
    address6?: pulumi.Input<string>;
    fortiguardCategory?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    regex?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    wildcardFqdn?: pulumi.Input<string>;
}

export interface FirewallSslsshprofileSslServer {
    ftpsClientCertRequest?: pulumi.Input<string>;
    ftpsClientCertificate?: pulumi.Input<string>;
    httpsClientCertRequest?: pulumi.Input<string>;
    httpsClientCertificate?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imapsClientCertRequest?: pulumi.Input<string>;
    imapsClientCertificate?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    pop3sClientCertRequest?: pulumi.Input<string>;
    pop3sClientCertificate?: pulumi.Input<string>;
    smtpsClientCertRequest?: pulumi.Input<string>;
    smtpsClientCertificate?: pulumi.Input<string>;
    sslOtherClientCertRequest?: pulumi.Input<string>;
    sslOtherClientCertificate?: pulumi.Input<string>;
}

export interface FirewallTtlpolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallTtlpolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallVip46Monitor {
    name?: pulumi.Input<string>;
}

export interface FirewallVip46Realserver {
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallVip46SrcFilter {
    range?: pulumi.Input<string>;
}

export interface FirewallVip46SrcintfFilter {
    interfaceName?: pulumi.Input<string>;
}

export interface FirewallVip64Monitor {
    name?: pulumi.Input<string>;
}

export interface FirewallVip64Realserver {
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallVip64SrcFilter {
    range?: pulumi.Input<string>;
}

export interface FirewallVip6Monitor {
    name?: pulumi.Input<string>;
}

export interface FirewallVip6Quic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface FirewallVip6Realserver {
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallVip6SrcFilter {
    range?: pulumi.Input<string>;
}

export interface FirewallVip6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallVip6SslServerCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallVipExtaddr {
    name?: pulumi.Input<string>;
}

export interface FirewallVipGslbPublicIp {
    index?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface FirewallVipMappedip {
    range?: pulumi.Input<string>;
}

export interface FirewallVipMonitor {
    name?: pulumi.Input<string>;
}

export interface FirewallVipQuic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface FirewallVipRealserver {
    address?: pulumi.Input<string>;
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface FirewallVipService {
    name?: pulumi.Input<string>;
}

export interface FirewallVipSrcFilter {
    range?: pulumi.Input<string>;
}

export interface FirewallVipSrcintfFilter {
    interfaceName?: pulumi.Input<string>;
}

export interface FirewallVipSslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallVipSslServerCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<string>;
}

export interface FirewallVipgrp46Member {
    name?: pulumi.Input<string>;
}

export interface FirewallVipgrp64Member {
    name?: pulumi.Input<string>;
}

export interface FirewallVipgrp6Member {
    name?: pulumi.Input<string>;
}

export interface FirewallVipgrpMember {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyAppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallconsolidatedPolicyAppGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyApplication {
    id?: pulumi.Input<number>;
}

export interface FirewallconsolidatedPolicyDstaddr4 {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyDstintf {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyFssoGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface FirewallconsolidatedPolicyInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyInternetServiceSrcCustom {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyInternetServiceSrcCustomGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyInternetServiceSrcGroup {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyInternetServiceSrcId {
    id?: pulumi.Input<number>;
}

export interface FirewallconsolidatedPolicyInternetServiceSrcName {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyPoolname4 {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyPoolname6 {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyService {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicySrcaddr4 {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicySrcintf {
    name?: pulumi.Input<string>;
}

export interface FirewallconsolidatedPolicyUrlCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallconsolidatedPolicyUser {
    name?: pulumi.Input<string>;
}

export interface FirewallscheduleGroupMember {
    name?: pulumi.Input<string>;
}

export interface FirewallserviceCustomAppCategory {
    id?: pulumi.Input<number>;
}

export interface FirewallserviceCustomApplication {
    id?: pulumi.Input<number>;
}

export interface FirewallserviceGroupMember {
    name?: pulumi.Input<string>;
}

export interface FirewallwildcardfqdnGroupMember {
    name?: pulumi.Input<string>;
}

export interface IcapProfileIcapHeader {
    base64Encoding?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface IcapProfileRespmodForwardRule {
    action?: pulumi.Input<string>;
    headerGroups?: pulumi.Input<pulumi.Input<inputs.IcapProfileRespmodForwardRuleHeaderGroup>[]>;
    host?: pulumi.Input<string>;
    httpRespStatusCodes?: pulumi.Input<pulumi.Input<inputs.IcapProfileRespmodForwardRuleHttpRespStatusCode>[]>;
    name?: pulumi.Input<string>;
}

export interface IcapProfileRespmodForwardRuleHeaderGroup {
    caseSensitivity?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface IcapProfileRespmodForwardRuleHttpRespStatusCode {
    code?: pulumi.Input<number>;
}

export interface IcapServergroupServerList {
    name?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface IpsDecoderParameter {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface IpsGlobalTlsActiveProbe {
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface IpsRuleMetadata {
    id?: pulumi.Input<number>;
    metaid?: pulumi.Input<number>;
    valueid?: pulumi.Input<number>;
}

export interface IpsSensorEntry {
    action?: pulumi.Input<string>;
    application?: pulumi.Input<string>;
    cves?: pulumi.Input<pulumi.Input<inputs.IpsSensorEntryCfe>[]>;
    defaultAction?: pulumi.Input<string>;
    defaultStatus?: pulumi.Input<string>;
    exemptIps?: pulumi.Input<pulumi.Input<inputs.IpsSensorEntryExemptIp>[]>;
    id?: pulumi.Input<number>;
    lastModified?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAttackContext?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    rateCount?: pulumi.Input<number>;
    rateDuration?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    rateTrack?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.IpsSensorEntryRule>[]>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    vulnTypes?: pulumi.Input<pulumi.Input<inputs.IpsSensorEntryVulnType>[]>;
}

export interface IpsSensorEntryCfe {
    cveEntry?: pulumi.Input<string>;
}

export interface IpsSensorEntryExemptIp {
    dstIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
}

export interface IpsSensorEntryRule {
    id?: pulumi.Input<number>;
}

export interface IpsSensorEntryVulnType {
    id?: pulumi.Input<number>;
}

export interface IpsSensorFilter {
    action?: pulumi.Input<string>;
    application?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<number>;
    quarantineLog?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface IpsSensorOverride {
    action?: pulumi.Input<string>;
    exemptIps?: pulumi.Input<pulumi.Input<inputs.IpsSensorOverrideExemptIp>[]>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<number>;
    quarantineLog?: pulumi.Input<string>;
    ruleId?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface IpsSensorOverrideExemptIp {
    dstIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
}

export interface LogSettingCustomLogField {
    fieldId?: pulumi.Input<string>;
}

export interface LogThreatweightApplication {
    category?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
}

export interface LogThreatweightGeolocation {
    country?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
}

export interface LogThreatweightIps {
    criticalSeverity?: pulumi.Input<string>;
    highSeverity?: pulumi.Input<string>;
    infoSeverity?: pulumi.Input<string>;
    lowSeverity?: pulumi.Input<string>;
    mediumSeverity?: pulumi.Input<string>;
}

export interface LogThreatweightLevel {
    critical?: pulumi.Input<number>;
    high?: pulumi.Input<number>;
    low?: pulumi.Input<number>;
    medium?: pulumi.Input<number>;
}

export interface LogThreatweightMalware {
    botnetConnection?: pulumi.Input<string>;
    commandBlocked?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emsThreatFeed?: pulumi.Input<string>;
    fileBlocked?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    fsaHighRisk?: pulumi.Input<string>;
    fsaMalicious?: pulumi.Input<string>;
    fsaMediumRisk?: pulumi.Input<string>;
    inlineBlock?: pulumi.Input<string>;
    malwareList?: pulumi.Input<string>;
    mimefragmented?: pulumi.Input<string>;
    oversized?: pulumi.Input<string>;
    switchProto?: pulumi.Input<string>;
    virusFileTypeExecutable?: pulumi.Input<string>;
    virusInfected?: pulumi.Input<string>;
    virusOutbreakPrevention?: pulumi.Input<string>;
    virusScanError?: pulumi.Input<string>;
}

export interface LogThreatweightWeb {
    category?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
}

export interface LogdiskFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logfortianalyzer2FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logfortianalyzer2OverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logfortianalyzer2OverridesettingSerial {
    name?: pulumi.Input<string>;
}

export interface Logfortianalyzer2SettingSerial {
    name?: pulumi.Input<string>;
}

export interface Logfortianalyzer3FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logfortianalyzer3OverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logfortianalyzer3OverridesettingSerial {
    name?: pulumi.Input<string>;
}

export interface Logfortianalyzer3SettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogfortianalyzerFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogfortianalyzerOverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogfortianalyzerOverridesettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogfortianalyzerSettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogfortianalyzercloudFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogfortianalyzercloudOverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogfortianalyzercloudSettingSerial {
    name?: pulumi.Input<string>;
}

export interface LogfortiguardFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogfortiguardOverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogmemoryFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LognulldeviceFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logsyslogd2FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logsyslogd2OverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logsyslogd2OverridesettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface Logsyslogd2SettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface Logsyslogd3FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logsyslogd3OverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logsyslogd3OverridesettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface Logsyslogd3SettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface Logsyslogd4FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logsyslogd4OverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Logsyslogd4OverridesettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface Logsyslogd4SettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogsyslogdFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogsyslogdOverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogsyslogdOverridesettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogsyslogdSettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogwebtrendsFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface NsxtServicechainServiceIndex {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    reverseIndex?: pulumi.Input<number>;
    vd?: pulumi.Input<string>;
}

export interface ReportChartCategorySeries {
    databind?: pulumi.Input<string>;
    fontSize?: pulumi.Input<number>;
}

export interface ReportChartColumn {
    detailUnit?: pulumi.Input<string>;
    detailValue?: pulumi.Input<string>;
    footerUnit?: pulumi.Input<string>;
    footerValue?: pulumi.Input<string>;
    headerValue?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    mappings?: pulumi.Input<pulumi.Input<inputs.ReportChartColumnMapping>[]>;
}

export interface ReportChartColumnMapping {
    displayname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    op?: pulumi.Input<string>;
    value1?: pulumi.Input<string>;
    value2?: pulumi.Input<string>;
    valueType?: pulumi.Input<string>;
}

export interface ReportChartDrillDownChart {
    chartName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ReportChartValueSeries {
    databind?: pulumi.Input<string>;
}

export interface ReportChartXSeries {
    caption?: pulumi.Input<string>;
    captionFontSize?: pulumi.Input<number>;
    databind?: pulumi.Input<string>;
    fontSize?: pulumi.Input<number>;
    isCategory?: pulumi.Input<string>;
    labelAngle?: pulumi.Input<string>;
    scaleDirection?: pulumi.Input<string>;
    scaleFormat?: pulumi.Input<string>;
    scaleStep?: pulumi.Input<number>;
    scaleUnit?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
}

export interface ReportChartYSeries {
    caption?: pulumi.Input<string>;
    captionFontSize?: pulumi.Input<number>;
    databind?: pulumi.Input<string>;
    extraDatabind?: pulumi.Input<string>;
    extraY?: pulumi.Input<string>;
    extraYLegend?: pulumi.Input<string>;
    fontSize?: pulumi.Input<number>;
    group?: pulumi.Input<string>;
    labelAngle?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    yLegend?: pulumi.Input<string>;
}

export interface ReportDatasetField {
    displayname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ReportDatasetParameter {
    dataType?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    field?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ReportLayoutBodyItem {
    chart?: pulumi.Input<string>;
    chartOptions?: pulumi.Input<string>;
    column?: pulumi.Input<number>;
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    drillDownItems?: pulumi.Input<string>;
    drillDownTypes?: pulumi.Input<string>;
    hide?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imgSrc?: pulumi.Input<string>;
    listComponent?: pulumi.Input<string>;
    lists?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyItemList>[]>;
    miscComponent?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyItemParameter>[]>;
    style?: pulumi.Input<string>;
    tableCaptionStyle?: pulumi.Input<string>;
    tableColumnWidths?: pulumi.Input<string>;
    tableEvenRowStyle?: pulumi.Input<string>;
    tableHeadStyle?: pulumi.Input<string>;
    tableOddRowStyle?: pulumi.Input<string>;
    textComponent?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    topN?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface ReportLayoutBodyItemList {
    content?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ReportLayoutBodyItemParameter {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ReportLayoutPage {
    columnBreakBefore?: pulumi.Input<string>;
    footer?: pulumi.Input<inputs.ReportLayoutPageFooter>;
    header?: pulumi.Input<inputs.ReportLayoutPageHeader>;
    options?: pulumi.Input<string>;
    pageBreakBefore?: pulumi.Input<string>;
    paper?: pulumi.Input<string>;
}

export interface ReportLayoutPageFooter {
    footerItems?: pulumi.Input<pulumi.Input<inputs.ReportLayoutPageFooterFooterItem>[]>;
    style?: pulumi.Input<string>;
}

export interface ReportLayoutPageFooterFooterItem {
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imgSrc?: pulumi.Input<string>;
    style?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ReportLayoutPageHeader {
    headerItems?: pulumi.Input<pulumi.Input<inputs.ReportLayoutPageHeaderHeaderItem>[]>;
    style?: pulumi.Input<string>;
}

export interface ReportLayoutPageHeaderHeaderItem {
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imgSrc?: pulumi.Input<string>;
    style?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface RouterAccesslist6Rule {
    action?: pulumi.Input<string>;
    exactMatch?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterAccesslistRule {
    action?: pulumi.Input<string>;
    exactMatch?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    wildcard?: pulumi.Input<string>;
}

export interface RouterAspathlistRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    regexp?: pulumi.Input<string>;
}

export interface RouterBfd6MultihopTemplate {
    authMode?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    dst?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    md5Key?: pulumi.Input<string>;
    src?: pulumi.Input<string>;
}

export interface RouterBfd6Neighbor {
    interface?: pulumi.Input<string>;
    ip6Address?: pulumi.Input<string>;
}

export interface RouterBfdMultihopTemplate {
    authMode?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    dst?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    md5Key?: pulumi.Input<string>;
    src?: pulumi.Input<string>;
}

export interface RouterBfdNeighbor {
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
}

export interface RouterBgpAdminDistance {
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    neighbourPrefix?: pulumi.Input<string>;
    routeList?: pulumi.Input<string>;
}

export interface RouterBgpAggregateAddress {
    asSet?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    summaryOnly?: pulumi.Input<string>;
}

export interface RouterBgpAggregateAddress6 {
    asSet?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
    summaryOnly?: pulumi.Input<string>;
}

export interface RouterBgpConfederationPeer {
    peer?: pulumi.Input<string>;
}

export interface RouterBgpNeighbor {
    activate?: pulumi.Input<string>;
    activate6?: pulumi.Input<string>;
    activateEvpn?: pulumi.Input<string>;
    activateVpnv4?: pulumi.Input<string>;
    activateVpnv6?: pulumi.Input<string>;
    additionalPath?: pulumi.Input<string>;
    additionalPath6?: pulumi.Input<string>;
    additionalPathVpnv4?: pulumi.Input<string>;
    additionalPathVpnv6?: pulumi.Input<string>;
    advAdditionalPath?: pulumi.Input<number>;
    advAdditionalPath6?: pulumi.Input<number>;
    advAdditionalPathVpnv4?: pulumi.Input<number>;
    advAdditionalPathVpnv6?: pulumi.Input<number>;
    advertisementInterval?: pulumi.Input<number>;
    allowasIn?: pulumi.Input<number>;
    allowasIn6?: pulumi.Input<number>;
    allowasInEnable?: pulumi.Input<string>;
    allowasInEnable6?: pulumi.Input<string>;
    allowasInEnableEvpn?: pulumi.Input<string>;
    allowasInEnableVpnv4?: pulumi.Input<string>;
    allowasInEnableVpnv6?: pulumi.Input<string>;
    allowasInEvpn?: pulumi.Input<number>;
    allowasInVpnv4?: pulumi.Input<number>;
    allowasInVpnv6?: pulumi.Input<number>;
    asOverride?: pulumi.Input<string>;
    asOverride6?: pulumi.Input<string>;
    attributeUnchanged?: pulumi.Input<string>;
    attributeUnchanged6?: pulumi.Input<string>;
    attributeUnchangedVpnv4?: pulumi.Input<string>;
    attributeUnchangedVpnv6?: pulumi.Input<string>;
    authOptions?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    capabilityDefaultOriginate?: pulumi.Input<string>;
    capabilityDefaultOriginate6?: pulumi.Input<string>;
    capabilityDynamic?: pulumi.Input<string>;
    capabilityGracefulRestart?: pulumi.Input<string>;
    capabilityGracefulRestart6?: pulumi.Input<string>;
    capabilityGracefulRestartEvpn?: pulumi.Input<string>;
    capabilityGracefulRestartVpnv4?: pulumi.Input<string>;
    capabilityGracefulRestartVpnv6?: pulumi.Input<string>;
    capabilityOrf?: pulumi.Input<string>;
    capabilityOrf6?: pulumi.Input<string>;
    capabilityRouteRefresh?: pulumi.Input<string>;
    conditionalAdvertise6s?: pulumi.Input<pulumi.Input<inputs.RouterBgpNeighborConditionalAdvertise6>[]>;
    conditionalAdvertises?: pulumi.Input<pulumi.Input<inputs.RouterBgpNeighborConditionalAdvertise>[]>;
    connectTimer?: pulumi.Input<number>;
    defaultOriginateRoutemap?: pulumi.Input<string>;
    defaultOriginateRoutemap6?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    distributeListIn?: pulumi.Input<string>;
    distributeListIn6?: pulumi.Input<string>;
    distributeListInVpnv4?: pulumi.Input<string>;
    distributeListInVpnv6?: pulumi.Input<string>;
    distributeListOut?: pulumi.Input<string>;
    distributeListOut6?: pulumi.Input<string>;
    distributeListOutVpnv4?: pulumi.Input<string>;
    distributeListOutVpnv6?: pulumi.Input<string>;
    dontCapabilityNegotiate?: pulumi.Input<string>;
    ebgpEnforceMultihop?: pulumi.Input<string>;
    ebgpMultihopTtl?: pulumi.Input<number>;
    filterListIn?: pulumi.Input<string>;
    filterListIn6?: pulumi.Input<string>;
    filterListInVpnv4?: pulumi.Input<string>;
    filterListInVpnv6?: pulumi.Input<string>;
    filterListOut?: pulumi.Input<string>;
    filterListOut6?: pulumi.Input<string>;
    filterListOutVpnv4?: pulumi.Input<string>;
    filterListOutVpnv6?: pulumi.Input<string>;
    holdtimeTimer?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    keepAliveTimer?: pulumi.Input<number>;
    linkDownFailover?: pulumi.Input<string>;
    localAs?: pulumi.Input<number>;
    localAsNoPrepend?: pulumi.Input<string>;
    localAsReplaceAs?: pulumi.Input<string>;
    maximumPrefix?: pulumi.Input<number>;
    maximumPrefix6?: pulumi.Input<number>;
    maximumPrefixEvpn?: pulumi.Input<number>;
    maximumPrefixThreshold?: pulumi.Input<number>;
    maximumPrefixThreshold6?: pulumi.Input<number>;
    maximumPrefixThresholdEvpn?: pulumi.Input<number>;
    maximumPrefixThresholdVpnv4?: pulumi.Input<number>;
    maximumPrefixThresholdVpnv6?: pulumi.Input<number>;
    maximumPrefixVpnv4?: pulumi.Input<number>;
    maximumPrefixVpnv6?: pulumi.Input<number>;
    maximumPrefixWarningOnly?: pulumi.Input<string>;
    maximumPrefixWarningOnly6?: pulumi.Input<string>;
    maximumPrefixWarningOnlyEvpn?: pulumi.Input<string>;
    maximumPrefixWarningOnlyVpnv4?: pulumi.Input<string>;
    maximumPrefixWarningOnlyVpnv6?: pulumi.Input<string>;
    nextHopSelf?: pulumi.Input<string>;
    nextHopSelf6?: pulumi.Input<string>;
    nextHopSelfRr?: pulumi.Input<string>;
    nextHopSelfRr6?: pulumi.Input<string>;
    nextHopSelfVpnv4?: pulumi.Input<string>;
    nextHopSelfVpnv6?: pulumi.Input<string>;
    overrideCapability?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    prefixListIn?: pulumi.Input<string>;
    prefixListIn6?: pulumi.Input<string>;
    prefixListInVpnv4?: pulumi.Input<string>;
    prefixListInVpnv6?: pulumi.Input<string>;
    prefixListOut?: pulumi.Input<string>;
    prefixListOut6?: pulumi.Input<string>;
    prefixListOutVpnv4?: pulumi.Input<string>;
    prefixListOutVpnv6?: pulumi.Input<string>;
    remoteAs?: pulumi.Input<number>;
    removePrivateAs?: pulumi.Input<string>;
    removePrivateAs6?: pulumi.Input<string>;
    removePrivateAsEvpn?: pulumi.Input<string>;
    removePrivateAsVpnv4?: pulumi.Input<string>;
    removePrivateAsVpnv6?: pulumi.Input<string>;
    restartTime?: pulumi.Input<number>;
    retainStaleTime?: pulumi.Input<number>;
    routeMapIn?: pulumi.Input<string>;
    routeMapIn6?: pulumi.Input<string>;
    routeMapInEvpn?: pulumi.Input<string>;
    routeMapInVpnv4?: pulumi.Input<string>;
    routeMapInVpnv6?: pulumi.Input<string>;
    routeMapOut?: pulumi.Input<string>;
    routeMapOut6?: pulumi.Input<string>;
    routeMapOut6Preferable?: pulumi.Input<string>;
    routeMapOutEvpn?: pulumi.Input<string>;
    routeMapOutPreferable?: pulumi.Input<string>;
    routeMapOutVpnv4?: pulumi.Input<string>;
    routeMapOutVpnv4Preferable?: pulumi.Input<string>;
    routeMapOutVpnv6?: pulumi.Input<string>;
    routeMapOutVpnv6Preferable?: pulumi.Input<string>;
    routeReflectorClient?: pulumi.Input<string>;
    routeReflectorClient6?: pulumi.Input<string>;
    routeReflectorClientEvpn?: pulumi.Input<string>;
    routeReflectorClientVpnv4?: pulumi.Input<string>;
    routeReflectorClientVpnv6?: pulumi.Input<string>;
    routeServerClient?: pulumi.Input<string>;
    routeServerClient6?: pulumi.Input<string>;
    routeServerClientEvpn?: pulumi.Input<string>;
    routeServerClientVpnv4?: pulumi.Input<string>;
    routeServerClientVpnv6?: pulumi.Input<string>;
    sendCommunity?: pulumi.Input<string>;
    sendCommunity6?: pulumi.Input<string>;
    sendCommunityEvpn?: pulumi.Input<string>;
    sendCommunityVpnv4?: pulumi.Input<string>;
    sendCommunityVpnv6?: pulumi.Input<string>;
    shutdown?: pulumi.Input<string>;
    softReconfiguration?: pulumi.Input<string>;
    softReconfiguration6?: pulumi.Input<string>;
    softReconfigurationEvpn?: pulumi.Input<string>;
    softReconfigurationVpnv4?: pulumi.Input<string>;
    softReconfigurationVpnv6?: pulumi.Input<string>;
    staleRoute?: pulumi.Input<string>;
    strictCapabilityMatch?: pulumi.Input<string>;
    unsuppressMap?: pulumi.Input<string>;
    unsuppressMap6?: pulumi.Input<string>;
    updateSource?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface RouterBgpNeighborConditionalAdvertise {
    advertiseRoutemap?: pulumi.Input<string>;
    conditionRoutemap?: pulumi.Input<string>;
    conditionType?: pulumi.Input<string>;
}

export interface RouterBgpNeighborConditionalAdvertise6 {
    advertiseRoutemap?: pulumi.Input<string>;
    conditionRoutemap?: pulumi.Input<string>;
    conditionType?: pulumi.Input<string>;
}

export interface RouterBgpNeighborGroup {
    activate?: pulumi.Input<string>;
    activate6?: pulumi.Input<string>;
    activateEvpn?: pulumi.Input<string>;
    activateVpnv4?: pulumi.Input<string>;
    activateVpnv6?: pulumi.Input<string>;
    additionalPath?: pulumi.Input<string>;
    additionalPath6?: pulumi.Input<string>;
    additionalPathVpnv4?: pulumi.Input<string>;
    additionalPathVpnv6?: pulumi.Input<string>;
    advAdditionalPath?: pulumi.Input<number>;
    advAdditionalPath6?: pulumi.Input<number>;
    advAdditionalPathVpnv4?: pulumi.Input<number>;
    advAdditionalPathVpnv6?: pulumi.Input<number>;
    advertisementInterval?: pulumi.Input<number>;
    allowasIn?: pulumi.Input<number>;
    allowasIn6?: pulumi.Input<number>;
    allowasInEnable?: pulumi.Input<string>;
    allowasInEnable6?: pulumi.Input<string>;
    allowasInEnableEvpn?: pulumi.Input<string>;
    allowasInEnableVpnv4?: pulumi.Input<string>;
    allowasInEnableVpnv6?: pulumi.Input<string>;
    allowasInEvpn?: pulumi.Input<number>;
    allowasInVpnv4?: pulumi.Input<number>;
    allowasInVpnv6?: pulumi.Input<number>;
    asOverride?: pulumi.Input<string>;
    asOverride6?: pulumi.Input<string>;
    attributeUnchanged?: pulumi.Input<string>;
    attributeUnchanged6?: pulumi.Input<string>;
    attributeUnchangedVpnv4?: pulumi.Input<string>;
    attributeUnchangedVpnv6?: pulumi.Input<string>;
    authOptions?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    capabilityDefaultOriginate?: pulumi.Input<string>;
    capabilityDefaultOriginate6?: pulumi.Input<string>;
    capabilityDynamic?: pulumi.Input<string>;
    capabilityGracefulRestart?: pulumi.Input<string>;
    capabilityGracefulRestart6?: pulumi.Input<string>;
    capabilityGracefulRestartEvpn?: pulumi.Input<string>;
    capabilityGracefulRestartVpnv4?: pulumi.Input<string>;
    capabilityGracefulRestartVpnv6?: pulumi.Input<string>;
    capabilityOrf?: pulumi.Input<string>;
    capabilityOrf6?: pulumi.Input<string>;
    capabilityRouteRefresh?: pulumi.Input<string>;
    connectTimer?: pulumi.Input<number>;
    defaultOriginateRoutemap?: pulumi.Input<string>;
    defaultOriginateRoutemap6?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    distributeListIn?: pulumi.Input<string>;
    distributeListIn6?: pulumi.Input<string>;
    distributeListInVpnv4?: pulumi.Input<string>;
    distributeListInVpnv6?: pulumi.Input<string>;
    distributeListOut?: pulumi.Input<string>;
    distributeListOut6?: pulumi.Input<string>;
    distributeListOutVpnv4?: pulumi.Input<string>;
    distributeListOutVpnv6?: pulumi.Input<string>;
    dontCapabilityNegotiate?: pulumi.Input<string>;
    ebgpEnforceMultihop?: pulumi.Input<string>;
    ebgpMultihopTtl?: pulumi.Input<number>;
    filterListIn?: pulumi.Input<string>;
    filterListIn6?: pulumi.Input<string>;
    filterListInVpnv4?: pulumi.Input<string>;
    filterListInVpnv6?: pulumi.Input<string>;
    filterListOut?: pulumi.Input<string>;
    filterListOut6?: pulumi.Input<string>;
    filterListOutVpnv4?: pulumi.Input<string>;
    filterListOutVpnv6?: pulumi.Input<string>;
    holdtimeTimer?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    keepAliveTimer?: pulumi.Input<number>;
    linkDownFailover?: pulumi.Input<string>;
    localAs?: pulumi.Input<number>;
    localAsNoPrepend?: pulumi.Input<string>;
    localAsReplaceAs?: pulumi.Input<string>;
    maximumPrefix?: pulumi.Input<number>;
    maximumPrefix6?: pulumi.Input<number>;
    maximumPrefixEvpn?: pulumi.Input<number>;
    maximumPrefixThreshold?: pulumi.Input<number>;
    maximumPrefixThreshold6?: pulumi.Input<number>;
    maximumPrefixThresholdEvpn?: pulumi.Input<number>;
    maximumPrefixThresholdVpnv4?: pulumi.Input<number>;
    maximumPrefixThresholdVpnv6?: pulumi.Input<number>;
    maximumPrefixVpnv4?: pulumi.Input<number>;
    maximumPrefixVpnv6?: pulumi.Input<number>;
    maximumPrefixWarningOnly?: pulumi.Input<string>;
    maximumPrefixWarningOnly6?: pulumi.Input<string>;
    maximumPrefixWarningOnlyEvpn?: pulumi.Input<string>;
    maximumPrefixWarningOnlyVpnv4?: pulumi.Input<string>;
    maximumPrefixWarningOnlyVpnv6?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nextHopSelf?: pulumi.Input<string>;
    nextHopSelf6?: pulumi.Input<string>;
    nextHopSelfRr?: pulumi.Input<string>;
    nextHopSelfRr6?: pulumi.Input<string>;
    nextHopSelfVpnv4?: pulumi.Input<string>;
    nextHopSelfVpnv6?: pulumi.Input<string>;
    overrideCapability?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    prefixListIn?: pulumi.Input<string>;
    prefixListIn6?: pulumi.Input<string>;
    prefixListInVpnv4?: pulumi.Input<string>;
    prefixListInVpnv6?: pulumi.Input<string>;
    prefixListOut?: pulumi.Input<string>;
    prefixListOut6?: pulumi.Input<string>;
    prefixListOutVpnv4?: pulumi.Input<string>;
    prefixListOutVpnv6?: pulumi.Input<string>;
    remoteAs?: pulumi.Input<number>;
    remoteAsFilter?: pulumi.Input<string>;
    removePrivateAs?: pulumi.Input<string>;
    removePrivateAs6?: pulumi.Input<string>;
    removePrivateAsEvpn?: pulumi.Input<string>;
    removePrivateAsVpnv4?: pulumi.Input<string>;
    removePrivateAsVpnv6?: pulumi.Input<string>;
    restartTime?: pulumi.Input<number>;
    retainStaleTime?: pulumi.Input<number>;
    routeMapIn?: pulumi.Input<string>;
    routeMapIn6?: pulumi.Input<string>;
    routeMapInEvpn?: pulumi.Input<string>;
    routeMapInVpnv4?: pulumi.Input<string>;
    routeMapInVpnv6?: pulumi.Input<string>;
    routeMapOut?: pulumi.Input<string>;
    routeMapOut6?: pulumi.Input<string>;
    routeMapOut6Preferable?: pulumi.Input<string>;
    routeMapOutEvpn?: pulumi.Input<string>;
    routeMapOutPreferable?: pulumi.Input<string>;
    routeMapOutVpnv4?: pulumi.Input<string>;
    routeMapOutVpnv4Preferable?: pulumi.Input<string>;
    routeMapOutVpnv6?: pulumi.Input<string>;
    routeMapOutVpnv6Preferable?: pulumi.Input<string>;
    routeReflectorClient?: pulumi.Input<string>;
    routeReflectorClient6?: pulumi.Input<string>;
    routeReflectorClientEvpn?: pulumi.Input<string>;
    routeReflectorClientVpnv4?: pulumi.Input<string>;
    routeReflectorClientVpnv6?: pulumi.Input<string>;
    routeServerClient?: pulumi.Input<string>;
    routeServerClient6?: pulumi.Input<string>;
    routeServerClientEvpn?: pulumi.Input<string>;
    routeServerClientVpnv4?: pulumi.Input<string>;
    routeServerClientVpnv6?: pulumi.Input<string>;
    sendCommunity?: pulumi.Input<string>;
    sendCommunity6?: pulumi.Input<string>;
    sendCommunityEvpn?: pulumi.Input<string>;
    sendCommunityVpnv4?: pulumi.Input<string>;
    sendCommunityVpnv6?: pulumi.Input<string>;
    shutdown?: pulumi.Input<string>;
    softReconfiguration?: pulumi.Input<string>;
    softReconfiguration6?: pulumi.Input<string>;
    softReconfigurationEvpn?: pulumi.Input<string>;
    softReconfigurationVpnv4?: pulumi.Input<string>;
    softReconfigurationVpnv6?: pulumi.Input<string>;
    staleRoute?: pulumi.Input<string>;
    strictCapabilityMatch?: pulumi.Input<string>;
    unsuppressMap?: pulumi.Input<string>;
    unsuppressMap6?: pulumi.Input<string>;
    updateSource?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface RouterBgpNeighborRange {
    id?: pulumi.Input<number>;
    maxNeighborNum?: pulumi.Input<number>;
    neighborGroup?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface RouterBgpNeighborRange6 {
    id?: pulumi.Input<number>;
    maxNeighborNum?: pulumi.Input<number>;
    neighborGroup?: pulumi.Input<string>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterBgpNetwork {
    backdoor?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    networkImportCheck?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
}

export interface RouterBgpNetwork6 {
    backdoor?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    networkImportCheck?: pulumi.Input<string>;
    prefix6?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
}

export interface RouterBgpRedistribute {
    name?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterBgpRedistribute6 {
    name?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterBgpVrf {
    exportRts?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfExportRt>[]>;
    importRouteMap?: pulumi.Input<string>;
    importRts?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfImportRt>[]>;
    leakTargets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfLeakTarget>[]>;
    rd?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrf6 {
    exportRts?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrf6ExportRt>[]>;
    importRouteMap?: pulumi.Input<string>;
    importRts?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrf6ImportRt>[]>;
    leakTargets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrf6LeakTarget>[]>;
    rd?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrf6ExportRt {
    routeTarget?: pulumi.Input<string>;
}

export interface RouterBgpVrf6ImportRt {
    routeTarget?: pulumi.Input<string>;
}

export interface RouterBgpVrf6LeakTarget {
    interface?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfExportRt {
    routeTarget?: pulumi.Input<string>;
}

export interface RouterBgpVrfImportRt {
    routeTarget?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeak {
    targets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfLeakTarget>[]>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeak6 {
    targets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfLeak6Target>[]>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeak6Target {
    interface?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeakTarget {
    interface?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterCommunitylistRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    match?: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
}

export interface RouterExtcommunitylistRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    match?: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface RouterIsisIsisInterface {
    authKeychainL1?: pulumi.Input<string>;
    authKeychainL2?: pulumi.Input<string>;
    authModeL1?: pulumi.Input<string>;
    authModeL2?: pulumi.Input<string>;
    authPasswordL1?: pulumi.Input<string>;
    authPasswordL2?: pulumi.Input<string>;
    authSendOnlyL1?: pulumi.Input<string>;
    authSendOnlyL2?: pulumi.Input<string>;
    circuitType?: pulumi.Input<string>;
    csnpIntervalL1?: pulumi.Input<number>;
    csnpIntervalL2?: pulumi.Input<number>;
    helloIntervalL1?: pulumi.Input<number>;
    helloIntervalL2?: pulumi.Input<number>;
    helloMultiplierL1?: pulumi.Input<number>;
    helloMultiplierL2?: pulumi.Input<number>;
    helloPadding?: pulumi.Input<string>;
    lspInterval?: pulumi.Input<number>;
    lspRetransmitInterval?: pulumi.Input<number>;
    meshGroup?: pulumi.Input<string>;
    meshGroupId?: pulumi.Input<number>;
    metricL1?: pulumi.Input<number>;
    metricL2?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    priorityL1?: pulumi.Input<number>;
    priorityL2?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    status6?: pulumi.Input<string>;
    wideMetricL1?: pulumi.Input<number>;
    wideMetricL2?: pulumi.Input<number>;
}

export interface RouterIsisIsisNet {
    id?: pulumi.Input<number>;
    net?: pulumi.Input<string>;
}

export interface RouterIsisRedistribute {
    level?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterIsisRedistribute6 {
    level?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterIsisSummaryAddress {
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface RouterIsisSummaryAddress6 {
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterKeychainKey {
    acceptLifetime?: pulumi.Input<string>;
    algorithm?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    keyString?: pulumi.Input<string>;
    sendLifetime?: pulumi.Input<string>;
}

export interface RouterMulticast6Interface {
    helloHoldtime?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface RouterMulticast6PimSmGlobal {
    registerRateLimit?: pulumi.Input<number>;
    rpAddresses?: pulumi.Input<pulumi.Input<inputs.RouterMulticast6PimSmGlobalRpAddress>[]>;
}

export interface RouterMulticast6PimSmGlobalRpAddress {
    id?: pulumi.Input<number>;
    ip6Address?: pulumi.Input<string>;
}

export interface RouterMulticastInterface {
    bfd?: pulumi.Input<string>;
    ciscoExcludeGenid?: pulumi.Input<string>;
    drPriority?: pulumi.Input<number>;
    helloHoldtime?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    igmp?: pulumi.Input<inputs.RouterMulticastInterfaceIgmp>;
    joinGroups?: pulumi.Input<pulumi.Input<inputs.RouterMulticastInterfaceJoinGroup>[]>;
    multicastFlow?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    neighbourFilter?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    pimMode?: pulumi.Input<string>;
    propagationDelay?: pulumi.Input<number>;
    rpCandidate?: pulumi.Input<string>;
    rpCandidateGroup?: pulumi.Input<string>;
    rpCandidateInterval?: pulumi.Input<number>;
    rpCandidatePriority?: pulumi.Input<number>;
    rpfNbrFailBack?: pulumi.Input<string>;
    rpfNbrFailBackFilter?: pulumi.Input<string>;
    stateRefreshInterval?: pulumi.Input<number>;
    staticGroup?: pulumi.Input<string>;
    ttlThreshold?: pulumi.Input<number>;
}

export interface RouterMulticastInterfaceIgmp {
    accessGroup?: pulumi.Input<string>;
    immediateLeaveGroup?: pulumi.Input<string>;
    lastMemberQueryCount?: pulumi.Input<number>;
    lastMemberQueryInterval?: pulumi.Input<number>;
    queryInterval?: pulumi.Input<number>;
    queryMaxResponseTime?: pulumi.Input<number>;
    queryTimeout?: pulumi.Input<number>;
    routerAlertCheck?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface RouterMulticastInterfaceJoinGroup {
    address?: pulumi.Input<string>;
}

export interface RouterMulticastPimSmGlobal {
    acceptRegisterList?: pulumi.Input<string>;
    acceptSourceList?: pulumi.Input<string>;
    bsrAllowQuickRefresh?: pulumi.Input<string>;
    bsrCandidate?: pulumi.Input<string>;
    bsrHash?: pulumi.Input<number>;
    bsrInterface?: pulumi.Input<string>;
    bsrPriority?: pulumi.Input<number>;
    ciscoCrpPrefix?: pulumi.Input<string>;
    ciscoIgnoreRpSetPriority?: pulumi.Input<string>;
    ciscoRegisterChecksum?: pulumi.Input<string>;
    ciscoRegisterChecksumGroup?: pulumi.Input<string>;
    joinPruneHoldtime?: pulumi.Input<number>;
    messageInterval?: pulumi.Input<number>;
    nullRegisterRetries?: pulumi.Input<number>;
    pimUseSdwan?: pulumi.Input<string>;
    registerRateLimit?: pulumi.Input<number>;
    registerRpReachability?: pulumi.Input<string>;
    registerSource?: pulumi.Input<string>;
    registerSourceInterface?: pulumi.Input<string>;
    registerSourceIp?: pulumi.Input<string>;
    registerSupression?: pulumi.Input<number>;
    rpAddresses?: pulumi.Input<pulumi.Input<inputs.RouterMulticastPimSmGlobalRpAddress>[]>;
    rpRegisterKeepalive?: pulumi.Input<number>;
    sptThreshold?: pulumi.Input<string>;
    sptThresholdGroup?: pulumi.Input<string>;
    ssm?: pulumi.Input<string>;
    ssmRange?: pulumi.Input<string>;
}

export interface RouterMulticastPimSmGlobalRpAddress {
    group?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
}

export interface RouterMulticastflowFlow {
    groupAddr?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    sourceAddr?: pulumi.Input<string>;
}

export interface RouterOspf6Area {
    authentication?: pulumi.Input<string>;
    defaultCost?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    ipsecAuthAlg?: pulumi.Input<string>;
    ipsecEncAlg?: pulumi.Input<string>;
    ipsecKeys?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaIpsecKey>[]>;
    keyRolloverInterval?: pulumi.Input<number>;
    nssaDefaultInformationOriginate?: pulumi.Input<string>;
    nssaDefaultInformationOriginateMetric?: pulumi.Input<number>;
    nssaDefaultInformationOriginateMetricType?: pulumi.Input<string>;
    nssaRedistribution?: pulumi.Input<string>;
    nssaTranslatorRole?: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaRange>[]>;
    stubType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    virtualLinks?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaVirtualLink>[]>;
}

export interface RouterOspf6AreaIpsecKey {
    authKey?: pulumi.Input<string>;
    encKey?: pulumi.Input<string>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6AreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterOspf6AreaVirtualLink {
    authentication?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    ipsecAuthAlg?: pulumi.Input<string>;
    ipsecEncAlg?: pulumi.Input<string>;
    ipsecKeys?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaVirtualLinkIpsecKey>[]>;
    keyRolloverInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspf6AreaVirtualLinkIpsecKey {
    authKey?: pulumi.Input<string>;
    encKey?: pulumi.Input<string>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6Interface {
    areaId?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ipsecAuthAlg?: pulumi.Input<string>;
    ipsecEncAlg?: pulumi.Input<string>;
    ipsecKeys?: pulumi.Input<pulumi.Input<inputs.RouterOspf6Ospf6InterfaceIpsecKey>[]>;
    keyRolloverInterval?: pulumi.Input<number>;
    mtu?: pulumi.Input<number>;
    mtuIgnore?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    neighbors?: pulumi.Input<pulumi.Input<inputs.RouterOspf6Ospf6InterfaceNeighbor>[]>;
    networkType?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    retransmitInterval?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6InterfaceIpsecKey {
    authKey?: pulumi.Input<string>;
    encKey?: pulumi.Input<string>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6InterfaceNeighbor {
    cost?: pulumi.Input<number>;
    ip6?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
}

export interface RouterOspf6PassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterOspf6Redistribute {
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterOspf6SummaryAddress {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterOspfArea {
    authentication?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    defaultCost?: pulumi.Input<number>;
    filterLists?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaFilterList>[]>;
    id?: pulumi.Input<string>;
    nssaDefaultInformationOriginate?: pulumi.Input<string>;
    nssaDefaultInformationOriginateMetric?: pulumi.Input<number>;
    nssaDefaultInformationOriginateMetricType?: pulumi.Input<string>;
    nssaRedistribution?: pulumi.Input<string>;
    nssaTranslatorRole?: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaRange>[]>;
    shortcut?: pulumi.Input<string>;
    stubType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    virtualLinks?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaVirtualLink>[]>;
}

export interface RouterOspfAreaFilterList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    list?: pulumi.Input<string>;
}

export interface RouterOspfAreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    substitute?: pulumi.Input<string>;
    substituteStatus?: pulumi.Input<string>;
}

export interface RouterOspfAreaVirtualLink {
    authentication?: pulumi.Input<string>;
    authenticationKey?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    keychain?: pulumi.Input<string>;
    md5Key?: pulumi.Input<string>;
    md5Keychain?: pulumi.Input<string>;
    md5Keys?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaVirtualLinkMd5Key>[]>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspfAreaVirtualLinkMd5Key {
    id?: pulumi.Input<number>;
    keyString?: pulumi.Input<string>;
}

export interface RouterOspfDistributeList {
    accessList?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface RouterOspfNeighbor {
    cost?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
}

export interface RouterOspfNetwork {
    area?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterOspfOspfInterface {
    authentication?: pulumi.Input<string>;
    authenticationKey?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    databaseFilterOut?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    helloMultiplier?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    keychain?: pulumi.Input<string>;
    md5Key?: pulumi.Input<string>;
    md5Keychain?: pulumi.Input<string>;
    md5Keys?: pulumi.Input<pulumi.Input<inputs.RouterOspfOspfInterfaceMd5Key>[]>;
    mtu?: pulumi.Input<number>;
    mtuIgnore?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    resyncTimeout?: pulumi.Input<number>;
    retransmitInterval?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspfOspfInterfaceMd5Key {
    id?: pulumi.Input<number>;
    keyString?: pulumi.Input<string>;
}

export interface RouterOspfPassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterOspfRedistribute {
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterOspfSummaryAddress {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterPolicy6Dstaddr {
    name?: pulumi.Input<string>;
}

export interface RouterPolicy6InternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface RouterPolicy6InternetServiceId {
    id?: pulumi.Input<number>;
}

export interface RouterPolicy6Srcaddr {
    name?: pulumi.Input<string>;
}

export interface RouterPolicyDst {
    subnet?: pulumi.Input<string>;
}

export interface RouterPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface RouterPolicyInputDevice {
    name?: pulumi.Input<string>;
}

export interface RouterPolicyInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface RouterPolicyInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface RouterPolicySrc {
    subnet?: pulumi.Input<string>;
}

export interface RouterPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface RouterPrefixlist6Rule {
    action?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    ge?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    le?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterPrefixlistRule {
    action?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    ge?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    le?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipDistance {
    accessList?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipDistributeList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    listname?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipInterface {
    authKeychain?: pulumi.Input<string>;
    authMode?: pulumi.Input<string>;
    authString?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    receiveVersion?: pulumi.Input<string>;
    sendVersion?: pulumi.Input<string>;
    sendVersion2Broadcast?: pulumi.Input<string>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}

export interface RouterRipNeighbor {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface RouterRipNetwork {
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipOffsetList {
    accessList?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    offset?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface RouterRipPassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterRipRedistribute {
    metric?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngAggregateAddress {
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterRipngDistance {
    accessList6?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterRipngDistributeList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    listname?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngInterface {
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}

export interface RouterRipngNeighbor {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
}

export interface RouterRipngNetwork {
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipngOffsetList {
    accessList6?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    offset?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngPassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterRipngRedistribute {
    metric?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRoutemapRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    matchAsPath?: pulumi.Input<string>;
    matchCommunity?: pulumi.Input<string>;
    matchCommunityExact?: pulumi.Input<string>;
    matchExtcommunity?: pulumi.Input<string>;
    matchExtcommunityExact?: pulumi.Input<string>;
    matchFlags?: pulumi.Input<number>;
    matchInterface?: pulumi.Input<string>;
    matchIp6Address?: pulumi.Input<string>;
    matchIp6Nexthop?: pulumi.Input<string>;
    matchIpAddress?: pulumi.Input<string>;
    matchIpNexthop?: pulumi.Input<string>;
    matchMetric?: pulumi.Input<number>;
    matchOrigin?: pulumi.Input<string>;
    matchRouteType?: pulumi.Input<string>;
    matchTag?: pulumi.Input<number>;
    matchVrf?: pulumi.Input<number>;
    setAggregatorAs?: pulumi.Input<number>;
    setAggregatorIp?: pulumi.Input<string>;
    setAspathAction?: pulumi.Input<string>;
    setAspaths?: pulumi.Input<pulumi.Input<inputs.RouterRoutemapRuleSetAspath>[]>;
    setAtomicAggregate?: pulumi.Input<string>;
    setCommunities?: pulumi.Input<pulumi.Input<inputs.RouterRoutemapRuleSetCommunity>[]>;
    setCommunityAdditive?: pulumi.Input<string>;
    setCommunityDelete?: pulumi.Input<string>;
    setDampeningMaxSuppress?: pulumi.Input<number>;
    setDampeningReachabilityHalfLife?: pulumi.Input<number>;
    setDampeningReuse?: pulumi.Input<number>;
    setDampeningSuppress?: pulumi.Input<number>;
    setDampeningUnreachabilityHalfLife?: pulumi.Input<number>;
    setExtcommunityRts?: pulumi.Input<pulumi.Input<inputs.RouterRoutemapRuleSetExtcommunityRt>[]>;
    setExtcommunitySoos?: pulumi.Input<pulumi.Input<inputs.RouterRoutemapRuleSetExtcommunitySoo>[]>;
    setFlags?: pulumi.Input<number>;
    setIp6Nexthop?: pulumi.Input<string>;
    setIp6NexthopLocal?: pulumi.Input<string>;
    setIpNexthop?: pulumi.Input<string>;
    setIpPrefsrc?: pulumi.Input<string>;
    setLocalPreference?: pulumi.Input<number>;
    setMetric?: pulumi.Input<number>;
    setMetricType?: pulumi.Input<string>;
    setOrigin?: pulumi.Input<string>;
    setOriginatorId?: pulumi.Input<string>;
    setPriority?: pulumi.Input<number>;
    setRouteTag?: pulumi.Input<number>;
    setTag?: pulumi.Input<number>;
    setVpnv4Nexthop?: pulumi.Input<string>;
    setVpnv6Nexthop?: pulumi.Input<string>;
    setVpnv6NexthopLocal?: pulumi.Input<string>;
    setWeight?: pulumi.Input<number>;
}

export interface RouterRoutemapRuleSetAspath {
    as?: pulumi.Input<string>;
}

export interface RouterRoutemapRuleSetCommunity {
    community?: pulumi.Input<string>;
}

export interface RouterRoutemapRuleSetExtcommunityRt {
    community?: pulumi.Input<string>;
}

export interface RouterRoutemapRuleSetExtcommunitySoo {
    community?: pulumi.Input<string>;
}

export interface RouterStatic6SdwanZone {
    name?: pulumi.Input<string>;
}

export interface RouterStaticSdwanZone {
    name?: pulumi.Input<string>;
}

export interface RouterbgpNeighborConditionalAdvertise {
    advertiseRoutemap?: pulumi.Input<string>;
    conditionRoutemap?: pulumi.Input<string>;
    conditionType?: pulumi.Input<string>;
}

export interface RouterbgpNeighborConditionalAdvertise6 {
    advertiseRoutemap?: pulumi.Input<string>;
    conditionRoutemap?: pulumi.Input<string>;
    conditionType?: pulumi.Input<string>;
}

export interface Routerospf6Ospf6interfaceIpsecKey {
    authKey?: pulumi.Input<string>;
    encKey?: pulumi.Input<string>;
    spi?: pulumi.Input<number>;
}

export interface Routerospf6Ospf6interfaceNeighbor {
    cost?: pulumi.Input<number>;
    ip6?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
}

export interface RouterospfOspfinterfaceMd5Key {
    id?: pulumi.Input<number>;
    keyString?: pulumi.Input<string>;
}

export interface RuleFmwpMetadata {
    id?: pulumi.Input<number>;
    metaid?: pulumi.Input<number>;
    valueid?: pulumi.Input<number>;
}

export interface RuleOtdtMetadata {
    id?: pulumi.Input<number>;
    metaid?: pulumi.Input<number>;
    valueid?: pulumi.Input<number>;
}

export interface RuleOtdtParameter {
    name?: pulumi.Input<string>;
}

export interface RuleOtvpMetadata {
    id?: pulumi.Input<number>;
    metaid?: pulumi.Input<number>;
    valueid?: pulumi.Input<number>;
}

export interface SctpfilterProfilePpidFilter {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ppid?: pulumi.Input<number>;
}

export interface SpamfilterBwlEntry {
    action?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    emailPattern?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SpamfilterBwordEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    language?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    where?: pulumi.Input<string>;
}

export interface SpamfilterDnsblEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SpamfilterIptrustEntry {
    addrType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SpamfilterMheaderEntry {
    action?: pulumi.Input<string>;
    fieldbody?: pulumi.Input<string>;
    fieldname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SpamfilterProfileGmail {
    log?: pulumi.Input<string>;
}

export interface SpamfilterProfileImap {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface SpamfilterProfileMapi {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
}

export interface SpamfilterProfileMsnHotmail {
    log?: pulumi.Input<string>;
}

export interface SpamfilterProfilePop3 {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface SpamfilterProfileSmtp {
    action?: pulumi.Input<string>;
    hdrip?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
}

export interface SpamfilterProfileYahooMail {
    log?: pulumi.Input<string>;
}

export interface SshfilterProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.SshfilterProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    scanArchiveContents?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SshfilterProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<inputs.SshfilterProfileFileFilterEntryFileType>[]>;
    filter?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
}

export interface SshfilterProfileFileFilterEntryFileType {
    name?: pulumi.Input<string>;
}

export interface SshfilterProfileShellCommand {
    action?: pulumi.Input<string>;
    alert?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SwitchcontrollerDynamicportpolicyPolicy {
    bouncePortLink?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerDynamicportpolicyPolicyInterfaceTag>[]>;
    lldpProfile?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    matchPeriod?: pulumi.Input<number>;
    matchType?: pulumi.Input<string>;
    n8021x?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    qosPolicy?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlanPolicy?: pulumi.Input<string>;
}

export interface SwitchcontrollerDynamicportpolicyPolicyInterfaceTag {
    tagName?: pulumi.Input<string>;
}

export interface SwitchcontrollerFlowtrackingAggregate {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface SwitchcontrollerFlowtrackingCollector {
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    transport?: pulumi.Input<string>;
}

export interface SwitchcontrollerFortilinksettingsNacPorts {
    bounceNacPort?: pulumi.Input<string>;
    lanSegment?: pulumi.Input<string>;
    memberChange?: pulumi.Input<number>;
    nacLanInterface?: pulumi.Input<string>;
    nacSegmentVlans?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerFortilinksettingsNacPortsNacSegmentVlan>[]>;
    onboardingVlan?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}

export interface SwitchcontrollerFortilinksettingsNacPortsNacSegmentVlan {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchcontrollerGlobalCustomCommand {
    commandEntry?: pulumi.Input<string>;
    commandName?: pulumi.Input<string>;
}

export interface SwitchcontrollerGlobalDisableDiscovery {
    name?: pulumi.Input<string>;
}

export interface SwitchcontrollerLldpprofileCustomTlv {
    informationString?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oui?: pulumi.Input<string>;
    subtype?: pulumi.Input<number>;
}

export interface SwitchcontrollerLldpprofileMedLocationService {
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    sysLocationId?: pulumi.Input<string>;
}

export interface SwitchcontrollerLldpprofileMedNetworkPolicy {
    assignVlan?: pulumi.Input<string>;
    dscp?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
    vlanIntf?: pulumi.Input<string>;
}

export interface SwitchcontrollerLocationAddressCivic {
    additional?: pulumi.Input<string>;
    additionalCode?: pulumi.Input<string>;
    block?: pulumi.Input<string>;
    branchRoad?: pulumi.Input<string>;
    building?: pulumi.Input<string>;
    city?: pulumi.Input<string>;
    cityDivision?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    countrySubdivision?: pulumi.Input<string>;
    county?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    floor?: pulumi.Input<string>;
    landmark?: pulumi.Input<string>;
    language?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    number?: pulumi.Input<string>;
    numberSuffix?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
    placeType?: pulumi.Input<string>;
    postOfficeBox?: pulumi.Input<string>;
    postalCommunity?: pulumi.Input<string>;
    primaryRoad?: pulumi.Input<string>;
    roadSection?: pulumi.Input<string>;
    room?: pulumi.Input<string>;
    script?: pulumi.Input<string>;
    seat?: pulumi.Input<string>;
    street?: pulumi.Input<string>;
    streetNamePostMod?: pulumi.Input<string>;
    streetNamePreMod?: pulumi.Input<string>;
    streetSuffix?: pulumi.Input<string>;
    subBranchRoad?: pulumi.Input<string>;
    trailingStrSuffix?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    zip?: pulumi.Input<string>;
}

export interface SwitchcontrollerLocationCoordinates {
    altitude?: pulumi.Input<string>;
    altitudeUnit?: pulumi.Input<string>;
    datum?: pulumi.Input<string>;
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}

export interface SwitchcontrollerLocationElinNumber {
    elinNum?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchCustomCommand {
    commandEntry?: pulumi.Input<string>;
    commandName?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchDhcpSnoopingStaticClient {
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchIgmpSnooping {
    agingTime?: pulumi.Input<number>;
    floodUnknownMulticast?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    vlans?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchIgmpSnoopingVlan>[]>;
}

export interface SwitchcontrollerManagedswitchIgmpSnoopingVlan {
    proxy?: pulumi.Input<string>;
    querier?: pulumi.Input<string>;
    querierAddr?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
    vlanName?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchIpSourceGuard {
    bindingEntries?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchIpSourceGuardBindingEntry>[]>;
    description?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchIpSourceGuardBindingEntry {
    entryName?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchMirror {
    dst?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    srcEgresses?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchMirrorSrcEgress>[]>;
    srcIngresses?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchMirrorSrcIngress>[]>;
    status?: pulumi.Input<string>;
    switchingPacket?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchMirrorSrcEgress {
    name?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchMirrorSrcIngress {
    name?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchN8021xSettings {
    linkDownAuth?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    mabReauth?: pulumi.Input<string>;
    macCalledStationDelimiter?: pulumi.Input<string>;
    macCallingStationDelimiter?: pulumi.Input<string>;
    macCase?: pulumi.Input<string>;
    macPasswordDelimiter?: pulumi.Input<string>;
    macUsernameDelimiter?: pulumi.Input<string>;
    maxReauthAttempt?: pulumi.Input<number>;
    reauthPeriod?: pulumi.Input<number>;
    txPeriod?: pulumi.Input<number>;
}

export interface SwitchcontrollerManagedswitchPort {
    accessMode?: pulumi.Input<string>;
    aclGroups?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchPortAclGroup>[]>;
    aggregatorMode?: pulumi.Input<string>;
    allowArpMonitor?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchPortAllowedVlan>[]>;
    allowedVlansAll?: pulumi.Input<string>;
    arpInspectionTrust?: pulumi.Input<string>;
    authenticatedPort?: pulumi.Input<number>;
    bundle?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpSnoopOption82Overrides?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchPortDhcpSnoopOption82Override>[]>;
    dhcpSnoopOption82Trust?: pulumi.Input<string>;
    dhcpSnooping?: pulumi.Input<string>;
    discardMode?: pulumi.Input<string>;
    edgePort?: pulumi.Input<string>;
    encryptedPort?: pulumi.Input<number>;
    exportTags?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchPortExportTag>[]>;
    exportTo?: pulumi.Input<string>;
    exportToPool?: pulumi.Input<string>;
    exportToPoolFlag?: pulumi.Input<number>;
    fallbackPort?: pulumi.Input<string>;
    fecCapable?: pulumi.Input<number>;
    fecState?: pulumi.Input<string>;
    fgtPeerDeviceName?: pulumi.Input<string>;
    fgtPeerPortName?: pulumi.Input<string>;
    fiberPort?: pulumi.Input<number>;
    flags?: pulumi.Input<number>;
    flapDuration?: pulumi.Input<number>;
    flapRate?: pulumi.Input<number>;
    flapTimeout?: pulumi.Input<number>;
    flapguard?: pulumi.Input<string>;
    flowControl?: pulumi.Input<string>;
    fortilinkPort?: pulumi.Input<number>;
    fortiswitchAcls?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchPortFortiswitchAcl>[]>;
    igmpSnooping?: pulumi.Input<string>;
    igmpSnoopingFloodReports?: pulumi.Input<string>;
    igmpsFloodReports?: pulumi.Input<string>;
    igmpsFloodTraffic?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchPortInterfaceTag>[]>;
    ipSourceGuard?: pulumi.Input<string>;
    islLocalTrunkName?: pulumi.Input<string>;
    islPeerDeviceName?: pulumi.Input<string>;
    islPeerDeviceSn?: pulumi.Input<string>;
    islPeerPortName?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    learningLimit?: pulumi.Input<number>;
    linkStatus?: pulumi.Input<string>;
    lldpProfile?: pulumi.Input<string>;
    lldpStatus?: pulumi.Input<string>;
    loopGuard?: pulumi.Input<string>;
    loopGuardTimeout?: pulumi.Input<number>;
    macAddr?: pulumi.Input<string>;
    matchedDppIntfTags?: pulumi.Input<string>;
    matchedDppPolicy?: pulumi.Input<string>;
    maxBundle?: pulumi.Input<number>;
    mcastSnoopingFloodTraffic?: pulumi.Input<string>;
    mclag?: pulumi.Input<string>;
    mclagIclPort?: pulumi.Input<number>;
    mediaType?: pulumi.Input<string>;
    memberWithdrawalBehavior?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchPortMember>[]>;
    minBundle?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    p2pPort?: pulumi.Input<number>;
    packetSampleRate?: pulumi.Input<number>;
    packetSampler?: pulumi.Input<string>;
    pauseMeter?: pulumi.Input<number>;
    pauseMeterResume?: pulumi.Input<string>;
    poeCapable?: pulumi.Input<number>;
    poeMaxPower?: pulumi.Input<string>;
    poeModeBtCabable?: pulumi.Input<number>;
    poePortMode?: pulumi.Input<string>;
    poePortPower?: pulumi.Input<string>;
    poePortPriority?: pulumi.Input<string>;
    poePreStandardDetection?: pulumi.Input<string>;
    poeStandard?: pulumi.Input<string>;
    poeStatus?: pulumi.Input<string>;
    portName?: pulumi.Input<string>;
    portNumber?: pulumi.Input<number>;
    portOwner?: pulumi.Input<string>;
    portPolicy?: pulumi.Input<string>;
    portPrefixType?: pulumi.Input<number>;
    portSecurityPolicy?: pulumi.Input<string>;
    portSelectionCriteria?: pulumi.Input<string>;
    ptpPolicy?: pulumi.Input<string>;
    ptpStatus?: pulumi.Input<string>;
    qosPolicy?: pulumi.Input<string>;
    restrictedAuthPort?: pulumi.Input<number>;
    rpvstPort?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    sflowCounterInterval?: pulumi.Input<number>;
    sflowSampleRate?: pulumi.Input<number>;
    sflowSampler?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    speedMask?: pulumi.Input<number>;
    stackingPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    stickyMac?: pulumi.Input<string>;
    stormControlPolicy?: pulumi.Input<string>;
    stpBpduGuard?: pulumi.Input<string>;
    stpBpduGuardTimeout?: pulumi.Input<number>;
    stpRootGuard?: pulumi.Input<string>;
    stpState?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    untaggedVlans?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchPortUntaggedVlan>[]>;
    virtualPort?: pulumi.Input<number>;
    vlan?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchPortAclGroup {
    name?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchPortAllowedVlan {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchPortDhcpSnoopOption82Override {
    circuitId?: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    vlanName?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchPortExportTag {
    tagName?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchPortFortiswitchAcl {
    id?: pulumi.Input<number>;
}

export interface SwitchcontrollerManagedswitchPortInterfaceTag {
    tagName?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchPortMember {
    memberName?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchPortUntaggedVlan {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchRemoteLog {
    csv?: pulumi.Input<string>;
    facility?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchRouteOffloadRouter {
    routerIp?: pulumi.Input<string>;
    vlanName?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchSnmpCommunity {
    events?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchSnmpCommunityHost>[]>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    queryV1Port?: pulumi.Input<number>;
    queryV1Status?: pulumi.Input<string>;
    queryV2cPort?: pulumi.Input<number>;
    queryV2cStatus?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapV1Lport?: pulumi.Input<number>;
    trapV1Rport?: pulumi.Input<number>;
    trapV1Status?: pulumi.Input<string>;
    trapV2cLport?: pulumi.Input<number>;
    trapV2cRport?: pulumi.Input<number>;
    trapV2cStatus?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchSnmpCommunityHost {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchSnmpSysinfo {
    contactInfo?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engineId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchSnmpTrapThreshold {
    trapHighCpuThreshold?: pulumi.Input<number>;
    trapLogFullThreshold?: pulumi.Input<number>;
    trapLowMemoryThreshold?: pulumi.Input<number>;
}

export interface SwitchcontrollerManagedswitchSnmpUser {
    authProto?: pulumi.Input<string>;
    authPwd?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privProto?: pulumi.Input<string>;
    privPwd?: pulumi.Input<string>;
    queries?: pulumi.Input<string>;
    queryPort?: pulumi.Input<number>;
    securityLevel?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchStaticMac {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchStormControl {
    broadcast?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    rate?: pulumi.Input<number>;
    unknownMulticast?: pulumi.Input<string>;
    unknownUnicast?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchStpInstance {
    id?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchStpSettings {
    forwardTime?: pulumi.Input<number>;
    helloTime?: pulumi.Input<number>;
    localOverride?: pulumi.Input<string>;
    maxAge?: pulumi.Input<number>;
    maxHops?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pendingTimer?: pulumi.Input<number>;
    revision?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchSwitchLog {
    localOverride?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchSwitchStpSettings {
    status?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchVlan {
    assignmentPriority?: pulumi.Input<number>;
    vlanName?: pulumi.Input<string>;
}

export interface SwitchcontrollerQuarantineTarget {
    description?: pulumi.Input<string>;
    entryId?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerQuarantineTargetTag>[]>;
}

export interface SwitchcontrollerQuarantineTargetTag {
    tags?: pulumi.Input<string>;
}

export interface SwitchcontrollerSnmpcommunityHost {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface SwitchcontrollerStpinstanceVlanRange {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchcontrollerSwitchgroupMember {
    name?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
}

export interface SwitchcontrollerTrafficsnifferTargetIp {
    description?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
}

export interface SwitchcontrollerTrafficsnifferTargetMac {
    description?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
}

export interface SwitchcontrollerTrafficsnifferTargetPort {
    description?: pulumi.Input<string>;
    inPorts?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerTrafficsnifferTargetPortInPort>[]>;
    outPorts?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerTrafficsnifferTargetPortOutPort>[]>;
    switchId?: pulumi.Input<string>;
}

export interface SwitchcontrollerTrafficsnifferTargetPortInPort {
    name?: pulumi.Input<string>;
}

export interface SwitchcontrollerTrafficsnifferTargetPortOutPort {
    name?: pulumi.Input<string>;
}

export interface SwitchcontrollerVlanPortalMessageOverrides {
    authDisclaimerPage?: pulumi.Input<string>;
    authLoginFailedPage?: pulumi.Input<string>;
    authLoginPage?: pulumi.Input<string>;
    authRejectPage?: pulumi.Input<string>;
}

export interface SwitchcontrollerVlanSelectedUsergroup {
    name?: pulumi.Input<string>;
}

export interface SwitchcontrollerVlanpolicyAllowedVlan {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchcontrollerVlanpolicyUntaggedVlan {
    vlanName?: pulumi.Input<string>;
}

export interface SwitchcontrolleraclGroupIngress {
    id?: pulumi.Input<number>;
}

export interface SwitchcontrolleraclIngressAction {
    count?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
}

export interface SwitchcontrolleraclIngressClassifier {
    dstIpPrefix?: pulumi.Input<string>;
    dstMac?: pulumi.Input<string>;
    srcIpPrefix?: pulumi.Input<string>;
    srcMac?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SwitchcontrollerautoconfigCustomSwitchBinding {
    policy?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
}

export interface SwitchcontrollerqosIpdscpmapMap {
    cosQueue?: pulumi.Input<number>;
    diffserv?: pulumi.Input<string>;
    ipPrecedence?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SwitchcontrollerqosQueuepolicyCosQueue {
    description?: pulumi.Input<string>;
    dropPolicy?: pulumi.Input<string>;
    ecn?: pulumi.Input<string>;
    maxRate?: pulumi.Input<number>;
    maxRatePercent?: pulumi.Input<number>;
    minRate?: pulumi.Input<number>;
    minRatePercent?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface Switchcontrollersecuritypolicy8021XUserGroup {
    name?: pulumi.Input<string>;
}

export interface SystemAccprofileFwgrpPermission {
    address?: pulumi.Input<string>;
    others?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
}

export interface SystemAccprofileLoggrpPermission {
    config?: pulumi.Input<string>;
    dataAccess?: pulumi.Input<string>;
    reportAccess?: pulumi.Input<string>;
    threatWeight?: pulumi.Input<string>;
}

export interface SystemAccprofileNetgrpPermission {
    cfg?: pulumi.Input<string>;
    packetCapture?: pulumi.Input<string>;
    routeCfg?: pulumi.Input<string>;
}

export interface SystemAccprofileSysgrpPermission {
    admin?: pulumi.Input<string>;
    cfg?: pulumi.Input<string>;
    mnt?: pulumi.Input<string>;
    upd?: pulumi.Input<string>;
}

export interface SystemAccprofileUtmgrpPermission {
    antivirus?: pulumi.Input<string>;
    applicationControl?: pulumi.Input<string>;
    casb?: pulumi.Input<string>;
    dataLeakPrevention?: pulumi.Input<string>;
    dataLossPrevention?: pulumi.Input<string>;
    dlp?: pulumi.Input<string>;
    dnsfilter?: pulumi.Input<string>;
    emailfilter?: pulumi.Input<string>;
    endpointControl?: pulumi.Input<string>;
    fileFilter?: pulumi.Input<string>;
    icap?: pulumi.Input<string>;
    ips?: pulumi.Input<string>;
    spamfilter?: pulumi.Input<string>;
    videofilter?: pulumi.Input<string>;
    virtualPatch?: pulumi.Input<string>;
    voip?: pulumi.Input<string>;
    waf?: pulumi.Input<string>;
    webfilter?: pulumi.Input<string>;
}

export interface SystemAcmeAccount {
    caUrl?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    privatekey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface SystemAcmeInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemAdminGuestUsergroup {
    name?: pulumi.Input<string>;
}

export interface SystemAdminGuiDashboard {
    columns?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    layoutType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    widgets?: pulumi.Input<pulumi.Input<inputs.SystemAdminGuiDashboardWidget>[]>;
}

export interface SystemAdminGuiDashboardWidget {
    fabricDevice?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.SystemAdminGuiDashboardWidgetFilter>[]>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    industry?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    reportBy?: pulumi.Input<string>;
    sortBy?: pulumi.Input<string>;
    timeframe?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    visualization?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
    xPos?: pulumi.Input<number>;
    yPos?: pulumi.Input<number>;
}

export interface SystemAdminGuiDashboardWidgetFilter {
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemAdminGuiGlobalMenuFavorite {
    id?: pulumi.Input<string>;
}

export interface SystemAdminGuiNewFeatureAcknowledge {
    id?: pulumi.Input<string>;
}

export interface SystemAdminGuiVdomMenuFavorite {
    id?: pulumi.Input<string>;
}

export interface SystemAdminLoginTime {
    lastFailedLogin?: pulumi.Input<string>;
    lastLogin?: pulumi.Input<string>;
    usrName?: pulumi.Input<string>;
}

export interface SystemAdminVdom {
    name?: pulumi.Input<string>;
}

export interface SystemAlarmGroup {
    adminAuthFailureThreshold?: pulumi.Input<number>;
    adminAuthLockoutThreshold?: pulumi.Input<number>;
    decryptionFailureThreshold?: pulumi.Input<number>;
    encryptionFailureThreshold?: pulumi.Input<number>;
    fwPolicyId?: pulumi.Input<number>;
    fwPolicyIdThreshold?: pulumi.Input<number>;
    fwPolicyViolations?: pulumi.Input<pulumi.Input<inputs.SystemAlarmGroupFwPolicyViolation>[]>;
    id?: pulumi.Input<number>;
    logFullWarningThreshold?: pulumi.Input<number>;
    period?: pulumi.Input<number>;
    replayAttemptThreshold?: pulumi.Input<number>;
    selfTestFailureThreshold?: pulumi.Input<number>;
    userAuthFailureThreshold?: pulumi.Input<number>;
    userAuthLockoutThreshold?: pulumi.Input<number>;
}

export interface SystemAlarmGroupFwPolicyViolation {
    dstIp?: pulumi.Input<string>;
    dstPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
    srcPort?: pulumi.Input<number>;
    threshold?: pulumi.Input<number>;
}

export interface SystemApiuserSettingTrusthost {
    ipv4Trusthost: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemApiuserTrusthost {
    id?: pulumi.Input<number>;
    ipv4Trusthost?: pulumi.Input<string>;
    ipv6Trusthost?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemApiuserVdom {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationactionEmailTo {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationactionHeader {
    header?: pulumi.Input<string>;
}

export interface SystemAutomationactionHttpHeader {
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemAutomationactionSdnConnector {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationdestinationDestination {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationstitchAction {
    action?: pulumi.Input<string>;
    delay?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    required?: pulumi.Input<string>;
}

export interface SystemAutomationstitchDestination {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationtriggerField {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemAutomationtriggerLogidBlock {
    id?: pulumi.Input<number>;
}

export interface SystemAutomationtriggerVdom {
    name?: pulumi.Input<string>;
}

export interface SystemCentralmanagementServerList {
    addrType?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverAddress?: pulumi.Input<string>;
    serverAddress6?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
}

export interface SystemClustersyncDownIntfsBeforeSessSync {
    name?: pulumi.Input<string>;
}

export interface SystemClustersyncSessionSyncFilter {
    customServices?: pulumi.Input<pulumi.Input<inputs.SystemClustersyncSessionSyncFilterCustomService>[]>;
    dstaddr?: pulumi.Input<string>;
    dstaddr6?: pulumi.Input<string>;
    dstintf?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
    srcaddr6?: pulumi.Input<string>;
    srcintf?: pulumi.Input<string>;
}

export interface SystemClustersyncSessionSyncFilterCustomService {
    dstPortRange?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<string>;
}

export interface SystemClustersyncSyncvd {
    name?: pulumi.Input<string>;
}

export interface SystemCsfFabricConnector {
    accprofile?: pulumi.Input<string>;
    configurationWriteAccess?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    vdoms?: pulumi.Input<pulumi.Input<inputs.SystemCsfFabricConnectorVdom>[]>;
}

export interface SystemCsfFabricConnectorVdom {
    name?: pulumi.Input<string>;
}

export interface SystemCsfFabricDevice {
    accessToken?: pulumi.Input<string>;
    deviceIp?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    httpsPort?: pulumi.Input<number>;
    login?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
}

export interface SystemCsfTrustedList {
    action?: pulumi.Input<string>;
    authorizationType?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    downstreamAuthorization?: pulumi.Input<string>;
    haMembers?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
}

export interface SystemDdnsDdnsServerAddr {
    addr?: pulumi.Input<string>;
}

export interface SystemDdnsMonitorInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemDeviceupgradeKnownHaMember {
    serial?: pulumi.Input<string>;
}

export interface SystemDnsDomain {
    domain?: pulumi.Input<string>;
}

export interface SystemDnsServerHostname {
    hostname?: pulumi.Input<string>;
}

export interface SystemDnsdatabaseDnsEntry {
    canonicalName?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    preference?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface SystemEvpnExportRt {
    routeTarget?: pulumi.Input<string>;
}

export interface SystemEvpnImportRt {
    routeTarget?: pulumi.Input<string>;
}

export interface SystemFabricvpnAdvertisedSubnet {
    access?: pulumi.Input<string>;
    bgpNetwork?: pulumi.Input<number>;
    firewallAddress?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    policies?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface SystemFabricvpnOverlay {
    bgpNeighbor?: pulumi.Input<string>;
    bgpNeighborGroup?: pulumi.Input<string>;
    bgpNeighborRange?: pulumi.Input<number>;
    bgpNetwork?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ipsecPhase1?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlayPolicy?: pulumi.Input<number>;
    overlayTunnelBlock?: pulumi.Input<string>;
    remoteGw?: pulumi.Input<string>;
    routePolicy?: pulumi.Input<number>;
    sdwanMember?: pulumi.Input<number>;
}

export interface SystemFederatedupgradeKnownHaMember {
    serial?: pulumi.Input<string>;
}

export interface SystemFederatedupgradeNodeList {
    coordinatingFortigate?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    maximumMinutes?: pulumi.Input<number>;
    serial?: pulumi.Input<string>;
    setupTime?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    timing?: pulumi.Input<string>;
    upgradePath?: pulumi.Input<string>;
}

export interface SystemGeoipoverrideIp6Range {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface SystemGeoipoverrideIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface SystemGlobalInternetServiceDownloadList {
    id?: pulumi.Input<number>;
}

export interface SystemHaHaMgmtInterface {
    dst?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    gateway6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
}

export interface SystemHaSecondaryVcluster {
    monitor?: pulumi.Input<string>;
    override?: pulumi.Input<string>;
    overrideWaitTime?: pulumi.Input<number>;
    pingserverFailoverThreshold?: pulumi.Input<number>;
    pingserverMonitorInterface?: pulumi.Input<string>;
    pingserverSecondaryForceReset?: pulumi.Input<string>;
    pingserverSlaveForceReset?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    vclusterId?: pulumi.Input<number>;
    vdom?: pulumi.Input<string>;
}

export interface SystemHaUnicastPeer {
    id?: pulumi.Input<number>;
    peerIp?: pulumi.Input<string>;
}

export interface SystemHaVcluster {
    monitor?: pulumi.Input<string>;
    override?: pulumi.Input<string>;
    overrideWaitTime?: pulumi.Input<number>;
    pingserverFailoverThreshold?: pulumi.Input<number>;
    pingserverFlipTimeout?: pulumi.Input<number>;
    pingserverMonitorInterface?: pulumi.Input<string>;
    pingserverSecondaryForceReset?: pulumi.Input<string>;
    pingserverSlaveForceReset?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    vclusterId?: pulumi.Input<number>;
    vdoms?: pulumi.Input<pulumi.Input<inputs.SystemHaVclusterVdom>[]>;
}

export interface SystemHaVclusterVdom {
    name?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup1 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup14 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup15 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup16 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup17 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup18 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup19 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup2 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup20 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup21 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup27 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup28 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup29 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup30 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup31 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup32 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup5 {
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemInterfaceClientOption {
    code?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemInterfaceDhcpSnoopingServerList {
    name?: pulumi.Input<string>;
    serverIp?: pulumi.Input<string>;
}

export interface SystemInterfaceFailAlertInterface {
    name?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6 {
    autoconf?: pulumi.Input<string>;
    cliConn6Status?: pulumi.Input<number>;
    dhcp6ClientOptions?: pulumi.Input<string>;
    dhcp6IapdLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Dhcp6IapdList>[]>;
    dhcp6InformationRequest?: pulumi.Input<string>;
    dhcp6PrefixDelegation?: pulumi.Input<string>;
    dhcp6PrefixHint?: pulumi.Input<string>;
    dhcp6PrefixHintPlt?: pulumi.Input<number>;
    dhcp6PrefixHintVlt?: pulumi.Input<number>;
    dhcp6RelayInterfaceId?: pulumi.Input<string>;
    dhcp6RelayIp?: pulumi.Input<string>;
    dhcp6RelayService?: pulumi.Input<string>;
    dhcp6RelaySourceInterface?: pulumi.Input<string>;
    dhcp6RelaySourceIp?: pulumi.Input<string>;
    dhcp6RelayType?: pulumi.Input<string>;
    icmp6SendRedirect?: pulumi.Input<string>;
    interfaceIdentifier?: pulumi.Input<string>;
    ip6Address?: pulumi.Input<string>;
    ip6Allowaccess?: pulumi.Input<string>;
    ip6DefaultLife?: pulumi.Input<number>;
    ip6DelegatedPrefixIaid?: pulumi.Input<number>;
    ip6DelegatedPrefixLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6DelegatedPrefixList>[]>;
    ip6DnsServerOverride?: pulumi.Input<string>;
    ip6ExtraAddrs?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6ExtraAddr>[]>;
    ip6HopLimit?: pulumi.Input<number>;
    ip6LinkMtu?: pulumi.Input<number>;
    ip6ManageFlag?: pulumi.Input<string>;
    ip6MaxInterval?: pulumi.Input<number>;
    ip6MinInterval?: pulumi.Input<number>;
    ip6Mode?: pulumi.Input<string>;
    ip6OtherFlag?: pulumi.Input<string>;
    ip6PrefixLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6PrefixList>[]>;
    ip6PrefixMode?: pulumi.Input<string>;
    ip6ReachableTime?: pulumi.Input<number>;
    ip6RetransTime?: pulumi.Input<number>;
    ip6SendAdv?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    ip6UpstreamInterface?: pulumi.Input<string>;
    ndCert?: pulumi.Input<string>;
    ndCgaModifier?: pulumi.Input<string>;
    ndMode?: pulumi.Input<string>;
    ndSecurityLevel?: pulumi.Input<number>;
    ndTimestampDelta?: pulumi.Input<number>;
    ndTimestampFuzz?: pulumi.Input<number>;
    raSendMtu?: pulumi.Input<string>;
    uniqueAutoconfAddr?: pulumi.Input<string>;
    vrip6LinkLocal?: pulumi.Input<string>;
    vrrp6s?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Vrrp6>[]>;
    vrrpVirtualMac6?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Dhcp6IapdList {
    iaid?: pulumi.Input<number>;
    prefixHint?: pulumi.Input<string>;
    prefixHintPlt?: pulumi.Input<number>;
    prefixHintVlt?: pulumi.Input<number>;
}

export interface SystemInterfaceIpv6Ip6DelegatedPrefixList {
    autonomousFlag?: pulumi.Input<string>;
    delegatedPrefixIaid?: pulumi.Input<number>;
    onlinkFlag?: pulumi.Input<string>;
    prefixId?: pulumi.Input<number>;
    rdnss?: pulumi.Input<string>;
    rdnssService?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    upstreamInterface?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Ip6ExtraAddr {
    prefix?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Ip6PrefixList {
    autonomousFlag?: pulumi.Input<string>;
    dnssls?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6PrefixListDnssl>[]>;
    onlinkFlag?: pulumi.Input<string>;
    preferredLifeTime?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    rdnss?: pulumi.Input<string>;
    validLifeTime?: pulumi.Input<number>;
}

export interface SystemInterfaceIpv6Ip6PrefixListDnssl {
    domain?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Vrrp6 {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    ignoreDefaultRoute?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vrdst6?: pulumi.Input<string>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip6?: pulumi.Input<string>;
}

export interface SystemInterfaceManagedDevice {
    name?: pulumi.Input<string>;
}

export interface SystemInterfaceMember {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemInterfaceSecondaryip {
    allowaccess?: pulumi.Input<string>;
    detectprotocol?: pulumi.Input<string>;
    detectserver?: pulumi.Input<string>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    secipRelayIp?: pulumi.Input<string>;
}

export interface SystemInterfaceSecurityGroup {
    name?: pulumi.Input<string>;
}

export interface SystemInterfaceTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceTaggingTag>[]>;
}

export interface SystemInterfaceTaggingTag {
    name?: pulumi.Input<string>;
}

export interface SystemInterfaceVrrp {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    ignoreDefaultRoute?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    proxyArps?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceVrrpProxyArp>[]>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vrdst?: pulumi.Input<string>;
    vrdstPriority?: pulumi.Input<number>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip?: pulumi.Input<string>;
}

export interface SystemInterfaceVrrpProxyArp {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface SystemIpamPool {
    description?: pulumi.Input<string>;
    excludes?: pulumi.Input<pulumi.Input<inputs.SystemIpamPoolExclude>[]>;
    name?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
}

export interface SystemIpamPoolExclude {
    excludeSubnet?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface SystemIpamRule {
    description?: pulumi.Input<string>;
    devices?: pulumi.Input<pulumi.Input<inputs.SystemIpamRuleDevice>[]>;
    dhcp?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.SystemIpamRuleInterface>[]>;
    name?: pulumi.Input<string>;
    pools?: pulumi.Input<pulumi.Input<inputs.SystemIpamRulePool>[]>;
    role?: pulumi.Input<string>;
}

export interface SystemIpamRuleDevice {
    name?: pulumi.Input<string>;
}

export interface SystemIpamRuleInterface {
    name?: pulumi.Input<string>;
}

export interface SystemIpamRulePool {
    name?: pulumi.Input<string>;
}

export interface SystemIpsecaggregateMember {
    tunnelName?: pulumi.Input<string>;
}

export interface SystemLinkmonitorRoute {
    subnet?: pulumi.Input<string>;
}

export interface SystemLinkmonitorServer {
    address?: pulumi.Input<string>;
}

export interface SystemLinkmonitorServerList {
    dst?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface SystemMobiletunnelNetwork {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface SystemNat64SecondaryPrefix {
    name?: pulumi.Input<string>;
    nat64Prefix?: pulumi.Input<string>;
}

export interface SystemNdproxyMember {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemNetflowCollector {
    collectorIp?: pulumi.Input<string>;
    collectorPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemNpuPriorityProtocol {
    bfd?: pulumi.Input<string>;
    bgp?: pulumi.Input<string>;
    slbc?: pulumi.Input<string>;
}

export interface SystemNtpInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemNtpNtpserver {
    authentication?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    ipType?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    keyId?: pulumi.Input<number>;
    keyType?: pulumi.Input<string>;
    ntpv3?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
}

export interface SystemObjecttaggingTag {
    name?: pulumi.Input<string>;
}

export interface SystemPcpserverPool {
    allowOpcode?: pulumi.Input<string>;
    announcementCount?: pulumi.Input<number>;
    arpReply?: pulumi.Input<string>;
    clientMappingLimit?: pulumi.Input<number>;
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.SystemPcpserverPoolClientSubnet>[]>;
    description?: pulumi.Input<string>;
    extIntf?: pulumi.Input<string>;
    extip?: pulumi.Input<string>;
    extport?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    intlIntfs?: pulumi.Input<pulumi.Input<inputs.SystemPcpserverPoolIntlIntf>[]>;
    mappingFilterLimit?: pulumi.Input<number>;
    maximalLifetime?: pulumi.Input<number>;
    minimalLifetime?: pulumi.Input<number>;
    multicastAnnouncement?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    recycleDelay?: pulumi.Input<number>;
    thirdParty?: pulumi.Input<string>;
    thirdPartySubnets?: pulumi.Input<pulumi.Input<inputs.SystemPcpserverPoolThirdPartySubnet>[]>;
}

export interface SystemPcpserverPoolClientSubnet {
    subnet?: pulumi.Input<string>;
}

export interface SystemPcpserverPoolIntlIntf {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemPcpserverPoolThirdPartySubnet {
    subnet?: pulumi.Input<string>;
}

export interface SystemPtpServerInterface {
    delayMechanism?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverInterfaceName?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupAdmin {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupAlertmail {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupAuth {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupAutomation {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupCustomMessage {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupDeviceDetectionPortal {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupEc {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupFortiguardWf {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupFtp {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupHttp {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupIcap {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupMail {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupNacQuar {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupNntp {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupSpam {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupSslvpn {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupTrafficQuota {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupUtm {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemReplacemsggroupWebproxy {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface SystemSamlServiceProvider {
    assertionAttributes?: pulumi.Input<pulumi.Input<inputs.SystemSamlServiceProviderAssertionAttribute>[]>;
    idpEntityId?: pulumi.Input<string>;
    idpSingleLogoutUrl?: pulumi.Input<string>;
    idpSingleSignOnUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    spBindingProtocol?: pulumi.Input<string>;
    spCert?: pulumi.Input<string>;
    spEntityId?: pulumi.Input<string>;
    spPortalUrl?: pulumi.Input<string>;
    spSingleLogoutUrl?: pulumi.Input<string>;
    spSingleSignOnUrl?: pulumi.Input<string>;
}

export interface SystemSamlServiceProviderAssertionAttribute {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemSdnconnectorCompartmentList {
    compartmentId?: pulumi.Input<string>;
}

export interface SystemSdnconnectorExternalAccountList {
    externalId?: pulumi.Input<string>;
    regionLists?: pulumi.Input<pulumi.Input<inputs.SystemSdnconnectorExternalAccountListRegionList>[]>;
    roleArn?: pulumi.Input<string>;
}

export interface SystemSdnconnectorExternalAccountListRegionList {
    region?: pulumi.Input<string>;
}

export interface SystemSdnconnectorExternalIp {
    name?: pulumi.Input<string>;
}

export interface SystemSdnconnectorForwardingRule {
    ruleName?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface SystemSdnconnectorGcpProjectList {
    gcpZoneLists?: pulumi.Input<pulumi.Input<inputs.SystemSdnconnectorGcpProjectListGcpZoneList>[]>;
    id?: pulumi.Input<string>;
}

export interface SystemSdnconnectorGcpProjectListGcpZoneList {
    name?: pulumi.Input<string>;
}

export interface SystemSdnconnectorNic {
    ips?: pulumi.Input<pulumi.Input<inputs.SystemSdnconnectorNicIp>[]>;
    name?: pulumi.Input<string>;
}

export interface SystemSdnconnectorNicIp {
    name?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
}

export interface SystemSdnconnectorOciRegionList {
    region?: pulumi.Input<string>;
}

export interface SystemSdnconnectorRoute {
    name?: pulumi.Input<string>;
}

export interface SystemSdnconnectorRouteTable {
    name?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.SystemSdnconnectorRouteTableRoute>[]>;
    subscriptionId?: pulumi.Input<string>;
}

export interface SystemSdnconnectorRouteTableRoute {
    name?: pulumi.Input<string>;
    nextHop?: pulumi.Input<string>;
}

export interface SystemSdnconnectorServerList {
    ip?: pulumi.Input<string>;
}

export interface SystemSdwanDuplication {
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationDstaddr6>[]>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationDstaddr>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationDstintf>[]>;
    id?: pulumi.Input<number>;
    packetDeDuplication?: pulumi.Input<string>;
    packetDuplication?: pulumi.Input<string>;
    serviceIds?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationServiceId>[]>;
    services?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationService>[]>;
    slaMatchService?: pulumi.Input<string>;
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationSrcaddr6>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationSrcaddr>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<inputs.SystemSdwanDuplicationSrcintf>[]>;
}

export interface SystemSdwanDuplicationDstaddr {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationDstintf {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationService {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationServiceId {
    id?: pulumi.Input<number>;
}

export interface SystemSdwanDuplicationSrcaddr {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationSrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanDuplicationSrcintf {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanFailAlertInterface {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanHealthCheck {
    addrMode?: pulumi.Input<string>;
    classId?: pulumi.Input<number>;
    detectMode?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    dnsMatchIp?: pulumi.Input<string>;
    dnsRequestDomain?: pulumi.Input<string>;
    embedMeasuredHealth?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    ftpFile?: pulumi.Input<string>;
    ftpMode?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    httpAgent?: pulumi.Input<string>;
    httpGet?: pulumi.Input<string>;
    httpMatch?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.SystemSdwanHealthCheckMember>[]>;
    mosCodec?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    probeCount?: pulumi.Input<number>;
    probePackets?: pulumi.Input<string>;
    probeTimeout?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    qualityMeasuredMethod?: pulumi.Input<string>;
    recoverytime?: pulumi.Input<number>;
    securityMode?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    slaFailLogPeriod?: pulumi.Input<number>;
    slaIdRedistribute?: pulumi.Input<number>;
    slaPassLogPeriod?: pulumi.Input<number>;
    slas?: pulumi.Input<pulumi.Input<inputs.SystemSdwanHealthCheckSla>[]>;
    source?: pulumi.Input<string>;
    source6?: pulumi.Input<string>;
    systemDns?: pulumi.Input<string>;
    thresholdAlertJitter?: pulumi.Input<number>;
    thresholdAlertLatency?: pulumi.Input<number>;
    thresholdAlertPacketloss?: pulumi.Input<number>;
    thresholdWarningJitter?: pulumi.Input<number>;
    thresholdWarningLatency?: pulumi.Input<number>;
    thresholdWarningPacketloss?: pulumi.Input<number>;
    updateCascadeInterface?: pulumi.Input<string>;
    updateStaticRoute?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    vrf?: pulumi.Input<number>;
}

export interface SystemSdwanHealthCheckMember {
    seqNum?: pulumi.Input<number>;
}

export interface SystemSdwanHealthCheckSla {
    id?: pulumi.Input<number>;
    jitterThreshold?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    mosThreshold?: pulumi.Input<string>;
    packetlossThreshold?: pulumi.Input<number>;
    priorityInSla?: pulumi.Input<number>;
    priorityOutSla?: pulumi.Input<number>;
}

export interface SystemSdwanMember {
    comment?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    gateway6?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    preferredSource?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    priority6?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    source6?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    transportGroup?: pulumi.Input<number>;
    volumeRatio?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
    zone?: pulumi.Input<string>;
}

export interface SystemSdwanNeighbor {
    healthCheck?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    member?: pulumi.Input<number>;
    memberBlocks?: pulumi.Input<pulumi.Input<inputs.SystemSdwanNeighborMemberBlock>[]>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    serviceId?: pulumi.Input<number>;
    slaId?: pulumi.Input<number>;
}

export interface SystemSdwanNeighborMemberBlock {
    seqNum?: pulumi.Input<number>;
}

export interface SystemSdwanService {
    addrMode?: pulumi.Input<string>;
    agentExclusive?: pulumi.Input<string>;
    bandwidthWeight?: pulumi.Input<number>;
    default?: pulumi.Input<string>;
    dscpForward?: pulumi.Input<string>;
    dscpForwardTag?: pulumi.Input<string>;
    dscpReverse?: pulumi.Input<string>;
    dscpReverseTag?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceDst6>[]>;
    dstNegate?: pulumi.Input<string>;
    dsts?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceDst>[]>;
    endPort?: pulumi.Input<number>;
    endSrcPort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceGroup>[]>;
    hashMode?: pulumi.Input<string>;
    healthChecks?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceHealthCheck>[]>;
    holdDownTime?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    inputDeviceNegate?: pulumi.Input<string>;
    inputDevices?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInputDevice>[]>;
    inputZones?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInputZone>[]>;
    internetService?: pulumi.Input<string>;
    internetServiceAppCtrlCategories?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceAppCtrlCategory>[]>;
    internetServiceAppCtrlGroups?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceAppCtrlGroup>[]>;
    internetServiceAppCtrls?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceAppCtrl>[]>;
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceCustomGroup>[]>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceCustom>[]>;
    internetServiceGroups?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceGroup>[]>;
    internetServiceNames?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceInternetServiceName>[]>;
    jitterWeight?: pulumi.Input<number>;
    latencyWeight?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    linkCostThreshold?: pulumi.Input<number>;
    loadBalance?: pulumi.Input<string>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetLossWeight?: pulumi.Input<number>;
    passiveMeasurement?: pulumi.Input<string>;
    priorityMembers?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServicePriorityMember>[]>;
    priorityZones?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServicePriorityZone>[]>;
    protocol?: pulumi.Input<number>;
    qualityLink?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    routeTag?: pulumi.Input<number>;
    shortcut?: pulumi.Input<string>;
    shortcutPriority?: pulumi.Input<string>;
    shortcutStickiness?: pulumi.Input<string>;
    slaCompareMethod?: pulumi.Input<string>;
    slaStickiness?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceSla>[]>;
    src6s?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceSrc6>[]>;
    srcNegate?: pulumi.Input<string>;
    srcs?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceSrc>[]>;
    standaloneAction?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    startSrcPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tieBreak?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    useShortcutSla?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceUser>[]>;
    zoneMode?: pulumi.Input<string>;
}

export interface SystemSdwanServiceDst {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceDst6 {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceGroup {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceHealthCheck {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInputDevice {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInputZone {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInternetServiceAppCtrl {
    id?: pulumi.Input<number>;
}

export interface SystemSdwanServiceInternetServiceAppCtrlCategory {
    id?: pulumi.Input<number>;
}

export interface SystemSdwanServiceInternetServiceAppCtrlGroup {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServicePriorityMember {
    seqNum?: pulumi.Input<number>;
}

export interface SystemSdwanServicePriorityZone {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceSla {
    healthCheck?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface SystemSdwanServiceSrc {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceSrc6 {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanServiceUser {
    name?: pulumi.Input<string>;
}

export interface SystemSdwanZone {
    advpnHealthCheck?: pulumi.Input<string>;
    advpnSelect?: pulumi.Input<string>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    serviceSlaTieBreak?: pulumi.Input<string>;
}

export interface SystemSessionttlPort {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    refreshDirection?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    timeout?: pulumi.Input<string>;
}

export interface SystemSettingsGuiDefaultPolicyColumn {
    name?: pulumi.Input<string>;
}

export interface SystemSflowCollector {
    collectorIp?: pulumi.Input<string>;
    collectorPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemSpeedtestscheduleSchedule {
    name?: pulumi.Input<string>;
}

export interface SystemSpeedtestserverHost {
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    user?: pulumi.Input<string>;
}

export interface SystemSsoadminVdom {
    name?: pulumi.Input<string>;
}

export interface SystemSsoforticloudadminVdom {
    name?: pulumi.Input<string>;
}

export interface SystemSsofortigatecloudadminVdom {
    name?: pulumi.Input<string>;
}

export interface SystemStandaloneclusterClusterPeer {
    downIntfsBeforeSessSyncs?: pulumi.Input<pulumi.Input<inputs.SystemStandaloneclusterClusterPeerDownIntfsBeforeSessSync>[]>;
    hbInterval?: pulumi.Input<number>;
    hbLostThreshold?: pulumi.Input<number>;
    ipsecTunnelSync?: pulumi.Input<string>;
    peerip?: pulumi.Input<string>;
    peervd?: pulumi.Input<string>;
    secondaryAddIpsecRoutes?: pulumi.Input<string>;
    sessionSyncFilter?: pulumi.Input<inputs.SystemStandaloneclusterClusterPeerSessionSyncFilter>;
    syncId?: pulumi.Input<number>;
    syncvds?: pulumi.Input<pulumi.Input<inputs.SystemStandaloneclusterClusterPeerSyncvd>[]>;
}

export interface SystemStandaloneclusterClusterPeerDownIntfsBeforeSessSync {
    name?: pulumi.Input<string>;
}

export interface SystemStandaloneclusterClusterPeerSessionSyncFilter {
    customServices?: pulumi.Input<pulumi.Input<inputs.SystemStandaloneclusterClusterPeerSessionSyncFilterCustomService>[]>;
    dstaddr?: pulumi.Input<string>;
    dstaddr6?: pulumi.Input<string>;
    dstintf?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
    srcaddr6?: pulumi.Input<string>;
    srcintf?: pulumi.Input<string>;
}

export interface SystemStandaloneclusterClusterPeerSessionSyncFilterCustomService {
    dstPortRange?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<string>;
}

export interface SystemStandaloneclusterClusterPeerSyncvd {
    name?: pulumi.Input<string>;
}

export interface SystemSwitchinterfaceMember {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemSwitchinterfaceSpanSourcePort {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemVdomdnsServerHostname {
    hostname?: pulumi.Input<string>;
}

export interface SystemVdomexceptionVdom {
    name?: pulumi.Input<string>;
}

export interface SystemVdomnetflowCollector {
    collectorIp?: pulumi.Input<string>;
    collectorPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemVdomsflowCollector {
    collectorIp?: pulumi.Input<string>;
    collectorPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemVirtualswitchPort {
    alias?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkFailAlertInterface {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkHealthCheck {
    addrMode?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    dnsRequestDomain?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    haPriority?: pulumi.Input<number>;
    httpAgent?: pulumi.Input<string>;
    httpGet?: pulumi.Input<string>;
    httpMatch?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkHealthCheckMember>[]>;
    name?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    probeCount?: pulumi.Input<number>;
    probePackets?: pulumi.Input<string>;
    probeTimeout?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    recoverytime?: pulumi.Input<number>;
    securityMode?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    slaFailLogPeriod?: pulumi.Input<number>;
    slaPassLogPeriod?: pulumi.Input<number>;
    slas?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkHealthCheckSla>[]>;
    systemDns?: pulumi.Input<string>;
    thresholdAlertJitter?: pulumi.Input<number>;
    thresholdAlertLatency?: pulumi.Input<number>;
    thresholdAlertPacketloss?: pulumi.Input<number>;
    thresholdWarningJitter?: pulumi.Input<number>;
    thresholdWarningLatency?: pulumi.Input<number>;
    thresholdWarningPacketloss?: pulumi.Input<number>;
    updateCascadeInterface?: pulumi.Input<string>;
    updateStaticRoute?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkHealthCheckMember {
    seqNum?: pulumi.Input<number>;
}

export interface SystemVirtualwanlinkHealthCheckSla {
    id?: pulumi.Input<number>;
    jitterThreshold?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    packetlossThreshold?: pulumi.Input<number>;
}

export interface SystemVirtualwanlinkMember {
    comment?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    gateway6?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    source6?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    volumeRatio?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface SystemVirtualwanlinkNeighbor {
    healthCheck?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    member?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    slaId?: pulumi.Input<number>;
}

export interface SystemVirtualwanlinkService {
    addrMode?: pulumi.Input<string>;
    bandwidthWeight?: pulumi.Input<number>;
    default?: pulumi.Input<string>;
    dscpForward?: pulumi.Input<string>;
    dscpForwardTag?: pulumi.Input<string>;
    dscpReverse?: pulumi.Input<string>;
    dscpReverseTag?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceDst6>[]>;
    dstNegate?: pulumi.Input<string>;
    dsts?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceDst>[]>;
    endPort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceGroup>[]>;
    healthCheck?: pulumi.Input<string>;
    holdDownTime?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    inputDeviceNegate?: pulumi.Input<string>;
    inputDevices?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceInputDevice>[]>;
    internetService?: pulumi.Input<string>;
    internetServiceAppCtrlGroups?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceInternetServiceAppCtrlGroup>[]>;
    internetServiceAppCtrls?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceInternetServiceAppCtrl>[]>;
    internetServiceCtrlGroups?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceInternetServiceCtrlGroup>[]>;
    internetServiceCtrls?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceInternetServiceCtrl>[]>;
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceInternetServiceCustomGroup>[]>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceInternetServiceCustom>[]>;
    internetServiceGroups?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceInternetServiceGroup>[]>;
    internetServiceIds?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceInternetServiceId>[]>;
    internetServiceNames?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceInternetServiceName>[]>;
    jitterWeight?: pulumi.Input<number>;
    latencyWeight?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    linkCostThreshold?: pulumi.Input<number>;
    member?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetLossWeight?: pulumi.Input<number>;
    priorityMembers?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServicePriorityMember>[]>;
    protocol?: pulumi.Input<number>;
    qualityLink?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    routeTag?: pulumi.Input<number>;
    slaCompareMethod?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceSla>[]>;
    src6s?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceSrc6>[]>;
    srcNegate?: pulumi.Input<string>;
    srcs?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceSrc>[]>;
    standaloneAction?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.SystemVirtualwanlinkServiceUser>[]>;
}

export interface SystemVirtualwanlinkServiceDst {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceDst6 {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceGroup {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceInputDevice {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceInternetServiceAppCtrl {
    id?: pulumi.Input<number>;
}

export interface SystemVirtualwanlinkServiceInternetServiceAppCtrlGroup {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceInternetServiceCtrl {
    id?: pulumi.Input<number>;
}

export interface SystemVirtualwanlinkServiceInternetServiceCtrlGroup {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceInternetServiceCustom {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceInternetServiceCustomGroup {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceInternetServiceGroup {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceInternetServiceId {
    id?: pulumi.Input<number>;
}

export interface SystemVirtualwanlinkServiceInternetServiceName {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServicePriorityMember {
    seqNum?: pulumi.Input<number>;
}

export interface SystemVirtualwanlinkServiceSla {
    healthCheck?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface SystemVirtualwanlinkServiceSrc {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceSrc6 {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkServiceUser {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwanlinkZone {
    name?: pulumi.Input<string>;
}

export interface SystemVirtualwirepairMember {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemVxlanRemoteIp {
    ip?: pulumi.Input<string>;
}

export interface SystemVxlanRemoteIp6 {
    ip6?: pulumi.Input<string>;
}

export interface SystemZoneInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemZoneTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SystemZoneTaggingTag>[]>;
}

export interface SystemZoneTaggingTag {
    name?: pulumi.Input<string>;
}

export interface Systemdhcp6ServerIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface Systemdhcp6ServerPrefixRange {
    endPrefix?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefixLength?: pulumi.Input<number>;
    startPrefix?: pulumi.Input<string>;
}

export interface SystemdhcpServerExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<inputs.SystemdhcpServerExcludeRangeUciString>[]>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<inputs.SystemdhcpServerExcludeRangeVciString>[]>;
}

export interface SystemdhcpServerExcludeRangeUciString {
    uciString?: pulumi.Input<string>;
}

export interface SystemdhcpServerExcludeRangeVciString {
    vciString?: pulumi.Input<string>;
}

export interface SystemdhcpServerIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<inputs.SystemdhcpServerIpRangeUciString>[]>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<inputs.SystemdhcpServerIpRangeVciString>[]>;
}

export interface SystemdhcpServerIpRangeUciString {
    uciString?: pulumi.Input<string>;
}

export interface SystemdhcpServerIpRangeVciString {
    vciString?: pulumi.Input<string>;
}

export interface SystemdhcpServerOption {
    code?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<inputs.SystemdhcpServerOptionUciString>[]>;
    value?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<inputs.SystemdhcpServerOptionVciString>[]>;
}

export interface SystemdhcpServerOptionUciString {
    uciString?: pulumi.Input<string>;
}

export interface SystemdhcpServerOptionVciString {
    vciString?: pulumi.Input<string>;
}

export interface SystemdhcpServerReservedAddress {
    action?: pulumi.Input<string>;
    circuitId?: pulumi.Input<string>;
    circuitIdType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    remoteIdType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemdhcpServerTftpServer {
    tftpServer?: pulumi.Input<string>;
}

export interface SystemdhcpServerVciString {
    vciString?: pulumi.Input<string>;
}

export interface SystemlldpNetworkpolicyGuest {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemlldpNetworkpolicyGuestVoiceSignaling {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemlldpNetworkpolicySoftphone {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemlldpNetworkpolicyStreamingVideo {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemlldpNetworkpolicyVideoConferencing {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemlldpNetworkpolicyVideoSignaling {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemlldpNetworkpolicyVoice {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemlldpNetworkpolicyVoiceSignaling {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemsnmpCommunityHost {
    haDirect?: pulumi.Input<string>;
    hostType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemsnmpCommunityHosts6 {
    haDirect?: pulumi.Input<string>;
    hostType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipv6?: pulumi.Input<string>;
    sourceIpv6?: pulumi.Input<string>;
}

export interface SystemsnmpCommunityVdom {
    name?: pulumi.Input<string>;
}

export interface SystemsnmpUserVdom {
    name?: pulumi.Input<string>;
}

export interface UserDeviceTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.UserDeviceTaggingTag>[]>;
}

export interface UserDeviceTaggingTag {
    name?: pulumi.Input<string>;
}

export interface UserDeviceaccesslistDeviceList {
    action?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface UserDevicegroupMember {
    name?: pulumi.Input<string>;
}

export interface UserDevicegroupTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.UserDevicegroupTaggingTag>[]>;
}

export interface UserDevicegroupTaggingTag {
    name?: pulumi.Input<string>;
}

export interface UserDomaincontrollerExtraServer {
    id?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sourceIpAddress?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<number>;
}

export interface UserExchangeKdcIp {
    ipv4?: pulumi.Input<string>;
}

export interface UserFssopollingAdgrp {
    name?: pulumi.Input<string>;
}

export interface UserGroupGuest {
    comment?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    expiration?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    mobilePhone?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    sponsor?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

export interface UserGroupMatch {
    groupName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverName?: pulumi.Input<string>;
}

export interface UserGroupMember {
    name?: pulumi.Input<string>;
}

export interface UserNacpolicySeverity {
    severityNum?: pulumi.Input<number>;
}

export interface UserNacpolicySwitchGroup {
    name?: pulumi.Input<string>;
}

export interface UserNacpolicySwitchScope {
    switchId?: pulumi.Input<string>;
}

export interface UserPeergrpMember {
    name?: pulumi.Input<string>;
}

export interface UserQuarantineTarget {
    description?: pulumi.Input<string>;
    entry?: pulumi.Input<string>;
    macs?: pulumi.Input<pulumi.Input<inputs.UserQuarantineTargetMac>[]>;
}

export interface UserQuarantineTargetMac {
    description?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
    entryId?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    parent?: pulumi.Input<string>;
}

export interface UserRadiusAccountingServer {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    secret?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface UserRadiusClass {
    name?: pulumi.Input<string>;
}

export interface UserSecurityexemptlistRule {
    devices?: pulumi.Input<pulumi.Input<inputs.UserSecurityexemptlistRuleDevice>[]>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.UserSecurityexemptlistRuleDstaddr>[]>;
    id?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<inputs.UserSecurityexemptlistRuleService>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.UserSecurityexemptlistRuleSrcaddr>[]>;
}

export interface UserSecurityexemptlistRuleDevice {
    name?: pulumi.Input<string>;
}

export interface UserSecurityexemptlistRuleDstaddr {
    name?: pulumi.Input<string>;
}

export interface UserSecurityexemptlistRuleService {
    name?: pulumi.Input<string>;
}

export interface UserSecurityexemptlistRuleSrcaddr {
    name?: pulumi.Input<string>;
}

export interface UserSettingAuthPort {
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface VideofilterKeywordWord {
    comment?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface VideofilterProfileFilter {
    action?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    keyword?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface VideofilterProfileFortiguardCategory {
    filters?: pulumi.Input<pulumi.Input<inputs.VideofilterProfileFortiguardCategoryFilter>[]>;
}

export interface VideofilterProfileFortiguardCategoryFilter {
    action?: pulumi.Input<string>;
    categoryId?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
}

export interface VideofilterYoutubechannelfilterEntry {
    action?: pulumi.Input<string>;
    channelId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface VirtualpatchProfileExemption {
    devices?: pulumi.Input<pulumi.Input<inputs.VirtualpatchProfileExemptionDevice>[]>;
    id?: pulumi.Input<number>;
    rules?: pulumi.Input<pulumi.Input<inputs.VirtualpatchProfileExemptionRule>[]>;
    status?: pulumi.Input<string>;
}

export interface VirtualpatchProfileExemptionDevice {
    mac?: pulumi.Input<string>;
}

export interface VirtualpatchProfileExemptionRule {
    id?: pulumi.Input<number>;
}

export interface VoipProfileMsrp {
    logViolations?: pulumi.Input<string>;
    maxMsgSize?: pulumi.Input<number>;
    maxMsgSizeAction?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface VoipProfileSccp {
    blockMcast?: pulumi.Input<string>;
    logCallSummary?: pulumi.Input<string>;
    logViolations?: pulumi.Input<string>;
    maxCalls?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    verifyHeader?: pulumi.Input<string>;
}

export interface VoipProfileSip {
    ackRate?: pulumi.Input<number>;
    ackRateTrack?: pulumi.Input<string>;
    blockAck?: pulumi.Input<string>;
    blockBye?: pulumi.Input<string>;
    blockCancel?: pulumi.Input<string>;
    blockGeoRedOptions?: pulumi.Input<string>;
    blockInfo?: pulumi.Input<string>;
    blockInvite?: pulumi.Input<string>;
    blockLongLines?: pulumi.Input<string>;
    blockMessage?: pulumi.Input<string>;
    blockNotify?: pulumi.Input<string>;
    blockOptions?: pulumi.Input<string>;
    blockPrack?: pulumi.Input<string>;
    blockPublish?: pulumi.Input<string>;
    blockRefer?: pulumi.Input<string>;
    blockRegister?: pulumi.Input<string>;
    blockSubscribe?: pulumi.Input<string>;
    blockUnknown?: pulumi.Input<string>;
    blockUpdate?: pulumi.Input<string>;
    byeRate?: pulumi.Input<number>;
    byeRateTrack?: pulumi.Input<string>;
    callIdRegex?: pulumi.Input<string>;
    callKeepalive?: pulumi.Input<number>;
    cancelRate?: pulumi.Input<number>;
    cancelRateTrack?: pulumi.Input<string>;
    contactFixup?: pulumi.Input<string>;
    contentTypeRegex?: pulumi.Input<string>;
    hntRestrictSourceIp?: pulumi.Input<string>;
    hostedNatTraversal?: pulumi.Input<string>;
    infoRate?: pulumi.Input<number>;
    infoRateTrack?: pulumi.Input<string>;
    inviteRate?: pulumi.Input<number>;
    inviteRateTrack?: pulumi.Input<string>;
    ipsRtp?: pulumi.Input<string>;
    logCallSummary?: pulumi.Input<string>;
    logViolations?: pulumi.Input<string>;
    malformedHeaderAllow?: pulumi.Input<string>;
    malformedHeaderCallId?: pulumi.Input<string>;
    malformedHeaderContact?: pulumi.Input<string>;
    malformedHeaderContentLength?: pulumi.Input<string>;
    malformedHeaderContentType?: pulumi.Input<string>;
    malformedHeaderCseq?: pulumi.Input<string>;
    malformedHeaderExpires?: pulumi.Input<string>;
    malformedHeaderFrom?: pulumi.Input<string>;
    malformedHeaderMaxForwards?: pulumi.Input<string>;
    malformedHeaderNoProxyRequire?: pulumi.Input<string>;
    malformedHeaderNoRequire?: pulumi.Input<string>;
    malformedHeaderPAssertedIdentity?: pulumi.Input<string>;
    malformedHeaderRack?: pulumi.Input<string>;
    malformedHeaderRecordRoute?: pulumi.Input<string>;
    malformedHeaderRoute?: pulumi.Input<string>;
    malformedHeaderRseq?: pulumi.Input<string>;
    malformedHeaderSdpA?: pulumi.Input<string>;
    malformedHeaderSdpB?: pulumi.Input<string>;
    malformedHeaderSdpC?: pulumi.Input<string>;
    malformedHeaderSdpI?: pulumi.Input<string>;
    malformedHeaderSdpK?: pulumi.Input<string>;
    malformedHeaderSdpM?: pulumi.Input<string>;
    malformedHeaderSdpO?: pulumi.Input<string>;
    malformedHeaderSdpR?: pulumi.Input<string>;
    malformedHeaderSdpS?: pulumi.Input<string>;
    malformedHeaderSdpT?: pulumi.Input<string>;
    malformedHeaderSdpV?: pulumi.Input<string>;
    malformedHeaderSdpZ?: pulumi.Input<string>;
    malformedHeaderTo?: pulumi.Input<string>;
    malformedHeaderVia?: pulumi.Input<string>;
    malformedRequestLine?: pulumi.Input<string>;
    maxBodyLength?: pulumi.Input<number>;
    maxDialogs?: pulumi.Input<number>;
    maxIdleDialogs?: pulumi.Input<number>;
    maxLineLength?: pulumi.Input<number>;
    messageRate?: pulumi.Input<number>;
    messageRateTrack?: pulumi.Input<string>;
    natPortRange?: pulumi.Input<string>;
    natTrace?: pulumi.Input<string>;
    noSdpFixup?: pulumi.Input<string>;
    notifyRate?: pulumi.Input<number>;
    notifyRateTrack?: pulumi.Input<string>;
    openContactPinhole?: pulumi.Input<string>;
    openRecordRoutePinhole?: pulumi.Input<string>;
    openRegisterPinhole?: pulumi.Input<string>;
    openViaPinhole?: pulumi.Input<string>;
    optionsRate?: pulumi.Input<number>;
    optionsRateTrack?: pulumi.Input<string>;
    prackRate?: pulumi.Input<number>;
    prackRateTrack?: pulumi.Input<string>;
    preserveOverride?: pulumi.Input<string>;
    provisionalInviteExpiryTime?: pulumi.Input<number>;
    publishRate?: pulumi.Input<number>;
    publishRateTrack?: pulumi.Input<string>;
    referRate?: pulumi.Input<number>;
    referRateTrack?: pulumi.Input<string>;
    registerContactTrace?: pulumi.Input<string>;
    registerRate?: pulumi.Input<number>;
    registerRateTrack?: pulumi.Input<string>;
    rfc2543Branch?: pulumi.Input<string>;
    rtp?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslAuthClient?: pulumi.Input<string>;
    sslAuthServer?: pulumi.Input<string>;
    sslClientCertificate?: pulumi.Input<string>;
    sslClientRenegotiation?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    sslPfs?: pulumi.Input<string>;
    sslSendEmptyFrags?: pulumi.Input<string>;
    sslServerCertificate?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    strictRegister?: pulumi.Input<string>;
    subscribeRate?: pulumi.Input<number>;
    subscribeRateTrack?: pulumi.Input<string>;
    unknownHeader?: pulumi.Input<string>;
    updateRate?: pulumi.Input<number>;
    updateRateTrack?: pulumi.Input<string>;
}

export interface VpnKmipserverServerList {
    cert?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface VpnOcvpnForticlientAccess {
    authGroups?: pulumi.Input<pulumi.Input<inputs.VpnOcvpnForticlientAccessAuthGroup>[]>;
    psksecret?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface VpnOcvpnForticlientAccessAuthGroup {
    authGroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlays?: pulumi.Input<pulumi.Input<inputs.VpnOcvpnForticlientAccessAuthGroupOverlay>[]>;
}

export interface VpnOcvpnForticlientAccessAuthGroupOverlay {
    overlayName?: pulumi.Input<string>;
}

export interface VpnOcvpnOverlay {
    assignIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interOverlay?: pulumi.Input<string>;
    ipv4EndIp?: pulumi.Input<string>;
    ipv4StartIp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlayName?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VpnOcvpnOverlaySubnet>[]>;
}

export interface VpnOcvpnOverlaySubnet {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface VpnOcvpnWanInterface {
    name?: pulumi.Input<string>;
}

export interface VpnQkdCertificate {
    name?: pulumi.Input<string>;
}

export interface VpncertificateSettingCrlVerification {
    chainCrlAbsence?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    leafCrlAbsence?: pulumi.Input<string>;
}

export interface VpnipsecConcentratorMember {
    name?: pulumi.Input<string>;
}

export interface VpnipsecFecMapping {
    bandwidthBiThreshold?: pulumi.Input<number>;
    bandwidthDownThreshold?: pulumi.Input<number>;
    bandwidthUpThreshold?: pulumi.Input<number>;
    base?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    packetLossThreshold?: pulumi.Input<number>;
    redundant?: pulumi.Input<number>;
    seqno?: pulumi.Input<number>;
}

export interface VpnipsecPhase1BackupGateway {
    address?: pulumi.Input<string>;
}

export interface VpnipsecPhase1Certificate {
    name?: pulumi.Input<string>;
}

export interface VpnipsecPhase1InternalDomainList {
    domainName?: pulumi.Input<string>;
}

export interface VpnipsecPhase1Ipv4ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnipsecPhase1Ipv6ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnipsecPhase1interfaceBackupGateway {
    address?: pulumi.Input<string>;
}

export interface VpnipsecPhase1interfaceCertificate {
    name?: pulumi.Input<string>;
}

export interface VpnipsecPhase1interfaceInternalDomainList {
    domainName?: pulumi.Input<string>;
}

export interface VpnipsecPhase1interfaceIpv4ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnipsecPhase1interfaceIpv6ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnsslSettingsAuthenticationRule {
    auth?: pulumi.Input<string>;
    cipher?: pulumi.Input<string>;
    clientCert?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.VpnsslSettingsAuthenticationRuleGroup>[]>;
    id?: pulumi.Input<number>;
    portal?: pulumi.Input<string>;
    realm?: pulumi.Input<string>;
    sourceAddress6Negate?: pulumi.Input<string>;
    sourceAddress6s?: pulumi.Input<pulumi.Input<inputs.VpnsslSettingsAuthenticationRuleSourceAddress6>[]>;
    sourceAddressNegate?: pulumi.Input<string>;
    sourceAddresses?: pulumi.Input<pulumi.Input<inputs.VpnsslSettingsAuthenticationRuleSourceAddress>[]>;
    sourceInterfaces?: pulumi.Input<pulumi.Input<inputs.VpnsslSettingsAuthenticationRuleSourceInterface>[]>;
    userPeer?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.VpnsslSettingsAuthenticationRuleUser>[]>;
}

export interface VpnsslSettingsAuthenticationRuleGroup {
    name?: pulumi.Input<string>;
}

export interface VpnsslSettingsAuthenticationRuleSourceAddress {
    name?: pulumi.Input<string>;
}

export interface VpnsslSettingsAuthenticationRuleSourceAddress6 {
    name?: pulumi.Input<string>;
}

export interface VpnsslSettingsAuthenticationRuleSourceInterface {
    name?: pulumi.Input<string>;
}

export interface VpnsslSettingsAuthenticationRuleUser {
    name?: pulumi.Input<string>;
}

export interface VpnsslSettingsSourceAddress {
    name?: pulumi.Input<string>;
}

export interface VpnsslSettingsSourceAddress6 {
    name?: pulumi.Input<string>;
}

export interface VpnsslSettingsSourceInterface {
    name?: pulumi.Input<string>;
}

export interface VpnsslSettingsTunnelIpPool {
    name?: pulumi.Input<string>;
}

export interface VpnsslSettingsTunnelIpv6Pool {
    name?: pulumi.Input<string>;
}

export interface VpnsslwebHostchecksoftwareCheckItemList {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    md5s?: pulumi.Input<pulumi.Input<inputs.VpnsslwebHostchecksoftwareCheckItemListMd5>[]>;
    target?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface VpnsslwebHostchecksoftwareCheckItemListMd5 {
    id?: pulumi.Input<string>;
}

export interface VpnsslwebPortalBookmarkGroup {
    bookmarks?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalBookmarkGroupBookmark>[]>;
    name?: pulumi.Input<string>;
}

export interface VpnsslwebPortalBookmarkGroupBookmark {
    additionalParams?: pulumi.Input<string>;
    apptype?: pulumi.Input<string>;
    colorDepth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    formDatas?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalBookmarkGroupBookmarkFormData>[]>;
    height?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    keyboardLayout?: pulumi.Input<string>;
    listeningPort?: pulumi.Input<number>;
    loadBalancingInfo?: pulumi.Input<string>;
    logonPassword?: pulumi.Input<string>;
    logonUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preconnectionBlob?: pulumi.Input<string>;
    preconnectionId?: pulumi.Input<number>;
    remotePort?: pulumi.Input<number>;
    restrictedAdmin?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    sendPreconnectionId?: pulumi.Input<string>;
    serverLayout?: pulumi.Input<string>;
    showStatusWindow?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoCredentialSentOnce?: pulumi.Input<string>;
    ssoPassword?: pulumi.Input<string>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vncKeyboardLayout?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface VpnsslwebPortalBookmarkGroupBookmarkFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VpnsslwebPortalHostCheckPolicy {
    name?: pulumi.Input<string>;
}

export interface VpnsslwebPortalIpPool {
    name?: pulumi.Input<string>;
}

export interface VpnsslwebPortalIpv6Pool {
    name?: pulumi.Input<string>;
}

export interface VpnsslwebPortalIpv6SplitTunnelingRoutingAddress {
    name?: pulumi.Input<string>;
}

export interface VpnsslwebPortalLandingPage {
    formDatas?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalLandingPageFormData>[]>;
    logoutUrl?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoPassword?: pulumi.Input<string>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface VpnsslwebPortalLandingPageFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VpnsslwebPortalMacAddrCheckRule {
    macAddrLists?: pulumi.Input<pulumi.Input<inputs.VpnsslwebPortalMacAddrCheckRuleMacAddrList>[]>;
    macAddrMask?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface VpnsslwebPortalMacAddrCheckRuleMacAddrList {
    addr?: pulumi.Input<string>;
}

export interface VpnsslwebPortalOsCheckList {
    action?: pulumi.Input<string>;
    latestPatchLevel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tolerance?: pulumi.Input<number>;
}

export interface VpnsslwebPortalSplitDn {
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    domains?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
}

export interface VpnsslwebPortalSplitTunnelingRoutingAddress {
    name?: pulumi.Input<string>;
}

export interface VpnsslwebUserbookmarkBookmark {
    additionalParams?: pulumi.Input<string>;
    apptype?: pulumi.Input<string>;
    colorDepth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    formDatas?: pulumi.Input<pulumi.Input<inputs.VpnsslwebUserbookmarkBookmarkFormData>[]>;
    height?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    keyboardLayout?: pulumi.Input<string>;
    listeningPort?: pulumi.Input<number>;
    loadBalancingInfo?: pulumi.Input<string>;
    logonPassword?: pulumi.Input<string>;
    logonUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preconnectionBlob?: pulumi.Input<string>;
    preconnectionId?: pulumi.Input<number>;
    remotePort?: pulumi.Input<number>;
    restrictedAdmin?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    sendPreconnectionId?: pulumi.Input<string>;
    serverLayout?: pulumi.Input<string>;
    showStatusWindow?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoCredentialSentOnce?: pulumi.Input<string>;
    ssoPassword?: pulumi.Input<string>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vncKeyboardLayout?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface VpnsslwebUserbookmarkBookmarkFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VpnsslwebUsergroupbookmarkBookmark {
    additionalParams?: pulumi.Input<string>;
    apptype?: pulumi.Input<string>;
    colorDepth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    formDatas?: pulumi.Input<pulumi.Input<inputs.VpnsslwebUsergroupbookmarkBookmarkFormData>[]>;
    height?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    keyboardLayout?: pulumi.Input<string>;
    listeningPort?: pulumi.Input<number>;
    loadBalancingInfo?: pulumi.Input<string>;
    logonPassword?: pulumi.Input<string>;
    logonUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preconnectionBlob?: pulumi.Input<string>;
    preconnectionId?: pulumi.Input<number>;
    remotePort?: pulumi.Input<number>;
    restrictedAdmin?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    sendPreconnectionId?: pulumi.Input<string>;
    serverLayout?: pulumi.Input<string>;
    showStatusWindow?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoCredentialSentOnce?: pulumi.Input<string>;
    ssoPassword?: pulumi.Input<string>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vncKeyboardLayout?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface VpnsslwebUsergroupbookmarkBookmarkFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WafProfileAddressList {
    blockedAddresses?: pulumi.Input<pulumi.Input<inputs.WafProfileAddressListBlockedAddress>[]>;
    blockedLog?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trustedAddresses?: pulumi.Input<pulumi.Input<inputs.WafProfileAddressListTrustedAddress>[]>;
}

export interface WafProfileAddressListBlockedAddress {
    name?: pulumi.Input<string>;
}

export interface WafProfileAddressListTrustedAddress {
    name?: pulumi.Input<string>;
}

export interface WafProfileConstraint {
    contentLength?: pulumi.Input<inputs.WafProfileConstraintContentLength>;
    exceptions?: pulumi.Input<pulumi.Input<inputs.WafProfileConstraintException>[]>;
    headerLength?: pulumi.Input<inputs.WafProfileConstraintHeaderLength>;
    hostname?: pulumi.Input<inputs.WafProfileConstraintHostname>;
    lineLength?: pulumi.Input<inputs.WafProfileConstraintLineLength>;
    malformed?: pulumi.Input<inputs.WafProfileConstraintMalformed>;
    maxCookie?: pulumi.Input<inputs.WafProfileConstraintMaxCookie>;
    maxHeaderLine?: pulumi.Input<inputs.WafProfileConstraintMaxHeaderLine>;
    maxRangeSegment?: pulumi.Input<inputs.WafProfileConstraintMaxRangeSegment>;
    maxUrlParam?: pulumi.Input<inputs.WafProfileConstraintMaxUrlParam>;
    method?: pulumi.Input<inputs.WafProfileConstraintMethod>;
    paramLength?: pulumi.Input<inputs.WafProfileConstraintParamLength>;
    urlParamLength?: pulumi.Input<inputs.WafProfileConstraintUrlParamLength>;
    version?: pulumi.Input<inputs.WafProfileConstraintVersion>;
}

export interface WafProfileConstraintContentLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintException {
    address?: pulumi.Input<string>;
    contentLength?: pulumi.Input<string>;
    headerLength?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    lineLength?: pulumi.Input<string>;
    malformed?: pulumi.Input<string>;
    maxCookie?: pulumi.Input<string>;
    maxHeaderLine?: pulumi.Input<string>;
    maxRangeSegment?: pulumi.Input<string>;
    maxUrlParam?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    paramLength?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
    urlParamLength?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface WafProfileConstraintHeaderLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintHostname {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintLineLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMalformed {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMaxCookie {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxCookie?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMaxHeaderLine {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxHeaderLine?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMaxRangeSegment {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxRangeSegment?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMaxUrlParam {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxUrlParam?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintMethod {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintParamLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintUrlParamLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileConstraintVersion {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileMethod {
    defaultAllowedMethods?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    methodPolicies?: pulumi.Input<pulumi.Input<inputs.WafProfileMethodMethodPolicy>[]>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileMethodMethodPolicy {
    address?: pulumi.Input<string>;
    allowedMethods?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    pattern?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
}

export interface WafProfileSignature {
    creditCardDetectionThreshold?: pulumi.Input<number>;
    customSignatures?: pulumi.Input<pulumi.Input<inputs.WafProfileSignatureCustomSignature>[]>;
    disabledSignatures?: pulumi.Input<pulumi.Input<inputs.WafProfileSignatureDisabledSignature>[]>;
    disabledSubClasses?: pulumi.Input<pulumi.Input<inputs.WafProfileSignatureDisabledSubClass>[]>;
    mainClasses?: pulumi.Input<pulumi.Input<inputs.WafProfileSignatureMainClass>[]>;
}

export interface WafProfileSignatureCustomSignature {
    action?: pulumi.Input<string>;
    caseSensitivity?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface WafProfileSignatureDisabledSignature {
    id?: pulumi.Input<number>;
}

export interface WafProfileSignatureDisabledSubClass {
    id?: pulumi.Input<number>;
}

export interface WafProfileSignatureMainClass {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WafProfileUrlAccess {
    accessPatterns?: pulumi.Input<pulumi.Input<inputs.WafProfileUrlAccessAccessPattern>[]>;
    action?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
}

export interface WafProfileUrlAccessAccessPattern {
    id?: pulumi.Input<number>;
    negate?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
}

export interface WanoptCacheserviceDstPeer {
    authType?: pulumi.Input<number>;
    deviceId?: pulumi.Input<string>;
    encodeType?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
}

export interface WanoptCacheserviceSrcPeer {
    authType?: pulumi.Input<number>;
    deviceId?: pulumi.Input<string>;
    encodeType?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
}

export interface WanoptContentdeliverynetworkruleHostDomainNameSuffix {
    name?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRule {
    contentId?: pulumi.Input<inputs.WanoptContentdeliverynetworkruleRuleContentId>;
    matchEntries?: pulumi.Input<pulumi.Input<inputs.WanoptContentdeliverynetworkruleRuleMatchEntry>[]>;
    matchMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    skipEntries?: pulumi.Input<pulumi.Input<inputs.WanoptContentdeliverynetworkruleRuleSkipEntry>[]>;
    skipRuleMode?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRuleContentId {
    endDirection?: pulumi.Input<string>;
    endSkip?: pulumi.Input<number>;
    endStr?: pulumi.Input<string>;
    rangeStr?: pulumi.Input<string>;
    startDirection?: pulumi.Input<string>;
    startSkip?: pulumi.Input<number>;
    startStr?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRuleMatchEntry {
    id?: pulumi.Input<number>;
    patterns?: pulumi.Input<pulumi.Input<inputs.WanoptContentdeliverynetworkruleRuleMatchEntryPattern>[]>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRuleMatchEntryPattern {
    string?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRuleSkipEntry {
    id?: pulumi.Input<number>;
    patterns?: pulumi.Input<pulumi.Input<inputs.WanoptContentdeliverynetworkruleRuleSkipEntryPattern>[]>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRuleSkipEntryPattern {
    string?: pulumi.Input<string>;
}

export interface WanoptProfileCifs {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preferChunking?: pulumi.Input<string>;
    protocolOpt?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface WanoptProfileFtp {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preferChunking?: pulumi.Input<string>;
    protocolOpt?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface WanoptProfileHttp {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preferChunking?: pulumi.Input<string>;
    protocolOpt?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    sslPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tunnelNonHttp?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
    unknownHttpVersion?: pulumi.Input<string>;
}

export interface WanoptProfileMapi {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    secureTunnel?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface WanoptProfileTcp {
    byteCaching?: pulumi.Input<string>;
    byteCachingOpt?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    sslPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface WebfilterContentEntry {
    action?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface WebfilterContentheaderEntry {
    action?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
}

export interface WebfilterProfileAntiphish {
    authentication?: pulumi.Input<string>;
    checkBasicAuth?: pulumi.Input<string>;
    checkUri?: pulumi.Input<string>;
    checkUsernameOnly?: pulumi.Input<string>;
    customPatterns?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileAntiphishCustomPattern>[]>;
    defaultAction?: pulumi.Input<string>;
    domainController?: pulumi.Input<string>;
    inspectionEntries?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileAntiphishInspectionEntry>[]>;
    ldap?: pulumi.Input<string>;
    maxBodyLen?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface WebfilterProfileAntiphishCustomPattern {
    category?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface WebfilterProfileAntiphishInspectionEntry {
    action?: pulumi.Input<string>;
    fortiguardCategory?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    scanArchiveContents?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface WebfilterProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileFileFilterEntryFileType>[]>;
    filter?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface WebfilterProfileFileFilterEntryFileType {
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileFtgdWf {
    exemptQuota?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileFtgdWfFilter>[]>;
    maxQuotaTimeout?: pulumi.Input<number>;
    options?: pulumi.Input<string>;
    ovrd?: pulumi.Input<string>;
    quotas?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileFtgdWfQuota>[]>;
    rateCrlUrls?: pulumi.Input<string>;
    rateCssUrls?: pulumi.Input<string>;
    rateImageUrls?: pulumi.Input<string>;
    rateJavascriptUrls?: pulumi.Input<string>;
}

export interface WebfilterProfileFtgdWfFilter {
    action?: pulumi.Input<string>;
    authUsrGrps?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileFtgdWfFilterAuthUsrGrp>[]>;
    category?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    overrideReplacemsg?: pulumi.Input<string>;
    warnDuration?: pulumi.Input<string>;
    warningDurationType?: pulumi.Input<string>;
    warningPrompt?: pulumi.Input<string>;
}

export interface WebfilterProfileFtgdWfFilterAuthUsrGrp {
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileFtgdWfQuota {
    category?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    overrideReplacemsg?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface WebfilterProfileOverride {
    ovrdCookie?: pulumi.Input<string>;
    ovrdDur?: pulumi.Input<string>;
    ovrdDurMode?: pulumi.Input<string>;
    ovrdScope?: pulumi.Input<string>;
    ovrdUserGroups?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileOverrideOvrdUserGroup>[]>;
    profileAttribute?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    profiles?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileOverrideProfile>[]>;
}

export interface WebfilterProfileOverrideOvrdUserGroup {
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileOverrideProfile {
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileWeb {
    allowlist?: pulumi.Input<string>;
    blacklist?: pulumi.Input<string>;
    blocklist?: pulumi.Input<string>;
    bwordTable?: pulumi.Input<number>;
    bwordThreshold?: pulumi.Input<number>;
    contentHeaderList?: pulumi.Input<number>;
    keywordMatches?: pulumi.Input<pulumi.Input<inputs.WebfilterProfileWebKeywordMatch>[]>;
    logSearch?: pulumi.Input<string>;
    safeSearch?: pulumi.Input<string>;
    urlfilterTable?: pulumi.Input<number>;
    vimeoRestrict?: pulumi.Input<string>;
    whitelist?: pulumi.Input<string>;
    youtubeRestrict?: pulumi.Input<string>;
}

export interface WebfilterProfileWebKeywordMatch {
    pattern?: pulumi.Input<string>;
}

export interface WebfilterProfileWispServer {
    name?: pulumi.Input<string>;
}

export interface WebfilterProfileYoutubeChannelFilter {
    channelId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface WebfilterUrlfilterEntry {
    action?: pulumi.Input<string>;
    antiphishAction?: pulumi.Input<string>;
    dnsAddressFamily?: pulumi.Input<string>;
    exempt?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    referrerHost?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    webProxyProfile?: pulumi.Input<string>;
}

export interface WebproxyExplicitPacPolicy {
    comments?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.WebproxyExplicitPacPolicyDstaddr>[]>;
    pacFileData?: pulumi.Input<string>;
    pacFileName?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    srcaddr6s?: pulumi.Input<pulumi.Input<inputs.WebproxyExplicitPacPolicySrcaddr6>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<inputs.WebproxyExplicitPacPolicySrcaddr>[]>;
    status?: pulumi.Input<string>;
}

export interface WebproxyExplicitPacPolicyDstaddr {
    name?: pulumi.Input<string>;
}

export interface WebproxyExplicitPacPolicySrcaddr {
    name?: pulumi.Input<string>;
}

export interface WebproxyExplicitPacPolicySrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface WebproxyExplicitSecureWebProxyCert {
    name?: pulumi.Input<string>;
}

export interface WebproxyForwardservergroupServerList {
    name?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface WebproxyGlobalLearnClientIpSrcaddr {
    name?: pulumi.Input<string>;
}

export interface WebproxyGlobalLearnClientIpSrcaddr6 {
    name?: pulumi.Input<string>;
}

export interface WebproxyProfileHeader {
    action?: pulumi.Input<string>;
    addOption?: pulumi.Input<string>;
    base64Encoding?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    dstaddr6s?: pulumi.Input<pulumi.Input<inputs.WebproxyProfileHeaderDstaddr6>[]>;
    dstaddrs?: pulumi.Input<pulumi.Input<inputs.WebproxyProfileHeaderDstaddr>[]>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface WebproxyProfileHeaderDstaddr {
    name?: pulumi.Input<string>;
}

export interface WebproxyProfileHeaderDstaddr6 {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerAccesscontrollistLayer3Ipv4Rule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    srcaddr?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
}

export interface WirelesscontrollerAccesscontrollistLayer3Ipv6Rule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    srcaddr?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
}

export interface WirelesscontrollerAddrgrpAddress {
    id?: pulumi.Input<string>;
}

export interface WirelesscontrollerApcfgprofileCommandList {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passwdValue?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WirelesscontrollerArrpprofileDarrpOptimizeSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerBonjourprofilePolicyList {
    description?: pulumi.Input<string>;
    fromVlan?: pulumi.Input<string>;
    policyId?: pulumi.Input<number>;
    services?: pulumi.Input<string>;
    toVlan?: pulumi.Input<string>;
}

export interface WirelesscontrollerIntercontrollerInterControllerPeer {
    id?: pulumi.Input<number>;
    peerIp?: pulumi.Input<string>;
    peerPort?: pulumi.Input<number>;
    peerPriority?: pulumi.Input<string>;
}

export interface WirelesscontrollerMpskprofileMpskGroup {
    mpskKeys?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerMpskprofileMpskGroupMpskKey>[]>;
    name?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
    vlanType?: pulumi.Input<string>;
}

export interface WirelesscontrollerMpskprofileMpskGroupMpskKey {
    comment?: pulumi.Input<string>;
    concurrentClientLimitType?: pulumi.Input<string>;
    concurrentClients?: pulumi.Input<number>;
    keyType?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    mpskSchedules?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerMpskprofileMpskGroupMpskKeyMpskSchedule>[]>;
    name?: pulumi.Input<string>;
    passphrase?: pulumi.Input<string>;
    saePassword?: pulumi.Input<string>;
    saePk?: pulumi.Input<string>;
    saePrivateKey?: pulumi.Input<string>;
}

export interface WirelesscontrollerMpskprofileMpskGroupMpskKeyMpskSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerQosprofileDscpWmmBe {
    id?: pulumi.Input<number>;
}

export interface WirelesscontrollerQosprofileDscpWmmBk {
    id?: pulumi.Input<number>;
}

export interface WirelesscontrollerQosprofileDscpWmmVi {
    id?: pulumi.Input<number>;
}

export interface WirelesscontrollerQosprofileDscpWmmVo {
    id?: pulumi.Input<number>;
}

export interface WirelesscontrollerSettingDarrpOptimizeSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerSettingOffendingSsid {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ssidPattern?: pulumi.Input<string>;
}

export interface WirelesscontrollerSnmpCommunity {
    hosts?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerSnmpCommunityHost>[]>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    queryV1Status?: pulumi.Input<string>;
    queryV2cStatus?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapV1Status?: pulumi.Input<string>;
    trapV2cStatus?: pulumi.Input<string>;
}

export interface WirelesscontrollerSnmpCommunityHost {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface WirelesscontrollerSnmpUser {
    authProto?: pulumi.Input<string>;
    authPwd?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notifyHosts?: pulumi.Input<string>;
    privProto?: pulumi.Input<string>;
    privPwd?: pulumi.Input<string>;
    queries?: pulumi.Input<string>;
    securityLevel?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapStatus?: pulumi.Input<string>;
}

export interface WirelesscontrollerTimersDarrpTime {
    time?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapMacFilterList {
    id?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    macFilterPolicy?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapMpskKey {
    comment?: pulumi.Input<string>;
    concurrentClients?: pulumi.Input<string>;
    keyName?: pulumi.Input<string>;
    mpskSchedules?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerVapMpskKeyMpskSchedule>[]>;
    passphrase?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapMpskKeyMpskSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapPortalMessageOverrides {
    authDisclaimerPage?: pulumi.Input<string>;
    authLoginFailedPage?: pulumi.Input<string>;
    authLoginPage?: pulumi.Input<string>;
    authRejectPage?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapRadiusMacAuthUsergroup {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapSelectedUsergroup {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapUsergroup {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapVlanName {
    name?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}

export interface WirelesscontrollerVapVlanPool {
    id?: pulumi.Input<number>;
    wtpGroup?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapgroupVap {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWidsprofileApBgscanDisableSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWidsprofileApScanChannelList2g5g {
    chan?: pulumi.Input<string>;
}

export interface WirelesscontrollerWidsprofileApScanChannelList6g {
    chan?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpLan {
    port1Mode?: pulumi.Input<string>;
    port1Ssid?: pulumi.Input<string>;
    port2Mode?: pulumi.Input<string>;
    port2Ssid?: pulumi.Input<string>;
    port3Mode?: pulumi.Input<string>;
    port3Ssid?: pulumi.Input<string>;
    port4Mode?: pulumi.Input<string>;
    port4Ssid?: pulumi.Input<string>;
    port5Mode?: pulumi.Input<string>;
    port5Ssid?: pulumi.Input<string>;
    port6Mode?: pulumi.Input<string>;
    port6Ssid?: pulumi.Input<string>;
    port7Mode?: pulumi.Input<string>;
    port7Ssid?: pulumi.Input<string>;
    port8Mode?: pulumi.Input<string>;
    port8Ssid?: pulumi.Input<string>;
    portEslMode?: pulumi.Input<string>;
    portEslSsid?: pulumi.Input<string>;
    portMode?: pulumi.Input<string>;
    portSsid?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpRadio1 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpRadio1Channel>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpRadio1Vap>[]>;
}

export interface WirelesscontrollerWtpRadio1Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpRadio1Vap {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpRadio2 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpRadio2Channel>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpRadio2Vap>[]>;
}

export interface WirelesscontrollerWtpRadio2Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpRadio2Vap {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpRadio3 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpRadio3Channel>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpRadio3Vap>[]>;
}

export interface WirelesscontrollerWtpRadio3Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpRadio3Vap {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpRadio4 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpRadio4Channel>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpRadio4Vap>[]>;
}

export interface WirelesscontrollerWtpRadio4Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpRadio4Vap {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpSplitTunnelingAcl {
    destIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface WirelesscontrollerWtpgroupWtp {
    wtpId?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileDenyMacList {
    id?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileEslSesDongle {
    apcAddrType?: pulumi.Input<string>;
    apcFqdn?: pulumi.Input<string>;
    apcIp?: pulumi.Input<string>;
    apcPort?: pulumi.Input<number>;
    coexLevel?: pulumi.Input<string>;
    complianceLevel?: pulumi.Input<string>;
    eslChannel?: pulumi.Input<string>;
    outputPower?: pulumi.Input<string>;
    scdEnable?: pulumi.Input<string>;
    tlsCertVerification?: pulumi.Input<string>;
    tlsFqdnVerification?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileLan {
    port1Mode?: pulumi.Input<string>;
    port1Ssid?: pulumi.Input<string>;
    port2Mode?: pulumi.Input<string>;
    port2Ssid?: pulumi.Input<string>;
    port3Mode?: pulumi.Input<string>;
    port3Ssid?: pulumi.Input<string>;
    port4Mode?: pulumi.Input<string>;
    port4Ssid?: pulumi.Input<string>;
    port5Mode?: pulumi.Input<string>;
    port5Ssid?: pulumi.Input<string>;
    port6Mode?: pulumi.Input<string>;
    port6Ssid?: pulumi.Input<string>;
    port7Mode?: pulumi.Input<string>;
    port7Ssid?: pulumi.Input<string>;
    port8Mode?: pulumi.Input<string>;
    port8Ssid?: pulumi.Input<string>;
    portEslMode?: pulumi.Input<string>;
    portEslSsid?: pulumi.Input<string>;
    portMode?: pulumi.Input<string>;
    portSsid?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileLbs {
    aeroscout?: pulumi.Input<string>;
    aeroscoutApMac?: pulumi.Input<string>;
    aeroscoutMmuReport?: pulumi.Input<string>;
    aeroscoutMu?: pulumi.Input<string>;
    aeroscoutMuFactor?: pulumi.Input<number>;
    aeroscoutMuTimeout?: pulumi.Input<number>;
    aeroscoutServerIp?: pulumi.Input<string>;
    aeroscoutServerPort?: pulumi.Input<number>;
    ekahauBlinkMode?: pulumi.Input<string>;
    ekahauTag?: pulumi.Input<string>;
    ercServerIp?: pulumi.Input<string>;
    ercServerPort?: pulumi.Input<number>;
    fortipresence?: pulumi.Input<string>;
    fortipresenceBle?: pulumi.Input<string>;
    fortipresenceFrequency?: pulumi.Input<number>;
    fortipresencePort?: pulumi.Input<number>;
    fortipresenceProject?: pulumi.Input<string>;
    fortipresenceRogue?: pulumi.Input<string>;
    fortipresenceSecret?: pulumi.Input<string>;
    fortipresenceServer?: pulumi.Input<string>;
    fortipresenceServerAddrType?: pulumi.Input<string>;
    fortipresenceServerFqdn?: pulumi.Input<string>;
    fortipresenceUnassoc?: pulumi.Input<string>;
    polestar?: pulumi.Input<string>;
    polestarAccumulationInterval?: pulumi.Input<number>;
    polestarAssetAddrgrpList?: pulumi.Input<string>;
    polestarAssetUuidList1?: pulumi.Input<string>;
    polestarAssetUuidList2?: pulumi.Input<string>;
    polestarAssetUuidList3?: pulumi.Input<string>;
    polestarAssetUuidList4?: pulumi.Input<string>;
    polestarProtocol?: pulumi.Input<string>;
    polestarReportingInterval?: pulumi.Input<number>;
    polestarServerFqdn?: pulumi.Input<string>;
    polestarServerPath?: pulumi.Input<string>;
    polestarServerPort?: pulumi.Input<number>;
    polestarServerToken?: pulumi.Input<string>;
    stationLocate?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileLedSchedule {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofilePlatform {
    ddscan?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio1 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelBondingExt?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpprofileRadio1Channel>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimize?: pulumi.Input<string>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificate?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificate?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPassword?: pulumi.Input<string>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPassword?: pulumi.Input<string>;
    samPrivateKey?: pulumi.Input<string>;
    samPrivateKeyPassword?: pulumi.Input<string>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimize?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpprofileRadio1Vap>[]>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio1Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio1Vap {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio2 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelBondingExt?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpprofileRadio2Channel>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimize?: pulumi.Input<string>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificate?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificate?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPassword?: pulumi.Input<string>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPassword?: pulumi.Input<string>;
    samPrivateKey?: pulumi.Input<string>;
    samPrivateKeyPassword?: pulumi.Input<string>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimize?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpprofileRadio2Vap>[]>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio2Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio2Vap {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio3 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelBondingExt?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpprofileRadio3Channel>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimize?: pulumi.Input<string>;
    protectionMode?: pulumi.Input<string>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificate?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificate?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPassword?: pulumi.Input<string>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPassword?: pulumi.Input<string>;
    samPrivateKey?: pulumi.Input<string>;
    samPrivateKeyPassword?: pulumi.Input<string>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimize?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpprofileRadio3Vap>[]>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio3Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio3Vap {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio4 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelBondingExt?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpprofileRadio4Channel>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimize?: pulumi.Input<string>;
    protectionMode?: pulumi.Input<string>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificate?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificate?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPassword?: pulumi.Input<string>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPassword?: pulumi.Input<string>;
    samPrivateKey?: pulumi.Input<string>;
    samPrivateKeyPassword?: pulumi.Input<string>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimize?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpprofileRadio4Vap>[]>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio4Channel {
    chan?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio4Vap {
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileSplitTunnelingAcl {
    destIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface Wirelesscontrollerhotspot20Anqp3gppcellularMccMncList {
    id?: pulumi.Input<number>;
    mcc?: pulumi.Input<string>;
    mnc?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20AnqpnairealmNaiList {
    eapMethods?: pulumi.Input<pulumi.Input<inputs.Wirelesscontrollerhotspot20AnqpnairealmNaiListEapMethod>[]>;
    encoding?: pulumi.Input<string>;
    naiRealm?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20AnqpnairealmNaiListEapMethod {
    authParams?: pulumi.Input<pulumi.Input<inputs.Wirelesscontrollerhotspot20AnqpnairealmNaiListEapMethodAuthParam>[]>;
    index?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20AnqpnairealmNaiListEapMethodAuthParam {
    id?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    val?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20AnqproamingconsortiumOiList {
    comment?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    oi?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20AnqpvenuenameValueList {
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20AnqpvenueurlValueList {
    index?: pulumi.Input<number>;
    number?: pulumi.Input<number>;
    value?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20H2qpadviceofchargeAocList {
    naiRealm?: pulumi.Input<string>;
    naiRealmEncoding?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    planInfos?: pulumi.Input<pulumi.Input<inputs.Wirelesscontrollerhotspot20H2qpadviceofchargeAocListPlanInfo>[]>;
    type?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20H2qpadviceofchargeAocListPlanInfo {
    currency?: pulumi.Input<string>;
    infoFile?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20H2qpoperatornameValueList {
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20H2qposuproviderFriendlyName {
    friendlyName?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20H2qposuproviderServiceDescription {
    lang?: pulumi.Input<string>;
    serviceDescription?: pulumi.Input<string>;
    serviceId?: pulumi.Input<number>;
}

export interface Wirelesscontrollerhotspot20H2qposuprovidernaiNaiList {
    name?: pulumi.Input<string>;
    osuNai?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20HsprofileOsuProvider {
    name?: pulumi.Input<string>;
}

export interface Wirelesscontrollerhotspot20IconIconList {
    file?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface Wirelesscontrollerhotspot20QosmapDscpExcept {
    dscp?: pulumi.Input<number>;
    index?: pulumi.Input<number>;
    up?: pulumi.Input<number>;
}

export interface Wirelesscontrollerhotspot20QosmapDscpRange {
    high?: pulumi.Input<number>;
    index?: pulumi.Input<number>;
    low?: pulumi.Input<number>;
    up?: pulumi.Input<number>;
}
