// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AntivirusProfileCifs {
    archiveBlock: string;
    archiveLog: string;
    avScan: string;
    emulator: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string;
    outbreakPrevention: string;
    quarantine: string;
}

export interface AntivirusProfileContentDisarm {
    coverPage: string;
    detectOnly: string;
    errorAction: string;
    officeAction: string;
    officeDde: string;
    officeEmbed: string;
    officeHylink: string;
    officeLinked: string;
    officeMacro: string;
    originalFileDestination: string;
    pdfActForm: string;
    pdfActGotor: string;
    pdfActJava: string;
    pdfActLaunch: string;
    pdfActMovie: string;
    pdfActSound: string;
    pdfEmbedfile: string;
    pdfHyperlink: string;
    pdfJavacode: string;
}

export interface AntivirusProfileExternalBlocklist {
    name: string;
}

export interface AntivirusProfileFtp {
    archiveBlock: string;
    archiveLog: string;
    avScan: string;
    emulator: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string;
    outbreakPrevention: string;
    quarantine: string;
}

export interface AntivirusProfileHttp {
    archiveBlock: string;
    archiveLog: string;
    avScan: string;
    contentDisarm: string;
    emulator: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string;
    outbreakPrevention: string;
    quarantine: string;
    unknownContentEncoding: string;
}

export interface AntivirusProfileImap {
    archiveBlock: string;
    archiveLog: string;
    avScan: string;
    contentDisarm: string;
    emulator: string;
    executables: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string;
    outbreakPrevention: string;
    quarantine: string;
}

export interface AntivirusProfileMapi {
    archiveBlock: string;
    archiveLog: string;
    avScan: string;
    emulator: string;
    executables: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string;
    outbreakPrevention: string;
    quarantine: string;
}

export interface AntivirusProfileNacQuar {
    expiry: string;
    infected: string;
    log: string;
}

export interface AntivirusProfileNntp {
    archiveBlock: string;
    archiveLog: string;
    avScan: string;
    emulator: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string;
    outbreakPrevention: string;
    quarantine: string;
}

export interface AntivirusProfileOutbreakPrevention {
    externalBlocklist: string;
    ftgdService: string;
}

export interface AntivirusProfilePop3 {
    archiveBlock: string;
    archiveLog: string;
    avScan: string;
    contentDisarm: string;
    emulator: string;
    executables: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string;
    outbreakPrevention: string;
    quarantine: string;
}

export interface AntivirusProfileSmb {
    archiveBlock: string;
    archiveLog: string;
    emulator: string;
    options: string;
    outbreakPrevention: string;
}

export interface AntivirusProfileSmtp {
    archiveBlock: string;
    archiveLog: string;
    avScan: string;
    contentDisarm: string;
    emulator: string;
    executables: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string;
    outbreakPrevention: string;
    quarantine: string;
}

export interface AntivirusProfileSsh {
    archiveBlock: string;
    archiveLog: string;
    avScan: string;
    emulator: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string;
    outbreakPrevention: string;
    quarantine: string;
}

export interface ApplicationGroupApplication {
    id: number;
}

export interface ApplicationGroupCategory {
    id: number;
}

export interface ApplicationGroupRisk {
    level: number;
}

export interface ApplicationListDefaultNetworkService {
    id: number;
    port: number;
    services: string;
    violationAction: string;
}

export interface ApplicationListEntry {
    action: string;
    applications?: outputs.ApplicationListEntryApplication[];
    behavior: string;
    categories?: outputs.ApplicationListEntryCategory[];
    exclusions?: outputs.ApplicationListEntryExclusion[];
    id: number;
    log: string;
    logPacket: string;
    parameters?: outputs.ApplicationListEntryParameter[];
    perIpShaper: string;
    popularity: string;
    protocols: string;
    quarantine: string;
    quarantineExpiry: string;
    quarantineLog: string;
    rateCount: number;
    rateDuration: number;
    rateMode: string;
    rateTrack: string;
    risks?: outputs.ApplicationListEntryRisk[];
    sessionTtl: number;
    shaper: string;
    shaperReverse: string;
    subCategories?: outputs.ApplicationListEntrySubCategory[];
    technology: string;
    vendor: string;
}

export interface ApplicationListEntryApplication {
    id: number;
}

export interface ApplicationListEntryCategory {
    id: number;
}

export interface ApplicationListEntryExclusion {
    id: number;
}

export interface ApplicationListEntryParameter {
    id: number;
    members?: outputs.ApplicationListEntryParameterMember[];
    value: string;
}

export interface ApplicationListEntryParameterMember {
    id: number;
    name: string;
    value: string;
}

export interface ApplicationListEntryRisk {
    level: number;
}

export interface ApplicationListEntrySubCategory {
    id: number;
}

export interface ApplicationNameMetadata {
    id: number;
    metaid: number;
    valueid: number;
}

export interface ApplicationNameParameter {
    name: string;
}

export interface AuthenticationRuleDstaddr {
    name: string;
}

export interface AuthenticationRuleDstaddr6 {
    name: string;
}

export interface AuthenticationRuleSrcaddr {
    name: string;
}

export interface AuthenticationRuleSrcaddr6 {
    name: string;
}

export interface AuthenticationRuleSrcintf {
    name: string;
}

export interface AuthenticationSchemeUserDatabase {
    name: string;
}

export interface AuthenticationSettingDevRange {
    name: string;
}

export interface AuthenticationSettingUserCertCa {
    name: string;
}

export interface CasbProfileSaasApplication {
    accessRules?: outputs.CasbProfileSaasApplicationAccessRule[];
    customControls?: outputs.CasbProfileSaasApplicationCustomControl[];
    domainControl: string;
    domainControlDomains?: outputs.CasbProfileSaasApplicationDomainControlDomain[];
    log: string;
    name: string;
    safeSearch: string;
    safeSearchControls?: outputs.CasbProfileSaasApplicationSafeSearchControl[];
    status: string;
    tenantControl: string;
    tenantControlTenants?: outputs.CasbProfileSaasApplicationTenantControlTenant[];
}

export interface CasbProfileSaasApplicationAccessRule {
    action: string;
    bypass: string;
    name: string;
}

export interface CasbProfileSaasApplicationCustomControl {
    name: string;
    options?: outputs.CasbProfileSaasApplicationCustomControlOption[];
}

export interface CasbProfileSaasApplicationCustomControlOption {
    name: string;
    userInputs?: outputs.CasbProfileSaasApplicationCustomControlOptionUserInput[];
}

export interface CasbProfileSaasApplicationCustomControlOptionUserInput {
    value: string;
}

export interface CasbProfileSaasApplicationDomainControlDomain {
    name: string;
}

export interface CasbProfileSaasApplicationSafeSearchControl {
    name: string;
}

export interface CasbProfileSaasApplicationTenantControlTenant {
    name: string;
}

export interface CasbSaasapplicationDomain {
    domain: string;
}

export interface CasbUseractivityControlOption {
    name: string;
    operations?: outputs.CasbUseractivityControlOptionOperation[];
    status: string;
}

export interface CasbUseractivityControlOptionOperation {
    action: string;
    caseSensitive: string;
    direction: string;
    headerName: string;
    name: string;
    searchKey: string;
    searchPattern: string;
    target: string;
    valueFromInput: string;
    values?: outputs.CasbUseractivityControlOptionOperationValue[];
}

export interface CasbUseractivityControlOptionOperationValue {
    value: string;
}

export interface CasbUseractivityMatch {
    id: number;
    rules?: outputs.CasbUseractivityMatchRule[];
    strategy: string;
}

export interface CasbUseractivityMatchRule {
    caseSensitive: string;
    domains?: outputs.CasbUseractivityMatchRuleDomain[];
    headerName: string;
    id: number;
    matchPattern: string;
    matchValue: string;
    methods?: outputs.CasbUseractivityMatchRuleMethod[];
    negate: string;
    type: string;
}

export interface CasbUseractivityMatchRuleDomain {
    domain: string;
}

export interface CasbUseractivityMatchRuleMethod {
    method: string;
}

export interface CifsProfileFileFilter {
    entries?: outputs.CifsProfileFileFilterEntry[];
    log: string;
    status: string;
}

export interface CifsProfileFileFilterEntry {
    action: string;
    comment?: string;
    direction: string;
    fileTypes?: outputs.CifsProfileFileFilterEntryFileType[];
    filter: string;
}

export interface CifsProfileFileFilterEntryFileType {
    name: string;
}

export interface CifsProfileServerKeytab {
    keytab: string;
    principal: string;
}

export interface DlpDictionaryEntry {
    comment?: string;
    id: number;
    ignoreCase: string;
    pattern: string;
    repeat: string;
    status: string;
    type: string;
}

export interface DlpExactdatamatchColumn {
    index: number;
    optional: string;
    type: string;
}

export interface DlpFilepatternEntry {
    fileType: string;
    filterType: string;
    pattern: string;
}

export interface DlpProfileRule {
    action: string;
    archive: string;
    expiry: string;
    fileSize: number;
    fileType: number;
    filterBy: string;
    id: number;
    label: string;
    matchPercentage: number;
    name: string;
    proto: string;
    sensitivities?: outputs.DlpProfileRuleSensitivity[];
    sensors?: outputs.DlpProfileRuleSensor[];
    severity: string;
    type: string;
}

export interface DlpProfileRuleSensitivity {
    name: string;
}

export interface DlpProfileRuleSensor {
    name: string;
}

export interface DlpSensorEntry {
    count: number;
    dictionary: string;
    id: number;
    status: string;
}

export interface DlpSensorFilter {
    action: string;
    archive: string;
    companyIdentifier: string;
    expiry: string;
    fileSize: number;
    fileType: number;
    filterBy: string;
    fpSensitivities?: outputs.DlpSensorFilterFpSensitivity[];
    id: number;
    matchPercentage: number;
    name: string;
    proto: string;
    regexp: string;
    sensitivities?: outputs.DlpSensorFilterSensitivity[];
    severity: string;
    type: string;
}

export interface DlpSensorFilterFpSensitivity {
    name: string;
}

export interface DlpSensorFilterSensitivity {
    name: string;
}

export interface DnsfilterDomainfilterEntry {
    action: string;
    domain: string;
    id: number;
    status: string;
    type: string;
}

export interface DnsfilterProfileDnsTranslation {
    addrType: string;
    dst: string;
    dst6: string;
    id: number;
    netmask: string;
    prefix: number;
    src: string;
    src6: string;
    status: string;
}

export interface DnsfilterProfileDomainFilter {
    domainFilterTable: number;
}

export interface DnsfilterProfileExternalIpBlocklist {
    name: string;
}

export interface DnsfilterProfileFtgdDns {
    filters?: outputs.DnsfilterProfileFtgdDnsFilter[];
    options: string;
}

export interface DnsfilterProfileFtgdDnsFilter {
    action: string;
    category: number;
    id: number;
    log: string;
}

export interface DnsfilterProfileTransparentDnsDatabase {
    name: string;
}

export interface DpdkGlobalInterface {
    interfaceName: string;
}

export interface EmailfilterBlockallowlistEntry {
    action: string;
    addrType: string;
    emailPattern: string;
    id: number;
    ip4Subnet: string;
    ip6Subnet: string;
    pattern: string;
    patternType: string;
    status: string;
    type: string;
}

export interface EmailfilterBwlEntry {
    action: string;
    addrType: string;
    emailPattern: string;
    id: number;
    ip4Subnet: string;
    ip6Subnet: string;
    patternType: string;
    status: string;
    type: string;
}

export interface EmailfilterBwordEntry {
    action: string;
    id: number;
    language: string;
    pattern: string;
    patternType: string;
    score: number;
    status: string;
    where: string;
}

export interface EmailfilterDnsblEntry {
    action: string;
    id: number;
    server: string;
    status: string;
}

export interface EmailfilterIptrustEntry {
    addrType: string;
    id: number;
    ip4Subnet: string;
    ip6Subnet: string;
    status: string;
}

export interface EmailfilterMheaderEntry {
    action: string;
    fieldbody: string;
    fieldname: string;
    id: number;
    patternType: string;
    status: string;
}

export interface EmailfilterProfileFileFilter {
    entries?: outputs.EmailfilterProfileFileFilterEntry[];
    log: string;
    scanArchiveContents: string;
    status: string;
}

export interface EmailfilterProfileFileFilterEntry {
    action: string;
    comment?: string;
    fileTypes?: outputs.EmailfilterProfileFileFilterEntryFileType[];
    filter: string;
    passwordProtected: string;
    protocol: string;
}

export interface EmailfilterProfileFileFilterEntryFileType {
    name: string;
}

export interface EmailfilterProfileGmail {
    log: string;
    logAll: string;
}

export interface EmailfilterProfileImap {
    action: string;
    log: string;
    logAll: string;
    tagMsg: string;
    tagType: string;
}

export interface EmailfilterProfileMapi {
    action: string;
    log: string;
    logAll: string;
}

export interface EmailfilterProfileMsnHotmail {
    log: string;
    logAll: string;
}

export interface EmailfilterProfileOtherWebmails {
    logAll: string;
}

export interface EmailfilterProfilePop3 {
    action: string;
    log: string;
    logAll: string;
    tagMsg: string;
    tagType: string;
}

export interface EmailfilterProfileSmtp {
    action: string;
    hdrip: string;
    localOverride: string;
    log: string;
    logAll: string;
    tagMsg: string;
    tagType: string;
}

export interface EmailfilterProfileYahooMail {
    log: string;
    logAll: string;
}

export interface EndpointcontrolProfileDeviceGroup {
    name: string;
}

export interface EndpointcontrolProfileForticlientAndroidSettings {
    disableWfWhenProtected: string;
    forticlientAdvancedVpn: string;
    forticlientAdvancedVpnBuffer?: string;
    forticlientVpnProvisioning: string;
    forticlientVpnSettings?: outputs.EndpointcontrolProfileForticlientAndroidSettingsForticlientVpnSetting[];
    forticlientWf: string;
    forticlientWfProfile: string;
}

export interface EndpointcontrolProfileForticlientAndroidSettingsForticlientVpnSetting {
    authMethod: string;
    name: string;
    presharedKey?: string;
    remoteGw: string;
    sslvpnAccessPort: number;
    sslvpnRequireCertificate: string;
    type: string;
}

export interface EndpointcontrolProfileForticlientIosSettings {
    clientVpnProvisioning: string;
    clientVpnSettings?: outputs.EndpointcontrolProfileForticlientIosSettingsClientVpnSetting[];
    configurationContent?: string;
    configurationName: string;
    disableWfWhenProtected: string;
    distributeConfigurationProfile: string;
    forticlientWf: string;
    forticlientWfProfile: string;
}

export interface EndpointcontrolProfileForticlientIosSettingsClientVpnSetting {
    authMethod: string;
    name: string;
    presharedKey?: string;
    remoteGw: string;
    sslvpnAccessPort: number;
    sslvpnRequireCertificate: string;
    type: string;
    vpnConfigurationContent?: string;
    vpnConfigurationName: string;
}

export interface EndpointcontrolProfileForticlientWinmacSettings {
    avRealtimeProtection: string;
    avSignatureUpToDate: string;
    forticlientApplicationFirewall: string;
    forticlientApplicationFirewallList: string;
    forticlientAv: string;
    forticlientEmsCompliance: string;
    forticlientEmsComplianceAction: string;
    forticlientEmsEntries?: outputs.EndpointcontrolProfileForticlientWinmacSettingsForticlientEmsEntry[];
    forticlientLinuxVer: string;
    forticlientLogUpload: string;
    forticlientLogUploadLevel: string;
    forticlientLogUploadServer: string;
    forticlientMacVer: string;
    forticlientMinimumSoftwareVersion: string;
    forticlientOperatingSystems?: outputs.EndpointcontrolProfileForticlientWinmacSettingsForticlientOperatingSystem[];
    forticlientOwnFiles?: outputs.EndpointcontrolProfileForticlientWinmacSettingsForticlientOwnFile[];
    forticlientRegistrationComplianceAction: string;
    forticlientRegistryEntries?: outputs.EndpointcontrolProfileForticlientWinmacSettingsForticlientRegistryEntry[];
    forticlientRunningApps?: outputs.EndpointcontrolProfileForticlientWinmacSettingsForticlientRunningApp[];
    forticlientSecurityPosture: string;
    forticlientSecurityPostureComplianceAction: string;
    forticlientSystemCompliance: string;
    forticlientSystemComplianceAction: string;
    forticlientVulnScan: string;
    forticlientVulnScanComplianceAction: string;
    forticlientVulnScanEnforce: string;
    forticlientVulnScanEnforceGrace: number;
    forticlientVulnScanExempt: string;
    forticlientWf: string;
    forticlientWfProfile: string;
    forticlientWinVer: string;
    osAvSoftwareInstalled: string;
    sandboxAddress: string;
    sandboxAnalysis: string;
}

export interface EndpointcontrolProfileForticlientWinmacSettingsForticlientEmsEntry {
    name: string;
}

export interface EndpointcontrolProfileForticlientWinmacSettingsForticlientOperatingSystem {
    id: number;
    osName: string;
    osType: string;
}

export interface EndpointcontrolProfileForticlientWinmacSettingsForticlientOwnFile {
    file: string;
    id: number;
}

export interface EndpointcontrolProfileForticlientWinmacSettingsForticlientRegistryEntry {
    id: number;
    registryEntry: string;
}

export interface EndpointcontrolProfileForticlientWinmacSettingsForticlientRunningApp {
    appName: string;
    appSha256Signature: string;
    appSha256Signature2: string;
    appSha256Signature3: string;
    appSha256Signature4: string;
    applicationCheckRule: string;
    id: number;
    processName: string;
    processName2: string;
    processName3: string;
    processName4: string;
}

export interface EndpointcontrolProfileOnNetAddr {
    name: string;
}

export interface EndpointcontrolProfileSrcAddr {
    name: string;
}

export interface EndpointcontrolProfileUser {
    name: string;
}

export interface EndpointcontrolProfileUserGroup {
    name: string;
}

export interface ExtendercontrollerExtender1ControllerReport {
    interval: number;
    signalThreshold: number;
    status: string;
}

export interface ExtendercontrollerExtender1Modem1 {
    autoSwitch?: outputs.ExtendercontrollerExtender1Modem1AutoSwitch;
    connStatus: number;
    defaultSim: string;
    gps: string;
    ifname: string;
    preferredCarrier: string;
    redundantIntf: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCode?: string;
    sim2Pin: string;
    sim2PinCode?: string;
}

export interface ExtendercontrollerExtender1Modem1AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBack: string;
    switchBackTime: string;
    switchBackTimer: number;
}

export interface ExtendercontrollerExtender1Modem2 {
    autoSwitch?: outputs.ExtendercontrollerExtender1Modem2AutoSwitch;
    connStatus: number;
    defaultSim: string;
    gps: string;
    ifname: string;
    preferredCarrier: string;
    redundantIntf: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCode?: string;
    sim2Pin: string;
    sim2PinCode?: string;
}

export interface ExtendercontrollerExtender1Modem2AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBack: string;
    switchBackTime: string;
    switchBackTimer: number;
}

export interface ExtendercontrollerExtenderControllerReport {
    interval: number;
    signalThreshold: number;
    status: string;
}

export interface ExtendercontrollerExtenderModem1 {
    autoSwitch?: outputs.ExtendercontrollerExtenderModem1AutoSwitch;
    connStatus: number;
    defaultSim: string;
    gps: string;
    ifname: string;
    preferredCarrier: string;
    redundantIntf: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCode?: string;
    sim2Pin: string;
    sim2PinCode?: string;
}

export interface ExtendercontrollerExtenderModem1AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBack: string;
    switchBackTime: string;
    switchBackTimer: number;
}

export interface ExtendercontrollerExtenderModem2 {
    autoSwitch?: outputs.ExtendercontrollerExtenderModem2AutoSwitch;
    connStatus: number;
    defaultSim: string;
    gps: string;
    ifname: string;
    preferredCarrier: string;
    redundantIntf: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCode?: string;
    sim2Pin: string;
    sim2PinCode?: string;
}

export interface ExtendercontrollerExtenderModem2AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBack: string;
    switchBackTime: string;
    switchBackTimer: number;
}

export interface ExtendercontrollerExtenderWanExtension {
    modem1Extension: string;
    modem2Extension: string;
}

export interface ExtendercontrollerExtenderprofileCellular {
    controllerReport?: outputs.ExtendercontrollerExtenderprofileCellularControllerReport;
    dataplans?: outputs.ExtendercontrollerExtenderprofileCellularDataplan[];
    modem1?: outputs.ExtendercontrollerExtenderprofileCellularModem1;
    modem2?: outputs.ExtendercontrollerExtenderprofileCellularModem2;
    smsNotification?: outputs.ExtendercontrollerExtenderprofileCellularSmsNotification;
}

export interface ExtendercontrollerExtenderprofileCellularControllerReport {
    interval: number;
    signalThreshold: number;
    status: string;
}

export interface ExtendercontrollerExtenderprofileCellularDataplan {
    name: string;
}

export interface ExtendercontrollerExtenderprofileCellularModem1 {
    autoSwitch?: outputs.ExtendercontrollerExtenderprofileCellularModem1AutoSwitch;
    connStatus: number;
    defaultSim: string;
    gps: string;
    preferredCarrier: string;
    redundantIntf: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCode?: string;
    sim2Pin: string;
    sim2PinCode?: string;
}

export interface ExtendercontrollerExtenderprofileCellularModem1AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBack: string;
    switchBackTime: string;
    switchBackTimer: number;
}

export interface ExtendercontrollerExtenderprofileCellularModem2 {
    autoSwitch?: outputs.ExtendercontrollerExtenderprofileCellularModem2AutoSwitch;
    connStatus: number;
    defaultSim: string;
    gps: string;
    preferredCarrier: string;
    redundantIntf: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCode?: string;
    sim2Pin: string;
    sim2PinCode?: string;
}

export interface ExtendercontrollerExtenderprofileCellularModem2AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBack: string;
    switchBackTime: string;
    switchBackTimer: number;
}

export interface ExtendercontrollerExtenderprofileCellularSmsNotification {
    alert?: outputs.ExtendercontrollerExtenderprofileCellularSmsNotificationAlert;
    receivers?: outputs.ExtendercontrollerExtenderprofileCellularSmsNotificationReceiver[];
    status: string;
}

export interface ExtendercontrollerExtenderprofileCellularSmsNotificationAlert {
    dataExhausted: string;
    fgtBackupModeSwitch: string;
    lowSignalStrength: string;
    modeSwitch: string;
    osImageFallback: string;
    sessionDisconnect: string;
    systemReboot: string;
}

export interface ExtendercontrollerExtenderprofileCellularSmsNotificationReceiver {
    alert: string;
    name: string;
    phoneNumber: string;
    status: string;
}

export interface ExtendercontrollerExtenderprofileLanExtension {
    backhaulInterface: string;
    backhaulIp: string;
    backhauls?: outputs.ExtendercontrollerExtenderprofileLanExtensionBackhaul[];
    ipsecTunnel: string;
    linkLoadbalance: string;
}

export interface ExtendercontrollerExtenderprofileLanExtensionBackhaul {
    name: string;
    port: string;
    role: string;
    weight: number;
}

export interface ExtensioncontrollerExtenderWanExtension {
    modem1Extension: string;
    modem2Extension: string;
}

export interface ExtensioncontrollerExtenderprofileCellular {
    controllerReport?: outputs.ExtensioncontrollerExtenderprofileCellularControllerReport;
    dataplans?: outputs.ExtensioncontrollerExtenderprofileCellularDataplan[];
    modem1?: outputs.ExtensioncontrollerExtenderprofileCellularModem1;
    modem2?: outputs.ExtensioncontrollerExtenderprofileCellularModem2;
    smsNotification?: outputs.ExtensioncontrollerExtenderprofileCellularSmsNotification;
}

export interface ExtensioncontrollerExtenderprofileCellularControllerReport {
    interval: number;
    signalThreshold: number;
    status: string;
}

export interface ExtensioncontrollerExtenderprofileCellularDataplan {
    name: string;
}

export interface ExtensioncontrollerExtenderprofileCellularModem1 {
    autoSwitch?: outputs.ExtensioncontrollerExtenderprofileCellularModem1AutoSwitch;
    connStatus: number;
    defaultSim: string;
    gps: string;
    preferredCarrier: string;
    redundantIntf: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCode?: string;
    sim2Pin: string;
    sim2PinCode?: string;
}

export interface ExtensioncontrollerExtenderprofileCellularModem1AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBack: string;
    switchBackTime: string;
    switchBackTimer: number;
}

export interface ExtensioncontrollerExtenderprofileCellularModem2 {
    autoSwitch?: outputs.ExtensioncontrollerExtenderprofileCellularModem2AutoSwitch;
    connStatus: number;
    defaultSim: string;
    gps: string;
    preferredCarrier: string;
    redundantIntf: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCode?: string;
    sim2Pin: string;
    sim2PinCode?: string;
}

export interface ExtensioncontrollerExtenderprofileCellularModem2AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBack: string;
    switchBackTime: string;
    switchBackTimer: number;
}

export interface ExtensioncontrollerExtenderprofileCellularSmsNotification {
    alert?: outputs.ExtensioncontrollerExtenderprofileCellularSmsNotificationAlert;
    receivers?: outputs.ExtensioncontrollerExtenderprofileCellularSmsNotificationReceiver[];
    status: string;
}

export interface ExtensioncontrollerExtenderprofileCellularSmsNotificationAlert {
    dataExhausted: string;
    fgtBackupModeSwitch: string;
    lowSignalStrength: string;
    modeSwitch: string;
    osImageFallback: string;
    sessionDisconnect: string;
    systemReboot: string;
}

export interface ExtensioncontrollerExtenderprofileCellularSmsNotificationReceiver {
    alert: string;
    name: string;
    phoneNumber: string;
    status: string;
}

export interface ExtensioncontrollerExtenderprofileLanExtension {
    backhaulInterface: string;
    backhaulIp: string;
    backhauls?: outputs.ExtensioncontrollerExtenderprofileLanExtensionBackhaul[];
    ipsecTunnel: string;
    linkLoadbalance: string;
}

export interface ExtensioncontrollerExtenderprofileLanExtensionBackhaul {
    name: string;
    port: string;
    role: string;
    weight: number;
}

export interface ExtensioncontrollerExtenderprofileWifi {
    country: string;
    radio1?: outputs.ExtensioncontrollerExtenderprofileWifiRadio1;
    radio2?: outputs.ExtensioncontrollerExtenderprofileWifiRadio2;
}

export interface ExtensioncontrollerExtenderprofileWifiRadio1 {
    band: string;
    bandwidth: string;
    beaconInterval: number;
    bssColor: number;
    bssColorMode: string;
    channel: string;
    extensionChannel: string;
    guardInterval: string;
    lanExtVap: string;
    localVaps?: outputs.ExtensioncontrollerExtenderprofileWifiRadio1LocalVap[];
    maxClients: number;
    mode: string;
    n80211d: string;
    operatingStandard: string;
    powerLevel: number;
    status: string;
}

export interface ExtensioncontrollerExtenderprofileWifiRadio1LocalVap {
    name: string;
}

export interface ExtensioncontrollerExtenderprofileWifiRadio2 {
    band: string;
    bandwidth: string;
    beaconInterval: number;
    bssColor: number;
    bssColorMode: string;
    channel: string;
    extensionChannel: string;
    guardInterval: string;
    lanExtVap: string;
    localVaps?: outputs.ExtensioncontrollerExtenderprofileWifiRadio2LocalVap[];
    maxClients: number;
    mode: string;
    n80211d: string;
    operatingStandard: string;
    powerLevel: number;
    status: string;
}

export interface ExtensioncontrollerExtenderprofileWifiRadio2LocalVap {
    name: string;
}

export interface ExtensioncontrollerFortigateprofileLanExtension {
    backhaulInterface: string;
    backhaulIp: string;
    ipsecTunnel: string;
}

export interface FilefilterProfileRule {
    action: string;
    comment?: string;
    direction: string;
    fileTypes?: outputs.FilefilterProfileRuleFileType[];
    name: string;
    passwordProtected: string;
    protocol: string;
}

export interface FilefilterProfileRuleFileType {
    name: string;
}

export interface FirewallAccessproxy6ApiGateway {
    applications?: outputs.FirewallAccessproxy6ApiGatewayApplication[];
    h2Support: string;
    h3Support: string;
    httpCookieAge: number;
    httpCookieDomain: string;
    httpCookieDomainFromHost: string;
    httpCookieGeneration: number;
    httpCookiePath: string;
    httpCookieShare: string;
    httpsCookieSecure: string;
    id: number;
    ldbMethod: string;
    persistence: string;
    quic?: outputs.FirewallAccessproxy6ApiGatewayQuic;
    realservers?: outputs.FirewallAccessproxy6ApiGatewayRealserver[];
    samlRedirect: string;
    samlServer: string;
    service: string;
    sslAlgorithm: string;
    sslCipherSuites?: outputs.FirewallAccessproxy6ApiGatewaySslCipherSuite[];
    sslDhBits: string;
    sslMaxVersion: string;
    sslMinVersion: string;
    sslRenegotiation: string;
    sslVpnWebPortal: string;
    urlMap: string;
    urlMapType: string;
    virtualHost: string;
}

export interface FirewallAccessproxy6ApiGateway6 {
    applications?: outputs.FirewallAccessproxy6ApiGateway6Application[];
    h2Support: string;
    h3Support: string;
    httpCookieAge: number;
    httpCookieDomain: string;
    httpCookieDomainFromHost: string;
    httpCookieGeneration: number;
    httpCookiePath: string;
    httpCookieShare: string;
    httpsCookieSecure: string;
    id: number;
    ldbMethod: string;
    persistence: string;
    quic?: outputs.FirewallAccessproxy6ApiGateway6Quic;
    realservers?: outputs.FirewallAccessproxy6ApiGateway6Realserver[];
    samlRedirect: string;
    samlServer: string;
    service: string;
    sslAlgorithm: string;
    sslCipherSuites?: outputs.FirewallAccessproxy6ApiGateway6SslCipherSuite[];
    sslDhBits: string;
    sslMaxVersion: string;
    sslMinVersion: string;
    sslRenegotiation: string;
    sslVpnWebPortal: string;
    urlMap: string;
    urlMapType: string;
    virtualHost: string;
}

export interface FirewallAccessproxy6ApiGateway6Application {
    name: string;
}

export interface FirewallAccessproxy6ApiGateway6Quic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface FirewallAccessproxy6ApiGateway6Realserver {
    addrType: string;
    address: string;
    domain: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost: string;
    id: number;
    ip: string;
    mappedport: string;
    port: number;
    sshClientCert: string;
    sshHostKeyValidation: string;
    sshHostKeys?: outputs.FirewallAccessproxy6ApiGateway6RealserverSshHostKey[];
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface FirewallAccessproxy6ApiGateway6RealserverSshHostKey {
    name: string;
}

export interface FirewallAccessproxy6ApiGateway6SslCipherSuite {
    cipher: string;
    priority: number;
    versions: string;
}

export interface FirewallAccessproxy6ApiGatewayApplication {
    name: string;
}

export interface FirewallAccessproxy6ApiGatewayQuic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface FirewallAccessproxy6ApiGatewayRealserver {
    addrType: string;
    address: string;
    domain: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost: string;
    id: number;
    ip: string;
    mappedport: string;
    port: number;
    sshClientCert: string;
    sshHostKeyValidation: string;
    sshHostKeys?: outputs.FirewallAccessproxy6ApiGatewayRealserverSshHostKey[];
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface FirewallAccessproxy6ApiGatewayRealserverSshHostKey {
    name: string;
}

export interface FirewallAccessproxy6ApiGatewaySslCipherSuite {
    cipher: string;
    priority: number;
    versions: string;
}

export interface FirewallAccessproxyApiGateway {
    applications?: outputs.FirewallAccessproxyApiGatewayApplication[];
    h2Support: string;
    h3Support: string;
    httpCookieAge: number;
    httpCookieDomain: string;
    httpCookieDomainFromHost: string;
    httpCookieGeneration: number;
    httpCookiePath: string;
    httpCookieShare: string;
    httpsCookieSecure: string;
    id: number;
    ldbMethod: string;
    persistence: string;
    quic?: outputs.FirewallAccessproxyApiGatewayQuic;
    realservers?: outputs.FirewallAccessproxyApiGatewayRealserver[];
    samlRedirect: string;
    samlServer: string;
    service: string;
    sslAlgorithm: string;
    sslCipherSuites?: outputs.FirewallAccessproxyApiGatewaySslCipherSuite[];
    sslDhBits: string;
    sslMaxVersion: string;
    sslMinVersion: string;
    sslRenegotiation: string;
    sslVpnWebPortal: string;
    urlMap: string;
    urlMapType: string;
    virtualHost: string;
}

export interface FirewallAccessproxyApiGateway6 {
    applications?: outputs.FirewallAccessproxyApiGateway6Application[];
    h2Support: string;
    h3Support: string;
    httpCookieAge: number;
    httpCookieDomain: string;
    httpCookieDomainFromHost: string;
    httpCookieGeneration: number;
    httpCookiePath: string;
    httpCookieShare: string;
    httpsCookieSecure: string;
    id: number;
    ldbMethod: string;
    persistence: string;
    quic?: outputs.FirewallAccessproxyApiGateway6Quic;
    realservers?: outputs.FirewallAccessproxyApiGateway6Realserver[];
    samlRedirect: string;
    samlServer: string;
    service: string;
    sslAlgorithm: string;
    sslCipherSuites?: outputs.FirewallAccessproxyApiGateway6SslCipherSuite[];
    sslDhBits: string;
    sslMaxVersion: string;
    sslMinVersion: string;
    sslRenegotiation: string;
    sslVpnWebPortal: string;
    urlMap: string;
    urlMapType: string;
    virtualHost: string;
}

export interface FirewallAccessproxyApiGateway6Application {
    name: string;
}

export interface FirewallAccessproxyApiGateway6Quic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface FirewallAccessproxyApiGateway6Realserver {
    addrType: string;
    address: string;
    domain: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost: string;
    id: number;
    ip: string;
    mappedport: string;
    port: number;
    sshClientCert: string;
    sshHostKeyValidation: string;
    sshHostKeys?: outputs.FirewallAccessproxyApiGateway6RealserverSshHostKey[];
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface FirewallAccessproxyApiGateway6RealserverSshHostKey {
    name: string;
}

export interface FirewallAccessproxyApiGateway6SslCipherSuite {
    cipher: string;
    priority: number;
    versions: string;
}

export interface FirewallAccessproxyApiGatewayApplication {
    name: string;
}

export interface FirewallAccessproxyApiGatewayQuic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface FirewallAccessproxyApiGatewayRealserver {
    addrType: string;
    address: string;
    domain: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost: string;
    id: number;
    ip: string;
    mappedport: string;
    port: number;
    sshClientCert: string;
    sshHostKeyValidation: string;
    sshHostKeys?: outputs.FirewallAccessproxyApiGatewayRealserverSshHostKey[];
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface FirewallAccessproxyApiGatewayRealserverSshHostKey {
    name: string;
}

export interface FirewallAccessproxyApiGatewaySslCipherSuite {
    cipher: string;
    priority: number;
    versions: string;
}

export interface FirewallAccessproxysshclientcertCertExtension {
    critical: string;
    data: string;
    name: string;
    type: string;
}

export interface FirewallAddress6List {
    ip: string;
}

export interface FirewallAddress6Macaddr {
    macaddr: string;
}

export interface FirewallAddress6SubnetSegment {
    name: string;
    type: string;
    value: string;
}

export interface FirewallAddress6Tagging {
    category: string;
    name: string;
    tags?: outputs.FirewallAddress6TaggingTag[];
}

export interface FirewallAddress6TaggingTag {
    name: string;
}

export interface FirewallAddress6templateSubnetSegment {
    bits: number;
    exclusive: string;
    id: number;
    name: string;
    values?: outputs.FirewallAddress6templateSubnetSegmentValue[];
}

export interface FirewallAddress6templateSubnetSegmentValue {
    name: string;
    value: string;
}

export interface FirewallAddressFssoGroup {
    name: string;
}

export interface FirewallAddressList {
    ip: string;
}

export interface FirewallAddressMacaddr {
    macaddr: string;
}

export interface FirewallAddressTagging {
    category: string;
    name: string;
    tags?: outputs.FirewallAddressTaggingTag[];
}

export interface FirewallAddressTaggingTag {
    name: string;
}

export interface FirewallAddrgrp6ExcludeMember {
    name: string;
}

export interface FirewallAddrgrp6Member {
    name: string;
}

export interface FirewallAddrgrp6Tagging {
    category: string;
    name: string;
    tags?: outputs.FirewallAddrgrp6TaggingTag[];
}

export interface FirewallAddrgrp6TaggingTag {
    name: string;
}

export interface FirewallAddrgrpExcludeMember {
    name: string;
}

export interface FirewallAddrgrpMember {
    name: string;
}

export interface FirewallAddrgrpTagging {
    category: string;
    name: string;
    tags?: outputs.FirewallAddrgrpTaggingTag[];
}

export interface FirewallAddrgrpTaggingTag {
    name: string;
}

export interface FirewallAuthportalGroup {
    name: string;
}

export interface FirewallCentralsnatmapDstAddr {
    name: string;
}

export interface FirewallCentralsnatmapDstAddr6 {
    name: string;
}

export interface FirewallCentralsnatmapDstintf {
    name: string;
}

export interface FirewallCentralsnatmapNatIppool {
    name: string;
}

export interface FirewallCentralsnatmapNatIppool6 {
    name: string;
}

export interface FirewallCentralsnatmapOrigAddr {
    name: string;
}

export interface FirewallCentralsnatmapOrigAddr6 {
    name: string;
}

export interface FirewallCentralsnatmapSortStatePolicyList {
    policyid: string;
}

export interface FirewallCentralsnatmapSrcintf {
    name: string;
}

export interface FirewallCountryRegion {
    id: number;
}

export interface FirewallDecryptedtrafficmirrorInterface {
    name: string;
}

export interface FirewallDoSpolicy6Anomaly {
    action: string;
    log: string;
    name: string;
    quarantine: string;
    quarantineExpiry: string;
    quarantineLog: string;
    status: string;
    threshold: number;
    thresholddefault: number;
}

export interface FirewallDoSpolicy6Dstaddr {
    name: string;
}

export interface FirewallDoSpolicy6Service {
    name: string;
}

export interface FirewallDoSpolicy6Srcaddr {
    name: string;
}

export interface FirewallDoSpolicyAnomaly {
    action: string;
    log: string;
    name: string;
    quarantine: string;
    quarantineExpiry: string;
    quarantineLog: string;
    status: string;
    threshold: number;
    thresholddefault: number;
}

export interface FirewallDoSpolicyDstaddr {
    name: string;
}

export interface FirewallDoSpolicyService {
    name: string;
}

export interface FirewallDoSpolicySrcaddr {
    name: string;
}

export interface FirewallIdentitybasedrouteRule {
    device: string;
    gateway: string;
    groups?: outputs.FirewallIdentitybasedrouteRuleGroup[];
    id: number;
}

export interface FirewallIdentitybasedrouteRuleGroup {
    name: string;
}

export interface FirewallInterfacepolicy6Dstaddr6 {
    name: string;
}

export interface FirewallInterfacepolicy6Service6 {
    name: string;
}

export interface FirewallInterfacepolicy6Srcaddr6 {
    name: string;
}

export interface FirewallInterfacepolicyDstaddr {
    name: string;
}

export interface FirewallInterfacepolicyService {
    name: string;
}

export interface FirewallInterfacepolicySrcaddr {
    name: string;
}

export interface FirewallInternetserviceadditionEntry {
    addrMode: string;
    id: number;
    portRanges?: outputs.FirewallInternetserviceadditionEntryPortRange[];
    protocol: number;
}

export interface FirewallInternetserviceadditionEntryPortRange {
    endPort: number;
    id: number;
    startPort: number;
}

export interface FirewallInternetservicecustomEntry {
    addrMode: string;
    dst6s?: outputs.FirewallInternetservicecustomEntryDst6[];
    dsts?: outputs.FirewallInternetservicecustomEntryDst[];
    id: number;
    portRanges?: outputs.FirewallInternetservicecustomEntryPortRange[];
    protocol: number;
}

export interface FirewallInternetservicecustomEntryDst {
    name: string;
}

export interface FirewallInternetservicecustomEntryDst6 {
    name: string;
}

export interface FirewallInternetservicecustomEntryPortRange {
    endPort: number;
    id: number;
    startPort: number;
}

export interface FirewallInternetservicecustomgroupMember {
    name: string;
}

export interface FirewallInternetservicedefinitionEntry {
    categoryId: number;
    name: string;
    port: number;
    portRanges?: outputs.FirewallInternetservicedefinitionEntryPortRange[];
    protocol: number;
    seqNum: number;
}

export interface FirewallInternetservicedefinitionEntryPortRange {
    endPort: number;
    id: number;
    startPort: number;
}

export interface FirewallInternetserviceextensionDisableEntry {
    addrMode: string;
    id: number;
    ip6Ranges?: outputs.FirewallInternetserviceextensionDisableEntryIp6Range[];
    ipRanges?: outputs.FirewallInternetserviceextensionDisableEntryIpRange[];
    port: number;
    portRanges?: outputs.FirewallInternetserviceextensionDisableEntryPortRange[];
    protocol: number;
}

export interface FirewallInternetserviceextensionDisableEntryIp6Range {
    endIp6: string;
    id: number;
    startIp6: string;
}

export interface FirewallInternetserviceextensionDisableEntryIpRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface FirewallInternetserviceextensionDisableEntryPortRange {
    endPort: number;
    id: number;
    startPort: number;
}

export interface FirewallInternetserviceextensionEntry {
    addrMode: string;
    dst6s?: outputs.FirewallInternetserviceextensionEntryDst6[];
    dsts?: outputs.FirewallInternetserviceextensionEntryDst[];
    id: number;
    portRanges?: outputs.FirewallInternetserviceextensionEntryPortRange[];
    protocol: number;
}

export interface FirewallInternetserviceextensionEntryDst {
    name: string;
}

export interface FirewallInternetserviceextensionEntryDst6 {
    name: string;
}

export interface FirewallInternetserviceextensionEntryPortRange {
    endPort: number;
    id: number;
    startPort: number;
}

export interface FirewallInternetservicegroupMember {
    id: number;
    name: string;
}

export interface FirewallInternetservicesubappSubApp {
    id: number;
}

export interface FirewallLocalinpolicy6Dstaddr {
    name: string;
}

export interface FirewallLocalinpolicy6InternetService6SrcCustom {
    name: string;
}

export interface FirewallLocalinpolicy6InternetService6SrcCustomGroup {
    name: string;
}

export interface FirewallLocalinpolicy6InternetService6SrcGroup {
    name: string;
}

export interface FirewallLocalinpolicy6InternetService6SrcName {
    name: string;
}

export interface FirewallLocalinpolicy6IntfBlock {
    name: string;
}

export interface FirewallLocalinpolicy6Service {
    name: string;
}

export interface FirewallLocalinpolicy6Srcaddr {
    name: string;
}

export interface FirewallLocalinpolicyDstaddr {
    name: string;
}

export interface FirewallLocalinpolicyInternetServiceSrcCustom {
    name: string;
}

export interface FirewallLocalinpolicyInternetServiceSrcCustomGroup {
    name: string;
}

export interface FirewallLocalinpolicyInternetServiceSrcGroup {
    name: string;
}

export interface FirewallLocalinpolicyInternetServiceSrcName {
    name: string;
}

export interface FirewallLocalinpolicyIntfBlock {
    name: string;
}

export interface FirewallLocalinpolicyService {
    name: string;
}

export interface FirewallLocalinpolicySrcaddr {
    name: string;
}

export interface FirewallMulticastaddress6Tagging {
    category: string;
    name: string;
    tags?: outputs.FirewallMulticastaddress6TaggingTag[];
}

export interface FirewallMulticastaddress6TaggingTag {
    name: string;
}

export interface FirewallMulticastaddressTagging {
    category: string;
    name: string;
    tags?: outputs.FirewallMulticastaddressTaggingTag[];
}

export interface FirewallMulticastaddressTaggingTag {
    name: string;
}

export interface FirewallMulticastpolicy6Dstaddr {
    name: string;
}

export interface FirewallMulticastpolicy6Srcaddr {
    name: string;
}

export interface FirewallMulticastpolicyDstaddr {
    name: string;
}

export interface FirewallMulticastpolicySrcaddr {
    name: string;
}

export interface FirewallOndemandsnifferHost {
    host: string;
}

export interface FirewallOndemandsnifferPort {
    port: number;
}

export interface FirewallOndemandsnifferProtocol {
    protocol: number;
}

export interface FirewallPolicy46Dstaddr {
    name: string;
}

export interface FirewallPolicy46Poolname {
    name: string;
}

export interface FirewallPolicy46Service {
    name: string;
}

export interface FirewallPolicy46Srcaddr {
    name: string;
}

export interface FirewallPolicy64Dstaddr {
    name: string;
}

export interface FirewallPolicy64Poolname {
    name: string;
}

export interface FirewallPolicy64Service {
    name: string;
}

export interface FirewallPolicy64Srcaddr {
    name: string;
}

export interface FirewallPolicy6AppCategory {
    id: number;
}

export interface FirewallPolicy6AppGroup {
    name: string;
}

export interface FirewallPolicy6Application {
    id: number;
}

export interface FirewallPolicy6CustomLogField {
    fieldId: string;
}

export interface FirewallPolicy6Device {
    name: string;
}

export interface FirewallPolicy6Dstaddr {
    name: string;
}

export interface FirewallPolicy6Dstintf {
    name: string;
}

export interface FirewallPolicy6FssoGroup {
    name: string;
}

export interface FirewallPolicy6Group {
    name: string;
}

export interface FirewallPolicy6Poolname {
    name: string;
}

export interface FirewallPolicy6Service {
    name: string;
}

export interface FirewallPolicy6Srcaddr {
    name: string;
}

export interface FirewallPolicy6Srcintf {
    name: string;
}

export interface FirewallPolicy6SslMirrorIntf {
    name: string;
}

export interface FirewallPolicy6UrlCategory {
    id: number;
}

export interface FirewallPolicy6User {
    name: string;
}

export interface FirewallPolicyAppCategory {
    id: number;
}

export interface FirewallPolicyAppGroup {
    name: string;
}

export interface FirewallPolicyApplication {
    id: number;
}

export interface FirewallPolicyCustomLogField {
    fieldId: string;
}

export interface FirewallPolicyDevice {
    name: string;
}

export interface FirewallPolicyDstaddr {
    name: string;
}

export interface FirewallPolicyDstaddr6 {
    name: string;
}

export interface FirewallPolicyDstintf {
    name: string;
}

export interface FirewallPolicyFssoGroup {
    name: string;
}

export interface FirewallPolicyGroup {
    name: string;
}

export interface FirewallPolicyInternetService6Custom {
    name: string;
}

export interface FirewallPolicyInternetService6CustomGroup {
    name: string;
}

export interface FirewallPolicyInternetService6Group {
    name: string;
}

export interface FirewallPolicyInternetService6Name {
    name: string;
}

export interface FirewallPolicyInternetService6SrcCustom {
    name: string;
}

export interface FirewallPolicyInternetService6SrcCustomGroup {
    name: string;
}

export interface FirewallPolicyInternetService6SrcGroup {
    name: string;
}

export interface FirewallPolicyInternetService6SrcName {
    name: string;
}

export interface FirewallPolicyInternetServiceCustom {
    name: string;
}

export interface FirewallPolicyInternetServiceCustomGroup {
    name: string;
}

export interface FirewallPolicyInternetServiceGroup {
    name: string;
}

export interface FirewallPolicyInternetServiceId {
    id: number;
}

export interface FirewallPolicyInternetServiceName {
    name: string;
}

export interface FirewallPolicyInternetServiceSrcCustom {
    name: string;
}

export interface FirewallPolicyInternetServiceSrcCustomGroup {
    name: string;
}

export interface FirewallPolicyInternetServiceSrcGroup {
    name: string;
}

export interface FirewallPolicyInternetServiceSrcId {
    id: number;
}

export interface FirewallPolicyInternetServiceSrcName {
    name: string;
}

export interface FirewallPolicyNetworkServiceDynamic {
    name: string;
}

export interface FirewallPolicyNetworkServiceSrcDynamic {
    name: string;
}

export interface FirewallPolicyNtlmEnabledBrowser {
    userAgentString: string;
}

export interface FirewallPolicyPcpPoolname {
    name: string;
}

export interface FirewallPolicyPoolname {
    name: string;
}

export interface FirewallPolicyPoolname6 {
    name: string;
}

export interface FirewallPolicyRtpAddr {
    name: string;
}

export interface FirewallPolicyService {
    name: string;
}

export interface FirewallPolicySgt {
    id: number;
}

export interface FirewallPolicySortStatePolicyList {
    action: string;
    name: string;
    policyid: string;
}

export interface FirewallPolicySrcVendorMac {
    id: number;
}

export interface FirewallPolicySrcaddr {
    name: string;
}

export interface FirewallPolicySrcaddr6 {
    name: string;
}

export interface FirewallPolicySrcintf {
    name: string;
}

export interface FirewallPolicySslMirrorIntf {
    name: string;
}

export interface FirewallPolicyUrlCategory {
    id: number;
}

export interface FirewallPolicyUser {
    name: string;
}

export interface FirewallPolicyZtnaEmsTag {
    name: string;
}

export interface FirewallPolicyZtnaEmsTagSecondary {
    name: string;
}

export interface FirewallPolicyZtnaGeoTag {
    name: string;
}

export interface FirewallProfileprotocoloptionsCifs {
    domainController: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    scanBzip2: string;
    serverCredentialType: string;
    serverKeytabs?: outputs.FirewallProfileprotocoloptionsCifsServerKeytab[];
    status: string;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileprotocoloptionsCifsServerKeytab {
    keytab: string;
    principal: string;
}

export interface FirewallProfileprotocoloptionsDns {
    ports: number;
    status: string;
}

export interface FirewallProfileprotocoloptionsFtp {
    comfortAmount: number;
    comfortInterval: number;
    explicitFtpTls: string;
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    streamBasedUncompressedLimit: number;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileprotocoloptionsHttp {
    addressIpRating: string;
    blockPageStatusCode: number;
    comfortAmount: number;
    comfortInterval: number;
    fortinetBar: string;
    fortinetBarPort: number;
    h2c: string;
    httpPolicy: string;
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    postLang: string;
    proxyAfterTcpHandshake: string;
    rangeBlock: string;
    retryCount: number;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    streamBasedUncompressedLimit: number;
    streamingContentBypass: string;
    stripXForwardedFor: string;
    switchingProtocols: string;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    tunnelNonHttp: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
    unknownContentEncoding: string;
    unknownHttpVersion: string;
    verifyDnsForPolicyMatching: string;
}

export interface FirewallProfileprotocoloptionsImap {
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileprotocoloptionsMailSignature {
    signature: string;
    status: string;
}

export interface FirewallProfileprotocoloptionsMapi {
    options: string;
    oversizeLimit: number;
    ports: number;
    scanBzip2: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileprotocoloptionsNntp {
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileprotocoloptionsPop3 {
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileprotocoloptionsSmtp {
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    serverBusy: string;
    sslOffloaded: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface FirewallProfileprotocoloptionsSsh {
    comfortAmount: number;
    comfortInterval: number;
    options: string;
    oversizeLimit: number;
    scanBzip2: string;
    sslOffloaded: string;
    streamBasedUncompressedLimit: number;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface FirewallProxyaddressApplication {
    name: string;
}

export interface FirewallProxyaddressCategory {
    id: number;
}

export interface FirewallProxyaddressHeaderGroup {
    caseSensitivity: string;
    header: string;
    headerName: string;
    id: number;
}

export interface FirewallProxyaddressTagging {
    category: string;
    name: string;
    tags?: outputs.FirewallProxyaddressTaggingTag[];
}

export interface FirewallProxyaddressTaggingTag {
    name: string;
}

export interface FirewallProxyaddrgrpMember {
    name: string;
}

export interface FirewallProxyaddrgrpTagging {
    category: string;
    name: string;
    tags?: outputs.FirewallProxyaddrgrpTaggingTag[];
}

export interface FirewallProxyaddrgrpTaggingTag {
    name: string;
}

export interface FirewallProxypolicyAccessProxy {
    name: string;
}

export interface FirewallProxypolicyAccessProxy6 {
    name: string;
}

export interface FirewallProxypolicyDstaddr {
    name: string;
}

export interface FirewallProxypolicyDstaddr6 {
    name: string;
}

export interface FirewallProxypolicyDstintf {
    name: string;
}

export interface FirewallProxypolicyGroup {
    name: string;
}

export interface FirewallProxypolicyInternetService6Custom {
    name: string;
}

export interface FirewallProxypolicyInternetService6CustomGroup {
    name: string;
}

export interface FirewallProxypolicyInternetService6Group {
    name: string;
}

export interface FirewallProxypolicyInternetService6Name {
    name: string;
}

export interface FirewallProxypolicyInternetServiceCustom {
    name: string;
}

export interface FirewallProxypolicyInternetServiceCustomGroup {
    name: string;
}

export interface FirewallProxypolicyInternetServiceGroup {
    name: string;
}

export interface FirewallProxypolicyInternetServiceId {
    id: number;
}

export interface FirewallProxypolicyInternetServiceName {
    name: string;
}

export interface FirewallProxypolicyPoolname {
    name: string;
}

export interface FirewallProxypolicyService {
    name: string;
}

export interface FirewallProxypolicySortStatePolicyList {
    action: string;
    name: string;
    policyid: string;
}

export interface FirewallProxypolicySrcaddr {
    name: string;
}

export interface FirewallProxypolicySrcaddr6 {
    name: string;
}

export interface FirewallProxypolicySrcintf {
    name: string;
}

export interface FirewallProxypolicyUser {
    name: string;
}

export interface FirewallProxypolicyZtnaEmsTag {
    name: string;
}

export interface FirewallRegionCity {
    id: number;
}

export interface FirewallSecurityPolicyseqStatePolicyList {
    action: string;
    name: string;
    policyid: string;
}

export interface FirewallSecurityPolicysortStatePolicyList {
    action: string;
    name: string;
    policyid: string;
}

export interface FirewallSecuritypolicyAppCategory {
    id: number;
}

export interface FirewallSecuritypolicyAppGroup {
    name: string;
}

export interface FirewallSecuritypolicyApplication {
    id: number;
}

export interface FirewallSecuritypolicyDstaddr {
    name: string;
}

export interface FirewallSecuritypolicyDstaddr4 {
    name: string;
}

export interface FirewallSecuritypolicyDstaddr6 {
    name: string;
}

export interface FirewallSecuritypolicyDstintf {
    name: string;
}

export interface FirewallSecuritypolicyFssoGroup {
    name: string;
}

export interface FirewallSecuritypolicyGroup {
    name: string;
}

export interface FirewallSecuritypolicyInternetService6Custom {
    name: string;
}

export interface FirewallSecuritypolicyInternetService6CustomGroup {
    name: string;
}

export interface FirewallSecuritypolicyInternetService6Group {
    name: string;
}

export interface FirewallSecuritypolicyInternetService6Name {
    name: string;
}

export interface FirewallSecuritypolicyInternetService6SrcCustom {
    name: string;
}

export interface FirewallSecuritypolicyInternetService6SrcCustomGroup {
    name: string;
}

export interface FirewallSecuritypolicyInternetService6SrcGroup {
    name: string;
}

export interface FirewallSecuritypolicyInternetService6SrcName {
    name: string;
}

export interface FirewallSecuritypolicyInternetServiceCustom {
    name: string;
}

export interface FirewallSecuritypolicyInternetServiceCustomGroup {
    name: string;
}

export interface FirewallSecuritypolicyInternetServiceGroup {
    name: string;
}

export interface FirewallSecuritypolicyInternetServiceId {
    id: number;
}

export interface FirewallSecuritypolicyInternetServiceName {
    name: string;
}

export interface FirewallSecuritypolicyInternetServiceSrcCustom {
    name: string;
}

export interface FirewallSecuritypolicyInternetServiceSrcCustomGroup {
    name: string;
}

export interface FirewallSecuritypolicyInternetServiceSrcGroup {
    name: string;
}

export interface FirewallSecuritypolicyInternetServiceSrcId {
    id: number;
}

export interface FirewallSecuritypolicyInternetServiceSrcName {
    name: string;
}

export interface FirewallSecuritypolicyService {
    name: string;
}

export interface FirewallSecuritypolicySortStatePolicyList {
    action: string;
    name: string;
    policyid: string;
}

export interface FirewallSecuritypolicySrcaddr {
    name: string;
}

export interface FirewallSecuritypolicySrcaddr4 {
    name: string;
}

export interface FirewallSecuritypolicySrcaddr6 {
    name: string;
}

export interface FirewallSecuritypolicySrcintf {
    name: string;
}

export interface FirewallSecuritypolicyUrlCategory {
    id: number;
}

export interface FirewallSecuritypolicyUser {
    name: string;
}

export interface FirewallShapingpolicyAppCategory {
    id: number;
}

export interface FirewallShapingpolicyAppGroup {
    name: string;
}

export interface FirewallShapingpolicyApplication {
    id: number;
}

export interface FirewallShapingpolicyDstaddr {
    name: string;
}

export interface FirewallShapingpolicyDstaddr6 {
    name: string;
}

export interface FirewallShapingpolicyDstintf {
    name: string;
}

export interface FirewallShapingpolicyGroup {
    name: string;
}

export interface FirewallShapingpolicyInternetServiceCustom {
    name: string;
}

export interface FirewallShapingpolicyInternetServiceCustomGroup {
    name: string;
}

export interface FirewallShapingpolicyInternetServiceGroup {
    name: string;
}

export interface FirewallShapingpolicyInternetServiceId {
    id: number;
}

export interface FirewallShapingpolicyInternetServiceName {
    name: string;
}

export interface FirewallShapingpolicyInternetServiceSrcCustom {
    name: string;
}

export interface FirewallShapingpolicyInternetServiceSrcCustomGroup {
    name: string;
}

export interface FirewallShapingpolicyInternetServiceSrcGroup {
    name: string;
}

export interface FirewallShapingpolicyInternetServiceSrcId {
    id: number;
}

export interface FirewallShapingpolicyInternetServiceSrcName {
    name: string;
}

export interface FirewallShapingpolicyService {
    name: string;
}

export interface FirewallShapingpolicySrcaddr {
    name: string;
}

export interface FirewallShapingpolicySrcaddr6 {
    name: string;
}

export interface FirewallShapingpolicySrcintf {
    name: string;
}

export interface FirewallShapingpolicyUrlCategory {
    id: number;
}

export interface FirewallShapingpolicyUser {
    name: string;
}

export interface FirewallShapingprofileShapingEntry {
    burstInMsec: number;
    cburstInMsec: number;
    classId: number;
    guaranteedBandwidthPercentage: number;
    id: number;
    limit: number;
    max: number;
    maximumBandwidthPercentage: number;
    min: number;
    priority: string;
    redProbability: number;
}

export interface FirewallSnifferAnomaly {
    action: string;
    log: string;
    name: string;
    quarantine: string;
    quarantineExpiry: string;
    quarantineLog: string;
    status: string;
    threshold: number;
    thresholddefault: number;
}

export interface FirewallSnifferIpThreatfeed {
    name: string;
}

export interface FirewallSslsshprofileDot {
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertificate: string;
    expiredServerCert: string;
    proxyAfterTcpHandshake: string;
    quic: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedServerCert: string;
}

export interface FirewallSslsshprofileEchOuterSni {
    name: string;
    sni: string;
}

export interface FirewallSslsshprofileFtps {
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest: string;
    clientCertificate: string;
    expiredServerCert: string;
    invalidServerCert: string;
    minAllowedSslVersion: string;
    ports: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSsl: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedServerCert: string;
}

export interface FirewallSslsshprofileHttps {
    certProbeFailure: string;
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest: string;
    clientCertificate: string;
    encryptedClientHello: string;
    expiredServerCert: string;
    invalidServerCert: string;
    minAllowedSslVersion: string;
    ports: string;
    proxyAfterTcpHandshake: string;
    quic: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSsl: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedServerCert: string;
}

export interface FirewallSslsshprofileImaps {
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest: string;
    clientCertificate: string;
    expiredServerCert: string;
    invalidServerCert: string;
    ports: string;
    proxyAfterTcpHandshake: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSsl: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedServerCert: string;
}

export interface FirewallSslsshprofilePop3s {
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest: string;
    clientCertificate: string;
    expiredServerCert: string;
    invalidServerCert: string;
    ports: string;
    proxyAfterTcpHandshake: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSsl: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedServerCert: string;
}

export interface FirewallSslsshprofileSmtps {
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest: string;
    clientCertificate: string;
    expiredServerCert: string;
    invalidServerCert: string;
    ports: string;
    proxyAfterTcpHandshake: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSsl: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedServerCert: string;
}

export interface FirewallSslsshprofileSsh {
    inspectAll: string;
    ports: string;
    proxyAfterTcpHandshake: string;
    sshAlgorithm: string;
    sshPolicyCheck: string;
    sshTunPolicyCheck: string;
    status: string;
    unsupportedVersion: string;
}

export interface FirewallSslsshprofileSsl {
    certProbeFailure: string;
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest: string;
    clientCertificate: string;
    encryptedClientHello: string;
    expiredServerCert: string;
    inspectAll: string;
    invalidServerCert: string;
    minAllowedSslVersion: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    unsupportedSsl: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedServerCert: string;
}

export interface FirewallSslsshprofileSslExempt {
    address: string;
    address6: string;
    fortiguardCategory: number;
    id: number;
    regex: string;
    type: string;
    wildcardFqdn: string;
}

export interface FirewallSslsshprofileSslServer {
    ftpsClientCertRequest: string;
    ftpsClientCertificate: string;
    httpsClientCertRequest: string;
    httpsClientCertificate: string;
    id: number;
    imapsClientCertRequest: string;
    imapsClientCertificate: string;
    ip: string;
    pop3sClientCertRequest: string;
    pop3sClientCertificate: string;
    smtpsClientCertRequest: string;
    smtpsClientCertificate: string;
    sslOtherClientCertRequest: string;
    sslOtherClientCertificate: string;
}

export interface FirewallTtlpolicyService {
    name: string;
}

export interface FirewallTtlpolicySrcaddr {
    name: string;
}

export interface FirewallVip46Monitor {
    name: string;
}

export interface FirewallVip46Realserver {
    clientIp: string;
    healthcheck: string;
    holddownInterval: number;
    id: number;
    ip: string;
    maxConnections: number;
    monitor: string;
    port: number;
    status: string;
    weight: number;
}

export interface FirewallVip46SrcFilter {
    range: string;
}

export interface FirewallVip46SrcintfFilter {
    interfaceName: string;
}

export interface FirewallVip64Monitor {
    name: string;
}

export interface FirewallVip64Realserver {
    clientIp: string;
    healthcheck: string;
    holddownInterval: number;
    id: number;
    ip: string;
    maxConnections: number;
    monitor: string;
    port: number;
    status: string;
    weight: number;
}

export interface FirewallVip64SrcFilter {
    range: string;
}

export interface FirewallVip6Monitor {
    name: string;
}

export interface FirewallVip6Quic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface FirewallVip6Realserver {
    clientIp: string;
    healthcheck: string;
    holddownInterval: number;
    httpHost: string;
    id: number;
    ip: string;
    maxConnections: number;
    monitor: string;
    port: number;
    status: string;
    translateHost: string;
    weight: number;
}

export interface FirewallVip6SrcFilter {
    range: string;
}

export interface FirewallVip6SslCipherSuite {
    cipher: string;
    priority: number;
    versions: string;
}

export interface FirewallVip6SslServerCipherSuite {
    cipher: string;
    priority: number;
    versions: string;
}

export interface FirewallVipExtaddr {
    name: string;
}

export interface FirewallVipGslbPublicIp {
    index: number;
    ip: string;
}

export interface FirewallVipMappedip {
    range: string;
}

export interface FirewallVipMonitor {
    name: string;
}

export interface FirewallVipQuic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface FirewallVipRealserver {
    address: string;
    clientIp: string;
    healthcheck: string;
    holddownInterval: number;
    httpHost: string;
    id: number;
    ip: string;
    maxConnections: number;
    monitor: string;
    port: number;
    status: string;
    translateHost: string;
    type: string;
    weight: number;
}

export interface FirewallVipService {
    name: string;
}

export interface FirewallVipSrcFilter {
    range: string;
}

export interface FirewallVipSrcintfFilter {
    interfaceName: string;
}

export interface FirewallVipSslCipherSuite {
    cipher: string;
    priority: number;
    versions: string;
}

export interface FirewallVipSslServerCipherSuite {
    cipher: string;
    priority: number;
    versions: string;
}

export interface FirewallVipgrp46Member {
    name: string;
}

export interface FirewallVipgrp64Member {
    name: string;
}

export interface FirewallVipgrp6Member {
    name: string;
}

export interface FirewallVipgrpMember {
    name: string;
}

export interface FirewallconsolidatedPolicyAppCategory {
    id: number;
}

export interface FirewallconsolidatedPolicyAppGroup {
    name: string;
}

export interface FirewallconsolidatedPolicyApplication {
    id: number;
}

export interface FirewallconsolidatedPolicyDstaddr4 {
    name: string;
}

export interface FirewallconsolidatedPolicyDstaddr6 {
    name: string;
}

export interface FirewallconsolidatedPolicyDstintf {
    name: string;
}

export interface FirewallconsolidatedPolicyFssoGroup {
    name: string;
}

export interface FirewallconsolidatedPolicyGroup {
    name: string;
}

export interface FirewallconsolidatedPolicyInternetServiceCustom {
    name: string;
}

export interface FirewallconsolidatedPolicyInternetServiceCustomGroup {
    name: string;
}

export interface FirewallconsolidatedPolicyInternetServiceGroup {
    name: string;
}

export interface FirewallconsolidatedPolicyInternetServiceId {
    id: number;
}

export interface FirewallconsolidatedPolicyInternetServiceName {
    name: string;
}

export interface FirewallconsolidatedPolicyInternetServiceSrcCustom {
    name: string;
}

export interface FirewallconsolidatedPolicyInternetServiceSrcCustomGroup {
    name: string;
}

export interface FirewallconsolidatedPolicyInternetServiceSrcGroup {
    name: string;
}

export interface FirewallconsolidatedPolicyInternetServiceSrcId {
    id: number;
}

export interface FirewallconsolidatedPolicyInternetServiceSrcName {
    name: string;
}

export interface FirewallconsolidatedPolicyPoolname4 {
    name: string;
}

export interface FirewallconsolidatedPolicyPoolname6 {
    name: string;
}

export interface FirewallconsolidatedPolicyService {
    name: string;
}

export interface FirewallconsolidatedPolicySrcaddr4 {
    name: string;
}

export interface FirewallconsolidatedPolicySrcaddr6 {
    name: string;
}

export interface FirewallconsolidatedPolicySrcintf {
    name: string;
}

export interface FirewallconsolidatedPolicyUrlCategory {
    id: number;
}

export interface FirewallconsolidatedPolicyUser {
    name: string;
}

export interface FirewallscheduleGroupMember {
    name: string;
}

export interface FirewallserviceCustomAppCategory {
    id: number;
}

export interface FirewallserviceCustomApplication {
    id: number;
}

export interface FirewallserviceGroupMember {
    name: string;
}

export interface FirewallwildcardfqdnGroupMember {
    name: string;
}

export interface GetFirewallAddress6List {
    ip: string;
}

export interface GetFirewallAddress6Macaddr {
    macaddr: string;
}

export interface GetFirewallAddress6SubnetSegment {
    name: string;
    type: string;
    value: string;
}

export interface GetFirewallAddress6Tagging {
    category: string;
    name: string;
    tags: outputs.GetFirewallAddress6TaggingTag[];
}

export interface GetFirewallAddress6TaggingTag {
    name: string;
}

export interface GetFirewallAddress6templateSubnetSegment {
    bits: number;
    exclusive: string;
    id: number;
    name: string;
    values: outputs.GetFirewallAddress6templateSubnetSegmentValue[];
}

export interface GetFirewallAddress6templateSubnetSegmentValue {
    name: string;
    value: string;
}

export interface GetFirewallAddressFssoGroup {
    name: string;
}

export interface GetFirewallAddressList {
    ip: string;
}

export interface GetFirewallAddressMacaddr {
    macaddr: string;
}

export interface GetFirewallAddressTagging {
    category: string;
    name: string;
    tags: outputs.GetFirewallAddressTaggingTag[];
}

export interface GetFirewallAddressTaggingTag {
    name: string;
}

export interface GetFirewallAddrgrp6ExcludeMember {
    name: string;
}

export interface GetFirewallAddrgrp6Member {
    name: string;
}

export interface GetFirewallAddrgrp6Tagging {
    category: string;
    name: string;
    tags: outputs.GetFirewallAddrgrp6TaggingTag[];
}

export interface GetFirewallAddrgrp6TaggingTag {
    name: string;
}

export interface GetFirewallAddrgrpExcludeMember {
    name: string;
}

export interface GetFirewallAddrgrpMember {
    name: string;
}

export interface GetFirewallAddrgrpTagging {
    category: string;
    name: string;
    tags: outputs.GetFirewallAddrgrpTaggingTag[];
}

export interface GetFirewallAddrgrpTaggingTag {
    name: string;
}

export interface GetFirewallCentralsnatmapDstAddr {
    name: string;
}

export interface GetFirewallCentralsnatmapDstAddr6 {
    name: string;
}

export interface GetFirewallCentralsnatmapDstintf {
    name: string;
}

export interface GetFirewallCentralsnatmapNatIppool {
    name: string;
}

export interface GetFirewallCentralsnatmapNatIppool6 {
    name: string;
}

export interface GetFirewallCentralsnatmapOrigAddr {
    name: string;
}

export interface GetFirewallCentralsnatmapOrigAddr6 {
    name: string;
}

export interface GetFirewallCentralsnatmapSrcintf {
    name: string;
}

export interface GetFirewallDoSpolicy6Anomaly {
    action: string;
    log: string;
    name: string;
    quarantine: string;
    quarantineExpiry: string;
    quarantineLog: string;
    status: string;
    threshold: number;
    thresholddefault: number;
}

export interface GetFirewallDoSpolicy6Dstaddr {
    name: string;
}

export interface GetFirewallDoSpolicy6Service {
    name: string;
}

export interface GetFirewallDoSpolicy6Srcaddr {
    name: string;
}

export interface GetFirewallDoSpolicyAnomaly {
    action: string;
    log: string;
    name: string;
    quarantine: string;
    quarantineExpiry: string;
    quarantineLog: string;
    status: string;
    threshold: number;
    thresholddefault: number;
}

export interface GetFirewallDoSpolicyDstaddr {
    name: string;
}

export interface GetFirewallDoSpolicyService {
    name: string;
}

export interface GetFirewallDoSpolicySrcaddr {
    name: string;
}

export interface GetFirewallInternetservicecustomEntry {
    addrMode: string;
    dst6s: outputs.GetFirewallInternetservicecustomEntryDst6[];
    dsts: outputs.GetFirewallInternetservicecustomEntryDst[];
    id: number;
    portRanges: outputs.GetFirewallInternetservicecustomEntryPortRange[];
    protocol: number;
}

export interface GetFirewallInternetservicecustomEntryDst {
    name: string;
}

export interface GetFirewallInternetservicecustomEntryDst6 {
    name: string;
}

export interface GetFirewallInternetservicecustomEntryPortRange {
    endPort: number;
    id: number;
    startPort: number;
}

export interface GetFirewallInternetservicecustomgroupMember {
    name: string;
}

export interface GetFirewallInternetservicedefinitionEntry {
    categoryId: number;
    name: string;
    port: number;
    portRanges: outputs.GetFirewallInternetservicedefinitionEntryPortRange[];
    protocol: number;
    seqNum: number;
}

export interface GetFirewallInternetservicedefinitionEntryPortRange {
    endPort: number;
    id: number;
    startPort: number;
}

export interface GetFirewallInternetserviceextensionDisableEntry {
    addrMode: string;
    id: number;
    ip6Ranges: outputs.GetFirewallInternetserviceextensionDisableEntryIp6Range[];
    ipRanges: outputs.GetFirewallInternetserviceextensionDisableEntryIpRange[];
    port: number;
    portRanges: outputs.GetFirewallInternetserviceextensionDisableEntryPortRange[];
    protocol: number;
}

export interface GetFirewallInternetserviceextensionDisableEntryIp6Range {
    endIp6: string;
    id: number;
    startIp6: string;
}

export interface GetFirewallInternetserviceextensionDisableEntryIpRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface GetFirewallInternetserviceextensionDisableEntryPortRange {
    endPort: number;
    id: number;
    startPort: number;
}

export interface GetFirewallInternetserviceextensionEntry {
    addrMode: string;
    dst6s: outputs.GetFirewallInternetserviceextensionEntryDst6[];
    dsts: outputs.GetFirewallInternetserviceextensionEntryDst[];
    id: number;
    portRanges: outputs.GetFirewallInternetserviceextensionEntryPortRange[];
    protocol: number;
}

export interface GetFirewallInternetserviceextensionEntryDst {
    name: string;
}

export interface GetFirewallInternetserviceextensionEntryDst6 {
    name: string;
}

export interface GetFirewallInternetserviceextensionEntryPortRange {
    endPort: number;
    id: number;
    startPort: number;
}

export interface GetFirewallInternetservicegroupMember {
    id: number;
    name: string;
}

export interface GetFirewallMulticastaddress6Tagging {
    category: string;
    name: string;
    tags: outputs.GetFirewallMulticastaddress6TaggingTag[];
}

export interface GetFirewallMulticastaddress6TaggingTag {
    name: string;
}

export interface GetFirewallMulticastaddressTagging {
    category: string;
    name: string;
    tags: outputs.GetFirewallMulticastaddressTaggingTag[];
}

export interface GetFirewallMulticastaddressTaggingTag {
    name: string;
}

export interface GetFirewallPolicy46Dstaddr {
    name: string;
}

export interface GetFirewallPolicy46Poolname {
    name: string;
}

export interface GetFirewallPolicy46Service {
    name: string;
}

export interface GetFirewallPolicy46Srcaddr {
    name: string;
}

export interface GetFirewallPolicy64Dstaddr {
    name: string;
}

export interface GetFirewallPolicy64Poolname {
    name: string;
}

export interface GetFirewallPolicy64Service {
    name: string;
}

export interface GetFirewallPolicy64Srcaddr {
    name: string;
}

export interface GetFirewallPolicy6AppCategory {
    id: number;
}

export interface GetFirewallPolicy6AppGroup {
    name: string;
}

export interface GetFirewallPolicy6Application {
    id: number;
}

export interface GetFirewallPolicy6CustomLogField {
    fieldId: string;
}

export interface GetFirewallPolicy6Device {
    name: string;
}

export interface GetFirewallPolicy6Dstaddr {
    name: string;
}

export interface GetFirewallPolicy6Dstintf {
    name: string;
}

export interface GetFirewallPolicy6FssoGroup {
    name: string;
}

export interface GetFirewallPolicy6Group {
    name: string;
}

export interface GetFirewallPolicy6Poolname {
    name: string;
}

export interface GetFirewallPolicy6Service {
    name: string;
}

export interface GetFirewallPolicy6Srcaddr {
    name: string;
}

export interface GetFirewallPolicy6Srcintf {
    name: string;
}

export interface GetFirewallPolicy6SslMirrorIntf {
    name: string;
}

export interface GetFirewallPolicy6UrlCategory {
    id: number;
}

export interface GetFirewallPolicy6User {
    name: string;
}

export interface GetFirewallPolicyAppCategory {
    id: number;
}

export interface GetFirewallPolicyAppGroup {
    name: string;
}

export interface GetFirewallPolicyApplication {
    id: number;
}

export interface GetFirewallPolicyCustomLogField {
    fieldId: string;
}

export interface GetFirewallPolicyDevice {
    name: string;
}

export interface GetFirewallPolicyDstaddr {
    name: string;
}

export interface GetFirewallPolicyDstaddr6 {
    name: string;
}

export interface GetFirewallPolicyDstintf {
    name: string;
}

export interface GetFirewallPolicyFssoGroup {
    name: string;
}

export interface GetFirewallPolicyGroup {
    name: string;
}

export interface GetFirewallPolicyInternetService6Custom {
    name: string;
}

export interface GetFirewallPolicyInternetService6CustomGroup {
    name: string;
}

export interface GetFirewallPolicyInternetService6Group {
    name: string;
}

export interface GetFirewallPolicyInternetService6Name {
    name: string;
}

export interface GetFirewallPolicyInternetService6SrcCustom {
    name: string;
}

export interface GetFirewallPolicyInternetService6SrcCustomGroup {
    name: string;
}

export interface GetFirewallPolicyInternetService6SrcGroup {
    name: string;
}

export interface GetFirewallPolicyInternetService6SrcName {
    name: string;
}

export interface GetFirewallPolicyInternetServiceCustom {
    name: string;
}

export interface GetFirewallPolicyInternetServiceCustomGroup {
    name: string;
}

export interface GetFirewallPolicyInternetServiceGroup {
    name: string;
}

export interface GetFirewallPolicyInternetServiceId {
    id: number;
}

export interface GetFirewallPolicyInternetServiceName {
    name: string;
}

export interface GetFirewallPolicyInternetServiceSrcCustom {
    name: string;
}

export interface GetFirewallPolicyInternetServiceSrcCustomGroup {
    name: string;
}

export interface GetFirewallPolicyInternetServiceSrcGroup {
    name: string;
}

export interface GetFirewallPolicyInternetServiceSrcId {
    id: number;
}

export interface GetFirewallPolicyInternetServiceSrcName {
    name: string;
}

export interface GetFirewallPolicyNetworkServiceDynamic {
    name: string;
}

export interface GetFirewallPolicyNetworkServiceSrcDynamic {
    name: string;
}

export interface GetFirewallPolicyNtlmEnabledBrowser {
    userAgentString: string;
}

export interface GetFirewallPolicyPcpPoolname {
    name: string;
}

export interface GetFirewallPolicyPoolname {
    name: string;
}

export interface GetFirewallPolicyPoolname6 {
    name: string;
}

export interface GetFirewallPolicyRtpAddr {
    name: string;
}

export interface GetFirewallPolicyService {
    name: string;
}

export interface GetFirewallPolicySgt {
    id: number;
}

export interface GetFirewallPolicySrcVendorMac {
    id: number;
}

export interface GetFirewallPolicySrcaddr {
    name: string;
}

export interface GetFirewallPolicySrcaddr6 {
    name: string;
}

export interface GetFirewallPolicySrcintf {
    name: string;
}

export interface GetFirewallPolicySslMirrorIntf {
    name: string;
}

export interface GetFirewallPolicyUrlCategory {
    id: number;
}

export interface GetFirewallPolicyUser {
    name: string;
}

export interface GetFirewallPolicyZtnaEmsTag {
    name: string;
}

export interface GetFirewallPolicyZtnaEmsTagSecondary {
    name: string;
}

export interface GetFirewallPolicyZtnaGeoTag {
    name: string;
}

export interface GetFirewallProfileprotocoloptionsCif {
    domainController: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    scanBzip2: string;
    serverCredentialType: string;
    serverKeytabs: outputs.GetFirewallProfileprotocoloptionsCifServerKeytab[];
    status: string;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileprotocoloptionsCifServerKeytab {
    keytab: string;
    principal: string;
}

export interface GetFirewallProfileprotocoloptionsDn {
    ports: number;
    status: string;
}

export interface GetFirewallProfileprotocoloptionsFtp {
    comfortAmount: number;
    comfortInterval: number;
    explicitFtpTls: string;
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    streamBasedUncompressedLimit: number;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileprotocoloptionsHttp {
    addressIpRating: string;
    blockPageStatusCode: number;
    comfortAmount: number;
    comfortInterval: number;
    fortinetBar: string;
    fortinetBarPort: number;
    h2c: string;
    httpPolicy: string;
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    postLang: string;
    proxyAfterTcpHandshake: string;
    rangeBlock: string;
    retryCount: number;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    streamBasedUncompressedLimit: number;
    streamingContentBypass: string;
    stripXForwardedFor: string;
    switchingProtocols: string;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    tunnelNonHttp: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
    unknownContentEncoding: string;
    unknownHttpVersion: string;
    verifyDnsForPolicyMatching: string;
}

export interface GetFirewallProfileprotocoloptionsImap {
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileprotocoloptionsMailSignature {
    signature: string;
    status: string;
}

export interface GetFirewallProfileprotocoloptionsMapi {
    options: string;
    oversizeLimit: number;
    ports: number;
    scanBzip2: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileprotocoloptionsNntp {
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileprotocoloptionsPop3 {
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileprotocoloptionsSmtp {
    inspectAll: string;
    options: string;
    oversizeLimit: number;
    ports: number;
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    serverBusy: string;
    sslOffloaded: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProfileprotocoloptionsSsh {
    comfortAmount: number;
    comfortInterval: number;
    options: string;
    oversizeLimit: number;
    scanBzip2: string;
    sslOffloaded: string;
    streamBasedUncompressedLimit: number;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface GetFirewallProxyaddressApplication {
    name: string;
}

export interface GetFirewallProxyaddressCategory {
    id: number;
}

export interface GetFirewallProxyaddressHeaderGroup {
    caseSensitivity: string;
    header: string;
    headerName: string;
    id: number;
}

export interface GetFirewallProxyaddressTagging {
    category: string;
    name: string;
    tags: outputs.GetFirewallProxyaddressTaggingTag[];
}

export interface GetFirewallProxyaddressTaggingTag {
    name: string;
}

export interface GetFirewallProxyaddrgrpMember {
    name: string;
}

export interface GetFirewallProxyaddrgrpTagging {
    category: string;
    name: string;
    tags: outputs.GetFirewallProxyaddrgrpTaggingTag[];
}

export interface GetFirewallProxyaddrgrpTaggingTag {
    name: string;
}

export interface GetFirewallProxypolicyAccessProxy {
    name: string;
}

export interface GetFirewallProxypolicyAccessProxy6 {
    name: string;
}

export interface GetFirewallProxypolicyDstaddr {
    name: string;
}

export interface GetFirewallProxypolicyDstaddr6 {
    name: string;
}

export interface GetFirewallProxypolicyDstintf {
    name: string;
}

export interface GetFirewallProxypolicyGroup {
    name: string;
}

export interface GetFirewallProxypolicyInternetService6Custom {
    name: string;
}

export interface GetFirewallProxypolicyInternetService6CustomGroup {
    name: string;
}

export interface GetFirewallProxypolicyInternetService6Group {
    name: string;
}

export interface GetFirewallProxypolicyInternetService6Name {
    name: string;
}

export interface GetFirewallProxypolicyInternetServiceCustom {
    name: string;
}

export interface GetFirewallProxypolicyInternetServiceCustomGroup {
    name: string;
}

export interface GetFirewallProxypolicyInternetServiceGroup {
    name: string;
}

export interface GetFirewallProxypolicyInternetServiceId {
    id: number;
}

export interface GetFirewallProxypolicyInternetServiceName {
    name: string;
}

export interface GetFirewallProxypolicyPoolname {
    name: string;
}

export interface GetFirewallProxypolicyService {
    name: string;
}

export interface GetFirewallProxypolicySrcaddr {
    name: string;
}

export interface GetFirewallProxypolicySrcaddr6 {
    name: string;
}

export interface GetFirewallProxypolicySrcintf {
    name: string;
}

export interface GetFirewallProxypolicyUser {
    name: string;
}

export interface GetFirewallProxypolicyZtnaEmsTag {
    name: string;
}

export interface GetFirewallconsolidatedPolicyAppCategory {
    id: number;
}

export interface GetFirewallconsolidatedPolicyAppGroup {
    name: string;
}

export interface GetFirewallconsolidatedPolicyApplication {
    id: number;
}

export interface GetFirewallconsolidatedPolicyDstaddr4 {
    name: string;
}

export interface GetFirewallconsolidatedPolicyDstaddr6 {
    name: string;
}

export interface GetFirewallconsolidatedPolicyDstintf {
    name: string;
}

export interface GetFirewallconsolidatedPolicyFssoGroup {
    name: string;
}

export interface GetFirewallconsolidatedPolicyGroup {
    name: string;
}

export interface GetFirewallconsolidatedPolicyInternetServiceCustom {
    name: string;
}

export interface GetFirewallconsolidatedPolicyInternetServiceCustomGroup {
    name: string;
}

export interface GetFirewallconsolidatedPolicyInternetServiceGroup {
    name: string;
}

export interface GetFirewallconsolidatedPolicyInternetServiceId {
    id: number;
}

export interface GetFirewallconsolidatedPolicyInternetServiceName {
    name: string;
}

export interface GetFirewallconsolidatedPolicyInternetServiceSrcCustom {
    name: string;
}

export interface GetFirewallconsolidatedPolicyInternetServiceSrcCustomGroup {
    name: string;
}

export interface GetFirewallconsolidatedPolicyInternetServiceSrcGroup {
    name: string;
}

export interface GetFirewallconsolidatedPolicyInternetServiceSrcId {
    id: number;
}

export interface GetFirewallconsolidatedPolicyInternetServiceSrcName {
    name: string;
}

export interface GetFirewallconsolidatedPolicyPoolname4 {
    name: string;
}

export interface GetFirewallconsolidatedPolicyPoolname6 {
    name: string;
}

export interface GetFirewallconsolidatedPolicyService {
    name: string;
}

export interface GetFirewallconsolidatedPolicySrcaddr4 {
    name: string;
}

export interface GetFirewallconsolidatedPolicySrcaddr6 {
    name: string;
}

export interface GetFirewallconsolidatedPolicySrcintf {
    name: string;
}

export interface GetFirewallconsolidatedPolicyUrlCategory {
    id: number;
}

export interface GetFirewallconsolidatedPolicyUser {
    name: string;
}

export interface GetFirewallscheduleGroupMember {
    name: string;
}

export interface GetFirewallserviceCustomAppCategory {
    id: number;
}

export interface GetFirewallserviceCustomApplication {
    id: number;
}

export interface GetFirewallserviceGroupMember {
    name: string;
}

export interface GetFirewallwildcardfqdnGroupMember {
    name: string;
}

export interface GetRouterAccesslist6Rule {
    action: string;
    exactMatch: string;
    flags: number;
    id: number;
    prefix6: string;
}

export interface GetRouterAccesslistRule {
    action: string;
    exactMatch: string;
    flags: number;
    id: number;
    prefix: string;
    wildcard: string;
}

export interface GetRouterAspathlistRule {
    action: string;
    id: number;
    regexp: string;
}

export interface GetRouterBfd6MultihopTemplate {
    authMode: string;
    bfdDesiredMinTx: number;
    bfdDetectMult: number;
    bfdRequiredMinRx: number;
    dst: string;
    id: number;
    md5Key: string;
    src: string;
}

export interface GetRouterBfd6Neighbor {
    interface: string;
    ip6Address: string;
}

export interface GetRouterBfdMultihopTemplate {
    authMode: string;
    bfdDesiredMinTx: number;
    bfdDetectMult: number;
    bfdRequiredMinRx: number;
    dst: string;
    id: number;
    md5Key: string;
    src: string;
}

export interface GetRouterBfdNeighbor {
    interface: string;
    ip: string;
}

export interface GetRouterBgpAdminDistance {
    distance: number;
    id: number;
    neighbourPrefix: string;
    routeList: string;
}

export interface GetRouterBgpAggregateAddress {
    asSet: string;
    id: number;
    prefix: string;
    summaryOnly: string;
}

export interface GetRouterBgpAggregateAddress6 {
    asSet: string;
    id: number;
    prefix6: string;
    summaryOnly: string;
}

export interface GetRouterBgpConfederationPeer {
    peer: string;
}

export interface GetRouterBgpNeighbor {
    activate: string;
    activate6: string;
    activateEvpn: string;
    activateVpnv4: string;
    activateVpnv6: string;
    additionalPath: string;
    additionalPath6: string;
    additionalPathVpnv4: string;
    additionalPathVpnv6: string;
    advAdditionalPath: number;
    advAdditionalPath6: number;
    advAdditionalPathVpnv4: number;
    advAdditionalPathVpnv6: number;
    advertisementInterval: number;
    allowasIn: number;
    allowasIn6: number;
    allowasInEnable: string;
    allowasInEnable6: string;
    allowasInEnableEvpn: string;
    allowasInEnableVpnv4: string;
    allowasInEnableVpnv6: string;
    allowasInEvpn: number;
    allowasInVpnv4: number;
    allowasInVpnv6: number;
    asOverride: string;
    asOverride6: string;
    attributeUnchanged: string;
    attributeUnchanged6: string;
    attributeUnchangedVpnv4: string;
    attributeUnchangedVpnv6: string;
    authOptions: string;
    bfd: string;
    capabilityDefaultOriginate: string;
    capabilityDefaultOriginate6: string;
    capabilityDynamic: string;
    capabilityGracefulRestart: string;
    capabilityGracefulRestart6: string;
    capabilityGracefulRestartEvpn: string;
    capabilityGracefulRestartVpnv4: string;
    capabilityGracefulRestartVpnv6: string;
    capabilityOrf: string;
    capabilityOrf6: string;
    capabilityRouteRefresh: string;
    conditionalAdvertise6s: outputs.GetRouterBgpNeighborConditionalAdvertise6[];
    conditionalAdvertises: outputs.GetRouterBgpNeighborConditionalAdvertise[];
    connectTimer: number;
    defaultOriginateRoutemap: string;
    defaultOriginateRoutemap6: string;
    description: string;
    distributeListIn: string;
    distributeListIn6: string;
    distributeListInVpnv4: string;
    distributeListInVpnv6: string;
    distributeListOut: string;
    distributeListOut6: string;
    distributeListOutVpnv4: string;
    distributeListOutVpnv6: string;
    dontCapabilityNegotiate: string;
    ebgpEnforceMultihop: string;
    ebgpMultihopTtl: number;
    filterListIn: string;
    filterListIn6: string;
    filterListInVpnv4: string;
    filterListInVpnv6: string;
    filterListOut: string;
    filterListOut6: string;
    filterListOutVpnv4: string;
    filterListOutVpnv6: string;
    holdtimeTimer: number;
    interface: string;
    ip: string;
    keepAliveTimer: number;
    linkDownFailover: string;
    localAs: number;
    localAsNoPrepend: string;
    localAsReplaceAs: string;
    maximumPrefix: number;
    maximumPrefix6: number;
    maximumPrefixEvpn: number;
    maximumPrefixThreshold: number;
    maximumPrefixThreshold6: number;
    maximumPrefixThresholdEvpn: number;
    maximumPrefixThresholdVpnv4: number;
    maximumPrefixThresholdVpnv6: number;
    maximumPrefixVpnv4: number;
    maximumPrefixVpnv6: number;
    maximumPrefixWarningOnly: string;
    maximumPrefixWarningOnly6: string;
    maximumPrefixWarningOnlyEvpn: string;
    maximumPrefixWarningOnlyVpnv4: string;
    maximumPrefixWarningOnlyVpnv6: string;
    nextHopSelf: string;
    nextHopSelf6: string;
    nextHopSelfRr: string;
    nextHopSelfRr6: string;
    nextHopSelfVpnv4: string;
    nextHopSelfVpnv6: string;
    overrideCapability: string;
    passive: string;
    password: string;
    prefixListIn: string;
    prefixListIn6: string;
    prefixListInVpnv4: string;
    prefixListInVpnv6: string;
    prefixListOut: string;
    prefixListOut6: string;
    prefixListOutVpnv4: string;
    prefixListOutVpnv6: string;
    remoteAs: number;
    removePrivateAs: string;
    removePrivateAs6: string;
    removePrivateAsEvpn: string;
    removePrivateAsVpnv4: string;
    removePrivateAsVpnv6: string;
    restartTime: number;
    retainStaleTime: number;
    routeMapIn: string;
    routeMapIn6: string;
    routeMapInEvpn: string;
    routeMapInVpnv4: string;
    routeMapInVpnv6: string;
    routeMapOut: string;
    routeMapOut6: string;
    routeMapOut6Preferable: string;
    routeMapOutEvpn: string;
    routeMapOutPreferable: string;
    routeMapOutVpnv4: string;
    routeMapOutVpnv4Preferable: string;
    routeMapOutVpnv6: string;
    routeMapOutVpnv6Preferable: string;
    routeReflectorClient: string;
    routeReflectorClient6: string;
    routeReflectorClientEvpn: string;
    routeReflectorClientVpnv4: string;
    routeReflectorClientVpnv6: string;
    routeServerClient: string;
    routeServerClient6: string;
    routeServerClientEvpn: string;
    routeServerClientVpnv4: string;
    routeServerClientVpnv6: string;
    sendCommunity: string;
    sendCommunity6: string;
    sendCommunityEvpn: string;
    sendCommunityVpnv4: string;
    sendCommunityVpnv6: string;
    shutdown: string;
    softReconfiguration: string;
    softReconfiguration6: string;
    softReconfigurationEvpn: string;
    softReconfigurationVpnv4: string;
    softReconfigurationVpnv6: string;
    staleRoute: string;
    strictCapabilityMatch: string;
    unsuppressMap: string;
    unsuppressMap6: string;
    updateSource: string;
    weight: number;
}

export interface GetRouterBgpNeighborConditionalAdvertise {
    advertiseRoutemap: string;
    conditionRoutemap: string;
    conditionType: string;
}

export interface GetRouterBgpNeighborConditionalAdvertise6 {
    advertiseRoutemap: string;
    conditionRoutemap: string;
    conditionType: string;
}

export interface GetRouterBgpNeighborGroup {
    activate: string;
    activate6: string;
    activateEvpn: string;
    activateVpnv4: string;
    activateVpnv6: string;
    additionalPath: string;
    additionalPath6: string;
    additionalPathVpnv4: string;
    additionalPathVpnv6: string;
    advAdditionalPath: number;
    advAdditionalPath6: number;
    advAdditionalPathVpnv4: number;
    advAdditionalPathVpnv6: number;
    advertisementInterval: number;
    allowasIn: number;
    allowasIn6: number;
    allowasInEnable: string;
    allowasInEnable6: string;
    allowasInEnableEvpn: string;
    allowasInEnableVpnv4: string;
    allowasInEnableVpnv6: string;
    allowasInEvpn: number;
    allowasInVpnv4: number;
    allowasInVpnv6: number;
    asOverride: string;
    asOverride6: string;
    attributeUnchanged: string;
    attributeUnchanged6: string;
    attributeUnchangedVpnv4: string;
    attributeUnchangedVpnv6: string;
    authOptions: string;
    bfd: string;
    capabilityDefaultOriginate: string;
    capabilityDefaultOriginate6: string;
    capabilityDynamic: string;
    capabilityGracefulRestart: string;
    capabilityGracefulRestart6: string;
    capabilityGracefulRestartEvpn: string;
    capabilityGracefulRestartVpnv4: string;
    capabilityGracefulRestartVpnv6: string;
    capabilityOrf: string;
    capabilityOrf6: string;
    capabilityRouteRefresh: string;
    connectTimer: number;
    defaultOriginateRoutemap: string;
    defaultOriginateRoutemap6: string;
    description: string;
    distributeListIn: string;
    distributeListIn6: string;
    distributeListInVpnv4: string;
    distributeListInVpnv6: string;
    distributeListOut: string;
    distributeListOut6: string;
    distributeListOutVpnv4: string;
    distributeListOutVpnv6: string;
    dontCapabilityNegotiate: string;
    ebgpEnforceMultihop: string;
    ebgpMultihopTtl: number;
    filterListIn: string;
    filterListIn6: string;
    filterListInVpnv4: string;
    filterListInVpnv6: string;
    filterListOut: string;
    filterListOut6: string;
    filterListOutVpnv4: string;
    filterListOutVpnv6: string;
    holdtimeTimer: number;
    interface: string;
    keepAliveTimer: number;
    linkDownFailover: string;
    localAs: number;
    localAsNoPrepend: string;
    localAsReplaceAs: string;
    maximumPrefix: number;
    maximumPrefix6: number;
    maximumPrefixEvpn: number;
    maximumPrefixThreshold: number;
    maximumPrefixThreshold6: number;
    maximumPrefixThresholdEvpn: number;
    maximumPrefixThresholdVpnv4: number;
    maximumPrefixThresholdVpnv6: number;
    maximumPrefixVpnv4: number;
    maximumPrefixVpnv6: number;
    maximumPrefixWarningOnly: string;
    maximumPrefixWarningOnly6: string;
    maximumPrefixWarningOnlyEvpn: string;
    maximumPrefixWarningOnlyVpnv4: string;
    maximumPrefixWarningOnlyVpnv6: string;
    name: string;
    nextHopSelf: string;
    nextHopSelf6: string;
    nextHopSelfRr: string;
    nextHopSelfRr6: string;
    nextHopSelfVpnv4: string;
    nextHopSelfVpnv6: string;
    overrideCapability: string;
    passive: string;
    password: string;
    prefixListIn: string;
    prefixListIn6: string;
    prefixListInVpnv4: string;
    prefixListInVpnv6: string;
    prefixListOut: string;
    prefixListOut6: string;
    prefixListOutVpnv4: string;
    prefixListOutVpnv6: string;
    remoteAs: number;
    remoteAsFilter: string;
    removePrivateAs: string;
    removePrivateAs6: string;
    removePrivateAsEvpn: string;
    removePrivateAsVpnv4: string;
    removePrivateAsVpnv6: string;
    restartTime: number;
    retainStaleTime: number;
    routeMapIn: string;
    routeMapIn6: string;
    routeMapInEvpn: string;
    routeMapInVpnv4: string;
    routeMapInVpnv6: string;
    routeMapOut: string;
    routeMapOut6: string;
    routeMapOut6Preferable: string;
    routeMapOutEvpn: string;
    routeMapOutPreferable: string;
    routeMapOutVpnv4: string;
    routeMapOutVpnv4Preferable: string;
    routeMapOutVpnv6: string;
    routeMapOutVpnv6Preferable: string;
    routeReflectorClient: string;
    routeReflectorClient6: string;
    routeReflectorClientEvpn: string;
    routeReflectorClientVpnv4: string;
    routeReflectorClientVpnv6: string;
    routeServerClient: string;
    routeServerClient6: string;
    routeServerClientEvpn: string;
    routeServerClientVpnv4: string;
    routeServerClientVpnv6: string;
    sendCommunity: string;
    sendCommunity6: string;
    sendCommunityEvpn: string;
    sendCommunityVpnv4: string;
    sendCommunityVpnv6: string;
    shutdown: string;
    softReconfiguration: string;
    softReconfiguration6: string;
    softReconfigurationEvpn: string;
    softReconfigurationVpnv4: string;
    softReconfigurationVpnv6: string;
    staleRoute: string;
    strictCapabilityMatch: string;
    unsuppressMap: string;
    unsuppressMap6: string;
    updateSource: string;
    weight: number;
}

export interface GetRouterBgpNeighborRange {
    id: number;
    maxNeighborNum: number;
    neighborGroup: string;
    prefix: string;
}

export interface GetRouterBgpNeighborRange6 {
    id: number;
    maxNeighborNum: number;
    neighborGroup: string;
    prefix6: string;
}

export interface GetRouterBgpNetwork {
    backdoor: string;
    id: number;
    networkImportCheck: string;
    prefix: string;
    routeMap: string;
}

export interface GetRouterBgpNetwork6 {
    backdoor: string;
    id: number;
    networkImportCheck: string;
    prefix6: string;
    routeMap: string;
}

export interface GetRouterBgpRedistribute {
    name: string;
    routeMap: string;
    status: string;
}

export interface GetRouterBgpRedistribute6 {
    name: string;
    routeMap: string;
    status: string;
}

export interface GetRouterBgpVrf {
    exportRts: outputs.GetRouterBgpVrfExportRt[];
    importRouteMap: string;
    importRts: outputs.GetRouterBgpVrfImportRt[];
    leakTargets: outputs.GetRouterBgpVrfLeakTarget[];
    rd: string;
    role: string;
    vrf: string;
}

export interface GetRouterBgpVrf6 {
    exportRts: outputs.GetRouterBgpVrf6ExportRt[];
    importRouteMap: string;
    importRts: outputs.GetRouterBgpVrf6ImportRt[];
    leakTargets: outputs.GetRouterBgpVrf6LeakTarget[];
    rd: string;
    role: string;
    vrf: string;
}

export interface GetRouterBgpVrf6ExportRt {
    routeTarget: string;
}

export interface GetRouterBgpVrf6ImportRt {
    routeTarget: string;
}

export interface GetRouterBgpVrf6LeakTarget {
    interface: string;
    routeMap: string;
    vrf: string;
}

export interface GetRouterBgpVrfExportRt {
    routeTarget: string;
}

export interface GetRouterBgpVrfImportRt {
    routeTarget: string;
}

export interface GetRouterBgpVrfLeak {
    targets: outputs.GetRouterBgpVrfLeakTarget[];
    vrf: string;
}

export interface GetRouterBgpVrfLeak6 {
    targets: outputs.GetRouterBgpVrfLeak6Target[];
    vrf: string;
}

export interface GetRouterBgpVrfLeak6Target {
    interface: string;
    routeMap: string;
    vrf: string;
}

export interface GetRouterBgpVrfLeakTarget {
    interface: string;
    routeMap: string;
    vrf: string;
}

export interface GetRouterCommunitylistRule {
    action: string;
    id: number;
    match: string;
    regexp: string;
}

export interface GetRouterIsisIsisInterface {
    authKeychainL1: string;
    authKeychainL2: string;
    authModeL1: string;
    authModeL2: string;
    authPasswordL1: string;
    authPasswordL2: string;
    authSendOnlyL1: string;
    authSendOnlyL2: string;
    circuitType: string;
    csnpIntervalL1: number;
    csnpIntervalL2: number;
    helloIntervalL1: number;
    helloIntervalL2: number;
    helloMultiplierL1: number;
    helloMultiplierL2: number;
    helloPadding: string;
    lspInterval: number;
    lspRetransmitInterval: number;
    meshGroup: string;
    meshGroupId: number;
    metricL1: number;
    metricL2: number;
    name: string;
    networkType: string;
    priorityL1: number;
    priorityL2: number;
    status: string;
    status6: string;
    wideMetricL1: number;
    wideMetricL2: number;
}

export interface GetRouterIsisIsisNet {
    id: number;
    net: string;
}

export interface GetRouterIsisRedistribute {
    level: string;
    metric: number;
    metricType: string;
    protocol: string;
    routemap: string;
    status: string;
}

export interface GetRouterIsisRedistribute6 {
    level: string;
    metric: number;
    metricType: string;
    protocol: string;
    routemap: string;
    status: string;
}

export interface GetRouterIsisSummaryAddress {
    id: number;
    level: string;
    prefix: string;
}

export interface GetRouterIsisSummaryAddress6 {
    id: number;
    level: string;
    prefix6: string;
}

export interface GetRouterKeychainKey {
    acceptLifetime: string;
    algorithm: string;
    id: number;
    keyString: string;
    sendLifetime: string;
}

export interface GetRouterMulticast6Interface {
    helloHoldtime: number;
    helloInterval: number;
    name: string;
}

export interface GetRouterMulticast6PimSmGlobal {
    registerRateLimit: number;
    rpAddresses: outputs.GetRouterMulticast6PimSmGlobalRpAddress[];
}

export interface GetRouterMulticast6PimSmGlobalRpAddress {
    id: number;
    ip6Address: string;
}

export interface GetRouterMulticastInterface {
    bfd: string;
    ciscoExcludeGenid: string;
    drPriority: number;
    helloHoldtime: number;
    helloInterval: number;
    igmps: outputs.GetRouterMulticastInterfaceIgmp[];
    joinGroups: outputs.GetRouterMulticastInterfaceJoinGroup[];
    multicastFlow: string;
    name: string;
    neighbourFilter: string;
    passive: string;
    pimMode: string;
    propagationDelay: number;
    rpCandidate: string;
    rpCandidateGroup: string;
    rpCandidateInterval: number;
    rpCandidatePriority: number;
    rpfNbrFailBack: string;
    rpfNbrFailBackFilter: string;
    stateRefreshInterval: number;
    staticGroup: string;
    ttlThreshold: number;
}

export interface GetRouterMulticastInterfaceIgmp {
    accessGroup: string;
    immediateLeaveGroup: string;
    lastMemberQueryCount: number;
    lastMemberQueryInterval: number;
    queryInterval: number;
    queryMaxResponseTime: number;
    queryTimeout: number;
    routerAlertCheck: string;
    version: string;
}

export interface GetRouterMulticastInterfaceJoinGroup {
    address: string;
}

export interface GetRouterMulticastPimSmGlobal {
    acceptRegisterList: string;
    acceptSourceList: string;
    bsrAllowQuickRefresh: string;
    bsrCandidate: string;
    bsrHash: number;
    bsrInterface: string;
    bsrPriority: number;
    ciscoCrpPrefix: string;
    ciscoIgnoreRpSetPriority: string;
    ciscoRegisterChecksum: string;
    ciscoRegisterChecksumGroup: string;
    joinPruneHoldtime: number;
    messageInterval: number;
    nullRegisterRetries: number;
    pimUseSdwan: string;
    registerRateLimit: number;
    registerRpReachability: string;
    registerSource: string;
    registerSourceInterface: string;
    registerSourceIp: string;
    registerSupression: number;
    rpAddresses: outputs.GetRouterMulticastPimSmGlobalRpAddress[];
    rpRegisterKeepalive: number;
    sptThreshold: string;
    sptThresholdGroup: string;
    ssm: string;
    ssmRange: string;
}

export interface GetRouterMulticastPimSmGlobalRpAddress {
    group: string;
    id: number;
    ipAddress: string;
}

export interface GetRouterMulticastflowFlow {
    groupAddr: string;
    id: number;
    sourceAddr: string;
}

export interface GetRouterOspf6Area {
    authentication: string;
    defaultCost: number;
    id: string;
    ipsecAuthAlg: string;
    ipsecEncAlg: string;
    ipsecKeys: outputs.GetRouterOspf6AreaIpsecKey[];
    keyRolloverInterval: number;
    nssaDefaultInformationOriginate: string;
    nssaDefaultInformationOriginateMetric: number;
    nssaDefaultInformationOriginateMetricType: string;
    nssaRedistribution: string;
    nssaTranslatorRole: string;
    ranges: outputs.GetRouterOspf6AreaRange[];
    stubType: string;
    type: string;
    virtualLinks: outputs.GetRouterOspf6AreaVirtualLink[];
}

export interface GetRouterOspf6AreaIpsecKey {
    authKey: string;
    encKey: string;
    spi: number;
}

export interface GetRouterOspf6AreaRange {
    advertise: string;
    id: number;
    prefix6: string;
}

export interface GetRouterOspf6AreaVirtualLink {
    authentication: string;
    deadInterval: number;
    helloInterval: number;
    ipsecAuthAlg: string;
    ipsecEncAlg: string;
    ipsecKeys: outputs.GetRouterOspf6AreaVirtualLinkIpsecKey[];
    keyRolloverInterval: number;
    name: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface GetRouterOspf6AreaVirtualLinkIpsecKey {
    authKey: string;
    encKey: string;
    spi: number;
}

export interface GetRouterOspf6Ospf6Interface {
    areaId: string;
    authentication: string;
    bfd: string;
    cost: number;
    deadInterval: number;
    helloInterval: number;
    interface: string;
    ipsecAuthAlg: string;
    ipsecEncAlg: string;
    ipsecKeys: outputs.GetRouterOspf6Ospf6InterfaceIpsecKey[];
    keyRolloverInterval: number;
    mtu: number;
    mtuIgnore: string;
    name: string;
    neighbors: outputs.GetRouterOspf6Ospf6InterfaceNeighbor[];
    networkType: string;
    priority: number;
    retransmitInterval: number;
    status: string;
    transmitDelay: number;
}

export interface GetRouterOspf6Ospf6InterfaceIpsecKey {
    authKey: string;
    encKey: string;
    spi: number;
}

export interface GetRouterOspf6Ospf6InterfaceNeighbor {
    cost: number;
    ip6: string;
    pollInterval: number;
    priority: number;
}

export interface GetRouterOspf6PassiveInterface {
    name: string;
}

export interface GetRouterOspf6Redistribute {
    metric: number;
    metricType: string;
    name: string;
    routemap: string;
    status: string;
}

export interface GetRouterOspf6SummaryAddress {
    advertise: string;
    id: number;
    prefix6: string;
    tag: number;
}

export interface GetRouterOspfArea {
    authentication: string;
    comments: string;
    defaultCost: number;
    filterLists: outputs.GetRouterOspfAreaFilterList[];
    id: string;
    nssaDefaultInformationOriginate: string;
    nssaDefaultInformationOriginateMetric: number;
    nssaDefaultInformationOriginateMetricType: string;
    nssaRedistribution: string;
    nssaTranslatorRole: string;
    ranges: outputs.GetRouterOspfAreaRange[];
    shortcut: string;
    stubType: string;
    type: string;
    virtualLinks: outputs.GetRouterOspfAreaVirtualLink[];
}

export interface GetRouterOspfAreaFilterList {
    direction: string;
    id: number;
    list: string;
}

export interface GetRouterOspfAreaRange {
    advertise: string;
    id: number;
    prefix: string;
    substitute: string;
    substituteStatus: string;
}

export interface GetRouterOspfAreaVirtualLink {
    authentication: string;
    authenticationKey: string;
    deadInterval: number;
    helloInterval: number;
    keychain: string;
    md5Key: string;
    md5Keychain: string;
    md5Keys: outputs.GetRouterOspfAreaVirtualLinkMd5Key[];
    name: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface GetRouterOspfAreaVirtualLinkMd5Key {
    id: number;
    keyString: string;
}

export interface GetRouterOspfDistributeList {
    accessList: string;
    id: number;
    protocol: string;
}

export interface GetRouterOspfNeighbor {
    cost: number;
    id: number;
    ip: string;
    pollInterval: number;
    priority: number;
}

export interface GetRouterOspfNetwork {
    area: string;
    comments: string;
    id: number;
    prefix: string;
}

export interface GetRouterOspfOspfInterface {
    authentication: string;
    authenticationKey: string;
    bfd: string;
    comments: string;
    cost: number;
    databaseFilterOut: string;
    deadInterval: number;
    helloInterval: number;
    helloMultiplier: number;
    interface: string;
    ip: string;
    keychain: string;
    md5Key: string;
    md5Keychain: string;
    md5Keys: outputs.GetRouterOspfOspfInterfaceMd5Key[];
    mtu: number;
    mtuIgnore: string;
    name: string;
    networkType: string;
    prefixLength: number;
    priority: number;
    resyncTimeout: number;
    retransmitInterval: number;
    status: string;
    transmitDelay: number;
}

export interface GetRouterOspfOspfInterfaceMd5Key {
    id: number;
    keyString: string;
}

export interface GetRouterOspfPassiveInterface {
    name: string;
}

export interface GetRouterOspfRedistribute {
    metric: number;
    metricType: string;
    name: string;
    routemap: string;
    status: string;
    tag: number;
}

export interface GetRouterOspfSummaryAddress {
    advertise: string;
    id: number;
    prefix: string;
    tag: number;
}

export interface GetRouterPolicy6Dstaddr {
    name: string;
}

export interface GetRouterPolicy6InternetServiceCustom {
    name: string;
}

export interface GetRouterPolicy6InternetServiceId {
    id: number;
}

export interface GetRouterPolicy6Srcaddr {
    name: string;
}

export interface GetRouterPolicyDst {
    subnet: string;
}

export interface GetRouterPolicyDstaddr {
    name: string;
}

export interface GetRouterPolicyInputDevice {
    name: string;
}

export interface GetRouterPolicyInternetServiceCustom {
    name: string;
}

export interface GetRouterPolicyInternetServiceId {
    id: number;
}

export interface GetRouterPolicySrc {
    subnet: string;
}

export interface GetRouterPolicySrcaddr {
    name: string;
}

export interface GetRouterPrefixlist6Rule {
    action: string;
    flags: number;
    ge: number;
    id: number;
    le: number;
    prefix6: string;
}

export interface GetRouterPrefixlistRule {
    action: string;
    flags: number;
    ge: number;
    id: number;
    le: number;
    prefix: string;
}

export interface GetRouterRipDistance {
    accessList: string;
    distance: number;
    id: number;
    prefix: string;
}

export interface GetRouterRipDistributeList {
    direction: string;
    id: number;
    interface: string;
    listname: string;
    status: string;
}

export interface GetRouterRipInterface {
    authKeychain: string;
    authMode: string;
    authString: string;
    flags: number;
    name: string;
    receiveVersion: string;
    sendVersion: string;
    sendVersion2Broadcast: string;
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface GetRouterRipNeighbor {
    id: number;
    ip: string;
}

export interface GetRouterRipNetwork {
    id: number;
    prefix: string;
}

export interface GetRouterRipOffsetList {
    accessList: string;
    direction: string;
    id: number;
    interface: string;
    offset: number;
    status: string;
}

export interface GetRouterRipPassiveInterface {
    name: string;
}

export interface GetRouterRipRedistribute {
    metric: number;
    name: string;
    routemap: string;
    status: string;
}

export interface GetRouterRipngAggregateAddress {
    id: number;
    prefix6: string;
}

export interface GetRouterRipngDistance {
    accessList6: string;
    distance: number;
    id: number;
    prefix6: string;
}

export interface GetRouterRipngDistributeList {
    direction: string;
    id: number;
    interface: string;
    listname: string;
    status: string;
}

export interface GetRouterRipngInterface {
    flags: number;
    name: string;
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface GetRouterRipngNeighbor {
    id: number;
    interface: string;
    ip6: string;
}

export interface GetRouterRipngNetwork {
    id: number;
    prefix: string;
}

export interface GetRouterRipngOffsetList {
    accessList6: string;
    direction: string;
    id: number;
    interface: string;
    offset: number;
    status: string;
}

export interface GetRouterRipngPassiveInterface {
    name: string;
}

export interface GetRouterRipngRedistribute {
    metric: number;
    name: string;
    routemap: string;
    status: string;
}

export interface GetRouterRoutemapRule {
    action: string;
    id: number;
    matchAsPath: string;
    matchCommunity: string;
    matchCommunityExact: string;
    matchExtcommunity: string;
    matchExtcommunityExact: string;
    matchFlags: number;
    matchInterface: string;
    matchIp6Address: string;
    matchIp6Nexthop: string;
    matchIpAddress: string;
    matchIpNexthop: string;
    matchMetric: number;
    matchOrigin: string;
    matchRouteType: string;
    matchTag: number;
    matchVrf: number;
    setAggregatorAs: number;
    setAggregatorIp: string;
    setAspathAction: string;
    setAspaths: outputs.GetRouterRoutemapRuleSetAspath[];
    setAtomicAggregate: string;
    setCommunities: outputs.GetRouterRoutemapRuleSetCommunity[];
    setCommunityAdditive: string;
    setCommunityDelete: string;
    setDampeningMaxSuppress: number;
    setDampeningReachabilityHalfLife: number;
    setDampeningReuse: number;
    setDampeningSuppress: number;
    setDampeningUnreachabilityHalfLife: number;
    setExtcommunityRts: outputs.GetRouterRoutemapRuleSetExtcommunityRt[];
    setExtcommunitySoos: outputs.GetRouterRoutemapRuleSetExtcommunitySoo[];
    setFlags: number;
    setIp6Nexthop: string;
    setIp6NexthopLocal: string;
    setIpNexthop: string;
    setIpPrefsrc: string;
    setLocalPreference: number;
    setMetric: number;
    setMetricType: string;
    setOrigin: string;
    setOriginatorId: string;
    setPriority: number;
    setRouteTag: number;
    setTag: number;
    setVpnv4Nexthop: string;
    setVpnv6Nexthop: string;
    setVpnv6NexthopLocal: string;
    setWeight: number;
}

export interface GetRouterRoutemapRuleSetAspath {
    as: string;
}

export interface GetRouterRoutemapRuleSetCommunity {
    community: string;
}

export interface GetRouterRoutemapRuleSetExtcommunityRt {
    community: string;
}

export interface GetRouterRoutemapRuleSetExtcommunitySoo {
    community: string;
}

export interface GetRouterStatic6SdwanZone {
    name: string;
}

export interface GetRouterStaticSdwanZone {
    name: string;
}

export interface GetRouterbgpNeighborConditionalAdvertise {
    advertiseRoutemap: string;
    conditionRoutemap: string;
    conditionType: string;
}

export interface GetRouterbgpNeighborConditionalAdvertise6 {
    advertiseRoutemap: string;
    conditionRoutemap: string;
    conditionType: string;
}

export interface GetSystemAccprofileFwgrpPermission {
    address: string;
    others: string;
    policy: string;
    schedule: string;
    service: string;
}

export interface GetSystemAccprofileLoggrpPermission {
    config: string;
    dataAccess: string;
    reportAccess: string;
    threatWeight: string;
}

export interface GetSystemAccprofileNetgrpPermission {
    cfg: string;
    packetCapture: string;
    routeCfg: string;
}

export interface GetSystemAccprofileSysgrpPermission {
    admin: string;
    cfg: string;
    mnt: string;
    upd: string;
}

export interface GetSystemAccprofileUtmgrpPermission {
    antivirus: string;
    applicationControl: string;
    casb: string;
    dataLeakPrevention: string;
    dataLossPrevention: string;
    dlp: string;
    dnsfilter: string;
    emailfilter: string;
    endpointControl: string;
    fileFilter: string;
    icap: string;
    ips: string;
    spamfilter: string;
    videofilter: string;
    virtualPatch: string;
    voip: string;
    waf: string;
    webfilter: string;
}

export interface GetSystemAdminGuestUsergroup {
    name: string;
}

export interface GetSystemAdminGuiDashboard {
    columns: number;
    id: number;
    layoutType: string;
    name: string;
    scope: string;
    widgets: outputs.GetSystemAdminGuiDashboardWidget[];
}

export interface GetSystemAdminGuiDashboardWidget {
    fabricDevice: string;
    filters: outputs.GetSystemAdminGuiDashboardWidgetFilter[];
    height: number;
    id: number;
    industry: string;
    interface: string;
    region: string;
    reportBy: string;
    sortBy: string;
    timeframe: string;
    title: string;
    type: string;
    visualization: string;
    width: number;
    xPos: number;
    yPos: number;
}

export interface GetSystemAdminGuiDashboardWidgetFilter {
    id: number;
    key: string;
    value: string;
}

export interface GetSystemAdminGuiGlobalMenuFavorite {
    id: string;
}

export interface GetSystemAdminGuiNewFeatureAcknowledge {
    id: string;
}

export interface GetSystemAdminGuiVdomMenuFavorite {
    id: string;
}

export interface GetSystemAdminLoginTime {
    lastFailedLogin: string;
    lastLogin: string;
    usrName: string;
}

export interface GetSystemAdminVdom {
    name: string;
}

export interface GetSystemApiuserTrusthost {
    id: number;
    ipv4Trusthost: string;
    ipv6Trusthost: string;
    type: string;
}

export interface GetSystemApiuserVdom {
    name: string;
}

export interface GetSystemAutomationactionEmailTo {
    name: string;
}

export interface GetSystemAutomationactionHeader {
    header: string;
}

export interface GetSystemAutomationactionHttpHeader {
    id: number;
    key: string;
    value: string;
}

export interface GetSystemAutomationactionSdnConnector {
    name: string;
}

export interface GetSystemAutomationdestinationDestination {
    name: string;
}

export interface GetSystemAutomationtriggerField {
    id: number;
    name: string;
    value: string;
}

export interface GetSystemAutomationtriggerLogidBlock {
    id: number;
}

export interface GetSystemAutomationtriggerVdom {
    name: string;
}

export interface GetSystemCentralmanagementServerList {
    addrType: string;
    fqdn: string;
    id: number;
    serverAddress: string;
    serverAddress6: string;
    serverType: string;
}

export interface GetSystemClustersyncDownIntfsBeforeSessSync {
    name: string;
}

export interface GetSystemClustersyncSessionSyncFilter {
    customServices: outputs.GetSystemClustersyncSessionSyncFilterCustomService[];
    dstaddr: string;
    dstaddr6: string;
    dstintf: string;
    srcaddr: string;
    srcaddr6: string;
    srcintf: string;
}

export interface GetSystemClustersyncSessionSyncFilterCustomService {
    dstPortRange: string;
    id: number;
    srcPortRange: string;
}

export interface GetSystemClustersyncSyncvd {
    name: string;
}

export interface GetSystemCsfFabricConnector {
    accprofile: string;
    configurationWriteAccess: string;
    serial: string;
    vdoms: outputs.GetSystemCsfFabricConnectorVdom[];
}

export interface GetSystemCsfFabricConnectorVdom {
    name: string;
}

export interface GetSystemCsfFabricDevice {
    accessToken: string;
    deviceIp: string;
    deviceType: string;
    httpsPort: number;
    login: string;
    name: string;
    password: string;
}

export interface GetSystemCsfTrustedList {
    action: string;
    authorizationType: string;
    certificate: string;
    downstreamAuthorization: string;
    haMembers: string;
    index: number;
    name: string;
    serial: string;
}

export interface GetSystemDdnsDdnsServerAddr {
    addr: string;
}

export interface GetSystemDdnsMonitorInterface {
    interfaceName: string;
}

export interface GetSystemDnsDomain {
    domain: string;
}

export interface GetSystemDnsServerHostname {
    hostname: string;
}

export interface GetSystemDnsdatabaseDnsEntry {
    canonicalName: string;
    hostname: string;
    id: number;
    ip: string;
    ipv6: string;
    preference: number;
    status: string;
    ttl: number;
    type: string;
}

export interface GetSystemGlobalInternetServiceDownloadList {
    id: number;
}

export interface GetSystemHaHaMgmtInterface {
    dst: string;
    gateway: string;
    gateway6: string;
    id: number;
    interface: string;
}

export interface GetSystemHaSecondaryVcluster {
    monitor: string;
    override: string;
    overrideWaitTime: number;
    pingserverFailoverThreshold: number;
    pingserverMonitorInterface: string;
    pingserverSecondaryForceReset: string;
    pingserverSlaveForceReset: string;
    priority: number;
    vclusterId: number;
    vdom: string;
}

export interface GetSystemHaUnicastPeer {
    id: number;
    peerIp: string;
}

export interface GetSystemHaVcluster {
    monitor: string;
    override: string;
    overrideWaitTime: number;
    pingserverFailoverThreshold: number;
    pingserverFlipTimeout: number;
    pingserverMonitorInterface: string;
    pingserverSecondaryForceReset: string;
    pingserverSlaveForceReset: string;
    priority: number;
    vclusterId: number;
    vdoms: outputs.GetSystemHaVclusterVdom[];
}

export interface GetSystemHaVclusterVdom {
    name: string;
}

export interface GetSystemInterfaceClientOption {
    code: number;
    id: number;
    ip: string;
    type: string;
    value: string;
}

export interface GetSystemInterfaceDhcpSnoopingServerList {
    name: string;
    serverIp: string;
}

export interface GetSystemInterfaceFailAlertInterface {
    name: string;
}

export interface GetSystemInterfaceIpv6 {
    autoconf: string;
    cliConn6Status: number;
    dhcp6ClientOptions: string;
    dhcp6IapdLists: outputs.GetSystemInterfaceIpv6Dhcp6IapdList[];
    dhcp6InformationRequest: string;
    dhcp6PrefixDelegation: string;
    dhcp6PrefixHint: string;
    dhcp6PrefixHintPlt: number;
    dhcp6PrefixHintVlt: number;
    dhcp6RelayInterfaceId: string;
    dhcp6RelayIp: string;
    dhcp6RelayService: string;
    dhcp6RelaySourceInterface: string;
    dhcp6RelaySourceIp: string;
    dhcp6RelayType: string;
    icmp6SendRedirect: string;
    interfaceIdentifier: string;
    ip6Address: string;
    ip6Allowaccess: string;
    ip6DefaultLife: number;
    ip6DelegatedPrefixIaid: number;
    ip6DelegatedPrefixLists: outputs.GetSystemInterfaceIpv6Ip6DelegatedPrefixList[];
    ip6DnsServerOverride: string;
    ip6ExtraAddrs: outputs.GetSystemInterfaceIpv6Ip6ExtraAddr[];
    ip6HopLimit: number;
    ip6LinkMtu: number;
    ip6ManageFlag: string;
    ip6MaxInterval: number;
    ip6MinInterval: number;
    ip6Mode: string;
    ip6OtherFlag: string;
    ip6PrefixLists: outputs.GetSystemInterfaceIpv6Ip6PrefixList[];
    ip6PrefixMode: string;
    ip6ReachableTime: number;
    ip6RetransTime: number;
    ip6SendAdv: string;
    ip6Subnet: string;
    ip6UpstreamInterface: string;
    ndCert: string;
    ndCgaModifier: string;
    ndMode: string;
    ndSecurityLevel: number;
    ndTimestampDelta: number;
    ndTimestampFuzz: number;
    raSendMtu: string;
    uniqueAutoconfAddr: string;
    vrip6LinkLocal: string;
    vrrp6s: outputs.GetSystemInterfaceIpv6Vrrp6[];
    vrrpVirtualMac6: string;
}

export interface GetSystemInterfaceIpv6Dhcp6IapdList {
    iaid: number;
    prefixHint: string;
    prefixHintPlt: number;
    prefixHintVlt: number;
}

export interface GetSystemInterfaceIpv6Ip6DelegatedPrefixList {
    autonomousFlag: string;
    delegatedPrefixIaid: number;
    onlinkFlag: string;
    prefixId: number;
    rdnss: string;
    rdnssService: string;
    subnet: string;
    upstreamInterface: string;
}

export interface GetSystemInterfaceIpv6Ip6ExtraAddr {
    prefix: string;
}

export interface GetSystemInterfaceIpv6Ip6PrefixList {
    autonomousFlag: string;
    dnssls: outputs.GetSystemInterfaceIpv6Ip6PrefixListDnssl[];
    onlinkFlag: string;
    preferredLifeTime: number;
    prefix: string;
    rdnss: string;
    validLifeTime: number;
}

export interface GetSystemInterfaceIpv6Ip6PrefixListDnssl {
    domain: string;
}

export interface GetSystemInterfaceIpv6Vrrp6 {
    acceptMode: string;
    advInterval: number;
    ignoreDefaultRoute: string;
    preempt: string;
    priority: number;
    startTime: number;
    status: string;
    vrdst6: string;
    vrgrp: number;
    vrid: number;
    vrip6: string;
}

export interface GetSystemInterfaceManagedDevice {
    name: string;
}

export interface GetSystemInterfaceMember {
    interfaceName: string;
}

export interface GetSystemInterfaceSecondaryip {
    allowaccess: string;
    detectprotocol: string;
    detectserver: string;
    gwdetect: string;
    haPriority: number;
    id: number;
    ip: string;
    pingServStatus: number;
    secipRelayIp: string;
}

export interface GetSystemInterfaceSecurityGroup {
    name: string;
}

export interface GetSystemInterfaceTagging {
    category: string;
    name: string;
    tags: outputs.GetSystemInterfaceTaggingTag[];
}

export interface GetSystemInterfaceTaggingTag {
    name: string;
}

export interface GetSystemInterfaceVrrp {
    acceptMode: string;
    advInterval: number;
    ignoreDefaultRoute: string;
    preempt: string;
    priority: number;
    proxyArps: outputs.GetSystemInterfaceVrrpProxyArp[];
    startTime: number;
    status: string;
    version: string;
    vrdst: string;
    vrdstPriority: number;
    vrgrp: number;
    vrid: number;
    vrip: string;
}

export interface GetSystemInterfaceVrrpProxyArp {
    id: number;
    ip: string;
}

export interface GetSystemLinkmonitorRoute {
    subnet: string;
}

export interface GetSystemLinkmonitorServer {
    address: string;
}

export interface GetSystemLinkmonitorServerList {
    dst: string;
    id: number;
    port: number;
    protocol: string;
    weight: number;
}

export interface GetSystemMobiletunnelNetwork {
    id: number;
    interface: string;
    prefix: string;
}

export interface GetSystemNat64SecondaryPrefix {
    name: string;
    nat64Prefix: string;
}

export interface GetSystemNdproxyMember {
    interfaceName: string;
}

export interface GetSystemNetflowCollector {
    collectorIp: string;
    collectorPort: number;
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    sourceIp: string;
}

export interface GetSystemNtpInterface {
    interfaceName: string;
}

export interface GetSystemNtpNtpserver {
    authentication: string;
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    ipType: string;
    key: string;
    keyId: number;
    keyType: string;
    ntpv3: string;
    server: string;
}

export interface GetSystemObjecttaggingTag {
    name: string;
}

export interface GetSystemReplacemsggroupAdmin {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupAlertmail {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupAuth {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupAutomation {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupCustomMessage {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupDeviceDetectionPortal {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupEc {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupFortiguardWf {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupFtp {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupHttp {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupIcap {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupMail {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupNacQuar {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupNntp {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupSpam {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupSslvpn {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupTrafficQuota {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupUtm {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemReplacemsggroupWebproxy {
    buffer: string;
    format: string;
    header: string;
    msgType: string;
}

export interface GetSystemSdnconnectorCompartmentList {
    compartmentId: string;
}

export interface GetSystemSdnconnectorExternalAccountList {
    externalId: string;
    regionLists: outputs.GetSystemSdnconnectorExternalAccountListRegionList[];
    roleArn: string;
}

export interface GetSystemSdnconnectorExternalAccountListRegionList {
    region: string;
}

export interface GetSystemSdnconnectorExternalIp {
    name: string;
}

export interface GetSystemSdnconnectorForwardingRule {
    ruleName: string;
    target: string;
}

export interface GetSystemSdnconnectorGcpProjectList {
    gcpZoneLists: outputs.GetSystemSdnconnectorGcpProjectListGcpZoneList[];
    id: string;
}

export interface GetSystemSdnconnectorGcpProjectListGcpZoneList {
    name: string;
}

export interface GetSystemSdnconnectorNic {
    ips: outputs.GetSystemSdnconnectorNicIp[];
    name: string;
}

export interface GetSystemSdnconnectorNicIp {
    name: string;
    publicIp: string;
    resourceGroup: string;
}

export interface GetSystemSdnconnectorOciRegionList {
    region: string;
}

export interface GetSystemSdnconnectorRoute {
    name: string;
}

export interface GetSystemSdnconnectorRouteTable {
    name: string;
    resourceGroup: string;
    routes: outputs.GetSystemSdnconnectorRouteTableRoute[];
    subscriptionId: string;
}

export interface GetSystemSdnconnectorRouteTableRoute {
    name: string;
    nextHop: string;
}

export interface GetSystemSdnconnectorServerList {
    ip: string;
}

export interface GetSystemSessionttlPort {
    endPort: number;
    id: number;
    protocol: number;
    refreshDirection: string;
    startPort: number;
    timeout: string;
}

export interface GetSystemSflowCollector {
    collectorIp: string;
    collectorPort: number;
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    sourceIp: string;
}

export interface GetSystemVdomexceptionVdom {
    name: string;
}

export interface GetSystemVdomnetflowCollector {
    collectorIp: string;
    collectorPort: number;
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    sourceIp: string;
}

export interface GetSystemVdomsflowCollector {
    collectorIp: string;
    collectorPort: number;
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    sourceIp: string;
}

export interface GetSystemVirtualwanlinkFailAlertInterface {
    name: string;
}

export interface GetSystemVirtualwanlinkHealthCheck {
    addrMode: string;
    diffservcode: string;
    dnsRequestDomain: string;
    failtime: number;
    haPriority: number;
    httpAgent: string;
    httpGet: string;
    httpMatch: string;
    interval: number;
    members: outputs.GetSystemVirtualwanlinkHealthCheckMember[];
    name: string;
    packetSize: number;
    password: string;
    port: number;
    probeCount: number;
    probePackets: string;
    probeTimeout: number;
    protocol: string;
    recoverytime: number;
    securityMode: string;
    server: string;
    slaFailLogPeriod: number;
    slaPassLogPeriod: number;
    slas: outputs.GetSystemVirtualwanlinkHealthCheckSla[];
    systemDns: string;
    thresholdAlertJitter: number;
    thresholdAlertLatency: number;
    thresholdAlertPacketloss: number;
    thresholdWarningJitter: number;
    thresholdWarningLatency: number;
    thresholdWarningPacketloss: number;
    updateCascadeInterface: string;
    updateStaticRoute: string;
}

export interface GetSystemVirtualwanlinkHealthCheckMember {
    seqNum: number;
}

export interface GetSystemVirtualwanlinkHealthCheckSla {
    id: number;
    jitterThreshold: number;
    latencyThreshold: number;
    linkCostFactor: string;
    packetlossThreshold: number;
}

export interface GetSystemVirtualwanlinkMember {
    comment: string;
    cost: number;
    gateway: string;
    gateway6: string;
    ingressSpilloverThreshold: number;
    interface: string;
    priority: number;
    seqNum: number;
    source: string;
    source6: string;
    spilloverThreshold: number;
    status: string;
    volumeRatio: number;
    weight: number;
}

export interface GetSystemVirtualwanlinkNeighbor {
    healthCheck: string;
    ip: string;
    member: number;
    role: string;
    slaId: number;
}

export interface GetSystemVirtualwanlinkService {
    addrMode: string;
    bandwidthWeight: number;
    default: string;
    dscpForward: string;
    dscpForwardTag: string;
    dscpReverse: string;
    dscpReverseTag: string;
    dst6s: outputs.GetSystemVirtualwanlinkServiceDst6[];
    dstNegate: string;
    dsts: outputs.GetSystemVirtualwanlinkServiceDst[];
    endPort: number;
    gateway: string;
    groups: outputs.GetSystemVirtualwanlinkServiceGroup[];
    healthCheck: string;
    holdDownTime: number;
    id: number;
    inputDeviceNegate: string;
    inputDevices: outputs.GetSystemVirtualwanlinkServiceInputDevice[];
    internetService: string;
    internetServiceAppCtrlGroups: outputs.GetSystemVirtualwanlinkServiceInternetServiceAppCtrlGroup[];
    internetServiceAppCtrls: outputs.GetSystemVirtualwanlinkServiceInternetServiceAppCtrl[];
    internetServiceCtrlGroups: outputs.GetSystemVirtualwanlinkServiceInternetServiceCtrlGroup[];
    internetServiceCtrls: outputs.GetSystemVirtualwanlinkServiceInternetServiceCtrl[];
    internetServiceCustomGroups: outputs.GetSystemVirtualwanlinkServiceInternetServiceCustomGroup[];
    internetServiceCustoms: outputs.GetSystemVirtualwanlinkServiceInternetServiceCustom[];
    internetServiceGroups: outputs.GetSystemVirtualwanlinkServiceInternetServiceGroup[];
    internetServiceIds: outputs.GetSystemVirtualwanlinkServiceInternetServiceId[];
    internetServiceNames: outputs.GetSystemVirtualwanlinkServiceInternetServiceName[];
    jitterWeight: number;
    latencyWeight: number;
    linkCostFactor: string;
    linkCostThreshold: number;
    member: number;
    mode: string;
    name: string;
    packetLossWeight: number;
    priorityMembers: outputs.GetSystemVirtualwanlinkServicePriorityMember[];
    protocol: number;
    qualityLink: number;
    role: string;
    routeTag: number;
    slaCompareMethod: string;
    slas: outputs.GetSystemVirtualwanlinkServiceSla[];
    src6s: outputs.GetSystemVirtualwanlinkServiceSrc6[];
    srcNegate: string;
    srcs: outputs.GetSystemVirtualwanlinkServiceSrc[];
    standaloneAction: string;
    startPort: number;
    status: string;
    tos: string;
    tosMask: string;
    users: outputs.GetSystemVirtualwanlinkServiceUser[];
}

export interface GetSystemVirtualwanlinkServiceDst {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceDst6 {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceGroup {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceInputDevice {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceInternetServiceAppCtrl {
    id: number;
}

export interface GetSystemVirtualwanlinkServiceInternetServiceAppCtrlGroup {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceInternetServiceCtrl {
    id: number;
}

export interface GetSystemVirtualwanlinkServiceInternetServiceCtrlGroup {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceInternetServiceCustom {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceInternetServiceCustomGroup {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceInternetServiceGroup {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceInternetServiceId {
    id: number;
}

export interface GetSystemVirtualwanlinkServiceInternetServiceName {
    name: string;
}

export interface GetSystemVirtualwanlinkServicePriorityMember {
    seqNum: number;
}

export interface GetSystemVirtualwanlinkServiceSla {
    healthCheck: string;
    id: number;
}

export interface GetSystemVirtualwanlinkServiceSrc {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceSrc6 {
    name: string;
}

export interface GetSystemVirtualwanlinkServiceUser {
    name: string;
}

export interface GetSystemVirtualwanlinkZone {
    name: string;
}

export interface GetSystemVxlanRemoteIp {
    ip: string;
}

export interface GetSystemVxlanRemoteIp6 {
    ip6: string;
}

export interface GetSystemZoneInterface {
    interfaceName: string;
}

export interface GetSystemZoneTagging {
    category: string;
    name: string;
    tags: outputs.GetSystemZoneTaggingTag[];
}

export interface GetSystemZoneTaggingTag {
    name: string;
}

export interface GetSystemdhcpServerExcludeRange {
    endIp: string;
    id: number;
    leaseTime: number;
    startIp: string;
    uciMatch: string;
    uciStrings: outputs.GetSystemdhcpServerExcludeRangeUciString[];
    vciMatch: string;
    vciStrings: outputs.GetSystemdhcpServerExcludeRangeVciString[];
}

export interface GetSystemdhcpServerExcludeRangeUciString {
    uciString: string;
}

export interface GetSystemdhcpServerExcludeRangeVciString {
    vciString: string;
}

export interface GetSystemdhcpServerIpRange {
    endIp: string;
    id: number;
    leaseTime: number;
    startIp: string;
    uciMatch: string;
    uciStrings: outputs.GetSystemdhcpServerIpRangeUciString[];
    vciMatch: string;
    vciStrings: outputs.GetSystemdhcpServerIpRangeVciString[];
}

export interface GetSystemdhcpServerIpRangeUciString {
    uciString: string;
}

export interface GetSystemdhcpServerIpRangeVciString {
    vciString: string;
}

export interface GetSystemdhcpServerOption {
    code: number;
    id: number;
    ip: string;
    type: string;
    uciMatch: string;
    uciStrings: outputs.GetSystemdhcpServerOptionUciString[];
    value: string;
    vciMatch: string;
    vciStrings: outputs.GetSystemdhcpServerOptionVciString[];
}

export interface GetSystemdhcpServerOptionUciString {
    uciString: string;
}

export interface GetSystemdhcpServerOptionVciString {
    vciString: string;
}

export interface GetSystemdhcpServerReservedAddress {
    action: string;
    circuitId: string;
    circuitIdType: string;
    description: string;
    id: number;
    ip: string;
    mac: string;
    remoteId: string;
    remoteIdType: string;
    type: string;
}

export interface GetSystemdhcpServerTftpServer {
    tftpServer: string;
}

export interface GetSystemdhcpServerVciString {
    vciString: string;
}

export interface GetSystemlldpNetworkpolicyGuest {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface GetSystemlldpNetworkpolicyGuestVoiceSignaling {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface GetSystemlldpNetworkpolicySoftphone {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface GetSystemlldpNetworkpolicyStreamingVideo {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface GetSystemlldpNetworkpolicyVideoConferencing {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface GetSystemlldpNetworkpolicyVideoSignaling {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface GetSystemlldpNetworkpolicyVoice {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface GetSystemlldpNetworkpolicyVoiceSignaling {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface GetSystemsnmpCommunityHost {
    haDirect: string;
    hostType: string;
    id: number;
    ip: string;
    sourceIp: string;
}

export interface GetSystemsnmpCommunityHosts6 {
    haDirect: string;
    hostType: string;
    id: number;
    ipv6: string;
    sourceIpv6: string;
}

export interface GetSystemsnmpCommunityVdom {
    name: string;
}

export interface GetSystemsnmpUserVdom {
    name: string;
}

export interface GetVpnsslSettingsAuthenticationRule {
    auth: string;
    cipher: string;
    clientCert: string;
    groups: outputs.GetVpnsslSettingsAuthenticationRuleGroup[];
    id: number;
    portal: string;
    realm: string;
    sourceAddress6Negate: string;
    sourceAddress6s: outputs.GetVpnsslSettingsAuthenticationRuleSourceAddress6[];
    sourceAddressNegate: string;
    sourceAddresses: outputs.GetVpnsslSettingsAuthenticationRuleSourceAddress[];
    sourceInterfaces: outputs.GetVpnsslSettingsAuthenticationRuleSourceInterface[];
    userPeer: string;
    users: outputs.GetVpnsslSettingsAuthenticationRuleUser[];
}

export interface GetVpnsslSettingsAuthenticationRuleGroup {
    name: string;
}

export interface GetVpnsslSettingsAuthenticationRuleSourceAddress {
    name: string;
}

export interface GetVpnsslSettingsAuthenticationRuleSourceAddress6 {
    name: string;
}

export interface GetVpnsslSettingsAuthenticationRuleSourceInterface {
    name: string;
}

export interface GetVpnsslSettingsAuthenticationRuleUser {
    name: string;
}

export interface GetVpnsslSettingsSourceAddress {
    name: string;
}

export interface GetVpnsslSettingsSourceAddress6 {
    name: string;
}

export interface GetVpnsslSettingsSourceInterface {
    name: string;
}

export interface GetVpnsslSettingsTunnelIpPool {
    name: string;
}

export interface GetVpnsslSettingsTunnelIpv6Pool {
    name: string;
}

export interface IcapProfileIcapHeader {
    base64Encoding: string;
    content: string;
    id: number;
    name: string;
}

export interface IcapProfileRespmodForwardRule {
    action: string;
    headerGroups?: outputs.IcapProfileRespmodForwardRuleHeaderGroup[];
    host: string;
    httpRespStatusCodes?: outputs.IcapProfileRespmodForwardRuleHttpRespStatusCode[];
    name: string;
}

export interface IcapProfileRespmodForwardRuleHeaderGroup {
    caseSensitivity: string;
    header: string;
    headerName: string;
    id: number;
}

export interface IcapProfileRespmodForwardRuleHttpRespStatusCode {
    code: number;
}

export interface IcapServergroupServerList {
    name: string;
    weight: number;
}

export interface IpsDecoderParameter {
    name: string;
    value: string;
}

export interface IpsGlobalTlsActiveProbe {
    interface: string;
    interfaceSelectMethod: string;
    sourceIp: string;
    sourceIp6: string;
    vdom: string;
}

export interface IpsRuleMetadata {
    id: number;
    metaid: number;
    valueid: number;
}

export interface IpsSensorEntry {
    action: string;
    application: string;
    cves?: outputs.IpsSensorEntryCfe[];
    defaultAction: string;
    defaultStatus: string;
    exemptIps?: outputs.IpsSensorEntryExemptIp[];
    id: number;
    lastModified: string;
    location: string;
    log: string;
    logAttackContext: string;
    logPacket: string;
    os: string;
    protocol: string;
    quarantine: string;
    quarantineExpiry: string;
    quarantineLog: string;
    rateCount: number;
    rateDuration: number;
    rateMode: string;
    rateTrack: string;
    rules?: outputs.IpsSensorEntryRule[];
    severity: string;
    status: string;
    vulnTypes?: outputs.IpsSensorEntryVulnType[];
}

export interface IpsSensorEntryCfe {
    cveEntry: string;
}

export interface IpsSensorEntryExemptIp {
    dstIp: string;
    id: number;
    srcIp: string;
}

export interface IpsSensorEntryRule {
    id: number;
}

export interface IpsSensorEntryVulnType {
    id: number;
}

export interface IpsSensorFilter {
    action: string;
    application: string;
    location: string;
    log: string;
    logPacket: string;
    name: string;
    os: string;
    protocol: string;
    quarantine: string;
    quarantineExpiry: number;
    quarantineLog: string;
    severity: string;
    status: string;
}

export interface IpsSensorOverride {
    action: string;
    exemptIps?: outputs.IpsSensorOverrideExemptIp[];
    log: string;
    logPacket: string;
    quarantine: string;
    quarantineExpiry: number;
    quarantineLog: string;
    ruleId: number;
    status: string;
}

export interface IpsSensorOverrideExemptIp {
    dstIp: string;
    id: number;
    srcIp: string;
}

export interface LogSettingCustomLogField {
    fieldId: string;
}

export interface LogThreatweightApplication {
    category: number;
    id: number;
    level: string;
}

export interface LogThreatweightGeolocation {
    country: string;
    id: number;
    level: string;
}

export interface LogThreatweightIps {
    criticalSeverity: string;
    highSeverity: string;
    infoSeverity: string;
    lowSeverity: string;
    mediumSeverity: string;
}

export interface LogThreatweightLevel {
    critical: number;
    high: number;
    low: number;
    medium: number;
}

export interface LogThreatweightMalware {
    botnetConnection: string;
    commandBlocked: string;
    contentDisarm: string;
    emsThreatFeed: string;
    fileBlocked: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    fsaHighRisk: string;
    fsaMalicious: string;
    fsaMediumRisk: string;
    inlineBlock: string;
    malwareList: string;
    mimefragmented: string;
    oversized: string;
    switchProto: string;
    virusFileTypeExecutable: string;
    virusInfected: string;
    virusOutbreakPrevention: string;
    virusScanError: string;
}

export interface LogThreatweightWeb {
    category: number;
    id: number;
    level: string;
}

export interface LogdiskFilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logfortianalyzer2FilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logfortianalyzer2OverridefilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logfortianalyzer2OverridesettingSerial {
    name: string;
}

export interface Logfortianalyzer2SettingSerial {
    name: string;
}

export interface Logfortianalyzer3FilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logfortianalyzer3OverridefilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logfortianalyzer3OverridesettingSerial {
    name: string;
}

export interface Logfortianalyzer3SettingSerial {
    name: string;
}

export interface LogfortianalyzerFilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface LogfortianalyzerOverridefilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface LogfortianalyzerOverridesettingSerial {
    name: string;
}

export interface LogfortianalyzerSettingSerial {
    name: string;
}

export interface LogfortianalyzercloudFilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface LogfortianalyzercloudOverridefilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface LogfortianalyzercloudSettingSerial {
    name: string;
}

export interface LogfortiguardFilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface LogfortiguardOverridefilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface LogmemoryFilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface LognulldeviceFilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logsyslogd2FilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logsyslogd2OverridefilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logsyslogd2OverridesettingCustomFieldName {
    custom: string;
    id: number;
    name: string;
}

export interface Logsyslogd2SettingCustomFieldName {
    custom: string;
    id: number;
    name: string;
}

export interface Logsyslogd3FilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logsyslogd3OverridefilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logsyslogd3OverridesettingCustomFieldName {
    custom: string;
    id: number;
    name: string;
}

export interface Logsyslogd3SettingCustomFieldName {
    custom: string;
    id: number;
    name: string;
}

export interface Logsyslogd4FilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logsyslogd4OverridefilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface Logsyslogd4OverridesettingCustomFieldName {
    custom: string;
    id: number;
    name: string;
}

export interface Logsyslogd4SettingCustomFieldName {
    custom: string;
    id: number;
    name: string;
}

export interface LogsyslogdFilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface LogsyslogdOverridefilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface LogsyslogdOverridesettingCustomFieldName {
    custom: string;
    id: number;
    name: string;
}

export interface LogsyslogdSettingCustomFieldName {
    custom: string;
    id: number;
    name: string;
}

export interface LogwebtrendsFilterFreeStyle {
    category: string;
    filter: string;
    filterType: string;
    id: number;
}

export interface NsxtServicechainServiceIndex {
    id: number;
    name: string;
    reverseIndex: number;
    vd: string;
}

export interface ReportChartCategorySeries {
    databind: string;
    fontSize: number;
}

export interface ReportChartColumn {
    detailUnit: string;
    detailValue: string;
    footerUnit: string;
    footerValue: string;
    headerValue: string;
    id: number;
    mappings?: outputs.ReportChartColumnMapping[];
}

export interface ReportChartColumnMapping {
    displayname: string;
    id: number;
    op: string;
    value1: string;
    value2: string;
    valueType: string;
}

export interface ReportChartDrillDownChart {
    chartName: string;
    id: number;
    status: string;
}

export interface ReportChartValueSeries {
    databind: string;
}

export interface ReportChartXSeries {
    caption: string;
    captionFontSize: number;
    databind: string;
    fontSize: number;
    isCategory: string;
    labelAngle: string;
    scaleDirection: string;
    scaleFormat: string;
    scaleStep: number;
    scaleUnit: string;
    unit: string;
}

export interface ReportChartYSeries {
    caption: string;
    captionFontSize: number;
    databind: string;
    extraDatabind: string;
    extraY: string;
    extraYLegend: string;
    fontSize: number;
    group: string;
    labelAngle: string;
    unit: string;
    yLegend: string;
}

export interface ReportDatasetField {
    displayname: string;
    id: number;
    name: string;
    type: string;
}

export interface ReportDatasetParameter {
    dataType: string;
    displayName: string;
    field: string;
    id: number;
}

export interface ReportLayoutBodyItem {
    chart: string;
    chartOptions: string;
    column: number;
    content: string;
    description: string;
    drillDownItems: string;
    drillDownTypes: string;
    hide: string;
    id: number;
    imgSrc: string;
    listComponent: string;
    lists?: outputs.ReportLayoutBodyItemList[];
    miscComponent: string;
    parameters?: outputs.ReportLayoutBodyItemParameter[];
    style: string;
    tableCaptionStyle: string;
    tableColumnWidths: string;
    tableEvenRowStyle: string;
    tableHeadStyle: string;
    tableOddRowStyle: string;
    textComponent: string;
    title: string;
    topN: number;
    type: string;
}

export interface ReportLayoutBodyItemList {
    content: string;
    id: number;
}

export interface ReportLayoutBodyItemParameter {
    id: number;
    name: string;
    value: string;
}

export interface ReportLayoutPage {
    columnBreakBefore: string;
    footer?: outputs.ReportLayoutPageFooter;
    header?: outputs.ReportLayoutPageHeader;
    options: string;
    pageBreakBefore: string;
    paper: string;
}

export interface ReportLayoutPageFooter {
    footerItems?: outputs.ReportLayoutPageFooterFooterItem[];
    style: string;
}

export interface ReportLayoutPageFooterFooterItem {
    content: string;
    description: string;
    id: number;
    imgSrc: string;
    style: string;
    type: string;
}

export interface ReportLayoutPageHeader {
    headerItems?: outputs.ReportLayoutPageHeaderHeaderItem[];
    style: string;
}

export interface ReportLayoutPageHeaderHeaderItem {
    content: string;
    description: string;
    id: number;
    imgSrc: string;
    style: string;
    type: string;
}

export interface RouterAccesslist6Rule {
    action: string;
    exactMatch: string;
    flags: number;
    id: number;
    prefix6: string;
}

export interface RouterAccesslistRule {
    action: string;
    exactMatch: string;
    flags: number;
    id: number;
    prefix: string;
    wildcard: string;
}

export interface RouterAspathlistRule {
    action: string;
    id: number;
    regexp: string;
}

export interface RouterBfd6MultihopTemplate {
    authMode: string;
    bfdDesiredMinTx: number;
    bfdDetectMult: number;
    bfdRequiredMinRx: number;
    dst: string;
    id: number;
    md5Key?: string;
    src: string;
}

export interface RouterBfd6Neighbor {
    interface: string;
    ip6Address: string;
}

export interface RouterBfdMultihopTemplate {
    authMode: string;
    bfdDesiredMinTx: number;
    bfdDetectMult: number;
    bfdRequiredMinRx: number;
    dst: string;
    id: number;
    md5Key?: string;
    src: string;
}

export interface RouterBfdNeighbor {
    interface: string;
    ip: string;
}

export interface RouterBgpAdminDistance {
    distance: number;
    id: number;
    neighbourPrefix: string;
    routeList: string;
}

export interface RouterBgpAggregateAddress {
    asSet: string;
    id: number;
    prefix: string;
    summaryOnly: string;
}

export interface RouterBgpAggregateAddress6 {
    asSet: string;
    id: number;
    prefix6: string;
    summaryOnly: string;
}

export interface RouterBgpConfederationPeer {
    peer: string;
}

export interface RouterBgpNeighbor {
    activate: string;
    activate6: string;
    activateEvpn: string;
    activateVpnv4: string;
    activateVpnv6: string;
    additionalPath: string;
    additionalPath6: string;
    additionalPathVpnv4: string;
    additionalPathVpnv6: string;
    advAdditionalPath: number;
    advAdditionalPath6: number;
    advAdditionalPathVpnv4: number;
    advAdditionalPathVpnv6: number;
    advertisementInterval: number;
    allowasIn: number;
    allowasIn6: number;
    allowasInEnable: string;
    allowasInEnable6: string;
    allowasInEnableEvpn: string;
    allowasInEnableVpnv4: string;
    allowasInEnableVpnv6: string;
    allowasInEvpn: number;
    allowasInVpnv4: number;
    allowasInVpnv6: number;
    asOverride: string;
    asOverride6: string;
    attributeUnchanged: string;
    attributeUnchanged6: string;
    attributeUnchangedVpnv4: string;
    attributeUnchangedVpnv6: string;
    authOptions: string;
    bfd: string;
    capabilityDefaultOriginate: string;
    capabilityDefaultOriginate6: string;
    capabilityDynamic: string;
    capabilityGracefulRestart: string;
    capabilityGracefulRestart6: string;
    capabilityGracefulRestartEvpn: string;
    capabilityGracefulRestartVpnv4: string;
    capabilityGracefulRestartVpnv6: string;
    capabilityOrf: string;
    capabilityOrf6: string;
    capabilityRouteRefresh: string;
    conditionalAdvertise6s?: outputs.RouterBgpNeighborConditionalAdvertise6[];
    conditionalAdvertises?: outputs.RouterBgpNeighborConditionalAdvertise[];
    connectTimer: number;
    defaultOriginateRoutemap: string;
    defaultOriginateRoutemap6: string;
    description: string;
    distributeListIn: string;
    distributeListIn6: string;
    distributeListInVpnv4: string;
    distributeListInVpnv6: string;
    distributeListOut: string;
    distributeListOut6: string;
    distributeListOutVpnv4: string;
    distributeListOutVpnv6: string;
    dontCapabilityNegotiate: string;
    ebgpEnforceMultihop: string;
    ebgpMultihopTtl: number;
    filterListIn: string;
    filterListIn6: string;
    filterListInVpnv4: string;
    filterListInVpnv6: string;
    filterListOut: string;
    filterListOut6: string;
    filterListOutVpnv4: string;
    filterListOutVpnv6: string;
    holdtimeTimer: number;
    interface: string;
    ip: string;
    keepAliveTimer: number;
    linkDownFailover: string;
    localAs: number;
    localAsNoPrepend: string;
    localAsReplaceAs: string;
    maximumPrefix: number;
    maximumPrefix6: number;
    maximumPrefixEvpn: number;
    maximumPrefixThreshold: number;
    maximumPrefixThreshold6: number;
    maximumPrefixThresholdEvpn: number;
    maximumPrefixThresholdVpnv4: number;
    maximumPrefixThresholdVpnv6: number;
    maximumPrefixVpnv4: number;
    maximumPrefixVpnv6: number;
    maximumPrefixWarningOnly: string;
    maximumPrefixWarningOnly6: string;
    maximumPrefixWarningOnlyEvpn: string;
    maximumPrefixWarningOnlyVpnv4: string;
    maximumPrefixWarningOnlyVpnv6: string;
    nextHopSelf: string;
    nextHopSelf6: string;
    nextHopSelfRr: string;
    nextHopSelfRr6: string;
    nextHopSelfVpnv4: string;
    nextHopSelfVpnv6: string;
    overrideCapability: string;
    passive: string;
    password?: string;
    prefixListIn: string;
    prefixListIn6: string;
    prefixListInVpnv4: string;
    prefixListInVpnv6: string;
    prefixListOut: string;
    prefixListOut6: string;
    prefixListOutVpnv4: string;
    prefixListOutVpnv6: string;
    remoteAs: number;
    removePrivateAs: string;
    removePrivateAs6: string;
    removePrivateAsEvpn: string;
    removePrivateAsVpnv4: string;
    removePrivateAsVpnv6: string;
    restartTime: number;
    retainStaleTime: number;
    routeMapIn: string;
    routeMapIn6: string;
    routeMapInEvpn: string;
    routeMapInVpnv4: string;
    routeMapInVpnv6: string;
    routeMapOut: string;
    routeMapOut6: string;
    routeMapOut6Preferable: string;
    routeMapOutEvpn: string;
    routeMapOutPreferable: string;
    routeMapOutVpnv4: string;
    routeMapOutVpnv4Preferable: string;
    routeMapOutVpnv6: string;
    routeMapOutVpnv6Preferable: string;
    routeReflectorClient: string;
    routeReflectorClient6: string;
    routeReflectorClientEvpn: string;
    routeReflectorClientVpnv4: string;
    routeReflectorClientVpnv6: string;
    routeServerClient: string;
    routeServerClient6: string;
    routeServerClientEvpn: string;
    routeServerClientVpnv4: string;
    routeServerClientVpnv6: string;
    sendCommunity: string;
    sendCommunity6: string;
    sendCommunityEvpn: string;
    sendCommunityVpnv4: string;
    sendCommunityVpnv6: string;
    shutdown: string;
    softReconfiguration: string;
    softReconfiguration6: string;
    softReconfigurationEvpn: string;
    softReconfigurationVpnv4: string;
    softReconfigurationVpnv6: string;
    staleRoute: string;
    strictCapabilityMatch: string;
    unsuppressMap: string;
    unsuppressMap6: string;
    updateSource: string;
    weight: number;
}

export interface RouterBgpNeighborConditionalAdvertise {
    advertiseRoutemap: string;
    conditionRoutemap: string;
    conditionType: string;
}

export interface RouterBgpNeighborConditionalAdvertise6 {
    advertiseRoutemap: string;
    conditionRoutemap: string;
    conditionType: string;
}

export interface RouterBgpNeighborGroup {
    activate: string;
    activate6: string;
    activateEvpn: string;
    activateVpnv4: string;
    activateVpnv6: string;
    additionalPath: string;
    additionalPath6: string;
    additionalPathVpnv4: string;
    additionalPathVpnv6: string;
    advAdditionalPath: number;
    advAdditionalPath6: number;
    advAdditionalPathVpnv4: number;
    advAdditionalPathVpnv6: number;
    advertisementInterval: number;
    allowasIn: number;
    allowasIn6: number;
    allowasInEnable: string;
    allowasInEnable6: string;
    allowasInEnableEvpn: string;
    allowasInEnableVpnv4: string;
    allowasInEnableVpnv6: string;
    allowasInEvpn: number;
    allowasInVpnv4: number;
    allowasInVpnv6: number;
    asOverride: string;
    asOverride6: string;
    attributeUnchanged: string;
    attributeUnchanged6: string;
    attributeUnchangedVpnv4: string;
    attributeUnchangedVpnv6: string;
    authOptions: string;
    bfd: string;
    capabilityDefaultOriginate: string;
    capabilityDefaultOriginate6: string;
    capabilityDynamic: string;
    capabilityGracefulRestart: string;
    capabilityGracefulRestart6: string;
    capabilityGracefulRestartEvpn: string;
    capabilityGracefulRestartVpnv4: string;
    capabilityGracefulRestartVpnv6: string;
    capabilityOrf: string;
    capabilityOrf6: string;
    capabilityRouteRefresh: string;
    connectTimer: number;
    defaultOriginateRoutemap: string;
    defaultOriginateRoutemap6: string;
    description: string;
    distributeListIn: string;
    distributeListIn6: string;
    distributeListInVpnv4: string;
    distributeListInVpnv6: string;
    distributeListOut: string;
    distributeListOut6: string;
    distributeListOutVpnv4: string;
    distributeListOutVpnv6: string;
    dontCapabilityNegotiate: string;
    ebgpEnforceMultihop: string;
    ebgpMultihopTtl: number;
    filterListIn: string;
    filterListIn6: string;
    filterListInVpnv4: string;
    filterListInVpnv6: string;
    filterListOut: string;
    filterListOut6: string;
    filterListOutVpnv4: string;
    filterListOutVpnv6: string;
    holdtimeTimer: number;
    interface: string;
    keepAliveTimer: number;
    linkDownFailover: string;
    localAs: number;
    localAsNoPrepend: string;
    localAsReplaceAs: string;
    maximumPrefix: number;
    maximumPrefix6: number;
    maximumPrefixEvpn: number;
    maximumPrefixThreshold: number;
    maximumPrefixThreshold6: number;
    maximumPrefixThresholdEvpn: number;
    maximumPrefixThresholdVpnv4: number;
    maximumPrefixThresholdVpnv6: number;
    maximumPrefixVpnv4: number;
    maximumPrefixVpnv6: number;
    maximumPrefixWarningOnly: string;
    maximumPrefixWarningOnly6: string;
    maximumPrefixWarningOnlyEvpn: string;
    maximumPrefixWarningOnlyVpnv4: string;
    maximumPrefixWarningOnlyVpnv6: string;
    name: string;
    nextHopSelf: string;
    nextHopSelf6: string;
    nextHopSelfRr: string;
    nextHopSelfRr6: string;
    nextHopSelfVpnv4: string;
    nextHopSelfVpnv6: string;
    overrideCapability: string;
    passive: string;
    password?: string;
    prefixListIn: string;
    prefixListIn6: string;
    prefixListInVpnv4: string;
    prefixListInVpnv6: string;
    prefixListOut: string;
    prefixListOut6: string;
    prefixListOutVpnv4: string;
    prefixListOutVpnv6: string;
    remoteAs: number;
    remoteAsFilter: string;
    removePrivateAs: string;
    removePrivateAs6: string;
    removePrivateAsEvpn: string;
    removePrivateAsVpnv4: string;
    removePrivateAsVpnv6: string;
    restartTime: number;
    retainStaleTime: number;
    routeMapIn: string;
    routeMapIn6: string;
    routeMapInEvpn: string;
    routeMapInVpnv4: string;
    routeMapInVpnv6: string;
    routeMapOut: string;
    routeMapOut6: string;
    routeMapOut6Preferable: string;
    routeMapOutEvpn: string;
    routeMapOutPreferable: string;
    routeMapOutVpnv4: string;
    routeMapOutVpnv4Preferable: string;
    routeMapOutVpnv6: string;
    routeMapOutVpnv6Preferable: string;
    routeReflectorClient: string;
    routeReflectorClient6: string;
    routeReflectorClientEvpn: string;
    routeReflectorClientVpnv4: string;
    routeReflectorClientVpnv6: string;
    routeServerClient: string;
    routeServerClient6: string;
    routeServerClientEvpn: string;
    routeServerClientVpnv4: string;
    routeServerClientVpnv6: string;
    sendCommunity: string;
    sendCommunity6: string;
    sendCommunityEvpn: string;
    sendCommunityVpnv4: string;
    sendCommunityVpnv6: string;
    shutdown: string;
    softReconfiguration: string;
    softReconfiguration6: string;
    softReconfigurationEvpn: string;
    softReconfigurationVpnv4: string;
    softReconfigurationVpnv6: string;
    staleRoute: string;
    strictCapabilityMatch: string;
    unsuppressMap: string;
    unsuppressMap6: string;
    updateSource: string;
    weight: number;
}

export interface RouterBgpNeighborRange {
    id: number;
    maxNeighborNum: number;
    neighborGroup: string;
    prefix: string;
}

export interface RouterBgpNeighborRange6 {
    id: number;
    maxNeighborNum: number;
    neighborGroup: string;
    prefix6: string;
}

export interface RouterBgpNetwork {
    backdoor: string;
    id: number;
    networkImportCheck: string;
    prefix: string;
    routeMap: string;
}

export interface RouterBgpNetwork6 {
    backdoor: string;
    id: number;
    networkImportCheck: string;
    prefix6: string;
    routeMap: string;
}

export interface RouterBgpRedistribute {
    name: string;
    routeMap?: string;
    status: string;
}

export interface RouterBgpRedistribute6 {
    name: string;
    routeMap?: string;
    status: string;
}

export interface RouterBgpVrf {
    exportRts?: outputs.RouterBgpVrfExportRt[];
    importRouteMap: string;
    importRts?: outputs.RouterBgpVrfImportRt[];
    leakTargets?: outputs.RouterBgpVrfLeakTarget[];
    rd: string;
    role: string;
    vrf: string;
}

export interface RouterBgpVrf6 {
    exportRts?: outputs.RouterBgpVrf6ExportRt[];
    importRouteMap: string;
    importRts?: outputs.RouterBgpVrf6ImportRt[];
    leakTargets?: outputs.RouterBgpVrf6LeakTarget[];
    rd: string;
    role: string;
    vrf: string;
}

export interface RouterBgpVrf6ExportRt {
    routeTarget: string;
}

export interface RouterBgpVrf6ImportRt {
    routeTarget: string;
}

export interface RouterBgpVrf6LeakTarget {
    interface: string;
    routeMap: string;
    vrf: string;
}

export interface RouterBgpVrfExportRt {
    routeTarget: string;
}

export interface RouterBgpVrfImportRt {
    routeTarget: string;
}

export interface RouterBgpVrfLeak {
    targets?: outputs.RouterBgpVrfLeakTarget[];
    vrf: string;
}

export interface RouterBgpVrfLeak6 {
    targets?: outputs.RouterBgpVrfLeak6Target[];
    vrf: string;
}

export interface RouterBgpVrfLeak6Target {
    interface: string;
    routeMap: string;
    vrf: string;
}

export interface RouterBgpVrfLeakTarget {
    interface: string;
    routeMap: string;
    vrf: string;
}

export interface RouterCommunitylistRule {
    action: string;
    id: number;
    match: string;
    regexp: string;
}

export interface RouterExtcommunitylistRule {
    action: string;
    id: number;
    match: string;
    regexp: string;
    type: string;
}

export interface RouterIsisIsisInterface {
    authKeychainL1: string;
    authKeychainL2: string;
    authModeL1: string;
    authModeL2: string;
    authPasswordL1?: string;
    authPasswordL2?: string;
    authSendOnlyL1: string;
    authSendOnlyL2: string;
    circuitType: string;
    csnpIntervalL1: number;
    csnpIntervalL2: number;
    helloIntervalL1: number;
    helloIntervalL2: number;
    helloMultiplierL1: number;
    helloMultiplierL2: number;
    helloPadding: string;
    lspInterval: number;
    lspRetransmitInterval: number;
    meshGroup: string;
    meshGroupId: number;
    metricL1: number;
    metricL2: number;
    name: string;
    networkType: string;
    priorityL1: number;
    priorityL2: number;
    status: string;
    status6: string;
    wideMetricL1: number;
    wideMetricL2: number;
}

export interface RouterIsisIsisNet {
    id: number;
    net: string;
}

export interface RouterIsisRedistribute {
    level: string;
    metric: number;
    metricType: string;
    protocol: string;
    routemap: string;
    status: string;
}

export interface RouterIsisRedistribute6 {
    level: string;
    metric: number;
    metricType: string;
    protocol: string;
    routemap: string;
    status: string;
}

export interface RouterIsisSummaryAddress {
    id: number;
    level: string;
    prefix: string;
}

export interface RouterIsisSummaryAddress6 {
    id: number;
    level: string;
    prefix6: string;
}

export interface RouterKeychainKey {
    acceptLifetime: string;
    algorithm: string;
    id: number;
    keyString: string;
    sendLifetime: string;
}

export interface RouterMulticast6Interface {
    helloHoldtime: number;
    helloInterval: number;
    name: string;
}

export interface RouterMulticast6PimSmGlobal {
    registerRateLimit: number;
    rpAddresses?: outputs.RouterMulticast6PimSmGlobalRpAddress[];
}

export interface RouterMulticast6PimSmGlobalRpAddress {
    id: number;
    ip6Address: string;
}

export interface RouterMulticastInterface {
    bfd: string;
    ciscoExcludeGenid: string;
    drPriority: number;
    helloHoldtime: number;
    helloInterval: number;
    igmp?: outputs.RouterMulticastInterfaceIgmp;
    joinGroups?: outputs.RouterMulticastInterfaceJoinGroup[];
    multicastFlow: string;
    name: string;
    neighbourFilter: string;
    passive: string;
    pimMode: string;
    propagationDelay: number;
    rpCandidate: string;
    rpCandidateGroup: string;
    rpCandidateInterval: number;
    rpCandidatePriority: number;
    rpfNbrFailBack: string;
    rpfNbrFailBackFilter: string;
    stateRefreshInterval: number;
    staticGroup: string;
    ttlThreshold: number;
}

export interface RouterMulticastInterfaceIgmp {
    accessGroup: string;
    immediateLeaveGroup: string;
    lastMemberQueryCount: number;
    lastMemberQueryInterval: number;
    queryInterval: number;
    queryMaxResponseTime: number;
    queryTimeout: number;
    routerAlertCheck: string;
    version: string;
}

export interface RouterMulticastInterfaceJoinGroup {
    address: string;
}

export interface RouterMulticastPimSmGlobal {
    acceptRegisterList: string;
    acceptSourceList: string;
    bsrAllowQuickRefresh: string;
    bsrCandidate: string;
    bsrHash: number;
    bsrInterface: string;
    bsrPriority: number;
    ciscoCrpPrefix: string;
    ciscoIgnoreRpSetPriority: string;
    ciscoRegisterChecksum: string;
    ciscoRegisterChecksumGroup: string;
    joinPruneHoldtime: number;
    messageInterval: number;
    nullRegisterRetries: number;
    pimUseSdwan: string;
    registerRateLimit: number;
    registerRpReachability: string;
    registerSource: string;
    registerSourceInterface: string;
    registerSourceIp: string;
    registerSupression: number;
    rpAddresses?: outputs.RouterMulticastPimSmGlobalRpAddress[];
    rpRegisterKeepalive: number;
    sptThreshold: string;
    sptThresholdGroup: string;
    ssm: string;
    ssmRange: string;
}

export interface RouterMulticastPimSmGlobalRpAddress {
    group: string;
    id: number;
    ipAddress: string;
}

export interface RouterMulticastflowFlow {
    groupAddr: string;
    id: number;
    sourceAddr: string;
}

export interface RouterOspf6Area {
    authentication: string;
    defaultCost: number;
    id: string;
    ipsecAuthAlg: string;
    ipsecEncAlg: string;
    ipsecKeys?: outputs.RouterOspf6AreaIpsecKey[];
    keyRolloverInterval: number;
    nssaDefaultInformationOriginate: string;
    nssaDefaultInformationOriginateMetric: number;
    nssaDefaultInformationOriginateMetricType: string;
    nssaRedistribution: string;
    nssaTranslatorRole: string;
    ranges?: outputs.RouterOspf6AreaRange[];
    stubType: string;
    type: string;
    virtualLinks?: outputs.RouterOspf6AreaVirtualLink[];
}

export interface RouterOspf6AreaIpsecKey {
    authKey?: string;
    encKey?: string;
    spi: number;
}

export interface RouterOspf6AreaRange {
    advertise: string;
    id: number;
    prefix6: string;
}

export interface RouterOspf6AreaVirtualLink {
    authentication: string;
    deadInterval: number;
    helloInterval: number;
    ipsecAuthAlg: string;
    ipsecEncAlg: string;
    ipsecKeys?: outputs.RouterOspf6AreaVirtualLinkIpsecKey[];
    keyRolloverInterval: number;
    name: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface RouterOspf6AreaVirtualLinkIpsecKey {
    authKey?: string;
    encKey?: string;
    spi: number;
}

export interface RouterOspf6Ospf6Interface {
    areaId: string;
    authentication: string;
    bfd: string;
    cost: number;
    deadInterval: number;
    helloInterval: number;
    interface: string;
    ipsecAuthAlg: string;
    ipsecEncAlg: string;
    ipsecKeys?: outputs.RouterOspf6Ospf6InterfaceIpsecKey[];
    keyRolloverInterval: number;
    mtu: number;
    mtuIgnore: string;
    name: string;
    neighbors?: outputs.RouterOspf6Ospf6InterfaceNeighbor[];
    networkType: string;
    priority: number;
    retransmitInterval: number;
    status: string;
    transmitDelay: number;
}

export interface RouterOspf6Ospf6InterfaceIpsecKey {
    authKey?: string;
    encKey?: string;
    spi: number;
}

export interface RouterOspf6Ospf6InterfaceNeighbor {
    cost: number;
    ip6: string;
    pollInterval: number;
    priority: number;
}

export interface RouterOspf6PassiveInterface {
    name: string;
}

export interface RouterOspf6Redistribute {
    metric: number;
    metricType: string;
    name: string;
    routemap: string;
    status: string;
}

export interface RouterOspf6SummaryAddress {
    advertise: string;
    id: number;
    prefix6: string;
    tag: number;
}

export interface RouterOspfArea {
    authentication: string;
    comments?: string;
    defaultCost: number;
    filterLists?: outputs.RouterOspfAreaFilterList[];
    id: string;
    nssaDefaultInformationOriginate: string;
    nssaDefaultInformationOriginateMetric: number;
    nssaDefaultInformationOriginateMetricType: string;
    nssaRedistribution: string;
    nssaTranslatorRole: string;
    ranges?: outputs.RouterOspfAreaRange[];
    shortcut: string;
    stubType: string;
    type: string;
    virtualLinks?: outputs.RouterOspfAreaVirtualLink[];
}

export interface RouterOspfAreaFilterList {
    direction: string;
    id: number;
    list: string;
}

export interface RouterOspfAreaRange {
    advertise: string;
    id: number;
    prefix: string;
    substitute: string;
    substituteStatus: string;
}

export interface RouterOspfAreaVirtualLink {
    authentication: string;
    authenticationKey?: string;
    deadInterval: number;
    helloInterval: number;
    keychain: string;
    md5Key: string;
    md5Keychain: string;
    md5Keys?: outputs.RouterOspfAreaVirtualLinkMd5Key[];
    name: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface RouterOspfAreaVirtualLinkMd5Key {
    id: number;
    keyString?: string;
}

export interface RouterOspfDistributeList {
    accessList: string;
    id: number;
    protocol: string;
}

export interface RouterOspfNeighbor {
    cost: number;
    id: number;
    ip: string;
    pollInterval: number;
    priority: number;
}

export interface RouterOspfNetwork {
    area: string;
    comments?: string;
    id: number;
    prefix: string;
}

export interface RouterOspfOspfInterface {
    authentication: string;
    authenticationKey?: string;
    bfd: string;
    comments?: string;
    cost: number;
    databaseFilterOut: string;
    deadInterval: number;
    helloInterval: number;
    helloMultiplier: number;
    interface: string;
    ip: string;
    keychain: string;
    md5Key: string;
    md5Keychain: string;
    md5Keys?: outputs.RouterOspfOspfInterfaceMd5Key[];
    mtu: number;
    mtuIgnore: string;
    name: string;
    networkType: string;
    prefixLength: number;
    priority: number;
    resyncTimeout: number;
    retransmitInterval: number;
    status: string;
    transmitDelay: number;
}

export interface RouterOspfOspfInterfaceMd5Key {
    id: number;
    keyString?: string;
}

export interface RouterOspfPassiveInterface {
    name: string;
}

export interface RouterOspfRedistribute {
    metric: number;
    metricType: string;
    name: string;
    routemap: string;
    status: string;
    tag: number;
}

export interface RouterOspfSummaryAddress {
    advertise: string;
    id: number;
    prefix: string;
    tag: number;
}

export interface RouterPolicy6Dstaddr {
    name: string;
}

export interface RouterPolicy6InternetServiceCustom {
    name: string;
}

export interface RouterPolicy6InternetServiceId {
    id: number;
}

export interface RouterPolicy6Srcaddr {
    name: string;
}

export interface RouterPolicyDst {
    subnet: string;
}

export interface RouterPolicyDstaddr {
    name: string;
}

export interface RouterPolicyInputDevice {
    name: string;
}

export interface RouterPolicyInternetServiceCustom {
    name: string;
}

export interface RouterPolicyInternetServiceId {
    id: number;
}

export interface RouterPolicySrc {
    subnet: string;
}

export interface RouterPolicySrcaddr {
    name: string;
}

export interface RouterPrefixlist6Rule {
    action: string;
    flags: number;
    ge: number;
    id: number;
    le: number;
    prefix6: string;
}

export interface RouterPrefixlistRule {
    action: string;
    flags: number;
    ge: number;
    id: number;
    le: number;
    prefix: string;
}

export interface RouterRipDistance {
    accessList: string;
    distance: number;
    id: number;
    prefix: string;
}

export interface RouterRipDistributeList {
    direction: string;
    id: number;
    interface: string;
    listname: string;
    status: string;
}

export interface RouterRipInterface {
    authKeychain: string;
    authMode: string;
    authString?: string;
    flags: number;
    name: string;
    receiveVersion: string;
    sendVersion: string;
    sendVersion2Broadcast: string;
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface RouterRipNeighbor {
    id: number;
    ip: string;
}

export interface RouterRipNetwork {
    id: number;
    prefix: string;
}

export interface RouterRipOffsetList {
    accessList: string;
    direction: string;
    id: number;
    interface: string;
    offset: number;
    status: string;
}

export interface RouterRipPassiveInterface {
    name: string;
}

export interface RouterRipRedistribute {
    metric: number;
    name: string;
    routemap: string;
    status: string;
}

export interface RouterRipngAggregateAddress {
    id: number;
    prefix6: string;
}

export interface RouterRipngDistance {
    accessList6: string;
    distance: number;
    id: number;
    prefix6: string;
}

export interface RouterRipngDistributeList {
    direction: string;
    id: number;
    interface: string;
    listname: string;
    status: string;
}

export interface RouterRipngInterface {
    flags: number;
    name: string;
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface RouterRipngNeighbor {
    id: number;
    interface: string;
    ip6: string;
}

export interface RouterRipngNetwork {
    id: number;
    prefix: string;
}

export interface RouterRipngOffsetList {
    accessList6: string;
    direction: string;
    id: number;
    interface: string;
    offset: number;
    status: string;
}

export interface RouterRipngPassiveInterface {
    name: string;
}

export interface RouterRipngRedistribute {
    metric: number;
    name: string;
    routemap: string;
    status: string;
}

export interface RouterRoutemapRule {
    action: string;
    id: number;
    matchAsPath: string;
    matchCommunity: string;
    matchCommunityExact: string;
    matchExtcommunity: string;
    matchExtcommunityExact: string;
    matchFlags: number;
    matchInterface: string;
    matchIp6Address: string;
    matchIp6Nexthop: string;
    matchIpAddress: string;
    matchIpNexthop: string;
    matchMetric: number;
    matchOrigin: string;
    matchRouteType: string;
    matchTag: number;
    matchVrf: number;
    setAggregatorAs: number;
    setAggregatorIp: string;
    setAspathAction: string;
    setAspaths?: outputs.RouterRoutemapRuleSetAspath[];
    setAtomicAggregate: string;
    setCommunities?: outputs.RouterRoutemapRuleSetCommunity[];
    setCommunityAdditive: string;
    setCommunityDelete: string;
    setDampeningMaxSuppress: number;
    setDampeningReachabilityHalfLife: number;
    setDampeningReuse: number;
    setDampeningSuppress: number;
    setDampeningUnreachabilityHalfLife: number;
    setExtcommunityRts?: outputs.RouterRoutemapRuleSetExtcommunityRt[];
    setExtcommunitySoos?: outputs.RouterRoutemapRuleSetExtcommunitySoo[];
    setFlags: number;
    setIp6Nexthop: string;
    setIp6NexthopLocal: string;
    setIpNexthop: string;
    setIpPrefsrc: string;
    setLocalPreference: number;
    setMetric: number;
    setMetricType: string;
    setOrigin: string;
    setOriginatorId: string;
    setPriority: number;
    setRouteTag: number;
    setTag: number;
    setVpnv4Nexthop: string;
    setVpnv6Nexthop: string;
    setVpnv6NexthopLocal: string;
    setWeight: number;
}

export interface RouterRoutemapRuleSetAspath {
    as: string;
}

export interface RouterRoutemapRuleSetCommunity {
    community: string;
}

export interface RouterRoutemapRuleSetExtcommunityRt {
    community: string;
}

export interface RouterRoutemapRuleSetExtcommunitySoo {
    community: string;
}

export interface RouterStatic6SdwanZone {
    name: string;
}

export interface RouterStaticSdwanZone {
    name: string;
}

export interface RouterbgpNeighborConditionalAdvertise {
    advertiseRoutemap: string;
    conditionRoutemap: string;
    conditionType: string;
}

export interface RouterbgpNeighborConditionalAdvertise6 {
    advertiseRoutemap: string;
    conditionRoutemap: string;
    conditionType: string;
}

export interface Routerospf6Ospf6interfaceIpsecKey {
    authKey?: string;
    encKey?: string;
    spi: number;
}

export interface Routerospf6Ospf6interfaceNeighbor {
    cost: number;
    ip6: string;
    pollInterval: number;
    priority: number;
}

export interface RouterospfOspfinterfaceMd5Key {
    id: number;
    keyString?: string;
}

export interface RuleFmwpMetadata {
    id: number;
    metaid: number;
    valueid: number;
}

export interface RuleOtdtMetadata {
    id: number;
    metaid: number;
    valueid: number;
}

export interface RuleOtdtParameter {
    name: string;
}

export interface RuleOtvpMetadata {
    id: number;
    metaid: number;
    valueid: number;
}

export interface SctpfilterProfilePpidFilter {
    action: string;
    comment?: string;
    id: number;
    ppid: number;
}

export interface SpamfilterBwlEntry {
    action: string;
    addrType: string;
    emailPattern: string;
    id: number;
    ip4Subnet: string;
    ip6Subnet: string;
    patternType: string;
    status: string;
    type: string;
}

export interface SpamfilterBwordEntry {
    action: string;
    id: number;
    language: string;
    pattern: string;
    patternType: string;
    score: number;
    status: string;
    where: string;
}

export interface SpamfilterDnsblEntry {
    action: string;
    id: number;
    server: string;
    status: string;
}

export interface SpamfilterIptrustEntry {
    addrType: string;
    id: number;
    ip4Subnet: string;
    ip6Subnet: string;
    status: string;
}

export interface SpamfilterMheaderEntry {
    action: string;
    fieldbody: string;
    fieldname: string;
    id: number;
    patternType: string;
    status: string;
}

export interface SpamfilterProfileGmail {
    log: string;
}

export interface SpamfilterProfileImap {
    action: string;
    log: string;
    tagMsg: string;
    tagType: string;
}

export interface SpamfilterProfileMapi {
    action: string;
    log: string;
}

export interface SpamfilterProfileMsnHotmail {
    log: string;
}

export interface SpamfilterProfilePop3 {
    action: string;
    log: string;
    tagMsg: string;
    tagType: string;
}

export interface SpamfilterProfileSmtp {
    action: string;
    hdrip: string;
    localOverride: string;
    log: string;
    tagMsg: string;
    tagType: string;
}

export interface SpamfilterProfileYahooMail {
    log: string;
}

export interface SshfilterProfileFileFilter {
    entries?: outputs.SshfilterProfileFileFilterEntry[];
    log: string;
    scanArchiveContents: string;
    status: string;
}

export interface SshfilterProfileFileFilterEntry {
    action: string;
    comment?: string;
    direction: string;
    fileTypes?: outputs.SshfilterProfileFileFilterEntryFileType[];
    filter: string;
    passwordProtected: string;
}

export interface SshfilterProfileFileFilterEntryFileType {
    name: string;
}

export interface SshfilterProfileShellCommand {
    action: string;
    alert: string;
    id: number;
    log: string;
    pattern: string;
    severity: string;
    type: string;
}

export interface SwitchcontrollerDynamicportpolicyPolicy {
    bouncePortLink: string;
    category: string;
    description: string;
    family: string;
    host: string;
    hwVendor: string;
    interfaceTags?: outputs.SwitchcontrollerDynamicportpolicyPolicyInterfaceTag[];
    lldpProfile: string;
    mac: string;
    matchPeriod: number;
    matchType: string;
    n8021x: string;
    name: string;
    qosPolicy: string;
    status: string;
    type: string;
    vlanPolicy: string;
}

export interface SwitchcontrollerDynamicportpolicyPolicyInterfaceTag {
    tagName: string;
}

export interface SwitchcontrollerFlowtrackingAggregate {
    id: number;
    ip: string;
}

export interface SwitchcontrollerFlowtrackingCollector {
    ip: string;
    name: string;
    port: number;
    transport: string;
}

export interface SwitchcontrollerFortilinksettingsNacPorts {
    bounceNacPort: string;
    lanSegment: string;
    memberChange: number;
    nacLanInterface: string;
    nacSegmentVlans?: outputs.SwitchcontrollerFortilinksettingsNacPortsNacSegmentVlan[];
    onboardingVlan: string;
    parentKey: string;
}

export interface SwitchcontrollerFortilinksettingsNacPortsNacSegmentVlan {
    vlanName: string;
}

export interface SwitchcontrollerGlobalCustomCommand {
    commandEntry: string;
    commandName: string;
}

export interface SwitchcontrollerGlobalDisableDiscovery {
    name: string;
}

export interface SwitchcontrollerLldpprofileCustomTlv {
    informationString: string;
    name: string;
    oui: string;
    subtype: number;
}

export interface SwitchcontrollerLldpprofileMedLocationService {
    name: string;
    status: string;
    sysLocationId: string;
}

export interface SwitchcontrollerLldpprofileMedNetworkPolicy {
    assignVlan: string;
    dscp: number;
    name: string;
    priority: number;
    status: string;
    vlan: number;
    vlanIntf: string;
}

export interface SwitchcontrollerLocationAddressCivic {
    additional: string;
    additionalCode: string;
    block: string;
    branchRoad: string;
    building: string;
    city: string;
    cityDivision: string;
    country: string;
    countrySubdivision: string;
    county: string;
    direction: string;
    floor: string;
    landmark: string;
    language: string;
    name: string;
    number: string;
    numberSuffix: string;
    parentKey: string;
    placeType: string;
    postOfficeBox: string;
    postalCommunity: string;
    primaryRoad: string;
    roadSection: string;
    room: string;
    script: string;
    seat: string;
    street: string;
    streetNamePostMod: string;
    streetNamePreMod: string;
    streetSuffix: string;
    subBranchRoad: string;
    trailingStrSuffix: string;
    unit: string;
    zip: string;
}

export interface SwitchcontrollerLocationCoordinates {
    altitude: string;
    altitudeUnit: string;
    datum: string;
    latitude: string;
    longitude: string;
    parentKey: string;
}

export interface SwitchcontrollerLocationElinNumber {
    elinNum: string;
    parentKey: string;
}

export interface SwitchcontrollerManagedswitchCustomCommand {
    commandEntry: string;
    commandName: string;
}

export interface SwitchcontrollerManagedswitchDhcpSnoopingStaticClient {
    ip: string;
    mac: string;
    name: string;
    port: string;
    vlan: string;
}

export interface SwitchcontrollerManagedswitchIgmpSnooping {
    agingTime: number;
    floodUnknownMulticast: string;
    localOverride: string;
    vlans?: outputs.SwitchcontrollerManagedswitchIgmpSnoopingVlan[];
}

export interface SwitchcontrollerManagedswitchIgmpSnoopingVlan {
    proxy: string;
    querier: string;
    querierAddr: string;
    version: number;
    vlanName: string;
}

export interface SwitchcontrollerManagedswitchIpSourceGuard {
    bindingEntries?: outputs.SwitchcontrollerManagedswitchIpSourceGuardBindingEntry[];
    description: string;
    port: string;
}

export interface SwitchcontrollerManagedswitchIpSourceGuardBindingEntry {
    entryName: string;
    ip: string;
    mac: string;
}

export interface SwitchcontrollerManagedswitchMirror {
    dst: string;
    name: string;
    srcEgresses?: outputs.SwitchcontrollerManagedswitchMirrorSrcEgress[];
    srcIngresses?: outputs.SwitchcontrollerManagedswitchMirrorSrcIngress[];
    status: string;
    switchingPacket: string;
}

export interface SwitchcontrollerManagedswitchMirrorSrcEgress {
    name: string;
}

export interface SwitchcontrollerManagedswitchMirrorSrcIngress {
    name: string;
}

export interface SwitchcontrollerManagedswitchN8021xSettings {
    linkDownAuth: string;
    localOverride: string;
    mabReauth: string;
    macCalledStationDelimiter: string;
    macCallingStationDelimiter: string;
    macCase: string;
    macPasswordDelimiter: string;
    macUsernameDelimiter: string;
    maxReauthAttempt: number;
    reauthPeriod: number;
    txPeriod: number;
}

export interface SwitchcontrollerManagedswitchPort {
    accessMode: string;
    aclGroups?: outputs.SwitchcontrollerManagedswitchPortAclGroup[];
    aggregatorMode: string;
    allowArpMonitor: string;
    allowedVlans?: outputs.SwitchcontrollerManagedswitchPortAllowedVlan[];
    allowedVlansAll: string;
    arpInspectionTrust: string;
    authenticatedPort: number;
    bundle: string;
    description: string;
    dhcpSnoopOption82Overrides?: outputs.SwitchcontrollerManagedswitchPortDhcpSnoopOption82Override[];
    dhcpSnoopOption82Trust: string;
    dhcpSnooping: string;
    discardMode: string;
    edgePort: string;
    encryptedPort: number;
    exportTags?: outputs.SwitchcontrollerManagedswitchPortExportTag[];
    exportTo: string;
    exportToPool: string;
    exportToPoolFlag: number;
    fallbackPort: string;
    fecCapable: number;
    fecState: string;
    fgtPeerDeviceName: string;
    fgtPeerPortName: string;
    fiberPort: number;
    flags: number;
    flapDuration: number;
    flapRate: number;
    flapTimeout: number;
    flapguard: string;
    flowControl: string;
    fortilinkPort: number;
    fortiswitchAcls?: outputs.SwitchcontrollerManagedswitchPortFortiswitchAcl[];
    igmpSnooping: string;
    igmpSnoopingFloodReports: string;
    igmpsFloodReports: string;
    igmpsFloodTraffic: string;
    interfaceTags?: outputs.SwitchcontrollerManagedswitchPortInterfaceTag[];
    ipSourceGuard: string;
    islLocalTrunkName: string;
    islPeerDeviceName: string;
    islPeerDeviceSn: string;
    islPeerPortName: string;
    lacpSpeed: string;
    learningLimit: number;
    linkStatus: string;
    lldpProfile: string;
    lldpStatus: string;
    loopGuard: string;
    loopGuardTimeout: number;
    macAddr: string;
    matchedDppIntfTags: string;
    matchedDppPolicy: string;
    maxBundle: number;
    mcastSnoopingFloodTraffic: string;
    mclag: string;
    mclagIclPort: number;
    mediaType: string;
    memberWithdrawalBehavior: string;
    members?: outputs.SwitchcontrollerManagedswitchPortMember[];
    minBundle: number;
    mode: string;
    p2pPort: number;
    packetSampleRate: number;
    packetSampler: string;
    pauseMeter: number;
    pauseMeterResume: string;
    poeCapable: number;
    poeMaxPower: string;
    poeModeBtCabable: number;
    poePortMode: string;
    poePortPower: string;
    poePortPriority: string;
    poePreStandardDetection: string;
    poeStandard: string;
    poeStatus: string;
    portName: string;
    portNumber: number;
    portOwner: string;
    portPolicy: string;
    portPrefixType: number;
    portSecurityPolicy: string;
    portSelectionCriteria: string;
    ptpPolicy: string;
    ptpStatus: string;
    qosPolicy: string;
    restrictedAuthPort: number;
    rpvstPort: string;
    sampleDirection: string;
    sflowCounterInterval: number;
    sflowSampleRate: number;
    sflowSampler: string;
    speed: string;
    speedMask: number;
    stackingPort: number;
    status: string;
    stickyMac: string;
    stormControlPolicy: string;
    stpBpduGuard: string;
    stpBpduGuardTimeout: number;
    stpRootGuard: string;
    stpState: string;
    switchId: string;
    type: string;
    untaggedVlans?: outputs.SwitchcontrollerManagedswitchPortUntaggedVlan[];
    virtualPort: number;
    vlan: string;
}

export interface SwitchcontrollerManagedswitchPortAclGroup {
    name: string;
}

export interface SwitchcontrollerManagedswitchPortAllowedVlan {
    vlanName: string;
}

export interface SwitchcontrollerManagedswitchPortDhcpSnoopOption82Override {
    circuitId: string;
    remoteId: string;
    vlanName: string;
}

export interface SwitchcontrollerManagedswitchPortExportTag {
    tagName: string;
}

export interface SwitchcontrollerManagedswitchPortFortiswitchAcl {
    id: number;
}

export interface SwitchcontrollerManagedswitchPortInterfaceTag {
    tagName: string;
}

export interface SwitchcontrollerManagedswitchPortMember {
    memberName: string;
}

export interface SwitchcontrollerManagedswitchPortUntaggedVlan {
    vlanName: string;
}

export interface SwitchcontrollerManagedswitchRemoteLog {
    csv: string;
    facility: string;
    name: string;
    port: number;
    server: string;
    severity: string;
    status: string;
}

export interface SwitchcontrollerManagedswitchRouteOffloadRouter {
    routerIp: string;
    vlanName: string;
}

export interface SwitchcontrollerManagedswitchSnmpCommunity {
    events: string;
    hosts?: outputs.SwitchcontrollerManagedswitchSnmpCommunityHost[];
    id: number;
    name: string;
    queryV1Port: number;
    queryV1Status: string;
    queryV2cPort: number;
    queryV2cStatus: string;
    status: string;
    trapV1Lport: number;
    trapV1Rport: number;
    trapV1Status: string;
    trapV2cLport: number;
    trapV2cRport: number;
    trapV2cStatus: string;
}

export interface SwitchcontrollerManagedswitchSnmpCommunityHost {
    id: number;
    ip: string;
}

export interface SwitchcontrollerManagedswitchSnmpSysinfo {
    contactInfo: string;
    description: string;
    engineId: string;
    location: string;
    status: string;
}

export interface SwitchcontrollerManagedswitchSnmpTrapThreshold {
    trapHighCpuThreshold: number;
    trapLogFullThreshold: number;
    trapLowMemoryThreshold: number;
}

export interface SwitchcontrollerManagedswitchSnmpUser {
    authProto: string;
    authPwd?: string;
    name: string;
    privProto: string;
    privPwd?: string;
    queries: string;
    queryPort: number;
    securityLevel: string;
}

export interface SwitchcontrollerManagedswitchStaticMac {
    description: string;
    id: number;
    interface: string;
    mac: string;
    type: string;
    vlan: string;
}

export interface SwitchcontrollerManagedswitchStormControl {
    broadcast: string;
    localOverride: string;
    rate: number;
    unknownMulticast: string;
    unknownUnicast: string;
}

export interface SwitchcontrollerManagedswitchStpInstance {
    id: string;
    priority: string;
}

export interface SwitchcontrollerManagedswitchStpSettings {
    forwardTime: number;
    helloTime: number;
    localOverride: string;
    maxAge: number;
    maxHops: number;
    name: string;
    pendingTimer: number;
    revision: number;
    status: string;
}

export interface SwitchcontrollerManagedswitchSwitchLog {
    localOverride: string;
    severity: string;
    status: string;
}

export interface SwitchcontrollerManagedswitchSwitchStpSettings {
    status: string;
}

export interface SwitchcontrollerManagedswitchVlan {
    assignmentPriority: number;
    vlanName: string;
}

export interface SwitchcontrollerQuarantineTarget {
    description: string;
    entryId: number;
    mac: string;
    tags?: outputs.SwitchcontrollerQuarantineTargetTag[];
}

export interface SwitchcontrollerQuarantineTargetTag {
    tags: string;
}

export interface SwitchcontrollerSnmpcommunityHost {
    id: number;
    ip: string;
}

export interface SwitchcontrollerStpinstanceVlanRange {
    vlanName: string;
}

export interface SwitchcontrollerSwitchgroupMember {
    name: string;
    switchId: string;
}

export interface SwitchcontrollerTrafficsnifferTargetIp {
    description: string;
    ip: string;
}

export interface SwitchcontrollerTrafficsnifferTargetMac {
    description: string;
    mac: string;
}

export interface SwitchcontrollerTrafficsnifferTargetPort {
    description: string;
    inPorts?: outputs.SwitchcontrollerTrafficsnifferTargetPortInPort[];
    outPorts?: outputs.SwitchcontrollerTrafficsnifferTargetPortOutPort[];
    switchId: string;
}

export interface SwitchcontrollerTrafficsnifferTargetPortInPort {
    name: string;
}

export interface SwitchcontrollerTrafficsnifferTargetPortOutPort {
    name: string;
}

export interface SwitchcontrollerVlanPortalMessageOverrides {
    authDisclaimerPage: string;
    authLoginFailedPage: string;
    authLoginPage: string;
    authRejectPage: string;
}

export interface SwitchcontrollerVlanSelectedUsergroup {
    name: string;
}

export interface SwitchcontrollerVlanpolicyAllowedVlan {
    vlanName: string;
}

export interface SwitchcontrollerVlanpolicyUntaggedVlan {
    vlanName: string;
}

export interface SwitchcontrolleraclGroupIngress {
    id: number;
}

export interface SwitchcontrolleraclIngressAction {
    count: string;
    drop: string;
}

export interface SwitchcontrolleraclIngressClassifier {
    dstIpPrefix: string;
    dstMac: string;
    srcIpPrefix: string;
    srcMac: string;
    vlan: number;
}

export interface SwitchcontrollerautoconfigCustomSwitchBinding {
    policy: string;
    switchId: string;
}

export interface SwitchcontrollerqosIpdscpmapMap {
    cosQueue: number;
    diffserv: string;
    ipPrecedence: string;
    name: string;
    value: string;
}

export interface SwitchcontrollerqosQueuepolicyCosQueue {
    description: string;
    dropPolicy: string;
    ecn: string;
    maxRate: number;
    maxRatePercent: number;
    minRate: number;
    minRatePercent: number;
    name: string;
    weight: number;
}

export interface Switchcontrollersecuritypolicy8021XUserGroup {
    name: string;
}

export interface SystemAccprofileFwgrpPermission {
    address: string;
    others: string;
    policy: string;
    schedule: string;
    service: string;
}

export interface SystemAccprofileLoggrpPermission {
    config: string;
    dataAccess: string;
    reportAccess: string;
    threatWeight: string;
}

export interface SystemAccprofileNetgrpPermission {
    cfg: string;
    packetCapture: string;
    routeCfg: string;
}

export interface SystemAccprofileSysgrpPermission {
    admin: string;
    cfg: string;
    mnt: string;
    upd: string;
}

export interface SystemAccprofileUtmgrpPermission {
    antivirus: string;
    applicationControl: string;
    casb: string;
    dataLeakPrevention: string;
    dataLossPrevention: string;
    dlp: string;
    dnsfilter: string;
    emailfilter: string;
    endpointControl: string;
    fileFilter: string;
    icap: string;
    ips: string;
    spamfilter: string;
    videofilter: string;
    virtualPatch: string;
    voip: string;
    waf: string;
    webfilter: string;
}

export interface SystemAcmeAccount {
    caUrl: string;
    email: string;
    id: string;
    privatekey: string;
    status: string;
    url: string;
}

export interface SystemAcmeInterface {
    interfaceName: string;
}

export interface SystemAdminGuestUsergroup {
    name: string;
}

export interface SystemAdminGuiDashboard {
    columns: number;
    id: number;
    layoutType: string;
    name: string;
    scope: string;
    widgets?: outputs.SystemAdminGuiDashboardWidget[];
}

export interface SystemAdminGuiDashboardWidget {
    fabricDevice: string;
    filters?: outputs.SystemAdminGuiDashboardWidgetFilter[];
    height: number;
    id: number;
    industry: string;
    interface: string;
    region: string;
    reportBy: string;
    sortBy: string;
    timeframe: string;
    title: string;
    type: string;
    visualization: string;
    width: number;
    xPos: number;
    yPos: number;
}

export interface SystemAdminGuiDashboardWidgetFilter {
    id: number;
    key: string;
    value: string;
}

export interface SystemAdminGuiGlobalMenuFavorite {
    id: string;
}

export interface SystemAdminGuiNewFeatureAcknowledge {
    id: string;
}

export interface SystemAdminGuiVdomMenuFavorite {
    id: string;
}

export interface SystemAdminLoginTime {
    lastFailedLogin: string;
    lastLogin: string;
    usrName: string;
}

export interface SystemAdminVdom {
    name: string;
}

export interface SystemAlarmGroup {
    adminAuthFailureThreshold: number;
    adminAuthLockoutThreshold: number;
    decryptionFailureThreshold: number;
    encryptionFailureThreshold: number;
    fwPolicyId: number;
    fwPolicyIdThreshold: number;
    fwPolicyViolations?: outputs.SystemAlarmGroupFwPolicyViolation[];
    id: number;
    logFullWarningThreshold: number;
    period: number;
    replayAttemptThreshold: number;
    selfTestFailureThreshold: number;
    userAuthFailureThreshold: number;
    userAuthLockoutThreshold: number;
}

export interface SystemAlarmGroupFwPolicyViolation {
    dstIp: string;
    dstPort: number;
    id: number;
    srcIp: string;
    srcPort: number;
    threshold: number;
}

export interface SystemApiuserSettingTrusthost {
    ipv4Trusthost: string;
    type: string;
}

export interface SystemApiuserTrusthost {
    id: number;
    ipv4Trusthost: string;
    ipv6Trusthost: string;
    type: string;
}

export interface SystemApiuserVdom {
    name: string;
}

export interface SystemAutomationactionEmailTo {
    name: string;
}

export interface SystemAutomationactionHeader {
    header: string;
}

export interface SystemAutomationactionHttpHeader {
    id: number;
    key?: string;
    value?: string;
}

export interface SystemAutomationactionSdnConnector {
    name: string;
}

export interface SystemAutomationdestinationDestination {
    name: string;
}

export interface SystemAutomationstitchAction {
    action: string;
    delay: number;
    id: number;
    required: string;
}

export interface SystemAutomationstitchDestination {
    name: string;
}

export interface SystemAutomationtriggerField {
    id: number;
    name: string;
    value?: string;
}

export interface SystemAutomationtriggerLogidBlock {
    id: number;
}

export interface SystemAutomationtriggerVdom {
    name: string;
}

export interface SystemCentralmanagementServerList {
    addrType: string;
    fqdn: string;
    id: number;
    serverAddress: string;
    serverAddress6: string;
    serverType: string;
}

export interface SystemClustersyncDownIntfsBeforeSessSync {
    name: string;
}

export interface SystemClustersyncSessionSyncFilter {
    customServices?: outputs.SystemClustersyncSessionSyncFilterCustomService[];
    dstaddr: string;
    dstaddr6: string;
    dstintf: string;
    srcaddr: string;
    srcaddr6: string;
    srcintf: string;
}

export interface SystemClustersyncSessionSyncFilterCustomService {
    dstPortRange: string;
    id: number;
    srcPortRange: string;
}

export interface SystemClustersyncSyncvd {
    name: string;
}

export interface SystemCsfFabricConnector {
    accprofile: string;
    configurationWriteAccess: string;
    serial: string;
    vdoms?: outputs.SystemCsfFabricConnectorVdom[];
}

export interface SystemCsfFabricConnectorVdom {
    name: string;
}

export interface SystemCsfFabricDevice {
    accessToken?: string;
    deviceIp: string;
    deviceType: string;
    httpsPort: number;
    login: string;
    name: string;
    password?: string;
}

export interface SystemCsfTrustedList {
    action: string;
    authorizationType: string;
    certificate?: string;
    downstreamAuthorization: string;
    haMembers: string;
    index: number;
    name: string;
    serial: string;
}

export interface SystemDdnsDdnsServerAddr {
    addr: string;
}

export interface SystemDdnsMonitorInterface {
    interfaceName: string;
}

export interface SystemDeviceupgradeKnownHaMember {
    serial: string;
}

export interface SystemDnsDomain {
    domain: string;
}

export interface SystemDnsServerHostname {
    hostname: string;
}

export interface SystemDnsdatabaseDnsEntry {
    canonicalName: string;
    hostname: string;
    id: number;
    ip: string;
    ipv6: string;
    preference: number;
    status: string;
    ttl: number;
    type: string;
}

export interface SystemEvpnExportRt {
    routeTarget: string;
}

export interface SystemEvpnImportRt {
    routeTarget: string;
}

export interface SystemFabricvpnAdvertisedSubnet {
    access: string;
    bgpNetwork: number;
    firewallAddress: string;
    id: number;
    policies: number;
    prefix: string;
}

export interface SystemFabricvpnOverlay {
    bgpNeighbor: string;
    bgpNeighborGroup: string;
    bgpNeighborRange: number;
    bgpNetwork: number;
    interface: string;
    ipsecPhase1: string;
    name: string;
    overlayPolicy: number;
    overlayTunnelBlock: string;
    remoteGw: string;
    routePolicy: number;
    sdwanMember: number;
}

export interface SystemFederatedupgradeKnownHaMember {
    serial: string;
}

export interface SystemFederatedupgradeNodeList {
    coordinatingFortigate: string;
    deviceType: string;
    maximumMinutes: number;
    serial: string;
    setupTime: string;
    time: string;
    timing: string;
    upgradePath: string;
}

export interface SystemGeoipoverrideIp6Range {
    endIp: string;
    id: number;
    startIp: string;
}

export interface SystemGeoipoverrideIpRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface SystemGlobalInternetServiceDownloadList {
    id: number;
}

export interface SystemHaHaMgmtInterface {
    dst: string;
    gateway: string;
    gateway6: string;
    id: number;
    interface: string;
}

export interface SystemHaSecondaryVcluster {
    monitor: string;
    override: string;
    overrideWaitTime: number;
    pingserverFailoverThreshold: number;
    pingserverMonitorInterface: string;
    pingserverSecondaryForceReset: string;
    pingserverSlaveForceReset: string;
    priority: number;
    vclusterId: number;
    vdom: string;
}

export interface SystemHaUnicastPeer {
    id: number;
    peerIp: string;
}

export interface SystemHaVcluster {
    monitor: string;
    override: string;
    overrideWaitTime: number;
    pingserverFailoverThreshold: number;
    pingserverFlipTimeout: number;
    pingserverMonitorInterface: string;
    pingserverSecondaryForceReset: string;
    pingserverSlaveForceReset: string;
    priority: number;
    vclusterId: number;
    vdoms?: outputs.SystemHaVclusterVdom[];
}

export interface SystemHaVclusterVdom {
    name: string;
}

export interface SystemIkeDhGroup1 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup14 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup15 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup16 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup17 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup18 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup19 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup2 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup20 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup21 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup27 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup28 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup29 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup30 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup31 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup32 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemIkeDhGroup5 {
    keypairCache: string;
    keypairCount: number;
    mode: string;
}

export interface SystemInterfaceClientOption {
    code: number;
    id: number;
    ip: string;
    type: string;
    value: string;
}

export interface SystemInterfaceDhcpSnoopingServerList {
    name: string;
    serverIp: string;
}

export interface SystemInterfaceFailAlertInterface {
    name: string;
}

export interface SystemInterfaceIpv6 {
    autoconf: string;
    cliConn6Status: number;
    dhcp6ClientOptions: string;
    dhcp6IapdLists?: outputs.SystemInterfaceIpv6Dhcp6IapdList[];
    dhcp6InformationRequest: string;
    dhcp6PrefixDelegation: string;
    dhcp6PrefixHint: string;
    dhcp6PrefixHintPlt: number;
    dhcp6PrefixHintVlt: number;
    dhcp6RelayInterfaceId: string;
    dhcp6RelayIp: string;
    dhcp6RelayService: string;
    dhcp6RelaySourceInterface: string;
    dhcp6RelaySourceIp: string;
    dhcp6RelayType: string;
    icmp6SendRedirect: string;
    interfaceIdentifier: string;
    ip6Address: string;
    ip6Allowaccess: string;
    ip6DefaultLife: number;
    ip6DelegatedPrefixIaid: number;
    ip6DelegatedPrefixLists?: outputs.SystemInterfaceIpv6Ip6DelegatedPrefixList[];
    ip6DnsServerOverride: string;
    ip6ExtraAddrs?: outputs.SystemInterfaceIpv6Ip6ExtraAddr[];
    ip6HopLimit: number;
    ip6LinkMtu: number;
    ip6ManageFlag: string;
    ip6MaxInterval: number;
    ip6MinInterval: number;
    ip6Mode: string;
    ip6OtherFlag: string;
    ip6PrefixLists?: outputs.SystemInterfaceIpv6Ip6PrefixList[];
    ip6PrefixMode: string;
    ip6ReachableTime: number;
    ip6RetransTime: number;
    ip6SendAdv: string;
    ip6Subnet: string;
    ip6UpstreamInterface: string;
    ndCert: string;
    ndCgaModifier: string;
    ndMode: string;
    ndSecurityLevel: number;
    ndTimestampDelta: number;
    ndTimestampFuzz: number;
    raSendMtu: string;
    uniqueAutoconfAddr: string;
    vrip6LinkLocal: string;
    vrrp6s?: outputs.SystemInterfaceIpv6Vrrp6[];
    vrrpVirtualMac6: string;
}

export interface SystemInterfaceIpv6Dhcp6IapdList {
    iaid: number;
    prefixHint: string;
    prefixHintPlt: number;
    prefixHintVlt: number;
}

export interface SystemInterfaceIpv6Ip6DelegatedPrefixList {
    autonomousFlag: string;
    delegatedPrefixIaid: number;
    onlinkFlag: string;
    prefixId: number;
    rdnss: string;
    rdnssService: string;
    subnet: string;
    upstreamInterface: string;
}

export interface SystemInterfaceIpv6Ip6ExtraAddr {
    prefix: string;
}

export interface SystemInterfaceIpv6Ip6PrefixList {
    autonomousFlag: string;
    dnssls?: outputs.SystemInterfaceIpv6Ip6PrefixListDnssl[];
    onlinkFlag: string;
    preferredLifeTime: number;
    prefix: string;
    rdnss: string;
    validLifeTime: number;
}

export interface SystemInterfaceIpv6Ip6PrefixListDnssl {
    domain: string;
}

export interface SystemInterfaceIpv6Vrrp6 {
    acceptMode: string;
    advInterval: number;
    ignoreDefaultRoute: string;
    preempt: string;
    priority: number;
    startTime: number;
    status: string;
    vrdst6: string;
    vrgrp: number;
    vrid: number;
    vrip6: string;
}

export interface SystemInterfaceManagedDevice {
    name: string;
}

export interface SystemInterfaceMember {
    interfaceName: string;
}

export interface SystemInterfaceSecondaryip {
    allowaccess: string;
    detectprotocol: string;
    detectserver: string;
    gwdetect: string;
    haPriority: number;
    id: number;
    ip: string;
    pingServStatus: number;
    secipRelayIp: string;
}

export interface SystemInterfaceSecurityGroup {
    name: string;
}

export interface SystemInterfaceTagging {
    category: string;
    name: string;
    tags?: outputs.SystemInterfaceTaggingTag[];
}

export interface SystemInterfaceTaggingTag {
    name: string;
}

export interface SystemInterfaceVrrp {
    acceptMode: string;
    advInterval: number;
    ignoreDefaultRoute: string;
    preempt: string;
    priority: number;
    proxyArps?: outputs.SystemInterfaceVrrpProxyArp[];
    startTime: number;
    status: string;
    version: string;
    vrdst: string;
    vrdstPriority: number;
    vrgrp: number;
    vrid: number;
    vrip: string;
}

export interface SystemInterfaceVrrpProxyArp {
    id: number;
    ip: string;
}

export interface SystemIpamPool {
    description: string;
    excludes?: outputs.SystemIpamPoolExclude[];
    name: string;
    subnet: string;
}

export interface SystemIpamPoolExclude {
    excludeSubnet: string;
    id: number;
}

export interface SystemIpamRule {
    description: string;
    devices?: outputs.SystemIpamRuleDevice[];
    dhcp: string;
    interfaces?: outputs.SystemIpamRuleInterface[];
    name: string;
    pools?: outputs.SystemIpamRulePool[];
    role: string;
}

export interface SystemIpamRuleDevice {
    name: string;
}

export interface SystemIpamRuleInterface {
    name: string;
}

export interface SystemIpamRulePool {
    name: string;
}

export interface SystemIpsecaggregateMember {
    tunnelName: string;
}

export interface SystemLinkmonitorRoute {
    subnet: string;
}

export interface SystemLinkmonitorServer {
    address: string;
}

export interface SystemLinkmonitorServerList {
    dst: string;
    id: number;
    port: number;
    protocol: string;
    weight: number;
}

export interface SystemMobiletunnelNetwork {
    id: number;
    interface: string;
    prefix: string;
}

export interface SystemNat64SecondaryPrefix {
    name: string;
    nat64Prefix: string;
}

export interface SystemNdproxyMember {
    interfaceName: string;
}

export interface SystemNetflowCollector {
    collectorIp: string;
    collectorPort: number;
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    sourceIp: string;
}

export interface SystemNpuPriorityProtocol {
    bfd: string;
    bgp: string;
    slbc: string;
}

export interface SystemNtpInterface {
    interfaceName: string;
}

export interface SystemNtpNtpserver {
    authentication: string;
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    ipType: string;
    key?: string;
    keyId: number;
    keyType: string;
    ntpv3: string;
    server: string;
}

export interface SystemObjecttaggingTag {
    name: string;
}

export interface SystemPcpserverPool {
    allowOpcode: string;
    announcementCount: number;
    arpReply: string;
    clientMappingLimit: number;
    clientSubnets?: outputs.SystemPcpserverPoolClientSubnet[];
    description: string;
    extIntf: string;
    extip: string;
    extport: string;
    id: number;
    intlIntfs?: outputs.SystemPcpserverPoolIntlIntf[];
    mappingFilterLimit: number;
    maximalLifetime: number;
    minimalLifetime: number;
    multicastAnnouncement: string;
    name: string;
    recycleDelay: number;
    thirdParty: string;
    thirdPartySubnets?: outputs.SystemPcpserverPoolThirdPartySubnet[];
}

export interface SystemPcpserverPoolClientSubnet {
    subnet: string;
}

export interface SystemPcpserverPoolIntlIntf {
    interfaceName: string;
}

export interface SystemPcpserverPoolThirdPartySubnet {
    subnet: string;
}

export interface SystemPtpServerInterface {
    delayMechanism: string;
    id: number;
    serverInterfaceName: string;
}

export interface SystemReplacemsggroupAdmin {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupAlertmail {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupAuth {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupAutomation {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupCustomMessage {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupDeviceDetectionPortal {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupEc {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupFortiguardWf {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupFtp {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupHttp {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupIcap {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupMail {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupNacQuar {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupNntp {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupSpam {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupSslvpn {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupTrafficQuota {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupUtm {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemReplacemsggroupWebproxy {
    buffer?: string;
    format: string;
    header: string;
    msgType: string;
}

export interface SystemSamlServiceProvider {
    assertionAttributes?: outputs.SystemSamlServiceProviderAssertionAttribute[];
    idpEntityId: string;
    idpSingleLogoutUrl: string;
    idpSingleSignOnUrl: string;
    name: string;
    prefix: string;
    spBindingProtocol: string;
    spCert: string;
    spEntityId: string;
    spPortalUrl: string;
    spSingleLogoutUrl: string;
    spSingleSignOnUrl: string;
}

export interface SystemSamlServiceProviderAssertionAttribute {
    name: string;
    type: string;
}

export interface SystemSdnconnectorCompartmentList {
    compartmentId: string;
}

export interface SystemSdnconnectorExternalAccountList {
    externalId: string;
    regionLists?: outputs.SystemSdnconnectorExternalAccountListRegionList[];
    roleArn: string;
}

export interface SystemSdnconnectorExternalAccountListRegionList {
    region: string;
}

export interface SystemSdnconnectorExternalIp {
    name: string;
}

export interface SystemSdnconnectorForwardingRule {
    ruleName: string;
    target: string;
}

export interface SystemSdnconnectorGcpProjectList {
    gcpZoneLists?: outputs.SystemSdnconnectorGcpProjectListGcpZoneList[];
    id: string;
}

export interface SystemSdnconnectorGcpProjectListGcpZoneList {
    name: string;
}

export interface SystemSdnconnectorNic {
    ips?: outputs.SystemSdnconnectorNicIp[];
    name: string;
}

export interface SystemSdnconnectorNicIp {
    name: string;
    publicIp: string;
    resourceGroup: string;
}

export interface SystemSdnconnectorOciRegionList {
    region: string;
}

export interface SystemSdnconnectorRoute {
    name: string;
}

export interface SystemSdnconnectorRouteTable {
    name: string;
    resourceGroup: string;
    routes?: outputs.SystemSdnconnectorRouteTableRoute[];
    subscriptionId: string;
}

export interface SystemSdnconnectorRouteTableRoute {
    name: string;
    nextHop: string;
}

export interface SystemSdnconnectorServerList {
    ip: string;
}

export interface SystemSdwanDuplication {
    dstaddr6s?: outputs.SystemSdwanDuplicationDstaddr6[];
    dstaddrs?: outputs.SystemSdwanDuplicationDstaddr[];
    dstintfs?: outputs.SystemSdwanDuplicationDstintf[];
    id: number;
    packetDeDuplication: string;
    packetDuplication: string;
    serviceIds?: outputs.SystemSdwanDuplicationServiceId[];
    services?: outputs.SystemSdwanDuplicationService[];
    slaMatchService: string;
    srcaddr6s?: outputs.SystemSdwanDuplicationSrcaddr6[];
    srcaddrs?: outputs.SystemSdwanDuplicationSrcaddr[];
    srcintfs?: outputs.SystemSdwanDuplicationSrcintf[];
}

export interface SystemSdwanDuplicationDstaddr {
    name: string;
}

export interface SystemSdwanDuplicationDstaddr6 {
    name: string;
}

export interface SystemSdwanDuplicationDstintf {
    name: string;
}

export interface SystemSdwanDuplicationService {
    name: string;
}

export interface SystemSdwanDuplicationServiceId {
    id: number;
}

export interface SystemSdwanDuplicationSrcaddr {
    name: string;
}

export interface SystemSdwanDuplicationSrcaddr6 {
    name: string;
}

export interface SystemSdwanDuplicationSrcintf {
    name: string;
}

export interface SystemSdwanFailAlertInterface {
    name: string;
}

export interface SystemSdwanHealthCheck {
    addrMode: string;
    classId: number;
    detectMode: string;
    diffservcode: string;
    dnsMatchIp: string;
    dnsRequestDomain: string;
    embedMeasuredHealth: string;
    failtime: number;
    ftpFile: string;
    ftpMode: string;
    haPriority: number;
    httpAgent: string;
    httpGet: string;
    httpMatch: string;
    interval: number;
    members?: outputs.SystemSdwanHealthCheckMember[];
    mosCodec: string;
    name: string;
    packetSize: number;
    password?: string;
    port: number;
    probeCount: number;
    probePackets: string;
    probeTimeout: number;
    protocol: string;
    qualityMeasuredMethod: string;
    recoverytime: number;
    securityMode: string;
    server: string;
    slaFailLogPeriod: number;
    slaIdRedistribute: number;
    slaPassLogPeriod: number;
    slas?: outputs.SystemSdwanHealthCheckSla[];
    source: string;
    source6: string;
    systemDns: string;
    thresholdAlertJitter: number;
    thresholdAlertLatency: number;
    thresholdAlertPacketloss: number;
    thresholdWarningJitter: number;
    thresholdWarningLatency: number;
    thresholdWarningPacketloss: number;
    updateCascadeInterface: string;
    updateStaticRoute: string;
    user: string;
    vrf: number;
}

export interface SystemSdwanHealthCheckMember {
    seqNum: number;
}

export interface SystemSdwanHealthCheckSla {
    id: number;
    jitterThreshold: number;
    latencyThreshold: number;
    linkCostFactor: string;
    mosThreshold: string;
    packetlossThreshold: number;
    priorityInSla: number;
    priorityOutSla: number;
}

export interface SystemSdwanMember {
    comment?: string;
    cost: number;
    gateway: string;
    gateway6: string;
    ingressSpilloverThreshold: number;
    interface: string;
    preferredSource: string;
    priority: number;
    priority6: number;
    seqNum: number;
    source: string;
    source6: string;
    spilloverThreshold: number;
    status: string;
    transportGroup: number;
    volumeRatio: number;
    weight: number;
    zone: string;
}

export interface SystemSdwanNeighbor {
    healthCheck: string;
    ip: string;
    member: number;
    memberBlocks?: outputs.SystemSdwanNeighborMemberBlock[];
    minimumSlaMeetMembers: number;
    mode: string;
    role: string;
    serviceId: number;
    slaId: number;
}

export interface SystemSdwanNeighborMemberBlock {
    seqNum: number;
}

export interface SystemSdwanService {
    addrMode: string;
    agentExclusive: string;
    bandwidthWeight: number;
    default: string;
    dscpForward: string;
    dscpForwardTag: string;
    dscpReverse: string;
    dscpReverseTag: string;
    dst6s?: outputs.SystemSdwanServiceDst6[];
    dstNegate: string;
    dsts?: outputs.SystemSdwanServiceDst[];
    endPort: number;
    endSrcPort: number;
    gateway: string;
    groups?: outputs.SystemSdwanServiceGroup[];
    hashMode: string;
    healthChecks?: outputs.SystemSdwanServiceHealthCheck[];
    holdDownTime: number;
    id: number;
    inputDeviceNegate: string;
    inputDevices?: outputs.SystemSdwanServiceInputDevice[];
    inputZones?: outputs.SystemSdwanServiceInputZone[];
    internetService: string;
    internetServiceAppCtrlCategories?: outputs.SystemSdwanServiceInternetServiceAppCtrlCategory[];
    internetServiceAppCtrlGroups?: outputs.SystemSdwanServiceInternetServiceAppCtrlGroup[];
    internetServiceAppCtrls?: outputs.SystemSdwanServiceInternetServiceAppCtrl[];
    internetServiceCustomGroups?: outputs.SystemSdwanServiceInternetServiceCustomGroup[];
    internetServiceCustoms?: outputs.SystemSdwanServiceInternetServiceCustom[];
    internetServiceGroups?: outputs.SystemSdwanServiceInternetServiceGroup[];
    internetServiceNames?: outputs.SystemSdwanServiceInternetServiceName[];
    jitterWeight: number;
    latencyWeight: number;
    linkCostFactor: string;
    linkCostThreshold: number;
    loadBalance: string;
    minimumSlaMeetMembers: number;
    mode: string;
    name: string;
    packetLossWeight: number;
    passiveMeasurement: string;
    priorityMembers?: outputs.SystemSdwanServicePriorityMember[];
    priorityZones?: outputs.SystemSdwanServicePriorityZone[];
    protocol: number;
    qualityLink: number;
    role: string;
    routeTag: number;
    shortcut: string;
    shortcutPriority: string;
    shortcutStickiness: string;
    slaCompareMethod: string;
    slaStickiness: string;
    slas?: outputs.SystemSdwanServiceSla[];
    src6s?: outputs.SystemSdwanServiceSrc6[];
    srcNegate: string;
    srcs?: outputs.SystemSdwanServiceSrc[];
    standaloneAction: string;
    startPort: number;
    startSrcPort: number;
    status: string;
    tieBreak: string;
    tos: string;
    tosMask: string;
    useShortcutSla: string;
    users?: outputs.SystemSdwanServiceUser[];
    zoneMode: string;
}

export interface SystemSdwanServiceDst {
    name: string;
}

export interface SystemSdwanServiceDst6 {
    name: string;
}

export interface SystemSdwanServiceGroup {
    name: string;
}

export interface SystemSdwanServiceHealthCheck {
    name: string;
}

export interface SystemSdwanServiceInputDevice {
    name: string;
}

export interface SystemSdwanServiceInputZone {
    name: string;
}

export interface SystemSdwanServiceInternetServiceAppCtrl {
    id: number;
}

export interface SystemSdwanServiceInternetServiceAppCtrlCategory {
    id: number;
}

export interface SystemSdwanServiceInternetServiceAppCtrlGroup {
    name: string;
}

export interface SystemSdwanServiceInternetServiceCustom {
    name: string;
}

export interface SystemSdwanServiceInternetServiceCustomGroup {
    name: string;
}

export interface SystemSdwanServiceInternetServiceGroup {
    name: string;
}

export interface SystemSdwanServiceInternetServiceName {
    name: string;
}

export interface SystemSdwanServicePriorityMember {
    seqNum: number;
}

export interface SystemSdwanServicePriorityZone {
    name: string;
}

export interface SystemSdwanServiceSla {
    healthCheck: string;
    id: number;
}

export interface SystemSdwanServiceSrc {
    name: string;
}

export interface SystemSdwanServiceSrc6 {
    name: string;
}

export interface SystemSdwanServiceUser {
    name: string;
}

export interface SystemSdwanZone {
    advpnHealthCheck: string;
    advpnSelect: string;
    minimumSlaMeetMembers: number;
    name: string;
    serviceSlaTieBreak: string;
}

export interface SystemSessionttlPort {
    endPort: number;
    id: number;
    protocol: number;
    refreshDirection: string;
    startPort: number;
    timeout: string;
}

export interface SystemSettingsGuiDefaultPolicyColumn {
    name: string;
}

export interface SystemSflowCollector {
    collectorIp: string;
    collectorPort: number;
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    sourceIp: string;
}

export interface SystemSpeedtestscheduleSchedule {
    name: string;
}

export interface SystemSpeedtestserverHost {
    distance: number;
    id: number;
    ip: string;
    latitude: string;
    longitude: string;
    password?: string;
    port: number;
    user: string;
}

export interface SystemSsoadminVdom {
    name: string;
}

export interface SystemSsoforticloudadminVdom {
    name: string;
}

export interface SystemSsofortigatecloudadminVdom {
    name: string;
}

export interface SystemStandaloneclusterClusterPeer {
    downIntfsBeforeSessSyncs?: outputs.SystemStandaloneclusterClusterPeerDownIntfsBeforeSessSync[];
    hbInterval: number;
    hbLostThreshold: number;
    ipsecTunnelSync: string;
    peerip: string;
    peervd: string;
    secondaryAddIpsecRoutes: string;
    sessionSyncFilter?: outputs.SystemStandaloneclusterClusterPeerSessionSyncFilter;
    syncId: number;
    syncvds?: outputs.SystemStandaloneclusterClusterPeerSyncvd[];
}

export interface SystemStandaloneclusterClusterPeerDownIntfsBeforeSessSync {
    name: string;
}

export interface SystemStandaloneclusterClusterPeerSessionSyncFilter {
    customServices?: outputs.SystemStandaloneclusterClusterPeerSessionSyncFilterCustomService[];
    dstaddr: string;
    dstaddr6: string;
    dstintf: string;
    srcaddr: string;
    srcaddr6: string;
    srcintf: string;
}

export interface SystemStandaloneclusterClusterPeerSessionSyncFilterCustomService {
    dstPortRange: string;
    id: number;
    srcPortRange: string;
}

export interface SystemStandaloneclusterClusterPeerSyncvd {
    name: string;
}

export interface SystemSwitchinterfaceMember {
    interfaceName: string;
}

export interface SystemSwitchinterfaceSpanSourcePort {
    interfaceName: string;
}

export interface SystemVdomdnsServerHostname {
    hostname: string;
}

export interface SystemVdomexceptionVdom {
    name: string;
}

export interface SystemVdomnetflowCollector {
    collectorIp: string;
    collectorPort: number;
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    sourceIp: string;
}

export interface SystemVdomsflowCollector {
    collectorIp: string;
    collectorPort: number;
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    sourceIp: string;
}

export interface SystemVirtualswitchPort {
    alias: string;
    name: string;
}

export interface SystemVirtualwanlinkFailAlertInterface {
    name: string;
}

export interface SystemVirtualwanlinkHealthCheck {
    addrMode: string;
    diffservcode: string;
    dnsRequestDomain: string;
    failtime: number;
    haPriority: number;
    httpAgent: string;
    httpGet: string;
    httpMatch: string;
    interval: number;
    members?: outputs.SystemVirtualwanlinkHealthCheckMember[];
    name: string;
    packetSize: number;
    password?: string;
    port: number;
    probeCount: number;
    probePackets: string;
    probeTimeout: number;
    protocol: string;
    recoverytime: number;
    securityMode: string;
    server: string;
    slaFailLogPeriod: number;
    slaPassLogPeriod: number;
    slas?: outputs.SystemVirtualwanlinkHealthCheckSla[];
    systemDns: string;
    thresholdAlertJitter: number;
    thresholdAlertLatency: number;
    thresholdAlertPacketloss: number;
    thresholdWarningJitter: number;
    thresholdWarningLatency: number;
    thresholdWarningPacketloss: number;
    updateCascadeInterface: string;
    updateStaticRoute: string;
}

export interface SystemVirtualwanlinkHealthCheckMember {
    seqNum: number;
}

export interface SystemVirtualwanlinkHealthCheckSla {
    id: number;
    jitterThreshold: number;
    latencyThreshold: number;
    linkCostFactor: string;
    packetlossThreshold: number;
}

export interface SystemVirtualwanlinkMember {
    comment?: string;
    cost: number;
    gateway: string;
    gateway6: string;
    ingressSpilloverThreshold: number;
    interface: string;
    priority: number;
    seqNum: number;
    source: string;
    source6: string;
    spilloverThreshold: number;
    status: string;
    volumeRatio: number;
    weight: number;
}

export interface SystemVirtualwanlinkNeighbor {
    healthCheck: string;
    ip: string;
    member: number;
    role: string;
    slaId: number;
}

export interface SystemVirtualwanlinkService {
    addrMode: string;
    bandwidthWeight: number;
    default: string;
    dscpForward: string;
    dscpForwardTag: string;
    dscpReverse: string;
    dscpReverseTag: string;
    dst6s?: outputs.SystemVirtualwanlinkServiceDst6[];
    dstNegate: string;
    dsts?: outputs.SystemVirtualwanlinkServiceDst[];
    endPort: number;
    gateway: string;
    groups?: outputs.SystemVirtualwanlinkServiceGroup[];
    healthCheck: string;
    holdDownTime: number;
    id: number;
    inputDeviceNegate: string;
    inputDevices?: outputs.SystemVirtualwanlinkServiceInputDevice[];
    internetService: string;
    internetServiceAppCtrlGroups?: outputs.SystemVirtualwanlinkServiceInternetServiceAppCtrlGroup[];
    internetServiceAppCtrls?: outputs.SystemVirtualwanlinkServiceInternetServiceAppCtrl[];
    internetServiceCtrlGroups?: outputs.SystemVirtualwanlinkServiceInternetServiceCtrlGroup[];
    internetServiceCtrls?: outputs.SystemVirtualwanlinkServiceInternetServiceCtrl[];
    internetServiceCustomGroups?: outputs.SystemVirtualwanlinkServiceInternetServiceCustomGroup[];
    internetServiceCustoms?: outputs.SystemVirtualwanlinkServiceInternetServiceCustom[];
    internetServiceGroups?: outputs.SystemVirtualwanlinkServiceInternetServiceGroup[];
    internetServiceIds?: outputs.SystemVirtualwanlinkServiceInternetServiceId[];
    internetServiceNames?: outputs.SystemVirtualwanlinkServiceInternetServiceName[];
    jitterWeight: number;
    latencyWeight: number;
    linkCostFactor: string;
    linkCostThreshold: number;
    member: number;
    mode: string;
    name: string;
    packetLossWeight: number;
    priorityMembers?: outputs.SystemVirtualwanlinkServicePriorityMember[];
    protocol: number;
    qualityLink: number;
    role: string;
    routeTag: number;
    slaCompareMethod: string;
    slas?: outputs.SystemVirtualwanlinkServiceSla[];
    src6s?: outputs.SystemVirtualwanlinkServiceSrc6[];
    srcNegate: string;
    srcs?: outputs.SystemVirtualwanlinkServiceSrc[];
    standaloneAction: string;
    startPort: number;
    status: string;
    tos: string;
    tosMask: string;
    users?: outputs.SystemVirtualwanlinkServiceUser[];
}

export interface SystemVirtualwanlinkServiceDst {
    name: string;
}

export interface SystemVirtualwanlinkServiceDst6 {
    name: string;
}

export interface SystemVirtualwanlinkServiceGroup {
    name: string;
}

export interface SystemVirtualwanlinkServiceInputDevice {
    name: string;
}

export interface SystemVirtualwanlinkServiceInternetServiceAppCtrl {
    id: number;
}

export interface SystemVirtualwanlinkServiceInternetServiceAppCtrlGroup {
    name: string;
}

export interface SystemVirtualwanlinkServiceInternetServiceCtrl {
    id: number;
}

export interface SystemVirtualwanlinkServiceInternetServiceCtrlGroup {
    name: string;
}

export interface SystemVirtualwanlinkServiceInternetServiceCustom {
    name: string;
}

export interface SystemVirtualwanlinkServiceInternetServiceCustomGroup {
    name: string;
}

export interface SystemVirtualwanlinkServiceInternetServiceGroup {
    name: string;
}

export interface SystemVirtualwanlinkServiceInternetServiceId {
    id: number;
}

export interface SystemVirtualwanlinkServiceInternetServiceName {
    name: string;
}

export interface SystemVirtualwanlinkServicePriorityMember {
    seqNum: number;
}

export interface SystemVirtualwanlinkServiceSla {
    healthCheck: string;
    id: number;
}

export interface SystemVirtualwanlinkServiceSrc {
    name: string;
}

export interface SystemVirtualwanlinkServiceSrc6 {
    name: string;
}

export interface SystemVirtualwanlinkServiceUser {
    name: string;
}

export interface SystemVirtualwanlinkZone {
    name: string;
}

export interface SystemVirtualwirepairMember {
    interfaceName: string;
}

export interface SystemVxlanRemoteIp {
    ip: string;
}

export interface SystemVxlanRemoteIp6 {
    ip6: string;
}

export interface SystemZoneInterface {
    interfaceName: string;
}

export interface SystemZoneTagging {
    category: string;
    name: string;
    tags?: outputs.SystemZoneTaggingTag[];
}

export interface SystemZoneTaggingTag {
    name: string;
}

export interface Systemdhcp6ServerIpRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface Systemdhcp6ServerPrefixRange {
    endPrefix: string;
    id: number;
    prefixLength: number;
    startPrefix: string;
}

export interface SystemdhcpServerExcludeRange {
    endIp: string;
    id: number;
    leaseTime: number;
    startIp: string;
    uciMatch: string;
    uciStrings?: outputs.SystemdhcpServerExcludeRangeUciString[];
    vciMatch: string;
    vciStrings?: outputs.SystemdhcpServerExcludeRangeVciString[];
}

export interface SystemdhcpServerExcludeRangeUciString {
    uciString: string;
}

export interface SystemdhcpServerExcludeRangeVciString {
    vciString: string;
}

export interface SystemdhcpServerIpRange {
    endIp: string;
    id: number;
    leaseTime: number;
    startIp: string;
    uciMatch: string;
    uciStrings?: outputs.SystemdhcpServerIpRangeUciString[];
    vciMatch: string;
    vciStrings?: outputs.SystemdhcpServerIpRangeVciString[];
}

export interface SystemdhcpServerIpRangeUciString {
    uciString: string;
}

export interface SystemdhcpServerIpRangeVciString {
    vciString: string;
}

export interface SystemdhcpServerOption {
    code: number;
    id: number;
    ip: string;
    type: string;
    uciMatch: string;
    uciStrings?: outputs.SystemdhcpServerOptionUciString[];
    value: string;
    vciMatch: string;
    vciStrings?: outputs.SystemdhcpServerOptionVciString[];
}

export interface SystemdhcpServerOptionUciString {
    uciString: string;
}

export interface SystemdhcpServerOptionVciString {
    vciString: string;
}

export interface SystemdhcpServerReservedAddress {
    action: string;
    circuitId: string;
    circuitIdType: string;
    description?: string;
    id: number;
    ip: string;
    mac: string;
    remoteId: string;
    remoteIdType: string;
    type: string;
}

export interface SystemdhcpServerTftpServer {
    tftpServer: string;
}

export interface SystemdhcpServerVciString {
    vciString: string;
}

export interface SystemlldpNetworkpolicyGuest {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface SystemlldpNetworkpolicyGuestVoiceSignaling {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface SystemlldpNetworkpolicySoftphone {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface SystemlldpNetworkpolicyStreamingVideo {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface SystemlldpNetworkpolicyVideoConferencing {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface SystemlldpNetworkpolicyVideoSignaling {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface SystemlldpNetworkpolicyVoice {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface SystemlldpNetworkpolicyVoiceSignaling {
    dscp: number;
    priority: number;
    status: string;
    tag: string;
    vlan: number;
}

export interface SystemsnmpCommunityHost {
    haDirect: string;
    hostType: string;
    id: number;
    ip: string;
    sourceIp: string;
}

export interface SystemsnmpCommunityHosts6 {
    haDirect: string;
    hostType: string;
    id: number;
    ipv6: string;
    sourceIpv6: string;
}

export interface SystemsnmpCommunityVdom {
    name: string;
}

export interface SystemsnmpUserVdom {
    name: string;
}

export interface UserDeviceTagging {
    category: string;
    name: string;
    tags?: outputs.UserDeviceTaggingTag[];
}

export interface UserDeviceTaggingTag {
    name: string;
}

export interface UserDeviceaccesslistDeviceList {
    action: string;
    device: string;
    id: number;
}

export interface UserDevicegroupMember {
    name: string;
}

export interface UserDevicegroupTagging {
    category: string;
    name: string;
    tags?: outputs.UserDevicegroupTaggingTag[];
}

export interface UserDevicegroupTaggingTag {
    name: string;
}

export interface UserDomaincontrollerExtraServer {
    id: number;
    ipAddress: string;
    port: number;
    sourceIpAddress: string;
    sourcePort: number;
}

export interface UserExchangeKdcIp {
    ipv4: string;
}

export interface UserFssopollingAdgrp {
    name: string;
}

export interface UserGroupGuest {
    comment?: string;
    company: string;
    email: string;
    expiration: string;
    id: number;
    mobilePhone: string;
    name: string;
    password?: string;
    sponsor: string;
    userId: string;
}

export interface UserGroupMatch {
    groupName: string;
    id: number;
    serverName: string;
}

export interface UserGroupMember {
    name: string;
}

export interface UserNacpolicySeverity {
    severityNum: number;
}

export interface UserNacpolicySwitchGroup {
    name: string;
}

export interface UserNacpolicySwitchScope {
    switchId: string;
}

export interface UserPeergrpMember {
    name: string;
}

export interface UserQuarantineTarget {
    description: string;
    entry: string;
    macs?: outputs.UserQuarantineTargetMac[];
}

export interface UserQuarantineTargetMac {
    description: string;
    drop: string;
    entryId: number;
    mac: string;
    parent: string;
}

export interface UserRadiusAccountingServer {
    id: number;
    interface: string;
    interfaceSelectMethod: string;
    port: number;
    secret?: string;
    server: string;
    sourceIp: string;
    status: string;
}

export interface UserRadiusClass {
    name: string;
}

export interface UserSecurityexemptlistRule {
    devices?: outputs.UserSecurityexemptlistRuleDevice[];
    dstaddrs?: outputs.UserSecurityexemptlistRuleDstaddr[];
    id: number;
    services?: outputs.UserSecurityexemptlistRuleService[];
    srcaddrs?: outputs.UserSecurityexemptlistRuleSrcaddr[];
}

export interface UserSecurityexemptlistRuleDevice {
    name: string;
}

export interface UserSecurityexemptlistRuleDstaddr {
    name: string;
}

export interface UserSecurityexemptlistRuleService {
    name: string;
}

export interface UserSecurityexemptlistRuleSrcaddr {
    name: string;
}

export interface UserSettingAuthPort {
    id: number;
    port: number;
    type: string;
}

export interface VideofilterKeywordWord {
    comment?: string;
    name: string;
    patternType: string;
    status: string;
}

export interface VideofilterProfileFilter {
    action: string;
    category: string;
    channel: string;
    comment?: string;
    id: number;
    keyword: number;
    log: string;
    type: string;
}

export interface VideofilterProfileFortiguardCategory {
    filters?: outputs.VideofilterProfileFortiguardCategoryFilter[];
}

export interface VideofilterProfileFortiguardCategoryFilter {
    action: string;
    categoryId: number;
    id: number;
    log: string;
}

export interface VideofilterYoutubechannelfilterEntry {
    action: string;
    channelId: string;
    comment?: string;
    id: number;
}

export interface VirtualpatchProfileExemption {
    devices?: outputs.VirtualpatchProfileExemptionDevice[];
    id: number;
    rules?: outputs.VirtualpatchProfileExemptionRule[];
    status: string;
}

export interface VirtualpatchProfileExemptionDevice {
    mac: string;
}

export interface VirtualpatchProfileExemptionRule {
    id: number;
}

export interface VoipProfileMsrp {
    logViolations: string;
    maxMsgSize: number;
    maxMsgSizeAction: string;
    status: string;
}

export interface VoipProfileSccp {
    blockMcast: string;
    logCallSummary: string;
    logViolations: string;
    maxCalls: number;
    status: string;
    verifyHeader: string;
}

export interface VoipProfileSip {
    ackRate: number;
    ackRateTrack: string;
    blockAck: string;
    blockBye: string;
    blockCancel: string;
    blockGeoRedOptions: string;
    blockInfo: string;
    blockInvite: string;
    blockLongLines: string;
    blockMessage: string;
    blockNotify: string;
    blockOptions: string;
    blockPrack: string;
    blockPublish: string;
    blockRefer: string;
    blockRegister: string;
    blockSubscribe: string;
    blockUnknown: string;
    blockUpdate: string;
    byeRate: number;
    byeRateTrack: string;
    callIdRegex?: string;
    callKeepalive: number;
    cancelRate: number;
    cancelRateTrack: string;
    contactFixup: string;
    contentTypeRegex?: string;
    hntRestrictSourceIp: string;
    hostedNatTraversal: string;
    infoRate: number;
    infoRateTrack: string;
    inviteRate: number;
    inviteRateTrack: string;
    ipsRtp: string;
    logCallSummary: string;
    logViolations: string;
    malformedHeaderAllow: string;
    malformedHeaderCallId: string;
    malformedHeaderContact: string;
    malformedHeaderContentLength: string;
    malformedHeaderContentType: string;
    malformedHeaderCseq: string;
    malformedHeaderExpires: string;
    malformedHeaderFrom: string;
    malformedHeaderMaxForwards: string;
    malformedHeaderNoProxyRequire: string;
    malformedHeaderNoRequire: string;
    malformedHeaderPAssertedIdentity: string;
    malformedHeaderRack: string;
    malformedHeaderRecordRoute: string;
    malformedHeaderRoute: string;
    malformedHeaderRseq: string;
    malformedHeaderSdpA: string;
    malformedHeaderSdpB: string;
    malformedHeaderSdpC: string;
    malformedHeaderSdpI: string;
    malformedHeaderSdpK: string;
    malformedHeaderSdpM: string;
    malformedHeaderSdpO: string;
    malformedHeaderSdpR: string;
    malformedHeaderSdpS: string;
    malformedHeaderSdpT: string;
    malformedHeaderSdpV: string;
    malformedHeaderSdpZ: string;
    malformedHeaderTo: string;
    malformedHeaderVia: string;
    malformedRequestLine: string;
    maxBodyLength: number;
    maxDialogs: number;
    maxIdleDialogs: number;
    maxLineLength: number;
    messageRate: number;
    messageRateTrack: string;
    natPortRange: string;
    natTrace: string;
    noSdpFixup: string;
    notifyRate: number;
    notifyRateTrack: string;
    openContactPinhole: string;
    openRecordRoutePinhole: string;
    openRegisterPinhole: string;
    openViaPinhole: string;
    optionsRate: number;
    optionsRateTrack: string;
    prackRate: number;
    prackRateTrack: string;
    preserveOverride: string;
    provisionalInviteExpiryTime: number;
    publishRate: number;
    publishRateTrack: string;
    referRate: number;
    referRateTrack: string;
    registerContactTrace: string;
    registerRate: number;
    registerRateTrack: string;
    rfc2543Branch: string;
    rtp: string;
    sslAlgorithm: string;
    sslAuthClient: string;
    sslAuthServer: string;
    sslClientCertificate: string;
    sslClientRenegotiation: string;
    sslMaxVersion: string;
    sslMinVersion: string;
    sslMode: string;
    sslPfs: string;
    sslSendEmptyFrags: string;
    sslServerCertificate: string;
    status: string;
    strictRegister: string;
    subscribeRate: number;
    subscribeRateTrack: string;
    unknownHeader: string;
    updateRate: number;
    updateRateTrack: string;
}

export interface VpnKmipserverServerList {
    cert: string;
    id: number;
    port: number;
    server: string;
    status: string;
}

export interface VpnOcvpnForticlientAccess {
    authGroups?: outputs.VpnOcvpnForticlientAccessAuthGroup[];
    psksecret?: string;
    status: string;
}

export interface VpnOcvpnForticlientAccessAuthGroup {
    authGroup: string;
    name: string;
    overlays?: outputs.VpnOcvpnForticlientAccessAuthGroupOverlay[];
}

export interface VpnOcvpnForticlientAccessAuthGroupOverlay {
    overlayName: string;
}

export interface VpnOcvpnOverlay {
    assignIp: string;
    id: number;
    interOverlay: string;
    ipv4EndIp: string;
    ipv4StartIp: string;
    name: string;
    overlayName: string;
    subnets?: outputs.VpnOcvpnOverlaySubnet[];
}

export interface VpnOcvpnOverlaySubnet {
    id: number;
    interface: string;
    subnet: string;
    type: string;
}

export interface VpnOcvpnWanInterface {
    name: string;
}

export interface VpnQkdCertificate {
    name: string;
}

export interface VpncertificateSettingCrlVerification {
    chainCrlAbsence: string;
    expiry: string;
    leafCrlAbsence: string;
}

export interface VpnipsecConcentratorMember {
    name: string;
}

export interface VpnipsecFecMapping {
    bandwidthBiThreshold: number;
    bandwidthDownThreshold: number;
    bandwidthUpThreshold: number;
    base: number;
    latencyThreshold: number;
    packetLossThreshold: number;
    redundant: number;
    seqno: number;
}

export interface VpnipsecPhase1BackupGateway {
    address: string;
}

export interface VpnipsecPhase1Certificate {
    name: string;
}

export interface VpnipsecPhase1InternalDomainList {
    domainName: string;
}

export interface VpnipsecPhase1Ipv4ExcludeRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface VpnipsecPhase1Ipv6ExcludeRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface VpnipsecPhase1interfaceBackupGateway {
    address: string;
}

export interface VpnipsecPhase1interfaceCertificate {
    name: string;
}

export interface VpnipsecPhase1interfaceInternalDomainList {
    domainName: string;
}

export interface VpnipsecPhase1interfaceIpv4ExcludeRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface VpnipsecPhase1interfaceIpv6ExcludeRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface VpnsslSettingsAuthenticationRule {
    auth: string;
    cipher: string;
    clientCert: string;
    groups?: outputs.VpnsslSettingsAuthenticationRuleGroup[];
    id: number;
    portal: string;
    realm: string;
    sourceAddress6Negate: string;
    sourceAddress6s?: outputs.VpnsslSettingsAuthenticationRuleSourceAddress6[];
    sourceAddressNegate: string;
    sourceAddresses?: outputs.VpnsslSettingsAuthenticationRuleSourceAddress[];
    sourceInterfaces?: outputs.VpnsslSettingsAuthenticationRuleSourceInterface[];
    userPeer: string;
    users?: outputs.VpnsslSettingsAuthenticationRuleUser[];
}

export interface VpnsslSettingsAuthenticationRuleGroup {
    name: string;
}

export interface VpnsslSettingsAuthenticationRuleSourceAddress {
    name: string;
}

export interface VpnsslSettingsAuthenticationRuleSourceAddress6 {
    name: string;
}

export interface VpnsslSettingsAuthenticationRuleSourceInterface {
    name: string;
}

export interface VpnsslSettingsAuthenticationRuleUser {
    name: string;
}

export interface VpnsslSettingsSourceAddress {
    name: string;
}

export interface VpnsslSettingsSourceAddress6 {
    name: string;
}

export interface VpnsslSettingsSourceInterface {
    name: string;
}

export interface VpnsslSettingsTunnelIpPool {
    name: string;
}

export interface VpnsslSettingsTunnelIpv6Pool {
    name: string;
}

export interface VpnsslwebHostchecksoftwareCheckItemList {
    action: string;
    id: number;
    md5s?: outputs.VpnsslwebHostchecksoftwareCheckItemListMd5[];
    target: string;
    type: string;
    version: string;
}

export interface VpnsslwebHostchecksoftwareCheckItemListMd5 {
    id: string;
}

export interface VpnsslwebPortalBookmarkGroup {
    bookmarks?: outputs.VpnsslwebPortalBookmarkGroupBookmark[];
    name: string;
}

export interface VpnsslwebPortalBookmarkGroupBookmark {
    additionalParams?: string;
    apptype: string;
    colorDepth: string;
    description?: string;
    domain?: string;
    folder?: string;
    formDatas?: outputs.VpnsslwebPortalBookmarkGroupBookmarkFormData[];
    height: number;
    host?: string;
    keyboardLayout: string;
    listeningPort: number;
    loadBalancingInfo?: string;
    logonPassword?: string;
    logonUser?: string;
    name: string;
    port: number;
    preconnectionBlob?: string;
    preconnectionId: number;
    remotePort: number;
    restrictedAdmin: string;
    security: string;
    sendPreconnectionId: string;
    serverLayout: string;
    showStatusWindow: string;
    sso: string;
    ssoCredential: string;
    ssoCredentialSentOnce: string;
    ssoPassword?: string;
    ssoUsername?: string;
    url?: string;
    vncKeyboardLayout: string;
    width: number;
}

export interface VpnsslwebPortalBookmarkGroupBookmarkFormData {
    name: string;
    value?: string;
}

export interface VpnsslwebPortalHostCheckPolicy {
    name: string;
}

export interface VpnsslwebPortalIpPool {
    name: string;
}

export interface VpnsslwebPortalIpv6Pool {
    name: string;
}

export interface VpnsslwebPortalIpv6SplitTunnelingRoutingAddress {
    name: string;
}

export interface VpnsslwebPortalLandingPage {
    formDatas?: outputs.VpnsslwebPortalLandingPageFormData[];
    logoutUrl?: string;
    sso: string;
    ssoCredential: string;
    ssoPassword?: string;
    ssoUsername?: string;
    url?: string;
}

export interface VpnsslwebPortalLandingPageFormData {
    name: string;
    value?: string;
}

export interface VpnsslwebPortalMacAddrCheckRule {
    macAddrLists?: outputs.VpnsslwebPortalMacAddrCheckRuleMacAddrList[];
    macAddrMask: number;
    name: string;
}

export interface VpnsslwebPortalMacAddrCheckRuleMacAddrList {
    addr: string;
}

export interface VpnsslwebPortalOsCheckList {
    action: string;
    latestPatchLevel: string;
    name: string;
    tolerance: number;
}

export interface VpnsslwebPortalSplitDn {
    dnsServer1: string;
    dnsServer2: string;
    domains?: string;
    id: number;
    ipv6DnsServer1: string;
    ipv6DnsServer2: string;
}

export interface VpnsslwebPortalSplitTunnelingRoutingAddress {
    name: string;
}

export interface VpnsslwebUserbookmarkBookmark {
    additionalParams?: string;
    apptype: string;
    colorDepth: string;
    description?: string;
    domain?: string;
    folder?: string;
    formDatas?: outputs.VpnsslwebUserbookmarkBookmarkFormData[];
    height: number;
    host?: string;
    keyboardLayout: string;
    listeningPort: number;
    loadBalancingInfo?: string;
    logonPassword?: string;
    logonUser?: string;
    name: string;
    port: number;
    preconnectionBlob?: string;
    preconnectionId: number;
    remotePort: number;
    restrictedAdmin: string;
    security: string;
    sendPreconnectionId: string;
    serverLayout: string;
    showStatusWindow: string;
    sso: string;
    ssoCredential: string;
    ssoCredentialSentOnce: string;
    ssoPassword?: string;
    ssoUsername?: string;
    url?: string;
    vncKeyboardLayout: string;
    width: number;
}

export interface VpnsslwebUserbookmarkBookmarkFormData {
    name: string;
    value?: string;
}

export interface VpnsslwebUsergroupbookmarkBookmark {
    additionalParams?: string;
    apptype: string;
    colorDepth: string;
    description?: string;
    domain?: string;
    folder?: string;
    formDatas?: outputs.VpnsslwebUsergroupbookmarkBookmarkFormData[];
    height: number;
    host?: string;
    keyboardLayout: string;
    listeningPort: number;
    loadBalancingInfo?: string;
    logonPassword?: string;
    logonUser?: string;
    name: string;
    port: number;
    preconnectionBlob?: string;
    preconnectionId: number;
    remotePort: number;
    restrictedAdmin: string;
    security: string;
    sendPreconnectionId: string;
    serverLayout: string;
    showStatusWindow: string;
    sso: string;
    ssoCredential: string;
    ssoCredentialSentOnce: string;
    ssoPassword?: string;
    ssoUsername?: string;
    url?: string;
    vncKeyboardLayout: string;
    width: number;
}

export interface VpnsslwebUsergroupbookmarkBookmarkFormData {
    name: string;
    value?: string;
}

export interface WafProfileAddressList {
    blockedAddresses?: outputs.WafProfileAddressListBlockedAddress[];
    blockedLog: string;
    severity: string;
    status: string;
    trustedAddresses?: outputs.WafProfileAddressListTrustedAddress[];
}

export interface WafProfileAddressListBlockedAddress {
    name: string;
}

export interface WafProfileAddressListTrustedAddress {
    name: string;
}

export interface WafProfileConstraint {
    contentLength?: outputs.WafProfileConstraintContentLength;
    exceptions?: outputs.WafProfileConstraintException[];
    headerLength?: outputs.WafProfileConstraintHeaderLength;
    hostname?: outputs.WafProfileConstraintHostname;
    lineLength?: outputs.WafProfileConstraintLineLength;
    malformed?: outputs.WafProfileConstraintMalformed;
    maxCookie?: outputs.WafProfileConstraintMaxCookie;
    maxHeaderLine?: outputs.WafProfileConstraintMaxHeaderLine;
    maxRangeSegment?: outputs.WafProfileConstraintMaxRangeSegment;
    maxUrlParam?: outputs.WafProfileConstraintMaxUrlParam;
    method?: outputs.WafProfileConstraintMethod;
    paramLength?: outputs.WafProfileConstraintParamLength;
    urlParamLength?: outputs.WafProfileConstraintUrlParamLength;
    version?: outputs.WafProfileConstraintVersion;
}

export interface WafProfileConstraintContentLength {
    action: string;
    length: number;
    log: string;
    severity: string;
    status: string;
}

export interface WafProfileConstraintException {
    address: string;
    contentLength: string;
    headerLength: string;
    hostname: string;
    id: number;
    lineLength: string;
    malformed: string;
    maxCookie: string;
    maxHeaderLine: string;
    maxRangeSegment: string;
    maxUrlParam: string;
    method: string;
    paramLength: string;
    pattern: string;
    regex: string;
    urlParamLength: string;
    version: string;
}

export interface WafProfileConstraintHeaderLength {
    action: string;
    length: number;
    log: string;
    severity: string;
    status: string;
}

export interface WafProfileConstraintHostname {
    action: string;
    log: string;
    severity: string;
    status: string;
}

export interface WafProfileConstraintLineLength {
    action: string;
    length: number;
    log: string;
    severity: string;
    status: string;
}

export interface WafProfileConstraintMalformed {
    action: string;
    log: string;
    severity: string;
    status: string;
}

export interface WafProfileConstraintMaxCookie {
    action: string;
    log: string;
    maxCookie: number;
    severity: string;
    status: string;
}

export interface WafProfileConstraintMaxHeaderLine {
    action: string;
    log: string;
    maxHeaderLine: number;
    severity: string;
    status: string;
}

export interface WafProfileConstraintMaxRangeSegment {
    action: string;
    log: string;
    maxRangeSegment: number;
    severity: string;
    status: string;
}

export interface WafProfileConstraintMaxUrlParam {
    action: string;
    log: string;
    maxUrlParam: number;
    severity: string;
    status: string;
}

export interface WafProfileConstraintMethod {
    action: string;
    log: string;
    severity: string;
    status: string;
}

export interface WafProfileConstraintParamLength {
    action: string;
    length: number;
    log: string;
    severity: string;
    status: string;
}

export interface WafProfileConstraintUrlParamLength {
    action: string;
    length: number;
    log: string;
    severity: string;
    status: string;
}

export interface WafProfileConstraintVersion {
    action: string;
    log: string;
    severity: string;
    status: string;
}

export interface WafProfileMethod {
    defaultAllowedMethods: string;
    log: string;
    methodPolicies?: outputs.WafProfileMethodMethodPolicy[];
    severity: string;
    status: string;
}

export interface WafProfileMethodMethodPolicy {
    address: string;
    allowedMethods: string;
    id: number;
    pattern: string;
    regex: string;
}

export interface WafProfileSignature {
    creditCardDetectionThreshold: number;
    customSignatures?: outputs.WafProfileSignatureCustomSignature[];
    disabledSignatures?: outputs.WafProfileSignatureDisabledSignature[];
    disabledSubClasses?: outputs.WafProfileSignatureDisabledSubClass[];
    mainClasses?: outputs.WafProfileSignatureMainClass[];
}

export interface WafProfileSignatureCustomSignature {
    action: string;
    caseSensitivity: string;
    direction: string;
    log: string;
    name: string;
    pattern: string;
    severity: string;
    status: string;
    target: string;
}

export interface WafProfileSignatureDisabledSignature {
    id: number;
}

export interface WafProfileSignatureDisabledSubClass {
    id: number;
}

export interface WafProfileSignatureMainClass {
    action: string;
    id: number;
    log: string;
    severity: string;
    status: string;
}

export interface WafProfileUrlAccess {
    accessPatterns?: outputs.WafProfileUrlAccessAccessPattern[];
    action: string;
    address: string;
    id: number;
    log: string;
    severity: string;
}

export interface WafProfileUrlAccessAccessPattern {
    id: number;
    negate: string;
    pattern: string;
    regex: string;
    srcaddr: string;
}

export interface WanoptCacheserviceDstPeer {
    authType: number;
    deviceId: string;
    encodeType: number;
    ip: string;
    priority: number;
}

export interface WanoptCacheserviceSrcPeer {
    authType: number;
    deviceId: string;
    encodeType: number;
    ip: string;
    priority: number;
}

export interface WanoptContentdeliverynetworkruleHostDomainNameSuffix {
    name: string;
}

export interface WanoptContentdeliverynetworkruleRule {
    contentId?: outputs.WanoptContentdeliverynetworkruleRuleContentId;
    matchEntries?: outputs.WanoptContentdeliverynetworkruleRuleMatchEntry[];
    matchMode: string;
    name: string;
    skipEntries?: outputs.WanoptContentdeliverynetworkruleRuleSkipEntry[];
    skipRuleMode: string;
}

export interface WanoptContentdeliverynetworkruleRuleContentId {
    endDirection: string;
    endSkip: number;
    endStr: string;
    rangeStr: string;
    startDirection: string;
    startSkip: number;
    startStr: string;
    target: string;
}

export interface WanoptContentdeliverynetworkruleRuleMatchEntry {
    id: number;
    patterns?: outputs.WanoptContentdeliverynetworkruleRuleMatchEntryPattern[];
    target: string;
}

export interface WanoptContentdeliverynetworkruleRuleMatchEntryPattern {
    string: string;
}

export interface WanoptContentdeliverynetworkruleRuleSkipEntry {
    id: number;
    patterns?: outputs.WanoptContentdeliverynetworkruleRuleSkipEntryPattern[];
    target: string;
}

export interface WanoptContentdeliverynetworkruleRuleSkipEntryPattern {
    string: string;
}

export interface WanoptProfileCifs {
    byteCaching: string;
    logTraffic: string;
    port: number;
    preferChunking: string;
    protocolOpt: string;
    secureTunnel: string;
    status: string;
    tunnelSharing: string;
}

export interface WanoptProfileFtp {
    byteCaching: string;
    logTraffic: string;
    port: number;
    preferChunking: string;
    protocolOpt: string;
    secureTunnel: string;
    ssl: string;
    status: string;
    tunnelSharing: string;
}

export interface WanoptProfileHttp {
    byteCaching: string;
    logTraffic: string;
    port: number;
    preferChunking: string;
    protocolOpt: string;
    secureTunnel: string;
    ssl: string;
    sslPort: number;
    status: string;
    tunnelNonHttp: string;
    tunnelSharing: string;
    unknownHttpVersion: string;
}

export interface WanoptProfileMapi {
    byteCaching: string;
    logTraffic: string;
    port: number;
    secureTunnel: string;
    status: string;
    tunnelSharing: string;
}

export interface WanoptProfileTcp {
    byteCaching: string;
    byteCachingOpt: string;
    logTraffic: string;
    port: string;
    secureTunnel: string;
    ssl: string;
    sslPort: number;
    status: string;
    tunnelSharing: string;
}

export interface WebfilterContentEntry {
    action: string;
    lang: string;
    name: string;
    patternType: string;
    score: number;
    status: string;
}

export interface WebfilterContentheaderEntry {
    action: string;
    category: string;
    pattern: string;
}

export interface WebfilterProfileAntiphish {
    authentication: string;
    checkBasicAuth: string;
    checkUri: string;
    checkUsernameOnly: string;
    customPatterns?: outputs.WebfilterProfileAntiphishCustomPattern[];
    defaultAction: string;
    domainController: string;
    inspectionEntries?: outputs.WebfilterProfileAntiphishInspectionEntry[];
    ldap: string;
    maxBodyLen: number;
    status: string;
}

export interface WebfilterProfileAntiphishCustomPattern {
    category: string;
    pattern: string;
    type: string;
}

export interface WebfilterProfileAntiphishInspectionEntry {
    action: string;
    fortiguardCategory: string;
    name: string;
}

export interface WebfilterProfileFileFilter {
    entries?: outputs.WebfilterProfileFileFilterEntry[];
    log: string;
    scanArchiveContents: string;
    status: string;
}

export interface WebfilterProfileFileFilterEntry {
    action: string;
    comment?: string;
    direction: string;
    fileTypes?: outputs.WebfilterProfileFileFilterEntryFileType[];
    filter: string;
    passwordProtected: string;
    protocol: string;
}

export interface WebfilterProfileFileFilterEntryFileType {
    name: string;
}

export interface WebfilterProfileFtgdWf {
    exemptQuota: string;
    filters?: outputs.WebfilterProfileFtgdWfFilter[];
    maxQuotaTimeout: number;
    options: string;
    ovrd: string;
    quotas?: outputs.WebfilterProfileFtgdWfQuota[];
    rateCrlUrls: string;
    rateCssUrls: string;
    rateImageUrls: string;
    rateJavascriptUrls: string;
}

export interface WebfilterProfileFtgdWfFilter {
    action: string;
    authUsrGrps?: outputs.WebfilterProfileFtgdWfFilterAuthUsrGrp[];
    category: number;
    id: number;
    log: string;
    overrideReplacemsg: string;
    warnDuration: string;
    warningDurationType: string;
    warningPrompt: string;
}

export interface WebfilterProfileFtgdWfFilterAuthUsrGrp {
    name: string;
}

export interface WebfilterProfileFtgdWfQuota {
    category: string;
    duration: string;
    id: number;
    overrideReplacemsg: string;
    type: string;
    unit: string;
    value: number;
}

export interface WebfilterProfileOverride {
    ovrdCookie: string;
    ovrdDur: string;
    ovrdDurMode: string;
    ovrdScope: string;
    ovrdUserGroups?: outputs.WebfilterProfileOverrideOvrdUserGroup[];
    profileAttribute: string;
    profileType: string;
    profiles?: outputs.WebfilterProfileOverrideProfile[];
}

export interface WebfilterProfileOverrideOvrdUserGroup {
    name: string;
}

export interface WebfilterProfileOverrideProfile {
    name: string;
}

export interface WebfilterProfileWeb {
    allowlist: string;
    blacklist: string;
    blocklist: string;
    bwordTable: number;
    bwordThreshold: number;
    contentHeaderList: number;
    keywordMatches?: outputs.WebfilterProfileWebKeywordMatch[];
    logSearch: string;
    safeSearch: string;
    urlfilterTable: number;
    vimeoRestrict: string;
    whitelist: string;
    youtubeRestrict: string;
}

export interface WebfilterProfileWebKeywordMatch {
    pattern: string;
}

export interface WebfilterProfileWispServer {
    name: string;
}

export interface WebfilterProfileYoutubeChannelFilter {
    channelId: string;
    comment?: string;
    id: number;
}

export interface WebfilterUrlfilterEntry {
    action: string;
    antiphishAction: string;
    dnsAddressFamily: string;
    exempt: string;
    id: number;
    referrerHost: string;
    status: string;
    type: string;
    url: string;
    webProxyProfile: string;
}

export interface WebproxyExplicitPacPolicy {
    comments?: string;
    dstaddrs?: outputs.WebproxyExplicitPacPolicyDstaddr[];
    pacFileData: string;
    pacFileName: string;
    policyid: number;
    srcaddr6s?: outputs.WebproxyExplicitPacPolicySrcaddr6[];
    srcaddrs?: outputs.WebproxyExplicitPacPolicySrcaddr[];
    status: string;
}

export interface WebproxyExplicitPacPolicyDstaddr {
    name: string;
}

export interface WebproxyExplicitPacPolicySrcaddr {
    name: string;
}

export interface WebproxyExplicitPacPolicySrcaddr6 {
    name: string;
}

export interface WebproxyExplicitSecureWebProxyCert {
    name: string;
}

export interface WebproxyForwardservergroupServerList {
    name: string;
    weight: number;
}

export interface WebproxyGlobalLearnClientIpSrcaddr {
    name: string;
}

export interface WebproxyGlobalLearnClientIpSrcaddr6 {
    name: string;
}

export interface WebproxyProfileHeader {
    action: string;
    addOption: string;
    base64Encoding: string;
    content: string;
    dstaddr6s?: outputs.WebproxyProfileHeaderDstaddr6[];
    dstaddrs?: outputs.WebproxyProfileHeaderDstaddr[];
    id: number;
    name: string;
    protocol: string;
}

export interface WebproxyProfileHeaderDstaddr {
    name: string;
}

export interface WebproxyProfileHeaderDstaddr6 {
    name: string;
}

export interface WirelesscontrollerAccesscontrollistLayer3Ipv4Rule {
    action: string;
    comment: string;
    dstaddr: string;
    dstport: number;
    protocol: number;
    ruleId: number;
    srcaddr: string;
    srcport: number;
}

export interface WirelesscontrollerAccesscontrollistLayer3Ipv6Rule {
    action: string;
    comment: string;
    dstaddr: string;
    dstport: number;
    protocol: number;
    ruleId: number;
    srcaddr: string;
    srcport: number;
}

export interface WirelesscontrollerAddrgrpAddress {
    id: string;
}

export interface WirelesscontrollerApcfgprofileCommandList {
    id: number;
    name: string;
    passwdValue?: string;
    type: string;
    value: string;
}

export interface WirelesscontrollerArrpprofileDarrpOptimizeSchedule {
    name: string;
}

export interface WirelesscontrollerBonjourprofilePolicyList {
    description: string;
    fromVlan: string;
    policyId: number;
    services: string;
    toVlan: string;
}

export interface WirelesscontrollerIntercontrollerInterControllerPeer {
    id: number;
    peerIp: string;
    peerPort: number;
    peerPriority: string;
}

export interface WirelesscontrollerMpskprofileMpskGroup {
    mpskKeys?: outputs.WirelesscontrollerMpskprofileMpskGroupMpskKey[];
    name: string;
    vlanId: number;
    vlanType: string;
}

export interface WirelesscontrollerMpskprofileMpskGroupMpskKey {
    comment?: string;
    concurrentClientLimitType: string;
    concurrentClients: number;
    keyType: string;
    mac: string;
    mpskSchedules?: outputs.WirelesscontrollerMpskprofileMpskGroupMpskKeyMpskSchedule[];
    name: string;
    passphrase?: string;
    saePassword?: string;
    saePk: string;
    saePrivateKey: string;
}

export interface WirelesscontrollerMpskprofileMpskGroupMpskKeyMpskSchedule {
    name: string;
}

export interface WirelesscontrollerQosprofileDscpWmmBe {
    id: number;
}

export interface WirelesscontrollerQosprofileDscpWmmBk {
    id: number;
}

export interface WirelesscontrollerQosprofileDscpWmmVi {
    id: number;
}

export interface WirelesscontrollerQosprofileDscpWmmVo {
    id: number;
}

export interface WirelesscontrollerSettingDarrpOptimizeSchedule {
    name: string;
}

export interface WirelesscontrollerSettingOffendingSsid {
    action: string;
    id: number;
    ssidPattern: string;
}

export interface WirelesscontrollerSnmpCommunity {
    hosts?: outputs.WirelesscontrollerSnmpCommunityHost[];
    id: number;
    name: string;
    queryV1Status: string;
    queryV2cStatus: string;
    status: string;
    trapV1Status: string;
    trapV2cStatus: string;
}

export interface WirelesscontrollerSnmpCommunityHost {
    id: number;
    ip: string;
}

export interface WirelesscontrollerSnmpUser {
    authProto: string;
    authPwd?: string;
    name: string;
    notifyHosts: string;
    privProto: string;
    privPwd?: string;
    queries: string;
    securityLevel: string;
    status: string;
    trapStatus: string;
}

export interface WirelesscontrollerTimersDarrpTime {
    time: string;
}

export interface WirelesscontrollerVapMacFilterList {
    id: number;
    mac: string;
    macFilterPolicy: string;
}

export interface WirelesscontrollerVapMpskKey {
    comment?: string;
    concurrentClients: string;
    keyName: string;
    mpskSchedules?: outputs.WirelesscontrollerVapMpskKeyMpskSchedule[];
    passphrase?: string;
}

export interface WirelesscontrollerVapMpskKeyMpskSchedule {
    name: string;
}

export interface WirelesscontrollerVapPortalMessageOverrides {
    authDisclaimerPage: string;
    authLoginFailedPage: string;
    authLoginPage: string;
    authRejectPage: string;
}

export interface WirelesscontrollerVapRadiusMacAuthUsergroup {
    name: string;
}

export interface WirelesscontrollerVapSelectedUsergroup {
    name: string;
}

export interface WirelesscontrollerVapUsergroup {
    name: string;
}

export interface WirelesscontrollerVapVlanName {
    name: string;
    vlanId: number;
}

export interface WirelesscontrollerVapVlanPool {
    id: number;
    wtpGroup: string;
}

export interface WirelesscontrollerVapgroupVap {
    name: string;
}

export interface WirelesscontrollerWidsprofileApBgscanDisableSchedule {
    name: string;
}

export interface WirelesscontrollerWidsprofileApScanChannelList2g5g {
    chan: string;
}

export interface WirelesscontrollerWidsprofileApScanChannelList6g {
    chan: string;
}

export interface WirelesscontrollerWtpLan {
    port1Mode: string;
    port1Ssid: string;
    port2Mode: string;
    port2Ssid: string;
    port3Mode: string;
    port3Ssid: string;
    port4Mode: string;
    port4Ssid: string;
    port5Mode: string;
    port5Ssid: string;
    port6Mode: string;
    port6Ssid: string;
    port7Mode: string;
    port7Ssid: string;
    port8Mode: string;
    port8Ssid: string;
    portEslMode: string;
    portEslSsid: string;
    portMode: string;
    portSsid: string;
}

export interface WirelesscontrollerWtpRadio1 {
    autoPowerHigh: number;
    autoPowerLevel: string;
    autoPowerLow: number;
    autoPowerTarget: string;
    band: string;
    channels?: outputs.WirelesscontrollerWtpRadio1Channel[];
    drmaManualMode: string;
    overrideAnalysis: string;
    overrideBand: string;
    overrideChannel: string;
    overrideTxpower: string;
    overrideVaps: string;
    powerLevel: number;
    powerMode: string;
    powerValue: number;
    radioId: number;
    spectrumAnalysis: string;
    vapAll: string;
    vaps?: outputs.WirelesscontrollerWtpRadio1Vap[];
}

export interface WirelesscontrollerWtpRadio1Channel {
    chan: string;
}

export interface WirelesscontrollerWtpRadio1Vap {
    name: string;
}

export interface WirelesscontrollerWtpRadio2 {
    autoPowerHigh: number;
    autoPowerLevel: string;
    autoPowerLow: number;
    autoPowerTarget: string;
    band: string;
    channels?: outputs.WirelesscontrollerWtpRadio2Channel[];
    drmaManualMode: string;
    overrideAnalysis: string;
    overrideBand: string;
    overrideChannel: string;
    overrideTxpower: string;
    overrideVaps: string;
    powerLevel: number;
    powerMode: string;
    powerValue: number;
    radioId: number;
    spectrumAnalysis: string;
    vapAll: string;
    vaps?: outputs.WirelesscontrollerWtpRadio2Vap[];
}

export interface WirelesscontrollerWtpRadio2Channel {
    chan: string;
}

export interface WirelesscontrollerWtpRadio2Vap {
    name: string;
}

export interface WirelesscontrollerWtpRadio3 {
    autoPowerHigh: number;
    autoPowerLevel: string;
    autoPowerLow: number;
    autoPowerTarget: string;
    band: string;
    channels?: outputs.WirelesscontrollerWtpRadio3Channel[];
    drmaManualMode: string;
    overrideAnalysis: string;
    overrideBand: string;
    overrideChannel: string;
    overrideTxpower: string;
    overrideVaps: string;
    powerLevel: number;
    powerMode: string;
    powerValue: number;
    spectrumAnalysis: string;
    vapAll: string;
    vaps?: outputs.WirelesscontrollerWtpRadio3Vap[];
}

export interface WirelesscontrollerWtpRadio3Channel {
    chan: string;
}

export interface WirelesscontrollerWtpRadio3Vap {
    name: string;
}

export interface WirelesscontrollerWtpRadio4 {
    autoPowerHigh: number;
    autoPowerLevel: string;
    autoPowerLow: number;
    autoPowerTarget: string;
    band: string;
    channels?: outputs.WirelesscontrollerWtpRadio4Channel[];
    drmaManualMode: string;
    overrideAnalysis: string;
    overrideBand: string;
    overrideChannel: string;
    overrideTxpower: string;
    overrideVaps: string;
    powerLevel: number;
    powerMode: string;
    powerValue: number;
    spectrumAnalysis: string;
    vapAll: string;
    vaps?: outputs.WirelesscontrollerWtpRadio4Vap[];
}

export interface WirelesscontrollerWtpRadio4Channel {
    chan: string;
}

export interface WirelesscontrollerWtpRadio4Vap {
    name: string;
}

export interface WirelesscontrollerWtpSplitTunnelingAcl {
    destIp: string;
    id: number;
}

export interface WirelesscontrollerWtpgroupWtp {
    wtpId: string;
}

export interface WirelesscontrollerWtpprofileDenyMacList {
    id: number;
    mac: string;
}

export interface WirelesscontrollerWtpprofileEslSesDongle {
    apcAddrType: string;
    apcFqdn: string;
    apcIp: string;
    apcPort: number;
    coexLevel: string;
    complianceLevel: string;
    eslChannel: string;
    outputPower: string;
    scdEnable: string;
    tlsCertVerification: string;
    tlsFqdnVerification: string;
}

export interface WirelesscontrollerWtpprofileLan {
    port1Mode: string;
    port1Ssid: string;
    port2Mode: string;
    port2Ssid: string;
    port3Mode: string;
    port3Ssid: string;
    port4Mode: string;
    port4Ssid: string;
    port5Mode: string;
    port5Ssid: string;
    port6Mode: string;
    port6Ssid: string;
    port7Mode: string;
    port7Ssid: string;
    port8Mode: string;
    port8Ssid: string;
    portEslMode: string;
    portEslSsid: string;
    portMode: string;
    portSsid: string;
}

export interface WirelesscontrollerWtpprofileLbs {
    aeroscout: string;
    aeroscoutApMac: string;
    aeroscoutMmuReport: string;
    aeroscoutMu: string;
    aeroscoutMuFactor: number;
    aeroscoutMuTimeout: number;
    aeroscoutServerIp: string;
    aeroscoutServerPort: number;
    ekahauBlinkMode: string;
    ekahauTag: string;
    ercServerIp: string;
    ercServerPort: number;
    fortipresence: string;
    fortipresenceBle: string;
    fortipresenceFrequency: number;
    fortipresencePort: number;
    fortipresenceProject: string;
    fortipresenceRogue: string;
    fortipresenceSecret?: string;
    fortipresenceServer: string;
    fortipresenceServerAddrType: string;
    fortipresenceServerFqdn: string;
    fortipresenceUnassoc: string;
    polestar: string;
    polestarAccumulationInterval: number;
    polestarAssetAddrgrpList: string;
    polestarAssetUuidList1: string;
    polestarAssetUuidList2: string;
    polestarAssetUuidList3: string;
    polestarAssetUuidList4: string;
    polestarProtocol: string;
    polestarReportingInterval: number;
    polestarServerFqdn: string;
    polestarServerPath: string;
    polestarServerPort: number;
    polestarServerToken: string;
    stationLocate: string;
}

export interface WirelesscontrollerWtpprofileLedSchedule {
    name: string;
}

export interface WirelesscontrollerWtpprofilePlatform {
    ddscan: string;
    mode: string;
    type: string;
}

export interface WirelesscontrollerWtpprofileRadio1 {
    airtimeFairness: string;
    amsdu: string;
    apHandoff: string;
    apSnifferAddr: string;
    apSnifferBufsize: number;
    apSnifferChan: number;
    apSnifferCtl: string;
    apSnifferData: string;
    apSnifferMgmtBeacon: string;
    apSnifferMgmtOther: string;
    apSnifferMgmtProbe: string;
    arrpProfile: string;
    autoPowerHigh: number;
    autoPowerLevel: string;
    autoPowerLow: number;
    autoPowerTarget: string;
    band: string;
    band5gType: string;
    bandwidthAdmissionControl: string;
    bandwidthCapacity: number;
    beaconInterval: number;
    bssColor: number;
    bssColorMode: string;
    callAdmissionControl: string;
    callCapacity: number;
    channelBonding: string;
    channelBondingExt: string;
    channelUtilization: string;
    channels?: outputs.WirelesscontrollerWtpprofileRadio1Channel[];
    coexistence: string;
    darrp: string;
    drma: string;
    drmaSensitivity: string;
    dtim: number;
    fragThreshold: number;
    frequencyHandoff: string;
    iperfProtocol: string;
    iperfServerPort: number;
    maxClients: number;
    maxDistance: number;
    mimoMode: string;
    mode: string;
    n80211d: string;
    optionalAntenna: string;
    optionalAntennaGain: string;
    powerLevel: number;
    powerMode: string;
    powerValue: number;
    powersaveOptimize: string;
    protectionMode: string;
    radioId: number;
    rtsThreshold: number;
    samBssid: string;
    samCaCertificate: string;
    samCaptivePortal: string;
    samClientCertificate: string;
    samCwpFailureString: string;
    samCwpMatchString: string;
    samCwpPassword?: string;
    samCwpSuccessString: string;
    samCwpTestUrl: string;
    samCwpUsername: string;
    samEapMethod: string;
    samPassword?: string;
    samPrivateKey: string;
    samPrivateKeyPassword?: string;
    samReportIntv: number;
    samSecurityType: string;
    samServerFqdn: string;
    samServerIp: string;
    samServerType: string;
    samSsid: string;
    samTest: string;
    samUsername: string;
    shortGuardInterval: string;
    spectrumAnalysis: string;
    transmitOptimize: string;
    vapAll: string;
    vaps?: outputs.WirelesscontrollerWtpprofileRadio1Vap[];
    widsProfile: string;
    zeroWaitDfs: string;
}

export interface WirelesscontrollerWtpprofileRadio1Channel {
    chan: string;
}

export interface WirelesscontrollerWtpprofileRadio1Vap {
    name: string;
}

export interface WirelesscontrollerWtpprofileRadio2 {
    airtimeFairness: string;
    amsdu: string;
    apHandoff: string;
    apSnifferAddr: string;
    apSnifferBufsize: number;
    apSnifferChan: number;
    apSnifferCtl: string;
    apSnifferData: string;
    apSnifferMgmtBeacon: string;
    apSnifferMgmtOther: string;
    apSnifferMgmtProbe: string;
    arrpProfile: string;
    autoPowerHigh: number;
    autoPowerLevel: string;
    autoPowerLow: number;
    autoPowerTarget: string;
    band: string;
    band5gType: string;
    bandwidthAdmissionControl: string;
    bandwidthCapacity: number;
    beaconInterval: number;
    bssColor: number;
    bssColorMode: string;
    callAdmissionControl: string;
    callCapacity: number;
    channelBonding: string;
    channelBondingExt: string;
    channelUtilization: string;
    channels?: outputs.WirelesscontrollerWtpprofileRadio2Channel[];
    coexistence: string;
    darrp: string;
    drma: string;
    drmaSensitivity: string;
    dtim: number;
    fragThreshold: number;
    frequencyHandoff: string;
    iperfProtocol: string;
    iperfServerPort: number;
    maxClients: number;
    maxDistance: number;
    mimoMode: string;
    mode: string;
    n80211d: string;
    optionalAntenna: string;
    optionalAntennaGain: string;
    powerLevel: number;
    powerMode: string;
    powerValue: number;
    powersaveOptimize: string;
    protectionMode: string;
    radioId: number;
    rtsThreshold: number;
    samBssid: string;
    samCaCertificate: string;
    samCaptivePortal: string;
    samClientCertificate: string;
    samCwpFailureString: string;
    samCwpMatchString: string;
    samCwpPassword?: string;
    samCwpSuccessString: string;
    samCwpTestUrl: string;
    samCwpUsername: string;
    samEapMethod: string;
    samPassword?: string;
    samPrivateKey: string;
    samPrivateKeyPassword?: string;
    samReportIntv: number;
    samSecurityType: string;
    samServerFqdn: string;
    samServerIp: string;
    samServerType: string;
    samSsid: string;
    samTest: string;
    samUsername: string;
    shortGuardInterval: string;
    spectrumAnalysis: string;
    transmitOptimize: string;
    vapAll: string;
    vaps?: outputs.WirelesscontrollerWtpprofileRadio2Vap[];
    widsProfile: string;
    zeroWaitDfs: string;
}

export interface WirelesscontrollerWtpprofileRadio2Channel {
    chan: string;
}

export interface WirelesscontrollerWtpprofileRadio2Vap {
    name: string;
}

export interface WirelesscontrollerWtpprofileRadio3 {
    airtimeFairness: string;
    amsdu: string;
    apHandoff: string;
    apSnifferAddr: string;
    apSnifferBufsize: number;
    apSnifferChan: number;
    apSnifferCtl: string;
    apSnifferData: string;
    apSnifferMgmtBeacon: string;
    apSnifferMgmtOther: string;
    apSnifferMgmtProbe: string;
    arrpProfile: string;
    autoPowerHigh: number;
    autoPowerLevel: string;
    autoPowerLow: number;
    autoPowerTarget: string;
    band: string;
    band5gType: string;
    bandwidthAdmissionControl: string;
    bandwidthCapacity: number;
    beaconInterval: number;
    bssColor: number;
    bssColorMode: string;
    callAdmissionControl: string;
    callCapacity: number;
    channelBonding: string;
    channelBondingExt: string;
    channelUtilization: string;
    channels?: outputs.WirelesscontrollerWtpprofileRadio3Channel[];
    coexistence: string;
    darrp: string;
    drma: string;
    drmaSensitivity: string;
    dtim: number;
    fragThreshold: number;
    frequencyHandoff: string;
    iperfProtocol: string;
    iperfServerPort: number;
    maxClients: number;
    maxDistance: number;
    mimoMode: string;
    mode: string;
    n80211d: string;
    optionalAntenna: string;
    optionalAntennaGain: string;
    powerLevel: number;
    powerMode: string;
    powerValue: number;
    powersaveOptimize: string;
    protectionMode: string;
    rtsThreshold: number;
    samBssid: string;
    samCaCertificate: string;
    samCaptivePortal: string;
    samClientCertificate: string;
    samCwpFailureString: string;
    samCwpMatchString: string;
    samCwpPassword?: string;
    samCwpSuccessString: string;
    samCwpTestUrl: string;
    samCwpUsername: string;
    samEapMethod: string;
    samPassword?: string;
    samPrivateKey: string;
    samPrivateKeyPassword?: string;
    samReportIntv: number;
    samSecurityType: string;
    samServerFqdn: string;
    samServerIp: string;
    samServerType: string;
    samSsid: string;
    samTest: string;
    samUsername: string;
    shortGuardInterval: string;
    spectrumAnalysis: string;
    transmitOptimize: string;
    vapAll: string;
    vaps?: outputs.WirelesscontrollerWtpprofileRadio3Vap[];
    widsProfile: string;
    zeroWaitDfs: string;
}

export interface WirelesscontrollerWtpprofileRadio3Channel {
    chan: string;
}

export interface WirelesscontrollerWtpprofileRadio3Vap {
    name: string;
}

export interface WirelesscontrollerWtpprofileRadio4 {
    airtimeFairness: string;
    amsdu: string;
    apHandoff: string;
    apSnifferAddr: string;
    apSnifferBufsize: number;
    apSnifferChan: number;
    apSnifferCtl: string;
    apSnifferData: string;
    apSnifferMgmtBeacon: string;
    apSnifferMgmtOther: string;
    apSnifferMgmtProbe: string;
    arrpProfile: string;
    autoPowerHigh: number;
    autoPowerLevel: string;
    autoPowerLow: number;
    autoPowerTarget: string;
    band: string;
    band5gType: string;
    bandwidthAdmissionControl: string;
    bandwidthCapacity: number;
    beaconInterval: number;
    bssColor: number;
    bssColorMode: string;
    callAdmissionControl: string;
    callCapacity: number;
    channelBonding: string;
    channelBondingExt: string;
    channelUtilization: string;
    channels?: outputs.WirelesscontrollerWtpprofileRadio4Channel[];
    coexistence: string;
    darrp: string;
    drma: string;
    drmaSensitivity: string;
    dtim: number;
    fragThreshold: number;
    frequencyHandoff: string;
    iperfProtocol: string;
    iperfServerPort: number;
    maxClients: number;
    maxDistance: number;
    mimoMode: string;
    mode: string;
    n80211d: string;
    optionalAntenna: string;
    optionalAntennaGain: string;
    powerLevel: number;
    powerMode: string;
    powerValue: number;
    powersaveOptimize: string;
    protectionMode: string;
    rtsThreshold: number;
    samBssid: string;
    samCaCertificate: string;
    samCaptivePortal: string;
    samClientCertificate: string;
    samCwpFailureString: string;
    samCwpMatchString: string;
    samCwpPassword?: string;
    samCwpSuccessString: string;
    samCwpTestUrl: string;
    samCwpUsername: string;
    samEapMethod: string;
    samPassword?: string;
    samPrivateKey: string;
    samPrivateKeyPassword?: string;
    samReportIntv: number;
    samSecurityType: string;
    samServerFqdn: string;
    samServerIp: string;
    samServerType: string;
    samSsid: string;
    samTest: string;
    samUsername: string;
    shortGuardInterval: string;
    spectrumAnalysis: string;
    transmitOptimize: string;
    vapAll: string;
    vaps?: outputs.WirelesscontrollerWtpprofileRadio4Vap[];
    widsProfile: string;
    zeroWaitDfs: string;
}

export interface WirelesscontrollerWtpprofileRadio4Channel {
    chan: string;
}

export interface WirelesscontrollerWtpprofileRadio4Vap {
    name: string;
}

export interface WirelesscontrollerWtpprofileSplitTunnelingAcl {
    destIp: string;
    id: number;
}

export interface Wirelesscontrollerhotspot20Anqp3gppcellularMccMncList {
    id: number;
    mcc: string;
    mnc: string;
}

export interface Wirelesscontrollerhotspot20AnqpnairealmNaiList {
    eapMethods?: outputs.Wirelesscontrollerhotspot20AnqpnairealmNaiListEapMethod[];
    encoding: string;
    naiRealm: string;
    name: string;
}

export interface Wirelesscontrollerhotspot20AnqpnairealmNaiListEapMethod {
    authParams?: outputs.Wirelesscontrollerhotspot20AnqpnairealmNaiListEapMethodAuthParam[];
    index: number;
    method: string;
}

export interface Wirelesscontrollerhotspot20AnqpnairealmNaiListEapMethodAuthParam {
    id: string;
    index: number;
    val: string;
}

export interface Wirelesscontrollerhotspot20AnqproamingconsortiumOiList {
    comment: string;
    index: number;
    oi: string;
}

export interface Wirelesscontrollerhotspot20AnqpvenuenameValueList {
    index: number;
    lang: string;
    value: string;
}

export interface Wirelesscontrollerhotspot20AnqpvenueurlValueList {
    index: number;
    number: number;
    value: string;
}

export interface Wirelesscontrollerhotspot20H2qpadviceofchargeAocList {
    naiRealm: string;
    naiRealmEncoding: string;
    name: string;
    planInfos?: outputs.Wirelesscontrollerhotspot20H2qpadviceofchargeAocListPlanInfo[];
    type: string;
}

export interface Wirelesscontrollerhotspot20H2qpadviceofchargeAocListPlanInfo {
    currency: string;
    infoFile: string;
    lang: string;
    name: string;
}

export interface Wirelesscontrollerhotspot20H2qpoperatornameValueList {
    index: number;
    lang: string;
    value: string;
}

export interface Wirelesscontrollerhotspot20H2qposuproviderFriendlyName {
    friendlyName: string;
    index: number;
    lang: string;
}

export interface Wirelesscontrollerhotspot20H2qposuproviderServiceDescription {
    lang: string;
    serviceDescription: string;
    serviceId: number;
}

export interface Wirelesscontrollerhotspot20H2qposuprovidernaiNaiList {
    name: string;
    osuNai: string;
}

export interface Wirelesscontrollerhotspot20HsprofileOsuProvider {
    name: string;
}

export interface Wirelesscontrollerhotspot20IconIconList {
    file: string;
    height: number;
    lang: string;
    name: string;
    type: string;
    width: number;
}

export interface Wirelesscontrollerhotspot20QosmapDscpExcept {
    dscp: number;
    index: number;
    up: number;
}

export interface Wirelesscontrollerhotspot20QosmapDscpRange {
    high: number;
    index: number;
    low: number;
    up: number;
}

