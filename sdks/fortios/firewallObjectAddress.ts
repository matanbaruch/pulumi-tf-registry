// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FirewallObjectAddress extends pulumi.CustomResource {
    /**
     * Get an existing FirewallObjectAddress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallObjectAddressState, opts?: pulumi.CustomResourceOptions): FirewallObjectAddress {
        return new FirewallObjectAddress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallObjectAddress:FirewallObjectAddress';

    /**
     * Returns true if the given object is an instance of FirewallObjectAddress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallObjectAddress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallObjectAddress.__pulumiType;
    }

    public readonly associatedInterface!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly country!: pulumi.Output<string>;
    public readonly endIp!: pulumi.Output<string>;
    public readonly fqdn!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly showInAddressList!: pulumi.Output<string>;
    public readonly startIp!: pulumi.Output<string>;
    public readonly staticRouteConfigure!: pulumi.Output<string>;
    public readonly subnet!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a FirewallObjectAddress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallObjectAddressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallObjectAddressArgs | FirewallObjectAddressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallObjectAddressState | undefined;
            resourceInputs["associatedInterface"] = state ? state.associatedInterface : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["endIp"] = state ? state.endIp : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["showInAddressList"] = state ? state.showInAddressList : undefined;
            resourceInputs["startIp"] = state ? state.startIp : undefined;
            resourceInputs["staticRouteConfigure"] = state ? state.staticRouteConfigure : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FirewallObjectAddressArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["associatedInterface"] = args ? args.associatedInterface : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["endIp"] = args ? args.endIp : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["showInAddressList"] = args ? args.showInAddressList : undefined;
            resourceInputs["startIp"] = args ? args.startIp : undefined;
            resourceInputs["staticRouteConfigure"] = args ? args.staticRouteConfigure : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallObjectAddress.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallObjectAddress resources.
 */
export interface FirewallObjectAddressState {
    associatedInterface?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    endIp?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    showInAddressList?: pulumi.Input<string>;
    startIp?: pulumi.Input<string>;
    staticRouteConfigure?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallObjectAddress resource.
 */
export interface FirewallObjectAddressArgs {
    associatedInterface?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    endIp?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    showInAddressList?: pulumi.Input<string>;
    startIp?: pulumi.Input<string>;
    staticRouteConfigure?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
