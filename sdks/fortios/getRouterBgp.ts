// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRouterBgp(args?: GetRouterBgpArgs, opts?: pulumi.InvokeOptions): Promise<GetRouterBgpResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:index/getRouterBgp:getRouterBgp", {
        "id": args.id,
        "vdomparam": args.vdomparam,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRouterBgp.
 */
export interface GetRouterBgpArgs {
    id?: string;
    vdomparam?: string;
}

/**
 * A collection of values returned by getRouterBgp.
 */
export interface GetRouterBgpResult {
    readonly additionalPath: string;
    readonly additionalPath6: string;
    readonly additionalPathSelect: number;
    readonly additionalPathSelect6: number;
    readonly additionalPathSelectVpnv4: number;
    readonly additionalPathSelectVpnv6: number;
    readonly additionalPathVpnv4: string;
    readonly additionalPathVpnv6: string;
    readonly adminDistances: outputs.GetRouterBgpAdminDistance[];
    readonly aggregateAddress6s: outputs.GetRouterBgpAggregateAddress6[];
    readonly aggregateAddresses: outputs.GetRouterBgpAggregateAddress[];
    readonly alwaysCompareMed: string;
    readonly as: number;
    readonly asString: string;
    readonly bestpathAsPathIgnore: string;
    readonly bestpathCmpConfedAspath: string;
    readonly bestpathCmpRouterid: string;
    readonly bestpathMedConfed: string;
    readonly bestpathMedMissingAsWorst: string;
    readonly clientToClientReflection: string;
    readonly clusterId: string;
    readonly confederationIdentifier: number;
    readonly confederationPeers: outputs.GetRouterBgpConfederationPeer[];
    readonly crossFamilyConditionalAdv: string;
    readonly dampening: string;
    readonly dampeningMaxSuppressTime: number;
    readonly dampeningReachabilityHalfLife: number;
    readonly dampeningReuse: number;
    readonly dampeningRouteMap: string;
    readonly dampeningSuppress: number;
    readonly dampeningUnreachabilityHalfLife: number;
    readonly defaultLocalPreference: number;
    readonly deterministicMed: string;
    readonly distanceExternal: number;
    readonly distanceInternal: number;
    readonly distanceLocal: number;
    readonly ebgpMultipath: string;
    readonly enforceFirstAs: string;
    readonly fastExternalFailover: string;
    readonly gracefulEndOnTimer: string;
    readonly gracefulRestart: string;
    readonly gracefulRestartTime: number;
    readonly gracefulStalepathTime: number;
    readonly gracefulUpdateDelay: number;
    readonly holdtimeTimer: number;
    readonly ibgpMultipath: string;
    readonly id: string;
    readonly ignoreOptionalCapability: string;
    readonly keepaliveTimer: number;
    readonly logNeighbourChanges: string;
    readonly multipathRecursiveDistance: string;
    readonly neighborGroups: outputs.GetRouterBgpNeighborGroup[];
    readonly neighborRange6s: outputs.GetRouterBgpNeighborRange6[];
    readonly neighborRanges: outputs.GetRouterBgpNeighborRange[];
    readonly neighbors: outputs.GetRouterBgpNeighbor[];
    readonly network6s: outputs.GetRouterBgpNetwork6[];
    readonly networkImportCheck: string;
    readonly networks: outputs.GetRouterBgpNetwork[];
    readonly recursiveInheritPriority: string;
    readonly recursiveNextHop: string;
    readonly redistribute6s: outputs.GetRouterBgpRedistribute6[];
    readonly redistributes: outputs.GetRouterBgpRedistribute[];
    readonly routerId: string;
    readonly scanTime: number;
    readonly synchronization: string;
    readonly tagResolveMode: string;
    readonly vdomparam?: string;
    readonly vrf6s: outputs.GetRouterBgpVrf6[];
    readonly vrfLeak6s: outputs.GetRouterBgpVrfLeak6[];
    readonly vrfLeaks: outputs.GetRouterBgpVrfLeak[];
    readonly vrves: outputs.GetRouterBgpVrf[];
}
export function getRouterBgpOutput(args?: GetRouterBgpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRouterBgpResult> {
    return pulumi.output(args).apply((a: any) => getRouterBgp(a, opts))
}

/**
 * A collection of arguments for invoking getRouterBgp.
 */
export interface GetRouterBgpOutputArgs {
    id?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
