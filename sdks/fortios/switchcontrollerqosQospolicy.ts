// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwitchcontrollerqosQospolicy extends pulumi.CustomResource {
    /**
     * Get an existing SwitchcontrollerqosQospolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchcontrollerqosQospolicyState, opts?: pulumi.CustomResourceOptions): SwitchcontrollerqosQospolicy {
        return new SwitchcontrollerqosQospolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/switchcontrollerqosQospolicy:SwitchcontrollerqosQospolicy';

    /**
     * Returns true if the given object is an instance of SwitchcontrollerqosQospolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchcontrollerqosQospolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchcontrollerqosQospolicy.__pulumiType;
    }

    public readonly defaultCos!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly queuePolicy!: pulumi.Output<string>;
    public readonly trustDot1pMap!: pulumi.Output<string>;
    public readonly trustIpDscpMap!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a SwitchcontrollerqosQospolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchcontrollerqosQospolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchcontrollerqosQospolicyArgs | SwitchcontrollerqosQospolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchcontrollerqosQospolicyState | undefined;
            resourceInputs["defaultCos"] = state ? state.defaultCos : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queuePolicy"] = state ? state.queuePolicy : undefined;
            resourceInputs["trustDot1pMap"] = state ? state.trustDot1pMap : undefined;
            resourceInputs["trustIpDscpMap"] = state ? state.trustIpDscpMap : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SwitchcontrollerqosQospolicyArgs | undefined;
            if ((!args || args.defaultCos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultCos'");
            }
            resourceInputs["defaultCos"] = args ? args.defaultCos : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queuePolicy"] = args ? args.queuePolicy : undefined;
            resourceInputs["trustDot1pMap"] = args ? args.trustDot1pMap : undefined;
            resourceInputs["trustIpDscpMap"] = args ? args.trustIpDscpMap : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchcontrollerqosQospolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchcontrollerqosQospolicy resources.
 */
export interface SwitchcontrollerqosQospolicyState {
    defaultCos?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    queuePolicy?: pulumi.Input<string>;
    trustDot1pMap?: pulumi.Input<string>;
    trustIpDscpMap?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchcontrollerqosQospolicy resource.
 */
export interface SwitchcontrollerqosQospolicyArgs {
    defaultCos: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    queuePolicy?: pulumi.Input<string>;
    trustDot1pMap?: pulumi.Input<string>;
    trustIpDscpMap?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
