// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExtendercontrollerExtender1 extends pulumi.CustomResource {
    /**
     * Get an existing ExtendercontrollerExtender1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtendercontrollerExtender1State, opts?: pulumi.CustomResourceOptions): ExtendercontrollerExtender1 {
        return new ExtendercontrollerExtender1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/extendercontrollerExtender1:ExtendercontrollerExtender1';

    /**
     * Returns true if the given object is an instance of ExtendercontrollerExtender1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExtendercontrollerExtender1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExtendercontrollerExtender1.__pulumiType;
    }

    public readonly authorized!: pulumi.Output<string>;
    public readonly controllerReport!: pulumi.Output<outputs.ExtendercontrollerExtender1ControllerReport | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly extName!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<string>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly loginPassword!: pulumi.Output<string | undefined>;
    public readonly modem1!: pulumi.Output<outputs.ExtendercontrollerExtender1Modem1 | undefined>;
    public readonly modem2!: pulumi.Output<outputs.ExtendercontrollerExtender1Modem2 | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<number>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a ExtendercontrollerExtender1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtendercontrollerExtender1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtendercontrollerExtender1Args | ExtendercontrollerExtender1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtendercontrollerExtender1State | undefined;
            resourceInputs["authorized"] = state ? state.authorized : undefined;
            resourceInputs["controllerReport"] = state ? state.controllerReport : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["extName"] = state ? state.extName : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["loginPassword"] = state ? state.loginPassword : undefined;
            resourceInputs["modem1"] = state ? state.modem1 : undefined;
            resourceInputs["modem2"] = state ? state.modem2 : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as ExtendercontrollerExtender1Args | undefined;
            if ((!args || args.authorized === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorized'");
            }
            resourceInputs["authorized"] = args ? args.authorized : undefined;
            resourceInputs["controllerReport"] = args ? args.controllerReport : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["extName"] = args ? args.extName : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["loginPassword"] = args?.loginPassword ? pulumi.secret(args.loginPassword) : undefined;
            resourceInputs["modem1"] = args ? args.modem1 : undefined;
            resourceInputs["modem2"] = args ? args.modem2 : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["loginPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ExtendercontrollerExtender1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExtendercontrollerExtender1 resources.
 */
export interface ExtendercontrollerExtender1State {
    authorized?: pulumi.Input<string>;
    controllerReport?: pulumi.Input<inputs.ExtendercontrollerExtender1ControllerReport>;
    description?: pulumi.Input<string>;
    extName?: pulumi.Input<string>;
    fosid?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    loginPassword?: pulumi.Input<string>;
    modem1?: pulumi.Input<inputs.ExtendercontrollerExtender1Modem1>;
    modem2?: pulumi.Input<inputs.ExtendercontrollerExtender1Modem2>;
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExtendercontrollerExtender1 resource.
 */
export interface ExtendercontrollerExtender1Args {
    authorized: pulumi.Input<string>;
    controllerReport?: pulumi.Input<inputs.ExtendercontrollerExtender1ControllerReport>;
    description?: pulumi.Input<string>;
    extName?: pulumi.Input<string>;
    fosid?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    loginPassword?: pulumi.Input<string>;
    modem1?: pulumi.Input<inputs.ExtendercontrollerExtender1Modem1>;
    modem2?: pulumi.Input<inputs.ExtendercontrollerExtender1Modem2>;
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}
