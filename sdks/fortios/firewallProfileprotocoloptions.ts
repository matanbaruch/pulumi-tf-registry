// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallProfileprotocoloptions extends pulumi.CustomResource {
    /**
     * Get an existing FirewallProfileprotocoloptions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallProfileprotocoloptionsState, opts?: pulumi.CustomResourceOptions): FirewallProfileprotocoloptions {
        return new FirewallProfileprotocoloptions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallProfileprotocoloptions:FirewallProfileprotocoloptions';

    /**
     * Returns true if the given object is an instance of FirewallProfileprotocoloptions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallProfileprotocoloptions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallProfileprotocoloptions.__pulumiType;
    }

    public readonly cifs!: pulumi.Output<outputs.FirewallProfileprotocoloptionsCifs | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly dns!: pulumi.Output<outputs.FirewallProfileprotocoloptionsDns | undefined>;
    public readonly featureSet!: pulumi.Output<string>;
    public readonly ftp!: pulumi.Output<outputs.FirewallProfileprotocoloptionsFtp | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly http!: pulumi.Output<outputs.FirewallProfileprotocoloptionsHttp | undefined>;
    public readonly imap!: pulumi.Output<outputs.FirewallProfileprotocoloptionsImap | undefined>;
    public readonly mailSignature!: pulumi.Output<outputs.FirewallProfileprotocoloptionsMailSignature | undefined>;
    public readonly mapi!: pulumi.Output<outputs.FirewallProfileprotocoloptionsMapi | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nntp!: pulumi.Output<outputs.FirewallProfileprotocoloptionsNntp | undefined>;
    public readonly oversizeLog!: pulumi.Output<string>;
    public readonly pop3!: pulumi.Output<outputs.FirewallProfileprotocoloptionsPop3 | undefined>;
    public readonly replacemsgGroup!: pulumi.Output<string>;
    public readonly rpcOverHttp!: pulumi.Output<string>;
    public readonly smtp!: pulumi.Output<outputs.FirewallProfileprotocoloptionsSmtp | undefined>;
    public readonly ssh!: pulumi.Output<outputs.FirewallProfileprotocoloptionsSsh | undefined>;
    public readonly switchingProtocolsLog!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a FirewallProfileprotocoloptions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallProfileprotocoloptionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallProfileprotocoloptionsArgs | FirewallProfileprotocoloptionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallProfileprotocoloptionsState | undefined;
            resourceInputs["cifs"] = state ? state.cifs : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["featureSet"] = state ? state.featureSet : undefined;
            resourceInputs["ftp"] = state ? state.ftp : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["http"] = state ? state.http : undefined;
            resourceInputs["imap"] = state ? state.imap : undefined;
            resourceInputs["mailSignature"] = state ? state.mailSignature : undefined;
            resourceInputs["mapi"] = state ? state.mapi : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nntp"] = state ? state.nntp : undefined;
            resourceInputs["oversizeLog"] = state ? state.oversizeLog : undefined;
            resourceInputs["pop3"] = state ? state.pop3 : undefined;
            resourceInputs["replacemsgGroup"] = state ? state.replacemsgGroup : undefined;
            resourceInputs["rpcOverHttp"] = state ? state.rpcOverHttp : undefined;
            resourceInputs["smtp"] = state ? state.smtp : undefined;
            resourceInputs["ssh"] = state ? state.ssh : undefined;
            resourceInputs["switchingProtocolsLog"] = state ? state.switchingProtocolsLog : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as FirewallProfileprotocoloptionsArgs | undefined;
            resourceInputs["cifs"] = args ? args.cifs : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["featureSet"] = args ? args.featureSet : undefined;
            resourceInputs["ftp"] = args ? args.ftp : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["http"] = args ? args.http : undefined;
            resourceInputs["imap"] = args ? args.imap : undefined;
            resourceInputs["mailSignature"] = args ? args.mailSignature : undefined;
            resourceInputs["mapi"] = args ? args.mapi : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nntp"] = args ? args.nntp : undefined;
            resourceInputs["oversizeLog"] = args ? args.oversizeLog : undefined;
            resourceInputs["pop3"] = args ? args.pop3 : undefined;
            resourceInputs["replacemsgGroup"] = args ? args.replacemsgGroup : undefined;
            resourceInputs["rpcOverHttp"] = args ? args.rpcOverHttp : undefined;
            resourceInputs["smtp"] = args ? args.smtp : undefined;
            resourceInputs["ssh"] = args ? args.ssh : undefined;
            resourceInputs["switchingProtocolsLog"] = args ? args.switchingProtocolsLog : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallProfileprotocoloptions.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallProfileprotocoloptions resources.
 */
export interface FirewallProfileprotocoloptionsState {
    cifs?: pulumi.Input<inputs.FirewallProfileprotocoloptionsCifs>;
    comment?: pulumi.Input<string>;
    dns?: pulumi.Input<inputs.FirewallProfileprotocoloptionsDns>;
    featureSet?: pulumi.Input<string>;
    ftp?: pulumi.Input<inputs.FirewallProfileprotocoloptionsFtp>;
    getAllTables?: pulumi.Input<string>;
    http?: pulumi.Input<inputs.FirewallProfileprotocoloptionsHttp>;
    imap?: pulumi.Input<inputs.FirewallProfileprotocoloptionsImap>;
    mailSignature?: pulumi.Input<inputs.FirewallProfileprotocoloptionsMailSignature>;
    mapi?: pulumi.Input<inputs.FirewallProfileprotocoloptionsMapi>;
    name?: pulumi.Input<string>;
    nntp?: pulumi.Input<inputs.FirewallProfileprotocoloptionsNntp>;
    oversizeLog?: pulumi.Input<string>;
    pop3?: pulumi.Input<inputs.FirewallProfileprotocoloptionsPop3>;
    replacemsgGroup?: pulumi.Input<string>;
    rpcOverHttp?: pulumi.Input<string>;
    smtp?: pulumi.Input<inputs.FirewallProfileprotocoloptionsSmtp>;
    ssh?: pulumi.Input<inputs.FirewallProfileprotocoloptionsSsh>;
    switchingProtocolsLog?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallProfileprotocoloptions resource.
 */
export interface FirewallProfileprotocoloptionsArgs {
    cifs?: pulumi.Input<inputs.FirewallProfileprotocoloptionsCifs>;
    comment?: pulumi.Input<string>;
    dns?: pulumi.Input<inputs.FirewallProfileprotocoloptionsDns>;
    featureSet?: pulumi.Input<string>;
    ftp?: pulumi.Input<inputs.FirewallProfileprotocoloptionsFtp>;
    getAllTables?: pulumi.Input<string>;
    http?: pulumi.Input<inputs.FirewallProfileprotocoloptionsHttp>;
    imap?: pulumi.Input<inputs.FirewallProfileprotocoloptionsImap>;
    mailSignature?: pulumi.Input<inputs.FirewallProfileprotocoloptionsMailSignature>;
    mapi?: pulumi.Input<inputs.FirewallProfileprotocoloptionsMapi>;
    name?: pulumi.Input<string>;
    nntp?: pulumi.Input<inputs.FirewallProfileprotocoloptionsNntp>;
    oversizeLog?: pulumi.Input<string>;
    pop3?: pulumi.Input<inputs.FirewallProfileprotocoloptionsPop3>;
    replacemsgGroup?: pulumi.Input<string>;
    rpcOverHttp?: pulumi.Input<string>;
    smtp?: pulumi.Input<inputs.FirewallProfileprotocoloptionsSmtp>;
    ssh?: pulumi.Input<inputs.FirewallProfileprotocoloptionsSsh>;
    switchingProtocolsLog?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
