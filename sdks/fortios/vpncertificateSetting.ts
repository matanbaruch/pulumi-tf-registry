// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpncertificateSetting extends pulumi.CustomResource {
    /**
     * Get an existing VpncertificateSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpncertificateSettingState, opts?: pulumi.CustomResourceOptions): VpncertificateSetting {
        return new VpncertificateSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/vpncertificateSetting:VpncertificateSetting';

    /**
     * Returns true if the given object is an instance of VpncertificateSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpncertificateSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpncertificateSetting.__pulumiType;
    }

    public readonly certExpireWarning!: pulumi.Output<number>;
    public readonly certnameDsa1024!: pulumi.Output<string>;
    public readonly certnameDsa2048!: pulumi.Output<string>;
    public readonly certnameEcdsa256!: pulumi.Output<string>;
    public readonly certnameEcdsa384!: pulumi.Output<string>;
    public readonly certnameEcdsa521!: pulumi.Output<string>;
    public readonly certnameEd25519!: pulumi.Output<string>;
    public readonly certnameEd448!: pulumi.Output<string>;
    public readonly certnameRsa1024!: pulumi.Output<string>;
    public readonly certnameRsa2048!: pulumi.Output<string>;
    public readonly certnameRsa4096!: pulumi.Output<string>;
    public readonly checkCaCert!: pulumi.Output<string>;
    public readonly checkCaChain!: pulumi.Output<string>;
    public readonly cmpKeyUsageChecking!: pulumi.Output<string>;
    public readonly cmpSaveExtraCerts!: pulumi.Output<string>;
    public readonly cnAllowMulti!: pulumi.Output<string>;
    public readonly cnMatch!: pulumi.Output<string>;
    public readonly crlVerification!: pulumi.Output<outputs.VpncertificateSettingCrlVerification | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly interface!: pulumi.Output<string>;
    public readonly interfaceSelectMethod!: pulumi.Output<string>;
    public readonly ocspDefaultServer!: pulumi.Output<string>;
    public readonly ocspOption!: pulumi.Output<string>;
    public readonly ocspStatus!: pulumi.Output<string>;
    public readonly proxy!: pulumi.Output<string>;
    public readonly proxyPassword!: pulumi.Output<string | undefined>;
    public readonly proxyPort!: pulumi.Output<number>;
    public readonly proxyUsername!: pulumi.Output<string>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly sslMinProtoVersion!: pulumi.Output<string>;
    public readonly sslOcspSourceIp!: pulumi.Output<string>;
    public readonly strictCrlCheck!: pulumi.Output<string>;
    public readonly strictOcspCheck!: pulumi.Output<string>;
    public readonly subjectMatch!: pulumi.Output<string>;
    public readonly subjectSet!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a VpncertificateSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpncertificateSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpncertificateSettingArgs | VpncertificateSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpncertificateSettingState | undefined;
            resourceInputs["certExpireWarning"] = state ? state.certExpireWarning : undefined;
            resourceInputs["certnameDsa1024"] = state ? state.certnameDsa1024 : undefined;
            resourceInputs["certnameDsa2048"] = state ? state.certnameDsa2048 : undefined;
            resourceInputs["certnameEcdsa256"] = state ? state.certnameEcdsa256 : undefined;
            resourceInputs["certnameEcdsa384"] = state ? state.certnameEcdsa384 : undefined;
            resourceInputs["certnameEcdsa521"] = state ? state.certnameEcdsa521 : undefined;
            resourceInputs["certnameEd25519"] = state ? state.certnameEd25519 : undefined;
            resourceInputs["certnameEd448"] = state ? state.certnameEd448 : undefined;
            resourceInputs["certnameRsa1024"] = state ? state.certnameRsa1024 : undefined;
            resourceInputs["certnameRsa2048"] = state ? state.certnameRsa2048 : undefined;
            resourceInputs["certnameRsa4096"] = state ? state.certnameRsa4096 : undefined;
            resourceInputs["checkCaCert"] = state ? state.checkCaCert : undefined;
            resourceInputs["checkCaChain"] = state ? state.checkCaChain : undefined;
            resourceInputs["cmpKeyUsageChecking"] = state ? state.cmpKeyUsageChecking : undefined;
            resourceInputs["cmpSaveExtraCerts"] = state ? state.cmpSaveExtraCerts : undefined;
            resourceInputs["cnAllowMulti"] = state ? state.cnAllowMulti : undefined;
            resourceInputs["cnMatch"] = state ? state.cnMatch : undefined;
            resourceInputs["crlVerification"] = state ? state.crlVerification : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["interfaceSelectMethod"] = state ? state.interfaceSelectMethod : undefined;
            resourceInputs["ocspDefaultServer"] = state ? state.ocspDefaultServer : undefined;
            resourceInputs["ocspOption"] = state ? state.ocspOption : undefined;
            resourceInputs["ocspStatus"] = state ? state.ocspStatus : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["proxyPassword"] = state ? state.proxyPassword : undefined;
            resourceInputs["proxyPort"] = state ? state.proxyPort : undefined;
            resourceInputs["proxyUsername"] = state ? state.proxyUsername : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sslMinProtoVersion"] = state ? state.sslMinProtoVersion : undefined;
            resourceInputs["sslOcspSourceIp"] = state ? state.sslOcspSourceIp : undefined;
            resourceInputs["strictCrlCheck"] = state ? state.strictCrlCheck : undefined;
            resourceInputs["strictOcspCheck"] = state ? state.strictOcspCheck : undefined;
            resourceInputs["subjectMatch"] = state ? state.subjectMatch : undefined;
            resourceInputs["subjectSet"] = state ? state.subjectSet : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as VpncertificateSettingArgs | undefined;
            if ((!args || args.certnameDsa1024 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameDsa1024'");
            }
            if ((!args || args.certnameDsa2048 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameDsa2048'");
            }
            if ((!args || args.certnameEcdsa256 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameEcdsa256'");
            }
            if ((!args || args.certnameEcdsa384 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameEcdsa384'");
            }
            if ((!args || args.certnameRsa1024 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameRsa1024'");
            }
            if ((!args || args.certnameRsa2048 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certnameRsa2048'");
            }
            resourceInputs["certExpireWarning"] = args ? args.certExpireWarning : undefined;
            resourceInputs["certnameDsa1024"] = args ? args.certnameDsa1024 : undefined;
            resourceInputs["certnameDsa2048"] = args ? args.certnameDsa2048 : undefined;
            resourceInputs["certnameEcdsa256"] = args ? args.certnameEcdsa256 : undefined;
            resourceInputs["certnameEcdsa384"] = args ? args.certnameEcdsa384 : undefined;
            resourceInputs["certnameEcdsa521"] = args ? args.certnameEcdsa521 : undefined;
            resourceInputs["certnameEd25519"] = args ? args.certnameEd25519 : undefined;
            resourceInputs["certnameEd448"] = args ? args.certnameEd448 : undefined;
            resourceInputs["certnameRsa1024"] = args ? args.certnameRsa1024 : undefined;
            resourceInputs["certnameRsa2048"] = args ? args.certnameRsa2048 : undefined;
            resourceInputs["certnameRsa4096"] = args ? args.certnameRsa4096 : undefined;
            resourceInputs["checkCaCert"] = args ? args.checkCaCert : undefined;
            resourceInputs["checkCaChain"] = args ? args.checkCaChain : undefined;
            resourceInputs["cmpKeyUsageChecking"] = args ? args.cmpKeyUsageChecking : undefined;
            resourceInputs["cmpSaveExtraCerts"] = args ? args.cmpSaveExtraCerts : undefined;
            resourceInputs["cnAllowMulti"] = args ? args.cnAllowMulti : undefined;
            resourceInputs["cnMatch"] = args ? args.cnMatch : undefined;
            resourceInputs["crlVerification"] = args ? args.crlVerification : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["interfaceSelectMethod"] = args ? args.interfaceSelectMethod : undefined;
            resourceInputs["ocspDefaultServer"] = args ? args.ocspDefaultServer : undefined;
            resourceInputs["ocspOption"] = args ? args.ocspOption : undefined;
            resourceInputs["ocspStatus"] = args ? args.ocspStatus : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["proxyPassword"] = args ? args.proxyPassword : undefined;
            resourceInputs["proxyPort"] = args ? args.proxyPort : undefined;
            resourceInputs["proxyUsername"] = args ? args.proxyUsername : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sslMinProtoVersion"] = args ? args.sslMinProtoVersion : undefined;
            resourceInputs["sslOcspSourceIp"] = args ? args.sslOcspSourceIp : undefined;
            resourceInputs["strictCrlCheck"] = args ? args.strictCrlCheck : undefined;
            resourceInputs["strictOcspCheck"] = args ? args.strictOcspCheck : undefined;
            resourceInputs["subjectMatch"] = args ? args.subjectMatch : undefined;
            resourceInputs["subjectSet"] = args ? args.subjectSet : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpncertificateSetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpncertificateSetting resources.
 */
export interface VpncertificateSettingState {
    certExpireWarning?: pulumi.Input<number>;
    certnameDsa1024?: pulumi.Input<string>;
    certnameDsa2048?: pulumi.Input<string>;
    certnameEcdsa256?: pulumi.Input<string>;
    certnameEcdsa384?: pulumi.Input<string>;
    certnameEcdsa521?: pulumi.Input<string>;
    certnameEd25519?: pulumi.Input<string>;
    certnameEd448?: pulumi.Input<string>;
    certnameRsa1024?: pulumi.Input<string>;
    certnameRsa2048?: pulumi.Input<string>;
    certnameRsa4096?: pulumi.Input<string>;
    checkCaCert?: pulumi.Input<string>;
    checkCaChain?: pulumi.Input<string>;
    cmpKeyUsageChecking?: pulumi.Input<string>;
    cmpSaveExtraCerts?: pulumi.Input<string>;
    cnAllowMulti?: pulumi.Input<string>;
    cnMatch?: pulumi.Input<string>;
    crlVerification?: pulumi.Input<inputs.VpncertificateSettingCrlVerification>;
    getAllTables?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    ocspDefaultServer?: pulumi.Input<string>;
    ocspOption?: pulumi.Input<string>;
    ocspStatus?: pulumi.Input<string>;
    proxy?: pulumi.Input<string>;
    proxyPassword?: pulumi.Input<string>;
    proxyPort?: pulumi.Input<number>;
    proxyUsername?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sslMinProtoVersion?: pulumi.Input<string>;
    sslOcspSourceIp?: pulumi.Input<string>;
    strictCrlCheck?: pulumi.Input<string>;
    strictOcspCheck?: pulumi.Input<string>;
    subjectMatch?: pulumi.Input<string>;
    subjectSet?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpncertificateSetting resource.
 */
export interface VpncertificateSettingArgs {
    certExpireWarning?: pulumi.Input<number>;
    certnameDsa1024: pulumi.Input<string>;
    certnameDsa2048: pulumi.Input<string>;
    certnameEcdsa256: pulumi.Input<string>;
    certnameEcdsa384: pulumi.Input<string>;
    certnameEcdsa521?: pulumi.Input<string>;
    certnameEd25519?: pulumi.Input<string>;
    certnameEd448?: pulumi.Input<string>;
    certnameRsa1024: pulumi.Input<string>;
    certnameRsa2048: pulumi.Input<string>;
    certnameRsa4096?: pulumi.Input<string>;
    checkCaCert?: pulumi.Input<string>;
    checkCaChain?: pulumi.Input<string>;
    cmpKeyUsageChecking?: pulumi.Input<string>;
    cmpSaveExtraCerts?: pulumi.Input<string>;
    cnAllowMulti?: pulumi.Input<string>;
    cnMatch?: pulumi.Input<string>;
    crlVerification?: pulumi.Input<inputs.VpncertificateSettingCrlVerification>;
    getAllTables?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    ocspDefaultServer?: pulumi.Input<string>;
    ocspOption?: pulumi.Input<string>;
    ocspStatus?: pulumi.Input<string>;
    proxy?: pulumi.Input<string>;
    proxyPassword?: pulumi.Input<string>;
    proxyPort?: pulumi.Input<number>;
    proxyUsername?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sslMinProtoVersion?: pulumi.Input<string>;
    sslOcspSourceIp?: pulumi.Input<string>;
    strictCrlCheck?: pulumi.Input<string>;
    strictOcspCheck?: pulumi.Input<string>;
    subjectMatch?: pulumi.Input<string>;
    subjectSet?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
