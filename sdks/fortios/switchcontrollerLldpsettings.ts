// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwitchcontrollerLldpsettings extends pulumi.CustomResource {
    /**
     * Get an existing SwitchcontrollerLldpsettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchcontrollerLldpsettingsState, opts?: pulumi.CustomResourceOptions): SwitchcontrollerLldpsettings {
        return new SwitchcontrollerLldpsettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/switchcontrollerLldpsettings:SwitchcontrollerLldpsettings';

    /**
     * Returns true if the given object is an instance of SwitchcontrollerLldpsettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchcontrollerLldpsettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchcontrollerLldpsettings.__pulumiType;
    }

    public readonly deviceDetection!: pulumi.Output<string>;
    public readonly fastStartInterval!: pulumi.Output<number>;
    public readonly managementInterface!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly txHold!: pulumi.Output<number>;
    public readonly txInterval!: pulumi.Output<number>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a SwitchcontrollerLldpsettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchcontrollerLldpsettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchcontrollerLldpsettingsArgs | SwitchcontrollerLldpsettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchcontrollerLldpsettingsState | undefined;
            resourceInputs["deviceDetection"] = state ? state.deviceDetection : undefined;
            resourceInputs["fastStartInterval"] = state ? state.fastStartInterval : undefined;
            resourceInputs["managementInterface"] = state ? state.managementInterface : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["txHold"] = state ? state.txHold : undefined;
            resourceInputs["txInterval"] = state ? state.txInterval : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SwitchcontrollerLldpsettingsArgs | undefined;
            resourceInputs["deviceDetection"] = args ? args.deviceDetection : undefined;
            resourceInputs["fastStartInterval"] = args ? args.fastStartInterval : undefined;
            resourceInputs["managementInterface"] = args ? args.managementInterface : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["txHold"] = args ? args.txHold : undefined;
            resourceInputs["txInterval"] = args ? args.txInterval : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchcontrollerLldpsettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchcontrollerLldpsettings resources.
 */
export interface SwitchcontrollerLldpsettingsState {
    deviceDetection?: pulumi.Input<string>;
    fastStartInterval?: pulumi.Input<number>;
    managementInterface?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    txHold?: pulumi.Input<number>;
    txInterval?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchcontrollerLldpsettings resource.
 */
export interface SwitchcontrollerLldpsettingsArgs {
    deviceDetection?: pulumi.Input<string>;
    fastStartInterval?: pulumi.Input<number>;
    managementInterface?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    txHold?: pulumi.Input<number>;
    txInterval?: pulumi.Input<number>;
    vdomparam?: pulumi.Input<string>;
}
