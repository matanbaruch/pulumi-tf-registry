// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemMobiletunnel extends pulumi.CustomResource {
    /**
     * Get an existing SystemMobiletunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemMobiletunnelState, opts?: pulumi.CustomResourceOptions): SystemMobiletunnel {
        return new SystemMobiletunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/systemMobiletunnel:SystemMobiletunnel';

    /**
     * Returns true if the given object is an instance of SystemMobiletunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemMobiletunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemMobiletunnel.__pulumiType;
    }

    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly hashAlgorithm!: pulumi.Output<string>;
    public readonly homeAddress!: pulumi.Output<string>;
    public readonly homeAgent!: pulumi.Output<string>;
    public readonly lifetime!: pulumi.Output<number>;
    public readonly nMhaeKey!: pulumi.Output<string>;
    public readonly nMhaeKeyType!: pulumi.Output<string>;
    public readonly nMhaeSpi!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.SystemMobiletunnelNetwork[] | undefined>;
    public readonly regInterval!: pulumi.Output<number>;
    public readonly regRetry!: pulumi.Output<number>;
    public readonly renewInterval!: pulumi.Output<number>;
    public readonly roamingInterface!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tunnelMode!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a SystemMobiletunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemMobiletunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemMobiletunnelArgs | SystemMobiletunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemMobiletunnelState | undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["hashAlgorithm"] = state ? state.hashAlgorithm : undefined;
            resourceInputs["homeAddress"] = state ? state.homeAddress : undefined;
            resourceInputs["homeAgent"] = state ? state.homeAgent : undefined;
            resourceInputs["lifetime"] = state ? state.lifetime : undefined;
            resourceInputs["nMhaeKey"] = state ? state.nMhaeKey : undefined;
            resourceInputs["nMhaeKeyType"] = state ? state.nMhaeKeyType : undefined;
            resourceInputs["nMhaeSpi"] = state ? state.nMhaeSpi : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["regInterval"] = state ? state.regInterval : undefined;
            resourceInputs["regRetry"] = state ? state.regRetry : undefined;
            resourceInputs["renewInterval"] = state ? state.renewInterval : undefined;
            resourceInputs["roamingInterface"] = state ? state.roamingInterface : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tunnelMode"] = state ? state.tunnelMode : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SystemMobiletunnelArgs | undefined;
            if ((!args || args.hashAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hashAlgorithm'");
            }
            if ((!args || args.homeAgent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'homeAgent'");
            }
            if ((!args || args.lifetime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lifetime'");
            }
            if ((!args || args.nMhaeKeyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nMhaeKeyType'");
            }
            if ((!args || args.nMhaeSpi === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nMhaeSpi'");
            }
            if ((!args || args.regInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regInterval'");
            }
            if ((!args || args.regRetry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regRetry'");
            }
            if ((!args || args.renewInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'renewInterval'");
            }
            if ((!args || args.roamingInterface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roamingInterface'");
            }
            if ((!args || args.tunnelMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnelMode'");
            }
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["hashAlgorithm"] = args ? args.hashAlgorithm : undefined;
            resourceInputs["homeAddress"] = args ? args.homeAddress : undefined;
            resourceInputs["homeAgent"] = args ? args.homeAgent : undefined;
            resourceInputs["lifetime"] = args ? args.lifetime : undefined;
            resourceInputs["nMhaeKey"] = args?.nMhaeKey ? pulumi.secret(args.nMhaeKey) : undefined;
            resourceInputs["nMhaeKeyType"] = args ? args.nMhaeKeyType : undefined;
            resourceInputs["nMhaeSpi"] = args ? args.nMhaeSpi : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["regInterval"] = args ? args.regInterval : undefined;
            resourceInputs["regRetry"] = args ? args.regRetry : undefined;
            resourceInputs["renewInterval"] = args ? args.renewInterval : undefined;
            resourceInputs["roamingInterface"] = args ? args.roamingInterface : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tunnelMode"] = args ? args.tunnelMode : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["nMhaeKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemMobiletunnel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemMobiletunnel resources.
 */
export interface SystemMobiletunnelState {
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    hashAlgorithm?: pulumi.Input<string>;
    homeAddress?: pulumi.Input<string>;
    homeAgent?: pulumi.Input<string>;
    lifetime?: pulumi.Input<number>;
    nMhaeKey?: pulumi.Input<string>;
    nMhaeKeyType?: pulumi.Input<string>;
    nMhaeSpi?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.SystemMobiletunnelNetwork>[]>;
    regInterval?: pulumi.Input<number>;
    regRetry?: pulumi.Input<number>;
    renewInterval?: pulumi.Input<number>;
    roamingInterface?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelMode?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemMobiletunnel resource.
 */
export interface SystemMobiletunnelArgs {
    dynamicSortSubtable?: pulumi.Input<string>;
    getAllTables?: pulumi.Input<string>;
    hashAlgorithm: pulumi.Input<string>;
    homeAddress?: pulumi.Input<string>;
    homeAgent: pulumi.Input<string>;
    lifetime: pulumi.Input<number>;
    nMhaeKey?: pulumi.Input<string>;
    nMhaeKeyType: pulumi.Input<string>;
    nMhaeSpi: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.SystemMobiletunnelNetwork>[]>;
    regInterval: pulumi.Input<number>;
    regRetry: pulumi.Input<number>;
    renewInterval: pulumi.Input<number>;
    roamingInterface: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelMode: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
