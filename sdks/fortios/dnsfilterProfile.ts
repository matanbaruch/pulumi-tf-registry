// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsfilterProfile extends pulumi.CustomResource {
    /**
     * Get an existing DnsfilterProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsfilterProfileState, opts?: pulumi.CustomResourceOptions): DnsfilterProfile {
        return new DnsfilterProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/dnsfilterProfile:DnsfilterProfile';

    /**
     * Returns true if the given object is an instance of DnsfilterProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsfilterProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsfilterProfile.__pulumiType;
    }

    public readonly blockAction!: pulumi.Output<string>;
    public readonly blockBotnet!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly dnsTranslations!: pulumi.Output<outputs.DnsfilterProfileDnsTranslation[] | undefined>;
    public readonly domainFilter!: pulumi.Output<outputs.DnsfilterProfileDomainFilter | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly externalIpBlocklists!: pulumi.Output<outputs.DnsfilterProfileExternalIpBlocklist[] | undefined>;
    public readonly ftgdDns!: pulumi.Output<outputs.DnsfilterProfileFtgdDns | undefined>;
    public readonly getAllTables!: pulumi.Output<string | undefined>;
    public readonly logAllDomain!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly redirectPortal!: pulumi.Output<string>;
    public readonly redirectPortal6!: pulumi.Output<string>;
    public readonly safeSearch!: pulumi.Output<string>;
    public readonly sdnsDomainLog!: pulumi.Output<string>;
    public readonly sdnsFtgdErrLog!: pulumi.Output<string>;
    public readonly stripEch!: pulumi.Output<string>;
    public readonly transparentDnsDatabases!: pulumi.Output<outputs.DnsfilterProfileTransparentDnsDatabase[] | undefined>;
    public readonly vdomparam!: pulumi.Output<string>;
    public readonly youtubeRestrict!: pulumi.Output<string>;

    /**
     * Create a DnsfilterProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DnsfilterProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsfilterProfileArgs | DnsfilterProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsfilterProfileState | undefined;
            resourceInputs["blockAction"] = state ? state.blockAction : undefined;
            resourceInputs["blockBotnet"] = state ? state.blockBotnet : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dnsTranslations"] = state ? state.dnsTranslations : undefined;
            resourceInputs["domainFilter"] = state ? state.domainFilter : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["externalIpBlocklists"] = state ? state.externalIpBlocklists : undefined;
            resourceInputs["ftgdDns"] = state ? state.ftgdDns : undefined;
            resourceInputs["getAllTables"] = state ? state.getAllTables : undefined;
            resourceInputs["logAllDomain"] = state ? state.logAllDomain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["redirectPortal"] = state ? state.redirectPortal : undefined;
            resourceInputs["redirectPortal6"] = state ? state.redirectPortal6 : undefined;
            resourceInputs["safeSearch"] = state ? state.safeSearch : undefined;
            resourceInputs["sdnsDomainLog"] = state ? state.sdnsDomainLog : undefined;
            resourceInputs["sdnsFtgdErrLog"] = state ? state.sdnsFtgdErrLog : undefined;
            resourceInputs["stripEch"] = state ? state.stripEch : undefined;
            resourceInputs["transparentDnsDatabases"] = state ? state.transparentDnsDatabases : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
            resourceInputs["youtubeRestrict"] = state ? state.youtubeRestrict : undefined;
        } else {
            const args = argsOrState as DnsfilterProfileArgs | undefined;
            resourceInputs["blockAction"] = args ? args.blockAction : undefined;
            resourceInputs["blockBotnet"] = args ? args.blockBotnet : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dnsTranslations"] = args ? args.dnsTranslations : undefined;
            resourceInputs["domainFilter"] = args ? args.domainFilter : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["externalIpBlocklists"] = args ? args.externalIpBlocklists : undefined;
            resourceInputs["ftgdDns"] = args ? args.ftgdDns : undefined;
            resourceInputs["getAllTables"] = args ? args.getAllTables : undefined;
            resourceInputs["logAllDomain"] = args ? args.logAllDomain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["redirectPortal"] = args ? args.redirectPortal : undefined;
            resourceInputs["redirectPortal6"] = args ? args.redirectPortal6 : undefined;
            resourceInputs["safeSearch"] = args ? args.safeSearch : undefined;
            resourceInputs["sdnsDomainLog"] = args ? args.sdnsDomainLog : undefined;
            resourceInputs["sdnsFtgdErrLog"] = args ? args.sdnsFtgdErrLog : undefined;
            resourceInputs["stripEch"] = args ? args.stripEch : undefined;
            resourceInputs["transparentDnsDatabases"] = args ? args.transparentDnsDatabases : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
            resourceInputs["youtubeRestrict"] = args ? args.youtubeRestrict : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsfilterProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsfilterProfile resources.
 */
export interface DnsfilterProfileState {
    blockAction?: pulumi.Input<string>;
    blockBotnet?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dnsTranslations?: pulumi.Input<pulumi.Input<inputs.DnsfilterProfileDnsTranslation>[]>;
    domainFilter?: pulumi.Input<inputs.DnsfilterProfileDomainFilter>;
    dynamicSortSubtable?: pulumi.Input<string>;
    externalIpBlocklists?: pulumi.Input<pulumi.Input<inputs.DnsfilterProfileExternalIpBlocklist>[]>;
    ftgdDns?: pulumi.Input<inputs.DnsfilterProfileFtgdDns>;
    getAllTables?: pulumi.Input<string>;
    logAllDomain?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    redirectPortal?: pulumi.Input<string>;
    redirectPortal6?: pulumi.Input<string>;
    safeSearch?: pulumi.Input<string>;
    sdnsDomainLog?: pulumi.Input<string>;
    sdnsFtgdErrLog?: pulumi.Input<string>;
    stripEch?: pulumi.Input<string>;
    transparentDnsDatabases?: pulumi.Input<pulumi.Input<inputs.DnsfilterProfileTransparentDnsDatabase>[]>;
    vdomparam?: pulumi.Input<string>;
    youtubeRestrict?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsfilterProfile resource.
 */
export interface DnsfilterProfileArgs {
    blockAction?: pulumi.Input<string>;
    blockBotnet?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dnsTranslations?: pulumi.Input<pulumi.Input<inputs.DnsfilterProfileDnsTranslation>[]>;
    domainFilter?: pulumi.Input<inputs.DnsfilterProfileDomainFilter>;
    dynamicSortSubtable?: pulumi.Input<string>;
    externalIpBlocklists?: pulumi.Input<pulumi.Input<inputs.DnsfilterProfileExternalIpBlocklist>[]>;
    ftgdDns?: pulumi.Input<inputs.DnsfilterProfileFtgdDns>;
    getAllTables?: pulumi.Input<string>;
    logAllDomain?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    redirectPortal?: pulumi.Input<string>;
    redirectPortal6?: pulumi.Input<string>;
    safeSearch?: pulumi.Input<string>;
    sdnsDomainLog?: pulumi.Input<string>;
    sdnsFtgdErrLog?: pulumi.Input<string>;
    stripEch?: pulumi.Input<string>;
    transparentDnsDatabases?: pulumi.Input<pulumi.Input<inputs.DnsfilterProfileTransparentDnsDatabase>[]>;
    vdomparam?: pulumi.Input<string>;
    youtubeRestrict?: pulumi.Input<string>;
}
