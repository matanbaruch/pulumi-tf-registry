// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FirewallIppool extends pulumi.CustomResource {
    /**
     * Get an existing FirewallIppool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallIppoolState, opts?: pulumi.CustomResourceOptions): FirewallIppool {
        return new FirewallIppool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/firewallIppool:FirewallIppool';

    /**
     * Returns true if the given object is an instance of FirewallIppool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallIppool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallIppool.__pulumiType;
    }

    public readonly addNat64Route!: pulumi.Output<string>;
    public readonly arpIntf!: pulumi.Output<string>;
    public readonly arpReply!: pulumi.Output<string>;
    public readonly associatedInterface!: pulumi.Output<string>;
    public readonly blockSize!: pulumi.Output<number>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly endip!: pulumi.Output<string>;
    public readonly endport!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly nat64!: pulumi.Output<string>;
    public readonly numBlocksPerUser!: pulumi.Output<number>;
    public readonly pbaInterimLog!: pulumi.Output<number>;
    public readonly pbaTimeout!: pulumi.Output<number>;
    public readonly permitAnyHost!: pulumi.Output<string>;
    public readonly portPerUser!: pulumi.Output<number>;
    public readonly sourceEndip!: pulumi.Output<string>;
    public readonly sourceStartip!: pulumi.Output<string>;
    public readonly startip!: pulumi.Output<string>;
    public readonly startport!: pulumi.Output<number>;
    public readonly subnetBroadcastInIppool!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly vdomparam!: pulumi.Output<string>;

    /**
     * Create a FirewallIppool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallIppoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallIppoolArgs | FirewallIppoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallIppoolState | undefined;
            resourceInputs["addNat64Route"] = state ? state.addNat64Route : undefined;
            resourceInputs["arpIntf"] = state ? state.arpIntf : undefined;
            resourceInputs["arpReply"] = state ? state.arpReply : undefined;
            resourceInputs["associatedInterface"] = state ? state.associatedInterface : undefined;
            resourceInputs["blockSize"] = state ? state.blockSize : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["endip"] = state ? state.endip : undefined;
            resourceInputs["endport"] = state ? state.endport : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nat64"] = state ? state.nat64 : undefined;
            resourceInputs["numBlocksPerUser"] = state ? state.numBlocksPerUser : undefined;
            resourceInputs["pbaInterimLog"] = state ? state.pbaInterimLog : undefined;
            resourceInputs["pbaTimeout"] = state ? state.pbaTimeout : undefined;
            resourceInputs["permitAnyHost"] = state ? state.permitAnyHost : undefined;
            resourceInputs["portPerUser"] = state ? state.portPerUser : undefined;
            resourceInputs["sourceEndip"] = state ? state.sourceEndip : undefined;
            resourceInputs["sourceStartip"] = state ? state.sourceStartip : undefined;
            resourceInputs["startip"] = state ? state.startip : undefined;
            resourceInputs["startport"] = state ? state.startport : undefined;
            resourceInputs["subnetBroadcastInIppool"] = state ? state.subnetBroadcastInIppool : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as FirewallIppoolArgs | undefined;
            if ((!args || args.endip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endip'");
            }
            if ((!args || args.startip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startip'");
            }
            resourceInputs["addNat64Route"] = args ? args.addNat64Route : undefined;
            resourceInputs["arpIntf"] = args ? args.arpIntf : undefined;
            resourceInputs["arpReply"] = args ? args.arpReply : undefined;
            resourceInputs["associatedInterface"] = args ? args.associatedInterface : undefined;
            resourceInputs["blockSize"] = args ? args.blockSize : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["endip"] = args ? args.endip : undefined;
            resourceInputs["endport"] = args ? args.endport : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nat64"] = args ? args.nat64 : undefined;
            resourceInputs["numBlocksPerUser"] = args ? args.numBlocksPerUser : undefined;
            resourceInputs["pbaInterimLog"] = args ? args.pbaInterimLog : undefined;
            resourceInputs["pbaTimeout"] = args ? args.pbaTimeout : undefined;
            resourceInputs["permitAnyHost"] = args ? args.permitAnyHost : undefined;
            resourceInputs["portPerUser"] = args ? args.portPerUser : undefined;
            resourceInputs["sourceEndip"] = args ? args.sourceEndip : undefined;
            resourceInputs["sourceStartip"] = args ? args.sourceStartip : undefined;
            resourceInputs["startip"] = args ? args.startip : undefined;
            resourceInputs["startport"] = args ? args.startport : undefined;
            resourceInputs["subnetBroadcastInIppool"] = args ? args.subnetBroadcastInIppool : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallIppool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallIppool resources.
 */
export interface FirewallIppoolState {
    addNat64Route?: pulumi.Input<string>;
    arpIntf?: pulumi.Input<string>;
    arpReply?: pulumi.Input<string>;
    associatedInterface?: pulumi.Input<string>;
    blockSize?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    endip?: pulumi.Input<string>;
    endport?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nat64?: pulumi.Input<string>;
    numBlocksPerUser?: pulumi.Input<number>;
    pbaInterimLog?: pulumi.Input<number>;
    pbaTimeout?: pulumi.Input<number>;
    permitAnyHost?: pulumi.Input<string>;
    portPerUser?: pulumi.Input<number>;
    sourceEndip?: pulumi.Input<string>;
    sourceStartip?: pulumi.Input<string>;
    startip?: pulumi.Input<string>;
    startport?: pulumi.Input<number>;
    subnetBroadcastInIppool?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallIppool resource.
 */
export interface FirewallIppoolArgs {
    addNat64Route?: pulumi.Input<string>;
    arpIntf?: pulumi.Input<string>;
    arpReply?: pulumi.Input<string>;
    associatedInterface?: pulumi.Input<string>;
    blockSize?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    endip: pulumi.Input<string>;
    endport?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nat64?: pulumi.Input<string>;
    numBlocksPerUser?: pulumi.Input<number>;
    pbaInterimLog?: pulumi.Input<number>;
    pbaTimeout?: pulumi.Input<number>;
    permitAnyHost?: pulumi.Input<string>;
    portPerUser?: pulumi.Input<number>;
    sourceEndip?: pulumi.Input<string>;
    sourceStartip?: pulumi.Input<string>;
    startip: pulumi.Input<string>;
    startport?: pulumi.Input<number>;
    subnetBroadcastInIppool?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vdomparam?: pulumi.Input<string>;
}
