// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationLoadbalancerForwardingrule extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationLoadbalancerForwardingrule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationLoadbalancerForwardingruleState, opts?: pulumi.CustomResourceOptions): ApplicationLoadbalancerForwardingrule {
        return new ApplicationLoadbalancerForwardingrule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/applicationLoadbalancerForwardingrule:ApplicationLoadbalancerForwardingrule';

    /**
     * Returns true if the given object is an instance of ApplicationLoadbalancerForwardingrule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationLoadbalancerForwardingrule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationLoadbalancerForwardingrule.__pulumiType;
    }

    public readonly applicationLoadbalancerId!: pulumi.Output<string>;
    /**
     * The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
     */
    public readonly clientTimeout!: pulumi.Output<number>;
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * Array of items in that collection
     */
    public readonly httpRules!: pulumi.Output<outputs.ApplicationLoadbalancerForwardingruleHttpRule[] | undefined>;
    /**
     * Listening (inbound) IP.
     */
    public readonly listenerIp!: pulumi.Output<string>;
    /**
     * Listening (inbound) port number; valid range is 1 to 65535.
     */
    public readonly listenerPort!: pulumi.Output<number>;
    /**
     * The name of the Application Load Balancer forwarding rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Balancing protocol.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Array of items in the collection.
     */
    public readonly serverCertificates!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ApplicationLoadbalancerForwardingruleTimeouts | undefined>;

    /**
     * Create a ApplicationLoadbalancerForwardingrule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationLoadbalancerForwardingruleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationLoadbalancerForwardingruleArgs | ApplicationLoadbalancerForwardingruleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationLoadbalancerForwardingruleState | undefined;
            resourceInputs["applicationLoadbalancerId"] = state ? state.applicationLoadbalancerId : undefined;
            resourceInputs["clientTimeout"] = state ? state.clientTimeout : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["httpRules"] = state ? state.httpRules : undefined;
            resourceInputs["listenerIp"] = state ? state.listenerIp : undefined;
            resourceInputs["listenerPort"] = state ? state.listenerPort : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["serverCertificates"] = state ? state.serverCertificates : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ApplicationLoadbalancerForwardingruleArgs | undefined;
            if ((!args || args.applicationLoadbalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationLoadbalancerId'");
            }
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.listenerIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerIp'");
            }
            if ((!args || args.listenerPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerPort'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["applicationLoadbalancerId"] = args ? args.applicationLoadbalancerId : undefined;
            resourceInputs["clientTimeout"] = args ? args.clientTimeout : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["httpRules"] = args ? args.httpRules : undefined;
            resourceInputs["listenerIp"] = args ? args.listenerIp : undefined;
            resourceInputs["listenerPort"] = args ? args.listenerPort : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["serverCertificates"] = args ? args.serverCertificates : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationLoadbalancerForwardingrule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationLoadbalancerForwardingrule resources.
 */
export interface ApplicationLoadbalancerForwardingruleState {
    applicationLoadbalancerId?: pulumi.Input<string>;
    /**
     * The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
     */
    clientTimeout?: pulumi.Input<number>;
    datacenterId?: pulumi.Input<string>;
    /**
     * Array of items in that collection
     */
    httpRules?: pulumi.Input<pulumi.Input<inputs.ApplicationLoadbalancerForwardingruleHttpRule>[]>;
    /**
     * Listening (inbound) IP.
     */
    listenerIp?: pulumi.Input<string>;
    /**
     * Listening (inbound) port number; valid range is 1 to 65535.
     */
    listenerPort?: pulumi.Input<number>;
    /**
     * The name of the Application Load Balancer forwarding rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Balancing protocol.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Array of items in the collection.
     */
    serverCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ApplicationLoadbalancerForwardingruleTimeouts>;
}

/**
 * The set of arguments for constructing a ApplicationLoadbalancerForwardingrule resource.
 */
export interface ApplicationLoadbalancerForwardingruleArgs {
    applicationLoadbalancerId: pulumi.Input<string>;
    /**
     * The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
     */
    clientTimeout?: pulumi.Input<number>;
    datacenterId: pulumi.Input<string>;
    /**
     * Array of items in that collection
     */
    httpRules?: pulumi.Input<pulumi.Input<inputs.ApplicationLoadbalancerForwardingruleHttpRule>[]>;
    /**
     * Listening (inbound) IP.
     */
    listenerIp: pulumi.Input<string>;
    /**
     * Listening (inbound) port number; valid range is 1 to 65535.
     */
    listenerPort: pulumi.Input<number>;
    /**
     * The name of the Application Load Balancer forwarding rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Balancing protocol.
     */
    protocol: pulumi.Input<string>;
    /**
     * Array of items in the collection.
     */
    serverCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ApplicationLoadbalancerForwardingruleTimeouts>;
}
