// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Networkloadbalancer extends pulumi.CustomResource {
    /**
     * Get an existing Networkloadbalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkloadbalancerState, opts?: pulumi.CustomResourceOptions): Networkloadbalancer {
        return new Networkloadbalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/networkloadbalancer:Networkloadbalancer';

    /**
     * Returns true if the given object is an instance of Networkloadbalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Networkloadbalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Networkloadbalancer.__pulumiType;
    }

    /**
     * Turn logging on and off for this product. Default value is 'false'.
     */
    public readonly centralLogging!: pulumi.Output<boolean | undefined>;
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
     * network information such as source and destination IP addresses, source and destination ports, number of packets, amount
     * of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
     * instances are being accessed.
     */
    public readonly flowlog!: pulumi.Output<outputs.NetworkloadbalancerFlowlog | undefined>;
    /**
     * Collection of IP addresses of the Network Load Balancer. (inbound and outbound) IP of the listenerLan must be a customer
     * reserved IP for the public load balancer and private IP for the private load balancer.
     */
    public readonly ips!: pulumi.Output<string[] | undefined>;
    /**
     * Collection of private IP addresses with subnet mask of the Network Load Balancer. IPs must contain valid subnet mask. If
     * user will not provide any IP then the system will generate one IP with /24 subnet.
     */
    public readonly lbPrivateIps!: pulumi.Output<string[]>;
    /**
     * Id of the listening LAN. (inbound)
     */
    public readonly listenerLan!: pulumi.Output<number>;
    /**
     * Specifies the format of the logs.
     */
    public readonly loggingFormat!: pulumi.Output<string | undefined>;
    /**
     * A name of that Network Load Balancer
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Id of the balanced private target LAN. (outbound)
     */
    public readonly targetLan!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkloadbalancerTimeouts | undefined>;

    /**
     * Create a Networkloadbalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkloadbalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkloadbalancerArgs | NetworkloadbalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkloadbalancerState | undefined;
            resourceInputs["centralLogging"] = state ? state.centralLogging : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["flowlog"] = state ? state.flowlog : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["lbPrivateIps"] = state ? state.lbPrivateIps : undefined;
            resourceInputs["listenerLan"] = state ? state.listenerLan : undefined;
            resourceInputs["loggingFormat"] = state ? state.loggingFormat : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["targetLan"] = state ? state.targetLan : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkloadbalancerArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.listenerLan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerLan'");
            }
            if ((!args || args.targetLan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetLan'");
            }
            resourceInputs["centralLogging"] = args ? args.centralLogging : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["flowlog"] = args ? args.flowlog : undefined;
            resourceInputs["ips"] = args ? args.ips : undefined;
            resourceInputs["lbPrivateIps"] = args ? args.lbPrivateIps : undefined;
            resourceInputs["listenerLan"] = args ? args.listenerLan : undefined;
            resourceInputs["loggingFormat"] = args ? args.loggingFormat : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["targetLan"] = args ? args.targetLan : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Networkloadbalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Networkloadbalancer resources.
 */
export interface NetworkloadbalancerState {
    /**
     * Turn logging on and off for this product. Default value is 'false'.
     */
    centralLogging?: pulumi.Input<boolean>;
    datacenterId?: pulumi.Input<string>;
    /**
     * Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
     * network information such as source and destination IP addresses, source and destination ports, number of packets, amount
     * of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
     * instances are being accessed.
     */
    flowlog?: pulumi.Input<inputs.NetworkloadbalancerFlowlog>;
    /**
     * Collection of IP addresses of the Network Load Balancer. (inbound and outbound) IP of the listenerLan must be a customer
     * reserved IP for the public load balancer and private IP for the private load balancer.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Collection of private IP addresses with subnet mask of the Network Load Balancer. IPs must contain valid subnet mask. If
     * user will not provide any IP then the system will generate one IP with /24 subnet.
     */
    lbPrivateIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Id of the listening LAN. (inbound)
     */
    listenerLan?: pulumi.Input<number>;
    /**
     * Specifies the format of the logs.
     */
    loggingFormat?: pulumi.Input<string>;
    /**
     * A name of that Network Load Balancer
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the balanced private target LAN. (outbound)
     */
    targetLan?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.NetworkloadbalancerTimeouts>;
}

/**
 * The set of arguments for constructing a Networkloadbalancer resource.
 */
export interface NetworkloadbalancerArgs {
    /**
     * Turn logging on and off for this product. Default value is 'false'.
     */
    centralLogging?: pulumi.Input<boolean>;
    datacenterId: pulumi.Input<string>;
    /**
     * Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
     * network information such as source and destination IP addresses, source and destination ports, number of packets, amount
     * of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
     * instances are being accessed.
     */
    flowlog?: pulumi.Input<inputs.NetworkloadbalancerFlowlog>;
    /**
     * Collection of IP addresses of the Network Load Balancer. (inbound and outbound) IP of the listenerLan must be a customer
     * reserved IP for the public load balancer and private IP for the private load balancer.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Collection of private IP addresses with subnet mask of the Network Load Balancer. IPs must contain valid subnet mask. If
     * user will not provide any IP then the system will generate one IP with /24 subnet.
     */
    lbPrivateIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Id of the listening LAN. (inbound)
     */
    listenerLan: pulumi.Input<number>;
    /**
     * Specifies the format of the logs.
     */
    loggingFormat?: pulumi.Input<string>;
    /**
     * A name of that Network Load Balancer
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the balanced private target LAN. (outbound)
     */
    targetLan: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.NetworkloadbalancerTimeouts>;
}
