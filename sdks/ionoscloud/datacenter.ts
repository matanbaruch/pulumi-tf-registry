// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Datacenter extends pulumi.CustomResource {
    /**
     * Get an existing Datacenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterState, opts?: pulumi.CustomResourceOptions): Datacenter {
        return new Datacenter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/datacenter:Datacenter';

    /**
     * Returns true if the given object is an instance of Datacenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datacenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datacenter.__pulumiType;
    }

    public /*out*/ readonly cpuArchitectures!: pulumi.Output<outputs.DatacenterCpuArchitecture[]>;
    /**
     * A description for the datacenter, e.g. staging, production
     */
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly features!: pulumi.Output<string[]>;
    /**
     * Auto-assigned /56 IPv6 CIDR block, if IPv6 is enabled for the datacenter. Read-only
     */
    public /*out*/ readonly ipv6CidrBlock!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly secAuthProtection!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DatacenterTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a Datacenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterArgs | DatacenterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterState | undefined;
            resourceInputs["cpuArchitectures"] = state ? state.cpuArchitectures : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secAuthProtection"] = state ? state.secAuthProtection : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DatacenterArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secAuthProtection"] = args ? args.secAuthProtection : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["cpuArchitectures"] = undefined /*out*/;
            resourceInputs["features"] = undefined /*out*/;
            resourceInputs["ipv6CidrBlock"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Datacenter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Datacenter resources.
 */
export interface DatacenterState {
    cpuArchitectures?: pulumi.Input<pulumi.Input<inputs.DatacenterCpuArchitecture>[]>;
    /**
     * A description for the datacenter, e.g. staging, production
     */
    description?: pulumi.Input<string>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Auto-assigned /56 IPv6 CIDR block, if IPv6 is enabled for the datacenter. Read-only
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    secAuthProtection?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DatacenterTimeouts>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Datacenter resource.
 */
export interface DatacenterArgs {
    /**
     * A description for the datacenter, e.g. staging, production
     */
    description?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    secAuthProtection?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DatacenterTimeouts>;
}
