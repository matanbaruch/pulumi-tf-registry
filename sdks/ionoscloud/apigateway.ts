// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Apigateway extends pulumi.CustomResource {
    /**
     * Get an existing Apigateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigatewayState, opts?: pulumi.CustomResourceOptions): Apigateway {
        return new Apigateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/apigateway:Apigateway';

    /**
     * Returns true if the given object is an instance of Apigateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Apigateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Apigateway.__pulumiType;
    }

    /**
     * Custom domains for the API Gateway.
     */
    public readonly customDomains!: pulumi.Output<outputs.ApigatewayCustomDomain[] | undefined>;
    /**
     * Enable or disable logging. NOTE: Central Logging must be enabled through the Logging API to enable this feature.
     */
    public readonly logs!: pulumi.Output<boolean | undefined>;
    /**
     * Enable or disable metrics.
     */
    public readonly metrics!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the API Gateway.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The public endpoint of the API Gateway.
     */
    public /*out*/ readonly publicEndpoint!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ApigatewayTimeouts | undefined>;

    /**
     * Create a Apigateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApigatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigatewayArgs | ApigatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigatewayState | undefined;
            resourceInputs["customDomains"] = state ? state.customDomains : undefined;
            resourceInputs["logs"] = state ? state.logs : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicEndpoint"] = state ? state.publicEndpoint : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ApigatewayArgs | undefined;
            resourceInputs["customDomains"] = args ? args.customDomains : undefined;
            resourceInputs["logs"] = args ? args.logs : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["publicEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Apigateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Apigateway resources.
 */
export interface ApigatewayState {
    /**
     * Custom domains for the API Gateway.
     */
    customDomains?: pulumi.Input<pulumi.Input<inputs.ApigatewayCustomDomain>[]>;
    /**
     * Enable or disable logging. NOTE: Central Logging must be enabled through the Logging API to enable this feature.
     */
    logs?: pulumi.Input<boolean>;
    /**
     * Enable or disable metrics.
     */
    metrics?: pulumi.Input<boolean>;
    /**
     * The name of the API Gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * The public endpoint of the API Gateway.
     */
    publicEndpoint?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApigatewayTimeouts>;
}

/**
 * The set of arguments for constructing a Apigateway resource.
 */
export interface ApigatewayArgs {
    /**
     * Custom domains for the API Gateway.
     */
    customDomains?: pulumi.Input<pulumi.Input<inputs.ApigatewayCustomDomain>[]>;
    /**
     * Enable or disable logging. NOTE: Central Logging must be enabled through the Logging API to enable this feature.
     */
    logs?: pulumi.Input<boolean>;
    /**
     * Enable or disable metrics.
     */
    metrics?: pulumi.Input<boolean>;
    /**
     * The name of the API Gateway.
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApigatewayTimeouts>;
}
