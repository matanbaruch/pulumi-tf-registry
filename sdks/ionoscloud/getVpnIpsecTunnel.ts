// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVpnIpsecTunnel(args: GetVpnIpsecTunnelArgs, opts?: pulumi.InvokeOptions): Promise<GetVpnIpsecTunnelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getVpnIpsecTunnel:getVpnIpsecTunnel", {
        "gatewayId": args.gatewayId,
        "id": args.id,
        "location": args.location,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVpnIpsecTunnel.
 */
export interface GetVpnIpsecTunnelArgs {
    gatewayId: string;
    id?: string;
    location: string;
    name?: string;
}

/**
 * A collection of values returned by getVpnIpsecTunnel.
 */
export interface GetVpnIpsecTunnelResult {
    readonly auths: outputs.GetVpnIpsecTunnelAuth[];
    readonly cloudNetworkCidrs: string[];
    readonly description: string;
    readonly esps: outputs.GetVpnIpsecTunnelEsp[];
    readonly gatewayId: string;
    readonly id: string;
    readonly ikes: outputs.GetVpnIpsecTunnelIke[];
    readonly location: string;
    readonly name: string;
    readonly peerNetworkCidrs: string[];
    readonly remoteHost: string;
}
export function getVpnIpsecTunnelOutput(args: GetVpnIpsecTunnelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpnIpsecTunnelResult> {
    return pulumi.output(args).apply((a: any) => getVpnIpsecTunnel(a, opts))
}

/**
 * A collection of arguments for invoking getVpnIpsecTunnel.
 */
export interface GetVpnIpsecTunnelOutputArgs {
    gatewayId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
