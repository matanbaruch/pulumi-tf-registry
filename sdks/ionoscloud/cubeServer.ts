// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CubeServer extends pulumi.CustomResource {
    /**
     * Get an existing CubeServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CubeServerState, opts?: pulumi.CustomResourceOptions): CubeServer {
        return new CubeServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/cubeServer:CubeServer';

    /**
     * Returns true if the given object is an instance of CubeServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CubeServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CubeServer.__pulumiType;
    }

    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly bootCdrom!: pulumi.Output<string>;
    public readonly bootImage!: pulumi.Output<string>;
    public /*out*/ readonly bootVolume!: pulumi.Output<string>;
    public readonly datacenterId!: pulumi.Output<string>;
    public /*out*/ readonly firewallruleId!: pulumi.Output<string>;
    public readonly imageName!: pulumi.Output<string>;
    public readonly imagePassword!: pulumi.Output<string>;
    /**
     * A list that contains the IDs for the volumes defined inside the cube server resource.
     */
    public /*out*/ readonly inlineVolumeIds!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly nic!: pulumi.Output<outputs.CubeServerNic>;
    public /*out*/ readonly primaryIp!: pulumi.Output<string>;
    public /*out*/ readonly primaryNic!: pulumi.Output<string>;
    public readonly sshKeyPaths!: pulumi.Output<string[]>;
    public readonly templateUuid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CubeServerTimeouts | undefined>;
    /**
     * Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
     */
    public readonly vmState!: pulumi.Output<string>;
    public readonly volume!: pulumi.Output<outputs.CubeServerVolume>;

    /**
     * Create a CubeServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CubeServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CubeServerArgs | CubeServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CubeServerState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bootCdrom"] = state ? state.bootCdrom : undefined;
            resourceInputs["bootImage"] = state ? state.bootImage : undefined;
            resourceInputs["bootVolume"] = state ? state.bootVolume : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["firewallruleId"] = state ? state.firewallruleId : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["imagePassword"] = state ? state.imagePassword : undefined;
            resourceInputs["inlineVolumeIds"] = state ? state.inlineVolumeIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nic"] = state ? state.nic : undefined;
            resourceInputs["primaryIp"] = state ? state.primaryIp : undefined;
            resourceInputs["primaryNic"] = state ? state.primaryNic : undefined;
            resourceInputs["sshKeyPaths"] = state ? state.sshKeyPaths : undefined;
            resourceInputs["templateUuid"] = state ? state.templateUuid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vmState"] = state ? state.vmState : undefined;
            resourceInputs["volume"] = state ? state.volume : undefined;
        } else {
            const args = argsOrState as CubeServerArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.nic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nic'");
            }
            if ((!args || args.templateUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateUuid'");
            }
            if ((!args || args.volume === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volume'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["bootCdrom"] = args ? args.bootCdrom : undefined;
            resourceInputs["bootImage"] = args ? args.bootImage : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["imagePassword"] = args?.imagePassword ? pulumi.secret(args.imagePassword) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nic"] = args ? args.nic : undefined;
            resourceInputs["sshKeyPaths"] = args ? args.sshKeyPaths : undefined;
            resourceInputs["templateUuid"] = args ? args.templateUuid : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmState"] = args ? args.vmState : undefined;
            resourceInputs["volume"] = args ? args.volume : undefined;
            resourceInputs["bootVolume"] = undefined /*out*/;
            resourceInputs["firewallruleId"] = undefined /*out*/;
            resourceInputs["inlineVolumeIds"] = undefined /*out*/;
            resourceInputs["primaryIp"] = undefined /*out*/;
            resourceInputs["primaryNic"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["imagePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CubeServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CubeServer resources.
 */
export interface CubeServerState {
    availabilityZone?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    bootCdrom?: pulumi.Input<string>;
    bootImage?: pulumi.Input<string>;
    bootVolume?: pulumi.Input<string>;
    datacenterId?: pulumi.Input<string>;
    firewallruleId?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    imagePassword?: pulumi.Input<string>;
    /**
     * A list that contains the IDs for the volumes defined inside the cube server resource.
     */
    inlineVolumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    nic?: pulumi.Input<inputs.CubeServerNic>;
    primaryIp?: pulumi.Input<string>;
    primaryNic?: pulumi.Input<string>;
    sshKeyPaths?: pulumi.Input<pulumi.Input<string>[]>;
    templateUuid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CubeServerTimeouts>;
    /**
     * Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
     */
    vmState?: pulumi.Input<string>;
    volume?: pulumi.Input<inputs.CubeServerVolume>;
}

/**
 * The set of arguments for constructing a CubeServer resource.
 */
export interface CubeServerArgs {
    availabilityZone?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    bootCdrom?: pulumi.Input<string>;
    bootImage?: pulumi.Input<string>;
    datacenterId: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    imagePassword?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nic: pulumi.Input<inputs.CubeServerNic>;
    sshKeyPaths?: pulumi.Input<pulumi.Input<string>[]>;
    templateUuid: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CubeServerTimeouts>;
    /**
     * Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
     */
    vmState?: pulumi.Input<string>;
    volume: pulumi.Input<inputs.CubeServerVolume>;
}
