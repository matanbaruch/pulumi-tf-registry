// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class K8sNodePool extends pulumi.CustomResource {
    /**
     * Get an existing K8sNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sNodePoolState, opts?: pulumi.CustomResourceOptions): K8sNodePool {
        return new K8sNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/k8sNodePool:K8sNodePool';

    /**
     * Returns true if the given object is an instance of K8sNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sNodePool.__pulumiType;
    }

    /**
     * When set to true, allows the update of immutable fields by destroying and re-creating the node pool
     */
    public readonly allowReplace!: pulumi.Output<boolean | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
     */
    public readonly autoScaling!: pulumi.Output<outputs.K8sNodePoolAutoScaling | undefined>;
    /**
     * The compute availability zone in which the nodes should exist
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * CPU cores count
     */
    public readonly coresCount!: pulumi.Output<number>;
    /**
     * CPU Family
     */
    public readonly cpuFamily!: pulumi.Output<string>;
    /**
     * The UUID of the VDC
     */
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * The UUID of an existing kubernetes cluster
     */
    public readonly k8sClusterId!: pulumi.Output<string>;
    /**
     * The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
     * The provider will ignore downgrades of patch level.
     */
    public readonly k8sVersion!: pulumi.Output<string>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A list of Local Area Networks the node pool should be part of
     */
    public readonly lans!: pulumi.Output<outputs.K8sNodePoolLan[] | undefined>;
    /**
     * A maintenance window comprise of a day of the week and a time for maintenance to be allowed
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.K8sNodePoolMaintenanceWindow | undefined>;
    /**
     * The desired name for the node pool
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of nodes in this node pool
     */
    public readonly nodeCount!: pulumi.Output<number>;
    /**
     * A list of fixed IPs. Cannot be set on private clusters.
     */
    public readonly publicIps!: pulumi.Output<string[] | undefined>;
    /**
     * The amount of RAM in MB
     */
    public readonly ramSize!: pulumi.Output<number>;
    /**
     * The total allocated storage capacity of a node in GB
     */
    public readonly storageSize!: pulumi.Output<number>;
    /**
     * Storage type to use
     */
    public readonly storageType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.K8sNodePoolTimeouts | undefined>;

    /**
     * Create a K8sNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sNodePoolArgs | K8sNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sNodePoolState | undefined;
            resourceInputs["allowReplace"] = state ? state.allowReplace : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["autoScaling"] = state ? state.autoScaling : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["coresCount"] = state ? state.coresCount : undefined;
            resourceInputs["cpuFamily"] = state ? state.cpuFamily : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["k8sClusterId"] = state ? state.k8sClusterId : undefined;
            resourceInputs["k8sVersion"] = state ? state.k8sVersion : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lans"] = state ? state.lans : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["publicIps"] = state ? state.publicIps : undefined;
            resourceInputs["ramSize"] = state ? state.ramSize : undefined;
            resourceInputs["storageSize"] = state ? state.storageSize : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as K8sNodePoolArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.coresCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'coresCount'");
            }
            if ((!args || args.cpuFamily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpuFamily'");
            }
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.k8sClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'k8sClusterId'");
            }
            if ((!args || args.k8sVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'k8sVersion'");
            }
            if ((!args || args.nodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeCount'");
            }
            if ((!args || args.ramSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ramSize'");
            }
            if ((!args || args.storageSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageSize'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            resourceInputs["allowReplace"] = args ? args.allowReplace : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["autoScaling"] = args ? args.autoScaling : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["coresCount"] = args ? args.coresCount : undefined;
            resourceInputs["cpuFamily"] = args ? args.cpuFamily : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["k8sClusterId"] = args ? args.k8sClusterId : undefined;
            resourceInputs["k8sVersion"] = args ? args.k8sVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lans"] = args ? args.lans : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["publicIps"] = args ? args.publicIps : undefined;
            resourceInputs["ramSize"] = args ? args.ramSize : undefined;
            resourceInputs["storageSize"] = args ? args.storageSize : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8sNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering K8sNodePool resources.
 */
export interface K8sNodePoolState {
    /**
     * When set to true, allows the update of immutable fields by destroying and re-creating the node pool
     */
    allowReplace?: pulumi.Input<boolean>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
     */
    autoScaling?: pulumi.Input<inputs.K8sNodePoolAutoScaling>;
    /**
     * The compute availability zone in which the nodes should exist
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * CPU cores count
     */
    coresCount?: pulumi.Input<number>;
    /**
     * CPU Family
     */
    cpuFamily?: pulumi.Input<string>;
    /**
     * The UUID of the VDC
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * The UUID of an existing kubernetes cluster
     */
    k8sClusterId?: pulumi.Input<string>;
    /**
     * The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
     * The provider will ignore downgrades of patch level.
     */
    k8sVersion?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of Local Area Networks the node pool should be part of
     */
    lans?: pulumi.Input<pulumi.Input<inputs.K8sNodePoolLan>[]>;
    /**
     * A maintenance window comprise of a day of the week and a time for maintenance to be allowed
     */
    maintenanceWindow?: pulumi.Input<inputs.K8sNodePoolMaintenanceWindow>;
    /**
     * The desired name for the node pool
     */
    name?: pulumi.Input<string>;
    /**
     * The number of nodes in this node pool
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * A list of fixed IPs. Cannot be set on private clusters.
     */
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of RAM in MB
     */
    ramSize?: pulumi.Input<number>;
    /**
     * The total allocated storage capacity of a node in GB
     */
    storageSize?: pulumi.Input<number>;
    /**
     * Storage type to use
     */
    storageType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sNodePoolTimeouts>;
}

/**
 * The set of arguments for constructing a K8sNodePool resource.
 */
export interface K8sNodePoolArgs {
    /**
     * When set to true, allows the update of immutable fields by destroying and re-creating the node pool
     */
    allowReplace?: pulumi.Input<boolean>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
     */
    autoScaling?: pulumi.Input<inputs.K8sNodePoolAutoScaling>;
    /**
     * The compute availability zone in which the nodes should exist
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * CPU cores count
     */
    coresCount: pulumi.Input<number>;
    /**
     * CPU Family
     */
    cpuFamily: pulumi.Input<string>;
    /**
     * The UUID of the VDC
     */
    datacenterId: pulumi.Input<string>;
    /**
     * The UUID of an existing kubernetes cluster
     */
    k8sClusterId: pulumi.Input<string>;
    /**
     * The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
     * The provider will ignore downgrades of patch level.
     */
    k8sVersion: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of Local Area Networks the node pool should be part of
     */
    lans?: pulumi.Input<pulumi.Input<inputs.K8sNodePoolLan>[]>;
    /**
     * A maintenance window comprise of a day of the week and a time for maintenance to be allowed
     */
    maintenanceWindow?: pulumi.Input<inputs.K8sNodePoolMaintenanceWindow>;
    /**
     * The desired name for the node pool
     */
    name?: pulumi.Input<string>;
    /**
     * The number of nodes in this node pool
     */
    nodeCount: pulumi.Input<number>;
    /**
     * A list of fixed IPs. Cannot be set on private clusters.
     */
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of RAM in MB
     */
    ramSize: pulumi.Input<number>;
    /**
     * The total allocated storage capacity of a node in GB
     */
    storageSize: pulumi.Input<number>;
    /**
     * Storage type to use
     */
    storageType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sNodePoolTimeouts>;
}
