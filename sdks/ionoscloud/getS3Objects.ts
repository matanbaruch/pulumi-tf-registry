// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getS3Objects(args: GetS3ObjectsArgs, opts?: pulumi.InvokeOptions): Promise<GetS3ObjectsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getS3Objects:getS3Objects", {
        "bucket": args.bucket,
        "delimiter": args.delimiter,
        "encodingType": args.encodingType,
        "fetchOwner": args.fetchOwner,
        "maxKeys": args.maxKeys,
        "prefix": args.prefix,
        "startAfter": args.startAfter,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getS3Objects.
 */
export interface GetS3ObjectsArgs {
    bucket: string;
    delimiter?: string;
    encodingType?: string;
    fetchOwner?: boolean;
    maxKeys?: number;
    prefix?: string;
    startAfter?: string;
}

/**
 * A collection of values returned by getS3Objects.
 */
export interface GetS3ObjectsResult {
    readonly bucket: string;
    readonly commonPrefixes: string[];
    readonly delimiter?: string;
    readonly encodingType?: string;
    readonly fetchOwner?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keys: string[];
    readonly maxKeys?: number;
    readonly owners: string[];
    readonly prefix?: string;
    readonly startAfter?: string;
}
export function getS3ObjectsOutput(args: GetS3ObjectsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetS3ObjectsResult> {
    return pulumi.output(args).apply((a: any) => getS3Objects(a, opts))
}

/**
 * A collection of arguments for invoking getS3Objects.
 */
export interface GetS3ObjectsOutputArgs {
    bucket: pulumi.Input<string>;
    delimiter?: pulumi.Input<string>;
    encodingType?: pulumi.Input<string>;
    fetchOwner?: pulumi.Input<boolean>;
    maxKeys?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    startAfter?: pulumi.Input<string>;
}
