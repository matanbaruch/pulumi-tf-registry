// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getK8sNodePool(args: GetK8sNodePoolArgs, opts?: pulumi.InvokeOptions): Promise<GetK8sNodePoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getK8sNodePool:getK8sNodePool", {
        "id": args.id,
        "k8sClusterId": args.k8sClusterId,
        "name": args.name,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getK8sNodePool.
 */
export interface GetK8sNodePoolArgs {
    id?: string;
    k8sClusterId: string;
    name?: string;
    timeouts?: inputs.GetK8sNodePoolTimeouts;
}

/**
 * A collection of values returned by getK8sNodePool.
 */
export interface GetK8sNodePoolResult {
    readonly annotations: {[key: string]: string};
    readonly autoScalings: outputs.GetK8sNodePoolAutoScaling[];
    readonly availabilityZone: string;
    readonly availableUpgradeVersions: string[];
    readonly coresCount: number;
    readonly cpuFamily: string;
    readonly datacenterId: string;
    readonly id?: string;
    readonly k8sClusterId: string;
    readonly k8sVersion: string;
    readonly labels: {[key: string]: string};
    readonly lans: outputs.GetK8sNodePoolLan[];
    readonly maintenanceWindows: outputs.GetK8sNodePoolMaintenanceWindow[];
    readonly name?: string;
    readonly nodeCount: number;
    readonly publicIps: string[];
    readonly ramSize: number;
    readonly state: string;
    readonly storageSize: number;
    readonly storageType: string;
    readonly timeouts?: outputs.GetK8sNodePoolTimeouts;
}
export function getK8sNodePoolOutput(args: GetK8sNodePoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetK8sNodePoolResult> {
    return pulumi.output(args).apply((a: any) => getK8sNodePool(a, opts))
}

/**
 * A collection of arguments for invoking getK8sNodePool.
 */
export interface GetK8sNodePoolOutputArgs {
    id?: pulumi.Input<string>;
    k8sClusterId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetK8sNodePoolTimeoutsArgs>;
}
