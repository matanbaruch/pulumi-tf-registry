// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnWireguardGateway extends pulumi.CustomResource {
    /**
     * Get an existing VpnWireguardGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnWireguardGatewayState, opts?: pulumi.CustomResourceOptions): VpnWireguardGateway {
        return new VpnWireguardGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/vpnWireguardGateway:VpnWireguardGateway';

    /**
     * Returns true if the given object is an instance of VpnWireguardGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnWireguardGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnWireguardGateway.__pulumiType;
    }

    public readonly connections!: pulumi.Output<outputs.VpnWireguardGatewayConnection[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly gatewayIp!: pulumi.Output<string>;
    /**
     * The IPV4 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv4CIDR or
     * interfaceIPv6CIDR is __required__.
     */
    public readonly interfaceIpv4Cidr!: pulumi.Output<string | undefined>;
    /**
     * The IPV6 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv6CIDR or
     * interfaceIPv4CIDR is __required__.
     */
    public readonly interfaceIpv6Cidr!: pulumi.Output<string | undefined>;
    public readonly listenPort!: pulumi.Output<number | undefined>;
    /**
     * The location of the WireGuard Gateway. Supported locations: de/fra, de/txl
     */
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * PrivateKey used for WireGuard Server
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * PublicKey used for WireGuard Server. Received in response from API
     */
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    /**
     * The status of the WireGuard Gateway
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpnWireguardGatewayTimeouts | undefined>;

    /**
     * Create a VpnWireguardGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnWireguardGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnWireguardGatewayArgs | VpnWireguardGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnWireguardGatewayState | undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["interfaceIpv4Cidr"] = state ? state.interfaceIpv4Cidr : undefined;
            resourceInputs["interfaceIpv6Cidr"] = state ? state.interfaceIpv6Cidr : undefined;
            resourceInputs["listenPort"] = state ? state.listenPort : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as VpnWireguardGatewayArgs | undefined;
            if ((!args || args.connections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connections'");
            }
            if ((!args || args.gatewayIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayIp'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["connections"] = args ? args.connections : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["interfaceIpv4Cidr"] = args ? args.interfaceIpv4Cidr : undefined;
            resourceInputs["interfaceIpv6Cidr"] = args ? args.interfaceIpv6Cidr : undefined;
            resourceInputs["listenPort"] = args ? args.listenPort : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["publicKey"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VpnWireguardGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnWireguardGateway resources.
 */
export interface VpnWireguardGatewayState {
    connections?: pulumi.Input<pulumi.Input<inputs.VpnWireguardGatewayConnection>[]>;
    description?: pulumi.Input<string>;
    gatewayIp?: pulumi.Input<string>;
    /**
     * The IPV4 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv4CIDR or
     * interfaceIPv6CIDR is __required__.
     */
    interfaceIpv4Cidr?: pulumi.Input<string>;
    /**
     * The IPV6 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv6CIDR or
     * interfaceIPv4CIDR is __required__.
     */
    interfaceIpv6Cidr?: pulumi.Input<string>;
    listenPort?: pulumi.Input<number>;
    /**
     * The location of the WireGuard Gateway. Supported locations: de/fra, de/txl
     */
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * PrivateKey used for WireGuard Server
     */
    privateKey?: pulumi.Input<string>;
    /**
     * PublicKey used for WireGuard Server. Received in response from API
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The status of the WireGuard Gateway
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnWireguardGatewayTimeouts>;
}

/**
 * The set of arguments for constructing a VpnWireguardGateway resource.
 */
export interface VpnWireguardGatewayArgs {
    connections: pulumi.Input<pulumi.Input<inputs.VpnWireguardGatewayConnection>[]>;
    description?: pulumi.Input<string>;
    gatewayIp: pulumi.Input<string>;
    /**
     * The IPV4 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv4CIDR or
     * interfaceIPv6CIDR is __required__.
     */
    interfaceIpv4Cidr?: pulumi.Input<string>;
    /**
     * The IPV6 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv6CIDR or
     * interfaceIPv4CIDR is __required__.
     */
    interfaceIpv6Cidr?: pulumi.Input<string>;
    listenPort?: pulumi.Input<number>;
    /**
     * The location of the WireGuard Gateway. Supported locations: de/fra, de/txl
     */
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * PrivateKey used for WireGuard Server
     */
    privateKey: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnWireguardGatewayTimeouts>;
}
