// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnIpsecGateway extends pulumi.CustomResource {
    /**
     * Get an existing VpnIpsecGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnIpsecGatewayState, opts?: pulumi.CustomResourceOptions): VpnIpsecGateway {
        return new VpnIpsecGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/vpnIpsecGateway:VpnIpsecGateway';

    /**
     * Returns true if the given object is an instance of VpnIpsecGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnIpsecGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnIpsecGateway.__pulumiType;
    }

    /**
     * The network connection for your gateway. Note: all connections must belong to the same datacenter.
     */
    public readonly connections!: pulumi.Output<outputs.VpnIpsecGatewayConnection[]>;
    /**
     * The human-readable description of your IPSec Gateway.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
     * connections.
     */
    public readonly gatewayIp!: pulumi.Output<string>;
    /**
     * The location of the IPSec Gateway. Supported locations: de/fra, de/txl
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The human readable name of your IPSecGateway.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpnIpsecGatewayTimeouts | undefined>;
    /**
     * The IKE version that is permitted for the VPN tunnels.
     */
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a VpnIpsecGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnIpsecGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnIpsecGatewayArgs | VpnIpsecGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnIpsecGatewayState | undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as VpnIpsecGatewayArgs | undefined;
            if ((!args || args.connections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connections'");
            }
            if ((!args || args.gatewayIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayIp'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["connections"] = args ? args.connections : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnIpsecGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnIpsecGateway resources.
 */
export interface VpnIpsecGatewayState {
    /**
     * The network connection for your gateway. Note: all connections must belong to the same datacenter.
     */
    connections?: pulumi.Input<pulumi.Input<inputs.VpnIpsecGatewayConnection>[]>;
    /**
     * The human-readable description of your IPSec Gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
     * connections.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * The location of the IPSec Gateway. Supported locations: de/fra, de/txl
     */
    location?: pulumi.Input<string>;
    /**
     * The human readable name of your IPSecGateway.
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnIpsecGatewayTimeouts>;
    /**
     * The IKE version that is permitted for the VPN tunnels.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnIpsecGateway resource.
 */
export interface VpnIpsecGatewayArgs {
    /**
     * The network connection for your gateway. Note: all connections must belong to the same datacenter.
     */
    connections: pulumi.Input<pulumi.Input<inputs.VpnIpsecGatewayConnection>[]>;
    /**
     * The human-readable description of your IPSec Gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
     * connections.
     */
    gatewayIp: pulumi.Input<string>;
    /**
     * The location of the IPSec Gateway. Supported locations: de/fra, de/txl
     */
    location: pulumi.Input<string>;
    /**
     * The human readable name of your IPSecGateway.
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnIpsecGatewayTimeouts>;
    /**
     * The IKE version that is permitted for the VPN tunnels.
     */
    version?: pulumi.Input<string>;
}
