// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly backupUnitId!: pulumi.Output<string>;
    /**
     * The UUID of the attached server.
     */
    public /*out*/ readonly bootServer!: pulumi.Output<string>;
    public readonly bus!: pulumi.Output<string>;
    public /*out*/ readonly cpuHotPlug!: pulumi.Output<boolean>;
    public readonly datacenterId!: pulumi.Output<string>;
    public /*out*/ readonly deviceNumber!: pulumi.Output<number>;
    public /*out*/ readonly discVirtioHotPlug!: pulumi.Output<boolean>;
    public /*out*/ readonly discVirtioHotUnplug!: pulumi.Output<boolean>;
    public readonly diskType!: pulumi.Output<string>;
    public /*out*/ readonly image!: pulumi.Output<string>;
    public /*out*/ readonly imageId!: pulumi.Output<string>;
    public readonly imageName!: pulumi.Output<string | undefined>;
    public readonly imagePassword!: pulumi.Output<string | undefined>;
    public readonly licenceType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly nicHotPlug!: pulumi.Output<boolean>;
    public /*out*/ readonly nicHotUnplug!: pulumi.Output<boolean>;
    public /*out*/ readonly pciSlot!: pulumi.Output<number>;
    public /*out*/ readonly ramHotPlug!: pulumi.Output<boolean>;
    public readonly serverId!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<number>;
    public readonly sshKeyPaths!: pulumi.Output<string[] | undefined>;
    public readonly sshKeys!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly sshkey!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VolumeTimeouts | undefined>;
    public readonly userData!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupUnitId"] = state ? state.backupUnitId : undefined;
            resourceInputs["bootServer"] = state ? state.bootServer : undefined;
            resourceInputs["bus"] = state ? state.bus : undefined;
            resourceInputs["cpuHotPlug"] = state ? state.cpuHotPlug : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["deviceNumber"] = state ? state.deviceNumber : undefined;
            resourceInputs["discVirtioHotPlug"] = state ? state.discVirtioHotPlug : undefined;
            resourceInputs["discVirtioHotUnplug"] = state ? state.discVirtioHotUnplug : undefined;
            resourceInputs["diskType"] = state ? state.diskType : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["imagePassword"] = state ? state.imagePassword : undefined;
            resourceInputs["licenceType"] = state ? state.licenceType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nicHotPlug"] = state ? state.nicHotPlug : undefined;
            resourceInputs["nicHotUnplug"] = state ? state.nicHotUnplug : undefined;
            resourceInputs["pciSlot"] = state ? state.pciSlot : undefined;
            resourceInputs["ramHotPlug"] = state ? state.ramHotPlug : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sshKeyPaths"] = state ? state.sshKeyPaths : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["sshkey"] = state ? state.sshkey : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.diskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskType'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupUnitId"] = args ? args.backupUnitId : undefined;
            resourceInputs["bus"] = args ? args.bus : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["diskType"] = args ? args.diskType : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["imagePassword"] = args ? args.imagePassword : undefined;
            resourceInputs["licenceType"] = args ? args.licenceType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sshKeyPaths"] = args ? args.sshKeyPaths : undefined;
            resourceInputs["sshKeys"] = args ? args.sshKeys : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["bootServer"] = undefined /*out*/;
            resourceInputs["cpuHotPlug"] = undefined /*out*/;
            resourceInputs["deviceNumber"] = undefined /*out*/;
            resourceInputs["discVirtioHotPlug"] = undefined /*out*/;
            resourceInputs["discVirtioHotUnplug"] = undefined /*out*/;
            resourceInputs["image"] = undefined /*out*/;
            resourceInputs["imageId"] = undefined /*out*/;
            resourceInputs["nicHotPlug"] = undefined /*out*/;
            resourceInputs["nicHotUnplug"] = undefined /*out*/;
            resourceInputs["pciSlot"] = undefined /*out*/;
            resourceInputs["ramHotPlug"] = undefined /*out*/;
            resourceInputs["sshkey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    availabilityZone?: pulumi.Input<string>;
    backupUnitId?: pulumi.Input<string>;
    /**
     * The UUID of the attached server.
     */
    bootServer?: pulumi.Input<string>;
    bus?: pulumi.Input<string>;
    cpuHotPlug?: pulumi.Input<boolean>;
    datacenterId?: pulumi.Input<string>;
    deviceNumber?: pulumi.Input<number>;
    discVirtioHotPlug?: pulumi.Input<boolean>;
    discVirtioHotUnplug?: pulumi.Input<boolean>;
    diskType?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    imagePassword?: pulumi.Input<string>;
    licenceType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nicHotPlug?: pulumi.Input<boolean>;
    nicHotUnplug?: pulumi.Input<boolean>;
    pciSlot?: pulumi.Input<number>;
    ramHotPlug?: pulumi.Input<boolean>;
    serverId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    sshKeyPaths?: pulumi.Input<pulumi.Input<string>[]>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    sshkey?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VolumeTimeouts>;
    userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    availabilityZone?: pulumi.Input<string>;
    backupUnitId?: pulumi.Input<string>;
    bus?: pulumi.Input<string>;
    datacenterId: pulumi.Input<string>;
    diskType: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    imagePassword?: pulumi.Input<string>;
    licenceType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serverId: pulumi.Input<string>;
    size: pulumi.Input<number>;
    sshKeyPaths?: pulumi.Input<pulumi.Input<string>[]>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.VolumeTimeouts>;
    userData?: pulumi.Input<string>;
}
