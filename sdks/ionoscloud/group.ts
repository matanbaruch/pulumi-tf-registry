// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    public readonly accessActivityLog!: pulumi.Output<boolean | undefined>;
    /**
     * Privilege for a group to access and manage certificates.
     */
    public readonly accessAndManageCertificates!: pulumi.Output<boolean | undefined>;
    /**
     * Privilege for a group to access and manage monitoring related functionality (access metrics, CRUD on alarms,
     * alarm-actions etc) using Monotoring-as-a-Service (MaaS).
     */
    public readonly accessAndManageMonitoring!: pulumi.Output<boolean | undefined>;
    /**
     * Create backup unit privilege.
     */
    public readonly createBackupUnit!: pulumi.Output<boolean | undefined>;
    public readonly createDatacenter!: pulumi.Output<boolean | undefined>;
    /**
     * Create Flow Logs privilege.
     */
    public readonly createFlowLog!: pulumi.Output<boolean | undefined>;
    /**
     * Create internet access privilege.
     */
    public readonly createInternetAccess!: pulumi.Output<boolean | undefined>;
    /**
     * Create Kubernetes cluster privilege.
     */
    public readonly createK8sCluster!: pulumi.Output<boolean | undefined>;
    public readonly createPcc!: pulumi.Output<boolean | undefined>;
    public readonly createSnapshot!: pulumi.Output<boolean | undefined>;
    /**
     * Privilege for a group to manage DBaaS related functionality
     */
    public readonly manageDbaas!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly reserveIp!: pulumi.Output<boolean | undefined>;
    public readonly s3Privilege!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.GroupTimeouts | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly userId!: pulumi.Output<string | undefined>;
    public readonly userIds!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly users!: pulumi.Output<outputs.GroupUser[]>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["accessActivityLog"] = state ? state.accessActivityLog : undefined;
            resourceInputs["accessAndManageCertificates"] = state ? state.accessAndManageCertificates : undefined;
            resourceInputs["accessAndManageMonitoring"] = state ? state.accessAndManageMonitoring : undefined;
            resourceInputs["createBackupUnit"] = state ? state.createBackupUnit : undefined;
            resourceInputs["createDatacenter"] = state ? state.createDatacenter : undefined;
            resourceInputs["createFlowLog"] = state ? state.createFlowLog : undefined;
            resourceInputs["createInternetAccess"] = state ? state.createInternetAccess : undefined;
            resourceInputs["createK8sCluster"] = state ? state.createK8sCluster : undefined;
            resourceInputs["createPcc"] = state ? state.createPcc : undefined;
            resourceInputs["createSnapshot"] = state ? state.createSnapshot : undefined;
            resourceInputs["manageDbaas"] = state ? state.manageDbaas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reserveIp"] = state ? state.reserveIp : undefined;
            resourceInputs["s3Privilege"] = state ? state.s3Privilege : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userIds"] = state ? state.userIds : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            resourceInputs["accessActivityLog"] = args ? args.accessActivityLog : undefined;
            resourceInputs["accessAndManageCertificates"] = args ? args.accessAndManageCertificates : undefined;
            resourceInputs["accessAndManageMonitoring"] = args ? args.accessAndManageMonitoring : undefined;
            resourceInputs["createBackupUnit"] = args ? args.createBackupUnit : undefined;
            resourceInputs["createDatacenter"] = args ? args.createDatacenter : undefined;
            resourceInputs["createFlowLog"] = args ? args.createFlowLog : undefined;
            resourceInputs["createInternetAccess"] = args ? args.createInternetAccess : undefined;
            resourceInputs["createK8sCluster"] = args ? args.createK8sCluster : undefined;
            resourceInputs["createPcc"] = args ? args.createPcc : undefined;
            resourceInputs["createSnapshot"] = args ? args.createSnapshot : undefined;
            resourceInputs["manageDbaas"] = args ? args.manageDbaas : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reserveIp"] = args ? args.reserveIp : undefined;
            resourceInputs["s3Privilege"] = args ? args.s3Privilege : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["userIds"] = args ? args.userIds : undefined;
            resourceInputs["users"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    accessActivityLog?: pulumi.Input<boolean>;
    /**
     * Privilege for a group to access and manage certificates.
     */
    accessAndManageCertificates?: pulumi.Input<boolean>;
    /**
     * Privilege for a group to access and manage monitoring related functionality (access metrics, CRUD on alarms,
     * alarm-actions etc) using Monotoring-as-a-Service (MaaS).
     */
    accessAndManageMonitoring?: pulumi.Input<boolean>;
    /**
     * Create backup unit privilege.
     */
    createBackupUnit?: pulumi.Input<boolean>;
    createDatacenter?: pulumi.Input<boolean>;
    /**
     * Create Flow Logs privilege.
     */
    createFlowLog?: pulumi.Input<boolean>;
    /**
     * Create internet access privilege.
     */
    createInternetAccess?: pulumi.Input<boolean>;
    /**
     * Create Kubernetes cluster privilege.
     */
    createK8sCluster?: pulumi.Input<boolean>;
    createPcc?: pulumi.Input<boolean>;
    createSnapshot?: pulumi.Input<boolean>;
    /**
     * Privilege for a group to manage DBaaS related functionality
     */
    manageDbaas?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    reserveIp?: pulumi.Input<boolean>;
    s3Privilege?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.GroupTimeouts>;
    /**
     * @deprecated Deprecated
     */
    userId?: pulumi.Input<string>;
    userIds?: pulumi.Input<pulumi.Input<string>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.GroupUser>[]>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    accessActivityLog?: pulumi.Input<boolean>;
    /**
     * Privilege for a group to access and manage certificates.
     */
    accessAndManageCertificates?: pulumi.Input<boolean>;
    /**
     * Privilege for a group to access and manage monitoring related functionality (access metrics, CRUD on alarms,
     * alarm-actions etc) using Monotoring-as-a-Service (MaaS).
     */
    accessAndManageMonitoring?: pulumi.Input<boolean>;
    /**
     * Create backup unit privilege.
     */
    createBackupUnit?: pulumi.Input<boolean>;
    createDatacenter?: pulumi.Input<boolean>;
    /**
     * Create Flow Logs privilege.
     */
    createFlowLog?: pulumi.Input<boolean>;
    /**
     * Create internet access privilege.
     */
    createInternetAccess?: pulumi.Input<boolean>;
    /**
     * Create Kubernetes cluster privilege.
     */
    createK8sCluster?: pulumi.Input<boolean>;
    createPcc?: pulumi.Input<boolean>;
    createSnapshot?: pulumi.Input<boolean>;
    /**
     * Privilege for a group to manage DBaaS related functionality
     */
    manageDbaas?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    reserveIp?: pulumi.Input<boolean>;
    s3Privilege?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.GroupTimeouts>;
    /**
     * @deprecated Deprecated
     */
    userId?: pulumi.Input<string>;
    userIds?: pulumi.Input<pulumi.Input<string>[]>;
}
