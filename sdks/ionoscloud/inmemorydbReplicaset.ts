// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InmemorydbReplicaset extends pulumi.CustomResource {
    /**
     * Get an existing InmemorydbReplicaset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InmemorydbReplicasetState, opts?: pulumi.CustomResourceOptions): InmemorydbReplicaset {
        return new InmemorydbReplicaset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/inmemorydbReplicaset:InmemorydbReplicaset';

    /**
     * Returns true if the given object is an instance of InmemorydbReplicaset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InmemorydbReplicaset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InmemorydbReplicaset.__pulumiType;
    }

    /**
     * The network connection for your replica set. Only one connection is allowed.
     */
    public readonly connections!: pulumi.Output<outputs.InmemorydbReplicasetConnections>;
    /**
     * Credentials for the InMemoryDB replicaset.
     */
    public readonly credentials!: pulumi.Output<outputs.InmemorydbReplicasetCredentials>;
    /**
     * The human readable name of your replica set.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * The eviction policy for the replica set.
     */
    public readonly evictionPolicy!: pulumi.Output<string>;
    /**
     * The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
     */
    public readonly initialSnapshotId!: pulumi.Output<string | undefined>;
    /**
     * The replica set location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * A weekly 4 hour-long window, during which maintenance might occur.
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.InmemorydbReplicasetMaintenanceWindow | undefined>;
    /**
     * Specifies How and If data is persisted.
     */
    public readonly persistenceMode!: pulumi.Output<string>;
    /**
     * The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
     * value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
     * standby for a failure of the active instance.
     */
    public readonly replicas!: pulumi.Output<number>;
    /**
     * The resources of the individual replicas.
     */
    public readonly resources!: pulumi.Output<outputs.InmemorydbReplicasetResources>;
    public readonly timeouts!: pulumi.Output<outputs.InmemorydbReplicasetTimeouts | undefined>;
    /**
     * The InMemoryDB version of your replica set.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a InmemorydbReplicaset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InmemorydbReplicasetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InmemorydbReplicasetArgs | InmemorydbReplicasetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InmemorydbReplicasetState | undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["initialSnapshotId"] = state ? state.initialSnapshotId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["persistenceMode"] = state ? state.persistenceMode : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as InmemorydbReplicasetArgs | undefined;
            if ((!args || args.connections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connections'");
            }
            if ((!args || args.credentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.evictionPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evictionPolicy'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.persistenceMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'persistenceMode'");
            }
            if ((!args || args.replicas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicas'");
            }
            if ((!args || args.resources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["connections"] = args ? args.connections : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["initialSnapshotId"] = args ? args.initialSnapshotId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["persistenceMode"] = args ? args.persistenceMode : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["dnsName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InmemorydbReplicaset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InmemorydbReplicaset resources.
 */
export interface InmemorydbReplicasetState {
    /**
     * The network connection for your replica set. Only one connection is allowed.
     */
    connections?: pulumi.Input<inputs.InmemorydbReplicasetConnections>;
    /**
     * Credentials for the InMemoryDB replicaset.
     */
    credentials?: pulumi.Input<inputs.InmemorydbReplicasetCredentials>;
    /**
     * The human readable name of your replica set.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * The eviction policy for the replica set.
     */
    evictionPolicy?: pulumi.Input<string>;
    /**
     * The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
     */
    initialSnapshotId?: pulumi.Input<string>;
    /**
     * The replica set location
     */
    location?: pulumi.Input<string>;
    /**
     * A weekly 4 hour-long window, during which maintenance might occur.
     */
    maintenanceWindow?: pulumi.Input<inputs.InmemorydbReplicasetMaintenanceWindow>;
    /**
     * Specifies How and If data is persisted.
     */
    persistenceMode?: pulumi.Input<string>;
    /**
     * The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
     * value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
     * standby for a failure of the active instance.
     */
    replicas?: pulumi.Input<number>;
    /**
     * The resources of the individual replicas.
     */
    resources?: pulumi.Input<inputs.InmemorydbReplicasetResources>;
    timeouts?: pulumi.Input<inputs.InmemorydbReplicasetTimeouts>;
    /**
     * The InMemoryDB version of your replica set.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InmemorydbReplicaset resource.
 */
export interface InmemorydbReplicasetArgs {
    /**
     * The network connection for your replica set. Only one connection is allowed.
     */
    connections: pulumi.Input<inputs.InmemorydbReplicasetConnections>;
    /**
     * Credentials for the InMemoryDB replicaset.
     */
    credentials: pulumi.Input<inputs.InmemorydbReplicasetCredentials>;
    /**
     * The human readable name of your replica set.
     */
    displayName: pulumi.Input<string>;
    /**
     * The eviction policy for the replica set.
     */
    evictionPolicy: pulumi.Input<string>;
    /**
     * The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
     */
    initialSnapshotId?: pulumi.Input<string>;
    /**
     * The replica set location
     */
    location: pulumi.Input<string>;
    /**
     * A weekly 4 hour-long window, during which maintenance might occur.
     */
    maintenanceWindow?: pulumi.Input<inputs.InmemorydbReplicasetMaintenanceWindow>;
    /**
     * Specifies How and If data is persisted.
     */
    persistenceMode: pulumi.Input<string>;
    /**
     * The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
     * value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
     * standby for a failure of the active instance.
     */
    replicas: pulumi.Input<number>;
    /**
     * The resources of the individual replicas.
     */
    resources: pulumi.Input<inputs.InmemorydbReplicasetResources>;
    timeouts?: pulumi.Input<inputs.InmemorydbReplicasetTimeouts>;
    /**
     * The InMemoryDB version of your replica set.
     */
    version: pulumi.Input<string>;
}
