// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getKafkaClusterTopic(args: GetKafkaClusterTopicArgs, opts?: pulumi.InvokeOptions): Promise<GetKafkaClusterTopicResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getKafkaClusterTopic:getKafkaClusterTopic", {
        "clusterId": args.clusterId,
        "id": args.id,
        "location": args.location,
        "name": args.name,
        "partialMatch": args.partialMatch,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKafkaClusterTopic.
 */
export interface GetKafkaClusterTopicArgs {
    clusterId: string;
    id?: string;
    location: string;
    name?: string;
    partialMatch?: boolean;
}

/**
 * A collection of values returned by getKafkaClusterTopic.
 */
export interface GetKafkaClusterTopicResult {
    readonly clusterId: string;
    readonly id: string;
    readonly location: string;
    readonly name: string;
    readonly numberOfPartitions: number;
    readonly partialMatch?: boolean;
    readonly replicationFactor: number;
    readonly retentionTime: number;
    readonly segmentBytes: number;
}
export function getKafkaClusterTopicOutput(args: GetKafkaClusterTopicOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKafkaClusterTopicResult> {
    return pulumi.output(args).apply((a: any) => getKafkaClusterTopic(a, opts))
}

/**
 * A collection of arguments for invoking getKafkaClusterTopic.
 */
export interface GetKafkaClusterTopicOutputArgs {
    clusterId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    partialMatch?: pulumi.Input<boolean>;
}
