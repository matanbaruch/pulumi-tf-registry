// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNic(args: GetNicArgs, opts?: pulumi.InvokeOptions): Promise<GetNicResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getNic:getNic", {
        "datacenterId": args.datacenterId,
        "dhcp": args.dhcp,
        "dhcpv6": args.dhcpv6,
        "firewallActive": args.firewallActive,
        "firewallType": args.firewallType,
        "id": args.id,
        "ips": args.ips,
        "ipv6CidrBlock": args.ipv6CidrBlock,
        "ipv6Ips": args.ipv6Ips,
        "lan": args.lan,
        "name": args.name,
        "serverId": args.serverId,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNic.
 */
export interface GetNicArgs {
    datacenterId: string;
    dhcp?: boolean;
    dhcpv6?: boolean;
    firewallActive?: boolean;
    firewallType?: string;
    id?: string;
    ips?: string[];
    ipv6CidrBlock?: string;
    ipv6Ips?: string[];
    lan?: number;
    name?: string;
    serverId: string;
    timeouts?: inputs.GetNicTimeouts;
}

/**
 * A collection of values returned by getNic.
 */
export interface GetNicResult {
    readonly datacenterId: string;
    readonly deviceNumber: number;
    readonly dhcp?: boolean;
    readonly dhcpv6?: boolean;
    readonly firewallActive?: boolean;
    readonly firewallType: string;
    readonly flowlogs: outputs.GetNicFlowlog[];
    readonly id?: string;
    readonly ips: string[];
    readonly ipv6CidrBlock: string;
    readonly ipv6Ips: string[];
    readonly lan?: number;
    readonly mac: string;
    readonly name?: string;
    readonly pciSlot: number;
    readonly serverId: string;
    readonly timeouts?: outputs.GetNicTimeouts;
}
export function getNicOutput(args: GetNicOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNicResult> {
    return pulumi.output(args).apply((a: any) => getNic(a, opts))
}

/**
 * A collection of arguments for invoking getNic.
 */
export interface GetNicOutputArgs {
    datacenterId: pulumi.Input<string>;
    dhcp?: pulumi.Input<boolean>;
    dhcpv6?: pulumi.Input<boolean>;
    firewallActive?: pulumi.Input<boolean>;
    firewallType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6CidrBlock?: pulumi.Input<string>;
    ipv6Ips?: pulumi.Input<pulumi.Input<string>[]>;
    lan?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    serverId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetNicTimeoutsArgs>;
}
