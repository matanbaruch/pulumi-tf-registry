// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MariadbCluster extends pulumi.CustomResource {
    /**
     * Get an existing MariadbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MariadbClusterState, opts?: pulumi.CustomResourceOptions): MariadbCluster {
        return new MariadbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/mariadbCluster:MariadbCluster';

    /**
     * Returns true if the given object is an instance of MariadbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MariadbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MariadbCluster.__pulumiType;
    }

    /**
     * The network connection for your cluster. Only one connection is allowed.
     */
    public readonly connections!: pulumi.Output<outputs.MariadbClusterConnections>;
    /**
     * The number of CPU cores per instance.
     */
    public readonly cores!: pulumi.Output<number>;
    /**
     * Credentials for the database user to be created.
     */
    public readonly credentials!: pulumi.Output<outputs.MariadbClusterCredentials>;
    /**
     * The friendly name of your cluster.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The DNS name pointing to your cluster.
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * The total number of instances in the cluster (one primary and n-1 secondary).
     */
    public readonly instances!: pulumi.Output<number>;
    /**
     * The cluster location
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * A weekly 4 hour-long window, during which maintenance might occur.
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.MariadbClusterMaintenanceWindow | undefined>;
    /**
     * The MariaDB version of your cluster.
     */
    public readonly mariadbVersion!: pulumi.Output<string>;
    /**
     * The amount of memory per instance in gigabytes (GB).
     */
    public readonly ram!: pulumi.Output<number>;
    /**
     * The amount of storage per instance in gigabytes (GB).
     */
    public readonly storageSize!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.MariadbClusterTimeouts | undefined>;

    /**
     * Create a MariadbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MariadbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MariadbClusterArgs | MariadbClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MariadbClusterState | undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["cores"] = state ? state.cores : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["mariadbVersion"] = state ? state.mariadbVersion : undefined;
            resourceInputs["ram"] = state ? state.ram : undefined;
            resourceInputs["storageSize"] = state ? state.storageSize : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MariadbClusterArgs | undefined;
            if ((!args || args.connections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connections'");
            }
            if ((!args || args.cores === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cores'");
            }
            if ((!args || args.credentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.instances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instances'");
            }
            if ((!args || args.mariadbVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mariadbVersion'");
            }
            if ((!args || args.ram === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ram'");
            }
            if ((!args || args.storageSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageSize'");
            }
            resourceInputs["connections"] = args ? args.connections : undefined;
            resourceInputs["cores"] = args ? args.cores : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["mariadbVersion"] = args ? args.mariadbVersion : undefined;
            resourceInputs["ram"] = args ? args.ram : undefined;
            resourceInputs["storageSize"] = args ? args.storageSize : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["dnsName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MariadbCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MariadbCluster resources.
 */
export interface MariadbClusterState {
    /**
     * The network connection for your cluster. Only one connection is allowed.
     */
    connections?: pulumi.Input<inputs.MariadbClusterConnections>;
    /**
     * The number of CPU cores per instance.
     */
    cores?: pulumi.Input<number>;
    /**
     * Credentials for the database user to be created.
     */
    credentials?: pulumi.Input<inputs.MariadbClusterCredentials>;
    /**
     * The friendly name of your cluster.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The DNS name pointing to your cluster.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * The total number of instances in the cluster (one primary and n-1 secondary).
     */
    instances?: pulumi.Input<number>;
    /**
     * The cluster location
     */
    location?: pulumi.Input<string>;
    /**
     * A weekly 4 hour-long window, during which maintenance might occur.
     */
    maintenanceWindow?: pulumi.Input<inputs.MariadbClusterMaintenanceWindow>;
    /**
     * The MariaDB version of your cluster.
     */
    mariadbVersion?: pulumi.Input<string>;
    /**
     * The amount of memory per instance in gigabytes (GB).
     */
    ram?: pulumi.Input<number>;
    /**
     * The amount of storage per instance in gigabytes (GB).
     */
    storageSize?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.MariadbClusterTimeouts>;
}

/**
 * The set of arguments for constructing a MariadbCluster resource.
 */
export interface MariadbClusterArgs {
    /**
     * The network connection for your cluster. Only one connection is allowed.
     */
    connections: pulumi.Input<inputs.MariadbClusterConnections>;
    /**
     * The number of CPU cores per instance.
     */
    cores: pulumi.Input<number>;
    /**
     * Credentials for the database user to be created.
     */
    credentials: pulumi.Input<inputs.MariadbClusterCredentials>;
    /**
     * The friendly name of your cluster.
     */
    displayName: pulumi.Input<string>;
    /**
     * The total number of instances in the cluster (one primary and n-1 secondary).
     */
    instances: pulumi.Input<number>;
    /**
     * The cluster location
     */
    location?: pulumi.Input<string>;
    /**
     * A weekly 4 hour-long window, during which maintenance might occur.
     */
    maintenanceWindow?: pulumi.Input<inputs.MariadbClusterMaintenanceWindow>;
    /**
     * The MariaDB version of your cluster.
     */
    mariadbVersion: pulumi.Input<string>;
    /**
     * The amount of memory per instance in gigabytes (GB).
     */
    ram: pulumi.Input<number>;
    /**
     * The amount of storage per instance in gigabytes (GB).
     */
    storageSize: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.MariadbClusterTimeouts>;
}
