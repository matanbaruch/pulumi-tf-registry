// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MongoCluster extends pulumi.CustomResource {
    /**
     * Get an existing MongoCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongoClusterState, opts?: pulumi.CustomResourceOptions): MongoCluster {
        return new MongoCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/mongoCluster:MongoCluster';

    /**
     * Returns true if the given object is an instance of MongoCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MongoCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongoCluster.__pulumiType;
    }

    /**
     * Backup related properties.
     */
    public readonly backup!: pulumi.Output<outputs.MongoClusterBackup | undefined>;
    /**
     * The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
     * analysis.
     */
    public readonly biConnector!: pulumi.Output<outputs.MongoClusterBiConnector | undefined>;
    /**
     * The connection string for your cluster.
     */
    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    /**
     * Details about the network connection for your cluster.
     */
    public readonly connections!: pulumi.Output<outputs.MongoClusterConnections>;
    /**
     * The number of CPU cores per instance.
     */
    public readonly cores!: pulumi.Output<number>;
    /**
     * The name of your cluster.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The cluster edition. Must be one of: playground, business, enterprise
     */
    public readonly edition!: pulumi.Output<string>;
    /**
     * The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
     * at least 3.
     */
    public readonly instances!: pulumi.Output<number>;
    /**
     * The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
     * Update forces cluster re-creation.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * A weekly 4 hour-long window, during which maintenance might occur
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.MongoClusterMaintenanceWindow | undefined>;
    /**
     * The MongoDB version of your cluster. Update forces cluster re-creation.
     */
    public readonly mongodbVersion!: pulumi.Output<string>;
    /**
     * The amount of memory per instance in megabytes. Multiple of 1024
     */
    public readonly ram!: pulumi.Output<number>;
    /**
     * The total number of shards in the cluster.
     */
    public readonly shards!: pulumi.Output<number | undefined>;
    /**
     * The amount of storage per instance in megabytes. At least 5120, at most 2097152
     */
    public readonly storageSize!: pulumi.Output<number>;
    /**
     * The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
     */
    public readonly storageType!: pulumi.Output<string>;
    /**
     * The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
     * smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
     * changes use the /templates endpoint.
     */
    public readonly templateId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MongoClusterTimeouts | undefined>;
    /**
     * The cluster type, either `replicaset` or `sharded-cluster`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a MongoCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongoClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MongoClusterArgs | MongoClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongoClusterState | undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["biConnector"] = state ? state.biConnector : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["cores"] = state ? state.cores : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["mongodbVersion"] = state ? state.mongodbVersion : undefined;
            resourceInputs["ram"] = state ? state.ram : undefined;
            resourceInputs["shards"] = state ? state.shards : undefined;
            resourceInputs["storageSize"] = state ? state.storageSize : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as MongoClusterArgs | undefined;
            if ((!args || args.connections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connections'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.instances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instances'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.mongodbVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mongodbVersion'");
            }
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["biConnector"] = args ? args.biConnector : undefined;
            resourceInputs["connections"] = args ? args.connections : undefined;
            resourceInputs["cores"] = args ? args.cores : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["mongodbVersion"] = args ? args.mongodbVersion : undefined;
            resourceInputs["ram"] = args ? args.ram : undefined;
            resourceInputs["shards"] = args ? args.shards : undefined;
            resourceInputs["storageSize"] = args ? args.storageSize : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["connectionString"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MongoCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MongoCluster resources.
 */
export interface MongoClusterState {
    /**
     * Backup related properties.
     */
    backup?: pulumi.Input<inputs.MongoClusterBackup>;
    /**
     * The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
     * analysis.
     */
    biConnector?: pulumi.Input<inputs.MongoClusterBiConnector>;
    /**
     * The connection string for your cluster.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * Details about the network connection for your cluster.
     */
    connections?: pulumi.Input<inputs.MongoClusterConnections>;
    /**
     * The number of CPU cores per instance.
     */
    cores?: pulumi.Input<number>;
    /**
     * The name of your cluster.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The cluster edition. Must be one of: playground, business, enterprise
     */
    edition?: pulumi.Input<string>;
    /**
     * The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
     * at least 3.
     */
    instances?: pulumi.Input<number>;
    /**
     * The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
     * Update forces cluster re-creation.
     */
    location?: pulumi.Input<string>;
    /**
     * A weekly 4 hour-long window, during which maintenance might occur
     */
    maintenanceWindow?: pulumi.Input<inputs.MongoClusterMaintenanceWindow>;
    /**
     * The MongoDB version of your cluster. Update forces cluster re-creation.
     */
    mongodbVersion?: pulumi.Input<string>;
    /**
     * The amount of memory per instance in megabytes. Multiple of 1024
     */
    ram?: pulumi.Input<number>;
    /**
     * The total number of shards in the cluster.
     */
    shards?: pulumi.Input<number>;
    /**
     * The amount of storage per instance in megabytes. At least 5120, at most 2097152
     */
    storageSize?: pulumi.Input<number>;
    /**
     * The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
     */
    storageType?: pulumi.Input<string>;
    /**
     * The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
     * smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
     * changes use the /templates endpoint.
     */
    templateId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MongoClusterTimeouts>;
    /**
     * The cluster type, either `replicaset` or `sharded-cluster`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MongoCluster resource.
 */
export interface MongoClusterArgs {
    /**
     * Backup related properties.
     */
    backup?: pulumi.Input<inputs.MongoClusterBackup>;
    /**
     * The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
     * analysis.
     */
    biConnector?: pulumi.Input<inputs.MongoClusterBiConnector>;
    /**
     * Details about the network connection for your cluster.
     */
    connections: pulumi.Input<inputs.MongoClusterConnections>;
    /**
     * The number of CPU cores per instance.
     */
    cores?: pulumi.Input<number>;
    /**
     * The name of your cluster.
     */
    displayName: pulumi.Input<string>;
    /**
     * The cluster edition. Must be one of: playground, business, enterprise
     */
    edition?: pulumi.Input<string>;
    /**
     * The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
     * at least 3.
     */
    instances: pulumi.Input<number>;
    /**
     * The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
     * Update forces cluster re-creation.
     */
    location: pulumi.Input<string>;
    /**
     * A weekly 4 hour-long window, during which maintenance might occur
     */
    maintenanceWindow?: pulumi.Input<inputs.MongoClusterMaintenanceWindow>;
    /**
     * The MongoDB version of your cluster. Update forces cluster re-creation.
     */
    mongodbVersion: pulumi.Input<string>;
    /**
     * The amount of memory per instance in megabytes. Multiple of 1024
     */
    ram?: pulumi.Input<number>;
    /**
     * The total number of shards in the cluster.
     */
    shards?: pulumi.Input<number>;
    /**
     * The amount of storage per instance in megabytes. At least 5120, at most 2097152
     */
    storageSize?: pulumi.Input<number>;
    /**
     * The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
     */
    storageType?: pulumi.Input<string>;
    /**
     * The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
     * smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
     * changes use the /templates endpoint.
     */
    templateId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MongoClusterTimeouts>;
    /**
     * The cluster type, either `replicaset` or `sharded-cluster`
     */
    type?: pulumi.Input<string>;
}
