// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Nic extends pulumi.CustomResource {
    /**
     * Get an existing Nic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NicState, opts?: pulumi.CustomResourceOptions): Nic {
        return new Nic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/nic:Nic';

    /**
     * Returns true if the given object is an instance of Nic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nic.__pulumiType;
    }

    public readonly datacenterId!: pulumi.Output<string>;
    public /*out*/ readonly deviceNumber!: pulumi.Output<number>;
    public readonly dhcp!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether this NIC receives an IPv6 address through DHCP.
     */
    public readonly dhcpv6!: pulumi.Output<boolean | undefined>;
    public readonly firewallActive!: pulumi.Output<boolean | undefined>;
    public readonly firewallType!: pulumi.Output<string>;
    /**
     * Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
     * network information such as source and destination IP addresses, source and destination ports, number of packets, amount
     * of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
     * instances are being accessed.
     */
    public readonly flowlog!: pulumi.Output<outputs.NicFlowlog | undefined>;
    /**
     * Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
     * Passing value null or empty array will assign an IP address automatically.
     */
    public readonly ips!: pulumi.Output<string[]>;
    /**
     * IPv6 CIDR block assigned to the NIC.
     */
    public readonly ipv6CidrBlock!: pulumi.Output<string>;
    /**
     * Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
     * CIDR block assigned to the nic.
     */
    public readonly ipv6Ips!: pulumi.Output<string[]>;
    public readonly lan!: pulumi.Output<number>;
    public /*out*/ readonly mac!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly pciSlot!: pulumi.Output<number>;
    public readonly serverId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NicTimeouts | undefined>;

    /**
     * Create a Nic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NicArgs | NicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NicState | undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["deviceNumber"] = state ? state.deviceNumber : undefined;
            resourceInputs["dhcp"] = state ? state.dhcp : undefined;
            resourceInputs["dhcpv6"] = state ? state.dhcpv6 : undefined;
            resourceInputs["firewallActive"] = state ? state.firewallActive : undefined;
            resourceInputs["firewallType"] = state ? state.firewallType : undefined;
            resourceInputs["flowlog"] = state ? state.flowlog : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            resourceInputs["ipv6Ips"] = state ? state.ipv6Ips : undefined;
            resourceInputs["lan"] = state ? state.lan : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pciSlot"] = state ? state.pciSlot : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NicArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.lan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lan'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["dhcp"] = args ? args.dhcp : undefined;
            resourceInputs["dhcpv6"] = args ? args.dhcpv6 : undefined;
            resourceInputs["firewallActive"] = args ? args.firewallActive : undefined;
            resourceInputs["firewallType"] = args ? args.firewallType : undefined;
            resourceInputs["flowlog"] = args ? args.flowlog : undefined;
            resourceInputs["ips"] = args ? args.ips : undefined;
            resourceInputs["ipv6CidrBlock"] = args ? args.ipv6CidrBlock : undefined;
            resourceInputs["ipv6Ips"] = args ? args.ipv6Ips : undefined;
            resourceInputs["lan"] = args ? args.lan : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["deviceNumber"] = undefined /*out*/;
            resourceInputs["mac"] = undefined /*out*/;
            resourceInputs["pciSlot"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nic resources.
 */
export interface NicState {
    datacenterId?: pulumi.Input<string>;
    deviceNumber?: pulumi.Input<number>;
    dhcp?: pulumi.Input<boolean>;
    /**
     * Indicates whether this NIC receives an IPv6 address through DHCP.
     */
    dhcpv6?: pulumi.Input<boolean>;
    firewallActive?: pulumi.Input<boolean>;
    firewallType?: pulumi.Input<string>;
    /**
     * Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
     * network information such as source and destination IP addresses, source and destination ports, number of packets, amount
     * of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
     * instances are being accessed.
     */
    flowlog?: pulumi.Input<inputs.NicFlowlog>;
    /**
     * Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
     * Passing value null or empty array will assign an IP address automatically.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPv6 CIDR block assigned to the NIC.
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
     * CIDR block assigned to the nic.
     */
    ipv6Ips?: pulumi.Input<pulumi.Input<string>[]>;
    lan?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pciSlot?: pulumi.Input<number>;
    serverId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NicTimeouts>;
}

/**
 * The set of arguments for constructing a Nic resource.
 */
export interface NicArgs {
    datacenterId: pulumi.Input<string>;
    dhcp?: pulumi.Input<boolean>;
    /**
     * Indicates whether this NIC receives an IPv6 address through DHCP.
     */
    dhcpv6?: pulumi.Input<boolean>;
    firewallActive?: pulumi.Input<boolean>;
    firewallType?: pulumi.Input<string>;
    /**
     * Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
     * network information such as source and destination IP addresses, source and destination ports, number of packets, amount
     * of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
     * instances are being accessed.
     */
    flowlog?: pulumi.Input<inputs.NicFlowlog>;
    /**
     * Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
     * Passing value null or empty array will assign an IP address automatically.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPv6 CIDR block assigned to the NIC.
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
     * CIDR block assigned to the nic.
     */
    ipv6Ips?: pulumi.Input<pulumi.Input<string>[]>;
    lan: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    serverId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NicTimeouts>;
}
