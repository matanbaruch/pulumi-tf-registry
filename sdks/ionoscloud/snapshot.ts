// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Snapshot extends pulumi.CustomResource {
    /**
     * Get an existing Snapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotState, opts?: pulumi.CustomResourceOptions): Snapshot {
        return new Snapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/snapshot:Snapshot';

    /**
     * Returns true if the given object is an instance of Snapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshot.__pulumiType;
    }

    public readonly cpuHotPlug!: pulumi.Output<boolean>;
    public /*out*/ readonly cpuHotUnplug!: pulumi.Output<boolean>;
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * Human readable description
     */
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly discScsiHotPlug!: pulumi.Output<boolean>;
    public /*out*/ readonly discScsiHotUnplug!: pulumi.Output<boolean>;
    public readonly discVirtioHotPlug!: pulumi.Output<boolean>;
    public readonly discVirtioHotUnplug!: pulumi.Output<boolean>;
    /**
     * OS type of this Snapshot
     */
    public readonly licenceType!: pulumi.Output<string>;
    /**
     * Location of that image/snapshot
     */
    public /*out*/ readonly location!: pulumi.Output<string>;
    /**
     * A name of that resource
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nicHotPlug!: pulumi.Output<boolean>;
    public readonly nicHotUnplug!: pulumi.Output<boolean>;
    public readonly ramHotPlug!: pulumi.Output<boolean>;
    public /*out*/ readonly ramHotUnplug!: pulumi.Output<boolean>;
    /**
     * Boolean value representing if the snapshot requires extra protection e.g. two factor protection
     */
    public readonly secAuthProtection!: pulumi.Output<boolean>;
    /**
     * The size of the image in GB
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.SnapshotTimeouts | undefined>;
    public readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a Snapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotArgs | SnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotState | undefined;
            resourceInputs["cpuHotPlug"] = state ? state.cpuHotPlug : undefined;
            resourceInputs["cpuHotUnplug"] = state ? state.cpuHotUnplug : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["discScsiHotPlug"] = state ? state.discScsiHotPlug : undefined;
            resourceInputs["discScsiHotUnplug"] = state ? state.discScsiHotUnplug : undefined;
            resourceInputs["discVirtioHotPlug"] = state ? state.discVirtioHotPlug : undefined;
            resourceInputs["discVirtioHotUnplug"] = state ? state.discVirtioHotUnplug : undefined;
            resourceInputs["licenceType"] = state ? state.licenceType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nicHotPlug"] = state ? state.nicHotPlug : undefined;
            resourceInputs["nicHotUnplug"] = state ? state.nicHotUnplug : undefined;
            resourceInputs["ramHotPlug"] = state ? state.ramHotPlug : undefined;
            resourceInputs["ramHotUnplug"] = state ? state.ramHotUnplug : undefined;
            resourceInputs["secAuthProtection"] = state ? state.secAuthProtection : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as SnapshotArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            resourceInputs["cpuHotPlug"] = args ? args.cpuHotPlug : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["discVirtioHotPlug"] = args ? args.discVirtioHotPlug : undefined;
            resourceInputs["discVirtioHotUnplug"] = args ? args.discVirtioHotUnplug : undefined;
            resourceInputs["licenceType"] = args ? args.licenceType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nicHotPlug"] = args ? args.nicHotPlug : undefined;
            resourceInputs["nicHotUnplug"] = args ? args.nicHotUnplug : undefined;
            resourceInputs["ramHotPlug"] = args ? args.ramHotPlug : undefined;
            resourceInputs["secAuthProtection"] = args ? args.secAuthProtection : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["cpuHotUnplug"] = undefined /*out*/;
            resourceInputs["discScsiHotPlug"] = undefined /*out*/;
            resourceInputs["discScsiHotUnplug"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["ramHotUnplug"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snapshot resources.
 */
export interface SnapshotState {
    cpuHotPlug?: pulumi.Input<boolean>;
    cpuHotUnplug?: pulumi.Input<boolean>;
    datacenterId?: pulumi.Input<string>;
    /**
     * Human readable description
     */
    description?: pulumi.Input<string>;
    discScsiHotPlug?: pulumi.Input<boolean>;
    discScsiHotUnplug?: pulumi.Input<boolean>;
    discVirtioHotPlug?: pulumi.Input<boolean>;
    discVirtioHotUnplug?: pulumi.Input<boolean>;
    /**
     * OS type of this Snapshot
     */
    licenceType?: pulumi.Input<string>;
    /**
     * Location of that image/snapshot
     */
    location?: pulumi.Input<string>;
    /**
     * A name of that resource
     */
    name?: pulumi.Input<string>;
    nicHotPlug?: pulumi.Input<boolean>;
    nicHotUnplug?: pulumi.Input<boolean>;
    ramHotPlug?: pulumi.Input<boolean>;
    ramHotUnplug?: pulumi.Input<boolean>;
    /**
     * Boolean value representing if the snapshot requires extra protection e.g. two factor protection
     */
    secAuthProtection?: pulumi.Input<boolean>;
    /**
     * The size of the image in GB
     */
    size?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.SnapshotTimeouts>;
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Snapshot resource.
 */
export interface SnapshotArgs {
    cpuHotPlug?: pulumi.Input<boolean>;
    datacenterId: pulumi.Input<string>;
    /**
     * Human readable description
     */
    description?: pulumi.Input<string>;
    discVirtioHotPlug?: pulumi.Input<boolean>;
    discVirtioHotUnplug?: pulumi.Input<boolean>;
    /**
     * OS type of this Snapshot
     */
    licenceType?: pulumi.Input<string>;
    /**
     * A name of that resource
     */
    name?: pulumi.Input<string>;
    nicHotPlug?: pulumi.Input<boolean>;
    nicHotUnplug?: pulumi.Input<boolean>;
    ramHotPlug?: pulumi.Input<boolean>;
    /**
     * Boolean value representing if the snapshot requires extra protection e.g. two factor protection
     */
    secAuthProtection?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.SnapshotTimeouts>;
    volumeId: pulumi.Input<string>;
}
