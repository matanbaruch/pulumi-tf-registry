// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vergeio:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    public readonly dhcpEnabled!: pulumi.Output<boolean>;
    public readonly dhcpSequential!: pulumi.Output<boolean>;
    public readonly dhcpStart!: pulumi.Output<string | undefined>;
    public readonly dhcpStop!: pulumi.Output<string | undefined>;
    public readonly dynamicDhcp!: pulumi.Output<boolean>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly ipaddress!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly onPowerLoss!: pulumi.Output<string | undefined>;
    public readonly vnetDefaultGateway!: pulumi.Output<number | undefined>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["dhcpEnabled"] = state ? state.dhcpEnabled : undefined;
            resourceInputs["dhcpSequential"] = state ? state.dhcpSequential : undefined;
            resourceInputs["dhcpStart"] = state ? state.dhcpStart : undefined;
            resourceInputs["dhcpStop"] = state ? state.dhcpStop : undefined;
            resourceInputs["dynamicDhcp"] = state ? state.dynamicDhcp : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ipaddress"] = state ? state.ipaddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onPowerLoss"] = state ? state.onPowerLoss : undefined;
            resourceInputs["vnetDefaultGateway"] = state ? state.vnetDefaultGateway : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            resourceInputs["dhcpEnabled"] = args ? args.dhcpEnabled : undefined;
            resourceInputs["dhcpSequential"] = args ? args.dhcpSequential : undefined;
            resourceInputs["dhcpStart"] = args ? args.dhcpStart : undefined;
            resourceInputs["dhcpStop"] = args ? args.dhcpStop : undefined;
            resourceInputs["dynamicDhcp"] = args ? args.dynamicDhcp : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ipaddress"] = args ? args.ipaddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onPowerLoss"] = args ? args.onPowerLoss : undefined;
            resourceInputs["vnetDefaultGateway"] = args ? args.vnetDefaultGateway : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    dhcpEnabled?: pulumi.Input<boolean>;
    dhcpSequential?: pulumi.Input<boolean>;
    dhcpStart?: pulumi.Input<string>;
    dhcpStop?: pulumi.Input<string>;
    dynamicDhcp?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    ipaddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    onPowerLoss?: pulumi.Input<string>;
    vnetDefaultGateway?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    dhcpEnabled?: pulumi.Input<boolean>;
    dhcpSequential?: pulumi.Input<boolean>;
    dhcpStart?: pulumi.Input<string>;
    dhcpStop?: pulumi.Input<string>;
    dynamicDhcp?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    ipaddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    onPowerLoss?: pulumi.Input<string>;
    vnetDefaultGateway?: pulumi.Input<number>;
}
