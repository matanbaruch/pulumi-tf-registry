// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vm extends pulumi.CustomResource {
    /**
     * Get an existing Vm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmState, opts?: pulumi.CustomResourceOptions): Vm {
        return new Vm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vergeio:index/vm:Vm';

    /**
     * Returns true if the given object is an instance of Vm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vm.__pulumiType;
    }

    public readonly allowHotplug!: pulumi.Output<boolean>;
    public readonly bootDelay!: pulumi.Output<number>;
    public readonly bootOrder!: pulumi.Output<string>;
    public readonly cluster!: pulumi.Output<number>;
    public readonly console!: pulumi.Output<string>;
    public readonly consolePass!: pulumi.Output<string>;
    public readonly consolePassEnabled!: pulumi.Output<boolean>;
    public readonly cpuCores!: pulumi.Output<number>;
    public readonly cpuType!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly disablePowercycle!: pulumi.Output<boolean>;
    public readonly display!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly machine!: pulumi.Output<number>;
    public readonly machineType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly osDescription!: pulumi.Output<string>;
    public readonly osFamily!: pulumi.Output<string>;
    public readonly preferredNode!: pulumi.Output<number>;
    public readonly ram!: pulumi.Output<number>;
    public readonly rtcBase!: pulumi.Output<string>;
    public readonly secureBoot!: pulumi.Output<boolean>;
    public readonly serialPort!: pulumi.Output<boolean>;
    public readonly snapshotProfile!: pulumi.Output<number>;
    public readonly sound!: pulumi.Output<string>;
    public readonly uefi!: pulumi.Output<boolean>;
    public readonly usbTablet!: pulumi.Output<boolean>;
    public readonly video!: pulumi.Output<string>;

    /**
     * Create a Vm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmArgs | VmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmState | undefined;
            resourceInputs["allowHotplug"] = state ? state.allowHotplug : undefined;
            resourceInputs["bootDelay"] = state ? state.bootDelay : undefined;
            resourceInputs["bootOrder"] = state ? state.bootOrder : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["console"] = state ? state.console : undefined;
            resourceInputs["consolePass"] = state ? state.consolePass : undefined;
            resourceInputs["consolePassEnabled"] = state ? state.consolePassEnabled : undefined;
            resourceInputs["cpuCores"] = state ? state.cpuCores : undefined;
            resourceInputs["cpuType"] = state ? state.cpuType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disablePowercycle"] = state ? state.disablePowercycle : undefined;
            resourceInputs["display"] = state ? state.display : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["machine"] = state ? state.machine : undefined;
            resourceInputs["machineType"] = state ? state.machineType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osDescription"] = state ? state.osDescription : undefined;
            resourceInputs["osFamily"] = state ? state.osFamily : undefined;
            resourceInputs["preferredNode"] = state ? state.preferredNode : undefined;
            resourceInputs["ram"] = state ? state.ram : undefined;
            resourceInputs["rtcBase"] = state ? state.rtcBase : undefined;
            resourceInputs["secureBoot"] = state ? state.secureBoot : undefined;
            resourceInputs["serialPort"] = state ? state.serialPort : undefined;
            resourceInputs["snapshotProfile"] = state ? state.snapshotProfile : undefined;
            resourceInputs["sound"] = state ? state.sound : undefined;
            resourceInputs["uefi"] = state ? state.uefi : undefined;
            resourceInputs["usbTablet"] = state ? state.usbTablet : undefined;
            resourceInputs["video"] = state ? state.video : undefined;
        } else {
            const args = argsOrState as VmArgs | undefined;
            resourceInputs["allowHotplug"] = args ? args.allowHotplug : undefined;
            resourceInputs["bootDelay"] = args ? args.bootDelay : undefined;
            resourceInputs["bootOrder"] = args ? args.bootOrder : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["console"] = args ? args.console : undefined;
            resourceInputs["consolePass"] = args ? args.consolePass : undefined;
            resourceInputs["consolePassEnabled"] = args ? args.consolePassEnabled : undefined;
            resourceInputs["cpuCores"] = args ? args.cpuCores : undefined;
            resourceInputs["cpuType"] = args ? args.cpuType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disablePowercycle"] = args ? args.disablePowercycle : undefined;
            resourceInputs["display"] = args ? args.display : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["machine"] = args ? args.machine : undefined;
            resourceInputs["machineType"] = args ? args.machineType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osDescription"] = args ? args.osDescription : undefined;
            resourceInputs["osFamily"] = args ? args.osFamily : undefined;
            resourceInputs["preferredNode"] = args ? args.preferredNode : undefined;
            resourceInputs["ram"] = args ? args.ram : undefined;
            resourceInputs["rtcBase"] = args ? args.rtcBase : undefined;
            resourceInputs["secureBoot"] = args ? args.secureBoot : undefined;
            resourceInputs["serialPort"] = args ? args.serialPort : undefined;
            resourceInputs["snapshotProfile"] = args ? args.snapshotProfile : undefined;
            resourceInputs["sound"] = args ? args.sound : undefined;
            resourceInputs["uefi"] = args ? args.uefi : undefined;
            resourceInputs["usbTablet"] = args ? args.usbTablet : undefined;
            resourceInputs["video"] = args ? args.video : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vm resources.
 */
export interface VmState {
    allowHotplug?: pulumi.Input<boolean>;
    bootDelay?: pulumi.Input<number>;
    bootOrder?: pulumi.Input<string>;
    cluster?: pulumi.Input<number>;
    console?: pulumi.Input<string>;
    consolePass?: pulumi.Input<string>;
    consolePassEnabled?: pulumi.Input<boolean>;
    cpuCores?: pulumi.Input<number>;
    cpuType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disablePowercycle?: pulumi.Input<boolean>;
    display?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    machine?: pulumi.Input<number>;
    machineType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    osDescription?: pulumi.Input<string>;
    osFamily?: pulumi.Input<string>;
    preferredNode?: pulumi.Input<number>;
    ram?: pulumi.Input<number>;
    rtcBase?: pulumi.Input<string>;
    secureBoot?: pulumi.Input<boolean>;
    serialPort?: pulumi.Input<boolean>;
    snapshotProfile?: pulumi.Input<number>;
    sound?: pulumi.Input<string>;
    uefi?: pulumi.Input<boolean>;
    usbTablet?: pulumi.Input<boolean>;
    video?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vm resource.
 */
export interface VmArgs {
    allowHotplug?: pulumi.Input<boolean>;
    bootDelay?: pulumi.Input<number>;
    bootOrder?: pulumi.Input<string>;
    cluster?: pulumi.Input<number>;
    console?: pulumi.Input<string>;
    consolePass?: pulumi.Input<string>;
    consolePassEnabled?: pulumi.Input<boolean>;
    cpuCores?: pulumi.Input<number>;
    cpuType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disablePowercycle?: pulumi.Input<boolean>;
    display?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    machine?: pulumi.Input<number>;
    machineType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    osDescription?: pulumi.Input<string>;
    osFamily?: pulumi.Input<string>;
    preferredNode?: pulumi.Input<number>;
    ram?: pulumi.Input<number>;
    rtcBase?: pulumi.Input<string>;
    secureBoot?: pulumi.Input<boolean>;
    serialPort?: pulumi.Input<boolean>;
    snapshotProfile?: pulumi.Input<number>;
    sound?: pulumi.Input<string>;
    uefi?: pulumi.Input<boolean>;
    usbTablet?: pulumi.Input<boolean>;
    video?: pulumi.Input<string>;
}
