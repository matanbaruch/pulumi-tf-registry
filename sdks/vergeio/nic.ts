// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nic extends pulumi.CustomResource {
    /**
     * Get an existing Nic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NicState, opts?: pulumi.CustomResourceOptions): Nic {
        return new Nic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vergeio:index/nic:Nic';

    /**
     * Returns true if the given object is an instance of Nic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nic.__pulumiType;
    }

    public readonly asset!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly driver!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly interface!: pulumi.Output<string>;
    public readonly macaddress!: pulumi.Output<string>;
    public readonly machine!: pulumi.Output<number>;
    public readonly model!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly vendor!: pulumi.Output<string>;
    public readonly vnet!: pulumi.Output<number>;

    /**
     * Create a Nic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NicArgs | NicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NicState | undefined;
            resourceInputs["asset"] = state ? state.asset : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["driver"] = state ? state.driver : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["macaddress"] = state ? state.macaddress : undefined;
            resourceInputs["machine"] = state ? state.machine : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
            resourceInputs["vnet"] = state ? state.vnet : undefined;
        } else {
            const args = argsOrState as NicArgs | undefined;
            if ((!args || args.machine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machine'");
            }
            resourceInputs["asset"] = args ? args.asset : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["driver"] = args ? args.driver : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["macaddress"] = args ? args.macaddress : undefined;
            resourceInputs["machine"] = args ? args.machine : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["vendor"] = args ? args.vendor : undefined;
            resourceInputs["vnet"] = args ? args.vnet : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nic resources.
 */
export interface NicState {
    asset?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    driver?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    interface?: pulumi.Input<string>;
    macaddress?: pulumi.Input<string>;
    machine?: pulumi.Input<number>;
    model?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    vendor?: pulumi.Input<string>;
    vnet?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Nic resource.
 */
export interface NicArgs {
    asset?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    driver?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    interface?: pulumi.Input<string>;
    macaddress?: pulumi.Input<string>;
    machine: pulumi.Input<number>;
    model?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    vendor?: pulumi.Input<string>;
    vnet?: pulumi.Input<number>;
}
