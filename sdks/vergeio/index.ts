// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DriveArgs, DriveState } from "./drive";
export type Drive = import("./drive").Drive;
export const Drive: typeof import("./drive").Drive = null as any;
utilities.lazyLoad(exports, ["Drive"], () => require("./drive"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetMediasourcesArgs, GetMediasourcesResult, GetMediasourcesOutputArgs } from "./getMediasources";
export const getMediasources: typeof import("./getMediasources").getMediasources = null as any;
export const getMediasourcesOutput: typeof import("./getMediasources").getMediasourcesOutput = null as any;
utilities.lazyLoad(exports, ["getMediasources","getMediasourcesOutput"], () => require("./getMediasources"));

export { GetNetworksArgs, GetNetworksResult, GetNetworksOutputArgs } from "./getNetworks";
export const getNetworks: typeof import("./getNetworks").getNetworks = null as any;
export const getNetworksOutput: typeof import("./getNetworks").getNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getNetworks","getNetworksOutput"], () => require("./getNetworks"));

export { GetNodesArgs, GetNodesResult, GetNodesOutputArgs } from "./getNodes";
export const getNodes: typeof import("./getNodes").getNodes = null as any;
export const getNodesOutput: typeof import("./getNodes").getNodesOutput = null as any;
utilities.lazyLoad(exports, ["getNodes","getNodesOutput"], () => require("./getNodes"));

export { GetVersionArgs, GetVersionResult, GetVersionOutputArgs } from "./getVersion";
export const getVersion: typeof import("./getVersion").getVersion = null as any;
export const getVersionOutput: typeof import("./getVersion").getVersionOutput = null as any;
utilities.lazyLoad(exports, ["getVersion","getVersionOutput"], () => require("./getVersion"));

export { GetVmsArgs, GetVmsResult, GetVmsOutputArgs } from "./getVms";
export const getVms: typeof import("./getVms").getVms = null as any;
export const getVmsOutput: typeof import("./getVms").getVmsOutput = null as any;
utilities.lazyLoad(exports, ["getVms","getVmsOutput"], () => require("./getVms"));

export { MemberArgs, MemberState } from "./member";
export type Member = import("./member").Member;
export const Member: typeof import("./member").Member = null as any;
utilities.lazyLoad(exports, ["Member"], () => require("./member"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NicArgs, NicState } from "./nic";
export type Nic = import("./nic").Nic;
export const Nic: typeof import("./nic").Nic = null as any;
utilities.lazyLoad(exports, ["Nic"], () => require("./nic"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { VmArgs, VmState } from "./vm";
export type Vm = import("./vm").Vm;
export const Vm: typeof import("./vm").Vm = null as any;
utilities.lazyLoad(exports, ["Vm"], () => require("./vm"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vergeio:index/drive:Drive":
                return new Drive(name, <any>undefined, { urn })
            case "vergeio:index/member:Member":
                return new Member(name, <any>undefined, { urn })
            case "vergeio:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "vergeio:index/nic:Nic":
                return new Nic(name, <any>undefined, { urn })
            case "vergeio:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "vergeio:index/vm:Vm":
                return new Vm(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vergeio", "index/drive", _module)
pulumi.runtime.registerResourceModule("vergeio", "index/member", _module)
pulumi.runtime.registerResourceModule("vergeio", "index/network", _module)
pulumi.runtime.registerResourceModule("vergeio", "index/nic", _module)
pulumi.runtime.registerResourceModule("vergeio", "index/user", _module)
pulumi.runtime.registerResourceModule("vergeio", "index/vm", _module)
pulumi.runtime.registerResourcePackage("vergeio", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vergeio") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
