// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DriveArrayArgs, DriveArrayState } from "./driveArray";
export type DriveArray = import("./driveArray").DriveArray;
export const DriveArray: typeof import("./driveArray").DriveArray = null as any;
utilities.lazyLoad(exports, ["DriveArray"], () => require("./driveArray"));

export { EksaArgs, EksaState } from "./eksa";
export type Eksa = import("./eksa").Eksa;
export const Eksa: typeof import("./eksa").Eksa = null as any;
utilities.lazyLoad(exports, ["Eksa"], () => require("./eksa"));

export { FirmwarePolicyArgs, FirmwarePolicyState } from "./firmwarePolicy";
export type FirmwarePolicy = import("./firmwarePolicy").FirmwarePolicy;
export const FirmwarePolicy: typeof import("./firmwarePolicy").FirmwarePolicy = null as any;
utilities.lazyLoad(exports, ["FirmwarePolicy"], () => require("./firmwarePolicy"));

export { GetExternalConnectionArgs, GetExternalConnectionResult, GetExternalConnectionOutputArgs } from "./getExternalConnection";
export const getExternalConnection: typeof import("./getExternalConnection").getExternalConnection = null as any;
export const getExternalConnectionOutput: typeof import("./getExternalConnection").getExternalConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getExternalConnection","getExternalConnectionOutput"], () => require("./getExternalConnection"));

export { GetInfrastructureArgs, GetInfrastructureResult, GetInfrastructureOutputArgs } from "./getInfrastructure";
export const getInfrastructure: typeof import("./getInfrastructure").getInfrastructure = null as any;
export const getInfrastructureOutput: typeof import("./getInfrastructure").getInfrastructureOutput = null as any;
utilities.lazyLoad(exports, ["getInfrastructure","getInfrastructureOutput"], () => require("./getInfrastructure"));

export { GetInfrastructureOutputArgs, GetInfrastructureOutputResult, GetInfrastructureOutputOutputArgs } from "./getInfrastructureOutput";
export const getInfrastructureOutput: typeof import("./getInfrastructureOutput").getInfrastructureOutput = null as any;
export const getInfrastructureOutputOutput: typeof import("./getInfrastructureOutput").getInfrastructureOutputOutput = null as any;
utilities.lazyLoad(exports, ["getInfrastructureOutput","getInfrastructureOutputOutput"], () => require("./getInfrastructureOutput"));

export { GetNetworkProfileArgs, GetNetworkProfileResult, GetNetworkProfileOutputArgs } from "./getNetworkProfile";
export const getNetworkProfile: typeof import("./getNetworkProfile").getNetworkProfile = null as any;
export const getNetworkProfileOutput: typeof import("./getNetworkProfile").getNetworkProfileOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkProfile","getNetworkProfileOutput"], () => require("./getNetworkProfile"));

export { GetServerTypeArgs, GetServerTypeResult, GetServerTypeOutputArgs } from "./getServerType";
export const getServerType: typeof import("./getServerType").getServerType = null as any;
export const getServerTypeOutput: typeof import("./getServerType").getServerTypeOutput = null as any;
utilities.lazyLoad(exports, ["getServerType","getServerTypeOutput"], () => require("./getServerType"));

export { GetSubnetPoolArgs, GetSubnetPoolResult, GetSubnetPoolOutputArgs } from "./getSubnetPool";
export const getSubnetPool: typeof import("./getSubnetPool").getSubnetPool = null as any;
export const getSubnetPoolOutput: typeof import("./getSubnetPool").getSubnetPoolOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetPool","getSubnetPoolOutput"], () => require("./getSubnetPool"));

export { GetVolumeTemplateArgs, GetVolumeTemplateResult, GetVolumeTemplateOutputArgs } from "./getVolumeTemplate";
export const getVolumeTemplate: typeof import("./getVolumeTemplate").getVolumeTemplate = null as any;
export const getVolumeTemplateOutput: typeof import("./getVolumeTemplate").getVolumeTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVolumeTemplate","getVolumeTemplateOutput"], () => require("./getVolumeTemplate"));

export { GetWorkflowTaskArgs, GetWorkflowTaskResult, GetWorkflowTaskOutputArgs } from "./getWorkflowTask";
export const getWorkflowTask: typeof import("./getWorkflowTask").getWorkflowTask = null as any;
export const getWorkflowTaskOutput: typeof import("./getWorkflowTask").getWorkflowTaskOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowTask","getWorkflowTaskOutput"], () => require("./getWorkflowTask"));

export { InfrastructureDeployerArgs, InfrastructureDeployerState } from "./infrastructureDeployer";
export type InfrastructureDeployer = import("./infrastructureDeployer").InfrastructureDeployer;
export const InfrastructureDeployer: typeof import("./infrastructureDeployer").InfrastructureDeployer = null as any;
utilities.lazyLoad(exports, ["InfrastructureDeployer"], () => require("./infrastructureDeployer"));

export { InstanceArrayArgs, InstanceArrayState } from "./instanceArray";
export type InstanceArray = import("./instanceArray").InstanceArray;
export const InstanceArray: typeof import("./instanceArray").InstanceArray = null as any;
utilities.lazyLoad(exports, ["InstanceArray"], () => require("./instanceArray"));

export { KubernetesArgs, KubernetesState } from "./kubernetes";
export type Kubernetes = import("./kubernetes").Kubernetes;
export const Kubernetes: typeof import("./kubernetes").Kubernetes = null as any;
utilities.lazyLoad(exports, ["Kubernetes"], () => require("./kubernetes"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkProfileArgs, NetworkProfileState } from "./networkProfile";
export type NetworkProfile = import("./networkProfile").NetworkProfile;
export const NetworkProfile: typeof import("./networkProfile").NetworkProfile = null as any;
utilities.lazyLoad(exports, ["NetworkProfile"], () => require("./networkProfile"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SharedDriveArgs, SharedDriveState } from "./sharedDrive";
export type SharedDrive = import("./sharedDrive").SharedDrive;
export const SharedDrive: typeof import("./sharedDrive").SharedDrive = null as any;
utilities.lazyLoad(exports, ["SharedDrive"], () => require("./sharedDrive"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { VmwareVcfArgs, VmwareVcfState } from "./vmwareVcf";
export type VmwareVcf = import("./vmwareVcf").VmwareVcf;
export const VmwareVcf: typeof import("./vmwareVcf").VmwareVcf = null as any;
utilities.lazyLoad(exports, ["VmwareVcf"], () => require("./vmwareVcf"));

export { VmwareVsphereArgs, VmwareVsphereState } from "./vmwareVsphere";
export type VmwareVsphere = import("./vmwareVsphere").VmwareVsphere;
export const VmwareVsphere: typeof import("./vmwareVsphere").VmwareVsphere = null as any;
utilities.lazyLoad(exports, ["VmwareVsphere"], () => require("./vmwareVsphere"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "metalcloud:index/driveArray:DriveArray":
                return new DriveArray(name, <any>undefined, { urn })
            case "metalcloud:index/eksa:Eksa":
                return new Eksa(name, <any>undefined, { urn })
            case "metalcloud:index/firmwarePolicy:FirmwarePolicy":
                return new FirmwarePolicy(name, <any>undefined, { urn })
            case "metalcloud:index/infrastructureDeployer:InfrastructureDeployer":
                return new InfrastructureDeployer(name, <any>undefined, { urn })
            case "metalcloud:index/instanceArray:InstanceArray":
                return new InstanceArray(name, <any>undefined, { urn })
            case "metalcloud:index/kubernetes:Kubernetes":
                return new Kubernetes(name, <any>undefined, { urn })
            case "metalcloud:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "metalcloud:index/networkProfile:NetworkProfile":
                return new NetworkProfile(name, <any>undefined, { urn })
            case "metalcloud:index/sharedDrive:SharedDrive":
                return new SharedDrive(name, <any>undefined, { urn })
            case "metalcloud:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "metalcloud:index/vmwareVcf:VmwareVcf":
                return new VmwareVcf(name, <any>undefined, { urn })
            case "metalcloud:index/vmwareVsphere:VmwareVsphere":
                return new VmwareVsphere(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("metalcloud", "index/driveArray", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/eksa", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/firmwarePolicy", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/infrastructureDeployer", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/instanceArray", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/kubernetes", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/network", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/networkProfile", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/sharedDrive", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/subnet", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/vmwareVcf", _module)
pulumi.runtime.registerResourceModule("metalcloud", "index/vmwareVsphere", _module)
pulumi.runtime.registerResourcePackage("metalcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:metalcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
