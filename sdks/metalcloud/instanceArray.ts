// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InstanceArray extends pulumi.CustomResource {
    /**
     * Get an existing InstanceArray resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceArrayState, opts?: pulumi.CustomResourceOptions): InstanceArray {
        return new InstanceArray(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'metalcloud:index/instanceArray:InstanceArray';

    /**
     * Returns true if the given object is an instance of InstanceArray.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceArray {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceArray.__pulumiType;
    }

    public readonly clusterGroupRole!: pulumi.Output<string | undefined>;
    public readonly driveArrayIdBoot!: pulumi.Output<number | undefined>;
    public readonly firewallRules!: pulumi.Output<outputs.InstanceArrayFirewallRule[] | undefined>;
    public readonly infrastructureId!: pulumi.Output<number>;
    public readonly instanceArrayAdditionalWanIpv4Json!: pulumi.Output<string>;
    public readonly instanceArrayBootMethod!: pulumi.Output<string>;
    public readonly instanceArrayCustomVariables!: pulumi.Output<{[key: string]: string}>;
    public readonly instanceArrayDiskCount!: pulumi.Output<number>;
    public readonly instanceArrayDiskSizeMbytes!: pulumi.Output<number>;
    public readonly instanceArrayFirewallManaged!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly instanceArrayId!: pulumi.Output<number>;
    public readonly instanceArrayInstanceCount!: pulumi.Output<number | undefined>;
    public readonly instanceArrayLabel!: pulumi.Output<string>;
    public readonly instanceArrayProcessorCoreCount!: pulumi.Output<number>;
    public readonly instanceArrayProcessorCoreMhz!: pulumi.Output<number>;
    public readonly instanceArrayProcessorCount!: pulumi.Output<number>;
    public readonly instanceArrayRamGbytes!: pulumi.Output<number>;
    public readonly instanceCustomVariables!: pulumi.Output<outputs.InstanceArrayInstanceCustomVariable[] | undefined>;
    public readonly instanceServerTypes!: pulumi.Output<outputs.InstanceArrayInstanceServerType[] | undefined>;
    public readonly interfaces!: pulumi.Output<outputs.InstanceArrayInterface[] | undefined>;
    public readonly networkProfiles!: pulumi.Output<outputs.InstanceArrayNetworkProfile[] | undefined>;
    public readonly volumeTemplateId!: pulumi.Output<number | undefined>;

    /**
     * Create a InstanceArray resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArrayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArrayArgs | InstanceArrayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceArrayState | undefined;
            resourceInputs["clusterGroupRole"] = state ? state.clusterGroupRole : undefined;
            resourceInputs["driveArrayIdBoot"] = state ? state.driveArrayIdBoot : undefined;
            resourceInputs["firewallRules"] = state ? state.firewallRules : undefined;
            resourceInputs["infrastructureId"] = state ? state.infrastructureId : undefined;
            resourceInputs["instanceArrayAdditionalWanIpv4Json"] = state ? state.instanceArrayAdditionalWanIpv4Json : undefined;
            resourceInputs["instanceArrayBootMethod"] = state ? state.instanceArrayBootMethod : undefined;
            resourceInputs["instanceArrayCustomVariables"] = state ? state.instanceArrayCustomVariables : undefined;
            resourceInputs["instanceArrayDiskCount"] = state ? state.instanceArrayDiskCount : undefined;
            resourceInputs["instanceArrayDiskSizeMbytes"] = state ? state.instanceArrayDiskSizeMbytes : undefined;
            resourceInputs["instanceArrayFirewallManaged"] = state ? state.instanceArrayFirewallManaged : undefined;
            resourceInputs["instanceArrayId"] = state ? state.instanceArrayId : undefined;
            resourceInputs["instanceArrayInstanceCount"] = state ? state.instanceArrayInstanceCount : undefined;
            resourceInputs["instanceArrayLabel"] = state ? state.instanceArrayLabel : undefined;
            resourceInputs["instanceArrayProcessorCoreCount"] = state ? state.instanceArrayProcessorCoreCount : undefined;
            resourceInputs["instanceArrayProcessorCoreMhz"] = state ? state.instanceArrayProcessorCoreMhz : undefined;
            resourceInputs["instanceArrayProcessorCount"] = state ? state.instanceArrayProcessorCount : undefined;
            resourceInputs["instanceArrayRamGbytes"] = state ? state.instanceArrayRamGbytes : undefined;
            resourceInputs["instanceCustomVariables"] = state ? state.instanceCustomVariables : undefined;
            resourceInputs["instanceServerTypes"] = state ? state.instanceServerTypes : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["networkProfiles"] = state ? state.networkProfiles : undefined;
            resourceInputs["volumeTemplateId"] = state ? state.volumeTemplateId : undefined;
        } else {
            const args = argsOrState as InstanceArrayArgs | undefined;
            if ((!args || args.infrastructureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infrastructureId'");
            }
            resourceInputs["clusterGroupRole"] = args ? args.clusterGroupRole : undefined;
            resourceInputs["driveArrayIdBoot"] = args ? args.driveArrayIdBoot : undefined;
            resourceInputs["firewallRules"] = args ? args.firewallRules : undefined;
            resourceInputs["infrastructureId"] = args ? args.infrastructureId : undefined;
            resourceInputs["instanceArrayAdditionalWanIpv4Json"] = args ? args.instanceArrayAdditionalWanIpv4Json : undefined;
            resourceInputs["instanceArrayBootMethod"] = args ? args.instanceArrayBootMethod : undefined;
            resourceInputs["instanceArrayCustomVariables"] = args ? args.instanceArrayCustomVariables : undefined;
            resourceInputs["instanceArrayDiskCount"] = args ? args.instanceArrayDiskCount : undefined;
            resourceInputs["instanceArrayDiskSizeMbytes"] = args ? args.instanceArrayDiskSizeMbytes : undefined;
            resourceInputs["instanceArrayFirewallManaged"] = args ? args.instanceArrayFirewallManaged : undefined;
            resourceInputs["instanceArrayInstanceCount"] = args ? args.instanceArrayInstanceCount : undefined;
            resourceInputs["instanceArrayLabel"] = args ? args.instanceArrayLabel : undefined;
            resourceInputs["instanceArrayProcessorCoreCount"] = args ? args.instanceArrayProcessorCoreCount : undefined;
            resourceInputs["instanceArrayProcessorCoreMhz"] = args ? args.instanceArrayProcessorCoreMhz : undefined;
            resourceInputs["instanceArrayProcessorCount"] = args ? args.instanceArrayProcessorCount : undefined;
            resourceInputs["instanceArrayRamGbytes"] = args ? args.instanceArrayRamGbytes : undefined;
            resourceInputs["instanceCustomVariables"] = args ? args.instanceCustomVariables : undefined;
            resourceInputs["instanceServerTypes"] = args ? args.instanceServerTypes : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["networkProfiles"] = args ? args.networkProfiles : undefined;
            resourceInputs["volumeTemplateId"] = args ? args.volumeTemplateId : undefined;
            resourceInputs["instanceArrayId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceArray.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InstanceArray resources.
 */
export interface InstanceArrayState {
    clusterGroupRole?: pulumi.Input<string>;
    driveArrayIdBoot?: pulumi.Input<number>;
    firewallRules?: pulumi.Input<pulumi.Input<inputs.InstanceArrayFirewallRule>[]>;
    infrastructureId?: pulumi.Input<number>;
    instanceArrayAdditionalWanIpv4Json?: pulumi.Input<string>;
    instanceArrayBootMethod?: pulumi.Input<string>;
    instanceArrayCustomVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    instanceArrayDiskCount?: pulumi.Input<number>;
    instanceArrayDiskSizeMbytes?: pulumi.Input<number>;
    instanceArrayFirewallManaged?: pulumi.Input<boolean>;
    instanceArrayId?: pulumi.Input<number>;
    instanceArrayInstanceCount?: pulumi.Input<number>;
    instanceArrayLabel?: pulumi.Input<string>;
    instanceArrayProcessorCoreCount?: pulumi.Input<number>;
    instanceArrayProcessorCoreMhz?: pulumi.Input<number>;
    instanceArrayProcessorCount?: pulumi.Input<number>;
    instanceArrayRamGbytes?: pulumi.Input<number>;
    instanceCustomVariables?: pulumi.Input<pulumi.Input<inputs.InstanceArrayInstanceCustomVariable>[]>;
    instanceServerTypes?: pulumi.Input<pulumi.Input<inputs.InstanceArrayInstanceServerType>[]>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.InstanceArrayInterface>[]>;
    networkProfiles?: pulumi.Input<pulumi.Input<inputs.InstanceArrayNetworkProfile>[]>;
    volumeTemplateId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a InstanceArray resource.
 */
export interface InstanceArrayArgs {
    clusterGroupRole?: pulumi.Input<string>;
    driveArrayIdBoot?: pulumi.Input<number>;
    firewallRules?: pulumi.Input<pulumi.Input<inputs.InstanceArrayFirewallRule>[]>;
    infrastructureId: pulumi.Input<number>;
    instanceArrayAdditionalWanIpv4Json?: pulumi.Input<string>;
    instanceArrayBootMethod?: pulumi.Input<string>;
    instanceArrayCustomVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    instanceArrayDiskCount?: pulumi.Input<number>;
    instanceArrayDiskSizeMbytes?: pulumi.Input<number>;
    instanceArrayFirewallManaged?: pulumi.Input<boolean>;
    instanceArrayInstanceCount?: pulumi.Input<number>;
    instanceArrayLabel?: pulumi.Input<string>;
    instanceArrayProcessorCoreCount?: pulumi.Input<number>;
    instanceArrayProcessorCoreMhz?: pulumi.Input<number>;
    instanceArrayProcessorCount?: pulumi.Input<number>;
    instanceArrayRamGbytes?: pulumi.Input<number>;
    instanceCustomVariables?: pulumi.Input<pulumi.Input<inputs.InstanceArrayInstanceCustomVariable>[]>;
    instanceServerTypes?: pulumi.Input<pulumi.Input<inputs.InstanceArrayInstanceServerType>[]>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.InstanceArrayInterface>[]>;
    networkProfiles?: pulumi.Input<pulumi.Input<inputs.InstanceArrayNetworkProfile>[]>;
    volumeTemplateId?: pulumi.Input<number>;
}
