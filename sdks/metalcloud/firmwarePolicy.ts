// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirmwarePolicy extends pulumi.CustomResource {
    /**
     * Get an existing FirmwarePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirmwarePolicyState, opts?: pulumi.CustomResourceOptions): FirmwarePolicy {
        return new FirmwarePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'metalcloud:index/firmwarePolicy:FirmwarePolicy';

    /**
     * Returns true if the given object is an instance of FirmwarePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirmwarePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirmwarePolicy.__pulumiType;
    }

    public readonly instanceArrayLists!: pulumi.Output<number[] | undefined>;
    public readonly serverFirmwareUpgradePolicyAction!: pulumi.Output<string>;
    public readonly serverFirmwareUpgradePolicyId!: pulumi.Output<number>;
    public readonly serverFirmwareUpgradePolicyLabel!: pulumi.Output<string>;
    public readonly serverFirmwareUpgradePolicyRules!: pulumi.Output<outputs.FirmwarePolicyServerFirmwareUpgradePolicyRule[] | undefined>;

    /**
     * Create a FirmwarePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirmwarePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirmwarePolicyArgs | FirmwarePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirmwarePolicyState | undefined;
            resourceInputs["instanceArrayLists"] = state ? state.instanceArrayLists : undefined;
            resourceInputs["serverFirmwareUpgradePolicyAction"] = state ? state.serverFirmwareUpgradePolicyAction : undefined;
            resourceInputs["serverFirmwareUpgradePolicyId"] = state ? state.serverFirmwareUpgradePolicyId : undefined;
            resourceInputs["serverFirmwareUpgradePolicyLabel"] = state ? state.serverFirmwareUpgradePolicyLabel : undefined;
            resourceInputs["serverFirmwareUpgradePolicyRules"] = state ? state.serverFirmwareUpgradePolicyRules : undefined;
        } else {
            const args = argsOrState as FirmwarePolicyArgs | undefined;
            if ((!args || args.serverFirmwareUpgradePolicyLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverFirmwareUpgradePolicyLabel'");
            }
            resourceInputs["instanceArrayLists"] = args ? args.instanceArrayLists : undefined;
            resourceInputs["serverFirmwareUpgradePolicyAction"] = args ? args.serverFirmwareUpgradePolicyAction : undefined;
            resourceInputs["serverFirmwareUpgradePolicyId"] = args ? args.serverFirmwareUpgradePolicyId : undefined;
            resourceInputs["serverFirmwareUpgradePolicyLabel"] = args ? args.serverFirmwareUpgradePolicyLabel : undefined;
            resourceInputs["serverFirmwareUpgradePolicyRules"] = args ? args.serverFirmwareUpgradePolicyRules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirmwarePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirmwarePolicy resources.
 */
export interface FirmwarePolicyState {
    instanceArrayLists?: pulumi.Input<pulumi.Input<number>[]>;
    serverFirmwareUpgradePolicyAction?: pulumi.Input<string>;
    serverFirmwareUpgradePolicyId?: pulumi.Input<number>;
    serverFirmwareUpgradePolicyLabel?: pulumi.Input<string>;
    serverFirmwareUpgradePolicyRules?: pulumi.Input<pulumi.Input<inputs.FirmwarePolicyServerFirmwareUpgradePolicyRule>[]>;
}

/**
 * The set of arguments for constructing a FirmwarePolicy resource.
 */
export interface FirmwarePolicyArgs {
    instanceArrayLists?: pulumi.Input<pulumi.Input<number>[]>;
    serverFirmwareUpgradePolicyAction?: pulumi.Input<string>;
    serverFirmwareUpgradePolicyId?: pulumi.Input<number>;
    serverFirmwareUpgradePolicyLabel: pulumi.Input<string>;
    serverFirmwareUpgradePolicyRules?: pulumi.Input<pulumi.Input<inputs.FirmwarePolicyServerFirmwareUpgradePolicyRule>[]>;
}
