// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'metalcloud:index/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    public readonly clusterId!: pulumi.Output<number | undefined>;
    public readonly infrastructureId!: pulumi.Output<number>;
    public readonly networkId!: pulumi.Output<number>;
    public readonly subnetAutomaticAllocation!: pulumi.Output<boolean | undefined>;
    public readonly subnetGatewayHumanReadable!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<number>;
    public readonly subnetIpRangeIpCount!: pulumi.Output<number | undefined>;
    public readonly subnetIsIpRange!: pulumi.Output<boolean | undefined>;
    public readonly subnetLabel!: pulumi.Output<string>;
    public readonly subnetNetmaskHumanReadable!: pulumi.Output<string>;
    public readonly subnetOverrideVlanAutoAllocationIndex!: pulumi.Output<number | undefined>;
    public readonly subnetOverrideVlanId!: pulumi.Output<number | undefined>;
    public readonly subnetPoolId!: pulumi.Output<number | undefined>;
    public readonly subnetPrefixSize!: pulumi.Output<number | undefined>;
    public readonly subnetRangeEndHumanReadable!: pulumi.Output<string>;
    public readonly subnetRangeStartHumanReadable!: pulumi.Output<string>;
    public readonly subnetType!: pulumi.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["infrastructureId"] = state ? state.infrastructureId : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["subnetAutomaticAllocation"] = state ? state.subnetAutomaticAllocation : undefined;
            resourceInputs["subnetGatewayHumanReadable"] = state ? state.subnetGatewayHumanReadable : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["subnetIpRangeIpCount"] = state ? state.subnetIpRangeIpCount : undefined;
            resourceInputs["subnetIsIpRange"] = state ? state.subnetIsIpRange : undefined;
            resourceInputs["subnetLabel"] = state ? state.subnetLabel : undefined;
            resourceInputs["subnetNetmaskHumanReadable"] = state ? state.subnetNetmaskHumanReadable : undefined;
            resourceInputs["subnetOverrideVlanAutoAllocationIndex"] = state ? state.subnetOverrideVlanAutoAllocationIndex : undefined;
            resourceInputs["subnetOverrideVlanId"] = state ? state.subnetOverrideVlanId : undefined;
            resourceInputs["subnetPoolId"] = state ? state.subnetPoolId : undefined;
            resourceInputs["subnetPrefixSize"] = state ? state.subnetPrefixSize : undefined;
            resourceInputs["subnetRangeEndHumanReadable"] = state ? state.subnetRangeEndHumanReadable : undefined;
            resourceInputs["subnetRangeStartHumanReadable"] = state ? state.subnetRangeStartHumanReadable : undefined;
            resourceInputs["subnetType"] = state ? state.subnetType : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if ((!args || args.infrastructureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infrastructureId'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.subnetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetType'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["infrastructureId"] = args ? args.infrastructureId : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["subnetAutomaticAllocation"] = args ? args.subnetAutomaticAllocation : undefined;
            resourceInputs["subnetGatewayHumanReadable"] = args ? args.subnetGatewayHumanReadable : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["subnetIpRangeIpCount"] = args ? args.subnetIpRangeIpCount : undefined;
            resourceInputs["subnetIsIpRange"] = args ? args.subnetIsIpRange : undefined;
            resourceInputs["subnetLabel"] = args ? args.subnetLabel : undefined;
            resourceInputs["subnetNetmaskHumanReadable"] = args ? args.subnetNetmaskHumanReadable : undefined;
            resourceInputs["subnetOverrideVlanAutoAllocationIndex"] = args ? args.subnetOverrideVlanAutoAllocationIndex : undefined;
            resourceInputs["subnetOverrideVlanId"] = args ? args.subnetOverrideVlanId : undefined;
            resourceInputs["subnetPoolId"] = args ? args.subnetPoolId : undefined;
            resourceInputs["subnetPrefixSize"] = args ? args.subnetPrefixSize : undefined;
            resourceInputs["subnetRangeEndHumanReadable"] = args ? args.subnetRangeEndHumanReadable : undefined;
            resourceInputs["subnetRangeStartHumanReadable"] = args ? args.subnetRangeStartHumanReadable : undefined;
            resourceInputs["subnetType"] = args ? args.subnetType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    clusterId?: pulumi.Input<number>;
    infrastructureId?: pulumi.Input<number>;
    networkId?: pulumi.Input<number>;
    subnetAutomaticAllocation?: pulumi.Input<boolean>;
    subnetGatewayHumanReadable?: pulumi.Input<string>;
    subnetId?: pulumi.Input<number>;
    subnetIpRangeIpCount?: pulumi.Input<number>;
    subnetIsIpRange?: pulumi.Input<boolean>;
    subnetLabel?: pulumi.Input<string>;
    subnetNetmaskHumanReadable?: pulumi.Input<string>;
    subnetOverrideVlanAutoAllocationIndex?: pulumi.Input<number>;
    subnetOverrideVlanId?: pulumi.Input<number>;
    subnetPoolId?: pulumi.Input<number>;
    subnetPrefixSize?: pulumi.Input<number>;
    subnetRangeEndHumanReadable?: pulumi.Input<string>;
    subnetRangeStartHumanReadable?: pulumi.Input<string>;
    subnetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    clusterId?: pulumi.Input<number>;
    infrastructureId: pulumi.Input<number>;
    networkId: pulumi.Input<number>;
    subnetAutomaticAllocation?: pulumi.Input<boolean>;
    subnetGatewayHumanReadable?: pulumi.Input<string>;
    subnetId?: pulumi.Input<number>;
    subnetIpRangeIpCount?: pulumi.Input<number>;
    subnetIsIpRange?: pulumi.Input<boolean>;
    subnetLabel?: pulumi.Input<string>;
    subnetNetmaskHumanReadable?: pulumi.Input<string>;
    subnetOverrideVlanAutoAllocationIndex?: pulumi.Input<number>;
    subnetOverrideVlanId?: pulumi.Input<number>;
    subnetPoolId?: pulumi.Input<number>;
    subnetPrefixSize?: pulumi.Input<number>;
    subnetRangeEndHumanReadable?: pulumi.Input<string>;
    subnetRangeStartHumanReadable?: pulumi.Input<string>;
    subnetType: pulumi.Input<string>;
}
