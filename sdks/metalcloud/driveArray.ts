// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DriveArray extends pulumi.CustomResource {
    /**
     * Get an existing DriveArray resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DriveArrayState, opts?: pulumi.CustomResourceOptions): DriveArray {
        return new DriveArray(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'metalcloud:index/driveArray:DriveArray';

    /**
     * Returns true if the given object is an instance of DriveArray.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DriveArray {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DriveArray.__pulumiType;
    }

    public readonly driveArrayAllocationAffinity!: pulumi.Output<string | undefined>;
    public /*out*/ readonly driveArrayId!: pulumi.Output<number>;
    public readonly driveArrayIoLimitPolicy!: pulumi.Output<string | undefined>;
    public readonly driveArrayLabel!: pulumi.Output<string>;
    public readonly driveArrayStorageType!: pulumi.Output<string>;
    public readonly driveSizeMbytesDefault!: pulumi.Output<number | undefined>;
    public readonly infrastructureId!: pulumi.Output<number>;
    public readonly instanceArrayId!: pulumi.Output<number | undefined>;
    public readonly volumeTemplateId!: pulumi.Output<number>;

    /**
     * Create a DriveArray resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DriveArrayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DriveArrayArgs | DriveArrayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DriveArrayState | undefined;
            resourceInputs["driveArrayAllocationAffinity"] = state ? state.driveArrayAllocationAffinity : undefined;
            resourceInputs["driveArrayId"] = state ? state.driveArrayId : undefined;
            resourceInputs["driveArrayIoLimitPolicy"] = state ? state.driveArrayIoLimitPolicy : undefined;
            resourceInputs["driveArrayLabel"] = state ? state.driveArrayLabel : undefined;
            resourceInputs["driveArrayStorageType"] = state ? state.driveArrayStorageType : undefined;
            resourceInputs["driveSizeMbytesDefault"] = state ? state.driveSizeMbytesDefault : undefined;
            resourceInputs["infrastructureId"] = state ? state.infrastructureId : undefined;
            resourceInputs["instanceArrayId"] = state ? state.instanceArrayId : undefined;
            resourceInputs["volumeTemplateId"] = state ? state.volumeTemplateId : undefined;
        } else {
            const args = argsOrState as DriveArrayArgs | undefined;
            if ((!args || args.infrastructureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infrastructureId'");
            }
            resourceInputs["driveArrayAllocationAffinity"] = args ? args.driveArrayAllocationAffinity : undefined;
            resourceInputs["driveArrayIoLimitPolicy"] = args ? args.driveArrayIoLimitPolicy : undefined;
            resourceInputs["driveArrayLabel"] = args ? args.driveArrayLabel : undefined;
            resourceInputs["driveArrayStorageType"] = args ? args.driveArrayStorageType : undefined;
            resourceInputs["driveSizeMbytesDefault"] = args ? args.driveSizeMbytesDefault : undefined;
            resourceInputs["infrastructureId"] = args ? args.infrastructureId : undefined;
            resourceInputs["instanceArrayId"] = args ? args.instanceArrayId : undefined;
            resourceInputs["volumeTemplateId"] = args ? args.volumeTemplateId : undefined;
            resourceInputs["driveArrayId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DriveArray.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DriveArray resources.
 */
export interface DriveArrayState {
    driveArrayAllocationAffinity?: pulumi.Input<string>;
    driveArrayId?: pulumi.Input<number>;
    driveArrayIoLimitPolicy?: pulumi.Input<string>;
    driveArrayLabel?: pulumi.Input<string>;
    driveArrayStorageType?: pulumi.Input<string>;
    driveSizeMbytesDefault?: pulumi.Input<number>;
    infrastructureId?: pulumi.Input<number>;
    instanceArrayId?: pulumi.Input<number>;
    volumeTemplateId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DriveArray resource.
 */
export interface DriveArrayArgs {
    driveArrayAllocationAffinity?: pulumi.Input<string>;
    driveArrayIoLimitPolicy?: pulumi.Input<string>;
    driveArrayLabel?: pulumi.Input<string>;
    driveArrayStorageType?: pulumi.Input<string>;
    driveSizeMbytesDefault?: pulumi.Input<number>;
    infrastructureId: pulumi.Input<number>;
    instanceArrayId?: pulumi.Input<number>;
    volumeTemplateId?: pulumi.Input<number>;
}
