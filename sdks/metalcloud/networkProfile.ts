// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkProfile extends pulumi.CustomResource {
    /**
     * Get an existing NetworkProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkProfileState, opts?: pulumi.CustomResourceOptions): NetworkProfile {
        return new NetworkProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'metalcloud:index/networkProfile:NetworkProfile';

    /**
     * Returns true if the given object is an instance of NetworkProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkProfile.__pulumiType;
    }

    public readonly datacenterName!: pulumi.Output<string>;
    public readonly networkProfileId!: pulumi.Output<number>;
    public readonly networkProfileLabel!: pulumi.Output<string>;
    public readonly networkProfileVlans!: pulumi.Output<outputs.NetworkProfileNetworkProfileVlan[]>;
    public readonly networkType!: pulumi.Output<string>;

    /**
     * Create a NetworkProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkProfileArgs | NetworkProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkProfileState | undefined;
            resourceInputs["datacenterName"] = state ? state.datacenterName : undefined;
            resourceInputs["networkProfileId"] = state ? state.networkProfileId : undefined;
            resourceInputs["networkProfileLabel"] = state ? state.networkProfileLabel : undefined;
            resourceInputs["networkProfileVlans"] = state ? state.networkProfileVlans : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
        } else {
            const args = argsOrState as NetworkProfileArgs | undefined;
            if ((!args || args.datacenterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterName'");
            }
            if ((!args || args.networkProfileLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkProfileLabel'");
            }
            if ((!args || args.networkProfileVlans === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkProfileVlans'");
            }
            if ((!args || args.networkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkType'");
            }
            resourceInputs["datacenterName"] = args ? args.datacenterName : undefined;
            resourceInputs["networkProfileId"] = args ? args.networkProfileId : undefined;
            resourceInputs["networkProfileLabel"] = args ? args.networkProfileLabel : undefined;
            resourceInputs["networkProfileVlans"] = args ? args.networkProfileVlans : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkProfile resources.
 */
export interface NetworkProfileState {
    datacenterName?: pulumi.Input<string>;
    networkProfileId?: pulumi.Input<number>;
    networkProfileLabel?: pulumi.Input<string>;
    networkProfileVlans?: pulumi.Input<pulumi.Input<inputs.NetworkProfileNetworkProfileVlan>[]>;
    networkType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkProfile resource.
 */
export interface NetworkProfileArgs {
    datacenterName: pulumi.Input<string>;
    networkProfileId?: pulumi.Input<number>;
    networkProfileLabel: pulumi.Input<string>;
    networkProfileVlans: pulumi.Input<pulumi.Input<inputs.NetworkProfileNetworkProfileVlan>[]>;
    networkType: pulumi.Input<string>;
}
