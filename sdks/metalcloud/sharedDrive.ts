// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SharedDrive extends pulumi.CustomResource {
    /**
     * Get an existing SharedDrive resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedDriveState, opts?: pulumi.CustomResourceOptions): SharedDrive {
        return new SharedDrive(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'metalcloud:index/sharedDrive:SharedDrive';

    /**
     * Returns true if the given object is an instance of SharedDrive.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SharedDrive {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedDrive.__pulumiType;
    }

    public readonly infrastructureId!: pulumi.Output<number>;
    public readonly sharedDriveAllocationAffinity!: pulumi.Output<string | undefined>;
    /**
     * List of instance array IDs to which to attach this shared drive
     */
    public readonly sharedDriveAttachedInstanceArrays!: pulumi.Output<number[] | undefined>;
    public readonly sharedDriveId!: pulumi.Output<number>;
    public readonly sharedDriveIoLimitPolicy!: pulumi.Output<string | undefined>;
    public readonly sharedDriveLabel!: pulumi.Output<string>;
    public readonly sharedDriveSizeMbytes!: pulumi.Output<number | undefined>;
    public readonly sharedDriveStorageType!: pulumi.Output<string>;

    /**
     * Create a SharedDrive resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedDriveArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedDriveArgs | SharedDriveState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SharedDriveState | undefined;
            resourceInputs["infrastructureId"] = state ? state.infrastructureId : undefined;
            resourceInputs["sharedDriveAllocationAffinity"] = state ? state.sharedDriveAllocationAffinity : undefined;
            resourceInputs["sharedDriveAttachedInstanceArrays"] = state ? state.sharedDriveAttachedInstanceArrays : undefined;
            resourceInputs["sharedDriveId"] = state ? state.sharedDriveId : undefined;
            resourceInputs["sharedDriveIoLimitPolicy"] = state ? state.sharedDriveIoLimitPolicy : undefined;
            resourceInputs["sharedDriveLabel"] = state ? state.sharedDriveLabel : undefined;
            resourceInputs["sharedDriveSizeMbytes"] = state ? state.sharedDriveSizeMbytes : undefined;
            resourceInputs["sharedDriveStorageType"] = state ? state.sharedDriveStorageType : undefined;
        } else {
            const args = argsOrState as SharedDriveArgs | undefined;
            if ((!args || args.infrastructureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infrastructureId'");
            }
            resourceInputs["infrastructureId"] = args ? args.infrastructureId : undefined;
            resourceInputs["sharedDriveAllocationAffinity"] = args ? args.sharedDriveAllocationAffinity : undefined;
            resourceInputs["sharedDriveAttachedInstanceArrays"] = args ? args.sharedDriveAttachedInstanceArrays : undefined;
            resourceInputs["sharedDriveId"] = args ? args.sharedDriveId : undefined;
            resourceInputs["sharedDriveIoLimitPolicy"] = args ? args.sharedDriveIoLimitPolicy : undefined;
            resourceInputs["sharedDriveLabel"] = args ? args.sharedDriveLabel : undefined;
            resourceInputs["sharedDriveSizeMbytes"] = args ? args.sharedDriveSizeMbytes : undefined;
            resourceInputs["sharedDriveStorageType"] = args ? args.sharedDriveStorageType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SharedDrive.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SharedDrive resources.
 */
export interface SharedDriveState {
    infrastructureId?: pulumi.Input<number>;
    sharedDriveAllocationAffinity?: pulumi.Input<string>;
    /**
     * List of instance array IDs to which to attach this shared drive
     */
    sharedDriveAttachedInstanceArrays?: pulumi.Input<pulumi.Input<number>[]>;
    sharedDriveId?: pulumi.Input<number>;
    sharedDriveIoLimitPolicy?: pulumi.Input<string>;
    sharedDriveLabel?: pulumi.Input<string>;
    sharedDriveSizeMbytes?: pulumi.Input<number>;
    sharedDriveStorageType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SharedDrive resource.
 */
export interface SharedDriveArgs {
    infrastructureId: pulumi.Input<number>;
    sharedDriveAllocationAffinity?: pulumi.Input<string>;
    /**
     * List of instance array IDs to which to attach this shared drive
     */
    sharedDriveAttachedInstanceArrays?: pulumi.Input<pulumi.Input<number>[]>;
    sharedDriveId?: pulumi.Input<number>;
    sharedDriveIoLimitPolicy?: pulumi.Input<string>;
    sharedDriveLabel?: pulumi.Input<string>;
    sharedDriveSizeMbytes?: pulumi.Input<number>;
    sharedDriveStorageType?: pulumi.Input<string>;
}
