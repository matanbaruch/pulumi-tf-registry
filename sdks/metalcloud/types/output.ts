// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface EksaInstanceArray {
    clusterGroupRole?: string;
    driveArrayIdBoot?: number;
    firewallRules?: outputs.EksaInstanceArrayFirewallRule[];
    infrastructureId: number;
    instanceArrayAdditionalWanIpv4Json: string;
    instanceArrayBootMethod: string;
    instanceArrayCustomVariables: {[key: string]: string};
    instanceArrayDiskCount: number;
    instanceArrayDiskSizeMbytes: number;
    instanceArrayFirewallManaged?: boolean;
    instanceArrayId: number;
    instanceArrayInstanceCount?: number;
    instanceArrayLabel: string;
    instanceArrayProcessorCoreCount: number;
    instanceArrayProcessorCoreMhz: number;
    instanceArrayProcessorCount: number;
    instanceArrayRamGbytes: number;
    instanceCustomVariables?: outputs.EksaInstanceArrayInstanceCustomVariable[];
    instanceServerTypes?: outputs.EksaInstanceArrayInstanceServerType[];
    interfaces?: outputs.EksaInstanceArrayInterface[];
    networkProfiles?: outputs.EksaInstanceArrayNetworkProfile[];
    volumeTemplateId?: number;
}

export interface EksaInstanceArrayFirewallRule {
    firewallRuleDescription?: string;
    firewallRuleDestinationIpAddressRangeEnd?: string;
    firewallRuleDestinationIpAddressRangeStart?: string;
    firewallRuleEnabled?: boolean;
    firewallRuleIpAddressType?: string;
    firewallRulePortRangeEnd?: number;
    firewallRulePortRangeStart?: number;
    firewallRuleProtocol?: string;
    firewallRuleSourceIpAddressRangeEnd?: string;
    firewallRuleSourceIpAddressRangeStart?: string;
}

export interface EksaInstanceArrayInstanceCustomVariable {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface EksaInstanceArrayInstanceServerType {
    instanceIndex: number;
    serverTypeId: number;
}

export interface EksaInstanceArrayInterface {
    interfaceIndex: number;
    networkId: number;
}

export interface EksaInstanceArrayNetworkProfile {
    networkId: number;
    networkProfileId?: number;
}

export interface EksaInstanceArrayNetworkProfileControlPlane {
    networkId: number;
    networkProfileId?: number;
}

export interface EksaInstanceArrayNetworkProfileEksaMgmt {
    networkId: number;
    networkProfileId?: number;
}

export interface EksaInstanceArrayNetworkProfileWorker {
    networkId: number;
    networkProfileId?: number;
}

export interface EksaInstanceCustomVariablesControlPlane {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface EksaInstanceCustomVariablesEksaMgmt {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface EksaInstanceCustomVariablesWorker {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface EksaInstanceServerTypeControlPlane {
    instanceIndex: number;
    serverTypeId: number;
}

export interface EksaInstanceServerTypeEksaMgmt {
    instanceIndex: number;
    serverTypeId: number;
}

export interface EksaInstanceServerTypeWorker {
    instanceIndex: number;
    serverTypeId: number;
}

export interface EksaInterfaceControlPlane {
    interfaceIndex: number;
    networkId: number;
}

export interface EksaInterfaceEksaMgmt {
    interfaceIndex: number;
    networkId: number;
}

export interface EksaInterfaceWorker {
    interfaceIndex: number;
    networkId: number;
}

export interface FirmwarePolicyServerFirmwareUpgradePolicyRule {
    operation: string;
    property: string;
    value: string;
}

export interface InfrastructureDeployerServerAllocationPolicy {
    /**
     * Server allocation policy
     */
    allocationPolicies?: outputs.InfrastructureDeployerServerAllocationPolicyAllocationPolicy[];
    /**
     * Instance_array ID
     */
    instanceArrayId: number;
}

export interface InfrastructureDeployerServerAllocationPolicyAllocationPolicy {
    /**
     * Count of servers of this server type.
     */
    serverCount: number;
    /**
     * List of server IDs to associate with this instance array on this server type id.
     */
    serverIds?: number[];
    /**
     * Server type to allocate to instance array.
     */
    serverTypeId: number;
}

export interface InfrastructureDeployerTimeouts {
    create?: string;
    update?: string;
}

export interface InfrastructureDeployerWorkflowTask {
    runLevel: number;
    stageDefinitionId: number;
    /**
     * Must be one of post_deploy or pre_deploy
     */
    stageRunGroup: string;
}

export interface InstanceArrayFirewallRule {
    firewallRuleDescription?: string;
    firewallRuleDestinationIpAddressRangeEnd?: string;
    firewallRuleDestinationIpAddressRangeStart?: string;
    firewallRuleEnabled?: boolean;
    firewallRuleIpAddressType?: string;
    firewallRulePortRangeEnd?: number;
    firewallRulePortRangeStart?: number;
    firewallRuleProtocol?: string;
    firewallRuleSourceIpAddressRangeEnd?: string;
    firewallRuleSourceIpAddressRangeStart?: string;
}

export interface InstanceArrayInstanceCustomVariable {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface InstanceArrayInstanceServerType {
    instanceIndex: number;
    serverTypeId: number;
}

export interface InstanceArrayInterface {
    interfaceIndex: number;
    networkId: number;
}

export interface InstanceArrayNetworkProfile {
    networkId: number;
    networkProfileId?: number;
}

export interface KubernetesInstanceArray {
    clusterGroupRole?: string;
    driveArrayIdBoot?: number;
    firewallRules?: outputs.KubernetesInstanceArrayFirewallRule[];
    infrastructureId: number;
    instanceArrayAdditionalWanIpv4Json: string;
    instanceArrayBootMethod: string;
    instanceArrayCustomVariables: {[key: string]: string};
    instanceArrayDiskCount: number;
    instanceArrayDiskSizeMbytes: number;
    instanceArrayFirewallManaged?: boolean;
    instanceArrayId: number;
    instanceArrayInstanceCount?: number;
    instanceArrayLabel: string;
    instanceArrayProcessorCoreCount: number;
    instanceArrayProcessorCoreMhz: number;
    instanceArrayProcessorCount: number;
    instanceArrayRamGbytes: number;
    instanceCustomVariables?: outputs.KubernetesInstanceArrayInstanceCustomVariable[];
    instanceServerTypes?: outputs.KubernetesInstanceArrayInstanceServerType[];
    interfaces?: outputs.KubernetesInstanceArrayInterface[];
    networkProfiles?: outputs.KubernetesInstanceArrayNetworkProfile[];
    volumeTemplateId?: number;
}

export interface KubernetesInstanceArrayFirewallRule {
    firewallRuleDescription?: string;
    firewallRuleDestinationIpAddressRangeEnd?: string;
    firewallRuleDestinationIpAddressRangeStart?: string;
    firewallRuleEnabled?: boolean;
    firewallRuleIpAddressType?: string;
    firewallRulePortRangeEnd?: number;
    firewallRulePortRangeStart?: number;
    firewallRuleProtocol?: string;
    firewallRuleSourceIpAddressRangeEnd?: string;
    firewallRuleSourceIpAddressRangeStart?: string;
}

export interface KubernetesInstanceArrayInstanceCustomVariable {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface KubernetesInstanceArrayInstanceServerType {
    instanceIndex: number;
    serverTypeId: number;
}

export interface KubernetesInstanceArrayInterface {
    interfaceIndex: number;
    networkId: number;
}

export interface KubernetesInstanceArrayNetworkProfile {
    networkId: number;
    networkProfileId?: number;
}

export interface KubernetesInstanceArrayNetworkProfileMaster {
    networkId: number;
    networkProfileId?: number;
}

export interface KubernetesInstanceArrayNetworkProfileWorker {
    networkId: number;
    networkProfileId?: number;
}

export interface KubernetesInstanceCustomVariablesMaster {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface KubernetesInstanceCustomVariablesWorker {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface KubernetesInstanceServerTypeMaster {
    instanceIndex: number;
    serverTypeId: number;
}

export interface KubernetesInstanceServerTypeWorker {
    instanceIndex: number;
    serverTypeId: number;
}

export interface KubernetesInterfaceMaster {
    interfaceIndex: number;
    networkId: number;
}

export interface KubernetesInterfaceWorker {
    interfaceIndex: number;
    networkId: number;
}

export interface NetworkProfileNetworkProfileVlan {
    externalConnectionIds?: number[];
    portMode: string;
    provisionSubnetGateways?: boolean;
    provisionVxlan?: boolean;
    subnetPoolIds?: number[];
    vlanId: string;
}

export interface VmwareVcfInstanceArray {
    clusterGroupRole?: string;
    driveArrayIdBoot?: number;
    firewallRules?: outputs.VmwareVcfInstanceArrayFirewallRule[];
    infrastructureId: number;
    instanceArrayAdditionalWanIpv4Json: string;
    instanceArrayBootMethod: string;
    instanceArrayCustomVariables: {[key: string]: string};
    instanceArrayDiskCount: number;
    instanceArrayDiskSizeMbytes: number;
    instanceArrayFirewallManaged?: boolean;
    instanceArrayId: number;
    instanceArrayInstanceCount?: number;
    instanceArrayLabel: string;
    instanceArrayProcessorCoreCount: number;
    instanceArrayProcessorCoreMhz: number;
    instanceArrayProcessorCount: number;
    instanceArrayRamGbytes: number;
    instanceCustomVariables?: outputs.VmwareVcfInstanceArrayInstanceCustomVariable[];
    instanceServerTypes?: outputs.VmwareVcfInstanceArrayInstanceServerType[];
    interfaces?: outputs.VmwareVcfInstanceArrayInterface[];
    networkProfiles?: outputs.VmwareVcfInstanceArrayNetworkProfile[];
    volumeTemplateId?: number;
}

export interface VmwareVcfInstanceArrayFirewallRule {
    firewallRuleDescription?: string;
    firewallRuleDestinationIpAddressRangeEnd?: string;
    firewallRuleDestinationIpAddressRangeStart?: string;
    firewallRuleEnabled?: boolean;
    firewallRuleIpAddressType?: string;
    firewallRulePortRangeEnd?: number;
    firewallRulePortRangeStart?: number;
    firewallRuleProtocol?: string;
    firewallRuleSourceIpAddressRangeEnd?: string;
    firewallRuleSourceIpAddressRangeStart?: string;
}

export interface VmwareVcfInstanceArrayInstanceCustomVariable {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface VmwareVcfInstanceArrayInstanceServerType {
    instanceIndex: number;
    serverTypeId: number;
}

export interface VmwareVcfInstanceArrayInterface {
    interfaceIndex: number;
    networkId: number;
}

export interface VmwareVcfInstanceArrayNetworkProfile {
    networkId: number;
    networkProfileId?: number;
}

export interface VmwareVcfInstanceArrayNetworkProfileMgmt {
    networkId: number;
    networkProfileId?: number;
}

export interface VmwareVcfInstanceArrayNetworkProfileWorkload {
    networkId: number;
    networkProfileId?: number;
}

export interface VmwareVcfInstanceCustomVariablesMgmt {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface VmwareVcfInstanceCustomVariablesWorkload {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface VmwareVcfInstanceServerTypeMgmt {
    instanceIndex: number;
    serverTypeId: number;
}

export interface VmwareVcfInstanceServerTypeWorkload {
    instanceIndex: number;
    serverTypeId: number;
}

export interface VmwareVcfInterfaceMgmt {
    interfaceIndex: number;
    networkId: number;
}

export interface VmwareVcfInterfaceWorkload {
    interfaceIndex: number;
    networkId: number;
}

export interface VmwareVsphereInstanceArray {
    clusterGroupRole?: string;
    driveArrayIdBoot?: number;
    firewallRules?: outputs.VmwareVsphereInstanceArrayFirewallRule[];
    infrastructureId: number;
    instanceArrayAdditionalWanIpv4Json: string;
    instanceArrayBootMethod: string;
    instanceArrayCustomVariables: {[key: string]: string};
    instanceArrayDiskCount: number;
    instanceArrayDiskSizeMbytes: number;
    instanceArrayFirewallManaged?: boolean;
    instanceArrayId: number;
    instanceArrayInstanceCount?: number;
    instanceArrayLabel: string;
    instanceArrayProcessorCoreCount: number;
    instanceArrayProcessorCoreMhz: number;
    instanceArrayProcessorCount: number;
    instanceArrayRamGbytes: number;
    instanceCustomVariables?: outputs.VmwareVsphereInstanceArrayInstanceCustomVariable[];
    instanceServerTypes?: outputs.VmwareVsphereInstanceArrayInstanceServerType[];
    interfaces?: outputs.VmwareVsphereInstanceArrayInterface[];
    networkProfiles?: outputs.VmwareVsphereInstanceArrayNetworkProfile[];
    volumeTemplateId?: number;
}

export interface VmwareVsphereInstanceArrayFirewallRule {
    firewallRuleDescription?: string;
    firewallRuleDestinationIpAddressRangeEnd?: string;
    firewallRuleDestinationIpAddressRangeStart?: string;
    firewallRuleEnabled?: boolean;
    firewallRuleIpAddressType?: string;
    firewallRulePortRangeEnd?: number;
    firewallRulePortRangeStart?: number;
    firewallRuleProtocol?: string;
    firewallRuleSourceIpAddressRangeEnd?: string;
    firewallRuleSourceIpAddressRangeStart?: string;
}

export interface VmwareVsphereInstanceArrayInstanceCustomVariable {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface VmwareVsphereInstanceArrayInstanceServerType {
    instanceIndex: number;
    serverTypeId: number;
}

export interface VmwareVsphereInstanceArrayInterface {
    interfaceIndex: number;
    networkId: number;
}

export interface VmwareVsphereInstanceArrayNetworkProfile {
    networkId: number;
    networkProfileId?: number;
}

export interface VmwareVsphereInstanceArrayNetworkProfileMaster {
    networkId: number;
    networkProfileId?: number;
}

export interface VmwareVsphereInstanceArrayNetworkProfileWorker {
    networkId: number;
    networkProfileId?: number;
}

export interface VmwareVsphereInstanceCustomVariablesMaster {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface VmwareVsphereInstanceCustomVariablesWorker {
    customVariables: {[key: string]: string};
    instanceIndex: number;
}

export interface VmwareVsphereInstanceServerTypeMaster {
    instanceIndex: number;
    serverTypeId: number;
}

export interface VmwareVsphereInstanceServerTypeWorker {
    instanceIndex: number;
    serverTypeId: number;
}

export interface VmwareVsphereInterfaceMaster {
    interfaceIndex: number;
    networkId: number;
}

export interface VmwareVsphereInterfaceWorker {
    interfaceIndex: number;
    networkId: number;
}

