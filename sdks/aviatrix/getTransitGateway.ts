// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTransitGateway(args: GetTransitGatewayArgs, opts?: pulumi.InvokeOptions): Promise<GetTransitGatewayResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aviatrix:index/getTransitGateway:getTransitGateway", {
        "gwName": args.gwName,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTransitGateway.
 */
export interface GetTransitGatewayArgs {
    gwName: string;
    id?: string;
}

/**
 * A collection of values returned by getTransitGateway.
 */
export interface GetTransitGatewayResult {
    readonly accountName: string;
    readonly allocateNewEip: boolean;
    readonly approvedLearnedCidrs: string[];
    readonly availabilityDomain: string;
    readonly azureEipNameResourceGroup: string;
    readonly bgpEcmp: boolean;
    readonly bgpHoldTime: number;
    readonly bgpLanInterfaces: outputs.GetTransitGatewayBgpLanInterface[];
    readonly bgpLanIpLists: string[];
    readonly bgpManualSpokeAdvertiseCidrs: string;
    readonly bgpPollingTime: string;
    readonly cloudInstanceId: string;
    readonly cloudType: number;
    readonly connectedTransit: boolean;
    readonly customizedSpokeVpcRoutes: string;
    readonly customizedTransitVpcRoutes: string[];
    readonly eip: string;
    readonly enableActiveStandby: boolean;
    readonly enableActiveStandbyPreemptive: boolean;
    readonly enableAdvertiseTransitCidr: boolean;
    readonly enableBgpOverLan: boolean;
    readonly enableEgressTransitFirenet: boolean;
    readonly enableEncryptVolume: boolean;
    readonly enableFirenet: boolean;
    readonly enableGatewayLoadBalancer: boolean;
    readonly enableHybridConnection: boolean;
    readonly enableJumboFrame: boolean;
    readonly enableLearnedCidrsApproval: boolean;
    readonly enableMonitorGatewaySubnets: boolean;
    readonly enableMultiTierTransit: boolean;
    readonly enablePrivateOob: boolean;
    readonly enableSegmentation: boolean;
    readonly enableSpotInstance: boolean;
    readonly enableTransitFirenet: boolean;
    readonly enableTransitSummarizeCidrToTgw: boolean;
    readonly enableVpcDnsServer: boolean;
    readonly excludedAdvertisedSpokeRoutes: string;
    readonly faultDomain: string;
    readonly filteredSpokeVpcRoutes: string;
    readonly gwName: string;
    readonly gwSize: string;
    readonly haAvailabilityDomain: string;
    readonly haAzureEipNameResourceGroup: string;
    readonly haBgpLanInterfaces: outputs.GetTransitGatewayHaBgpLanInterface[];
    readonly haBgpLanIpLists: string[];
    readonly haCloudInstanceId: string;
    readonly haEip: string;
    readonly haFaultDomain: string;
    readonly haGwName: string;
    readonly haGwSize: string;
    readonly haImageVersion: string;
    readonly haInsaneModeAz: string;
    readonly haLanInterfaceCidr: string;
    readonly haOobAvailabilityZone: string;
    readonly haOobManagementSubnet: string;
    readonly haPrivateIp: string;
    readonly haPublicIp: string;
    readonly haSecurityGroupId: string;
    readonly haSoftwareVersion: string;
    readonly haSubnet: string;
    readonly haZone: string;
    readonly id: string;
    readonly imageVersion: string;
    readonly insaneMode: boolean;
    readonly insaneModeAz: string;
    readonly lanInterfaceCidr: string;
    readonly lanPrivateSubnet: string;
    readonly lanVpcId: string;
    readonly learnedCidrsApprovalMode: string;
    readonly localAsNumber: string;
    readonly monitorExcludeLists: string[];
    readonly oobAvailabilityZone: string;
    readonly oobManagementSubnet: string;
    readonly prependAsPaths: string[];
    readonly privateIp: string;
    readonly publicIp: string;
    readonly securityGroupId: string;
    readonly singleAzHa: boolean;
    readonly singleIpSnat: boolean;
    readonly softwareVersion: string;
    readonly spotPrice: string;
    readonly subnet: string;
    readonly tags: {[key: string]: string};
    readonly tunnelDetectionTime: number;
    readonly vpcId: string;
    readonly vpcReg: string;
    readonly zone: string;
}
export function getTransitGatewayOutput(args: GetTransitGatewayOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTransitGatewayResult> {
    return pulumi.output(args).apply((a: any) => getTransitGateway(a, opts))
}

/**
 * A collection of arguments for invoking getTransitGateway.
 */
export interface GetTransitGatewayOutputArgs {
    gwName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
