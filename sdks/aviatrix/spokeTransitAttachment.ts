// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SpokeTransitAttachment extends pulumi.CustomResource {
    /**
     * Get an existing SpokeTransitAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpokeTransitAttachmentState, opts?: pulumi.CustomResourceOptions): SpokeTransitAttachment {
        return new SpokeTransitAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/spokeTransitAttachment:SpokeTransitAttachment';

    /**
     * Returns true if the given object is an instance of SpokeTransitAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpokeTransitAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpokeTransitAttachment.__pulumiType;
    }

    /**
     * Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each
     * launched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.
     */
    public readonly enableMaxPerformance!: pulumi.Output<boolean | undefined>;
    /**
     * Learned routes will be propagated to these route tables.
     */
    public readonly routeTables!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether the spoke gateway is BGP enabled or not.
     */
    public /*out*/ readonly spokeBgpEnabled!: pulumi.Output<boolean>;
    /**
     * Name of the spoke gateway to attach to transit network.
     */
    public readonly spokeGwName!: pulumi.Output<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on spoke gateway.
     */
    public readonly spokePrependAsPaths!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the transit gateway to attach the spoke gateway to.
     */
    public readonly transitGwName!: pulumi.Output<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
     */
    public readonly transitPrependAsPaths!: pulumi.Output<string[] | undefined>;
    /**
     * (Optional) Advanced option. Number of public tunnels. Required with both Spoke and Transitto be insane mode enabled and
     * max performance enabled. Type: Integer. Valid Range: 1-49.Available as of provider version R3.1.3+.
     */
    public readonly tunnelCount!: pulumi.Output<number | undefined>;

    /**
     * Create a SpokeTransitAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpokeTransitAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpokeTransitAttachmentArgs | SpokeTransitAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpokeTransitAttachmentState | undefined;
            resourceInputs["enableMaxPerformance"] = state ? state.enableMaxPerformance : undefined;
            resourceInputs["routeTables"] = state ? state.routeTables : undefined;
            resourceInputs["spokeBgpEnabled"] = state ? state.spokeBgpEnabled : undefined;
            resourceInputs["spokeGwName"] = state ? state.spokeGwName : undefined;
            resourceInputs["spokePrependAsPaths"] = state ? state.spokePrependAsPaths : undefined;
            resourceInputs["transitGwName"] = state ? state.transitGwName : undefined;
            resourceInputs["transitPrependAsPaths"] = state ? state.transitPrependAsPaths : undefined;
            resourceInputs["tunnelCount"] = state ? state.tunnelCount : undefined;
        } else {
            const args = argsOrState as SpokeTransitAttachmentArgs | undefined;
            if ((!args || args.spokeGwName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spokeGwName'");
            }
            if ((!args || args.transitGwName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGwName'");
            }
            resourceInputs["enableMaxPerformance"] = args ? args.enableMaxPerformance : undefined;
            resourceInputs["routeTables"] = args ? args.routeTables : undefined;
            resourceInputs["spokeGwName"] = args ? args.spokeGwName : undefined;
            resourceInputs["spokePrependAsPaths"] = args ? args.spokePrependAsPaths : undefined;
            resourceInputs["transitGwName"] = args ? args.transitGwName : undefined;
            resourceInputs["transitPrependAsPaths"] = args ? args.transitPrependAsPaths : undefined;
            resourceInputs["tunnelCount"] = args ? args.tunnelCount : undefined;
            resourceInputs["spokeBgpEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpokeTransitAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpokeTransitAttachment resources.
 */
export interface SpokeTransitAttachmentState {
    /**
     * Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each
     * launched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.
     */
    enableMaxPerformance?: pulumi.Input<boolean>;
    /**
     * Learned routes will be propagated to these route tables.
     */
    routeTables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the spoke gateway is BGP enabled or not.
     */
    spokeBgpEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the spoke gateway to attach to transit network.
     */
    spokeGwName?: pulumi.Input<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on spoke gateway.
     */
    spokePrependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the transit gateway to attach the spoke gateway to.
     */
    transitGwName?: pulumi.Input<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
     */
    transitPrependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Optional) Advanced option. Number of public tunnels. Required with both Spoke and Transitto be insane mode enabled and
     * max performance enabled. Type: Integer. Valid Range: 1-49.Available as of provider version R3.1.3+.
     */
    tunnelCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SpokeTransitAttachment resource.
 */
export interface SpokeTransitAttachmentArgs {
    /**
     * Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each
     * launched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.
     */
    enableMaxPerformance?: pulumi.Input<boolean>;
    /**
     * Learned routes will be propagated to these route tables.
     */
    routeTables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the spoke gateway to attach to transit network.
     */
    spokeGwName: pulumi.Input<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on spoke gateway.
     */
    spokePrependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the transit gateway to attach the spoke gateway to.
     */
    transitGwName: pulumi.Input<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
     */
    transitPrependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Optional) Advanced option. Number of public tunnels. Required with both Spoke and Transitto be insane mode enabled and
     * max performance enabled. Type: Integer. Valid Range: 1-49.Available as of provider version R3.1.3+.
     */
    tunnelCount?: pulumi.Input<number>;
}
