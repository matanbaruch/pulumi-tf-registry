// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FilebeatForwarder extends pulumi.CustomResource {
    /**
     * Get an existing FilebeatForwarder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FilebeatForwarderState, opts?: pulumi.CustomResourceOptions): FilebeatForwarder {
        return new FilebeatForwarder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/filebeatForwarder:FilebeatForwarder';

    /**
     * Returns true if the given object is an instance of FilebeatForwarder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FilebeatForwarder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FilebeatForwarder.__pulumiType;
    }

    /**
     * Configuration file.
     */
    public readonly configFile!: pulumi.Output<string | undefined>;
    /**
     * List of excluded gateways.
     */
    public readonly excludedGateways!: pulumi.Output<string[] | undefined>;
    /**
     * Port number.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Server IP.
     */
    public readonly server!: pulumi.Output<string>;
    /**
     * Enabled or not.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Trusted CA file.
     */
    public readonly trustedCaFile!: pulumi.Output<string | undefined>;

    /**
     * Create a FilebeatForwarder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FilebeatForwarderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FilebeatForwarderArgs | FilebeatForwarderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FilebeatForwarderState | undefined;
            resourceInputs["configFile"] = state ? state.configFile : undefined;
            resourceInputs["excludedGateways"] = state ? state.excludedGateways : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["trustedCaFile"] = state ? state.trustedCaFile : undefined;
        } else {
            const args = argsOrState as FilebeatForwarderArgs | undefined;
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            resourceInputs["configFile"] = args ? args.configFile : undefined;
            resourceInputs["excludedGateways"] = args ? args.excludedGateways : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["trustedCaFile"] = args ? args.trustedCaFile : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FilebeatForwarder.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FilebeatForwarder resources.
 */
export interface FilebeatForwarderState {
    /**
     * Configuration file.
     */
    configFile?: pulumi.Input<string>;
    /**
     * List of excluded gateways.
     */
    excludedGateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Port number.
     */
    port?: pulumi.Input<number>;
    /**
     * Server IP.
     */
    server?: pulumi.Input<string>;
    /**
     * Enabled or not.
     */
    status?: pulumi.Input<string>;
    /**
     * Trusted CA file.
     */
    trustedCaFile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FilebeatForwarder resource.
 */
export interface FilebeatForwarderArgs {
    /**
     * Configuration file.
     */
    configFile?: pulumi.Input<string>;
    /**
     * List of excluded gateways.
     */
    excludedGateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Port number.
     */
    port: pulumi.Input<number>;
    /**
     * Server IP.
     */
    server: pulumi.Input<string>;
    /**
     * Trusted CA file.
     */
    trustedCaFile?: pulumi.Input<string>;
}
