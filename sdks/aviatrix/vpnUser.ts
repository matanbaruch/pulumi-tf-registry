// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnUser extends pulumi.CustomResource {
    /**
     * Get an existing VpnUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnUserState, opts?: pulumi.CustomResourceOptions): VpnUser {
        return new VpnUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/vpnUser:VpnUser';

    /**
     * Returns true if the given object is an instance of VpnUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnUser.__pulumiType;
    }

    /**
     * FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer.
     */
    public readonly dnsName!: pulumi.Output<string | undefined>;
    /**
     * If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway.
     */
    public readonly gwName!: pulumi.Output<string | undefined>;
    public readonly manageUserAttachment!: pulumi.Output<boolean | undefined>;
    /**
     * List of profiles for user to attach to.
     */
    public readonly profiles!: pulumi.Output<string[] | undefined>;
    /**
     * This is the name of the SAML endpoint to which the user will be associated.
     */
    public readonly samlEndpoint!: pulumi.Output<string | undefined>;
    /**
     * VPN User's email.
     */
    public readonly userEmail!: pulumi.Output<string | undefined>;
    /**
     * VPN user name.
     */
    public readonly userName!: pulumi.Output<string>;
    /**
     * VPC Id of Aviatrix VPN gateway.
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;

    /**
     * Create a VpnUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnUserArgs | VpnUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnUserState | undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["gwName"] = state ? state.gwName : undefined;
            resourceInputs["manageUserAttachment"] = state ? state.manageUserAttachment : undefined;
            resourceInputs["profiles"] = state ? state.profiles : undefined;
            resourceInputs["samlEndpoint"] = state ? state.samlEndpoint : undefined;
            resourceInputs["userEmail"] = state ? state.userEmail : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VpnUserArgs | undefined;
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["dnsName"] = args ? args.dnsName : undefined;
            resourceInputs["gwName"] = args ? args.gwName : undefined;
            resourceInputs["manageUserAttachment"] = args ? args.manageUserAttachment : undefined;
            resourceInputs["profiles"] = args ? args.profiles : undefined;
            resourceInputs["samlEndpoint"] = args ? args.samlEndpoint : undefined;
            resourceInputs["userEmail"] = args ? args.userEmail : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnUser resources.
 */
export interface VpnUserState {
    /**
     * FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway.
     */
    gwName?: pulumi.Input<string>;
    manageUserAttachment?: pulumi.Input<boolean>;
    /**
     * List of profiles for user to attach to.
     */
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This is the name of the SAML endpoint to which the user will be associated.
     */
    samlEndpoint?: pulumi.Input<string>;
    /**
     * VPN User's email.
     */
    userEmail?: pulumi.Input<string>;
    /**
     * VPN user name.
     */
    userName?: pulumi.Input<string>;
    /**
     * VPC Id of Aviatrix VPN gateway.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnUser resource.
 */
export interface VpnUserArgs {
    /**
     * FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway.
     */
    gwName?: pulumi.Input<string>;
    manageUserAttachment?: pulumi.Input<boolean>;
    /**
     * List of profiles for user to attach to.
     */
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This is the name of the SAML endpoint to which the user will be associated.
     */
    samlEndpoint?: pulumi.Input<string>;
    /**
     * VPN User's email.
     */
    userEmail?: pulumi.Input<string>;
    /**
     * VPN user name.
     */
    userName: pulumi.Input<string>;
    /**
     * VPC Id of Aviatrix VPN gateway.
     */
    vpcId?: pulumi.Input<string>;
}
