// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AwsTgwVpnConnVpnTunnelData {
    lastStatusChangeTime: pulumi.Input<string>;
    routeCount: pulumi.Input<number>;
    status: pulumi.Input<string>;
    statusMessage: pulumi.Input<string>;
    tgwAsn: pulumi.Input<string>;
    tunnelName: pulumi.Input<string>;
    vpnInsideAddress: pulumi.Input<string>;
    vpnOutsideAddress: pulumi.Input<string>;
}

export interface ControllerAccessAllowListConfigAllowList {
    /**
     * Description of the IP address.
     */
    description?: pulumi.Input<string>;
    /**
     * IP address allowed access to the Controller.
     */
    ipAddress: pulumi.Input<string>;
}

export interface CopilotFaultTolerantDeploymentClusterDataNode {
    /**
     * Data volume size.
     */
    dataVolumeSize?: pulumi.Input<number>;
    /**
     * Instance size.
     */
    instanceSize?: pulumi.Input<string>;
    /**
     * Subnet CIDR.
     */
    subnet: pulumi.Input<string>;
    /**
     * VPC ID.
     */
    vpcId: pulumi.Input<string>;
}

export interface DistributedFirewallingIntraVpcVpc {
    /**
     * Account Name of the VPC.
     */
    accountName: pulumi.Input<string>;
    /**
     * Region of the VPC.
     */
    region: pulumi.Input<string>;
    /**
     * vpc_id of the VPC.
     */
    vpcId: pulumi.Input<string>;
}

export interface DistributedFirewallingPolicyListPolicy {
    /**
     * Action for the specified source and destination Smart Groups.Must be one of PERMIT or DENY.
     */
    action: pulumi.Input<string>;
    /**
     * Decryption options for the policy.
     */
    decryptPolicy?: pulumi.Input<string>;
    /**
     * Set of destination Smart Group UUIDs for the policy.
     */
    dstSmartGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If this flag is set to true, this policy will be ignored for SG orchestration.
     */
    excludeSgOrchestration?: pulumi.Input<boolean>;
    /**
     * Flow application requirement for the policy.
     */
    flowAppRequirement?: pulumi.Input<string>;
    /**
     * Whether to enable logging for the policy.
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Name of the policy.
     */
    name: pulumi.Input<string>;
    /**
     * List of port ranges for the policy.
     */
    portRanges?: pulumi.Input<pulumi.Input<inputs.DistributedFirewallingPolicyListPolicyPortRange>[]>;
    /**
     * Priority level of the policy
     */
    priority?: pulumi.Input<number>;
    /**
     * Protocol for the policy to filter.
     */
    protocol: pulumi.Input<string>;
    /**
     * Set of source Smart Group UUIDs for the policy.
     */
    srcSmartGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * UUID of the policy.
     */
    uuid?: pulumi.Input<string>;
    /**
     * Whether to enable watch mode for the policy.
     */
    watch?: pulumi.Input<boolean>;
    /**
     * Set of Web Group UUIDs for the policy.
     */
    webGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DistributedFirewallingPolicyListPolicyPortRange {
    /**
     * Upper bound of port range.
     */
    hi?: pulumi.Input<number>;
    /**
     * Lower bound of port range.
     */
    lo: pulumi.Input<number>;
}

export interface EdgeCspHaInterface {
    /**
     * The rate of data can be moved through the interface, requires an integer value. Unit is in Mb/s.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Primary DNS server IP.
     */
    dnsServerIp?: pulumi.Input<string>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Secondary DNS server IP.
     */
    secondaryDnsServerIp?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeCspInterface {
    /**
     * The rate of data can be moved through the interface, requires an integer value. Unit is in Mb/s.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Primary DNS server IP.
     */
    dnsServerIp?: pulumi.Input<string>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Enable VRRP.
     */
    enableVrrp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Secondary DNS server IP.
     */
    secondaryDnsServerIp?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * VRRP virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeCspVlan {
    /**
     * LAN sub-interface gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address.
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Parent interface name.
     */
    parentInterfaceName: pulumi.Input<string>;
    /**
     * LAN sub-interface gateway IP on HA gateway.
     */
    peerGatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address on HA gateway.
     */
    peerIpAddress?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * VLAN ID.
     */
    vlanId: pulumi.Input<number>;
    /**
     * LAN sub-interface virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
}

export interface EdgeEquinixHaInterface {
    /**
     * The rate of data can be moved through the interface, requires an integer value. Unit is in Mb/s.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Primary DNS server IP.
     */
    dnsServerIp?: pulumi.Input<string>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Secondary DNS server IP.
     */
    secondaryDnsServerIp?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeEquinixInterface {
    /**
     * The rate of data can be moved through the interface, requires an integer value. Unit is in Mb/s.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Primary DNS server IP.
     */
    dnsServerIp?: pulumi.Input<string>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Enable VRRP.
     */
    enableVrrp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Secondary DNS server IP.
     */
    secondaryDnsServerIp?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * VRRP virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeEquinixVlan {
    /**
     * LAN sub-interface gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address.
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Parent interface name.
     */
    parentInterfaceName: pulumi.Input<string>;
    /**
     * LAN sub-interface gateway IP on HA gateway.
     */
    peerGatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address on HA gateway.
     */
    peerIpAddress?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * VLAN ID.
     */
    vlanId: pulumi.Input<number>;
    /**
     * LAN sub-interface virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
}

export interface EdgeGatewaySelfmanagedHaInterface {
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeGatewaySelfmanagedInterface {
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Enable VRRP.
     */
    enableVrrp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * VRRP virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeGatewaySelfmanagedVlan {
    /**
     * LAN sub-interface gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address.
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Parent interface name.
     */
    parentInterfaceName: pulumi.Input<string>;
    /**
     * LAN sub-interface gateway IP on HA gateway.
     */
    peerGatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address on HA gateway.
     */
    peerIpAddress?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * VLAN ID.
     */
    vlanId: pulumi.Input<number>;
    /**
     * LAN sub-interface virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
}

export interface EdgeNeoDeviceOnboardingNetwork {
    /**
     * Set of DNS server IPs.
     */
    dnsServerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    interfaceName: pulumi.Input<string>;
    /**
     * IPV4 CIDR.
     */
    ipv4Cidr?: pulumi.Input<string>;
    /**
     * Proxy server IP.
     */
    proxyServerIp?: pulumi.Input<string>;
}

export interface EdgeNeoHaInterface {
    /**
     * The rate of data can be moved through the interface, requires an integer value. Unit is in Mb/s.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Primary DNS server IP.
     */
    dnsServerIp?: pulumi.Input<string>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Secondary DNS server IP.
     */
    secondaryDnsServerIp?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeNeoInterface {
    /**
     * The rate of data can be moved through the interface, requires an integer value. Unit is in Mb/s.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Primary DNS server IP.
     */
    dnsServerIp?: pulumi.Input<string>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Enable VRRP.
     */
    enableVrrp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Secondary DNS server IP.
     */
    secondaryDnsServerIp?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * VRRP virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeNeoVlan {
    /**
     * LAN sub-interface gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address.
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Parent interface name.
     */
    parentInterfaceName: pulumi.Input<string>;
    /**
     * LAN sub-interface gateway IP on HA gateway.
     */
    peerGatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address on HA gateway.
     */
    peerIpAddress?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * VLAN ID.
     */
    vlanId: pulumi.Input<number>;
    /**
     * LAN sub-interface virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
}

export interface EdgePlatformDeviceOnboardingNetwork {
    /**
     * Set of DNS server IPs.
     */
    dnsServerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    interfaceName: pulumi.Input<string>;
    /**
     * IPV4 CIDR.
     */
    ipv4Cidr?: pulumi.Input<string>;
    /**
     * Proxy server IP.
     */
    proxyServerIp?: pulumi.Input<string>;
}

export interface EdgePlatformHaInterface {
    /**
     * The rate of data can be moved through the interface, requires an integer value. Unit is in Mb/s.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Primary DNS server IP.
     */
    dnsServerIp?: pulumi.Input<string>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Secondary DNS server IP.
     */
    secondaryDnsServerIp?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgePlatformInterface {
    /**
     * The rate of data can be moved through the interface, requires an integer value. Unit is in Mb/s.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Primary DNS server IP.
     */
    dnsServerIp?: pulumi.Input<string>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Enable VRRP.
     */
    enableVrrp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Secondary DNS server IP.
     */
    secondaryDnsServerIp?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * VRRP virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgePlatformVlan {
    /**
     * LAN sub-interface gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address.
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Parent interface name.
     */
    parentInterfaceName: pulumi.Input<string>;
    /**
     * LAN sub-interface gateway IP on HA gateway.
     */
    peerGatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address on HA gateway.
     */
    peerIpAddress?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * VLAN ID.
     */
    vlanId: pulumi.Input<number>;
    /**
     * LAN sub-interface virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
}

export interface EdgeSpokeInterface {
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeVmSelfmanagedHaInterface {
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeVmSelfmanagedInterface {
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeZededaHaInterface {
    /**
     * The rate of data can be moved through the interface, requires an integer value. Unit is in Mb/s.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Primary DNS server IP.
     */
    dnsServerIp?: pulumi.Input<string>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Secondary DNS server IP.
     */
    secondaryDnsServerIp?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeZededaInterface {
    /**
     * The rate of data can be moved through the interface, requires an integer value. Unit is in Mb/s.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Primary DNS server IP.
     */
    dnsServerIp?: pulumi.Input<string>;
    /**
     * Enable DHCP.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Enable VRRP.
     */
    enableVrrp?: pulumi.Input<boolean>;
    /**
     * Gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Interface static IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Interface name.
     */
    name: pulumi.Input<string>;
    /**
     * Secondary DNS server IP.
     */
    secondaryDnsServerIp?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * Interface type.
     */
    type: pulumi.Input<string>;
    /**
     * VRRP virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
    /**
     * WAN interface public IP.
     */
    wanPublicIp?: pulumi.Input<string>;
}

export interface EdgeZededaVlan {
    /**
     * LAN sub-interface gateway IP.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address.
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Parent interface name.
     */
    parentInterfaceName: pulumi.Input<string>;
    /**
     * LAN sub-interface gateway IP on HA gateway.
     */
    peerGatewayIp?: pulumi.Input<string>;
    /**
     * LAN sub-interface IP address on HA gateway.
     */
    peerIpAddress?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag?: pulumi.Input<string>;
    /**
     * VLAN ID.
     */
    vlanId: pulumi.Input<number>;
    /**
     * LAN sub-interface virtual IP.
     */
    vrrpVirtualIp?: pulumi.Input<string>;
}

export interface FirewallPolicy {
    /**
     * Valid values: 'allow', 'deny' or 'force-drop'(in stateful firewall rule to allow immediate packet dropping on established sessions).
     */
    action: pulumi.Input<string>;
    /**
     * Description of this firewall policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Destination address, a valid IPv4 address or tag name.
     */
    dstIp: pulumi.Input<string>;
    /**
     * Valid values: true, false. Default value: false.
     */
    logEnabled?: pulumi.Input<boolean>;
    /**
     * A single port or a range of port numbers.
     */
    port: pulumi.Input<string>;
    /**
     * Valid values: 'all', 'tcp', 'udp', 'icmp', 'sctp', 'rdp', 'dccp'.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Source address, a valid IPv4 address or tag name.
     */
    srcIp: pulumi.Input<string>;
}

export interface FirewallTagCidrList {
    /**
     * The CIDR attribute of a policy.
     */
    cidr: pulumi.Input<string>;
    /**
     * The name attribute of a policy.
     */
    cidrTagName: pulumi.Input<string>;
}

export interface FqdnDomainName {
    /**
     * What action should happen to matching requests. Possible values are: 'Base Policy', 'Allow' or 'Deny'. Defaults to 'Base Policy' if no value is provided.
     */
    action?: pulumi.Input<string>;
    /**
     * FQDN.
     */
    fqdn: pulumi.Input<string>;
    /**
     * Port.
     */
    port: pulumi.Input<string>;
    /**
     * Protocol.
     */
    proto: pulumi.Input<string>;
}

export interface FqdnGwFilterTagList {
    /**
     * Name of the gateway to attach to the specific tag.
     */
    gwName: pulumi.Input<string>;
    /**
     * List of source IPs in the VPC qualified for a specific tag.
     */
    sourceIpLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GatewayDnatConnectionPolicy {
    applyRouteEntry: pulumi.Input<boolean>;
    connection: pulumi.Input<string>;
    dnatIps: pulumi.Input<string>;
    dnatPort: pulumi.Input<string>;
    dstCidr: pulumi.Input<string>;
    dstPort: pulumi.Input<string>;
    excludeRtb: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    mark: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    srcCidr: pulumi.Input<string>;
    srcPort: pulumi.Input<string>;
}

export interface GatewayDnatDnatPolicy {
    /**
     * This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True.
     */
    applyRouteEntry?: pulumi.Input<boolean>;
    /**
     * This is a qualifier condition that specifies output connection where the rule applies. When left blank, this field is not used.
     */
    connection?: pulumi.Input<string>;
    /**
     * This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When left blank, this field is not used. One of the rule field must be specified for this rule to take effect.
     */
    dnatIps?: pulumi.Input<string>;
    /**
     * This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When left blank, this field is not used. One of the rule field must be specified for this rule to take effect.
     */
    dnatPort?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a destination IP address range where the rule applies. When left blank, this field is not used.
     */
    dstCidr?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a destination port where the rule applies. When left blank, this field is not used.
     */
    dstPort?: pulumi.Input<string>;
    /**
     * This field specifies which VPC private route table will not be programmed with the default route entry.
     */
    excludeRtb?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies output interface where the rule applies. When left blank, this field is not used.
     */
    interface?: pulumi.Input<string>;
    /**
     * This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When left blank, this field is not used.
     */
    mark?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a destination port protocol where the rule applies. Default: all.
     */
    protocol?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a source IP address range where the rule applies. When left blank, this field is not used.
     */
    srcCidr?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a source port that the rule applies. When left blank, this field is not used.
     */
    srcPort?: pulumi.Input<string>;
}

export interface GatewayDnatInterfacePolicy {
    applyRouteEntry: pulumi.Input<boolean>;
    connection: pulumi.Input<string>;
    dnatIps: pulumi.Input<string>;
    dnatPort: pulumi.Input<string>;
    dstCidr: pulumi.Input<string>;
    dstPort: pulumi.Input<string>;
    excludeRtb: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    mark: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    srcCidr: pulumi.Input<string>;
    srcPort: pulumi.Input<string>;
}

export interface GatewaySnatConnectionPolicy {
    applyRouteEntry: pulumi.Input<boolean>;
    connection: pulumi.Input<string>;
    dstCidr: pulumi.Input<string>;
    dstPort: pulumi.Input<string>;
    excludeRtb: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    mark: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    snatIps: pulumi.Input<string>;
    snatPort: pulumi.Input<string>;
    srcCidr: pulumi.Input<string>;
    srcPort: pulumi.Input<string>;
}

export interface GatewaySnatInterfacePolicy {
    applyRouteEntry: pulumi.Input<boolean>;
    connection: pulumi.Input<string>;
    dstCidr: pulumi.Input<string>;
    dstPort: pulumi.Input<string>;
    excludeRtb: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    mark: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    snatIps: pulumi.Input<string>;
    snatPort: pulumi.Input<string>;
    srcCidr: pulumi.Input<string>;
    srcPort: pulumi.Input<string>;
}

export interface GatewaySnatSnatPolicy {
    /**
     * This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True.
     */
    applyRouteEntry?: pulumi.Input<boolean>;
    /**
     * This is a qualifier condition that specifies output connection where the rule applies. When left blank, this field is not used.
     */
    connection?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a destination IP address range where the rule applies. When left blank, this field is not used.
     */
    dstCidr?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a destination port where the rule applies. When left blank, this field is not used.
     */
    dstPort?: pulumi.Input<string>;
    /**
     * This field specifies which VPC private route table will not be programmed with the default route entry.
     */
    excludeRtb?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies output interface where the rule applies. When left blank, this field is not used.
     */
    interface?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When left blank, this field is not used.
     */
    mark?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a destination port protocol where the rule applies. Default: all.
     */
    protocol?: pulumi.Input<string>;
    /**
     * This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When left blank, this field is not used. One of the rule fields must be specified for this rule to take effect.
     */
    snatIps?: pulumi.Input<string>;
    /**
     * This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When left blank, this field is not used. One of the rule fields must be specified for this rule to take effect.
     */
    snatPort?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a source IP address range where the rule applies. When left blank, this field is not used.
     */
    srcCidr?: pulumi.Input<string>;
    /**
     * This is a qualifier condition that specifies a source port that the rule applies. When left blank, this field is not used.
     */
    srcPort?: pulumi.Input<string>;
}

export interface PrivateModeLbProxy {
    /**
     * Instance ID of proxy.
     */
    instanceId: pulumi.Input<string>;
    /**
     * VPC ID of proxy
     */
    vpcId: pulumi.Input<string>;
}

export interface ProviderIgnoreTags {
    /**
     * Tag key prefixes to ignore across all resources.
     */
    keyPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tag keys to ignore across all resources.
     */
    keys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface QosPolicyListPolicy {
    /**
     * List of DSCP values.
     */
    dscpValues: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * QoS policy name.
     */
    name: pulumi.Input<string>;
    /**
     * QoS class UUID.
     */
    qosClassUuid: pulumi.Input<string>;
    /**
     * QoS policy UUID.
     */
    uuid?: pulumi.Input<string>;
}

export interface Site2cloudCaCertTagCaCertificate {
    /**
     * Content of cert certificate to create only one cert.
     */
    certContent: pulumi.Input<string>;
    /**
     * Common name of created cert.
     */
    commonName?: pulumi.Input<string>;
    /**
     * Expiration time of created cert.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * Unique id of created cert.
     */
    id?: pulumi.Input<string>;
    /**
     * Issuer name of created cert.
     */
    issuerName?: pulumi.Input<string>;
    /**
     * Unique serial of created cert.
     */
    uniqueSerial?: pulumi.Input<string>;
}

export interface SmartGroupSelector {
    matchExpressions: pulumi.Input<pulumi.Input<inputs.SmartGroupSelectorMatchExpression>[]>;
}

export interface SmartGroupSelectorMatchExpression {
    /**
     * Account ID this expression matches.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Account name this expression matches.
     */
    accountName?: pulumi.Input<string>;
    /**
     * CIDR block or IP Address this expression matches.
     */
    cidr?: pulumi.Input<string>;
    /**
     * FQDN address this expression matches.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * Name this expression matches.
     */
    name?: pulumi.Input<string>;
    /**
     * Region this expression matches.
     */
    region?: pulumi.Input<string>;
    /**
     * Resource ID this expression matches.
     */
    resId?: pulumi.Input<string>;
    /**
     * Edge Site-ID this expression matches.
     */
    site?: pulumi.Input<string>;
    /**
     * Map of tags this expression matches.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Type of resource this expression matches.
     */
    type?: pulumi.Input<string>;
    /**
     * Zone this expression matches.
     */
    zone?: pulumi.Input<string>;
}

export interface TransitGatewayBgpLanInterface {
    /**
     * Subnet Info.
     */
    subnet: pulumi.Input<string>;
    /**
     * VPC-ID of GCP cloud provider.
     */
    vpcId: pulumi.Input<string>;
}

export interface TransitGatewayHaBgpLanInterface {
    /**
     * Subnet Info.
     */
    subnet: pulumi.Input<string>;
    /**
     * VPC-ID of GCP cloud provider.
     */
    vpcId: pulumi.Input<string>;
}

export interface VpcPrivateSubnet {
    cidr: pulumi.Input<string>;
    name: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface VpcPublicSubnet {
    cidr: pulumi.Input<string>;
    name: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface VpcSubnet {
    /**
     * Subnet cidr.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Subnet name.
     */
    name?: pulumi.Input<string>;
    /**
     * Subnet region.
     */
    region?: pulumi.Input<string>;
    /**
     * Subnet ID.
     */
    subnetId?: pulumi.Input<string>;
}

export interface VpnProfilePolicy {
    /**
     * The opposite of the base rule for correct behaviour. 'allow' or 'deny'.
     */
    action: pulumi.Input<string>;
    /**
     * Port to be allowed or denied.
     */
    port: pulumi.Input<string>;
    /**
     * Protocol to allow or deny.
     */
    proto: pulumi.Input<string>;
    /**
     * CIDR to be allowed or denied.
     */
    target: pulumi.Input<string>;
}

export interface WebGroupSelector {
    matchExpressions: pulumi.Input<pulumi.Input<inputs.WebGroupSelectorMatchExpression>[]>;
}

export interface WebGroupSelectorMatchExpression {
    /**
     * Server name indicator this expression matches.
     */
    snifilter?: pulumi.Input<string>;
    /**
     * URL address this expression matches.
     */
    urlfilter?: pulumi.Input<string>;
}
export namespace config {
}
