// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EdgeSpokeTransitAttachment extends pulumi.CustomResource {
    /**
     * Get an existing EdgeSpokeTransitAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeSpokeTransitAttachmentState, opts?: pulumi.CustomResourceOptions): EdgeSpokeTransitAttachment {
        return new EdgeSpokeTransitAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/edgeSpokeTransitAttachment:EdgeSpokeTransitAttachment';

    /**
     * Returns true if the given object is an instance of EdgeSpokeTransitAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgeSpokeTransitAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeSpokeTransitAttachment.__pulumiType;
    }

    /**
     * Default Edge WAN interfaces.
     */
    public /*out*/ readonly defaultEdgeWanInterfaces!: pulumi.Output<string[]>;
    /**
     * Set of Edge WAN interfaces.
     */
    public readonly edgeWanInterfaces!: pulumi.Output<string[] | undefined>;
    /**
     * Enable jumbo frame.
     */
    public readonly enableInsaneMode!: pulumi.Output<boolean | undefined>;
    /**
     * Enable jumbo frame.
     */
    public readonly enableJumboFrame!: pulumi.Output<boolean | undefined>;
    /**
     * Enable over private network.
     */
    public readonly enableOverPrivateNetwork!: pulumi.Output<boolean | undefined>;
    /**
     * Insane mode tunnel number. Valid range for HPE over private network: 0-49. Valid range for HPE over internet: 2-20.
     */
    public readonly insaneModeTunnelNumber!: pulumi.Output<number | undefined>;
    /**
     * Number of retries.
     */
    public readonly numberOfRetries!: pulumi.Output<number | undefined>;
    /**
     * Retry interval in seconds.
     */
    public readonly retryInterval!: pulumi.Output<number | undefined>;
    /**
     * Name of the Edge as a Spoke to attach to the transit network.
     */
    public readonly spokeGwName!: pulumi.Output<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
     */
    public readonly spokePrependAsPaths!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the transit gateway to attach the Edge as a Spoke to.
     */
    public readonly transitGwName!: pulumi.Output<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
     */
    public readonly transitPrependAsPaths!: pulumi.Output<string[] | undefined>;

    /**
     * Create a EdgeSpokeTransitAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeSpokeTransitAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeSpokeTransitAttachmentArgs | EdgeSpokeTransitAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeSpokeTransitAttachmentState | undefined;
            resourceInputs["defaultEdgeWanInterfaces"] = state ? state.defaultEdgeWanInterfaces : undefined;
            resourceInputs["edgeWanInterfaces"] = state ? state.edgeWanInterfaces : undefined;
            resourceInputs["enableInsaneMode"] = state ? state.enableInsaneMode : undefined;
            resourceInputs["enableJumboFrame"] = state ? state.enableJumboFrame : undefined;
            resourceInputs["enableOverPrivateNetwork"] = state ? state.enableOverPrivateNetwork : undefined;
            resourceInputs["insaneModeTunnelNumber"] = state ? state.insaneModeTunnelNumber : undefined;
            resourceInputs["numberOfRetries"] = state ? state.numberOfRetries : undefined;
            resourceInputs["retryInterval"] = state ? state.retryInterval : undefined;
            resourceInputs["spokeGwName"] = state ? state.spokeGwName : undefined;
            resourceInputs["spokePrependAsPaths"] = state ? state.spokePrependAsPaths : undefined;
            resourceInputs["transitGwName"] = state ? state.transitGwName : undefined;
            resourceInputs["transitPrependAsPaths"] = state ? state.transitPrependAsPaths : undefined;
        } else {
            const args = argsOrState as EdgeSpokeTransitAttachmentArgs | undefined;
            if ((!args || args.spokeGwName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spokeGwName'");
            }
            if ((!args || args.transitGwName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGwName'");
            }
            resourceInputs["edgeWanInterfaces"] = args ? args.edgeWanInterfaces : undefined;
            resourceInputs["enableInsaneMode"] = args ? args.enableInsaneMode : undefined;
            resourceInputs["enableJumboFrame"] = args ? args.enableJumboFrame : undefined;
            resourceInputs["enableOverPrivateNetwork"] = args ? args.enableOverPrivateNetwork : undefined;
            resourceInputs["insaneModeTunnelNumber"] = args ? args.insaneModeTunnelNumber : undefined;
            resourceInputs["numberOfRetries"] = args ? args.numberOfRetries : undefined;
            resourceInputs["retryInterval"] = args ? args.retryInterval : undefined;
            resourceInputs["spokeGwName"] = args ? args.spokeGwName : undefined;
            resourceInputs["spokePrependAsPaths"] = args ? args.spokePrependAsPaths : undefined;
            resourceInputs["transitGwName"] = args ? args.transitGwName : undefined;
            resourceInputs["transitPrependAsPaths"] = args ? args.transitPrependAsPaths : undefined;
            resourceInputs["defaultEdgeWanInterfaces"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgeSpokeTransitAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EdgeSpokeTransitAttachment resources.
 */
export interface EdgeSpokeTransitAttachmentState {
    /**
     * Default Edge WAN interfaces.
     */
    defaultEdgeWanInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of Edge WAN interfaces.
     */
    edgeWanInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable jumbo frame.
     */
    enableInsaneMode?: pulumi.Input<boolean>;
    /**
     * Enable jumbo frame.
     */
    enableJumboFrame?: pulumi.Input<boolean>;
    /**
     * Enable over private network.
     */
    enableOverPrivateNetwork?: pulumi.Input<boolean>;
    /**
     * Insane mode tunnel number. Valid range for HPE over private network: 0-49. Valid range for HPE over internet: 2-20.
     */
    insaneModeTunnelNumber?: pulumi.Input<number>;
    /**
     * Number of retries.
     */
    numberOfRetries?: pulumi.Input<number>;
    /**
     * Retry interval in seconds.
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * Name of the Edge as a Spoke to attach to the transit network.
     */
    spokeGwName?: pulumi.Input<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
     */
    spokePrependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the transit gateway to attach the Edge as a Spoke to.
     */
    transitGwName?: pulumi.Input<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
     */
    transitPrependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EdgeSpokeTransitAttachment resource.
 */
export interface EdgeSpokeTransitAttachmentArgs {
    /**
     * Set of Edge WAN interfaces.
     */
    edgeWanInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable jumbo frame.
     */
    enableInsaneMode?: pulumi.Input<boolean>;
    /**
     * Enable jumbo frame.
     */
    enableJumboFrame?: pulumi.Input<boolean>;
    /**
     * Enable over private network.
     */
    enableOverPrivateNetwork?: pulumi.Input<boolean>;
    /**
     * Insane mode tunnel number. Valid range for HPE over private network: 0-49. Valid range for HPE over internet: 2-20.
     */
    insaneModeTunnelNumber?: pulumi.Input<number>;
    /**
     * Number of retries.
     */
    numberOfRetries?: pulumi.Input<number>;
    /**
     * Retry interval in seconds.
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * Name of the Edge as a Spoke to attach to the transit network.
     */
    spokeGwName: pulumi.Input<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on Edge as a Spoke.
     */
    spokePrependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the transit gateway to attach the Edge as a Spoke to.
     */
    transitGwName: pulumi.Input<string>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
     */
    transitPrependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
}
