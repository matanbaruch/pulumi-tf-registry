// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CopilotFaultTolerantDeployment extends pulumi.CustomResource {
    /**
     * Get an existing CopilotFaultTolerantDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CopilotFaultTolerantDeploymentState, opts?: pulumi.CustomResourceOptions): CopilotFaultTolerantDeployment {
        return new CopilotFaultTolerantDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/copilotFaultTolerantDeployment:CopilotFaultTolerantDeployment';

    /**
     * Returns true if the given object is an instance of CopilotFaultTolerantDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CopilotFaultTolerantDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CopilotFaultTolerantDeployment.__pulumiType;
    }

    /**
     * Aviatrix access account name.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * Cloud type.
     */
    public readonly cloudType!: pulumi.Output<number>;
    /**
     * Cluster data nodes.
     */
    public readonly clusterDataNodes!: pulumi.Output<outputs.CopilotFaultTolerantDeploymentClusterDataNode[]>;
    /**
     * Controller service account password.
     */
    public readonly controllerServiceAccountPassword!: pulumi.Output<string>;
    /**
     * Controller service account username.
     */
    public readonly controllerServiceAccountUsername!: pulumi.Output<string>;
    /**
     * Instance size.
     */
    public readonly mainCopilotInstanceSize!: pulumi.Output<string | undefined>;
    /**
     * Copilot private IP.
     */
    public /*out*/ readonly mainCopilotPrivateIp!: pulumi.Output<string>;
    /**
     * Copilot public IP.
     */
    public /*out*/ readonly mainCopilotPublicIp!: pulumi.Output<string>;
    /**
     * Subnet CIDR.
     */
    public readonly mainCopilotSubnet!: pulumi.Output<string>;
    /**
     * VPC ID.
     */
    public readonly mainCopilotVpcId!: pulumi.Output<string>;
    /**
     * Region.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a CopilotFaultTolerantDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CopilotFaultTolerantDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CopilotFaultTolerantDeploymentArgs | CopilotFaultTolerantDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CopilotFaultTolerantDeploymentState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["clusterDataNodes"] = state ? state.clusterDataNodes : undefined;
            resourceInputs["controllerServiceAccountPassword"] = state ? state.controllerServiceAccountPassword : undefined;
            resourceInputs["controllerServiceAccountUsername"] = state ? state.controllerServiceAccountUsername : undefined;
            resourceInputs["mainCopilotInstanceSize"] = state ? state.mainCopilotInstanceSize : undefined;
            resourceInputs["mainCopilotPrivateIp"] = state ? state.mainCopilotPrivateIp : undefined;
            resourceInputs["mainCopilotPublicIp"] = state ? state.mainCopilotPublicIp : undefined;
            resourceInputs["mainCopilotSubnet"] = state ? state.mainCopilotSubnet : undefined;
            resourceInputs["mainCopilotVpcId"] = state ? state.mainCopilotVpcId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as CopilotFaultTolerantDeploymentArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.cloudType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudType'");
            }
            if ((!args || args.clusterDataNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterDataNodes'");
            }
            if ((!args || args.controllerServiceAccountPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controllerServiceAccountPassword'");
            }
            if ((!args || args.controllerServiceAccountUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controllerServiceAccountUsername'");
            }
            if ((!args || args.mainCopilotSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mainCopilotSubnet'");
            }
            if ((!args || args.mainCopilotVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mainCopilotVpcId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["cloudType"] = args ? args.cloudType : undefined;
            resourceInputs["clusterDataNodes"] = args ? args.clusterDataNodes : undefined;
            resourceInputs["controllerServiceAccountPassword"] = args?.controllerServiceAccountPassword ? pulumi.secret(args.controllerServiceAccountPassword) : undefined;
            resourceInputs["controllerServiceAccountUsername"] = args ? args.controllerServiceAccountUsername : undefined;
            resourceInputs["mainCopilotInstanceSize"] = args ? args.mainCopilotInstanceSize : undefined;
            resourceInputs["mainCopilotSubnet"] = args ? args.mainCopilotSubnet : undefined;
            resourceInputs["mainCopilotVpcId"] = args ? args.mainCopilotVpcId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["mainCopilotPrivateIp"] = undefined /*out*/;
            resourceInputs["mainCopilotPublicIp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["controllerServiceAccountPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CopilotFaultTolerantDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CopilotFaultTolerantDeployment resources.
 */
export interface CopilotFaultTolerantDeploymentState {
    /**
     * Aviatrix access account name.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Cloud type.
     */
    cloudType?: pulumi.Input<number>;
    /**
     * Cluster data nodes.
     */
    clusterDataNodes?: pulumi.Input<pulumi.Input<inputs.CopilotFaultTolerantDeploymentClusterDataNode>[]>;
    /**
     * Controller service account password.
     */
    controllerServiceAccountPassword?: pulumi.Input<string>;
    /**
     * Controller service account username.
     */
    controllerServiceAccountUsername?: pulumi.Input<string>;
    /**
     * Instance size.
     */
    mainCopilotInstanceSize?: pulumi.Input<string>;
    /**
     * Copilot private IP.
     */
    mainCopilotPrivateIp?: pulumi.Input<string>;
    /**
     * Copilot public IP.
     */
    mainCopilotPublicIp?: pulumi.Input<string>;
    /**
     * Subnet CIDR.
     */
    mainCopilotSubnet?: pulumi.Input<string>;
    /**
     * VPC ID.
     */
    mainCopilotVpcId?: pulumi.Input<string>;
    /**
     * Region.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CopilotFaultTolerantDeployment resource.
 */
export interface CopilotFaultTolerantDeploymentArgs {
    /**
     * Aviatrix access account name.
     */
    accountName: pulumi.Input<string>;
    /**
     * Cloud type.
     */
    cloudType: pulumi.Input<number>;
    /**
     * Cluster data nodes.
     */
    clusterDataNodes: pulumi.Input<pulumi.Input<inputs.CopilotFaultTolerantDeploymentClusterDataNode>[]>;
    /**
     * Controller service account password.
     */
    controllerServiceAccountPassword: pulumi.Input<string>;
    /**
     * Controller service account username.
     */
    controllerServiceAccountUsername: pulumi.Input<string>;
    /**
     * Instance size.
     */
    mainCopilotInstanceSize?: pulumi.Input<string>;
    /**
     * Subnet CIDR.
     */
    mainCopilotSubnet: pulumi.Input<string>;
    /**
     * VPC ID.
     */
    mainCopilotVpcId: pulumi.Input<string>;
    /**
     * Region.
     */
    region: pulumi.Input<string>;
}
