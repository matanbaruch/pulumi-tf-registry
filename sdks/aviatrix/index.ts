// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountUserArgs, AccountUserState } from "./accountUser";
export type AccountUser = import("./accountUser").AccountUser;
export const AccountUser: typeof import("./accountUser").AccountUser = null as any;
utilities.lazyLoad(exports, ["AccountUser"], () => require("./accountUser"));

export { AwsGuardDutyArgs, AwsGuardDutyState } from "./awsGuardDuty";
export type AwsGuardDuty = import("./awsGuardDuty").AwsGuardDuty;
export const AwsGuardDuty: typeof import("./awsGuardDuty").AwsGuardDuty = null as any;
utilities.lazyLoad(exports, ["AwsGuardDuty"], () => require("./awsGuardDuty"));

export { AwsPeerArgs, AwsPeerState } from "./awsPeer";
export type AwsPeer = import("./awsPeer").AwsPeer;
export const AwsPeer: typeof import("./awsPeer").AwsPeer = null as any;
utilities.lazyLoad(exports, ["AwsPeer"], () => require("./awsPeer"));

export { AwsTgwArgs, AwsTgwState } from "./awsTgw";
export type AwsTgw = import("./awsTgw").AwsTgw;
export const AwsTgw: typeof import("./awsTgw").AwsTgw = null as any;
utilities.lazyLoad(exports, ["AwsTgw"], () => require("./awsTgw"));

export { AwsTgwConnectArgs, AwsTgwConnectState } from "./awsTgwConnect";
export type AwsTgwConnect = import("./awsTgwConnect").AwsTgwConnect;
export const AwsTgwConnect: typeof import("./awsTgwConnect").AwsTgwConnect = null as any;
utilities.lazyLoad(exports, ["AwsTgwConnect"], () => require("./awsTgwConnect"));

export { AwsTgwConnectPeerArgs, AwsTgwConnectPeerState } from "./awsTgwConnectPeer";
export type AwsTgwConnectPeer = import("./awsTgwConnectPeer").AwsTgwConnectPeer;
export const AwsTgwConnectPeer: typeof import("./awsTgwConnectPeer").AwsTgwConnectPeer = null as any;
utilities.lazyLoad(exports, ["AwsTgwConnectPeer"], () => require("./awsTgwConnectPeer"));

export { AwsTgwDirectconnectArgs, AwsTgwDirectconnectState } from "./awsTgwDirectconnect";
export type AwsTgwDirectconnect = import("./awsTgwDirectconnect").AwsTgwDirectconnect;
export const AwsTgwDirectconnect: typeof import("./awsTgwDirectconnect").AwsTgwDirectconnect = null as any;
utilities.lazyLoad(exports, ["AwsTgwDirectconnect"], () => require("./awsTgwDirectconnect"));

export { AwsTgwIntraDomainInspectionArgs, AwsTgwIntraDomainInspectionState } from "./awsTgwIntraDomainInspection";
export type AwsTgwIntraDomainInspection = import("./awsTgwIntraDomainInspection").AwsTgwIntraDomainInspection;
export const AwsTgwIntraDomainInspection: typeof import("./awsTgwIntraDomainInspection").AwsTgwIntraDomainInspection = null as any;
utilities.lazyLoad(exports, ["AwsTgwIntraDomainInspection"], () => require("./awsTgwIntraDomainInspection"));

export { AwsTgwNetworkDomainArgs, AwsTgwNetworkDomainState } from "./awsTgwNetworkDomain";
export type AwsTgwNetworkDomain = import("./awsTgwNetworkDomain").AwsTgwNetworkDomain;
export const AwsTgwNetworkDomain: typeof import("./awsTgwNetworkDomain").AwsTgwNetworkDomain = null as any;
utilities.lazyLoad(exports, ["AwsTgwNetworkDomain"], () => require("./awsTgwNetworkDomain"));

export { AwsTgwPeeringArgs, AwsTgwPeeringState } from "./awsTgwPeering";
export type AwsTgwPeering = import("./awsTgwPeering").AwsTgwPeering;
export const AwsTgwPeering: typeof import("./awsTgwPeering").AwsTgwPeering = null as any;
utilities.lazyLoad(exports, ["AwsTgwPeering"], () => require("./awsTgwPeering"));

export { AwsTgwPeeringDomainConnArgs, AwsTgwPeeringDomainConnState } from "./awsTgwPeeringDomainConn";
export type AwsTgwPeeringDomainConn = import("./awsTgwPeeringDomainConn").AwsTgwPeeringDomainConn;
export const AwsTgwPeeringDomainConn: typeof import("./awsTgwPeeringDomainConn").AwsTgwPeeringDomainConn = null as any;
utilities.lazyLoad(exports, ["AwsTgwPeeringDomainConn"], () => require("./awsTgwPeeringDomainConn"));

export { AwsTgwTransitGatewayAttachmentArgs, AwsTgwTransitGatewayAttachmentState } from "./awsTgwTransitGatewayAttachment";
export type AwsTgwTransitGatewayAttachment = import("./awsTgwTransitGatewayAttachment").AwsTgwTransitGatewayAttachment;
export const AwsTgwTransitGatewayAttachment: typeof import("./awsTgwTransitGatewayAttachment").AwsTgwTransitGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["AwsTgwTransitGatewayAttachment"], () => require("./awsTgwTransitGatewayAttachment"));

export { AwsTgwVpcAttachmentArgs, AwsTgwVpcAttachmentState } from "./awsTgwVpcAttachment";
export type AwsTgwVpcAttachment = import("./awsTgwVpcAttachment").AwsTgwVpcAttachment;
export const AwsTgwVpcAttachment: typeof import("./awsTgwVpcAttachment").AwsTgwVpcAttachment = null as any;
utilities.lazyLoad(exports, ["AwsTgwVpcAttachment"], () => require("./awsTgwVpcAttachment"));

export { AwsTgwVpnConnArgs, AwsTgwVpnConnState } from "./awsTgwVpnConn";
export type AwsTgwVpnConn = import("./awsTgwVpnConn").AwsTgwVpnConn;
export const AwsTgwVpnConn: typeof import("./awsTgwVpnConn").AwsTgwVpnConn = null as any;
utilities.lazyLoad(exports, ["AwsTgwVpnConn"], () => require("./awsTgwVpnConn"));

export { AzurePeerArgs, AzurePeerState } from "./azurePeer";
export type AzurePeer = import("./azurePeer").AzurePeer;
export const AzurePeer: typeof import("./azurePeer").AzurePeer = null as any;
utilities.lazyLoad(exports, ["AzurePeer"], () => require("./azurePeer"));

export { AzureSpokeNativePeeringArgs, AzureSpokeNativePeeringState } from "./azureSpokeNativePeering";
export type AzureSpokeNativePeering = import("./azureSpokeNativePeering").AzureSpokeNativePeering;
export const AzureSpokeNativePeering: typeof import("./azureSpokeNativePeering").AzureSpokeNativePeering = null as any;
utilities.lazyLoad(exports, ["AzureSpokeNativePeering"], () => require("./azureSpokeNativePeering"));

export { AzureVngConnArgs, AzureVngConnState } from "./azureVngConn";
export type AzureVngConn = import("./azureVngConn").AzureVngConn;
export const AzureVngConn: typeof import("./azureVngConn").AzureVngConn = null as any;
utilities.lazyLoad(exports, ["AzureVngConn"], () => require("./azureVngConn"));

export { CentralizedTransitFirenetArgs, CentralizedTransitFirenetState } from "./centralizedTransitFirenet";
export type CentralizedTransitFirenet = import("./centralizedTransitFirenet").CentralizedTransitFirenet;
export const CentralizedTransitFirenet: typeof import("./centralizedTransitFirenet").CentralizedTransitFirenet = null as any;
utilities.lazyLoad(exports, ["CentralizedTransitFirenet"], () => require("./centralizedTransitFirenet"));

export { CloudnRegistrationArgs, CloudnRegistrationState } from "./cloudnRegistration";
export type CloudnRegistration = import("./cloudnRegistration").CloudnRegistration;
export const CloudnRegistration: typeof import("./cloudnRegistration").CloudnRegistration = null as any;
utilities.lazyLoad(exports, ["CloudnRegistration"], () => require("./cloudnRegistration"));

export { CloudnTransitGatewayAttachmentArgs, CloudnTransitGatewayAttachmentState } from "./cloudnTransitGatewayAttachment";
export type CloudnTransitGatewayAttachment = import("./cloudnTransitGatewayAttachment").CloudnTransitGatewayAttachment;
export const CloudnTransitGatewayAttachment: typeof import("./cloudnTransitGatewayAttachment").CloudnTransitGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["CloudnTransitGatewayAttachment"], () => require("./cloudnTransitGatewayAttachment"));

export { CloudwatchAgentArgs, CloudwatchAgentState } from "./cloudwatchAgent";
export type CloudwatchAgent = import("./cloudwatchAgent").CloudwatchAgent;
export const CloudwatchAgent: typeof import("./cloudwatchAgent").CloudwatchAgent = null as any;
utilities.lazyLoad(exports, ["CloudwatchAgent"], () => require("./cloudwatchAgent"));

export { ControllerAccessAllowListConfigArgs, ControllerAccessAllowListConfigState } from "./controllerAccessAllowListConfig";
export type ControllerAccessAllowListConfig = import("./controllerAccessAllowListConfig").ControllerAccessAllowListConfig;
export const ControllerAccessAllowListConfig: typeof import("./controllerAccessAllowListConfig").ControllerAccessAllowListConfig = null as any;
utilities.lazyLoad(exports, ["ControllerAccessAllowListConfig"], () => require("./controllerAccessAllowListConfig"));

export { ControllerBgpMaxAsLimitConfigArgs, ControllerBgpMaxAsLimitConfigState } from "./controllerBgpMaxAsLimitConfig";
export type ControllerBgpMaxAsLimitConfig = import("./controllerBgpMaxAsLimitConfig").ControllerBgpMaxAsLimitConfig;
export const ControllerBgpMaxAsLimitConfig: typeof import("./controllerBgpMaxAsLimitConfig").ControllerBgpMaxAsLimitConfig = null as any;
utilities.lazyLoad(exports, ["ControllerBgpMaxAsLimitConfig"], () => require("./controllerBgpMaxAsLimitConfig"));

export { ControllerCertDomainConfigArgs, ControllerCertDomainConfigState } from "./controllerCertDomainConfig";
export type ControllerCertDomainConfig = import("./controllerCertDomainConfig").ControllerCertDomainConfig;
export const ControllerCertDomainConfig: typeof import("./controllerCertDomainConfig").ControllerCertDomainConfig = null as any;
utilities.lazyLoad(exports, ["ControllerCertDomainConfig"], () => require("./controllerCertDomainConfig"));

export { ControllerConfigArgs, ControllerConfigState } from "./controllerConfig";
export type ControllerConfig = import("./controllerConfig").ControllerConfig;
export const ControllerConfig: typeof import("./controllerConfig").ControllerConfig = null as any;
utilities.lazyLoad(exports, ["ControllerConfig"], () => require("./controllerConfig"));

export { ControllerEmailConfigArgs, ControllerEmailConfigState } from "./controllerEmailConfig";
export type ControllerEmailConfig = import("./controllerEmailConfig").ControllerEmailConfig;
export const ControllerEmailConfig: typeof import("./controllerEmailConfig").ControllerEmailConfig = null as any;
utilities.lazyLoad(exports, ["ControllerEmailConfig"], () => require("./controllerEmailConfig"));

export { ControllerEmailExceptionNotificationConfigArgs, ControllerEmailExceptionNotificationConfigState } from "./controllerEmailExceptionNotificationConfig";
export type ControllerEmailExceptionNotificationConfig = import("./controllerEmailExceptionNotificationConfig").ControllerEmailExceptionNotificationConfig;
export const ControllerEmailExceptionNotificationConfig: typeof import("./controllerEmailExceptionNotificationConfig").ControllerEmailExceptionNotificationConfig = null as any;
utilities.lazyLoad(exports, ["ControllerEmailExceptionNotificationConfig"], () => require("./controllerEmailExceptionNotificationConfig"));

export { ControllerGatewayKeepaliveConfigArgs, ControllerGatewayKeepaliveConfigState } from "./controllerGatewayKeepaliveConfig";
export type ControllerGatewayKeepaliveConfig = import("./controllerGatewayKeepaliveConfig").ControllerGatewayKeepaliveConfig;
export const ControllerGatewayKeepaliveConfig: typeof import("./controllerGatewayKeepaliveConfig").ControllerGatewayKeepaliveConfig = null as any;
utilities.lazyLoad(exports, ["ControllerGatewayKeepaliveConfig"], () => require("./controllerGatewayKeepaliveConfig"));

export { ControllerPrivateModeConfigArgs, ControllerPrivateModeConfigState } from "./controllerPrivateModeConfig";
export type ControllerPrivateModeConfig = import("./controllerPrivateModeConfig").ControllerPrivateModeConfig;
export const ControllerPrivateModeConfig: typeof import("./controllerPrivateModeConfig").ControllerPrivateModeConfig = null as any;
utilities.lazyLoad(exports, ["ControllerPrivateModeConfig"], () => require("./controllerPrivateModeConfig"));

export { ControllerPrivateOobArgs, ControllerPrivateOobState } from "./controllerPrivateOob";
export type ControllerPrivateOob = import("./controllerPrivateOob").ControllerPrivateOob;
export const ControllerPrivateOob: typeof import("./controllerPrivateOob").ControllerPrivateOob = null as any;
utilities.lazyLoad(exports, ["ControllerPrivateOob"], () => require("./controllerPrivateOob"));

export { ControllerSecurityGroupManagementConfigArgs, ControllerSecurityGroupManagementConfigState } from "./controllerSecurityGroupManagementConfig";
export type ControllerSecurityGroupManagementConfig = import("./controllerSecurityGroupManagementConfig").ControllerSecurityGroupManagementConfig;
export const ControllerSecurityGroupManagementConfig: typeof import("./controllerSecurityGroupManagementConfig").ControllerSecurityGroupManagementConfig = null as any;
utilities.lazyLoad(exports, ["ControllerSecurityGroupManagementConfig"], () => require("./controllerSecurityGroupManagementConfig"));

export { CopilotAssociationArgs, CopilotAssociationState } from "./copilotAssociation";
export type CopilotAssociation = import("./copilotAssociation").CopilotAssociation;
export const CopilotAssociation: typeof import("./copilotAssociation").CopilotAssociation = null as any;
utilities.lazyLoad(exports, ["CopilotAssociation"], () => require("./copilotAssociation"));

export { CopilotFaultTolerantDeploymentArgs, CopilotFaultTolerantDeploymentState } from "./copilotFaultTolerantDeployment";
export type CopilotFaultTolerantDeployment = import("./copilotFaultTolerantDeployment").CopilotFaultTolerantDeployment;
export const CopilotFaultTolerantDeployment: typeof import("./copilotFaultTolerantDeployment").CopilotFaultTolerantDeployment = null as any;
utilities.lazyLoad(exports, ["CopilotFaultTolerantDeployment"], () => require("./copilotFaultTolerantDeployment"));

export { CopilotSecurityGroupManagementConfigArgs, CopilotSecurityGroupManagementConfigState } from "./copilotSecurityGroupManagementConfig";
export type CopilotSecurityGroupManagementConfig = import("./copilotSecurityGroupManagementConfig").CopilotSecurityGroupManagementConfig;
export const CopilotSecurityGroupManagementConfig: typeof import("./copilotSecurityGroupManagementConfig").CopilotSecurityGroupManagementConfig = null as any;
utilities.lazyLoad(exports, ["CopilotSecurityGroupManagementConfig"], () => require("./copilotSecurityGroupManagementConfig"));

export { CopilotSimpleDeploymentArgs, CopilotSimpleDeploymentState } from "./copilotSimpleDeployment";
export type CopilotSimpleDeployment = import("./copilotSimpleDeployment").CopilotSimpleDeployment;
export const CopilotSimpleDeployment: typeof import("./copilotSimpleDeployment").CopilotSimpleDeployment = null as any;
utilities.lazyLoad(exports, ["CopilotSimpleDeployment"], () => require("./copilotSimpleDeployment"));

export { DatadogAgentArgs, DatadogAgentState } from "./datadogAgent";
export type DatadogAgent = import("./datadogAgent").DatadogAgent;
export const DatadogAgent: typeof import("./datadogAgent").DatadogAgent = null as any;
utilities.lazyLoad(exports, ["DatadogAgent"], () => require("./datadogAgent"));

export { DeviceInterfaceConfigArgs, DeviceInterfaceConfigState } from "./deviceInterfaceConfig";
export type DeviceInterfaceConfig = import("./deviceInterfaceConfig").DeviceInterfaceConfig;
export const DeviceInterfaceConfig: typeof import("./deviceInterfaceConfig").DeviceInterfaceConfig = null as any;
utilities.lazyLoad(exports, ["DeviceInterfaceConfig"], () => require("./deviceInterfaceConfig"));

export { DistributedFirewallingConfigArgs, DistributedFirewallingConfigState } from "./distributedFirewallingConfig";
export type DistributedFirewallingConfig = import("./distributedFirewallingConfig").DistributedFirewallingConfig;
export const DistributedFirewallingConfig: typeof import("./distributedFirewallingConfig").DistributedFirewallingConfig = null as any;
utilities.lazyLoad(exports, ["DistributedFirewallingConfig"], () => require("./distributedFirewallingConfig"));

export { DistributedFirewallingIntraVpcArgs, DistributedFirewallingIntraVpcState } from "./distributedFirewallingIntraVpc";
export type DistributedFirewallingIntraVpc = import("./distributedFirewallingIntraVpc").DistributedFirewallingIntraVpc;
export const DistributedFirewallingIntraVpc: typeof import("./distributedFirewallingIntraVpc").DistributedFirewallingIntraVpc = null as any;
utilities.lazyLoad(exports, ["DistributedFirewallingIntraVpc"], () => require("./distributedFirewallingIntraVpc"));

export { DistributedFirewallingOriginCertEnforcementConfigArgs, DistributedFirewallingOriginCertEnforcementConfigState } from "./distributedFirewallingOriginCertEnforcementConfig";
export type DistributedFirewallingOriginCertEnforcementConfig = import("./distributedFirewallingOriginCertEnforcementConfig").DistributedFirewallingOriginCertEnforcementConfig;
export const DistributedFirewallingOriginCertEnforcementConfig: typeof import("./distributedFirewallingOriginCertEnforcementConfig").DistributedFirewallingOriginCertEnforcementConfig = null as any;
utilities.lazyLoad(exports, ["DistributedFirewallingOriginCertEnforcementConfig"], () => require("./distributedFirewallingOriginCertEnforcementConfig"));

export { DistributedFirewallingPolicyListArgs, DistributedFirewallingPolicyListState } from "./distributedFirewallingPolicyList";
export type DistributedFirewallingPolicyList = import("./distributedFirewallingPolicyList").DistributedFirewallingPolicyList;
export const DistributedFirewallingPolicyList: typeof import("./distributedFirewallingPolicyList").DistributedFirewallingPolicyList = null as any;
utilities.lazyLoad(exports, ["DistributedFirewallingPolicyList"], () => require("./distributedFirewallingPolicyList"));

export { DistributedFirewallingProxyCaConfigArgs, DistributedFirewallingProxyCaConfigState } from "./distributedFirewallingProxyCaConfig";
export type DistributedFirewallingProxyCaConfig = import("./distributedFirewallingProxyCaConfig").DistributedFirewallingProxyCaConfig;
export const DistributedFirewallingProxyCaConfig: typeof import("./distributedFirewallingProxyCaConfig").DistributedFirewallingProxyCaConfig = null as any;
utilities.lazyLoad(exports, ["DistributedFirewallingProxyCaConfig"], () => require("./distributedFirewallingProxyCaConfig"));

export { EdgeCspArgs, EdgeCspState } from "./edgeCsp";
export type EdgeCsp = import("./edgeCsp").EdgeCsp;
export const EdgeCsp: typeof import("./edgeCsp").EdgeCsp = null as any;
utilities.lazyLoad(exports, ["EdgeCsp"], () => require("./edgeCsp"));

export { EdgeCspHaArgs, EdgeCspHaState } from "./edgeCspHa";
export type EdgeCspHa = import("./edgeCspHa").EdgeCspHa;
export const EdgeCspHa: typeof import("./edgeCspHa").EdgeCspHa = null as any;
utilities.lazyLoad(exports, ["EdgeCspHa"], () => require("./edgeCspHa"));

export { EdgeEquinixArgs, EdgeEquinixState } from "./edgeEquinix";
export type EdgeEquinix = import("./edgeEquinix").EdgeEquinix;
export const EdgeEquinix: typeof import("./edgeEquinix").EdgeEquinix = null as any;
utilities.lazyLoad(exports, ["EdgeEquinix"], () => require("./edgeEquinix"));

export { EdgeEquinixHaArgs, EdgeEquinixHaState } from "./edgeEquinixHa";
export type EdgeEquinixHa = import("./edgeEquinixHa").EdgeEquinixHa;
export const EdgeEquinixHa: typeof import("./edgeEquinixHa").EdgeEquinixHa = null as any;
utilities.lazyLoad(exports, ["EdgeEquinixHa"], () => require("./edgeEquinixHa"));

export { EdgeGatewaySelfmanagedArgs, EdgeGatewaySelfmanagedState } from "./edgeGatewaySelfmanaged";
export type EdgeGatewaySelfmanaged = import("./edgeGatewaySelfmanaged").EdgeGatewaySelfmanaged;
export const EdgeGatewaySelfmanaged: typeof import("./edgeGatewaySelfmanaged").EdgeGatewaySelfmanaged = null as any;
utilities.lazyLoad(exports, ["EdgeGatewaySelfmanaged"], () => require("./edgeGatewaySelfmanaged"));

export { EdgeGatewaySelfmanagedHaArgs, EdgeGatewaySelfmanagedHaState } from "./edgeGatewaySelfmanagedHa";
export type EdgeGatewaySelfmanagedHa = import("./edgeGatewaySelfmanagedHa").EdgeGatewaySelfmanagedHa;
export const EdgeGatewaySelfmanagedHa: typeof import("./edgeGatewaySelfmanagedHa").EdgeGatewaySelfmanagedHa = null as any;
utilities.lazyLoad(exports, ["EdgeGatewaySelfmanagedHa"], () => require("./edgeGatewaySelfmanagedHa"));

export { EdgeNeoArgs, EdgeNeoState } from "./edgeNeo";
export type EdgeNeo = import("./edgeNeo").EdgeNeo;
export const EdgeNeo: typeof import("./edgeNeo").EdgeNeo = null as any;
utilities.lazyLoad(exports, ["EdgeNeo"], () => require("./edgeNeo"));

export { EdgeNeoDeviceOnboardingArgs, EdgeNeoDeviceOnboardingState } from "./edgeNeoDeviceOnboarding";
export type EdgeNeoDeviceOnboarding = import("./edgeNeoDeviceOnboarding").EdgeNeoDeviceOnboarding;
export const EdgeNeoDeviceOnboarding: typeof import("./edgeNeoDeviceOnboarding").EdgeNeoDeviceOnboarding = null as any;
utilities.lazyLoad(exports, ["EdgeNeoDeviceOnboarding"], () => require("./edgeNeoDeviceOnboarding"));

export { EdgeNeoHaArgs, EdgeNeoHaState } from "./edgeNeoHa";
export type EdgeNeoHa = import("./edgeNeoHa").EdgeNeoHa;
export const EdgeNeoHa: typeof import("./edgeNeoHa").EdgeNeoHa = null as any;
utilities.lazyLoad(exports, ["EdgeNeoHa"], () => require("./edgeNeoHa"));

export { EdgePlatformArgs, EdgePlatformState } from "./edgePlatform";
export type EdgePlatform = import("./edgePlatform").EdgePlatform;
export const EdgePlatform: typeof import("./edgePlatform").EdgePlatform = null as any;
utilities.lazyLoad(exports, ["EdgePlatform"], () => require("./edgePlatform"));

export { EdgePlatformDeviceOnboardingArgs, EdgePlatformDeviceOnboardingState } from "./edgePlatformDeviceOnboarding";
export type EdgePlatformDeviceOnboarding = import("./edgePlatformDeviceOnboarding").EdgePlatformDeviceOnboarding;
export const EdgePlatformDeviceOnboarding: typeof import("./edgePlatformDeviceOnboarding").EdgePlatformDeviceOnboarding = null as any;
utilities.lazyLoad(exports, ["EdgePlatformDeviceOnboarding"], () => require("./edgePlatformDeviceOnboarding"));

export { EdgePlatformHaArgs, EdgePlatformHaState } from "./edgePlatformHa";
export type EdgePlatformHa = import("./edgePlatformHa").EdgePlatformHa;
export const EdgePlatformHa: typeof import("./edgePlatformHa").EdgePlatformHa = null as any;
utilities.lazyLoad(exports, ["EdgePlatformHa"], () => require("./edgePlatformHa"));

export { EdgeSpokeArgs, EdgeSpokeState } from "./edgeSpoke";
export type EdgeSpoke = import("./edgeSpoke").EdgeSpoke;
export const EdgeSpoke: typeof import("./edgeSpoke").EdgeSpoke = null as any;
utilities.lazyLoad(exports, ["EdgeSpoke"], () => require("./edgeSpoke"));

export { EdgeSpokeExternalDeviceConnArgs, EdgeSpokeExternalDeviceConnState } from "./edgeSpokeExternalDeviceConn";
export type EdgeSpokeExternalDeviceConn = import("./edgeSpokeExternalDeviceConn").EdgeSpokeExternalDeviceConn;
export const EdgeSpokeExternalDeviceConn: typeof import("./edgeSpokeExternalDeviceConn").EdgeSpokeExternalDeviceConn = null as any;
utilities.lazyLoad(exports, ["EdgeSpokeExternalDeviceConn"], () => require("./edgeSpokeExternalDeviceConn"));

export { EdgeSpokeTransitAttachmentArgs, EdgeSpokeTransitAttachmentState } from "./edgeSpokeTransitAttachment";
export type EdgeSpokeTransitAttachment = import("./edgeSpokeTransitAttachment").EdgeSpokeTransitAttachment;
export const EdgeSpokeTransitAttachment: typeof import("./edgeSpokeTransitAttachment").EdgeSpokeTransitAttachment = null as any;
utilities.lazyLoad(exports, ["EdgeSpokeTransitAttachment"], () => require("./edgeSpokeTransitAttachment"));

export { EdgeVmSelfmanagedArgs, EdgeVmSelfmanagedState } from "./edgeVmSelfmanaged";
export type EdgeVmSelfmanaged = import("./edgeVmSelfmanaged").EdgeVmSelfmanaged;
export const EdgeVmSelfmanaged: typeof import("./edgeVmSelfmanaged").EdgeVmSelfmanaged = null as any;
utilities.lazyLoad(exports, ["EdgeVmSelfmanaged"], () => require("./edgeVmSelfmanaged"));

export { EdgeVmSelfmanagedHaArgs, EdgeVmSelfmanagedHaState } from "./edgeVmSelfmanagedHa";
export type EdgeVmSelfmanagedHa = import("./edgeVmSelfmanagedHa").EdgeVmSelfmanagedHa;
export const EdgeVmSelfmanagedHa: typeof import("./edgeVmSelfmanagedHa").EdgeVmSelfmanagedHa = null as any;
utilities.lazyLoad(exports, ["EdgeVmSelfmanagedHa"], () => require("./edgeVmSelfmanagedHa"));

export { EdgeZededaArgs, EdgeZededaState } from "./edgeZededa";
export type EdgeZededa = import("./edgeZededa").EdgeZededa;
export const EdgeZededa: typeof import("./edgeZededa").EdgeZededa = null as any;
utilities.lazyLoad(exports, ["EdgeZededa"], () => require("./edgeZededa"));

export { EdgeZededaHaArgs, EdgeZededaHaState } from "./edgeZededaHa";
export type EdgeZededaHa = import("./edgeZededaHa").EdgeZededaHa;
export const EdgeZededaHa: typeof import("./edgeZededaHa").EdgeZededaHa = null as any;
utilities.lazyLoad(exports, ["EdgeZededaHa"], () => require("./edgeZededaHa"));

export { FilebeatForwarderArgs, FilebeatForwarderState } from "./filebeatForwarder";
export type FilebeatForwarder = import("./filebeatForwarder").FilebeatForwarder;
export const FilebeatForwarder: typeof import("./filebeatForwarder").FilebeatForwarder = null as any;
utilities.lazyLoad(exports, ["FilebeatForwarder"], () => require("./filebeatForwarder"));

export { FirenetArgs, FirenetState } from "./firenet";
export type Firenet = import("./firenet").Firenet;
export const Firenet: typeof import("./firenet").Firenet = null as any;
utilities.lazyLoad(exports, ["Firenet"], () => require("./firenet"));

export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { FirewallInstanceArgs, FirewallInstanceState } from "./firewallInstance";
export type FirewallInstance = import("./firewallInstance").FirewallInstance;
export const FirewallInstance: typeof import("./firewallInstance").FirewallInstance = null as any;
utilities.lazyLoad(exports, ["FirewallInstance"], () => require("./firewallInstance"));

export { FirewallInstanceAssociationArgs, FirewallInstanceAssociationState } from "./firewallInstanceAssociation";
export type FirewallInstanceAssociation = import("./firewallInstanceAssociation").FirewallInstanceAssociation;
export const FirewallInstanceAssociation: typeof import("./firewallInstanceAssociation").FirewallInstanceAssociation = null as any;
utilities.lazyLoad(exports, ["FirewallInstanceAssociation"], () => require("./firewallInstanceAssociation"));

export { FirewallManagementAccessArgs, FirewallManagementAccessState } from "./firewallManagementAccess";
export type FirewallManagementAccess = import("./firewallManagementAccess").FirewallManagementAccess;
export const FirewallManagementAccess: typeof import("./firewallManagementAccess").FirewallManagementAccess = null as any;
utilities.lazyLoad(exports, ["FirewallManagementAccess"], () => require("./firewallManagementAccess"));

export { FirewallPolicyArgs, FirewallPolicyState } from "./firewallPolicy";
export type FirewallPolicy = import("./firewallPolicy").FirewallPolicy;
export const FirewallPolicy: typeof import("./firewallPolicy").FirewallPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallPolicy"], () => require("./firewallPolicy"));

export { FirewallTagArgs, FirewallTagState } from "./firewallTag";
export type FirewallTag = import("./firewallTag").FirewallTag;
export const FirewallTag: typeof import("./firewallTag").FirewallTag = null as any;
utilities.lazyLoad(exports, ["FirewallTag"], () => require("./firewallTag"));

export { FqdnArgs, FqdnState } from "./fqdn";
export type Fqdn = import("./fqdn").Fqdn;
export const Fqdn: typeof import("./fqdn").Fqdn = null as any;
utilities.lazyLoad(exports, ["Fqdn"], () => require("./fqdn"));

export { FqdnGlobalConfigArgs, FqdnGlobalConfigState } from "./fqdnGlobalConfig";
export type FqdnGlobalConfig = import("./fqdnGlobalConfig").FqdnGlobalConfig;
export const FqdnGlobalConfig: typeof import("./fqdnGlobalConfig").FqdnGlobalConfig = null as any;
utilities.lazyLoad(exports, ["FqdnGlobalConfig"], () => require("./fqdnGlobalConfig"));

export { FqdnPassThroughArgs, FqdnPassThroughState } from "./fqdnPassThrough";
export type FqdnPassThrough = import("./fqdnPassThrough").FqdnPassThrough;
export const FqdnPassThrough: typeof import("./fqdnPassThrough").FqdnPassThrough = null as any;
utilities.lazyLoad(exports, ["FqdnPassThrough"], () => require("./fqdnPassThrough"));

export { FqdnTagRuleArgs, FqdnTagRuleState } from "./fqdnTagRule";
export type FqdnTagRule = import("./fqdnTagRule").FqdnTagRule;
export const FqdnTagRule: typeof import("./fqdnTagRule").FqdnTagRule = null as any;
utilities.lazyLoad(exports, ["FqdnTagRule"], () => require("./fqdnTagRule"));

export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GatewayCertificateConfigArgs, GatewayCertificateConfigState } from "./gatewayCertificateConfig";
export type GatewayCertificateConfig = import("./gatewayCertificateConfig").GatewayCertificateConfig;
export const GatewayCertificateConfig: typeof import("./gatewayCertificateConfig").GatewayCertificateConfig = null as any;
utilities.lazyLoad(exports, ["GatewayCertificateConfig"], () => require("./gatewayCertificateConfig"));

export { GatewayDnatArgs, GatewayDnatState } from "./gatewayDnat";
export type GatewayDnat = import("./gatewayDnat").GatewayDnat;
export const GatewayDnat: typeof import("./gatewayDnat").GatewayDnat = null as any;
utilities.lazyLoad(exports, ["GatewayDnat"], () => require("./gatewayDnat"));

export { GatewaySnatArgs, GatewaySnatState } from "./gatewaySnat";
export type GatewaySnat = import("./gatewaySnat").GatewaySnat;
export const GatewaySnat: typeof import("./gatewaySnat").GatewaySnat = null as any;
utilities.lazyLoad(exports, ["GatewaySnat"], () => require("./gatewaySnat"));

export { GeoVpnArgs, GeoVpnState } from "./geoVpn";
export type GeoVpn = import("./geoVpn").GeoVpn;
export const GeoVpn: typeof import("./geoVpn").GeoVpn = null as any;
utilities.lazyLoad(exports, ["GeoVpn"], () => require("./geoVpn"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetCallerIdentityArgs, GetCallerIdentityResult, GetCallerIdentityOutputArgs } from "./getCallerIdentity";
export const getCallerIdentity: typeof import("./getCallerIdentity").getCallerIdentity = null as any;
export const getCallerIdentityOutput: typeof import("./getCallerIdentity").getCallerIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getCallerIdentity","getCallerIdentityOutput"], () => require("./getCallerIdentity"));

export { GetControllerMetadataArgs, GetControllerMetadataResult, GetControllerMetadataOutputArgs } from "./getControllerMetadata";
export const getControllerMetadata: typeof import("./getControllerMetadata").getControllerMetadata = null as any;
export const getControllerMetadataOutput: typeof import("./getControllerMetadata").getControllerMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getControllerMetadata","getControllerMetadataOutput"], () => require("./getControllerMetadata"));

export { GetDeviceInterfacesArgs, GetDeviceInterfacesResult, GetDeviceInterfacesOutputArgs } from "./getDeviceInterfaces";
export const getDeviceInterfaces: typeof import("./getDeviceInterfaces").getDeviceInterfaces = null as any;
export const getDeviceInterfacesOutput: typeof import("./getDeviceInterfaces").getDeviceInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceInterfaces","getDeviceInterfacesOutput"], () => require("./getDeviceInterfaces"));

export { GetEdgeGatewayWanInterfaceDiscoveryArgs, GetEdgeGatewayWanInterfaceDiscoveryResult, GetEdgeGatewayWanInterfaceDiscoveryOutputArgs } from "./getEdgeGatewayWanInterfaceDiscovery";
export const getEdgeGatewayWanInterfaceDiscovery: typeof import("./getEdgeGatewayWanInterfaceDiscovery").getEdgeGatewayWanInterfaceDiscovery = null as any;
export const getEdgeGatewayWanInterfaceDiscoveryOutput: typeof import("./getEdgeGatewayWanInterfaceDiscovery").getEdgeGatewayWanInterfaceDiscoveryOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeGatewayWanInterfaceDiscovery","getEdgeGatewayWanInterfaceDiscoveryOutput"], () => require("./getEdgeGatewayWanInterfaceDiscovery"));

export { GetFirenetArgs, GetFirenetResult, GetFirenetOutputArgs } from "./getFirenet";
export const getFirenet: typeof import("./getFirenet").getFirenet = null as any;
export const getFirenetOutput: typeof import("./getFirenet").getFirenetOutput = null as any;
utilities.lazyLoad(exports, ["getFirenet","getFirenetOutput"], () => require("./getFirenet"));

export { GetFirenetFirewallManagerArgs, GetFirenetFirewallManagerResult, GetFirenetFirewallManagerOutputArgs } from "./getFirenetFirewallManager";
export const getFirenetFirewallManager: typeof import("./getFirenetFirewallManager").getFirenetFirewallManager = null as any;
export const getFirenetFirewallManagerOutput: typeof import("./getFirenetFirewallManager").getFirenetFirewallManagerOutput = null as any;
utilities.lazyLoad(exports, ["getFirenetFirewallManager","getFirenetFirewallManagerOutput"], () => require("./getFirenetFirewallManager"));

export { GetFirenetVendorIntegrationArgs, GetFirenetVendorIntegrationResult, GetFirenetVendorIntegrationOutputArgs } from "./getFirenetVendorIntegration";
export const getFirenetVendorIntegration: typeof import("./getFirenetVendorIntegration").getFirenetVendorIntegration = null as any;
export const getFirenetVendorIntegrationOutput: typeof import("./getFirenetVendorIntegration").getFirenetVendorIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getFirenetVendorIntegration","getFirenetVendorIntegrationOutput"], () => require("./getFirenetVendorIntegration"));

export { GetFirewallArgs, GetFirewallResult, GetFirewallOutputArgs } from "./getFirewall";
export const getFirewall: typeof import("./getFirewall").getFirewall = null as any;
export const getFirewallOutput: typeof import("./getFirewall").getFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getFirewall","getFirewallOutput"], () => require("./getFirewall"));

export { GetFirewallInstanceImagesArgs, GetFirewallInstanceImagesResult, GetFirewallInstanceImagesOutputArgs } from "./getFirewallInstanceImages";
export const getFirewallInstanceImages: typeof import("./getFirewallInstanceImages").getFirewallInstanceImages = null as any;
export const getFirewallInstanceImagesOutput: typeof import("./getFirewallInstanceImages").getFirewallInstanceImagesOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallInstanceImages","getFirewallInstanceImagesOutput"], () => require("./getFirewallInstanceImages"));

export { GetGatewayArgs, GetGatewayResult, GetGatewayOutputArgs } from "./getGateway";
export const getGateway: typeof import("./getGateway").getGateway = null as any;
export const getGatewayOutput: typeof import("./getGateway").getGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getGateway","getGatewayOutput"], () => require("./getGateway"));

export { GetGatewayImageArgs, GetGatewayImageResult, GetGatewayImageOutputArgs } from "./getGatewayImage";
export const getGatewayImage: typeof import("./getGatewayImage").getGatewayImage = null as any;
export const getGatewayImageOutput: typeof import("./getGatewayImage").getGatewayImageOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayImage","getGatewayImageOutput"], () => require("./getGatewayImage"));

export { GetNetworkDomainsArgs, GetNetworkDomainsResult, GetNetworkDomainsOutputArgs } from "./getNetworkDomains";
export const getNetworkDomains: typeof import("./getNetworkDomains").getNetworkDomains = null as any;
export const getNetworkDomainsOutput: typeof import("./getNetworkDomains").getNetworkDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDomains","getNetworkDomainsOutput"], () => require("./getNetworkDomains"));

export { GetSmartGroupsArgs, GetSmartGroupsResult, GetSmartGroupsOutputArgs } from "./getSmartGroups";
export const getSmartGroups: typeof import("./getSmartGroups").getSmartGroups = null as any;
export const getSmartGroupsOutput: typeof import("./getSmartGroups").getSmartGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSmartGroups","getSmartGroupsOutput"], () => require("./getSmartGroups"));

export { GetSpokeGatewayArgs, GetSpokeGatewayResult, GetSpokeGatewayOutputArgs } from "./getSpokeGateway";
export const getSpokeGateway: typeof import("./getSpokeGateway").getSpokeGateway = null as any;
export const getSpokeGatewayOutput: typeof import("./getSpokeGateway").getSpokeGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getSpokeGateway","getSpokeGatewayOutput"], () => require("./getSpokeGateway"));

export { GetSpokeGatewayInspectionSubnetsArgs, GetSpokeGatewayInspectionSubnetsResult, GetSpokeGatewayInspectionSubnetsOutputArgs } from "./getSpokeGatewayInspectionSubnets";
export const getSpokeGatewayInspectionSubnets: typeof import("./getSpokeGatewayInspectionSubnets").getSpokeGatewayInspectionSubnets = null as any;
export const getSpokeGatewayInspectionSubnetsOutput: typeof import("./getSpokeGatewayInspectionSubnets").getSpokeGatewayInspectionSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSpokeGatewayInspectionSubnets","getSpokeGatewayInspectionSubnetsOutput"], () => require("./getSpokeGatewayInspectionSubnets"));

export { GetSpokeGatewaysArgs, GetSpokeGatewaysResult, GetSpokeGatewaysOutputArgs } from "./getSpokeGateways";
export const getSpokeGateways: typeof import("./getSpokeGateways").getSpokeGateways = null as any;
export const getSpokeGatewaysOutput: typeof import("./getSpokeGateways").getSpokeGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getSpokeGateways","getSpokeGatewaysOutput"], () => require("./getSpokeGateways"));

export { GetTransitGatewayArgs, GetTransitGatewayResult, GetTransitGatewayOutputArgs } from "./getTransitGateway";
export const getTransitGateway: typeof import("./getTransitGateway").getTransitGateway = null as any;
export const getTransitGatewayOutput: typeof import("./getTransitGateway").getTransitGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGateway","getTransitGatewayOutput"], () => require("./getTransitGateway"));

export { GetTransitGatewaysArgs, GetTransitGatewaysResult, GetTransitGatewaysOutputArgs } from "./getTransitGateways";
export const getTransitGateways: typeof import("./getTransitGateways").getTransitGateways = null as any;
export const getTransitGatewaysOutput: typeof import("./getTransitGateways").getTransitGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGateways","getTransitGatewaysOutput"], () => require("./getTransitGateways"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpcTrackerArgs, GetVpcTrackerResult, GetVpcTrackerOutputArgs } from "./getVpcTracker";
export const getVpcTracker: typeof import("./getVpcTracker").getVpcTracker = null as any;
export const getVpcTrackerOutput: typeof import("./getVpcTracker").getVpcTrackerOutput = null as any;
utilities.lazyLoad(exports, ["getVpcTracker","getVpcTrackerOutput"], () => require("./getVpcTracker"));

export { GlobalVpcExcludedInstanceArgs, GlobalVpcExcludedInstanceState } from "./globalVpcExcludedInstance";
export type GlobalVpcExcludedInstance = import("./globalVpcExcludedInstance").GlobalVpcExcludedInstance;
export const GlobalVpcExcludedInstance: typeof import("./globalVpcExcludedInstance").GlobalVpcExcludedInstance = null as any;
utilities.lazyLoad(exports, ["GlobalVpcExcludedInstance"], () => require("./globalVpcExcludedInstance"));

export { GlobalVpcTaggingSettingsArgs, GlobalVpcTaggingSettingsState } from "./globalVpcTaggingSettings";
export type GlobalVpcTaggingSettings = import("./globalVpcTaggingSettings").GlobalVpcTaggingSettings;
export const GlobalVpcTaggingSettings: typeof import("./globalVpcTaggingSettings").GlobalVpcTaggingSettings = null as any;
utilities.lazyLoad(exports, ["GlobalVpcTaggingSettings"], () => require("./globalVpcTaggingSettings"));

export { NetflowAgentArgs, NetflowAgentState } from "./netflowAgent";
export type NetflowAgent = import("./netflowAgent").NetflowAgent;
export const NetflowAgent: typeof import("./netflowAgent").NetflowAgent = null as any;
utilities.lazyLoad(exports, ["NetflowAgent"], () => require("./netflowAgent"));

export { PeriodicPingArgs, PeriodicPingState } from "./periodicPing";
export type PeriodicPing = import("./periodicPing").PeriodicPing;
export const PeriodicPing: typeof import("./periodicPing").PeriodicPing = null as any;
utilities.lazyLoad(exports, ["PeriodicPing"], () => require("./periodicPing"));

export { PrivateModeLbArgs, PrivateModeLbState } from "./privateModeLb";
export type PrivateModeLb = import("./privateModeLb").PrivateModeLb;
export const PrivateModeLb: typeof import("./privateModeLb").PrivateModeLb = null as any;
utilities.lazyLoad(exports, ["PrivateModeLb"], () => require("./privateModeLb"));

export { PrivateModeMulticloudEndpointArgs, PrivateModeMulticloudEndpointState } from "./privateModeMulticloudEndpoint";
export type PrivateModeMulticloudEndpoint = import("./privateModeMulticloudEndpoint").PrivateModeMulticloudEndpoint;
export const PrivateModeMulticloudEndpoint: typeof import("./privateModeMulticloudEndpoint").PrivateModeMulticloudEndpoint = null as any;
utilities.lazyLoad(exports, ["PrivateModeMulticloudEndpoint"], () => require("./privateModeMulticloudEndpoint"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProxyConfigArgs, ProxyConfigState } from "./proxyConfig";
export type ProxyConfig = import("./proxyConfig").ProxyConfig;
export const ProxyConfig: typeof import("./proxyConfig").ProxyConfig = null as any;
utilities.lazyLoad(exports, ["ProxyConfig"], () => require("./proxyConfig"));

export { QosClassArgs, QosClassState } from "./qosClass";
export type QosClass = import("./qosClass").QosClass;
export const QosClass: typeof import("./qosClass").QosClass = null as any;
utilities.lazyLoad(exports, ["QosClass"], () => require("./qosClass"));

export { QosPolicyListArgs, QosPolicyListState } from "./qosPolicyList";
export type QosPolicyList = import("./qosPolicyList").QosPolicyList;
export const QosPolicyList: typeof import("./qosPolicyList").QosPolicyList = null as any;
utilities.lazyLoad(exports, ["QosPolicyList"], () => require("./qosPolicyList"));

export { RbacGroupArgs, RbacGroupState } from "./rbacGroup";
export type RbacGroup = import("./rbacGroup").RbacGroup;
export const RbacGroup: typeof import("./rbacGroup").RbacGroup = null as any;
utilities.lazyLoad(exports, ["RbacGroup"], () => require("./rbacGroup"));

export { RbacGroupAccessAccountAttachmentArgs, RbacGroupAccessAccountAttachmentState } from "./rbacGroupAccessAccountAttachment";
export type RbacGroupAccessAccountAttachment = import("./rbacGroupAccessAccountAttachment").RbacGroupAccessAccountAttachment;
export const RbacGroupAccessAccountAttachment: typeof import("./rbacGroupAccessAccountAttachment").RbacGroupAccessAccountAttachment = null as any;
utilities.lazyLoad(exports, ["RbacGroupAccessAccountAttachment"], () => require("./rbacGroupAccessAccountAttachment"));

export { RbacGroupPermissionAttachmentArgs, RbacGroupPermissionAttachmentState } from "./rbacGroupPermissionAttachment";
export type RbacGroupPermissionAttachment = import("./rbacGroupPermissionAttachment").RbacGroupPermissionAttachment;
export const RbacGroupPermissionAttachment: typeof import("./rbacGroupPermissionAttachment").RbacGroupPermissionAttachment = null as any;
utilities.lazyLoad(exports, ["RbacGroupPermissionAttachment"], () => require("./rbacGroupPermissionAttachment"));

export { RbacGroupUserAttachmentArgs, RbacGroupUserAttachmentState } from "./rbacGroupUserAttachment";
export type RbacGroupUserAttachment = import("./rbacGroupUserAttachment").RbacGroupUserAttachment;
export const RbacGroupUserAttachment: typeof import("./rbacGroupUserAttachment").RbacGroupUserAttachment = null as any;
utilities.lazyLoad(exports, ["RbacGroupUserAttachment"], () => require("./rbacGroupUserAttachment"));

export { RemoteSyslogArgs, RemoteSyslogState } from "./remoteSyslog";
export type RemoteSyslog = import("./remoteSyslog").RemoteSyslog;
export const RemoteSyslog: typeof import("./remoteSyslog").RemoteSyslog = null as any;
utilities.lazyLoad(exports, ["RemoteSyslog"], () => require("./remoteSyslog"));

export { SamlEndpointArgs, SamlEndpointState } from "./samlEndpoint";
export type SamlEndpoint = import("./samlEndpoint").SamlEndpoint;
export const SamlEndpoint: typeof import("./samlEndpoint").SamlEndpoint = null as any;
utilities.lazyLoad(exports, ["SamlEndpoint"], () => require("./samlEndpoint"));

export { SegmentationNetworkDomainArgs, SegmentationNetworkDomainState } from "./segmentationNetworkDomain";
export type SegmentationNetworkDomain = import("./segmentationNetworkDomain").SegmentationNetworkDomain;
export const SegmentationNetworkDomain: typeof import("./segmentationNetworkDomain").SegmentationNetworkDomain = null as any;
utilities.lazyLoad(exports, ["SegmentationNetworkDomain"], () => require("./segmentationNetworkDomain"));

export { SegmentationNetworkDomainAssociationArgs, SegmentationNetworkDomainAssociationState } from "./segmentationNetworkDomainAssociation";
export type SegmentationNetworkDomainAssociation = import("./segmentationNetworkDomainAssociation").SegmentationNetworkDomainAssociation;
export const SegmentationNetworkDomainAssociation: typeof import("./segmentationNetworkDomainAssociation").SegmentationNetworkDomainAssociation = null as any;
utilities.lazyLoad(exports, ["SegmentationNetworkDomainAssociation"], () => require("./segmentationNetworkDomainAssociation"));

export { SegmentationNetworkDomainConnectionPolicyArgs, SegmentationNetworkDomainConnectionPolicyState } from "./segmentationNetworkDomainConnectionPolicy";
export type SegmentationNetworkDomainConnectionPolicy = import("./segmentationNetworkDomainConnectionPolicy").SegmentationNetworkDomainConnectionPolicy;
export const SegmentationNetworkDomainConnectionPolicy: typeof import("./segmentationNetworkDomainConnectionPolicy").SegmentationNetworkDomainConnectionPolicy = null as any;
utilities.lazyLoad(exports, ["SegmentationNetworkDomainConnectionPolicy"], () => require("./segmentationNetworkDomainConnectionPolicy"));

export { Site2cloudArgs, Site2cloudState } from "./site2cloud";
export type Site2cloud = import("./site2cloud").Site2cloud;
export const Site2cloud: typeof import("./site2cloud").Site2cloud = null as any;
utilities.lazyLoad(exports, ["Site2cloud"], () => require("./site2cloud"));

export { Site2cloudCaCertTagArgs, Site2cloudCaCertTagState } from "./site2cloudCaCertTag";
export type Site2cloudCaCertTag = import("./site2cloudCaCertTag").Site2cloudCaCertTag;
export const Site2cloudCaCertTag: typeof import("./site2cloudCaCertTag").Site2cloudCaCertTag = null as any;
utilities.lazyLoad(exports, ["Site2cloudCaCertTag"], () => require("./site2cloudCaCertTag"));

export { SmartGroupArgs, SmartGroupState } from "./smartGroup";
export type SmartGroup = import("./smartGroup").SmartGroup;
export const SmartGroup: typeof import("./smartGroup").SmartGroup = null as any;
utilities.lazyLoad(exports, ["SmartGroup"], () => require("./smartGroup"));

export { SplunkLoggingArgs, SplunkLoggingState } from "./splunkLogging";
export type SplunkLogging = import("./splunkLogging").SplunkLogging;
export const SplunkLogging: typeof import("./splunkLogging").SplunkLogging = null as any;
utilities.lazyLoad(exports, ["SplunkLogging"], () => require("./splunkLogging"));

export { SpokeExternalDeviceConnArgs, SpokeExternalDeviceConnState } from "./spokeExternalDeviceConn";
export type SpokeExternalDeviceConn = import("./spokeExternalDeviceConn").SpokeExternalDeviceConn;
export const SpokeExternalDeviceConn: typeof import("./spokeExternalDeviceConn").SpokeExternalDeviceConn = null as any;
utilities.lazyLoad(exports, ["SpokeExternalDeviceConn"], () => require("./spokeExternalDeviceConn"));

export { SpokeGatewayArgs, SpokeGatewayState } from "./spokeGateway";
export type SpokeGateway = import("./spokeGateway").SpokeGateway;
export const SpokeGateway: typeof import("./spokeGateway").SpokeGateway = null as any;
utilities.lazyLoad(exports, ["SpokeGateway"], () => require("./spokeGateway"));

export { SpokeGatewaySubnetGroupArgs, SpokeGatewaySubnetGroupState } from "./spokeGatewaySubnetGroup";
export type SpokeGatewaySubnetGroup = import("./spokeGatewaySubnetGroup").SpokeGatewaySubnetGroup;
export const SpokeGatewaySubnetGroup: typeof import("./spokeGatewaySubnetGroup").SpokeGatewaySubnetGroup = null as any;
utilities.lazyLoad(exports, ["SpokeGatewaySubnetGroup"], () => require("./spokeGatewaySubnetGroup"));

export { SpokeHaGatewayArgs, SpokeHaGatewayState } from "./spokeHaGateway";
export type SpokeHaGateway = import("./spokeHaGateway").SpokeHaGateway;
export const SpokeHaGateway: typeof import("./spokeHaGateway").SpokeHaGateway = null as any;
utilities.lazyLoad(exports, ["SpokeHaGateway"], () => require("./spokeHaGateway"));

export { SpokeTransitAttachmentArgs, SpokeTransitAttachmentState } from "./spokeTransitAttachment";
export type SpokeTransitAttachment = import("./spokeTransitAttachment").SpokeTransitAttachment;
export const SpokeTransitAttachment: typeof import("./spokeTransitAttachment").SpokeTransitAttachment = null as any;
utilities.lazyLoad(exports, ["SpokeTransitAttachment"], () => require("./spokeTransitAttachment"));

export { SumologicForwarderArgs, SumologicForwarderState } from "./sumologicForwarder";
export type SumologicForwarder = import("./sumologicForwarder").SumologicForwarder;
export const SumologicForwarder: typeof import("./sumologicForwarder").SumologicForwarder = null as any;
utilities.lazyLoad(exports, ["SumologicForwarder"], () => require("./sumologicForwarder"));

export { TransPeerArgs, TransPeerState } from "./transPeer";
export type TransPeer = import("./transPeer").TransPeer;
export const TransPeer: typeof import("./transPeer").TransPeer = null as any;
utilities.lazyLoad(exports, ["TransPeer"], () => require("./transPeer"));

export { TransitExternalDeviceConnArgs, TransitExternalDeviceConnState } from "./transitExternalDeviceConn";
export type TransitExternalDeviceConn = import("./transitExternalDeviceConn").TransitExternalDeviceConn;
export const TransitExternalDeviceConn: typeof import("./transitExternalDeviceConn").TransitExternalDeviceConn = null as any;
utilities.lazyLoad(exports, ["TransitExternalDeviceConn"], () => require("./transitExternalDeviceConn"));

export { TransitFirenetPolicyArgs, TransitFirenetPolicyState } from "./transitFirenetPolicy";
export type TransitFirenetPolicy = import("./transitFirenetPolicy").TransitFirenetPolicy;
export const TransitFirenetPolicy: typeof import("./transitFirenetPolicy").TransitFirenetPolicy = null as any;
utilities.lazyLoad(exports, ["TransitFirenetPolicy"], () => require("./transitFirenetPolicy"));

export { TransitGatewayArgs, TransitGatewayState } from "./transitGateway";
export type TransitGateway = import("./transitGateway").TransitGateway;
export const TransitGateway: typeof import("./transitGateway").TransitGateway = null as any;
utilities.lazyLoad(exports, ["TransitGateway"], () => require("./transitGateway"));

export { TransitGatewayPeeringArgs, TransitGatewayPeeringState } from "./transitGatewayPeering";
export type TransitGatewayPeering = import("./transitGatewayPeering").TransitGatewayPeering;
export const TransitGatewayPeering: typeof import("./transitGatewayPeering").TransitGatewayPeering = null as any;
utilities.lazyLoad(exports, ["TransitGatewayPeering"], () => require("./transitGatewayPeering"));

export { TunnelArgs, TunnelState } from "./tunnel";
export type Tunnel = import("./tunnel").Tunnel;
export const Tunnel: typeof import("./tunnel").Tunnel = null as any;
utilities.lazyLoad(exports, ["Tunnel"], () => require("./tunnel"));

export { VgwConnArgs, VgwConnState } from "./vgwConn";
export type VgwConn = import("./vgwConn").VgwConn;
export const VgwConn: typeof import("./vgwConn").VgwConn = null as any;
utilities.lazyLoad(exports, ["VgwConn"], () => require("./vgwConn"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpnCertDownloadArgs, VpnCertDownloadState } from "./vpnCertDownload";
export type VpnCertDownload = import("./vpnCertDownload").VpnCertDownload;
export const VpnCertDownload: typeof import("./vpnCertDownload").VpnCertDownload = null as any;
utilities.lazyLoad(exports, ["VpnCertDownload"], () => require("./vpnCertDownload"));

export { VpnProfileArgs, VpnProfileState } from "./vpnProfile";
export type VpnProfile = import("./vpnProfile").VpnProfile;
export const VpnProfile: typeof import("./vpnProfile").VpnProfile = null as any;
utilities.lazyLoad(exports, ["VpnProfile"], () => require("./vpnProfile"));

export { VpnUserArgs, VpnUserState } from "./vpnUser";
export type VpnUser = import("./vpnUser").VpnUser;
export const VpnUser: typeof import("./vpnUser").VpnUser = null as any;
utilities.lazyLoad(exports, ["VpnUser"], () => require("./vpnUser"));

export { VpnUserAcceleratorArgs, VpnUserAcceleratorState } from "./vpnUserAccelerator";
export type VpnUserAccelerator = import("./vpnUserAccelerator").VpnUserAccelerator;
export const VpnUserAccelerator: typeof import("./vpnUserAccelerator").VpnUserAccelerator = null as any;
utilities.lazyLoad(exports, ["VpnUserAccelerator"], () => require("./vpnUserAccelerator"));

export { WebGroupArgs, WebGroupState } from "./webGroup";
export type WebGroup = import("./webGroup").WebGroup;
export const WebGroup: typeof import("./webGroup").WebGroup = null as any;
utilities.lazyLoad(exports, ["WebGroup"], () => require("./webGroup"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aviatrix:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "aviatrix:index/accountUser:AccountUser":
                return new AccountUser(name, <any>undefined, { urn })
            case "aviatrix:index/awsGuardDuty:AwsGuardDuty":
                return new AwsGuardDuty(name, <any>undefined, { urn })
            case "aviatrix:index/awsPeer:AwsPeer":
                return new AwsPeer(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgw:AwsTgw":
                return new AwsTgw(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgwConnect:AwsTgwConnect":
                return new AwsTgwConnect(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgwConnectPeer:AwsTgwConnectPeer":
                return new AwsTgwConnectPeer(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgwDirectconnect:AwsTgwDirectconnect":
                return new AwsTgwDirectconnect(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgwIntraDomainInspection:AwsTgwIntraDomainInspection":
                return new AwsTgwIntraDomainInspection(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgwNetworkDomain:AwsTgwNetworkDomain":
                return new AwsTgwNetworkDomain(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgwPeering:AwsTgwPeering":
                return new AwsTgwPeering(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgwPeeringDomainConn:AwsTgwPeeringDomainConn":
                return new AwsTgwPeeringDomainConn(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgwTransitGatewayAttachment:AwsTgwTransitGatewayAttachment":
                return new AwsTgwTransitGatewayAttachment(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgwVpcAttachment:AwsTgwVpcAttachment":
                return new AwsTgwVpcAttachment(name, <any>undefined, { urn })
            case "aviatrix:index/awsTgwVpnConn:AwsTgwVpnConn":
                return new AwsTgwVpnConn(name, <any>undefined, { urn })
            case "aviatrix:index/azurePeer:AzurePeer":
                return new AzurePeer(name, <any>undefined, { urn })
            case "aviatrix:index/azureSpokeNativePeering:AzureSpokeNativePeering":
                return new AzureSpokeNativePeering(name, <any>undefined, { urn })
            case "aviatrix:index/azureVngConn:AzureVngConn":
                return new AzureVngConn(name, <any>undefined, { urn })
            case "aviatrix:index/centralizedTransitFirenet:CentralizedTransitFirenet":
                return new CentralizedTransitFirenet(name, <any>undefined, { urn })
            case "aviatrix:index/cloudnRegistration:CloudnRegistration":
                return new CloudnRegistration(name, <any>undefined, { urn })
            case "aviatrix:index/cloudnTransitGatewayAttachment:CloudnTransitGatewayAttachment":
                return new CloudnTransitGatewayAttachment(name, <any>undefined, { urn })
            case "aviatrix:index/cloudwatchAgent:CloudwatchAgent":
                return new CloudwatchAgent(name, <any>undefined, { urn })
            case "aviatrix:index/controllerAccessAllowListConfig:ControllerAccessAllowListConfig":
                return new ControllerAccessAllowListConfig(name, <any>undefined, { urn })
            case "aviatrix:index/controllerBgpMaxAsLimitConfig:ControllerBgpMaxAsLimitConfig":
                return new ControllerBgpMaxAsLimitConfig(name, <any>undefined, { urn })
            case "aviatrix:index/controllerCertDomainConfig:ControllerCertDomainConfig":
                return new ControllerCertDomainConfig(name, <any>undefined, { urn })
            case "aviatrix:index/controllerConfig:ControllerConfig":
                return new ControllerConfig(name, <any>undefined, { urn })
            case "aviatrix:index/controllerEmailConfig:ControllerEmailConfig":
                return new ControllerEmailConfig(name, <any>undefined, { urn })
            case "aviatrix:index/controllerEmailExceptionNotificationConfig:ControllerEmailExceptionNotificationConfig":
                return new ControllerEmailExceptionNotificationConfig(name, <any>undefined, { urn })
            case "aviatrix:index/controllerGatewayKeepaliveConfig:ControllerGatewayKeepaliveConfig":
                return new ControllerGatewayKeepaliveConfig(name, <any>undefined, { urn })
            case "aviatrix:index/controllerPrivateModeConfig:ControllerPrivateModeConfig":
                return new ControllerPrivateModeConfig(name, <any>undefined, { urn })
            case "aviatrix:index/controllerPrivateOob:ControllerPrivateOob":
                return new ControllerPrivateOob(name, <any>undefined, { urn })
            case "aviatrix:index/controllerSecurityGroupManagementConfig:ControllerSecurityGroupManagementConfig":
                return new ControllerSecurityGroupManagementConfig(name, <any>undefined, { urn })
            case "aviatrix:index/copilotAssociation:CopilotAssociation":
                return new CopilotAssociation(name, <any>undefined, { urn })
            case "aviatrix:index/copilotFaultTolerantDeployment:CopilotFaultTolerantDeployment":
                return new CopilotFaultTolerantDeployment(name, <any>undefined, { urn })
            case "aviatrix:index/copilotSecurityGroupManagementConfig:CopilotSecurityGroupManagementConfig":
                return new CopilotSecurityGroupManagementConfig(name, <any>undefined, { urn })
            case "aviatrix:index/copilotSimpleDeployment:CopilotSimpleDeployment":
                return new CopilotSimpleDeployment(name, <any>undefined, { urn })
            case "aviatrix:index/datadogAgent:DatadogAgent":
                return new DatadogAgent(name, <any>undefined, { urn })
            case "aviatrix:index/deviceInterfaceConfig:DeviceInterfaceConfig":
                return new DeviceInterfaceConfig(name, <any>undefined, { urn })
            case "aviatrix:index/distributedFirewallingConfig:DistributedFirewallingConfig":
                return new DistributedFirewallingConfig(name, <any>undefined, { urn })
            case "aviatrix:index/distributedFirewallingIntraVpc:DistributedFirewallingIntraVpc":
                return new DistributedFirewallingIntraVpc(name, <any>undefined, { urn })
            case "aviatrix:index/distributedFirewallingOriginCertEnforcementConfig:DistributedFirewallingOriginCertEnforcementConfig":
                return new DistributedFirewallingOriginCertEnforcementConfig(name, <any>undefined, { urn })
            case "aviatrix:index/distributedFirewallingPolicyList:DistributedFirewallingPolicyList":
                return new DistributedFirewallingPolicyList(name, <any>undefined, { urn })
            case "aviatrix:index/distributedFirewallingProxyCaConfig:DistributedFirewallingProxyCaConfig":
                return new DistributedFirewallingProxyCaConfig(name, <any>undefined, { urn })
            case "aviatrix:index/edgeCsp:EdgeCsp":
                return new EdgeCsp(name, <any>undefined, { urn })
            case "aviatrix:index/edgeCspHa:EdgeCspHa":
                return new EdgeCspHa(name, <any>undefined, { urn })
            case "aviatrix:index/edgeEquinix:EdgeEquinix":
                return new EdgeEquinix(name, <any>undefined, { urn })
            case "aviatrix:index/edgeEquinixHa:EdgeEquinixHa":
                return new EdgeEquinixHa(name, <any>undefined, { urn })
            case "aviatrix:index/edgeGatewaySelfmanaged:EdgeGatewaySelfmanaged":
                return new EdgeGatewaySelfmanaged(name, <any>undefined, { urn })
            case "aviatrix:index/edgeGatewaySelfmanagedHa:EdgeGatewaySelfmanagedHa":
                return new EdgeGatewaySelfmanagedHa(name, <any>undefined, { urn })
            case "aviatrix:index/edgeNeo:EdgeNeo":
                return new EdgeNeo(name, <any>undefined, { urn })
            case "aviatrix:index/edgeNeoDeviceOnboarding:EdgeNeoDeviceOnboarding":
                return new EdgeNeoDeviceOnboarding(name, <any>undefined, { urn })
            case "aviatrix:index/edgeNeoHa:EdgeNeoHa":
                return new EdgeNeoHa(name, <any>undefined, { urn })
            case "aviatrix:index/edgePlatform:EdgePlatform":
                return new EdgePlatform(name, <any>undefined, { urn })
            case "aviatrix:index/edgePlatformDeviceOnboarding:EdgePlatformDeviceOnboarding":
                return new EdgePlatformDeviceOnboarding(name, <any>undefined, { urn })
            case "aviatrix:index/edgePlatformHa:EdgePlatformHa":
                return new EdgePlatformHa(name, <any>undefined, { urn })
            case "aviatrix:index/edgeSpoke:EdgeSpoke":
                return new EdgeSpoke(name, <any>undefined, { urn })
            case "aviatrix:index/edgeSpokeExternalDeviceConn:EdgeSpokeExternalDeviceConn":
                return new EdgeSpokeExternalDeviceConn(name, <any>undefined, { urn })
            case "aviatrix:index/edgeSpokeTransitAttachment:EdgeSpokeTransitAttachment":
                return new EdgeSpokeTransitAttachment(name, <any>undefined, { urn })
            case "aviatrix:index/edgeVmSelfmanaged:EdgeVmSelfmanaged":
                return new EdgeVmSelfmanaged(name, <any>undefined, { urn })
            case "aviatrix:index/edgeVmSelfmanagedHa:EdgeVmSelfmanagedHa":
                return new EdgeVmSelfmanagedHa(name, <any>undefined, { urn })
            case "aviatrix:index/edgeZededa:EdgeZededa":
                return new EdgeZededa(name, <any>undefined, { urn })
            case "aviatrix:index/edgeZededaHa:EdgeZededaHa":
                return new EdgeZededaHa(name, <any>undefined, { urn })
            case "aviatrix:index/filebeatForwarder:FilebeatForwarder":
                return new FilebeatForwarder(name, <any>undefined, { urn })
            case "aviatrix:index/firenet:Firenet":
                return new Firenet(name, <any>undefined, { urn })
            case "aviatrix:index/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "aviatrix:index/firewallInstance:FirewallInstance":
                return new FirewallInstance(name, <any>undefined, { urn })
            case "aviatrix:index/firewallInstanceAssociation:FirewallInstanceAssociation":
                return new FirewallInstanceAssociation(name, <any>undefined, { urn })
            case "aviatrix:index/firewallManagementAccess:FirewallManagementAccess":
                return new FirewallManagementAccess(name, <any>undefined, { urn })
            case "aviatrix:index/firewallPolicy:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "aviatrix:index/firewallTag:FirewallTag":
                return new FirewallTag(name, <any>undefined, { urn })
            case "aviatrix:index/fqdn:Fqdn":
                return new Fqdn(name, <any>undefined, { urn })
            case "aviatrix:index/fqdnGlobalConfig:FqdnGlobalConfig":
                return new FqdnGlobalConfig(name, <any>undefined, { urn })
            case "aviatrix:index/fqdnPassThrough:FqdnPassThrough":
                return new FqdnPassThrough(name, <any>undefined, { urn })
            case "aviatrix:index/fqdnTagRule:FqdnTagRule":
                return new FqdnTagRule(name, <any>undefined, { urn })
            case "aviatrix:index/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "aviatrix:index/gatewayCertificateConfig:GatewayCertificateConfig":
                return new GatewayCertificateConfig(name, <any>undefined, { urn })
            case "aviatrix:index/gatewayDnat:GatewayDnat":
                return new GatewayDnat(name, <any>undefined, { urn })
            case "aviatrix:index/gatewaySnat:GatewaySnat":
                return new GatewaySnat(name, <any>undefined, { urn })
            case "aviatrix:index/geoVpn:GeoVpn":
                return new GeoVpn(name, <any>undefined, { urn })
            case "aviatrix:index/globalVpcExcludedInstance:GlobalVpcExcludedInstance":
                return new GlobalVpcExcludedInstance(name, <any>undefined, { urn })
            case "aviatrix:index/globalVpcTaggingSettings:GlobalVpcTaggingSettings":
                return new GlobalVpcTaggingSettings(name, <any>undefined, { urn })
            case "aviatrix:index/netflowAgent:NetflowAgent":
                return new NetflowAgent(name, <any>undefined, { urn })
            case "aviatrix:index/periodicPing:PeriodicPing":
                return new PeriodicPing(name, <any>undefined, { urn })
            case "aviatrix:index/privateModeLb:PrivateModeLb":
                return new PrivateModeLb(name, <any>undefined, { urn })
            case "aviatrix:index/privateModeMulticloudEndpoint:PrivateModeMulticloudEndpoint":
                return new PrivateModeMulticloudEndpoint(name, <any>undefined, { urn })
            case "aviatrix:index/proxyConfig:ProxyConfig":
                return new ProxyConfig(name, <any>undefined, { urn })
            case "aviatrix:index/qosClass:QosClass":
                return new QosClass(name, <any>undefined, { urn })
            case "aviatrix:index/qosPolicyList:QosPolicyList":
                return new QosPolicyList(name, <any>undefined, { urn })
            case "aviatrix:index/rbacGroup:RbacGroup":
                return new RbacGroup(name, <any>undefined, { urn })
            case "aviatrix:index/rbacGroupAccessAccountAttachment:RbacGroupAccessAccountAttachment":
                return new RbacGroupAccessAccountAttachment(name, <any>undefined, { urn })
            case "aviatrix:index/rbacGroupPermissionAttachment:RbacGroupPermissionAttachment":
                return new RbacGroupPermissionAttachment(name, <any>undefined, { urn })
            case "aviatrix:index/rbacGroupUserAttachment:RbacGroupUserAttachment":
                return new RbacGroupUserAttachment(name, <any>undefined, { urn })
            case "aviatrix:index/remoteSyslog:RemoteSyslog":
                return new RemoteSyslog(name, <any>undefined, { urn })
            case "aviatrix:index/samlEndpoint:SamlEndpoint":
                return new SamlEndpoint(name, <any>undefined, { urn })
            case "aviatrix:index/segmentationNetworkDomain:SegmentationNetworkDomain":
                return new SegmentationNetworkDomain(name, <any>undefined, { urn })
            case "aviatrix:index/segmentationNetworkDomainAssociation:SegmentationNetworkDomainAssociation":
                return new SegmentationNetworkDomainAssociation(name, <any>undefined, { urn })
            case "aviatrix:index/segmentationNetworkDomainConnectionPolicy:SegmentationNetworkDomainConnectionPolicy":
                return new SegmentationNetworkDomainConnectionPolicy(name, <any>undefined, { urn })
            case "aviatrix:index/site2cloud:Site2cloud":
                return new Site2cloud(name, <any>undefined, { urn })
            case "aviatrix:index/site2cloudCaCertTag:Site2cloudCaCertTag":
                return new Site2cloudCaCertTag(name, <any>undefined, { urn })
            case "aviatrix:index/smartGroup:SmartGroup":
                return new SmartGroup(name, <any>undefined, { urn })
            case "aviatrix:index/splunkLogging:SplunkLogging":
                return new SplunkLogging(name, <any>undefined, { urn })
            case "aviatrix:index/spokeExternalDeviceConn:SpokeExternalDeviceConn":
                return new SpokeExternalDeviceConn(name, <any>undefined, { urn })
            case "aviatrix:index/spokeGateway:SpokeGateway":
                return new SpokeGateway(name, <any>undefined, { urn })
            case "aviatrix:index/spokeGatewaySubnetGroup:SpokeGatewaySubnetGroup":
                return new SpokeGatewaySubnetGroup(name, <any>undefined, { urn })
            case "aviatrix:index/spokeHaGateway:SpokeHaGateway":
                return new SpokeHaGateway(name, <any>undefined, { urn })
            case "aviatrix:index/spokeTransitAttachment:SpokeTransitAttachment":
                return new SpokeTransitAttachment(name, <any>undefined, { urn })
            case "aviatrix:index/sumologicForwarder:SumologicForwarder":
                return new SumologicForwarder(name, <any>undefined, { urn })
            case "aviatrix:index/transPeer:TransPeer":
                return new TransPeer(name, <any>undefined, { urn })
            case "aviatrix:index/transitExternalDeviceConn:TransitExternalDeviceConn":
                return new TransitExternalDeviceConn(name, <any>undefined, { urn })
            case "aviatrix:index/transitFirenetPolicy:TransitFirenetPolicy":
                return new TransitFirenetPolicy(name, <any>undefined, { urn })
            case "aviatrix:index/transitGateway:TransitGateway":
                return new TransitGateway(name, <any>undefined, { urn })
            case "aviatrix:index/transitGatewayPeering:TransitGatewayPeering":
                return new TransitGatewayPeering(name, <any>undefined, { urn })
            case "aviatrix:index/tunnel:Tunnel":
                return new Tunnel(name, <any>undefined, { urn })
            case "aviatrix:index/vgwConn:VgwConn":
                return new VgwConn(name, <any>undefined, { urn })
            case "aviatrix:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "aviatrix:index/vpnCertDownload:VpnCertDownload":
                return new VpnCertDownload(name, <any>undefined, { urn })
            case "aviatrix:index/vpnProfile:VpnProfile":
                return new VpnProfile(name, <any>undefined, { urn })
            case "aviatrix:index/vpnUser:VpnUser":
                return new VpnUser(name, <any>undefined, { urn })
            case "aviatrix:index/vpnUserAccelerator:VpnUserAccelerator":
                return new VpnUserAccelerator(name, <any>undefined, { urn })
            case "aviatrix:index/webGroup:WebGroup":
                return new WebGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aviatrix", "index/account", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/accountUser", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsGuardDuty", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsPeer", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgw", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgwConnect", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgwConnectPeer", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgwDirectconnect", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgwIntraDomainInspection", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgwNetworkDomain", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgwPeering", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgwPeeringDomainConn", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgwTransitGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgwVpcAttachment", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/awsTgwVpnConn", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/azurePeer", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/azureSpokeNativePeering", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/azureVngConn", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/centralizedTransitFirenet", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/cloudnRegistration", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/cloudnTransitGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/cloudwatchAgent", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/controllerAccessAllowListConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/controllerBgpMaxAsLimitConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/controllerCertDomainConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/controllerConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/controllerEmailConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/controllerEmailExceptionNotificationConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/controllerGatewayKeepaliveConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/controllerPrivateModeConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/controllerPrivateOob", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/controllerSecurityGroupManagementConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/copilotAssociation", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/copilotFaultTolerantDeployment", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/copilotSecurityGroupManagementConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/copilotSimpleDeployment", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/datadogAgent", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/deviceInterfaceConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/distributedFirewallingConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/distributedFirewallingIntraVpc", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/distributedFirewallingOriginCertEnforcementConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/distributedFirewallingPolicyList", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/distributedFirewallingProxyCaConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeCsp", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeCspHa", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeEquinix", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeEquinixHa", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeGatewaySelfmanaged", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeGatewaySelfmanagedHa", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeNeo", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeNeoDeviceOnboarding", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeNeoHa", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgePlatform", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgePlatformDeviceOnboarding", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgePlatformHa", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeSpoke", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeSpokeExternalDeviceConn", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeSpokeTransitAttachment", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeVmSelfmanaged", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeVmSelfmanagedHa", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeZededa", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/edgeZededaHa", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/filebeatForwarder", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/firenet", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/firewall", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/firewallInstance", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/firewallInstanceAssociation", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/firewallManagementAccess", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/firewallPolicy", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/firewallTag", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/fqdn", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/fqdnGlobalConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/fqdnPassThrough", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/fqdnTagRule", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/gateway", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/gatewayCertificateConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/gatewayDnat", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/gatewaySnat", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/geoVpn", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/globalVpcExcludedInstance", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/globalVpcTaggingSettings", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/netflowAgent", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/periodicPing", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/privateModeLb", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/privateModeMulticloudEndpoint", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/proxyConfig", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/qosClass", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/qosPolicyList", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/rbacGroup", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/rbacGroupAccessAccountAttachment", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/rbacGroupPermissionAttachment", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/rbacGroupUserAttachment", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/remoteSyslog", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/samlEndpoint", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/segmentationNetworkDomain", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/segmentationNetworkDomainAssociation", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/segmentationNetworkDomainConnectionPolicy", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/site2cloud", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/site2cloudCaCertTag", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/smartGroup", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/splunkLogging", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/spokeExternalDeviceConn", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/spokeGateway", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/spokeGatewaySubnetGroup", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/spokeHaGateway", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/spokeTransitAttachment", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/sumologicForwarder", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/transPeer", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/transitExternalDeviceConn", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/transitFirenetPolicy", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/transitGateway", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/transitGatewayPeering", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/tunnel", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/vgwConn", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/vpc", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/vpnCertDownload", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/vpnProfile", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/vpnUser", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/vpnUserAccelerator", _module)
pulumi.runtime.registerResourceModule("aviatrix", "index/webGroup", _module)
pulumi.runtime.registerResourcePackage("aviatrix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:aviatrix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
