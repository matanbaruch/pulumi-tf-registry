// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EdgeZededaHa extends pulumi.CustomResource {
    /**
     * Get an existing EdgeZededaHa resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeZededaHaState, opts?: pulumi.CustomResourceOptions): EdgeZededaHa {
        return new EdgeZededaHa(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/edgeZededaHa:EdgeZededaHa';

    /**
     * Returns true if the given object is an instance of EdgeZededaHa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgeZededaHa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeZededaHa.__pulumiType;
    }

    /**
     * Edge Zededa account name.
     */
    public /*out*/ readonly accountName!: pulumi.Output<string>;
    /**
     * Compute node UUID.
     */
    public readonly computeNodeUuid!: pulumi.Output<string>;
    /**
     * WAN/LAN/MANAGEMENT interfaces.
     */
    public readonly interfaces!: pulumi.Output<outputs.EdgeZededaHaInterface[]>;
    /**
     * Set of management egress gateway IP/prefix.
     */
    public readonly managementEgressIpPrefixLists!: pulumi.Output<string[] | undefined>;
    /**
     * Primary gateway name.
     */
    public readonly primaryGwName!: pulumi.Output<string>;

    /**
     * Create a EdgeZededaHa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeZededaHaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeZededaHaArgs | EdgeZededaHaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeZededaHaState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["computeNodeUuid"] = state ? state.computeNodeUuid : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["managementEgressIpPrefixLists"] = state ? state.managementEgressIpPrefixLists : undefined;
            resourceInputs["primaryGwName"] = state ? state.primaryGwName : undefined;
        } else {
            const args = argsOrState as EdgeZededaHaArgs | undefined;
            if ((!args || args.computeNodeUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeNodeUuid'");
            }
            if ((!args || args.interfaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaces'");
            }
            if ((!args || args.primaryGwName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryGwName'");
            }
            resourceInputs["computeNodeUuid"] = args ? args.computeNodeUuid : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["managementEgressIpPrefixLists"] = args ? args.managementEgressIpPrefixLists : undefined;
            resourceInputs["primaryGwName"] = args ? args.primaryGwName : undefined;
            resourceInputs["accountName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgeZededaHa.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EdgeZededaHa resources.
 */
export interface EdgeZededaHaState {
    /**
     * Edge Zededa account name.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Compute node UUID.
     */
    computeNodeUuid?: pulumi.Input<string>;
    /**
     * WAN/LAN/MANAGEMENT interfaces.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.EdgeZededaHaInterface>[]>;
    /**
     * Set of management egress gateway IP/prefix.
     */
    managementEgressIpPrefixLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Primary gateway name.
     */
    primaryGwName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EdgeZededaHa resource.
 */
export interface EdgeZededaHaArgs {
    /**
     * Compute node UUID.
     */
    computeNodeUuid: pulumi.Input<string>;
    /**
     * WAN/LAN/MANAGEMENT interfaces.
     */
    interfaces: pulumi.Input<pulumi.Input<inputs.EdgeZededaHaInterface>[]>;
    /**
     * Set of management egress gateway IP/prefix.
     */
    managementEgressIpPrefixLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Primary gateway name.
     */
    primaryGwName: pulumi.Input<string>;
}
