// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GlobalVpcTaggingSettings extends pulumi.CustomResource {
    /**
     * Get an existing GlobalVpcTaggingSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalVpcTaggingSettingsState, opts?: pulumi.CustomResourceOptions): GlobalVpcTaggingSettings {
        return new GlobalVpcTaggingSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/globalVpcTaggingSettings:GlobalVpcTaggingSettings';

    /**
     * Returns true if the given object is an instance of GlobalVpcTaggingSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalVpcTaggingSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalVpcTaggingSettings.__pulumiType;
    }

    /**
     * Set to true to enable alert.
     */
    public readonly enableAlert!: pulumi.Output<boolean>;
    /**
     * Service state.
     */
    public readonly serviceState!: pulumi.Output<string>;

    /**
     * Create a GlobalVpcTaggingSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalVpcTaggingSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalVpcTaggingSettingsArgs | GlobalVpcTaggingSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalVpcTaggingSettingsState | undefined;
            resourceInputs["enableAlert"] = state ? state.enableAlert : undefined;
            resourceInputs["serviceState"] = state ? state.serviceState : undefined;
        } else {
            const args = argsOrState as GlobalVpcTaggingSettingsArgs | undefined;
            if ((!args || args.enableAlert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableAlert'");
            }
            if ((!args || args.serviceState === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceState'");
            }
            resourceInputs["enableAlert"] = args ? args.enableAlert : undefined;
            resourceInputs["serviceState"] = args ? args.serviceState : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalVpcTaggingSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlobalVpcTaggingSettings resources.
 */
export interface GlobalVpcTaggingSettingsState {
    /**
     * Set to true to enable alert.
     */
    enableAlert?: pulumi.Input<boolean>;
    /**
     * Service state.
     */
    serviceState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlobalVpcTaggingSettings resource.
 */
export interface GlobalVpcTaggingSettingsArgs {
    /**
     * Set to true to enable alert.
     */
    enableAlert: pulumi.Input<boolean>;
    /**
     * Service state.
     */
    serviceState: pulumi.Input<string>;
}
