// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ControllerSecurityGroupManagementConfig extends pulumi.CustomResource {
    /**
     * Get an existing ControllerSecurityGroupManagementConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ControllerSecurityGroupManagementConfigState, opts?: pulumi.CustomResourceOptions): ControllerSecurityGroupManagementConfig {
        return new ControllerSecurityGroupManagementConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/controllerSecurityGroupManagementConfig:ControllerSecurityGroupManagementConfig';

    /**
     * Returns true if the given object is an instance of ControllerSecurityGroupManagementConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ControllerSecurityGroupManagementConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ControllerSecurityGroupManagementConfig.__pulumiType;
    }

    /**
     * Cloud account name of user.
     */
    public readonly accountName!: pulumi.Output<string | undefined>;
    /**
     * Used to manage the Controller instance’s inbound rules from gateways.
     */
    public readonly enableSecurityGroupManagement!: pulumi.Output<boolean>;

    /**
     * Create a ControllerSecurityGroupManagementConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ControllerSecurityGroupManagementConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ControllerSecurityGroupManagementConfigArgs | ControllerSecurityGroupManagementConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ControllerSecurityGroupManagementConfigState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["enableSecurityGroupManagement"] = state ? state.enableSecurityGroupManagement : undefined;
        } else {
            const args = argsOrState as ControllerSecurityGroupManagementConfigArgs | undefined;
            if ((!args || args.enableSecurityGroupManagement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableSecurityGroupManagement'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["enableSecurityGroupManagement"] = args ? args.enableSecurityGroupManagement : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ControllerSecurityGroupManagementConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ControllerSecurityGroupManagementConfig resources.
 */
export interface ControllerSecurityGroupManagementConfigState {
    /**
     * Cloud account name of user.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Used to manage the Controller instance’s inbound rules from gateways.
     */
    enableSecurityGroupManagement?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ControllerSecurityGroupManagementConfig resource.
 */
export interface ControllerSecurityGroupManagementConfigArgs {
    /**
     * Cloud account name of user.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Used to manage the Controller instance’s inbound rules from gateways.
     */
    enableSecurityGroupManagement: pulumi.Input<boolean>;
}
