// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TransitGatewayPeering extends pulumi.CustomResource {
    /**
     * Get an existing TransitGatewayPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransitGatewayPeeringState, opts?: pulumi.CustomResourceOptions): TransitGatewayPeering {
        return new TransitGatewayPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/transitGatewayPeering:TransitGatewayPeering';

    /**
     * Returns true if the given object is an instance of TransitGatewayPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransitGatewayPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransitGatewayPeering.__pulumiType;
    }

    /**
     * (Optional) Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode.
     * Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnel_count`.
     * Conflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Boolean. Default: false.
     * Available as of provider version R2.19+.
     */
    public readonly enableInsaneModeEncryptionOverInternet!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each
     * launched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.
     */
    public readonly enableMaxPerformance!: pulumi.Output<boolean | undefined>;
    /**
     * (Optional) Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud
     * Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with
     * `enable_insane_mode_encryption_over_internet` and `tunnel_count`. Type: Boolean. Default: false. Available in provider
     * version R2.17.1+
     */
    public readonly enablePeeringOverPrivateNetwork!: pulumi.Output<boolean | undefined>;
    /**
     * (Optional) Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud
     * Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with
     * `enable_peering_over_private_network`. Conflicts with `enable_insane_mode_encryption_over_internet` and `tunnel_count`.
     * Type: Boolean. Default: false. Available as of provider version R2.18+.
     */
    public readonly enableSingleTunnelMode!: pulumi.Output<boolean | undefined>;
    /**
     * List of excluded network CIDRs for the first transit gateway.
     */
    public readonly gateway1ExcludedNetworkCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * List of excluded TGW connections for the first transit gateway.
     */
    public readonly gateway1ExcludedTgwConnections!: pulumi.Output<string[] | undefined>;
    /**
     * List of excluded network CIDRs for the second transit gateway.
     */
    public readonly gateway2ExcludedNetworkCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * List of excluded TGW connections for the second transit gateway.
     */
    public readonly gateway2ExcludedTgwConnections!: pulumi.Output<string[] | undefined>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name1.
     */
    public readonly prependAsPath1s!: pulumi.Output<string[] | undefined>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name2.
     */
    public readonly prependAsPath2s!: pulumi.Output<string[] | undefined>;
    /**
     * The first transit gateway name to make a peer pair.
     */
    public readonly transitGatewayName1!: pulumi.Output<string>;
    /**
     * The second transit gateway name to make a peer pair.
     */
    public readonly transitGatewayName2!: pulumi.Output<string>;
    /**
     * (Optional) Advanced option. Number of public tunnels. Required with `enable_insane_mode_encryption_over_internet`.
     * Conflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Integer. Valid Range: 2-20.
     * Available as of provider version R2.19+.
     */
    public readonly tunnelCount!: pulumi.Output<number | undefined>;

    /**
     * Create a TransitGatewayPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransitGatewayPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransitGatewayPeeringArgs | TransitGatewayPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransitGatewayPeeringState | undefined;
            resourceInputs["enableInsaneModeEncryptionOverInternet"] = state ? state.enableInsaneModeEncryptionOverInternet : undefined;
            resourceInputs["enableMaxPerformance"] = state ? state.enableMaxPerformance : undefined;
            resourceInputs["enablePeeringOverPrivateNetwork"] = state ? state.enablePeeringOverPrivateNetwork : undefined;
            resourceInputs["enableSingleTunnelMode"] = state ? state.enableSingleTunnelMode : undefined;
            resourceInputs["gateway1ExcludedNetworkCidrs"] = state ? state.gateway1ExcludedNetworkCidrs : undefined;
            resourceInputs["gateway1ExcludedTgwConnections"] = state ? state.gateway1ExcludedTgwConnections : undefined;
            resourceInputs["gateway2ExcludedNetworkCidrs"] = state ? state.gateway2ExcludedNetworkCidrs : undefined;
            resourceInputs["gateway2ExcludedTgwConnections"] = state ? state.gateway2ExcludedTgwConnections : undefined;
            resourceInputs["prependAsPath1s"] = state ? state.prependAsPath1s : undefined;
            resourceInputs["prependAsPath2s"] = state ? state.prependAsPath2s : undefined;
            resourceInputs["transitGatewayName1"] = state ? state.transitGatewayName1 : undefined;
            resourceInputs["transitGatewayName2"] = state ? state.transitGatewayName2 : undefined;
            resourceInputs["tunnelCount"] = state ? state.tunnelCount : undefined;
        } else {
            const args = argsOrState as TransitGatewayPeeringArgs | undefined;
            if ((!args || args.transitGatewayName1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayName1'");
            }
            if ((!args || args.transitGatewayName2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayName2'");
            }
            resourceInputs["enableInsaneModeEncryptionOverInternet"] = args ? args.enableInsaneModeEncryptionOverInternet : undefined;
            resourceInputs["enableMaxPerformance"] = args ? args.enableMaxPerformance : undefined;
            resourceInputs["enablePeeringOverPrivateNetwork"] = args ? args.enablePeeringOverPrivateNetwork : undefined;
            resourceInputs["enableSingleTunnelMode"] = args ? args.enableSingleTunnelMode : undefined;
            resourceInputs["gateway1ExcludedNetworkCidrs"] = args ? args.gateway1ExcludedNetworkCidrs : undefined;
            resourceInputs["gateway1ExcludedTgwConnections"] = args ? args.gateway1ExcludedTgwConnections : undefined;
            resourceInputs["gateway2ExcludedNetworkCidrs"] = args ? args.gateway2ExcludedNetworkCidrs : undefined;
            resourceInputs["gateway2ExcludedTgwConnections"] = args ? args.gateway2ExcludedTgwConnections : undefined;
            resourceInputs["prependAsPath1s"] = args ? args.prependAsPath1s : undefined;
            resourceInputs["prependAsPath2s"] = args ? args.prependAsPath2s : undefined;
            resourceInputs["transitGatewayName1"] = args ? args.transitGatewayName1 : undefined;
            resourceInputs["transitGatewayName2"] = args ? args.transitGatewayName2 : undefined;
            resourceInputs["tunnelCount"] = args ? args.tunnelCount : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransitGatewayPeering.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TransitGatewayPeering resources.
 */
export interface TransitGatewayPeeringState {
    /**
     * (Optional) Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode.
     * Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnel_count`.
     * Conflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Boolean. Default: false.
     * Available as of provider version R2.19+.
     */
    enableInsaneModeEncryptionOverInternet?: pulumi.Input<boolean>;
    /**
     * Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each
     * launched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.
     */
    enableMaxPerformance?: pulumi.Input<boolean>;
    /**
     * (Optional) Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud
     * Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with
     * `enable_insane_mode_encryption_over_internet` and `tunnel_count`. Type: Boolean. Default: false. Available in provider
     * version R2.17.1+
     */
    enablePeeringOverPrivateNetwork?: pulumi.Input<boolean>;
    /**
     * (Optional) Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud
     * Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with
     * `enable_peering_over_private_network`. Conflicts with `enable_insane_mode_encryption_over_internet` and `tunnel_count`.
     * Type: Boolean. Default: false. Available as of provider version R2.18+.
     */
    enableSingleTunnelMode?: pulumi.Input<boolean>;
    /**
     * List of excluded network CIDRs for the first transit gateway.
     */
    gateway1ExcludedNetworkCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of excluded TGW connections for the first transit gateway.
     */
    gateway1ExcludedTgwConnections?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of excluded network CIDRs for the second transit gateway.
     */
    gateway2ExcludedNetworkCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of excluded TGW connections for the second transit gateway.
     */
    gateway2ExcludedTgwConnections?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name1.
     */
    prependAsPath1s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name2.
     */
    prependAsPath2s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The first transit gateway name to make a peer pair.
     */
    transitGatewayName1?: pulumi.Input<string>;
    /**
     * The second transit gateway name to make a peer pair.
     */
    transitGatewayName2?: pulumi.Input<string>;
    /**
     * (Optional) Advanced option. Number of public tunnels. Required with `enable_insane_mode_encryption_over_internet`.
     * Conflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Integer. Valid Range: 2-20.
     * Available as of provider version R2.19+.
     */
    tunnelCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TransitGatewayPeering resource.
 */
export interface TransitGatewayPeeringArgs {
    /**
     * (Optional) Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode.
     * Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnel_count`.
     * Conflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Boolean. Default: false.
     * Available as of provider version R2.19+.
     */
    enableInsaneModeEncryptionOverInternet?: pulumi.Input<boolean>;
    /**
     * Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each
     * launched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.
     */
    enableMaxPerformance?: pulumi.Input<boolean>;
    /**
     * (Optional) Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud
     * Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with
     * `enable_insane_mode_encryption_over_internet` and `tunnel_count`. Type: Boolean. Default: false. Available in provider
     * version R2.17.1+
     */
    enablePeeringOverPrivateNetwork?: pulumi.Input<boolean>;
    /**
     * (Optional) Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud
     * Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with
     * `enable_peering_over_private_network`. Conflicts with `enable_insane_mode_encryption_over_internet` and `tunnel_count`.
     * Type: Boolean. Default: false. Available as of provider version R2.18+.
     */
    enableSingleTunnelMode?: pulumi.Input<boolean>;
    /**
     * List of excluded network CIDRs for the first transit gateway.
     */
    gateway1ExcludedNetworkCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of excluded TGW connections for the first transit gateway.
     */
    gateway1ExcludedTgwConnections?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of excluded network CIDRs for the second transit gateway.
     */
    gateway2ExcludedNetworkCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of excluded TGW connections for the second transit gateway.
     */
    gateway2ExcludedTgwConnections?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name1.
     */
    prependAsPath1s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name2.
     */
    prependAsPath2s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The first transit gateway name to make a peer pair.
     */
    transitGatewayName1: pulumi.Input<string>;
    /**
     * The second transit gateway name to make a peer pair.
     */
    transitGatewayName2: pulumi.Input<string>;
    /**
     * (Optional) Advanced option. Number of public tunnels. Required with `enable_insane_mode_encryption_over_internet`.
     * Conflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Integer. Valid Range: 2-20.
     * Available as of provider version R2.19+.
     */
    tunnelCount?: pulumi.Input<number>;
}
