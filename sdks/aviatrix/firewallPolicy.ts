// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FirewallPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FirewallPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallPolicyState, opts?: pulumi.CustomResourceOptions): FirewallPolicy {
        return new FirewallPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/firewallPolicy:FirewallPolicy';

    /**
     * Returns true if the given object is an instance of FirewallPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallPolicy.__pulumiType;
    }

    /**
     * Valid values: 'allow', 'deny' or 'force-drop'(in stateful firewall rule to allow immediate packet dropping on
     * established sessions).
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Description of this firewall policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.
     */
    public readonly dstIp!: pulumi.Output<string>;
    /**
     * The name of gateway.
     */
    public readonly gwName!: pulumi.Output<string>;
    /**
     * Valid values: true or false.
     */
    public readonly logEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A single port or a range of port numbers.
     */
    public readonly port!: pulumi.Output<string>;
    /**
     * Position in the policy list, where the firewall policy will be inserted to.
     */
    public readonly position!: pulumi.Output<number>;
    /**
     * 'all', 'tcp', 'udp', 'icmp', 'sctp', 'rdp', 'dccp'.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.
     */
    public readonly srcIp!: pulumi.Output<string>;

    /**
     * Create a FirewallPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallPolicyArgs | FirewallPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallPolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dstIp"] = state ? state.dstIp : undefined;
            resourceInputs["gwName"] = state ? state.gwName : undefined;
            resourceInputs["logEnabled"] = state ? state.logEnabled : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["srcIp"] = state ? state.srcIp : undefined;
        } else {
            const args = argsOrState as FirewallPolicyArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.dstIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstIp'");
            }
            if ((!args || args.gwName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gwName'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.srcIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcIp'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dstIp"] = args ? args.dstIp : undefined;
            resourceInputs["gwName"] = args ? args.gwName : undefined;
            resourceInputs["logEnabled"] = args ? args.logEnabled : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["srcIp"] = args ? args.srcIp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallPolicy resources.
 */
export interface FirewallPolicyState {
    /**
     * Valid values: 'allow', 'deny' or 'force-drop'(in stateful firewall rule to allow immediate packet dropping on
     * established sessions).
     */
    action?: pulumi.Input<string>;
    /**
     * Description of this firewall policy.
     */
    description?: pulumi.Input<string>;
    /**
     * CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.
     */
    dstIp?: pulumi.Input<string>;
    /**
     * The name of gateway.
     */
    gwName?: pulumi.Input<string>;
    /**
     * Valid values: true or false.
     */
    logEnabled?: pulumi.Input<boolean>;
    /**
     * A single port or a range of port numbers.
     */
    port?: pulumi.Input<string>;
    /**
     * Position in the policy list, where the firewall policy will be inserted to.
     */
    position?: pulumi.Input<number>;
    /**
     * 'all', 'tcp', 'udp', 'icmp', 'sctp', 'rdp', 'dccp'.
     */
    protocol?: pulumi.Input<string>;
    /**
     * CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.
     */
    srcIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallPolicy resource.
 */
export interface FirewallPolicyArgs {
    /**
     * Valid values: 'allow', 'deny' or 'force-drop'(in stateful firewall rule to allow immediate packet dropping on
     * established sessions).
     */
    action: pulumi.Input<string>;
    /**
     * Description of this firewall policy.
     */
    description?: pulumi.Input<string>;
    /**
     * CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.
     */
    dstIp: pulumi.Input<string>;
    /**
     * The name of gateway.
     */
    gwName: pulumi.Input<string>;
    /**
     * Valid values: true or false.
     */
    logEnabled?: pulumi.Input<boolean>;
    /**
     * A single port or a range of port numbers.
     */
    port: pulumi.Input<string>;
    /**
     * Position in the policy list, where the firewall policy will be inserted to.
     */
    position?: pulumi.Input<number>;
    /**
     * 'all', 'tcp', 'udp', 'icmp', 'sctp', 'rdp', 'dccp'.
     */
    protocol?: pulumi.Input<string>;
    /**
     * CIDRs separated by comma or tag names such 'HR' or 'marketing' etc.
     */
    srcIp: pulumi.Input<string>;
}
