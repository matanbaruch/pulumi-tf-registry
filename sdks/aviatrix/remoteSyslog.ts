// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RemoteSyslog extends pulumi.CustomResource {
    /**
     * Get an existing RemoteSyslog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemoteSyslogState, opts?: pulumi.CustomResourceOptions): RemoteSyslog {
        return new RemoteSyslog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/remoteSyslog:RemoteSyslog';

    /**
     * Returns true if the given object is an instance of RemoteSyslog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemoteSyslog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteSyslog.__pulumiType;
    }

    /**
     * CA certificate file.
     */
    public readonly caCertificateFile!: pulumi.Output<string | undefined>;
    /**
     * List of excluded gateways.
     */
    public readonly excludedGateways!: pulumi.Output<string[] | undefined>;
    /**
     * A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
     */
    public readonly index!: pulumi.Output<number | undefined>;
    /**
     * Profile name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * True if not protected by TLS.
     */
    public /*out*/ readonly notls!: pulumi.Output<boolean>;
    /**
     * Listening port of the remote syslog server.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Private key of the controller that pairs with the public certificate.
     */
    public readonly privateKeyFile!: pulumi.Output<string | undefined>;
    /**
     * TCP or UDP (TCP by default).
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Public certificate of the controller signed by the same CA.
     */
    public readonly publicCertificateFile!: pulumi.Output<string | undefined>;
    /**
     * FQDN or IP address of the remote syslog server.
     */
    public readonly server!: pulumi.Output<string>;
    /**
     * Enabled or not.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Useful when forwarding to 3rd party servers like Datadog or Sumo
     */
    public readonly template!: pulumi.Output<string | undefined>;

    /**
     * Create a RemoteSyslog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemoteSyslogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemoteSyslogArgs | RemoteSyslogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemoteSyslogState | undefined;
            resourceInputs["caCertificateFile"] = state ? state.caCertificateFile : undefined;
            resourceInputs["excludedGateways"] = state ? state.excludedGateways : undefined;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notls"] = state ? state.notls : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateKeyFile"] = state ? state.privateKeyFile : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["publicCertificateFile"] = state ? state.publicCertificateFile : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
        } else {
            const args = argsOrState as RemoteSyslogArgs | undefined;
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            resourceInputs["caCertificateFile"] = args ? args.caCertificateFile : undefined;
            resourceInputs["excludedGateways"] = args ? args.excludedGateways : undefined;
            resourceInputs["index"] = args ? args.index : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["privateKeyFile"] = args ? args.privateKeyFile : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["publicCertificateFile"] = args ? args.publicCertificateFile : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["notls"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RemoteSyslog.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RemoteSyslog resources.
 */
export interface RemoteSyslogState {
    /**
     * CA certificate file.
     */
    caCertificateFile?: pulumi.Input<string>;
    /**
     * List of excluded gateways.
     */
    excludedGateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
     */
    index?: pulumi.Input<number>;
    /**
     * Profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * True if not protected by TLS.
     */
    notls?: pulumi.Input<boolean>;
    /**
     * Listening port of the remote syslog server.
     */
    port?: pulumi.Input<number>;
    /**
     * Private key of the controller that pairs with the public certificate.
     */
    privateKeyFile?: pulumi.Input<string>;
    /**
     * TCP or UDP (TCP by default).
     */
    protocol?: pulumi.Input<string>;
    /**
     * Public certificate of the controller signed by the same CA.
     */
    publicCertificateFile?: pulumi.Input<string>;
    /**
     * FQDN or IP address of the remote syslog server.
     */
    server?: pulumi.Input<string>;
    /**
     * Enabled or not.
     */
    status?: pulumi.Input<string>;
    /**
     * Useful when forwarding to 3rd party servers like Datadog or Sumo
     */
    template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RemoteSyslog resource.
 */
export interface RemoteSyslogArgs {
    /**
     * CA certificate file.
     */
    caCertificateFile?: pulumi.Input<string>;
    /**
     * List of excluded gateways.
     */
    excludedGateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A total of 10 profiles from index 0 to 9 are supported for remote syslog, while index 9 is reserved for CoPilot.
     */
    index?: pulumi.Input<number>;
    /**
     * Profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * Listening port of the remote syslog server.
     */
    port: pulumi.Input<number>;
    /**
     * Private key of the controller that pairs with the public certificate.
     */
    privateKeyFile?: pulumi.Input<string>;
    /**
     * TCP or UDP (TCP by default).
     */
    protocol?: pulumi.Input<string>;
    /**
     * Public certificate of the controller signed by the same CA.
     */
    publicCertificateFile?: pulumi.Input<string>;
    /**
     * FQDN or IP address of the remote syslog server.
     */
    server: pulumi.Input<string>;
    /**
     * Useful when forwarding to 3rd party servers like Datadog or Sumo
     */
    template?: pulumi.Input<string>;
}
