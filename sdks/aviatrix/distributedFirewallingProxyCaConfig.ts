// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DistributedFirewallingProxyCaConfig extends pulumi.CustomResource {
    /**
     * Get an existing DistributedFirewallingProxyCaConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DistributedFirewallingProxyCaConfigState, opts?: pulumi.CustomResourceOptions): DistributedFirewallingProxyCaConfig {
        return new DistributedFirewallingProxyCaConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/distributedFirewallingProxyCaConfig:DistributedFirewallingProxyCaConfig';

    /**
     * Returns true if the given object is an instance of DistributedFirewallingProxyCaConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DistributedFirewallingProxyCaConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DistributedFirewallingProxyCaConfig.__pulumiType;
    }

    /**
     * Content of proxy ca certificate to create only one cert.
     */
    public readonly caCert!: pulumi.Output<string>;
    /**
     * Content of proxy ca cert key to create only one cert.
     */
    public readonly caKey!: pulumi.Output<string>;
    /**
     * Common name of created cert.
     */
    public /*out*/ readonly commonName!: pulumi.Output<string>;
    /**
     * Expiration time of created cert.
     */
    public /*out*/ readonly expirationTime!: pulumi.Output<string>;
    /**
     * Issuer name of created cert.
     */
    public /*out*/ readonly issuerName!: pulumi.Output<string>;
    /**
     * Unique serial of created cert.
     */
    public /*out*/ readonly uniqueSerial!: pulumi.Output<string>;
    /**
     * Upload info of created cert.
     */
    public /*out*/ readonly uploadInfo!: pulumi.Output<string>;

    /**
     * Create a DistributedFirewallingProxyCaConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DistributedFirewallingProxyCaConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DistributedFirewallingProxyCaConfigArgs | DistributedFirewallingProxyCaConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DistributedFirewallingProxyCaConfigState | undefined;
            resourceInputs["caCert"] = state ? state.caCert : undefined;
            resourceInputs["caKey"] = state ? state.caKey : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["expirationTime"] = state ? state.expirationTime : undefined;
            resourceInputs["issuerName"] = state ? state.issuerName : undefined;
            resourceInputs["uniqueSerial"] = state ? state.uniqueSerial : undefined;
            resourceInputs["uploadInfo"] = state ? state.uploadInfo : undefined;
        } else {
            const args = argsOrState as DistributedFirewallingProxyCaConfigArgs | undefined;
            if ((!args || args.caCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caCert'");
            }
            if ((!args || args.caKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caKey'");
            }
            resourceInputs["caCert"] = args ? args.caCert : undefined;
            resourceInputs["caKey"] = args?.caKey ? pulumi.secret(args.caKey) : undefined;
            resourceInputs["commonName"] = undefined /*out*/;
            resourceInputs["expirationTime"] = undefined /*out*/;
            resourceInputs["issuerName"] = undefined /*out*/;
            resourceInputs["uniqueSerial"] = undefined /*out*/;
            resourceInputs["uploadInfo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DistributedFirewallingProxyCaConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DistributedFirewallingProxyCaConfig resources.
 */
export interface DistributedFirewallingProxyCaConfigState {
    /**
     * Content of proxy ca certificate to create only one cert.
     */
    caCert?: pulumi.Input<string>;
    /**
     * Content of proxy ca cert key to create only one cert.
     */
    caKey?: pulumi.Input<string>;
    /**
     * Common name of created cert.
     */
    commonName?: pulumi.Input<string>;
    /**
     * Expiration time of created cert.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * Issuer name of created cert.
     */
    issuerName?: pulumi.Input<string>;
    /**
     * Unique serial of created cert.
     */
    uniqueSerial?: pulumi.Input<string>;
    /**
     * Upload info of created cert.
     */
    uploadInfo?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DistributedFirewallingProxyCaConfig resource.
 */
export interface DistributedFirewallingProxyCaConfigArgs {
    /**
     * Content of proxy ca certificate to create only one cert.
     */
    caCert: pulumi.Input<string>;
    /**
     * Content of proxy ca cert key to create only one cert.
     */
    caKey: pulumi.Input<string>;
}
