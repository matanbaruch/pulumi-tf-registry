// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Fqdn extends pulumi.CustomResource {
    /**
     * Get an existing Fqdn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FqdnState, opts?: pulumi.CustomResourceOptions): Fqdn {
        return new Fqdn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aviatrix:index/fqdn:Fqdn';

    /**
     * Returns true if the given object is an instance of Fqdn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Fqdn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fqdn.__pulumiType;
    }

    /**
     * A list of one or more domain names/tag rules.
     */
    public readonly domainNames!: pulumi.Output<outputs.FqdnDomainName[] | undefined>;
    /**
     * FQDN Filter Tag Status. Valid values: true or false.
     */
    public readonly fqdnEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the tag color to be a white-list tag or black-list tag. 'white' or 'black'
     */
    public readonly fqdnMode!: pulumi.Output<string | undefined>;
    /**
     * FQDN Filter Tag Name.
     */
    public readonly fqdnTag!: pulumi.Output<string>;
    /**
     * A list of gateways to attach to the specific tag.
     */
    public readonly gwFilterTagLists!: pulumi.Output<outputs.FqdnGwFilterTagList[] | undefined>;
    /**
     * Enable to manage domain name rules in-line. If false, domain name rules must be managed using `aviatrix.FqdnTagRule`
     * resources.
     */
    public readonly manageDomainNames!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Fqdn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FqdnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FqdnArgs | FqdnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FqdnState | undefined;
            resourceInputs["domainNames"] = state ? state.domainNames : undefined;
            resourceInputs["fqdnEnabled"] = state ? state.fqdnEnabled : undefined;
            resourceInputs["fqdnMode"] = state ? state.fqdnMode : undefined;
            resourceInputs["fqdnTag"] = state ? state.fqdnTag : undefined;
            resourceInputs["gwFilterTagLists"] = state ? state.gwFilterTagLists : undefined;
            resourceInputs["manageDomainNames"] = state ? state.manageDomainNames : undefined;
        } else {
            const args = argsOrState as FqdnArgs | undefined;
            if ((!args || args.fqdnTag === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdnTag'");
            }
            resourceInputs["domainNames"] = args ? args.domainNames : undefined;
            resourceInputs["fqdnEnabled"] = args ? args.fqdnEnabled : undefined;
            resourceInputs["fqdnMode"] = args ? args.fqdnMode : undefined;
            resourceInputs["fqdnTag"] = args ? args.fqdnTag : undefined;
            resourceInputs["gwFilterTagLists"] = args ? args.gwFilterTagLists : undefined;
            resourceInputs["manageDomainNames"] = args ? args.manageDomainNames : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Fqdn.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Fqdn resources.
 */
export interface FqdnState {
    /**
     * A list of one or more domain names/tag rules.
     */
    domainNames?: pulumi.Input<pulumi.Input<inputs.FqdnDomainName>[]>;
    /**
     * FQDN Filter Tag Status. Valid values: true or false.
     */
    fqdnEnabled?: pulumi.Input<boolean>;
    /**
     * Specify the tag color to be a white-list tag or black-list tag. 'white' or 'black'
     */
    fqdnMode?: pulumi.Input<string>;
    /**
     * FQDN Filter Tag Name.
     */
    fqdnTag?: pulumi.Input<string>;
    /**
     * A list of gateways to attach to the specific tag.
     */
    gwFilterTagLists?: pulumi.Input<pulumi.Input<inputs.FqdnGwFilterTagList>[]>;
    /**
     * Enable to manage domain name rules in-line. If false, domain name rules must be managed using `aviatrix.FqdnTagRule`
     * resources.
     */
    manageDomainNames?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Fqdn resource.
 */
export interface FqdnArgs {
    /**
     * A list of one or more domain names/tag rules.
     */
    domainNames?: pulumi.Input<pulumi.Input<inputs.FqdnDomainName>[]>;
    /**
     * FQDN Filter Tag Status. Valid values: true or false.
     */
    fqdnEnabled?: pulumi.Input<boolean>;
    /**
     * Specify the tag color to be a white-list tag or black-list tag. 'white' or 'black'
     */
    fqdnMode?: pulumi.Input<string>;
    /**
     * FQDN Filter Tag Name.
     */
    fqdnTag: pulumi.Input<string>;
    /**
     * A list of gateways to attach to the specific tag.
     */
    gwFilterTagLists?: pulumi.Input<pulumi.Input<inputs.FqdnGwFilterTagList>[]>;
    /**
     * Enable to manage domain name rules in-line. If false, domain name rules must be managed using `aviatrix.FqdnTagRule`
     * resources.
     */
    manageDomainNames?: pulumi.Input<boolean>;
}
