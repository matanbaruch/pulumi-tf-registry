// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RecaptchaEnterpriseKey extends pulumi.CustomResource {
    /**
     * Get an existing RecaptchaEnterpriseKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecaptchaEnterpriseKeyState, opts?: pulumi.CustomResourceOptions): RecaptchaEnterpriseKey {
        return new RecaptchaEnterpriseKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/recaptchaEnterpriseKey:RecaptchaEnterpriseKey';

    /**
     * Returns true if the given object is an instance of RecaptchaEnterpriseKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecaptchaEnterpriseKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecaptchaEnterpriseKey.__pulumiType;
    }

    /**
     * Settings for keys that can be used by Android apps.
     */
    public readonly androidSettings!: pulumi.Output<outputs.RecaptchaEnterpriseKeyAndroidSettings | undefined>;
    /**
     * The timestamp corresponding to the creation of this Key.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Human-readable display name of this key. Modifiable by user.
     */
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Settings for keys that can be used by iOS apps.
     */
    public readonly iosSettings!: pulumi.Output<outputs.RecaptchaEnterpriseKeyIosSettings | undefined>;
    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels). **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * `effective_labels` for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource id for the Key, which is the same as the Site Key itself.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Options for user acceptance testing.
     */
    public readonly testingOptions!: pulumi.Output<outputs.RecaptchaEnterpriseKeyTestingOptions | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RecaptchaEnterpriseKeyTimeouts | undefined>;
    /**
     * Settings specific to keys that can be used for WAF (Web Application Firewall).
     */
    public readonly wafSettings!: pulumi.Output<outputs.RecaptchaEnterpriseKeyWafSettings | undefined>;
    /**
     * Settings for keys that can be used by websites.
     */
    public readonly webSettings!: pulumi.Output<outputs.RecaptchaEnterpriseKeyWebSettings | undefined>;

    /**
     * Create a RecaptchaEnterpriseKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecaptchaEnterpriseKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecaptchaEnterpriseKeyArgs | RecaptchaEnterpriseKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecaptchaEnterpriseKeyState | undefined;
            resourceInputs["androidSettings"] = state ? state.androidSettings : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["iosSettings"] = state ? state.iosSettings : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["testingOptions"] = state ? state.testingOptions : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["wafSettings"] = state ? state.wafSettings : undefined;
            resourceInputs["webSettings"] = state ? state.webSettings : undefined;
        } else {
            const args = argsOrState as RecaptchaEnterpriseKeyArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["androidSettings"] = args ? args.androidSettings : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["iosSettings"] = args ? args.iosSettings : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["testingOptions"] = args ? args.testingOptions : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["wafSettings"] = args ? args.wafSettings : undefined;
            resourceInputs["webSettings"] = args ? args.webSettings : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecaptchaEnterpriseKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RecaptchaEnterpriseKey resources.
 */
export interface RecaptchaEnterpriseKeyState {
    /**
     * Settings for keys that can be used by Android apps.
     */
    androidSettings?: pulumi.Input<inputs.RecaptchaEnterpriseKeyAndroidSettings>;
    /**
     * The timestamp corresponding to the creation of this Key.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Human-readable display name of this key. Modifiable by user.
     */
    displayName?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Settings for keys that can be used by iOS apps.
     */
    iosSettings?: pulumi.Input<inputs.RecaptchaEnterpriseKeyIosSettings>;
    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels). **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * `effective_labels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource id for the Key, which is the same as the Site Key itself.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Options for user acceptance testing.
     */
    testingOptions?: pulumi.Input<inputs.RecaptchaEnterpriseKeyTestingOptions>;
    timeouts?: pulumi.Input<inputs.RecaptchaEnterpriseKeyTimeouts>;
    /**
     * Settings specific to keys that can be used for WAF (Web Application Firewall).
     */
    wafSettings?: pulumi.Input<inputs.RecaptchaEnterpriseKeyWafSettings>;
    /**
     * Settings for keys that can be used by websites.
     */
    webSettings?: pulumi.Input<inputs.RecaptchaEnterpriseKeyWebSettings>;
}

/**
 * The set of arguments for constructing a RecaptchaEnterpriseKey resource.
 */
export interface RecaptchaEnterpriseKeyArgs {
    /**
     * Settings for keys that can be used by Android apps.
     */
    androidSettings?: pulumi.Input<inputs.RecaptchaEnterpriseKeyAndroidSettings>;
    /**
     * Human-readable display name of this key. Modifiable by user.
     */
    displayName: pulumi.Input<string>;
    /**
     * Settings for keys that can be used by iOS apps.
     */
    iosSettings?: pulumi.Input<inputs.RecaptchaEnterpriseKeyIosSettings>;
    /**
     * See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels). **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * `effective_labels` for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Options for user acceptance testing.
     */
    testingOptions?: pulumi.Input<inputs.RecaptchaEnterpriseKeyTestingOptions>;
    timeouts?: pulumi.Input<inputs.RecaptchaEnterpriseKeyTimeouts>;
    /**
     * Settings specific to keys that can be used for WAF (Web Application Firewall).
     */
    wafSettings?: pulumi.Input<inputs.RecaptchaEnterpriseKeyWafSettings>;
    /**
     * Settings for keys that can be used by websites.
     */
    webSettings?: pulumi.Input<inputs.RecaptchaEnterpriseKeyWebSettings>;
}
