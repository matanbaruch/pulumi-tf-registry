// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputeInstanceTemplate(args?: GetComputeInstanceTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeInstanceTemplateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-beta:index/getComputeInstanceTemplate:getComputeInstanceTemplate", {
        "filter": args.filter,
        "id": args.id,
        "mostRecent": args.mostRecent,
        "name": args.name,
        "project": args.project,
        "selfLinkUnique": args.selfLinkUnique,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputeInstanceTemplate.
 */
export interface GetComputeInstanceTemplateArgs {
    filter?: string;
    id?: string;
    mostRecent?: boolean;
    name?: string;
    project?: string;
    selfLinkUnique?: string;
}

/**
 * A collection of values returned by getComputeInstanceTemplate.
 */
export interface GetComputeInstanceTemplateResult {
    readonly advancedMachineFeatures: outputs.GetComputeInstanceTemplateAdvancedMachineFeature[];
    readonly canIpForward: boolean;
    readonly confidentialInstanceConfigs: outputs.GetComputeInstanceTemplateConfidentialInstanceConfig[];
    readonly description: string;
    readonly disks: outputs.GetComputeInstanceTemplateDisk[];
    readonly effectiveLabels: {[key: string]: string};
    readonly enableDisplay: boolean;
    readonly filter?: string;
    readonly guestAccelerators: outputs.GetComputeInstanceTemplateGuestAccelerator[];
    readonly id: string;
    readonly instanceDescription: string;
    readonly labels: {[key: string]: string};
    readonly machineType: string;
    readonly metadata: {[key: string]: string};
    readonly metadataFingerprint: string;
    readonly metadataStartupScript: string;
    readonly minCpuPlatform: string;
    readonly mostRecent?: boolean;
    readonly name?: string;
    readonly namePrefix: string;
    readonly networkInterfaces: outputs.GetComputeInstanceTemplateNetworkInterface[];
    readonly networkPerformanceConfigs: outputs.GetComputeInstanceTemplateNetworkPerformanceConfig[];
    readonly partnerMetadata: {[key: string]: string};
    readonly project?: string;
    readonly region: string;
    readonly reservationAffinities: outputs.GetComputeInstanceTemplateReservationAffinity[];
    readonly resourceManagerTags: {[key: string]: string};
    readonly resourcePolicies: string[];
    readonly schedulings: outputs.GetComputeInstanceTemplateScheduling[];
    readonly selfLink: string;
    readonly selfLinkUnique?: string;
    readonly serviceAccounts: outputs.GetComputeInstanceTemplateServiceAccount[];
    readonly shieldedInstanceConfigs: outputs.GetComputeInstanceTemplateShieldedInstanceConfig[];
    readonly tags: string[];
    readonly tagsFingerprint: string;
    readonly terraformLabels: {[key: string]: string};
}
export function getComputeInstanceTemplateOutput(args?: GetComputeInstanceTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeInstanceTemplateResult> {
    return pulumi.output(args).apply((a: any) => getComputeInstanceTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getComputeInstanceTemplate.
 */
export interface GetComputeInstanceTemplateOutputArgs {
    filter?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    mostRecent?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    selfLinkUnique?: pulumi.Input<string>;
}
