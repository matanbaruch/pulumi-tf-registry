// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DialogflowCxTestCase extends pulumi.CustomResource {
    /**
     * Get an existing DialogflowCxTestCase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DialogflowCxTestCaseState, opts?: pulumi.CustomResourceOptions): DialogflowCxTestCase {
        return new DialogflowCxTestCase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/dialogflowCxTestCase:DialogflowCxTestCase';

    /**
     * Returns true if the given object is an instance of DialogflowCxTestCase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DialogflowCxTestCase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DialogflowCxTestCase.__pulumiType;
    }

    /**
     * When the test was created. A timestamp in RFC3339 text format.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The human-readable name of the test case, unique within the agent. Limit of 200 characters.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The latest test result.
     */
    public /*out*/ readonly lastTestResults!: pulumi.Output<outputs.DialogflowCxTestCaseLastTestResult[]>;
    /**
     * The unique identifier of the test case. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent
     * ID>/testCases/<TestCase ID>.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Additional freeform notes about the test case. Limit of 400 characters.
     */
    public readonly notes!: pulumi.Output<string | undefined>;
    /**
     * The agent to create the test case for. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag
     * should start with "#" and has a limit of 30 characters
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The conversation turns uttered when the test case was created, in chronological order. These include the canonical set
     * of agent utterances that should occur when the agent is working properly.
     */
    public readonly testCaseConversationTurns!: pulumi.Output<outputs.DialogflowCxTestCaseTestCaseConversationTurn[] | undefined>;
    /**
     * Config for the test case.
     */
    public readonly testConfig!: pulumi.Output<outputs.DialogflowCxTestCaseTestConfig | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DialogflowCxTestCaseTimeouts | undefined>;

    /**
     * Create a DialogflowCxTestCase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DialogflowCxTestCaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DialogflowCxTestCaseArgs | DialogflowCxTestCaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DialogflowCxTestCaseState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["lastTestResults"] = state ? state.lastTestResults : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["testCaseConversationTurns"] = state ? state.testCaseConversationTurns : undefined;
            resourceInputs["testConfig"] = state ? state.testConfig : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DialogflowCxTestCaseArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["testCaseConversationTurns"] = args ? args.testCaseConversationTurns : undefined;
            resourceInputs["testConfig"] = args ? args.testConfig : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["lastTestResults"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DialogflowCxTestCase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DialogflowCxTestCase resources.
 */
export interface DialogflowCxTestCaseState {
    /**
     * When the test was created. A timestamp in RFC3339 text format.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The human-readable name of the test case, unique within the agent. Limit of 200 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The latest test result.
     */
    lastTestResults?: pulumi.Input<pulumi.Input<inputs.DialogflowCxTestCaseLastTestResult>[]>;
    /**
     * The unique identifier of the test case. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent
     * ID>/testCases/<TestCase ID>.
     */
    name?: pulumi.Input<string>;
    /**
     * Additional freeform notes about the test case. Limit of 400 characters.
     */
    notes?: pulumi.Input<string>;
    /**
     * The agent to create the test case for. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    parent?: pulumi.Input<string>;
    /**
     * Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag
     * should start with "#" and has a limit of 30 characters
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The conversation turns uttered when the test case was created, in chronological order. These include the canonical set
     * of agent utterances that should occur when the agent is working properly.
     */
    testCaseConversationTurns?: pulumi.Input<pulumi.Input<inputs.DialogflowCxTestCaseTestCaseConversationTurn>[]>;
    /**
     * Config for the test case.
     */
    testConfig?: pulumi.Input<inputs.DialogflowCxTestCaseTestConfig>;
    timeouts?: pulumi.Input<inputs.DialogflowCxTestCaseTimeouts>;
}

/**
 * The set of arguments for constructing a DialogflowCxTestCase resource.
 */
export interface DialogflowCxTestCaseArgs {
    /**
     * The human-readable name of the test case, unique within the agent. Limit of 200 characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * Additional freeform notes about the test case. Limit of 400 characters.
     */
    notes?: pulumi.Input<string>;
    /**
     * The agent to create the test case for. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
     */
    parent?: pulumi.Input<string>;
    /**
     * Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag
     * should start with "#" and has a limit of 30 characters
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The conversation turns uttered when the test case was created, in chronological order. These include the canonical set
     * of agent utterances that should occur when the agent is working properly.
     */
    testCaseConversationTurns?: pulumi.Input<pulumi.Input<inputs.DialogflowCxTestCaseTestCaseConversationTurn>[]>;
    /**
     * Config for the test case.
     */
    testConfig?: pulumi.Input<inputs.DialogflowCxTestCaseTestConfig>;
    timeouts?: pulumi.Input<inputs.DialogflowCxTestCaseTimeouts>;
}
