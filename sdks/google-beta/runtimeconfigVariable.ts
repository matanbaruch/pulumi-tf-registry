// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RuntimeconfigVariable extends pulumi.CustomResource {
    /**
     * Get an existing RuntimeconfigVariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuntimeconfigVariableState, opts?: pulumi.CustomResourceOptions): RuntimeconfigVariable {
        return new RuntimeconfigVariable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/runtimeconfigVariable:RuntimeconfigVariable';

    /**
     * Returns true if the given object is an instance of RuntimeconfigVariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuntimeconfigVariable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuntimeconfigVariable.__pulumiType;
    }

    /**
     * The name of the variable to manage. Note that variable names can be hierarchical using slashes (e.g.
     * "prod-variables/hostname").
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the RuntimeConfig resource containing this variable.
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    public readonly text!: pulumi.Output<string | undefined>;
    /**
     * The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated.
     * Example: "2016-10-09T12:33:37.578138407Z".
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    public readonly value!: pulumi.Output<string | undefined>;

    /**
     * Create a RuntimeconfigVariable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuntimeconfigVariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuntimeconfigVariableArgs | RuntimeconfigVariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuntimeconfigVariableState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["text"] = state ? state.text : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as RuntimeconfigVariableArgs | undefined;
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["text"] = args?.text ? pulumi.secret(args.text) : undefined;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["text", "value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RuntimeconfigVariable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RuntimeconfigVariable resources.
 */
export interface RuntimeconfigVariableState {
    /**
     * The name of the variable to manage. Note that variable names can be hierarchical using slashes (e.g.
     * "prod-variables/hostname").
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the RuntimeConfig resource containing this variable.
     */
    parent?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    text?: pulumi.Input<string>;
    /**
     * The timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds, representing when the variable was last updated.
     * Example: "2016-10-09T12:33:37.578138407Z".
     */
    updateTime?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RuntimeconfigVariable resource.
 */
export interface RuntimeconfigVariableArgs {
    /**
     * The name of the variable to manage. Note that variable names can be hierarchical using slashes (e.g.
     * "prod-variables/hostname").
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the RuntimeConfig resource containing this variable.
     */
    parent: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    text?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}
