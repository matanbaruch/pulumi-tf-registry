// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EdgecontainerVpnConnection extends pulumi.CustomResource {
    /**
     * Get an existing EdgecontainerVpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgecontainerVpnConnectionState, opts?: pulumi.CustomResourceOptions): EdgecontainerVpnConnection {
        return new EdgecontainerVpnConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/edgecontainerVpnConnection:EdgecontainerVpnConnection';

    /**
     * Returns true if the given object is an instance of EdgecontainerVpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgecontainerVpnConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgecontainerVpnConnection.__pulumiType;
    }

    /**
     * The canonical Cluster name to connect to. It is in the form of
     * projects/{project}/locations/{location}/clusters/{cluster}.
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * The time when the VPN connection was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A nested object resource
     */
    public /*out*/ readonly details!: pulumi.Output<outputs.EdgecontainerVpnConnectionDetail[]>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to
     * use 2 ANG floating IPs.
     */
    public readonly enableHighAvailability!: pulumi.Output<boolean>;
    /**
     * Labels associated with this resource. **Note**: This field is non-authoritative, and will only manage the labels present
     * in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Google Cloud Platform location.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of VPN connection
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that
     * only one external IP maps to the GMEC Anthos cluster. This is empty if NAT is not used.
     */
    public readonly natGatewayIp!: pulumi.Output<string | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The VPN connection Cloud Router name.
     */
    public readonly router!: pulumi.Output<string | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.EdgecontainerVpnConnectionTimeouts | undefined>;
    /**
     * The time when the VPN connection was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The network ID of VPC to connect to.
     */
    public readonly vpc!: pulumi.Output<string | undefined>;
    /**
     * Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
     */
    public readonly vpcProject!: pulumi.Output<outputs.EdgecontainerVpnConnectionVpcProject | undefined>;

    /**
     * Create a EdgecontainerVpnConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgecontainerVpnConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgecontainerVpnConnectionArgs | EdgecontainerVpnConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgecontainerVpnConnectionState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["details"] = state ? state.details : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["enableHighAvailability"] = state ? state.enableHighAvailability : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natGatewayIp"] = state ? state.natGatewayIp : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["router"] = state ? state.router : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vpc"] = state ? state.vpc : undefined;
            resourceInputs["vpcProject"] = state ? state.vpcProject : undefined;
        } else {
            const args = argsOrState as EdgecontainerVpnConnectionArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["enableHighAvailability"] = args ? args.enableHighAvailability : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natGatewayIp"] = args ? args.natGatewayIp : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["router"] = args ? args.router : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpc"] = args ? args.vpc : undefined;
            resourceInputs["vpcProject"] = args ? args.vpcProject : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["details"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgecontainerVpnConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EdgecontainerVpnConnection resources.
 */
export interface EdgecontainerVpnConnectionState {
    /**
     * The canonical Cluster name to connect to. It is in the form of
     * projects/{project}/locations/{location}/clusters/{cluster}.
     */
    cluster?: pulumi.Input<string>;
    /**
     * The time when the VPN connection was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A nested object resource
     */
    details?: pulumi.Input<pulumi.Input<inputs.EdgecontainerVpnConnectionDetail>[]>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to
     * use 2 ANG floating IPs.
     */
    enableHighAvailability?: pulumi.Input<boolean>;
    /**
     * Labels associated with this resource. **Note**: This field is non-authoritative, and will only manage the labels present
     * in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Google Cloud Platform location.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of VPN connection
     */
    name?: pulumi.Input<string>;
    /**
     * NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that
     * only one external IP maps to the GMEC Anthos cluster. This is empty if NAT is not used.
     */
    natGatewayIp?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The VPN connection Cloud Router name.
     */
    router?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EdgecontainerVpnConnectionTimeouts>;
    /**
     * The time when the VPN connection was last updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The network ID of VPC to connect to.
     */
    vpc?: pulumi.Input<string>;
    /**
     * Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
     */
    vpcProject?: pulumi.Input<inputs.EdgecontainerVpnConnectionVpcProject>;
}

/**
 * The set of arguments for constructing a EdgecontainerVpnConnection resource.
 */
export interface EdgecontainerVpnConnectionArgs {
    /**
     * The canonical Cluster name to connect to. It is in the form of
     * projects/{project}/locations/{location}/clusters/{cluster}.
     */
    cluster: pulumi.Input<string>;
    /**
     * Whether this VPN connection has HA enabled on cluster side. If enabled, when creating VPN connection we will attempt to
     * use 2 ANG floating IPs.
     */
    enableHighAvailability?: pulumi.Input<boolean>;
    /**
     * Labels associated with this resource. **Note**: This field is non-authoritative, and will only manage the labels present
     * in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Google Cloud Platform location.
     */
    location: pulumi.Input<string>;
    /**
     * The resource name of VPN connection
     */
    name?: pulumi.Input<string>;
    /**
     * NAT gateway IP, or WAN IP address. If a customer has multiple NAT IPs, the customer needs to configure NAT such that
     * only one external IP maps to the GMEC Anthos cluster. This is empty if NAT is not used.
     */
    natGatewayIp?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The VPN connection Cloud Router name.
     */
    router?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EdgecontainerVpnConnectionTimeouts>;
    /**
     * The network ID of VPC to connect to.
     */
    vpc?: pulumi.Input<string>;
    /**
     * Project detail of the VPC network. Required if VPC is in a different project than the cluster project.
     */
    vpcProject?: pulumi.Input<inputs.EdgecontainerVpnConnectionVpcProject>;
}
