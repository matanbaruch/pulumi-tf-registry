// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DiscoveryEngineDataStore extends pulumi.CustomResource {
    /**
     * Get an existing DiscoveryEngineDataStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiscoveryEngineDataStoreState, opts?: pulumi.CustomResourceOptions): DiscoveryEngineDataStore {
        return new DiscoveryEngineDataStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/discoveryEngineDataStore:DiscoveryEngineDataStore';

    /**
     * Returns true if the given object is an instance of DiscoveryEngineDataStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiscoveryEngineDataStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiscoveryEngineDataStore.__pulumiType;
    }

    /**
     * The content config of the data store. Possible values: ["NO_CONTENT", "CONTENT_REQUIRED", "PUBLIC_WEBSITE"]
     */
    public readonly contentConfig!: pulumi.Output<string>;
    /**
     * If true, an advanced data store for site search will be created. If the data store is not configured as site search
     * (GENERIC vertical and PUBLIC_WEBSITE contentConfig), this flag will be ignored.
     */
    public readonly createAdvancedSiteSearch!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp when the DataStore was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The unique id of the data store.
     */
    public readonly dataStoreId!: pulumi.Output<string>;
    /**
     * The id of the default Schema associated with this data store.
     */
    public /*out*/ readonly defaultSchemaId!: pulumi.Output<string>;
    /**
     * The display name of the data store. This field must be a UTF-8 encoded string with a length limit of 128 characters.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Configuration for Document understanding and enrichment.
     */
    public readonly documentProcessingConfig!: pulumi.Output<outputs.DiscoveryEngineDataStoreDocumentProcessingConfig | undefined>;
    /**
     * The industry vertical that the data store registers. Possible values: ["GENERIC", "MEDIA"]
     */
    public readonly industryVertical!: pulumi.Output<string>;
    /**
     * The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The unique full resource name of the data store. Values are of the format
     * 'projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}'. This field must be a
     * UTF-8 encoded string with a length limit of 1024 characters.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * A boolean flag indicating whether to skip the default schema creation for the data store. Only enable this flag if you
     * are certain that the default schema is incompatible with your use case. If set to true, you must manually create a
     * schema for the data store before any documents can be ingested. This flag cannot be specified if
     * 'data_store.starting_schema' is specified.
     */
    public readonly skipDefaultSchemaCreation!: pulumi.Output<boolean | undefined>;
    /**
     * The solutions that the data store enrolls. Possible values: ["SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH",
     * "SOLUTION_TYPE_CHAT"]
     */
    public readonly solutionTypes!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DiscoveryEngineDataStoreTimeouts | undefined>;

    /**
     * Create a DiscoveryEngineDataStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiscoveryEngineDataStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiscoveryEngineDataStoreArgs | DiscoveryEngineDataStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiscoveryEngineDataStoreState | undefined;
            resourceInputs["contentConfig"] = state ? state.contentConfig : undefined;
            resourceInputs["createAdvancedSiteSearch"] = state ? state.createAdvancedSiteSearch : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataStoreId"] = state ? state.dataStoreId : undefined;
            resourceInputs["defaultSchemaId"] = state ? state.defaultSchemaId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["documentProcessingConfig"] = state ? state.documentProcessingConfig : undefined;
            resourceInputs["industryVertical"] = state ? state.industryVertical : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["skipDefaultSchemaCreation"] = state ? state.skipDefaultSchemaCreation : undefined;
            resourceInputs["solutionTypes"] = state ? state.solutionTypes : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DiscoveryEngineDataStoreArgs | undefined;
            if ((!args || args.contentConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentConfig'");
            }
            if ((!args || args.dataStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataStoreId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.industryVertical === undefined) && !opts.urn) {
                throw new Error("Missing required property 'industryVertical'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["contentConfig"] = args ? args.contentConfig : undefined;
            resourceInputs["createAdvancedSiteSearch"] = args ? args.createAdvancedSiteSearch : undefined;
            resourceInputs["dataStoreId"] = args ? args.dataStoreId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["documentProcessingConfig"] = args ? args.documentProcessingConfig : undefined;
            resourceInputs["industryVertical"] = args ? args.industryVertical : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["skipDefaultSchemaCreation"] = args ? args.skipDefaultSchemaCreation : undefined;
            resourceInputs["solutionTypes"] = args ? args.solutionTypes : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["defaultSchemaId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiscoveryEngineDataStore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DiscoveryEngineDataStore resources.
 */
export interface DiscoveryEngineDataStoreState {
    /**
     * The content config of the data store. Possible values: ["NO_CONTENT", "CONTENT_REQUIRED", "PUBLIC_WEBSITE"]
     */
    contentConfig?: pulumi.Input<string>;
    /**
     * If true, an advanced data store for site search will be created. If the data store is not configured as site search
     * (GENERIC vertical and PUBLIC_WEBSITE contentConfig), this flag will be ignored.
     */
    createAdvancedSiteSearch?: pulumi.Input<boolean>;
    /**
     * Timestamp when the DataStore was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The unique id of the data store.
     */
    dataStoreId?: pulumi.Input<string>;
    /**
     * The id of the default Schema associated with this data store.
     */
    defaultSchemaId?: pulumi.Input<string>;
    /**
     * The display name of the data store. This field must be a UTF-8 encoded string with a length limit of 128 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Configuration for Document understanding and enrichment.
     */
    documentProcessingConfig?: pulumi.Input<inputs.DiscoveryEngineDataStoreDocumentProcessingConfig>;
    /**
     * The industry vertical that the data store registers. Possible values: ["GENERIC", "MEDIA"]
     */
    industryVertical?: pulumi.Input<string>;
    /**
     * The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
     */
    location?: pulumi.Input<string>;
    /**
     * The unique full resource name of the data store. Values are of the format
     * 'projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}'. This field must be a
     * UTF-8 encoded string with a length limit of 1024 characters.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A boolean flag indicating whether to skip the default schema creation for the data store. Only enable this flag if you
     * are certain that the default schema is incompatible with your use case. If set to true, you must manually create a
     * schema for the data store before any documents can be ingested. This flag cannot be specified if
     * 'data_store.starting_schema' is specified.
     */
    skipDefaultSchemaCreation?: pulumi.Input<boolean>;
    /**
     * The solutions that the data store enrolls. Possible values: ["SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH",
     * "SOLUTION_TYPE_CHAT"]
     */
    solutionTypes?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DiscoveryEngineDataStoreTimeouts>;
}

/**
 * The set of arguments for constructing a DiscoveryEngineDataStore resource.
 */
export interface DiscoveryEngineDataStoreArgs {
    /**
     * The content config of the data store. Possible values: ["NO_CONTENT", "CONTENT_REQUIRED", "PUBLIC_WEBSITE"]
     */
    contentConfig: pulumi.Input<string>;
    /**
     * If true, an advanced data store for site search will be created. If the data store is not configured as site search
     * (GENERIC vertical and PUBLIC_WEBSITE contentConfig), this flag will be ignored.
     */
    createAdvancedSiteSearch?: pulumi.Input<boolean>;
    /**
     * The unique id of the data store.
     */
    dataStoreId: pulumi.Input<string>;
    /**
     * The display name of the data store. This field must be a UTF-8 encoded string with a length limit of 128 characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * Configuration for Document understanding and enrichment.
     */
    documentProcessingConfig?: pulumi.Input<inputs.DiscoveryEngineDataStoreDocumentProcessingConfig>;
    /**
     * The industry vertical that the data store registers. Possible values: ["GENERIC", "MEDIA"]
     */
    industryVertical: pulumi.Input<string>;
    /**
     * The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
     */
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A boolean flag indicating whether to skip the default schema creation for the data store. Only enable this flag if you
     * are certain that the default schema is incompatible with your use case. If set to true, you must manually create a
     * schema for the data store before any documents can be ingested. This flag cannot be specified if
     * 'data_store.starting_schema' is specified.
     */
    skipDefaultSchemaCreation?: pulumi.Input<boolean>;
    /**
     * The solutions that the data store enrolls. Possible values: ["SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH",
     * "SOLUTION_TYPE_CHAT"]
     */
    solutionTypes?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DiscoveryEngineDataStoreTimeouts>;
}
