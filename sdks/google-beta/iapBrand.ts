// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IapBrand extends pulumi.CustomResource {
    /**
     * Get an existing IapBrand resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IapBrandState, opts?: pulumi.CustomResourceOptions): IapBrand {
        return new IapBrand(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/iapBrand:IapBrand';

    /**
     * Returns true if the given object is an instance of IapBrand.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IapBrand {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IapBrand.__pulumiType;
    }

    /**
     * Application name displayed on OAuth consent screen.
     */
    public readonly applicationTitle!: pulumi.Output<string>;
    /**
     * Output only. Identifier of the brand, in the format 'projects/{project_number}/brands/{brand_id}' NOTE: The name can
     * also be expressed as 'projects/{project_id}/brands/{brand_id}', e.g. when importing. NOTE: The brand identification
     * corresponds to the project number as only one brand can be created per project.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Whether the brand is only intended for usage inside the GSuite organization only.
     */
    public /*out*/ readonly orgInternalOnly!: pulumi.Output<boolean>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Support email displayed on the OAuth consent screen. Can be either a user or group email. When a user email is
     * specified, the caller must be the user with the associated email address. When a group email is specified, the caller
     * can be either a user or a service account which is an owner of the specified group in Cloud Identity.
     */
    public readonly supportEmail!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.IapBrandTimeouts | undefined>;

    /**
     * Create a IapBrand resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IapBrandArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IapBrandArgs | IapBrandState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IapBrandState | undefined;
            resourceInputs["applicationTitle"] = state ? state.applicationTitle : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgInternalOnly"] = state ? state.orgInternalOnly : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["supportEmail"] = state ? state.supportEmail : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as IapBrandArgs | undefined;
            if ((!args || args.applicationTitle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationTitle'");
            }
            if ((!args || args.supportEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'supportEmail'");
            }
            resourceInputs["applicationTitle"] = args ? args.applicationTitle : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["supportEmail"] = args ? args.supportEmail : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["orgInternalOnly"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IapBrand.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IapBrand resources.
 */
export interface IapBrandState {
    /**
     * Application name displayed on OAuth consent screen.
     */
    applicationTitle?: pulumi.Input<string>;
    /**
     * Output only. Identifier of the brand, in the format 'projects/{project_number}/brands/{brand_id}' NOTE: The name can
     * also be expressed as 'projects/{project_id}/brands/{brand_id}', e.g. when importing. NOTE: The brand identification
     * corresponds to the project number as only one brand can be created per project.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the brand is only intended for usage inside the GSuite organization only.
     */
    orgInternalOnly?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    /**
     * Support email displayed on the OAuth consent screen. Can be either a user or group email. When a user email is
     * specified, the caller must be the user with the associated email address. When a group email is specified, the caller
     * can be either a user or a service account which is an owner of the specified group in Cloud Identity.
     */
    supportEmail?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IapBrandTimeouts>;
}

/**
 * The set of arguments for constructing a IapBrand resource.
 */
export interface IapBrandArgs {
    /**
     * Application name displayed on OAuth consent screen.
     */
    applicationTitle: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Support email displayed on the OAuth consent screen. Can be either a user or group email. When a user email is
     * specified, the caller must be the user with the associated email address. When a group email is specified, the caller
     * can be either a user or a service account which is an owner of the specified group in Cloud Identity.
     */
    supportEmail: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IapBrandTimeouts>;
}
