// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeTargetGrpcProxy extends pulumi.CustomResource {
    /**
     * Get an existing ComputeTargetGrpcProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeTargetGrpcProxyState, opts?: pulumi.CustomResourceOptions): ComputeTargetGrpcProxy {
        return new ComputeTargetGrpcProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/computeTargetGrpcProxy:ComputeTargetGrpcProxy';

    /**
     * Returns true if the given object is an instance of ComputeTargetGrpcProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeTargetGrpcProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeTargetGrpcProxy.__pulumiType;
    }

    /**
     * Creation timestamp in RFC3339 text format.
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
     * This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to
     * patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest
     * fingerprint, make a get() request to retrieve the TargetGrpcProxy. A base64-encoded string.
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
     * means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
     * digit, except the last character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Server-defined URL with id for the resource.
     */
    public /*out*/ readonly selfLinkWithId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeTargetGrpcProxyTimeouts | undefined>;
    /**
     * URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the
     * BackendService must be set to GRPC.
     */
    public readonly urlMap!: pulumi.Output<string | undefined>;
    /**
     * If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using
     * a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow
     * unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to.
     * If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a
     * sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is
     * connecting to
     */
    public readonly validateForProxyless!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ComputeTargetGrpcProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ComputeTargetGrpcProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeTargetGrpcProxyArgs | ComputeTargetGrpcProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeTargetGrpcProxyState | undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["selfLinkWithId"] = state ? state.selfLinkWithId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["urlMap"] = state ? state.urlMap : undefined;
            resourceInputs["validateForProxyless"] = state ? state.validateForProxyless : undefined;
        } else {
            const args = argsOrState as ComputeTargetGrpcProxyArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["urlMap"] = args ? args.urlMap : undefined;
            resourceInputs["validateForProxyless"] = args ? args.validateForProxyless : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["selfLinkWithId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeTargetGrpcProxy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeTargetGrpcProxy resources.
 */
export interface ComputeTargetGrpcProxyState {
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.
     * This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to
     * patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest
     * fingerprint, make a get() request to retrieve the TargetGrpcProxy. A base64-encoded string.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
     * means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
     * digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    /**
     * Server-defined URL with id for the resource.
     */
    selfLinkWithId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeTargetGrpcProxyTimeouts>;
    /**
     * URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the
     * BackendService must be set to GRPC.
     */
    urlMap?: pulumi.Input<string>;
    /**
     * If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using
     * a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow
     * unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to.
     * If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a
     * sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is
     * connecting to
     */
    validateForProxyless?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ComputeTargetGrpcProxy resource.
 */
export interface ComputeTargetGrpcProxyArgs {
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
     * means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
     * digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeTargetGrpcProxyTimeouts>;
    /**
     * URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the
     * BackendService must be set to GRPC.
     */
    urlMap?: pulumi.Input<string>;
    /**
     * If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using
     * a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow
     * unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to.
     * If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a
     * sidecar proxy. In this case, a gRPC application must not use "xds:///" scheme in the target URI of the service it is
     * connecting to
     */
    validateForProxyless?: pulumi.Input<boolean>;
}
