// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeMachineImage extends pulumi.CustomResource {
    /**
     * Get an existing ComputeMachineImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeMachineImageState, opts?: pulumi.CustomResourceOptions): ComputeMachineImage {
        return new ComputeMachineImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/computeMachineImage:ComputeMachineImage';

    /**
     * Returns true if the given object is an instance of ComputeMachineImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeMachineImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeMachineImage.__pulumiType;
    }

    /**
     * A text description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specify this to create an application consistent machine image by informing the OS to prepare for the snapshot process.
     * Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
     */
    public readonly guestFlush!: pulumi.Output<boolean | undefined>;
    /**
     * Encrypts the machine image using a customer-supplied encryption key. After you encrypt a machine image with a
     * customer-supplied key, you must provide the same key if you use the machine image later (e.g. to create a instance from
     * the image)
     */
    public readonly machineImageEncryptionKey!: pulumi.Output<outputs.ComputeMachineImageMachineImageEncryptionKey | undefined>;
    /**
     * Name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * The source instance used to create the machine image. You can provide this as a partial or full URL to the resource.
     */
    public readonly sourceInstance!: pulumi.Output<string>;
    /**
     * The regional or multi-regional Cloud Storage bucket location where the machine image is stored.
     */
    public /*out*/ readonly storageLocations!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeMachineImageTimeouts | undefined>;

    /**
     * Create a ComputeMachineImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeMachineImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeMachineImageArgs | ComputeMachineImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeMachineImageState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["guestFlush"] = state ? state.guestFlush : undefined;
            resourceInputs["machineImageEncryptionKey"] = state ? state.machineImageEncryptionKey : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["sourceInstance"] = state ? state.sourceInstance : undefined;
            resourceInputs["storageLocations"] = state ? state.storageLocations : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ComputeMachineImageArgs | undefined;
            if ((!args || args.sourceInstance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceInstance'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["guestFlush"] = args ? args.guestFlush : undefined;
            resourceInputs["machineImageEncryptionKey"] = args ? args.machineImageEncryptionKey : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sourceInstance"] = args ? args.sourceInstance : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["storageLocations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeMachineImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeMachineImage resources.
 */
export interface ComputeMachineImageState {
    /**
     * A text description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Specify this to create an application consistent machine image by informing the OS to prepare for the snapshot process.
     * Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
     */
    guestFlush?: pulumi.Input<boolean>;
    /**
     * Encrypts the machine image using a customer-supplied encryption key. After you encrypt a machine image with a
     * customer-supplied key, you must provide the same key if you use the machine image later (e.g. to create a instance from
     * the image)
     */
    machineImageEncryptionKey?: pulumi.Input<inputs.ComputeMachineImageMachineImageEncryptionKey>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    /**
     * The source instance used to create the machine image. You can provide this as a partial or full URL to the resource.
     */
    sourceInstance?: pulumi.Input<string>;
    /**
     * The regional or multi-regional Cloud Storage bucket location where the machine image is stored.
     */
    storageLocations?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ComputeMachineImageTimeouts>;
}

/**
 * The set of arguments for constructing a ComputeMachineImage resource.
 */
export interface ComputeMachineImageArgs {
    /**
     * A text description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Specify this to create an application consistent machine image by informing the OS to prepare for the snapshot process.
     * Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
     */
    guestFlush?: pulumi.Input<boolean>;
    /**
     * Encrypts the machine image using a customer-supplied encryption key. After you encrypt a machine image with a
     * customer-supplied key, you must provide the same key if you use the machine image later (e.g. to create a instance from
     * the image)
     */
    machineImageEncryptionKey?: pulumi.Input<inputs.ComputeMachineImageMachineImageEncryptionKey>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The source instance used to create the machine image. You can provide this as a partial or full URL to the resource.
     */
    sourceInstance: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeMachineImageTimeouts>;
}
