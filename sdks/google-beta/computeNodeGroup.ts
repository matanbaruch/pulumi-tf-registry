// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeNodeGroup extends pulumi.CustomResource {
    /**
     * Get an existing ComputeNodeGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeNodeGroupState, opts?: pulumi.CustomResourceOptions): ComputeNodeGroup {
        return new ComputeNodeGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/computeNodeGroup:ComputeNodeGroup';

    /**
     * Returns true if the given object is an instance of ComputeNodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeNodeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeNodeGroup.__pulumiType;
    }

    /**
     * If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes
     * of your node groups. One of 'initial_size' or 'autoscaling_policy' must be configured on resource creation.
     */
    public readonly autoscalingPolicy!: pulumi.Output<outputs.ComputeNodeGroupAutoscalingPolicy | undefined>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * An optional textual description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The initial number of nodes in the node group. One of 'initial_size' or 'autoscaling_policy' must be configured on
     * resource creation.
     */
    public readonly initialSize!: pulumi.Output<number | undefined>;
    /**
     * Specifies the frequency of planned maintenance events. Set to one of the following: - AS_NEEDED: Hosts are eligible to
     * receive infrastructure and hypervisor updates as they become available. - RECURRENT: Hosts receive planned
     * infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes
     * the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live
     * migrations and terminations, on individual VMs. Possible values: ["AS_NEEDED", "RECURRENT"]
     */
    public readonly maintenanceInterval!: pulumi.Output<string>;
    /**
     * Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT,
     * RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
     */
    public readonly maintenancePolicy!: pulumi.Output<string | undefined>;
    /**
     * contains properties for the timeframe of maintenance
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.ComputeNodeGroupMaintenanceWindow | undefined>;
    /**
     * Name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The URL of the node template to which this node group belongs.
     */
    public readonly nodeTemplate!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Share settings for the node group.
     */
    public readonly shareSettings!: pulumi.Output<outputs.ComputeNodeGroupShareSettings | undefined>;
    /**
     * The total number of nodes in the node group.
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeNodeGroupTimeouts | undefined>;
    /**
     * Zone where this node group is located
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a ComputeNodeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeNodeGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeNodeGroupArgs | ComputeNodeGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeNodeGroupState | undefined;
            resourceInputs["autoscalingPolicy"] = state ? state.autoscalingPolicy : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["initialSize"] = state ? state.initialSize : undefined;
            resourceInputs["maintenanceInterval"] = state ? state.maintenanceInterval : undefined;
            resourceInputs["maintenancePolicy"] = state ? state.maintenancePolicy : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeTemplate"] = state ? state.nodeTemplate : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["shareSettings"] = state ? state.shareSettings : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ComputeNodeGroupArgs | undefined;
            if ((!args || args.nodeTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeTemplate'");
            }
            resourceInputs["autoscalingPolicy"] = args ? args.autoscalingPolicy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["initialSize"] = args ? args.initialSize : undefined;
            resourceInputs["maintenanceInterval"] = args ? args.maintenanceInterval : undefined;
            resourceInputs["maintenancePolicy"] = args ? args.maintenancePolicy : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeTemplate"] = args ? args.nodeTemplate : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["shareSettings"] = args ? args.shareSettings : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeNodeGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeNodeGroup resources.
 */
export interface ComputeNodeGroupState {
    /**
     * If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes
     * of your node groups. One of 'initial_size' or 'autoscaling_policy' must be configured on resource creation.
     */
    autoscalingPolicy?: pulumi.Input<inputs.ComputeNodeGroupAutoscalingPolicy>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional textual description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The initial number of nodes in the node group. One of 'initial_size' or 'autoscaling_policy' must be configured on
     * resource creation.
     */
    initialSize?: pulumi.Input<number>;
    /**
     * Specifies the frequency of planned maintenance events. Set to one of the following: - AS_NEEDED: Hosts are eligible to
     * receive infrastructure and hypervisor updates as they become available. - RECURRENT: Hosts receive planned
     * infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes
     * the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live
     * migrations and terminations, on individual VMs. Possible values: ["AS_NEEDED", "RECURRENT"]
     */
    maintenanceInterval?: pulumi.Input<string>;
    /**
     * Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT,
     * RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
     */
    maintenancePolicy?: pulumi.Input<string>;
    /**
     * contains properties for the timeframe of maintenance
     */
    maintenanceWindow?: pulumi.Input<inputs.ComputeNodeGroupMaintenanceWindow>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The URL of the node template to which this node group belongs.
     */
    nodeTemplate?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    /**
     * Share settings for the node group.
     */
    shareSettings?: pulumi.Input<inputs.ComputeNodeGroupShareSettings>;
    /**
     * The total number of nodes in the node group.
     */
    size?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ComputeNodeGroupTimeouts>;
    /**
     * Zone where this node group is located
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeNodeGroup resource.
 */
export interface ComputeNodeGroupArgs {
    /**
     * If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes
     * of your node groups. One of 'initial_size' or 'autoscaling_policy' must be configured on resource creation.
     */
    autoscalingPolicy?: pulumi.Input<inputs.ComputeNodeGroupAutoscalingPolicy>;
    /**
     * An optional textual description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The initial number of nodes in the node group. One of 'initial_size' or 'autoscaling_policy' must be configured on
     * resource creation.
     */
    initialSize?: pulumi.Input<number>;
    /**
     * Specifies the frequency of planned maintenance events. Set to one of the following: - AS_NEEDED: Hosts are eligible to
     * receive infrastructure and hypervisor updates as they become available. - RECURRENT: Hosts receive planned
     * infrastructure and hypervisor updates on a periodic basis, but not more frequently than every 28 days. This minimizes
     * the number of planned maintenance operations on individual hosts and reduces the frequency of disruptions, both live
     * migrations and terminations, on individual VMs. Possible values: ["AS_NEEDED", "RECURRENT"]
     */
    maintenanceInterval?: pulumi.Input<string>;
    /**
     * Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT,
     * RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
     */
    maintenancePolicy?: pulumi.Input<string>;
    /**
     * contains properties for the timeframe of maintenance
     */
    maintenanceWindow?: pulumi.Input<inputs.ComputeNodeGroupMaintenanceWindow>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The URL of the node template to which this node group belongs.
     */
    nodeTemplate: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Share settings for the node group.
     */
    shareSettings?: pulumi.Input<inputs.ComputeNodeGroupShareSettings>;
    timeouts?: pulumi.Input<inputs.ComputeNodeGroupTimeouts>;
    /**
     * Zone where this node group is located
     */
    zone?: pulumi.Input<string>;
}
