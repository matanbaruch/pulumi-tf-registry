// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BigqueryDatapolicyDataPolicy extends pulumi.CustomResource {
    /**
     * Get an existing BigqueryDatapolicyDataPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BigqueryDatapolicyDataPolicyState, opts?: pulumi.CustomResourceOptions): BigqueryDatapolicyDataPolicy {
        return new BigqueryDatapolicyDataPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/bigqueryDatapolicyDataPolicy:BigqueryDatapolicyDataPolicy';

    /**
     * Returns true if the given object is an instance of BigqueryDatapolicyDataPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BigqueryDatapolicyDataPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BigqueryDatapolicyDataPolicy.__pulumiType;
    }

    /**
     * The data masking policy that specifies the data masking rule to use.
     */
    public readonly dataMaskingPolicy!: pulumi.Output<outputs.BigqueryDatapolicyDataPolicyDataMaskingPolicy | undefined>;
    /**
     * User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {dataPolicyId} in
     * part of the resource name.
     */
    public readonly dataPolicyId!: pulumi.Output<string>;
    /**
     * The enrollment level of the service. Possible values: ["COLUMN_LEVEL_SECURITY_POLICY", "DATA_MASKING_POLICY"]
     */
    public readonly dataPolicyType!: pulumi.Output<string>;
    /**
     * The name of the location of the data policy.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource name of this data policy, in the format of
     * projects/{project_number}/locations/{locationId}/dataPolicies/{dataPolicyId}.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Policy tag resource name, in the format of
     * projects/{project_number}/locations/{locationId}/taxonomies/{taxonomyId}/policyTags/{policyTag_id}.
     */
    public readonly policyTag!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BigqueryDatapolicyDataPolicyTimeouts | undefined>;

    /**
     * Create a BigqueryDatapolicyDataPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BigqueryDatapolicyDataPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BigqueryDatapolicyDataPolicyArgs | BigqueryDatapolicyDataPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BigqueryDatapolicyDataPolicyState | undefined;
            resourceInputs["dataMaskingPolicy"] = state ? state.dataMaskingPolicy : undefined;
            resourceInputs["dataPolicyId"] = state ? state.dataPolicyId : undefined;
            resourceInputs["dataPolicyType"] = state ? state.dataPolicyType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyTag"] = state ? state.policyTag : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BigqueryDatapolicyDataPolicyArgs | undefined;
            if ((!args || args.dataPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataPolicyId'");
            }
            if ((!args || args.dataPolicyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataPolicyType'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.policyTag === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyTag'");
            }
            resourceInputs["dataMaskingPolicy"] = args ? args.dataMaskingPolicy : undefined;
            resourceInputs["dataPolicyId"] = args ? args.dataPolicyId : undefined;
            resourceInputs["dataPolicyType"] = args ? args.dataPolicyType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["policyTag"] = args ? args.policyTag : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BigqueryDatapolicyDataPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BigqueryDatapolicyDataPolicy resources.
 */
export interface BigqueryDatapolicyDataPolicyState {
    /**
     * The data masking policy that specifies the data masking rule to use.
     */
    dataMaskingPolicy?: pulumi.Input<inputs.BigqueryDatapolicyDataPolicyDataMaskingPolicy>;
    /**
     * User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {dataPolicyId} in
     * part of the resource name.
     */
    dataPolicyId?: pulumi.Input<string>;
    /**
     * The enrollment level of the service. Possible values: ["COLUMN_LEVEL_SECURITY_POLICY", "DATA_MASKING_POLICY"]
     */
    dataPolicyType?: pulumi.Input<string>;
    /**
     * The name of the location of the data policy.
     */
    location?: pulumi.Input<string>;
    /**
     * Resource name of this data policy, in the format of
     * projects/{project_number}/locations/{locationId}/dataPolicies/{dataPolicyId}.
     */
    name?: pulumi.Input<string>;
    /**
     * Policy tag resource name, in the format of
     * projects/{project_number}/locations/{locationId}/taxonomies/{taxonomyId}/policyTags/{policyTag_id}.
     */
    policyTag?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BigqueryDatapolicyDataPolicyTimeouts>;
}

/**
 * The set of arguments for constructing a BigqueryDatapolicyDataPolicy resource.
 */
export interface BigqueryDatapolicyDataPolicyArgs {
    /**
     * The data masking policy that specifies the data masking rule to use.
     */
    dataMaskingPolicy?: pulumi.Input<inputs.BigqueryDatapolicyDataPolicyDataMaskingPolicy>;
    /**
     * User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {dataPolicyId} in
     * part of the resource name.
     */
    dataPolicyId: pulumi.Input<string>;
    /**
     * The enrollment level of the service. Possible values: ["COLUMN_LEVEL_SECURITY_POLICY", "DATA_MASKING_POLICY"]
     */
    dataPolicyType: pulumi.Input<string>;
    /**
     * The name of the location of the data policy.
     */
    location: pulumi.Input<string>;
    /**
     * Policy tag resource name, in the format of
     * projects/{project_number}/locations/{locationId}/taxonomies/{taxonomyId}/policyTags/{policyTag_id}.
     */
    policyTag: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BigqueryDatapolicyDataPolicyTimeouts>;
}
