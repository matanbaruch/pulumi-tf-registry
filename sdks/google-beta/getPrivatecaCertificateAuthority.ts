// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPrivatecaCertificateAuthority(args?: GetPrivatecaCertificateAuthorityArgs, opts?: pulumi.InvokeOptions): Promise<GetPrivatecaCertificateAuthorityResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-beta:index/getPrivatecaCertificateAuthority:getPrivatecaCertificateAuthority", {
        "certificateAuthorityId": args.certificateAuthorityId,
        "id": args.id,
        "location": args.location,
        "pool": args.pool,
        "project": args.project,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPrivatecaCertificateAuthority.
 */
export interface GetPrivatecaCertificateAuthorityArgs {
    certificateAuthorityId?: string;
    id?: string;
    location?: string;
    pool?: string;
    project?: string;
}

/**
 * A collection of values returned by getPrivatecaCertificateAuthority.
 */
export interface GetPrivatecaCertificateAuthorityResult {
    readonly accessUrls: outputs.GetPrivatecaCertificateAuthorityAccessUrl[];
    readonly certificateAuthorityId?: string;
    readonly configs: outputs.GetPrivatecaCertificateAuthorityConfig[];
    readonly createTime: string;
    readonly deletionProtection: boolean;
    readonly desiredState: string;
    readonly effectiveLabels: {[key: string]: string};
    readonly gcsBucket: string;
    readonly id: string;
    readonly ignoreActiveCertificatesOnDeletion: boolean;
    readonly keySpecs: outputs.GetPrivatecaCertificateAuthorityKeySpec[];
    readonly labels: {[key: string]: string};
    readonly lifetime: string;
    readonly location?: string;
    readonly name: string;
    readonly pemCaCertificate: string;
    readonly pemCaCertificates: string[];
    readonly pemCsr: string;
    readonly pool?: string;
    readonly project?: string;
    readonly skipGracePeriod: boolean;
    readonly state: string;
    readonly subordinateConfigs: outputs.GetPrivatecaCertificateAuthoritySubordinateConfig[];
    readonly terraformLabels: {[key: string]: string};
    readonly type: string;
    readonly updateTime: string;
}
export function getPrivatecaCertificateAuthorityOutput(args?: GetPrivatecaCertificateAuthorityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPrivatecaCertificateAuthorityResult> {
    return pulumi.output(args).apply((a: any) => getPrivatecaCertificateAuthority(a, opts))
}

/**
 * A collection of arguments for invoking getPrivatecaCertificateAuthority.
 */
export interface GetPrivatecaCertificateAuthorityOutputArgs {
    certificateAuthorityId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    pool?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
