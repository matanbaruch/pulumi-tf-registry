// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudIdsEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing CloudIdsEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudIdsEndpointState, opts?: pulumi.CustomResourceOptions): CloudIdsEndpoint {
        return new CloudIdsEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/cloudIdsEndpoint:CloudIdsEndpoint';

    /**
     * Returns true if the given object is an instance of CloudIdsEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudIdsEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudIdsEndpoint.__pulumiType;
    }

    /**
     * Creation timestamp in RFC 3339 text format.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * An optional description of the endpoint.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * URL of the endpoint's network address to which traffic is to be sent by Packet Mirroring.
     */
    public /*out*/ readonly endpointForwardingRule!: pulumi.Output<string>;
    /**
     * Internal IP address of the endpoint's network entry point.
     */
    public /*out*/ readonly endpointIp!: pulumi.Output<string>;
    /**
     * The location for the endpoint.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like
     * "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
     */
    public readonly network!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The minimum alert severity level that is reported by the endpoint. Possible values: ["INFORMATIONAL", "LOW", "MEDIUM",
     * "HIGH", "CRITICAL"]
     */
    public readonly severity!: pulumi.Output<string>;
    /**
     * Configuration for threat IDs excluded from generating alerts. Limit: 99 IDs.
     */
    public readonly threatExceptions!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CloudIdsEndpointTimeouts | undefined>;
    /**
     * Last update timestamp in RFC 3339 text format.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CloudIdsEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudIdsEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudIdsEndpointArgs | CloudIdsEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudIdsEndpointState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpointForwardingRule"] = state ? state.endpointForwardingRule : undefined;
            resourceInputs["endpointIp"] = state ? state.endpointIp : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["threatExceptions"] = state ? state.threatExceptions : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as CloudIdsEndpointArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["threatExceptions"] = args ? args.threatExceptions : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["endpointForwardingRule"] = undefined /*out*/;
            resourceInputs["endpointIp"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudIdsEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudIdsEndpoint resources.
 */
export interface CloudIdsEndpointState {
    /**
     * Creation timestamp in RFC 3339 text format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * An optional description of the endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * URL of the endpoint's network address to which traffic is to be sent by Packet Mirroring.
     */
    endpointForwardingRule?: pulumi.Input<string>;
    /**
     * Internal IP address of the endpoint's network entry point.
     */
    endpointIp?: pulumi.Input<string>;
    /**
     * The location for the endpoint.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like
     * "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
     */
    network?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The minimum alert severity level that is reported by the endpoint. Possible values: ["INFORMATIONAL", "LOW", "MEDIUM",
     * "HIGH", "CRITICAL"]
     */
    severity?: pulumi.Input<string>;
    /**
     * Configuration for threat IDs excluded from generating alerts. Limit: 99 IDs.
     */
    threatExceptions?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.CloudIdsEndpointTimeouts>;
    /**
     * Last update timestamp in RFC 3339 text format.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudIdsEndpoint resource.
 */
export interface CloudIdsEndpointArgs {
    /**
     * An optional description of the endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * The location for the endpoint.
     */
    location: pulumi.Input<string>;
    /**
     * Name of the endpoint in the format projects/{project_id}/locations/{locationId}/endpoints/{endpointId}.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the VPC network that is connected to the IDS endpoint. This can either contain the VPC network name itself (like
     * "src-net") or the full URL to the network (like "projects/{project_id}/global/networks/src-net").
     */
    network: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The minimum alert severity level that is reported by the endpoint. Possible values: ["INFORMATIONAL", "LOW", "MEDIUM",
     * "HIGH", "CRITICAL"]
     */
    severity: pulumi.Input<string>;
    /**
     * Configuration for threat IDs excluded from generating alerts. Limit: 99 IDs.
     */
    threatExceptions?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.CloudIdsEndpointTimeouts>;
}
