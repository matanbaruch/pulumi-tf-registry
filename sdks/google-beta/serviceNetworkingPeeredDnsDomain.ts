// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceNetworkingPeeredDnsDomain extends pulumi.CustomResource {
    /**
     * Get an existing ServiceNetworkingPeeredDnsDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceNetworkingPeeredDnsDomainState, opts?: pulumi.CustomResourceOptions): ServiceNetworkingPeeredDnsDomain {
        return new ServiceNetworkingPeeredDnsDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/serviceNetworkingPeeredDnsDomain:ServiceNetworkingPeeredDnsDomain';

    /**
     * Returns true if the given object is an instance of ServiceNetworkingPeeredDnsDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceNetworkingPeeredDnsDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceNetworkingPeeredDnsDomain.__pulumiType;
    }

    /**
     * The DNS domain name suffix of the peered DNS domain.
     */
    public readonly dnsSuffix!: pulumi.Output<string>;
    /**
     * Name of the peered DNS domain.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network in the consumer project to peer with.
     */
    public readonly network!: pulumi.Output<string>;
    public /*out*/ readonly parent!: pulumi.Output<string>;
    /**
     * The ID of the project that the service account will be created in. Defaults to the provider project configuration.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The name of the service to create a peered DNS domain for, e.g. servicenetworking.googleapis.com
     */
    public readonly service!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServiceNetworkingPeeredDnsDomainTimeouts | undefined>;

    /**
     * Create a ServiceNetworkingPeeredDnsDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceNetworkingPeeredDnsDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceNetworkingPeeredDnsDomainArgs | ServiceNetworkingPeeredDnsDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceNetworkingPeeredDnsDomainState | undefined;
            resourceInputs["dnsSuffix"] = state ? state.dnsSuffix : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ServiceNetworkingPeeredDnsDomainArgs | undefined;
            if ((!args || args.dnsSuffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsSuffix'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            resourceInputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["parent"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceNetworkingPeeredDnsDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceNetworkingPeeredDnsDomain resources.
 */
export interface ServiceNetworkingPeeredDnsDomainState {
    /**
     * The DNS domain name suffix of the peered DNS domain.
     */
    dnsSuffix?: pulumi.Input<string>;
    /**
     * Name of the peered DNS domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Network in the consumer project to peer with.
     */
    network?: pulumi.Input<string>;
    parent?: pulumi.Input<string>;
    /**
     * The ID of the project that the service account will be created in. Defaults to the provider project configuration.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the service to create a peered DNS domain for, e.g. servicenetworking.googleapis.com
     */
    service?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServiceNetworkingPeeredDnsDomainTimeouts>;
}

/**
 * The set of arguments for constructing a ServiceNetworkingPeeredDnsDomain resource.
 */
export interface ServiceNetworkingPeeredDnsDomainArgs {
    /**
     * The DNS domain name suffix of the peered DNS domain.
     */
    dnsSuffix: pulumi.Input<string>;
    /**
     * Name of the peered DNS domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Network in the consumer project to peer with.
     */
    network: pulumi.Input<string>;
    /**
     * The ID of the project that the service account will be created in. Defaults to the provider project configuration.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the service to create a peered DNS domain for, e.g. servicenetworking.googleapis.com
     */
    service?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServiceNetworkingPeeredDnsDomainTimeouts>;
}
