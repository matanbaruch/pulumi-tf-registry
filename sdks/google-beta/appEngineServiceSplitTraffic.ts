// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppEngineServiceSplitTraffic extends pulumi.CustomResource {
    /**
     * Get an existing AppEngineServiceSplitTraffic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppEngineServiceSplitTrafficState, opts?: pulumi.CustomResourceOptions): AppEngineServiceSplitTraffic {
        return new AppEngineServiceSplitTraffic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/appEngineServiceSplitTraffic:AppEngineServiceSplitTraffic';

    /**
     * Returns true if the given object is an instance of AppEngineServiceSplitTraffic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppEngineServiceSplitTraffic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppEngineServiceSplitTraffic.__pulumiType;
    }

    /**
     * If set to true traffic will be migrated to this version.
     */
    public readonly migrateTraffic!: pulumi.Output<boolean | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The name of the service these settings apply to.
     */
    public readonly service!: pulumi.Output<string>;
    /**
     * Mapping that defines fractional HTTP traffic diversion to different versions within the service.
     */
    public readonly split!: pulumi.Output<outputs.AppEngineServiceSplitTrafficSplit>;
    public readonly timeouts!: pulumi.Output<outputs.AppEngineServiceSplitTrafficTimeouts | undefined>;

    /**
     * Create a AppEngineServiceSplitTraffic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppEngineServiceSplitTrafficArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppEngineServiceSplitTrafficArgs | AppEngineServiceSplitTrafficState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppEngineServiceSplitTrafficState | undefined;
            resourceInputs["migrateTraffic"] = state ? state.migrateTraffic : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["split"] = state ? state.split : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AppEngineServiceSplitTrafficArgs | undefined;
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            if ((!args || args.split === undefined) && !opts.urn) {
                throw new Error("Missing required property 'split'");
            }
            resourceInputs["migrateTraffic"] = args ? args.migrateTraffic : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["split"] = args ? args.split : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppEngineServiceSplitTraffic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppEngineServiceSplitTraffic resources.
 */
export interface AppEngineServiceSplitTrafficState {
    /**
     * If set to true traffic will be migrated to this version.
     */
    migrateTraffic?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    /**
     * The name of the service these settings apply to.
     */
    service?: pulumi.Input<string>;
    /**
     * Mapping that defines fractional HTTP traffic diversion to different versions within the service.
     */
    split?: pulumi.Input<inputs.AppEngineServiceSplitTrafficSplit>;
    timeouts?: pulumi.Input<inputs.AppEngineServiceSplitTrafficTimeouts>;
}

/**
 * The set of arguments for constructing a AppEngineServiceSplitTraffic resource.
 */
export interface AppEngineServiceSplitTrafficArgs {
    /**
     * If set to true traffic will be migrated to this version.
     */
    migrateTraffic?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    /**
     * The name of the service these settings apply to.
     */
    service: pulumi.Input<string>;
    /**
     * Mapping that defines fractional HTTP traffic diversion to different versions within the service.
     */
    split: pulumi.Input<inputs.AppEngineServiceSplitTrafficSplit>;
    timeouts?: pulumi.Input<inputs.AppEngineServiceSplitTrafficTimeouts>;
}
