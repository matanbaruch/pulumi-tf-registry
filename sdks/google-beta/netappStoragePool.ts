// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetappStoragePool extends pulumi.CustomResource {
    /**
     * Get an existing NetappStoragePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetappStoragePoolState, opts?: pulumi.CustomResourceOptions): NetappStoragePool {
        return new NetappStoragePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/netappStoragePool:NetappStoragePool';

    /**
     * Returns true if the given object is an instance of NetappStoragePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetappStoragePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetappStoragePool.__pulumiType;
    }

    /**
     * Specifies the Active Directory policy to be used. Format:
     * 'projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}'. The policy needs to be in the same location as
     * the storage pool.
     */
    public readonly activeDirectory!: pulumi.Output<string | undefined>;
    /**
     * Capacity of the storage pool (in GiB).
     */
    public readonly capacityGib!: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Reports if volumes in the pool are encrypted using a Google-managed encryption key or CMEK.
     */
    public /*out*/ readonly encryptionType!: pulumi.Output<string>;
    /**
     * Specifies the CMEK policy to be used for volume encryption. Format:
     * 'projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}'. The policy needs to be in the same location as the
     * storage pool.
     */
    public readonly kmsConfig!: pulumi.Output<string | undefined>;
    /**
     * Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
     * field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended
     * group support for NFSv3, using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
     */
    public readonly ldapEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the location. For zonal Flex pools specify a zone name, in all other cases a region name.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the storage pool. Needs to be unique per location/region.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * VPC network name with format: 'projects/{{project}}/global/networks/{{network}}'
     */
    public readonly network!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Specifies the replica zone for regional Flex pools. 'zone' and 'replica_zone' values can be swapped to initiate a [zone
     * switch](https://cloud.google.com/netapp/volumes/docs/configure-and-use/storage-pools/edit-or-delete-storage-pool#switch_active_and_replica_zones).
     */
    public readonly replicaZone!: pulumi.Output<string | undefined>;
    /**
     * Service level of the storage pool. Possible values: ["PREMIUM", "EXTREME", "STANDARD", "FLEX"]
     */
    public readonly serviceLevel!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.NetappStoragePoolTimeouts | undefined>;
    /**
     * Size allocated to volumes in the storage pool (in GiB).
     */
    public /*out*/ readonly volumeCapacityGib!: pulumi.Output<string>;
    /**
     * Number of volume in the storage pool.
     */
    public /*out*/ readonly volumeCount!: pulumi.Output<number>;
    /**
     * Specifies the active zone for regional Flex pools. 'zone' and 'replica_zone' values can be swapped to initiate a [zone
     * switch](https://cloud.google.com/netapp/volumes/docs/configure-and-use/storage-pools/edit-or-delete-storage-pool#switch_active_and_replica_zones).
     * If you want to create a zonal Flex pool, specify a zone name for 'location' and omit 'zone'.
     */
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a NetappStoragePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetappStoragePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetappStoragePoolArgs | NetappStoragePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetappStoragePoolState | undefined;
            resourceInputs["activeDirectory"] = state ? state.activeDirectory : undefined;
            resourceInputs["capacityGib"] = state ? state.capacityGib : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["encryptionType"] = state ? state.encryptionType : undefined;
            resourceInputs["kmsConfig"] = state ? state.kmsConfig : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["ldapEnabled"] = state ? state.ldapEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["replicaZone"] = state ? state.replicaZone : undefined;
            resourceInputs["serviceLevel"] = state ? state.serviceLevel : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeCapacityGib"] = state ? state.volumeCapacityGib : undefined;
            resourceInputs["volumeCount"] = state ? state.volumeCount : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as NetappStoragePoolArgs | undefined;
            if ((!args || args.capacityGib === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacityGib'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.serviceLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceLevel'");
            }
            resourceInputs["activeDirectory"] = args ? args.activeDirectory : undefined;
            resourceInputs["capacityGib"] = args ? args.capacityGib : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kmsConfig"] = args ? args.kmsConfig : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["ldapEnabled"] = args ? args.ldapEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["replicaZone"] = args ? args.replicaZone : undefined;
            resourceInputs["serviceLevel"] = args ? args.serviceLevel : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["encryptionType"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["volumeCapacityGib"] = undefined /*out*/;
            resourceInputs["volumeCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetappStoragePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetappStoragePool resources.
 */
export interface NetappStoragePoolState {
    /**
     * Specifies the Active Directory policy to be used. Format:
     * 'projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}'. The policy needs to be in the same location as
     * the storage pool.
     */
    activeDirectory?: pulumi.Input<string>;
    /**
     * Capacity of the storage pool (in GiB).
     */
    capacityGib?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Reports if volumes in the pool are encrypted using a Google-managed encryption key or CMEK.
     */
    encryptionType?: pulumi.Input<string>;
    /**
     * Specifies the CMEK policy to be used for volume encryption. Format:
     * 'projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}'. The policy needs to be in the same location as the
     * storage pool.
     */
    kmsConfig?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
     * field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended
     * group support for NFSv3, using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
     */
    ldapEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the location. For zonal Flex pools specify a zone name, in all other cases a region name.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the storage pool. Needs to be unique per location/region.
     */
    name?: pulumi.Input<string>;
    /**
     * VPC network name with format: 'projects/{{project}}/global/networks/{{network}}'
     */
    network?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Specifies the replica zone for regional Flex pools. 'zone' and 'replica_zone' values can be swapped to initiate a [zone
     * switch](https://cloud.google.com/netapp/volumes/docs/configure-and-use/storage-pools/edit-or-delete-storage-pool#switch_active_and_replica_zones).
     */
    replicaZone?: pulumi.Input<string>;
    /**
     * Service level of the storage pool. Possible values: ["PREMIUM", "EXTREME", "STANDARD", "FLEX"]
     */
    serviceLevel?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NetappStoragePoolTimeouts>;
    /**
     * Size allocated to volumes in the storage pool (in GiB).
     */
    volumeCapacityGib?: pulumi.Input<string>;
    /**
     * Number of volume in the storage pool.
     */
    volumeCount?: pulumi.Input<number>;
    /**
     * Specifies the active zone for regional Flex pools. 'zone' and 'replica_zone' values can be swapped to initiate a [zone
     * switch](https://cloud.google.com/netapp/volumes/docs/configure-and-use/storage-pools/edit-or-delete-storage-pool#switch_active_and_replica_zones).
     * If you want to create a zonal Flex pool, specify a zone name for 'location' and omit 'zone'.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetappStoragePool resource.
 */
export interface NetappStoragePoolArgs {
    /**
     * Specifies the Active Directory policy to be used. Format:
     * 'projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}'. The policy needs to be in the same location as
     * the storage pool.
     */
    activeDirectory?: pulumi.Input<string>;
    /**
     * Capacity of the storage pool (in GiB).
     */
    capacityGib: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the CMEK policy to be used for volume encryption. Format:
     * 'projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}'. The policy needs to be in the same location as the
     * storage pool.
     */
    kmsConfig?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
     * field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended
     * group support for NFSv3, using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
     */
    ldapEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the location. For zonal Flex pools specify a zone name, in all other cases a region name.
     */
    location: pulumi.Input<string>;
    /**
     * The resource name of the storage pool. Needs to be unique per location/region.
     */
    name?: pulumi.Input<string>;
    /**
     * VPC network name with format: 'projects/{{project}}/global/networks/{{network}}'
     */
    network: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Specifies the replica zone for regional Flex pools. 'zone' and 'replica_zone' values can be swapped to initiate a [zone
     * switch](https://cloud.google.com/netapp/volumes/docs/configure-and-use/storage-pools/edit-or-delete-storage-pool#switch_active_and_replica_zones).
     */
    replicaZone?: pulumi.Input<string>;
    /**
     * Service level of the storage pool. Possible values: ["PREMIUM", "EXTREME", "STANDARD", "FLEX"]
     */
    serviceLevel: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetappStoragePoolTimeouts>;
    /**
     * Specifies the active zone for regional Flex pools. 'zone' and 'replica_zone' values can be swapped to initiate a [zone
     * switch](https://cloud.google.com/netapp/volumes/docs/configure-and-use/storage-pools/edit-or-delete-storage-pool#switch_active_and_replica_zones).
     * If you want to create a zonal Flex pool, specify a zone name for 'location' and omit 'zone'.
     */
    zone?: pulumi.Input<string>;
}
