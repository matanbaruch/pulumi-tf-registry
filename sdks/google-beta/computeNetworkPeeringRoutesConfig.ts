// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeNetworkPeeringRoutesConfig extends pulumi.CustomResource {
    /**
     * Get an existing ComputeNetworkPeeringRoutesConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeNetworkPeeringRoutesConfigState, opts?: pulumi.CustomResourceOptions): ComputeNetworkPeeringRoutesConfig {
        return new ComputeNetworkPeeringRoutesConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/computeNetworkPeeringRoutesConfig:ComputeNetworkPeeringRoutesConfig';

    /**
     * Returns true if the given object is an instance of ComputeNetworkPeeringRoutesConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeNetworkPeeringRoutesConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeNetworkPeeringRoutesConfig.__pulumiType;
    }

    /**
     * Whether to export the custom routes to the peer network.
     */
    public readonly exportCustomRoutes!: pulumi.Output<boolean>;
    /**
     * Whether to import the custom routes to the peer network.
     */
    public readonly importCustomRoutes!: pulumi.Output<boolean>;
    /**
     * The name of the primary network for the peering.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * Name of the peering.
     */
    public readonly peering!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeNetworkPeeringRoutesConfigTimeouts | undefined>;

    /**
     * Create a ComputeNetworkPeeringRoutesConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeNetworkPeeringRoutesConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeNetworkPeeringRoutesConfigArgs | ComputeNetworkPeeringRoutesConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeNetworkPeeringRoutesConfigState | undefined;
            resourceInputs["exportCustomRoutes"] = state ? state.exportCustomRoutes : undefined;
            resourceInputs["importCustomRoutes"] = state ? state.importCustomRoutes : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["peering"] = state ? state.peering : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ComputeNetworkPeeringRoutesConfigArgs | undefined;
            if ((!args || args.exportCustomRoutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exportCustomRoutes'");
            }
            if ((!args || args.importCustomRoutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importCustomRoutes'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.peering === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peering'");
            }
            resourceInputs["exportCustomRoutes"] = args ? args.exportCustomRoutes : undefined;
            resourceInputs["importCustomRoutes"] = args ? args.importCustomRoutes : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["peering"] = args ? args.peering : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeNetworkPeeringRoutesConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeNetworkPeeringRoutesConfig resources.
 */
export interface ComputeNetworkPeeringRoutesConfigState {
    /**
     * Whether to export the custom routes to the peer network.
     */
    exportCustomRoutes?: pulumi.Input<boolean>;
    /**
     * Whether to import the custom routes to the peer network.
     */
    importCustomRoutes?: pulumi.Input<boolean>;
    /**
     * The name of the primary network for the peering.
     */
    network?: pulumi.Input<string>;
    /**
     * Name of the peering.
     */
    peering?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeNetworkPeeringRoutesConfigTimeouts>;
}

/**
 * The set of arguments for constructing a ComputeNetworkPeeringRoutesConfig resource.
 */
export interface ComputeNetworkPeeringRoutesConfigArgs {
    /**
     * Whether to export the custom routes to the peer network.
     */
    exportCustomRoutes: pulumi.Input<boolean>;
    /**
     * Whether to import the custom routes to the peer network.
     */
    importCustomRoutes: pulumi.Input<boolean>;
    /**
     * The name of the primary network for the peering.
     */
    network: pulumi.Input<string>;
    /**
     * Name of the peering.
     */
    peering: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeNetworkPeeringRoutesConfigTimeouts>;
}
