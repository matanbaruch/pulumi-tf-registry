// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CertificateManagerCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CertificateManagerCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateManagerCertificateState, opts?: pulumi.CustomResourceOptions): CertificateManagerCertificate {
        return new CertificateManagerCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/certificateManagerCertificate:CertificateManagerCertificate';

    /**
     * Returns true if the given object is an instance of CertificateManagerCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateManagerCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateManagerCertificate.__pulumiType;
    }

    /**
     * A human-readable description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Set of label tags associated with the Certificate resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The Certificate Manager location. If not specified, "global" is used.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates
     * automatically, for as long as it's authorized to do so.
     */
    public readonly managed!: pulumi.Output<outputs.CertificateManagerCertificateManaged | undefined>;
    /**
     * A user-defined name of the certificate. Certificate names must be unique The name must be 1-64 characters long, and
     * match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
     * characters must be a dash, underscore, letter or digit.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The scope of the certificate. DEFAULT: Certificates with default scope are served from core Google data centers. If
     * unsure, choose this option. EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates, served
     * from Edge Points of Presence. See https://cloud.google.com/vpc/docs/edge-locations. ALL_REGIONS: Certificates with
     * ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs). See
     * https://cloud.google.com/compute/docs/regions-zones
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such
     * certificates before they expire remains the user's responsibility.
     */
    public readonly selfManaged!: pulumi.Output<outputs.CertificateManagerCertificateSelfManaged | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.CertificateManagerCertificateTimeouts | undefined>;

    /**
     * Create a CertificateManagerCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CertificateManagerCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateManagerCertificateArgs | CertificateManagerCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateManagerCertificateState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["selfManaged"] = state ? state.selfManaged : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CertificateManagerCertificateArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managed"] = args ? args.managed : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["selfManaged"] = args ? args.selfManaged : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateManagerCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertificateManagerCertificate resources.
 */
export interface CertificateManagerCertificateState {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set of label tags associated with the Certificate resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Certificate Manager location. If not specified, "global" is used.
     */
    location?: pulumi.Input<string>;
    /**
     * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates
     * automatically, for as long as it's authorized to do so.
     */
    managed?: pulumi.Input<inputs.CertificateManagerCertificateManaged>;
    /**
     * A user-defined name of the certificate. Certificate names must be unique The name must be 1-64 characters long, and
     * match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
     * characters must be a dash, underscore, letter or digit.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The scope of the certificate. DEFAULT: Certificates with default scope are served from core Google data centers. If
     * unsure, choose this option. EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates, served
     * from Edge Points of Presence. See https://cloud.google.com/vpc/docs/edge-locations. ALL_REGIONS: Certificates with
     * ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs). See
     * https://cloud.google.com/compute/docs/regions-zones
     */
    scope?: pulumi.Input<string>;
    /**
     * Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such
     * certificates before they expire remains the user's responsibility.
     */
    selfManaged?: pulumi.Input<inputs.CertificateManagerCertificateSelfManaged>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CertificateManagerCertificateTimeouts>;
}

/**
 * The set of arguments for constructing a CertificateManagerCertificate resource.
 */
export interface CertificateManagerCertificateArgs {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Set of label tags associated with the Certificate resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Certificate Manager location. If not specified, "global" is used.
     */
    location?: pulumi.Input<string>;
    /**
     * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates
     * automatically, for as long as it's authorized to do so.
     */
    managed?: pulumi.Input<inputs.CertificateManagerCertificateManaged>;
    /**
     * A user-defined name of the certificate. Certificate names must be unique The name must be 1-64 characters long, and
     * match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
     * characters must be a dash, underscore, letter or digit.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The scope of the certificate. DEFAULT: Certificates with default scope are served from core Google data centers. If
     * unsure, choose this option. EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates, served
     * from Edge Points of Presence. See https://cloud.google.com/vpc/docs/edge-locations. ALL_REGIONS: Certificates with
     * ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs). See
     * https://cloud.google.com/compute/docs/regions-zones
     */
    scope?: pulumi.Input<string>;
    /**
     * Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such
     * certificates before they expire remains the user's responsibility.
     */
    selfManaged?: pulumi.Input<inputs.CertificateManagerCertificateSelfManaged>;
    timeouts?: pulumi.Input<inputs.CertificateManagerCertificateTimeouts>;
}
