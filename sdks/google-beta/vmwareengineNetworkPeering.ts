// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmwareengineNetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing VmwareengineNetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmwareengineNetworkPeeringState, opts?: pulumi.CustomResourceOptions): VmwareengineNetworkPeering {
        return new VmwareengineNetworkPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/vmwareengineNetworkPeering:VmwareengineNetworkPeering';

    /**
     * Returns true if the given object is an instance of VmwareengineNetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmwareengineNetworkPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmwareengineNetworkPeering.__pulumiType;
    }

    /**
     * Creation time of this resource. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * User-provided description for this network peering.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * True if custom routes are exported to the peered network; false otherwise.
     */
    public readonly exportCustomRoutes!: pulumi.Output<boolean | undefined>;
    /**
     * True if all subnet routes with a public IP address range are exported; false otherwise.
     */
    public readonly exportCustomRoutesWithPublicIp!: pulumi.Output<boolean | undefined>;
    /**
     * True if custom routes are imported from the peered network; false otherwise.
     */
    public readonly importCustomRoutes!: pulumi.Output<boolean | undefined>;
    /**
     * True if custom routes are imported from the peered network; false otherwise.
     */
    public readonly importCustomRoutesWithPublicIp!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Network Peering.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a
     * consumer VPC network or another standard VMware Engine network.
     */
    public readonly peerNetwork!: pulumi.Output<string>;
    /**
     * The type of the network to peer with the VMware Engine network. Possible values: ["STANDARD", "VMWARE_ENGINE_NETWORK",
     * "PRIVATE_SERVICES_ACCESS", "NETAPP_CLOUD_VOLUMES", "THIRD_PARTY_SERVICE", "DELL_POWERSCALE"]
     */
    public readonly peerNetworkType!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer
     * network. New values may be added to this enum when appropriate.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Details about the current state of the network peering.
     */
    public /*out*/ readonly stateDetails!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VmwareengineNetworkPeeringTimeouts | undefined>;
    /**
     * System-generated unique identifier for the resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Last updated time of this resource. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The relative resource name of the VMware Engine network. Specify the name in the following form:
     * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project} can either be a
     * project number or a project ID.
     */
    public readonly vmwareEngineNetwork!: pulumi.Output<string>;
    /**
     * The canonical name of the VMware Engine network in the form:
     * projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
     */
    public /*out*/ readonly vmwareEngineNetworkCanonical!: pulumi.Output<string>;

    /**
     * Create a VmwareengineNetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmwareengineNetworkPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmwareengineNetworkPeeringArgs | VmwareengineNetworkPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmwareengineNetworkPeeringState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["exportCustomRoutes"] = state ? state.exportCustomRoutes : undefined;
            resourceInputs["exportCustomRoutesWithPublicIp"] = state ? state.exportCustomRoutesWithPublicIp : undefined;
            resourceInputs["importCustomRoutes"] = state ? state.importCustomRoutes : undefined;
            resourceInputs["importCustomRoutesWithPublicIp"] = state ? state.importCustomRoutesWithPublicIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peerNetwork"] = state ? state.peerNetwork : undefined;
            resourceInputs["peerNetworkType"] = state ? state.peerNetworkType : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateDetails"] = state ? state.stateDetails : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vmwareEngineNetwork"] = state ? state.vmwareEngineNetwork : undefined;
            resourceInputs["vmwareEngineNetworkCanonical"] = state ? state.vmwareEngineNetworkCanonical : undefined;
        } else {
            const args = argsOrState as VmwareengineNetworkPeeringArgs | undefined;
            if ((!args || args.peerNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetwork'");
            }
            if ((!args || args.peerNetworkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetworkType'");
            }
            if ((!args || args.vmwareEngineNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmwareEngineNetwork'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["exportCustomRoutes"] = args ? args.exportCustomRoutes : undefined;
            resourceInputs["exportCustomRoutesWithPublicIp"] = args ? args.exportCustomRoutesWithPublicIp : undefined;
            resourceInputs["importCustomRoutes"] = args ? args.importCustomRoutes : undefined;
            resourceInputs["importCustomRoutesWithPublicIp"] = args ? args.importCustomRoutesWithPublicIp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peerNetwork"] = args ? args.peerNetwork : undefined;
            resourceInputs["peerNetworkType"] = args ? args.peerNetworkType : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmwareEngineNetwork"] = args ? args.vmwareEngineNetwork : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["vmwareEngineNetworkCanonical"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmwareengineNetworkPeering.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmwareengineNetworkPeering resources.
 */
export interface VmwareengineNetworkPeeringState {
    /**
     * Creation time of this resource. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * User-provided description for this network peering.
     */
    description?: pulumi.Input<string>;
    /**
     * True if custom routes are exported to the peered network; false otherwise.
     */
    exportCustomRoutes?: pulumi.Input<boolean>;
    /**
     * True if all subnet routes with a public IP address range are exported; false otherwise.
     */
    exportCustomRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * True if custom routes are imported from the peered network; false otherwise.
     */
    importCustomRoutes?: pulumi.Input<boolean>;
    /**
     * True if custom routes are imported from the peered network; false otherwise.
     */
    importCustomRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * The ID of the Network Peering.
     */
    name?: pulumi.Input<string>;
    /**
     * The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a
     * consumer VPC network or another standard VMware Engine network.
     */
    peerNetwork?: pulumi.Input<string>;
    /**
     * The type of the network to peer with the VMware Engine network. Possible values: ["STANDARD", "VMWARE_ENGINE_NETWORK",
     * "PRIVATE_SERVICES_ACCESS", "NETAPP_CLOUD_VOLUMES", "THIRD_PARTY_SERVICE", "DELL_POWERSCALE"]
     */
    peerNetworkType?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer
     * network. New values may be added to this enum when appropriate.
     */
    state?: pulumi.Input<string>;
    /**
     * Details about the current state of the network peering.
     */
    stateDetails?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VmwareengineNetworkPeeringTimeouts>;
    /**
     * System-generated unique identifier for the resource.
     */
    uid?: pulumi.Input<string>;
    /**
     * Last updated time of this resource. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The relative resource name of the VMware Engine network. Specify the name in the following form:
     * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project} can either be a
     * project number or a project ID.
     */
    vmwareEngineNetwork?: pulumi.Input<string>;
    /**
     * The canonical name of the VMware Engine network in the form:
     * projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
     */
    vmwareEngineNetworkCanonical?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmwareengineNetworkPeering resource.
 */
export interface VmwareengineNetworkPeeringArgs {
    /**
     * User-provided description for this network peering.
     */
    description?: pulumi.Input<string>;
    /**
     * True if custom routes are exported to the peered network; false otherwise.
     */
    exportCustomRoutes?: pulumi.Input<boolean>;
    /**
     * True if all subnet routes with a public IP address range are exported; false otherwise.
     */
    exportCustomRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * True if custom routes are imported from the peered network; false otherwise.
     */
    importCustomRoutes?: pulumi.Input<boolean>;
    /**
     * True if custom routes are imported from the peered network; false otherwise.
     */
    importCustomRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * The ID of the Network Peering.
     */
    name?: pulumi.Input<string>;
    /**
     * The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a
     * consumer VPC network or another standard VMware Engine network.
     */
    peerNetwork: pulumi.Input<string>;
    /**
     * The type of the network to peer with the VMware Engine network. Possible values: ["STANDARD", "VMWARE_ENGINE_NETWORK",
     * "PRIVATE_SERVICES_ACCESS", "NETAPP_CLOUD_VOLUMES", "THIRD_PARTY_SERVICE", "DELL_POWERSCALE"]
     */
    peerNetworkType: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VmwareengineNetworkPeeringTimeouts>;
    /**
     * The relative resource name of the VMware Engine network. Specify the name in the following form:
     * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project} can either be a
     * project number or a project ID.
     */
    vmwareEngineNetwork: pulumi.Input<string>;
}
