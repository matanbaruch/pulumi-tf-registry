// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ActiveDirectoryPeering extends pulumi.CustomResource {
    /**
     * Get an existing ActiveDirectoryPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActiveDirectoryPeeringState, opts?: pulumi.CustomResourceOptions): ActiveDirectoryPeering {
        return new ActiveDirectoryPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/activeDirectoryPeering:ActiveDirectoryPeering';

    /**
     * Returns true if the given object is an instance of ActiveDirectoryPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActiveDirectoryPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActiveDirectoryPeering.__pulumiType;
    }

    /**
     * The full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that
     * CIDR subnets do not overlap between networks, else peering creation will fail.
     */
    public readonly authorizedNetwork!: pulumi.Output<string>;
    /**
     * Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form
     * projects/{projectId}/locations/global/domains/{domainName}
     */
    public readonly domainResource!: pulumi.Output<string>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Resource labels that can contain user-provided metadata **Note**: This field is non-authoritative, and will only manage
     * the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
     * the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Unique name of the peering in this scope including projects and location using the form:
     * projects/{projectId}/locations/global/peerings/{peeringId}.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly peeringId!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The current state of this Peering.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Additional information about the current status of this peering, if available.
     */
    public readonly statusMessage!: pulumi.Output<string | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.ActiveDirectoryPeeringTimeouts | undefined>;

    /**
     * Create a ActiveDirectoryPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActiveDirectoryPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActiveDirectoryPeeringArgs | ActiveDirectoryPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActiveDirectoryPeeringState | undefined;
            resourceInputs["authorizedNetwork"] = state ? state.authorizedNetwork : undefined;
            resourceInputs["domainResource"] = state ? state.domainResource : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peeringId"] = state ? state.peeringId : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusMessage"] = state ? state.statusMessage : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ActiveDirectoryPeeringArgs | undefined;
            if ((!args || args.authorizedNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizedNetwork'");
            }
            if ((!args || args.domainResource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainResource'");
            }
            if ((!args || args.peeringId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peeringId'");
            }
            resourceInputs["authorizedNetwork"] = args ? args.authorizedNetwork : undefined;
            resourceInputs["domainResource"] = args ? args.domainResource : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["peeringId"] = args ? args.peeringId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["statusMessage"] = args ? args.statusMessage : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ActiveDirectoryPeering.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ActiveDirectoryPeering resources.
 */
export interface ActiveDirectoryPeeringState {
    /**
     * The full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that
     * CIDR subnets do not overlap between networks, else peering creation will fail.
     */
    authorizedNetwork?: pulumi.Input<string>;
    /**
     * Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form
     * projects/{projectId}/locations/global/domains/{domainName}
     */
    domainResource?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource labels that can contain user-provided metadata **Note**: This field is non-authoritative, and will only manage
     * the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
     * the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Unique name of the peering in this scope including projects and location using the form:
     * projects/{projectId}/locations/global/peerings/{peeringId}.
     */
    name?: pulumi.Input<string>;
    peeringId?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The current state of this Peering.
     */
    status?: pulumi.Input<string>;
    /**
     * Additional information about the current status of this peering, if available.
     */
    statusMessage?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ActiveDirectoryPeeringTimeouts>;
}

/**
 * The set of arguments for constructing a ActiveDirectoryPeering resource.
 */
export interface ActiveDirectoryPeeringArgs {
    /**
     * The full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that
     * CIDR subnets do not overlap between networks, else peering creation will fail.
     */
    authorizedNetwork: pulumi.Input<string>;
    /**
     * Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form
     * projects/{projectId}/locations/global/domains/{domainName}
     */
    domainResource: pulumi.Input<string>;
    /**
     * Resource labels that can contain user-provided metadata **Note**: This field is non-authoritative, and will only manage
     * the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
     * the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peeringId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The current state of this Peering.
     */
    status?: pulumi.Input<string>;
    /**
     * Additional information about the current status of this peering, if available.
     */
    statusMessage?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ActiveDirectoryPeeringTimeouts>;
}
