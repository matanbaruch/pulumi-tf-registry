// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SqlSourceRepresentationInstance extends pulumi.CustomResource {
    /**
     * Get an existing SqlSourceRepresentationInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlSourceRepresentationInstanceState, opts?: pulumi.CustomResourceOptions): SqlSourceRepresentationInstance {
        return new SqlSourceRepresentationInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/sqlSourceRepresentationInstance:SqlSourceRepresentationInstance';

    /**
     * Returns true if the given object is an instance of SqlSourceRepresentationInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlSourceRepresentationInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlSourceRepresentationInstance.__pulumiType;
    }

    /**
     * The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
     */
    public readonly caCertificate!: pulumi.Output<string | undefined>;
    /**
     * The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS
     * is used on the external server.
     */
    public readonly clientCertificate!: pulumi.Output<string | undefined>;
    /**
     * The private key file for the client certificate on the external server. Required only for server-client authentication.
     * Include only if SSL/TLS is used on the external server.
     */
    public readonly clientKey!: pulumi.Output<string | undefined>;
    /**
     * The MySQL version running on your source database server. Possible values: ["MYSQL_5_6", "MYSQL_5_7", "MYSQL_8_0",
     * "POSTGRES_9_6", "POSTGRES_10", "POSTGRES_11", "POSTGRES_12", "POSTGRES_13", "POSTGRES_14"]
     */
    public readonly databaseVersion!: pulumi.Output<string>;
    /**
     * A file in the bucket that contains the data from the external server.
     */
    public readonly dumpFilePath!: pulumi.Output<string | undefined>;
    /**
     * The IPv4 address and port for the external server, or the the DNS address for the external server. If the external
     * server is hosted on Cloud SQL, the port is 5432.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The name of the source representation instance. Use any valid Cloud SQL instance name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password for the replication user account.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The externally accessible port for the source database server. Defaults to 3306.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The Region in which the created instance should reside. If it is not provided, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SqlSourceRepresentationInstanceTimeouts | undefined>;
    /**
     * The replication user account on the external server.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a SqlSourceRepresentationInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlSourceRepresentationInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlSourceRepresentationInstanceArgs | SqlSourceRepresentationInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlSourceRepresentationInstanceState | undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["clientCertificate"] = state ? state.clientCertificate : undefined;
            resourceInputs["clientKey"] = state ? state.clientKey : undefined;
            resourceInputs["databaseVersion"] = state ? state.databaseVersion : undefined;
            resourceInputs["dumpFilePath"] = state ? state.dumpFilePath : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as SqlSourceRepresentationInstanceArgs | undefined;
            if ((!args || args.databaseVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseVersion'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["clientCertificate"] = args ? args.clientCertificate : undefined;
            resourceInputs["clientKey"] = args ? args.clientKey : undefined;
            resourceInputs["databaseVersion"] = args ? args.databaseVersion : undefined;
            resourceInputs["dumpFilePath"] = args ? args.dumpFilePath : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SqlSourceRepresentationInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SqlSourceRepresentationInstance resources.
 */
export interface SqlSourceRepresentationInstanceState {
    /**
     * The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS
     * is used on the external server.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The private key file for the client certificate on the external server. Required only for server-client authentication.
     * Include only if SSL/TLS is used on the external server.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The MySQL version running on your source database server. Possible values: ["MYSQL_5_6", "MYSQL_5_7", "MYSQL_8_0",
     * "POSTGRES_9_6", "POSTGRES_10", "POSTGRES_11", "POSTGRES_12", "POSTGRES_13", "POSTGRES_14"]
     */
    databaseVersion?: pulumi.Input<string>;
    /**
     * A file in the bucket that contains the data from the external server.
     */
    dumpFilePath?: pulumi.Input<string>;
    /**
     * The IPv4 address and port for the external server, or the the DNS address for the external server. If the external
     * server is hosted on Cloud SQL, the port is 5432.
     */
    host?: pulumi.Input<string>;
    /**
     * The name of the source representation instance. Use any valid Cloud SQL instance name.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the replication user account.
     */
    password?: pulumi.Input<string>;
    /**
     * The externally accessible port for the source database server. Defaults to 3306.
     */
    port?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * The Region in which the created instance should reside. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SqlSourceRepresentationInstanceTimeouts>;
    /**
     * The replication user account on the external server.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlSourceRepresentationInstance resource.
 */
export interface SqlSourceRepresentationInstanceArgs {
    /**
     * The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS
     * is used on the external server.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The private key file for the client certificate on the external server. Required only for server-client authentication.
     * Include only if SSL/TLS is used on the external server.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The MySQL version running on your source database server. Possible values: ["MYSQL_5_6", "MYSQL_5_7", "MYSQL_8_0",
     * "POSTGRES_9_6", "POSTGRES_10", "POSTGRES_11", "POSTGRES_12", "POSTGRES_13", "POSTGRES_14"]
     */
    databaseVersion: pulumi.Input<string>;
    /**
     * A file in the bucket that contains the data from the external server.
     */
    dumpFilePath?: pulumi.Input<string>;
    /**
     * The IPv4 address and port for the external server, or the the DNS address for the external server. If the external
     * server is hosted on Cloud SQL, the port is 5432.
     */
    host: pulumi.Input<string>;
    /**
     * The name of the source representation instance. Use any valid Cloud SQL instance name.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the replication user account.
     */
    password?: pulumi.Input<string>;
    /**
     * The externally accessible port for the source database server. Defaults to 3306.
     */
    port?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * The Region in which the created instance should reside. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SqlSourceRepresentationInstanceTimeouts>;
    /**
     * The replication user account on the external server.
     */
    username?: pulumi.Input<string>;
}
