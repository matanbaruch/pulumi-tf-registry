// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CertificateManagerDnsAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing CertificateManagerDnsAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateManagerDnsAuthorizationState, opts?: pulumi.CustomResourceOptions): CertificateManagerDnsAuthorization {
        return new CertificateManagerDnsAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/certificateManagerDnsAuthorization:CertificateManagerDnsAuthorization';

    /**
     * Returns true if the given object is an instance of CertificateManagerDnsAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateManagerDnsAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateManagerDnsAuthorization.__pulumiType;
    }

    /**
     * A human-readable description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be
     * usable by certificate.
     */
    public /*out*/ readonly dnsResourceRecords!: pulumi.Output<outputs.CertificateManagerDnsAuthorizationDnsResourceRecord[]>;
    /**
     * A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g.
     * authorization for "example.com" can be used to issue certificates for "example.com" and "*.example.com".
     */
    public readonly domain!: pulumi.Output<string>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Set of label tags associated with the DNS Authorization resource. **Note**: This field is non-authoritative, and will
     * only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The Certificate Manager location. If not specified, "global" is used.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
     * match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
     * characters must be a dash, underscore, letter or digit.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.CertificateManagerDnsAuthorizationTimeouts | undefined>;
    /**
     * type of DNS authorization. If unset during the resource creation, FIXED_RECORD will be used for global resources, and
     * PER_PROJECT_RECORD will be used for other locations. FIXED_RECORD DNS authorization uses DNS-01 validation method
     * PER_PROJECT_RECORD DNS authorization allows for independent management of Google-managed certificates with DNS
     * authorization across multiple projects. Possible values: ["FIXED_RECORD", "PER_PROJECT_RECORD"]
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a CertificateManagerDnsAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateManagerDnsAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateManagerDnsAuthorizationArgs | CertificateManagerDnsAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateManagerDnsAuthorizationState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsResourceRecords"] = state ? state.dnsResourceRecords : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CertificateManagerDnsAuthorizationArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["dnsResourceRecords"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateManagerDnsAuthorization.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertificateManagerDnsAuthorization resources.
 */
export interface CertificateManagerDnsAuthorizationState {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be
     * usable by certificate.
     */
    dnsResourceRecords?: pulumi.Input<pulumi.Input<inputs.CertificateManagerDnsAuthorizationDnsResourceRecord>[]>;
    /**
     * A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g.
     * authorization for "example.com" can be used to issue certificates for "example.com" and "*.example.com".
     */
    domain?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set of label tags associated with the DNS Authorization resource. **Note**: This field is non-authoritative, and will
     * only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Certificate Manager location. If not specified, "global" is used.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
     * match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
     * characters must be a dash, underscore, letter or digit.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CertificateManagerDnsAuthorizationTimeouts>;
    /**
     * type of DNS authorization. If unset during the resource creation, FIXED_RECORD will be used for global resources, and
     * PER_PROJECT_RECORD will be used for other locations. FIXED_RECORD DNS authorization uses DNS-01 validation method
     * PER_PROJECT_RECORD DNS authorization allows for independent management of Google-managed certificates with DNS
     * authorization across multiple projects. Possible values: ["FIXED_RECORD", "PER_PROJECT_RECORD"]
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificateManagerDnsAuthorization resource.
 */
export interface CertificateManagerDnsAuthorizationArgs {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g.
     * authorization for "example.com" can be used to issue certificates for "example.com" and "*.example.com".
     */
    domain: pulumi.Input<string>;
    /**
     * Set of label tags associated with the DNS Authorization resource. **Note**: This field is non-authoritative, and will
     * only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Certificate Manager location. If not specified, "global" is used.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
     * match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
     * characters must be a dash, underscore, letter or digit.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CertificateManagerDnsAuthorizationTimeouts>;
    /**
     * type of DNS authorization. If unset during the resource creation, FIXED_RECORD will be used for global resources, and
     * PER_PROJECT_RECORD will be used for other locations. FIXED_RECORD DNS authorization uses DNS-01 validation method
     * PER_PROJECT_RECORD DNS authorization allows for independent management of Google-managed certificates with DNS
     * authorization across multiple projects. Possible values: ["FIXED_RECORD", "PER_PROJECT_RECORD"]
     */
    type?: pulumi.Input<string>;
}
