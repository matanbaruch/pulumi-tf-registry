// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirebaserulesRelease extends pulumi.CustomResource {
    /**
     * Get an existing FirebaserulesRelease resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirebaserulesReleaseState, opts?: pulumi.CustomResourceOptions): FirebaserulesRelease {
        return new FirebaserulesRelease(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/firebaserulesRelease:FirebaserulesRelease';

    /**
     * Returns true if the given object is an instance of FirebaserulesRelease.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirebaserulesRelease {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirebaserulesRelease.__pulumiType;
    }

    /**
     * Output only. Time the release was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Disable the release to keep it from being served. The response code of NOT_FOUND will be given for executables generated
     * from this Release.
     */
    public /*out*/ readonly disabled!: pulumi.Output<boolean>;
    /**
     * Format: `projects/{project_id}/releases/{release_id}`\Firestore Rules Releases will **always** have the name
     * 'cloud.firestore'
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.
     */
    public readonly rulesetName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FirebaserulesReleaseTimeouts | undefined>;
    /**
     * Output only. Time the release was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a FirebaserulesRelease resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirebaserulesReleaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirebaserulesReleaseArgs | FirebaserulesReleaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirebaserulesReleaseState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["rulesetName"] = state ? state.rulesetName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as FirebaserulesReleaseArgs | undefined;
            if ((!args || args.rulesetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rulesetName'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rulesetName"] = args ? args.rulesetName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["disabled"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirebaserulesRelease.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirebaserulesRelease resources.
 */
export interface FirebaserulesReleaseState {
    /**
     * Output only. Time the release was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Disable the release to keep it from being served. The response code of NOT_FOUND will be given for executables generated
     * from this Release.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Format: `projects/{project_id}/releases/{release_id}`\Firestore Rules Releases will **always** have the name
     * 'cloud.firestore'
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.
     */
    rulesetName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirebaserulesReleaseTimeouts>;
    /**
     * Output only. Time the release was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirebaserulesRelease resource.
 */
export interface FirebaserulesReleaseArgs {
    /**
     * Format: `projects/{project_id}/releases/{release_id}`\Firestore Rules Releases will **always** have the name
     * 'cloud.firestore'
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.
     */
    rulesetName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirebaserulesReleaseTimeouts>;
}
