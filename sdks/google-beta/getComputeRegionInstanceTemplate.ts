// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputeRegionInstanceTemplate(args?: GetComputeRegionInstanceTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeRegionInstanceTemplateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-beta:index/getComputeRegionInstanceTemplate:getComputeRegionInstanceTemplate", {
        "filter": args.filter,
        "id": args.id,
        "mostRecent": args.mostRecent,
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputeRegionInstanceTemplate.
 */
export interface GetComputeRegionInstanceTemplateArgs {
    filter?: string;
    id?: string;
    mostRecent?: boolean;
    name?: string;
    project?: string;
    region?: string;
}

/**
 * A collection of values returned by getComputeRegionInstanceTemplate.
 */
export interface GetComputeRegionInstanceTemplateResult {
    readonly advancedMachineFeatures: outputs.GetComputeRegionInstanceTemplateAdvancedMachineFeature[];
    readonly canIpForward: boolean;
    readonly confidentialInstanceConfigs: outputs.GetComputeRegionInstanceTemplateConfidentialInstanceConfig[];
    readonly description: string;
    readonly disks: outputs.GetComputeRegionInstanceTemplateDisk[];
    readonly effectiveLabels: {[key: string]: string};
    readonly enableDisplay: boolean;
    readonly filter?: string;
    readonly guestAccelerators: outputs.GetComputeRegionInstanceTemplateGuestAccelerator[];
    readonly id: string;
    readonly instanceDescription: string;
    readonly labels: {[key: string]: string};
    readonly machineType: string;
    readonly metadata: {[key: string]: string};
    readonly metadataFingerprint: string;
    readonly metadataStartupScript: string;
    readonly minCpuPlatform: string;
    readonly mostRecent?: boolean;
    readonly name?: string;
    readonly namePrefix: string;
    readonly networkInterfaces: outputs.GetComputeRegionInstanceTemplateNetworkInterface[];
    readonly networkPerformanceConfigs: outputs.GetComputeRegionInstanceTemplateNetworkPerformanceConfig[];
    readonly partnerMetadata: {[key: string]: string};
    readonly project?: string;
    readonly region?: string;
    readonly reservationAffinities: outputs.GetComputeRegionInstanceTemplateReservationAffinity[];
    readonly resourceManagerTags: {[key: string]: string};
    readonly resourcePolicies: string[];
    readonly schedulings: outputs.GetComputeRegionInstanceTemplateScheduling[];
    readonly selfLink: string;
    readonly serviceAccounts: outputs.GetComputeRegionInstanceTemplateServiceAccount[];
    readonly shieldedInstanceConfigs: outputs.GetComputeRegionInstanceTemplateShieldedInstanceConfig[];
    readonly tags: string[];
    readonly tagsFingerprint: string;
    readonly terraformLabels: {[key: string]: string};
}
export function getComputeRegionInstanceTemplateOutput(args?: GetComputeRegionInstanceTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeRegionInstanceTemplateResult> {
    return pulumi.output(args).apply((a: any) => getComputeRegionInstanceTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getComputeRegionInstanceTemplate.
 */
export interface GetComputeRegionInstanceTemplateOutputArgs {
    filter?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    mostRecent?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
