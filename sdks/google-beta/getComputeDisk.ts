// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputeDisk(args: GetComputeDiskArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeDiskResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-beta:index/getComputeDisk:getComputeDisk", {
        "id": args.id,
        "name": args.name,
        "project": args.project,
        "zone": args.zone,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputeDisk.
 */
export interface GetComputeDiskArgs {
    id?: string;
    name: string;
    project?: string;
    zone?: string;
}

/**
 * A collection of values returned by getComputeDisk.
 */
export interface GetComputeDiskResult {
    readonly accessMode: string;
    readonly asyncPrimaryDisks: outputs.GetComputeDiskAsyncPrimaryDisk[];
    readonly creationTimestamp: string;
    readonly description: string;
    readonly diskEncryptionKeys: outputs.GetComputeDiskDiskEncryptionKey[];
    readonly diskId: string;
    readonly effectiveLabels: {[key: string]: string};
    readonly enableConfidentialCompute: boolean;
    readonly guestOsFeatures: outputs.GetComputeDiskGuestOsFeature[];
    readonly id: string;
    readonly image: string;
    readonly interface: string;
    readonly labelFingerprint: string;
    readonly labels: {[key: string]: string};
    readonly lastAttachTimestamp: string;
    readonly lastDetachTimestamp: string;
    readonly licenses: string[];
    readonly multiWriter: boolean;
    readonly name: string;
    readonly physicalBlockSizeBytes: number;
    readonly project?: string;
    readonly provisionedIops: number;
    readonly provisionedThroughput: number;
    readonly resourcePolicies: string[];
    readonly selfLink: string;
    readonly size: number;
    readonly snapshot: string;
    readonly sourceDisk: string;
    readonly sourceDiskId: string;
    readonly sourceImageEncryptionKeys: outputs.GetComputeDiskSourceImageEncryptionKey[];
    readonly sourceImageId: string;
    readonly sourceSnapshotEncryptionKeys: outputs.GetComputeDiskSourceSnapshotEncryptionKey[];
    readonly sourceSnapshotId: string;
    readonly storagePool: string;
    readonly terraformLabels: {[key: string]: string};
    readonly type: string;
    readonly users: string[];
    readonly zone?: string;
}
export function getComputeDiskOutput(args: GetComputeDiskOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeDiskResult> {
    return pulumi.output(args).apply((a: any) => getComputeDisk(a, opts))
}

/**
 * A collection of arguments for invoking getComputeDisk.
 */
export interface GetComputeDiskOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
