// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecretManagerSecret extends pulumi.CustomResource {
    /**
     * Get an existing SecretManagerSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretManagerSecretState, opts?: pulumi.CustomResourceOptions): SecretManagerSecret {
        return new SecretManagerSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/secretManagerSecret:SecretManagerSecret';

    /**
     * Returns true if the given object is an instance of SecretManagerSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretManagerSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretManagerSecret.__pulumiType;
    }

    /**
     * Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow
     * client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63
     * characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]),
     * and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of
     * annotation keys and values must be less than 16KiB. An object containing a list of "key": value pairs. Example: {
     * "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
     * annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
     * present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The time at which the Secret was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent
     * on input. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     * Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z". Only one of 'expire_time' or 'ttl' can be
     * provided.
     */
    public readonly expireTime!: pulumi.Output<string>;
    /**
     * The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
     * maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to
     * the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be assigned to a given
     * resource. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3"
     * }. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name of the Secret. Format: 'projects/{{project}}/secrets/{{secret_id}}'
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The replication policy of the secret data attached to the Secret. It cannot be changed after the Secret has been
     * created.
     */
    public readonly replication!: pulumi.Output<outputs.SecretManagerSecretReplication>;
    /**
     * The rotation time and period for a Secret. At 'next_rotation_time', Secret Manager will send a Pub/Sub notification to
     * the topics configured on the Secret. 'topics' must be set to configure rotation.
     */
    public readonly rotation!: pulumi.Output<outputs.SecretManagerSecretRotation | undefined>;
    /**
     * This must be unique within the project.
     */
    public readonly secretId!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.SecretManagerSecretTimeouts | undefined>;
    /**
     * A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret
     * or its versions.
     */
    public readonly topics!: pulumi.Output<outputs.SecretManagerSecretTopic[] | undefined>;
    /**
     * The TTL for the Secret. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
     * Only one of 'ttl' or 'expire_time' can be provided.
     */
    public readonly ttl!: pulumi.Output<string | undefined>;
    /**
     * Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can
     * contain uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_') characters. An alias string
     * must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given
     * secret. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     */
    public readonly versionAliases!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Secret Version TTL after destruction request. This is a part of the delayed delete feature on Secret Version. For secret
     * with versionDestroyTtl>0, version destruction doesn't happen immediately on calling destroy instead the version goes to
     * a disabled state and the actual destruction happens after this TTL expires.
     */
    public readonly versionDestroyTtl!: pulumi.Output<string | undefined>;

    /**
     * Create a SecretManagerSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretManagerSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretManagerSecretArgs | SecretManagerSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretManagerSecretState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["replication"] = state ? state.replication : undefined;
            resourceInputs["rotation"] = state ? state.rotation : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["versionAliases"] = state ? state.versionAliases : undefined;
            resourceInputs["versionDestroyTtl"] = state ? state.versionDestroyTtl : undefined;
        } else {
            const args = argsOrState as SecretManagerSecretArgs | undefined;
            if ((!args || args.replication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replication'");
            }
            if ((!args || args.secretId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["expireTime"] = args ? args.expireTime : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["replication"] = args ? args.replication : undefined;
            resourceInputs["rotation"] = args ? args.rotation : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["versionAliases"] = args ? args.versionAliases : undefined;
            resourceInputs["versionDestroyTtl"] = args ? args.versionDestroyTtl : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretManagerSecret.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretManagerSecret resources.
 */
export interface SecretManagerSecretState {
    /**
     * Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow
     * client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63
     * characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]),
     * and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of
     * annotation keys and values must be less than 16KiB. An object containing a list of "key": value pairs. Example: {
     * "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
     * annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
     * present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time at which the Secret was created.
     */
    createTime?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent
     * on input. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     * Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z". Only one of 'expire_time' or 'ttl' can be
     * provided.
     */
    expireTime?: pulumi.Input<string>;
    /**
     * The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
     * maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to
     * the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be assigned to a given
     * resource. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3"
     * }. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name of the Secret. Format: 'projects/{{project}}/secrets/{{secret_id}}'
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The replication policy of the secret data attached to the Secret. It cannot be changed after the Secret has been
     * created.
     */
    replication?: pulumi.Input<inputs.SecretManagerSecretReplication>;
    /**
     * The rotation time and period for a Secret. At 'next_rotation_time', Secret Manager will send a Pub/Sub notification to
     * the topics configured on the Secret. 'topics' must be set to configure rotation.
     */
    rotation?: pulumi.Input<inputs.SecretManagerSecretRotation>;
    /**
     * This must be unique within the project.
     */
    secretId?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SecretManagerSecretTimeouts>;
    /**
     * A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret
     * or its versions.
     */
    topics?: pulumi.Input<pulumi.Input<inputs.SecretManagerSecretTopic>[]>;
    /**
     * The TTL for the Secret. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
     * Only one of 'ttl' or 'expire_time' can be provided.
     */
    ttl?: pulumi.Input<string>;
    /**
     * Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can
     * contain uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_') characters. An alias string
     * must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given
     * secret. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     */
    versionAliases?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Secret Version TTL after destruction request. This is a part of the delayed delete feature on Secret Version. For secret
     * with versionDestroyTtl>0, version destruction doesn't happen immediately on calling destroy instead the version goes to
     * a disabled state and the actual destruction happens after this TTL expires.
     */
    versionDestroyTtl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretManagerSecret resource.
 */
export interface SecretManagerSecretArgs {
    /**
     * Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow
     * client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63
     * characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]),
     * and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of
     * annotation keys and values must be less than 16KiB. An object containing a list of "key": value pairs. Example: {
     * "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
     * annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
     * present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent
     * on input. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     * Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z". Only one of 'expire_time' or 'ttl' can be
     * provided.
     */
    expireTime?: pulumi.Input<string>;
    /**
     * The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
     * maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to
     * the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be assigned to a given
     * resource. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3"
     * }. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
     * refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    project?: pulumi.Input<string>;
    /**
     * The replication policy of the secret data attached to the Secret. It cannot be changed after the Secret has been
     * created.
     */
    replication: pulumi.Input<inputs.SecretManagerSecretReplication>;
    /**
     * The rotation time and period for a Secret. At 'next_rotation_time', Secret Manager will send a Pub/Sub notification to
     * the topics configured on the Secret. 'topics' must be set to configure rotation.
     */
    rotation?: pulumi.Input<inputs.SecretManagerSecretRotation>;
    /**
     * This must be unique within the project.
     */
    secretId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecretManagerSecretTimeouts>;
    /**
     * A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret
     * or its versions.
     */
    topics?: pulumi.Input<pulumi.Input<inputs.SecretManagerSecretTopic>[]>;
    /**
     * The TTL for the Secret. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
     * Only one of 'ttl' or 'expire_time' can be provided.
     */
    ttl?: pulumi.Input<string>;
    /**
     * Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can
     * contain uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_') characters. An alias string
     * must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given
     * secret. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
     */
    versionAliases?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Secret Version TTL after destruction request. This is a part of the delayed delete feature on Secret Version. For secret
     * with versionDestroyTtl>0, version destruction doesn't happen immediately on calling destroy instead the version goes to
     * a disabled state and the actual destruction happens after this TTL expires.
     */
    versionDestroyTtl?: pulumi.Input<string>;
}
