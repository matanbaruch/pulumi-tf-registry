// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventarcChannel extends pulumi.CustomResource {
    /**
     * Get an existing EventarcChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventarcChannelState, opts?: pulumi.CustomResourceOptions): EventarcChannel {
        return new EventarcChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/eventarcChannel:EventarcChannel';

    /**
     * Returns true if the given object is an instance of EventarcChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventarcChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventarcChannel.__pulumiType;
    }

    /**
     * Output only. The activation token for the channel. The token must be used by the provider to register the channel for
     * publishing.
     */
    public /*out*/ readonly activationToken!: pulumi.Output<string>;
    /**
     * Output only. The creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
     * match the pattern `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*`.
     */
    public readonly cryptoKeyName!: pulumi.Output<string | undefined>;
    /**
     * The location for the resource
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Required. The resource name of the channel. Must be unique within the location on the project.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery.
     * Format: `projects/{project}/topics/{topic_id}`.
     */
    public /*out*/ readonly pubsubTopic!: pulumi.Output<string>;
    /**
     * Output only. The state of a Channel. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE, INACTIVE
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted
     * permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
     */
    public readonly thirdPartyProvider!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EventarcChannelTimeouts | undefined>;
    /**
     * Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain
     * unchanged until the resource is deleted.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Output only. The last-modified time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a EventarcChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventarcChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventarcChannelArgs | EventarcChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventarcChannelState | undefined;
            resourceInputs["activationToken"] = state ? state.activationToken : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["cryptoKeyName"] = state ? state.cryptoKeyName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pubsubTopic"] = state ? state.pubsubTopic : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["thirdPartyProvider"] = state ? state.thirdPartyProvider : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as EventarcChannelArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["cryptoKeyName"] = args ? args.cryptoKeyName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["thirdPartyProvider"] = args ? args.thirdPartyProvider : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["activationToken"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["pubsubTopic"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventarcChannel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventarcChannel resources.
 */
export interface EventarcChannelState {
    /**
     * Output only. The activation token for the channel. The token must be used by the provider to register the channel for
     * publishing.
     */
    activationToken?: pulumi.Input<string>;
    /**
     * Output only. The creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
     * match the pattern `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*`.
     */
    cryptoKeyName?: pulumi.Input<string>;
    /**
     * The location for the resource
     */
    location?: pulumi.Input<string>;
    /**
     * Required. The resource name of the channel. Must be unique within the location on the project.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery.
     * Format: `projects/{project}/topics/{topic_id}`.
     */
    pubsubTopic?: pulumi.Input<string>;
    /**
     * Output only. The state of a Channel. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE, INACTIVE
     */
    state?: pulumi.Input<string>;
    /**
     * The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted
     * permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
     */
    thirdPartyProvider?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EventarcChannelTimeouts>;
    /**
     * Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain
     * unchanged until the resource is deleted.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. The last-modified time.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventarcChannel resource.
 */
export interface EventarcChannelArgs {
    /**
     * Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must
     * match the pattern `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*`.
     */
    cryptoKeyName?: pulumi.Input<string>;
    /**
     * The location for the resource
     */
    location: pulumi.Input<string>;
    /**
     * Required. The resource name of the channel. Must be unique within the location on the project.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted
     * permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
     */
    thirdPartyProvider?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EventarcChannelTimeouts>;
}
