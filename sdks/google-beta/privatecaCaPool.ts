// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PrivatecaCaPool extends pulumi.CustomResource {
    /**
     * Get an existing PrivatecaCaPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivatecaCaPoolState, opts?: pulumi.CustomResourceOptions): PrivatecaCaPool {
        return new PrivatecaCaPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/privatecaCaPool:PrivatecaCaPool';

    /**
     * Returns true if the given object is an instance of PrivatecaCaPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivatecaCaPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivatecaCaPool.__pulumiType;
    }

    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The IssuancePolicy to control how Certificates will be issued from this CaPool.
     */
    public readonly issuancePolicy!: pulumi.Output<outputs.PrivatecaCaPoolIssuancePolicy | undefined>;
    /**
     * Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
     * "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Location of the CaPool. A full list of valid locations can be found by running 'gcloud privateca locations list'.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name for this CaPool.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
     */
    public readonly publishingOptions!: pulumi.Output<outputs.PrivatecaCaPoolPublishingOptions | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The Tier of this CaPool. Possible values: ["ENTERPRISE", "DEVOPS"]
     */
    public readonly tier!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.PrivatecaCaPoolTimeouts | undefined>;

    /**
     * Create a PrivatecaCaPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivatecaCaPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivatecaCaPoolArgs | PrivatecaCaPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivatecaCaPoolState | undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["issuancePolicy"] = state ? state.issuancePolicy : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["publishingOptions"] = state ? state.publishingOptions : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as PrivatecaCaPoolArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.tier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tier'");
            }
            resourceInputs["issuancePolicy"] = args ? args.issuancePolicy : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["publishingOptions"] = args ? args.publishingOptions : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivatecaCaPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PrivatecaCaPool resources.
 */
export interface PrivatecaCaPoolState {
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The IssuancePolicy to control how Certificates will be issued from this CaPool.
     */
    issuancePolicy?: pulumi.Input<inputs.PrivatecaCaPoolIssuancePolicy>;
    /**
     * Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
     * "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location of the CaPool. A full list of valid locations can be found by running 'gcloud privateca locations list'.
     */
    location?: pulumi.Input<string>;
    /**
     * The name for this CaPool.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
     */
    publishingOptions?: pulumi.Input<inputs.PrivatecaCaPoolPublishingOptions>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Tier of this CaPool. Possible values: ["ENTERPRISE", "DEVOPS"]
     */
    tier?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PrivatecaCaPoolTimeouts>;
}

/**
 * The set of arguments for constructing a PrivatecaCaPool resource.
 */
export interface PrivatecaCaPoolArgs {
    /**
     * The IssuancePolicy to control how Certificates will be issued from this CaPool.
     */
    issuancePolicy?: pulumi.Input<inputs.PrivatecaCaPoolIssuancePolicy>;
    /**
     * Labels with user-defined metadata. An object containing a list of "key": value pairs. Example: { "name": "wrench",
     * "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location of the CaPool. A full list of valid locations can be found by running 'gcloud privateca locations list'.
     */
    location: pulumi.Input<string>;
    /**
     * The name for this CaPool.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
     */
    publishingOptions?: pulumi.Input<inputs.PrivatecaCaPoolPublishingOptions>;
    /**
     * The Tier of this CaPool. Possible values: ["ENTERPRISE", "DEVOPS"]
     */
    tier: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PrivatecaCaPoolTimeouts>;
}
