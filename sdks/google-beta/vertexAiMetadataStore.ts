// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VertexAiMetadataStore extends pulumi.CustomResource {
    /**
     * Get an existing VertexAiMetadataStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VertexAiMetadataStoreState, opts?: pulumi.CustomResourceOptions): VertexAiMetadataStore {
        return new VertexAiMetadataStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/vertexAiMetadataStore:VertexAiMetadataStore';

    /**
     * Returns true if the given object is an instance of VertexAiMetadataStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VertexAiMetadataStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VertexAiMetadataStore.__pulumiType;
    }

    /**
     * The timestamp of when the MetadataStore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the MetadataStore.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Customer-managed encryption key spec for a MetadataStore. If set, this MetadataStore and all sub-resources of this
     * MetadataStore will be secured by this key.
     */
    public readonly encryptionSpec!: pulumi.Output<outputs.VertexAiMetadataStoreEncryptionSpec | undefined>;
    /**
     * The name of the MetadataStore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first
     * character cannot be a number.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The region of the Metadata Store. eg us-central1
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * State information of the MetadataStore.
     */
    public /*out*/ readonly states!: pulumi.Output<outputs.VertexAiMetadataStoreState[]>;
    public readonly timeouts!: pulumi.Output<outputs.VertexAiMetadataStoreTimeouts | undefined>;
    /**
     * The timestamp of when the MetadataStore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
     * to nine fractional digits.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a VertexAiMetadataStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VertexAiMetadataStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VertexAiMetadataStoreArgs | VertexAiMetadataStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VertexAiMetadataStoreState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionSpec"] = state ? state.encryptionSpec : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as VertexAiMetadataStoreArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionSpec"] = args ? args.encryptionSpec : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VertexAiMetadataStore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VertexAiMetadataStore resources.
 */
export interface VertexAiMetadataStoreState {
    /**
     * The timestamp of when the MetadataStore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the MetadataStore.
     */
    description?: pulumi.Input<string>;
    /**
     * Customer-managed encryption key spec for a MetadataStore. If set, this MetadataStore and all sub-resources of this
     * MetadataStore will be secured by this key.
     */
    encryptionSpec?: pulumi.Input<inputs.VertexAiMetadataStoreEncryptionSpec>;
    /**
     * The name of the MetadataStore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first
     * character cannot be a number.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region of the Metadata Store. eg us-central1
     */
    region?: pulumi.Input<string>;
    /**
     * State information of the MetadataStore.
     */
    states?: pulumi.Input<pulumi.Input<inputs.VertexAiMetadataStoreState>[]>;
    timeouts?: pulumi.Input<inputs.VertexAiMetadataStoreTimeouts>;
    /**
     * The timestamp of when the MetadataStore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
     * to nine fractional digits.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VertexAiMetadataStore resource.
 */
export interface VertexAiMetadataStoreArgs {
    /**
     * Description of the MetadataStore.
     */
    description?: pulumi.Input<string>;
    /**
     * Customer-managed encryption key spec for a MetadataStore. If set, this MetadataStore and all sub-resources of this
     * MetadataStore will be secured by this key.
     */
    encryptionSpec?: pulumi.Input<inputs.VertexAiMetadataStoreEncryptionSpec>;
    /**
     * The name of the MetadataStore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first
     * character cannot be a number.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region of the Metadata Store. eg us-central1
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VertexAiMetadataStoreTimeouts>;
}
