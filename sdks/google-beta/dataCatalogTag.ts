// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataCatalogTag extends pulumi.CustomResource {
    /**
     * Get an existing DataCatalogTag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataCatalogTagState, opts?: pulumi.CustomResourceOptions): DataCatalogTag {
        return new DataCatalogTag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/dataCatalogTag:DataCatalogTag';

    /**
     * Returns true if the given object is an instance of DataCatalogTag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataCatalogTag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataCatalogTag.__pulumiType;
    }

    /**
     * Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual
     * column based on that schema. For attaching a tag to a nested column, use '.' to separate the column names. Example:
     * 'outer_column.inner_column'
     */
    public readonly column!: pulumi.Output<string | undefined>;
    /**
     * This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined
     * by the tag's template. A tag must have at least 1 field and at most 500 fields.
     */
    public readonly fields!: pulumi.Output<outputs.DataCatalogTagField[]>;
    /**
     * The resource name of the tag in URL format. Example:
     * projects/{project_id}/locations/{location}/entrygroups/{entryGroupId}/entries/{entryId}/tags/{tag_id} or
     * projects/{project_id}/locations/{location}/entrygroups/{entryGroupId}/tags/{tag_id} where tag_id is a system-generated
     * identifier. Note that this Tag may not actually be stored in the location in this name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The name of the parent this tag is attached to. This can be the name of an entry or an entry group. If an entry group,
     * the tag will be attached to all entries in that group.
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * The resource name of the tag template that this tag uses. Example:
     * projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId} This field cannot be modified after creation.
     */
    public readonly template!: pulumi.Output<string>;
    /**
     * The display name of the tag template.
     */
    public /*out*/ readonly templateDisplayname!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DataCatalogTagTimeouts | undefined>;

    /**
     * Create a DataCatalogTag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataCatalogTagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataCatalogTagArgs | DataCatalogTagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataCatalogTagState | undefined;
            resourceInputs["column"] = state ? state.column : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateDisplayname"] = state ? state.templateDisplayname : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DataCatalogTagArgs | undefined;
            if ((!args || args.fields === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fields'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["column"] = args ? args.column : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["templateDisplayname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataCatalogTag.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataCatalogTag resources.
 */
export interface DataCatalogTagState {
    /**
     * Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual
     * column based on that schema. For attaching a tag to a nested column, use '.' to separate the column names. Example:
     * 'outer_column.inner_column'
     */
    column?: pulumi.Input<string>;
    /**
     * This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined
     * by the tag's template. A tag must have at least 1 field and at most 500 fields.
     */
    fields?: pulumi.Input<pulumi.Input<inputs.DataCatalogTagField>[]>;
    /**
     * The resource name of the tag in URL format. Example:
     * projects/{project_id}/locations/{location}/entrygroups/{entryGroupId}/entries/{entryId}/tags/{tag_id} or
     * projects/{project_id}/locations/{location}/entrygroups/{entryGroupId}/tags/{tag_id} where tag_id is a system-generated
     * identifier. Note that this Tag may not actually be stored in the location in this name.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the parent this tag is attached to. This can be the name of an entry or an entry group. If an entry group,
     * the tag will be attached to all entries in that group.
     */
    parent?: pulumi.Input<string>;
    /**
     * The resource name of the tag template that this tag uses. Example:
     * projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId} This field cannot be modified after creation.
     */
    template?: pulumi.Input<string>;
    /**
     * The display name of the tag template.
     */
    templateDisplayname?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataCatalogTagTimeouts>;
}

/**
 * The set of arguments for constructing a DataCatalogTag resource.
 */
export interface DataCatalogTagArgs {
    /**
     * Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual
     * column based on that schema. For attaching a tag to a nested column, use '.' to separate the column names. Example:
     * 'outer_column.inner_column'
     */
    column?: pulumi.Input<string>;
    /**
     * This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined
     * by the tag's template. A tag must have at least 1 field and at most 500 fields.
     */
    fields: pulumi.Input<pulumi.Input<inputs.DataCatalogTagField>[]>;
    /**
     * The name of the parent this tag is attached to. This can be the name of an entry or an entry group. If an entry group,
     * the tag will be attached to all entries in that group.
     */
    parent?: pulumi.Input<string>;
    /**
     * The resource name of the tag template that this tag uses. Example:
     * projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId} This field cannot be modified after creation.
     */
    template: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataCatalogTagTimeouts>;
}
