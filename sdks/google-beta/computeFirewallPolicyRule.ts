// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeFirewallPolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing ComputeFirewallPolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeFirewallPolicyRuleState, opts?: pulumi.CustomResourceOptions): ComputeFirewallPolicyRule {
        return new ComputeFirewallPolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/computeFirewallPolicyRule:ComputeFirewallPolicyRule';

    /**
     * Returns true if the given object is an instance of ComputeFirewallPolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeFirewallPolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeFirewallPolicyRule.__pulumiType;
    }

    /**
     * The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "goto_next" and
     * "apply_security_profile_group".
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * An optional description for this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The direction in which this rule applies. Possible values: INGRESS, EGRESS
     */
    public readonly direction!: pulumi.Output<string>;
    /**
     * Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and
     * traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured
     * export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on
     * "goto_next" rules.
     */
    public readonly enableLogging!: pulumi.Output<boolean | undefined>;
    /**
     * The firewall policy of the resource.
     */
    public readonly firewallPolicy!: pulumi.Output<string>;
    /**
     * Type of the resource. Always `compute#firewallPolicyRule` for firewall policy rules
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is
     * enforced.
     */
    public readonly match!: pulumi.Output<outputs.ComputeFirewallPolicyRuleMatch>;
    /**
     * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and
     * 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the
     * lowest prority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Calculation of the complexity of a single firewall policy rule.
     */
    public /*out*/ readonly ruleTupleCount!: pulumi.Output<number>;
    /**
     * A fully-qualified URL of a SecurityProfileGroup resource. Example:
     * https://networksecurity.googleapis.com/v1/organizations/{organizationId}/locations/global/securityProfileGroups/my-security-profile-group.
     * It must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
     */
    public readonly securityProfileGroup!: pulumi.Output<string | undefined>;
    /**
     * A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get
     * this rule. If this field is left blank, all VMs within the organization will receive the rule.
     */
    public readonly targetResources!: pulumi.Output<string[] | undefined>;
    /**
     * A list of service accounts indicating the sets of instances that are applied with this rule.
     */
    public readonly targetServiceAccounts!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeFirewallPolicyRuleTimeouts | undefined>;
    /**
     * Boolean flag indicating if the traffic should be TLS decrypted. It can be set only if action =
     * 'apply_security_profile_group' and cannot be set for other actions.
     */
    public readonly tlsInspect!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ComputeFirewallPolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeFirewallPolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeFirewallPolicyRuleArgs | ComputeFirewallPolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeFirewallPolicyRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["enableLogging"] = state ? state.enableLogging : undefined;
            resourceInputs["firewallPolicy"] = state ? state.firewallPolicy : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["match"] = state ? state.match : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["ruleTupleCount"] = state ? state.ruleTupleCount : undefined;
            resourceInputs["securityProfileGroup"] = state ? state.securityProfileGroup : undefined;
            resourceInputs["targetResources"] = state ? state.targetResources : undefined;
            resourceInputs["targetServiceAccounts"] = state ? state.targetServiceAccounts : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tlsInspect"] = state ? state.tlsInspect : undefined;
        } else {
            const args = argsOrState as ComputeFirewallPolicyRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.firewallPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallPolicy'");
            }
            if ((!args || args.match === undefined) && !opts.urn) {
                throw new Error("Missing required property 'match'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["enableLogging"] = args ? args.enableLogging : undefined;
            resourceInputs["firewallPolicy"] = args ? args.firewallPolicy : undefined;
            resourceInputs["match"] = args ? args.match : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["securityProfileGroup"] = args ? args.securityProfileGroup : undefined;
            resourceInputs["targetResources"] = args ? args.targetResources : undefined;
            resourceInputs["targetServiceAccounts"] = args ? args.targetServiceAccounts : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tlsInspect"] = args ? args.tlsInspect : undefined;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["ruleTupleCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeFirewallPolicyRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeFirewallPolicyRule resources.
 */
export interface ComputeFirewallPolicyRuleState {
    /**
     * The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "goto_next" and
     * "apply_security_profile_group".
     */
    action?: pulumi.Input<string>;
    /**
     * An optional description for this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The direction in which this rule applies. Possible values: INGRESS, EGRESS
     */
    direction?: pulumi.Input<string>;
    /**
     * Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and
     * traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured
     * export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on
     * "goto_next" rules.
     */
    enableLogging?: pulumi.Input<boolean>;
    /**
     * The firewall policy of the resource.
     */
    firewallPolicy?: pulumi.Input<string>;
    /**
     * Type of the resource. Always `compute#firewallPolicyRule` for firewall policy rules
     */
    kind?: pulumi.Input<string>;
    /**
     * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is
     * enforced.
     */
    match?: pulumi.Input<inputs.ComputeFirewallPolicyRuleMatch>;
    /**
     * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and
     * 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the
     * lowest prority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Calculation of the complexity of a single firewall policy rule.
     */
    ruleTupleCount?: pulumi.Input<number>;
    /**
     * A fully-qualified URL of a SecurityProfileGroup resource. Example:
     * https://networksecurity.googleapis.com/v1/organizations/{organizationId}/locations/global/securityProfileGroups/my-security-profile-group.
     * It must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
     */
    securityProfileGroup?: pulumi.Input<string>;
    /**
     * A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get
     * this rule. If this field is left blank, all VMs within the organization will receive the rule.
     */
    targetResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of service accounts indicating the sets of instances that are applied with this rule.
     */
    targetServiceAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ComputeFirewallPolicyRuleTimeouts>;
    /**
     * Boolean flag indicating if the traffic should be TLS decrypted. It can be set only if action =
     * 'apply_security_profile_group' and cannot be set for other actions.
     */
    tlsInspect?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ComputeFirewallPolicyRule resource.
 */
export interface ComputeFirewallPolicyRuleArgs {
    /**
     * The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny", "goto_next" and
     * "apply_security_profile_group".
     */
    action: pulumi.Input<string>;
    /**
     * An optional description for this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The direction in which this rule applies. Possible values: INGRESS, EGRESS
     */
    direction: pulumi.Input<string>;
    /**
     * Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and
     * traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured
     * export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on
     * "goto_next" rules.
     */
    enableLogging?: pulumi.Input<boolean>;
    /**
     * The firewall policy of the resource.
     */
    firewallPolicy: pulumi.Input<string>;
    /**
     * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is
     * enforced.
     */
    match: pulumi.Input<inputs.ComputeFirewallPolicyRuleMatch>;
    /**
     * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and
     * 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the
     * lowest prority.
     */
    priority: pulumi.Input<number>;
    /**
     * A fully-qualified URL of a SecurityProfileGroup resource. Example:
     * https://networksecurity.googleapis.com/v1/organizations/{organizationId}/locations/global/securityProfileGroups/my-security-profile-group.
     * It must be specified if action = 'apply_security_profile_group' and cannot be specified for other actions.
     */
    securityProfileGroup?: pulumi.Input<string>;
    /**
     * A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get
     * this rule. If this field is left blank, all VMs within the organization will receive the rule.
     */
    targetResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of service accounts indicating the sets of instances that are applied with this rule.
     */
    targetServiceAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ComputeFirewallPolicyRuleTimeouts>;
    /**
     * Boolean flag indicating if the traffic should be TLS decrypted. It can be set only if action =
     * 'apply_security_profile_group' and cannot be set for other actions.
     */
    tlsInspect?: pulumi.Input<boolean>;
}
