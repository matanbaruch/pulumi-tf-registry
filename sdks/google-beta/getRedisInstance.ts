// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRedisInstance(args: GetRedisInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetRedisInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-beta:index/getRedisInstance:getRedisInstance", {
        "id": args.id,
        "name": args.name,
        "project": args.project,
        "region": args.region,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRedisInstance.
 */
export interface GetRedisInstanceArgs {
    id?: string;
    name: string;
    project?: string;
    region?: string;
}

/**
 * A collection of values returned by getRedisInstance.
 */
export interface GetRedisInstanceResult {
    readonly alternativeLocationId: string;
    readonly authEnabled: boolean;
    readonly authString: string;
    readonly authorizedNetwork: string;
    readonly connectMode: string;
    readonly createTime: string;
    readonly currentLocationId: string;
    readonly customerManagedKey: string;
    readonly displayName: string;
    readonly effectiveLabels: {[key: string]: string};
    readonly host: string;
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly locationId: string;
    readonly maintenancePolicies: outputs.GetRedisInstanceMaintenancePolicy[];
    readonly maintenanceSchedules: outputs.GetRedisInstanceMaintenanceSchedule[];
    readonly maintenanceVersion: string;
    readonly memorySizeGb: number;
    readonly name: string;
    readonly nodes: outputs.GetRedisInstanceNode[];
    readonly persistenceConfigs: outputs.GetRedisInstancePersistenceConfig[];
    readonly persistenceIamIdentity: string;
    readonly port: number;
    readonly project?: string;
    readonly readEndpoint: string;
    readonly readEndpointPort: number;
    readonly readReplicasMode: string;
    readonly redisConfigs: {[key: string]: string};
    readonly redisVersion: string;
    readonly region?: string;
    readonly replicaCount: number;
    readonly reservedIpRange: string;
    readonly secondaryIpRange: string;
    readonly serverCaCerts: outputs.GetRedisInstanceServerCaCert[];
    readonly terraformLabels: {[key: string]: string};
    readonly tier: string;
    readonly transitEncryptionMode: string;
}
export function getRedisInstanceOutput(args: GetRedisInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRedisInstanceResult> {
    return pulumi.output(args).apply((a: any) => getRedisInstance(a, opts))
}

/**
 * A collection of arguments for invoking getRedisInstance.
 */
export interface GetRedisInstanceOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
