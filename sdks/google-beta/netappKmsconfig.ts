// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetappKmsconfig extends pulumi.CustomResource {
    /**
     * Get an existing NetappKmsconfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetappKmsconfigState, opts?: pulumi.CustomResourceOptions): NetappKmsconfig {
        return new NetappKmsconfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/netappKmsconfig:NetappKmsconfig';

    /**
     * Returns true if the given object is an instance of NetappKmsconfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetappKmsconfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetappKmsconfig.__pulumiType;
    }

    /**
     * Resource name of the KMS key to use. Only regional keys are supported. Format:
     * 'projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}'.
     */
    public readonly cryptoKeyName!: pulumi.Output<string>;
    /**
     * Description for the CMEK policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access. To make the
     * policy work, a CMEK policy check is required, which verifies key access.
     */
    public /*out*/ readonly instructions!: pulumi.Output<string>;
    /**
     * Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
     * field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the policy location. CMEK policies apply to the whole region.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the CMEK policy.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The Service account which needs to have access to the provided KMS key.
     */
    public /*out*/ readonly serviceAccount!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.NetappKmsconfigTimeouts | undefined>;

    /**
     * Create a NetappKmsconfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetappKmsconfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetappKmsconfigArgs | NetappKmsconfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetappKmsconfigState | undefined;
            resourceInputs["cryptoKeyName"] = state ? state.cryptoKeyName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["instructions"] = state ? state.instructions : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetappKmsconfigArgs | undefined;
            if ((!args || args.cryptoKeyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cryptoKeyName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["cryptoKeyName"] = args ? args.cryptoKeyName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["instructions"] = undefined /*out*/;
            resourceInputs["serviceAccount"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetappKmsconfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetappKmsconfig resources.
 */
export interface NetappKmsconfigState {
    /**
     * Resource name of the KMS key to use. Only regional keys are supported. Format:
     * 'projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}'.
     */
    cryptoKeyName?: pulumi.Input<string>;
    /**
     * Description for the CMEK policy.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Access to the key needs to be granted. The instructions contain gcloud commands to run to grant access. To make the
     * policy work, a CMEK policy check is required, which verifies key access.
     */
    instructions?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
     * field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the policy location. CMEK policies apply to the whole region.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the CMEK policy.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The Service account which needs to have access to the provided KMS key.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NetappKmsconfigTimeouts>;
}

/**
 * The set of arguments for constructing a NetappKmsconfig resource.
 */
export interface NetappKmsconfigArgs {
    /**
     * Resource name of the KMS key to use. Only regional keys are supported. Format:
     * 'projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{key}}'.
     */
    cryptoKeyName: pulumi.Input<string>;
    /**
     * Description for the CMEK policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
     * field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the policy location. CMEK policies apply to the whole region.
     */
    location: pulumi.Input<string>;
    /**
     * Name of the CMEK policy.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetappKmsconfigTimeouts>;
}
