// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageManagedFolder extends pulumi.CustomResource {
    /**
     * Get an existing StorageManagedFolder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageManagedFolderState, opts?: pulumi.CustomResourceOptions): StorageManagedFolder {
        return new StorageManagedFolder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/storageManagedFolder:StorageManagedFolder';

    /**
     * Returns true if the given object is an instance of StorageManagedFolder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageManagedFolder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageManagedFolder.__pulumiType;
    }

    /**
     * The name of the bucket that contains the managed folder.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * The timestamp at which this managed folder was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Allows the deletion of a managed folder even if contains objects. If a non-empty managed folder is deleted, any objects
     * within the folder will remain in a simulated folder with the same name.
     */
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * The metadata generation of the managed folder.
     */
    public /*out*/ readonly metageneration!: pulumi.Output<string>;
    /**
     * The name of the managed folder expressed as a path. Must include trailing '/'. For example, 'example_dir/example_dir2/'.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageManagedFolderTimeouts | undefined>;
    /**
     * The timestamp at which this managed folder was most recently updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a StorageManagedFolder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageManagedFolderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageManagedFolderArgs | StorageManagedFolderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageManagedFolderState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["metageneration"] = state ? state.metageneration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as StorageManagedFolderArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["metageneration"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageManagedFolder.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageManagedFolder resources.
 */
export interface StorageManagedFolderState {
    /**
     * The name of the bucket that contains the managed folder.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The timestamp at which this managed folder was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Allows the deletion of a managed folder even if contains objects. If a non-empty managed folder is deleted, any objects
     * within the folder will remain in a simulated folder with the same name.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The metadata generation of the managed folder.
     */
    metageneration?: pulumi.Input<string>;
    /**
     * The name of the managed folder expressed as a path. Must include trailing '/'. For example, 'example_dir/example_dir2/'.
     */
    name?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageManagedFolderTimeouts>;
    /**
     * The timestamp at which this managed folder was most recently updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageManagedFolder resource.
 */
export interface StorageManagedFolderArgs {
    /**
     * The name of the bucket that contains the managed folder.
     */
    bucket: pulumi.Input<string>;
    /**
     * Allows the deletion of a managed folder even if contains objects. If a non-empty managed folder is deleted, any objects
     * within the folder will remain in a simulated folder with the same name.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The name of the managed folder expressed as a path. Must include trailing '/'. For example, 'example_dir/example_dir2/'.
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageManagedFolderTimeouts>;
}
