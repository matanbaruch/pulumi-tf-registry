// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitoringSlo extends pulumi.CustomResource {
    /**
     * Get an existing MonitoringSlo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitoringSloState, opts?: pulumi.CustomResourceOptions): MonitoringSlo {
        return new MonitoringSlo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/monitoringSlo:MonitoringSlo';

    /**
     * Returns true if the given object is an instance of MonitoringSlo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitoringSlo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitoringSlo.__pulumiType;
    }

    /**
     * Basic Service-Level Indicator (SLI) on a well-known service type. Performance will be computed on the basis of
     * pre-defined metrics. SLIs are used to measure and calculate the quality of the Service's performance with respect to a
     * single aspect of service quality. Exactly one of the following must be set: 'basic_sli', 'request_based_sli',
     * 'windows_based_sli'
     */
    public readonly basicSli!: pulumi.Output<outputs.MonitoringSloBasicSli | undefined>;
    /**
     * A calendar period, semantically "since the start of the current <calendarPeriod>". Possible values: ["DAY", "WEEK",
     * "FORTNIGHT", "MONTH"]
     */
    public readonly calendarPeriod!: pulumi.Output<string | undefined>;
    /**
     * Name used for UI elements listing this SLO.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999
     */
    public readonly goal!: pulumi.Output<number>;
    /**
     * The full resource name for this service. The syntax is:
     * projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * A request-based SLI defines a SLI for which atomic units of service are counted directly. A SLI describes a good
     * service. It is used to measure and calculate the quality of the Service's performance with respect to a single aspect of
     * service quality. Exactly one of the following must be set: 'basic_sli', 'request_based_sli', 'windows_based_sli'
     */
    public readonly requestBasedSli!: pulumi.Output<outputs.MonitoringSloRequestBasedSli | undefined>;
    /**
     * A rolling time period, semantically "in the past X days". Must be between 1 to 30 days, inclusive.
     */
    public readonly rollingPeriodDays!: pulumi.Output<number | undefined>;
    /**
     * ID of the service to which this SLO belongs.
     */
    public readonly service!: pulumi.Output<string>;
    /**
     * The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     */
    public readonly sloId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MonitoringSloTimeouts | undefined>;
    /**
     * This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
     * entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
     */
    public readonly userLabels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A windows-based SLI defines the criteria for time windows. good_service is defined based off the count of these time
     * windows for which the provided service was of good quality. A SLI describes a good service. It is used to measure and
     * calculate the quality of the Service's performance with respect to a single aspect of service quality. Exactly one of
     * the following must be set: 'basic_sli', 'request_based_sli', 'windows_based_sli'
     */
    public readonly windowsBasedSli!: pulumi.Output<outputs.MonitoringSloWindowsBasedSli | undefined>;

    /**
     * Create a MonitoringSlo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitoringSloArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitoringSloArgs | MonitoringSloState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitoringSloState | undefined;
            resourceInputs["basicSli"] = state ? state.basicSli : undefined;
            resourceInputs["calendarPeriod"] = state ? state.calendarPeriod : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["goal"] = state ? state.goal : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["requestBasedSli"] = state ? state.requestBasedSli : undefined;
            resourceInputs["rollingPeriodDays"] = state ? state.rollingPeriodDays : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["sloId"] = state ? state.sloId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userLabels"] = state ? state.userLabels : undefined;
            resourceInputs["windowsBasedSli"] = state ? state.windowsBasedSli : undefined;
        } else {
            const args = argsOrState as MonitoringSloArgs | undefined;
            if ((!args || args.goal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'goal'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["basicSli"] = args ? args.basicSli : undefined;
            resourceInputs["calendarPeriod"] = args ? args.calendarPeriod : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["goal"] = args ? args.goal : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestBasedSli"] = args ? args.requestBasedSli : undefined;
            resourceInputs["rollingPeriodDays"] = args ? args.rollingPeriodDays : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["sloId"] = args ? args.sloId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userLabels"] = args ? args.userLabels : undefined;
            resourceInputs["windowsBasedSli"] = args ? args.windowsBasedSli : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitoringSlo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitoringSlo resources.
 */
export interface MonitoringSloState {
    /**
     * Basic Service-Level Indicator (SLI) on a well-known service type. Performance will be computed on the basis of
     * pre-defined metrics. SLIs are used to measure and calculate the quality of the Service's performance with respect to a
     * single aspect of service quality. Exactly one of the following must be set: 'basic_sli', 'request_based_sli',
     * 'windows_based_sli'
     */
    basicSli?: pulumi.Input<inputs.MonitoringSloBasicSli>;
    /**
     * A calendar period, semantically "since the start of the current <calendarPeriod>". Possible values: ["DAY", "WEEK",
     * "FORTNIGHT", "MONTH"]
     */
    calendarPeriod?: pulumi.Input<string>;
    /**
     * Name used for UI elements listing this SLO.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999
     */
    goal?: pulumi.Input<number>;
    /**
     * The full resource name for this service. The syntax is:
     * projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A request-based SLI defines a SLI for which atomic units of service are counted directly. A SLI describes a good
     * service. It is used to measure and calculate the quality of the Service's performance with respect to a single aspect of
     * service quality. Exactly one of the following must be set: 'basic_sli', 'request_based_sli', 'windows_based_sli'
     */
    requestBasedSli?: pulumi.Input<inputs.MonitoringSloRequestBasedSli>;
    /**
     * A rolling time period, semantically "in the past X days". Must be between 1 to 30 days, inclusive.
     */
    rollingPeriodDays?: pulumi.Input<number>;
    /**
     * ID of the service to which this SLO belongs.
     */
    service?: pulumi.Input<string>;
    /**
     * The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     */
    sloId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitoringSloTimeouts>;
    /**
     * This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
     * entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
     */
    userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A windows-based SLI defines the criteria for time windows. good_service is defined based off the count of these time
     * windows for which the provided service was of good quality. A SLI describes a good service. It is used to measure and
     * calculate the quality of the Service's performance with respect to a single aspect of service quality. Exactly one of
     * the following must be set: 'basic_sli', 'request_based_sli', 'windows_based_sli'
     */
    windowsBasedSli?: pulumi.Input<inputs.MonitoringSloWindowsBasedSli>;
}

/**
 * The set of arguments for constructing a MonitoringSlo resource.
 */
export interface MonitoringSloArgs {
    /**
     * Basic Service-Level Indicator (SLI) on a well-known service type. Performance will be computed on the basis of
     * pre-defined metrics. SLIs are used to measure and calculate the quality of the Service's performance with respect to a
     * single aspect of service quality. Exactly one of the following must be set: 'basic_sli', 'request_based_sli',
     * 'windows_based_sli'
     */
    basicSli?: pulumi.Input<inputs.MonitoringSloBasicSli>;
    /**
     * A calendar period, semantically "since the start of the current <calendarPeriod>". Possible values: ["DAY", "WEEK",
     * "FORTNIGHT", "MONTH"]
     */
    calendarPeriod?: pulumi.Input<string>;
    /**
     * Name used for UI elements listing this SLO.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999
     */
    goal: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * A request-based SLI defines a SLI for which atomic units of service are counted directly. A SLI describes a good
     * service. It is used to measure and calculate the quality of the Service's performance with respect to a single aspect of
     * service quality. Exactly one of the following must be set: 'basic_sli', 'request_based_sli', 'windows_based_sli'
     */
    requestBasedSli?: pulumi.Input<inputs.MonitoringSloRequestBasedSli>;
    /**
     * A rolling time period, semantically "in the past X days". Must be between 1 to 30 days, inclusive.
     */
    rollingPeriodDays?: pulumi.Input<number>;
    /**
     * ID of the service to which this SLO belongs.
     */
    service: pulumi.Input<string>;
    /**
     * The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
     */
    sloId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitoringSloTimeouts>;
    /**
     * This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
     * entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
     */
    userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A windows-based SLI defines the criteria for time windows. good_service is defined based off the count of these time
     * windows for which the provided service was of good quality. A SLI describes a good service. It is used to measure and
     * calculate the quality of the Service's performance with respect to a single aspect of service quality. Exactly one of
     * the following must be set: 'basic_sli', 'request_based_sli', 'windows_based_sli'
     */
    windowsBasedSli?: pulumi.Input<inputs.MonitoringSloWindowsBasedSli>;
}
