// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataprocMetastoreService extends pulumi.CustomResource {
    /**
     * Get an existing DataprocMetastoreService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataprocMetastoreServiceState, opts?: pulumi.CustomResourceOptions): DataprocMetastoreService {
        return new DataprocMetastoreService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/dataprocMetastoreService:DataprocMetastoreService';

    /**
     * Returns true if the given object is an instance of DataprocMetastoreService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataprocMetastoreService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataprocMetastoreService.__pulumiType;
    }

    /**
     * A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
     */
    public /*out*/ readonly artifactGcsUri!: pulumi.Output<string>;
    /**
     * The database type that the Metastore service stores its data. Default value: "MYSQL" Possible values: ["MYSQL",
     * "SPANNER"]
     */
    public readonly databaseType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Information used to configure the Dataproc Metastore service to encrypt customer data at rest.
     */
    public readonly encryptionConfig!: pulumi.Output<outputs.DataprocMetastoreServiceEncryptionConfig | undefined>;
    /**
     * The URI of the endpoint used to access the metastore service.
     */
    public /*out*/ readonly endpointUri!: pulumi.Output<string>;
    /**
     * Configuration information specific to running Hive metastore software as the metastore service.
     */
    public readonly hiveMetastoreConfig!: pulumi.Output<outputs.DataprocMetastoreServiceHiveMetastoreConfig | undefined>;
    /**
     * User-defined labels for the metastore service. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location where the metastore service should reside. The default value is 'global'.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The one hour maintenance window of the metastore service. This specifies when the service can be restarted for
     * maintenance purposes in UTC time. Maintenance window is not needed for services with the 'SPANNER' database type.
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.DataprocMetastoreServiceMaintenanceWindow | undefined>;
    /**
     * The setting that defines how metastore metadata should be integrated with external services and systems.
     */
    public readonly metadataIntegration!: pulumi.Output<outputs.DataprocMetastoreServiceMetadataIntegration | undefined>;
    /**
     * The relative resource name of the metastore service.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following
     * form: "projects/{projectNumber}/global/networks/{network_id}".
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * The configuration specifying the network settings for the Dataproc Metastore service.
     */
    public readonly networkConfig!: pulumi.Output<outputs.DataprocMetastoreServiceNetworkConfig | undefined>;
    /**
     * The TCP port at which the metastore service is reached. Default: 9083.
     */
    public readonly port!: pulumi.Output<number>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The release channel of the service. If unspecified, defaults to 'STABLE'. Default value: "STABLE" Possible values:
     * ["CANARY", "STABLE"]
     */
    public readonly releaseChannel!: pulumi.Output<string | undefined>;
    /**
     * Represents the scaling configuration of a metastore service.
     */
    public readonly scalingConfig!: pulumi.Output<outputs.DataprocMetastoreServiceScalingConfig | undefined>;
    /**
     * The configuration of scheduled backup for the metastore service.
     */
    public readonly scheduledBackup!: pulumi.Output<outputs.DataprocMetastoreServiceScheduledBackup | undefined>;
    /**
     * The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and
     * hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 63 characters.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * The current state of the metastore service.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Additional information about the current state of the metastore service, if available.
     */
    public /*out*/ readonly stateMessage!: pulumi.Output<string>;
    /**
     * The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
     */
    public readonly telemetryConfig!: pulumi.Output<outputs.DataprocMetastoreServiceTelemetryConfig | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The tier of the service. Possible values: ["DEVELOPER", "ENTERPRISE"]
     */
    public readonly tier!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DataprocMetastoreServiceTimeouts | undefined>;
    /**
     * The globally unique resource identifier of the metastore service.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;

    /**
     * Create a DataprocMetastoreService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataprocMetastoreServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataprocMetastoreServiceArgs | DataprocMetastoreServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataprocMetastoreServiceState | undefined;
            resourceInputs["artifactGcsUri"] = state ? state.artifactGcsUri : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["encryptionConfig"] = state ? state.encryptionConfig : undefined;
            resourceInputs["endpointUri"] = state ? state.endpointUri : undefined;
            resourceInputs["hiveMetastoreConfig"] = state ? state.hiveMetastoreConfig : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["metadataIntegration"] = state ? state.metadataIntegration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["networkConfig"] = state ? state.networkConfig : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["releaseChannel"] = state ? state.releaseChannel : undefined;
            resourceInputs["scalingConfig"] = state ? state.scalingConfig : undefined;
            resourceInputs["scheduledBackup"] = state ? state.scheduledBackup : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateMessage"] = state ? state.stateMessage : undefined;
            resourceInputs["telemetryConfig"] = state ? state.telemetryConfig : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        } else {
            const args = argsOrState as DataprocMetastoreServiceArgs | undefined;
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["databaseType"] = args ? args.databaseType : undefined;
            resourceInputs["encryptionConfig"] = args ? args.encryptionConfig : undefined;
            resourceInputs["hiveMetastoreConfig"] = args ? args.hiveMetastoreConfig : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["metadataIntegration"] = args ? args.metadataIntegration : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["networkConfig"] = args ? args.networkConfig : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["releaseChannel"] = args ? args.releaseChannel : undefined;
            resourceInputs["scalingConfig"] = args ? args.scalingConfig : undefined;
            resourceInputs["scheduledBackup"] = args ? args.scheduledBackup : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["telemetryConfig"] = args ? args.telemetryConfig : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["artifactGcsUri"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["endpointUri"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateMessage"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataprocMetastoreService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataprocMetastoreService resources.
 */
export interface DataprocMetastoreServiceState {
    /**
     * A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
     */
    artifactGcsUri?: pulumi.Input<string>;
    /**
     * The database type that the Metastore service stores its data. Default value: "MYSQL" Possible values: ["MYSQL",
     * "SPANNER"]
     */
    databaseType?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Information used to configure the Dataproc Metastore service to encrypt customer data at rest.
     */
    encryptionConfig?: pulumi.Input<inputs.DataprocMetastoreServiceEncryptionConfig>;
    /**
     * The URI of the endpoint used to access the metastore service.
     */
    endpointUri?: pulumi.Input<string>;
    /**
     * Configuration information specific to running Hive metastore software as the metastore service.
     */
    hiveMetastoreConfig?: pulumi.Input<inputs.DataprocMetastoreServiceHiveMetastoreConfig>;
    /**
     * User-defined labels for the metastore service. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location where the metastore service should reside. The default value is 'global'.
     */
    location?: pulumi.Input<string>;
    /**
     * The one hour maintenance window of the metastore service. This specifies when the service can be restarted for
     * maintenance purposes in UTC time. Maintenance window is not needed for services with the 'SPANNER' database type.
     */
    maintenanceWindow?: pulumi.Input<inputs.DataprocMetastoreServiceMaintenanceWindow>;
    /**
     * The setting that defines how metastore metadata should be integrated with external services and systems.
     */
    metadataIntegration?: pulumi.Input<inputs.DataprocMetastoreServiceMetadataIntegration>;
    /**
     * The relative resource name of the metastore service.
     */
    name?: pulumi.Input<string>;
    /**
     * The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following
     * form: "projects/{projectNumber}/global/networks/{network_id}".
     */
    network?: pulumi.Input<string>;
    /**
     * The configuration specifying the network settings for the Dataproc Metastore service.
     */
    networkConfig?: pulumi.Input<inputs.DataprocMetastoreServiceNetworkConfig>;
    /**
     * The TCP port at which the metastore service is reached. Default: 9083.
     */
    port?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * The release channel of the service. If unspecified, defaults to 'STABLE'. Default value: "STABLE" Possible values:
     * ["CANARY", "STABLE"]
     */
    releaseChannel?: pulumi.Input<string>;
    /**
     * Represents the scaling configuration of a metastore service.
     */
    scalingConfig?: pulumi.Input<inputs.DataprocMetastoreServiceScalingConfig>;
    /**
     * The configuration of scheduled backup for the metastore service.
     */
    scheduledBackup?: pulumi.Input<inputs.DataprocMetastoreServiceScheduledBackup>;
    /**
     * The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and
     * hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 63 characters.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The current state of the metastore service.
     */
    state?: pulumi.Input<string>;
    /**
     * Additional information about the current state of the metastore service, if available.
     */
    stateMessage?: pulumi.Input<string>;
    /**
     * The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
     */
    telemetryConfig?: pulumi.Input<inputs.DataprocMetastoreServiceTelemetryConfig>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The tier of the service. Possible values: ["DEVELOPER", "ENTERPRISE"]
     */
    tier?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataprocMetastoreServiceTimeouts>;
    /**
     * The globally unique resource identifier of the metastore service.
     */
    uid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataprocMetastoreService resource.
 */
export interface DataprocMetastoreServiceArgs {
    /**
     * The database type that the Metastore service stores its data. Default value: "MYSQL" Possible values: ["MYSQL",
     * "SPANNER"]
     */
    databaseType?: pulumi.Input<string>;
    /**
     * Information used to configure the Dataproc Metastore service to encrypt customer data at rest.
     */
    encryptionConfig?: pulumi.Input<inputs.DataprocMetastoreServiceEncryptionConfig>;
    /**
     * Configuration information specific to running Hive metastore software as the metastore service.
     */
    hiveMetastoreConfig?: pulumi.Input<inputs.DataprocMetastoreServiceHiveMetastoreConfig>;
    /**
     * User-defined labels for the metastore service. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location where the metastore service should reside. The default value is 'global'.
     */
    location?: pulumi.Input<string>;
    /**
     * The one hour maintenance window of the metastore service. This specifies when the service can be restarted for
     * maintenance purposes in UTC time. Maintenance window is not needed for services with the 'SPANNER' database type.
     */
    maintenanceWindow?: pulumi.Input<inputs.DataprocMetastoreServiceMaintenanceWindow>;
    /**
     * The setting that defines how metastore metadata should be integrated with external services and systems.
     */
    metadataIntegration?: pulumi.Input<inputs.DataprocMetastoreServiceMetadataIntegration>;
    /**
     * The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following
     * form: "projects/{projectNumber}/global/networks/{network_id}".
     */
    network?: pulumi.Input<string>;
    /**
     * The configuration specifying the network settings for the Dataproc Metastore service.
     */
    networkConfig?: pulumi.Input<inputs.DataprocMetastoreServiceNetworkConfig>;
    /**
     * The TCP port at which the metastore service is reached. Default: 9083.
     */
    port?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * The release channel of the service. If unspecified, defaults to 'STABLE'. Default value: "STABLE" Possible values:
     * ["CANARY", "STABLE"]
     */
    releaseChannel?: pulumi.Input<string>;
    /**
     * Represents the scaling configuration of a metastore service.
     */
    scalingConfig?: pulumi.Input<inputs.DataprocMetastoreServiceScalingConfig>;
    /**
     * The configuration of scheduled backup for the metastore service.
     */
    scheduledBackup?: pulumi.Input<inputs.DataprocMetastoreServiceScheduledBackup>;
    /**
     * The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and
     * hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 63 characters.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
     */
    telemetryConfig?: pulumi.Input<inputs.DataprocMetastoreServiceTelemetryConfig>;
    /**
     * The tier of the service. Possible values: ["DEVELOPER", "ENTERPRISE"]
     */
    tier?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataprocMetastoreServiceTimeouts>;
}
