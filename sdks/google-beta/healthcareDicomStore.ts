// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HealthcareDicomStore extends pulumi.CustomResource {
    /**
     * Get an existing HealthcareDicomStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthcareDicomStoreState, opts?: pulumi.CustomResourceOptions): HealthcareDicomStore {
        return new HealthcareDicomStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/healthcareDicomStore:HealthcareDicomStore';

    /**
     * Returns true if the given object is an instance of HealthcareDicomStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthcareDicomStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthcareDicomStore.__pulumiType;
    }

    /**
     * Identifies the dataset addressed by this request. Must be in the format
     * 'projects/{project}/locations/{location}/datasets/{dataset}'
     */
    public readonly dataset!: pulumi.Output<string>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62} Label values are optional, must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store. An object containing a list of
     * "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name for the DicomStore. ** Changing this property may recreate the Dicom store (removing all data) **
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A nested object resource
     */
    public readonly notificationConfig!: pulumi.Output<outputs.HealthcareDicomStoreNotificationConfig | undefined>;
    /**
     * The fully qualified name of this dataset
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * To enable streaming to BigQuery, configure the streamConfigs object in your DICOM store. streamConfigs is an array, so
     * you can specify multiple BigQuery destinations. You can stream metadata from a single DICOM store to up to five BigQuery
     * tables in a BigQuery dataset.
     */
    public readonly streamConfigs!: pulumi.Output<outputs.HealthcareDicomStoreStreamConfig[] | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.HealthcareDicomStoreTimeouts | undefined>;

    /**
     * Create a HealthcareDicomStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthcareDicomStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthcareDicomStoreArgs | HealthcareDicomStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthcareDicomStoreState | undefined;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationConfig"] = state ? state.notificationConfig : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["streamConfigs"] = state ? state.streamConfigs : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as HealthcareDicomStoreArgs | undefined;
            if ((!args || args.dataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationConfig"] = args ? args.notificationConfig : undefined;
            resourceInputs["streamConfigs"] = args ? args.streamConfigs : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthcareDicomStore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthcareDicomStore resources.
 */
export interface HealthcareDicomStoreState {
    /**
     * Identifies the dataset addressed by this request. Must be in the format
     * 'projects/{project}/locations/{location}/datasets/{dataset}'
     */
    dataset?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62} Label values are optional, must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store. An object containing a list of
     * "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name for the DicomStore. ** Changing this property may recreate the Dicom store (removing all data) **
     */
    name?: pulumi.Input<string>;
    /**
     * A nested object resource
     */
    notificationConfig?: pulumi.Input<inputs.HealthcareDicomStoreNotificationConfig>;
    /**
     * The fully qualified name of this dataset
     */
    selfLink?: pulumi.Input<string>;
    /**
     * To enable streaming to BigQuery, configure the streamConfigs object in your DICOM store. streamConfigs is an array, so
     * you can specify multiple BigQuery destinations. You can stream metadata from a single DICOM store to up to five BigQuery
     * tables in a BigQuery dataset.
     */
    streamConfigs?: pulumi.Input<pulumi.Input<inputs.HealthcareDicomStoreStreamConfig>[]>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HealthcareDicomStoreTimeouts>;
}

/**
 * The set of arguments for constructing a HealthcareDicomStore resource.
 */
export interface HealthcareDicomStoreArgs {
    /**
     * Identifies the dataset addressed by this request. Must be in the format
     * 'projects/{project}/locations/{location}/datasets/{dataset}'
     */
    dataset: pulumi.Input<string>;
    /**
     * User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62} Label values are optional, must be between 1 and 63 characters long, have a
     * UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression:
     * [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store. An object containing a list of
     * "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name for the DicomStore. ** Changing this property may recreate the Dicom store (removing all data) **
     */
    name?: pulumi.Input<string>;
    /**
     * A nested object resource
     */
    notificationConfig?: pulumi.Input<inputs.HealthcareDicomStoreNotificationConfig>;
    /**
     * To enable streaming to BigQuery, configure the streamConfigs object in your DICOM store. streamConfigs is an array, so
     * you can specify multiple BigQuery destinations. You can stream metadata from a single DICOM store to up to five BigQuery
     * tables in a BigQuery dataset.
     */
    streamConfigs?: pulumi.Input<pulumi.Input<inputs.HealthcareDicomStoreStreamConfig>[]>;
    timeouts?: pulumi.Input<inputs.HealthcareDicomStoreTimeouts>;
}
