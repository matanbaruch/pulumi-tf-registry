// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TpuV2Vm extends pulumi.CustomResource {
    /**
     * Get an existing TpuV2Vm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TpuV2VmState, opts?: pulumi.CustomResourceOptions): TpuV2Vm {
        return new TpuV2Vm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/tpuV2Vm:TpuV2Vm';

    /**
     * Returns true if the given object is an instance of TpuV2Vm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TpuV2Vm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TpuV2Vm.__pulumiType;
    }

    /**
     * The AccleratorConfig for the TPU Node. 'accelerator_config' cannot be used at the same time as 'accelerator_type'. If
     * neither is specified, 'accelerator_type' defaults to 'v2-8'.
     */
    public readonly acceleratorConfig!: pulumi.Output<outputs.TpuV2VmAcceleratorConfig | undefined>;
    /**
     * TPU accelerator type for the TPU. 'accelerator_type' cannot be used at the same time as 'accelerator_config'. If neither
     * is specified, 'accelerator_type' defaults to 'v2-8'.
     */
    public readonly acceleratorType!: pulumi.Output<string>;
    /**
     * The API version that created this Node.
     */
    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute
     * Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP
     * address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block
     * conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network
     * that is using that CIDR block.
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * The additional data disks for the Node.
     */
    public readonly dataDisks!: pulumi.Output<outputs.TpuV2VmDataDisk[] | undefined>;
    /**
     * Text description of the TPU.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The health status of the TPU node.
     */
    public /*out*/ readonly health!: pulumi.Output<string>;
    /**
     * If this field is populated, it contains a description of why the TPU Node is unhealthy.
     */
    public /*out*/ readonly healthDescription!: pulumi.Output<string>;
    /**
     * Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Whether the Node belongs to a Multislice group.
     */
    public /*out*/ readonly multisliceNode!: pulumi.Output<boolean>;
    /**
     * The immutable name of the TPU.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network configurations for the TPU node.
     */
    public readonly networkConfig!: pulumi.Output<outputs.TpuV2VmNetworkConfig | undefined>;
    /**
     * The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the
     * node reach out to the 0th entry in this map first.
     */
    public /*out*/ readonly networkEndpoints!: pulumi.Output<outputs.TpuV2VmNetworkEndpoint[]>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The qualified name of the QueuedResource that requested this Node.
     */
    public /*out*/ readonly queuedResource!: pulumi.Output<string>;
    /**
     * Runtime version for the TPU.
     */
    public readonly runtimeVersion!: pulumi.Output<string>;
    /**
     * The scheduling options for this node.
     */
    public readonly schedulingConfig!: pulumi.Output<outputs.TpuV2VmSchedulingConfig | undefined>;
    /**
     * The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute
     * service account will be used.
     */
    public readonly serviceAccount!: pulumi.Output<outputs.TpuV2VmServiceAccount | undefined>;
    /**
     * Shielded Instance options.
     */
    public readonly shieldedInstanceConfig!: pulumi.Output<outputs.TpuV2VmShieldedInstanceConfig | undefined>;
    /**
     * The current state for the TPU Node.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The Symptoms that have occurred to the TPU Node.
     */
    public /*out*/ readonly symptoms!: pulumi.Output<outputs.TpuV2VmSymptom[]>;
    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.TpuV2VmTimeouts | undefined>;
    /**
     * The GCP location for the TPU. If it is not provided, the provider zone is used.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a TpuV2Vm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TpuV2VmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TpuV2VmArgs | TpuV2VmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TpuV2VmState | undefined;
            resourceInputs["acceleratorConfig"] = state ? state.acceleratorConfig : undefined;
            resourceInputs["acceleratorType"] = state ? state.acceleratorType : undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["dataDisks"] = state ? state.dataDisks : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["health"] = state ? state.health : undefined;
            resourceInputs["healthDescription"] = state ? state.healthDescription : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["multisliceNode"] = state ? state.multisliceNode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConfig"] = state ? state.networkConfig : undefined;
            resourceInputs["networkEndpoints"] = state ? state.networkEndpoints : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["queuedResource"] = state ? state.queuedResource : undefined;
            resourceInputs["runtimeVersion"] = state ? state.runtimeVersion : undefined;
            resourceInputs["schedulingConfig"] = state ? state.schedulingConfig : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["shieldedInstanceConfig"] = state ? state.shieldedInstanceConfig : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["symptoms"] = state ? state.symptoms : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as TpuV2VmArgs | undefined;
            if ((!args || args.runtimeVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeVersion'");
            }
            resourceInputs["acceleratorConfig"] = args ? args.acceleratorConfig : undefined;
            resourceInputs["acceleratorType"] = args ? args.acceleratorType : undefined;
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["dataDisks"] = args ? args.dataDisks : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConfig"] = args ? args.networkConfig : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["runtimeVersion"] = args ? args.runtimeVersion : undefined;
            resourceInputs["schedulingConfig"] = args ? args.schedulingConfig : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["shieldedInstanceConfig"] = args ? args.shieldedInstanceConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["healthDescription"] = undefined /*out*/;
            resourceInputs["multisliceNode"] = undefined /*out*/;
            resourceInputs["networkEndpoints"] = undefined /*out*/;
            resourceInputs["queuedResource"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["symptoms"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TpuV2Vm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TpuV2Vm resources.
 */
export interface TpuV2VmState {
    /**
     * The AccleratorConfig for the TPU Node. 'accelerator_config' cannot be used at the same time as 'accelerator_type'. If
     * neither is specified, 'accelerator_type' defaults to 'v2-8'.
     */
    acceleratorConfig?: pulumi.Input<inputs.TpuV2VmAcceleratorConfig>;
    /**
     * TPU accelerator type for the TPU. 'accelerator_type' cannot be used at the same time as 'accelerator_config'. If neither
     * is specified, 'accelerator_type' defaults to 'v2-8'.
     */
    acceleratorType?: pulumi.Input<string>;
    /**
     * The API version that created this Node.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute
     * Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP
     * address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block
     * conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network
     * that is using that CIDR block.
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * The additional data disks for the Node.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.TpuV2VmDataDisk>[]>;
    /**
     * Text description of the TPU.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The health status of the TPU node.
     */
    health?: pulumi.Input<string>;
    /**
     * If this field is populated, it contains a description of why the TPU Node is unhealthy.
     */
    healthDescription?: pulumi.Input<string>;
    /**
     * Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether the Node belongs to a Multislice group.
     */
    multisliceNode?: pulumi.Input<boolean>;
    /**
     * The immutable name of the TPU.
     */
    name?: pulumi.Input<string>;
    /**
     * Network configurations for the TPU node.
     */
    networkConfig?: pulumi.Input<inputs.TpuV2VmNetworkConfig>;
    /**
     * The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the
     * node reach out to the 0th entry in this map first.
     */
    networkEndpoints?: pulumi.Input<pulumi.Input<inputs.TpuV2VmNetworkEndpoint>[]>;
    project?: pulumi.Input<string>;
    /**
     * The qualified name of the QueuedResource that requested this Node.
     */
    queuedResource?: pulumi.Input<string>;
    /**
     * Runtime version for the TPU.
     */
    runtimeVersion?: pulumi.Input<string>;
    /**
     * The scheduling options for this node.
     */
    schedulingConfig?: pulumi.Input<inputs.TpuV2VmSchedulingConfig>;
    /**
     * The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute
     * service account will be used.
     */
    serviceAccount?: pulumi.Input<inputs.TpuV2VmServiceAccount>;
    /**
     * Shielded Instance options.
     */
    shieldedInstanceConfig?: pulumi.Input<inputs.TpuV2VmShieldedInstanceConfig>;
    /**
     * The current state for the TPU Node.
     */
    state?: pulumi.Input<string>;
    /**
     * The Symptoms that have occurred to the TPU Node.
     */
    symptoms?: pulumi.Input<pulumi.Input<inputs.TpuV2VmSymptom>[]>;
    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.TpuV2VmTimeouts>;
    /**
     * The GCP location for the TPU. If it is not provided, the provider zone is used.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TpuV2Vm resource.
 */
export interface TpuV2VmArgs {
    /**
     * The AccleratorConfig for the TPU Node. 'accelerator_config' cannot be used at the same time as 'accelerator_type'. If
     * neither is specified, 'accelerator_type' defaults to 'v2-8'.
     */
    acceleratorConfig?: pulumi.Input<inputs.TpuV2VmAcceleratorConfig>;
    /**
     * TPU accelerator type for the TPU. 'accelerator_type' cannot be used at the same time as 'accelerator_config'. If neither
     * is specified, 'accelerator_type' defaults to 'v2-8'.
     */
    acceleratorType?: pulumi.Input<string>;
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute
     * Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP
     * address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block
     * conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network
     * that is using that CIDR block.
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * The additional data disks for the Node.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.TpuV2VmDataDisk>[]>;
    /**
     * Text description of the TPU.
     */
    description?: pulumi.Input<string>;
    /**
     * Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The immutable name of the TPU.
     */
    name?: pulumi.Input<string>;
    /**
     * Network configurations for the TPU node.
     */
    networkConfig?: pulumi.Input<inputs.TpuV2VmNetworkConfig>;
    project?: pulumi.Input<string>;
    /**
     * Runtime version for the TPU.
     */
    runtimeVersion: pulumi.Input<string>;
    /**
     * The scheduling options for this node.
     */
    schedulingConfig?: pulumi.Input<inputs.TpuV2VmSchedulingConfig>;
    /**
     * The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute
     * service account will be used.
     */
    serviceAccount?: pulumi.Input<inputs.TpuV2VmServiceAccount>;
    /**
     * Shielded Instance options.
     */
    shieldedInstanceConfig?: pulumi.Input<inputs.TpuV2VmShieldedInstanceConfig>;
    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.TpuV2VmTimeouts>;
    /**
     * The GCP location for the TPU. If it is not provided, the provider zone is used.
     */
    zone?: pulumi.Input<string>;
}
