// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecureSourceManagerRepository extends pulumi.CustomResource {
    /**
     * Get an existing SecureSourceManagerRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecureSourceManagerRepositoryState, opts?: pulumi.CustomResourceOptions): SecureSourceManagerRepository {
        return new SecureSourceManagerRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/secureSourceManagerRepository:SecureSourceManagerRepository';

    /**
     * Returns true if the given object is an instance of SecureSourceManagerRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecureSourceManagerRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecureSourceManagerRepository.__pulumiType;
    }

    /**
     * Time the repository was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the repository, which cannot exceed 500 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Initial configurations for the repository.
     */
    public readonly initialConfig!: pulumi.Output<outputs.SecureSourceManagerRepositoryInitialConfig | undefined>;
    /**
     * The name of the instance in which the repository is hosted.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * The location for the Repository.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name for the Repository.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The ID for the Repository.
     */
    public readonly repositoryId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SecureSourceManagerRepositoryTimeouts | undefined>;
    /**
     * Unique identifier of the repository.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Time the repository was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * URIs for the repository.
     */
    public /*out*/ readonly uris!: pulumi.Output<outputs.SecureSourceManagerRepositoryUri[]>;

    /**
     * Create a SecureSourceManagerRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecureSourceManagerRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecureSourceManagerRepositoryArgs | SecureSourceManagerRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecureSourceManagerRepositoryState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["initialConfig"] = state ? state.initialConfig : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["uris"] = state ? state.uris : undefined;
        } else {
            const args = argsOrState as SecureSourceManagerRepositoryArgs | undefined;
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.repositoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["initialConfig"] = args ? args.initialConfig : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["repositoryId"] = args ? args.repositoryId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["uris"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecureSourceManagerRepository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecureSourceManagerRepository resources.
 */
export interface SecureSourceManagerRepositoryState {
    /**
     * Time the repository was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the repository, which cannot exceed 500 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Initial configurations for the repository.
     */
    initialConfig?: pulumi.Input<inputs.SecureSourceManagerRepositoryInitialConfig>;
    /**
     * The name of the instance in which the repository is hosted.
     */
    instance?: pulumi.Input<string>;
    /**
     * The location for the Repository.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name for the Repository.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The ID for the Repository.
     */
    repositoryId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecureSourceManagerRepositoryTimeouts>;
    /**
     * Unique identifier of the repository.
     */
    uid?: pulumi.Input<string>;
    /**
     * Time the repository was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * URIs for the repository.
     */
    uris?: pulumi.Input<pulumi.Input<inputs.SecureSourceManagerRepositoryUri>[]>;
}

/**
 * The set of arguments for constructing a SecureSourceManagerRepository resource.
 */
export interface SecureSourceManagerRepositoryArgs {
    /**
     * Description of the repository, which cannot exceed 500 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Initial configurations for the repository.
     */
    initialConfig?: pulumi.Input<inputs.SecureSourceManagerRepositoryInitialConfig>;
    /**
     * The name of the instance in which the repository is hosted.
     */
    instance: pulumi.Input<string>;
    /**
     * The location for the Repository.
     */
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The ID for the Repository.
     */
    repositoryId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecureSourceManagerRepositoryTimeouts>;
}
