// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AccessContextManagerServicePerimeterDryRunResource extends pulumi.CustomResource {
    /**
     * Get an existing AccessContextManagerServicePerimeterDryRunResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessContextManagerServicePerimeterDryRunResourceState, opts?: pulumi.CustomResourceOptions): AccessContextManagerServicePerimeterDryRunResource {
        return new AccessContextManagerServicePerimeterDryRunResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/accessContextManagerServicePerimeterDryRunResource:AccessContextManagerServicePerimeterDryRunResource';

    /**
     * Returns true if the given object is an instance of AccessContextManagerServicePerimeterDryRunResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessContextManagerServicePerimeterDryRunResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessContextManagerServicePerimeterDryRunResource.__pulumiType;
    }

    /**
     * The name of the Service Perimeter to add this resource to.
     */
    public readonly perimeterName!: pulumi.Output<string>;
    /**
     * A GCP resource that is inside of the service perimeter. Currently only projects are allowed. Format:
     * projects/{project_number}
     */
    public readonly resource!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.AccessContextManagerServicePerimeterDryRunResourceTimeouts | undefined>;

    /**
     * Create a AccessContextManagerServicePerimeterDryRunResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessContextManagerServicePerimeterDryRunResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessContextManagerServicePerimeterDryRunResourceArgs | AccessContextManagerServicePerimeterDryRunResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessContextManagerServicePerimeterDryRunResourceState | undefined;
            resourceInputs["perimeterName"] = state ? state.perimeterName : undefined;
            resourceInputs["resource"] = state ? state.resource : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AccessContextManagerServicePerimeterDryRunResourceArgs | undefined;
            if ((!args || args.perimeterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'perimeterName'");
            }
            if ((!args || args.resource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resource'");
            }
            resourceInputs["perimeterName"] = args ? args.perimeterName : undefined;
            resourceInputs["resource"] = args ? args.resource : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessContextManagerServicePerimeterDryRunResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AccessContextManagerServicePerimeterDryRunResource resources.
 */
export interface AccessContextManagerServicePerimeterDryRunResourceState {
    /**
     * The name of the Service Perimeter to add this resource to.
     */
    perimeterName?: pulumi.Input<string>;
    /**
     * A GCP resource that is inside of the service perimeter. Currently only projects are allowed. Format:
     * projects/{project_number}
     */
    resource?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AccessContextManagerServicePerimeterDryRunResourceTimeouts>;
}

/**
 * The set of arguments for constructing a AccessContextManagerServicePerimeterDryRunResource resource.
 */
export interface AccessContextManagerServicePerimeterDryRunResourceArgs {
    /**
     * The name of the Service Perimeter to add this resource to.
     */
    perimeterName: pulumi.Input<string>;
    /**
     * A GCP resource that is inside of the service perimeter. Currently only projects are allowed. Format:
     * projects/{project_number}
     */
    resource: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AccessContextManagerServicePerimeterDryRunResourceTimeouts>;
}
