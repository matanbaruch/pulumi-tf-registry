// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerNodePool extends pulumi.CustomResource {
    /**
     * Get an existing ContainerNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerNodePoolState, opts?: pulumi.CustomResourceOptions): ContainerNodePool {
        return new ContainerNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/containerNodePool:ContainerNodePool';

    /**
     * Returns true if the given object is an instance of ContainerNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerNodePool.__pulumiType;
    }

    /**
     * Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
     */
    public readonly autoscaling!: pulumi.Output<outputs.ContainerNodePoolAutoscaling | undefined>;
    /**
     * The cluster to create the node pool for. Cluster must be present in location provided for zonal clusters.
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone.
     * Changing this will force recreation of the resource.
     */
    public readonly initialNodeCount!: pulumi.Output<number>;
    /**
     * The resource URLs of the managed instance groups associated with this node pool.
     */
    public /*out*/ readonly instanceGroupUrls!: pulumi.Output<string[]>;
    /**
     * The location (region or zone) of the cluster.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * List of instance group URLs which have been assigned to this node pool.
     */
    public /*out*/ readonly managedInstanceGroupUrls!: pulumi.Output<string[]>;
    /**
     * Node management configuration, wherein auto-repair and auto-upgrade is configured.
     */
    public readonly management!: pulumi.Output<outputs.ContainerNodePoolManagement | undefined>;
    /**
     * The maximum number of pods per node in this node pool. Note that this does not work on node pools which are
     * "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
     */
    public readonly maxPodsPerNode!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
     */
    public readonly namePrefix!: pulumi.Output<string>;
    /**
     * Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
     */
    public readonly networkConfig!: pulumi.Output<outputs.ContainerNodePoolNetworkConfig | undefined>;
    /**
     * The configuration of the nodepool
     */
    public readonly nodeConfig!: pulumi.Output<outputs.ContainerNodePoolNodeConfig | undefined>;
    /**
     * The number of nodes per instance group. This field can be used to update the number of nodes per instance group but
     * should not be used alongside autoscaling.
     */
    public readonly nodeCount!: pulumi.Output<number>;
    /**
     * The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional
     * cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level
     * node_locations will be used.
     */
    public readonly nodeLocations!: pulumi.Output<string[]>;
    public /*out*/ readonly operation!: pulumi.Output<string>;
    /**
     * Specifies the node placement policy
     */
    public readonly placementPolicy!: pulumi.Output<outputs.ContainerNodePoolPlacementPolicy | undefined>;
    /**
     * The ID of the project in which to create the node pool. If blank, the provider-configured project will be used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Specifies the configuration of queued provisioning
     */
    public readonly queuedProvisioning!: pulumi.Output<outputs.ContainerNodePoolQueuedProvisioning | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerNodePoolTimeouts | undefined>;
    /**
     * Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded
     * simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is
     * limited to 20.
     */
    public readonly upgradeSettings!: pulumi.Output<outputs.ContainerNodePoolUpgradeSettings | undefined>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a ContainerNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerNodePoolArgs | ContainerNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerNodePoolState | undefined;
            resourceInputs["autoscaling"] = state ? state.autoscaling : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["initialNodeCount"] = state ? state.initialNodeCount : undefined;
            resourceInputs["instanceGroupUrls"] = state ? state.instanceGroupUrls : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedInstanceGroupUrls"] = state ? state.managedInstanceGroupUrls : undefined;
            resourceInputs["management"] = state ? state.management : undefined;
            resourceInputs["maxPodsPerNode"] = state ? state.maxPodsPerNode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["networkConfig"] = state ? state.networkConfig : undefined;
            resourceInputs["nodeConfig"] = state ? state.nodeConfig : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodeLocations"] = state ? state.nodeLocations : undefined;
            resourceInputs["operation"] = state ? state.operation : undefined;
            resourceInputs["placementPolicy"] = state ? state.placementPolicy : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["queuedProvisioning"] = state ? state.queuedProvisioning : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["upgradeSettings"] = state ? state.upgradeSettings : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ContainerNodePoolArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            resourceInputs["autoscaling"] = args ? args.autoscaling : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["initialNodeCount"] = args ? args.initialNodeCount : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["management"] = args ? args.management : undefined;
            resourceInputs["maxPodsPerNode"] = args ? args.maxPodsPerNode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["networkConfig"] = args ? args.networkConfig : undefined;
            resourceInputs["nodeConfig"] = args ? args.nodeConfig : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodeLocations"] = args ? args.nodeLocations : undefined;
            resourceInputs["placementPolicy"] = args ? args.placementPolicy : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["queuedProvisioning"] = args ? args.queuedProvisioning : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["upgradeSettings"] = args ? args.upgradeSettings : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["instanceGroupUrls"] = undefined /*out*/;
            resourceInputs["managedInstanceGroupUrls"] = undefined /*out*/;
            resourceInputs["operation"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerNodePool resources.
 */
export interface ContainerNodePoolState {
    /**
     * Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
     */
    autoscaling?: pulumi.Input<inputs.ContainerNodePoolAutoscaling>;
    /**
     * The cluster to create the node pool for. Cluster must be present in location provided for zonal clusters.
     */
    cluster?: pulumi.Input<string>;
    /**
     * The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone.
     * Changing this will force recreation of the resource.
     */
    initialNodeCount?: pulumi.Input<number>;
    /**
     * The resource URLs of the managed instance groups associated with this node pool.
     */
    instanceGroupUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The location (region or zone) of the cluster.
     */
    location?: pulumi.Input<string>;
    /**
     * List of instance group URLs which have been assigned to this node pool.
     */
    managedInstanceGroupUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Node management configuration, wherein auto-repair and auto-upgrade is configured.
     */
    management?: pulumi.Input<inputs.ContainerNodePoolManagement>;
    /**
     * The maximum number of pods per node in this node pool. Note that this does not work on node pools which are
     * "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
     */
    maxPodsPerNode?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
     */
    networkConfig?: pulumi.Input<inputs.ContainerNodePoolNetworkConfig>;
    /**
     * The configuration of the nodepool
     */
    nodeConfig?: pulumi.Input<inputs.ContainerNodePoolNodeConfig>;
    /**
     * The number of nodes per instance group. This field can be used to update the number of nodes per instance group but
     * should not be used alongside autoscaling.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional
     * cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level
     * node_locations will be used.
     */
    nodeLocations?: pulumi.Input<pulumi.Input<string>[]>;
    operation?: pulumi.Input<string>;
    /**
     * Specifies the node placement policy
     */
    placementPolicy?: pulumi.Input<inputs.ContainerNodePoolPlacementPolicy>;
    /**
     * The ID of the project in which to create the node pool. If blank, the provider-configured project will be used.
     */
    project?: pulumi.Input<string>;
    /**
     * Specifies the configuration of queued provisioning
     */
    queuedProvisioning?: pulumi.Input<inputs.ContainerNodePoolQueuedProvisioning>;
    timeouts?: pulumi.Input<inputs.ContainerNodePoolTimeouts>;
    /**
     * Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded
     * simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is
     * limited to 20.
     */
    upgradeSettings?: pulumi.Input<inputs.ContainerNodePoolUpgradeSettings>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerNodePool resource.
 */
export interface ContainerNodePoolArgs {
    /**
     * Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
     */
    autoscaling?: pulumi.Input<inputs.ContainerNodePoolAutoscaling>;
    /**
     * The cluster to create the node pool for. Cluster must be present in location provided for zonal clusters.
     */
    cluster: pulumi.Input<string>;
    /**
     * The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone.
     * Changing this will force recreation of the resource.
     */
    initialNodeCount?: pulumi.Input<number>;
    /**
     * The location (region or zone) of the cluster.
     */
    location?: pulumi.Input<string>;
    /**
     * Node management configuration, wherein auto-repair and auto-upgrade is configured.
     */
    management?: pulumi.Input<inputs.ContainerNodePoolManagement>;
    /**
     * The maximum number of pods per node in this node pool. Note that this does not work on node pools which are
     * "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.
     */
    maxPodsPerNode?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
     */
    networkConfig?: pulumi.Input<inputs.ContainerNodePoolNetworkConfig>;
    /**
     * The configuration of the nodepool
     */
    nodeConfig?: pulumi.Input<inputs.ContainerNodePoolNodeConfig>;
    /**
     * The number of nodes per instance group. This field can be used to update the number of nodes per instance group but
     * should not be used alongside autoscaling.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional
     * cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level
     * node_locations will be used.
     */
    nodeLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the node placement policy
     */
    placementPolicy?: pulumi.Input<inputs.ContainerNodePoolPlacementPolicy>;
    /**
     * The ID of the project in which to create the node pool. If blank, the provider-configured project will be used.
     */
    project?: pulumi.Input<string>;
    /**
     * Specifies the configuration of queued provisioning
     */
    queuedProvisioning?: pulumi.Input<inputs.ContainerNodePoolQueuedProvisioning>;
    timeouts?: pulumi.Input<inputs.ContainerNodePoolTimeouts>;
    /**
     * Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded
     * simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is
     * limited to 20.
     */
    upgradeSettings?: pulumi.Input<inputs.ContainerNodePoolUpgradeSettings>;
    version?: pulumi.Input<string>;
}
