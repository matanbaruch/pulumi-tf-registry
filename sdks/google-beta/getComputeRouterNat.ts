// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputeRouterNat(args: GetComputeRouterNatArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeRouterNatResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-beta:index/getComputeRouterNat:getComputeRouterNat", {
        "id": args.id,
        "name": args.name,
        "project": args.project,
        "region": args.region,
        "router": args.router,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputeRouterNat.
 */
export interface GetComputeRouterNatArgs {
    id?: string;
    name: string;
    project?: string;
    region?: string;
    router: string;
}

/**
 * A collection of values returned by getComputeRouterNat.
 */
export interface GetComputeRouterNatResult {
    readonly autoNetworkTier: string;
    readonly drainNatIps: string[];
    readonly enableDynamicPortAllocation: boolean;
    readonly enableEndpointIndependentMapping: boolean;
    readonly endpointTypes: string[];
    readonly icmpIdleTimeoutSec: number;
    readonly id: string;
    readonly logConfigs: outputs.GetComputeRouterNatLogConfig[];
    readonly maxPortsPerVm: number;
    readonly minPortsPerVm: number;
    readonly name: string;
    readonly natIpAllocateOption: string;
    readonly natIps: string[];
    readonly project?: string;
    readonly region?: string;
    readonly router: string;
    readonly rules: outputs.GetComputeRouterNatRule[];
    readonly sourceSubnetworkIpRangesToNat: string;
    readonly subnetworks: outputs.GetComputeRouterNatSubnetwork[];
    readonly tcpEstablishedIdleTimeoutSec: number;
    readonly tcpTimeWaitTimeoutSec: number;
    readonly tcpTransitoryIdleTimeoutSec: number;
    readonly type: string;
    readonly udpIdleTimeoutSec: number;
}
export function getComputeRouterNatOutput(args: GetComputeRouterNatOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeRouterNatResult> {
    return pulumi.output(args).apply((a: any) => getComputeRouterNat(a, opts))
}

/**
 * A collection of arguments for invoking getComputeRouterNat.
 */
export interface GetComputeRouterNatOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    router: pulumi.Input<string>;
}
