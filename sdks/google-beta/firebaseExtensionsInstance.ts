// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirebaseExtensionsInstance extends pulumi.CustomResource {
    /**
     * Get an existing FirebaseExtensionsInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirebaseExtensionsInstanceState, opts?: pulumi.CustomResourceOptions): FirebaseExtensionsInstance {
        return new FirebaseExtensionsInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/firebaseExtensionsInstance:FirebaseExtensionsInstance';

    /**
     * Returns true if the given object is an instance of FirebaseExtensionsInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirebaseExtensionsInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirebaseExtensionsInstance.__pulumiType;
    }

    /**
     * The current Config of the Extension Instance.
     */
    public readonly config!: pulumi.Output<outputs.FirebaseExtensionsInstanceConfig>;
    /**
     * The time at which the Extension Instance was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * If this Instance has 'state: ERRORED', the error messages will be found here.
     */
    public /*out*/ readonly errorStatuses!: pulumi.Output<outputs.FirebaseExtensionsInstanceErrorStatus[]>;
    /**
     * A weak etag that is computed by the server based on other configuration values and may be sent on update and delete
     * requests to ensure the client has an up-to-date value before proceeding.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The ID to use for the Extension Instance, which will become the final component of the instance's name.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The name of the last operation that acted on this Extension Instance
     */
    public /*out*/ readonly lastOperationName!: pulumi.Output<string>;
    /**
     * The type of the last operation that acted on the Extension Instance.
     */
    public /*out*/ readonly lastOperationType!: pulumi.Output<string>;
    /**
     * The fully-qualified resource name of the Extension Instance.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Data set by the extension instance at runtime.
     */
    public /*out*/ readonly runtimeDatas!: pulumi.Output<outputs.FirebaseExtensionsInstanceRuntimeData[]>;
    /**
     * The email of the service account to be used at runtime by compute resources created for the operation of the Extension
     * instance.
     */
    public /*out*/ readonly serviceAccountEmail!: pulumi.Output<string>;
    /**
     * The current state of the Extension Instance. DEPLOYING: The Extension Instance is waiting on an Operation to complete.
     * Could resolve to 'ACTIVE', 'PAUSED', 'ERRORED'. UNINSTALLING: The Extension Instance is being removed from the project.
     * Could resolve to 'ERRORED', but more likely the instance will soon cease to exist. ACTIVE: The Extension Instance is
     * installed and ready. ERRORED: The Extension Instance encountered an error while 'DEPLOYING' or 'UNINSTALLING'. PAUSED:
     * The Extension's resources have been removed from the project, but the Config remains so the Instance can be restored.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FirebaseExtensionsInstanceTimeouts | undefined>;
    /**
     * The time at which the Extension Instance was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a FirebaseExtensionsInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirebaseExtensionsInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirebaseExtensionsInstanceArgs | FirebaseExtensionsInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirebaseExtensionsInstanceState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["errorStatuses"] = state ? state.errorStatuses : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["lastOperationName"] = state ? state.lastOperationName : undefined;
            resourceInputs["lastOperationType"] = state ? state.lastOperationType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["runtimeDatas"] = state ? state.runtimeDatas : undefined;
            resourceInputs["serviceAccountEmail"] = state ? state.serviceAccountEmail : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as FirebaseExtensionsInstanceArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["errorStatuses"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["lastOperationName"] = undefined /*out*/;
            resourceInputs["lastOperationType"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["runtimeDatas"] = undefined /*out*/;
            resourceInputs["serviceAccountEmail"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirebaseExtensionsInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirebaseExtensionsInstance resources.
 */
export interface FirebaseExtensionsInstanceState {
    /**
     * The current Config of the Extension Instance.
     */
    config?: pulumi.Input<inputs.FirebaseExtensionsInstanceConfig>;
    /**
     * The time at which the Extension Instance was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * If this Instance has 'state: ERRORED', the error messages will be found here.
     */
    errorStatuses?: pulumi.Input<pulumi.Input<inputs.FirebaseExtensionsInstanceErrorStatus>[]>;
    /**
     * A weak etag that is computed by the server based on other configuration values and may be sent on update and delete
     * requests to ensure the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * The ID to use for the Extension Instance, which will become the final component of the instance's name.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of the last operation that acted on this Extension Instance
     */
    lastOperationName?: pulumi.Input<string>;
    /**
     * The type of the last operation that acted on the Extension Instance.
     */
    lastOperationType?: pulumi.Input<string>;
    /**
     * The fully-qualified resource name of the Extension Instance.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Data set by the extension instance at runtime.
     */
    runtimeDatas?: pulumi.Input<pulumi.Input<inputs.FirebaseExtensionsInstanceRuntimeData>[]>;
    /**
     * The email of the service account to be used at runtime by compute resources created for the operation of the Extension
     * instance.
     */
    serviceAccountEmail?: pulumi.Input<string>;
    /**
     * The current state of the Extension Instance. DEPLOYING: The Extension Instance is waiting on an Operation to complete.
     * Could resolve to 'ACTIVE', 'PAUSED', 'ERRORED'. UNINSTALLING: The Extension Instance is being removed from the project.
     * Could resolve to 'ERRORED', but more likely the instance will soon cease to exist. ACTIVE: The Extension Instance is
     * installed and ready. ERRORED: The Extension Instance encountered an error while 'DEPLOYING' or 'UNINSTALLING'. PAUSED:
     * The Extension's resources have been removed from the project, but the Config remains so the Instance can be restored.
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirebaseExtensionsInstanceTimeouts>;
    /**
     * The time at which the Extension Instance was updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirebaseExtensionsInstance resource.
 */
export interface FirebaseExtensionsInstanceArgs {
    /**
     * The current Config of the Extension Instance.
     */
    config: pulumi.Input<inputs.FirebaseExtensionsInstanceConfig>;
    /**
     * The ID to use for the Extension Instance, which will become the final component of the instance's name.
     */
    instanceId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirebaseExtensionsInstanceTimeouts>;
}
