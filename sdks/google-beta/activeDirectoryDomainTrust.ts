// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ActiveDirectoryDomainTrust extends pulumi.CustomResource {
    /**
     * Get an existing ActiveDirectoryDomainTrust resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActiveDirectoryDomainTrustState, opts?: pulumi.CustomResourceOptions): ActiveDirectoryDomainTrust {
        return new ActiveDirectoryDomainTrust(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/activeDirectoryDomainTrust:ActiveDirectoryDomainTrust';

    /**
     * Returns true if the given object is an instance of ActiveDirectoryDomainTrust.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActiveDirectoryDomainTrust {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActiveDirectoryDomainTrust.__pulumiType;
    }

    /**
     * The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions of
     * https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
     */
    public readonly domain!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
     */
    public readonly selectiveAuthentication!: pulumi.Output<boolean | undefined>;
    /**
     * The target DNS server IP addresses which can resolve the remote domain involved in the trust.
     */
    public readonly targetDnsIpAddresses!: pulumi.Output<string[]>;
    /**
     * The fully qualified target domain name which will be in trust with the current domain.
     */
    public readonly targetDomainName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ActiveDirectoryDomainTrustTimeouts | undefined>;
    /**
     * The trust direction, which decides if the current domain is trusted, trusting, or both. Possible values: ["INBOUND",
     * "OUTBOUND", "BIDIRECTIONAL"]
     */
    public readonly trustDirection!: pulumi.Output<string>;
    /**
     * The trust secret used for the handshake with the target domain. This will not be stored.
     */
    public readonly trustHandshakeSecret!: pulumi.Output<string>;
    /**
     * The type of trust represented by the trust resource. Possible values: ["FOREST", "EXTERNAL"]
     */
    public readonly trustType!: pulumi.Output<string>;

    /**
     * Create a ActiveDirectoryDomainTrust resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActiveDirectoryDomainTrustArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActiveDirectoryDomainTrustArgs | ActiveDirectoryDomainTrustState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActiveDirectoryDomainTrustState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["selectiveAuthentication"] = state ? state.selectiveAuthentication : undefined;
            resourceInputs["targetDnsIpAddresses"] = state ? state.targetDnsIpAddresses : undefined;
            resourceInputs["targetDomainName"] = state ? state.targetDomainName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trustDirection"] = state ? state.trustDirection : undefined;
            resourceInputs["trustHandshakeSecret"] = state ? state.trustHandshakeSecret : undefined;
            resourceInputs["trustType"] = state ? state.trustType : undefined;
        } else {
            const args = argsOrState as ActiveDirectoryDomainTrustArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.targetDnsIpAddresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDnsIpAddresses'");
            }
            if ((!args || args.targetDomainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDomainName'");
            }
            if ((!args || args.trustDirection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustDirection'");
            }
            if ((!args || args.trustHandshakeSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustHandshakeSecret'");
            }
            if ((!args || args.trustType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustType'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["selectiveAuthentication"] = args ? args.selectiveAuthentication : undefined;
            resourceInputs["targetDnsIpAddresses"] = args ? args.targetDnsIpAddresses : undefined;
            resourceInputs["targetDomainName"] = args ? args.targetDomainName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trustDirection"] = args ? args.trustDirection : undefined;
            resourceInputs["trustHandshakeSecret"] = args?.trustHandshakeSecret ? pulumi.secret(args.trustHandshakeSecret) : undefined;
            resourceInputs["trustType"] = args ? args.trustType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["trustHandshakeSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ActiveDirectoryDomainTrust.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ActiveDirectoryDomainTrust resources.
 */
export interface ActiveDirectoryDomainTrustState {
    /**
     * The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions of
     * https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
     */
    domain?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
     */
    selectiveAuthentication?: pulumi.Input<boolean>;
    /**
     * The target DNS server IP addresses which can resolve the remote domain involved in the trust.
     */
    targetDnsIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully qualified target domain name which will be in trust with the current domain.
     */
    targetDomainName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ActiveDirectoryDomainTrustTimeouts>;
    /**
     * The trust direction, which decides if the current domain is trusted, trusting, or both. Possible values: ["INBOUND",
     * "OUTBOUND", "BIDIRECTIONAL"]
     */
    trustDirection?: pulumi.Input<string>;
    /**
     * The trust secret used for the handshake with the target domain. This will not be stored.
     */
    trustHandshakeSecret?: pulumi.Input<string>;
    /**
     * The type of trust represented by the trust resource. Possible values: ["FOREST", "EXTERNAL"]
     */
    trustType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ActiveDirectoryDomainTrust resource.
 */
export interface ActiveDirectoryDomainTrustArgs {
    /**
     * The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions of
     * https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
     */
    domain: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
     */
    selectiveAuthentication?: pulumi.Input<boolean>;
    /**
     * The target DNS server IP addresses which can resolve the remote domain involved in the trust.
     */
    targetDnsIpAddresses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully qualified target domain name which will be in trust with the current domain.
     */
    targetDomainName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ActiveDirectoryDomainTrustTimeouts>;
    /**
     * The trust direction, which decides if the current domain is trusted, trusting, or both. Possible values: ["INBOUND",
     * "OUTBOUND", "BIDIRECTIONAL"]
     */
    trustDirection: pulumi.Input<string>;
    /**
     * The trust secret used for the handshake with the target domain. This will not be stored.
     */
    trustHandshakeSecret: pulumi.Input<string>;
    /**
     * The type of trust represented by the trust resource. Possible values: ["FOREST", "EXTERNAL"]
     */
    trustType: pulumi.Input<string>;
}
