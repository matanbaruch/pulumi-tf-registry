// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputeInstance(args?: GetComputeInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeInstanceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-beta:index/getComputeInstance:getComputeInstance", {
        "id": args.id,
        "name": args.name,
        "project": args.project,
        "selfLink": args.selfLink,
        "zone": args.zone,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputeInstance.
 */
export interface GetComputeInstanceArgs {
    id?: string;
    name?: string;
    project?: string;
    selfLink?: string;
    zone?: string;
}

/**
 * A collection of values returned by getComputeInstance.
 */
export interface GetComputeInstanceResult {
    readonly advancedMachineFeatures: outputs.GetComputeInstanceAdvancedMachineFeature[];
    readonly allowStoppingForUpdate: boolean;
    readonly attachedDisks: outputs.GetComputeInstanceAttachedDisk[];
    readonly bootDisks: outputs.GetComputeInstanceBootDisk[];
    readonly canIpForward: boolean;
    readonly confidentialInstanceConfigs: outputs.GetComputeInstanceConfidentialInstanceConfig[];
    readonly cpuPlatform: string;
    readonly currentStatus: string;
    readonly deletionProtection: boolean;
    readonly description: string;
    readonly desiredStatus: string;
    readonly effectiveLabels: {[key: string]: string};
    readonly enableDisplay: boolean;
    readonly guestAccelerators: outputs.GetComputeInstanceGuestAccelerator[];
    readonly hostname: string;
    readonly id: string;
    readonly instanceId: string;
    readonly labelFingerprint: string;
    readonly labels: {[key: string]: string};
    readonly machineType: string;
    readonly metadata: {[key: string]: string};
    readonly metadataFingerprint: string;
    readonly metadataStartupScript: string;
    readonly minCpuPlatform: string;
    readonly name?: string;
    readonly networkInterfaces: outputs.GetComputeInstanceNetworkInterface[];
    readonly networkPerformanceConfigs: outputs.GetComputeInstanceNetworkPerformanceConfig[];
    readonly params: outputs.GetComputeInstanceParam[];
    readonly partnerMetadata: {[key: string]: string};
    readonly project?: string;
    readonly reservationAffinities: outputs.GetComputeInstanceReservationAffinity[];
    readonly resourcePolicies: string[];
    readonly schedulings: outputs.GetComputeInstanceScheduling[];
    readonly scratchDisks: outputs.GetComputeInstanceScratchDisk[];
    readonly selfLink?: string;
    readonly serviceAccounts: outputs.GetComputeInstanceServiceAccount[];
    readonly shieldedInstanceConfigs: outputs.GetComputeInstanceShieldedInstanceConfig[];
    readonly tags: string[];
    readonly tagsFingerprint: string;
    readonly terraformLabels: {[key: string]: string};
    readonly zone?: string;
}
export function getComputeInstanceOutput(args?: GetComputeInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeInstanceResult> {
    return pulumi.output(args).apply((a: any) => getComputeInstance(a, opts))
}

/**
 * A collection of arguments for invoking getComputeInstance.
 */
export interface GetComputeInstanceOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
