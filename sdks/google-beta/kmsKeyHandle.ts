// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KmsKeyHandle extends pulumi.CustomResource {
    /**
     * Get an existing KmsKeyHandle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsKeyHandleState, opts?: pulumi.CustomResourceOptions): KmsKeyHandle {
        return new KmsKeyHandle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/kmsKeyHandle:KmsKeyHandle';

    /**
     * Returns true if the given object is an instance of KmsKeyHandle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsKeyHandle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsKeyHandle.__pulumiType;
    }

    /**
     * A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested product/project/location, for example
     * 'projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff'
     */
    public /*out*/ readonly kmsKey!: pulumi.Output<string>;
    /**
     * The location for the KeyHandle. A full list of valid locations can be found by running 'gcloud kms locations list'.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name for the KeyHandle.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Selector of the resource type where we want to protect resources. For example, 'storage.googleapis.com/Bucket'.
     */
    public readonly resourceTypeSelector!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KmsKeyHandleTimeouts | undefined>;

    /**
     * Create a KmsKeyHandle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsKeyHandleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsKeyHandleArgs | KmsKeyHandleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsKeyHandleState | undefined;
            resourceInputs["kmsKey"] = state ? state.kmsKey : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["resourceTypeSelector"] = state ? state.resourceTypeSelector : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as KmsKeyHandleArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceTypeSelector === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceTypeSelector'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["resourceTypeSelector"] = args ? args.resourceTypeSelector : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["kmsKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmsKeyHandle.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsKeyHandle resources.
 */
export interface KmsKeyHandleState {
    /**
     * A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested product/project/location, for example
     * 'projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff'
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * The location for the KeyHandle. A full list of valid locations can be found by running 'gcloud kms locations list'.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name for the KeyHandle.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Selector of the resource type where we want to protect resources. For example, 'storage.googleapis.com/Bucket'.
     */
    resourceTypeSelector?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsKeyHandleTimeouts>;
}

/**
 * The set of arguments for constructing a KmsKeyHandle resource.
 */
export interface KmsKeyHandleArgs {
    /**
     * The location for the KeyHandle. A full list of valid locations can be found by running 'gcloud kms locations list'.
     */
    location: pulumi.Input<string>;
    /**
     * The resource name for the KeyHandle.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Selector of the resource type where we want to protect resources. For example, 'storage.googleapis.com/Bucket'.
     */
    resourceTypeSelector: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsKeyHandleTimeouts>;
}
