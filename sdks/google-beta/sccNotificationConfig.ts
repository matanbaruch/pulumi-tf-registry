// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SccNotificationConfig extends pulumi.CustomResource {
    /**
     * Get an existing SccNotificationConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SccNotificationConfigState, opts?: pulumi.CustomResourceOptions): SccNotificationConfig {
        return new SccNotificationConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/sccNotificationConfig:SccNotificationConfig';

    /**
     * Returns true if the given object is an instance of SccNotificationConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SccNotificationConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SccNotificationConfig.__pulumiType;
    }

    /**
     * This must be unique within the organization.
     */
    public readonly configId!: pulumi.Output<string>;
    /**
     * The description of the notification config (max of 1024 characters).
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The resource name of this notification config, in the format
     * 'organizations/{{organization}}/notificationConfigs/{{config_id}}'.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The organization whose Cloud Security Command Center the Notification Config lives in.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
     */
    public readonly pubsubTopic!: pulumi.Output<string>;
    /**
     * The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
     */
    public /*out*/ readonly serviceAccount!: pulumi.Output<string>;
    /**
     * The config for triggering streaming-based notifications.
     */
    public readonly streamingConfig!: pulumi.Output<outputs.SccNotificationConfigStreamingConfig>;
    public readonly timeouts!: pulumi.Output<outputs.SccNotificationConfigTimeouts | undefined>;

    /**
     * Create a SccNotificationConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SccNotificationConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SccNotificationConfigArgs | SccNotificationConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SccNotificationConfigState | undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["pubsubTopic"] = state ? state.pubsubTopic : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["streamingConfig"] = state ? state.streamingConfig : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SccNotificationConfigArgs | undefined;
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.pubsubTopic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pubsubTopic'");
            }
            if ((!args || args.streamingConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamingConfig'");
            }
            resourceInputs["configId"] = args ? args.configId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["pubsubTopic"] = args ? args.pubsubTopic : undefined;
            resourceInputs["streamingConfig"] = args ? args.streamingConfig : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["serviceAccount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SccNotificationConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SccNotificationConfig resources.
 */
export interface SccNotificationConfigState {
    /**
     * This must be unique within the organization.
     */
    configId?: pulumi.Input<string>;
    /**
     * The description of the notification config (max of 1024 characters).
     */
    description?: pulumi.Input<string>;
    /**
     * The resource name of this notification config, in the format
     * 'organizations/{{organization}}/notificationConfigs/{{config_id}}'.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Notification Config lives in.
     */
    organization?: pulumi.Input<string>;
    /**
     * The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
     */
    pubsubTopic?: pulumi.Input<string>;
    /**
     * The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The config for triggering streaming-based notifications.
     */
    streamingConfig?: pulumi.Input<inputs.SccNotificationConfigStreamingConfig>;
    timeouts?: pulumi.Input<inputs.SccNotificationConfigTimeouts>;
}

/**
 * The set of arguments for constructing a SccNotificationConfig resource.
 */
export interface SccNotificationConfigArgs {
    /**
     * This must be unique within the organization.
     */
    configId: pulumi.Input<string>;
    /**
     * The description of the notification config (max of 1024 characters).
     */
    description?: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Notification Config lives in.
     */
    organization: pulumi.Input<string>;
    /**
     * The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
     */
    pubsubTopic: pulumi.Input<string>;
    /**
     * The config for triggering streaming-based notifications.
     */
    streamingConfig: pulumi.Input<inputs.SccNotificationConfigStreamingConfig>;
    timeouts?: pulumi.Input<inputs.SccNotificationConfigTimeouts>;
}
