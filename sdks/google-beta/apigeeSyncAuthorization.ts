// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApigeeSyncAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing ApigeeSyncAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigeeSyncAuthorizationState, opts?: pulumi.CustomResourceOptions): ApigeeSyncAuthorization {
        return new ApigeeSyncAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/apigeeSyncAuthorization:ApigeeSyncAuthorization';

    /**
     * Returns true if the given object is an instance of ApigeeSyncAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApigeeSyncAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApigeeSyncAuthorization.__pulumiType;
    }

    /**
     * Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting
     * each other. Used internally during updates.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Array of service accounts to grant access to control plane resources, each specified using the following format:
     * 'serviceAccount:service-account-name'. The 'service-account-name' is formatted like an email address. For example:
     * my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com You might specify multiple service
     * accounts, for example, if you have multiple environments and wish to assign a unique service account to each one. The
     * service accounts must have **Apigee Synchronizer Manager** role. See also [Create service
     * accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
     */
    public readonly identities!: pulumi.Output<string[]>;
    /**
     * Name of the Apigee organization.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ApigeeSyncAuthorizationTimeouts | undefined>;

    /**
     * Create a ApigeeSyncAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApigeeSyncAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigeeSyncAuthorizationArgs | ApigeeSyncAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigeeSyncAuthorizationState | undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["identities"] = state ? state.identities : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ApigeeSyncAuthorizationArgs | undefined;
            if ((!args || args.identities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identities'");
            }
            resourceInputs["identities"] = args ? args.identities : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApigeeSyncAuthorization.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApigeeSyncAuthorization resources.
 */
export interface ApigeeSyncAuthorizationState {
    /**
     * Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting
     * each other. Used internally during updates.
     */
    etag?: pulumi.Input<string>;
    /**
     * Array of service accounts to grant access to control plane resources, each specified using the following format:
     * 'serviceAccount:service-account-name'. The 'service-account-name' is formatted like an email address. For example:
     * my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com You might specify multiple service
     * accounts, for example, if you have multiple environments and wish to assign a unique service account to each one. The
     * service accounts must have **Apigee Synchronizer Manager** role. See also [Create service
     * accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
     */
    identities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Apigee organization.
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApigeeSyncAuthorizationTimeouts>;
}

/**
 * The set of arguments for constructing a ApigeeSyncAuthorization resource.
 */
export interface ApigeeSyncAuthorizationArgs {
    /**
     * Array of service accounts to grant access to control plane resources, each specified using the following format:
     * 'serviceAccount:service-account-name'. The 'service-account-name' is formatted like an email address. For example:
     * my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com You might specify multiple service
     * accounts, for example, if you have multiple environments and wish to assign a unique service account to each one. The
     * service accounts must have **Apigee Synchronizer Manager** role. See also [Create service
     * accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
     */
    identities: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Apigee organization.
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApigeeSyncAuthorizationTimeouts>;
}
