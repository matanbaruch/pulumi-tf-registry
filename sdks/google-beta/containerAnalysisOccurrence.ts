// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerAnalysisOccurrence extends pulumi.CustomResource {
    /**
     * Get an existing ContainerAnalysisOccurrence resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerAnalysisOccurrenceState, opts?: pulumi.CustomResourceOptions): ContainerAnalysisOccurrence {
        return new ContainerAnalysisOccurrence(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/containerAnalysisOccurrence:ContainerAnalysisOccurrence';

    /**
     * Returns true if the given object is an instance of ContainerAnalysisOccurrence.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerAnalysisOccurrence {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerAnalysisOccurrence.__pulumiType;
    }

    /**
     * Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached
     * signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish
     * trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to
     * find this attestation if you already know the authority and artifact to be verified) and intent (for which authority
     * this attestation was intended to sign.
     */
    public readonly attestation!: pulumi.Output<outputs.ContainerAnalysisOccurrenceAttestation>;
    /**
     * The time when the repository was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * The name of the occurrence.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The analysis note associated with this occurrence, in the form of projects/[PROJECT]/notes/[NOTE_ID]. This field can be
     * used as a filter in list requests.
     */
    public readonly noteName!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * A description of actions that can be taken to remedy the note.
     */
    public readonly remediation!: pulumi.Output<string | undefined>;
    /**
     * Required. Immutable. A URI that represents the resource for which the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     */
    public readonly resourceUri!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerAnalysisOccurrenceTimeouts | undefined>;
    /**
     * The time when the repository was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a ContainerAnalysisOccurrence resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerAnalysisOccurrenceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerAnalysisOccurrenceArgs | ContainerAnalysisOccurrenceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerAnalysisOccurrenceState | undefined;
            resourceInputs["attestation"] = state ? state.attestation : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noteName"] = state ? state.noteName : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["remediation"] = state ? state.remediation : undefined;
            resourceInputs["resourceUri"] = state ? state.resourceUri : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as ContainerAnalysisOccurrenceArgs | undefined;
            if ((!args || args.attestation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attestation'");
            }
            if ((!args || args.noteName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'noteName'");
            }
            if ((!args || args.resourceUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceUri'");
            }
            resourceInputs["attestation"] = args ? args.attestation : undefined;
            resourceInputs["noteName"] = args ? args.noteName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["remediation"] = args ? args.remediation : undefined;
            resourceInputs["resourceUri"] = args ? args.resourceUri : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerAnalysisOccurrence.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerAnalysisOccurrence resources.
 */
export interface ContainerAnalysisOccurrenceState {
    /**
     * Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached
     * signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish
     * trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to
     * find this attestation if you already know the authority and artifact to be verified) and intent (for which authority
     * this attestation was intended to sign.
     */
    attestation?: pulumi.Input<inputs.ContainerAnalysisOccurrenceAttestation>;
    /**
     * The time when the repository was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The note kind which explicitly denotes which of the occurrence details are specified. This field can be used as a filter
     * in list requests.
     */
    kind?: pulumi.Input<string>;
    /**
     * The name of the occurrence.
     */
    name?: pulumi.Input<string>;
    /**
     * The analysis note associated with this occurrence, in the form of projects/[PROJECT]/notes/[NOTE_ID]. This field can be
     * used as a filter in list requests.
     */
    noteName?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A description of actions that can be taken to remedy the note.
     */
    remediation?: pulumi.Input<string>;
    /**
     * Required. Immutable. A URI that represents the resource for which the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     */
    resourceUri?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerAnalysisOccurrenceTimeouts>;
    /**
     * The time when the repository was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerAnalysisOccurrence resource.
 */
export interface ContainerAnalysisOccurrenceArgs {
    /**
     * Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached
     * signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish
     * trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to
     * find this attestation if you already know the authority and artifact to be verified) and intent (for which authority
     * this attestation was intended to sign.
     */
    attestation: pulumi.Input<inputs.ContainerAnalysisOccurrenceAttestation>;
    /**
     * The analysis note associated with this occurrence, in the form of projects/[PROJECT]/notes/[NOTE_ID]. This field can be
     * used as a filter in list requests.
     */
    noteName: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A description of actions that can be taken to remedy the note.
     */
    remediation?: pulumi.Input<string>;
    /**
     * Required. Immutable. A URI that represents the resource for which the occurrence applies. For example,
     * https://gcr.io/project/image@sha256:123abc for a Docker image.
     */
    resourceUri: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerAnalysisOccurrenceTimeouts>;
}
