// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitoringCustomService extends pulumi.CustomResource {
    /**
     * Get an existing MonitoringCustomService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitoringCustomServiceState, opts?: pulumi.CustomResourceOptions): MonitoringCustomService {
        return new MonitoringCustomService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/monitoringCustomService:MonitoringCustomService';

    /**
     * Returns true if the given object is an instance of MonitoringCustomService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitoringCustomService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitoringCustomService.__pulumiType;
    }

    /**
     * Name used for UI elements listing this Service.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * An optional service ID to use. If not given, the server will generate a service ID.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * Configuration for how to query telemetry on a Service.
     */
    public readonly telemetry!: pulumi.Output<outputs.MonitoringCustomServiceTelemetry | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MonitoringCustomServiceTimeouts | undefined>;
    /**
     * Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
     * contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
     * characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
     * a semantic value, the empty string may be supplied for the label value.
     */
    public readonly userLabels!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a MonitoringCustomService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MonitoringCustomServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitoringCustomServiceArgs | MonitoringCustomServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitoringCustomServiceState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["telemetry"] = state ? state.telemetry : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userLabels"] = state ? state.userLabels : undefined;
        } else {
            const args = argsOrState as MonitoringCustomServiceArgs | undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["telemetry"] = args ? args.telemetry : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userLabels"] = args ? args.userLabels : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitoringCustomService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitoringCustomService resources.
 */
export interface MonitoringCustomServiceState {
    /**
     * Name used for UI elements listing this Service.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The full resource name for this service. The syntax is: projects/[PROJECT_ID]/services/[SERVICE_ID].
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * An optional service ID to use. If not given, the server will generate a service ID.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * Configuration for how to query telemetry on a Service.
     */
    telemetry?: pulumi.Input<inputs.MonitoringCustomServiceTelemetry>;
    timeouts?: pulumi.Input<inputs.MonitoringCustomServiceTimeouts>;
    /**
     * Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
     * contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
     * characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
     * a semantic value, the empty string may be supplied for the label value.
     */
    userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a MonitoringCustomService resource.
 */
export interface MonitoringCustomServiceArgs {
    /**
     * Name used for UI elements listing this Service.
     */
    displayName?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * An optional service ID to use. If not given, the server will generate a service ID.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * Configuration for how to query telemetry on a Service.
     */
    telemetry?: pulumi.Input<inputs.MonitoringCustomServiceTelemetry>;
    timeouts?: pulumi.Input<inputs.MonitoringCustomServiceTimeouts>;
    /**
     * Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may
     * contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63
     * characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have
     * a semantic value, the empty string may be supplied for the label value.
     */
    userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
