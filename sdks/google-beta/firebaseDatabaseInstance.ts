// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirebaseDatabaseInstance extends pulumi.CustomResource {
    /**
     * Get an existing FirebaseDatabaseInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirebaseDatabaseInstanceState, opts?: pulumi.CustomResourceOptions): FirebaseDatabaseInstance {
        return new FirebaseDatabaseInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/firebaseDatabaseInstance:FirebaseDatabaseInstance';

    /**
     * Returns true if the given object is an instance of FirebaseDatabaseInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirebaseDatabaseInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirebaseDatabaseInstance.__pulumiType;
    }

    /**
     * The database URL in the form of https://{instance-id}.firebaseio.com for us-central1 instances or
     * https://{instance-id}.{region}.firebasedatabase.app in other regions.
     */
    public /*out*/ readonly databaseUrl!: pulumi.Output<string>;
    /**
     * The intended database state. Possible values: ACTIVE, DISABLED.
     */
    public readonly desiredState!: pulumi.Output<string | undefined>;
    /**
     * The globally unique identifier of the Firebase Realtime Database instance. Instance IDs cannot be reused after deletion.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The fully-qualified resource name of the Firebase Realtime Database, in the format:
     * projects/PROJECT_NUMBER/locations/REGION_IDENTIFIER/instances/INSTANCE_ID PROJECT_NUMBER: The Firebase project's
     * ['ProjectNumber'](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
     * Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * A reference to the region where the Firebase Realtime database resides. Check all [available
     * regions](https://firebase.google.com/docs/projects/locations#rtdb-locations)
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The current database state. Set desired_state to :DISABLED to disable the database and :ACTIVE to reenable the database
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FirebaseDatabaseInstanceTimeouts | undefined>;
    /**
     * The database type. Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
     * Creating user Databases is only available for projects on the Blaze plan. Projects can be upgraded using the Cloud
     * Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo. Default value:
     * "USER_DATABASE" Possible values: ["DEFAULT_DATABASE", "USER_DATABASE"]
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a FirebaseDatabaseInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirebaseDatabaseInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirebaseDatabaseInstanceArgs | FirebaseDatabaseInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirebaseDatabaseInstanceState | undefined;
            resourceInputs["databaseUrl"] = state ? state.databaseUrl : undefined;
            resourceInputs["desiredState"] = state ? state.desiredState : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FirebaseDatabaseInstanceArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["databaseUrl"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirebaseDatabaseInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirebaseDatabaseInstance resources.
 */
export interface FirebaseDatabaseInstanceState {
    /**
     * The database URL in the form of https://{instance-id}.firebaseio.com for us-central1 instances or
     * https://{instance-id}.{region}.firebasedatabase.app in other regions.
     */
    databaseUrl?: pulumi.Input<string>;
    /**
     * The intended database state. Possible values: ACTIVE, DISABLED.
     */
    desiredState?: pulumi.Input<string>;
    /**
     * The globally unique identifier of the Firebase Realtime Database instance. Instance IDs cannot be reused after deletion.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The fully-qualified resource name of the Firebase Realtime Database, in the format:
     * projects/PROJECT_NUMBER/locations/REGION_IDENTIFIER/instances/INSTANCE_ID PROJECT_NUMBER: The Firebase project's
     * ['ProjectNumber'](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
     * Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A reference to the region where the Firebase Realtime database resides. Check all [available
     * regions](https://firebase.google.com/docs/projects/locations#rtdb-locations)
     */
    region?: pulumi.Input<string>;
    /**
     * The current database state. Set desired_state to :DISABLED to disable the database and :ACTIVE to reenable the database
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirebaseDatabaseInstanceTimeouts>;
    /**
     * The database type. Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
     * Creating user Databases is only available for projects on the Blaze plan. Projects can be upgraded using the Cloud
     * Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo. Default value:
     * "USER_DATABASE" Possible values: ["DEFAULT_DATABASE", "USER_DATABASE"]
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirebaseDatabaseInstance resource.
 */
export interface FirebaseDatabaseInstanceArgs {
    /**
     * The intended database state. Possible values: ACTIVE, DISABLED.
     */
    desiredState?: pulumi.Input<string>;
    /**
     * The globally unique identifier of the Firebase Realtime Database instance. Instance IDs cannot be reused after deletion.
     */
    instanceId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A reference to the region where the Firebase Realtime database resides. Check all [available
     * regions](https://firebase.google.com/docs/projects/locations#rtdb-locations)
     */
    region: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirebaseDatabaseInstanceTimeouts>;
    /**
     * The database type. Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
     * Creating user Databases is only available for projects on the Blaze plan. Projects can be upgraded using the Cloud
     * Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo. Default value:
     * "USER_DATABASE" Possible values: ["DEFAULT_DATABASE", "USER_DATABASE"]
     */
    type?: pulumi.Input<string>;
}
