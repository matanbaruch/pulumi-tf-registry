// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cloudfunctions2Function extends pulumi.CustomResource {
    /**
     * Get an existing Cloudfunctions2Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cloudfunctions2FunctionState, opts?: pulumi.CustomResourceOptions): Cloudfunctions2Function {
        return new Cloudfunctions2Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/cloudfunctions2Function:Cloudfunctions2Function';

    /**
     * Returns true if the given object is an instance of Cloudfunctions2Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cloudfunctions2Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cloudfunctions2Function.__pulumiType;
    }

    /**
     * Describes the Build step of the function that builds a container from the given source.
     */
    public readonly buildConfig!: pulumi.Output<outputs.Cloudfunctions2FunctionBuildConfig | undefined>;
    /**
     * User-provided description of a function.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The environment the function is hosted on.
     */
    public /*out*/ readonly environment!: pulumi.Output<string>;
    /**
     * An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service.
     */
    public readonly eventTrigger!: pulumi.Output<outputs.Cloudfunctions2FunctionEventTrigger | undefined>;
    /**
     * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the
     * pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
     */
    public readonly kmsKeyName!: pulumi.Output<string | undefined>;
    /**
     * A set of key/value label pairs associated with this Cloud Function. **Note**: This field is non-authoritative, and will
     * only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of this cloud function.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * A user-defined name of the function. Function names must be unique globally and match pattern
     * 'projects/*&#47;locations/*&#47;functions/*'.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Describes the Service being deployed.
     */
    public readonly serviceConfig!: pulumi.Output<outputs.Cloudfunctions2FunctionServiceConfig | undefined>;
    /**
     * Describes the current state of the function.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.Cloudfunctions2FunctionTimeouts | undefined>;
    /**
     * The last update timestamp of a Cloud Function.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Output only. The deployed url for the function.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Cloudfunctions2Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Cloudfunctions2FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cloudfunctions2FunctionArgs | Cloudfunctions2FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cloudfunctions2FunctionState | undefined;
            resourceInputs["buildConfig"] = state ? state.buildConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["eventTrigger"] = state ? state.eventTrigger : undefined;
            resourceInputs["kmsKeyName"] = state ? state.kmsKeyName : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceConfig"] = state ? state.serviceConfig : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as Cloudfunctions2FunctionArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["buildConfig"] = args ? args.buildConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventTrigger"] = args ? args.eventTrigger : undefined;
            resourceInputs["kmsKeyName"] = args ? args.kmsKeyName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceConfig"] = args ? args.serviceConfig : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["environment"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cloudfunctions2Function.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cloudfunctions2Function resources.
 */
export interface Cloudfunctions2FunctionState {
    /**
     * Describes the Build step of the function that builds a container from the given source.
     */
    buildConfig?: pulumi.Input<inputs.Cloudfunctions2FunctionBuildConfig>;
    /**
     * User-provided description of a function.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The environment the function is hosted on.
     */
    environment?: pulumi.Input<string>;
    /**
     * An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service.
     */
    eventTrigger?: pulumi.Input<inputs.Cloudfunctions2FunctionEventTrigger>;
    /**
     * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the
     * pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
     */
    kmsKeyName?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs associated with this Cloud Function. **Note**: This field is non-authoritative, and will
     * only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of this cloud function.
     */
    location?: pulumi.Input<string>;
    /**
     * A user-defined name of the function. Function names must be unique globally and match pattern
     * 'projects/*&#47;locations/*&#47;functions/*'.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Describes the Service being deployed.
     */
    serviceConfig?: pulumi.Input<inputs.Cloudfunctions2FunctionServiceConfig>;
    /**
     * Describes the current state of the function.
     */
    state?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.Cloudfunctions2FunctionTimeouts>;
    /**
     * The last update timestamp of a Cloud Function.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Output only. The deployed url for the function.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cloudfunctions2Function resource.
 */
export interface Cloudfunctions2FunctionArgs {
    /**
     * Describes the Build step of the function that builds a container from the given source.
     */
    buildConfig?: pulumi.Input<inputs.Cloudfunctions2FunctionBuildConfig>;
    /**
     * User-provided description of a function.
     */
    description?: pulumi.Input<string>;
    /**
     * An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service.
     */
    eventTrigger?: pulumi.Input<inputs.Cloudfunctions2FunctionEventTrigger>;
    /**
     * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the
     * pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
     */
    kmsKeyName?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs associated with this Cloud Function. **Note**: This field is non-authoritative, and will
     * only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of this cloud function.
     */
    location: pulumi.Input<string>;
    /**
     * A user-defined name of the function. Function names must be unique globally and match pattern
     * 'projects/*&#47;locations/*&#47;functions/*'.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Describes the Service being deployed.
     */
    serviceConfig?: pulumi.Input<inputs.Cloudfunctions2FunctionServiceConfig>;
    timeouts?: pulumi.Input<inputs.Cloudfunctions2FunctionTimeouts>;
}
