// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GkeHubNamespace extends pulumi.CustomResource {
    /**
     * Get an existing GkeHubNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GkeHubNamespaceState, opts?: pulumi.CustomResourceOptions): GkeHubNamespace {
        return new GkeHubNamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/gkeHubNamespace:GkeHubNamespace';

    /**
     * Returns true if the given object is an instance of GkeHubNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GkeHubNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GkeHubNamespace.__pulumiType;
    }

    /**
     * Time the Namespace was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Time the Namespace was deleted in UTC.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Labels for this Namespace. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name for the namespace
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Namespace-level cluster namespace labels. These labels are applied to the related namespace of the member clusters bound
     * to the parent Scope. Scope-level labels ('namespace_labels' in the Fleet Scope resource) take precedence over
     * Namespace-level labels if they share a key. Keys and values must be Kubernetes-conformant.
     */
    public readonly namespaceLabels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The name of the Scope instance.
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Id of the scope
     */
    public readonly scopeId!: pulumi.Output<string>;
    /**
     * The client-provided identifier of the namespace.
     */
    public readonly scopeNamespaceId!: pulumi.Output<string>;
    /**
     * State of the namespace resource.
     */
    public /*out*/ readonly states!: pulumi.Output<outputs.GkeHubNamespaceState[]>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.GkeHubNamespaceTimeouts | undefined>;
    /**
     * Google-generated UUID for this resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Time the Namespace was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a GkeHubNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GkeHubNamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GkeHubNamespaceArgs | GkeHubNamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GkeHubNamespaceState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteTime"] = state ? state.deleteTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceLabels"] = state ? state.namespaceLabels : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["scopeId"] = state ? state.scopeId : undefined;
            resourceInputs["scopeNamespaceId"] = state ? state.scopeNamespaceId : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as GkeHubNamespaceArgs | undefined;
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.scopeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeId'");
            }
            if ((!args || args.scopeNamespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeNamespaceId'");
            }
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["namespaceLabels"] = args ? args.namespaceLabels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["scopeId"] = args ? args.scopeId : undefined;
            resourceInputs["scopeNamespaceId"] = args ? args.scopeNamespaceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GkeHubNamespace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GkeHubNamespace resources.
 */
export interface GkeHubNamespaceState {
    /**
     * Time the Namespace was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Time the Namespace was deleted in UTC.
     */
    deleteTime?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels for this Namespace. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name for the namespace
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace-level cluster namespace labels. These labels are applied to the related namespace of the member clusters bound
     * to the parent Scope. Scope-level labels ('namespace_labels' in the Fleet Scope resource) take precedence over
     * Namespace-level labels if they share a key. Keys and values must be Kubernetes-conformant.
     */
    namespaceLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    project?: pulumi.Input<string>;
    /**
     * The name of the Scope instance.
     */
    scope?: pulumi.Input<string>;
    /**
     * Id of the scope
     */
    scopeId?: pulumi.Input<string>;
    /**
     * The client-provided identifier of the namespace.
     */
    scopeNamespaceId?: pulumi.Input<string>;
    /**
     * State of the namespace resource.
     */
    states?: pulumi.Input<pulumi.Input<inputs.GkeHubNamespaceState>[]>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GkeHubNamespaceTimeouts>;
    /**
     * Google-generated UUID for this resource.
     */
    uid?: pulumi.Input<string>;
    /**
     * Time the Namespace was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GkeHubNamespace resource.
 */
export interface GkeHubNamespaceArgs {
    /**
     * Labels for this Namespace. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Namespace-level cluster namespace labels. These labels are applied to the related namespace of the member clusters bound
     * to the parent Scope. Scope-level labels ('namespace_labels' in the Fleet Scope resource) take precedence over
     * Namespace-level labels if they share a key. Keys and values must be Kubernetes-conformant.
     */
    namespaceLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    project?: pulumi.Input<string>;
    /**
     * The name of the Scope instance.
     */
    scope: pulumi.Input<string>;
    /**
     * Id of the scope
     */
    scopeId: pulumi.Input<string>;
    /**
     * The client-provided identifier of the namespace.
     */
    scopeNamespaceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GkeHubNamespaceTimeouts>;
}
