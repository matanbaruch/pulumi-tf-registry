// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitoringMonitoredProject extends pulumi.CustomResource {
    /**
     * Get an existing MonitoringMonitoredProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitoringMonitoredProjectState, opts?: pulumi.CustomResourceOptions): MonitoringMonitoredProject {
        return new MonitoringMonitoredProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/monitoringMonitoredProject:MonitoringMonitoredProject';

    /**
     * Returns true if the given object is an instance of MonitoringMonitoredProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitoringMonitoredProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitoringMonitoredProject.__pulumiType;
    }

    /**
     * Output only. The time when this 'MonitoredProject' was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Required. The resource name of the existing Metrics Scope that will monitor this project. Example:
     * locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
     */
    public readonly metricsScope!: pulumi.Output<string>;
    /**
     * Immutable. The resource name of the 'MonitoredProject'. On input, the resource name includes the scoping project ID and
     * monitored project ID. On output, it contains the equivalent project numbers. Example:
     * 'locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}'
     */
    public readonly name!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MonitoringMonitoredProjectTimeouts | undefined>;

    /**
     * Create a MonitoringMonitoredProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitoringMonitoredProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitoringMonitoredProjectArgs | MonitoringMonitoredProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitoringMonitoredProjectState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["metricsScope"] = state ? state.metricsScope : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MonitoringMonitoredProjectArgs | undefined;
            if ((!args || args.metricsScope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricsScope'");
            }
            resourceInputs["metricsScope"] = args ? args.metricsScope : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitoringMonitoredProject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitoringMonitoredProject resources.
 */
export interface MonitoringMonitoredProjectState {
    /**
     * Output only. The time when this 'MonitoredProject' was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Required. The resource name of the existing Metrics Scope that will monitor this project. Example:
     * locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
     */
    metricsScope?: pulumi.Input<string>;
    /**
     * Immutable. The resource name of the 'MonitoredProject'. On input, the resource name includes the scoping project ID and
     * monitored project ID. On output, it contains the equivalent project numbers. Example:
     * 'locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}'
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitoringMonitoredProjectTimeouts>;
}

/**
 * The set of arguments for constructing a MonitoringMonitoredProject resource.
 */
export interface MonitoringMonitoredProjectArgs {
    /**
     * Required. The resource name of the existing Metrics Scope that will monitor this project. Example:
     * locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}
     */
    metricsScope: pulumi.Input<string>;
    /**
     * Immutable. The resource name of the 'MonitoredProject'. On input, the resource name includes the scoping project ID and
     * monitored project ID. On output, it contains the equivalent project numbers. Example:
     * 'locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}'
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitoringMonitoredProjectTimeouts>;
}
