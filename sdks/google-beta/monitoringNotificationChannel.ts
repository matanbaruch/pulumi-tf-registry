// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitoringNotificationChannel extends pulumi.CustomResource {
    /**
     * Get an existing MonitoringNotificationChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitoringNotificationChannelState, opts?: pulumi.CustomResourceOptions): MonitoringNotificationChannel {
        return new MonitoringNotificationChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/monitoringNotificationChannel:MonitoringNotificationChannel';

    /**
     * Returns true if the given object is an instance of MonitoringNotificationChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitoringNotificationChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitoringNotificationChannel.__pulumiType;
    }

    /**
     * An optional human-readable description of this notification channel. This description may provide additional details,
     * beyond the display name, for the channel. This may not exceed 1024 Unicode characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An optional human-readable name for this notification channel. It is recommended that you specify a non-empty and unique
     * name in order to make it easier to identify the channels in your project, though this is not enforced. The display name
     * is limited to 512 Unicode characters.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Whether notifications are forwarded to the described channel. This makes it possible to disable delivery of
     * notifications to a particular channel without removing the channel from all alerting policies that reference the
     * channel. This is a more convenient approach when the change is temporary and you want to receive notifications from the
     * same set of alerting policies on the channel at some point in the future.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * If true, the notification channel will be deleted regardless of its use in alert policies (the policies will be updated
     * to remove the channel). If false, channels that are still referenced by an existing alerting policy will fail to be
     * deleted in a delete operation.
     */
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The full REST resource name for this channel. The syntax is: projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID] The
     * [CHANNEL_ID] is automatically assigned by the server on creation.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Different notification type behaviors are configured primarily using the the 'labels' field on this resource. This block
     * contains the labels which contain secrets or passwords so that they can be marked sensitive and hidden from plan output.
     * The name of the field, eg: password, will be the key in the 'labels' map in the api request. Credentials may not be
     * specified in both locations and will cause an error. Changing from one location to a different credential configuration
     * in the config will require an apply to update state.
     */
    public readonly sensitiveLabels!: pulumi.Output<outputs.MonitoringNotificationChannelSensitiveLabels | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MonitoringNotificationChannelTimeouts | undefined>;
    /**
     * The type of the notification channel. This field matches the value of the NotificationChannelDescriptor.type field. See
     * https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannelDescriptors/list to get the list of
     * valid values such as "email", "slack", etc...
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * User-supplied key/value data that does not need to conform to the corresponding NotificationChannelDescriptor's schema,
     * unlike the labels field. This field is intended to be used for organizing and identifying the NotificationChannel
     * objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes,
     * whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must
     * begin with a letter.
     */
    public readonly userLabels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Indicates whether this channel has been verified or not. On a ListNotificationChannels or GetNotificationChannel
     * operation, this field is expected to be populated.If the value is UNVERIFIED, then it indicates that the channel is
     * non-functioning (it both requires verification and lacks verification); otherwise, it is assumed that the channel
     * works.If the channel is neither VERIFIED nor UNVERIFIED, it implies that the channel is of a type that does not require
     * verification or that this specific channel has been exempted from verification because it was created prior to
     * verification being required for channels of this type.This field cannot be modified using a standard
     * UpdateNotificationChannel operation. To change the value of this field, you must call VerifyNotificationChannel.
     */
    public /*out*/ readonly verificationStatus!: pulumi.Output<string>;

    /**
     * Create a MonitoringNotificationChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitoringNotificationChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitoringNotificationChannelArgs | MonitoringNotificationChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitoringNotificationChannelState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["sensitiveLabels"] = state ? state.sensitiveLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userLabels"] = state ? state.userLabels : undefined;
            resourceInputs["verificationStatus"] = state ? state.verificationStatus : undefined;
        } else {
            const args = argsOrState as MonitoringNotificationChannelArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sensitiveLabels"] = args ? args.sensitiveLabels : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userLabels"] = args ? args.userLabels : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["verificationStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitoringNotificationChannel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitoringNotificationChannel resources.
 */
export interface MonitoringNotificationChannelState {
    /**
     * An optional human-readable description of this notification channel. This description may provide additional details,
     * beyond the display name, for the channel. This may not exceed 1024 Unicode characters.
     */
    description?: pulumi.Input<string>;
    /**
     * An optional human-readable name for this notification channel. It is recommended that you specify a non-empty and unique
     * name in order to make it easier to identify the channels in your project, though this is not enforced. The display name
     * is limited to 512 Unicode characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Whether notifications are forwarded to the described channel. This makes it possible to disable delivery of
     * notifications to a particular channel without removing the channel from all alerting policies that reference the
     * channel. This is a more convenient approach when the change is temporary and you want to receive notifications from the
     * same set of alerting policies on the channel at some point in the future.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If true, the notification channel will be deleted regardless of its use in alert policies (the policies will be updated
     * to remove the channel). If false, channels that are still referenced by an existing alerting policy will fail to be
     * deleted in a delete operation.
     */
    forceDelete?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The full REST resource name for this channel. The syntax is: projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID] The
     * [CHANNEL_ID] is automatically assigned by the server on creation.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Different notification type behaviors are configured primarily using the the 'labels' field on this resource. This block
     * contains the labels which contain secrets or passwords so that they can be marked sensitive and hidden from plan output.
     * The name of the field, eg: password, will be the key in the 'labels' map in the api request. Credentials may not be
     * specified in both locations and will cause an error. Changing from one location to a different credential configuration
     * in the config will require an apply to update state.
     */
    sensitiveLabels?: pulumi.Input<inputs.MonitoringNotificationChannelSensitiveLabels>;
    timeouts?: pulumi.Input<inputs.MonitoringNotificationChannelTimeouts>;
    /**
     * The type of the notification channel. This field matches the value of the NotificationChannelDescriptor.type field. See
     * https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannelDescriptors/list to get the list of
     * valid values such as "email", "slack", etc...
     */
    type?: pulumi.Input<string>;
    /**
     * User-supplied key/value data that does not need to conform to the corresponding NotificationChannelDescriptor's schema,
     * unlike the labels field. This field is intended to be used for organizing and identifying the NotificationChannel
     * objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes,
     * whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must
     * begin with a letter.
     */
    userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates whether this channel has been verified or not. On a ListNotificationChannels or GetNotificationChannel
     * operation, this field is expected to be populated.If the value is UNVERIFIED, then it indicates that the channel is
     * non-functioning (it both requires verification and lacks verification); otherwise, it is assumed that the channel
     * works.If the channel is neither VERIFIED nor UNVERIFIED, it implies that the channel is of a type that does not require
     * verification or that this specific channel has been exempted from verification because it was created prior to
     * verification being required for channels of this type.This field cannot be modified using a standard
     * UpdateNotificationChannel operation. To change the value of this field, you must call VerifyNotificationChannel.
     */
    verificationStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MonitoringNotificationChannel resource.
 */
export interface MonitoringNotificationChannelArgs {
    /**
     * An optional human-readable description of this notification channel. This description may provide additional details,
     * beyond the display name, for the channel. This may not exceed 1024 Unicode characters.
     */
    description?: pulumi.Input<string>;
    /**
     * An optional human-readable name for this notification channel. It is recommended that you specify a non-empty and unique
     * name in order to make it easier to identify the channels in your project, though this is not enforced. The display name
     * is limited to 512 Unicode characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Whether notifications are forwarded to the described channel. This makes it possible to disable delivery of
     * notifications to a particular channel without removing the channel from all alerting policies that reference the
     * channel. This is a more convenient approach when the change is temporary and you want to receive notifications from the
     * same set of alerting policies on the channel at some point in the future.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If true, the notification channel will be deleted regardless of its use in alert policies (the policies will be updated
     * to remove the channel). If false, channels that are still referenced by an existing alerting policy will fail to be
     * deleted in a delete operation.
     */
    forceDelete?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    project?: pulumi.Input<string>;
    /**
     * Different notification type behaviors are configured primarily using the the 'labels' field on this resource. This block
     * contains the labels which contain secrets or passwords so that they can be marked sensitive and hidden from plan output.
     * The name of the field, eg: password, will be the key in the 'labels' map in the api request. Credentials may not be
     * specified in both locations and will cause an error. Changing from one location to a different credential configuration
     * in the config will require an apply to update state.
     */
    sensitiveLabels?: pulumi.Input<inputs.MonitoringNotificationChannelSensitiveLabels>;
    timeouts?: pulumi.Input<inputs.MonitoringNotificationChannelTimeouts>;
    /**
     * The type of the notification channel. This field matches the value of the NotificationChannelDescriptor.type field. See
     * https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.notificationChannelDescriptors/list to get the list of
     * valid values such as "email", "slack", etc...
     */
    type: pulumi.Input<string>;
    /**
     * User-supplied key/value data that does not need to conform to the corresponding NotificationChannelDescriptor's schema,
     * unlike the labels field. This field is intended to be used for organizing and identifying the NotificationChannel
     * objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes,
     * whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must
     * begin with a letter.
     */
    userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
