// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing ComputeSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeSnapshotState, opts?: pulumi.CustomResourceOptions): ComputeSnapshot {
        return new ComputeSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/computeSnapshot:ComputeSnapshot';

    /**
     * Returns true if the given object is an instance of ComputeSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeSnapshot.__pulumiType;
    }

    /**
     * Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters
     * long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate
     * snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible
     * only if it has a non-empty value.
     */
    public readonly chainName!: pulumi.Output<string | undefined>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Size of the snapshot, specified in GB.
     */
    public /*out*/ readonly diskSizeGb!: pulumi.Output<number>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The fingerprint used for optimistic locking of this resource. Used internally during updates.
     */
    public /*out*/ readonly labelFingerprint!: pulumi.Output<string>;
    /**
     * Labels to apply to this Snapshot. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses
     * attached (such as a Windows image). snapshotEncryptionKey nested object Encrypts the snapshot using a customer-supplied
     * encryption key.
     */
    public /*out*/ readonly licenses!: pulumi.Output<string[]>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
     * means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
     * digit, except the last character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Encrypts the snapshot using a customer-supplied encryption key. After you encrypt a snapshot using a customer-supplied
     * key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when
     * you create a disk from the encrypted snapshot in a future request. Customer-supplied encryption keys do not protect
     * access to metadata of the snapshot. If you do not provide an encryption key when creating the snapshot, then the
     * snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot
     * later.
     */
    public readonly snapshotEncryptionKey!: pulumi.Output<outputs.ComputeSnapshotSnapshotEncryptionKey | undefined>;
    /**
     * The unique identifier for the resource.
     */
    public /*out*/ readonly snapshotId!: pulumi.Output<number>;
    /**
     * A reference to the disk used to create this snapshot.
     */
    public readonly sourceDisk!: pulumi.Output<string>;
    /**
     * The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a
     * customer-supplied encryption key.
     */
    public readonly sourceDiskEncryptionKey!: pulumi.Output<outputs.ComputeSnapshotSourceDiskEncryptionKey | undefined>;
    /**
     * A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot
     * creation/deletion.
     */
    public /*out*/ readonly storageBytes!: pulumi.Output<number>;
    /**
     * Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
     */
    public readonly storageLocations!: pulumi.Output<string[]>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeSnapshotTimeouts | undefined>;
    /**
     * A reference to the zone where the disk is hosted.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a ComputeSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeSnapshotArgs | ComputeSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeSnapshotState | undefined;
            resourceInputs["chainName"] = state ? state.chainName : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labelFingerprint"] = state ? state.labelFingerprint : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["licenses"] = state ? state.licenses : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["snapshotEncryptionKey"] = state ? state.snapshotEncryptionKey : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["sourceDisk"] = state ? state.sourceDisk : undefined;
            resourceInputs["sourceDiskEncryptionKey"] = state ? state.sourceDiskEncryptionKey : undefined;
            resourceInputs["storageBytes"] = state ? state.storageBytes : undefined;
            resourceInputs["storageLocations"] = state ? state.storageLocations : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ComputeSnapshotArgs | undefined;
            if ((!args || args.sourceDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceDisk'");
            }
            resourceInputs["chainName"] = args ? args.chainName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["snapshotEncryptionKey"] = args ? args.snapshotEncryptionKey : undefined;
            resourceInputs["sourceDisk"] = args ? args.sourceDisk : undefined;
            resourceInputs["sourceDiskEncryptionKey"] = args ? args.sourceDiskEncryptionKey : undefined;
            resourceInputs["storageLocations"] = args ? args.storageLocations : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["diskSizeGb"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["labelFingerprint"] = undefined /*out*/;
            resourceInputs["licenses"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["snapshotId"] = undefined /*out*/;
            resourceInputs["storageBytes"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeSnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeSnapshot resources.
 */
export interface ComputeSnapshotState {
    /**
     * Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters
     * long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate
     * snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible
     * only if it has a non-empty value.
     */
    chainName?: pulumi.Input<string>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Size of the snapshot, specified in GB.
     */
    diskSizeGb?: pulumi.Input<number>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The fingerprint used for optimistic locking of this resource. Used internally during updates.
     */
    labelFingerprint?: pulumi.Input<string>;
    /**
     * Labels to apply to this Snapshot. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses
     * attached (such as a Windows image). snapshotEncryptionKey nested object Encrypts the snapshot using a customer-supplied
     * encryption key.
     */
    licenses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
     * means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
     * digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    /**
     * Encrypts the snapshot using a customer-supplied encryption key. After you encrypt a snapshot using a customer-supplied
     * key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when
     * you create a disk from the encrypted snapshot in a future request. Customer-supplied encryption keys do not protect
     * access to metadata of the snapshot. If you do not provide an encryption key when creating the snapshot, then the
     * snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot
     * later.
     */
    snapshotEncryptionKey?: pulumi.Input<inputs.ComputeSnapshotSnapshotEncryptionKey>;
    /**
     * The unique identifier for the resource.
     */
    snapshotId?: pulumi.Input<number>;
    /**
     * A reference to the disk used to create this snapshot.
     */
    sourceDisk?: pulumi.Input<string>;
    /**
     * The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a
     * customer-supplied encryption key.
     */
    sourceDiskEncryptionKey?: pulumi.Input<inputs.ComputeSnapshotSourceDiskEncryptionKey>;
    /**
     * A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot
     * creation/deletion.
     */
    storageBytes?: pulumi.Input<number>;
    /**
     * Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
     */
    storageLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ComputeSnapshotTimeouts>;
    /**
     * A reference to the zone where the disk is hosted.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeSnapshot resource.
 */
export interface ComputeSnapshotArgs {
    /**
     * Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters
     * long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate
     * snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible
     * only if it has a non-empty value.
     */
    chainName?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels to apply to this Snapshot. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
     * means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
     * digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Encrypts the snapshot using a customer-supplied encryption key. After you encrypt a snapshot using a customer-supplied
     * key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when
     * you create a disk from the encrypted snapshot in a future request. Customer-supplied encryption keys do not protect
     * access to metadata of the snapshot. If you do not provide an encryption key when creating the snapshot, then the
     * snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot
     * later.
     */
    snapshotEncryptionKey?: pulumi.Input<inputs.ComputeSnapshotSnapshotEncryptionKey>;
    /**
     * A reference to the disk used to create this snapshot.
     */
    sourceDisk: pulumi.Input<string>;
    /**
     * The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a
     * customer-supplied encryption key.
     */
    sourceDiskEncryptionKey?: pulumi.Input<inputs.ComputeSnapshotSourceDiskEncryptionKey>;
    /**
     * Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
     */
    storageLocations?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ComputeSnapshotTimeouts>;
    /**
     * A reference to the zone where the disk is hosted.
     */
    zone?: pulumi.Input<string>;
}
