// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagedKafkaTopic extends pulumi.CustomResource {
    /**
     * Get an existing ManagedKafkaTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedKafkaTopicState, opts?: pulumi.CustomResourceOptions): ManagedKafkaTopic {
        return new ManagedKafkaTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/managedKafkaTopic:ManagedKafkaTopic';

    /**
     * Returns true if the given object is an instance of ManagedKafkaTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedKafkaTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedKafkaTopic.__pulumiType;
    }

    /**
     * The cluster name.
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property
     * name, for example: 'cleanup.policy=compact', 'compression.type=producer'.
     */
    public readonly configs!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of
     * supported locations.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the topic. The 'topic' segment is used when connecting directly to the cluster. Must be in the format
     * 'projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/topics/TOPIC_ID'.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it.
     * Increasing partitions for a topic that uses a key might change how messages are distributed.
     */
    public readonly partitionCount!: pulumi.Output<number | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
     */
    public readonly replicationFactor!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.ManagedKafkaTopicTimeouts | undefined>;
    /**
     * The ID to use for the topic, which will become the final component of the topic's name. This value is structured like:
     * 'my-topic-name'.
     */
    public readonly topicId!: pulumi.Output<string>;

    /**
     * Create a ManagedKafkaTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedKafkaTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedKafkaTopicArgs | ManagedKafkaTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedKafkaTopicState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partitionCount"] = state ? state.partitionCount : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["replicationFactor"] = state ? state.replicationFactor : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
        } else {
            const args = argsOrState as ManagedKafkaTopicArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.replicationFactor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationFactor'");
            }
            if ((!args || args.topicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicId'");
            }
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["partitionCount"] = args ? args.partitionCount : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topicId"] = args ? args.topicId : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedKafkaTopic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagedKafkaTopic resources.
 */
export interface ManagedKafkaTopicState {
    /**
     * The cluster name.
     */
    cluster?: pulumi.Input<string>;
    /**
     * Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property
     * name, for example: 'cleanup.policy=compact', 'compression.type=producer'.
     */
    configs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of
     * supported locations.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the topic. The 'topic' segment is used when connecting directly to the cluster. Must be in the format
     * 'projects/PROJECT_ID/locations/LOCATION/clusters/CLUSTER_ID/topics/TOPIC_ID'.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it.
     * Increasing partitions for a topic that uses a key might change how messages are distributed.
     */
    partitionCount?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
     */
    replicationFactor?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ManagedKafkaTopicTimeouts>;
    /**
     * The ID to use for the topic, which will become the final component of the topic's name. This value is structured like:
     * 'my-topic-name'.
     */
    topicId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedKafkaTopic resource.
 */
export interface ManagedKafkaTopicArgs {
    /**
     * The cluster name.
     */
    cluster: pulumi.Input<string>;
    /**
     * Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property
     * name, for example: 'cleanup.policy=compact', 'compression.type=producer'.
     */
    configs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of
     * supported locations.
     */
    location: pulumi.Input<string>;
    /**
     * The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it.
     * Increasing partitions for a topic that uses a key might change how messages are distributed.
     */
    partitionCount?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
     */
    replicationFactor: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ManagedKafkaTopicTimeouts>;
    /**
     * The ID to use for the topic, which will become the final component of the topic's name. This value is structured like:
     * 'my-topic-name'.
     */
    topicId: pulumi.Input<string>;
}
