// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMonitoringAppEngineService(args: GetMonitoringAppEngineServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringAppEngineServiceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-beta:index/getMonitoringAppEngineService:getMonitoringAppEngineService", {
        "id": args.id,
        "moduleId": args.moduleId,
        "project": args.project,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitoringAppEngineService.
 */
export interface GetMonitoringAppEngineServiceArgs {
    id?: string;
    moduleId: string;
    project?: string;
}

/**
 * A collection of values returned by getMonitoringAppEngineService.
 */
export interface GetMonitoringAppEngineServiceResult {
    readonly displayName: string;
    readonly id: string;
    readonly moduleId: string;
    readonly name: string;
    readonly project?: string;
    readonly serviceId: string;
    readonly telemetries: outputs.GetMonitoringAppEngineServiceTelemetry[];
    readonly userLabels: {[key: string]: string};
}
export function getMonitoringAppEngineServiceOutput(args: GetMonitoringAppEngineServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitoringAppEngineServiceResult> {
    return pulumi.output(args).apply((a: any) => getMonitoringAppEngineService(a, opts))
}

/**
 * A collection of arguments for invoking getMonitoringAppEngineService.
 */
export interface GetMonitoringAppEngineServiceOutputArgs {
    id?: pulumi.Input<string>;
    moduleId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
