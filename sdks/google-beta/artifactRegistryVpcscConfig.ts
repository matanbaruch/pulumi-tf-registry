// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ArtifactRegistryVpcscConfig extends pulumi.CustomResource {
    /**
     * Get an existing ArtifactRegistryVpcscConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArtifactRegistryVpcscConfigState, opts?: pulumi.CustomResourceOptions): ArtifactRegistryVpcscConfig {
        return new ArtifactRegistryVpcscConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/artifactRegistryVpcscConfig:ArtifactRegistryVpcscConfig';

    /**
     * Returns true if the given object is an instance of ArtifactRegistryVpcscConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArtifactRegistryVpcscConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArtifactRegistryVpcscConfig.__pulumiType;
    }

    /**
     * The name of the location this config is located in.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the project's VPC SC Config. Always of the form: projects/{project}/location/{location}/vpcscConfig
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ArtifactRegistryVpcscConfigTimeouts | undefined>;
    /**
     * The VPC SC policy for project and location. Possible values: ["DENY", "ALLOW"]
     */
    public readonly vpcscPolicy!: pulumi.Output<string | undefined>;

    /**
     * Create a ArtifactRegistryVpcscConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ArtifactRegistryVpcscConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArtifactRegistryVpcscConfigArgs | ArtifactRegistryVpcscConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArtifactRegistryVpcscConfigState | undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcscPolicy"] = state ? state.vpcscPolicy : undefined;
        } else {
            const args = argsOrState as ArtifactRegistryVpcscConfigArgs | undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcscPolicy"] = args ? args.vpcscPolicy : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ArtifactRegistryVpcscConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArtifactRegistryVpcscConfig resources.
 */
export interface ArtifactRegistryVpcscConfigState {
    /**
     * The name of the location this config is located in.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the project's VPC SC Config. Always of the form: projects/{project}/location/{location}/vpcscConfig
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ArtifactRegistryVpcscConfigTimeouts>;
    /**
     * The VPC SC policy for project and location. Possible values: ["DENY", "ALLOW"]
     */
    vpcscPolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ArtifactRegistryVpcscConfig resource.
 */
export interface ArtifactRegistryVpcscConfigArgs {
    /**
     * The name of the location this config is located in.
     */
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ArtifactRegistryVpcscConfigTimeouts>;
    /**
     * The VPC SC policy for project and location. Possible values: ["DENY", "ALLOW"]
     */
    vpcscPolicy?: pulumi.Input<string>;
}
