// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SqlUser extends pulumi.CustomResource {
    /**
     * Get an existing SqlUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlUserState, opts?: pulumi.CustomResourceOptions): SqlUser {
        return new SqlUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/sqlUser:SqlUser';

    /**
     * Returns true if the given object is an instance of SqlUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlUser.__pulumiType;
    }

    /**
     * The deletion policy for the user. Setting ABANDON allows the resource to be abandoned rather than deleted. This is
     * useful for Postgres, where users cannot be deleted from the API if they have been granted SQL roles. Possible values
     * are: "ABANDON".
     */
    public readonly deletionPolicy!: pulumi.Output<string | undefined>;
    /**
     * The host the user can connect from. This is only supported for MySQL instances. Don't set this field for PostgreSQL
     * instances. Can be an IP address. Changing this forces a new resource to be created.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The name of the Cloud SQL instance. Changing this forces a new resource to be created.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * The name of the user. Changing this forces a new resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password for the user. Can be updated. For Postgres instances this is a Required field, unless type is set to either
     * CLOUD_IAM_USER or CLOUD_IAM_SERVICE_ACCOUNT.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly passwordPolicy!: pulumi.Output<outputs.SqlUserPasswordPolicy | undefined>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    public /*out*/ readonly sqlServerUserDetails!: pulumi.Output<outputs.SqlUserSqlServerUserDetail[]>;
    public readonly timeouts!: pulumi.Output<outputs.SqlUserTimeouts | undefined>;
    /**
     * The user type. It determines the method to authenticate the user during login. The default is the database's built-in
     * user type.
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a SqlUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlUserArgs | SqlUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlUserState | undefined;
            resourceInputs["deletionPolicy"] = state ? state.deletionPolicy : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordPolicy"] = state ? state.passwordPolicy : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["sqlServerUserDetails"] = state ? state.sqlServerUserDetails : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SqlUserArgs | undefined;
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            resourceInputs["deletionPolicy"] = args ? args.deletionPolicy : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordPolicy"] = args ? args.passwordPolicy : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["sqlServerUserDetails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SqlUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SqlUser resources.
 */
export interface SqlUserState {
    /**
     * The deletion policy for the user. Setting ABANDON allows the resource to be abandoned rather than deleted. This is
     * useful for Postgres, where users cannot be deleted from the API if they have been granted SQL roles. Possible values
     * are: "ABANDON".
     */
    deletionPolicy?: pulumi.Input<string>;
    /**
     * The host the user can connect from. This is only supported for MySQL instances. Don't set this field for PostgreSQL
     * instances. Can be an IP address. Changing this forces a new resource to be created.
     */
    host?: pulumi.Input<string>;
    /**
     * The name of the Cloud SQL instance. Changing this forces a new resource to be created.
     */
    instance?: pulumi.Input<string>;
    /**
     * The name of the user. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the user. Can be updated. For Postgres instances this is a Required field, unless type is set to either
     * CLOUD_IAM_USER or CLOUD_IAM_SERVICE_ACCOUNT.
     */
    password?: pulumi.Input<string>;
    passwordPolicy?: pulumi.Input<inputs.SqlUserPasswordPolicy>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    sqlServerUserDetails?: pulumi.Input<pulumi.Input<inputs.SqlUserSqlServerUserDetail>[]>;
    timeouts?: pulumi.Input<inputs.SqlUserTimeouts>;
    /**
     * The user type. It determines the method to authenticate the user during login. The default is the database's built-in
     * user type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlUser resource.
 */
export interface SqlUserArgs {
    /**
     * The deletion policy for the user. Setting ABANDON allows the resource to be abandoned rather than deleted. This is
     * useful for Postgres, where users cannot be deleted from the API if they have been granted SQL roles. Possible values
     * are: "ABANDON".
     */
    deletionPolicy?: pulumi.Input<string>;
    /**
     * The host the user can connect from. This is only supported for MySQL instances. Don't set this field for PostgreSQL
     * instances. Can be an IP address. Changing this forces a new resource to be created.
     */
    host?: pulumi.Input<string>;
    /**
     * The name of the Cloud SQL instance. Changing this forces a new resource to be created.
     */
    instance: pulumi.Input<string>;
    /**
     * The name of the user. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the user. Can be updated. For Postgres instances this is a Required field, unless type is set to either
     * CLOUD_IAM_USER or CLOUD_IAM_SERVICE_ACCOUNT.
     */
    password?: pulumi.Input<string>;
    passwordPolicy?: pulumi.Input<inputs.SqlUserPasswordPolicy>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SqlUserTimeouts>;
    /**
     * The user type. It determines the method to authenticate the user during login. The default is the database's built-in
     * user type.
     */
    type?: pulumi.Input<string>;
}
