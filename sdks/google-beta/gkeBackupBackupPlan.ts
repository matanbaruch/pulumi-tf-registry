// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GkeBackupBackupPlan extends pulumi.CustomResource {
    /**
     * Get an existing GkeBackupBackupPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GkeBackupBackupPlanState, opts?: pulumi.CustomResourceOptions): GkeBackupBackupPlan {
        return new GkeBackupBackupPlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/gkeBackupBackupPlan:GkeBackupBackupPlan';

    /**
     * Returns true if the given object is an instance of GkeBackupBackupPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GkeBackupBackupPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GkeBackupBackupPlan.__pulumiType;
    }

    /**
     * Defines the configuration of Backups created via this BackupPlan.
     */
    public readonly backupConfig!: pulumi.Output<outputs.GkeBackupBackupPlanBackupConfig | undefined>;
    /**
     * Defines a schedule for automatic Backup creation via this BackupPlan.
     */
    public readonly backupSchedule!: pulumi.Output<outputs.GkeBackupBackupPlanBackupSchedule | undefined>;
    /**
     * The source cluster from which Backups will be created via this BackupPlan.
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such
     * that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any
     * new Backups from being created via this BackupPlan (including scheduled Backups).
     */
    public readonly deactivated!: pulumi.Output<boolean>;
    /**
     * User specified descriptive string for this BackupPlan.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from
     * overwriting each other. It is strongly suggested that systems make use of the 'etag' in the read-modify-write cycle to
     * perform BackupPlan updates in order to avoid race conditions: An etag is returned in the response to backupPlans.get,
     * and systems are expected to put that etag in the request to backupPlans.patch or backupPlans.delete to ensure that their
     * change will be applied to the same version of the resource.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Description: A set of custom labels supplied by the user. A list of key->value pairs. Example: { "name": "wrench",
     * "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The region of the Backup Plan.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The full name of the BackupPlan Resource.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The number of Kubernetes Pods backed up in the last successful Backup created via this BackupPlan.
     */
    public /*out*/ readonly protectedPodCount!: pulumi.Output<number>;
    /**
     * RetentionPolicy governs lifecycle of Backups created under this plan.
     */
    public readonly retentionPolicy!: pulumi.Output<outputs.GkeBackupBackupPlanRetentionPolicy | undefined>;
    /**
     * The State of the BackupPlan.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Detailed description of why BackupPlan is in its current state.
     */
    public /*out*/ readonly stateReason!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.GkeBackupBackupPlanTimeouts | undefined>;
    /**
     * Server generated, unique identifier of UUID format.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;

    /**
     * Create a GkeBackupBackupPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GkeBackupBackupPlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GkeBackupBackupPlanArgs | GkeBackupBackupPlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GkeBackupBackupPlanState | undefined;
            resourceInputs["backupConfig"] = state ? state.backupConfig : undefined;
            resourceInputs["backupSchedule"] = state ? state.backupSchedule : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["deactivated"] = state ? state.deactivated : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["protectedPodCount"] = state ? state.protectedPodCount : undefined;
            resourceInputs["retentionPolicy"] = state ? state.retentionPolicy : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateReason"] = state ? state.stateReason : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        } else {
            const args = argsOrState as GkeBackupBackupPlanArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["backupConfig"] = args ? args.backupConfig : undefined;
            resourceInputs["backupSchedule"] = args ? args.backupSchedule : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["deactivated"] = args ? args.deactivated : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["retentionPolicy"] = args ? args.retentionPolicy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["protectedPodCount"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GkeBackupBackupPlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GkeBackupBackupPlan resources.
 */
export interface GkeBackupBackupPlanState {
    /**
     * Defines the configuration of Backups created via this BackupPlan.
     */
    backupConfig?: pulumi.Input<inputs.GkeBackupBackupPlanBackupConfig>;
    /**
     * Defines a schedule for automatic Backup creation via this BackupPlan.
     */
    backupSchedule?: pulumi.Input<inputs.GkeBackupBackupPlanBackupSchedule>;
    /**
     * The source cluster from which Backups will be created via this BackupPlan.
     */
    cluster?: pulumi.Input<string>;
    /**
     * This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such
     * that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any
     * new Backups from being created via this BackupPlan (including scheduled Backups).
     */
    deactivated?: pulumi.Input<boolean>;
    /**
     * User specified descriptive string for this BackupPlan.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from
     * overwriting each other. It is strongly suggested that systems make use of the 'etag' in the read-modify-write cycle to
     * perform BackupPlan updates in order to avoid race conditions: An etag is returned in the response to backupPlans.get,
     * and systems are expected to put that etag in the request to backupPlans.patch or backupPlans.delete to ensure that their
     * change will be applied to the same version of the resource.
     */
    etag?: pulumi.Input<string>;
    /**
     * Description: A set of custom labels supplied by the user. A list of key->value pairs. Example: { "name": "wrench",
     * "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region of the Backup Plan.
     */
    location?: pulumi.Input<string>;
    /**
     * The full name of the BackupPlan Resource.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The number of Kubernetes Pods backed up in the last successful Backup created via this BackupPlan.
     */
    protectedPodCount?: pulumi.Input<number>;
    /**
     * RetentionPolicy governs lifecycle of Backups created under this plan.
     */
    retentionPolicy?: pulumi.Input<inputs.GkeBackupBackupPlanRetentionPolicy>;
    /**
     * The State of the BackupPlan.
     */
    state?: pulumi.Input<string>;
    /**
     * Detailed description of why BackupPlan is in its current state.
     */
    stateReason?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GkeBackupBackupPlanTimeouts>;
    /**
     * Server generated, unique identifier of UUID format.
     */
    uid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GkeBackupBackupPlan resource.
 */
export interface GkeBackupBackupPlanArgs {
    /**
     * Defines the configuration of Backups created via this BackupPlan.
     */
    backupConfig?: pulumi.Input<inputs.GkeBackupBackupPlanBackupConfig>;
    /**
     * Defines a schedule for automatic Backup creation via this BackupPlan.
     */
    backupSchedule?: pulumi.Input<inputs.GkeBackupBackupPlanBackupSchedule>;
    /**
     * The source cluster from which Backups will be created via this BackupPlan.
     */
    cluster: pulumi.Input<string>;
    /**
     * This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such
     * that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any
     * new Backups from being created via this BackupPlan (including scheduled Backups).
     */
    deactivated?: pulumi.Input<boolean>;
    /**
     * User specified descriptive string for this BackupPlan.
     */
    description?: pulumi.Input<string>;
    /**
     * Description: A set of custom labels supplied by the user. A list of key->value pairs. Example: { "name": "wrench",
     * "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region of the Backup Plan.
     */
    location: pulumi.Input<string>;
    /**
     * The full name of the BackupPlan Resource.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * RetentionPolicy governs lifecycle of Backups created under this plan.
     */
    retentionPolicy?: pulumi.Input<inputs.GkeBackupBackupPlanRetentionPolicy>;
    timeouts?: pulumi.Input<inputs.GkeBackupBackupPlanTimeouts>;
}
