// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IntegrationConnectorsConnection extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationConnectorsConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationConnectorsConnectionState, opts?: pulumi.CustomResourceOptions): IntegrationConnectorsConnection {
        return new IntegrationConnectorsConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/integrationConnectorsConnection:IntegrationConnectorsConnection';

    /**
     * Returns true if the given object is an instance of IntegrationConnectorsConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationConnectorsConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationConnectorsConnection.__pulumiType;
    }

    /**
     * authConfig for the connection.
     */
    public readonly authConfig!: pulumi.Output<outputs.IntegrationConnectorsConnectionAuthConfig | undefined>;
    /**
     * Config Variables for the connection.
     */
    public readonly configVariables!: pulumi.Output<outputs.IntegrationConnectorsConnectionConfigVariable[] | undefined>;
    /**
     * Connection revision. This field is only updated when the connection is created or updated by User.
     */
    public /*out*/ readonly connectionRevision!: pulumi.Output<string>;
    /**
     * connectorVersion of the Connector.
     */
    public readonly connectorVersion!: pulumi.Output<string>;
    /**
     * This configuration provides infra configs like rate limit threshold which need to be configurable for every connector
     * version.
     */
    public /*out*/ readonly connectorVersionInfraConfigs!: pulumi.Output<outputs.IntegrationConnectorsConnectionConnectorVersionInfraConfig[]>;
    /**
     * Flag to mark the version indicating the launch stage.
     */
    public /*out*/ readonly connectorVersionLaunchStage!: pulumi.Output<string>;
    /**
     * Time the Namespace was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * An arbitrary description for the Conection.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Define the Connectors target endpoint.
     */
    public readonly destinationConfigs!: pulumi.Output<outputs.IntegrationConnectorsConnectionDestinationConfig[] | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Eventing Configuration of a connection
     */
    public readonly eventingConfig!: pulumi.Output<outputs.IntegrationConnectorsConnectionEventingConfig | undefined>;
    /**
     * Eventing enablement type. Will be nil if eventing is not enabled. Possible values: ["EVENTING_AND_CONNECTION",
     * "ONLY_EVENTING"]
     */
    public readonly eventingEnablementType!: pulumi.Output<string | undefined>;
    /**
     * Eventing Runtime Data.
     */
    public /*out*/ readonly eventingRuntimeDatas!: pulumi.Output<outputs.IntegrationConnectorsConnectionEventingRuntimeData[]>;
    /**
     * Resource labels to represent user provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Location in which Connection needs to be created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Determines whether or no a connection is locked. If locked, a reason must be specified.
     */
    public readonly lockConfig!: pulumi.Output<outputs.IntegrationConnectorsConnectionLockConfig | undefined>;
    /**
     * Log configuration for the connection.
     */
    public readonly logConfig!: pulumi.Output<outputs.IntegrationConnectorsConnectionLogConfig | undefined>;
    /**
     * Name of Connection needs to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Node configuration for the connection.
     */
    public readonly nodeConfig!: pulumi.Output<outputs.IntegrationConnectorsConnectionNodeConfig | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Service account needed for runtime plane to access Google Cloud resources.
     */
    public readonly serviceAccount!: pulumi.Output<string>;
    /**
     * The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g.
     * "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
     */
    public /*out*/ readonly serviceDirectory!: pulumi.Output<string>;
    /**
     * SSL Configuration of a connection
     */
    public readonly sslConfig!: pulumi.Output<outputs.IntegrationConnectorsConnectionSslConfig | undefined>;
    /**
     * Status of the Integration Connector.
     */
    public /*out*/ readonly statuses!: pulumi.Output<outputs.IntegrationConnectorsConnectionStatus[]>;
    /**
     * This subscription type enum states the subscription type of the project.
     */
    public /*out*/ readonly subscriptionType!: pulumi.Output<string>;
    /**
     * Suspended indicates if a user has suspended a connection or not.
     */
    public readonly suspended!: pulumi.Output<boolean | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.IntegrationConnectorsConnectionTimeouts | undefined>;
    /**
     * Time the Namespace was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a IntegrationConnectorsConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationConnectorsConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationConnectorsConnectionArgs | IntegrationConnectorsConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationConnectorsConnectionState | undefined;
            resourceInputs["authConfig"] = state ? state.authConfig : undefined;
            resourceInputs["configVariables"] = state ? state.configVariables : undefined;
            resourceInputs["connectionRevision"] = state ? state.connectionRevision : undefined;
            resourceInputs["connectorVersion"] = state ? state.connectorVersion : undefined;
            resourceInputs["connectorVersionInfraConfigs"] = state ? state.connectorVersionInfraConfigs : undefined;
            resourceInputs["connectorVersionLaunchStage"] = state ? state.connectorVersionLaunchStage : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationConfigs"] = state ? state.destinationConfigs : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["eventingConfig"] = state ? state.eventingConfig : undefined;
            resourceInputs["eventingEnablementType"] = state ? state.eventingEnablementType : undefined;
            resourceInputs["eventingRuntimeDatas"] = state ? state.eventingRuntimeDatas : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["lockConfig"] = state ? state.lockConfig : undefined;
            resourceInputs["logConfig"] = state ? state.logConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeConfig"] = state ? state.nodeConfig : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["serviceDirectory"] = state ? state.serviceDirectory : undefined;
            resourceInputs["sslConfig"] = state ? state.sslConfig : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["subscriptionType"] = state ? state.subscriptionType : undefined;
            resourceInputs["suspended"] = state ? state.suspended : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as IntegrationConnectorsConnectionArgs | undefined;
            if ((!args || args.connectorVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorVersion'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["authConfig"] = args ? args.authConfig : undefined;
            resourceInputs["configVariables"] = args ? args.configVariables : undefined;
            resourceInputs["connectorVersion"] = args ? args.connectorVersion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationConfigs"] = args ? args.destinationConfigs : undefined;
            resourceInputs["eventingConfig"] = args ? args.eventingConfig : undefined;
            resourceInputs["eventingEnablementType"] = args ? args.eventingEnablementType : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["lockConfig"] = args ? args.lockConfig : undefined;
            resourceInputs["logConfig"] = args ? args.logConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeConfig"] = args ? args.nodeConfig : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["sslConfig"] = args ? args.sslConfig : undefined;
            resourceInputs["suspended"] = args ? args.suspended : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["connectionRevision"] = undefined /*out*/;
            resourceInputs["connectorVersionInfraConfigs"] = undefined /*out*/;
            resourceInputs["connectorVersionLaunchStage"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["eventingRuntimeDatas"] = undefined /*out*/;
            resourceInputs["serviceDirectory"] = undefined /*out*/;
            resourceInputs["statuses"] = undefined /*out*/;
            resourceInputs["subscriptionType"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationConnectorsConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationConnectorsConnection resources.
 */
export interface IntegrationConnectorsConnectionState {
    /**
     * authConfig for the connection.
     */
    authConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionAuthConfig>;
    /**
     * Config Variables for the connection.
     */
    configVariables?: pulumi.Input<pulumi.Input<inputs.IntegrationConnectorsConnectionConfigVariable>[]>;
    /**
     * Connection revision. This field is only updated when the connection is created or updated by User.
     */
    connectionRevision?: pulumi.Input<string>;
    /**
     * connectorVersion of the Connector.
     */
    connectorVersion?: pulumi.Input<string>;
    /**
     * This configuration provides infra configs like rate limit threshold which need to be configurable for every connector
     * version.
     */
    connectorVersionInfraConfigs?: pulumi.Input<pulumi.Input<inputs.IntegrationConnectorsConnectionConnectorVersionInfraConfig>[]>;
    /**
     * Flag to mark the version indicating the launch stage.
     */
    connectorVersionLaunchStage?: pulumi.Input<string>;
    /**
     * Time the Namespace was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * An arbitrary description for the Conection.
     */
    description?: pulumi.Input<string>;
    /**
     * Define the Connectors target endpoint.
     */
    destinationConfigs?: pulumi.Input<pulumi.Input<inputs.IntegrationConnectorsConnectionDestinationConfig>[]>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Eventing Configuration of a connection
     */
    eventingConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionEventingConfig>;
    /**
     * Eventing enablement type. Will be nil if eventing is not enabled. Possible values: ["EVENTING_AND_CONNECTION",
     * "ONLY_EVENTING"]
     */
    eventingEnablementType?: pulumi.Input<string>;
    /**
     * Eventing Runtime Data.
     */
    eventingRuntimeDatas?: pulumi.Input<pulumi.Input<inputs.IntegrationConnectorsConnectionEventingRuntimeData>[]>;
    /**
     * Resource labels to represent user provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location in which Connection needs to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * Determines whether or no a connection is locked. If locked, a reason must be specified.
     */
    lockConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionLockConfig>;
    /**
     * Log configuration for the connection.
     */
    logConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionLogConfig>;
    /**
     * Name of Connection needs to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Node configuration for the connection.
     */
    nodeConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionNodeConfig>;
    project?: pulumi.Input<string>;
    /**
     * Service account needed for runtime plane to access Google Cloud resources.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g.
     * "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
     */
    serviceDirectory?: pulumi.Input<string>;
    /**
     * SSL Configuration of a connection
     */
    sslConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionSslConfig>;
    /**
     * Status of the Integration Connector.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.IntegrationConnectorsConnectionStatus>[]>;
    /**
     * This subscription type enum states the subscription type of the project.
     */
    subscriptionType?: pulumi.Input<string>;
    /**
     * Suspended indicates if a user has suspended a connection or not.
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.IntegrationConnectorsConnectionTimeouts>;
    /**
     * Time the Namespace was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationConnectorsConnection resource.
 */
export interface IntegrationConnectorsConnectionArgs {
    /**
     * authConfig for the connection.
     */
    authConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionAuthConfig>;
    /**
     * Config Variables for the connection.
     */
    configVariables?: pulumi.Input<pulumi.Input<inputs.IntegrationConnectorsConnectionConfigVariable>[]>;
    /**
     * connectorVersion of the Connector.
     */
    connectorVersion: pulumi.Input<string>;
    /**
     * An arbitrary description for the Conection.
     */
    description?: pulumi.Input<string>;
    /**
     * Define the Connectors target endpoint.
     */
    destinationConfigs?: pulumi.Input<pulumi.Input<inputs.IntegrationConnectorsConnectionDestinationConfig>[]>;
    /**
     * Eventing Configuration of a connection
     */
    eventingConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionEventingConfig>;
    /**
     * Eventing enablement type. Will be nil if eventing is not enabled. Possible values: ["EVENTING_AND_CONNECTION",
     * "ONLY_EVENTING"]
     */
    eventingEnablementType?: pulumi.Input<string>;
    /**
     * Resource labels to represent user provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location in which Connection needs to be created.
     */
    location: pulumi.Input<string>;
    /**
     * Determines whether or no a connection is locked. If locked, a reason must be specified.
     */
    lockConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionLockConfig>;
    /**
     * Log configuration for the connection.
     */
    logConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionLogConfig>;
    /**
     * Name of Connection needs to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * Node configuration for the connection.
     */
    nodeConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionNodeConfig>;
    project?: pulumi.Input<string>;
    /**
     * Service account needed for runtime plane to access Google Cloud resources.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * SSL Configuration of a connection
     */
    sslConfig?: pulumi.Input<inputs.IntegrationConnectorsConnectionSslConfig>;
    /**
     * Suspended indicates if a user has suspended a connection or not.
     */
    suspended?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.IntegrationConnectorsConnectionTimeouts>;
}
