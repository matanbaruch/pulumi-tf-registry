// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudbuildTrigger extends pulumi.CustomResource {
    /**
     * Get an existing CloudbuildTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudbuildTriggerState, opts?: pulumi.CustomResourceOptions): CloudbuildTrigger {
        return new CloudbuildTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/cloudbuildTrigger:CloudbuildTrigger';

    /**
     * Returns true if the given object is an instance of CloudbuildTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudbuildTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudbuildTrigger.__pulumiType;
    }

    /**
     * Configuration for manual approval to start a build invocation of this BuildTrigger. Builds created by this trigger will
     * require approval before they execute. Any user with a Cloud Build Approver role for the project can approve a build.
     */
    public readonly approvalConfig!: pulumi.Output<outputs.CloudbuildTriggerApprovalConfig | undefined>;
    /**
     * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server
     * event is received.
     */
    public readonly bitbucketServerTriggerConfig!: pulumi.Output<outputs.CloudbuildTriggerBitbucketServerTriggerConfig | undefined>;
    /**
     * Contents of the build template. Either a filename or build template must be provided.
     */
    public readonly build!: pulumi.Output<outputs.CloudbuildTriggerBuild | undefined>;
    /**
     * Time when the trigger was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Human-readable description of the trigger.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether the trigger is disabled or not. If true, the trigger will never result in a build.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must
     * be provided. Set this only when using trigger_template or github. When using Pub/Sub, Webhook or Manual set the file
     * name using git_file_source instead.
     */
    public readonly filename!: pulumi.Output<string | undefined>;
    /**
     * A Common Expression Language string. Used only with Pub/Sub and Webhook.
     */
    public readonly filter!: pulumi.Output<string | undefined>;
    /**
     * The file source describing the local or remote Build template.
     */
    public readonly gitFileSource!: pulumi.Output<outputs.CloudbuildTriggerGitFileSource | undefined>;
    /**
     * Describes the configuration of a trigger that creates a build whenever a GitHub event is received. One of
     * 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
     */
    public readonly github!: pulumi.Output<outputs.CloudbuildTriggerGithub | undefined>;
    /**
     * ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
     * support for '**'. If ignoredFiles and changed files are both empty, then they are not used to determine whether or not
     * to trigger a build. If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file globs. If
     * the change has no files that are outside of the ignoredFiles globs, then we do not trigger a build.
     */
    public readonly ignoredFiles!: pulumi.Output<string[] | undefined>;
    /**
     * Build logs will be sent back to GitHub as part of the checkrun result. Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
     * INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"]
     */
    public readonly includeBuildLogs!: pulumi.Output<string | undefined>;
    /**
     * ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
     * support for '**'. If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is empty,
     * then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the
     * ignoredFiles filter and includedFiles is not empty, then we make sure that at least one of those files matches a
     * includedFiles glob. If not, then we do not trigger a build.
     */
    public readonly includedFiles!: pulumi.Output<string[] | undefined>;
    /**
     * The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger. If not specified, "global" is
     * used.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Name of the trigger. Must be unique within the project.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published. One
     * of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
     */
    public readonly pubsubConfig!: pulumi.Output<outputs.CloudbuildTriggerPubsubConfig | undefined>;
    /**
     * The configuration of a trigger that creates a build whenever an event from Repo API is received.
     */
    public readonly repositoryEventConfig!: pulumi.Output<outputs.CloudbuildTriggerRepositoryEventConfig | undefined>;
    /**
     * The service account used for all user-controlled operations including triggers.patch, triggers.run, builds.create, and
     * builds.cancel. If no service account is set, then the standard Cloud Build service account
     * ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format:
     * projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
     */
    public readonly serviceAccount!: pulumi.Output<string | undefined>;
    /**
     * The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond
     * to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is
     * currently only used by Webhook, Pub/Sub, Manual, and Cron triggers. One of 'trigger_template', 'github', 'pubsub_config'
     * 'webhook_config' or 'source_to_build' must be provided.
     */
    public readonly sourceToBuild!: pulumi.Output<outputs.CloudbuildTriggerSourceToBuild | undefined>;
    /**
     * Substitutions data for Build resource.
     */
    public readonly substitutions!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Tags for annotation of a BuildTrigger
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CloudbuildTriggerTimeouts | undefined>;
    /**
     * The unique identifier for the trigger.
     */
    public /*out*/ readonly triggerId!: pulumi.Output<string>;
    /**
     * Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are
     * interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build.
     * One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
     */
    public readonly triggerTemplate!: pulumi.Output<outputs.CloudbuildTriggerTriggerTemplate | undefined>;
    /**
     * WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's
     * webhook URL. One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be
     * provided.
     */
    public readonly webhookConfig!: pulumi.Output<outputs.CloudbuildTriggerWebhookConfig | undefined>;

    /**
     * Create a CloudbuildTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudbuildTriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudbuildTriggerArgs | CloudbuildTriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudbuildTriggerState | undefined;
            resourceInputs["approvalConfig"] = state ? state.approvalConfig : undefined;
            resourceInputs["bitbucketServerTriggerConfig"] = state ? state.bitbucketServerTriggerConfig : undefined;
            resourceInputs["build"] = state ? state.build : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["gitFileSource"] = state ? state.gitFileSource : undefined;
            resourceInputs["github"] = state ? state.github : undefined;
            resourceInputs["ignoredFiles"] = state ? state.ignoredFiles : undefined;
            resourceInputs["includeBuildLogs"] = state ? state.includeBuildLogs : undefined;
            resourceInputs["includedFiles"] = state ? state.includedFiles : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pubsubConfig"] = state ? state.pubsubConfig : undefined;
            resourceInputs["repositoryEventConfig"] = state ? state.repositoryEventConfig : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["sourceToBuild"] = state ? state.sourceToBuild : undefined;
            resourceInputs["substitutions"] = state ? state.substitutions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["triggerId"] = state ? state.triggerId : undefined;
            resourceInputs["triggerTemplate"] = state ? state.triggerTemplate : undefined;
            resourceInputs["webhookConfig"] = state ? state.webhookConfig : undefined;
        } else {
            const args = argsOrState as CloudbuildTriggerArgs | undefined;
            resourceInputs["approvalConfig"] = args ? args.approvalConfig : undefined;
            resourceInputs["bitbucketServerTriggerConfig"] = args ? args.bitbucketServerTriggerConfig : undefined;
            resourceInputs["build"] = args ? args.build : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["gitFileSource"] = args ? args.gitFileSource : undefined;
            resourceInputs["github"] = args ? args.github : undefined;
            resourceInputs["ignoredFiles"] = args ? args.ignoredFiles : undefined;
            resourceInputs["includeBuildLogs"] = args ? args.includeBuildLogs : undefined;
            resourceInputs["includedFiles"] = args ? args.includedFiles : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["pubsubConfig"] = args ? args.pubsubConfig : undefined;
            resourceInputs["repositoryEventConfig"] = args ? args.repositoryEventConfig : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["sourceToBuild"] = args ? args.sourceToBuild : undefined;
            resourceInputs["substitutions"] = args ? args.substitutions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["triggerTemplate"] = args ? args.triggerTemplate : undefined;
            resourceInputs["webhookConfig"] = args ? args.webhookConfig : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["triggerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudbuildTrigger.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudbuildTrigger resources.
 */
export interface CloudbuildTriggerState {
    /**
     * Configuration for manual approval to start a build invocation of this BuildTrigger. Builds created by this trigger will
     * require approval before they execute. Any user with a Cloud Build Approver role for the project can approve a build.
     */
    approvalConfig?: pulumi.Input<inputs.CloudbuildTriggerApprovalConfig>;
    /**
     * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server
     * event is received.
     */
    bitbucketServerTriggerConfig?: pulumi.Input<inputs.CloudbuildTriggerBitbucketServerTriggerConfig>;
    /**
     * Contents of the build template. Either a filename or build template must be provided.
     */
    build?: pulumi.Input<inputs.CloudbuildTriggerBuild>;
    /**
     * Time when the trigger was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Human-readable description of the trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the trigger is disabled or not. If true, the trigger will never result in a build.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must
     * be provided. Set this only when using trigger_template or github. When using Pub/Sub, Webhook or Manual set the file
     * name using git_file_source instead.
     */
    filename?: pulumi.Input<string>;
    /**
     * A Common Expression Language string. Used only with Pub/Sub and Webhook.
     */
    filter?: pulumi.Input<string>;
    /**
     * The file source describing the local or remote Build template.
     */
    gitFileSource?: pulumi.Input<inputs.CloudbuildTriggerGitFileSource>;
    /**
     * Describes the configuration of a trigger that creates a build whenever a GitHub event is received. One of
     * 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
     */
    github?: pulumi.Input<inputs.CloudbuildTriggerGithub>;
    /**
     * ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
     * support for '**'. If ignoredFiles and changed files are both empty, then they are not used to determine whether or not
     * to trigger a build. If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file globs. If
     * the change has no files that are outside of the ignoredFiles globs, then we do not trigger a build.
     */
    ignoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Build logs will be sent back to GitHub as part of the checkrun result. Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
     * INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"]
     */
    includeBuildLogs?: pulumi.Input<string>;
    /**
     * ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
     * support for '**'. If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is empty,
     * then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the
     * ignoredFiles filter and includedFiles is not empty, then we make sure that at least one of those files matches a
     * includedFiles glob. If not, then we do not trigger a build.
     */
    includedFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger. If not specified, "global" is
     * used.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the trigger. Must be unique within the project.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published. One
     * of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
     */
    pubsubConfig?: pulumi.Input<inputs.CloudbuildTriggerPubsubConfig>;
    /**
     * The configuration of a trigger that creates a build whenever an event from Repo API is received.
     */
    repositoryEventConfig?: pulumi.Input<inputs.CloudbuildTriggerRepositoryEventConfig>;
    /**
     * The service account used for all user-controlled operations including triggers.patch, triggers.run, builds.create, and
     * builds.cancel. If no service account is set, then the standard Cloud Build service account
     * ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format:
     * projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond
     * to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is
     * currently only used by Webhook, Pub/Sub, Manual, and Cron triggers. One of 'trigger_template', 'github', 'pubsub_config'
     * 'webhook_config' or 'source_to_build' must be provided.
     */
    sourceToBuild?: pulumi.Input<inputs.CloudbuildTriggerSourceToBuild>;
    /**
     * Substitutions data for Build resource.
     */
    substitutions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tags for annotation of a BuildTrigger
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.CloudbuildTriggerTimeouts>;
    /**
     * The unique identifier for the trigger.
     */
    triggerId?: pulumi.Input<string>;
    /**
     * Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are
     * interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build.
     * One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
     */
    triggerTemplate?: pulumi.Input<inputs.CloudbuildTriggerTriggerTemplate>;
    /**
     * WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's
     * webhook URL. One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be
     * provided.
     */
    webhookConfig?: pulumi.Input<inputs.CloudbuildTriggerWebhookConfig>;
}

/**
 * The set of arguments for constructing a CloudbuildTrigger resource.
 */
export interface CloudbuildTriggerArgs {
    /**
     * Configuration for manual approval to start a build invocation of this BuildTrigger. Builds created by this trigger will
     * require approval before they execute. Any user with a Cloud Build Approver role for the project can approve a build.
     */
    approvalConfig?: pulumi.Input<inputs.CloudbuildTriggerApprovalConfig>;
    /**
     * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server
     * event is received.
     */
    bitbucketServerTriggerConfig?: pulumi.Input<inputs.CloudbuildTriggerBitbucketServerTriggerConfig>;
    /**
     * Contents of the build template. Either a filename or build template must be provided.
     */
    build?: pulumi.Input<inputs.CloudbuildTriggerBuild>;
    /**
     * Human-readable description of the trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the trigger is disabled or not. If true, the trigger will never result in a build.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must
     * be provided. Set this only when using trigger_template or github. When using Pub/Sub, Webhook or Manual set the file
     * name using git_file_source instead.
     */
    filename?: pulumi.Input<string>;
    /**
     * A Common Expression Language string. Used only with Pub/Sub and Webhook.
     */
    filter?: pulumi.Input<string>;
    /**
     * The file source describing the local or remote Build template.
     */
    gitFileSource?: pulumi.Input<inputs.CloudbuildTriggerGitFileSource>;
    /**
     * Describes the configuration of a trigger that creates a build whenever a GitHub event is received. One of
     * 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided.
     */
    github?: pulumi.Input<inputs.CloudbuildTriggerGithub>;
    /**
     * ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
     * support for '**'. If ignoredFiles and changed files are both empty, then they are not used to determine whether or not
     * to trigger a build. If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file globs. If
     * the change has no files that are outside of the ignoredFiles globs, then we do not trigger a build.
     */
    ignoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Build logs will be sent back to GitHub as part of the checkrun result. Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
     * INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"]
     */
    includeBuildLogs?: pulumi.Input<string>;
    /**
     * ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with
     * support for '**'. If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is empty,
     * then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the
     * ignoredFiles filter and includedFiles is not empty, then we make sure that at least one of those files matches a
     * includedFiles glob. If not, then we do not trigger a build.
     */
    includedFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger. If not specified, "global" is
     * used.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the trigger. Must be unique within the project.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published. One
     * of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided.
     */
    pubsubConfig?: pulumi.Input<inputs.CloudbuildTriggerPubsubConfig>;
    /**
     * The configuration of a trigger that creates a build whenever an event from Repo API is received.
     */
    repositoryEventConfig?: pulumi.Input<inputs.CloudbuildTriggerRepositoryEventConfig>;
    /**
     * The service account used for all user-controlled operations including triggers.patch, triggers.run, builds.create, and
     * builds.cancel. If no service account is set, then the standard Cloud Build service account
     * ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format:
     * projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond
     * to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is
     * currently only used by Webhook, Pub/Sub, Manual, and Cron triggers. One of 'trigger_template', 'github', 'pubsub_config'
     * 'webhook_config' or 'source_to_build' must be provided.
     */
    sourceToBuild?: pulumi.Input<inputs.CloudbuildTriggerSourceToBuild>;
    /**
     * Substitutions data for Build resource.
     */
    substitutions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tags for annotation of a BuildTrigger
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.CloudbuildTriggerTimeouts>;
    /**
     * Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are
     * interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build.
     * One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided.
     */
    triggerTemplate?: pulumi.Input<inputs.CloudbuildTriggerTriggerTemplate>;
    /**
     * WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's
     * webhook URL. One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be
     * provided.
     */
    webhookConfig?: pulumi.Input<inputs.CloudbuildTriggerWebhookConfig>;
}
