// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerAzureNodePool extends pulumi.CustomResource {
    /**
     * Get an existing ContainerAzureNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerAzureNodePoolState, opts?: pulumi.CustomResourceOptions): ContainerAzureNodePool {
        return new ContainerAzureNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/containerAzureNodePool:ContainerAzureNodePool';

    /**
     * Returns true if the given object is an instance of ContainerAzureNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerAzureNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerAzureNodePool.__pulumiType;
    }

    /**
     * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
     * of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
     * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
     * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
     * `effective_annotations` for all of the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Autoscaler configuration for this node pool.
     */
    public readonly autoscaling!: pulumi.Output<outputs.ContainerAzureNodePoolAutoscaling>;
    /**
     * Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
     */
    public readonly azureAvailabilityZone!: pulumi.Output<string>;
    /**
     * The azureCluster for the resource
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * The node configuration of the node pool.
     */
    public readonly config!: pulumi.Output<outputs.ContainerAzureNodePoolConfig>;
    /**
     * Output only. The time at which this node pool was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
     * and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The location for the resource
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The Management configuration for this node pool.
     */
    public readonly management!: pulumi.Output<outputs.ContainerAzureNodePoolManagement | undefined>;
    /**
     * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     */
    public readonly maxPodsConstraint!: pulumi.Output<outputs.ContainerAzureNodePoolMaxPodsConstraint>;
    /**
     * The name of this resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Output only. If set, there are currently pending changes to the node pool.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING,
     * STOPPING, ERROR, DEGRADED
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster
     * configuration.
     */
    public readonly subnetId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerAzureNodePoolTimeouts | undefined>;
    /**
     * Output only. A globally unique identifier for the node pool.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Output only. The time at which this node pool was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a ContainerAzureNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerAzureNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerAzureNodePoolArgs | ContainerAzureNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerAzureNodePoolState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["autoscaling"] = state ? state.autoscaling : undefined;
            resourceInputs["azureAvailabilityZone"] = state ? state.azureAvailabilityZone : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["management"] = state ? state.management : undefined;
            resourceInputs["maxPodsConstraint"] = state ? state.maxPodsConstraint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ContainerAzureNodePoolArgs | undefined;
            if ((!args || args.autoscaling === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoscaling'");
            }
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.maxPodsConstraint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxPodsConstraint'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["autoscaling"] = args ? args.autoscaling : undefined;
            resourceInputs["azureAvailabilityZone"] = args ? args.azureAvailabilityZone : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["management"] = args ? args.management : undefined;
            resourceInputs["maxPodsConstraint"] = args ? args.maxPodsConstraint : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerAzureNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerAzureNodePool resources.
 */
export interface ContainerAzureNodePoolState {
    /**
     * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
     * of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
     * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
     * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
     * `effective_annotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Autoscaler configuration for this node pool.
     */
    autoscaling?: pulumi.Input<inputs.ContainerAzureNodePoolAutoscaling>;
    /**
     * Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
     */
    azureAvailabilityZone?: pulumi.Input<string>;
    /**
     * The azureCluster for the resource
     */
    cluster?: pulumi.Input<string>;
    /**
     * The node configuration of the node pool.
     */
    config?: pulumi.Input<inputs.ContainerAzureNodePoolConfig>;
    /**
     * Output only. The time at which this node pool was created.
     */
    createTime?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update
     * and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * The location for the resource
     */
    location?: pulumi.Input<string>;
    /**
     * The Management configuration for this node pool.
     */
    management?: pulumi.Input<inputs.ContainerAzureNodePoolManagement>;
    /**
     * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     */
    maxPodsConstraint?: pulumi.Input<inputs.ContainerAzureNodePoolMaxPodsConstraint>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Output only. If set, there are currently pending changes to the node pool.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING,
     * STOPPING, ERROR, DEGRADED
     */
    state?: pulumi.Input<string>;
    /**
     * The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster
     * configuration.
     */
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerAzureNodePoolTimeouts>;
    /**
     * Output only. A globally unique identifier for the node pool.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. The time at which this node pool was last updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerAzureNodePool resource.
 */
export interface ContainerAzureNodePoolArgs {
    /**
     * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
     * of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
     * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
     * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
     * `effective_annotations` for all of the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Autoscaler configuration for this node pool.
     */
    autoscaling: pulumi.Input<inputs.ContainerAzureNodePoolAutoscaling>;
    /**
     * Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
     */
    azureAvailabilityZone?: pulumi.Input<string>;
    /**
     * The azureCluster for the resource
     */
    cluster: pulumi.Input<string>;
    /**
     * The node configuration of the node pool.
     */
    config: pulumi.Input<inputs.ContainerAzureNodePoolConfig>;
    /**
     * The location for the resource
     */
    location: pulumi.Input<string>;
    /**
     * The Management configuration for this node pool.
     */
    management?: pulumi.Input<inputs.ContainerAzureNodePoolManagement>;
    /**
     * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     */
    maxPodsConstraint: pulumi.Input<inputs.ContainerAzureNodePoolMaxPodsConstraint>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster
     * configuration.
     */
    subnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerAzureNodePoolTimeouts>;
    /**
     * The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
     */
    version: pulumi.Input<string>;
}
