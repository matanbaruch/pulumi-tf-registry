// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlloydbUser extends pulumi.CustomResource {
    /**
     * Get an existing AlloydbUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlloydbUserState, opts?: pulumi.CustomResourceOptions): AlloydbUser {
        return new AlloydbUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/alloydbUser:AlloydbUser';

    /**
     * Returns true if the given object is an instance of AlloydbUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlloydbUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlloydbUser.__pulumiType;
    }

    /**
     * Identifies the alloydb cluster. Must be in the format 'projects/{project}/locations/{location}/clusters/{cluster_id}'
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * List of database roles this database user has.
     */
    public readonly databaseRoles!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Password for this database user.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AlloydbUserTimeouts | undefined>;
    /**
     * The database role name of the user.
     */
    public readonly userId!: pulumi.Output<string>;
    /**
     * The type of this user. Possible values: ["ALLOYDB_BUILT_IN", "ALLOYDB_IAM_USER"]
     */
    public readonly userType!: pulumi.Output<string>;

    /**
     * Create a AlloydbUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlloydbUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlloydbUserArgs | AlloydbUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlloydbUserState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["databaseRoles"] = state ? state.databaseRoles : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
        } else {
            const args = argsOrState as AlloydbUserArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            if ((!args || args.userType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userType'");
            }
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["databaseRoles"] = args ? args.databaseRoles : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["userType"] = args ? args.userType : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlloydbUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlloydbUser resources.
 */
export interface AlloydbUserState {
    /**
     * Identifies the alloydb cluster. Must be in the format 'projects/{project}/locations/{location}/clusters/{cluster_id}'
     */
    cluster?: pulumi.Input<string>;
    /**
     * List of database roles this database user has.
     */
    databaseRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
     */
    name?: pulumi.Input<string>;
    /**
     * Password for this database user.
     */
    password?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AlloydbUserTimeouts>;
    /**
     * The database role name of the user.
     */
    userId?: pulumi.Input<string>;
    /**
     * The type of this user. Possible values: ["ALLOYDB_BUILT_IN", "ALLOYDB_IAM_USER"]
     */
    userType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlloydbUser resource.
 */
export interface AlloydbUserArgs {
    /**
     * Identifies the alloydb cluster. Must be in the format 'projects/{project}/locations/{location}/clusters/{cluster_id}'
     */
    cluster: pulumi.Input<string>;
    /**
     * List of database roles this database user has.
     */
    databaseRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password for this database user.
     */
    password?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AlloydbUserTimeouts>;
    /**
     * The database role name of the user.
     */
    userId: pulumi.Input<string>;
    /**
     * The type of this user. Possible values: ["ALLOYDB_BUILT_IN", "ALLOYDB_IAM_USER"]
     */
    userType: pulumi.Input<string>;
}
