// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirebaserulesRuleset extends pulumi.CustomResource {
    /**
     * Get an existing FirebaserulesRuleset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirebaserulesRulesetState, opts?: pulumi.CustomResourceOptions): FirebaserulesRuleset {
        return new FirebaserulesRuleset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/firebaserulesRuleset:FirebaserulesRuleset';

    /**
     * Returns true if the given object is an instance of FirebaserulesRuleset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirebaserulesRuleset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirebaserulesRuleset.__pulumiType;
    }

    /**
     * Output only. Time the `Ruleset` was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Output only. The metadata for this ruleset.
     */
    public /*out*/ readonly metadatas!: pulumi.Output<outputs.FirebaserulesRulesetMetadata[]>;
    /**
     * Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format:
     * `projects/{project_id}/rulesets/{ruleset_id}`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * `Source` for the `Ruleset`.
     */
    public readonly source!: pulumi.Output<outputs.FirebaserulesRulesetSource>;
    public readonly timeouts!: pulumi.Output<outputs.FirebaserulesRulesetTimeouts | undefined>;

    /**
     * Create a FirebaserulesRuleset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirebaserulesRulesetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirebaserulesRulesetArgs | FirebaserulesRulesetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirebaserulesRulesetState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FirebaserulesRulesetArgs | undefined;
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["metadatas"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirebaserulesRuleset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirebaserulesRuleset resources.
 */
export interface FirebaserulesRulesetState {
    /**
     * Output only. Time the `Ruleset` was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Output only. The metadata for this ruleset.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.FirebaserulesRulesetMetadata>[]>;
    /**
     * Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format:
     * `projects/{project_id}/rulesets/{ruleset_id}`
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * `Source` for the `Ruleset`.
     */
    source?: pulumi.Input<inputs.FirebaserulesRulesetSource>;
    timeouts?: pulumi.Input<inputs.FirebaserulesRulesetTimeouts>;
}

/**
 * The set of arguments for constructing a FirebaserulesRuleset resource.
 */
export interface FirebaserulesRulesetArgs {
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * `Source` for the `Ruleset`.
     */
    source: pulumi.Input<inputs.FirebaserulesRulesetSource>;
    timeouts?: pulumi.Input<inputs.FirebaserulesRulesetTimeouts>;
}
