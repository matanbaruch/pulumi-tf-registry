// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPubsubSubscription(args: GetPubsubSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetPubsubSubscriptionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-beta:index/getPubsubSubscription:getPubsubSubscription", {
        "id": args.id,
        "name": args.name,
        "project": args.project,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPubsubSubscription.
 */
export interface GetPubsubSubscriptionArgs {
    id?: string;
    name: string;
    project?: string;
}

/**
 * A collection of values returned by getPubsubSubscription.
 */
export interface GetPubsubSubscriptionResult {
    readonly ackDeadlineSeconds: number;
    readonly bigqueryConfigs: outputs.GetPubsubSubscriptionBigqueryConfig[];
    readonly cloudStorageConfigs: outputs.GetPubsubSubscriptionCloudStorageConfig[];
    readonly deadLetterPolicies: outputs.GetPubsubSubscriptionDeadLetterPolicy[];
    readonly effectiveLabels: {[key: string]: string};
    readonly enableExactlyOnceDelivery: boolean;
    readonly enableMessageOrdering: boolean;
    readonly expirationPolicies: outputs.GetPubsubSubscriptionExpirationPolicy[];
    readonly filter: string;
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly messageRetentionDuration: string;
    readonly name: string;
    readonly project?: string;
    readonly pushConfigs: outputs.GetPubsubSubscriptionPushConfig[];
    readonly retainAckedMessages: boolean;
    readonly retryPolicies: outputs.GetPubsubSubscriptionRetryPolicy[];
    readonly terraformLabels: {[key: string]: string};
    readonly topic: string;
}
export function getPubsubSubscriptionOutput(args: GetPubsubSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPubsubSubscriptionResult> {
    return pulumi.output(args).apply((a: any) => getPubsubSubscription(a, opts))
}

/**
 * A collection of arguments for invoking getPubsubSubscription.
 */
export interface GetPubsubSubscriptionOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
