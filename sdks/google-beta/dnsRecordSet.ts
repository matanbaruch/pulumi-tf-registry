// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsRecordSet extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecordSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordSetState, opts?: pulumi.CustomResourceOptions): DnsRecordSet {
        return new DnsRecordSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/dnsRecordSet:DnsRecordSet';

    /**
     * Returns true if the given object is an instance of DnsRecordSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecordSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecordSet.__pulumiType;
    }

    /**
     * The name of the zone in which this record set will reside.
     */
    public readonly managedZone!: pulumi.Output<string>;
    /**
     * The DNS name this record set will apply to.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The configuration for steering traffic based on query. You can specify either Weighted Round Robin(WRR) type or
     * Geolocation(GEO) type.
     */
    public readonly routingPolicy!: pulumi.Output<outputs.DnsRecordSetRoutingPolicy | undefined>;
    public readonly rrdatas!: pulumi.Output<string[] | undefined>;
    /**
     * The time-to-live of this record set (seconds).
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * The DNS record set type.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a DnsRecordSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordSetArgs | DnsRecordSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordSetState | undefined;
            resourceInputs["managedZone"] = state ? state.managedZone : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["routingPolicy"] = state ? state.routingPolicy : undefined;
            resourceInputs["rrdatas"] = state ? state.rrdatas : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DnsRecordSetArgs | undefined;
            if ((!args || args.managedZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedZone'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["managedZone"] = args ? args.managedZone : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["routingPolicy"] = args ? args.routingPolicy : undefined;
            resourceInputs["rrdatas"] = args ? args.rrdatas : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecordSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsRecordSet resources.
 */
export interface DnsRecordSetState {
    /**
     * The name of the zone in which this record set will reside.
     */
    managedZone?: pulumi.Input<string>;
    /**
     * The DNS name this record set will apply to.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The configuration for steering traffic based on query. You can specify either Weighted Round Robin(WRR) type or
     * Geolocation(GEO) type.
     */
    routingPolicy?: pulumi.Input<inputs.DnsRecordSetRoutingPolicy>;
    rrdatas?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time-to-live of this record set (seconds).
     */
    ttl?: pulumi.Input<number>;
    /**
     * The DNS record set type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRecordSet resource.
 */
export interface DnsRecordSetArgs {
    /**
     * The name of the zone in which this record set will reside.
     */
    managedZone: pulumi.Input<string>;
    /**
     * The DNS name this record set will apply to.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The configuration for steering traffic based on query. You can specify either Weighted Round Robin(WRR) type or
     * Geolocation(GEO) type.
     */
    routingPolicy?: pulumi.Input<inputs.DnsRecordSetRoutingPolicy>;
    rrdatas?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time-to-live of this record set (seconds).
     */
    ttl?: pulumi.Input<number>;
    /**
     * The DNS record set type.
     */
    type: pulumi.Input<string>;
}
