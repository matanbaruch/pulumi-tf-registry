// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessContextManagerAccessLevelArgs, AccessContextManagerAccessLevelState } from "./accessContextManagerAccessLevel";
export type AccessContextManagerAccessLevel = import("./accessContextManagerAccessLevel").AccessContextManagerAccessLevel;
export const AccessContextManagerAccessLevel: typeof import("./accessContextManagerAccessLevel").AccessContextManagerAccessLevel = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerAccessLevel"], () => require("./accessContextManagerAccessLevel"));

export { AccessContextManagerAccessLevelConditionArgs, AccessContextManagerAccessLevelConditionState } from "./accessContextManagerAccessLevelCondition";
export type AccessContextManagerAccessLevelCondition = import("./accessContextManagerAccessLevelCondition").AccessContextManagerAccessLevelCondition;
export const AccessContextManagerAccessLevelCondition: typeof import("./accessContextManagerAccessLevelCondition").AccessContextManagerAccessLevelCondition = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerAccessLevelCondition"], () => require("./accessContextManagerAccessLevelCondition"));

export { AccessContextManagerAccessLevelsArgs, AccessContextManagerAccessLevelsState } from "./accessContextManagerAccessLevels";
export type AccessContextManagerAccessLevels = import("./accessContextManagerAccessLevels").AccessContextManagerAccessLevels;
export const AccessContextManagerAccessLevels: typeof import("./accessContextManagerAccessLevels").AccessContextManagerAccessLevels = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerAccessLevels"], () => require("./accessContextManagerAccessLevels"));

export { AccessContextManagerAccessPolicyArgs, AccessContextManagerAccessPolicyState } from "./accessContextManagerAccessPolicy";
export type AccessContextManagerAccessPolicy = import("./accessContextManagerAccessPolicy").AccessContextManagerAccessPolicy;
export const AccessContextManagerAccessPolicy: typeof import("./accessContextManagerAccessPolicy").AccessContextManagerAccessPolicy = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerAccessPolicy"], () => require("./accessContextManagerAccessPolicy"));

export { AccessContextManagerAccessPolicyIamBindingArgs, AccessContextManagerAccessPolicyIamBindingState } from "./accessContextManagerAccessPolicyIamBinding";
export type AccessContextManagerAccessPolicyIamBinding = import("./accessContextManagerAccessPolicyIamBinding").AccessContextManagerAccessPolicyIamBinding;
export const AccessContextManagerAccessPolicyIamBinding: typeof import("./accessContextManagerAccessPolicyIamBinding").AccessContextManagerAccessPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerAccessPolicyIamBinding"], () => require("./accessContextManagerAccessPolicyIamBinding"));

export { AccessContextManagerAccessPolicyIamMemberArgs, AccessContextManagerAccessPolicyIamMemberState } from "./accessContextManagerAccessPolicyIamMember";
export type AccessContextManagerAccessPolicyIamMember = import("./accessContextManagerAccessPolicyIamMember").AccessContextManagerAccessPolicyIamMember;
export const AccessContextManagerAccessPolicyIamMember: typeof import("./accessContextManagerAccessPolicyIamMember").AccessContextManagerAccessPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerAccessPolicyIamMember"], () => require("./accessContextManagerAccessPolicyIamMember"));

export { AccessContextManagerAccessPolicyIamPolicyArgs, AccessContextManagerAccessPolicyIamPolicyState } from "./accessContextManagerAccessPolicyIamPolicy";
export type AccessContextManagerAccessPolicyIamPolicy = import("./accessContextManagerAccessPolicyIamPolicy").AccessContextManagerAccessPolicyIamPolicy;
export const AccessContextManagerAccessPolicyIamPolicy: typeof import("./accessContextManagerAccessPolicyIamPolicy").AccessContextManagerAccessPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerAccessPolicyIamPolicy"], () => require("./accessContextManagerAccessPolicyIamPolicy"));

export { AccessContextManagerAuthorizedOrgsDescArgs, AccessContextManagerAuthorizedOrgsDescState } from "./accessContextManagerAuthorizedOrgsDesc";
export type AccessContextManagerAuthorizedOrgsDesc = import("./accessContextManagerAuthorizedOrgsDesc").AccessContextManagerAuthorizedOrgsDesc;
export const AccessContextManagerAuthorizedOrgsDesc: typeof import("./accessContextManagerAuthorizedOrgsDesc").AccessContextManagerAuthorizedOrgsDesc = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerAuthorizedOrgsDesc"], () => require("./accessContextManagerAuthorizedOrgsDesc"));

export { AccessContextManagerEgressPolicyArgs, AccessContextManagerEgressPolicyState } from "./accessContextManagerEgressPolicy";
export type AccessContextManagerEgressPolicy = import("./accessContextManagerEgressPolicy").AccessContextManagerEgressPolicy;
export const AccessContextManagerEgressPolicy: typeof import("./accessContextManagerEgressPolicy").AccessContextManagerEgressPolicy = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerEgressPolicy"], () => require("./accessContextManagerEgressPolicy"));

export { AccessContextManagerGcpUserAccessBindingArgs, AccessContextManagerGcpUserAccessBindingState } from "./accessContextManagerGcpUserAccessBinding";
export type AccessContextManagerGcpUserAccessBinding = import("./accessContextManagerGcpUserAccessBinding").AccessContextManagerGcpUserAccessBinding;
export const AccessContextManagerGcpUserAccessBinding: typeof import("./accessContextManagerGcpUserAccessBinding").AccessContextManagerGcpUserAccessBinding = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerGcpUserAccessBinding"], () => require("./accessContextManagerGcpUserAccessBinding"));

export { AccessContextManagerIngressPolicyArgs, AccessContextManagerIngressPolicyState } from "./accessContextManagerIngressPolicy";
export type AccessContextManagerIngressPolicy = import("./accessContextManagerIngressPolicy").AccessContextManagerIngressPolicy;
export const AccessContextManagerIngressPolicy: typeof import("./accessContextManagerIngressPolicy").AccessContextManagerIngressPolicy = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerIngressPolicy"], () => require("./accessContextManagerIngressPolicy"));

export { AccessContextManagerServicePerimeterArgs, AccessContextManagerServicePerimeterState } from "./accessContextManagerServicePerimeter";
export type AccessContextManagerServicePerimeter = import("./accessContextManagerServicePerimeter").AccessContextManagerServicePerimeter;
export const AccessContextManagerServicePerimeter: typeof import("./accessContextManagerServicePerimeter").AccessContextManagerServicePerimeter = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerServicePerimeter"], () => require("./accessContextManagerServicePerimeter"));

export { AccessContextManagerServicePerimeterDryRunEgressPolicyArgs, AccessContextManagerServicePerimeterDryRunEgressPolicyState } from "./accessContextManagerServicePerimeterDryRunEgressPolicy";
export type AccessContextManagerServicePerimeterDryRunEgressPolicy = import("./accessContextManagerServicePerimeterDryRunEgressPolicy").AccessContextManagerServicePerimeterDryRunEgressPolicy;
export const AccessContextManagerServicePerimeterDryRunEgressPolicy: typeof import("./accessContextManagerServicePerimeterDryRunEgressPolicy").AccessContextManagerServicePerimeterDryRunEgressPolicy = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerServicePerimeterDryRunEgressPolicy"], () => require("./accessContextManagerServicePerimeterDryRunEgressPolicy"));

export { AccessContextManagerServicePerimeterDryRunIngressPolicyArgs, AccessContextManagerServicePerimeterDryRunIngressPolicyState } from "./accessContextManagerServicePerimeterDryRunIngressPolicy";
export type AccessContextManagerServicePerimeterDryRunIngressPolicy = import("./accessContextManagerServicePerimeterDryRunIngressPolicy").AccessContextManagerServicePerimeterDryRunIngressPolicy;
export const AccessContextManagerServicePerimeterDryRunIngressPolicy: typeof import("./accessContextManagerServicePerimeterDryRunIngressPolicy").AccessContextManagerServicePerimeterDryRunIngressPolicy = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerServicePerimeterDryRunIngressPolicy"], () => require("./accessContextManagerServicePerimeterDryRunIngressPolicy"));

export { AccessContextManagerServicePerimeterDryRunResourceArgs, AccessContextManagerServicePerimeterDryRunResourceState } from "./accessContextManagerServicePerimeterDryRunResource";
export type AccessContextManagerServicePerimeterDryRunResource = import("./accessContextManagerServicePerimeterDryRunResource").AccessContextManagerServicePerimeterDryRunResource;
export const AccessContextManagerServicePerimeterDryRunResource: typeof import("./accessContextManagerServicePerimeterDryRunResource").AccessContextManagerServicePerimeterDryRunResource = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerServicePerimeterDryRunResource"], () => require("./accessContextManagerServicePerimeterDryRunResource"));

export { AccessContextManagerServicePerimeterEgressPolicyArgs, AccessContextManagerServicePerimeterEgressPolicyState } from "./accessContextManagerServicePerimeterEgressPolicy";
export type AccessContextManagerServicePerimeterEgressPolicy = import("./accessContextManagerServicePerimeterEgressPolicy").AccessContextManagerServicePerimeterEgressPolicy;
export const AccessContextManagerServicePerimeterEgressPolicy: typeof import("./accessContextManagerServicePerimeterEgressPolicy").AccessContextManagerServicePerimeterEgressPolicy = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerServicePerimeterEgressPolicy"], () => require("./accessContextManagerServicePerimeterEgressPolicy"));

export { AccessContextManagerServicePerimeterIngressPolicyArgs, AccessContextManagerServicePerimeterIngressPolicyState } from "./accessContextManagerServicePerimeterIngressPolicy";
export type AccessContextManagerServicePerimeterIngressPolicy = import("./accessContextManagerServicePerimeterIngressPolicy").AccessContextManagerServicePerimeterIngressPolicy;
export const AccessContextManagerServicePerimeterIngressPolicy: typeof import("./accessContextManagerServicePerimeterIngressPolicy").AccessContextManagerServicePerimeterIngressPolicy = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerServicePerimeterIngressPolicy"], () => require("./accessContextManagerServicePerimeterIngressPolicy"));

export { AccessContextManagerServicePerimeterResourceArgs, AccessContextManagerServicePerimeterResourceState } from "./accessContextManagerServicePerimeterResource";
export type AccessContextManagerServicePerimeterResource = import("./accessContextManagerServicePerimeterResource").AccessContextManagerServicePerimeterResource;
export const AccessContextManagerServicePerimeterResource: typeof import("./accessContextManagerServicePerimeterResource").AccessContextManagerServicePerimeterResource = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerServicePerimeterResource"], () => require("./accessContextManagerServicePerimeterResource"));

export { AccessContextManagerServicePerimetersArgs, AccessContextManagerServicePerimetersState } from "./accessContextManagerServicePerimeters";
export type AccessContextManagerServicePerimeters = import("./accessContextManagerServicePerimeters").AccessContextManagerServicePerimeters;
export const AccessContextManagerServicePerimeters: typeof import("./accessContextManagerServicePerimeters").AccessContextManagerServicePerimeters = null as any;
utilities.lazyLoad(exports, ["AccessContextManagerServicePerimeters"], () => require("./accessContextManagerServicePerimeters"));

export { ActiveDirectoryDomainArgs, ActiveDirectoryDomainState } from "./activeDirectoryDomain";
export type ActiveDirectoryDomain = import("./activeDirectoryDomain").ActiveDirectoryDomain;
export const ActiveDirectoryDomain: typeof import("./activeDirectoryDomain").ActiveDirectoryDomain = null as any;
utilities.lazyLoad(exports, ["ActiveDirectoryDomain"], () => require("./activeDirectoryDomain"));

export { ActiveDirectoryDomainTrustArgs, ActiveDirectoryDomainTrustState } from "./activeDirectoryDomainTrust";
export type ActiveDirectoryDomainTrust = import("./activeDirectoryDomainTrust").ActiveDirectoryDomainTrust;
export const ActiveDirectoryDomainTrust: typeof import("./activeDirectoryDomainTrust").ActiveDirectoryDomainTrust = null as any;
utilities.lazyLoad(exports, ["ActiveDirectoryDomainTrust"], () => require("./activeDirectoryDomainTrust"));

export { ActiveDirectoryPeeringArgs, ActiveDirectoryPeeringState } from "./activeDirectoryPeering";
export type ActiveDirectoryPeering = import("./activeDirectoryPeering").ActiveDirectoryPeering;
export const ActiveDirectoryPeering: typeof import("./activeDirectoryPeering").ActiveDirectoryPeering = null as any;
utilities.lazyLoad(exports, ["ActiveDirectoryPeering"], () => require("./activeDirectoryPeering"));

export { AlloydbBackupArgs, AlloydbBackupState } from "./alloydbBackup";
export type AlloydbBackup = import("./alloydbBackup").AlloydbBackup;
export const AlloydbBackup: typeof import("./alloydbBackup").AlloydbBackup = null as any;
utilities.lazyLoad(exports, ["AlloydbBackup"], () => require("./alloydbBackup"));

export { AlloydbClusterArgs, AlloydbClusterState } from "./alloydbCluster";
export type AlloydbCluster = import("./alloydbCluster").AlloydbCluster;
export const AlloydbCluster: typeof import("./alloydbCluster").AlloydbCluster = null as any;
utilities.lazyLoad(exports, ["AlloydbCluster"], () => require("./alloydbCluster"));

export { AlloydbInstanceArgs, AlloydbInstanceState } from "./alloydbInstance";
export type AlloydbInstance = import("./alloydbInstance").AlloydbInstance;
export const AlloydbInstance: typeof import("./alloydbInstance").AlloydbInstance = null as any;
utilities.lazyLoad(exports, ["AlloydbInstance"], () => require("./alloydbInstance"));

export { AlloydbUserArgs, AlloydbUserState } from "./alloydbUser";
export type AlloydbUser = import("./alloydbUser").AlloydbUser;
export const AlloydbUser: typeof import("./alloydbUser").AlloydbUser = null as any;
utilities.lazyLoad(exports, ["AlloydbUser"], () => require("./alloydbUser"));

export { ApiGatewayApiArgs, ApiGatewayApiState } from "./apiGatewayApi";
export type ApiGatewayApi = import("./apiGatewayApi").ApiGatewayApi;
export const ApiGatewayApi: typeof import("./apiGatewayApi").ApiGatewayApi = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApi"], () => require("./apiGatewayApi"));

export { ApiGatewayApiConfigArgs, ApiGatewayApiConfigState } from "./apiGatewayApiConfig";
export type ApiGatewayApiConfig = import("./apiGatewayApiConfig").ApiGatewayApiConfig;
export const ApiGatewayApiConfig: typeof import("./apiGatewayApiConfig").ApiGatewayApiConfig = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiConfig"], () => require("./apiGatewayApiConfig"));

export { ApiGatewayApiConfigIamBindingArgs, ApiGatewayApiConfigIamBindingState } from "./apiGatewayApiConfigIamBinding";
export type ApiGatewayApiConfigIamBinding = import("./apiGatewayApiConfigIamBinding").ApiGatewayApiConfigIamBinding;
export const ApiGatewayApiConfigIamBinding: typeof import("./apiGatewayApiConfigIamBinding").ApiGatewayApiConfigIamBinding = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiConfigIamBinding"], () => require("./apiGatewayApiConfigIamBinding"));

export { ApiGatewayApiConfigIamMemberArgs, ApiGatewayApiConfigIamMemberState } from "./apiGatewayApiConfigIamMember";
export type ApiGatewayApiConfigIamMember = import("./apiGatewayApiConfigIamMember").ApiGatewayApiConfigIamMember;
export const ApiGatewayApiConfigIamMember: typeof import("./apiGatewayApiConfigIamMember").ApiGatewayApiConfigIamMember = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiConfigIamMember"], () => require("./apiGatewayApiConfigIamMember"));

export { ApiGatewayApiConfigIamPolicyArgs, ApiGatewayApiConfigIamPolicyState } from "./apiGatewayApiConfigIamPolicy";
export type ApiGatewayApiConfigIamPolicy = import("./apiGatewayApiConfigIamPolicy").ApiGatewayApiConfigIamPolicy;
export const ApiGatewayApiConfigIamPolicy: typeof import("./apiGatewayApiConfigIamPolicy").ApiGatewayApiConfigIamPolicy = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiConfigIamPolicy"], () => require("./apiGatewayApiConfigIamPolicy"));

export { ApiGatewayApiIamBindingArgs, ApiGatewayApiIamBindingState } from "./apiGatewayApiIamBinding";
export type ApiGatewayApiIamBinding = import("./apiGatewayApiIamBinding").ApiGatewayApiIamBinding;
export const ApiGatewayApiIamBinding: typeof import("./apiGatewayApiIamBinding").ApiGatewayApiIamBinding = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiIamBinding"], () => require("./apiGatewayApiIamBinding"));

export { ApiGatewayApiIamMemberArgs, ApiGatewayApiIamMemberState } from "./apiGatewayApiIamMember";
export type ApiGatewayApiIamMember = import("./apiGatewayApiIamMember").ApiGatewayApiIamMember;
export const ApiGatewayApiIamMember: typeof import("./apiGatewayApiIamMember").ApiGatewayApiIamMember = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiIamMember"], () => require("./apiGatewayApiIamMember"));

export { ApiGatewayApiIamPolicyArgs, ApiGatewayApiIamPolicyState } from "./apiGatewayApiIamPolicy";
export type ApiGatewayApiIamPolicy = import("./apiGatewayApiIamPolicy").ApiGatewayApiIamPolicy;
export const ApiGatewayApiIamPolicy: typeof import("./apiGatewayApiIamPolicy").ApiGatewayApiIamPolicy = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiIamPolicy"], () => require("./apiGatewayApiIamPolicy"));

export { ApiGatewayGatewayArgs, ApiGatewayGatewayState } from "./apiGatewayGateway";
export type ApiGatewayGateway = import("./apiGatewayGateway").ApiGatewayGateway;
export const ApiGatewayGateway: typeof import("./apiGatewayGateway").ApiGatewayGateway = null as any;
utilities.lazyLoad(exports, ["ApiGatewayGateway"], () => require("./apiGatewayGateway"));

export { ApiGatewayGatewayIamBindingArgs, ApiGatewayGatewayIamBindingState } from "./apiGatewayGatewayIamBinding";
export type ApiGatewayGatewayIamBinding = import("./apiGatewayGatewayIamBinding").ApiGatewayGatewayIamBinding;
export const ApiGatewayGatewayIamBinding: typeof import("./apiGatewayGatewayIamBinding").ApiGatewayGatewayIamBinding = null as any;
utilities.lazyLoad(exports, ["ApiGatewayGatewayIamBinding"], () => require("./apiGatewayGatewayIamBinding"));

export { ApiGatewayGatewayIamMemberArgs, ApiGatewayGatewayIamMemberState } from "./apiGatewayGatewayIamMember";
export type ApiGatewayGatewayIamMember = import("./apiGatewayGatewayIamMember").ApiGatewayGatewayIamMember;
export const ApiGatewayGatewayIamMember: typeof import("./apiGatewayGatewayIamMember").ApiGatewayGatewayIamMember = null as any;
utilities.lazyLoad(exports, ["ApiGatewayGatewayIamMember"], () => require("./apiGatewayGatewayIamMember"));

export { ApiGatewayGatewayIamPolicyArgs, ApiGatewayGatewayIamPolicyState } from "./apiGatewayGatewayIamPolicy";
export type ApiGatewayGatewayIamPolicy = import("./apiGatewayGatewayIamPolicy").ApiGatewayGatewayIamPolicy;
export const ApiGatewayGatewayIamPolicy: typeof import("./apiGatewayGatewayIamPolicy").ApiGatewayGatewayIamPolicy = null as any;
utilities.lazyLoad(exports, ["ApiGatewayGatewayIamPolicy"], () => require("./apiGatewayGatewayIamPolicy"));

export { ApigeeAddonsConfigArgs, ApigeeAddonsConfigState } from "./apigeeAddonsConfig";
export type ApigeeAddonsConfig = import("./apigeeAddonsConfig").ApigeeAddonsConfig;
export const ApigeeAddonsConfig: typeof import("./apigeeAddonsConfig").ApigeeAddonsConfig = null as any;
utilities.lazyLoad(exports, ["ApigeeAddonsConfig"], () => require("./apigeeAddonsConfig"));

export { ApigeeEndpointAttachmentArgs, ApigeeEndpointAttachmentState } from "./apigeeEndpointAttachment";
export type ApigeeEndpointAttachment = import("./apigeeEndpointAttachment").ApigeeEndpointAttachment;
export const ApigeeEndpointAttachment: typeof import("./apigeeEndpointAttachment").ApigeeEndpointAttachment = null as any;
utilities.lazyLoad(exports, ["ApigeeEndpointAttachment"], () => require("./apigeeEndpointAttachment"));

export { ApigeeEnvKeystoreArgs, ApigeeEnvKeystoreState } from "./apigeeEnvKeystore";
export type ApigeeEnvKeystore = import("./apigeeEnvKeystore").ApigeeEnvKeystore;
export const ApigeeEnvKeystore: typeof import("./apigeeEnvKeystore").ApigeeEnvKeystore = null as any;
utilities.lazyLoad(exports, ["ApigeeEnvKeystore"], () => require("./apigeeEnvKeystore"));

export { ApigeeEnvReferencesArgs, ApigeeEnvReferencesState } from "./apigeeEnvReferences";
export type ApigeeEnvReferences = import("./apigeeEnvReferences").ApigeeEnvReferences;
export const ApigeeEnvReferences: typeof import("./apigeeEnvReferences").ApigeeEnvReferences = null as any;
utilities.lazyLoad(exports, ["ApigeeEnvReferences"], () => require("./apigeeEnvReferences"));

export { ApigeeEnvgroupArgs, ApigeeEnvgroupState } from "./apigeeEnvgroup";
export type ApigeeEnvgroup = import("./apigeeEnvgroup").ApigeeEnvgroup;
export const ApigeeEnvgroup: typeof import("./apigeeEnvgroup").ApigeeEnvgroup = null as any;
utilities.lazyLoad(exports, ["ApigeeEnvgroup"], () => require("./apigeeEnvgroup"));

export { ApigeeEnvgroupAttachmentArgs, ApigeeEnvgroupAttachmentState } from "./apigeeEnvgroupAttachment";
export type ApigeeEnvgroupAttachment = import("./apigeeEnvgroupAttachment").ApigeeEnvgroupAttachment;
export const ApigeeEnvgroupAttachment: typeof import("./apigeeEnvgroupAttachment").ApigeeEnvgroupAttachment = null as any;
utilities.lazyLoad(exports, ["ApigeeEnvgroupAttachment"], () => require("./apigeeEnvgroupAttachment"));

export { ApigeeEnvironmentArgs, ApigeeEnvironmentState } from "./apigeeEnvironment";
export type ApigeeEnvironment = import("./apigeeEnvironment").ApigeeEnvironment;
export const ApigeeEnvironment: typeof import("./apigeeEnvironment").ApigeeEnvironment = null as any;
utilities.lazyLoad(exports, ["ApigeeEnvironment"], () => require("./apigeeEnvironment"));

export { ApigeeEnvironmentIamBindingArgs, ApigeeEnvironmentIamBindingState } from "./apigeeEnvironmentIamBinding";
export type ApigeeEnvironmentIamBinding = import("./apigeeEnvironmentIamBinding").ApigeeEnvironmentIamBinding;
export const ApigeeEnvironmentIamBinding: typeof import("./apigeeEnvironmentIamBinding").ApigeeEnvironmentIamBinding = null as any;
utilities.lazyLoad(exports, ["ApigeeEnvironmentIamBinding"], () => require("./apigeeEnvironmentIamBinding"));

export { ApigeeEnvironmentIamMemberArgs, ApigeeEnvironmentIamMemberState } from "./apigeeEnvironmentIamMember";
export type ApigeeEnvironmentIamMember = import("./apigeeEnvironmentIamMember").ApigeeEnvironmentIamMember;
export const ApigeeEnvironmentIamMember: typeof import("./apigeeEnvironmentIamMember").ApigeeEnvironmentIamMember = null as any;
utilities.lazyLoad(exports, ["ApigeeEnvironmentIamMember"], () => require("./apigeeEnvironmentIamMember"));

export { ApigeeEnvironmentIamPolicyArgs, ApigeeEnvironmentIamPolicyState } from "./apigeeEnvironmentIamPolicy";
export type ApigeeEnvironmentIamPolicy = import("./apigeeEnvironmentIamPolicy").ApigeeEnvironmentIamPolicy;
export const ApigeeEnvironmentIamPolicy: typeof import("./apigeeEnvironmentIamPolicy").ApigeeEnvironmentIamPolicy = null as any;
utilities.lazyLoad(exports, ["ApigeeEnvironmentIamPolicy"], () => require("./apigeeEnvironmentIamPolicy"));

export { ApigeeEnvironmentKeyvaluemapsArgs, ApigeeEnvironmentKeyvaluemapsState } from "./apigeeEnvironmentKeyvaluemaps";
export type ApigeeEnvironmentKeyvaluemaps = import("./apigeeEnvironmentKeyvaluemaps").ApigeeEnvironmentKeyvaluemaps;
export const ApigeeEnvironmentKeyvaluemaps: typeof import("./apigeeEnvironmentKeyvaluemaps").ApigeeEnvironmentKeyvaluemaps = null as any;
utilities.lazyLoad(exports, ["ApigeeEnvironmentKeyvaluemaps"], () => require("./apigeeEnvironmentKeyvaluemaps"));

export { ApigeeEnvironmentKeyvaluemapsEntriesArgs, ApigeeEnvironmentKeyvaluemapsEntriesState } from "./apigeeEnvironmentKeyvaluemapsEntries";
export type ApigeeEnvironmentKeyvaluemapsEntries = import("./apigeeEnvironmentKeyvaluemapsEntries").ApigeeEnvironmentKeyvaluemapsEntries;
export const ApigeeEnvironmentKeyvaluemapsEntries: typeof import("./apigeeEnvironmentKeyvaluemapsEntries").ApigeeEnvironmentKeyvaluemapsEntries = null as any;
utilities.lazyLoad(exports, ["ApigeeEnvironmentKeyvaluemapsEntries"], () => require("./apigeeEnvironmentKeyvaluemapsEntries"));

export { ApigeeFlowhookArgs, ApigeeFlowhookState } from "./apigeeFlowhook";
export type ApigeeFlowhook = import("./apigeeFlowhook").ApigeeFlowhook;
export const ApigeeFlowhook: typeof import("./apigeeFlowhook").ApigeeFlowhook = null as any;
utilities.lazyLoad(exports, ["ApigeeFlowhook"], () => require("./apigeeFlowhook"));

export { ApigeeInstanceArgs, ApigeeInstanceState } from "./apigeeInstance";
export type ApigeeInstance = import("./apigeeInstance").ApigeeInstance;
export const ApigeeInstance: typeof import("./apigeeInstance").ApigeeInstance = null as any;
utilities.lazyLoad(exports, ["ApigeeInstance"], () => require("./apigeeInstance"));

export { ApigeeInstanceAttachmentArgs, ApigeeInstanceAttachmentState } from "./apigeeInstanceAttachment";
export type ApigeeInstanceAttachment = import("./apigeeInstanceAttachment").ApigeeInstanceAttachment;
export const ApigeeInstanceAttachment: typeof import("./apigeeInstanceAttachment").ApigeeInstanceAttachment = null as any;
utilities.lazyLoad(exports, ["ApigeeInstanceAttachment"], () => require("./apigeeInstanceAttachment"));

export { ApigeeKeystoresAliasesKeyCertFileArgs, ApigeeKeystoresAliasesKeyCertFileState } from "./apigeeKeystoresAliasesKeyCertFile";
export type ApigeeKeystoresAliasesKeyCertFile = import("./apigeeKeystoresAliasesKeyCertFile").ApigeeKeystoresAliasesKeyCertFile;
export const ApigeeKeystoresAliasesKeyCertFile: typeof import("./apigeeKeystoresAliasesKeyCertFile").ApigeeKeystoresAliasesKeyCertFile = null as any;
utilities.lazyLoad(exports, ["ApigeeKeystoresAliasesKeyCertFile"], () => require("./apigeeKeystoresAliasesKeyCertFile"));

export { ApigeeKeystoresAliasesPkcs12Args, ApigeeKeystoresAliasesPkcs12State } from "./apigeeKeystoresAliasesPkcs12";
export type ApigeeKeystoresAliasesPkcs12 = import("./apigeeKeystoresAliasesPkcs12").ApigeeKeystoresAliasesPkcs12;
export const ApigeeKeystoresAliasesPkcs12: typeof import("./apigeeKeystoresAliasesPkcs12").ApigeeKeystoresAliasesPkcs12 = null as any;
utilities.lazyLoad(exports, ["ApigeeKeystoresAliasesPkcs12"], () => require("./apigeeKeystoresAliasesPkcs12"));

export { ApigeeKeystoresAliasesSelfSignedCertArgs, ApigeeKeystoresAliasesSelfSignedCertState } from "./apigeeKeystoresAliasesSelfSignedCert";
export type ApigeeKeystoresAliasesSelfSignedCert = import("./apigeeKeystoresAliasesSelfSignedCert").ApigeeKeystoresAliasesSelfSignedCert;
export const ApigeeKeystoresAliasesSelfSignedCert: typeof import("./apigeeKeystoresAliasesSelfSignedCert").ApigeeKeystoresAliasesSelfSignedCert = null as any;
utilities.lazyLoad(exports, ["ApigeeKeystoresAliasesSelfSignedCert"], () => require("./apigeeKeystoresAliasesSelfSignedCert"));

export { ApigeeNatAddressArgs, ApigeeNatAddressState } from "./apigeeNatAddress";
export type ApigeeNatAddress = import("./apigeeNatAddress").ApigeeNatAddress;
export const ApigeeNatAddress: typeof import("./apigeeNatAddress").ApigeeNatAddress = null as any;
utilities.lazyLoad(exports, ["ApigeeNatAddress"], () => require("./apigeeNatAddress"));

export { ApigeeOrganizationArgs, ApigeeOrganizationState } from "./apigeeOrganization";
export type ApigeeOrganization = import("./apigeeOrganization").ApigeeOrganization;
export const ApigeeOrganization: typeof import("./apigeeOrganization").ApigeeOrganization = null as any;
utilities.lazyLoad(exports, ["ApigeeOrganization"], () => require("./apigeeOrganization"));

export { ApigeeSharedflowArgs, ApigeeSharedflowState } from "./apigeeSharedflow";
export type ApigeeSharedflow = import("./apigeeSharedflow").ApigeeSharedflow;
export const ApigeeSharedflow: typeof import("./apigeeSharedflow").ApigeeSharedflow = null as any;
utilities.lazyLoad(exports, ["ApigeeSharedflow"], () => require("./apigeeSharedflow"));

export { ApigeeSharedflowDeploymentArgs, ApigeeSharedflowDeploymentState } from "./apigeeSharedflowDeployment";
export type ApigeeSharedflowDeployment = import("./apigeeSharedflowDeployment").ApigeeSharedflowDeployment;
export const ApigeeSharedflowDeployment: typeof import("./apigeeSharedflowDeployment").ApigeeSharedflowDeployment = null as any;
utilities.lazyLoad(exports, ["ApigeeSharedflowDeployment"], () => require("./apigeeSharedflowDeployment"));

export { ApigeeSyncAuthorizationArgs, ApigeeSyncAuthorizationState } from "./apigeeSyncAuthorization";
export type ApigeeSyncAuthorization = import("./apigeeSyncAuthorization").ApigeeSyncAuthorization;
export const ApigeeSyncAuthorization: typeof import("./apigeeSyncAuthorization").ApigeeSyncAuthorization = null as any;
utilities.lazyLoad(exports, ["ApigeeSyncAuthorization"], () => require("./apigeeSyncAuthorization"));

export { ApigeeTargetServerArgs, ApigeeTargetServerState } from "./apigeeTargetServer";
export type ApigeeTargetServer = import("./apigeeTargetServer").ApigeeTargetServer;
export const ApigeeTargetServer: typeof import("./apigeeTargetServer").ApigeeTargetServer = null as any;
utilities.lazyLoad(exports, ["ApigeeTargetServer"], () => require("./apigeeTargetServer"));

export { ApikeysKeyArgs, ApikeysKeyState } from "./apikeysKey";
export type ApikeysKey = import("./apikeysKey").ApikeysKey;
export const ApikeysKey: typeof import("./apikeysKey").ApikeysKey = null as any;
utilities.lazyLoad(exports, ["ApikeysKey"], () => require("./apikeysKey"));

export { AppEngineApplicationArgs, AppEngineApplicationState } from "./appEngineApplication";
export type AppEngineApplication = import("./appEngineApplication").AppEngineApplication;
export const AppEngineApplication: typeof import("./appEngineApplication").AppEngineApplication = null as any;
utilities.lazyLoad(exports, ["AppEngineApplication"], () => require("./appEngineApplication"));

export { AppEngineApplicationUrlDispatchRulesArgs, AppEngineApplicationUrlDispatchRulesState } from "./appEngineApplicationUrlDispatchRules";
export type AppEngineApplicationUrlDispatchRules = import("./appEngineApplicationUrlDispatchRules").AppEngineApplicationUrlDispatchRules;
export const AppEngineApplicationUrlDispatchRules: typeof import("./appEngineApplicationUrlDispatchRules").AppEngineApplicationUrlDispatchRules = null as any;
utilities.lazyLoad(exports, ["AppEngineApplicationUrlDispatchRules"], () => require("./appEngineApplicationUrlDispatchRules"));

export { AppEngineDomainMappingArgs, AppEngineDomainMappingState } from "./appEngineDomainMapping";
export type AppEngineDomainMapping = import("./appEngineDomainMapping").AppEngineDomainMapping;
export const AppEngineDomainMapping: typeof import("./appEngineDomainMapping").AppEngineDomainMapping = null as any;
utilities.lazyLoad(exports, ["AppEngineDomainMapping"], () => require("./appEngineDomainMapping"));

export { AppEngineFirewallRuleArgs, AppEngineFirewallRuleState } from "./appEngineFirewallRule";
export type AppEngineFirewallRule = import("./appEngineFirewallRule").AppEngineFirewallRule;
export const AppEngineFirewallRule: typeof import("./appEngineFirewallRule").AppEngineFirewallRule = null as any;
utilities.lazyLoad(exports, ["AppEngineFirewallRule"], () => require("./appEngineFirewallRule"));

export { AppEngineFlexibleAppVersionArgs, AppEngineFlexibleAppVersionState } from "./appEngineFlexibleAppVersion";
export type AppEngineFlexibleAppVersion = import("./appEngineFlexibleAppVersion").AppEngineFlexibleAppVersion;
export const AppEngineFlexibleAppVersion: typeof import("./appEngineFlexibleAppVersion").AppEngineFlexibleAppVersion = null as any;
utilities.lazyLoad(exports, ["AppEngineFlexibleAppVersion"], () => require("./appEngineFlexibleAppVersion"));

export { AppEngineServiceNetworkSettingsArgs, AppEngineServiceNetworkSettingsState } from "./appEngineServiceNetworkSettings";
export type AppEngineServiceNetworkSettings = import("./appEngineServiceNetworkSettings").AppEngineServiceNetworkSettings;
export const AppEngineServiceNetworkSettings: typeof import("./appEngineServiceNetworkSettings").AppEngineServiceNetworkSettings = null as any;
utilities.lazyLoad(exports, ["AppEngineServiceNetworkSettings"], () => require("./appEngineServiceNetworkSettings"));

export { AppEngineServiceSplitTrafficArgs, AppEngineServiceSplitTrafficState } from "./appEngineServiceSplitTraffic";
export type AppEngineServiceSplitTraffic = import("./appEngineServiceSplitTraffic").AppEngineServiceSplitTraffic;
export const AppEngineServiceSplitTraffic: typeof import("./appEngineServiceSplitTraffic").AppEngineServiceSplitTraffic = null as any;
utilities.lazyLoad(exports, ["AppEngineServiceSplitTraffic"], () => require("./appEngineServiceSplitTraffic"));

export { AppEngineStandardAppVersionArgs, AppEngineStandardAppVersionState } from "./appEngineStandardAppVersion";
export type AppEngineStandardAppVersion = import("./appEngineStandardAppVersion").AppEngineStandardAppVersion;
export const AppEngineStandardAppVersion: typeof import("./appEngineStandardAppVersion").AppEngineStandardAppVersion = null as any;
utilities.lazyLoad(exports, ["AppEngineStandardAppVersion"], () => require("./appEngineStandardAppVersion"));

export { ApphubApplicationArgs, ApphubApplicationState } from "./apphubApplication";
export type ApphubApplication = import("./apphubApplication").ApphubApplication;
export const ApphubApplication: typeof import("./apphubApplication").ApphubApplication = null as any;
utilities.lazyLoad(exports, ["ApphubApplication"], () => require("./apphubApplication"));

export { ApphubServiceArgs, ApphubServiceState } from "./apphubService";
export type ApphubService = import("./apphubService").ApphubService;
export const ApphubService: typeof import("./apphubService").ApphubService = null as any;
utilities.lazyLoad(exports, ["ApphubService"], () => require("./apphubService"));

export { ApphubServiceProjectAttachmentArgs, ApphubServiceProjectAttachmentState } from "./apphubServiceProjectAttachment";
export type ApphubServiceProjectAttachment = import("./apphubServiceProjectAttachment").ApphubServiceProjectAttachment;
export const ApphubServiceProjectAttachment: typeof import("./apphubServiceProjectAttachment").ApphubServiceProjectAttachment = null as any;
utilities.lazyLoad(exports, ["ApphubServiceProjectAttachment"], () => require("./apphubServiceProjectAttachment"));

export { ApphubWorkloadArgs, ApphubWorkloadState } from "./apphubWorkload";
export type ApphubWorkload = import("./apphubWorkload").ApphubWorkload;
export const ApphubWorkload: typeof import("./apphubWorkload").ApphubWorkload = null as any;
utilities.lazyLoad(exports, ["ApphubWorkload"], () => require("./apphubWorkload"));

export { ArtifactRegistryRepositoryArgs, ArtifactRegistryRepositoryState } from "./artifactRegistryRepository";
export type ArtifactRegistryRepository = import("./artifactRegistryRepository").ArtifactRegistryRepository;
export const ArtifactRegistryRepository: typeof import("./artifactRegistryRepository").ArtifactRegistryRepository = null as any;
utilities.lazyLoad(exports, ["ArtifactRegistryRepository"], () => require("./artifactRegistryRepository"));

export { ArtifactRegistryRepositoryIamBindingArgs, ArtifactRegistryRepositoryIamBindingState } from "./artifactRegistryRepositoryIamBinding";
export type ArtifactRegistryRepositoryIamBinding = import("./artifactRegistryRepositoryIamBinding").ArtifactRegistryRepositoryIamBinding;
export const ArtifactRegistryRepositoryIamBinding: typeof import("./artifactRegistryRepositoryIamBinding").ArtifactRegistryRepositoryIamBinding = null as any;
utilities.lazyLoad(exports, ["ArtifactRegistryRepositoryIamBinding"], () => require("./artifactRegistryRepositoryIamBinding"));

export { ArtifactRegistryRepositoryIamMemberArgs, ArtifactRegistryRepositoryIamMemberState } from "./artifactRegistryRepositoryIamMember";
export type ArtifactRegistryRepositoryIamMember = import("./artifactRegistryRepositoryIamMember").ArtifactRegistryRepositoryIamMember;
export const ArtifactRegistryRepositoryIamMember: typeof import("./artifactRegistryRepositoryIamMember").ArtifactRegistryRepositoryIamMember = null as any;
utilities.lazyLoad(exports, ["ArtifactRegistryRepositoryIamMember"], () => require("./artifactRegistryRepositoryIamMember"));

export { ArtifactRegistryRepositoryIamPolicyArgs, ArtifactRegistryRepositoryIamPolicyState } from "./artifactRegistryRepositoryIamPolicy";
export type ArtifactRegistryRepositoryIamPolicy = import("./artifactRegistryRepositoryIamPolicy").ArtifactRegistryRepositoryIamPolicy;
export const ArtifactRegistryRepositoryIamPolicy: typeof import("./artifactRegistryRepositoryIamPolicy").ArtifactRegistryRepositoryIamPolicy = null as any;
utilities.lazyLoad(exports, ["ArtifactRegistryRepositoryIamPolicy"], () => require("./artifactRegistryRepositoryIamPolicy"));

export { ArtifactRegistryVpcscConfigArgs, ArtifactRegistryVpcscConfigState } from "./artifactRegistryVpcscConfig";
export type ArtifactRegistryVpcscConfig = import("./artifactRegistryVpcscConfig").ArtifactRegistryVpcscConfig;
export const ArtifactRegistryVpcscConfig: typeof import("./artifactRegistryVpcscConfig").ArtifactRegistryVpcscConfig = null as any;
utilities.lazyLoad(exports, ["ArtifactRegistryVpcscConfig"], () => require("./artifactRegistryVpcscConfig"));

export { AssuredWorkloadsWorkloadArgs, AssuredWorkloadsWorkloadState } from "./assuredWorkloadsWorkload";
export type AssuredWorkloadsWorkload = import("./assuredWorkloadsWorkload").AssuredWorkloadsWorkload;
export const AssuredWorkloadsWorkload: typeof import("./assuredWorkloadsWorkload").AssuredWorkloadsWorkload = null as any;
utilities.lazyLoad(exports, ["AssuredWorkloadsWorkload"], () => require("./assuredWorkloadsWorkload"));

export { BackupDrManagementServerArgs, BackupDrManagementServerState } from "./backupDrManagementServer";
export type BackupDrManagementServer = import("./backupDrManagementServer").BackupDrManagementServer;
export const BackupDrManagementServer: typeof import("./backupDrManagementServer").BackupDrManagementServer = null as any;
utilities.lazyLoad(exports, ["BackupDrManagementServer"], () => require("./backupDrManagementServer"));

export { BeyondcorpAppConnectionArgs, BeyondcorpAppConnectionState } from "./beyondcorpAppConnection";
export type BeyondcorpAppConnection = import("./beyondcorpAppConnection").BeyondcorpAppConnection;
export const BeyondcorpAppConnection: typeof import("./beyondcorpAppConnection").BeyondcorpAppConnection = null as any;
utilities.lazyLoad(exports, ["BeyondcorpAppConnection"], () => require("./beyondcorpAppConnection"));

export { BeyondcorpAppConnectorArgs, BeyondcorpAppConnectorState } from "./beyondcorpAppConnector";
export type BeyondcorpAppConnector = import("./beyondcorpAppConnector").BeyondcorpAppConnector;
export const BeyondcorpAppConnector: typeof import("./beyondcorpAppConnector").BeyondcorpAppConnector = null as any;
utilities.lazyLoad(exports, ["BeyondcorpAppConnector"], () => require("./beyondcorpAppConnector"));

export { BeyondcorpAppGatewayArgs, BeyondcorpAppGatewayState } from "./beyondcorpAppGateway";
export type BeyondcorpAppGateway = import("./beyondcorpAppGateway").BeyondcorpAppGateway;
export const BeyondcorpAppGateway: typeof import("./beyondcorpAppGateway").BeyondcorpAppGateway = null as any;
utilities.lazyLoad(exports, ["BeyondcorpAppGateway"], () => require("./beyondcorpAppGateway"));

export { BiglakeCatalogArgs, BiglakeCatalogState } from "./biglakeCatalog";
export type BiglakeCatalog = import("./biglakeCatalog").BiglakeCatalog;
export const BiglakeCatalog: typeof import("./biglakeCatalog").BiglakeCatalog = null as any;
utilities.lazyLoad(exports, ["BiglakeCatalog"], () => require("./biglakeCatalog"));

export { BiglakeDatabaseArgs, BiglakeDatabaseState } from "./biglakeDatabase";
export type BiglakeDatabase = import("./biglakeDatabase").BiglakeDatabase;
export const BiglakeDatabase: typeof import("./biglakeDatabase").BiglakeDatabase = null as any;
utilities.lazyLoad(exports, ["BiglakeDatabase"], () => require("./biglakeDatabase"));

export { BiglakeTableArgs, BiglakeTableState } from "./biglakeTable";
export type BiglakeTable = import("./biglakeTable").BiglakeTable;
export const BiglakeTable: typeof import("./biglakeTable").BiglakeTable = null as any;
utilities.lazyLoad(exports, ["BiglakeTable"], () => require("./biglakeTable"));

export { BigqueryAnalyticsHubDataExchangeArgs, BigqueryAnalyticsHubDataExchangeState } from "./bigqueryAnalyticsHubDataExchange";
export type BigqueryAnalyticsHubDataExchange = import("./bigqueryAnalyticsHubDataExchange").BigqueryAnalyticsHubDataExchange;
export const BigqueryAnalyticsHubDataExchange: typeof import("./bigqueryAnalyticsHubDataExchange").BigqueryAnalyticsHubDataExchange = null as any;
utilities.lazyLoad(exports, ["BigqueryAnalyticsHubDataExchange"], () => require("./bigqueryAnalyticsHubDataExchange"));

export { BigqueryAnalyticsHubDataExchangeIamBindingArgs, BigqueryAnalyticsHubDataExchangeIamBindingState } from "./bigqueryAnalyticsHubDataExchangeIamBinding";
export type BigqueryAnalyticsHubDataExchangeIamBinding = import("./bigqueryAnalyticsHubDataExchangeIamBinding").BigqueryAnalyticsHubDataExchangeIamBinding;
export const BigqueryAnalyticsHubDataExchangeIamBinding: typeof import("./bigqueryAnalyticsHubDataExchangeIamBinding").BigqueryAnalyticsHubDataExchangeIamBinding = null as any;
utilities.lazyLoad(exports, ["BigqueryAnalyticsHubDataExchangeIamBinding"], () => require("./bigqueryAnalyticsHubDataExchangeIamBinding"));

export { BigqueryAnalyticsHubDataExchangeIamMemberArgs, BigqueryAnalyticsHubDataExchangeIamMemberState } from "./bigqueryAnalyticsHubDataExchangeIamMember";
export type BigqueryAnalyticsHubDataExchangeIamMember = import("./bigqueryAnalyticsHubDataExchangeIamMember").BigqueryAnalyticsHubDataExchangeIamMember;
export const BigqueryAnalyticsHubDataExchangeIamMember: typeof import("./bigqueryAnalyticsHubDataExchangeIamMember").BigqueryAnalyticsHubDataExchangeIamMember = null as any;
utilities.lazyLoad(exports, ["BigqueryAnalyticsHubDataExchangeIamMember"], () => require("./bigqueryAnalyticsHubDataExchangeIamMember"));

export { BigqueryAnalyticsHubDataExchangeIamPolicyArgs, BigqueryAnalyticsHubDataExchangeIamPolicyState } from "./bigqueryAnalyticsHubDataExchangeIamPolicy";
export type BigqueryAnalyticsHubDataExchangeIamPolicy = import("./bigqueryAnalyticsHubDataExchangeIamPolicy").BigqueryAnalyticsHubDataExchangeIamPolicy;
export const BigqueryAnalyticsHubDataExchangeIamPolicy: typeof import("./bigqueryAnalyticsHubDataExchangeIamPolicy").BigqueryAnalyticsHubDataExchangeIamPolicy = null as any;
utilities.lazyLoad(exports, ["BigqueryAnalyticsHubDataExchangeIamPolicy"], () => require("./bigqueryAnalyticsHubDataExchangeIamPolicy"));

export { BigqueryAnalyticsHubListingArgs, BigqueryAnalyticsHubListingState } from "./bigqueryAnalyticsHubListing";
export type BigqueryAnalyticsHubListing = import("./bigqueryAnalyticsHubListing").BigqueryAnalyticsHubListing;
export const BigqueryAnalyticsHubListing: typeof import("./bigqueryAnalyticsHubListing").BigqueryAnalyticsHubListing = null as any;
utilities.lazyLoad(exports, ["BigqueryAnalyticsHubListing"], () => require("./bigqueryAnalyticsHubListing"));

export { BigqueryAnalyticsHubListingIamBindingArgs, BigqueryAnalyticsHubListingIamBindingState } from "./bigqueryAnalyticsHubListingIamBinding";
export type BigqueryAnalyticsHubListingIamBinding = import("./bigqueryAnalyticsHubListingIamBinding").BigqueryAnalyticsHubListingIamBinding;
export const BigqueryAnalyticsHubListingIamBinding: typeof import("./bigqueryAnalyticsHubListingIamBinding").BigqueryAnalyticsHubListingIamBinding = null as any;
utilities.lazyLoad(exports, ["BigqueryAnalyticsHubListingIamBinding"], () => require("./bigqueryAnalyticsHubListingIamBinding"));

export { BigqueryAnalyticsHubListingIamMemberArgs, BigqueryAnalyticsHubListingIamMemberState } from "./bigqueryAnalyticsHubListingIamMember";
export type BigqueryAnalyticsHubListingIamMember = import("./bigqueryAnalyticsHubListingIamMember").BigqueryAnalyticsHubListingIamMember;
export const BigqueryAnalyticsHubListingIamMember: typeof import("./bigqueryAnalyticsHubListingIamMember").BigqueryAnalyticsHubListingIamMember = null as any;
utilities.lazyLoad(exports, ["BigqueryAnalyticsHubListingIamMember"], () => require("./bigqueryAnalyticsHubListingIamMember"));

export { BigqueryAnalyticsHubListingIamPolicyArgs, BigqueryAnalyticsHubListingIamPolicyState } from "./bigqueryAnalyticsHubListingIamPolicy";
export type BigqueryAnalyticsHubListingIamPolicy = import("./bigqueryAnalyticsHubListingIamPolicy").BigqueryAnalyticsHubListingIamPolicy;
export const BigqueryAnalyticsHubListingIamPolicy: typeof import("./bigqueryAnalyticsHubListingIamPolicy").BigqueryAnalyticsHubListingIamPolicy = null as any;
utilities.lazyLoad(exports, ["BigqueryAnalyticsHubListingIamPolicy"], () => require("./bigqueryAnalyticsHubListingIamPolicy"));

export { BigqueryBiReservationArgs, BigqueryBiReservationState } from "./bigqueryBiReservation";
export type BigqueryBiReservation = import("./bigqueryBiReservation").BigqueryBiReservation;
export const BigqueryBiReservation: typeof import("./bigqueryBiReservation").BigqueryBiReservation = null as any;
utilities.lazyLoad(exports, ["BigqueryBiReservation"], () => require("./bigqueryBiReservation"));

export { BigqueryCapacityCommitmentArgs, BigqueryCapacityCommitmentState } from "./bigqueryCapacityCommitment";
export type BigqueryCapacityCommitment = import("./bigqueryCapacityCommitment").BigqueryCapacityCommitment;
export const BigqueryCapacityCommitment: typeof import("./bigqueryCapacityCommitment").BigqueryCapacityCommitment = null as any;
utilities.lazyLoad(exports, ["BigqueryCapacityCommitment"], () => require("./bigqueryCapacityCommitment"));

export { BigqueryConnectionArgs, BigqueryConnectionState } from "./bigqueryConnection";
export type BigqueryConnection = import("./bigqueryConnection").BigqueryConnection;
export const BigqueryConnection: typeof import("./bigqueryConnection").BigqueryConnection = null as any;
utilities.lazyLoad(exports, ["BigqueryConnection"], () => require("./bigqueryConnection"));

export { BigqueryConnectionIamBindingArgs, BigqueryConnectionIamBindingState } from "./bigqueryConnectionIamBinding";
export type BigqueryConnectionIamBinding = import("./bigqueryConnectionIamBinding").BigqueryConnectionIamBinding;
export const BigqueryConnectionIamBinding: typeof import("./bigqueryConnectionIamBinding").BigqueryConnectionIamBinding = null as any;
utilities.lazyLoad(exports, ["BigqueryConnectionIamBinding"], () => require("./bigqueryConnectionIamBinding"));

export { BigqueryConnectionIamMemberArgs, BigqueryConnectionIamMemberState } from "./bigqueryConnectionIamMember";
export type BigqueryConnectionIamMember = import("./bigqueryConnectionIamMember").BigqueryConnectionIamMember;
export const BigqueryConnectionIamMember: typeof import("./bigqueryConnectionIamMember").BigqueryConnectionIamMember = null as any;
utilities.lazyLoad(exports, ["BigqueryConnectionIamMember"], () => require("./bigqueryConnectionIamMember"));

export { BigqueryConnectionIamPolicyArgs, BigqueryConnectionIamPolicyState } from "./bigqueryConnectionIamPolicy";
export type BigqueryConnectionIamPolicy = import("./bigqueryConnectionIamPolicy").BigqueryConnectionIamPolicy;
export const BigqueryConnectionIamPolicy: typeof import("./bigqueryConnectionIamPolicy").BigqueryConnectionIamPolicy = null as any;
utilities.lazyLoad(exports, ["BigqueryConnectionIamPolicy"], () => require("./bigqueryConnectionIamPolicy"));

export { BigqueryDataTransferConfigArgs, BigqueryDataTransferConfigState } from "./bigqueryDataTransferConfig";
export type BigqueryDataTransferConfig = import("./bigqueryDataTransferConfig").BigqueryDataTransferConfig;
export const BigqueryDataTransferConfig: typeof import("./bigqueryDataTransferConfig").BigqueryDataTransferConfig = null as any;
utilities.lazyLoad(exports, ["BigqueryDataTransferConfig"], () => require("./bigqueryDataTransferConfig"));

export { BigqueryDatapolicyDataPolicyArgs, BigqueryDatapolicyDataPolicyState } from "./bigqueryDatapolicyDataPolicy";
export type BigqueryDatapolicyDataPolicy = import("./bigqueryDatapolicyDataPolicy").BigqueryDatapolicyDataPolicy;
export const BigqueryDatapolicyDataPolicy: typeof import("./bigqueryDatapolicyDataPolicy").BigqueryDatapolicyDataPolicy = null as any;
utilities.lazyLoad(exports, ["BigqueryDatapolicyDataPolicy"], () => require("./bigqueryDatapolicyDataPolicy"));

export { BigqueryDatapolicyDataPolicyIamBindingArgs, BigqueryDatapolicyDataPolicyIamBindingState } from "./bigqueryDatapolicyDataPolicyIamBinding";
export type BigqueryDatapolicyDataPolicyIamBinding = import("./bigqueryDatapolicyDataPolicyIamBinding").BigqueryDatapolicyDataPolicyIamBinding;
export const BigqueryDatapolicyDataPolicyIamBinding: typeof import("./bigqueryDatapolicyDataPolicyIamBinding").BigqueryDatapolicyDataPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["BigqueryDatapolicyDataPolicyIamBinding"], () => require("./bigqueryDatapolicyDataPolicyIamBinding"));

export { BigqueryDatapolicyDataPolicyIamMemberArgs, BigqueryDatapolicyDataPolicyIamMemberState } from "./bigqueryDatapolicyDataPolicyIamMember";
export type BigqueryDatapolicyDataPolicyIamMember = import("./bigqueryDatapolicyDataPolicyIamMember").BigqueryDatapolicyDataPolicyIamMember;
export const BigqueryDatapolicyDataPolicyIamMember: typeof import("./bigqueryDatapolicyDataPolicyIamMember").BigqueryDatapolicyDataPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["BigqueryDatapolicyDataPolicyIamMember"], () => require("./bigqueryDatapolicyDataPolicyIamMember"));

export { BigqueryDatapolicyDataPolicyIamPolicyArgs, BigqueryDatapolicyDataPolicyIamPolicyState } from "./bigqueryDatapolicyDataPolicyIamPolicy";
export type BigqueryDatapolicyDataPolicyIamPolicy = import("./bigqueryDatapolicyDataPolicyIamPolicy").BigqueryDatapolicyDataPolicyIamPolicy;
export const BigqueryDatapolicyDataPolicyIamPolicy: typeof import("./bigqueryDatapolicyDataPolicyIamPolicy").BigqueryDatapolicyDataPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["BigqueryDatapolicyDataPolicyIamPolicy"], () => require("./bigqueryDatapolicyDataPolicyIamPolicy"));

export { BigqueryDatasetArgs, BigqueryDatasetState } from "./bigqueryDataset";
export type BigqueryDataset = import("./bigqueryDataset").BigqueryDataset;
export const BigqueryDataset: typeof import("./bigqueryDataset").BigqueryDataset = null as any;
utilities.lazyLoad(exports, ["BigqueryDataset"], () => require("./bigqueryDataset"));

export { BigqueryDatasetAccessArgs, BigqueryDatasetAccessState } from "./bigqueryDatasetAccess";
export type BigqueryDatasetAccess = import("./bigqueryDatasetAccess").BigqueryDatasetAccess;
export const BigqueryDatasetAccess: typeof import("./bigqueryDatasetAccess").BigqueryDatasetAccess = null as any;
utilities.lazyLoad(exports, ["BigqueryDatasetAccess"], () => require("./bigqueryDatasetAccess"));

export { BigqueryDatasetIamBindingArgs, BigqueryDatasetIamBindingState } from "./bigqueryDatasetIamBinding";
export type BigqueryDatasetIamBinding = import("./bigqueryDatasetIamBinding").BigqueryDatasetIamBinding;
export const BigqueryDatasetIamBinding: typeof import("./bigqueryDatasetIamBinding").BigqueryDatasetIamBinding = null as any;
utilities.lazyLoad(exports, ["BigqueryDatasetIamBinding"], () => require("./bigqueryDatasetIamBinding"));

export { BigqueryDatasetIamMemberArgs, BigqueryDatasetIamMemberState } from "./bigqueryDatasetIamMember";
export type BigqueryDatasetIamMember = import("./bigqueryDatasetIamMember").BigqueryDatasetIamMember;
export const BigqueryDatasetIamMember: typeof import("./bigqueryDatasetIamMember").BigqueryDatasetIamMember = null as any;
utilities.lazyLoad(exports, ["BigqueryDatasetIamMember"], () => require("./bigqueryDatasetIamMember"));

export { BigqueryDatasetIamPolicyArgs, BigqueryDatasetIamPolicyState } from "./bigqueryDatasetIamPolicy";
export type BigqueryDatasetIamPolicy = import("./bigqueryDatasetIamPolicy").BigqueryDatasetIamPolicy;
export const BigqueryDatasetIamPolicy: typeof import("./bigqueryDatasetIamPolicy").BigqueryDatasetIamPolicy = null as any;
utilities.lazyLoad(exports, ["BigqueryDatasetIamPolicy"], () => require("./bigqueryDatasetIamPolicy"));

export { BigqueryJobArgs, BigqueryJobState } from "./bigqueryJob";
export type BigqueryJob = import("./bigqueryJob").BigqueryJob;
export const BigqueryJob: typeof import("./bigqueryJob").BigqueryJob = null as any;
utilities.lazyLoad(exports, ["BigqueryJob"], () => require("./bigqueryJob"));

export { BigqueryReservationArgs, BigqueryReservationState } from "./bigqueryReservation";
export type BigqueryReservation = import("./bigqueryReservation").BigqueryReservation;
export const BigqueryReservation: typeof import("./bigqueryReservation").BigqueryReservation = null as any;
utilities.lazyLoad(exports, ["BigqueryReservation"], () => require("./bigqueryReservation"));

export { BigqueryReservationAssignmentArgs, BigqueryReservationAssignmentState } from "./bigqueryReservationAssignment";
export type BigqueryReservationAssignment = import("./bigqueryReservationAssignment").BigqueryReservationAssignment;
export const BigqueryReservationAssignment: typeof import("./bigqueryReservationAssignment").BigqueryReservationAssignment = null as any;
utilities.lazyLoad(exports, ["BigqueryReservationAssignment"], () => require("./bigqueryReservationAssignment"));

export { BigqueryRoutineArgs, BigqueryRoutineState } from "./bigqueryRoutine";
export type BigqueryRoutine = import("./bigqueryRoutine").BigqueryRoutine;
export const BigqueryRoutine: typeof import("./bigqueryRoutine").BigqueryRoutine = null as any;
utilities.lazyLoad(exports, ["BigqueryRoutine"], () => require("./bigqueryRoutine"));

export { BigqueryTableArgs, BigqueryTableState } from "./bigqueryTable";
export type BigqueryTable = import("./bigqueryTable").BigqueryTable;
export const BigqueryTable: typeof import("./bigqueryTable").BigqueryTable = null as any;
utilities.lazyLoad(exports, ["BigqueryTable"], () => require("./bigqueryTable"));

export { BigqueryTableIamBindingArgs, BigqueryTableIamBindingState } from "./bigqueryTableIamBinding";
export type BigqueryTableIamBinding = import("./bigqueryTableIamBinding").BigqueryTableIamBinding;
export const BigqueryTableIamBinding: typeof import("./bigqueryTableIamBinding").BigqueryTableIamBinding = null as any;
utilities.lazyLoad(exports, ["BigqueryTableIamBinding"], () => require("./bigqueryTableIamBinding"));

export { BigqueryTableIamMemberArgs, BigqueryTableIamMemberState } from "./bigqueryTableIamMember";
export type BigqueryTableIamMember = import("./bigqueryTableIamMember").BigqueryTableIamMember;
export const BigqueryTableIamMember: typeof import("./bigqueryTableIamMember").BigqueryTableIamMember = null as any;
utilities.lazyLoad(exports, ["BigqueryTableIamMember"], () => require("./bigqueryTableIamMember"));

export { BigqueryTableIamPolicyArgs, BigqueryTableIamPolicyState } from "./bigqueryTableIamPolicy";
export type BigqueryTableIamPolicy = import("./bigqueryTableIamPolicy").BigqueryTableIamPolicy;
export const BigqueryTableIamPolicy: typeof import("./bigqueryTableIamPolicy").BigqueryTableIamPolicy = null as any;
utilities.lazyLoad(exports, ["BigqueryTableIamPolicy"], () => require("./bigqueryTableIamPolicy"));

export { BigtableAppProfileArgs, BigtableAppProfileState } from "./bigtableAppProfile";
export type BigtableAppProfile = import("./bigtableAppProfile").BigtableAppProfile;
export const BigtableAppProfile: typeof import("./bigtableAppProfile").BigtableAppProfile = null as any;
utilities.lazyLoad(exports, ["BigtableAppProfile"], () => require("./bigtableAppProfile"));

export { BigtableAuthorizedViewArgs, BigtableAuthorizedViewState } from "./bigtableAuthorizedView";
export type BigtableAuthorizedView = import("./bigtableAuthorizedView").BigtableAuthorizedView;
export const BigtableAuthorizedView: typeof import("./bigtableAuthorizedView").BigtableAuthorizedView = null as any;
utilities.lazyLoad(exports, ["BigtableAuthorizedView"], () => require("./bigtableAuthorizedView"));

export { BigtableGcPolicyArgs, BigtableGcPolicyState } from "./bigtableGcPolicy";
export type BigtableGcPolicy = import("./bigtableGcPolicy").BigtableGcPolicy;
export const BigtableGcPolicy: typeof import("./bigtableGcPolicy").BigtableGcPolicy = null as any;
utilities.lazyLoad(exports, ["BigtableGcPolicy"], () => require("./bigtableGcPolicy"));

export { BigtableInstanceArgs, BigtableInstanceState } from "./bigtableInstance";
export type BigtableInstance = import("./bigtableInstance").BigtableInstance;
export const BigtableInstance: typeof import("./bigtableInstance").BigtableInstance = null as any;
utilities.lazyLoad(exports, ["BigtableInstance"], () => require("./bigtableInstance"));

export { BigtableInstanceIamBindingArgs, BigtableInstanceIamBindingState } from "./bigtableInstanceIamBinding";
export type BigtableInstanceIamBinding = import("./bigtableInstanceIamBinding").BigtableInstanceIamBinding;
export const BigtableInstanceIamBinding: typeof import("./bigtableInstanceIamBinding").BigtableInstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["BigtableInstanceIamBinding"], () => require("./bigtableInstanceIamBinding"));

export { BigtableInstanceIamMemberArgs, BigtableInstanceIamMemberState } from "./bigtableInstanceIamMember";
export type BigtableInstanceIamMember = import("./bigtableInstanceIamMember").BigtableInstanceIamMember;
export const BigtableInstanceIamMember: typeof import("./bigtableInstanceIamMember").BigtableInstanceIamMember = null as any;
utilities.lazyLoad(exports, ["BigtableInstanceIamMember"], () => require("./bigtableInstanceIamMember"));

export { BigtableInstanceIamPolicyArgs, BigtableInstanceIamPolicyState } from "./bigtableInstanceIamPolicy";
export type BigtableInstanceIamPolicy = import("./bigtableInstanceIamPolicy").BigtableInstanceIamPolicy;
export const BigtableInstanceIamPolicy: typeof import("./bigtableInstanceIamPolicy").BigtableInstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["BigtableInstanceIamPolicy"], () => require("./bigtableInstanceIamPolicy"));

export { BigtableTableArgs, BigtableTableState } from "./bigtableTable";
export type BigtableTable = import("./bigtableTable").BigtableTable;
export const BigtableTable: typeof import("./bigtableTable").BigtableTable = null as any;
utilities.lazyLoad(exports, ["BigtableTable"], () => require("./bigtableTable"));

export { BigtableTableIamBindingArgs, BigtableTableIamBindingState } from "./bigtableTableIamBinding";
export type BigtableTableIamBinding = import("./bigtableTableIamBinding").BigtableTableIamBinding;
export const BigtableTableIamBinding: typeof import("./bigtableTableIamBinding").BigtableTableIamBinding = null as any;
utilities.lazyLoad(exports, ["BigtableTableIamBinding"], () => require("./bigtableTableIamBinding"));

export { BigtableTableIamMemberArgs, BigtableTableIamMemberState } from "./bigtableTableIamMember";
export type BigtableTableIamMember = import("./bigtableTableIamMember").BigtableTableIamMember;
export const BigtableTableIamMember: typeof import("./bigtableTableIamMember").BigtableTableIamMember = null as any;
utilities.lazyLoad(exports, ["BigtableTableIamMember"], () => require("./bigtableTableIamMember"));

export { BigtableTableIamPolicyArgs, BigtableTableIamPolicyState } from "./bigtableTableIamPolicy";
export type BigtableTableIamPolicy = import("./bigtableTableIamPolicy").BigtableTableIamPolicy;
export const BigtableTableIamPolicy: typeof import("./bigtableTableIamPolicy").BigtableTableIamPolicy = null as any;
utilities.lazyLoad(exports, ["BigtableTableIamPolicy"], () => require("./bigtableTableIamPolicy"));

export { BillingAccountIamBindingArgs, BillingAccountIamBindingState } from "./billingAccountIamBinding";
export type BillingAccountIamBinding = import("./billingAccountIamBinding").BillingAccountIamBinding;
export const BillingAccountIamBinding: typeof import("./billingAccountIamBinding").BillingAccountIamBinding = null as any;
utilities.lazyLoad(exports, ["BillingAccountIamBinding"], () => require("./billingAccountIamBinding"));

export { BillingAccountIamMemberArgs, BillingAccountIamMemberState } from "./billingAccountIamMember";
export type BillingAccountIamMember = import("./billingAccountIamMember").BillingAccountIamMember;
export const BillingAccountIamMember: typeof import("./billingAccountIamMember").BillingAccountIamMember = null as any;
utilities.lazyLoad(exports, ["BillingAccountIamMember"], () => require("./billingAccountIamMember"));

export { BillingAccountIamPolicyArgs, BillingAccountIamPolicyState } from "./billingAccountIamPolicy";
export type BillingAccountIamPolicy = import("./billingAccountIamPolicy").BillingAccountIamPolicy;
export const BillingAccountIamPolicy: typeof import("./billingAccountIamPolicy").BillingAccountIamPolicy = null as any;
utilities.lazyLoad(exports, ["BillingAccountIamPolicy"], () => require("./billingAccountIamPolicy"));

export { BillingBudgetArgs, BillingBudgetState } from "./billingBudget";
export type BillingBudget = import("./billingBudget").BillingBudget;
export const BillingBudget: typeof import("./billingBudget").BillingBudget = null as any;
utilities.lazyLoad(exports, ["BillingBudget"], () => require("./billingBudget"));

export { BillingProjectInfoArgs, BillingProjectInfoState } from "./billingProjectInfo";
export type BillingProjectInfo = import("./billingProjectInfo").BillingProjectInfo;
export const BillingProjectInfo: typeof import("./billingProjectInfo").BillingProjectInfo = null as any;
utilities.lazyLoad(exports, ["BillingProjectInfo"], () => require("./billingProjectInfo"));

export { BillingSubaccountArgs, BillingSubaccountState } from "./billingSubaccount";
export type BillingSubaccount = import("./billingSubaccount").BillingSubaccount;
export const BillingSubaccount: typeof import("./billingSubaccount").BillingSubaccount = null as any;
utilities.lazyLoad(exports, ["BillingSubaccount"], () => require("./billingSubaccount"));

export { BinaryAuthorizationAttestorArgs, BinaryAuthorizationAttestorState } from "./binaryAuthorizationAttestor";
export type BinaryAuthorizationAttestor = import("./binaryAuthorizationAttestor").BinaryAuthorizationAttestor;
export const BinaryAuthorizationAttestor: typeof import("./binaryAuthorizationAttestor").BinaryAuthorizationAttestor = null as any;
utilities.lazyLoad(exports, ["BinaryAuthorizationAttestor"], () => require("./binaryAuthorizationAttestor"));

export { BinaryAuthorizationAttestorIamBindingArgs, BinaryAuthorizationAttestorIamBindingState } from "./binaryAuthorizationAttestorIamBinding";
export type BinaryAuthorizationAttestorIamBinding = import("./binaryAuthorizationAttestorIamBinding").BinaryAuthorizationAttestorIamBinding;
export const BinaryAuthorizationAttestorIamBinding: typeof import("./binaryAuthorizationAttestorIamBinding").BinaryAuthorizationAttestorIamBinding = null as any;
utilities.lazyLoad(exports, ["BinaryAuthorizationAttestorIamBinding"], () => require("./binaryAuthorizationAttestorIamBinding"));

export { BinaryAuthorizationAttestorIamMemberArgs, BinaryAuthorizationAttestorIamMemberState } from "./binaryAuthorizationAttestorIamMember";
export type BinaryAuthorizationAttestorIamMember = import("./binaryAuthorizationAttestorIamMember").BinaryAuthorizationAttestorIamMember;
export const BinaryAuthorizationAttestorIamMember: typeof import("./binaryAuthorizationAttestorIamMember").BinaryAuthorizationAttestorIamMember = null as any;
utilities.lazyLoad(exports, ["BinaryAuthorizationAttestorIamMember"], () => require("./binaryAuthorizationAttestorIamMember"));

export { BinaryAuthorizationAttestorIamPolicyArgs, BinaryAuthorizationAttestorIamPolicyState } from "./binaryAuthorizationAttestorIamPolicy";
export type BinaryAuthorizationAttestorIamPolicy = import("./binaryAuthorizationAttestorIamPolicy").BinaryAuthorizationAttestorIamPolicy;
export const BinaryAuthorizationAttestorIamPolicy: typeof import("./binaryAuthorizationAttestorIamPolicy").BinaryAuthorizationAttestorIamPolicy = null as any;
utilities.lazyLoad(exports, ["BinaryAuthorizationAttestorIamPolicy"], () => require("./binaryAuthorizationAttestorIamPolicy"));

export { BinaryAuthorizationPolicyArgs, BinaryAuthorizationPolicyState } from "./binaryAuthorizationPolicy";
export type BinaryAuthorizationPolicy = import("./binaryAuthorizationPolicy").BinaryAuthorizationPolicy;
export const BinaryAuthorizationPolicy: typeof import("./binaryAuthorizationPolicy").BinaryAuthorizationPolicy = null as any;
utilities.lazyLoad(exports, ["BinaryAuthorizationPolicy"], () => require("./binaryAuthorizationPolicy"));

export { BlockchainNodeEngineBlockchainNodesArgs, BlockchainNodeEngineBlockchainNodesState } from "./blockchainNodeEngineBlockchainNodes";
export type BlockchainNodeEngineBlockchainNodes = import("./blockchainNodeEngineBlockchainNodes").BlockchainNodeEngineBlockchainNodes;
export const BlockchainNodeEngineBlockchainNodes: typeof import("./blockchainNodeEngineBlockchainNodes").BlockchainNodeEngineBlockchainNodes = null as any;
utilities.lazyLoad(exports, ["BlockchainNodeEngineBlockchainNodes"], () => require("./blockchainNodeEngineBlockchainNodes"));

export { CertificateManagerCertificateArgs, CertificateManagerCertificateState } from "./certificateManagerCertificate";
export type CertificateManagerCertificate = import("./certificateManagerCertificate").CertificateManagerCertificate;
export const CertificateManagerCertificate: typeof import("./certificateManagerCertificate").CertificateManagerCertificate = null as any;
utilities.lazyLoad(exports, ["CertificateManagerCertificate"], () => require("./certificateManagerCertificate"));

export { CertificateManagerCertificateIssuanceConfigArgs, CertificateManagerCertificateIssuanceConfigState } from "./certificateManagerCertificateIssuanceConfig";
export type CertificateManagerCertificateIssuanceConfig = import("./certificateManagerCertificateIssuanceConfig").CertificateManagerCertificateIssuanceConfig;
export const CertificateManagerCertificateIssuanceConfig: typeof import("./certificateManagerCertificateIssuanceConfig").CertificateManagerCertificateIssuanceConfig = null as any;
utilities.lazyLoad(exports, ["CertificateManagerCertificateIssuanceConfig"], () => require("./certificateManagerCertificateIssuanceConfig"));

export { CertificateManagerCertificateMapArgs, CertificateManagerCertificateMapState } from "./certificateManagerCertificateMap";
export type CertificateManagerCertificateMap = import("./certificateManagerCertificateMap").CertificateManagerCertificateMap;
export const CertificateManagerCertificateMap: typeof import("./certificateManagerCertificateMap").CertificateManagerCertificateMap = null as any;
utilities.lazyLoad(exports, ["CertificateManagerCertificateMap"], () => require("./certificateManagerCertificateMap"));

export { CertificateManagerCertificateMapEntryArgs, CertificateManagerCertificateMapEntryState } from "./certificateManagerCertificateMapEntry";
export type CertificateManagerCertificateMapEntry = import("./certificateManagerCertificateMapEntry").CertificateManagerCertificateMapEntry;
export const CertificateManagerCertificateMapEntry: typeof import("./certificateManagerCertificateMapEntry").CertificateManagerCertificateMapEntry = null as any;
utilities.lazyLoad(exports, ["CertificateManagerCertificateMapEntry"], () => require("./certificateManagerCertificateMapEntry"));

export { CertificateManagerDnsAuthorizationArgs, CertificateManagerDnsAuthorizationState } from "./certificateManagerDnsAuthorization";
export type CertificateManagerDnsAuthorization = import("./certificateManagerDnsAuthorization").CertificateManagerDnsAuthorization;
export const CertificateManagerDnsAuthorization: typeof import("./certificateManagerDnsAuthorization").CertificateManagerDnsAuthorization = null as any;
utilities.lazyLoad(exports, ["CertificateManagerDnsAuthorization"], () => require("./certificateManagerDnsAuthorization"));

export { CertificateManagerTrustConfigArgs, CertificateManagerTrustConfigState } from "./certificateManagerTrustConfig";
export type CertificateManagerTrustConfig = import("./certificateManagerTrustConfig").CertificateManagerTrustConfig;
export const CertificateManagerTrustConfig: typeof import("./certificateManagerTrustConfig").CertificateManagerTrustConfig = null as any;
utilities.lazyLoad(exports, ["CertificateManagerTrustConfig"], () => require("./certificateManagerTrustConfig"));

export { CloudAssetFolderFeedArgs, CloudAssetFolderFeedState } from "./cloudAssetFolderFeed";
export type CloudAssetFolderFeed = import("./cloudAssetFolderFeed").CloudAssetFolderFeed;
export const CloudAssetFolderFeed: typeof import("./cloudAssetFolderFeed").CloudAssetFolderFeed = null as any;
utilities.lazyLoad(exports, ["CloudAssetFolderFeed"], () => require("./cloudAssetFolderFeed"));

export { CloudAssetOrganizationFeedArgs, CloudAssetOrganizationFeedState } from "./cloudAssetOrganizationFeed";
export type CloudAssetOrganizationFeed = import("./cloudAssetOrganizationFeed").CloudAssetOrganizationFeed;
export const CloudAssetOrganizationFeed: typeof import("./cloudAssetOrganizationFeed").CloudAssetOrganizationFeed = null as any;
utilities.lazyLoad(exports, ["CloudAssetOrganizationFeed"], () => require("./cloudAssetOrganizationFeed"));

export { CloudAssetProjectFeedArgs, CloudAssetProjectFeedState } from "./cloudAssetProjectFeed";
export type CloudAssetProjectFeed = import("./cloudAssetProjectFeed").CloudAssetProjectFeed;
export const CloudAssetProjectFeed: typeof import("./cloudAssetProjectFeed").CloudAssetProjectFeed = null as any;
utilities.lazyLoad(exports, ["CloudAssetProjectFeed"], () => require("./cloudAssetProjectFeed"));

export { CloudIdentityGroupArgs, CloudIdentityGroupState } from "./cloudIdentityGroup";
export type CloudIdentityGroup = import("./cloudIdentityGroup").CloudIdentityGroup;
export const CloudIdentityGroup: typeof import("./cloudIdentityGroup").CloudIdentityGroup = null as any;
utilities.lazyLoad(exports, ["CloudIdentityGroup"], () => require("./cloudIdentityGroup"));

export { CloudIdentityGroupMembershipArgs, CloudIdentityGroupMembershipState } from "./cloudIdentityGroupMembership";
export type CloudIdentityGroupMembership = import("./cloudIdentityGroupMembership").CloudIdentityGroupMembership;
export const CloudIdentityGroupMembership: typeof import("./cloudIdentityGroupMembership").CloudIdentityGroupMembership = null as any;
utilities.lazyLoad(exports, ["CloudIdentityGroupMembership"], () => require("./cloudIdentityGroupMembership"));

export { CloudIdsEndpointArgs, CloudIdsEndpointState } from "./cloudIdsEndpoint";
export type CloudIdsEndpoint = import("./cloudIdsEndpoint").CloudIdsEndpoint;
export const CloudIdsEndpoint: typeof import("./cloudIdsEndpoint").CloudIdsEndpoint = null as any;
utilities.lazyLoad(exports, ["CloudIdsEndpoint"], () => require("./cloudIdsEndpoint"));

export { CloudQuotasQuotaPreferenceArgs, CloudQuotasQuotaPreferenceState } from "./cloudQuotasQuotaPreference";
export type CloudQuotasQuotaPreference = import("./cloudQuotasQuotaPreference").CloudQuotasQuotaPreference;
export const CloudQuotasQuotaPreference: typeof import("./cloudQuotasQuotaPreference").CloudQuotasQuotaPreference = null as any;
utilities.lazyLoad(exports, ["CloudQuotasQuotaPreference"], () => require("./cloudQuotasQuotaPreference"));

export { CloudRunDomainMappingArgs, CloudRunDomainMappingState } from "./cloudRunDomainMapping";
export type CloudRunDomainMapping = import("./cloudRunDomainMapping").CloudRunDomainMapping;
export const CloudRunDomainMapping: typeof import("./cloudRunDomainMapping").CloudRunDomainMapping = null as any;
utilities.lazyLoad(exports, ["CloudRunDomainMapping"], () => require("./cloudRunDomainMapping"));

export { CloudRunServiceArgs, CloudRunServiceState } from "./cloudRunService";
export type CloudRunService = import("./cloudRunService").CloudRunService;
export const CloudRunService: typeof import("./cloudRunService").CloudRunService = null as any;
utilities.lazyLoad(exports, ["CloudRunService"], () => require("./cloudRunService"));

export { CloudRunServiceIamBindingArgs, CloudRunServiceIamBindingState } from "./cloudRunServiceIamBinding";
export type CloudRunServiceIamBinding = import("./cloudRunServiceIamBinding").CloudRunServiceIamBinding;
export const CloudRunServiceIamBinding: typeof import("./cloudRunServiceIamBinding").CloudRunServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["CloudRunServiceIamBinding"], () => require("./cloudRunServiceIamBinding"));

export { CloudRunServiceIamMemberArgs, CloudRunServiceIamMemberState } from "./cloudRunServiceIamMember";
export type CloudRunServiceIamMember = import("./cloudRunServiceIamMember").CloudRunServiceIamMember;
export const CloudRunServiceIamMember: typeof import("./cloudRunServiceIamMember").CloudRunServiceIamMember = null as any;
utilities.lazyLoad(exports, ["CloudRunServiceIamMember"], () => require("./cloudRunServiceIamMember"));

export { CloudRunServiceIamPolicyArgs, CloudRunServiceIamPolicyState } from "./cloudRunServiceIamPolicy";
export type CloudRunServiceIamPolicy = import("./cloudRunServiceIamPolicy").CloudRunServiceIamPolicy;
export const CloudRunServiceIamPolicy: typeof import("./cloudRunServiceIamPolicy").CloudRunServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["CloudRunServiceIamPolicy"], () => require("./cloudRunServiceIamPolicy"));

export { CloudRunV2JobArgs, CloudRunV2JobState } from "./cloudRunV2Job";
export type CloudRunV2Job = import("./cloudRunV2Job").CloudRunV2Job;
export const CloudRunV2Job: typeof import("./cloudRunV2Job").CloudRunV2Job = null as any;
utilities.lazyLoad(exports, ["CloudRunV2Job"], () => require("./cloudRunV2Job"));

export { CloudRunV2JobIamBindingArgs, CloudRunV2JobIamBindingState } from "./cloudRunV2JobIamBinding";
export type CloudRunV2JobIamBinding = import("./cloudRunV2JobIamBinding").CloudRunV2JobIamBinding;
export const CloudRunV2JobIamBinding: typeof import("./cloudRunV2JobIamBinding").CloudRunV2JobIamBinding = null as any;
utilities.lazyLoad(exports, ["CloudRunV2JobIamBinding"], () => require("./cloudRunV2JobIamBinding"));

export { CloudRunV2JobIamMemberArgs, CloudRunV2JobIamMemberState } from "./cloudRunV2JobIamMember";
export type CloudRunV2JobIamMember = import("./cloudRunV2JobIamMember").CloudRunV2JobIamMember;
export const CloudRunV2JobIamMember: typeof import("./cloudRunV2JobIamMember").CloudRunV2JobIamMember = null as any;
utilities.lazyLoad(exports, ["CloudRunV2JobIamMember"], () => require("./cloudRunV2JobIamMember"));

export { CloudRunV2JobIamPolicyArgs, CloudRunV2JobIamPolicyState } from "./cloudRunV2JobIamPolicy";
export type CloudRunV2JobIamPolicy = import("./cloudRunV2JobIamPolicy").CloudRunV2JobIamPolicy;
export const CloudRunV2JobIamPolicy: typeof import("./cloudRunV2JobIamPolicy").CloudRunV2JobIamPolicy = null as any;
utilities.lazyLoad(exports, ["CloudRunV2JobIamPolicy"], () => require("./cloudRunV2JobIamPolicy"));

export { CloudRunV2ServiceArgs, CloudRunV2ServiceState } from "./cloudRunV2Service";
export type CloudRunV2Service = import("./cloudRunV2Service").CloudRunV2Service;
export const CloudRunV2Service: typeof import("./cloudRunV2Service").CloudRunV2Service = null as any;
utilities.lazyLoad(exports, ["CloudRunV2Service"], () => require("./cloudRunV2Service"));

export { CloudRunV2ServiceIamBindingArgs, CloudRunV2ServiceIamBindingState } from "./cloudRunV2ServiceIamBinding";
export type CloudRunV2ServiceIamBinding = import("./cloudRunV2ServiceIamBinding").CloudRunV2ServiceIamBinding;
export const CloudRunV2ServiceIamBinding: typeof import("./cloudRunV2ServiceIamBinding").CloudRunV2ServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["CloudRunV2ServiceIamBinding"], () => require("./cloudRunV2ServiceIamBinding"));

export { CloudRunV2ServiceIamMemberArgs, CloudRunV2ServiceIamMemberState } from "./cloudRunV2ServiceIamMember";
export type CloudRunV2ServiceIamMember = import("./cloudRunV2ServiceIamMember").CloudRunV2ServiceIamMember;
export const CloudRunV2ServiceIamMember: typeof import("./cloudRunV2ServiceIamMember").CloudRunV2ServiceIamMember = null as any;
utilities.lazyLoad(exports, ["CloudRunV2ServiceIamMember"], () => require("./cloudRunV2ServiceIamMember"));

export { CloudRunV2ServiceIamPolicyArgs, CloudRunV2ServiceIamPolicyState } from "./cloudRunV2ServiceIamPolicy";
export type CloudRunV2ServiceIamPolicy = import("./cloudRunV2ServiceIamPolicy").CloudRunV2ServiceIamPolicy;
export const CloudRunV2ServiceIamPolicy: typeof import("./cloudRunV2ServiceIamPolicy").CloudRunV2ServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["CloudRunV2ServiceIamPolicy"], () => require("./cloudRunV2ServiceIamPolicy"));

export { CloudSchedulerJobArgs, CloudSchedulerJobState } from "./cloudSchedulerJob";
export type CloudSchedulerJob = import("./cloudSchedulerJob").CloudSchedulerJob;
export const CloudSchedulerJob: typeof import("./cloudSchedulerJob").CloudSchedulerJob = null as any;
utilities.lazyLoad(exports, ["CloudSchedulerJob"], () => require("./cloudSchedulerJob"));

export { CloudTasksQueueArgs, CloudTasksQueueState } from "./cloudTasksQueue";
export type CloudTasksQueue = import("./cloudTasksQueue").CloudTasksQueue;
export const CloudTasksQueue: typeof import("./cloudTasksQueue").CloudTasksQueue = null as any;
utilities.lazyLoad(exports, ["CloudTasksQueue"], () => require("./cloudTasksQueue"));

export { CloudTasksQueueIamBindingArgs, CloudTasksQueueIamBindingState } from "./cloudTasksQueueIamBinding";
export type CloudTasksQueueIamBinding = import("./cloudTasksQueueIamBinding").CloudTasksQueueIamBinding;
export const CloudTasksQueueIamBinding: typeof import("./cloudTasksQueueIamBinding").CloudTasksQueueIamBinding = null as any;
utilities.lazyLoad(exports, ["CloudTasksQueueIamBinding"], () => require("./cloudTasksQueueIamBinding"));

export { CloudTasksQueueIamMemberArgs, CloudTasksQueueIamMemberState } from "./cloudTasksQueueIamMember";
export type CloudTasksQueueIamMember = import("./cloudTasksQueueIamMember").CloudTasksQueueIamMember;
export const CloudTasksQueueIamMember: typeof import("./cloudTasksQueueIamMember").CloudTasksQueueIamMember = null as any;
utilities.lazyLoad(exports, ["CloudTasksQueueIamMember"], () => require("./cloudTasksQueueIamMember"));

export { CloudTasksQueueIamPolicyArgs, CloudTasksQueueIamPolicyState } from "./cloudTasksQueueIamPolicy";
export type CloudTasksQueueIamPolicy = import("./cloudTasksQueueIamPolicy").CloudTasksQueueIamPolicy;
export const CloudTasksQueueIamPolicy: typeof import("./cloudTasksQueueIamPolicy").CloudTasksQueueIamPolicy = null as any;
utilities.lazyLoad(exports, ["CloudTasksQueueIamPolicy"], () => require("./cloudTasksQueueIamPolicy"));

export { CloudbuildBitbucketServerConfigArgs, CloudbuildBitbucketServerConfigState } from "./cloudbuildBitbucketServerConfig";
export type CloudbuildBitbucketServerConfig = import("./cloudbuildBitbucketServerConfig").CloudbuildBitbucketServerConfig;
export const CloudbuildBitbucketServerConfig: typeof import("./cloudbuildBitbucketServerConfig").CloudbuildBitbucketServerConfig = null as any;
utilities.lazyLoad(exports, ["CloudbuildBitbucketServerConfig"], () => require("./cloudbuildBitbucketServerConfig"));

export { CloudbuildTriggerArgs, CloudbuildTriggerState } from "./cloudbuildTrigger";
export type CloudbuildTrigger = import("./cloudbuildTrigger").CloudbuildTrigger;
export const CloudbuildTrigger: typeof import("./cloudbuildTrigger").CloudbuildTrigger = null as any;
utilities.lazyLoad(exports, ["CloudbuildTrigger"], () => require("./cloudbuildTrigger"));

export { CloudbuildWorkerPoolArgs, CloudbuildWorkerPoolState } from "./cloudbuildWorkerPool";
export type CloudbuildWorkerPool = import("./cloudbuildWorkerPool").CloudbuildWorkerPool;
export const CloudbuildWorkerPool: typeof import("./cloudbuildWorkerPool").CloudbuildWorkerPool = null as any;
utilities.lazyLoad(exports, ["CloudbuildWorkerPool"], () => require("./cloudbuildWorkerPool"));

export { Cloudbuildv2ConnectionArgs, Cloudbuildv2ConnectionState } from "./cloudbuildv2Connection";
export type Cloudbuildv2Connection = import("./cloudbuildv2Connection").Cloudbuildv2Connection;
export const Cloudbuildv2Connection: typeof import("./cloudbuildv2Connection").Cloudbuildv2Connection = null as any;
utilities.lazyLoad(exports, ["Cloudbuildv2Connection"], () => require("./cloudbuildv2Connection"));

export { Cloudbuildv2ConnectionIamBindingArgs, Cloudbuildv2ConnectionIamBindingState } from "./cloudbuildv2ConnectionIamBinding";
export type Cloudbuildv2ConnectionIamBinding = import("./cloudbuildv2ConnectionIamBinding").Cloudbuildv2ConnectionIamBinding;
export const Cloudbuildv2ConnectionIamBinding: typeof import("./cloudbuildv2ConnectionIamBinding").Cloudbuildv2ConnectionIamBinding = null as any;
utilities.lazyLoad(exports, ["Cloudbuildv2ConnectionIamBinding"], () => require("./cloudbuildv2ConnectionIamBinding"));

export { Cloudbuildv2ConnectionIamMemberArgs, Cloudbuildv2ConnectionIamMemberState } from "./cloudbuildv2ConnectionIamMember";
export type Cloudbuildv2ConnectionIamMember = import("./cloudbuildv2ConnectionIamMember").Cloudbuildv2ConnectionIamMember;
export const Cloudbuildv2ConnectionIamMember: typeof import("./cloudbuildv2ConnectionIamMember").Cloudbuildv2ConnectionIamMember = null as any;
utilities.lazyLoad(exports, ["Cloudbuildv2ConnectionIamMember"], () => require("./cloudbuildv2ConnectionIamMember"));

export { Cloudbuildv2ConnectionIamPolicyArgs, Cloudbuildv2ConnectionIamPolicyState } from "./cloudbuildv2ConnectionIamPolicy";
export type Cloudbuildv2ConnectionIamPolicy = import("./cloudbuildv2ConnectionIamPolicy").Cloudbuildv2ConnectionIamPolicy;
export const Cloudbuildv2ConnectionIamPolicy: typeof import("./cloudbuildv2ConnectionIamPolicy").Cloudbuildv2ConnectionIamPolicy = null as any;
utilities.lazyLoad(exports, ["Cloudbuildv2ConnectionIamPolicy"], () => require("./cloudbuildv2ConnectionIamPolicy"));

export { Cloudbuildv2RepositoryArgs, Cloudbuildv2RepositoryState } from "./cloudbuildv2Repository";
export type Cloudbuildv2Repository = import("./cloudbuildv2Repository").Cloudbuildv2Repository;
export const Cloudbuildv2Repository: typeof import("./cloudbuildv2Repository").Cloudbuildv2Repository = null as any;
utilities.lazyLoad(exports, ["Cloudbuildv2Repository"], () => require("./cloudbuildv2Repository"));

export { ClouddeployAutomationArgs, ClouddeployAutomationState } from "./clouddeployAutomation";
export type ClouddeployAutomation = import("./clouddeployAutomation").ClouddeployAutomation;
export const ClouddeployAutomation: typeof import("./clouddeployAutomation").ClouddeployAutomation = null as any;
utilities.lazyLoad(exports, ["ClouddeployAutomation"], () => require("./clouddeployAutomation"));

export { ClouddeployCustomTargetTypeArgs, ClouddeployCustomTargetTypeState } from "./clouddeployCustomTargetType";
export type ClouddeployCustomTargetType = import("./clouddeployCustomTargetType").ClouddeployCustomTargetType;
export const ClouddeployCustomTargetType: typeof import("./clouddeployCustomTargetType").ClouddeployCustomTargetType = null as any;
utilities.lazyLoad(exports, ["ClouddeployCustomTargetType"], () => require("./clouddeployCustomTargetType"));

export { ClouddeployCustomTargetTypeIamBindingArgs, ClouddeployCustomTargetTypeIamBindingState } from "./clouddeployCustomTargetTypeIamBinding";
export type ClouddeployCustomTargetTypeIamBinding = import("./clouddeployCustomTargetTypeIamBinding").ClouddeployCustomTargetTypeIamBinding;
export const ClouddeployCustomTargetTypeIamBinding: typeof import("./clouddeployCustomTargetTypeIamBinding").ClouddeployCustomTargetTypeIamBinding = null as any;
utilities.lazyLoad(exports, ["ClouddeployCustomTargetTypeIamBinding"], () => require("./clouddeployCustomTargetTypeIamBinding"));

export { ClouddeployCustomTargetTypeIamMemberArgs, ClouddeployCustomTargetTypeIamMemberState } from "./clouddeployCustomTargetTypeIamMember";
export type ClouddeployCustomTargetTypeIamMember = import("./clouddeployCustomTargetTypeIamMember").ClouddeployCustomTargetTypeIamMember;
export const ClouddeployCustomTargetTypeIamMember: typeof import("./clouddeployCustomTargetTypeIamMember").ClouddeployCustomTargetTypeIamMember = null as any;
utilities.lazyLoad(exports, ["ClouddeployCustomTargetTypeIamMember"], () => require("./clouddeployCustomTargetTypeIamMember"));

export { ClouddeployCustomTargetTypeIamPolicyArgs, ClouddeployCustomTargetTypeIamPolicyState } from "./clouddeployCustomTargetTypeIamPolicy";
export type ClouddeployCustomTargetTypeIamPolicy = import("./clouddeployCustomTargetTypeIamPolicy").ClouddeployCustomTargetTypeIamPolicy;
export const ClouddeployCustomTargetTypeIamPolicy: typeof import("./clouddeployCustomTargetTypeIamPolicy").ClouddeployCustomTargetTypeIamPolicy = null as any;
utilities.lazyLoad(exports, ["ClouddeployCustomTargetTypeIamPolicy"], () => require("./clouddeployCustomTargetTypeIamPolicy"));

export { ClouddeployDeliveryPipelineArgs, ClouddeployDeliveryPipelineState } from "./clouddeployDeliveryPipeline";
export type ClouddeployDeliveryPipeline = import("./clouddeployDeliveryPipeline").ClouddeployDeliveryPipeline;
export const ClouddeployDeliveryPipeline: typeof import("./clouddeployDeliveryPipeline").ClouddeployDeliveryPipeline = null as any;
utilities.lazyLoad(exports, ["ClouddeployDeliveryPipeline"], () => require("./clouddeployDeliveryPipeline"));

export { ClouddeployDeliveryPipelineIamBindingArgs, ClouddeployDeliveryPipelineIamBindingState } from "./clouddeployDeliveryPipelineIamBinding";
export type ClouddeployDeliveryPipelineIamBinding = import("./clouddeployDeliveryPipelineIamBinding").ClouddeployDeliveryPipelineIamBinding;
export const ClouddeployDeliveryPipelineIamBinding: typeof import("./clouddeployDeliveryPipelineIamBinding").ClouddeployDeliveryPipelineIamBinding = null as any;
utilities.lazyLoad(exports, ["ClouddeployDeliveryPipelineIamBinding"], () => require("./clouddeployDeliveryPipelineIamBinding"));

export { ClouddeployDeliveryPipelineIamMemberArgs, ClouddeployDeliveryPipelineIamMemberState } from "./clouddeployDeliveryPipelineIamMember";
export type ClouddeployDeliveryPipelineIamMember = import("./clouddeployDeliveryPipelineIamMember").ClouddeployDeliveryPipelineIamMember;
export const ClouddeployDeliveryPipelineIamMember: typeof import("./clouddeployDeliveryPipelineIamMember").ClouddeployDeliveryPipelineIamMember = null as any;
utilities.lazyLoad(exports, ["ClouddeployDeliveryPipelineIamMember"], () => require("./clouddeployDeliveryPipelineIamMember"));

export { ClouddeployDeliveryPipelineIamPolicyArgs, ClouddeployDeliveryPipelineIamPolicyState } from "./clouddeployDeliveryPipelineIamPolicy";
export type ClouddeployDeliveryPipelineIamPolicy = import("./clouddeployDeliveryPipelineIamPolicy").ClouddeployDeliveryPipelineIamPolicy;
export const ClouddeployDeliveryPipelineIamPolicy: typeof import("./clouddeployDeliveryPipelineIamPolicy").ClouddeployDeliveryPipelineIamPolicy = null as any;
utilities.lazyLoad(exports, ["ClouddeployDeliveryPipelineIamPolicy"], () => require("./clouddeployDeliveryPipelineIamPolicy"));

export { ClouddeployTargetArgs, ClouddeployTargetState } from "./clouddeployTarget";
export type ClouddeployTarget = import("./clouddeployTarget").ClouddeployTarget;
export const ClouddeployTarget: typeof import("./clouddeployTarget").ClouddeployTarget = null as any;
utilities.lazyLoad(exports, ["ClouddeployTarget"], () => require("./clouddeployTarget"));

export { ClouddeployTargetIamBindingArgs, ClouddeployTargetIamBindingState } from "./clouddeployTargetIamBinding";
export type ClouddeployTargetIamBinding = import("./clouddeployTargetIamBinding").ClouddeployTargetIamBinding;
export const ClouddeployTargetIamBinding: typeof import("./clouddeployTargetIamBinding").ClouddeployTargetIamBinding = null as any;
utilities.lazyLoad(exports, ["ClouddeployTargetIamBinding"], () => require("./clouddeployTargetIamBinding"));

export { ClouddeployTargetIamMemberArgs, ClouddeployTargetIamMemberState } from "./clouddeployTargetIamMember";
export type ClouddeployTargetIamMember = import("./clouddeployTargetIamMember").ClouddeployTargetIamMember;
export const ClouddeployTargetIamMember: typeof import("./clouddeployTargetIamMember").ClouddeployTargetIamMember = null as any;
utilities.lazyLoad(exports, ["ClouddeployTargetIamMember"], () => require("./clouddeployTargetIamMember"));

export { ClouddeployTargetIamPolicyArgs, ClouddeployTargetIamPolicyState } from "./clouddeployTargetIamPolicy";
export type ClouddeployTargetIamPolicy = import("./clouddeployTargetIamPolicy").ClouddeployTargetIamPolicy;
export const ClouddeployTargetIamPolicy: typeof import("./clouddeployTargetIamPolicy").ClouddeployTargetIamPolicy = null as any;
utilities.lazyLoad(exports, ["ClouddeployTargetIamPolicy"], () => require("./clouddeployTargetIamPolicy"));

export { ClouddomainsRegistrationArgs, ClouddomainsRegistrationState } from "./clouddomainsRegistration";
export type ClouddomainsRegistration = import("./clouddomainsRegistration").ClouddomainsRegistration;
export const ClouddomainsRegistration: typeof import("./clouddomainsRegistration").ClouddomainsRegistration = null as any;
utilities.lazyLoad(exports, ["ClouddomainsRegistration"], () => require("./clouddomainsRegistration"));

export { Cloudfunctions2FunctionArgs, Cloudfunctions2FunctionState } from "./cloudfunctions2Function";
export type Cloudfunctions2Function = import("./cloudfunctions2Function").Cloudfunctions2Function;
export const Cloudfunctions2Function: typeof import("./cloudfunctions2Function").Cloudfunctions2Function = null as any;
utilities.lazyLoad(exports, ["Cloudfunctions2Function"], () => require("./cloudfunctions2Function"));

export { Cloudfunctions2FunctionIamBindingArgs, Cloudfunctions2FunctionIamBindingState } from "./cloudfunctions2FunctionIamBinding";
export type Cloudfunctions2FunctionIamBinding = import("./cloudfunctions2FunctionIamBinding").Cloudfunctions2FunctionIamBinding;
export const Cloudfunctions2FunctionIamBinding: typeof import("./cloudfunctions2FunctionIamBinding").Cloudfunctions2FunctionIamBinding = null as any;
utilities.lazyLoad(exports, ["Cloudfunctions2FunctionIamBinding"], () => require("./cloudfunctions2FunctionIamBinding"));

export { Cloudfunctions2FunctionIamMemberArgs, Cloudfunctions2FunctionIamMemberState } from "./cloudfunctions2FunctionIamMember";
export type Cloudfunctions2FunctionIamMember = import("./cloudfunctions2FunctionIamMember").Cloudfunctions2FunctionIamMember;
export const Cloudfunctions2FunctionIamMember: typeof import("./cloudfunctions2FunctionIamMember").Cloudfunctions2FunctionIamMember = null as any;
utilities.lazyLoad(exports, ["Cloudfunctions2FunctionIamMember"], () => require("./cloudfunctions2FunctionIamMember"));

export { Cloudfunctions2FunctionIamPolicyArgs, Cloudfunctions2FunctionIamPolicyState } from "./cloudfunctions2FunctionIamPolicy";
export type Cloudfunctions2FunctionIamPolicy = import("./cloudfunctions2FunctionIamPolicy").Cloudfunctions2FunctionIamPolicy;
export const Cloudfunctions2FunctionIamPolicy: typeof import("./cloudfunctions2FunctionIamPolicy").Cloudfunctions2FunctionIamPolicy = null as any;
utilities.lazyLoad(exports, ["Cloudfunctions2FunctionIamPolicy"], () => require("./cloudfunctions2FunctionIamPolicy"));

export { CloudfunctionsFunctionArgs, CloudfunctionsFunctionState } from "./cloudfunctionsFunction";
export type CloudfunctionsFunction = import("./cloudfunctionsFunction").CloudfunctionsFunction;
export const CloudfunctionsFunction: typeof import("./cloudfunctionsFunction").CloudfunctionsFunction = null as any;
utilities.lazyLoad(exports, ["CloudfunctionsFunction"], () => require("./cloudfunctionsFunction"));

export { CloudfunctionsFunctionIamBindingArgs, CloudfunctionsFunctionIamBindingState } from "./cloudfunctionsFunctionIamBinding";
export type CloudfunctionsFunctionIamBinding = import("./cloudfunctionsFunctionIamBinding").CloudfunctionsFunctionIamBinding;
export const CloudfunctionsFunctionIamBinding: typeof import("./cloudfunctionsFunctionIamBinding").CloudfunctionsFunctionIamBinding = null as any;
utilities.lazyLoad(exports, ["CloudfunctionsFunctionIamBinding"], () => require("./cloudfunctionsFunctionIamBinding"));

export { CloudfunctionsFunctionIamMemberArgs, CloudfunctionsFunctionIamMemberState } from "./cloudfunctionsFunctionIamMember";
export type CloudfunctionsFunctionIamMember = import("./cloudfunctionsFunctionIamMember").CloudfunctionsFunctionIamMember;
export const CloudfunctionsFunctionIamMember: typeof import("./cloudfunctionsFunctionIamMember").CloudfunctionsFunctionIamMember = null as any;
utilities.lazyLoad(exports, ["CloudfunctionsFunctionIamMember"], () => require("./cloudfunctionsFunctionIamMember"));

export { CloudfunctionsFunctionIamPolicyArgs, CloudfunctionsFunctionIamPolicyState } from "./cloudfunctionsFunctionIamPolicy";
export type CloudfunctionsFunctionIamPolicy = import("./cloudfunctionsFunctionIamPolicy").CloudfunctionsFunctionIamPolicy;
export const CloudfunctionsFunctionIamPolicy: typeof import("./cloudfunctionsFunctionIamPolicy").CloudfunctionsFunctionIamPolicy = null as any;
utilities.lazyLoad(exports, ["CloudfunctionsFunctionIamPolicy"], () => require("./cloudfunctionsFunctionIamPolicy"));

export { ComposerEnvironmentArgs, ComposerEnvironmentState } from "./composerEnvironment";
export type ComposerEnvironment = import("./composerEnvironment").ComposerEnvironment;
export const ComposerEnvironment: typeof import("./composerEnvironment").ComposerEnvironment = null as any;
utilities.lazyLoad(exports, ["ComposerEnvironment"], () => require("./composerEnvironment"));

export { ComposerUserWorkloadsConfigMapArgs, ComposerUserWorkloadsConfigMapState } from "./composerUserWorkloadsConfigMap";
export type ComposerUserWorkloadsConfigMap = import("./composerUserWorkloadsConfigMap").ComposerUserWorkloadsConfigMap;
export const ComposerUserWorkloadsConfigMap: typeof import("./composerUserWorkloadsConfigMap").ComposerUserWorkloadsConfigMap = null as any;
utilities.lazyLoad(exports, ["ComposerUserWorkloadsConfigMap"], () => require("./composerUserWorkloadsConfigMap"));

export { ComposerUserWorkloadsSecretArgs, ComposerUserWorkloadsSecretState } from "./composerUserWorkloadsSecret";
export type ComposerUserWorkloadsSecret = import("./composerUserWorkloadsSecret").ComposerUserWorkloadsSecret;
export const ComposerUserWorkloadsSecret: typeof import("./composerUserWorkloadsSecret").ComposerUserWorkloadsSecret = null as any;
utilities.lazyLoad(exports, ["ComposerUserWorkloadsSecret"], () => require("./composerUserWorkloadsSecret"));

export { ComputeAddressArgs, ComputeAddressState } from "./computeAddress";
export type ComputeAddress = import("./computeAddress").ComputeAddress;
export const ComputeAddress: typeof import("./computeAddress").ComputeAddress = null as any;
utilities.lazyLoad(exports, ["ComputeAddress"], () => require("./computeAddress"));

export { ComputeAttachedDiskArgs, ComputeAttachedDiskState } from "./computeAttachedDisk";
export type ComputeAttachedDisk = import("./computeAttachedDisk").ComputeAttachedDisk;
export const ComputeAttachedDisk: typeof import("./computeAttachedDisk").ComputeAttachedDisk = null as any;
utilities.lazyLoad(exports, ["ComputeAttachedDisk"], () => require("./computeAttachedDisk"));

export { ComputeAutoscalerArgs, ComputeAutoscalerState } from "./computeAutoscaler";
export type ComputeAutoscaler = import("./computeAutoscaler").ComputeAutoscaler;
export const ComputeAutoscaler: typeof import("./computeAutoscaler").ComputeAutoscaler = null as any;
utilities.lazyLoad(exports, ["ComputeAutoscaler"], () => require("./computeAutoscaler"));

export { ComputeBackendBucketArgs, ComputeBackendBucketState } from "./computeBackendBucket";
export type ComputeBackendBucket = import("./computeBackendBucket").ComputeBackendBucket;
export const ComputeBackendBucket: typeof import("./computeBackendBucket").ComputeBackendBucket = null as any;
utilities.lazyLoad(exports, ["ComputeBackendBucket"], () => require("./computeBackendBucket"));

export { ComputeBackendBucketIamBindingArgs, ComputeBackendBucketIamBindingState } from "./computeBackendBucketIamBinding";
export type ComputeBackendBucketIamBinding = import("./computeBackendBucketIamBinding").ComputeBackendBucketIamBinding;
export const ComputeBackendBucketIamBinding: typeof import("./computeBackendBucketIamBinding").ComputeBackendBucketIamBinding = null as any;
utilities.lazyLoad(exports, ["ComputeBackendBucketIamBinding"], () => require("./computeBackendBucketIamBinding"));

export { ComputeBackendBucketIamMemberArgs, ComputeBackendBucketIamMemberState } from "./computeBackendBucketIamMember";
export type ComputeBackendBucketIamMember = import("./computeBackendBucketIamMember").ComputeBackendBucketIamMember;
export const ComputeBackendBucketIamMember: typeof import("./computeBackendBucketIamMember").ComputeBackendBucketIamMember = null as any;
utilities.lazyLoad(exports, ["ComputeBackendBucketIamMember"], () => require("./computeBackendBucketIamMember"));

export { ComputeBackendBucketIamPolicyArgs, ComputeBackendBucketIamPolicyState } from "./computeBackendBucketIamPolicy";
export type ComputeBackendBucketIamPolicy = import("./computeBackendBucketIamPolicy").ComputeBackendBucketIamPolicy;
export const ComputeBackendBucketIamPolicy: typeof import("./computeBackendBucketIamPolicy").ComputeBackendBucketIamPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeBackendBucketIamPolicy"], () => require("./computeBackendBucketIamPolicy"));

export { ComputeBackendBucketSignedUrlKeyArgs, ComputeBackendBucketSignedUrlKeyState } from "./computeBackendBucketSignedUrlKey";
export type ComputeBackendBucketSignedUrlKey = import("./computeBackendBucketSignedUrlKey").ComputeBackendBucketSignedUrlKey;
export const ComputeBackendBucketSignedUrlKey: typeof import("./computeBackendBucketSignedUrlKey").ComputeBackendBucketSignedUrlKey = null as any;
utilities.lazyLoad(exports, ["ComputeBackendBucketSignedUrlKey"], () => require("./computeBackendBucketSignedUrlKey"));

export { ComputeBackendServiceArgs, ComputeBackendServiceState } from "./computeBackendService";
export type ComputeBackendService = import("./computeBackendService").ComputeBackendService;
export const ComputeBackendService: typeof import("./computeBackendService").ComputeBackendService = null as any;
utilities.lazyLoad(exports, ["ComputeBackendService"], () => require("./computeBackendService"));

export { ComputeBackendServiceIamBindingArgs, ComputeBackendServiceIamBindingState } from "./computeBackendServiceIamBinding";
export type ComputeBackendServiceIamBinding = import("./computeBackendServiceIamBinding").ComputeBackendServiceIamBinding;
export const ComputeBackendServiceIamBinding: typeof import("./computeBackendServiceIamBinding").ComputeBackendServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["ComputeBackendServiceIamBinding"], () => require("./computeBackendServiceIamBinding"));

export { ComputeBackendServiceIamMemberArgs, ComputeBackendServiceIamMemberState } from "./computeBackendServiceIamMember";
export type ComputeBackendServiceIamMember = import("./computeBackendServiceIamMember").ComputeBackendServiceIamMember;
export const ComputeBackendServiceIamMember: typeof import("./computeBackendServiceIamMember").ComputeBackendServiceIamMember = null as any;
utilities.lazyLoad(exports, ["ComputeBackendServiceIamMember"], () => require("./computeBackendServiceIamMember"));

export { ComputeBackendServiceIamPolicyArgs, ComputeBackendServiceIamPolicyState } from "./computeBackendServiceIamPolicy";
export type ComputeBackendServiceIamPolicy = import("./computeBackendServiceIamPolicy").ComputeBackendServiceIamPolicy;
export const ComputeBackendServiceIamPolicy: typeof import("./computeBackendServiceIamPolicy").ComputeBackendServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeBackendServiceIamPolicy"], () => require("./computeBackendServiceIamPolicy"));

export { ComputeBackendServiceSignedUrlKeyArgs, ComputeBackendServiceSignedUrlKeyState } from "./computeBackendServiceSignedUrlKey";
export type ComputeBackendServiceSignedUrlKey = import("./computeBackendServiceSignedUrlKey").ComputeBackendServiceSignedUrlKey;
export const ComputeBackendServiceSignedUrlKey: typeof import("./computeBackendServiceSignedUrlKey").ComputeBackendServiceSignedUrlKey = null as any;
utilities.lazyLoad(exports, ["ComputeBackendServiceSignedUrlKey"], () => require("./computeBackendServiceSignedUrlKey"));

export { ComputeDiskArgs, ComputeDiskState } from "./computeDisk";
export type ComputeDisk = import("./computeDisk").ComputeDisk;
export const ComputeDisk: typeof import("./computeDisk").ComputeDisk = null as any;
utilities.lazyLoad(exports, ["ComputeDisk"], () => require("./computeDisk"));

export { ComputeDiskAsyncReplicationArgs, ComputeDiskAsyncReplicationState } from "./computeDiskAsyncReplication";
export type ComputeDiskAsyncReplication = import("./computeDiskAsyncReplication").ComputeDiskAsyncReplication;
export const ComputeDiskAsyncReplication: typeof import("./computeDiskAsyncReplication").ComputeDiskAsyncReplication = null as any;
utilities.lazyLoad(exports, ["ComputeDiskAsyncReplication"], () => require("./computeDiskAsyncReplication"));

export { ComputeDiskIamBindingArgs, ComputeDiskIamBindingState } from "./computeDiskIamBinding";
export type ComputeDiskIamBinding = import("./computeDiskIamBinding").ComputeDiskIamBinding;
export const ComputeDiskIamBinding: typeof import("./computeDiskIamBinding").ComputeDiskIamBinding = null as any;
utilities.lazyLoad(exports, ["ComputeDiskIamBinding"], () => require("./computeDiskIamBinding"));

export { ComputeDiskIamMemberArgs, ComputeDiskIamMemberState } from "./computeDiskIamMember";
export type ComputeDiskIamMember = import("./computeDiskIamMember").ComputeDiskIamMember;
export const ComputeDiskIamMember: typeof import("./computeDiskIamMember").ComputeDiskIamMember = null as any;
utilities.lazyLoad(exports, ["ComputeDiskIamMember"], () => require("./computeDiskIamMember"));

export { ComputeDiskIamPolicyArgs, ComputeDiskIamPolicyState } from "./computeDiskIamPolicy";
export type ComputeDiskIamPolicy = import("./computeDiskIamPolicy").ComputeDiskIamPolicy;
export const ComputeDiskIamPolicy: typeof import("./computeDiskIamPolicy").ComputeDiskIamPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeDiskIamPolicy"], () => require("./computeDiskIamPolicy"));

export { ComputeDiskResourcePolicyAttachmentArgs, ComputeDiskResourcePolicyAttachmentState } from "./computeDiskResourcePolicyAttachment";
export type ComputeDiskResourcePolicyAttachment = import("./computeDiskResourcePolicyAttachment").ComputeDiskResourcePolicyAttachment;
export const ComputeDiskResourcePolicyAttachment: typeof import("./computeDiskResourcePolicyAttachment").ComputeDiskResourcePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["ComputeDiskResourcePolicyAttachment"], () => require("./computeDiskResourcePolicyAttachment"));

export { ComputeExternalVpnGatewayArgs, ComputeExternalVpnGatewayState } from "./computeExternalVpnGateway";
export type ComputeExternalVpnGateway = import("./computeExternalVpnGateway").ComputeExternalVpnGateway;
export const ComputeExternalVpnGateway: typeof import("./computeExternalVpnGateway").ComputeExternalVpnGateway = null as any;
utilities.lazyLoad(exports, ["ComputeExternalVpnGateway"], () => require("./computeExternalVpnGateway"));

export { ComputeFirewallArgs, ComputeFirewallState } from "./computeFirewall";
export type ComputeFirewall = import("./computeFirewall").ComputeFirewall;
export const ComputeFirewall: typeof import("./computeFirewall").ComputeFirewall = null as any;
utilities.lazyLoad(exports, ["ComputeFirewall"], () => require("./computeFirewall"));

export { ComputeFirewallPolicyArgs, ComputeFirewallPolicyState } from "./computeFirewallPolicy";
export type ComputeFirewallPolicy = import("./computeFirewallPolicy").ComputeFirewallPolicy;
export const ComputeFirewallPolicy: typeof import("./computeFirewallPolicy").ComputeFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeFirewallPolicy"], () => require("./computeFirewallPolicy"));

export { ComputeFirewallPolicyAssociationArgs, ComputeFirewallPolicyAssociationState } from "./computeFirewallPolicyAssociation";
export type ComputeFirewallPolicyAssociation = import("./computeFirewallPolicyAssociation").ComputeFirewallPolicyAssociation;
export const ComputeFirewallPolicyAssociation: typeof import("./computeFirewallPolicyAssociation").ComputeFirewallPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["ComputeFirewallPolicyAssociation"], () => require("./computeFirewallPolicyAssociation"));

export { ComputeFirewallPolicyRuleArgs, ComputeFirewallPolicyRuleState } from "./computeFirewallPolicyRule";
export type ComputeFirewallPolicyRule = import("./computeFirewallPolicyRule").ComputeFirewallPolicyRule;
export const ComputeFirewallPolicyRule: typeof import("./computeFirewallPolicyRule").ComputeFirewallPolicyRule = null as any;
utilities.lazyLoad(exports, ["ComputeFirewallPolicyRule"], () => require("./computeFirewallPolicyRule"));

export { ComputeForwardingRuleArgs, ComputeForwardingRuleState } from "./computeForwardingRule";
export type ComputeForwardingRule = import("./computeForwardingRule").ComputeForwardingRule;
export const ComputeForwardingRule: typeof import("./computeForwardingRule").ComputeForwardingRule = null as any;
utilities.lazyLoad(exports, ["ComputeForwardingRule"], () => require("./computeForwardingRule"));

export { ComputeGlobalAddressArgs, ComputeGlobalAddressState } from "./computeGlobalAddress";
export type ComputeGlobalAddress = import("./computeGlobalAddress").ComputeGlobalAddress;
export const ComputeGlobalAddress: typeof import("./computeGlobalAddress").ComputeGlobalAddress = null as any;
utilities.lazyLoad(exports, ["ComputeGlobalAddress"], () => require("./computeGlobalAddress"));

export { ComputeGlobalForwardingRuleArgs, ComputeGlobalForwardingRuleState } from "./computeGlobalForwardingRule";
export type ComputeGlobalForwardingRule = import("./computeGlobalForwardingRule").ComputeGlobalForwardingRule;
export const ComputeGlobalForwardingRule: typeof import("./computeGlobalForwardingRule").ComputeGlobalForwardingRule = null as any;
utilities.lazyLoad(exports, ["ComputeGlobalForwardingRule"], () => require("./computeGlobalForwardingRule"));

export { ComputeGlobalNetworkEndpointArgs, ComputeGlobalNetworkEndpointState } from "./computeGlobalNetworkEndpoint";
export type ComputeGlobalNetworkEndpoint = import("./computeGlobalNetworkEndpoint").ComputeGlobalNetworkEndpoint;
export const ComputeGlobalNetworkEndpoint: typeof import("./computeGlobalNetworkEndpoint").ComputeGlobalNetworkEndpoint = null as any;
utilities.lazyLoad(exports, ["ComputeGlobalNetworkEndpoint"], () => require("./computeGlobalNetworkEndpoint"));

export { ComputeGlobalNetworkEndpointGroupArgs, ComputeGlobalNetworkEndpointGroupState } from "./computeGlobalNetworkEndpointGroup";
export type ComputeGlobalNetworkEndpointGroup = import("./computeGlobalNetworkEndpointGroup").ComputeGlobalNetworkEndpointGroup;
export const ComputeGlobalNetworkEndpointGroup: typeof import("./computeGlobalNetworkEndpointGroup").ComputeGlobalNetworkEndpointGroup = null as any;
utilities.lazyLoad(exports, ["ComputeGlobalNetworkEndpointGroup"], () => require("./computeGlobalNetworkEndpointGroup"));

export { ComputeHaVpnGatewayArgs, ComputeHaVpnGatewayState } from "./computeHaVpnGateway";
export type ComputeHaVpnGateway = import("./computeHaVpnGateway").ComputeHaVpnGateway;
export const ComputeHaVpnGateway: typeof import("./computeHaVpnGateway").ComputeHaVpnGateway = null as any;
utilities.lazyLoad(exports, ["ComputeHaVpnGateway"], () => require("./computeHaVpnGateway"));

export { ComputeHealthCheckArgs, ComputeHealthCheckState } from "./computeHealthCheck";
export type ComputeHealthCheck = import("./computeHealthCheck").ComputeHealthCheck;
export const ComputeHealthCheck: typeof import("./computeHealthCheck").ComputeHealthCheck = null as any;
utilities.lazyLoad(exports, ["ComputeHealthCheck"], () => require("./computeHealthCheck"));

export { ComputeHttpHealthCheckArgs, ComputeHttpHealthCheckState } from "./computeHttpHealthCheck";
export type ComputeHttpHealthCheck = import("./computeHttpHealthCheck").ComputeHttpHealthCheck;
export const ComputeHttpHealthCheck: typeof import("./computeHttpHealthCheck").ComputeHttpHealthCheck = null as any;
utilities.lazyLoad(exports, ["ComputeHttpHealthCheck"], () => require("./computeHttpHealthCheck"));

export { ComputeHttpsHealthCheckArgs, ComputeHttpsHealthCheckState } from "./computeHttpsHealthCheck";
export type ComputeHttpsHealthCheck = import("./computeHttpsHealthCheck").ComputeHttpsHealthCheck;
export const ComputeHttpsHealthCheck: typeof import("./computeHttpsHealthCheck").ComputeHttpsHealthCheck = null as any;
utilities.lazyLoad(exports, ["ComputeHttpsHealthCheck"], () => require("./computeHttpsHealthCheck"));

export { ComputeImageArgs, ComputeImageState } from "./computeImage";
export type ComputeImage = import("./computeImage").ComputeImage;
export const ComputeImage: typeof import("./computeImage").ComputeImage = null as any;
utilities.lazyLoad(exports, ["ComputeImage"], () => require("./computeImage"));

export { ComputeImageIamBindingArgs, ComputeImageIamBindingState } from "./computeImageIamBinding";
export type ComputeImageIamBinding = import("./computeImageIamBinding").ComputeImageIamBinding;
export const ComputeImageIamBinding: typeof import("./computeImageIamBinding").ComputeImageIamBinding = null as any;
utilities.lazyLoad(exports, ["ComputeImageIamBinding"], () => require("./computeImageIamBinding"));

export { ComputeImageIamMemberArgs, ComputeImageIamMemberState } from "./computeImageIamMember";
export type ComputeImageIamMember = import("./computeImageIamMember").ComputeImageIamMember;
export const ComputeImageIamMember: typeof import("./computeImageIamMember").ComputeImageIamMember = null as any;
utilities.lazyLoad(exports, ["ComputeImageIamMember"], () => require("./computeImageIamMember"));

export { ComputeImageIamPolicyArgs, ComputeImageIamPolicyState } from "./computeImageIamPolicy";
export type ComputeImageIamPolicy = import("./computeImageIamPolicy").ComputeImageIamPolicy;
export const ComputeImageIamPolicy: typeof import("./computeImageIamPolicy").ComputeImageIamPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeImageIamPolicy"], () => require("./computeImageIamPolicy"));

export { ComputeInstanceArgs, ComputeInstanceState } from "./computeInstance";
export type ComputeInstance = import("./computeInstance").ComputeInstance;
export const ComputeInstance: typeof import("./computeInstance").ComputeInstance = null as any;
utilities.lazyLoad(exports, ["ComputeInstance"], () => require("./computeInstance"));

export { ComputeInstanceFromMachineImageArgs, ComputeInstanceFromMachineImageState } from "./computeInstanceFromMachineImage";
export type ComputeInstanceFromMachineImage = import("./computeInstanceFromMachineImage").ComputeInstanceFromMachineImage;
export const ComputeInstanceFromMachineImage: typeof import("./computeInstanceFromMachineImage").ComputeInstanceFromMachineImage = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceFromMachineImage"], () => require("./computeInstanceFromMachineImage"));

export { ComputeInstanceFromTemplateArgs, ComputeInstanceFromTemplateState } from "./computeInstanceFromTemplate";
export type ComputeInstanceFromTemplate = import("./computeInstanceFromTemplate").ComputeInstanceFromTemplate;
export const ComputeInstanceFromTemplate: typeof import("./computeInstanceFromTemplate").ComputeInstanceFromTemplate = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceFromTemplate"], () => require("./computeInstanceFromTemplate"));

export { ComputeInstanceGroupArgs, ComputeInstanceGroupState } from "./computeInstanceGroup";
export type ComputeInstanceGroup = import("./computeInstanceGroup").ComputeInstanceGroup;
export const ComputeInstanceGroup: typeof import("./computeInstanceGroup").ComputeInstanceGroup = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceGroup"], () => require("./computeInstanceGroup"));

export { ComputeInstanceGroupManagerArgs, ComputeInstanceGroupManagerState } from "./computeInstanceGroupManager";
export type ComputeInstanceGroupManager = import("./computeInstanceGroupManager").ComputeInstanceGroupManager;
export const ComputeInstanceGroupManager: typeof import("./computeInstanceGroupManager").ComputeInstanceGroupManager = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceGroupManager"], () => require("./computeInstanceGroupManager"));

export { ComputeInstanceGroupMembershipArgs, ComputeInstanceGroupMembershipState } from "./computeInstanceGroupMembership";
export type ComputeInstanceGroupMembership = import("./computeInstanceGroupMembership").ComputeInstanceGroupMembership;
export const ComputeInstanceGroupMembership: typeof import("./computeInstanceGroupMembership").ComputeInstanceGroupMembership = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceGroupMembership"], () => require("./computeInstanceGroupMembership"));

export { ComputeInstanceGroupNamedPortArgs, ComputeInstanceGroupNamedPortState } from "./computeInstanceGroupNamedPort";
export type ComputeInstanceGroupNamedPort = import("./computeInstanceGroupNamedPort").ComputeInstanceGroupNamedPort;
export const ComputeInstanceGroupNamedPort: typeof import("./computeInstanceGroupNamedPort").ComputeInstanceGroupNamedPort = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceGroupNamedPort"], () => require("./computeInstanceGroupNamedPort"));

export { ComputeInstanceIamBindingArgs, ComputeInstanceIamBindingState } from "./computeInstanceIamBinding";
export type ComputeInstanceIamBinding = import("./computeInstanceIamBinding").ComputeInstanceIamBinding;
export const ComputeInstanceIamBinding: typeof import("./computeInstanceIamBinding").ComputeInstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceIamBinding"], () => require("./computeInstanceIamBinding"));

export { ComputeInstanceIamMemberArgs, ComputeInstanceIamMemberState } from "./computeInstanceIamMember";
export type ComputeInstanceIamMember = import("./computeInstanceIamMember").ComputeInstanceIamMember;
export const ComputeInstanceIamMember: typeof import("./computeInstanceIamMember").ComputeInstanceIamMember = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceIamMember"], () => require("./computeInstanceIamMember"));

export { ComputeInstanceIamPolicyArgs, ComputeInstanceIamPolicyState } from "./computeInstanceIamPolicy";
export type ComputeInstanceIamPolicy = import("./computeInstanceIamPolicy").ComputeInstanceIamPolicy;
export const ComputeInstanceIamPolicy: typeof import("./computeInstanceIamPolicy").ComputeInstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceIamPolicy"], () => require("./computeInstanceIamPolicy"));

export { ComputeInstanceSettingsArgs, ComputeInstanceSettingsState } from "./computeInstanceSettings";
export type ComputeInstanceSettings = import("./computeInstanceSettings").ComputeInstanceSettings;
export const ComputeInstanceSettings: typeof import("./computeInstanceSettings").ComputeInstanceSettings = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceSettings"], () => require("./computeInstanceSettings"));

export { ComputeInstanceTemplateArgs, ComputeInstanceTemplateState } from "./computeInstanceTemplate";
export type ComputeInstanceTemplate = import("./computeInstanceTemplate").ComputeInstanceTemplate;
export const ComputeInstanceTemplate: typeof import("./computeInstanceTemplate").ComputeInstanceTemplate = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceTemplate"], () => require("./computeInstanceTemplate"));

export { ComputeInterconnectArgs, ComputeInterconnectState } from "./computeInterconnect";
export type ComputeInterconnect = import("./computeInterconnect").ComputeInterconnect;
export const ComputeInterconnect: typeof import("./computeInterconnect").ComputeInterconnect = null as any;
utilities.lazyLoad(exports, ["ComputeInterconnect"], () => require("./computeInterconnect"));

export { ComputeInterconnectAttachmentArgs, ComputeInterconnectAttachmentState } from "./computeInterconnectAttachment";
export type ComputeInterconnectAttachment = import("./computeInterconnectAttachment").ComputeInterconnectAttachment;
export const ComputeInterconnectAttachment: typeof import("./computeInterconnectAttachment").ComputeInterconnectAttachment = null as any;
utilities.lazyLoad(exports, ["ComputeInterconnectAttachment"], () => require("./computeInterconnectAttachment"));

export { ComputeMachineImageArgs, ComputeMachineImageState } from "./computeMachineImage";
export type ComputeMachineImage = import("./computeMachineImage").ComputeMachineImage;
export const ComputeMachineImage: typeof import("./computeMachineImage").ComputeMachineImage = null as any;
utilities.lazyLoad(exports, ["ComputeMachineImage"], () => require("./computeMachineImage"));

export { ComputeMachineImageIamBindingArgs, ComputeMachineImageIamBindingState } from "./computeMachineImageIamBinding";
export type ComputeMachineImageIamBinding = import("./computeMachineImageIamBinding").ComputeMachineImageIamBinding;
export const ComputeMachineImageIamBinding: typeof import("./computeMachineImageIamBinding").ComputeMachineImageIamBinding = null as any;
utilities.lazyLoad(exports, ["ComputeMachineImageIamBinding"], () => require("./computeMachineImageIamBinding"));

export { ComputeMachineImageIamMemberArgs, ComputeMachineImageIamMemberState } from "./computeMachineImageIamMember";
export type ComputeMachineImageIamMember = import("./computeMachineImageIamMember").ComputeMachineImageIamMember;
export const ComputeMachineImageIamMember: typeof import("./computeMachineImageIamMember").ComputeMachineImageIamMember = null as any;
utilities.lazyLoad(exports, ["ComputeMachineImageIamMember"], () => require("./computeMachineImageIamMember"));

export { ComputeMachineImageIamPolicyArgs, ComputeMachineImageIamPolicyState } from "./computeMachineImageIamPolicy";
export type ComputeMachineImageIamPolicy = import("./computeMachineImageIamPolicy").ComputeMachineImageIamPolicy;
export const ComputeMachineImageIamPolicy: typeof import("./computeMachineImageIamPolicy").ComputeMachineImageIamPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeMachineImageIamPolicy"], () => require("./computeMachineImageIamPolicy"));

export { ComputeManagedSslCertificateArgs, ComputeManagedSslCertificateState } from "./computeManagedSslCertificate";
export type ComputeManagedSslCertificate = import("./computeManagedSslCertificate").ComputeManagedSslCertificate;
export const ComputeManagedSslCertificate: typeof import("./computeManagedSslCertificate").ComputeManagedSslCertificate = null as any;
utilities.lazyLoad(exports, ["ComputeManagedSslCertificate"], () => require("./computeManagedSslCertificate"));

export { ComputeNetworkArgs, ComputeNetworkState } from "./computeNetwork";
export type ComputeNetwork = import("./computeNetwork").ComputeNetwork;
export const ComputeNetwork: typeof import("./computeNetwork").ComputeNetwork = null as any;
utilities.lazyLoad(exports, ["ComputeNetwork"], () => require("./computeNetwork"));

export { ComputeNetworkAttachmentArgs, ComputeNetworkAttachmentState } from "./computeNetworkAttachment";
export type ComputeNetworkAttachment = import("./computeNetworkAttachment").ComputeNetworkAttachment;
export const ComputeNetworkAttachment: typeof import("./computeNetworkAttachment").ComputeNetworkAttachment = null as any;
utilities.lazyLoad(exports, ["ComputeNetworkAttachment"], () => require("./computeNetworkAttachment"));

export { ComputeNetworkEdgeSecurityServiceArgs, ComputeNetworkEdgeSecurityServiceState } from "./computeNetworkEdgeSecurityService";
export type ComputeNetworkEdgeSecurityService = import("./computeNetworkEdgeSecurityService").ComputeNetworkEdgeSecurityService;
export const ComputeNetworkEdgeSecurityService: typeof import("./computeNetworkEdgeSecurityService").ComputeNetworkEdgeSecurityService = null as any;
utilities.lazyLoad(exports, ["ComputeNetworkEdgeSecurityService"], () => require("./computeNetworkEdgeSecurityService"));

export { ComputeNetworkEndpointArgs, ComputeNetworkEndpointState } from "./computeNetworkEndpoint";
export type ComputeNetworkEndpoint = import("./computeNetworkEndpoint").ComputeNetworkEndpoint;
export const ComputeNetworkEndpoint: typeof import("./computeNetworkEndpoint").ComputeNetworkEndpoint = null as any;
utilities.lazyLoad(exports, ["ComputeNetworkEndpoint"], () => require("./computeNetworkEndpoint"));

export { ComputeNetworkEndpointGroupArgs, ComputeNetworkEndpointGroupState } from "./computeNetworkEndpointGroup";
export type ComputeNetworkEndpointGroup = import("./computeNetworkEndpointGroup").ComputeNetworkEndpointGroup;
export const ComputeNetworkEndpointGroup: typeof import("./computeNetworkEndpointGroup").ComputeNetworkEndpointGroup = null as any;
utilities.lazyLoad(exports, ["ComputeNetworkEndpointGroup"], () => require("./computeNetworkEndpointGroup"));

export { ComputeNetworkEndpointsArgs, ComputeNetworkEndpointsState } from "./computeNetworkEndpoints";
export type ComputeNetworkEndpoints = import("./computeNetworkEndpoints").ComputeNetworkEndpoints;
export const ComputeNetworkEndpoints: typeof import("./computeNetworkEndpoints").ComputeNetworkEndpoints = null as any;
utilities.lazyLoad(exports, ["ComputeNetworkEndpoints"], () => require("./computeNetworkEndpoints"));

export { ComputeNetworkFirewallPolicyArgs, ComputeNetworkFirewallPolicyState } from "./computeNetworkFirewallPolicy";
export type ComputeNetworkFirewallPolicy = import("./computeNetworkFirewallPolicy").ComputeNetworkFirewallPolicy;
export const ComputeNetworkFirewallPolicy: typeof import("./computeNetworkFirewallPolicy").ComputeNetworkFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeNetworkFirewallPolicy"], () => require("./computeNetworkFirewallPolicy"));

export { ComputeNetworkFirewallPolicyAssociationArgs, ComputeNetworkFirewallPolicyAssociationState } from "./computeNetworkFirewallPolicyAssociation";
export type ComputeNetworkFirewallPolicyAssociation = import("./computeNetworkFirewallPolicyAssociation").ComputeNetworkFirewallPolicyAssociation;
export const ComputeNetworkFirewallPolicyAssociation: typeof import("./computeNetworkFirewallPolicyAssociation").ComputeNetworkFirewallPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["ComputeNetworkFirewallPolicyAssociation"], () => require("./computeNetworkFirewallPolicyAssociation"));

export { ComputeNetworkFirewallPolicyRuleArgs, ComputeNetworkFirewallPolicyRuleState } from "./computeNetworkFirewallPolicyRule";
export type ComputeNetworkFirewallPolicyRule = import("./computeNetworkFirewallPolicyRule").ComputeNetworkFirewallPolicyRule;
export const ComputeNetworkFirewallPolicyRule: typeof import("./computeNetworkFirewallPolicyRule").ComputeNetworkFirewallPolicyRule = null as any;
utilities.lazyLoad(exports, ["ComputeNetworkFirewallPolicyRule"], () => require("./computeNetworkFirewallPolicyRule"));

export { ComputeNetworkPeeringArgs, ComputeNetworkPeeringState } from "./computeNetworkPeering";
export type ComputeNetworkPeering = import("./computeNetworkPeering").ComputeNetworkPeering;
export const ComputeNetworkPeering: typeof import("./computeNetworkPeering").ComputeNetworkPeering = null as any;
utilities.lazyLoad(exports, ["ComputeNetworkPeering"], () => require("./computeNetworkPeering"));

export { ComputeNetworkPeeringRoutesConfigArgs, ComputeNetworkPeeringRoutesConfigState } from "./computeNetworkPeeringRoutesConfig";
export type ComputeNetworkPeeringRoutesConfig = import("./computeNetworkPeeringRoutesConfig").ComputeNetworkPeeringRoutesConfig;
export const ComputeNetworkPeeringRoutesConfig: typeof import("./computeNetworkPeeringRoutesConfig").ComputeNetworkPeeringRoutesConfig = null as any;
utilities.lazyLoad(exports, ["ComputeNetworkPeeringRoutesConfig"], () => require("./computeNetworkPeeringRoutesConfig"));

export { ComputeNodeGroupArgs, ComputeNodeGroupState } from "./computeNodeGroup";
export type ComputeNodeGroup = import("./computeNodeGroup").ComputeNodeGroup;
export const ComputeNodeGroup: typeof import("./computeNodeGroup").ComputeNodeGroup = null as any;
utilities.lazyLoad(exports, ["ComputeNodeGroup"], () => require("./computeNodeGroup"));

export { ComputeNodeTemplateArgs, ComputeNodeTemplateState } from "./computeNodeTemplate";
export type ComputeNodeTemplate = import("./computeNodeTemplate").ComputeNodeTemplate;
export const ComputeNodeTemplate: typeof import("./computeNodeTemplate").ComputeNodeTemplate = null as any;
utilities.lazyLoad(exports, ["ComputeNodeTemplate"], () => require("./computeNodeTemplate"));

export { ComputeOrganizationSecurityPolicyArgs, ComputeOrganizationSecurityPolicyState } from "./computeOrganizationSecurityPolicy";
export type ComputeOrganizationSecurityPolicy = import("./computeOrganizationSecurityPolicy").ComputeOrganizationSecurityPolicy;
export const ComputeOrganizationSecurityPolicy: typeof import("./computeOrganizationSecurityPolicy").ComputeOrganizationSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeOrganizationSecurityPolicy"], () => require("./computeOrganizationSecurityPolicy"));

export { ComputeOrganizationSecurityPolicyAssociationArgs, ComputeOrganizationSecurityPolicyAssociationState } from "./computeOrganizationSecurityPolicyAssociation";
export type ComputeOrganizationSecurityPolicyAssociation = import("./computeOrganizationSecurityPolicyAssociation").ComputeOrganizationSecurityPolicyAssociation;
export const ComputeOrganizationSecurityPolicyAssociation: typeof import("./computeOrganizationSecurityPolicyAssociation").ComputeOrganizationSecurityPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["ComputeOrganizationSecurityPolicyAssociation"], () => require("./computeOrganizationSecurityPolicyAssociation"));

export { ComputeOrganizationSecurityPolicyRuleArgs, ComputeOrganizationSecurityPolicyRuleState } from "./computeOrganizationSecurityPolicyRule";
export type ComputeOrganizationSecurityPolicyRule = import("./computeOrganizationSecurityPolicyRule").ComputeOrganizationSecurityPolicyRule;
export const ComputeOrganizationSecurityPolicyRule: typeof import("./computeOrganizationSecurityPolicyRule").ComputeOrganizationSecurityPolicyRule = null as any;
utilities.lazyLoad(exports, ["ComputeOrganizationSecurityPolicyRule"], () => require("./computeOrganizationSecurityPolicyRule"));

export { ComputePacketMirroringArgs, ComputePacketMirroringState } from "./computePacketMirroring";
export type ComputePacketMirroring = import("./computePacketMirroring").ComputePacketMirroring;
export const ComputePacketMirroring: typeof import("./computePacketMirroring").ComputePacketMirroring = null as any;
utilities.lazyLoad(exports, ["ComputePacketMirroring"], () => require("./computePacketMirroring"));

export { ComputePerInstanceConfigArgs, ComputePerInstanceConfigState } from "./computePerInstanceConfig";
export type ComputePerInstanceConfig = import("./computePerInstanceConfig").ComputePerInstanceConfig;
export const ComputePerInstanceConfig: typeof import("./computePerInstanceConfig").ComputePerInstanceConfig = null as any;
utilities.lazyLoad(exports, ["ComputePerInstanceConfig"], () => require("./computePerInstanceConfig"));

export { ComputeProjectCloudArmorTierArgs, ComputeProjectCloudArmorTierState } from "./computeProjectCloudArmorTier";
export type ComputeProjectCloudArmorTier = import("./computeProjectCloudArmorTier").ComputeProjectCloudArmorTier;
export const ComputeProjectCloudArmorTier: typeof import("./computeProjectCloudArmorTier").ComputeProjectCloudArmorTier = null as any;
utilities.lazyLoad(exports, ["ComputeProjectCloudArmorTier"], () => require("./computeProjectCloudArmorTier"));

export { ComputeProjectDefaultNetworkTierArgs, ComputeProjectDefaultNetworkTierState } from "./computeProjectDefaultNetworkTier";
export type ComputeProjectDefaultNetworkTier = import("./computeProjectDefaultNetworkTier").ComputeProjectDefaultNetworkTier;
export const ComputeProjectDefaultNetworkTier: typeof import("./computeProjectDefaultNetworkTier").ComputeProjectDefaultNetworkTier = null as any;
utilities.lazyLoad(exports, ["ComputeProjectDefaultNetworkTier"], () => require("./computeProjectDefaultNetworkTier"));

export { ComputeProjectMetadataArgs, ComputeProjectMetadataState } from "./computeProjectMetadata";
export type ComputeProjectMetadata = import("./computeProjectMetadata").ComputeProjectMetadata;
export const ComputeProjectMetadata: typeof import("./computeProjectMetadata").ComputeProjectMetadata = null as any;
utilities.lazyLoad(exports, ["ComputeProjectMetadata"], () => require("./computeProjectMetadata"));

export { ComputeProjectMetadataItemArgs, ComputeProjectMetadataItemState } from "./computeProjectMetadataItem";
export type ComputeProjectMetadataItem = import("./computeProjectMetadataItem").ComputeProjectMetadataItem;
export const ComputeProjectMetadataItem: typeof import("./computeProjectMetadataItem").ComputeProjectMetadataItem = null as any;
utilities.lazyLoad(exports, ["ComputeProjectMetadataItem"], () => require("./computeProjectMetadataItem"));

export { ComputePublicAdvertisedPrefixArgs, ComputePublicAdvertisedPrefixState } from "./computePublicAdvertisedPrefix";
export type ComputePublicAdvertisedPrefix = import("./computePublicAdvertisedPrefix").ComputePublicAdvertisedPrefix;
export const ComputePublicAdvertisedPrefix: typeof import("./computePublicAdvertisedPrefix").ComputePublicAdvertisedPrefix = null as any;
utilities.lazyLoad(exports, ["ComputePublicAdvertisedPrefix"], () => require("./computePublicAdvertisedPrefix"));

export { ComputePublicDelegatedPrefixArgs, ComputePublicDelegatedPrefixState } from "./computePublicDelegatedPrefix";
export type ComputePublicDelegatedPrefix = import("./computePublicDelegatedPrefix").ComputePublicDelegatedPrefix;
export const ComputePublicDelegatedPrefix: typeof import("./computePublicDelegatedPrefix").ComputePublicDelegatedPrefix = null as any;
utilities.lazyLoad(exports, ["ComputePublicDelegatedPrefix"], () => require("./computePublicDelegatedPrefix"));

export { ComputeRegionAutoscalerArgs, ComputeRegionAutoscalerState } from "./computeRegionAutoscaler";
export type ComputeRegionAutoscaler = import("./computeRegionAutoscaler").ComputeRegionAutoscaler;
export const ComputeRegionAutoscaler: typeof import("./computeRegionAutoscaler").ComputeRegionAutoscaler = null as any;
utilities.lazyLoad(exports, ["ComputeRegionAutoscaler"], () => require("./computeRegionAutoscaler"));

export { ComputeRegionBackendServiceArgs, ComputeRegionBackendServiceState } from "./computeRegionBackendService";
export type ComputeRegionBackendService = import("./computeRegionBackendService").ComputeRegionBackendService;
export const ComputeRegionBackendService: typeof import("./computeRegionBackendService").ComputeRegionBackendService = null as any;
utilities.lazyLoad(exports, ["ComputeRegionBackendService"], () => require("./computeRegionBackendService"));

export { ComputeRegionBackendServiceIamBindingArgs, ComputeRegionBackendServiceIamBindingState } from "./computeRegionBackendServiceIamBinding";
export type ComputeRegionBackendServiceIamBinding = import("./computeRegionBackendServiceIamBinding").ComputeRegionBackendServiceIamBinding;
export const ComputeRegionBackendServiceIamBinding: typeof import("./computeRegionBackendServiceIamBinding").ComputeRegionBackendServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["ComputeRegionBackendServiceIamBinding"], () => require("./computeRegionBackendServiceIamBinding"));

export { ComputeRegionBackendServiceIamMemberArgs, ComputeRegionBackendServiceIamMemberState } from "./computeRegionBackendServiceIamMember";
export type ComputeRegionBackendServiceIamMember = import("./computeRegionBackendServiceIamMember").ComputeRegionBackendServiceIamMember;
export const ComputeRegionBackendServiceIamMember: typeof import("./computeRegionBackendServiceIamMember").ComputeRegionBackendServiceIamMember = null as any;
utilities.lazyLoad(exports, ["ComputeRegionBackendServiceIamMember"], () => require("./computeRegionBackendServiceIamMember"));

export { ComputeRegionBackendServiceIamPolicyArgs, ComputeRegionBackendServiceIamPolicyState } from "./computeRegionBackendServiceIamPolicy";
export type ComputeRegionBackendServiceIamPolicy = import("./computeRegionBackendServiceIamPolicy").ComputeRegionBackendServiceIamPolicy;
export const ComputeRegionBackendServiceIamPolicy: typeof import("./computeRegionBackendServiceIamPolicy").ComputeRegionBackendServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeRegionBackendServiceIamPolicy"], () => require("./computeRegionBackendServiceIamPolicy"));

export { ComputeRegionCommitmentArgs, ComputeRegionCommitmentState } from "./computeRegionCommitment";
export type ComputeRegionCommitment = import("./computeRegionCommitment").ComputeRegionCommitment;
export const ComputeRegionCommitment: typeof import("./computeRegionCommitment").ComputeRegionCommitment = null as any;
utilities.lazyLoad(exports, ["ComputeRegionCommitment"], () => require("./computeRegionCommitment"));

export { ComputeRegionDiskArgs, ComputeRegionDiskState } from "./computeRegionDisk";
export type ComputeRegionDisk = import("./computeRegionDisk").ComputeRegionDisk;
export const ComputeRegionDisk: typeof import("./computeRegionDisk").ComputeRegionDisk = null as any;
utilities.lazyLoad(exports, ["ComputeRegionDisk"], () => require("./computeRegionDisk"));

export { ComputeRegionDiskIamBindingArgs, ComputeRegionDiskIamBindingState } from "./computeRegionDiskIamBinding";
export type ComputeRegionDiskIamBinding = import("./computeRegionDiskIamBinding").ComputeRegionDiskIamBinding;
export const ComputeRegionDiskIamBinding: typeof import("./computeRegionDiskIamBinding").ComputeRegionDiskIamBinding = null as any;
utilities.lazyLoad(exports, ["ComputeRegionDiskIamBinding"], () => require("./computeRegionDiskIamBinding"));

export { ComputeRegionDiskIamMemberArgs, ComputeRegionDiskIamMemberState } from "./computeRegionDiskIamMember";
export type ComputeRegionDiskIamMember = import("./computeRegionDiskIamMember").ComputeRegionDiskIamMember;
export const ComputeRegionDiskIamMember: typeof import("./computeRegionDiskIamMember").ComputeRegionDiskIamMember = null as any;
utilities.lazyLoad(exports, ["ComputeRegionDiskIamMember"], () => require("./computeRegionDiskIamMember"));

export { ComputeRegionDiskIamPolicyArgs, ComputeRegionDiskIamPolicyState } from "./computeRegionDiskIamPolicy";
export type ComputeRegionDiskIamPolicy = import("./computeRegionDiskIamPolicy").ComputeRegionDiskIamPolicy;
export const ComputeRegionDiskIamPolicy: typeof import("./computeRegionDiskIamPolicy").ComputeRegionDiskIamPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeRegionDiskIamPolicy"], () => require("./computeRegionDiskIamPolicy"));

export { ComputeRegionDiskResourcePolicyAttachmentArgs, ComputeRegionDiskResourcePolicyAttachmentState } from "./computeRegionDiskResourcePolicyAttachment";
export type ComputeRegionDiskResourcePolicyAttachment = import("./computeRegionDiskResourcePolicyAttachment").ComputeRegionDiskResourcePolicyAttachment;
export const ComputeRegionDiskResourcePolicyAttachment: typeof import("./computeRegionDiskResourcePolicyAttachment").ComputeRegionDiskResourcePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["ComputeRegionDiskResourcePolicyAttachment"], () => require("./computeRegionDiskResourcePolicyAttachment"));

export { ComputeRegionHealthCheckArgs, ComputeRegionHealthCheckState } from "./computeRegionHealthCheck";
export type ComputeRegionHealthCheck = import("./computeRegionHealthCheck").ComputeRegionHealthCheck;
export const ComputeRegionHealthCheck: typeof import("./computeRegionHealthCheck").ComputeRegionHealthCheck = null as any;
utilities.lazyLoad(exports, ["ComputeRegionHealthCheck"], () => require("./computeRegionHealthCheck"));

export { ComputeRegionInstanceGroupManagerArgs, ComputeRegionInstanceGroupManagerState } from "./computeRegionInstanceGroupManager";
export type ComputeRegionInstanceGroupManager = import("./computeRegionInstanceGroupManager").ComputeRegionInstanceGroupManager;
export const ComputeRegionInstanceGroupManager: typeof import("./computeRegionInstanceGroupManager").ComputeRegionInstanceGroupManager = null as any;
utilities.lazyLoad(exports, ["ComputeRegionInstanceGroupManager"], () => require("./computeRegionInstanceGroupManager"));

export { ComputeRegionInstanceTemplateArgs, ComputeRegionInstanceTemplateState } from "./computeRegionInstanceTemplate";
export type ComputeRegionInstanceTemplate = import("./computeRegionInstanceTemplate").ComputeRegionInstanceTemplate;
export const ComputeRegionInstanceTemplate: typeof import("./computeRegionInstanceTemplate").ComputeRegionInstanceTemplate = null as any;
utilities.lazyLoad(exports, ["ComputeRegionInstanceTemplate"], () => require("./computeRegionInstanceTemplate"));

export { ComputeRegionNetworkEndpointArgs, ComputeRegionNetworkEndpointState } from "./computeRegionNetworkEndpoint";
export type ComputeRegionNetworkEndpoint = import("./computeRegionNetworkEndpoint").ComputeRegionNetworkEndpoint;
export const ComputeRegionNetworkEndpoint: typeof import("./computeRegionNetworkEndpoint").ComputeRegionNetworkEndpoint = null as any;
utilities.lazyLoad(exports, ["ComputeRegionNetworkEndpoint"], () => require("./computeRegionNetworkEndpoint"));

export { ComputeRegionNetworkEndpointGroupArgs, ComputeRegionNetworkEndpointGroupState } from "./computeRegionNetworkEndpointGroup";
export type ComputeRegionNetworkEndpointGroup = import("./computeRegionNetworkEndpointGroup").ComputeRegionNetworkEndpointGroup;
export const ComputeRegionNetworkEndpointGroup: typeof import("./computeRegionNetworkEndpointGroup").ComputeRegionNetworkEndpointGroup = null as any;
utilities.lazyLoad(exports, ["ComputeRegionNetworkEndpointGroup"], () => require("./computeRegionNetworkEndpointGroup"));

export { ComputeRegionNetworkFirewallPolicyArgs, ComputeRegionNetworkFirewallPolicyState } from "./computeRegionNetworkFirewallPolicy";
export type ComputeRegionNetworkFirewallPolicy = import("./computeRegionNetworkFirewallPolicy").ComputeRegionNetworkFirewallPolicy;
export const ComputeRegionNetworkFirewallPolicy: typeof import("./computeRegionNetworkFirewallPolicy").ComputeRegionNetworkFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeRegionNetworkFirewallPolicy"], () => require("./computeRegionNetworkFirewallPolicy"));

export { ComputeRegionNetworkFirewallPolicyAssociationArgs, ComputeRegionNetworkFirewallPolicyAssociationState } from "./computeRegionNetworkFirewallPolicyAssociation";
export type ComputeRegionNetworkFirewallPolicyAssociation = import("./computeRegionNetworkFirewallPolicyAssociation").ComputeRegionNetworkFirewallPolicyAssociation;
export const ComputeRegionNetworkFirewallPolicyAssociation: typeof import("./computeRegionNetworkFirewallPolicyAssociation").ComputeRegionNetworkFirewallPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["ComputeRegionNetworkFirewallPolicyAssociation"], () => require("./computeRegionNetworkFirewallPolicyAssociation"));

export { ComputeRegionNetworkFirewallPolicyRuleArgs, ComputeRegionNetworkFirewallPolicyRuleState } from "./computeRegionNetworkFirewallPolicyRule";
export type ComputeRegionNetworkFirewallPolicyRule = import("./computeRegionNetworkFirewallPolicyRule").ComputeRegionNetworkFirewallPolicyRule;
export const ComputeRegionNetworkFirewallPolicyRule: typeof import("./computeRegionNetworkFirewallPolicyRule").ComputeRegionNetworkFirewallPolicyRule = null as any;
utilities.lazyLoad(exports, ["ComputeRegionNetworkFirewallPolicyRule"], () => require("./computeRegionNetworkFirewallPolicyRule"));

export { ComputeRegionPerInstanceConfigArgs, ComputeRegionPerInstanceConfigState } from "./computeRegionPerInstanceConfig";
export type ComputeRegionPerInstanceConfig = import("./computeRegionPerInstanceConfig").ComputeRegionPerInstanceConfig;
export const ComputeRegionPerInstanceConfig: typeof import("./computeRegionPerInstanceConfig").ComputeRegionPerInstanceConfig = null as any;
utilities.lazyLoad(exports, ["ComputeRegionPerInstanceConfig"], () => require("./computeRegionPerInstanceConfig"));

export { ComputeRegionSecurityPolicyArgs, ComputeRegionSecurityPolicyState } from "./computeRegionSecurityPolicy";
export type ComputeRegionSecurityPolicy = import("./computeRegionSecurityPolicy").ComputeRegionSecurityPolicy;
export const ComputeRegionSecurityPolicy: typeof import("./computeRegionSecurityPolicy").ComputeRegionSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeRegionSecurityPolicy"], () => require("./computeRegionSecurityPolicy"));

export { ComputeRegionSecurityPolicyRuleArgs, ComputeRegionSecurityPolicyRuleState } from "./computeRegionSecurityPolicyRule";
export type ComputeRegionSecurityPolicyRule = import("./computeRegionSecurityPolicyRule").ComputeRegionSecurityPolicyRule;
export const ComputeRegionSecurityPolicyRule: typeof import("./computeRegionSecurityPolicyRule").ComputeRegionSecurityPolicyRule = null as any;
utilities.lazyLoad(exports, ["ComputeRegionSecurityPolicyRule"], () => require("./computeRegionSecurityPolicyRule"));

export { ComputeRegionSslCertificateArgs, ComputeRegionSslCertificateState } from "./computeRegionSslCertificate";
export type ComputeRegionSslCertificate = import("./computeRegionSslCertificate").ComputeRegionSslCertificate;
export const ComputeRegionSslCertificate: typeof import("./computeRegionSslCertificate").ComputeRegionSslCertificate = null as any;
utilities.lazyLoad(exports, ["ComputeRegionSslCertificate"], () => require("./computeRegionSslCertificate"));

export { ComputeRegionSslPolicyArgs, ComputeRegionSslPolicyState } from "./computeRegionSslPolicy";
export type ComputeRegionSslPolicy = import("./computeRegionSslPolicy").ComputeRegionSslPolicy;
export const ComputeRegionSslPolicy: typeof import("./computeRegionSslPolicy").ComputeRegionSslPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeRegionSslPolicy"], () => require("./computeRegionSslPolicy"));

export { ComputeRegionTargetHttpProxyArgs, ComputeRegionTargetHttpProxyState } from "./computeRegionTargetHttpProxy";
export type ComputeRegionTargetHttpProxy = import("./computeRegionTargetHttpProxy").ComputeRegionTargetHttpProxy;
export const ComputeRegionTargetHttpProxy: typeof import("./computeRegionTargetHttpProxy").ComputeRegionTargetHttpProxy = null as any;
utilities.lazyLoad(exports, ["ComputeRegionTargetHttpProxy"], () => require("./computeRegionTargetHttpProxy"));

export { ComputeRegionTargetHttpsProxyArgs, ComputeRegionTargetHttpsProxyState } from "./computeRegionTargetHttpsProxy";
export type ComputeRegionTargetHttpsProxy = import("./computeRegionTargetHttpsProxy").ComputeRegionTargetHttpsProxy;
export const ComputeRegionTargetHttpsProxy: typeof import("./computeRegionTargetHttpsProxy").ComputeRegionTargetHttpsProxy = null as any;
utilities.lazyLoad(exports, ["ComputeRegionTargetHttpsProxy"], () => require("./computeRegionTargetHttpsProxy"));

export { ComputeRegionTargetTcpProxyArgs, ComputeRegionTargetTcpProxyState } from "./computeRegionTargetTcpProxy";
export type ComputeRegionTargetTcpProxy = import("./computeRegionTargetTcpProxy").ComputeRegionTargetTcpProxy;
export const ComputeRegionTargetTcpProxy: typeof import("./computeRegionTargetTcpProxy").ComputeRegionTargetTcpProxy = null as any;
utilities.lazyLoad(exports, ["ComputeRegionTargetTcpProxy"], () => require("./computeRegionTargetTcpProxy"));

export { ComputeRegionUrlMapArgs, ComputeRegionUrlMapState } from "./computeRegionUrlMap";
export type ComputeRegionUrlMap = import("./computeRegionUrlMap").ComputeRegionUrlMap;
export const ComputeRegionUrlMap: typeof import("./computeRegionUrlMap").ComputeRegionUrlMap = null as any;
utilities.lazyLoad(exports, ["ComputeRegionUrlMap"], () => require("./computeRegionUrlMap"));

export { ComputeReservationArgs, ComputeReservationState } from "./computeReservation";
export type ComputeReservation = import("./computeReservation").ComputeReservation;
export const ComputeReservation: typeof import("./computeReservation").ComputeReservation = null as any;
utilities.lazyLoad(exports, ["ComputeReservation"], () => require("./computeReservation"));

export { ComputeResizeRequestArgs, ComputeResizeRequestState } from "./computeResizeRequest";
export type ComputeResizeRequest = import("./computeResizeRequest").ComputeResizeRequest;
export const ComputeResizeRequest: typeof import("./computeResizeRequest").ComputeResizeRequest = null as any;
utilities.lazyLoad(exports, ["ComputeResizeRequest"], () => require("./computeResizeRequest"));

export { ComputeResourcePolicyArgs, ComputeResourcePolicyState } from "./computeResourcePolicy";
export type ComputeResourcePolicy = import("./computeResourcePolicy").ComputeResourcePolicy;
export const ComputeResourcePolicy: typeof import("./computeResourcePolicy").ComputeResourcePolicy = null as any;
utilities.lazyLoad(exports, ["ComputeResourcePolicy"], () => require("./computeResourcePolicy"));

export { ComputeRouteArgs, ComputeRouteState } from "./computeRoute";
export type ComputeRoute = import("./computeRoute").ComputeRoute;
export const ComputeRoute: typeof import("./computeRoute").ComputeRoute = null as any;
utilities.lazyLoad(exports, ["ComputeRoute"], () => require("./computeRoute"));

export { ComputeRouterArgs, ComputeRouterState } from "./computeRouter";
export type ComputeRouter = import("./computeRouter").ComputeRouter;
export const ComputeRouter: typeof import("./computeRouter").ComputeRouter = null as any;
utilities.lazyLoad(exports, ["ComputeRouter"], () => require("./computeRouter"));

export { ComputeRouterInterfaceArgs, ComputeRouterInterfaceState } from "./computeRouterInterface";
export type ComputeRouterInterface = import("./computeRouterInterface").ComputeRouterInterface;
export const ComputeRouterInterface: typeof import("./computeRouterInterface").ComputeRouterInterface = null as any;
utilities.lazyLoad(exports, ["ComputeRouterInterface"], () => require("./computeRouterInterface"));

export { ComputeRouterNatArgs, ComputeRouterNatState } from "./computeRouterNat";
export type ComputeRouterNat = import("./computeRouterNat").ComputeRouterNat;
export const ComputeRouterNat: typeof import("./computeRouterNat").ComputeRouterNat = null as any;
utilities.lazyLoad(exports, ["ComputeRouterNat"], () => require("./computeRouterNat"));

export { ComputeRouterPeerArgs, ComputeRouterPeerState } from "./computeRouterPeer";
export type ComputeRouterPeer = import("./computeRouterPeer").ComputeRouterPeer;
export const ComputeRouterPeer: typeof import("./computeRouterPeer").ComputeRouterPeer = null as any;
utilities.lazyLoad(exports, ["ComputeRouterPeer"], () => require("./computeRouterPeer"));

export { ComputeRouterRoutePolicyArgs, ComputeRouterRoutePolicyState } from "./computeRouterRoutePolicy";
export type ComputeRouterRoutePolicy = import("./computeRouterRoutePolicy").ComputeRouterRoutePolicy;
export const ComputeRouterRoutePolicy: typeof import("./computeRouterRoutePolicy").ComputeRouterRoutePolicy = null as any;
utilities.lazyLoad(exports, ["ComputeRouterRoutePolicy"], () => require("./computeRouterRoutePolicy"));

export { ComputeSecurityPolicyArgs, ComputeSecurityPolicyState } from "./computeSecurityPolicy";
export type ComputeSecurityPolicy = import("./computeSecurityPolicy").ComputeSecurityPolicy;
export const ComputeSecurityPolicy: typeof import("./computeSecurityPolicy").ComputeSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeSecurityPolicy"], () => require("./computeSecurityPolicy"));

export { ComputeSecurityPolicyRuleArgs, ComputeSecurityPolicyRuleState } from "./computeSecurityPolicyRule";
export type ComputeSecurityPolicyRule = import("./computeSecurityPolicyRule").ComputeSecurityPolicyRule;
export const ComputeSecurityPolicyRule: typeof import("./computeSecurityPolicyRule").ComputeSecurityPolicyRule = null as any;
utilities.lazyLoad(exports, ["ComputeSecurityPolicyRule"], () => require("./computeSecurityPolicyRule"));

export { ComputeServiceAttachmentArgs, ComputeServiceAttachmentState } from "./computeServiceAttachment";
export type ComputeServiceAttachment = import("./computeServiceAttachment").ComputeServiceAttachment;
export const ComputeServiceAttachment: typeof import("./computeServiceAttachment").ComputeServiceAttachment = null as any;
utilities.lazyLoad(exports, ["ComputeServiceAttachment"], () => require("./computeServiceAttachment"));

export { ComputeSharedVpcHostProjectArgs, ComputeSharedVpcHostProjectState } from "./computeSharedVpcHostProject";
export type ComputeSharedVpcHostProject = import("./computeSharedVpcHostProject").ComputeSharedVpcHostProject;
export const ComputeSharedVpcHostProject: typeof import("./computeSharedVpcHostProject").ComputeSharedVpcHostProject = null as any;
utilities.lazyLoad(exports, ["ComputeSharedVpcHostProject"], () => require("./computeSharedVpcHostProject"));

export { ComputeSharedVpcServiceProjectArgs, ComputeSharedVpcServiceProjectState } from "./computeSharedVpcServiceProject";
export type ComputeSharedVpcServiceProject = import("./computeSharedVpcServiceProject").ComputeSharedVpcServiceProject;
export const ComputeSharedVpcServiceProject: typeof import("./computeSharedVpcServiceProject").ComputeSharedVpcServiceProject = null as any;
utilities.lazyLoad(exports, ["ComputeSharedVpcServiceProject"], () => require("./computeSharedVpcServiceProject"));

export { ComputeSnapshotArgs, ComputeSnapshotState } from "./computeSnapshot";
export type ComputeSnapshot = import("./computeSnapshot").ComputeSnapshot;
export const ComputeSnapshot: typeof import("./computeSnapshot").ComputeSnapshot = null as any;
utilities.lazyLoad(exports, ["ComputeSnapshot"], () => require("./computeSnapshot"));

export { ComputeSnapshotIamBindingArgs, ComputeSnapshotIamBindingState } from "./computeSnapshotIamBinding";
export type ComputeSnapshotIamBinding = import("./computeSnapshotIamBinding").ComputeSnapshotIamBinding;
export const ComputeSnapshotIamBinding: typeof import("./computeSnapshotIamBinding").ComputeSnapshotIamBinding = null as any;
utilities.lazyLoad(exports, ["ComputeSnapshotIamBinding"], () => require("./computeSnapshotIamBinding"));

export { ComputeSnapshotIamMemberArgs, ComputeSnapshotIamMemberState } from "./computeSnapshotIamMember";
export type ComputeSnapshotIamMember = import("./computeSnapshotIamMember").ComputeSnapshotIamMember;
export const ComputeSnapshotIamMember: typeof import("./computeSnapshotIamMember").ComputeSnapshotIamMember = null as any;
utilities.lazyLoad(exports, ["ComputeSnapshotIamMember"], () => require("./computeSnapshotIamMember"));

export { ComputeSnapshotIamPolicyArgs, ComputeSnapshotIamPolicyState } from "./computeSnapshotIamPolicy";
export type ComputeSnapshotIamPolicy = import("./computeSnapshotIamPolicy").ComputeSnapshotIamPolicy;
export const ComputeSnapshotIamPolicy: typeof import("./computeSnapshotIamPolicy").ComputeSnapshotIamPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeSnapshotIamPolicy"], () => require("./computeSnapshotIamPolicy"));

export { ComputeSslCertificateArgs, ComputeSslCertificateState } from "./computeSslCertificate";
export type ComputeSslCertificate = import("./computeSslCertificate").ComputeSslCertificate;
export const ComputeSslCertificate: typeof import("./computeSslCertificate").ComputeSslCertificate = null as any;
utilities.lazyLoad(exports, ["ComputeSslCertificate"], () => require("./computeSslCertificate"));

export { ComputeSslPolicyArgs, ComputeSslPolicyState } from "./computeSslPolicy";
export type ComputeSslPolicy = import("./computeSslPolicy").ComputeSslPolicy;
export const ComputeSslPolicy: typeof import("./computeSslPolicy").ComputeSslPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeSslPolicy"], () => require("./computeSslPolicy"));

export { ComputeSubnetworkArgs, ComputeSubnetworkState } from "./computeSubnetwork";
export type ComputeSubnetwork = import("./computeSubnetwork").ComputeSubnetwork;
export const ComputeSubnetwork: typeof import("./computeSubnetwork").ComputeSubnetwork = null as any;
utilities.lazyLoad(exports, ["ComputeSubnetwork"], () => require("./computeSubnetwork"));

export { ComputeSubnetworkIamBindingArgs, ComputeSubnetworkIamBindingState } from "./computeSubnetworkIamBinding";
export type ComputeSubnetworkIamBinding = import("./computeSubnetworkIamBinding").ComputeSubnetworkIamBinding;
export const ComputeSubnetworkIamBinding: typeof import("./computeSubnetworkIamBinding").ComputeSubnetworkIamBinding = null as any;
utilities.lazyLoad(exports, ["ComputeSubnetworkIamBinding"], () => require("./computeSubnetworkIamBinding"));

export { ComputeSubnetworkIamMemberArgs, ComputeSubnetworkIamMemberState } from "./computeSubnetworkIamMember";
export type ComputeSubnetworkIamMember = import("./computeSubnetworkIamMember").ComputeSubnetworkIamMember;
export const ComputeSubnetworkIamMember: typeof import("./computeSubnetworkIamMember").ComputeSubnetworkIamMember = null as any;
utilities.lazyLoad(exports, ["ComputeSubnetworkIamMember"], () => require("./computeSubnetworkIamMember"));

export { ComputeSubnetworkIamPolicyArgs, ComputeSubnetworkIamPolicyState } from "./computeSubnetworkIamPolicy";
export type ComputeSubnetworkIamPolicy = import("./computeSubnetworkIamPolicy").ComputeSubnetworkIamPolicy;
export const ComputeSubnetworkIamPolicy: typeof import("./computeSubnetworkIamPolicy").ComputeSubnetworkIamPolicy = null as any;
utilities.lazyLoad(exports, ["ComputeSubnetworkIamPolicy"], () => require("./computeSubnetworkIamPolicy"));

export { ComputeTargetGrpcProxyArgs, ComputeTargetGrpcProxyState } from "./computeTargetGrpcProxy";
export type ComputeTargetGrpcProxy = import("./computeTargetGrpcProxy").ComputeTargetGrpcProxy;
export const ComputeTargetGrpcProxy: typeof import("./computeTargetGrpcProxy").ComputeTargetGrpcProxy = null as any;
utilities.lazyLoad(exports, ["ComputeTargetGrpcProxy"], () => require("./computeTargetGrpcProxy"));

export { ComputeTargetHttpProxyArgs, ComputeTargetHttpProxyState } from "./computeTargetHttpProxy";
export type ComputeTargetHttpProxy = import("./computeTargetHttpProxy").ComputeTargetHttpProxy;
export const ComputeTargetHttpProxy: typeof import("./computeTargetHttpProxy").ComputeTargetHttpProxy = null as any;
utilities.lazyLoad(exports, ["ComputeTargetHttpProxy"], () => require("./computeTargetHttpProxy"));

export { ComputeTargetHttpsProxyArgs, ComputeTargetHttpsProxyState } from "./computeTargetHttpsProxy";
export type ComputeTargetHttpsProxy = import("./computeTargetHttpsProxy").ComputeTargetHttpsProxy;
export const ComputeTargetHttpsProxy: typeof import("./computeTargetHttpsProxy").ComputeTargetHttpsProxy = null as any;
utilities.lazyLoad(exports, ["ComputeTargetHttpsProxy"], () => require("./computeTargetHttpsProxy"));

export { ComputeTargetInstanceArgs, ComputeTargetInstanceState } from "./computeTargetInstance";
export type ComputeTargetInstance = import("./computeTargetInstance").ComputeTargetInstance;
export const ComputeTargetInstance: typeof import("./computeTargetInstance").ComputeTargetInstance = null as any;
utilities.lazyLoad(exports, ["ComputeTargetInstance"], () => require("./computeTargetInstance"));

export { ComputeTargetPoolArgs, ComputeTargetPoolState } from "./computeTargetPool";
export type ComputeTargetPool = import("./computeTargetPool").ComputeTargetPool;
export const ComputeTargetPool: typeof import("./computeTargetPool").ComputeTargetPool = null as any;
utilities.lazyLoad(exports, ["ComputeTargetPool"], () => require("./computeTargetPool"));

export { ComputeTargetSslProxyArgs, ComputeTargetSslProxyState } from "./computeTargetSslProxy";
export type ComputeTargetSslProxy = import("./computeTargetSslProxy").ComputeTargetSslProxy;
export const ComputeTargetSslProxy: typeof import("./computeTargetSslProxy").ComputeTargetSslProxy = null as any;
utilities.lazyLoad(exports, ["ComputeTargetSslProxy"], () => require("./computeTargetSslProxy"));

export { ComputeTargetTcpProxyArgs, ComputeTargetTcpProxyState } from "./computeTargetTcpProxy";
export type ComputeTargetTcpProxy = import("./computeTargetTcpProxy").ComputeTargetTcpProxy;
export const ComputeTargetTcpProxy: typeof import("./computeTargetTcpProxy").ComputeTargetTcpProxy = null as any;
utilities.lazyLoad(exports, ["ComputeTargetTcpProxy"], () => require("./computeTargetTcpProxy"));

export { ComputeUrlMapArgs, ComputeUrlMapState } from "./computeUrlMap";
export type ComputeUrlMap = import("./computeUrlMap").ComputeUrlMap;
export const ComputeUrlMap: typeof import("./computeUrlMap").ComputeUrlMap = null as any;
utilities.lazyLoad(exports, ["ComputeUrlMap"], () => require("./computeUrlMap"));

export { ComputeVpnGatewayArgs, ComputeVpnGatewayState } from "./computeVpnGateway";
export type ComputeVpnGateway = import("./computeVpnGateway").ComputeVpnGateway;
export const ComputeVpnGateway: typeof import("./computeVpnGateway").ComputeVpnGateway = null as any;
utilities.lazyLoad(exports, ["ComputeVpnGateway"], () => require("./computeVpnGateway"));

export { ComputeVpnTunnelArgs, ComputeVpnTunnelState } from "./computeVpnTunnel";
export type ComputeVpnTunnel = import("./computeVpnTunnel").ComputeVpnTunnel;
export const ComputeVpnTunnel: typeof import("./computeVpnTunnel").ComputeVpnTunnel = null as any;
utilities.lazyLoad(exports, ["ComputeVpnTunnel"], () => require("./computeVpnTunnel"));

export { ContainerAnalysisNoteArgs, ContainerAnalysisNoteState } from "./containerAnalysisNote";
export type ContainerAnalysisNote = import("./containerAnalysisNote").ContainerAnalysisNote;
export const ContainerAnalysisNote: typeof import("./containerAnalysisNote").ContainerAnalysisNote = null as any;
utilities.lazyLoad(exports, ["ContainerAnalysisNote"], () => require("./containerAnalysisNote"));

export { ContainerAnalysisNoteIamBindingArgs, ContainerAnalysisNoteIamBindingState } from "./containerAnalysisNoteIamBinding";
export type ContainerAnalysisNoteIamBinding = import("./containerAnalysisNoteIamBinding").ContainerAnalysisNoteIamBinding;
export const ContainerAnalysisNoteIamBinding: typeof import("./containerAnalysisNoteIamBinding").ContainerAnalysisNoteIamBinding = null as any;
utilities.lazyLoad(exports, ["ContainerAnalysisNoteIamBinding"], () => require("./containerAnalysisNoteIamBinding"));

export { ContainerAnalysisNoteIamMemberArgs, ContainerAnalysisNoteIamMemberState } from "./containerAnalysisNoteIamMember";
export type ContainerAnalysisNoteIamMember = import("./containerAnalysisNoteIamMember").ContainerAnalysisNoteIamMember;
export const ContainerAnalysisNoteIamMember: typeof import("./containerAnalysisNoteIamMember").ContainerAnalysisNoteIamMember = null as any;
utilities.lazyLoad(exports, ["ContainerAnalysisNoteIamMember"], () => require("./containerAnalysisNoteIamMember"));

export { ContainerAnalysisNoteIamPolicyArgs, ContainerAnalysisNoteIamPolicyState } from "./containerAnalysisNoteIamPolicy";
export type ContainerAnalysisNoteIamPolicy = import("./containerAnalysisNoteIamPolicy").ContainerAnalysisNoteIamPolicy;
export const ContainerAnalysisNoteIamPolicy: typeof import("./containerAnalysisNoteIamPolicy").ContainerAnalysisNoteIamPolicy = null as any;
utilities.lazyLoad(exports, ["ContainerAnalysisNoteIamPolicy"], () => require("./containerAnalysisNoteIamPolicy"));

export { ContainerAnalysisOccurrenceArgs, ContainerAnalysisOccurrenceState } from "./containerAnalysisOccurrence";
export type ContainerAnalysisOccurrence = import("./containerAnalysisOccurrence").ContainerAnalysisOccurrence;
export const ContainerAnalysisOccurrence: typeof import("./containerAnalysisOccurrence").ContainerAnalysisOccurrence = null as any;
utilities.lazyLoad(exports, ["ContainerAnalysisOccurrence"], () => require("./containerAnalysisOccurrence"));

export { ContainerAttachedClusterArgs, ContainerAttachedClusterState } from "./containerAttachedCluster";
export type ContainerAttachedCluster = import("./containerAttachedCluster").ContainerAttachedCluster;
export const ContainerAttachedCluster: typeof import("./containerAttachedCluster").ContainerAttachedCluster = null as any;
utilities.lazyLoad(exports, ["ContainerAttachedCluster"], () => require("./containerAttachedCluster"));

export { ContainerAwsClusterArgs, ContainerAwsClusterState } from "./containerAwsCluster";
export type ContainerAwsCluster = import("./containerAwsCluster").ContainerAwsCluster;
export const ContainerAwsCluster: typeof import("./containerAwsCluster").ContainerAwsCluster = null as any;
utilities.lazyLoad(exports, ["ContainerAwsCluster"], () => require("./containerAwsCluster"));

export { ContainerAwsNodePoolArgs, ContainerAwsNodePoolState } from "./containerAwsNodePool";
export type ContainerAwsNodePool = import("./containerAwsNodePool").ContainerAwsNodePool;
export const ContainerAwsNodePool: typeof import("./containerAwsNodePool").ContainerAwsNodePool = null as any;
utilities.lazyLoad(exports, ["ContainerAwsNodePool"], () => require("./containerAwsNodePool"));

export { ContainerAzureClientArgs, ContainerAzureClientState } from "./containerAzureClient";
export type ContainerAzureClient = import("./containerAzureClient").ContainerAzureClient;
export const ContainerAzureClient: typeof import("./containerAzureClient").ContainerAzureClient = null as any;
utilities.lazyLoad(exports, ["ContainerAzureClient"], () => require("./containerAzureClient"));

export { ContainerAzureClusterArgs, ContainerAzureClusterState } from "./containerAzureCluster";
export type ContainerAzureCluster = import("./containerAzureCluster").ContainerAzureCluster;
export const ContainerAzureCluster: typeof import("./containerAzureCluster").ContainerAzureCluster = null as any;
utilities.lazyLoad(exports, ["ContainerAzureCluster"], () => require("./containerAzureCluster"));

export { ContainerAzureNodePoolArgs, ContainerAzureNodePoolState } from "./containerAzureNodePool";
export type ContainerAzureNodePool = import("./containerAzureNodePool").ContainerAzureNodePool;
export const ContainerAzureNodePool: typeof import("./containerAzureNodePool").ContainerAzureNodePool = null as any;
utilities.lazyLoad(exports, ["ContainerAzureNodePool"], () => require("./containerAzureNodePool"));

export { ContainerClusterArgs, ContainerClusterState } from "./containerCluster";
export type ContainerCluster = import("./containerCluster").ContainerCluster;
export const ContainerCluster: typeof import("./containerCluster").ContainerCluster = null as any;
utilities.lazyLoad(exports, ["ContainerCluster"], () => require("./containerCluster"));

export { ContainerNodePoolArgs, ContainerNodePoolState } from "./containerNodePool";
export type ContainerNodePool = import("./containerNodePool").ContainerNodePool;
export const ContainerNodePool: typeof import("./containerNodePool").ContainerNodePool = null as any;
utilities.lazyLoad(exports, ["ContainerNodePool"], () => require("./containerNodePool"));

export { ContainerRegistryArgs, ContainerRegistryState } from "./containerRegistry";
export type ContainerRegistry = import("./containerRegistry").ContainerRegistry;
export const ContainerRegistry: typeof import("./containerRegistry").ContainerRegistry = null as any;
utilities.lazyLoad(exports, ["ContainerRegistry"], () => require("./containerRegistry"));

export { DataCatalogEntryArgs, DataCatalogEntryState } from "./dataCatalogEntry";
export type DataCatalogEntry = import("./dataCatalogEntry").DataCatalogEntry;
export const DataCatalogEntry: typeof import("./dataCatalogEntry").DataCatalogEntry = null as any;
utilities.lazyLoad(exports, ["DataCatalogEntry"], () => require("./dataCatalogEntry"));

export { DataCatalogEntryGroupArgs, DataCatalogEntryGroupState } from "./dataCatalogEntryGroup";
export type DataCatalogEntryGroup = import("./dataCatalogEntryGroup").DataCatalogEntryGroup;
export const DataCatalogEntryGroup: typeof import("./dataCatalogEntryGroup").DataCatalogEntryGroup = null as any;
utilities.lazyLoad(exports, ["DataCatalogEntryGroup"], () => require("./dataCatalogEntryGroup"));

export { DataCatalogEntryGroupIamBindingArgs, DataCatalogEntryGroupIamBindingState } from "./dataCatalogEntryGroupIamBinding";
export type DataCatalogEntryGroupIamBinding = import("./dataCatalogEntryGroupIamBinding").DataCatalogEntryGroupIamBinding;
export const DataCatalogEntryGroupIamBinding: typeof import("./dataCatalogEntryGroupIamBinding").DataCatalogEntryGroupIamBinding = null as any;
utilities.lazyLoad(exports, ["DataCatalogEntryGroupIamBinding"], () => require("./dataCatalogEntryGroupIamBinding"));

export { DataCatalogEntryGroupIamMemberArgs, DataCatalogEntryGroupIamMemberState } from "./dataCatalogEntryGroupIamMember";
export type DataCatalogEntryGroupIamMember = import("./dataCatalogEntryGroupIamMember").DataCatalogEntryGroupIamMember;
export const DataCatalogEntryGroupIamMember: typeof import("./dataCatalogEntryGroupIamMember").DataCatalogEntryGroupIamMember = null as any;
utilities.lazyLoad(exports, ["DataCatalogEntryGroupIamMember"], () => require("./dataCatalogEntryGroupIamMember"));

export { DataCatalogEntryGroupIamPolicyArgs, DataCatalogEntryGroupIamPolicyState } from "./dataCatalogEntryGroupIamPolicy";
export type DataCatalogEntryGroupIamPolicy = import("./dataCatalogEntryGroupIamPolicy").DataCatalogEntryGroupIamPolicy;
export const DataCatalogEntryGroupIamPolicy: typeof import("./dataCatalogEntryGroupIamPolicy").DataCatalogEntryGroupIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataCatalogEntryGroupIamPolicy"], () => require("./dataCatalogEntryGroupIamPolicy"));

export { DataCatalogPolicyTagArgs, DataCatalogPolicyTagState } from "./dataCatalogPolicyTag";
export type DataCatalogPolicyTag = import("./dataCatalogPolicyTag").DataCatalogPolicyTag;
export const DataCatalogPolicyTag: typeof import("./dataCatalogPolicyTag").DataCatalogPolicyTag = null as any;
utilities.lazyLoad(exports, ["DataCatalogPolicyTag"], () => require("./dataCatalogPolicyTag"));

export { DataCatalogPolicyTagIamBindingArgs, DataCatalogPolicyTagIamBindingState } from "./dataCatalogPolicyTagIamBinding";
export type DataCatalogPolicyTagIamBinding = import("./dataCatalogPolicyTagIamBinding").DataCatalogPolicyTagIamBinding;
export const DataCatalogPolicyTagIamBinding: typeof import("./dataCatalogPolicyTagIamBinding").DataCatalogPolicyTagIamBinding = null as any;
utilities.lazyLoad(exports, ["DataCatalogPolicyTagIamBinding"], () => require("./dataCatalogPolicyTagIamBinding"));

export { DataCatalogPolicyTagIamMemberArgs, DataCatalogPolicyTagIamMemberState } from "./dataCatalogPolicyTagIamMember";
export type DataCatalogPolicyTagIamMember = import("./dataCatalogPolicyTagIamMember").DataCatalogPolicyTagIamMember;
export const DataCatalogPolicyTagIamMember: typeof import("./dataCatalogPolicyTagIamMember").DataCatalogPolicyTagIamMember = null as any;
utilities.lazyLoad(exports, ["DataCatalogPolicyTagIamMember"], () => require("./dataCatalogPolicyTagIamMember"));

export { DataCatalogPolicyTagIamPolicyArgs, DataCatalogPolicyTagIamPolicyState } from "./dataCatalogPolicyTagIamPolicy";
export type DataCatalogPolicyTagIamPolicy = import("./dataCatalogPolicyTagIamPolicy").DataCatalogPolicyTagIamPolicy;
export const DataCatalogPolicyTagIamPolicy: typeof import("./dataCatalogPolicyTagIamPolicy").DataCatalogPolicyTagIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataCatalogPolicyTagIamPolicy"], () => require("./dataCatalogPolicyTagIamPolicy"));

export { DataCatalogTagArgs, DataCatalogTagState } from "./dataCatalogTag";
export type DataCatalogTag = import("./dataCatalogTag").DataCatalogTag;
export const DataCatalogTag: typeof import("./dataCatalogTag").DataCatalogTag = null as any;
utilities.lazyLoad(exports, ["DataCatalogTag"], () => require("./dataCatalogTag"));

export { DataCatalogTagTemplateArgs, DataCatalogTagTemplateState } from "./dataCatalogTagTemplate";
export type DataCatalogTagTemplate = import("./dataCatalogTagTemplate").DataCatalogTagTemplate;
export const DataCatalogTagTemplate: typeof import("./dataCatalogTagTemplate").DataCatalogTagTemplate = null as any;
utilities.lazyLoad(exports, ["DataCatalogTagTemplate"], () => require("./dataCatalogTagTemplate"));

export { DataCatalogTagTemplateIamBindingArgs, DataCatalogTagTemplateIamBindingState } from "./dataCatalogTagTemplateIamBinding";
export type DataCatalogTagTemplateIamBinding = import("./dataCatalogTagTemplateIamBinding").DataCatalogTagTemplateIamBinding;
export const DataCatalogTagTemplateIamBinding: typeof import("./dataCatalogTagTemplateIamBinding").DataCatalogTagTemplateIamBinding = null as any;
utilities.lazyLoad(exports, ["DataCatalogTagTemplateIamBinding"], () => require("./dataCatalogTagTemplateIamBinding"));

export { DataCatalogTagTemplateIamMemberArgs, DataCatalogTagTemplateIamMemberState } from "./dataCatalogTagTemplateIamMember";
export type DataCatalogTagTemplateIamMember = import("./dataCatalogTagTemplateIamMember").DataCatalogTagTemplateIamMember;
export const DataCatalogTagTemplateIamMember: typeof import("./dataCatalogTagTemplateIamMember").DataCatalogTagTemplateIamMember = null as any;
utilities.lazyLoad(exports, ["DataCatalogTagTemplateIamMember"], () => require("./dataCatalogTagTemplateIamMember"));

export { DataCatalogTagTemplateIamPolicyArgs, DataCatalogTagTemplateIamPolicyState } from "./dataCatalogTagTemplateIamPolicy";
export type DataCatalogTagTemplateIamPolicy = import("./dataCatalogTagTemplateIamPolicy").DataCatalogTagTemplateIamPolicy;
export const DataCatalogTagTemplateIamPolicy: typeof import("./dataCatalogTagTemplateIamPolicy").DataCatalogTagTemplateIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataCatalogTagTemplateIamPolicy"], () => require("./dataCatalogTagTemplateIamPolicy"));

export { DataCatalogTaxonomyArgs, DataCatalogTaxonomyState } from "./dataCatalogTaxonomy";
export type DataCatalogTaxonomy = import("./dataCatalogTaxonomy").DataCatalogTaxonomy;
export const DataCatalogTaxonomy: typeof import("./dataCatalogTaxonomy").DataCatalogTaxonomy = null as any;
utilities.lazyLoad(exports, ["DataCatalogTaxonomy"], () => require("./dataCatalogTaxonomy"));

export { DataCatalogTaxonomyIamBindingArgs, DataCatalogTaxonomyIamBindingState } from "./dataCatalogTaxonomyIamBinding";
export type DataCatalogTaxonomyIamBinding = import("./dataCatalogTaxonomyIamBinding").DataCatalogTaxonomyIamBinding;
export const DataCatalogTaxonomyIamBinding: typeof import("./dataCatalogTaxonomyIamBinding").DataCatalogTaxonomyIamBinding = null as any;
utilities.lazyLoad(exports, ["DataCatalogTaxonomyIamBinding"], () => require("./dataCatalogTaxonomyIamBinding"));

export { DataCatalogTaxonomyIamMemberArgs, DataCatalogTaxonomyIamMemberState } from "./dataCatalogTaxonomyIamMember";
export type DataCatalogTaxonomyIamMember = import("./dataCatalogTaxonomyIamMember").DataCatalogTaxonomyIamMember;
export const DataCatalogTaxonomyIamMember: typeof import("./dataCatalogTaxonomyIamMember").DataCatalogTaxonomyIamMember = null as any;
utilities.lazyLoad(exports, ["DataCatalogTaxonomyIamMember"], () => require("./dataCatalogTaxonomyIamMember"));

export { DataCatalogTaxonomyIamPolicyArgs, DataCatalogTaxonomyIamPolicyState } from "./dataCatalogTaxonomyIamPolicy";
export type DataCatalogTaxonomyIamPolicy = import("./dataCatalogTaxonomyIamPolicy").DataCatalogTaxonomyIamPolicy;
export const DataCatalogTaxonomyIamPolicy: typeof import("./dataCatalogTaxonomyIamPolicy").DataCatalogTaxonomyIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataCatalogTaxonomyIamPolicy"], () => require("./dataCatalogTaxonomyIamPolicy"));

export { DataFusionInstanceArgs, DataFusionInstanceState } from "./dataFusionInstance";
export type DataFusionInstance = import("./dataFusionInstance").DataFusionInstance;
export const DataFusionInstance: typeof import("./dataFusionInstance").DataFusionInstance = null as any;
utilities.lazyLoad(exports, ["DataFusionInstance"], () => require("./dataFusionInstance"));

export { DataFusionInstanceIamBindingArgs, DataFusionInstanceIamBindingState } from "./dataFusionInstanceIamBinding";
export type DataFusionInstanceIamBinding = import("./dataFusionInstanceIamBinding").DataFusionInstanceIamBinding;
export const DataFusionInstanceIamBinding: typeof import("./dataFusionInstanceIamBinding").DataFusionInstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["DataFusionInstanceIamBinding"], () => require("./dataFusionInstanceIamBinding"));

export { DataFusionInstanceIamMemberArgs, DataFusionInstanceIamMemberState } from "./dataFusionInstanceIamMember";
export type DataFusionInstanceIamMember = import("./dataFusionInstanceIamMember").DataFusionInstanceIamMember;
export const DataFusionInstanceIamMember: typeof import("./dataFusionInstanceIamMember").DataFusionInstanceIamMember = null as any;
utilities.lazyLoad(exports, ["DataFusionInstanceIamMember"], () => require("./dataFusionInstanceIamMember"));

export { DataFusionInstanceIamPolicyArgs, DataFusionInstanceIamPolicyState } from "./dataFusionInstanceIamPolicy";
export type DataFusionInstanceIamPolicy = import("./dataFusionInstanceIamPolicy").DataFusionInstanceIamPolicy;
export const DataFusionInstanceIamPolicy: typeof import("./dataFusionInstanceIamPolicy").DataFusionInstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataFusionInstanceIamPolicy"], () => require("./dataFusionInstanceIamPolicy"));

export { DataLossPreventionDeidentifyTemplateArgs, DataLossPreventionDeidentifyTemplateState } from "./dataLossPreventionDeidentifyTemplate";
export type DataLossPreventionDeidentifyTemplate = import("./dataLossPreventionDeidentifyTemplate").DataLossPreventionDeidentifyTemplate;
export const DataLossPreventionDeidentifyTemplate: typeof import("./dataLossPreventionDeidentifyTemplate").DataLossPreventionDeidentifyTemplate = null as any;
utilities.lazyLoad(exports, ["DataLossPreventionDeidentifyTemplate"], () => require("./dataLossPreventionDeidentifyTemplate"));

export { DataLossPreventionDiscoveryConfigArgs, DataLossPreventionDiscoveryConfigState } from "./dataLossPreventionDiscoveryConfig";
export type DataLossPreventionDiscoveryConfig = import("./dataLossPreventionDiscoveryConfig").DataLossPreventionDiscoveryConfig;
export const DataLossPreventionDiscoveryConfig: typeof import("./dataLossPreventionDiscoveryConfig").DataLossPreventionDiscoveryConfig = null as any;
utilities.lazyLoad(exports, ["DataLossPreventionDiscoveryConfig"], () => require("./dataLossPreventionDiscoveryConfig"));

export { DataLossPreventionInspectTemplateArgs, DataLossPreventionInspectTemplateState } from "./dataLossPreventionInspectTemplate";
export type DataLossPreventionInspectTemplate = import("./dataLossPreventionInspectTemplate").DataLossPreventionInspectTemplate;
export const DataLossPreventionInspectTemplate: typeof import("./dataLossPreventionInspectTemplate").DataLossPreventionInspectTemplate = null as any;
utilities.lazyLoad(exports, ["DataLossPreventionInspectTemplate"], () => require("./dataLossPreventionInspectTemplate"));

export { DataLossPreventionJobTriggerArgs, DataLossPreventionJobTriggerState } from "./dataLossPreventionJobTrigger";
export type DataLossPreventionJobTrigger = import("./dataLossPreventionJobTrigger").DataLossPreventionJobTrigger;
export const DataLossPreventionJobTrigger: typeof import("./dataLossPreventionJobTrigger").DataLossPreventionJobTrigger = null as any;
utilities.lazyLoad(exports, ["DataLossPreventionJobTrigger"], () => require("./dataLossPreventionJobTrigger"));

export { DataLossPreventionStoredInfoTypeArgs, DataLossPreventionStoredInfoTypeState } from "./dataLossPreventionStoredInfoType";
export type DataLossPreventionStoredInfoType = import("./dataLossPreventionStoredInfoType").DataLossPreventionStoredInfoType;
export const DataLossPreventionStoredInfoType: typeof import("./dataLossPreventionStoredInfoType").DataLossPreventionStoredInfoType = null as any;
utilities.lazyLoad(exports, ["DataLossPreventionStoredInfoType"], () => require("./dataLossPreventionStoredInfoType"));

export { DataPipelinePipelineArgs, DataPipelinePipelineState } from "./dataPipelinePipeline";
export type DataPipelinePipeline = import("./dataPipelinePipeline").DataPipelinePipeline;
export const DataPipelinePipeline: typeof import("./dataPipelinePipeline").DataPipelinePipeline = null as any;
utilities.lazyLoad(exports, ["DataPipelinePipeline"], () => require("./dataPipelinePipeline"));

export { DatabaseMigrationServiceConnectionProfileArgs, DatabaseMigrationServiceConnectionProfileState } from "./databaseMigrationServiceConnectionProfile";
export type DatabaseMigrationServiceConnectionProfile = import("./databaseMigrationServiceConnectionProfile").DatabaseMigrationServiceConnectionProfile;
export const DatabaseMigrationServiceConnectionProfile: typeof import("./databaseMigrationServiceConnectionProfile").DatabaseMigrationServiceConnectionProfile = null as any;
utilities.lazyLoad(exports, ["DatabaseMigrationServiceConnectionProfile"], () => require("./databaseMigrationServiceConnectionProfile"));

export { DatabaseMigrationServicePrivateConnectionArgs, DatabaseMigrationServicePrivateConnectionState } from "./databaseMigrationServicePrivateConnection";
export type DatabaseMigrationServicePrivateConnection = import("./databaseMigrationServicePrivateConnection").DatabaseMigrationServicePrivateConnection;
export const DatabaseMigrationServicePrivateConnection: typeof import("./databaseMigrationServicePrivateConnection").DatabaseMigrationServicePrivateConnection = null as any;
utilities.lazyLoad(exports, ["DatabaseMigrationServicePrivateConnection"], () => require("./databaseMigrationServicePrivateConnection"));

export { DataflowFlexTemplateJobArgs, DataflowFlexTemplateJobState } from "./dataflowFlexTemplateJob";
export type DataflowFlexTemplateJob = import("./dataflowFlexTemplateJob").DataflowFlexTemplateJob;
export const DataflowFlexTemplateJob: typeof import("./dataflowFlexTemplateJob").DataflowFlexTemplateJob = null as any;
utilities.lazyLoad(exports, ["DataflowFlexTemplateJob"], () => require("./dataflowFlexTemplateJob"));

export { DataflowJobArgs, DataflowJobState } from "./dataflowJob";
export type DataflowJob = import("./dataflowJob").DataflowJob;
export const DataflowJob: typeof import("./dataflowJob").DataflowJob = null as any;
utilities.lazyLoad(exports, ["DataflowJob"], () => require("./dataflowJob"));

export { DataformRepositoryArgs, DataformRepositoryState } from "./dataformRepository";
export type DataformRepository = import("./dataformRepository").DataformRepository;
export const DataformRepository: typeof import("./dataformRepository").DataformRepository = null as any;
utilities.lazyLoad(exports, ["DataformRepository"], () => require("./dataformRepository"));

export { DataformRepositoryIamBindingArgs, DataformRepositoryIamBindingState } from "./dataformRepositoryIamBinding";
export type DataformRepositoryIamBinding = import("./dataformRepositoryIamBinding").DataformRepositoryIamBinding;
export const DataformRepositoryIamBinding: typeof import("./dataformRepositoryIamBinding").DataformRepositoryIamBinding = null as any;
utilities.lazyLoad(exports, ["DataformRepositoryIamBinding"], () => require("./dataformRepositoryIamBinding"));

export { DataformRepositoryIamMemberArgs, DataformRepositoryIamMemberState } from "./dataformRepositoryIamMember";
export type DataformRepositoryIamMember = import("./dataformRepositoryIamMember").DataformRepositoryIamMember;
export const DataformRepositoryIamMember: typeof import("./dataformRepositoryIamMember").DataformRepositoryIamMember = null as any;
utilities.lazyLoad(exports, ["DataformRepositoryIamMember"], () => require("./dataformRepositoryIamMember"));

export { DataformRepositoryIamPolicyArgs, DataformRepositoryIamPolicyState } from "./dataformRepositoryIamPolicy";
export type DataformRepositoryIamPolicy = import("./dataformRepositoryIamPolicy").DataformRepositoryIamPolicy;
export const DataformRepositoryIamPolicy: typeof import("./dataformRepositoryIamPolicy").DataformRepositoryIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataformRepositoryIamPolicy"], () => require("./dataformRepositoryIamPolicy"));

export { DataformRepositoryReleaseConfigArgs, DataformRepositoryReleaseConfigState } from "./dataformRepositoryReleaseConfig";
export type DataformRepositoryReleaseConfig = import("./dataformRepositoryReleaseConfig").DataformRepositoryReleaseConfig;
export const DataformRepositoryReleaseConfig: typeof import("./dataformRepositoryReleaseConfig").DataformRepositoryReleaseConfig = null as any;
utilities.lazyLoad(exports, ["DataformRepositoryReleaseConfig"], () => require("./dataformRepositoryReleaseConfig"));

export { DataformRepositoryWorkflowConfigArgs, DataformRepositoryWorkflowConfigState } from "./dataformRepositoryWorkflowConfig";
export type DataformRepositoryWorkflowConfig = import("./dataformRepositoryWorkflowConfig").DataformRepositoryWorkflowConfig;
export const DataformRepositoryWorkflowConfig: typeof import("./dataformRepositoryWorkflowConfig").DataformRepositoryWorkflowConfig = null as any;
utilities.lazyLoad(exports, ["DataformRepositoryWorkflowConfig"], () => require("./dataformRepositoryWorkflowConfig"));

export { DataplexAspectTypeArgs, DataplexAspectTypeState } from "./dataplexAspectType";
export type DataplexAspectType = import("./dataplexAspectType").DataplexAspectType;
export const DataplexAspectType: typeof import("./dataplexAspectType").DataplexAspectType = null as any;
utilities.lazyLoad(exports, ["DataplexAspectType"], () => require("./dataplexAspectType"));

export { DataplexAspectTypeIamBindingArgs, DataplexAspectTypeIamBindingState } from "./dataplexAspectTypeIamBinding";
export type DataplexAspectTypeIamBinding = import("./dataplexAspectTypeIamBinding").DataplexAspectTypeIamBinding;
export const DataplexAspectTypeIamBinding: typeof import("./dataplexAspectTypeIamBinding").DataplexAspectTypeIamBinding = null as any;
utilities.lazyLoad(exports, ["DataplexAspectTypeIamBinding"], () => require("./dataplexAspectTypeIamBinding"));

export { DataplexAspectTypeIamMemberArgs, DataplexAspectTypeIamMemberState } from "./dataplexAspectTypeIamMember";
export type DataplexAspectTypeIamMember = import("./dataplexAspectTypeIamMember").DataplexAspectTypeIamMember;
export const DataplexAspectTypeIamMember: typeof import("./dataplexAspectTypeIamMember").DataplexAspectTypeIamMember = null as any;
utilities.lazyLoad(exports, ["DataplexAspectTypeIamMember"], () => require("./dataplexAspectTypeIamMember"));

export { DataplexAspectTypeIamPolicyArgs, DataplexAspectTypeIamPolicyState } from "./dataplexAspectTypeIamPolicy";
export type DataplexAspectTypeIamPolicy = import("./dataplexAspectTypeIamPolicy").DataplexAspectTypeIamPolicy;
export const DataplexAspectTypeIamPolicy: typeof import("./dataplexAspectTypeIamPolicy").DataplexAspectTypeIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataplexAspectTypeIamPolicy"], () => require("./dataplexAspectTypeIamPolicy"));

export { DataplexAssetArgs, DataplexAssetState } from "./dataplexAsset";
export type DataplexAsset = import("./dataplexAsset").DataplexAsset;
export const DataplexAsset: typeof import("./dataplexAsset").DataplexAsset = null as any;
utilities.lazyLoad(exports, ["DataplexAsset"], () => require("./dataplexAsset"));

export { DataplexAssetIamBindingArgs, DataplexAssetIamBindingState } from "./dataplexAssetIamBinding";
export type DataplexAssetIamBinding = import("./dataplexAssetIamBinding").DataplexAssetIamBinding;
export const DataplexAssetIamBinding: typeof import("./dataplexAssetIamBinding").DataplexAssetIamBinding = null as any;
utilities.lazyLoad(exports, ["DataplexAssetIamBinding"], () => require("./dataplexAssetIamBinding"));

export { DataplexAssetIamMemberArgs, DataplexAssetIamMemberState } from "./dataplexAssetIamMember";
export type DataplexAssetIamMember = import("./dataplexAssetIamMember").DataplexAssetIamMember;
export const DataplexAssetIamMember: typeof import("./dataplexAssetIamMember").DataplexAssetIamMember = null as any;
utilities.lazyLoad(exports, ["DataplexAssetIamMember"], () => require("./dataplexAssetIamMember"));

export { DataplexAssetIamPolicyArgs, DataplexAssetIamPolicyState } from "./dataplexAssetIamPolicy";
export type DataplexAssetIamPolicy = import("./dataplexAssetIamPolicy").DataplexAssetIamPolicy;
export const DataplexAssetIamPolicy: typeof import("./dataplexAssetIamPolicy").DataplexAssetIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataplexAssetIamPolicy"], () => require("./dataplexAssetIamPolicy"));

export { DataplexDatascanArgs, DataplexDatascanState } from "./dataplexDatascan";
export type DataplexDatascan = import("./dataplexDatascan").DataplexDatascan;
export const DataplexDatascan: typeof import("./dataplexDatascan").DataplexDatascan = null as any;
utilities.lazyLoad(exports, ["DataplexDatascan"], () => require("./dataplexDatascan"));

export { DataplexDatascanIamBindingArgs, DataplexDatascanIamBindingState } from "./dataplexDatascanIamBinding";
export type DataplexDatascanIamBinding = import("./dataplexDatascanIamBinding").DataplexDatascanIamBinding;
export const DataplexDatascanIamBinding: typeof import("./dataplexDatascanIamBinding").DataplexDatascanIamBinding = null as any;
utilities.lazyLoad(exports, ["DataplexDatascanIamBinding"], () => require("./dataplexDatascanIamBinding"));

export { DataplexDatascanIamMemberArgs, DataplexDatascanIamMemberState } from "./dataplexDatascanIamMember";
export type DataplexDatascanIamMember = import("./dataplexDatascanIamMember").DataplexDatascanIamMember;
export const DataplexDatascanIamMember: typeof import("./dataplexDatascanIamMember").DataplexDatascanIamMember = null as any;
utilities.lazyLoad(exports, ["DataplexDatascanIamMember"], () => require("./dataplexDatascanIamMember"));

export { DataplexDatascanIamPolicyArgs, DataplexDatascanIamPolicyState } from "./dataplexDatascanIamPolicy";
export type DataplexDatascanIamPolicy = import("./dataplexDatascanIamPolicy").DataplexDatascanIamPolicy;
export const DataplexDatascanIamPolicy: typeof import("./dataplexDatascanIamPolicy").DataplexDatascanIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataplexDatascanIamPolicy"], () => require("./dataplexDatascanIamPolicy"));

export { DataplexEntryGroupArgs, DataplexEntryGroupState } from "./dataplexEntryGroup";
export type DataplexEntryGroup = import("./dataplexEntryGroup").DataplexEntryGroup;
export const DataplexEntryGroup: typeof import("./dataplexEntryGroup").DataplexEntryGroup = null as any;
utilities.lazyLoad(exports, ["DataplexEntryGroup"], () => require("./dataplexEntryGroup"));

export { DataplexEntryGroupIamBindingArgs, DataplexEntryGroupIamBindingState } from "./dataplexEntryGroupIamBinding";
export type DataplexEntryGroupIamBinding = import("./dataplexEntryGroupIamBinding").DataplexEntryGroupIamBinding;
export const DataplexEntryGroupIamBinding: typeof import("./dataplexEntryGroupIamBinding").DataplexEntryGroupIamBinding = null as any;
utilities.lazyLoad(exports, ["DataplexEntryGroupIamBinding"], () => require("./dataplexEntryGroupIamBinding"));

export { DataplexEntryGroupIamMemberArgs, DataplexEntryGroupIamMemberState } from "./dataplexEntryGroupIamMember";
export type DataplexEntryGroupIamMember = import("./dataplexEntryGroupIamMember").DataplexEntryGroupIamMember;
export const DataplexEntryGroupIamMember: typeof import("./dataplexEntryGroupIamMember").DataplexEntryGroupIamMember = null as any;
utilities.lazyLoad(exports, ["DataplexEntryGroupIamMember"], () => require("./dataplexEntryGroupIamMember"));

export { DataplexEntryGroupIamPolicyArgs, DataplexEntryGroupIamPolicyState } from "./dataplexEntryGroupIamPolicy";
export type DataplexEntryGroupIamPolicy = import("./dataplexEntryGroupIamPolicy").DataplexEntryGroupIamPolicy;
export const DataplexEntryGroupIamPolicy: typeof import("./dataplexEntryGroupIamPolicy").DataplexEntryGroupIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataplexEntryGroupIamPolicy"], () => require("./dataplexEntryGroupIamPolicy"));

export { DataplexEntryTypeArgs, DataplexEntryTypeState } from "./dataplexEntryType";
export type DataplexEntryType = import("./dataplexEntryType").DataplexEntryType;
export const DataplexEntryType: typeof import("./dataplexEntryType").DataplexEntryType = null as any;
utilities.lazyLoad(exports, ["DataplexEntryType"], () => require("./dataplexEntryType"));

export { DataplexEntryTypeIamBindingArgs, DataplexEntryTypeIamBindingState } from "./dataplexEntryTypeIamBinding";
export type DataplexEntryTypeIamBinding = import("./dataplexEntryTypeIamBinding").DataplexEntryTypeIamBinding;
export const DataplexEntryTypeIamBinding: typeof import("./dataplexEntryTypeIamBinding").DataplexEntryTypeIamBinding = null as any;
utilities.lazyLoad(exports, ["DataplexEntryTypeIamBinding"], () => require("./dataplexEntryTypeIamBinding"));

export { DataplexEntryTypeIamMemberArgs, DataplexEntryTypeIamMemberState } from "./dataplexEntryTypeIamMember";
export type DataplexEntryTypeIamMember = import("./dataplexEntryTypeIamMember").DataplexEntryTypeIamMember;
export const DataplexEntryTypeIamMember: typeof import("./dataplexEntryTypeIamMember").DataplexEntryTypeIamMember = null as any;
utilities.lazyLoad(exports, ["DataplexEntryTypeIamMember"], () => require("./dataplexEntryTypeIamMember"));

export { DataplexEntryTypeIamPolicyArgs, DataplexEntryTypeIamPolicyState } from "./dataplexEntryTypeIamPolicy";
export type DataplexEntryTypeIamPolicy = import("./dataplexEntryTypeIamPolicy").DataplexEntryTypeIamPolicy;
export const DataplexEntryTypeIamPolicy: typeof import("./dataplexEntryTypeIamPolicy").DataplexEntryTypeIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataplexEntryTypeIamPolicy"], () => require("./dataplexEntryTypeIamPolicy"));

export { DataplexLakeArgs, DataplexLakeState } from "./dataplexLake";
export type DataplexLake = import("./dataplexLake").DataplexLake;
export const DataplexLake: typeof import("./dataplexLake").DataplexLake = null as any;
utilities.lazyLoad(exports, ["DataplexLake"], () => require("./dataplexLake"));

export { DataplexLakeIamBindingArgs, DataplexLakeIamBindingState } from "./dataplexLakeIamBinding";
export type DataplexLakeIamBinding = import("./dataplexLakeIamBinding").DataplexLakeIamBinding;
export const DataplexLakeIamBinding: typeof import("./dataplexLakeIamBinding").DataplexLakeIamBinding = null as any;
utilities.lazyLoad(exports, ["DataplexLakeIamBinding"], () => require("./dataplexLakeIamBinding"));

export { DataplexLakeIamMemberArgs, DataplexLakeIamMemberState } from "./dataplexLakeIamMember";
export type DataplexLakeIamMember = import("./dataplexLakeIamMember").DataplexLakeIamMember;
export const DataplexLakeIamMember: typeof import("./dataplexLakeIamMember").DataplexLakeIamMember = null as any;
utilities.lazyLoad(exports, ["DataplexLakeIamMember"], () => require("./dataplexLakeIamMember"));

export { DataplexLakeIamPolicyArgs, DataplexLakeIamPolicyState } from "./dataplexLakeIamPolicy";
export type DataplexLakeIamPolicy = import("./dataplexLakeIamPolicy").DataplexLakeIamPolicy;
export const DataplexLakeIamPolicy: typeof import("./dataplexLakeIamPolicy").DataplexLakeIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataplexLakeIamPolicy"], () => require("./dataplexLakeIamPolicy"));

export { DataplexTaskArgs, DataplexTaskState } from "./dataplexTask";
export type DataplexTask = import("./dataplexTask").DataplexTask;
export const DataplexTask: typeof import("./dataplexTask").DataplexTask = null as any;
utilities.lazyLoad(exports, ["DataplexTask"], () => require("./dataplexTask"));

export { DataplexTaskIamBindingArgs, DataplexTaskIamBindingState } from "./dataplexTaskIamBinding";
export type DataplexTaskIamBinding = import("./dataplexTaskIamBinding").DataplexTaskIamBinding;
export const DataplexTaskIamBinding: typeof import("./dataplexTaskIamBinding").DataplexTaskIamBinding = null as any;
utilities.lazyLoad(exports, ["DataplexTaskIamBinding"], () => require("./dataplexTaskIamBinding"));

export { DataplexTaskIamMemberArgs, DataplexTaskIamMemberState } from "./dataplexTaskIamMember";
export type DataplexTaskIamMember = import("./dataplexTaskIamMember").DataplexTaskIamMember;
export const DataplexTaskIamMember: typeof import("./dataplexTaskIamMember").DataplexTaskIamMember = null as any;
utilities.lazyLoad(exports, ["DataplexTaskIamMember"], () => require("./dataplexTaskIamMember"));

export { DataplexTaskIamPolicyArgs, DataplexTaskIamPolicyState } from "./dataplexTaskIamPolicy";
export type DataplexTaskIamPolicy = import("./dataplexTaskIamPolicy").DataplexTaskIamPolicy;
export const DataplexTaskIamPolicy: typeof import("./dataplexTaskIamPolicy").DataplexTaskIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataplexTaskIamPolicy"], () => require("./dataplexTaskIamPolicy"));

export { DataplexZoneArgs, DataplexZoneState } from "./dataplexZone";
export type DataplexZone = import("./dataplexZone").DataplexZone;
export const DataplexZone: typeof import("./dataplexZone").DataplexZone = null as any;
utilities.lazyLoad(exports, ["DataplexZone"], () => require("./dataplexZone"));

export { DataplexZoneIamBindingArgs, DataplexZoneIamBindingState } from "./dataplexZoneIamBinding";
export type DataplexZoneIamBinding = import("./dataplexZoneIamBinding").DataplexZoneIamBinding;
export const DataplexZoneIamBinding: typeof import("./dataplexZoneIamBinding").DataplexZoneIamBinding = null as any;
utilities.lazyLoad(exports, ["DataplexZoneIamBinding"], () => require("./dataplexZoneIamBinding"));

export { DataplexZoneIamMemberArgs, DataplexZoneIamMemberState } from "./dataplexZoneIamMember";
export type DataplexZoneIamMember = import("./dataplexZoneIamMember").DataplexZoneIamMember;
export const DataplexZoneIamMember: typeof import("./dataplexZoneIamMember").DataplexZoneIamMember = null as any;
utilities.lazyLoad(exports, ["DataplexZoneIamMember"], () => require("./dataplexZoneIamMember"));

export { DataplexZoneIamPolicyArgs, DataplexZoneIamPolicyState } from "./dataplexZoneIamPolicy";
export type DataplexZoneIamPolicy = import("./dataplexZoneIamPolicy").DataplexZoneIamPolicy;
export const DataplexZoneIamPolicy: typeof import("./dataplexZoneIamPolicy").DataplexZoneIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataplexZoneIamPolicy"], () => require("./dataplexZoneIamPolicy"));

export { DataprocAutoscalingPolicyArgs, DataprocAutoscalingPolicyState } from "./dataprocAutoscalingPolicy";
export type DataprocAutoscalingPolicy = import("./dataprocAutoscalingPolicy").DataprocAutoscalingPolicy;
export const DataprocAutoscalingPolicy: typeof import("./dataprocAutoscalingPolicy").DataprocAutoscalingPolicy = null as any;
utilities.lazyLoad(exports, ["DataprocAutoscalingPolicy"], () => require("./dataprocAutoscalingPolicy"));

export { DataprocAutoscalingPolicyIamBindingArgs, DataprocAutoscalingPolicyIamBindingState } from "./dataprocAutoscalingPolicyIamBinding";
export type DataprocAutoscalingPolicyIamBinding = import("./dataprocAutoscalingPolicyIamBinding").DataprocAutoscalingPolicyIamBinding;
export const DataprocAutoscalingPolicyIamBinding: typeof import("./dataprocAutoscalingPolicyIamBinding").DataprocAutoscalingPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["DataprocAutoscalingPolicyIamBinding"], () => require("./dataprocAutoscalingPolicyIamBinding"));

export { DataprocAutoscalingPolicyIamMemberArgs, DataprocAutoscalingPolicyIamMemberState } from "./dataprocAutoscalingPolicyIamMember";
export type DataprocAutoscalingPolicyIamMember = import("./dataprocAutoscalingPolicyIamMember").DataprocAutoscalingPolicyIamMember;
export const DataprocAutoscalingPolicyIamMember: typeof import("./dataprocAutoscalingPolicyIamMember").DataprocAutoscalingPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["DataprocAutoscalingPolicyIamMember"], () => require("./dataprocAutoscalingPolicyIamMember"));

export { DataprocAutoscalingPolicyIamPolicyArgs, DataprocAutoscalingPolicyIamPolicyState } from "./dataprocAutoscalingPolicyIamPolicy";
export type DataprocAutoscalingPolicyIamPolicy = import("./dataprocAutoscalingPolicyIamPolicy").DataprocAutoscalingPolicyIamPolicy;
export const DataprocAutoscalingPolicyIamPolicy: typeof import("./dataprocAutoscalingPolicyIamPolicy").DataprocAutoscalingPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataprocAutoscalingPolicyIamPolicy"], () => require("./dataprocAutoscalingPolicyIamPolicy"));

export { DataprocClusterArgs, DataprocClusterState } from "./dataprocCluster";
export type DataprocCluster = import("./dataprocCluster").DataprocCluster;
export const DataprocCluster: typeof import("./dataprocCluster").DataprocCluster = null as any;
utilities.lazyLoad(exports, ["DataprocCluster"], () => require("./dataprocCluster"));

export { DataprocClusterIamBindingArgs, DataprocClusterIamBindingState } from "./dataprocClusterIamBinding";
export type DataprocClusterIamBinding = import("./dataprocClusterIamBinding").DataprocClusterIamBinding;
export const DataprocClusterIamBinding: typeof import("./dataprocClusterIamBinding").DataprocClusterIamBinding = null as any;
utilities.lazyLoad(exports, ["DataprocClusterIamBinding"], () => require("./dataprocClusterIamBinding"));

export { DataprocClusterIamMemberArgs, DataprocClusterIamMemberState } from "./dataprocClusterIamMember";
export type DataprocClusterIamMember = import("./dataprocClusterIamMember").DataprocClusterIamMember;
export const DataprocClusterIamMember: typeof import("./dataprocClusterIamMember").DataprocClusterIamMember = null as any;
utilities.lazyLoad(exports, ["DataprocClusterIamMember"], () => require("./dataprocClusterIamMember"));

export { DataprocClusterIamPolicyArgs, DataprocClusterIamPolicyState } from "./dataprocClusterIamPolicy";
export type DataprocClusterIamPolicy = import("./dataprocClusterIamPolicy").DataprocClusterIamPolicy;
export const DataprocClusterIamPolicy: typeof import("./dataprocClusterIamPolicy").DataprocClusterIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataprocClusterIamPolicy"], () => require("./dataprocClusterIamPolicy"));

export { DataprocJobArgs, DataprocJobState } from "./dataprocJob";
export type DataprocJob = import("./dataprocJob").DataprocJob;
export const DataprocJob: typeof import("./dataprocJob").DataprocJob = null as any;
utilities.lazyLoad(exports, ["DataprocJob"], () => require("./dataprocJob"));

export { DataprocJobIamBindingArgs, DataprocJobIamBindingState } from "./dataprocJobIamBinding";
export type DataprocJobIamBinding = import("./dataprocJobIamBinding").DataprocJobIamBinding;
export const DataprocJobIamBinding: typeof import("./dataprocJobIamBinding").DataprocJobIamBinding = null as any;
utilities.lazyLoad(exports, ["DataprocJobIamBinding"], () => require("./dataprocJobIamBinding"));

export { DataprocJobIamMemberArgs, DataprocJobIamMemberState } from "./dataprocJobIamMember";
export type DataprocJobIamMember = import("./dataprocJobIamMember").DataprocJobIamMember;
export const DataprocJobIamMember: typeof import("./dataprocJobIamMember").DataprocJobIamMember = null as any;
utilities.lazyLoad(exports, ["DataprocJobIamMember"], () => require("./dataprocJobIamMember"));

export { DataprocJobIamPolicyArgs, DataprocJobIamPolicyState } from "./dataprocJobIamPolicy";
export type DataprocJobIamPolicy = import("./dataprocJobIamPolicy").DataprocJobIamPolicy;
export const DataprocJobIamPolicy: typeof import("./dataprocJobIamPolicy").DataprocJobIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataprocJobIamPolicy"], () => require("./dataprocJobIamPolicy"));

export { DataprocMetastoreFederationArgs, DataprocMetastoreFederationState } from "./dataprocMetastoreFederation";
export type DataprocMetastoreFederation = import("./dataprocMetastoreFederation").DataprocMetastoreFederation;
export const DataprocMetastoreFederation: typeof import("./dataprocMetastoreFederation").DataprocMetastoreFederation = null as any;
utilities.lazyLoad(exports, ["DataprocMetastoreFederation"], () => require("./dataprocMetastoreFederation"));

export { DataprocMetastoreFederationIamBindingArgs, DataprocMetastoreFederationIamBindingState } from "./dataprocMetastoreFederationIamBinding";
export type DataprocMetastoreFederationIamBinding = import("./dataprocMetastoreFederationIamBinding").DataprocMetastoreFederationIamBinding;
export const DataprocMetastoreFederationIamBinding: typeof import("./dataprocMetastoreFederationIamBinding").DataprocMetastoreFederationIamBinding = null as any;
utilities.lazyLoad(exports, ["DataprocMetastoreFederationIamBinding"], () => require("./dataprocMetastoreFederationIamBinding"));

export { DataprocMetastoreFederationIamMemberArgs, DataprocMetastoreFederationIamMemberState } from "./dataprocMetastoreFederationIamMember";
export type DataprocMetastoreFederationIamMember = import("./dataprocMetastoreFederationIamMember").DataprocMetastoreFederationIamMember;
export const DataprocMetastoreFederationIamMember: typeof import("./dataprocMetastoreFederationIamMember").DataprocMetastoreFederationIamMember = null as any;
utilities.lazyLoad(exports, ["DataprocMetastoreFederationIamMember"], () => require("./dataprocMetastoreFederationIamMember"));

export { DataprocMetastoreFederationIamPolicyArgs, DataprocMetastoreFederationIamPolicyState } from "./dataprocMetastoreFederationIamPolicy";
export type DataprocMetastoreFederationIamPolicy = import("./dataprocMetastoreFederationIamPolicy").DataprocMetastoreFederationIamPolicy;
export const DataprocMetastoreFederationIamPolicy: typeof import("./dataprocMetastoreFederationIamPolicy").DataprocMetastoreFederationIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataprocMetastoreFederationIamPolicy"], () => require("./dataprocMetastoreFederationIamPolicy"));

export { DataprocMetastoreServiceArgs, DataprocMetastoreServiceState } from "./dataprocMetastoreService";
export type DataprocMetastoreService = import("./dataprocMetastoreService").DataprocMetastoreService;
export const DataprocMetastoreService: typeof import("./dataprocMetastoreService").DataprocMetastoreService = null as any;
utilities.lazyLoad(exports, ["DataprocMetastoreService"], () => require("./dataprocMetastoreService"));

export { DataprocMetastoreServiceIamBindingArgs, DataprocMetastoreServiceIamBindingState } from "./dataprocMetastoreServiceIamBinding";
export type DataprocMetastoreServiceIamBinding = import("./dataprocMetastoreServiceIamBinding").DataprocMetastoreServiceIamBinding;
export const DataprocMetastoreServiceIamBinding: typeof import("./dataprocMetastoreServiceIamBinding").DataprocMetastoreServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["DataprocMetastoreServiceIamBinding"], () => require("./dataprocMetastoreServiceIamBinding"));

export { DataprocMetastoreServiceIamMemberArgs, DataprocMetastoreServiceIamMemberState } from "./dataprocMetastoreServiceIamMember";
export type DataprocMetastoreServiceIamMember = import("./dataprocMetastoreServiceIamMember").DataprocMetastoreServiceIamMember;
export const DataprocMetastoreServiceIamMember: typeof import("./dataprocMetastoreServiceIamMember").DataprocMetastoreServiceIamMember = null as any;
utilities.lazyLoad(exports, ["DataprocMetastoreServiceIamMember"], () => require("./dataprocMetastoreServiceIamMember"));

export { DataprocMetastoreServiceIamPolicyArgs, DataprocMetastoreServiceIamPolicyState } from "./dataprocMetastoreServiceIamPolicy";
export type DataprocMetastoreServiceIamPolicy = import("./dataprocMetastoreServiceIamPolicy").DataprocMetastoreServiceIamPolicy;
export const DataprocMetastoreServiceIamPolicy: typeof import("./dataprocMetastoreServiceIamPolicy").DataprocMetastoreServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["DataprocMetastoreServiceIamPolicy"], () => require("./dataprocMetastoreServiceIamPolicy"));

export { DataprocWorkflowTemplateArgs, DataprocWorkflowTemplateState } from "./dataprocWorkflowTemplate";
export type DataprocWorkflowTemplate = import("./dataprocWorkflowTemplate").DataprocWorkflowTemplate;
export const DataprocWorkflowTemplate: typeof import("./dataprocWorkflowTemplate").DataprocWorkflowTemplate = null as any;
utilities.lazyLoad(exports, ["DataprocWorkflowTemplate"], () => require("./dataprocWorkflowTemplate"));

export { DatastreamConnectionProfileArgs, DatastreamConnectionProfileState } from "./datastreamConnectionProfile";
export type DatastreamConnectionProfile = import("./datastreamConnectionProfile").DatastreamConnectionProfile;
export const DatastreamConnectionProfile: typeof import("./datastreamConnectionProfile").DatastreamConnectionProfile = null as any;
utilities.lazyLoad(exports, ["DatastreamConnectionProfile"], () => require("./datastreamConnectionProfile"));

export { DatastreamPrivateConnectionArgs, DatastreamPrivateConnectionState } from "./datastreamPrivateConnection";
export type DatastreamPrivateConnection = import("./datastreamPrivateConnection").DatastreamPrivateConnection;
export const DatastreamPrivateConnection: typeof import("./datastreamPrivateConnection").DatastreamPrivateConnection = null as any;
utilities.lazyLoad(exports, ["DatastreamPrivateConnection"], () => require("./datastreamPrivateConnection"));

export { DatastreamStreamArgs, DatastreamStreamState } from "./datastreamStream";
export type DatastreamStream = import("./datastreamStream").DatastreamStream;
export const DatastreamStream: typeof import("./datastreamStream").DatastreamStream = null as any;
utilities.lazyLoad(exports, ["DatastreamStream"], () => require("./datastreamStream"));

export { DeploymentManagerDeploymentArgs, DeploymentManagerDeploymentState } from "./deploymentManagerDeployment";
export type DeploymentManagerDeployment = import("./deploymentManagerDeployment").DeploymentManagerDeployment;
export const DeploymentManagerDeployment: typeof import("./deploymentManagerDeployment").DeploymentManagerDeployment = null as any;
utilities.lazyLoad(exports, ["DeploymentManagerDeployment"], () => require("./deploymentManagerDeployment"));

export { DialogflowAgentArgs, DialogflowAgentState } from "./dialogflowAgent";
export type DialogflowAgent = import("./dialogflowAgent").DialogflowAgent;
export const DialogflowAgent: typeof import("./dialogflowAgent").DialogflowAgent = null as any;
utilities.lazyLoad(exports, ["DialogflowAgent"], () => require("./dialogflowAgent"));

export { DialogflowCxAgentArgs, DialogflowCxAgentState } from "./dialogflowCxAgent";
export type DialogflowCxAgent = import("./dialogflowCxAgent").DialogflowCxAgent;
export const DialogflowCxAgent: typeof import("./dialogflowCxAgent").DialogflowCxAgent = null as any;
utilities.lazyLoad(exports, ["DialogflowCxAgent"], () => require("./dialogflowCxAgent"));

export { DialogflowCxEntityTypeArgs, DialogflowCxEntityTypeState } from "./dialogflowCxEntityType";
export type DialogflowCxEntityType = import("./dialogflowCxEntityType").DialogflowCxEntityType;
export const DialogflowCxEntityType: typeof import("./dialogflowCxEntityType").DialogflowCxEntityType = null as any;
utilities.lazyLoad(exports, ["DialogflowCxEntityType"], () => require("./dialogflowCxEntityType"));

export { DialogflowCxEnvironmentArgs, DialogflowCxEnvironmentState } from "./dialogflowCxEnvironment";
export type DialogflowCxEnvironment = import("./dialogflowCxEnvironment").DialogflowCxEnvironment;
export const DialogflowCxEnvironment: typeof import("./dialogflowCxEnvironment").DialogflowCxEnvironment = null as any;
utilities.lazyLoad(exports, ["DialogflowCxEnvironment"], () => require("./dialogflowCxEnvironment"));

export { DialogflowCxFlowArgs, DialogflowCxFlowState } from "./dialogflowCxFlow";
export type DialogflowCxFlow = import("./dialogflowCxFlow").DialogflowCxFlow;
export const DialogflowCxFlow: typeof import("./dialogflowCxFlow").DialogflowCxFlow = null as any;
utilities.lazyLoad(exports, ["DialogflowCxFlow"], () => require("./dialogflowCxFlow"));

export { DialogflowCxIntentArgs, DialogflowCxIntentState } from "./dialogflowCxIntent";
export type DialogflowCxIntent = import("./dialogflowCxIntent").DialogflowCxIntent;
export const DialogflowCxIntent: typeof import("./dialogflowCxIntent").DialogflowCxIntent = null as any;
utilities.lazyLoad(exports, ["DialogflowCxIntent"], () => require("./dialogflowCxIntent"));

export { DialogflowCxPageArgs, DialogflowCxPageState } from "./dialogflowCxPage";
export type DialogflowCxPage = import("./dialogflowCxPage").DialogflowCxPage;
export const DialogflowCxPage: typeof import("./dialogflowCxPage").DialogflowCxPage = null as any;
utilities.lazyLoad(exports, ["DialogflowCxPage"], () => require("./dialogflowCxPage"));

export { DialogflowCxSecuritySettingsArgs, DialogflowCxSecuritySettingsState } from "./dialogflowCxSecuritySettings";
export type DialogflowCxSecuritySettings = import("./dialogflowCxSecuritySettings").DialogflowCxSecuritySettings;
export const DialogflowCxSecuritySettings: typeof import("./dialogflowCxSecuritySettings").DialogflowCxSecuritySettings = null as any;
utilities.lazyLoad(exports, ["DialogflowCxSecuritySettings"], () => require("./dialogflowCxSecuritySettings"));

export { DialogflowCxTestCaseArgs, DialogflowCxTestCaseState } from "./dialogflowCxTestCase";
export type DialogflowCxTestCase = import("./dialogflowCxTestCase").DialogflowCxTestCase;
export const DialogflowCxTestCase: typeof import("./dialogflowCxTestCase").DialogflowCxTestCase = null as any;
utilities.lazyLoad(exports, ["DialogflowCxTestCase"], () => require("./dialogflowCxTestCase"));

export { DialogflowCxVersionArgs, DialogflowCxVersionState } from "./dialogflowCxVersion";
export type DialogflowCxVersion = import("./dialogflowCxVersion").DialogflowCxVersion;
export const DialogflowCxVersion: typeof import("./dialogflowCxVersion").DialogflowCxVersion = null as any;
utilities.lazyLoad(exports, ["DialogflowCxVersion"], () => require("./dialogflowCxVersion"));

export { DialogflowCxWebhookArgs, DialogflowCxWebhookState } from "./dialogflowCxWebhook";
export type DialogflowCxWebhook = import("./dialogflowCxWebhook").DialogflowCxWebhook;
export const DialogflowCxWebhook: typeof import("./dialogflowCxWebhook").DialogflowCxWebhook = null as any;
utilities.lazyLoad(exports, ["DialogflowCxWebhook"], () => require("./dialogflowCxWebhook"));

export { DialogflowEntityTypeArgs, DialogflowEntityTypeState } from "./dialogflowEntityType";
export type DialogflowEntityType = import("./dialogflowEntityType").DialogflowEntityType;
export const DialogflowEntityType: typeof import("./dialogflowEntityType").DialogflowEntityType = null as any;
utilities.lazyLoad(exports, ["DialogflowEntityType"], () => require("./dialogflowEntityType"));

export { DialogflowFulfillmentArgs, DialogflowFulfillmentState } from "./dialogflowFulfillment";
export type DialogflowFulfillment = import("./dialogflowFulfillment").DialogflowFulfillment;
export const DialogflowFulfillment: typeof import("./dialogflowFulfillment").DialogflowFulfillment = null as any;
utilities.lazyLoad(exports, ["DialogflowFulfillment"], () => require("./dialogflowFulfillment"));

export { DialogflowIntentArgs, DialogflowIntentState } from "./dialogflowIntent";
export type DialogflowIntent = import("./dialogflowIntent").DialogflowIntent;
export const DialogflowIntent: typeof import("./dialogflowIntent").DialogflowIntent = null as any;
utilities.lazyLoad(exports, ["DialogflowIntent"], () => require("./dialogflowIntent"));

export { DiscoveryEngineChatEngineArgs, DiscoveryEngineChatEngineState } from "./discoveryEngineChatEngine";
export type DiscoveryEngineChatEngine = import("./discoveryEngineChatEngine").DiscoveryEngineChatEngine;
export const DiscoveryEngineChatEngine: typeof import("./discoveryEngineChatEngine").DiscoveryEngineChatEngine = null as any;
utilities.lazyLoad(exports, ["DiscoveryEngineChatEngine"], () => require("./discoveryEngineChatEngine"));

export { DiscoveryEngineDataStoreArgs, DiscoveryEngineDataStoreState } from "./discoveryEngineDataStore";
export type DiscoveryEngineDataStore = import("./discoveryEngineDataStore").DiscoveryEngineDataStore;
export const DiscoveryEngineDataStore: typeof import("./discoveryEngineDataStore").DiscoveryEngineDataStore = null as any;
utilities.lazyLoad(exports, ["DiscoveryEngineDataStore"], () => require("./discoveryEngineDataStore"));

export { DiscoveryEngineSchemaArgs, DiscoveryEngineSchemaState } from "./discoveryEngineSchema";
export type DiscoveryEngineSchema = import("./discoveryEngineSchema").DiscoveryEngineSchema;
export const DiscoveryEngineSchema: typeof import("./discoveryEngineSchema").DiscoveryEngineSchema = null as any;
utilities.lazyLoad(exports, ["DiscoveryEngineSchema"], () => require("./discoveryEngineSchema"));

export { DiscoveryEngineSearchEngineArgs, DiscoveryEngineSearchEngineState } from "./discoveryEngineSearchEngine";
export type DiscoveryEngineSearchEngine = import("./discoveryEngineSearchEngine").DiscoveryEngineSearchEngine;
export const DiscoveryEngineSearchEngine: typeof import("./discoveryEngineSearchEngine").DiscoveryEngineSearchEngine = null as any;
utilities.lazyLoad(exports, ["DiscoveryEngineSearchEngine"], () => require("./discoveryEngineSearchEngine"));

export { DnsManagedZoneArgs, DnsManagedZoneState } from "./dnsManagedZone";
export type DnsManagedZone = import("./dnsManagedZone").DnsManagedZone;
export const DnsManagedZone: typeof import("./dnsManagedZone").DnsManagedZone = null as any;
utilities.lazyLoad(exports, ["DnsManagedZone"], () => require("./dnsManagedZone"));

export { DnsManagedZoneIamBindingArgs, DnsManagedZoneIamBindingState } from "./dnsManagedZoneIamBinding";
export type DnsManagedZoneIamBinding = import("./dnsManagedZoneIamBinding").DnsManagedZoneIamBinding;
export const DnsManagedZoneIamBinding: typeof import("./dnsManagedZoneIamBinding").DnsManagedZoneIamBinding = null as any;
utilities.lazyLoad(exports, ["DnsManagedZoneIamBinding"], () => require("./dnsManagedZoneIamBinding"));

export { DnsManagedZoneIamMemberArgs, DnsManagedZoneIamMemberState } from "./dnsManagedZoneIamMember";
export type DnsManagedZoneIamMember = import("./dnsManagedZoneIamMember").DnsManagedZoneIamMember;
export const DnsManagedZoneIamMember: typeof import("./dnsManagedZoneIamMember").DnsManagedZoneIamMember = null as any;
utilities.lazyLoad(exports, ["DnsManagedZoneIamMember"], () => require("./dnsManagedZoneIamMember"));

export { DnsManagedZoneIamPolicyArgs, DnsManagedZoneIamPolicyState } from "./dnsManagedZoneIamPolicy";
export type DnsManagedZoneIamPolicy = import("./dnsManagedZoneIamPolicy").DnsManagedZoneIamPolicy;
export const DnsManagedZoneIamPolicy: typeof import("./dnsManagedZoneIamPolicy").DnsManagedZoneIamPolicy = null as any;
utilities.lazyLoad(exports, ["DnsManagedZoneIamPolicy"], () => require("./dnsManagedZoneIamPolicy"));

export { DnsPolicyArgs, DnsPolicyState } from "./dnsPolicy";
export type DnsPolicy = import("./dnsPolicy").DnsPolicy;
export const DnsPolicy: typeof import("./dnsPolicy").DnsPolicy = null as any;
utilities.lazyLoad(exports, ["DnsPolicy"], () => require("./dnsPolicy"));

export { DnsRecordSetArgs, DnsRecordSetState } from "./dnsRecordSet";
export type DnsRecordSet = import("./dnsRecordSet").DnsRecordSet;
export const DnsRecordSet: typeof import("./dnsRecordSet").DnsRecordSet = null as any;
utilities.lazyLoad(exports, ["DnsRecordSet"], () => require("./dnsRecordSet"));

export { DnsResponsePolicyArgs, DnsResponsePolicyState } from "./dnsResponsePolicy";
export type DnsResponsePolicy = import("./dnsResponsePolicy").DnsResponsePolicy;
export const DnsResponsePolicy: typeof import("./dnsResponsePolicy").DnsResponsePolicy = null as any;
utilities.lazyLoad(exports, ["DnsResponsePolicy"], () => require("./dnsResponsePolicy"));

export { DnsResponsePolicyRuleArgs, DnsResponsePolicyRuleState } from "./dnsResponsePolicyRule";
export type DnsResponsePolicyRule = import("./dnsResponsePolicyRule").DnsResponsePolicyRule;
export const DnsResponsePolicyRule: typeof import("./dnsResponsePolicyRule").DnsResponsePolicyRule = null as any;
utilities.lazyLoad(exports, ["DnsResponsePolicyRule"], () => require("./dnsResponsePolicyRule"));

export { DocumentAiProcessorArgs, DocumentAiProcessorState } from "./documentAiProcessor";
export type DocumentAiProcessor = import("./documentAiProcessor").DocumentAiProcessor;
export const DocumentAiProcessor: typeof import("./documentAiProcessor").DocumentAiProcessor = null as any;
utilities.lazyLoad(exports, ["DocumentAiProcessor"], () => require("./documentAiProcessor"));

export { DocumentAiProcessorDefaultVersionArgs, DocumentAiProcessorDefaultVersionState } from "./documentAiProcessorDefaultVersion";
export type DocumentAiProcessorDefaultVersion = import("./documentAiProcessorDefaultVersion").DocumentAiProcessorDefaultVersion;
export const DocumentAiProcessorDefaultVersion: typeof import("./documentAiProcessorDefaultVersion").DocumentAiProcessorDefaultVersion = null as any;
utilities.lazyLoad(exports, ["DocumentAiProcessorDefaultVersion"], () => require("./documentAiProcessorDefaultVersion"));

export { DocumentAiWarehouseDocumentSchemaArgs, DocumentAiWarehouseDocumentSchemaState } from "./documentAiWarehouseDocumentSchema";
export type DocumentAiWarehouseDocumentSchema = import("./documentAiWarehouseDocumentSchema").DocumentAiWarehouseDocumentSchema;
export const DocumentAiWarehouseDocumentSchema: typeof import("./documentAiWarehouseDocumentSchema").DocumentAiWarehouseDocumentSchema = null as any;
utilities.lazyLoad(exports, ["DocumentAiWarehouseDocumentSchema"], () => require("./documentAiWarehouseDocumentSchema"));

export { DocumentAiWarehouseLocationArgs, DocumentAiWarehouseLocationState } from "./documentAiWarehouseLocation";
export type DocumentAiWarehouseLocation = import("./documentAiWarehouseLocation").DocumentAiWarehouseLocation;
export const DocumentAiWarehouseLocation: typeof import("./documentAiWarehouseLocation").DocumentAiWarehouseLocation = null as any;
utilities.lazyLoad(exports, ["DocumentAiWarehouseLocation"], () => require("./documentAiWarehouseLocation"));

export { EdgecontainerClusterArgs, EdgecontainerClusterState } from "./edgecontainerCluster";
export type EdgecontainerCluster = import("./edgecontainerCluster").EdgecontainerCluster;
export const EdgecontainerCluster: typeof import("./edgecontainerCluster").EdgecontainerCluster = null as any;
utilities.lazyLoad(exports, ["EdgecontainerCluster"], () => require("./edgecontainerCluster"));

export { EdgecontainerNodePoolArgs, EdgecontainerNodePoolState } from "./edgecontainerNodePool";
export type EdgecontainerNodePool = import("./edgecontainerNodePool").EdgecontainerNodePool;
export const EdgecontainerNodePool: typeof import("./edgecontainerNodePool").EdgecontainerNodePool = null as any;
utilities.lazyLoad(exports, ["EdgecontainerNodePool"], () => require("./edgecontainerNodePool"));

export { EdgecontainerVpnConnectionArgs, EdgecontainerVpnConnectionState } from "./edgecontainerVpnConnection";
export type EdgecontainerVpnConnection = import("./edgecontainerVpnConnection").EdgecontainerVpnConnection;
export const EdgecontainerVpnConnection: typeof import("./edgecontainerVpnConnection").EdgecontainerVpnConnection = null as any;
utilities.lazyLoad(exports, ["EdgecontainerVpnConnection"], () => require("./edgecontainerVpnConnection"));

export { EdgenetworkNetworkArgs, EdgenetworkNetworkState } from "./edgenetworkNetwork";
export type EdgenetworkNetwork = import("./edgenetworkNetwork").EdgenetworkNetwork;
export const EdgenetworkNetwork: typeof import("./edgenetworkNetwork").EdgenetworkNetwork = null as any;
utilities.lazyLoad(exports, ["EdgenetworkNetwork"], () => require("./edgenetworkNetwork"));

export { EdgenetworkSubnetArgs, EdgenetworkSubnetState } from "./edgenetworkSubnet";
export type EdgenetworkSubnet = import("./edgenetworkSubnet").EdgenetworkSubnet;
export const EdgenetworkSubnet: typeof import("./edgenetworkSubnet").EdgenetworkSubnet = null as any;
utilities.lazyLoad(exports, ["EdgenetworkSubnet"], () => require("./edgenetworkSubnet"));

export { EndpointsServiceArgs, EndpointsServiceState } from "./endpointsService";
export type EndpointsService = import("./endpointsService").EndpointsService;
export const EndpointsService: typeof import("./endpointsService").EndpointsService = null as any;
utilities.lazyLoad(exports, ["EndpointsService"], () => require("./endpointsService"));

export { EndpointsServiceConsumersIamBindingArgs, EndpointsServiceConsumersIamBindingState } from "./endpointsServiceConsumersIamBinding";
export type EndpointsServiceConsumersIamBinding = import("./endpointsServiceConsumersIamBinding").EndpointsServiceConsumersIamBinding;
export const EndpointsServiceConsumersIamBinding: typeof import("./endpointsServiceConsumersIamBinding").EndpointsServiceConsumersIamBinding = null as any;
utilities.lazyLoad(exports, ["EndpointsServiceConsumersIamBinding"], () => require("./endpointsServiceConsumersIamBinding"));

export { EndpointsServiceConsumersIamMemberArgs, EndpointsServiceConsumersIamMemberState } from "./endpointsServiceConsumersIamMember";
export type EndpointsServiceConsumersIamMember = import("./endpointsServiceConsumersIamMember").EndpointsServiceConsumersIamMember;
export const EndpointsServiceConsumersIamMember: typeof import("./endpointsServiceConsumersIamMember").EndpointsServiceConsumersIamMember = null as any;
utilities.lazyLoad(exports, ["EndpointsServiceConsumersIamMember"], () => require("./endpointsServiceConsumersIamMember"));

export { EndpointsServiceConsumersIamPolicyArgs, EndpointsServiceConsumersIamPolicyState } from "./endpointsServiceConsumersIamPolicy";
export type EndpointsServiceConsumersIamPolicy = import("./endpointsServiceConsumersIamPolicy").EndpointsServiceConsumersIamPolicy;
export const EndpointsServiceConsumersIamPolicy: typeof import("./endpointsServiceConsumersIamPolicy").EndpointsServiceConsumersIamPolicy = null as any;
utilities.lazyLoad(exports, ["EndpointsServiceConsumersIamPolicy"], () => require("./endpointsServiceConsumersIamPolicy"));

export { EndpointsServiceIamBindingArgs, EndpointsServiceIamBindingState } from "./endpointsServiceIamBinding";
export type EndpointsServiceIamBinding = import("./endpointsServiceIamBinding").EndpointsServiceIamBinding;
export const EndpointsServiceIamBinding: typeof import("./endpointsServiceIamBinding").EndpointsServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["EndpointsServiceIamBinding"], () => require("./endpointsServiceIamBinding"));

export { EndpointsServiceIamMemberArgs, EndpointsServiceIamMemberState } from "./endpointsServiceIamMember";
export type EndpointsServiceIamMember = import("./endpointsServiceIamMember").EndpointsServiceIamMember;
export const EndpointsServiceIamMember: typeof import("./endpointsServiceIamMember").EndpointsServiceIamMember = null as any;
utilities.lazyLoad(exports, ["EndpointsServiceIamMember"], () => require("./endpointsServiceIamMember"));

export { EndpointsServiceIamPolicyArgs, EndpointsServiceIamPolicyState } from "./endpointsServiceIamPolicy";
export type EndpointsServiceIamPolicy = import("./endpointsServiceIamPolicy").EndpointsServiceIamPolicy;
export const EndpointsServiceIamPolicy: typeof import("./endpointsServiceIamPolicy").EndpointsServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["EndpointsServiceIamPolicy"], () => require("./endpointsServiceIamPolicy"));

export { EssentialContactsContactArgs, EssentialContactsContactState } from "./essentialContactsContact";
export type EssentialContactsContact = import("./essentialContactsContact").EssentialContactsContact;
export const EssentialContactsContact: typeof import("./essentialContactsContact").EssentialContactsContact = null as any;
utilities.lazyLoad(exports, ["EssentialContactsContact"], () => require("./essentialContactsContact"));

export { EventarcChannelArgs, EventarcChannelState } from "./eventarcChannel";
export type EventarcChannel = import("./eventarcChannel").EventarcChannel;
export const EventarcChannel: typeof import("./eventarcChannel").EventarcChannel = null as any;
utilities.lazyLoad(exports, ["EventarcChannel"], () => require("./eventarcChannel"));

export { EventarcGoogleChannelConfigArgs, EventarcGoogleChannelConfigState } from "./eventarcGoogleChannelConfig";
export type EventarcGoogleChannelConfig = import("./eventarcGoogleChannelConfig").EventarcGoogleChannelConfig;
export const EventarcGoogleChannelConfig: typeof import("./eventarcGoogleChannelConfig").EventarcGoogleChannelConfig = null as any;
utilities.lazyLoad(exports, ["EventarcGoogleChannelConfig"], () => require("./eventarcGoogleChannelConfig"));

export { EventarcTriggerArgs, EventarcTriggerState } from "./eventarcTrigger";
export type EventarcTrigger = import("./eventarcTrigger").EventarcTrigger;
export const EventarcTrigger: typeof import("./eventarcTrigger").EventarcTrigger = null as any;
utilities.lazyLoad(exports, ["EventarcTrigger"], () => require("./eventarcTrigger"));

export { FilestoreBackupArgs, FilestoreBackupState } from "./filestoreBackup";
export type FilestoreBackup = import("./filestoreBackup").FilestoreBackup;
export const FilestoreBackup: typeof import("./filestoreBackup").FilestoreBackup = null as any;
utilities.lazyLoad(exports, ["FilestoreBackup"], () => require("./filestoreBackup"));

export { FilestoreInstanceArgs, FilestoreInstanceState } from "./filestoreInstance";
export type FilestoreInstance = import("./filestoreInstance").FilestoreInstance;
export const FilestoreInstance: typeof import("./filestoreInstance").FilestoreInstance = null as any;
utilities.lazyLoad(exports, ["FilestoreInstance"], () => require("./filestoreInstance"));

export { FilestoreSnapshotArgs, FilestoreSnapshotState } from "./filestoreSnapshot";
export type FilestoreSnapshot = import("./filestoreSnapshot").FilestoreSnapshot;
export const FilestoreSnapshot: typeof import("./filestoreSnapshot").FilestoreSnapshot = null as any;
utilities.lazyLoad(exports, ["FilestoreSnapshot"], () => require("./filestoreSnapshot"));

export { FirebaseAndroidAppArgs, FirebaseAndroidAppState } from "./firebaseAndroidApp";
export type FirebaseAndroidApp = import("./firebaseAndroidApp").FirebaseAndroidApp;
export const FirebaseAndroidApp: typeof import("./firebaseAndroidApp").FirebaseAndroidApp = null as any;
utilities.lazyLoad(exports, ["FirebaseAndroidApp"], () => require("./firebaseAndroidApp"));

export { FirebaseAppCheckAppAttestConfigArgs, FirebaseAppCheckAppAttestConfigState } from "./firebaseAppCheckAppAttestConfig";
export type FirebaseAppCheckAppAttestConfig = import("./firebaseAppCheckAppAttestConfig").FirebaseAppCheckAppAttestConfig;
export const FirebaseAppCheckAppAttestConfig: typeof import("./firebaseAppCheckAppAttestConfig").FirebaseAppCheckAppAttestConfig = null as any;
utilities.lazyLoad(exports, ["FirebaseAppCheckAppAttestConfig"], () => require("./firebaseAppCheckAppAttestConfig"));

export { FirebaseAppCheckDebugTokenArgs, FirebaseAppCheckDebugTokenState } from "./firebaseAppCheckDebugToken";
export type FirebaseAppCheckDebugToken = import("./firebaseAppCheckDebugToken").FirebaseAppCheckDebugToken;
export const FirebaseAppCheckDebugToken: typeof import("./firebaseAppCheckDebugToken").FirebaseAppCheckDebugToken = null as any;
utilities.lazyLoad(exports, ["FirebaseAppCheckDebugToken"], () => require("./firebaseAppCheckDebugToken"));

export { FirebaseAppCheckDeviceCheckConfigArgs, FirebaseAppCheckDeviceCheckConfigState } from "./firebaseAppCheckDeviceCheckConfig";
export type FirebaseAppCheckDeviceCheckConfig = import("./firebaseAppCheckDeviceCheckConfig").FirebaseAppCheckDeviceCheckConfig;
export const FirebaseAppCheckDeviceCheckConfig: typeof import("./firebaseAppCheckDeviceCheckConfig").FirebaseAppCheckDeviceCheckConfig = null as any;
utilities.lazyLoad(exports, ["FirebaseAppCheckDeviceCheckConfig"], () => require("./firebaseAppCheckDeviceCheckConfig"));

export { FirebaseAppCheckPlayIntegrityConfigArgs, FirebaseAppCheckPlayIntegrityConfigState } from "./firebaseAppCheckPlayIntegrityConfig";
export type FirebaseAppCheckPlayIntegrityConfig = import("./firebaseAppCheckPlayIntegrityConfig").FirebaseAppCheckPlayIntegrityConfig;
export const FirebaseAppCheckPlayIntegrityConfig: typeof import("./firebaseAppCheckPlayIntegrityConfig").FirebaseAppCheckPlayIntegrityConfig = null as any;
utilities.lazyLoad(exports, ["FirebaseAppCheckPlayIntegrityConfig"], () => require("./firebaseAppCheckPlayIntegrityConfig"));

export { FirebaseAppCheckRecaptchaEnterpriseConfigArgs, FirebaseAppCheckRecaptchaEnterpriseConfigState } from "./firebaseAppCheckRecaptchaEnterpriseConfig";
export type FirebaseAppCheckRecaptchaEnterpriseConfig = import("./firebaseAppCheckRecaptchaEnterpriseConfig").FirebaseAppCheckRecaptchaEnterpriseConfig;
export const FirebaseAppCheckRecaptchaEnterpriseConfig: typeof import("./firebaseAppCheckRecaptchaEnterpriseConfig").FirebaseAppCheckRecaptchaEnterpriseConfig = null as any;
utilities.lazyLoad(exports, ["FirebaseAppCheckRecaptchaEnterpriseConfig"], () => require("./firebaseAppCheckRecaptchaEnterpriseConfig"));

export { FirebaseAppCheckRecaptchaV3ConfigArgs, FirebaseAppCheckRecaptchaV3ConfigState } from "./firebaseAppCheckRecaptchaV3Config";
export type FirebaseAppCheckRecaptchaV3Config = import("./firebaseAppCheckRecaptchaV3Config").FirebaseAppCheckRecaptchaV3Config;
export const FirebaseAppCheckRecaptchaV3Config: typeof import("./firebaseAppCheckRecaptchaV3Config").FirebaseAppCheckRecaptchaV3Config = null as any;
utilities.lazyLoad(exports, ["FirebaseAppCheckRecaptchaV3Config"], () => require("./firebaseAppCheckRecaptchaV3Config"));

export { FirebaseAppCheckServiceConfigArgs, FirebaseAppCheckServiceConfigState } from "./firebaseAppCheckServiceConfig";
export type FirebaseAppCheckServiceConfig = import("./firebaseAppCheckServiceConfig").FirebaseAppCheckServiceConfig;
export const FirebaseAppCheckServiceConfig: typeof import("./firebaseAppCheckServiceConfig").FirebaseAppCheckServiceConfig = null as any;
utilities.lazyLoad(exports, ["FirebaseAppCheckServiceConfig"], () => require("./firebaseAppCheckServiceConfig"));

export { FirebaseAppleAppArgs, FirebaseAppleAppState } from "./firebaseAppleApp";
export type FirebaseAppleApp = import("./firebaseAppleApp").FirebaseAppleApp;
export const FirebaseAppleApp: typeof import("./firebaseAppleApp").FirebaseAppleApp = null as any;
utilities.lazyLoad(exports, ["FirebaseAppleApp"], () => require("./firebaseAppleApp"));

export { FirebaseDatabaseInstanceArgs, FirebaseDatabaseInstanceState } from "./firebaseDatabaseInstance";
export type FirebaseDatabaseInstance = import("./firebaseDatabaseInstance").FirebaseDatabaseInstance;
export const FirebaseDatabaseInstance: typeof import("./firebaseDatabaseInstance").FirebaseDatabaseInstance = null as any;
utilities.lazyLoad(exports, ["FirebaseDatabaseInstance"], () => require("./firebaseDatabaseInstance"));

export { FirebaseExtensionsInstanceArgs, FirebaseExtensionsInstanceState } from "./firebaseExtensionsInstance";
export type FirebaseExtensionsInstance = import("./firebaseExtensionsInstance").FirebaseExtensionsInstance;
export const FirebaseExtensionsInstance: typeof import("./firebaseExtensionsInstance").FirebaseExtensionsInstance = null as any;
utilities.lazyLoad(exports, ["FirebaseExtensionsInstance"], () => require("./firebaseExtensionsInstance"));

export { FirebaseHostingChannelArgs, FirebaseHostingChannelState } from "./firebaseHostingChannel";
export type FirebaseHostingChannel = import("./firebaseHostingChannel").FirebaseHostingChannel;
export const FirebaseHostingChannel: typeof import("./firebaseHostingChannel").FirebaseHostingChannel = null as any;
utilities.lazyLoad(exports, ["FirebaseHostingChannel"], () => require("./firebaseHostingChannel"));

export { FirebaseHostingCustomDomainArgs, FirebaseHostingCustomDomainState } from "./firebaseHostingCustomDomain";
export type FirebaseHostingCustomDomain = import("./firebaseHostingCustomDomain").FirebaseHostingCustomDomain;
export const FirebaseHostingCustomDomain: typeof import("./firebaseHostingCustomDomain").FirebaseHostingCustomDomain = null as any;
utilities.lazyLoad(exports, ["FirebaseHostingCustomDomain"], () => require("./firebaseHostingCustomDomain"));

export { FirebaseHostingReleaseArgs, FirebaseHostingReleaseState } from "./firebaseHostingRelease";
export type FirebaseHostingRelease = import("./firebaseHostingRelease").FirebaseHostingRelease;
export const FirebaseHostingRelease: typeof import("./firebaseHostingRelease").FirebaseHostingRelease = null as any;
utilities.lazyLoad(exports, ["FirebaseHostingRelease"], () => require("./firebaseHostingRelease"));

export { FirebaseHostingSiteArgs, FirebaseHostingSiteState } from "./firebaseHostingSite";
export type FirebaseHostingSite = import("./firebaseHostingSite").FirebaseHostingSite;
export const FirebaseHostingSite: typeof import("./firebaseHostingSite").FirebaseHostingSite = null as any;
utilities.lazyLoad(exports, ["FirebaseHostingSite"], () => require("./firebaseHostingSite"));

export { FirebaseHostingVersionArgs, FirebaseHostingVersionState } from "./firebaseHostingVersion";
export type FirebaseHostingVersion = import("./firebaseHostingVersion").FirebaseHostingVersion;
export const FirebaseHostingVersion: typeof import("./firebaseHostingVersion").FirebaseHostingVersion = null as any;
utilities.lazyLoad(exports, ["FirebaseHostingVersion"], () => require("./firebaseHostingVersion"));

export { FirebaseProjectArgs, FirebaseProjectState } from "./firebaseProject";
export type FirebaseProject = import("./firebaseProject").FirebaseProject;
export const FirebaseProject: typeof import("./firebaseProject").FirebaseProject = null as any;
utilities.lazyLoad(exports, ["FirebaseProject"], () => require("./firebaseProject"));

export { FirebaseStorageBucketArgs, FirebaseStorageBucketState } from "./firebaseStorageBucket";
export type FirebaseStorageBucket = import("./firebaseStorageBucket").FirebaseStorageBucket;
export const FirebaseStorageBucket: typeof import("./firebaseStorageBucket").FirebaseStorageBucket = null as any;
utilities.lazyLoad(exports, ["FirebaseStorageBucket"], () => require("./firebaseStorageBucket"));

export { FirebaseWebAppArgs, FirebaseWebAppState } from "./firebaseWebApp";
export type FirebaseWebApp = import("./firebaseWebApp").FirebaseWebApp;
export const FirebaseWebApp: typeof import("./firebaseWebApp").FirebaseWebApp = null as any;
utilities.lazyLoad(exports, ["FirebaseWebApp"], () => require("./firebaseWebApp"));

export { FirebaserulesReleaseArgs, FirebaserulesReleaseState } from "./firebaserulesRelease";
export type FirebaserulesRelease = import("./firebaserulesRelease").FirebaserulesRelease;
export const FirebaserulesRelease: typeof import("./firebaserulesRelease").FirebaserulesRelease = null as any;
utilities.lazyLoad(exports, ["FirebaserulesRelease"], () => require("./firebaserulesRelease"));

export { FirebaserulesRulesetArgs, FirebaserulesRulesetState } from "./firebaserulesRuleset";
export type FirebaserulesRuleset = import("./firebaserulesRuleset").FirebaserulesRuleset;
export const FirebaserulesRuleset: typeof import("./firebaserulesRuleset").FirebaserulesRuleset = null as any;
utilities.lazyLoad(exports, ["FirebaserulesRuleset"], () => require("./firebaserulesRuleset"));

export { FirestoreBackupScheduleArgs, FirestoreBackupScheduleState } from "./firestoreBackupSchedule";
export type FirestoreBackupSchedule = import("./firestoreBackupSchedule").FirestoreBackupSchedule;
export const FirestoreBackupSchedule: typeof import("./firestoreBackupSchedule").FirestoreBackupSchedule = null as any;
utilities.lazyLoad(exports, ["FirestoreBackupSchedule"], () => require("./firestoreBackupSchedule"));

export { FirestoreDatabaseArgs, FirestoreDatabaseState } from "./firestoreDatabase";
export type FirestoreDatabase = import("./firestoreDatabase").FirestoreDatabase;
export const FirestoreDatabase: typeof import("./firestoreDatabase").FirestoreDatabase = null as any;
utilities.lazyLoad(exports, ["FirestoreDatabase"], () => require("./firestoreDatabase"));

export { FirestoreDocumentArgs, FirestoreDocumentState } from "./firestoreDocument";
export type FirestoreDocument = import("./firestoreDocument").FirestoreDocument;
export const FirestoreDocument: typeof import("./firestoreDocument").FirestoreDocument = null as any;
utilities.lazyLoad(exports, ["FirestoreDocument"], () => require("./firestoreDocument"));

export { FirestoreFieldArgs, FirestoreFieldState } from "./firestoreField";
export type FirestoreField = import("./firestoreField").FirestoreField;
export const FirestoreField: typeof import("./firestoreField").FirestoreField = null as any;
utilities.lazyLoad(exports, ["FirestoreField"], () => require("./firestoreField"));

export { FirestoreIndexArgs, FirestoreIndexState } from "./firestoreIndex";
export type FirestoreIndex = import("./firestoreIndex").FirestoreIndex;
export const FirestoreIndex: typeof import("./firestoreIndex").FirestoreIndex = null as any;
utilities.lazyLoad(exports, ["FirestoreIndex"], () => require("./firestoreIndex"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { FolderAccessApprovalSettingsArgs, FolderAccessApprovalSettingsState } from "./folderAccessApprovalSettings";
export type FolderAccessApprovalSettings = import("./folderAccessApprovalSettings").FolderAccessApprovalSettings;
export const FolderAccessApprovalSettings: typeof import("./folderAccessApprovalSettings").FolderAccessApprovalSettings = null as any;
utilities.lazyLoad(exports, ["FolderAccessApprovalSettings"], () => require("./folderAccessApprovalSettings"));

export { FolderIamAuditConfigArgs, FolderIamAuditConfigState } from "./folderIamAuditConfig";
export type FolderIamAuditConfig = import("./folderIamAuditConfig").FolderIamAuditConfig;
export const FolderIamAuditConfig: typeof import("./folderIamAuditConfig").FolderIamAuditConfig = null as any;
utilities.lazyLoad(exports, ["FolderIamAuditConfig"], () => require("./folderIamAuditConfig"));

export { FolderIamBindingArgs, FolderIamBindingState } from "./folderIamBinding";
export type FolderIamBinding = import("./folderIamBinding").FolderIamBinding;
export const FolderIamBinding: typeof import("./folderIamBinding").FolderIamBinding = null as any;
utilities.lazyLoad(exports, ["FolderIamBinding"], () => require("./folderIamBinding"));

export { FolderIamMemberArgs, FolderIamMemberState } from "./folderIamMember";
export type FolderIamMember = import("./folderIamMember").FolderIamMember;
export const FolderIamMember: typeof import("./folderIamMember").FolderIamMember = null as any;
utilities.lazyLoad(exports, ["FolderIamMember"], () => require("./folderIamMember"));

export { FolderIamPolicyArgs, FolderIamPolicyState } from "./folderIamPolicy";
export type FolderIamPolicy = import("./folderIamPolicy").FolderIamPolicy;
export const FolderIamPolicy: typeof import("./folderIamPolicy").FolderIamPolicy = null as any;
utilities.lazyLoad(exports, ["FolderIamPolicy"], () => require("./folderIamPolicy"));

export { FolderOrganizationPolicyArgs, FolderOrganizationPolicyState } from "./folderOrganizationPolicy";
export type FolderOrganizationPolicy = import("./folderOrganizationPolicy").FolderOrganizationPolicy;
export const FolderOrganizationPolicy: typeof import("./folderOrganizationPolicy").FolderOrganizationPolicy = null as any;
utilities.lazyLoad(exports, ["FolderOrganizationPolicy"], () => require("./folderOrganizationPolicy"));

export { GetAccessApprovalFolderServiceAccountArgs, GetAccessApprovalFolderServiceAccountResult, GetAccessApprovalFolderServiceAccountOutputArgs } from "./getAccessApprovalFolderServiceAccount";
export const getAccessApprovalFolderServiceAccount: typeof import("./getAccessApprovalFolderServiceAccount").getAccessApprovalFolderServiceAccount = null as any;
export const getAccessApprovalFolderServiceAccountOutput: typeof import("./getAccessApprovalFolderServiceAccount").getAccessApprovalFolderServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccessApprovalFolderServiceAccount","getAccessApprovalFolderServiceAccountOutput"], () => require("./getAccessApprovalFolderServiceAccount"));

export { GetAccessApprovalOrganizationServiceAccountArgs, GetAccessApprovalOrganizationServiceAccountResult, GetAccessApprovalOrganizationServiceAccountOutputArgs } from "./getAccessApprovalOrganizationServiceAccount";
export const getAccessApprovalOrganizationServiceAccount: typeof import("./getAccessApprovalOrganizationServiceAccount").getAccessApprovalOrganizationServiceAccount = null as any;
export const getAccessApprovalOrganizationServiceAccountOutput: typeof import("./getAccessApprovalOrganizationServiceAccount").getAccessApprovalOrganizationServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccessApprovalOrganizationServiceAccount","getAccessApprovalOrganizationServiceAccountOutput"], () => require("./getAccessApprovalOrganizationServiceAccount"));

export { GetAccessApprovalProjectServiceAccountArgs, GetAccessApprovalProjectServiceAccountResult, GetAccessApprovalProjectServiceAccountOutputArgs } from "./getAccessApprovalProjectServiceAccount";
export const getAccessApprovalProjectServiceAccount: typeof import("./getAccessApprovalProjectServiceAccount").getAccessApprovalProjectServiceAccount = null as any;
export const getAccessApprovalProjectServiceAccountOutput: typeof import("./getAccessApprovalProjectServiceAccount").getAccessApprovalProjectServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccessApprovalProjectServiceAccount","getAccessApprovalProjectServiceAccountOutput"], () => require("./getAccessApprovalProjectServiceAccount"));

export { GetAccessContextManagerAccessPolicyIamPolicyArgs, GetAccessContextManagerAccessPolicyIamPolicyResult, GetAccessContextManagerAccessPolicyIamPolicyOutputArgs } from "./getAccessContextManagerAccessPolicyIamPolicy";
export const getAccessContextManagerAccessPolicyIamPolicy: typeof import("./getAccessContextManagerAccessPolicyIamPolicy").getAccessContextManagerAccessPolicyIamPolicy = null as any;
export const getAccessContextManagerAccessPolicyIamPolicyOutput: typeof import("./getAccessContextManagerAccessPolicyIamPolicy").getAccessContextManagerAccessPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAccessContextManagerAccessPolicyIamPolicy","getAccessContextManagerAccessPolicyIamPolicyOutput"], () => require("./getAccessContextManagerAccessPolicyIamPolicy"));

export { GetActiveFolderArgs, GetActiveFolderResult, GetActiveFolderOutputArgs } from "./getActiveFolder";
export const getActiveFolder: typeof import("./getActiveFolder").getActiveFolder = null as any;
export const getActiveFolderOutput: typeof import("./getActiveFolder").getActiveFolderOutput = null as any;
utilities.lazyLoad(exports, ["getActiveFolder","getActiveFolderOutput"], () => require("./getActiveFolder"));

export { GetAlloydbLocationsArgs, GetAlloydbLocationsResult, GetAlloydbLocationsOutputArgs } from "./getAlloydbLocations";
export const getAlloydbLocations: typeof import("./getAlloydbLocations").getAlloydbLocations = null as any;
export const getAlloydbLocationsOutput: typeof import("./getAlloydbLocations").getAlloydbLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getAlloydbLocations","getAlloydbLocationsOutput"], () => require("./getAlloydbLocations"));

export { GetAlloydbSupportedDatabaseFlagsArgs, GetAlloydbSupportedDatabaseFlagsResult, GetAlloydbSupportedDatabaseFlagsOutputArgs } from "./getAlloydbSupportedDatabaseFlags";
export const getAlloydbSupportedDatabaseFlags: typeof import("./getAlloydbSupportedDatabaseFlags").getAlloydbSupportedDatabaseFlags = null as any;
export const getAlloydbSupportedDatabaseFlagsOutput: typeof import("./getAlloydbSupportedDatabaseFlags").getAlloydbSupportedDatabaseFlagsOutput = null as any;
utilities.lazyLoad(exports, ["getAlloydbSupportedDatabaseFlags","getAlloydbSupportedDatabaseFlagsOutput"], () => require("./getAlloydbSupportedDatabaseFlags"));

export { GetApiGatewayApiConfigIamPolicyArgs, GetApiGatewayApiConfigIamPolicyResult, GetApiGatewayApiConfigIamPolicyOutputArgs } from "./getApiGatewayApiConfigIamPolicy";
export const getApiGatewayApiConfigIamPolicy: typeof import("./getApiGatewayApiConfigIamPolicy").getApiGatewayApiConfigIamPolicy = null as any;
export const getApiGatewayApiConfigIamPolicyOutput: typeof import("./getApiGatewayApiConfigIamPolicy").getApiGatewayApiConfigIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApiConfigIamPolicy","getApiGatewayApiConfigIamPolicyOutput"], () => require("./getApiGatewayApiConfigIamPolicy"));

export { GetApiGatewayApiIamPolicyArgs, GetApiGatewayApiIamPolicyResult, GetApiGatewayApiIamPolicyOutputArgs } from "./getApiGatewayApiIamPolicy";
export const getApiGatewayApiIamPolicy: typeof import("./getApiGatewayApiIamPolicy").getApiGatewayApiIamPolicy = null as any;
export const getApiGatewayApiIamPolicyOutput: typeof import("./getApiGatewayApiIamPolicy").getApiGatewayApiIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApiIamPolicy","getApiGatewayApiIamPolicyOutput"], () => require("./getApiGatewayApiIamPolicy"));

export { GetApiGatewayGatewayIamPolicyArgs, GetApiGatewayGatewayIamPolicyResult, GetApiGatewayGatewayIamPolicyOutputArgs } from "./getApiGatewayGatewayIamPolicy";
export const getApiGatewayGatewayIamPolicy: typeof import("./getApiGatewayGatewayIamPolicy").getApiGatewayGatewayIamPolicy = null as any;
export const getApiGatewayGatewayIamPolicyOutput: typeof import("./getApiGatewayGatewayIamPolicy").getApiGatewayGatewayIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayGatewayIamPolicy","getApiGatewayGatewayIamPolicyOutput"], () => require("./getApiGatewayGatewayIamPolicy"));

export { GetApigeeEnvironmentIamPolicyArgs, GetApigeeEnvironmentIamPolicyResult, GetApigeeEnvironmentIamPolicyOutputArgs } from "./getApigeeEnvironmentIamPolicy";
export const getApigeeEnvironmentIamPolicy: typeof import("./getApigeeEnvironmentIamPolicy").getApigeeEnvironmentIamPolicy = null as any;
export const getApigeeEnvironmentIamPolicyOutput: typeof import("./getApigeeEnvironmentIamPolicy").getApigeeEnvironmentIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApigeeEnvironmentIamPolicy","getApigeeEnvironmentIamPolicyOutput"], () => require("./getApigeeEnvironmentIamPolicy"));

export { GetAppEngineDefaultServiceAccountArgs, GetAppEngineDefaultServiceAccountResult, GetAppEngineDefaultServiceAccountOutputArgs } from "./getAppEngineDefaultServiceAccount";
export const getAppEngineDefaultServiceAccount: typeof import("./getAppEngineDefaultServiceAccount").getAppEngineDefaultServiceAccount = null as any;
export const getAppEngineDefaultServiceAccountOutput: typeof import("./getAppEngineDefaultServiceAccount").getAppEngineDefaultServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAppEngineDefaultServiceAccount","getAppEngineDefaultServiceAccountOutput"], () => require("./getAppEngineDefaultServiceAccount"));

export { GetApphubApplicationArgs, GetApphubApplicationResult, GetApphubApplicationOutputArgs } from "./getApphubApplication";
export const getApphubApplication: typeof import("./getApphubApplication").getApphubApplication = null as any;
export const getApphubApplicationOutput: typeof import("./getApphubApplication").getApphubApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApphubApplication","getApphubApplicationOutput"], () => require("./getApphubApplication"));

export { GetApphubDiscoveredServiceArgs, GetApphubDiscoveredServiceResult, GetApphubDiscoveredServiceOutputArgs } from "./getApphubDiscoveredService";
export const getApphubDiscoveredService: typeof import("./getApphubDiscoveredService").getApphubDiscoveredService = null as any;
export const getApphubDiscoveredServiceOutput: typeof import("./getApphubDiscoveredService").getApphubDiscoveredServiceOutput = null as any;
utilities.lazyLoad(exports, ["getApphubDiscoveredService","getApphubDiscoveredServiceOutput"], () => require("./getApphubDiscoveredService"));

export { GetApphubDiscoveredWorkloadArgs, GetApphubDiscoveredWorkloadResult, GetApphubDiscoveredWorkloadOutputArgs } from "./getApphubDiscoveredWorkload";
export const getApphubDiscoveredWorkload: typeof import("./getApphubDiscoveredWorkload").getApphubDiscoveredWorkload = null as any;
export const getApphubDiscoveredWorkloadOutput: typeof import("./getApphubDiscoveredWorkload").getApphubDiscoveredWorkloadOutput = null as any;
utilities.lazyLoad(exports, ["getApphubDiscoveredWorkload","getApphubDiscoveredWorkloadOutput"], () => require("./getApphubDiscoveredWorkload"));

export { GetArtifactRegistryDockerImageArgs, GetArtifactRegistryDockerImageResult, GetArtifactRegistryDockerImageOutputArgs } from "./getArtifactRegistryDockerImage";
export const getArtifactRegistryDockerImage: typeof import("./getArtifactRegistryDockerImage").getArtifactRegistryDockerImage = null as any;
export const getArtifactRegistryDockerImageOutput: typeof import("./getArtifactRegistryDockerImage").getArtifactRegistryDockerImageOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactRegistryDockerImage","getArtifactRegistryDockerImageOutput"], () => require("./getArtifactRegistryDockerImage"));

export { GetArtifactRegistryLocationsArgs, GetArtifactRegistryLocationsResult, GetArtifactRegistryLocationsOutputArgs } from "./getArtifactRegistryLocations";
export const getArtifactRegistryLocations: typeof import("./getArtifactRegistryLocations").getArtifactRegistryLocations = null as any;
export const getArtifactRegistryLocationsOutput: typeof import("./getArtifactRegistryLocations").getArtifactRegistryLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactRegistryLocations","getArtifactRegistryLocationsOutput"], () => require("./getArtifactRegistryLocations"));

export { GetArtifactRegistryRepositoryArgs, GetArtifactRegistryRepositoryResult, GetArtifactRegistryRepositoryOutputArgs } from "./getArtifactRegistryRepository";
export const getArtifactRegistryRepository: typeof import("./getArtifactRegistryRepository").getArtifactRegistryRepository = null as any;
export const getArtifactRegistryRepositoryOutput: typeof import("./getArtifactRegistryRepository").getArtifactRegistryRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactRegistryRepository","getArtifactRegistryRepositoryOutput"], () => require("./getArtifactRegistryRepository"));

export { GetArtifactRegistryRepositoryIamPolicyArgs, GetArtifactRegistryRepositoryIamPolicyResult, GetArtifactRegistryRepositoryIamPolicyOutputArgs } from "./getArtifactRegistryRepositoryIamPolicy";
export const getArtifactRegistryRepositoryIamPolicy: typeof import("./getArtifactRegistryRepositoryIamPolicy").getArtifactRegistryRepositoryIamPolicy = null as any;
export const getArtifactRegistryRepositoryIamPolicyOutput: typeof import("./getArtifactRegistryRepositoryIamPolicy").getArtifactRegistryRepositoryIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactRegistryRepositoryIamPolicy","getArtifactRegistryRepositoryIamPolicyOutput"], () => require("./getArtifactRegistryRepositoryIamPolicy"));

export { GetBackupDrManagementServerArgs, GetBackupDrManagementServerResult, GetBackupDrManagementServerOutputArgs } from "./getBackupDrManagementServer";
export const getBackupDrManagementServer: typeof import("./getBackupDrManagementServer").getBackupDrManagementServer = null as any;
export const getBackupDrManagementServerOutput: typeof import("./getBackupDrManagementServer").getBackupDrManagementServerOutput = null as any;
utilities.lazyLoad(exports, ["getBackupDrManagementServer","getBackupDrManagementServerOutput"], () => require("./getBackupDrManagementServer"));

export { GetBeyondcorpAppConnectionArgs, GetBeyondcorpAppConnectionResult, GetBeyondcorpAppConnectionOutputArgs } from "./getBeyondcorpAppConnection";
export const getBeyondcorpAppConnection: typeof import("./getBeyondcorpAppConnection").getBeyondcorpAppConnection = null as any;
export const getBeyondcorpAppConnectionOutput: typeof import("./getBeyondcorpAppConnection").getBeyondcorpAppConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getBeyondcorpAppConnection","getBeyondcorpAppConnectionOutput"], () => require("./getBeyondcorpAppConnection"));

export { GetBeyondcorpAppConnectorArgs, GetBeyondcorpAppConnectorResult, GetBeyondcorpAppConnectorOutputArgs } from "./getBeyondcorpAppConnector";
export const getBeyondcorpAppConnector: typeof import("./getBeyondcorpAppConnector").getBeyondcorpAppConnector = null as any;
export const getBeyondcorpAppConnectorOutput: typeof import("./getBeyondcorpAppConnector").getBeyondcorpAppConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getBeyondcorpAppConnector","getBeyondcorpAppConnectorOutput"], () => require("./getBeyondcorpAppConnector"));

export { GetBeyondcorpAppGatewayArgs, GetBeyondcorpAppGatewayResult, GetBeyondcorpAppGatewayOutputArgs } from "./getBeyondcorpAppGateway";
export const getBeyondcorpAppGateway: typeof import("./getBeyondcorpAppGateway").getBeyondcorpAppGateway = null as any;
export const getBeyondcorpAppGatewayOutput: typeof import("./getBeyondcorpAppGateway").getBeyondcorpAppGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getBeyondcorpAppGateway","getBeyondcorpAppGatewayOutput"], () => require("./getBeyondcorpAppGateway"));

export { GetBigqueryAnalyticsHubDataExchangeIamPolicyArgs, GetBigqueryAnalyticsHubDataExchangeIamPolicyResult, GetBigqueryAnalyticsHubDataExchangeIamPolicyOutputArgs } from "./getBigqueryAnalyticsHubDataExchangeIamPolicy";
export const getBigqueryAnalyticsHubDataExchangeIamPolicy: typeof import("./getBigqueryAnalyticsHubDataExchangeIamPolicy").getBigqueryAnalyticsHubDataExchangeIamPolicy = null as any;
export const getBigqueryAnalyticsHubDataExchangeIamPolicyOutput: typeof import("./getBigqueryAnalyticsHubDataExchangeIamPolicy").getBigqueryAnalyticsHubDataExchangeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBigqueryAnalyticsHubDataExchangeIamPolicy","getBigqueryAnalyticsHubDataExchangeIamPolicyOutput"], () => require("./getBigqueryAnalyticsHubDataExchangeIamPolicy"));

export { GetBigqueryAnalyticsHubListingIamPolicyArgs, GetBigqueryAnalyticsHubListingIamPolicyResult, GetBigqueryAnalyticsHubListingIamPolicyOutputArgs } from "./getBigqueryAnalyticsHubListingIamPolicy";
export const getBigqueryAnalyticsHubListingIamPolicy: typeof import("./getBigqueryAnalyticsHubListingIamPolicy").getBigqueryAnalyticsHubListingIamPolicy = null as any;
export const getBigqueryAnalyticsHubListingIamPolicyOutput: typeof import("./getBigqueryAnalyticsHubListingIamPolicy").getBigqueryAnalyticsHubListingIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBigqueryAnalyticsHubListingIamPolicy","getBigqueryAnalyticsHubListingIamPolicyOutput"], () => require("./getBigqueryAnalyticsHubListingIamPolicy"));

export { GetBigqueryConnectionIamPolicyArgs, GetBigqueryConnectionIamPolicyResult, GetBigqueryConnectionIamPolicyOutputArgs } from "./getBigqueryConnectionIamPolicy";
export const getBigqueryConnectionIamPolicy: typeof import("./getBigqueryConnectionIamPolicy").getBigqueryConnectionIamPolicy = null as any;
export const getBigqueryConnectionIamPolicyOutput: typeof import("./getBigqueryConnectionIamPolicy").getBigqueryConnectionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBigqueryConnectionIamPolicy","getBigqueryConnectionIamPolicyOutput"], () => require("./getBigqueryConnectionIamPolicy"));

export { GetBigqueryDatapolicyDataPolicyIamPolicyArgs, GetBigqueryDatapolicyDataPolicyIamPolicyResult, GetBigqueryDatapolicyDataPolicyIamPolicyOutputArgs } from "./getBigqueryDatapolicyDataPolicyIamPolicy";
export const getBigqueryDatapolicyDataPolicyIamPolicy: typeof import("./getBigqueryDatapolicyDataPolicyIamPolicy").getBigqueryDatapolicyDataPolicyIamPolicy = null as any;
export const getBigqueryDatapolicyDataPolicyIamPolicyOutput: typeof import("./getBigqueryDatapolicyDataPolicyIamPolicy").getBigqueryDatapolicyDataPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBigqueryDatapolicyDataPolicyIamPolicy","getBigqueryDatapolicyDataPolicyIamPolicyOutput"], () => require("./getBigqueryDatapolicyDataPolicyIamPolicy"));

export { GetBigqueryDatasetArgs, GetBigqueryDatasetResult, GetBigqueryDatasetOutputArgs } from "./getBigqueryDataset";
export const getBigqueryDataset: typeof import("./getBigqueryDataset").getBigqueryDataset = null as any;
export const getBigqueryDatasetOutput: typeof import("./getBigqueryDataset").getBigqueryDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getBigqueryDataset","getBigqueryDatasetOutput"], () => require("./getBigqueryDataset"));

export { GetBigqueryDatasetIamPolicyArgs, GetBigqueryDatasetIamPolicyResult, GetBigqueryDatasetIamPolicyOutputArgs } from "./getBigqueryDatasetIamPolicy";
export const getBigqueryDatasetIamPolicy: typeof import("./getBigqueryDatasetIamPolicy").getBigqueryDatasetIamPolicy = null as any;
export const getBigqueryDatasetIamPolicyOutput: typeof import("./getBigqueryDatasetIamPolicy").getBigqueryDatasetIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBigqueryDatasetIamPolicy","getBigqueryDatasetIamPolicyOutput"], () => require("./getBigqueryDatasetIamPolicy"));

export { GetBigqueryDefaultServiceAccountArgs, GetBigqueryDefaultServiceAccountResult, GetBigqueryDefaultServiceAccountOutputArgs } from "./getBigqueryDefaultServiceAccount";
export const getBigqueryDefaultServiceAccount: typeof import("./getBigqueryDefaultServiceAccount").getBigqueryDefaultServiceAccount = null as any;
export const getBigqueryDefaultServiceAccountOutput: typeof import("./getBigqueryDefaultServiceAccount").getBigqueryDefaultServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getBigqueryDefaultServiceAccount","getBigqueryDefaultServiceAccountOutput"], () => require("./getBigqueryDefaultServiceAccount"));

export { GetBigqueryTableIamPolicyArgs, GetBigqueryTableIamPolicyResult, GetBigqueryTableIamPolicyOutputArgs } from "./getBigqueryTableIamPolicy";
export const getBigqueryTableIamPolicy: typeof import("./getBigqueryTableIamPolicy").getBigqueryTableIamPolicy = null as any;
export const getBigqueryTableIamPolicyOutput: typeof import("./getBigqueryTableIamPolicy").getBigqueryTableIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBigqueryTableIamPolicy","getBigqueryTableIamPolicyOutput"], () => require("./getBigqueryTableIamPolicy"));

export { GetBigtableInstanceIamPolicyArgs, GetBigtableInstanceIamPolicyResult, GetBigtableInstanceIamPolicyOutputArgs } from "./getBigtableInstanceIamPolicy";
export const getBigtableInstanceIamPolicy: typeof import("./getBigtableInstanceIamPolicy").getBigtableInstanceIamPolicy = null as any;
export const getBigtableInstanceIamPolicyOutput: typeof import("./getBigtableInstanceIamPolicy").getBigtableInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBigtableInstanceIamPolicy","getBigtableInstanceIamPolicyOutput"], () => require("./getBigtableInstanceIamPolicy"));

export { GetBigtableTableIamPolicyArgs, GetBigtableTableIamPolicyResult, GetBigtableTableIamPolicyOutputArgs } from "./getBigtableTableIamPolicy";
export const getBigtableTableIamPolicy: typeof import("./getBigtableTableIamPolicy").getBigtableTableIamPolicy = null as any;
export const getBigtableTableIamPolicyOutput: typeof import("./getBigtableTableIamPolicy").getBigtableTableIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBigtableTableIamPolicy","getBigtableTableIamPolicyOutput"], () => require("./getBigtableTableIamPolicy"));

export { GetBillingAccountArgs, GetBillingAccountResult, GetBillingAccountOutputArgs } from "./getBillingAccount";
export const getBillingAccount: typeof import("./getBillingAccount").getBillingAccount = null as any;
export const getBillingAccountOutput: typeof import("./getBillingAccount").getBillingAccountOutput = null as any;
utilities.lazyLoad(exports, ["getBillingAccount","getBillingAccountOutput"], () => require("./getBillingAccount"));

export { GetBillingAccountIamPolicyArgs, GetBillingAccountIamPolicyResult, GetBillingAccountIamPolicyOutputArgs } from "./getBillingAccountIamPolicy";
export const getBillingAccountIamPolicy: typeof import("./getBillingAccountIamPolicy").getBillingAccountIamPolicy = null as any;
export const getBillingAccountIamPolicyOutput: typeof import("./getBillingAccountIamPolicy").getBillingAccountIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBillingAccountIamPolicy","getBillingAccountIamPolicyOutput"], () => require("./getBillingAccountIamPolicy"));

export { GetBinaryAuthorizationAttestorIamPolicyArgs, GetBinaryAuthorizationAttestorIamPolicyResult, GetBinaryAuthorizationAttestorIamPolicyOutputArgs } from "./getBinaryAuthorizationAttestorIamPolicy";
export const getBinaryAuthorizationAttestorIamPolicy: typeof import("./getBinaryAuthorizationAttestorIamPolicy").getBinaryAuthorizationAttestorIamPolicy = null as any;
export const getBinaryAuthorizationAttestorIamPolicyOutput: typeof import("./getBinaryAuthorizationAttestorIamPolicy").getBinaryAuthorizationAttestorIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBinaryAuthorizationAttestorIamPolicy","getBinaryAuthorizationAttestorIamPolicyOutput"], () => require("./getBinaryAuthorizationAttestorIamPolicy"));

export { GetCertificateManagerCertificateMapArgs, GetCertificateManagerCertificateMapResult, GetCertificateManagerCertificateMapOutputArgs } from "./getCertificateManagerCertificateMap";
export const getCertificateManagerCertificateMap: typeof import("./getCertificateManagerCertificateMap").getCertificateManagerCertificateMap = null as any;
export const getCertificateManagerCertificateMapOutput: typeof import("./getCertificateManagerCertificateMap").getCertificateManagerCertificateMapOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateManagerCertificateMap","getCertificateManagerCertificateMapOutput"], () => require("./getCertificateManagerCertificateMap"));

export { GetClientConfigResult } from "./getClientConfig";
export const getClientConfig: typeof import("./getClientConfig").getClientConfig = null as any;
export const getClientConfigOutput: typeof import("./getClientConfig").getClientConfigOutput = null as any;
utilities.lazyLoad(exports, ["getClientConfig","getClientConfigOutput"], () => require("./getClientConfig"));

export { GetClientOpenidUserinfoResult } from "./getClientOpenidUserinfo";
export const getClientOpenidUserinfo: typeof import("./getClientOpenidUserinfo").getClientOpenidUserinfo = null as any;
export const getClientOpenidUserinfoOutput: typeof import("./getClientOpenidUserinfo").getClientOpenidUserinfoOutput = null as any;
utilities.lazyLoad(exports, ["getClientOpenidUserinfo","getClientOpenidUserinfoOutput"], () => require("./getClientOpenidUserinfo"));

export { GetCloudAssetResourcesSearchAllArgs, GetCloudAssetResourcesSearchAllResult, GetCloudAssetResourcesSearchAllOutputArgs } from "./getCloudAssetResourcesSearchAll";
export const getCloudAssetResourcesSearchAll: typeof import("./getCloudAssetResourcesSearchAll").getCloudAssetResourcesSearchAll = null as any;
export const getCloudAssetResourcesSearchAllOutput: typeof import("./getCloudAssetResourcesSearchAll").getCloudAssetResourcesSearchAllOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAssetResourcesSearchAll","getCloudAssetResourcesSearchAllOutput"], () => require("./getCloudAssetResourcesSearchAll"));

export { GetCloudAssetSearchAllResourcesArgs, GetCloudAssetSearchAllResourcesResult, GetCloudAssetSearchAllResourcesOutputArgs } from "./getCloudAssetSearchAllResources";
export const getCloudAssetSearchAllResources: typeof import("./getCloudAssetSearchAllResources").getCloudAssetSearchAllResources = null as any;
export const getCloudAssetSearchAllResourcesOutput: typeof import("./getCloudAssetSearchAllResources").getCloudAssetSearchAllResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAssetSearchAllResources","getCloudAssetSearchAllResourcesOutput"], () => require("./getCloudAssetSearchAllResources"));

export { GetCloudIdentityGroupLookupArgs, GetCloudIdentityGroupLookupResult, GetCloudIdentityGroupLookupOutputArgs } from "./getCloudIdentityGroupLookup";
export const getCloudIdentityGroupLookup: typeof import("./getCloudIdentityGroupLookup").getCloudIdentityGroupLookup = null as any;
export const getCloudIdentityGroupLookupOutput: typeof import("./getCloudIdentityGroupLookup").getCloudIdentityGroupLookupOutput = null as any;
utilities.lazyLoad(exports, ["getCloudIdentityGroupLookup","getCloudIdentityGroupLookupOutput"], () => require("./getCloudIdentityGroupLookup"));

export { GetCloudIdentityGroupMembershipsArgs, GetCloudIdentityGroupMembershipsResult, GetCloudIdentityGroupMembershipsOutputArgs } from "./getCloudIdentityGroupMemberships";
export const getCloudIdentityGroupMemberships: typeof import("./getCloudIdentityGroupMemberships").getCloudIdentityGroupMemberships = null as any;
export const getCloudIdentityGroupMembershipsOutput: typeof import("./getCloudIdentityGroupMemberships").getCloudIdentityGroupMembershipsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudIdentityGroupMemberships","getCloudIdentityGroupMembershipsOutput"], () => require("./getCloudIdentityGroupMemberships"));

export { GetCloudIdentityGroupTransitiveMembershipsArgs, GetCloudIdentityGroupTransitiveMembershipsResult, GetCloudIdentityGroupTransitiveMembershipsOutputArgs } from "./getCloudIdentityGroupTransitiveMemberships";
export const getCloudIdentityGroupTransitiveMemberships: typeof import("./getCloudIdentityGroupTransitiveMemberships").getCloudIdentityGroupTransitiveMemberships = null as any;
export const getCloudIdentityGroupTransitiveMembershipsOutput: typeof import("./getCloudIdentityGroupTransitiveMemberships").getCloudIdentityGroupTransitiveMembershipsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudIdentityGroupTransitiveMemberships","getCloudIdentityGroupTransitiveMembershipsOutput"], () => require("./getCloudIdentityGroupTransitiveMemberships"));

export { GetCloudIdentityGroupsArgs, GetCloudIdentityGroupsResult, GetCloudIdentityGroupsOutputArgs } from "./getCloudIdentityGroups";
export const getCloudIdentityGroups: typeof import("./getCloudIdentityGroups").getCloudIdentityGroups = null as any;
export const getCloudIdentityGroupsOutput: typeof import("./getCloudIdentityGroups").getCloudIdentityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudIdentityGroups","getCloudIdentityGroupsOutput"], () => require("./getCloudIdentityGroups"));

export { GetCloudQuotasQuotaInfoArgs, GetCloudQuotasQuotaInfoResult, GetCloudQuotasQuotaInfoOutputArgs } from "./getCloudQuotasQuotaInfo";
export const getCloudQuotasQuotaInfo: typeof import("./getCloudQuotasQuotaInfo").getCloudQuotasQuotaInfo = null as any;
export const getCloudQuotasQuotaInfoOutput: typeof import("./getCloudQuotasQuotaInfo").getCloudQuotasQuotaInfoOutput = null as any;
utilities.lazyLoad(exports, ["getCloudQuotasQuotaInfo","getCloudQuotasQuotaInfoOutput"], () => require("./getCloudQuotasQuotaInfo"));

export { GetCloudQuotasQuotaInfosArgs, GetCloudQuotasQuotaInfosResult, GetCloudQuotasQuotaInfosOutputArgs } from "./getCloudQuotasQuotaInfos";
export const getCloudQuotasQuotaInfos: typeof import("./getCloudQuotasQuotaInfos").getCloudQuotasQuotaInfos = null as any;
export const getCloudQuotasQuotaInfosOutput: typeof import("./getCloudQuotasQuotaInfos").getCloudQuotasQuotaInfosOutput = null as any;
utilities.lazyLoad(exports, ["getCloudQuotasQuotaInfos","getCloudQuotasQuotaInfosOutput"], () => require("./getCloudQuotasQuotaInfos"));

export { GetCloudRunLocationsArgs, GetCloudRunLocationsResult, GetCloudRunLocationsOutputArgs } from "./getCloudRunLocations";
export const getCloudRunLocations: typeof import("./getCloudRunLocations").getCloudRunLocations = null as any;
export const getCloudRunLocationsOutput: typeof import("./getCloudRunLocations").getCloudRunLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRunLocations","getCloudRunLocationsOutput"], () => require("./getCloudRunLocations"));

export { GetCloudRunServiceArgs, GetCloudRunServiceResult, GetCloudRunServiceOutputArgs } from "./getCloudRunService";
export const getCloudRunService: typeof import("./getCloudRunService").getCloudRunService = null as any;
export const getCloudRunServiceOutput: typeof import("./getCloudRunService").getCloudRunServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRunService","getCloudRunServiceOutput"], () => require("./getCloudRunService"));

export { GetCloudRunServiceIamPolicyArgs, GetCloudRunServiceIamPolicyResult, GetCloudRunServiceIamPolicyOutputArgs } from "./getCloudRunServiceIamPolicy";
export const getCloudRunServiceIamPolicy: typeof import("./getCloudRunServiceIamPolicy").getCloudRunServiceIamPolicy = null as any;
export const getCloudRunServiceIamPolicyOutput: typeof import("./getCloudRunServiceIamPolicy").getCloudRunServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRunServiceIamPolicy","getCloudRunServiceIamPolicyOutput"], () => require("./getCloudRunServiceIamPolicy"));

export { GetCloudRunV2JobArgs, GetCloudRunV2JobResult, GetCloudRunV2JobOutputArgs } from "./getCloudRunV2Job";
export const getCloudRunV2Job: typeof import("./getCloudRunV2Job").getCloudRunV2Job = null as any;
export const getCloudRunV2JobOutput: typeof import("./getCloudRunV2Job").getCloudRunV2JobOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRunV2Job","getCloudRunV2JobOutput"], () => require("./getCloudRunV2Job"));

export { GetCloudRunV2JobIamPolicyArgs, GetCloudRunV2JobIamPolicyResult, GetCloudRunV2JobIamPolicyOutputArgs } from "./getCloudRunV2JobIamPolicy";
export const getCloudRunV2JobIamPolicy: typeof import("./getCloudRunV2JobIamPolicy").getCloudRunV2JobIamPolicy = null as any;
export const getCloudRunV2JobIamPolicyOutput: typeof import("./getCloudRunV2JobIamPolicy").getCloudRunV2JobIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRunV2JobIamPolicy","getCloudRunV2JobIamPolicyOutput"], () => require("./getCloudRunV2JobIamPolicy"));

export { GetCloudRunV2ServiceArgs, GetCloudRunV2ServiceResult, GetCloudRunV2ServiceOutputArgs } from "./getCloudRunV2Service";
export const getCloudRunV2Service: typeof import("./getCloudRunV2Service").getCloudRunV2Service = null as any;
export const getCloudRunV2ServiceOutput: typeof import("./getCloudRunV2Service").getCloudRunV2ServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRunV2Service","getCloudRunV2ServiceOutput"], () => require("./getCloudRunV2Service"));

export { GetCloudRunV2ServiceIamPolicyArgs, GetCloudRunV2ServiceIamPolicyResult, GetCloudRunV2ServiceIamPolicyOutputArgs } from "./getCloudRunV2ServiceIamPolicy";
export const getCloudRunV2ServiceIamPolicy: typeof import("./getCloudRunV2ServiceIamPolicy").getCloudRunV2ServiceIamPolicy = null as any;
export const getCloudRunV2ServiceIamPolicyOutput: typeof import("./getCloudRunV2ServiceIamPolicy").getCloudRunV2ServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRunV2ServiceIamPolicy","getCloudRunV2ServiceIamPolicyOutput"], () => require("./getCloudRunV2ServiceIamPolicy"));

export { GetCloudTasksQueueIamPolicyArgs, GetCloudTasksQueueIamPolicyResult, GetCloudTasksQueueIamPolicyOutputArgs } from "./getCloudTasksQueueIamPolicy";
export const getCloudTasksQueueIamPolicy: typeof import("./getCloudTasksQueueIamPolicy").getCloudTasksQueueIamPolicy = null as any;
export const getCloudTasksQueueIamPolicyOutput: typeof import("./getCloudTasksQueueIamPolicy").getCloudTasksQueueIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudTasksQueueIamPolicy","getCloudTasksQueueIamPolicyOutput"], () => require("./getCloudTasksQueueIamPolicy"));

export { GetCloudbuildTriggerArgs, GetCloudbuildTriggerResult, GetCloudbuildTriggerOutputArgs } from "./getCloudbuildTrigger";
export const getCloudbuildTrigger: typeof import("./getCloudbuildTrigger").getCloudbuildTrigger = null as any;
export const getCloudbuildTriggerOutput: typeof import("./getCloudbuildTrigger").getCloudbuildTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getCloudbuildTrigger","getCloudbuildTriggerOutput"], () => require("./getCloudbuildTrigger"));

export { GetCloudbuildv2ConnectionIamPolicyArgs, GetCloudbuildv2ConnectionIamPolicyResult, GetCloudbuildv2ConnectionIamPolicyOutputArgs } from "./getCloudbuildv2ConnectionIamPolicy";
export const getCloudbuildv2ConnectionIamPolicy: typeof import("./getCloudbuildv2ConnectionIamPolicy").getCloudbuildv2ConnectionIamPolicy = null as any;
export const getCloudbuildv2ConnectionIamPolicyOutput: typeof import("./getCloudbuildv2ConnectionIamPolicy").getCloudbuildv2ConnectionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudbuildv2ConnectionIamPolicy","getCloudbuildv2ConnectionIamPolicyOutput"], () => require("./getCloudbuildv2ConnectionIamPolicy"));

export { GetClouddeployCustomTargetTypeIamPolicyArgs, GetClouddeployCustomTargetTypeIamPolicyResult, GetClouddeployCustomTargetTypeIamPolicyOutputArgs } from "./getClouddeployCustomTargetTypeIamPolicy";
export const getClouddeployCustomTargetTypeIamPolicy: typeof import("./getClouddeployCustomTargetTypeIamPolicy").getClouddeployCustomTargetTypeIamPolicy = null as any;
export const getClouddeployCustomTargetTypeIamPolicyOutput: typeof import("./getClouddeployCustomTargetTypeIamPolicy").getClouddeployCustomTargetTypeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getClouddeployCustomTargetTypeIamPolicy","getClouddeployCustomTargetTypeIamPolicyOutput"], () => require("./getClouddeployCustomTargetTypeIamPolicy"));

export { GetClouddeployDeliveryPipelineIamPolicyArgs, GetClouddeployDeliveryPipelineIamPolicyResult, GetClouddeployDeliveryPipelineIamPolicyOutputArgs } from "./getClouddeployDeliveryPipelineIamPolicy";
export const getClouddeployDeliveryPipelineIamPolicy: typeof import("./getClouddeployDeliveryPipelineIamPolicy").getClouddeployDeliveryPipelineIamPolicy = null as any;
export const getClouddeployDeliveryPipelineIamPolicyOutput: typeof import("./getClouddeployDeliveryPipelineIamPolicy").getClouddeployDeliveryPipelineIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getClouddeployDeliveryPipelineIamPolicy","getClouddeployDeliveryPipelineIamPolicyOutput"], () => require("./getClouddeployDeliveryPipelineIamPolicy"));

export { GetClouddeployTargetIamPolicyArgs, GetClouddeployTargetIamPolicyResult, GetClouddeployTargetIamPolicyOutputArgs } from "./getClouddeployTargetIamPolicy";
export const getClouddeployTargetIamPolicy: typeof import("./getClouddeployTargetIamPolicy").getClouddeployTargetIamPolicy = null as any;
export const getClouddeployTargetIamPolicyOutput: typeof import("./getClouddeployTargetIamPolicy").getClouddeployTargetIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getClouddeployTargetIamPolicy","getClouddeployTargetIamPolicyOutput"], () => require("./getClouddeployTargetIamPolicy"));

export { GetCloudfunctions2FunctionArgs, GetCloudfunctions2FunctionResult, GetCloudfunctions2FunctionOutputArgs } from "./getCloudfunctions2Function";
export const getCloudfunctions2Function: typeof import("./getCloudfunctions2Function").getCloudfunctions2Function = null as any;
export const getCloudfunctions2FunctionOutput: typeof import("./getCloudfunctions2Function").getCloudfunctions2FunctionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfunctions2Function","getCloudfunctions2FunctionOutput"], () => require("./getCloudfunctions2Function"));

export { GetCloudfunctions2FunctionIamPolicyArgs, GetCloudfunctions2FunctionIamPolicyResult, GetCloudfunctions2FunctionIamPolicyOutputArgs } from "./getCloudfunctions2FunctionIamPolicy";
export const getCloudfunctions2FunctionIamPolicy: typeof import("./getCloudfunctions2FunctionIamPolicy").getCloudfunctions2FunctionIamPolicy = null as any;
export const getCloudfunctions2FunctionIamPolicyOutput: typeof import("./getCloudfunctions2FunctionIamPolicy").getCloudfunctions2FunctionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfunctions2FunctionIamPolicy","getCloudfunctions2FunctionIamPolicyOutput"], () => require("./getCloudfunctions2FunctionIamPolicy"));

export { GetCloudfunctionsFunctionArgs, GetCloudfunctionsFunctionResult, GetCloudfunctionsFunctionOutputArgs } from "./getCloudfunctionsFunction";
export const getCloudfunctionsFunction: typeof import("./getCloudfunctionsFunction").getCloudfunctionsFunction = null as any;
export const getCloudfunctionsFunctionOutput: typeof import("./getCloudfunctionsFunction").getCloudfunctionsFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfunctionsFunction","getCloudfunctionsFunctionOutput"], () => require("./getCloudfunctionsFunction"));

export { GetCloudfunctionsFunctionIamPolicyArgs, GetCloudfunctionsFunctionIamPolicyResult, GetCloudfunctionsFunctionIamPolicyOutputArgs } from "./getCloudfunctionsFunctionIamPolicy";
export const getCloudfunctionsFunctionIamPolicy: typeof import("./getCloudfunctionsFunctionIamPolicy").getCloudfunctionsFunctionIamPolicy = null as any;
export const getCloudfunctionsFunctionIamPolicyOutput: typeof import("./getCloudfunctionsFunctionIamPolicy").getCloudfunctionsFunctionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfunctionsFunctionIamPolicy","getCloudfunctionsFunctionIamPolicyOutput"], () => require("./getCloudfunctionsFunctionIamPolicy"));

export { GetComposerEnvironmentArgs, GetComposerEnvironmentResult, GetComposerEnvironmentOutputArgs } from "./getComposerEnvironment";
export const getComposerEnvironment: typeof import("./getComposerEnvironment").getComposerEnvironment = null as any;
export const getComposerEnvironmentOutput: typeof import("./getComposerEnvironment").getComposerEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getComposerEnvironment","getComposerEnvironmentOutput"], () => require("./getComposerEnvironment"));

export { GetComposerImageVersionsArgs, GetComposerImageVersionsResult, GetComposerImageVersionsOutputArgs } from "./getComposerImageVersions";
export const getComposerImageVersions: typeof import("./getComposerImageVersions").getComposerImageVersions = null as any;
export const getComposerImageVersionsOutput: typeof import("./getComposerImageVersions").getComposerImageVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getComposerImageVersions","getComposerImageVersionsOutput"], () => require("./getComposerImageVersions"));

export { GetComposerUserWorkloadsConfigMapArgs, GetComposerUserWorkloadsConfigMapResult, GetComposerUserWorkloadsConfigMapOutputArgs } from "./getComposerUserWorkloadsConfigMap";
export const getComposerUserWorkloadsConfigMap: typeof import("./getComposerUserWorkloadsConfigMap").getComposerUserWorkloadsConfigMap = null as any;
export const getComposerUserWorkloadsConfigMapOutput: typeof import("./getComposerUserWorkloadsConfigMap").getComposerUserWorkloadsConfigMapOutput = null as any;
utilities.lazyLoad(exports, ["getComposerUserWorkloadsConfigMap","getComposerUserWorkloadsConfigMapOutput"], () => require("./getComposerUserWorkloadsConfigMap"));

export { GetComposerUserWorkloadsSecretArgs, GetComposerUserWorkloadsSecretResult, GetComposerUserWorkloadsSecretOutputArgs } from "./getComposerUserWorkloadsSecret";
export const getComposerUserWorkloadsSecret: typeof import("./getComposerUserWorkloadsSecret").getComposerUserWorkloadsSecret = null as any;
export const getComposerUserWorkloadsSecretOutput: typeof import("./getComposerUserWorkloadsSecret").getComposerUserWorkloadsSecretOutput = null as any;
utilities.lazyLoad(exports, ["getComposerUserWorkloadsSecret","getComposerUserWorkloadsSecretOutput"], () => require("./getComposerUserWorkloadsSecret"));

export { GetComputeAddressArgs, GetComputeAddressResult, GetComputeAddressOutputArgs } from "./getComputeAddress";
export const getComputeAddress: typeof import("./getComputeAddress").getComputeAddress = null as any;
export const getComputeAddressOutput: typeof import("./getComputeAddress").getComputeAddressOutput = null as any;
utilities.lazyLoad(exports, ["getComputeAddress","getComputeAddressOutput"], () => require("./getComputeAddress"));

export { GetComputeAddressesArgs, GetComputeAddressesResult, GetComputeAddressesOutputArgs } from "./getComputeAddresses";
export const getComputeAddresses: typeof import("./getComputeAddresses").getComputeAddresses = null as any;
export const getComputeAddressesOutput: typeof import("./getComputeAddresses").getComputeAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getComputeAddresses","getComputeAddressesOutput"], () => require("./getComputeAddresses"));

export { GetComputeBackendBucketArgs, GetComputeBackendBucketResult, GetComputeBackendBucketOutputArgs } from "./getComputeBackendBucket";
export const getComputeBackendBucket: typeof import("./getComputeBackendBucket").getComputeBackendBucket = null as any;
export const getComputeBackendBucketOutput: typeof import("./getComputeBackendBucket").getComputeBackendBucketOutput = null as any;
utilities.lazyLoad(exports, ["getComputeBackendBucket","getComputeBackendBucketOutput"], () => require("./getComputeBackendBucket"));

export { GetComputeBackendBucketIamPolicyArgs, GetComputeBackendBucketIamPolicyResult, GetComputeBackendBucketIamPolicyOutputArgs } from "./getComputeBackendBucketIamPolicy";
export const getComputeBackendBucketIamPolicy: typeof import("./getComputeBackendBucketIamPolicy").getComputeBackendBucketIamPolicy = null as any;
export const getComputeBackendBucketIamPolicyOutput: typeof import("./getComputeBackendBucketIamPolicy").getComputeBackendBucketIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeBackendBucketIamPolicy","getComputeBackendBucketIamPolicyOutput"], () => require("./getComputeBackendBucketIamPolicy"));

export { GetComputeBackendServiceArgs, GetComputeBackendServiceResult, GetComputeBackendServiceOutputArgs } from "./getComputeBackendService";
export const getComputeBackendService: typeof import("./getComputeBackendService").getComputeBackendService = null as any;
export const getComputeBackendServiceOutput: typeof import("./getComputeBackendService").getComputeBackendServiceOutput = null as any;
utilities.lazyLoad(exports, ["getComputeBackendService","getComputeBackendServiceOutput"], () => require("./getComputeBackendService"));

export { GetComputeBackendServiceIamPolicyArgs, GetComputeBackendServiceIamPolicyResult, GetComputeBackendServiceIamPolicyOutputArgs } from "./getComputeBackendServiceIamPolicy";
export const getComputeBackendServiceIamPolicy: typeof import("./getComputeBackendServiceIamPolicy").getComputeBackendServiceIamPolicy = null as any;
export const getComputeBackendServiceIamPolicyOutput: typeof import("./getComputeBackendServiceIamPolicy").getComputeBackendServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeBackendServiceIamPolicy","getComputeBackendServiceIamPolicyOutput"], () => require("./getComputeBackendServiceIamPolicy"));

export { GetComputeDefaultServiceAccountArgs, GetComputeDefaultServiceAccountResult, GetComputeDefaultServiceAccountOutputArgs } from "./getComputeDefaultServiceAccount";
export const getComputeDefaultServiceAccount: typeof import("./getComputeDefaultServiceAccount").getComputeDefaultServiceAccount = null as any;
export const getComputeDefaultServiceAccountOutput: typeof import("./getComputeDefaultServiceAccount").getComputeDefaultServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getComputeDefaultServiceAccount","getComputeDefaultServiceAccountOutput"], () => require("./getComputeDefaultServiceAccount"));

export { GetComputeDiskArgs, GetComputeDiskResult, GetComputeDiskOutputArgs } from "./getComputeDisk";
export const getComputeDisk: typeof import("./getComputeDisk").getComputeDisk = null as any;
export const getComputeDiskOutput: typeof import("./getComputeDisk").getComputeDiskOutput = null as any;
utilities.lazyLoad(exports, ["getComputeDisk","getComputeDiskOutput"], () => require("./getComputeDisk"));

export { GetComputeDiskIamPolicyArgs, GetComputeDiskIamPolicyResult, GetComputeDiskIamPolicyOutputArgs } from "./getComputeDiskIamPolicy";
export const getComputeDiskIamPolicy: typeof import("./getComputeDiskIamPolicy").getComputeDiskIamPolicy = null as any;
export const getComputeDiskIamPolicyOutput: typeof import("./getComputeDiskIamPolicy").getComputeDiskIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeDiskIamPolicy","getComputeDiskIamPolicyOutput"], () => require("./getComputeDiskIamPolicy"));

export { GetComputeForwardingRuleArgs, GetComputeForwardingRuleResult, GetComputeForwardingRuleOutputArgs } from "./getComputeForwardingRule";
export const getComputeForwardingRule: typeof import("./getComputeForwardingRule").getComputeForwardingRule = null as any;
export const getComputeForwardingRuleOutput: typeof import("./getComputeForwardingRule").getComputeForwardingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getComputeForwardingRule","getComputeForwardingRuleOutput"], () => require("./getComputeForwardingRule"));

export { GetComputeForwardingRulesArgs, GetComputeForwardingRulesResult, GetComputeForwardingRulesOutputArgs } from "./getComputeForwardingRules";
export const getComputeForwardingRules: typeof import("./getComputeForwardingRules").getComputeForwardingRules = null as any;
export const getComputeForwardingRulesOutput: typeof import("./getComputeForwardingRules").getComputeForwardingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getComputeForwardingRules","getComputeForwardingRulesOutput"], () => require("./getComputeForwardingRules"));

export { GetComputeGlobalAddressArgs, GetComputeGlobalAddressResult, GetComputeGlobalAddressOutputArgs } from "./getComputeGlobalAddress";
export const getComputeGlobalAddress: typeof import("./getComputeGlobalAddress").getComputeGlobalAddress = null as any;
export const getComputeGlobalAddressOutput: typeof import("./getComputeGlobalAddress").getComputeGlobalAddressOutput = null as any;
utilities.lazyLoad(exports, ["getComputeGlobalAddress","getComputeGlobalAddressOutput"], () => require("./getComputeGlobalAddress"));

export { GetComputeGlobalForwardingRuleArgs, GetComputeGlobalForwardingRuleResult, GetComputeGlobalForwardingRuleOutputArgs } from "./getComputeGlobalForwardingRule";
export const getComputeGlobalForwardingRule: typeof import("./getComputeGlobalForwardingRule").getComputeGlobalForwardingRule = null as any;
export const getComputeGlobalForwardingRuleOutput: typeof import("./getComputeGlobalForwardingRule").getComputeGlobalForwardingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getComputeGlobalForwardingRule","getComputeGlobalForwardingRuleOutput"], () => require("./getComputeGlobalForwardingRule"));

export { GetComputeHaVpnGatewayArgs, GetComputeHaVpnGatewayResult, GetComputeHaVpnGatewayOutputArgs } from "./getComputeHaVpnGateway";
export const getComputeHaVpnGateway: typeof import("./getComputeHaVpnGateway").getComputeHaVpnGateway = null as any;
export const getComputeHaVpnGatewayOutput: typeof import("./getComputeHaVpnGateway").getComputeHaVpnGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getComputeHaVpnGateway","getComputeHaVpnGatewayOutput"], () => require("./getComputeHaVpnGateway"));

export { GetComputeHealthCheckArgs, GetComputeHealthCheckResult, GetComputeHealthCheckOutputArgs } from "./getComputeHealthCheck";
export const getComputeHealthCheck: typeof import("./getComputeHealthCheck").getComputeHealthCheck = null as any;
export const getComputeHealthCheckOutput: typeof import("./getComputeHealthCheck").getComputeHealthCheckOutput = null as any;
utilities.lazyLoad(exports, ["getComputeHealthCheck","getComputeHealthCheckOutput"], () => require("./getComputeHealthCheck"));

export { GetComputeImageArgs, GetComputeImageResult, GetComputeImageOutputArgs } from "./getComputeImage";
export const getComputeImage: typeof import("./getComputeImage").getComputeImage = null as any;
export const getComputeImageOutput: typeof import("./getComputeImage").getComputeImageOutput = null as any;
utilities.lazyLoad(exports, ["getComputeImage","getComputeImageOutput"], () => require("./getComputeImage"));

export { GetComputeImageIamPolicyArgs, GetComputeImageIamPolicyResult, GetComputeImageIamPolicyOutputArgs } from "./getComputeImageIamPolicy";
export const getComputeImageIamPolicy: typeof import("./getComputeImageIamPolicy").getComputeImageIamPolicy = null as any;
export const getComputeImageIamPolicyOutput: typeof import("./getComputeImageIamPolicy").getComputeImageIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeImageIamPolicy","getComputeImageIamPolicyOutput"], () => require("./getComputeImageIamPolicy"));

export { GetComputeInstanceArgs, GetComputeInstanceResult, GetComputeInstanceOutputArgs } from "./getComputeInstance";
export const getComputeInstance: typeof import("./getComputeInstance").getComputeInstance = null as any;
export const getComputeInstanceOutput: typeof import("./getComputeInstance").getComputeInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getComputeInstance","getComputeInstanceOutput"], () => require("./getComputeInstance"));

export { GetComputeInstanceGroupArgs, GetComputeInstanceGroupResult, GetComputeInstanceGroupOutputArgs } from "./getComputeInstanceGroup";
export const getComputeInstanceGroup: typeof import("./getComputeInstanceGroup").getComputeInstanceGroup = null as any;
export const getComputeInstanceGroupOutput: typeof import("./getComputeInstanceGroup").getComputeInstanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getComputeInstanceGroup","getComputeInstanceGroupOutput"], () => require("./getComputeInstanceGroup"));

export { GetComputeInstanceGroupManagerArgs, GetComputeInstanceGroupManagerResult, GetComputeInstanceGroupManagerOutputArgs } from "./getComputeInstanceGroupManager";
export const getComputeInstanceGroupManager: typeof import("./getComputeInstanceGroupManager").getComputeInstanceGroupManager = null as any;
export const getComputeInstanceGroupManagerOutput: typeof import("./getComputeInstanceGroupManager").getComputeInstanceGroupManagerOutput = null as any;
utilities.lazyLoad(exports, ["getComputeInstanceGroupManager","getComputeInstanceGroupManagerOutput"], () => require("./getComputeInstanceGroupManager"));

export { GetComputeInstanceIamPolicyArgs, GetComputeInstanceIamPolicyResult, GetComputeInstanceIamPolicyOutputArgs } from "./getComputeInstanceIamPolicy";
export const getComputeInstanceIamPolicy: typeof import("./getComputeInstanceIamPolicy").getComputeInstanceIamPolicy = null as any;
export const getComputeInstanceIamPolicyOutput: typeof import("./getComputeInstanceIamPolicy").getComputeInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeInstanceIamPolicy","getComputeInstanceIamPolicyOutput"], () => require("./getComputeInstanceIamPolicy"));

export { GetComputeInstanceSerialPortArgs, GetComputeInstanceSerialPortResult, GetComputeInstanceSerialPortOutputArgs } from "./getComputeInstanceSerialPort";
export const getComputeInstanceSerialPort: typeof import("./getComputeInstanceSerialPort").getComputeInstanceSerialPort = null as any;
export const getComputeInstanceSerialPortOutput: typeof import("./getComputeInstanceSerialPort").getComputeInstanceSerialPortOutput = null as any;
utilities.lazyLoad(exports, ["getComputeInstanceSerialPort","getComputeInstanceSerialPortOutput"], () => require("./getComputeInstanceSerialPort"));

export { GetComputeInstanceTemplateArgs, GetComputeInstanceTemplateResult, GetComputeInstanceTemplateOutputArgs } from "./getComputeInstanceTemplate";
export const getComputeInstanceTemplate: typeof import("./getComputeInstanceTemplate").getComputeInstanceTemplate = null as any;
export const getComputeInstanceTemplateOutput: typeof import("./getComputeInstanceTemplate").getComputeInstanceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getComputeInstanceTemplate","getComputeInstanceTemplateOutput"], () => require("./getComputeInstanceTemplate"));

export { GetComputeLbIpRangesArgs, GetComputeLbIpRangesResult, GetComputeLbIpRangesOutputArgs } from "./getComputeLbIpRanges";
export const getComputeLbIpRanges: typeof import("./getComputeLbIpRanges").getComputeLbIpRanges = null as any;
export const getComputeLbIpRangesOutput: typeof import("./getComputeLbIpRanges").getComputeLbIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getComputeLbIpRanges","getComputeLbIpRangesOutput"], () => require("./getComputeLbIpRanges"));

export { GetComputeMachineImageIamPolicyArgs, GetComputeMachineImageIamPolicyResult, GetComputeMachineImageIamPolicyOutputArgs } from "./getComputeMachineImageIamPolicy";
export const getComputeMachineImageIamPolicy: typeof import("./getComputeMachineImageIamPolicy").getComputeMachineImageIamPolicy = null as any;
export const getComputeMachineImageIamPolicyOutput: typeof import("./getComputeMachineImageIamPolicy").getComputeMachineImageIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeMachineImageIamPolicy","getComputeMachineImageIamPolicyOutput"], () => require("./getComputeMachineImageIamPolicy"));

export { GetComputeMachineTypesArgs, GetComputeMachineTypesResult, GetComputeMachineTypesOutputArgs } from "./getComputeMachineTypes";
export const getComputeMachineTypes: typeof import("./getComputeMachineTypes").getComputeMachineTypes = null as any;
export const getComputeMachineTypesOutput: typeof import("./getComputeMachineTypes").getComputeMachineTypesOutput = null as any;
utilities.lazyLoad(exports, ["getComputeMachineTypes","getComputeMachineTypesOutput"], () => require("./getComputeMachineTypes"));

export { GetComputeNetworkArgs, GetComputeNetworkResult, GetComputeNetworkOutputArgs } from "./getComputeNetwork";
export const getComputeNetwork: typeof import("./getComputeNetwork").getComputeNetwork = null as any;
export const getComputeNetworkOutput: typeof import("./getComputeNetwork").getComputeNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getComputeNetwork","getComputeNetworkOutput"], () => require("./getComputeNetwork"));

export { GetComputeNetworkEndpointGroupArgs, GetComputeNetworkEndpointGroupResult, GetComputeNetworkEndpointGroupOutputArgs } from "./getComputeNetworkEndpointGroup";
export const getComputeNetworkEndpointGroup: typeof import("./getComputeNetworkEndpointGroup").getComputeNetworkEndpointGroup = null as any;
export const getComputeNetworkEndpointGroupOutput: typeof import("./getComputeNetworkEndpointGroup").getComputeNetworkEndpointGroupOutput = null as any;
utilities.lazyLoad(exports, ["getComputeNetworkEndpointGroup","getComputeNetworkEndpointGroupOutput"], () => require("./getComputeNetworkEndpointGroup"));

export { GetComputeNetworkPeeringArgs, GetComputeNetworkPeeringResult, GetComputeNetworkPeeringOutputArgs } from "./getComputeNetworkPeering";
export const getComputeNetworkPeering: typeof import("./getComputeNetworkPeering").getComputeNetworkPeering = null as any;
export const getComputeNetworkPeeringOutput: typeof import("./getComputeNetworkPeering").getComputeNetworkPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getComputeNetworkPeering","getComputeNetworkPeeringOutput"], () => require("./getComputeNetworkPeering"));

export { GetComputeNetworksArgs, GetComputeNetworksResult, GetComputeNetworksOutputArgs } from "./getComputeNetworks";
export const getComputeNetworks: typeof import("./getComputeNetworks").getComputeNetworks = null as any;
export const getComputeNetworksOutput: typeof import("./getComputeNetworks").getComputeNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getComputeNetworks","getComputeNetworksOutput"], () => require("./getComputeNetworks"));

export { GetComputeNodeTypesArgs, GetComputeNodeTypesResult, GetComputeNodeTypesOutputArgs } from "./getComputeNodeTypes";
export const getComputeNodeTypes: typeof import("./getComputeNodeTypes").getComputeNodeTypes = null as any;
export const getComputeNodeTypesOutput: typeof import("./getComputeNodeTypes").getComputeNodeTypesOutput = null as any;
utilities.lazyLoad(exports, ["getComputeNodeTypes","getComputeNodeTypesOutput"], () => require("./getComputeNodeTypes"));

export { GetComputeRegionBackendServiceIamPolicyArgs, GetComputeRegionBackendServiceIamPolicyResult, GetComputeRegionBackendServiceIamPolicyOutputArgs } from "./getComputeRegionBackendServiceIamPolicy";
export const getComputeRegionBackendServiceIamPolicy: typeof import("./getComputeRegionBackendServiceIamPolicy").getComputeRegionBackendServiceIamPolicy = null as any;
export const getComputeRegionBackendServiceIamPolicyOutput: typeof import("./getComputeRegionBackendServiceIamPolicy").getComputeRegionBackendServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRegionBackendServiceIamPolicy","getComputeRegionBackendServiceIamPolicyOutput"], () => require("./getComputeRegionBackendServiceIamPolicy"));

export { GetComputeRegionDiskArgs, GetComputeRegionDiskResult, GetComputeRegionDiskOutputArgs } from "./getComputeRegionDisk";
export const getComputeRegionDisk: typeof import("./getComputeRegionDisk").getComputeRegionDisk = null as any;
export const getComputeRegionDiskOutput: typeof import("./getComputeRegionDisk").getComputeRegionDiskOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRegionDisk","getComputeRegionDiskOutput"], () => require("./getComputeRegionDisk"));

export { GetComputeRegionDiskIamPolicyArgs, GetComputeRegionDiskIamPolicyResult, GetComputeRegionDiskIamPolicyOutputArgs } from "./getComputeRegionDiskIamPolicy";
export const getComputeRegionDiskIamPolicy: typeof import("./getComputeRegionDiskIamPolicy").getComputeRegionDiskIamPolicy = null as any;
export const getComputeRegionDiskIamPolicyOutput: typeof import("./getComputeRegionDiskIamPolicy").getComputeRegionDiskIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRegionDiskIamPolicy","getComputeRegionDiskIamPolicyOutput"], () => require("./getComputeRegionDiskIamPolicy"));

export { GetComputeRegionInstanceGroupArgs, GetComputeRegionInstanceGroupResult, GetComputeRegionInstanceGroupOutputArgs } from "./getComputeRegionInstanceGroup";
export const getComputeRegionInstanceGroup: typeof import("./getComputeRegionInstanceGroup").getComputeRegionInstanceGroup = null as any;
export const getComputeRegionInstanceGroupOutput: typeof import("./getComputeRegionInstanceGroup").getComputeRegionInstanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRegionInstanceGroup","getComputeRegionInstanceGroupOutput"], () => require("./getComputeRegionInstanceGroup"));

export { GetComputeRegionInstanceTemplateArgs, GetComputeRegionInstanceTemplateResult, GetComputeRegionInstanceTemplateOutputArgs } from "./getComputeRegionInstanceTemplate";
export const getComputeRegionInstanceTemplate: typeof import("./getComputeRegionInstanceTemplate").getComputeRegionInstanceTemplate = null as any;
export const getComputeRegionInstanceTemplateOutput: typeof import("./getComputeRegionInstanceTemplate").getComputeRegionInstanceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRegionInstanceTemplate","getComputeRegionInstanceTemplateOutput"], () => require("./getComputeRegionInstanceTemplate"));

export { GetComputeRegionNetworkEndpointGroupArgs, GetComputeRegionNetworkEndpointGroupResult, GetComputeRegionNetworkEndpointGroupOutputArgs } from "./getComputeRegionNetworkEndpointGroup";
export const getComputeRegionNetworkEndpointGroup: typeof import("./getComputeRegionNetworkEndpointGroup").getComputeRegionNetworkEndpointGroup = null as any;
export const getComputeRegionNetworkEndpointGroupOutput: typeof import("./getComputeRegionNetworkEndpointGroup").getComputeRegionNetworkEndpointGroupOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRegionNetworkEndpointGroup","getComputeRegionNetworkEndpointGroupOutput"], () => require("./getComputeRegionNetworkEndpointGroup"));

export { GetComputeRegionSslCertificateArgs, GetComputeRegionSslCertificateResult, GetComputeRegionSslCertificateOutputArgs } from "./getComputeRegionSslCertificate";
export const getComputeRegionSslCertificate: typeof import("./getComputeRegionSslCertificate").getComputeRegionSslCertificate = null as any;
export const getComputeRegionSslCertificateOutput: typeof import("./getComputeRegionSslCertificate").getComputeRegionSslCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRegionSslCertificate","getComputeRegionSslCertificateOutput"], () => require("./getComputeRegionSslCertificate"));

export { GetComputeRegionsArgs, GetComputeRegionsResult, GetComputeRegionsOutputArgs } from "./getComputeRegions";
export const getComputeRegions: typeof import("./getComputeRegions").getComputeRegions = null as any;
export const getComputeRegionsOutput: typeof import("./getComputeRegions").getComputeRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRegions","getComputeRegionsOutput"], () => require("./getComputeRegions"));

export { GetComputeReservationArgs, GetComputeReservationResult, GetComputeReservationOutputArgs } from "./getComputeReservation";
export const getComputeReservation: typeof import("./getComputeReservation").getComputeReservation = null as any;
export const getComputeReservationOutput: typeof import("./getComputeReservation").getComputeReservationOutput = null as any;
utilities.lazyLoad(exports, ["getComputeReservation","getComputeReservationOutput"], () => require("./getComputeReservation"));

export { GetComputeResourcePolicyArgs, GetComputeResourcePolicyResult, GetComputeResourcePolicyOutputArgs } from "./getComputeResourcePolicy";
export const getComputeResourcePolicy: typeof import("./getComputeResourcePolicy").getComputeResourcePolicy = null as any;
export const getComputeResourcePolicyOutput: typeof import("./getComputeResourcePolicy").getComputeResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeResourcePolicy","getComputeResourcePolicyOutput"], () => require("./getComputeResourcePolicy"));

export { GetComputeRouterArgs, GetComputeRouterResult, GetComputeRouterOutputArgs } from "./getComputeRouter";
export const getComputeRouter: typeof import("./getComputeRouter").getComputeRouter = null as any;
export const getComputeRouterOutput: typeof import("./getComputeRouter").getComputeRouterOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRouter","getComputeRouterOutput"], () => require("./getComputeRouter"));

export { GetComputeRouterNatArgs, GetComputeRouterNatResult, GetComputeRouterNatOutputArgs } from "./getComputeRouterNat";
export const getComputeRouterNat: typeof import("./getComputeRouterNat").getComputeRouterNat = null as any;
export const getComputeRouterNatOutput: typeof import("./getComputeRouterNat").getComputeRouterNatOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRouterNat","getComputeRouterNatOutput"], () => require("./getComputeRouterNat"));

export { GetComputeRouterStatusArgs, GetComputeRouterStatusResult, GetComputeRouterStatusOutputArgs } from "./getComputeRouterStatus";
export const getComputeRouterStatus: typeof import("./getComputeRouterStatus").getComputeRouterStatus = null as any;
export const getComputeRouterStatusOutput: typeof import("./getComputeRouterStatus").getComputeRouterStatusOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRouterStatus","getComputeRouterStatusOutput"], () => require("./getComputeRouterStatus"));

export { GetComputeSecurityPolicyArgs, GetComputeSecurityPolicyResult, GetComputeSecurityPolicyOutputArgs } from "./getComputeSecurityPolicy";
export const getComputeSecurityPolicy: typeof import("./getComputeSecurityPolicy").getComputeSecurityPolicy = null as any;
export const getComputeSecurityPolicyOutput: typeof import("./getComputeSecurityPolicy").getComputeSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSecurityPolicy","getComputeSecurityPolicyOutput"], () => require("./getComputeSecurityPolicy"));

export { GetComputeSnapshotArgs, GetComputeSnapshotResult, GetComputeSnapshotOutputArgs } from "./getComputeSnapshot";
export const getComputeSnapshot: typeof import("./getComputeSnapshot").getComputeSnapshot = null as any;
export const getComputeSnapshotOutput: typeof import("./getComputeSnapshot").getComputeSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSnapshot","getComputeSnapshotOutput"], () => require("./getComputeSnapshot"));

export { GetComputeSnapshotIamPolicyArgs, GetComputeSnapshotIamPolicyResult, GetComputeSnapshotIamPolicyOutputArgs } from "./getComputeSnapshotIamPolicy";
export const getComputeSnapshotIamPolicy: typeof import("./getComputeSnapshotIamPolicy").getComputeSnapshotIamPolicy = null as any;
export const getComputeSnapshotIamPolicyOutput: typeof import("./getComputeSnapshotIamPolicy").getComputeSnapshotIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSnapshotIamPolicy","getComputeSnapshotIamPolicyOutput"], () => require("./getComputeSnapshotIamPolicy"));

export { GetComputeSslCertificateArgs, GetComputeSslCertificateResult, GetComputeSslCertificateOutputArgs } from "./getComputeSslCertificate";
export const getComputeSslCertificate: typeof import("./getComputeSslCertificate").getComputeSslCertificate = null as any;
export const getComputeSslCertificateOutput: typeof import("./getComputeSslCertificate").getComputeSslCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSslCertificate","getComputeSslCertificateOutput"], () => require("./getComputeSslCertificate"));

export { GetComputeSslPolicyArgs, GetComputeSslPolicyResult, GetComputeSslPolicyOutputArgs } from "./getComputeSslPolicy";
export const getComputeSslPolicy: typeof import("./getComputeSslPolicy").getComputeSslPolicy = null as any;
export const getComputeSslPolicyOutput: typeof import("./getComputeSslPolicy").getComputeSslPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSslPolicy","getComputeSslPolicyOutput"], () => require("./getComputeSslPolicy"));

export { GetComputeSubnetworkArgs, GetComputeSubnetworkResult, GetComputeSubnetworkOutputArgs } from "./getComputeSubnetwork";
export const getComputeSubnetwork: typeof import("./getComputeSubnetwork").getComputeSubnetwork = null as any;
export const getComputeSubnetworkOutput: typeof import("./getComputeSubnetwork").getComputeSubnetworkOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSubnetwork","getComputeSubnetworkOutput"], () => require("./getComputeSubnetwork"));

export { GetComputeSubnetworkIamPolicyArgs, GetComputeSubnetworkIamPolicyResult, GetComputeSubnetworkIamPolicyOutputArgs } from "./getComputeSubnetworkIamPolicy";
export const getComputeSubnetworkIamPolicy: typeof import("./getComputeSubnetworkIamPolicy").getComputeSubnetworkIamPolicy = null as any;
export const getComputeSubnetworkIamPolicyOutput: typeof import("./getComputeSubnetworkIamPolicy").getComputeSubnetworkIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSubnetworkIamPolicy","getComputeSubnetworkIamPolicyOutput"], () => require("./getComputeSubnetworkIamPolicy"));

export { GetComputeSubnetworksArgs, GetComputeSubnetworksResult, GetComputeSubnetworksOutputArgs } from "./getComputeSubnetworks";
export const getComputeSubnetworks: typeof import("./getComputeSubnetworks").getComputeSubnetworks = null as any;
export const getComputeSubnetworksOutput: typeof import("./getComputeSubnetworks").getComputeSubnetworksOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSubnetworks","getComputeSubnetworksOutput"], () => require("./getComputeSubnetworks"));

export { GetComputeVpnGatewayArgs, GetComputeVpnGatewayResult, GetComputeVpnGatewayOutputArgs } from "./getComputeVpnGateway";
export const getComputeVpnGateway: typeof import("./getComputeVpnGateway").getComputeVpnGateway = null as any;
export const getComputeVpnGatewayOutput: typeof import("./getComputeVpnGateway").getComputeVpnGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getComputeVpnGateway","getComputeVpnGatewayOutput"], () => require("./getComputeVpnGateway"));

export { GetComputeZonesArgs, GetComputeZonesResult, GetComputeZonesOutputArgs } from "./getComputeZones";
export const getComputeZones: typeof import("./getComputeZones").getComputeZones = null as any;
export const getComputeZonesOutput: typeof import("./getComputeZones").getComputeZonesOutput = null as any;
utilities.lazyLoad(exports, ["getComputeZones","getComputeZonesOutput"], () => require("./getComputeZones"));

export { GetContainerAnalysisNoteIamPolicyArgs, GetContainerAnalysisNoteIamPolicyResult, GetContainerAnalysisNoteIamPolicyOutputArgs } from "./getContainerAnalysisNoteIamPolicy";
export const getContainerAnalysisNoteIamPolicy: typeof import("./getContainerAnalysisNoteIamPolicy").getContainerAnalysisNoteIamPolicy = null as any;
export const getContainerAnalysisNoteIamPolicyOutput: typeof import("./getContainerAnalysisNoteIamPolicy").getContainerAnalysisNoteIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getContainerAnalysisNoteIamPolicy","getContainerAnalysisNoteIamPolicyOutput"], () => require("./getContainerAnalysisNoteIamPolicy"));

export { GetContainerAttachedInstallManifestArgs, GetContainerAttachedInstallManifestResult, GetContainerAttachedInstallManifestOutputArgs } from "./getContainerAttachedInstallManifest";
export const getContainerAttachedInstallManifest: typeof import("./getContainerAttachedInstallManifest").getContainerAttachedInstallManifest = null as any;
export const getContainerAttachedInstallManifestOutput: typeof import("./getContainerAttachedInstallManifest").getContainerAttachedInstallManifestOutput = null as any;
utilities.lazyLoad(exports, ["getContainerAttachedInstallManifest","getContainerAttachedInstallManifestOutput"], () => require("./getContainerAttachedInstallManifest"));

export { GetContainerAttachedVersionsArgs, GetContainerAttachedVersionsResult, GetContainerAttachedVersionsOutputArgs } from "./getContainerAttachedVersions";
export const getContainerAttachedVersions: typeof import("./getContainerAttachedVersions").getContainerAttachedVersions = null as any;
export const getContainerAttachedVersionsOutput: typeof import("./getContainerAttachedVersions").getContainerAttachedVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerAttachedVersions","getContainerAttachedVersionsOutput"], () => require("./getContainerAttachedVersions"));

export { GetContainerAwsVersionsArgs, GetContainerAwsVersionsResult, GetContainerAwsVersionsOutputArgs } from "./getContainerAwsVersions";
export const getContainerAwsVersions: typeof import("./getContainerAwsVersions").getContainerAwsVersions = null as any;
export const getContainerAwsVersionsOutput: typeof import("./getContainerAwsVersions").getContainerAwsVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerAwsVersions","getContainerAwsVersionsOutput"], () => require("./getContainerAwsVersions"));

export { GetContainerAzureVersionsArgs, GetContainerAzureVersionsResult, GetContainerAzureVersionsOutputArgs } from "./getContainerAzureVersions";
export const getContainerAzureVersions: typeof import("./getContainerAzureVersions").getContainerAzureVersions = null as any;
export const getContainerAzureVersionsOutput: typeof import("./getContainerAzureVersions").getContainerAzureVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerAzureVersions","getContainerAzureVersionsOutput"], () => require("./getContainerAzureVersions"));

export { GetContainerClusterArgs, GetContainerClusterResult, GetContainerClusterOutputArgs } from "./getContainerCluster";
export const getContainerCluster: typeof import("./getContainerCluster").getContainerCluster = null as any;
export const getContainerClusterOutput: typeof import("./getContainerCluster").getContainerClusterOutput = null as any;
utilities.lazyLoad(exports, ["getContainerCluster","getContainerClusterOutput"], () => require("./getContainerCluster"));

export { GetContainerEngineVersionsArgs, GetContainerEngineVersionsResult, GetContainerEngineVersionsOutputArgs } from "./getContainerEngineVersions";
export const getContainerEngineVersions: typeof import("./getContainerEngineVersions").getContainerEngineVersions = null as any;
export const getContainerEngineVersionsOutput: typeof import("./getContainerEngineVersions").getContainerEngineVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerEngineVersions","getContainerEngineVersionsOutput"], () => require("./getContainerEngineVersions"));

export { GetContainerRegistryImageArgs, GetContainerRegistryImageResult, GetContainerRegistryImageOutputArgs } from "./getContainerRegistryImage";
export const getContainerRegistryImage: typeof import("./getContainerRegistryImage").getContainerRegistryImage = null as any;
export const getContainerRegistryImageOutput: typeof import("./getContainerRegistryImage").getContainerRegistryImageOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistryImage","getContainerRegistryImageOutput"], () => require("./getContainerRegistryImage"));

export { GetContainerRegistryRepositoryArgs, GetContainerRegistryRepositoryResult, GetContainerRegistryRepositoryOutputArgs } from "./getContainerRegistryRepository";
export const getContainerRegistryRepository: typeof import("./getContainerRegistryRepository").getContainerRegistryRepository = null as any;
export const getContainerRegistryRepositoryOutput: typeof import("./getContainerRegistryRepository").getContainerRegistryRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistryRepository","getContainerRegistryRepositoryOutput"], () => require("./getContainerRegistryRepository"));

export { GetDataCatalogEntryGroupIamPolicyArgs, GetDataCatalogEntryGroupIamPolicyResult, GetDataCatalogEntryGroupIamPolicyOutputArgs } from "./getDataCatalogEntryGroupIamPolicy";
export const getDataCatalogEntryGroupIamPolicy: typeof import("./getDataCatalogEntryGroupIamPolicy").getDataCatalogEntryGroupIamPolicy = null as any;
export const getDataCatalogEntryGroupIamPolicyOutput: typeof import("./getDataCatalogEntryGroupIamPolicy").getDataCatalogEntryGroupIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataCatalogEntryGroupIamPolicy","getDataCatalogEntryGroupIamPolicyOutput"], () => require("./getDataCatalogEntryGroupIamPolicy"));

export { GetDataCatalogPolicyTagIamPolicyArgs, GetDataCatalogPolicyTagIamPolicyResult, GetDataCatalogPolicyTagIamPolicyOutputArgs } from "./getDataCatalogPolicyTagIamPolicy";
export const getDataCatalogPolicyTagIamPolicy: typeof import("./getDataCatalogPolicyTagIamPolicy").getDataCatalogPolicyTagIamPolicy = null as any;
export const getDataCatalogPolicyTagIamPolicyOutput: typeof import("./getDataCatalogPolicyTagIamPolicy").getDataCatalogPolicyTagIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataCatalogPolicyTagIamPolicy","getDataCatalogPolicyTagIamPolicyOutput"], () => require("./getDataCatalogPolicyTagIamPolicy"));

export { GetDataCatalogTagTemplateIamPolicyArgs, GetDataCatalogTagTemplateIamPolicyResult, GetDataCatalogTagTemplateIamPolicyOutputArgs } from "./getDataCatalogTagTemplateIamPolicy";
export const getDataCatalogTagTemplateIamPolicy: typeof import("./getDataCatalogTagTemplateIamPolicy").getDataCatalogTagTemplateIamPolicy = null as any;
export const getDataCatalogTagTemplateIamPolicyOutput: typeof import("./getDataCatalogTagTemplateIamPolicy").getDataCatalogTagTemplateIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataCatalogTagTemplateIamPolicy","getDataCatalogTagTemplateIamPolicyOutput"], () => require("./getDataCatalogTagTemplateIamPolicy"));

export { GetDataCatalogTaxonomyIamPolicyArgs, GetDataCatalogTaxonomyIamPolicyResult, GetDataCatalogTaxonomyIamPolicyOutputArgs } from "./getDataCatalogTaxonomyIamPolicy";
export const getDataCatalogTaxonomyIamPolicy: typeof import("./getDataCatalogTaxonomyIamPolicy").getDataCatalogTaxonomyIamPolicy = null as any;
export const getDataCatalogTaxonomyIamPolicyOutput: typeof import("./getDataCatalogTaxonomyIamPolicy").getDataCatalogTaxonomyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataCatalogTaxonomyIamPolicy","getDataCatalogTaxonomyIamPolicyOutput"], () => require("./getDataCatalogTaxonomyIamPolicy"));

export { GetDataFusionInstanceIamPolicyArgs, GetDataFusionInstanceIamPolicyResult, GetDataFusionInstanceIamPolicyOutputArgs } from "./getDataFusionInstanceIamPolicy";
export const getDataFusionInstanceIamPolicy: typeof import("./getDataFusionInstanceIamPolicy").getDataFusionInstanceIamPolicy = null as any;
export const getDataFusionInstanceIamPolicyOutput: typeof import("./getDataFusionInstanceIamPolicy").getDataFusionInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataFusionInstanceIamPolicy","getDataFusionInstanceIamPolicyOutput"], () => require("./getDataFusionInstanceIamPolicy"));

export { GetDataformRepositoryIamPolicyArgs, GetDataformRepositoryIamPolicyResult, GetDataformRepositoryIamPolicyOutputArgs } from "./getDataformRepositoryIamPolicy";
export const getDataformRepositoryIamPolicy: typeof import("./getDataformRepositoryIamPolicy").getDataformRepositoryIamPolicy = null as any;
export const getDataformRepositoryIamPolicyOutput: typeof import("./getDataformRepositoryIamPolicy").getDataformRepositoryIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataformRepositoryIamPolicy","getDataformRepositoryIamPolicyOutput"], () => require("./getDataformRepositoryIamPolicy"));

export { GetDataplexAspectTypeIamPolicyArgs, GetDataplexAspectTypeIamPolicyResult, GetDataplexAspectTypeIamPolicyOutputArgs } from "./getDataplexAspectTypeIamPolicy";
export const getDataplexAspectTypeIamPolicy: typeof import("./getDataplexAspectTypeIamPolicy").getDataplexAspectTypeIamPolicy = null as any;
export const getDataplexAspectTypeIamPolicyOutput: typeof import("./getDataplexAspectTypeIamPolicy").getDataplexAspectTypeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataplexAspectTypeIamPolicy","getDataplexAspectTypeIamPolicyOutput"], () => require("./getDataplexAspectTypeIamPolicy"));

export { GetDataplexAssetIamPolicyArgs, GetDataplexAssetIamPolicyResult, GetDataplexAssetIamPolicyOutputArgs } from "./getDataplexAssetIamPolicy";
export const getDataplexAssetIamPolicy: typeof import("./getDataplexAssetIamPolicy").getDataplexAssetIamPolicy = null as any;
export const getDataplexAssetIamPolicyOutput: typeof import("./getDataplexAssetIamPolicy").getDataplexAssetIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataplexAssetIamPolicy","getDataplexAssetIamPolicyOutput"], () => require("./getDataplexAssetIamPolicy"));

export { GetDataplexDatascanIamPolicyArgs, GetDataplexDatascanIamPolicyResult, GetDataplexDatascanIamPolicyOutputArgs } from "./getDataplexDatascanIamPolicy";
export const getDataplexDatascanIamPolicy: typeof import("./getDataplexDatascanIamPolicy").getDataplexDatascanIamPolicy = null as any;
export const getDataplexDatascanIamPolicyOutput: typeof import("./getDataplexDatascanIamPolicy").getDataplexDatascanIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataplexDatascanIamPolicy","getDataplexDatascanIamPolicyOutput"], () => require("./getDataplexDatascanIamPolicy"));

export { GetDataplexEntryGroupIamPolicyArgs, GetDataplexEntryGroupIamPolicyResult, GetDataplexEntryGroupIamPolicyOutputArgs } from "./getDataplexEntryGroupIamPolicy";
export const getDataplexEntryGroupIamPolicy: typeof import("./getDataplexEntryGroupIamPolicy").getDataplexEntryGroupIamPolicy = null as any;
export const getDataplexEntryGroupIamPolicyOutput: typeof import("./getDataplexEntryGroupIamPolicy").getDataplexEntryGroupIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataplexEntryGroupIamPolicy","getDataplexEntryGroupIamPolicyOutput"], () => require("./getDataplexEntryGroupIamPolicy"));

export { GetDataplexEntryTypeIamPolicyArgs, GetDataplexEntryTypeIamPolicyResult, GetDataplexEntryTypeIamPolicyOutputArgs } from "./getDataplexEntryTypeIamPolicy";
export const getDataplexEntryTypeIamPolicy: typeof import("./getDataplexEntryTypeIamPolicy").getDataplexEntryTypeIamPolicy = null as any;
export const getDataplexEntryTypeIamPolicyOutput: typeof import("./getDataplexEntryTypeIamPolicy").getDataplexEntryTypeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataplexEntryTypeIamPolicy","getDataplexEntryTypeIamPolicyOutput"], () => require("./getDataplexEntryTypeIamPolicy"));

export { GetDataplexLakeIamPolicyArgs, GetDataplexLakeIamPolicyResult, GetDataplexLakeIamPolicyOutputArgs } from "./getDataplexLakeIamPolicy";
export const getDataplexLakeIamPolicy: typeof import("./getDataplexLakeIamPolicy").getDataplexLakeIamPolicy = null as any;
export const getDataplexLakeIamPolicyOutput: typeof import("./getDataplexLakeIamPolicy").getDataplexLakeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataplexLakeIamPolicy","getDataplexLakeIamPolicyOutput"], () => require("./getDataplexLakeIamPolicy"));

export { GetDataplexTaskIamPolicyArgs, GetDataplexTaskIamPolicyResult, GetDataplexTaskIamPolicyOutputArgs } from "./getDataplexTaskIamPolicy";
export const getDataplexTaskIamPolicy: typeof import("./getDataplexTaskIamPolicy").getDataplexTaskIamPolicy = null as any;
export const getDataplexTaskIamPolicyOutput: typeof import("./getDataplexTaskIamPolicy").getDataplexTaskIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataplexTaskIamPolicy","getDataplexTaskIamPolicyOutput"], () => require("./getDataplexTaskIamPolicy"));

export { GetDataplexZoneIamPolicyArgs, GetDataplexZoneIamPolicyResult, GetDataplexZoneIamPolicyOutputArgs } from "./getDataplexZoneIamPolicy";
export const getDataplexZoneIamPolicy: typeof import("./getDataplexZoneIamPolicy").getDataplexZoneIamPolicy = null as any;
export const getDataplexZoneIamPolicyOutput: typeof import("./getDataplexZoneIamPolicy").getDataplexZoneIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataplexZoneIamPolicy","getDataplexZoneIamPolicyOutput"], () => require("./getDataplexZoneIamPolicy"));

export { GetDataprocAutoscalingPolicyIamPolicyArgs, GetDataprocAutoscalingPolicyIamPolicyResult, GetDataprocAutoscalingPolicyIamPolicyOutputArgs } from "./getDataprocAutoscalingPolicyIamPolicy";
export const getDataprocAutoscalingPolicyIamPolicy: typeof import("./getDataprocAutoscalingPolicyIamPolicy").getDataprocAutoscalingPolicyIamPolicy = null as any;
export const getDataprocAutoscalingPolicyIamPolicyOutput: typeof import("./getDataprocAutoscalingPolicyIamPolicy").getDataprocAutoscalingPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataprocAutoscalingPolicyIamPolicy","getDataprocAutoscalingPolicyIamPolicyOutput"], () => require("./getDataprocAutoscalingPolicyIamPolicy"));

export { GetDataprocClusterIamPolicyArgs, GetDataprocClusterIamPolicyResult, GetDataprocClusterIamPolicyOutputArgs } from "./getDataprocClusterIamPolicy";
export const getDataprocClusterIamPolicy: typeof import("./getDataprocClusterIamPolicy").getDataprocClusterIamPolicy = null as any;
export const getDataprocClusterIamPolicyOutput: typeof import("./getDataprocClusterIamPolicy").getDataprocClusterIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataprocClusterIamPolicy","getDataprocClusterIamPolicyOutput"], () => require("./getDataprocClusterIamPolicy"));

export { GetDataprocJobIamPolicyArgs, GetDataprocJobIamPolicyResult, GetDataprocJobIamPolicyOutputArgs } from "./getDataprocJobIamPolicy";
export const getDataprocJobIamPolicy: typeof import("./getDataprocJobIamPolicy").getDataprocJobIamPolicy = null as any;
export const getDataprocJobIamPolicyOutput: typeof import("./getDataprocJobIamPolicy").getDataprocJobIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataprocJobIamPolicy","getDataprocJobIamPolicyOutput"], () => require("./getDataprocJobIamPolicy"));

export { GetDataprocMetastoreFederationIamPolicyArgs, GetDataprocMetastoreFederationIamPolicyResult, GetDataprocMetastoreFederationIamPolicyOutputArgs } from "./getDataprocMetastoreFederationIamPolicy";
export const getDataprocMetastoreFederationIamPolicy: typeof import("./getDataprocMetastoreFederationIamPolicy").getDataprocMetastoreFederationIamPolicy = null as any;
export const getDataprocMetastoreFederationIamPolicyOutput: typeof import("./getDataprocMetastoreFederationIamPolicy").getDataprocMetastoreFederationIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataprocMetastoreFederationIamPolicy","getDataprocMetastoreFederationIamPolicyOutput"], () => require("./getDataprocMetastoreFederationIamPolicy"));

export { GetDataprocMetastoreServiceArgs, GetDataprocMetastoreServiceResult, GetDataprocMetastoreServiceOutputArgs } from "./getDataprocMetastoreService";
export const getDataprocMetastoreService: typeof import("./getDataprocMetastoreService").getDataprocMetastoreService = null as any;
export const getDataprocMetastoreServiceOutput: typeof import("./getDataprocMetastoreService").getDataprocMetastoreServiceOutput = null as any;
utilities.lazyLoad(exports, ["getDataprocMetastoreService","getDataprocMetastoreServiceOutput"], () => require("./getDataprocMetastoreService"));

export { GetDataprocMetastoreServiceIamPolicyArgs, GetDataprocMetastoreServiceIamPolicyResult, GetDataprocMetastoreServiceIamPolicyOutputArgs } from "./getDataprocMetastoreServiceIamPolicy";
export const getDataprocMetastoreServiceIamPolicy: typeof import("./getDataprocMetastoreServiceIamPolicy").getDataprocMetastoreServiceIamPolicy = null as any;
export const getDataprocMetastoreServiceIamPolicyOutput: typeof import("./getDataprocMetastoreServiceIamPolicy").getDataprocMetastoreServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataprocMetastoreServiceIamPolicy","getDataprocMetastoreServiceIamPolicyOutput"], () => require("./getDataprocMetastoreServiceIamPolicy"));

export { GetDatastreamStaticIpsArgs, GetDatastreamStaticIpsResult, GetDatastreamStaticIpsOutputArgs } from "./getDatastreamStaticIps";
export const getDatastreamStaticIps: typeof import("./getDatastreamStaticIps").getDatastreamStaticIps = null as any;
export const getDatastreamStaticIpsOutput: typeof import("./getDatastreamStaticIps").getDatastreamStaticIpsOutput = null as any;
utilities.lazyLoad(exports, ["getDatastreamStaticIps","getDatastreamStaticIpsOutput"], () => require("./getDatastreamStaticIps"));

export { GetDnsKeysArgs, GetDnsKeysResult, GetDnsKeysOutputArgs } from "./getDnsKeys";
export const getDnsKeys: typeof import("./getDnsKeys").getDnsKeys = null as any;
export const getDnsKeysOutput: typeof import("./getDnsKeys").getDnsKeysOutput = null as any;
utilities.lazyLoad(exports, ["getDnsKeys","getDnsKeysOutput"], () => require("./getDnsKeys"));

export { GetDnsManagedZoneArgs, GetDnsManagedZoneResult, GetDnsManagedZoneOutputArgs } from "./getDnsManagedZone";
export const getDnsManagedZone: typeof import("./getDnsManagedZone").getDnsManagedZone = null as any;
export const getDnsManagedZoneOutput: typeof import("./getDnsManagedZone").getDnsManagedZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDnsManagedZone","getDnsManagedZoneOutput"], () => require("./getDnsManagedZone"));

export { GetDnsManagedZoneIamPolicyArgs, GetDnsManagedZoneIamPolicyResult, GetDnsManagedZoneIamPolicyOutputArgs } from "./getDnsManagedZoneIamPolicy";
export const getDnsManagedZoneIamPolicy: typeof import("./getDnsManagedZoneIamPolicy").getDnsManagedZoneIamPolicy = null as any;
export const getDnsManagedZoneIamPolicyOutput: typeof import("./getDnsManagedZoneIamPolicy").getDnsManagedZoneIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDnsManagedZoneIamPolicy","getDnsManagedZoneIamPolicyOutput"], () => require("./getDnsManagedZoneIamPolicy"));

export { GetDnsManagedZonesArgs, GetDnsManagedZonesResult, GetDnsManagedZonesOutputArgs } from "./getDnsManagedZones";
export const getDnsManagedZones: typeof import("./getDnsManagedZones").getDnsManagedZones = null as any;
export const getDnsManagedZonesOutput: typeof import("./getDnsManagedZones").getDnsManagedZonesOutput = null as any;
utilities.lazyLoad(exports, ["getDnsManagedZones","getDnsManagedZonesOutput"], () => require("./getDnsManagedZones"));

export { GetDnsRecordSetArgs, GetDnsRecordSetResult, GetDnsRecordSetOutputArgs } from "./getDnsRecordSet";
export const getDnsRecordSet: typeof import("./getDnsRecordSet").getDnsRecordSet = null as any;
export const getDnsRecordSetOutput: typeof import("./getDnsRecordSet").getDnsRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecordSet","getDnsRecordSetOutput"], () => require("./getDnsRecordSet"));

export { GetEndpointsServiceConsumersIamPolicyArgs, GetEndpointsServiceConsumersIamPolicyResult, GetEndpointsServiceConsumersIamPolicyOutputArgs } from "./getEndpointsServiceConsumersIamPolicy";
export const getEndpointsServiceConsumersIamPolicy: typeof import("./getEndpointsServiceConsumersIamPolicy").getEndpointsServiceConsumersIamPolicy = null as any;
export const getEndpointsServiceConsumersIamPolicyOutput: typeof import("./getEndpointsServiceConsumersIamPolicy").getEndpointsServiceConsumersIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointsServiceConsumersIamPolicy","getEndpointsServiceConsumersIamPolicyOutput"], () => require("./getEndpointsServiceConsumersIamPolicy"));

export { GetEndpointsServiceIamPolicyArgs, GetEndpointsServiceIamPolicyResult, GetEndpointsServiceIamPolicyOutputArgs } from "./getEndpointsServiceIamPolicy";
export const getEndpointsServiceIamPolicy: typeof import("./getEndpointsServiceIamPolicy").getEndpointsServiceIamPolicy = null as any;
export const getEndpointsServiceIamPolicyOutput: typeof import("./getEndpointsServiceIamPolicy").getEndpointsServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointsServiceIamPolicy","getEndpointsServiceIamPolicyOutput"], () => require("./getEndpointsServiceIamPolicy"));

export { GetFilestoreInstanceArgs, GetFilestoreInstanceResult, GetFilestoreInstanceOutputArgs } from "./getFilestoreInstance";
export const getFilestoreInstance: typeof import("./getFilestoreInstance").getFilestoreInstance = null as any;
export const getFilestoreInstanceOutput: typeof import("./getFilestoreInstance").getFilestoreInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getFilestoreInstance","getFilestoreInstanceOutput"], () => require("./getFilestoreInstance"));

export { GetFirebaseAndroidAppArgs, GetFirebaseAndroidAppResult, GetFirebaseAndroidAppOutputArgs } from "./getFirebaseAndroidApp";
export const getFirebaseAndroidApp: typeof import("./getFirebaseAndroidApp").getFirebaseAndroidApp = null as any;
export const getFirebaseAndroidAppOutput: typeof import("./getFirebaseAndroidApp").getFirebaseAndroidAppOutput = null as any;
utilities.lazyLoad(exports, ["getFirebaseAndroidApp","getFirebaseAndroidAppOutput"], () => require("./getFirebaseAndroidApp"));

export { GetFirebaseAndroidAppConfigArgs, GetFirebaseAndroidAppConfigResult, GetFirebaseAndroidAppConfigOutputArgs } from "./getFirebaseAndroidAppConfig";
export const getFirebaseAndroidAppConfig: typeof import("./getFirebaseAndroidAppConfig").getFirebaseAndroidAppConfig = null as any;
export const getFirebaseAndroidAppConfigOutput: typeof import("./getFirebaseAndroidAppConfig").getFirebaseAndroidAppConfigOutput = null as any;
utilities.lazyLoad(exports, ["getFirebaseAndroidAppConfig","getFirebaseAndroidAppConfigOutput"], () => require("./getFirebaseAndroidAppConfig"));

export { GetFirebaseAppleAppArgs, GetFirebaseAppleAppResult, GetFirebaseAppleAppOutputArgs } from "./getFirebaseAppleApp";
export const getFirebaseAppleApp: typeof import("./getFirebaseAppleApp").getFirebaseAppleApp = null as any;
export const getFirebaseAppleAppOutput: typeof import("./getFirebaseAppleApp").getFirebaseAppleAppOutput = null as any;
utilities.lazyLoad(exports, ["getFirebaseAppleApp","getFirebaseAppleAppOutput"], () => require("./getFirebaseAppleApp"));

export { GetFirebaseAppleAppConfigArgs, GetFirebaseAppleAppConfigResult, GetFirebaseAppleAppConfigOutputArgs } from "./getFirebaseAppleAppConfig";
export const getFirebaseAppleAppConfig: typeof import("./getFirebaseAppleAppConfig").getFirebaseAppleAppConfig = null as any;
export const getFirebaseAppleAppConfigOutput: typeof import("./getFirebaseAppleAppConfig").getFirebaseAppleAppConfigOutput = null as any;
utilities.lazyLoad(exports, ["getFirebaseAppleAppConfig","getFirebaseAppleAppConfigOutput"], () => require("./getFirebaseAppleAppConfig"));

export { GetFirebaseHostingChannelArgs, GetFirebaseHostingChannelResult, GetFirebaseHostingChannelOutputArgs } from "./getFirebaseHostingChannel";
export const getFirebaseHostingChannel: typeof import("./getFirebaseHostingChannel").getFirebaseHostingChannel = null as any;
export const getFirebaseHostingChannelOutput: typeof import("./getFirebaseHostingChannel").getFirebaseHostingChannelOutput = null as any;
utilities.lazyLoad(exports, ["getFirebaseHostingChannel","getFirebaseHostingChannelOutput"], () => require("./getFirebaseHostingChannel"));

export { GetFirebaseWebAppArgs, GetFirebaseWebAppResult, GetFirebaseWebAppOutputArgs } from "./getFirebaseWebApp";
export const getFirebaseWebApp: typeof import("./getFirebaseWebApp").getFirebaseWebApp = null as any;
export const getFirebaseWebAppOutput: typeof import("./getFirebaseWebApp").getFirebaseWebAppOutput = null as any;
utilities.lazyLoad(exports, ["getFirebaseWebApp","getFirebaseWebAppOutput"], () => require("./getFirebaseWebApp"));

export { GetFirebaseWebAppConfigArgs, GetFirebaseWebAppConfigResult, GetFirebaseWebAppConfigOutputArgs } from "./getFirebaseWebAppConfig";
export const getFirebaseWebAppConfig: typeof import("./getFirebaseWebAppConfig").getFirebaseWebAppConfig = null as any;
export const getFirebaseWebAppConfigOutput: typeof import("./getFirebaseWebAppConfig").getFirebaseWebAppConfigOutput = null as any;
utilities.lazyLoad(exports, ["getFirebaseWebAppConfig","getFirebaseWebAppConfigOutput"], () => require("./getFirebaseWebAppConfig"));

export { GetFolderArgs, GetFolderResult, GetFolderOutputArgs } from "./getFolder";
export const getFolder: typeof import("./getFolder").getFolder = null as any;
export const getFolderOutput: typeof import("./getFolder").getFolderOutput = null as any;
utilities.lazyLoad(exports, ["getFolder","getFolderOutput"], () => require("./getFolder"));

export { GetFolderIamPolicyArgs, GetFolderIamPolicyResult, GetFolderIamPolicyOutputArgs } from "./getFolderIamPolicy";
export const getFolderIamPolicy: typeof import("./getFolderIamPolicy").getFolderIamPolicy = null as any;
export const getFolderIamPolicyOutput: typeof import("./getFolderIamPolicy").getFolderIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFolderIamPolicy","getFolderIamPolicyOutput"], () => require("./getFolderIamPolicy"));

export { GetFolderOrganizationPolicyArgs, GetFolderOrganizationPolicyResult, GetFolderOrganizationPolicyOutputArgs } from "./getFolderOrganizationPolicy";
export const getFolderOrganizationPolicy: typeof import("./getFolderOrganizationPolicy").getFolderOrganizationPolicy = null as any;
export const getFolderOrganizationPolicyOutput: typeof import("./getFolderOrganizationPolicy").getFolderOrganizationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFolderOrganizationPolicy","getFolderOrganizationPolicyOutput"], () => require("./getFolderOrganizationPolicy"));

export { GetFoldersArgs, GetFoldersResult, GetFoldersOutputArgs } from "./getFolders";
export const getFolders: typeof import("./getFolders").getFolders = null as any;
export const getFoldersOutput: typeof import("./getFolders").getFoldersOutput = null as any;
utilities.lazyLoad(exports, ["getFolders","getFoldersOutput"], () => require("./getFolders"));

export { GetGkeBackupBackupPlanIamPolicyArgs, GetGkeBackupBackupPlanIamPolicyResult, GetGkeBackupBackupPlanIamPolicyOutputArgs } from "./getGkeBackupBackupPlanIamPolicy";
export const getGkeBackupBackupPlanIamPolicy: typeof import("./getGkeBackupBackupPlanIamPolicy").getGkeBackupBackupPlanIamPolicy = null as any;
export const getGkeBackupBackupPlanIamPolicyOutput: typeof import("./getGkeBackupBackupPlanIamPolicy").getGkeBackupBackupPlanIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getGkeBackupBackupPlanIamPolicy","getGkeBackupBackupPlanIamPolicyOutput"], () => require("./getGkeBackupBackupPlanIamPolicy"));

export { GetGkeBackupRestorePlanIamPolicyArgs, GetGkeBackupRestorePlanIamPolicyResult, GetGkeBackupRestorePlanIamPolicyOutputArgs } from "./getGkeBackupRestorePlanIamPolicy";
export const getGkeBackupRestorePlanIamPolicy: typeof import("./getGkeBackupRestorePlanIamPolicy").getGkeBackupRestorePlanIamPolicy = null as any;
export const getGkeBackupRestorePlanIamPolicyOutput: typeof import("./getGkeBackupRestorePlanIamPolicy").getGkeBackupRestorePlanIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getGkeBackupRestorePlanIamPolicy","getGkeBackupRestorePlanIamPolicyOutput"], () => require("./getGkeBackupRestorePlanIamPolicy"));

export { GetGkeHubFeatureIamPolicyArgs, GetGkeHubFeatureIamPolicyResult, GetGkeHubFeatureIamPolicyOutputArgs } from "./getGkeHubFeatureIamPolicy";
export const getGkeHubFeatureIamPolicy: typeof import("./getGkeHubFeatureIamPolicy").getGkeHubFeatureIamPolicy = null as any;
export const getGkeHubFeatureIamPolicyOutput: typeof import("./getGkeHubFeatureIamPolicy").getGkeHubFeatureIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getGkeHubFeatureIamPolicy","getGkeHubFeatureIamPolicyOutput"], () => require("./getGkeHubFeatureIamPolicy"));

export { GetGkeHubMembershipBindingArgs, GetGkeHubMembershipBindingResult, GetGkeHubMembershipBindingOutputArgs } from "./getGkeHubMembershipBinding";
export const getGkeHubMembershipBinding: typeof import("./getGkeHubMembershipBinding").getGkeHubMembershipBinding = null as any;
export const getGkeHubMembershipBindingOutput: typeof import("./getGkeHubMembershipBinding").getGkeHubMembershipBindingOutput = null as any;
utilities.lazyLoad(exports, ["getGkeHubMembershipBinding","getGkeHubMembershipBindingOutput"], () => require("./getGkeHubMembershipBinding"));

export { GetGkeHubMembershipIamPolicyArgs, GetGkeHubMembershipIamPolicyResult, GetGkeHubMembershipIamPolicyOutputArgs } from "./getGkeHubMembershipIamPolicy";
export const getGkeHubMembershipIamPolicy: typeof import("./getGkeHubMembershipIamPolicy").getGkeHubMembershipIamPolicy = null as any;
export const getGkeHubMembershipIamPolicyOutput: typeof import("./getGkeHubMembershipIamPolicy").getGkeHubMembershipIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getGkeHubMembershipIamPolicy","getGkeHubMembershipIamPolicyOutput"], () => require("./getGkeHubMembershipIamPolicy"));

export { GetGkeHubScopeIamPolicyArgs, GetGkeHubScopeIamPolicyResult, GetGkeHubScopeIamPolicyOutputArgs } from "./getGkeHubScopeIamPolicy";
export const getGkeHubScopeIamPolicy: typeof import("./getGkeHubScopeIamPolicy").getGkeHubScopeIamPolicy = null as any;
export const getGkeHubScopeIamPolicyOutput: typeof import("./getGkeHubScopeIamPolicy").getGkeHubScopeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getGkeHubScopeIamPolicy","getGkeHubScopeIamPolicyOutput"], () => require("./getGkeHubScopeIamPolicy"));

export { GetHealthcareConsentStoreIamPolicyArgs, GetHealthcareConsentStoreIamPolicyResult, GetHealthcareConsentStoreIamPolicyOutputArgs } from "./getHealthcareConsentStoreIamPolicy";
export const getHealthcareConsentStoreIamPolicy: typeof import("./getHealthcareConsentStoreIamPolicy").getHealthcareConsentStoreIamPolicy = null as any;
export const getHealthcareConsentStoreIamPolicyOutput: typeof import("./getHealthcareConsentStoreIamPolicy").getHealthcareConsentStoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHealthcareConsentStoreIamPolicy","getHealthcareConsentStoreIamPolicyOutput"], () => require("./getHealthcareConsentStoreIamPolicy"));

export { GetHealthcareDatasetIamPolicyArgs, GetHealthcareDatasetIamPolicyResult, GetHealthcareDatasetIamPolicyOutputArgs } from "./getHealthcareDatasetIamPolicy";
export const getHealthcareDatasetIamPolicy: typeof import("./getHealthcareDatasetIamPolicy").getHealthcareDatasetIamPolicy = null as any;
export const getHealthcareDatasetIamPolicyOutput: typeof import("./getHealthcareDatasetIamPolicy").getHealthcareDatasetIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHealthcareDatasetIamPolicy","getHealthcareDatasetIamPolicyOutput"], () => require("./getHealthcareDatasetIamPolicy"));

export { GetHealthcareDicomStoreIamPolicyArgs, GetHealthcareDicomStoreIamPolicyResult, GetHealthcareDicomStoreIamPolicyOutputArgs } from "./getHealthcareDicomStoreIamPolicy";
export const getHealthcareDicomStoreIamPolicy: typeof import("./getHealthcareDicomStoreIamPolicy").getHealthcareDicomStoreIamPolicy = null as any;
export const getHealthcareDicomStoreIamPolicyOutput: typeof import("./getHealthcareDicomStoreIamPolicy").getHealthcareDicomStoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHealthcareDicomStoreIamPolicy","getHealthcareDicomStoreIamPolicyOutput"], () => require("./getHealthcareDicomStoreIamPolicy"));

export { GetHealthcareFhirStoreIamPolicyArgs, GetHealthcareFhirStoreIamPolicyResult, GetHealthcareFhirStoreIamPolicyOutputArgs } from "./getHealthcareFhirStoreIamPolicy";
export const getHealthcareFhirStoreIamPolicy: typeof import("./getHealthcareFhirStoreIamPolicy").getHealthcareFhirStoreIamPolicy = null as any;
export const getHealthcareFhirStoreIamPolicyOutput: typeof import("./getHealthcareFhirStoreIamPolicy").getHealthcareFhirStoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHealthcareFhirStoreIamPolicy","getHealthcareFhirStoreIamPolicyOutput"], () => require("./getHealthcareFhirStoreIamPolicy"));

export { GetHealthcareHl7V2StoreIamPolicyArgs, GetHealthcareHl7V2StoreIamPolicyResult, GetHealthcareHl7V2StoreIamPolicyOutputArgs } from "./getHealthcareHl7V2StoreIamPolicy";
export const getHealthcareHl7V2StoreIamPolicy: typeof import("./getHealthcareHl7V2StoreIamPolicy").getHealthcareHl7V2StoreIamPolicy = null as any;
export const getHealthcareHl7V2StoreIamPolicyOutput: typeof import("./getHealthcareHl7V2StoreIamPolicy").getHealthcareHl7V2StoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHealthcareHl7V2StoreIamPolicy","getHealthcareHl7V2StoreIamPolicyOutput"], () => require("./getHealthcareHl7V2StoreIamPolicy"));

export { GetIamPolicyArgs, GetIamPolicyResult, GetIamPolicyOutputArgs } from "./getIamPolicy";
export const getIamPolicy: typeof import("./getIamPolicy").getIamPolicy = null as any;
export const getIamPolicyOutput: typeof import("./getIamPolicy").getIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicy","getIamPolicyOutput"], () => require("./getIamPolicy"));

export { GetIamRoleArgs, GetIamRoleResult, GetIamRoleOutputArgs } from "./getIamRole";
export const getIamRole: typeof import("./getIamRole").getIamRole = null as any;
export const getIamRoleOutput: typeof import("./getIamRole").getIamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamRole","getIamRoleOutput"], () => require("./getIamRole"));

export { GetIamTestablePermissionsArgs, GetIamTestablePermissionsResult, GetIamTestablePermissionsOutputArgs } from "./getIamTestablePermissions";
export const getIamTestablePermissions: typeof import("./getIamTestablePermissions").getIamTestablePermissions = null as any;
export const getIamTestablePermissionsOutput: typeof import("./getIamTestablePermissions").getIamTestablePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getIamTestablePermissions","getIamTestablePermissionsOutput"], () => require("./getIamTestablePermissions"));

export { GetIamWorkloadIdentityPoolArgs, GetIamWorkloadIdentityPoolResult, GetIamWorkloadIdentityPoolOutputArgs } from "./getIamWorkloadIdentityPool";
export const getIamWorkloadIdentityPool: typeof import("./getIamWorkloadIdentityPool").getIamWorkloadIdentityPool = null as any;
export const getIamWorkloadIdentityPoolOutput: typeof import("./getIamWorkloadIdentityPool").getIamWorkloadIdentityPoolOutput = null as any;
utilities.lazyLoad(exports, ["getIamWorkloadIdentityPool","getIamWorkloadIdentityPoolOutput"], () => require("./getIamWorkloadIdentityPool"));

export { GetIamWorkloadIdentityPoolProviderArgs, GetIamWorkloadIdentityPoolProviderResult, GetIamWorkloadIdentityPoolProviderOutputArgs } from "./getIamWorkloadIdentityPoolProvider";
export const getIamWorkloadIdentityPoolProvider: typeof import("./getIamWorkloadIdentityPoolProvider").getIamWorkloadIdentityPoolProvider = null as any;
export const getIamWorkloadIdentityPoolProviderOutput: typeof import("./getIamWorkloadIdentityPoolProvider").getIamWorkloadIdentityPoolProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIamWorkloadIdentityPoolProvider","getIamWorkloadIdentityPoolProviderOutput"], () => require("./getIamWorkloadIdentityPoolProvider"));

export { GetIapAppEngineServiceIamPolicyArgs, GetIapAppEngineServiceIamPolicyResult, GetIapAppEngineServiceIamPolicyOutputArgs } from "./getIapAppEngineServiceIamPolicy";
export const getIapAppEngineServiceIamPolicy: typeof import("./getIapAppEngineServiceIamPolicy").getIapAppEngineServiceIamPolicy = null as any;
export const getIapAppEngineServiceIamPolicyOutput: typeof import("./getIapAppEngineServiceIamPolicy").getIapAppEngineServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIapAppEngineServiceIamPolicy","getIapAppEngineServiceIamPolicyOutput"], () => require("./getIapAppEngineServiceIamPolicy"));

export { GetIapAppEngineVersionIamPolicyArgs, GetIapAppEngineVersionIamPolicyResult, GetIapAppEngineVersionIamPolicyOutputArgs } from "./getIapAppEngineVersionIamPolicy";
export const getIapAppEngineVersionIamPolicy: typeof import("./getIapAppEngineVersionIamPolicy").getIapAppEngineVersionIamPolicy = null as any;
export const getIapAppEngineVersionIamPolicyOutput: typeof import("./getIapAppEngineVersionIamPolicy").getIapAppEngineVersionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIapAppEngineVersionIamPolicy","getIapAppEngineVersionIamPolicyOutput"], () => require("./getIapAppEngineVersionIamPolicy"));

export { GetIapClientArgs, GetIapClientResult, GetIapClientOutputArgs } from "./getIapClient";
export const getIapClient: typeof import("./getIapClient").getIapClient = null as any;
export const getIapClientOutput: typeof import("./getIapClient").getIapClientOutput = null as any;
utilities.lazyLoad(exports, ["getIapClient","getIapClientOutput"], () => require("./getIapClient"));

export { GetIapTunnelDestGroupIamPolicyArgs, GetIapTunnelDestGroupIamPolicyResult, GetIapTunnelDestGroupIamPolicyOutputArgs } from "./getIapTunnelDestGroupIamPolicy";
export const getIapTunnelDestGroupIamPolicy: typeof import("./getIapTunnelDestGroupIamPolicy").getIapTunnelDestGroupIamPolicy = null as any;
export const getIapTunnelDestGroupIamPolicyOutput: typeof import("./getIapTunnelDestGroupIamPolicy").getIapTunnelDestGroupIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIapTunnelDestGroupIamPolicy","getIapTunnelDestGroupIamPolicyOutput"], () => require("./getIapTunnelDestGroupIamPolicy"));

export { GetIapTunnelIamPolicyArgs, GetIapTunnelIamPolicyResult, GetIapTunnelIamPolicyOutputArgs } from "./getIapTunnelIamPolicy";
export const getIapTunnelIamPolicy: typeof import("./getIapTunnelIamPolicy").getIapTunnelIamPolicy = null as any;
export const getIapTunnelIamPolicyOutput: typeof import("./getIapTunnelIamPolicy").getIapTunnelIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIapTunnelIamPolicy","getIapTunnelIamPolicyOutput"], () => require("./getIapTunnelIamPolicy"));

export { GetIapTunnelInstanceIamPolicyArgs, GetIapTunnelInstanceIamPolicyResult, GetIapTunnelInstanceIamPolicyOutputArgs } from "./getIapTunnelInstanceIamPolicy";
export const getIapTunnelInstanceIamPolicy: typeof import("./getIapTunnelInstanceIamPolicy").getIapTunnelInstanceIamPolicy = null as any;
export const getIapTunnelInstanceIamPolicyOutput: typeof import("./getIapTunnelInstanceIamPolicy").getIapTunnelInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIapTunnelInstanceIamPolicy","getIapTunnelInstanceIamPolicyOutput"], () => require("./getIapTunnelInstanceIamPolicy"));

export { GetIapWebBackendServiceIamPolicyArgs, GetIapWebBackendServiceIamPolicyResult, GetIapWebBackendServiceIamPolicyOutputArgs } from "./getIapWebBackendServiceIamPolicy";
export const getIapWebBackendServiceIamPolicy: typeof import("./getIapWebBackendServiceIamPolicy").getIapWebBackendServiceIamPolicy = null as any;
export const getIapWebBackendServiceIamPolicyOutput: typeof import("./getIapWebBackendServiceIamPolicy").getIapWebBackendServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIapWebBackendServiceIamPolicy","getIapWebBackendServiceIamPolicyOutput"], () => require("./getIapWebBackendServiceIamPolicy"));

export { GetIapWebIamPolicyArgs, GetIapWebIamPolicyResult, GetIapWebIamPolicyOutputArgs } from "./getIapWebIamPolicy";
export const getIapWebIamPolicy: typeof import("./getIapWebIamPolicy").getIapWebIamPolicy = null as any;
export const getIapWebIamPolicyOutput: typeof import("./getIapWebIamPolicy").getIapWebIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIapWebIamPolicy","getIapWebIamPolicyOutput"], () => require("./getIapWebIamPolicy"));

export { GetIapWebRegionBackendServiceIamPolicyArgs, GetIapWebRegionBackendServiceIamPolicyResult, GetIapWebRegionBackendServiceIamPolicyOutputArgs } from "./getIapWebRegionBackendServiceIamPolicy";
export const getIapWebRegionBackendServiceIamPolicy: typeof import("./getIapWebRegionBackendServiceIamPolicy").getIapWebRegionBackendServiceIamPolicy = null as any;
export const getIapWebRegionBackendServiceIamPolicyOutput: typeof import("./getIapWebRegionBackendServiceIamPolicy").getIapWebRegionBackendServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIapWebRegionBackendServiceIamPolicy","getIapWebRegionBackendServiceIamPolicyOutput"], () => require("./getIapWebRegionBackendServiceIamPolicy"));

export { GetIapWebTypeAppEngineIamPolicyArgs, GetIapWebTypeAppEngineIamPolicyResult, GetIapWebTypeAppEngineIamPolicyOutputArgs } from "./getIapWebTypeAppEngineIamPolicy";
export const getIapWebTypeAppEngineIamPolicy: typeof import("./getIapWebTypeAppEngineIamPolicy").getIapWebTypeAppEngineIamPolicy = null as any;
export const getIapWebTypeAppEngineIamPolicyOutput: typeof import("./getIapWebTypeAppEngineIamPolicy").getIapWebTypeAppEngineIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIapWebTypeAppEngineIamPolicy","getIapWebTypeAppEngineIamPolicyOutput"], () => require("./getIapWebTypeAppEngineIamPolicy"));

export { GetIapWebTypeComputeIamPolicyArgs, GetIapWebTypeComputeIamPolicyResult, GetIapWebTypeComputeIamPolicyOutputArgs } from "./getIapWebTypeComputeIamPolicy";
export const getIapWebTypeComputeIamPolicy: typeof import("./getIapWebTypeComputeIamPolicy").getIapWebTypeComputeIamPolicy = null as any;
export const getIapWebTypeComputeIamPolicyOutput: typeof import("./getIapWebTypeComputeIamPolicy").getIapWebTypeComputeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIapWebTypeComputeIamPolicy","getIapWebTypeComputeIamPolicyOutput"], () => require("./getIapWebTypeComputeIamPolicy"));

export { GetKmsCryptoKeyArgs, GetKmsCryptoKeyResult, GetKmsCryptoKeyOutputArgs } from "./getKmsCryptoKey";
export const getKmsCryptoKey: typeof import("./getKmsCryptoKey").getKmsCryptoKey = null as any;
export const getKmsCryptoKeyOutput: typeof import("./getKmsCryptoKey").getKmsCryptoKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsCryptoKey","getKmsCryptoKeyOutput"], () => require("./getKmsCryptoKey"));

export { GetKmsCryptoKeyIamPolicyArgs, GetKmsCryptoKeyIamPolicyResult, GetKmsCryptoKeyIamPolicyOutputArgs } from "./getKmsCryptoKeyIamPolicy";
export const getKmsCryptoKeyIamPolicy: typeof import("./getKmsCryptoKeyIamPolicy").getKmsCryptoKeyIamPolicy = null as any;
export const getKmsCryptoKeyIamPolicyOutput: typeof import("./getKmsCryptoKeyIamPolicy").getKmsCryptoKeyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsCryptoKeyIamPolicy","getKmsCryptoKeyIamPolicyOutput"], () => require("./getKmsCryptoKeyIamPolicy"));

export { GetKmsCryptoKeyLatestVersionArgs, GetKmsCryptoKeyLatestVersionResult, GetKmsCryptoKeyLatestVersionOutputArgs } from "./getKmsCryptoKeyLatestVersion";
export const getKmsCryptoKeyLatestVersion: typeof import("./getKmsCryptoKeyLatestVersion").getKmsCryptoKeyLatestVersion = null as any;
export const getKmsCryptoKeyLatestVersionOutput: typeof import("./getKmsCryptoKeyLatestVersion").getKmsCryptoKeyLatestVersionOutput = null as any;
utilities.lazyLoad(exports, ["getKmsCryptoKeyLatestVersion","getKmsCryptoKeyLatestVersionOutput"], () => require("./getKmsCryptoKeyLatestVersion"));

export { GetKmsCryptoKeyVersionArgs, GetKmsCryptoKeyVersionResult, GetKmsCryptoKeyVersionOutputArgs } from "./getKmsCryptoKeyVersion";
export const getKmsCryptoKeyVersion: typeof import("./getKmsCryptoKeyVersion").getKmsCryptoKeyVersion = null as any;
export const getKmsCryptoKeyVersionOutput: typeof import("./getKmsCryptoKeyVersion").getKmsCryptoKeyVersionOutput = null as any;
utilities.lazyLoad(exports, ["getKmsCryptoKeyVersion","getKmsCryptoKeyVersionOutput"], () => require("./getKmsCryptoKeyVersion"));

export { GetKmsCryptoKeyVersionsArgs, GetKmsCryptoKeyVersionsResult, GetKmsCryptoKeyVersionsOutputArgs } from "./getKmsCryptoKeyVersions";
export const getKmsCryptoKeyVersions: typeof import("./getKmsCryptoKeyVersions").getKmsCryptoKeyVersions = null as any;
export const getKmsCryptoKeyVersionsOutput: typeof import("./getKmsCryptoKeyVersions").getKmsCryptoKeyVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsCryptoKeyVersions","getKmsCryptoKeyVersionsOutput"], () => require("./getKmsCryptoKeyVersions"));

export { GetKmsCryptoKeysArgs, GetKmsCryptoKeysResult, GetKmsCryptoKeysOutputArgs } from "./getKmsCryptoKeys";
export const getKmsCryptoKeys: typeof import("./getKmsCryptoKeys").getKmsCryptoKeys = null as any;
export const getKmsCryptoKeysOutput: typeof import("./getKmsCryptoKeys").getKmsCryptoKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKmsCryptoKeys","getKmsCryptoKeysOutput"], () => require("./getKmsCryptoKeys"));

export { GetKmsEkmConnectionIamPolicyArgs, GetKmsEkmConnectionIamPolicyResult, GetKmsEkmConnectionIamPolicyOutputArgs } from "./getKmsEkmConnectionIamPolicy";
export const getKmsEkmConnectionIamPolicy: typeof import("./getKmsEkmConnectionIamPolicy").getKmsEkmConnectionIamPolicy = null as any;
export const getKmsEkmConnectionIamPolicyOutput: typeof import("./getKmsEkmConnectionIamPolicy").getKmsEkmConnectionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsEkmConnectionIamPolicy","getKmsEkmConnectionIamPolicyOutput"], () => require("./getKmsEkmConnectionIamPolicy"));

export { GetKmsKeyRingArgs, GetKmsKeyRingResult, GetKmsKeyRingOutputArgs } from "./getKmsKeyRing";
export const getKmsKeyRing: typeof import("./getKmsKeyRing").getKmsKeyRing = null as any;
export const getKmsKeyRingOutput: typeof import("./getKmsKeyRing").getKmsKeyRingOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKeyRing","getKmsKeyRingOutput"], () => require("./getKmsKeyRing"));

export { GetKmsKeyRingIamPolicyArgs, GetKmsKeyRingIamPolicyResult, GetKmsKeyRingIamPolicyOutputArgs } from "./getKmsKeyRingIamPolicy";
export const getKmsKeyRingIamPolicy: typeof import("./getKmsKeyRingIamPolicy").getKmsKeyRingIamPolicy = null as any;
export const getKmsKeyRingIamPolicyOutput: typeof import("./getKmsKeyRingIamPolicy").getKmsKeyRingIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKeyRingIamPolicy","getKmsKeyRingIamPolicyOutput"], () => require("./getKmsKeyRingIamPolicy"));

export { GetKmsKeyRingsArgs, GetKmsKeyRingsResult, GetKmsKeyRingsOutputArgs } from "./getKmsKeyRings";
export const getKmsKeyRings: typeof import("./getKmsKeyRings").getKmsKeyRings = null as any;
export const getKmsKeyRingsOutput: typeof import("./getKmsKeyRings").getKmsKeyRingsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKeyRings","getKmsKeyRingsOutput"], () => require("./getKmsKeyRings"));

export { GetKmsSecretArgs, GetKmsSecretResult, GetKmsSecretOutputArgs } from "./getKmsSecret";
export const getKmsSecret: typeof import("./getKmsSecret").getKmsSecret = null as any;
export const getKmsSecretOutput: typeof import("./getKmsSecret").getKmsSecretOutput = null as any;
utilities.lazyLoad(exports, ["getKmsSecret","getKmsSecretOutput"], () => require("./getKmsSecret"));

export { GetKmsSecretAsymmetricArgs, GetKmsSecretAsymmetricResult, GetKmsSecretAsymmetricOutputArgs } from "./getKmsSecretAsymmetric";
export const getKmsSecretAsymmetric: typeof import("./getKmsSecretAsymmetric").getKmsSecretAsymmetric = null as any;
export const getKmsSecretAsymmetricOutput: typeof import("./getKmsSecretAsymmetric").getKmsSecretAsymmetricOutput = null as any;
utilities.lazyLoad(exports, ["getKmsSecretAsymmetric","getKmsSecretAsymmetricOutput"], () => require("./getKmsSecretAsymmetric"));

export { GetKmsSecretCiphertextArgs, GetKmsSecretCiphertextResult, GetKmsSecretCiphertextOutputArgs } from "./getKmsSecretCiphertext";
export const getKmsSecretCiphertext: typeof import("./getKmsSecretCiphertext").getKmsSecretCiphertext = null as any;
export const getKmsSecretCiphertextOutput: typeof import("./getKmsSecretCiphertext").getKmsSecretCiphertextOutput = null as any;
utilities.lazyLoad(exports, ["getKmsSecretCiphertext","getKmsSecretCiphertextOutput"], () => require("./getKmsSecretCiphertext"));

export { GetLoggingFolderSettingsArgs, GetLoggingFolderSettingsResult, GetLoggingFolderSettingsOutputArgs } from "./getLoggingFolderSettings";
export const getLoggingFolderSettings: typeof import("./getLoggingFolderSettings").getLoggingFolderSettings = null as any;
export const getLoggingFolderSettingsOutput: typeof import("./getLoggingFolderSettings").getLoggingFolderSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingFolderSettings","getLoggingFolderSettingsOutput"], () => require("./getLoggingFolderSettings"));

export { GetLoggingLogViewIamPolicyArgs, GetLoggingLogViewIamPolicyResult, GetLoggingLogViewIamPolicyOutputArgs } from "./getLoggingLogViewIamPolicy";
export const getLoggingLogViewIamPolicy: typeof import("./getLoggingLogViewIamPolicy").getLoggingLogViewIamPolicy = null as any;
export const getLoggingLogViewIamPolicyOutput: typeof import("./getLoggingLogViewIamPolicy").getLoggingLogViewIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingLogViewIamPolicy","getLoggingLogViewIamPolicyOutput"], () => require("./getLoggingLogViewIamPolicy"));

export { GetLoggingOrganizationSettingsArgs, GetLoggingOrganizationSettingsResult, GetLoggingOrganizationSettingsOutputArgs } from "./getLoggingOrganizationSettings";
export const getLoggingOrganizationSettings: typeof import("./getLoggingOrganizationSettings").getLoggingOrganizationSettings = null as any;
export const getLoggingOrganizationSettingsOutput: typeof import("./getLoggingOrganizationSettings").getLoggingOrganizationSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingOrganizationSettings","getLoggingOrganizationSettingsOutput"], () => require("./getLoggingOrganizationSettings"));

export { GetLoggingProjectCmekSettingsArgs, GetLoggingProjectCmekSettingsResult, GetLoggingProjectCmekSettingsOutputArgs } from "./getLoggingProjectCmekSettings";
export const getLoggingProjectCmekSettings: typeof import("./getLoggingProjectCmekSettings").getLoggingProjectCmekSettings = null as any;
export const getLoggingProjectCmekSettingsOutput: typeof import("./getLoggingProjectCmekSettings").getLoggingProjectCmekSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingProjectCmekSettings","getLoggingProjectCmekSettingsOutput"], () => require("./getLoggingProjectCmekSettings"));

export { GetLoggingProjectSettingsArgs, GetLoggingProjectSettingsResult, GetLoggingProjectSettingsOutputArgs } from "./getLoggingProjectSettings";
export const getLoggingProjectSettings: typeof import("./getLoggingProjectSettings").getLoggingProjectSettings = null as any;
export const getLoggingProjectSettingsOutput: typeof import("./getLoggingProjectSettings").getLoggingProjectSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingProjectSettings","getLoggingProjectSettingsOutput"], () => require("./getLoggingProjectSettings"));

export { GetLoggingSinkArgs, GetLoggingSinkResult, GetLoggingSinkOutputArgs } from "./getLoggingSink";
export const getLoggingSink: typeof import("./getLoggingSink").getLoggingSink = null as any;
export const getLoggingSinkOutput: typeof import("./getLoggingSink").getLoggingSinkOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingSink","getLoggingSinkOutput"], () => require("./getLoggingSink"));

export { GetMonitoringAppEngineServiceArgs, GetMonitoringAppEngineServiceResult, GetMonitoringAppEngineServiceOutputArgs } from "./getMonitoringAppEngineService";
export const getMonitoringAppEngineService: typeof import("./getMonitoringAppEngineService").getMonitoringAppEngineService = null as any;
export const getMonitoringAppEngineServiceOutput: typeof import("./getMonitoringAppEngineService").getMonitoringAppEngineServiceOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringAppEngineService","getMonitoringAppEngineServiceOutput"], () => require("./getMonitoringAppEngineService"));

export { GetMonitoringClusterIstioServiceArgs, GetMonitoringClusterIstioServiceResult, GetMonitoringClusterIstioServiceOutputArgs } from "./getMonitoringClusterIstioService";
export const getMonitoringClusterIstioService: typeof import("./getMonitoringClusterIstioService").getMonitoringClusterIstioService = null as any;
export const getMonitoringClusterIstioServiceOutput: typeof import("./getMonitoringClusterIstioService").getMonitoringClusterIstioServiceOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringClusterIstioService","getMonitoringClusterIstioServiceOutput"], () => require("./getMonitoringClusterIstioService"));

export { GetMonitoringIstioCanonicalServiceArgs, GetMonitoringIstioCanonicalServiceResult, GetMonitoringIstioCanonicalServiceOutputArgs } from "./getMonitoringIstioCanonicalService";
export const getMonitoringIstioCanonicalService: typeof import("./getMonitoringIstioCanonicalService").getMonitoringIstioCanonicalService = null as any;
export const getMonitoringIstioCanonicalServiceOutput: typeof import("./getMonitoringIstioCanonicalService").getMonitoringIstioCanonicalServiceOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringIstioCanonicalService","getMonitoringIstioCanonicalServiceOutput"], () => require("./getMonitoringIstioCanonicalService"));

export { GetMonitoringMeshIstioServiceArgs, GetMonitoringMeshIstioServiceResult, GetMonitoringMeshIstioServiceOutputArgs } from "./getMonitoringMeshIstioService";
export const getMonitoringMeshIstioService: typeof import("./getMonitoringMeshIstioService").getMonitoringMeshIstioService = null as any;
export const getMonitoringMeshIstioServiceOutput: typeof import("./getMonitoringMeshIstioService").getMonitoringMeshIstioServiceOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringMeshIstioService","getMonitoringMeshIstioServiceOutput"], () => require("./getMonitoringMeshIstioService"));

export { GetMonitoringNotificationChannelArgs, GetMonitoringNotificationChannelResult, GetMonitoringNotificationChannelOutputArgs } from "./getMonitoringNotificationChannel";
export const getMonitoringNotificationChannel: typeof import("./getMonitoringNotificationChannel").getMonitoringNotificationChannel = null as any;
export const getMonitoringNotificationChannelOutput: typeof import("./getMonitoringNotificationChannel").getMonitoringNotificationChannelOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringNotificationChannel","getMonitoringNotificationChannelOutput"], () => require("./getMonitoringNotificationChannel"));

export { GetMonitoringUptimeCheckIpsArgs, GetMonitoringUptimeCheckIpsResult, GetMonitoringUptimeCheckIpsOutputArgs } from "./getMonitoringUptimeCheckIps";
export const getMonitoringUptimeCheckIps: typeof import("./getMonitoringUptimeCheckIps").getMonitoringUptimeCheckIps = null as any;
export const getMonitoringUptimeCheckIpsOutput: typeof import("./getMonitoringUptimeCheckIps").getMonitoringUptimeCheckIpsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringUptimeCheckIps","getMonitoringUptimeCheckIpsOutput"], () => require("./getMonitoringUptimeCheckIps"));

export { GetNetblockIpRangesArgs, GetNetblockIpRangesResult, GetNetblockIpRangesOutputArgs } from "./getNetblockIpRanges";
export const getNetblockIpRanges: typeof import("./getNetblockIpRanges").getNetblockIpRanges = null as any;
export const getNetblockIpRangesOutput: typeof import("./getNetblockIpRanges").getNetblockIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getNetblockIpRanges","getNetblockIpRangesOutput"], () => require("./getNetblockIpRanges"));

export { GetNetworkSecurityAddressGroupIamPolicyArgs, GetNetworkSecurityAddressGroupIamPolicyResult, GetNetworkSecurityAddressGroupIamPolicyOutputArgs } from "./getNetworkSecurityAddressGroupIamPolicy";
export const getNetworkSecurityAddressGroupIamPolicy: typeof import("./getNetworkSecurityAddressGroupIamPolicy").getNetworkSecurityAddressGroupIamPolicy = null as any;
export const getNetworkSecurityAddressGroupIamPolicyOutput: typeof import("./getNetworkSecurityAddressGroupIamPolicy").getNetworkSecurityAddressGroupIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSecurityAddressGroupIamPolicy","getNetworkSecurityAddressGroupIamPolicyOutput"], () => require("./getNetworkSecurityAddressGroupIamPolicy"));

export { GetNotebooksInstanceIamPolicyArgs, GetNotebooksInstanceIamPolicyResult, GetNotebooksInstanceIamPolicyOutputArgs } from "./getNotebooksInstanceIamPolicy";
export const getNotebooksInstanceIamPolicy: typeof import("./getNotebooksInstanceIamPolicy").getNotebooksInstanceIamPolicy = null as any;
export const getNotebooksInstanceIamPolicyOutput: typeof import("./getNotebooksInstanceIamPolicy").getNotebooksInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNotebooksInstanceIamPolicy","getNotebooksInstanceIamPolicyOutput"], () => require("./getNotebooksInstanceIamPolicy"));

export { GetNotebooksRuntimeIamPolicyArgs, GetNotebooksRuntimeIamPolicyResult, GetNotebooksRuntimeIamPolicyOutputArgs } from "./getNotebooksRuntimeIamPolicy";
export const getNotebooksRuntimeIamPolicy: typeof import("./getNotebooksRuntimeIamPolicy").getNotebooksRuntimeIamPolicy = null as any;
export const getNotebooksRuntimeIamPolicyOutput: typeof import("./getNotebooksRuntimeIamPolicy").getNotebooksRuntimeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNotebooksRuntimeIamPolicy","getNotebooksRuntimeIamPolicyOutput"], () => require("./getNotebooksRuntimeIamPolicy"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetOrganizationIamPolicyArgs, GetOrganizationIamPolicyResult, GetOrganizationIamPolicyOutputArgs } from "./getOrganizationIamPolicy";
export const getOrganizationIamPolicy: typeof import("./getOrganizationIamPolicy").getOrganizationIamPolicy = null as any;
export const getOrganizationIamPolicyOutput: typeof import("./getOrganizationIamPolicy").getOrganizationIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationIamPolicy","getOrganizationIamPolicyOutput"], () => require("./getOrganizationIamPolicy"));

export { GetPrivatecaCaPoolIamPolicyArgs, GetPrivatecaCaPoolIamPolicyResult, GetPrivatecaCaPoolIamPolicyOutputArgs } from "./getPrivatecaCaPoolIamPolicy";
export const getPrivatecaCaPoolIamPolicy: typeof import("./getPrivatecaCaPoolIamPolicy").getPrivatecaCaPoolIamPolicy = null as any;
export const getPrivatecaCaPoolIamPolicyOutput: typeof import("./getPrivatecaCaPoolIamPolicy").getPrivatecaCaPoolIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatecaCaPoolIamPolicy","getPrivatecaCaPoolIamPolicyOutput"], () => require("./getPrivatecaCaPoolIamPolicy"));

export { GetPrivatecaCertificateAuthorityArgs, GetPrivatecaCertificateAuthorityResult, GetPrivatecaCertificateAuthorityOutputArgs } from "./getPrivatecaCertificateAuthority";
export const getPrivatecaCertificateAuthority: typeof import("./getPrivatecaCertificateAuthority").getPrivatecaCertificateAuthority = null as any;
export const getPrivatecaCertificateAuthorityOutput: typeof import("./getPrivatecaCertificateAuthority").getPrivatecaCertificateAuthorityOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatecaCertificateAuthority","getPrivatecaCertificateAuthorityOutput"], () => require("./getPrivatecaCertificateAuthority"));

export { GetPrivatecaCertificateTemplateIamPolicyArgs, GetPrivatecaCertificateTemplateIamPolicyResult, GetPrivatecaCertificateTemplateIamPolicyOutputArgs } from "./getPrivatecaCertificateTemplateIamPolicy";
export const getPrivatecaCertificateTemplateIamPolicy: typeof import("./getPrivatecaCertificateTemplateIamPolicy").getPrivatecaCertificateTemplateIamPolicy = null as any;
export const getPrivatecaCertificateTemplateIamPolicyOutput: typeof import("./getPrivatecaCertificateTemplateIamPolicy").getPrivatecaCertificateTemplateIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatecaCertificateTemplateIamPolicy","getPrivatecaCertificateTemplateIamPolicyOutput"], () => require("./getPrivatecaCertificateTemplateIamPolicy"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectIamPolicyArgs, GetProjectIamPolicyResult, GetProjectIamPolicyOutputArgs } from "./getProjectIamPolicy";
export const getProjectIamPolicy: typeof import("./getProjectIamPolicy").getProjectIamPolicy = null as any;
export const getProjectIamPolicyOutput: typeof import("./getProjectIamPolicy").getProjectIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getProjectIamPolicy","getProjectIamPolicyOutput"], () => require("./getProjectIamPolicy"));

export { GetProjectOrganizationPolicyArgs, GetProjectOrganizationPolicyResult, GetProjectOrganizationPolicyOutputArgs } from "./getProjectOrganizationPolicy";
export const getProjectOrganizationPolicy: typeof import("./getProjectOrganizationPolicy").getProjectOrganizationPolicy = null as any;
export const getProjectOrganizationPolicyOutput: typeof import("./getProjectOrganizationPolicy").getProjectOrganizationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getProjectOrganizationPolicy","getProjectOrganizationPolicyOutput"], () => require("./getProjectOrganizationPolicy"));

export { GetProjectServiceArgs, GetProjectServiceResult, GetProjectServiceOutputArgs } from "./getProjectService";
export const getProjectService: typeof import("./getProjectService").getProjectService = null as any;
export const getProjectServiceOutput: typeof import("./getProjectService").getProjectServiceOutput = null as any;
utilities.lazyLoad(exports, ["getProjectService","getProjectServiceOutput"], () => require("./getProjectService"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetPubsubSchemaIamPolicyArgs, GetPubsubSchemaIamPolicyResult, GetPubsubSchemaIamPolicyOutputArgs } from "./getPubsubSchemaIamPolicy";
export const getPubsubSchemaIamPolicy: typeof import("./getPubsubSchemaIamPolicy").getPubsubSchemaIamPolicy = null as any;
export const getPubsubSchemaIamPolicyOutput: typeof import("./getPubsubSchemaIamPolicy").getPubsubSchemaIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPubsubSchemaIamPolicy","getPubsubSchemaIamPolicyOutput"], () => require("./getPubsubSchemaIamPolicy"));

export { GetPubsubSubscriptionArgs, GetPubsubSubscriptionResult, GetPubsubSubscriptionOutputArgs } from "./getPubsubSubscription";
export const getPubsubSubscription: typeof import("./getPubsubSubscription").getPubsubSubscription = null as any;
export const getPubsubSubscriptionOutput: typeof import("./getPubsubSubscription").getPubsubSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getPubsubSubscription","getPubsubSubscriptionOutput"], () => require("./getPubsubSubscription"));

export { GetPubsubSubscriptionIamPolicyArgs, GetPubsubSubscriptionIamPolicyResult, GetPubsubSubscriptionIamPolicyOutputArgs } from "./getPubsubSubscriptionIamPolicy";
export const getPubsubSubscriptionIamPolicy: typeof import("./getPubsubSubscriptionIamPolicy").getPubsubSubscriptionIamPolicy = null as any;
export const getPubsubSubscriptionIamPolicyOutput: typeof import("./getPubsubSubscriptionIamPolicy").getPubsubSubscriptionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPubsubSubscriptionIamPolicy","getPubsubSubscriptionIamPolicyOutput"], () => require("./getPubsubSubscriptionIamPolicy"));

export { GetPubsubTopicArgs, GetPubsubTopicResult, GetPubsubTopicOutputArgs } from "./getPubsubTopic";
export const getPubsubTopic: typeof import("./getPubsubTopic").getPubsubTopic = null as any;
export const getPubsubTopicOutput: typeof import("./getPubsubTopic").getPubsubTopicOutput = null as any;
utilities.lazyLoad(exports, ["getPubsubTopic","getPubsubTopicOutput"], () => require("./getPubsubTopic"));

export { GetPubsubTopicIamPolicyArgs, GetPubsubTopicIamPolicyResult, GetPubsubTopicIamPolicyOutputArgs } from "./getPubsubTopicIamPolicy";
export const getPubsubTopicIamPolicy: typeof import("./getPubsubTopicIamPolicy").getPubsubTopicIamPolicy = null as any;
export const getPubsubTopicIamPolicyOutput: typeof import("./getPubsubTopicIamPolicy").getPubsubTopicIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPubsubTopicIamPolicy","getPubsubTopicIamPolicyOutput"], () => require("./getPubsubTopicIamPolicy"));

export { GetRedisInstanceArgs, GetRedisInstanceResult, GetRedisInstanceOutputArgs } from "./getRedisInstance";
export const getRedisInstance: typeof import("./getRedisInstance").getRedisInstance = null as any;
export const getRedisInstanceOutput: typeof import("./getRedisInstance").getRedisInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRedisInstance","getRedisInstanceOutput"], () => require("./getRedisInstance"));

export { GetRuntimeconfigConfigArgs, GetRuntimeconfigConfigResult, GetRuntimeconfigConfigOutputArgs } from "./getRuntimeconfigConfig";
export const getRuntimeconfigConfig: typeof import("./getRuntimeconfigConfig").getRuntimeconfigConfig = null as any;
export const getRuntimeconfigConfigOutput: typeof import("./getRuntimeconfigConfig").getRuntimeconfigConfigOutput = null as any;
utilities.lazyLoad(exports, ["getRuntimeconfigConfig","getRuntimeconfigConfigOutput"], () => require("./getRuntimeconfigConfig"));

export { GetRuntimeconfigConfigIamPolicyArgs, GetRuntimeconfigConfigIamPolicyResult, GetRuntimeconfigConfigIamPolicyOutputArgs } from "./getRuntimeconfigConfigIamPolicy";
export const getRuntimeconfigConfigIamPolicy: typeof import("./getRuntimeconfigConfigIamPolicy").getRuntimeconfigConfigIamPolicy = null as any;
export const getRuntimeconfigConfigIamPolicyOutput: typeof import("./getRuntimeconfigConfigIamPolicy").getRuntimeconfigConfigIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRuntimeconfigConfigIamPolicy","getRuntimeconfigConfigIamPolicyOutput"], () => require("./getRuntimeconfigConfigIamPolicy"));

export { GetRuntimeconfigVariableArgs, GetRuntimeconfigVariableResult, GetRuntimeconfigVariableOutputArgs } from "./getRuntimeconfigVariable";
export const getRuntimeconfigVariable: typeof import("./getRuntimeconfigVariable").getRuntimeconfigVariable = null as any;
export const getRuntimeconfigVariableOutput: typeof import("./getRuntimeconfigVariable").getRuntimeconfigVariableOutput = null as any;
utilities.lazyLoad(exports, ["getRuntimeconfigVariable","getRuntimeconfigVariableOutput"], () => require("./getRuntimeconfigVariable"));

export { GetSccSourceIamPolicyArgs, GetSccSourceIamPolicyResult, GetSccSourceIamPolicyOutputArgs } from "./getSccSourceIamPolicy";
export const getSccSourceIamPolicy: typeof import("./getSccSourceIamPolicy").getSccSourceIamPolicy = null as any;
export const getSccSourceIamPolicyOutput: typeof import("./getSccSourceIamPolicy").getSccSourceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSccSourceIamPolicy","getSccSourceIamPolicyOutput"], () => require("./getSccSourceIamPolicy"));

export { GetSccV2OrganizationSourceIamPolicyArgs, GetSccV2OrganizationSourceIamPolicyResult, GetSccV2OrganizationSourceIamPolicyOutputArgs } from "./getSccV2OrganizationSourceIamPolicy";
export const getSccV2OrganizationSourceIamPolicy: typeof import("./getSccV2OrganizationSourceIamPolicy").getSccV2OrganizationSourceIamPolicy = null as any;
export const getSccV2OrganizationSourceIamPolicyOutput: typeof import("./getSccV2OrganizationSourceIamPolicy").getSccV2OrganizationSourceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSccV2OrganizationSourceIamPolicy","getSccV2OrganizationSourceIamPolicyOutput"], () => require("./getSccV2OrganizationSourceIamPolicy"));

export { GetSecretManagerSecretArgs, GetSecretManagerSecretResult, GetSecretManagerSecretOutputArgs } from "./getSecretManagerSecret";
export const getSecretManagerSecret: typeof import("./getSecretManagerSecret").getSecretManagerSecret = null as any;
export const getSecretManagerSecretOutput: typeof import("./getSecretManagerSecret").getSecretManagerSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecretManagerSecret","getSecretManagerSecretOutput"], () => require("./getSecretManagerSecret"));

export { GetSecretManagerSecretIamPolicyArgs, GetSecretManagerSecretIamPolicyResult, GetSecretManagerSecretIamPolicyOutputArgs } from "./getSecretManagerSecretIamPolicy";
export const getSecretManagerSecretIamPolicy: typeof import("./getSecretManagerSecretIamPolicy").getSecretManagerSecretIamPolicy = null as any;
export const getSecretManagerSecretIamPolicyOutput: typeof import("./getSecretManagerSecretIamPolicy").getSecretManagerSecretIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecretManagerSecretIamPolicy","getSecretManagerSecretIamPolicyOutput"], () => require("./getSecretManagerSecretIamPolicy"));

export { GetSecretManagerSecretVersionArgs, GetSecretManagerSecretVersionResult, GetSecretManagerSecretVersionOutputArgs } from "./getSecretManagerSecretVersion";
export const getSecretManagerSecretVersion: typeof import("./getSecretManagerSecretVersion").getSecretManagerSecretVersion = null as any;
export const getSecretManagerSecretVersionOutput: typeof import("./getSecretManagerSecretVersion").getSecretManagerSecretVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSecretManagerSecretVersion","getSecretManagerSecretVersionOutput"], () => require("./getSecretManagerSecretVersion"));

export { GetSecretManagerSecretVersionAccessArgs, GetSecretManagerSecretVersionAccessResult, GetSecretManagerSecretVersionAccessOutputArgs } from "./getSecretManagerSecretVersionAccess";
export const getSecretManagerSecretVersionAccess: typeof import("./getSecretManagerSecretVersionAccess").getSecretManagerSecretVersionAccess = null as any;
export const getSecretManagerSecretVersionAccessOutput: typeof import("./getSecretManagerSecretVersionAccess").getSecretManagerSecretVersionAccessOutput = null as any;
utilities.lazyLoad(exports, ["getSecretManagerSecretVersionAccess","getSecretManagerSecretVersionAccessOutput"], () => require("./getSecretManagerSecretVersionAccess"));

export { GetSecretManagerSecretsArgs, GetSecretManagerSecretsResult, GetSecretManagerSecretsOutputArgs } from "./getSecretManagerSecrets";
export const getSecretManagerSecrets: typeof import("./getSecretManagerSecrets").getSecretManagerSecrets = null as any;
export const getSecretManagerSecretsOutput: typeof import("./getSecretManagerSecrets").getSecretManagerSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecretManagerSecrets","getSecretManagerSecretsOutput"], () => require("./getSecretManagerSecrets"));

export { GetSecureSourceManagerInstanceIamPolicyArgs, GetSecureSourceManagerInstanceIamPolicyResult, GetSecureSourceManagerInstanceIamPolicyOutputArgs } from "./getSecureSourceManagerInstanceIamPolicy";
export const getSecureSourceManagerInstanceIamPolicy: typeof import("./getSecureSourceManagerInstanceIamPolicy").getSecureSourceManagerInstanceIamPolicy = null as any;
export const getSecureSourceManagerInstanceIamPolicyOutput: typeof import("./getSecureSourceManagerInstanceIamPolicy").getSecureSourceManagerInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecureSourceManagerInstanceIamPolicy","getSecureSourceManagerInstanceIamPolicyOutput"], () => require("./getSecureSourceManagerInstanceIamPolicy"));

export { GetSecureSourceManagerRepositoryIamPolicyArgs, GetSecureSourceManagerRepositoryIamPolicyResult, GetSecureSourceManagerRepositoryIamPolicyOutputArgs } from "./getSecureSourceManagerRepositoryIamPolicy";
export const getSecureSourceManagerRepositoryIamPolicy: typeof import("./getSecureSourceManagerRepositoryIamPolicy").getSecureSourceManagerRepositoryIamPolicy = null as any;
export const getSecureSourceManagerRepositoryIamPolicyOutput: typeof import("./getSecureSourceManagerRepositoryIamPolicy").getSecureSourceManagerRepositoryIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecureSourceManagerRepositoryIamPolicy","getSecureSourceManagerRepositoryIamPolicyOutput"], () => require("./getSecureSourceManagerRepositoryIamPolicy"));

export { GetServiceAccountArgs, GetServiceAccountResult, GetServiceAccountOutputArgs } from "./getServiceAccount";
export const getServiceAccount: typeof import("./getServiceAccount").getServiceAccount = null as any;
export const getServiceAccountOutput: typeof import("./getServiceAccount").getServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccount","getServiceAccountOutput"], () => require("./getServiceAccount"));

export { GetServiceAccountAccessTokenArgs, GetServiceAccountAccessTokenResult, GetServiceAccountAccessTokenOutputArgs } from "./getServiceAccountAccessToken";
export const getServiceAccountAccessToken: typeof import("./getServiceAccountAccessToken").getServiceAccountAccessToken = null as any;
export const getServiceAccountAccessTokenOutput: typeof import("./getServiceAccountAccessToken").getServiceAccountAccessTokenOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccountAccessToken","getServiceAccountAccessTokenOutput"], () => require("./getServiceAccountAccessToken"));

export { GetServiceAccountIamPolicyArgs, GetServiceAccountIamPolicyResult, GetServiceAccountIamPolicyOutputArgs } from "./getServiceAccountIamPolicy";
export const getServiceAccountIamPolicy: typeof import("./getServiceAccountIamPolicy").getServiceAccountIamPolicy = null as any;
export const getServiceAccountIamPolicyOutput: typeof import("./getServiceAccountIamPolicy").getServiceAccountIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccountIamPolicy","getServiceAccountIamPolicyOutput"], () => require("./getServiceAccountIamPolicy"));

export { GetServiceAccountIdTokenArgs, GetServiceAccountIdTokenResult, GetServiceAccountIdTokenOutputArgs } from "./getServiceAccountIdToken";
export const getServiceAccountIdToken: typeof import("./getServiceAccountIdToken").getServiceAccountIdToken = null as any;
export const getServiceAccountIdTokenOutput: typeof import("./getServiceAccountIdToken").getServiceAccountIdTokenOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccountIdToken","getServiceAccountIdTokenOutput"], () => require("./getServiceAccountIdToken"));

export { GetServiceAccountJwtArgs, GetServiceAccountJwtResult, GetServiceAccountJwtOutputArgs } from "./getServiceAccountJwt";
export const getServiceAccountJwt: typeof import("./getServiceAccountJwt").getServiceAccountJwt = null as any;
export const getServiceAccountJwtOutput: typeof import("./getServiceAccountJwt").getServiceAccountJwtOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccountJwt","getServiceAccountJwtOutput"], () => require("./getServiceAccountJwt"));

export { GetServiceAccountKeyArgs, GetServiceAccountKeyResult, GetServiceAccountKeyOutputArgs } from "./getServiceAccountKey";
export const getServiceAccountKey: typeof import("./getServiceAccountKey").getServiceAccountKey = null as any;
export const getServiceAccountKeyOutput: typeof import("./getServiceAccountKey").getServiceAccountKeyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccountKey","getServiceAccountKeyOutput"], () => require("./getServiceAccountKey"));

export { GetServiceDirectoryNamespaceIamPolicyArgs, GetServiceDirectoryNamespaceIamPolicyResult, GetServiceDirectoryNamespaceIamPolicyOutputArgs } from "./getServiceDirectoryNamespaceIamPolicy";
export const getServiceDirectoryNamespaceIamPolicy: typeof import("./getServiceDirectoryNamespaceIamPolicy").getServiceDirectoryNamespaceIamPolicy = null as any;
export const getServiceDirectoryNamespaceIamPolicyOutput: typeof import("./getServiceDirectoryNamespaceIamPolicy").getServiceDirectoryNamespaceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceDirectoryNamespaceIamPolicy","getServiceDirectoryNamespaceIamPolicyOutput"], () => require("./getServiceDirectoryNamespaceIamPolicy"));

export { GetServiceDirectoryServiceIamPolicyArgs, GetServiceDirectoryServiceIamPolicyResult, GetServiceDirectoryServiceIamPolicyOutputArgs } from "./getServiceDirectoryServiceIamPolicy";
export const getServiceDirectoryServiceIamPolicy: typeof import("./getServiceDirectoryServiceIamPolicy").getServiceDirectoryServiceIamPolicy = null as any;
export const getServiceDirectoryServiceIamPolicyOutput: typeof import("./getServiceDirectoryServiceIamPolicy").getServiceDirectoryServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceDirectoryServiceIamPolicy","getServiceDirectoryServiceIamPolicyOutput"], () => require("./getServiceDirectoryServiceIamPolicy"));

export { GetServiceNetworkingPeeredDnsDomainArgs, GetServiceNetworkingPeeredDnsDomainResult, GetServiceNetworkingPeeredDnsDomainOutputArgs } from "./getServiceNetworkingPeeredDnsDomain";
export const getServiceNetworkingPeeredDnsDomain: typeof import("./getServiceNetworkingPeeredDnsDomain").getServiceNetworkingPeeredDnsDomain = null as any;
export const getServiceNetworkingPeeredDnsDomainOutput: typeof import("./getServiceNetworkingPeeredDnsDomain").getServiceNetworkingPeeredDnsDomainOutput = null as any;
utilities.lazyLoad(exports, ["getServiceNetworkingPeeredDnsDomain","getServiceNetworkingPeeredDnsDomainOutput"], () => require("./getServiceNetworkingPeeredDnsDomain"));

export { GetSiteVerificationTokenArgs, GetSiteVerificationTokenResult, GetSiteVerificationTokenOutputArgs } from "./getSiteVerificationToken";
export const getSiteVerificationToken: typeof import("./getSiteVerificationToken").getSiteVerificationToken = null as any;
export const getSiteVerificationTokenOutput: typeof import("./getSiteVerificationToken").getSiteVerificationTokenOutput = null as any;
utilities.lazyLoad(exports, ["getSiteVerificationToken","getSiteVerificationTokenOutput"], () => require("./getSiteVerificationToken"));

export { GetSourcerepoRepositoryArgs, GetSourcerepoRepositoryResult, GetSourcerepoRepositoryOutputArgs } from "./getSourcerepoRepository";
export const getSourcerepoRepository: typeof import("./getSourcerepoRepository").getSourcerepoRepository = null as any;
export const getSourcerepoRepositoryOutput: typeof import("./getSourcerepoRepository").getSourcerepoRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getSourcerepoRepository","getSourcerepoRepositoryOutput"], () => require("./getSourcerepoRepository"));

export { GetSourcerepoRepositoryIamPolicyArgs, GetSourcerepoRepositoryIamPolicyResult, GetSourcerepoRepositoryIamPolicyOutputArgs } from "./getSourcerepoRepositoryIamPolicy";
export const getSourcerepoRepositoryIamPolicy: typeof import("./getSourcerepoRepositoryIamPolicy").getSourcerepoRepositoryIamPolicy = null as any;
export const getSourcerepoRepositoryIamPolicyOutput: typeof import("./getSourcerepoRepositoryIamPolicy").getSourcerepoRepositoryIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSourcerepoRepositoryIamPolicy","getSourcerepoRepositoryIamPolicyOutput"], () => require("./getSourcerepoRepositoryIamPolicy"));

export { GetSpannerDatabaseIamPolicyArgs, GetSpannerDatabaseIamPolicyResult, GetSpannerDatabaseIamPolicyOutputArgs } from "./getSpannerDatabaseIamPolicy";
export const getSpannerDatabaseIamPolicy: typeof import("./getSpannerDatabaseIamPolicy").getSpannerDatabaseIamPolicy = null as any;
export const getSpannerDatabaseIamPolicyOutput: typeof import("./getSpannerDatabaseIamPolicy").getSpannerDatabaseIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSpannerDatabaseIamPolicy","getSpannerDatabaseIamPolicyOutput"], () => require("./getSpannerDatabaseIamPolicy"));

export { GetSpannerInstanceArgs, GetSpannerInstanceResult, GetSpannerInstanceOutputArgs } from "./getSpannerInstance";
export const getSpannerInstance: typeof import("./getSpannerInstance").getSpannerInstance = null as any;
export const getSpannerInstanceOutput: typeof import("./getSpannerInstance").getSpannerInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSpannerInstance","getSpannerInstanceOutput"], () => require("./getSpannerInstance"));

export { GetSpannerInstanceIamPolicyArgs, GetSpannerInstanceIamPolicyResult, GetSpannerInstanceIamPolicyOutputArgs } from "./getSpannerInstanceIamPolicy";
export const getSpannerInstanceIamPolicy: typeof import("./getSpannerInstanceIamPolicy").getSpannerInstanceIamPolicy = null as any;
export const getSpannerInstanceIamPolicyOutput: typeof import("./getSpannerInstanceIamPolicy").getSpannerInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSpannerInstanceIamPolicy","getSpannerInstanceIamPolicyOutput"], () => require("./getSpannerInstanceIamPolicy"));

export { GetSqlBackupRunArgs, GetSqlBackupRunResult, GetSqlBackupRunOutputArgs } from "./getSqlBackupRun";
export const getSqlBackupRun: typeof import("./getSqlBackupRun").getSqlBackupRun = null as any;
export const getSqlBackupRunOutput: typeof import("./getSqlBackupRun").getSqlBackupRunOutput = null as any;
utilities.lazyLoad(exports, ["getSqlBackupRun","getSqlBackupRunOutput"], () => require("./getSqlBackupRun"));

export { GetSqlCaCertsArgs, GetSqlCaCertsResult, GetSqlCaCertsOutputArgs } from "./getSqlCaCerts";
export const getSqlCaCerts: typeof import("./getSqlCaCerts").getSqlCaCerts = null as any;
export const getSqlCaCertsOutput: typeof import("./getSqlCaCerts").getSqlCaCertsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlCaCerts","getSqlCaCertsOutput"], () => require("./getSqlCaCerts"));

export { GetSqlDatabaseArgs, GetSqlDatabaseResult, GetSqlDatabaseOutputArgs } from "./getSqlDatabase";
export const getSqlDatabase: typeof import("./getSqlDatabase").getSqlDatabase = null as any;
export const getSqlDatabaseOutput: typeof import("./getSqlDatabase").getSqlDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getSqlDatabase","getSqlDatabaseOutput"], () => require("./getSqlDatabase"));

export { GetSqlDatabaseInstanceArgs, GetSqlDatabaseInstanceResult, GetSqlDatabaseInstanceOutputArgs } from "./getSqlDatabaseInstance";
export const getSqlDatabaseInstance: typeof import("./getSqlDatabaseInstance").getSqlDatabaseInstance = null as any;
export const getSqlDatabaseInstanceOutput: typeof import("./getSqlDatabaseInstance").getSqlDatabaseInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSqlDatabaseInstance","getSqlDatabaseInstanceOutput"], () => require("./getSqlDatabaseInstance"));

export { GetSqlDatabaseInstanceLatestRecoveryTimeArgs, GetSqlDatabaseInstanceLatestRecoveryTimeResult, GetSqlDatabaseInstanceLatestRecoveryTimeOutputArgs } from "./getSqlDatabaseInstanceLatestRecoveryTime";
export const getSqlDatabaseInstanceLatestRecoveryTime: typeof import("./getSqlDatabaseInstanceLatestRecoveryTime").getSqlDatabaseInstanceLatestRecoveryTime = null as any;
export const getSqlDatabaseInstanceLatestRecoveryTimeOutput: typeof import("./getSqlDatabaseInstanceLatestRecoveryTime").getSqlDatabaseInstanceLatestRecoveryTimeOutput = null as any;
utilities.lazyLoad(exports, ["getSqlDatabaseInstanceLatestRecoveryTime","getSqlDatabaseInstanceLatestRecoveryTimeOutput"], () => require("./getSqlDatabaseInstanceLatestRecoveryTime"));

export { GetSqlDatabaseInstancesArgs, GetSqlDatabaseInstancesResult, GetSqlDatabaseInstancesOutputArgs } from "./getSqlDatabaseInstances";
export const getSqlDatabaseInstances: typeof import("./getSqlDatabaseInstances").getSqlDatabaseInstances = null as any;
export const getSqlDatabaseInstancesOutput: typeof import("./getSqlDatabaseInstances").getSqlDatabaseInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getSqlDatabaseInstances","getSqlDatabaseInstancesOutput"], () => require("./getSqlDatabaseInstances"));

export { GetSqlDatabasesArgs, GetSqlDatabasesResult, GetSqlDatabasesOutputArgs } from "./getSqlDatabases";
export const getSqlDatabases: typeof import("./getSqlDatabases").getSqlDatabases = null as any;
export const getSqlDatabasesOutput: typeof import("./getSqlDatabases").getSqlDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getSqlDatabases","getSqlDatabasesOutput"], () => require("./getSqlDatabases"));

export { GetSqlTiersArgs, GetSqlTiersResult, GetSqlTiersOutputArgs } from "./getSqlTiers";
export const getSqlTiers: typeof import("./getSqlTiers").getSqlTiers = null as any;
export const getSqlTiersOutput: typeof import("./getSqlTiers").getSqlTiersOutput = null as any;
utilities.lazyLoad(exports, ["getSqlTiers","getSqlTiersOutput"], () => require("./getSqlTiers"));

export { GetStorageBucketArgs, GetStorageBucketResult, GetStorageBucketOutputArgs } from "./getStorageBucket";
export const getStorageBucket: typeof import("./getStorageBucket").getStorageBucket = null as any;
export const getStorageBucketOutput: typeof import("./getStorageBucket").getStorageBucketOutput = null as any;
utilities.lazyLoad(exports, ["getStorageBucket","getStorageBucketOutput"], () => require("./getStorageBucket"));

export { GetStorageBucketIamPolicyArgs, GetStorageBucketIamPolicyResult, GetStorageBucketIamPolicyOutputArgs } from "./getStorageBucketIamPolicy";
export const getStorageBucketIamPolicy: typeof import("./getStorageBucketIamPolicy").getStorageBucketIamPolicy = null as any;
export const getStorageBucketIamPolicyOutput: typeof import("./getStorageBucketIamPolicy").getStorageBucketIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageBucketIamPolicy","getStorageBucketIamPolicyOutput"], () => require("./getStorageBucketIamPolicy"));

export { GetStorageBucketObjectArgs, GetStorageBucketObjectResult, GetStorageBucketObjectOutputArgs } from "./getStorageBucketObject";
export const getStorageBucketObject: typeof import("./getStorageBucketObject").getStorageBucketObject = null as any;
export const getStorageBucketObjectOutput: typeof import("./getStorageBucketObject").getStorageBucketObjectOutput = null as any;
utilities.lazyLoad(exports, ["getStorageBucketObject","getStorageBucketObjectOutput"], () => require("./getStorageBucketObject"));

export { GetStorageBucketObjectContentArgs, GetStorageBucketObjectContentResult, GetStorageBucketObjectContentOutputArgs } from "./getStorageBucketObjectContent";
export const getStorageBucketObjectContent: typeof import("./getStorageBucketObjectContent").getStorageBucketObjectContent = null as any;
export const getStorageBucketObjectContentOutput: typeof import("./getStorageBucketObjectContent").getStorageBucketObjectContentOutput = null as any;
utilities.lazyLoad(exports, ["getStorageBucketObjectContent","getStorageBucketObjectContentOutput"], () => require("./getStorageBucketObjectContent"));

export { GetStorageBucketObjectsArgs, GetStorageBucketObjectsResult, GetStorageBucketObjectsOutputArgs } from "./getStorageBucketObjects";
export const getStorageBucketObjects: typeof import("./getStorageBucketObjects").getStorageBucketObjects = null as any;
export const getStorageBucketObjectsOutput: typeof import("./getStorageBucketObjects").getStorageBucketObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getStorageBucketObjects","getStorageBucketObjectsOutput"], () => require("./getStorageBucketObjects"));

export { GetStorageBucketsArgs, GetStorageBucketsResult, GetStorageBucketsOutputArgs } from "./getStorageBuckets";
export const getStorageBuckets: typeof import("./getStorageBuckets").getStorageBuckets = null as any;
export const getStorageBucketsOutput: typeof import("./getStorageBuckets").getStorageBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getStorageBuckets","getStorageBucketsOutput"], () => require("./getStorageBuckets"));

export { GetStorageManagedFolderIamPolicyArgs, GetStorageManagedFolderIamPolicyResult, GetStorageManagedFolderIamPolicyOutputArgs } from "./getStorageManagedFolderIamPolicy";
export const getStorageManagedFolderIamPolicy: typeof import("./getStorageManagedFolderIamPolicy").getStorageManagedFolderIamPolicy = null as any;
export const getStorageManagedFolderIamPolicyOutput: typeof import("./getStorageManagedFolderIamPolicy").getStorageManagedFolderIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageManagedFolderIamPolicy","getStorageManagedFolderIamPolicyOutput"], () => require("./getStorageManagedFolderIamPolicy"));

export { GetStorageObjectSignedUrlArgs, GetStorageObjectSignedUrlResult, GetStorageObjectSignedUrlOutputArgs } from "./getStorageObjectSignedUrl";
export const getStorageObjectSignedUrl: typeof import("./getStorageObjectSignedUrl").getStorageObjectSignedUrl = null as any;
export const getStorageObjectSignedUrlOutput: typeof import("./getStorageObjectSignedUrl").getStorageObjectSignedUrlOutput = null as any;
utilities.lazyLoad(exports, ["getStorageObjectSignedUrl","getStorageObjectSignedUrlOutput"], () => require("./getStorageObjectSignedUrl"));

export { GetStorageProjectServiceAccountArgs, GetStorageProjectServiceAccountResult, GetStorageProjectServiceAccountOutputArgs } from "./getStorageProjectServiceAccount";
export const getStorageProjectServiceAccount: typeof import("./getStorageProjectServiceAccount").getStorageProjectServiceAccount = null as any;
export const getStorageProjectServiceAccountOutput: typeof import("./getStorageProjectServiceAccount").getStorageProjectServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getStorageProjectServiceAccount","getStorageProjectServiceAccountOutput"], () => require("./getStorageProjectServiceAccount"));

export { GetStorageTransferProjectServiceAccountArgs, GetStorageTransferProjectServiceAccountResult, GetStorageTransferProjectServiceAccountOutputArgs } from "./getStorageTransferProjectServiceAccount";
export const getStorageTransferProjectServiceAccount: typeof import("./getStorageTransferProjectServiceAccount").getStorageTransferProjectServiceAccount = null as any;
export const getStorageTransferProjectServiceAccountOutput: typeof import("./getStorageTransferProjectServiceAccount").getStorageTransferProjectServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getStorageTransferProjectServiceAccount","getStorageTransferProjectServiceAccountOutput"], () => require("./getStorageTransferProjectServiceAccount"));

export { GetTagsTagKeyArgs, GetTagsTagKeyResult, GetTagsTagKeyOutputArgs } from "./getTagsTagKey";
export const getTagsTagKey: typeof import("./getTagsTagKey").getTagsTagKey = null as any;
export const getTagsTagKeyOutput: typeof import("./getTagsTagKey").getTagsTagKeyOutput = null as any;
utilities.lazyLoad(exports, ["getTagsTagKey","getTagsTagKeyOutput"], () => require("./getTagsTagKey"));

export { GetTagsTagKeyIamPolicyArgs, GetTagsTagKeyIamPolicyResult, GetTagsTagKeyIamPolicyOutputArgs } from "./getTagsTagKeyIamPolicy";
export const getTagsTagKeyIamPolicy: typeof import("./getTagsTagKeyIamPolicy").getTagsTagKeyIamPolicy = null as any;
export const getTagsTagKeyIamPolicyOutput: typeof import("./getTagsTagKeyIamPolicy").getTagsTagKeyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getTagsTagKeyIamPolicy","getTagsTagKeyIamPolicyOutput"], () => require("./getTagsTagKeyIamPolicy"));

export { GetTagsTagKeysArgs, GetTagsTagKeysResult, GetTagsTagKeysOutputArgs } from "./getTagsTagKeys";
export const getTagsTagKeys: typeof import("./getTagsTagKeys").getTagsTagKeys = null as any;
export const getTagsTagKeysOutput: typeof import("./getTagsTagKeys").getTagsTagKeysOutput = null as any;
utilities.lazyLoad(exports, ["getTagsTagKeys","getTagsTagKeysOutput"], () => require("./getTagsTagKeys"));

export { GetTagsTagValueArgs, GetTagsTagValueResult, GetTagsTagValueOutputArgs } from "./getTagsTagValue";
export const getTagsTagValue: typeof import("./getTagsTagValue").getTagsTagValue = null as any;
export const getTagsTagValueOutput: typeof import("./getTagsTagValue").getTagsTagValueOutput = null as any;
utilities.lazyLoad(exports, ["getTagsTagValue","getTagsTagValueOutput"], () => require("./getTagsTagValue"));

export { GetTagsTagValueIamPolicyArgs, GetTagsTagValueIamPolicyResult, GetTagsTagValueIamPolicyOutputArgs } from "./getTagsTagValueIamPolicy";
export const getTagsTagValueIamPolicy: typeof import("./getTagsTagValueIamPolicy").getTagsTagValueIamPolicy = null as any;
export const getTagsTagValueIamPolicyOutput: typeof import("./getTagsTagValueIamPolicy").getTagsTagValueIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getTagsTagValueIamPolicy","getTagsTagValueIamPolicyOutput"], () => require("./getTagsTagValueIamPolicy"));

export { GetTagsTagValuesArgs, GetTagsTagValuesResult, GetTagsTagValuesOutputArgs } from "./getTagsTagValues";
export const getTagsTagValues: typeof import("./getTagsTagValues").getTagsTagValues = null as any;
export const getTagsTagValuesOutput: typeof import("./getTagsTagValues").getTagsTagValuesOutput = null as any;
utilities.lazyLoad(exports, ["getTagsTagValues","getTagsTagValuesOutput"], () => require("./getTagsTagValues"));

export { GetTpuTensorflowVersionsArgs, GetTpuTensorflowVersionsResult, GetTpuTensorflowVersionsOutputArgs } from "./getTpuTensorflowVersions";
export const getTpuTensorflowVersions: typeof import("./getTpuTensorflowVersions").getTpuTensorflowVersions = null as any;
export const getTpuTensorflowVersionsOutput: typeof import("./getTpuTensorflowVersions").getTpuTensorflowVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getTpuTensorflowVersions","getTpuTensorflowVersionsOutput"], () => require("./getTpuTensorflowVersions"));

export { GetTpuV2AcceleratorTypesArgs, GetTpuV2AcceleratorTypesResult, GetTpuV2AcceleratorTypesOutputArgs } from "./getTpuV2AcceleratorTypes";
export const getTpuV2AcceleratorTypes: typeof import("./getTpuV2AcceleratorTypes").getTpuV2AcceleratorTypes = null as any;
export const getTpuV2AcceleratorTypesOutput: typeof import("./getTpuV2AcceleratorTypes").getTpuV2AcceleratorTypesOutput = null as any;
utilities.lazyLoad(exports, ["getTpuV2AcceleratorTypes","getTpuV2AcceleratorTypesOutput"], () => require("./getTpuV2AcceleratorTypes"));

export { GetTpuV2RuntimeVersionsArgs, GetTpuV2RuntimeVersionsResult, GetTpuV2RuntimeVersionsOutputArgs } from "./getTpuV2RuntimeVersions";
export const getTpuV2RuntimeVersions: typeof import("./getTpuV2RuntimeVersions").getTpuV2RuntimeVersions = null as any;
export const getTpuV2RuntimeVersionsOutput: typeof import("./getTpuV2RuntimeVersions").getTpuV2RuntimeVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getTpuV2RuntimeVersions","getTpuV2RuntimeVersionsOutput"], () => require("./getTpuV2RuntimeVersions"));

export { GetVertexAiEndpointIamPolicyArgs, GetVertexAiEndpointIamPolicyResult, GetVertexAiEndpointIamPolicyOutputArgs } from "./getVertexAiEndpointIamPolicy";
export const getVertexAiEndpointIamPolicy: typeof import("./getVertexAiEndpointIamPolicy").getVertexAiEndpointIamPolicy = null as any;
export const getVertexAiEndpointIamPolicyOutput: typeof import("./getVertexAiEndpointIamPolicy").getVertexAiEndpointIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVertexAiEndpointIamPolicy","getVertexAiEndpointIamPolicyOutput"], () => require("./getVertexAiEndpointIamPolicy"));

export { GetVertexAiFeaturestoreEntitytypeIamPolicyArgs, GetVertexAiFeaturestoreEntitytypeIamPolicyResult, GetVertexAiFeaturestoreEntitytypeIamPolicyOutputArgs } from "./getVertexAiFeaturestoreEntitytypeIamPolicy";
export const getVertexAiFeaturestoreEntitytypeIamPolicy: typeof import("./getVertexAiFeaturestoreEntitytypeIamPolicy").getVertexAiFeaturestoreEntitytypeIamPolicy = null as any;
export const getVertexAiFeaturestoreEntitytypeIamPolicyOutput: typeof import("./getVertexAiFeaturestoreEntitytypeIamPolicy").getVertexAiFeaturestoreEntitytypeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVertexAiFeaturestoreEntitytypeIamPolicy","getVertexAiFeaturestoreEntitytypeIamPolicyOutput"], () => require("./getVertexAiFeaturestoreEntitytypeIamPolicy"));

export { GetVertexAiFeaturestoreIamPolicyArgs, GetVertexAiFeaturestoreIamPolicyResult, GetVertexAiFeaturestoreIamPolicyOutputArgs } from "./getVertexAiFeaturestoreIamPolicy";
export const getVertexAiFeaturestoreIamPolicy: typeof import("./getVertexAiFeaturestoreIamPolicy").getVertexAiFeaturestoreIamPolicy = null as any;
export const getVertexAiFeaturestoreIamPolicyOutput: typeof import("./getVertexAiFeaturestoreIamPolicy").getVertexAiFeaturestoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVertexAiFeaturestoreIamPolicy","getVertexAiFeaturestoreIamPolicyOutput"], () => require("./getVertexAiFeaturestoreIamPolicy"));

export { GetVertexAiIndexArgs, GetVertexAiIndexResult, GetVertexAiIndexOutputArgs } from "./getVertexAiIndex";
export const getVertexAiIndex: typeof import("./getVertexAiIndex").getVertexAiIndex = null as any;
export const getVertexAiIndexOutput: typeof import("./getVertexAiIndex").getVertexAiIndexOutput = null as any;
utilities.lazyLoad(exports, ["getVertexAiIndex","getVertexAiIndexOutput"], () => require("./getVertexAiIndex"));

export { GetVmwareengineClusterArgs, GetVmwareengineClusterResult, GetVmwareengineClusterOutputArgs } from "./getVmwareengineCluster";
export const getVmwareengineCluster: typeof import("./getVmwareengineCluster").getVmwareengineCluster = null as any;
export const getVmwareengineClusterOutput: typeof import("./getVmwareengineCluster").getVmwareengineClusterOutput = null as any;
utilities.lazyLoad(exports, ["getVmwareengineCluster","getVmwareengineClusterOutput"], () => require("./getVmwareengineCluster"));

export { GetVmwareengineExternalAccessRuleArgs, GetVmwareengineExternalAccessRuleResult, GetVmwareengineExternalAccessRuleOutputArgs } from "./getVmwareengineExternalAccessRule";
export const getVmwareengineExternalAccessRule: typeof import("./getVmwareengineExternalAccessRule").getVmwareengineExternalAccessRule = null as any;
export const getVmwareengineExternalAccessRuleOutput: typeof import("./getVmwareengineExternalAccessRule").getVmwareengineExternalAccessRuleOutput = null as any;
utilities.lazyLoad(exports, ["getVmwareengineExternalAccessRule","getVmwareengineExternalAccessRuleOutput"], () => require("./getVmwareengineExternalAccessRule"));

export { GetVmwareengineExternalAddressArgs, GetVmwareengineExternalAddressResult, GetVmwareengineExternalAddressOutputArgs } from "./getVmwareengineExternalAddress";
export const getVmwareengineExternalAddress: typeof import("./getVmwareengineExternalAddress").getVmwareengineExternalAddress = null as any;
export const getVmwareengineExternalAddressOutput: typeof import("./getVmwareengineExternalAddress").getVmwareengineExternalAddressOutput = null as any;
utilities.lazyLoad(exports, ["getVmwareengineExternalAddress","getVmwareengineExternalAddressOutput"], () => require("./getVmwareengineExternalAddress"));

export { GetVmwareengineNetworkArgs, GetVmwareengineNetworkResult, GetVmwareengineNetworkOutputArgs } from "./getVmwareengineNetwork";
export const getVmwareengineNetwork: typeof import("./getVmwareengineNetwork").getVmwareengineNetwork = null as any;
export const getVmwareengineNetworkOutput: typeof import("./getVmwareengineNetwork").getVmwareengineNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVmwareengineNetwork","getVmwareengineNetworkOutput"], () => require("./getVmwareengineNetwork"));

export { GetVmwareengineNetworkPeeringArgs, GetVmwareengineNetworkPeeringResult, GetVmwareengineNetworkPeeringOutputArgs } from "./getVmwareengineNetworkPeering";
export const getVmwareengineNetworkPeering: typeof import("./getVmwareengineNetworkPeering").getVmwareengineNetworkPeering = null as any;
export const getVmwareengineNetworkPeeringOutput: typeof import("./getVmwareengineNetworkPeering").getVmwareengineNetworkPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getVmwareengineNetworkPeering","getVmwareengineNetworkPeeringOutput"], () => require("./getVmwareengineNetworkPeering"));

export { GetVmwareengineNetworkPolicyArgs, GetVmwareengineNetworkPolicyResult, GetVmwareengineNetworkPolicyOutputArgs } from "./getVmwareengineNetworkPolicy";
export const getVmwareengineNetworkPolicy: typeof import("./getVmwareengineNetworkPolicy").getVmwareengineNetworkPolicy = null as any;
export const getVmwareengineNetworkPolicyOutput: typeof import("./getVmwareengineNetworkPolicy").getVmwareengineNetworkPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVmwareengineNetworkPolicy","getVmwareengineNetworkPolicyOutput"], () => require("./getVmwareengineNetworkPolicy"));

export { GetVmwareengineNsxCredentialsArgs, GetVmwareengineNsxCredentialsResult, GetVmwareengineNsxCredentialsOutputArgs } from "./getVmwareengineNsxCredentials";
export const getVmwareengineNsxCredentials: typeof import("./getVmwareengineNsxCredentials").getVmwareengineNsxCredentials = null as any;
export const getVmwareengineNsxCredentialsOutput: typeof import("./getVmwareengineNsxCredentials").getVmwareengineNsxCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getVmwareengineNsxCredentials","getVmwareengineNsxCredentialsOutput"], () => require("./getVmwareengineNsxCredentials"));

export { GetVmwareenginePrivateCloudArgs, GetVmwareenginePrivateCloudResult, GetVmwareenginePrivateCloudOutputArgs } from "./getVmwareenginePrivateCloud";
export const getVmwareenginePrivateCloud: typeof import("./getVmwareenginePrivateCloud").getVmwareenginePrivateCloud = null as any;
export const getVmwareenginePrivateCloudOutput: typeof import("./getVmwareenginePrivateCloud").getVmwareenginePrivateCloudOutput = null as any;
utilities.lazyLoad(exports, ["getVmwareenginePrivateCloud","getVmwareenginePrivateCloudOutput"], () => require("./getVmwareenginePrivateCloud"));

export { GetVmwareengineSubnetArgs, GetVmwareengineSubnetResult, GetVmwareengineSubnetOutputArgs } from "./getVmwareengineSubnet";
export const getVmwareengineSubnet: typeof import("./getVmwareengineSubnet").getVmwareengineSubnet = null as any;
export const getVmwareengineSubnetOutput: typeof import("./getVmwareengineSubnet").getVmwareengineSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getVmwareengineSubnet","getVmwareengineSubnetOutput"], () => require("./getVmwareengineSubnet"));

export { GetVmwareengineVcenterCredentialsArgs, GetVmwareengineVcenterCredentialsResult, GetVmwareengineVcenterCredentialsOutputArgs } from "./getVmwareengineVcenterCredentials";
export const getVmwareengineVcenterCredentials: typeof import("./getVmwareengineVcenterCredentials").getVmwareengineVcenterCredentials = null as any;
export const getVmwareengineVcenterCredentialsOutput: typeof import("./getVmwareengineVcenterCredentials").getVmwareengineVcenterCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getVmwareengineVcenterCredentials","getVmwareengineVcenterCredentialsOutput"], () => require("./getVmwareengineVcenterCredentials"));

export { GetVpcAccessConnectorArgs, GetVpcAccessConnectorResult, GetVpcAccessConnectorOutputArgs } from "./getVpcAccessConnector";
export const getVpcAccessConnector: typeof import("./getVpcAccessConnector").getVpcAccessConnector = null as any;
export const getVpcAccessConnectorOutput: typeof import("./getVpcAccessConnector").getVpcAccessConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getVpcAccessConnector","getVpcAccessConnectorOutput"], () => require("./getVpcAccessConnector"));

export { GetWorkbenchInstanceIamPolicyArgs, GetWorkbenchInstanceIamPolicyResult, GetWorkbenchInstanceIamPolicyOutputArgs } from "./getWorkbenchInstanceIamPolicy";
export const getWorkbenchInstanceIamPolicy: typeof import("./getWorkbenchInstanceIamPolicy").getWorkbenchInstanceIamPolicy = null as any;
export const getWorkbenchInstanceIamPolicyOutput: typeof import("./getWorkbenchInstanceIamPolicy").getWorkbenchInstanceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWorkbenchInstanceIamPolicy","getWorkbenchInstanceIamPolicyOutput"], () => require("./getWorkbenchInstanceIamPolicy"));

export { GetWorkstationsWorkstationConfigIamPolicyArgs, GetWorkstationsWorkstationConfigIamPolicyResult, GetWorkstationsWorkstationConfigIamPolicyOutputArgs } from "./getWorkstationsWorkstationConfigIamPolicy";
export const getWorkstationsWorkstationConfigIamPolicy: typeof import("./getWorkstationsWorkstationConfigIamPolicy").getWorkstationsWorkstationConfigIamPolicy = null as any;
export const getWorkstationsWorkstationConfigIamPolicyOutput: typeof import("./getWorkstationsWorkstationConfigIamPolicy").getWorkstationsWorkstationConfigIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWorkstationsWorkstationConfigIamPolicy","getWorkstationsWorkstationConfigIamPolicyOutput"], () => require("./getWorkstationsWorkstationConfigIamPolicy"));

export { GetWorkstationsWorkstationIamPolicyArgs, GetWorkstationsWorkstationIamPolicyResult, GetWorkstationsWorkstationIamPolicyOutputArgs } from "./getWorkstationsWorkstationIamPolicy";
export const getWorkstationsWorkstationIamPolicy: typeof import("./getWorkstationsWorkstationIamPolicy").getWorkstationsWorkstationIamPolicy = null as any;
export const getWorkstationsWorkstationIamPolicyOutput: typeof import("./getWorkstationsWorkstationIamPolicy").getWorkstationsWorkstationIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWorkstationsWorkstationIamPolicy","getWorkstationsWorkstationIamPolicyOutput"], () => require("./getWorkstationsWorkstationIamPolicy"));

export { GkeBackupBackupPlanArgs, GkeBackupBackupPlanState } from "./gkeBackupBackupPlan";
export type GkeBackupBackupPlan = import("./gkeBackupBackupPlan").GkeBackupBackupPlan;
export const GkeBackupBackupPlan: typeof import("./gkeBackupBackupPlan").GkeBackupBackupPlan = null as any;
utilities.lazyLoad(exports, ["GkeBackupBackupPlan"], () => require("./gkeBackupBackupPlan"));

export { GkeBackupBackupPlanIamBindingArgs, GkeBackupBackupPlanIamBindingState } from "./gkeBackupBackupPlanIamBinding";
export type GkeBackupBackupPlanIamBinding = import("./gkeBackupBackupPlanIamBinding").GkeBackupBackupPlanIamBinding;
export const GkeBackupBackupPlanIamBinding: typeof import("./gkeBackupBackupPlanIamBinding").GkeBackupBackupPlanIamBinding = null as any;
utilities.lazyLoad(exports, ["GkeBackupBackupPlanIamBinding"], () => require("./gkeBackupBackupPlanIamBinding"));

export { GkeBackupBackupPlanIamMemberArgs, GkeBackupBackupPlanIamMemberState } from "./gkeBackupBackupPlanIamMember";
export type GkeBackupBackupPlanIamMember = import("./gkeBackupBackupPlanIamMember").GkeBackupBackupPlanIamMember;
export const GkeBackupBackupPlanIamMember: typeof import("./gkeBackupBackupPlanIamMember").GkeBackupBackupPlanIamMember = null as any;
utilities.lazyLoad(exports, ["GkeBackupBackupPlanIamMember"], () => require("./gkeBackupBackupPlanIamMember"));

export { GkeBackupBackupPlanIamPolicyArgs, GkeBackupBackupPlanIamPolicyState } from "./gkeBackupBackupPlanIamPolicy";
export type GkeBackupBackupPlanIamPolicy = import("./gkeBackupBackupPlanIamPolicy").GkeBackupBackupPlanIamPolicy;
export const GkeBackupBackupPlanIamPolicy: typeof import("./gkeBackupBackupPlanIamPolicy").GkeBackupBackupPlanIamPolicy = null as any;
utilities.lazyLoad(exports, ["GkeBackupBackupPlanIamPolicy"], () => require("./gkeBackupBackupPlanIamPolicy"));

export { GkeBackupRestorePlanArgs, GkeBackupRestorePlanState } from "./gkeBackupRestorePlan";
export type GkeBackupRestorePlan = import("./gkeBackupRestorePlan").GkeBackupRestorePlan;
export const GkeBackupRestorePlan: typeof import("./gkeBackupRestorePlan").GkeBackupRestorePlan = null as any;
utilities.lazyLoad(exports, ["GkeBackupRestorePlan"], () => require("./gkeBackupRestorePlan"));

export { GkeBackupRestorePlanIamBindingArgs, GkeBackupRestorePlanIamBindingState } from "./gkeBackupRestorePlanIamBinding";
export type GkeBackupRestorePlanIamBinding = import("./gkeBackupRestorePlanIamBinding").GkeBackupRestorePlanIamBinding;
export const GkeBackupRestorePlanIamBinding: typeof import("./gkeBackupRestorePlanIamBinding").GkeBackupRestorePlanIamBinding = null as any;
utilities.lazyLoad(exports, ["GkeBackupRestorePlanIamBinding"], () => require("./gkeBackupRestorePlanIamBinding"));

export { GkeBackupRestorePlanIamMemberArgs, GkeBackupRestorePlanIamMemberState } from "./gkeBackupRestorePlanIamMember";
export type GkeBackupRestorePlanIamMember = import("./gkeBackupRestorePlanIamMember").GkeBackupRestorePlanIamMember;
export const GkeBackupRestorePlanIamMember: typeof import("./gkeBackupRestorePlanIamMember").GkeBackupRestorePlanIamMember = null as any;
utilities.lazyLoad(exports, ["GkeBackupRestorePlanIamMember"], () => require("./gkeBackupRestorePlanIamMember"));

export { GkeBackupRestorePlanIamPolicyArgs, GkeBackupRestorePlanIamPolicyState } from "./gkeBackupRestorePlanIamPolicy";
export type GkeBackupRestorePlanIamPolicy = import("./gkeBackupRestorePlanIamPolicy").GkeBackupRestorePlanIamPolicy;
export const GkeBackupRestorePlanIamPolicy: typeof import("./gkeBackupRestorePlanIamPolicy").GkeBackupRestorePlanIamPolicy = null as any;
utilities.lazyLoad(exports, ["GkeBackupRestorePlanIamPolicy"], () => require("./gkeBackupRestorePlanIamPolicy"));

export { GkeHubFeatureArgs, GkeHubFeatureState } from "./gkeHubFeature";
export type GkeHubFeature = import("./gkeHubFeature").GkeHubFeature;
export const GkeHubFeature: typeof import("./gkeHubFeature").GkeHubFeature = null as any;
utilities.lazyLoad(exports, ["GkeHubFeature"], () => require("./gkeHubFeature"));

export { GkeHubFeatureIamBindingArgs, GkeHubFeatureIamBindingState } from "./gkeHubFeatureIamBinding";
export type GkeHubFeatureIamBinding = import("./gkeHubFeatureIamBinding").GkeHubFeatureIamBinding;
export const GkeHubFeatureIamBinding: typeof import("./gkeHubFeatureIamBinding").GkeHubFeatureIamBinding = null as any;
utilities.lazyLoad(exports, ["GkeHubFeatureIamBinding"], () => require("./gkeHubFeatureIamBinding"));

export { GkeHubFeatureIamMemberArgs, GkeHubFeatureIamMemberState } from "./gkeHubFeatureIamMember";
export type GkeHubFeatureIamMember = import("./gkeHubFeatureIamMember").GkeHubFeatureIamMember;
export const GkeHubFeatureIamMember: typeof import("./gkeHubFeatureIamMember").GkeHubFeatureIamMember = null as any;
utilities.lazyLoad(exports, ["GkeHubFeatureIamMember"], () => require("./gkeHubFeatureIamMember"));

export { GkeHubFeatureIamPolicyArgs, GkeHubFeatureIamPolicyState } from "./gkeHubFeatureIamPolicy";
export type GkeHubFeatureIamPolicy = import("./gkeHubFeatureIamPolicy").GkeHubFeatureIamPolicy;
export const GkeHubFeatureIamPolicy: typeof import("./gkeHubFeatureIamPolicy").GkeHubFeatureIamPolicy = null as any;
utilities.lazyLoad(exports, ["GkeHubFeatureIamPolicy"], () => require("./gkeHubFeatureIamPolicy"));

export { GkeHubFeatureMembershipArgs, GkeHubFeatureMembershipState } from "./gkeHubFeatureMembership";
export type GkeHubFeatureMembership = import("./gkeHubFeatureMembership").GkeHubFeatureMembership;
export const GkeHubFeatureMembership: typeof import("./gkeHubFeatureMembership").GkeHubFeatureMembership = null as any;
utilities.lazyLoad(exports, ["GkeHubFeatureMembership"], () => require("./gkeHubFeatureMembership"));

export { GkeHubFleetArgs, GkeHubFleetState } from "./gkeHubFleet";
export type GkeHubFleet = import("./gkeHubFleet").GkeHubFleet;
export const GkeHubFleet: typeof import("./gkeHubFleet").GkeHubFleet = null as any;
utilities.lazyLoad(exports, ["GkeHubFleet"], () => require("./gkeHubFleet"));

export { GkeHubMembershipArgs, GkeHubMembershipState } from "./gkeHubMembership";
export type GkeHubMembership = import("./gkeHubMembership").GkeHubMembership;
export const GkeHubMembership: typeof import("./gkeHubMembership").GkeHubMembership = null as any;
utilities.lazyLoad(exports, ["GkeHubMembership"], () => require("./gkeHubMembership"));

export { GkeHubMembershipBindingArgs, GkeHubMembershipBindingState } from "./gkeHubMembershipBinding";
export type GkeHubMembershipBinding = import("./gkeHubMembershipBinding").GkeHubMembershipBinding;
export const GkeHubMembershipBinding: typeof import("./gkeHubMembershipBinding").GkeHubMembershipBinding = null as any;
utilities.lazyLoad(exports, ["GkeHubMembershipBinding"], () => require("./gkeHubMembershipBinding"));

export { GkeHubMembershipIamBindingArgs, GkeHubMembershipIamBindingState } from "./gkeHubMembershipIamBinding";
export type GkeHubMembershipIamBinding = import("./gkeHubMembershipIamBinding").GkeHubMembershipIamBinding;
export const GkeHubMembershipIamBinding: typeof import("./gkeHubMembershipIamBinding").GkeHubMembershipIamBinding = null as any;
utilities.lazyLoad(exports, ["GkeHubMembershipIamBinding"], () => require("./gkeHubMembershipIamBinding"));

export { GkeHubMembershipIamMemberArgs, GkeHubMembershipIamMemberState } from "./gkeHubMembershipIamMember";
export type GkeHubMembershipIamMember = import("./gkeHubMembershipIamMember").GkeHubMembershipIamMember;
export const GkeHubMembershipIamMember: typeof import("./gkeHubMembershipIamMember").GkeHubMembershipIamMember = null as any;
utilities.lazyLoad(exports, ["GkeHubMembershipIamMember"], () => require("./gkeHubMembershipIamMember"));

export { GkeHubMembershipIamPolicyArgs, GkeHubMembershipIamPolicyState } from "./gkeHubMembershipIamPolicy";
export type GkeHubMembershipIamPolicy = import("./gkeHubMembershipIamPolicy").GkeHubMembershipIamPolicy;
export const GkeHubMembershipIamPolicy: typeof import("./gkeHubMembershipIamPolicy").GkeHubMembershipIamPolicy = null as any;
utilities.lazyLoad(exports, ["GkeHubMembershipIamPolicy"], () => require("./gkeHubMembershipIamPolicy"));

export { GkeHubMembershipRbacRoleBindingArgs, GkeHubMembershipRbacRoleBindingState } from "./gkeHubMembershipRbacRoleBinding";
export type GkeHubMembershipRbacRoleBinding = import("./gkeHubMembershipRbacRoleBinding").GkeHubMembershipRbacRoleBinding;
export const GkeHubMembershipRbacRoleBinding: typeof import("./gkeHubMembershipRbacRoleBinding").GkeHubMembershipRbacRoleBinding = null as any;
utilities.lazyLoad(exports, ["GkeHubMembershipRbacRoleBinding"], () => require("./gkeHubMembershipRbacRoleBinding"));

export { GkeHubNamespaceArgs, GkeHubNamespaceState } from "./gkeHubNamespace";
export type GkeHubNamespace = import("./gkeHubNamespace").GkeHubNamespace;
export const GkeHubNamespace: typeof import("./gkeHubNamespace").GkeHubNamespace = null as any;
utilities.lazyLoad(exports, ["GkeHubNamespace"], () => require("./gkeHubNamespace"));

export { GkeHubScopeArgs, GkeHubScopeState } from "./gkeHubScope";
export type GkeHubScope = import("./gkeHubScope").GkeHubScope;
export const GkeHubScope: typeof import("./gkeHubScope").GkeHubScope = null as any;
utilities.lazyLoad(exports, ["GkeHubScope"], () => require("./gkeHubScope"));

export { GkeHubScopeIamBindingArgs, GkeHubScopeIamBindingState } from "./gkeHubScopeIamBinding";
export type GkeHubScopeIamBinding = import("./gkeHubScopeIamBinding").GkeHubScopeIamBinding;
export const GkeHubScopeIamBinding: typeof import("./gkeHubScopeIamBinding").GkeHubScopeIamBinding = null as any;
utilities.lazyLoad(exports, ["GkeHubScopeIamBinding"], () => require("./gkeHubScopeIamBinding"));

export { GkeHubScopeIamMemberArgs, GkeHubScopeIamMemberState } from "./gkeHubScopeIamMember";
export type GkeHubScopeIamMember = import("./gkeHubScopeIamMember").GkeHubScopeIamMember;
export const GkeHubScopeIamMember: typeof import("./gkeHubScopeIamMember").GkeHubScopeIamMember = null as any;
utilities.lazyLoad(exports, ["GkeHubScopeIamMember"], () => require("./gkeHubScopeIamMember"));

export { GkeHubScopeIamPolicyArgs, GkeHubScopeIamPolicyState } from "./gkeHubScopeIamPolicy";
export type GkeHubScopeIamPolicy = import("./gkeHubScopeIamPolicy").GkeHubScopeIamPolicy;
export const GkeHubScopeIamPolicy: typeof import("./gkeHubScopeIamPolicy").GkeHubScopeIamPolicy = null as any;
utilities.lazyLoad(exports, ["GkeHubScopeIamPolicy"], () => require("./gkeHubScopeIamPolicy"));

export { GkeHubScopeRbacRoleBindingArgs, GkeHubScopeRbacRoleBindingState } from "./gkeHubScopeRbacRoleBinding";
export type GkeHubScopeRbacRoleBinding = import("./gkeHubScopeRbacRoleBinding").GkeHubScopeRbacRoleBinding;
export const GkeHubScopeRbacRoleBinding: typeof import("./gkeHubScopeRbacRoleBinding").GkeHubScopeRbacRoleBinding = null as any;
utilities.lazyLoad(exports, ["GkeHubScopeRbacRoleBinding"], () => require("./gkeHubScopeRbacRoleBinding"));

export { GkeonpremBareMetalAdminClusterArgs, GkeonpremBareMetalAdminClusterState } from "./gkeonpremBareMetalAdminCluster";
export type GkeonpremBareMetalAdminCluster = import("./gkeonpremBareMetalAdminCluster").GkeonpremBareMetalAdminCluster;
export const GkeonpremBareMetalAdminCluster: typeof import("./gkeonpremBareMetalAdminCluster").GkeonpremBareMetalAdminCluster = null as any;
utilities.lazyLoad(exports, ["GkeonpremBareMetalAdminCluster"], () => require("./gkeonpremBareMetalAdminCluster"));

export { GkeonpremBareMetalClusterArgs, GkeonpremBareMetalClusterState } from "./gkeonpremBareMetalCluster";
export type GkeonpremBareMetalCluster = import("./gkeonpremBareMetalCluster").GkeonpremBareMetalCluster;
export const GkeonpremBareMetalCluster: typeof import("./gkeonpremBareMetalCluster").GkeonpremBareMetalCluster = null as any;
utilities.lazyLoad(exports, ["GkeonpremBareMetalCluster"], () => require("./gkeonpremBareMetalCluster"));

export { GkeonpremBareMetalNodePoolArgs, GkeonpremBareMetalNodePoolState } from "./gkeonpremBareMetalNodePool";
export type GkeonpremBareMetalNodePool = import("./gkeonpremBareMetalNodePool").GkeonpremBareMetalNodePool;
export const GkeonpremBareMetalNodePool: typeof import("./gkeonpremBareMetalNodePool").GkeonpremBareMetalNodePool = null as any;
utilities.lazyLoad(exports, ["GkeonpremBareMetalNodePool"], () => require("./gkeonpremBareMetalNodePool"));

export { GkeonpremVmwareClusterArgs, GkeonpremVmwareClusterState } from "./gkeonpremVmwareCluster";
export type GkeonpremVmwareCluster = import("./gkeonpremVmwareCluster").GkeonpremVmwareCluster;
export const GkeonpremVmwareCluster: typeof import("./gkeonpremVmwareCluster").GkeonpremVmwareCluster = null as any;
utilities.lazyLoad(exports, ["GkeonpremVmwareCluster"], () => require("./gkeonpremVmwareCluster"));

export { GkeonpremVmwareNodePoolArgs, GkeonpremVmwareNodePoolState } from "./gkeonpremVmwareNodePool";
export type GkeonpremVmwareNodePool = import("./gkeonpremVmwareNodePool").GkeonpremVmwareNodePool;
export const GkeonpremVmwareNodePool: typeof import("./gkeonpremVmwareNodePool").GkeonpremVmwareNodePool = null as any;
utilities.lazyLoad(exports, ["GkeonpremVmwareNodePool"], () => require("./gkeonpremVmwareNodePool"));

export { HealthcareConsentStoreArgs, HealthcareConsentStoreState } from "./healthcareConsentStore";
export type HealthcareConsentStore = import("./healthcareConsentStore").HealthcareConsentStore;
export const HealthcareConsentStore: typeof import("./healthcareConsentStore").HealthcareConsentStore = null as any;
utilities.lazyLoad(exports, ["HealthcareConsentStore"], () => require("./healthcareConsentStore"));

export { HealthcareConsentStoreIamBindingArgs, HealthcareConsentStoreIamBindingState } from "./healthcareConsentStoreIamBinding";
export type HealthcareConsentStoreIamBinding = import("./healthcareConsentStoreIamBinding").HealthcareConsentStoreIamBinding;
export const HealthcareConsentStoreIamBinding: typeof import("./healthcareConsentStoreIamBinding").HealthcareConsentStoreIamBinding = null as any;
utilities.lazyLoad(exports, ["HealthcareConsentStoreIamBinding"], () => require("./healthcareConsentStoreIamBinding"));

export { HealthcareConsentStoreIamMemberArgs, HealthcareConsentStoreIamMemberState } from "./healthcareConsentStoreIamMember";
export type HealthcareConsentStoreIamMember = import("./healthcareConsentStoreIamMember").HealthcareConsentStoreIamMember;
export const HealthcareConsentStoreIamMember: typeof import("./healthcareConsentStoreIamMember").HealthcareConsentStoreIamMember = null as any;
utilities.lazyLoad(exports, ["HealthcareConsentStoreIamMember"], () => require("./healthcareConsentStoreIamMember"));

export { HealthcareConsentStoreIamPolicyArgs, HealthcareConsentStoreIamPolicyState } from "./healthcareConsentStoreIamPolicy";
export type HealthcareConsentStoreIamPolicy = import("./healthcareConsentStoreIamPolicy").HealthcareConsentStoreIamPolicy;
export const HealthcareConsentStoreIamPolicy: typeof import("./healthcareConsentStoreIamPolicy").HealthcareConsentStoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["HealthcareConsentStoreIamPolicy"], () => require("./healthcareConsentStoreIamPolicy"));

export { HealthcareDatasetArgs, HealthcareDatasetState } from "./healthcareDataset";
export type HealthcareDataset = import("./healthcareDataset").HealthcareDataset;
export const HealthcareDataset: typeof import("./healthcareDataset").HealthcareDataset = null as any;
utilities.lazyLoad(exports, ["HealthcareDataset"], () => require("./healthcareDataset"));

export { HealthcareDatasetIamBindingArgs, HealthcareDatasetIamBindingState } from "./healthcareDatasetIamBinding";
export type HealthcareDatasetIamBinding = import("./healthcareDatasetIamBinding").HealthcareDatasetIamBinding;
export const HealthcareDatasetIamBinding: typeof import("./healthcareDatasetIamBinding").HealthcareDatasetIamBinding = null as any;
utilities.lazyLoad(exports, ["HealthcareDatasetIamBinding"], () => require("./healthcareDatasetIamBinding"));

export { HealthcareDatasetIamMemberArgs, HealthcareDatasetIamMemberState } from "./healthcareDatasetIamMember";
export type HealthcareDatasetIamMember = import("./healthcareDatasetIamMember").HealthcareDatasetIamMember;
export const HealthcareDatasetIamMember: typeof import("./healthcareDatasetIamMember").HealthcareDatasetIamMember = null as any;
utilities.lazyLoad(exports, ["HealthcareDatasetIamMember"], () => require("./healthcareDatasetIamMember"));

export { HealthcareDatasetIamPolicyArgs, HealthcareDatasetIamPolicyState } from "./healthcareDatasetIamPolicy";
export type HealthcareDatasetIamPolicy = import("./healthcareDatasetIamPolicy").HealthcareDatasetIamPolicy;
export const HealthcareDatasetIamPolicy: typeof import("./healthcareDatasetIamPolicy").HealthcareDatasetIamPolicy = null as any;
utilities.lazyLoad(exports, ["HealthcareDatasetIamPolicy"], () => require("./healthcareDatasetIamPolicy"));

export { HealthcareDicomStoreArgs, HealthcareDicomStoreState } from "./healthcareDicomStore";
export type HealthcareDicomStore = import("./healthcareDicomStore").HealthcareDicomStore;
export const HealthcareDicomStore: typeof import("./healthcareDicomStore").HealthcareDicomStore = null as any;
utilities.lazyLoad(exports, ["HealthcareDicomStore"], () => require("./healthcareDicomStore"));

export { HealthcareDicomStoreIamBindingArgs, HealthcareDicomStoreIamBindingState } from "./healthcareDicomStoreIamBinding";
export type HealthcareDicomStoreIamBinding = import("./healthcareDicomStoreIamBinding").HealthcareDicomStoreIamBinding;
export const HealthcareDicomStoreIamBinding: typeof import("./healthcareDicomStoreIamBinding").HealthcareDicomStoreIamBinding = null as any;
utilities.lazyLoad(exports, ["HealthcareDicomStoreIamBinding"], () => require("./healthcareDicomStoreIamBinding"));

export { HealthcareDicomStoreIamMemberArgs, HealthcareDicomStoreIamMemberState } from "./healthcareDicomStoreIamMember";
export type HealthcareDicomStoreIamMember = import("./healthcareDicomStoreIamMember").HealthcareDicomStoreIamMember;
export const HealthcareDicomStoreIamMember: typeof import("./healthcareDicomStoreIamMember").HealthcareDicomStoreIamMember = null as any;
utilities.lazyLoad(exports, ["HealthcareDicomStoreIamMember"], () => require("./healthcareDicomStoreIamMember"));

export { HealthcareDicomStoreIamPolicyArgs, HealthcareDicomStoreIamPolicyState } from "./healthcareDicomStoreIamPolicy";
export type HealthcareDicomStoreIamPolicy = import("./healthcareDicomStoreIamPolicy").HealthcareDicomStoreIamPolicy;
export const HealthcareDicomStoreIamPolicy: typeof import("./healthcareDicomStoreIamPolicy").HealthcareDicomStoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["HealthcareDicomStoreIamPolicy"], () => require("./healthcareDicomStoreIamPolicy"));

export { HealthcareFhirStoreArgs, HealthcareFhirStoreState } from "./healthcareFhirStore";
export type HealthcareFhirStore = import("./healthcareFhirStore").HealthcareFhirStore;
export const HealthcareFhirStore: typeof import("./healthcareFhirStore").HealthcareFhirStore = null as any;
utilities.lazyLoad(exports, ["HealthcareFhirStore"], () => require("./healthcareFhirStore"));

export { HealthcareFhirStoreIamBindingArgs, HealthcareFhirStoreIamBindingState } from "./healthcareFhirStoreIamBinding";
export type HealthcareFhirStoreIamBinding = import("./healthcareFhirStoreIamBinding").HealthcareFhirStoreIamBinding;
export const HealthcareFhirStoreIamBinding: typeof import("./healthcareFhirStoreIamBinding").HealthcareFhirStoreIamBinding = null as any;
utilities.lazyLoad(exports, ["HealthcareFhirStoreIamBinding"], () => require("./healthcareFhirStoreIamBinding"));

export { HealthcareFhirStoreIamMemberArgs, HealthcareFhirStoreIamMemberState } from "./healthcareFhirStoreIamMember";
export type HealthcareFhirStoreIamMember = import("./healthcareFhirStoreIamMember").HealthcareFhirStoreIamMember;
export const HealthcareFhirStoreIamMember: typeof import("./healthcareFhirStoreIamMember").HealthcareFhirStoreIamMember = null as any;
utilities.lazyLoad(exports, ["HealthcareFhirStoreIamMember"], () => require("./healthcareFhirStoreIamMember"));

export { HealthcareFhirStoreIamPolicyArgs, HealthcareFhirStoreIamPolicyState } from "./healthcareFhirStoreIamPolicy";
export type HealthcareFhirStoreIamPolicy = import("./healthcareFhirStoreIamPolicy").HealthcareFhirStoreIamPolicy;
export const HealthcareFhirStoreIamPolicy: typeof import("./healthcareFhirStoreIamPolicy").HealthcareFhirStoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["HealthcareFhirStoreIamPolicy"], () => require("./healthcareFhirStoreIamPolicy"));

export { HealthcareHl7V2StoreArgs, HealthcareHl7V2StoreState } from "./healthcareHl7V2Store";
export type HealthcareHl7V2Store = import("./healthcareHl7V2Store").HealthcareHl7V2Store;
export const HealthcareHl7V2Store: typeof import("./healthcareHl7V2Store").HealthcareHl7V2Store = null as any;
utilities.lazyLoad(exports, ["HealthcareHl7V2Store"], () => require("./healthcareHl7V2Store"));

export { HealthcareHl7V2StoreIamBindingArgs, HealthcareHl7V2StoreIamBindingState } from "./healthcareHl7V2StoreIamBinding";
export type HealthcareHl7V2StoreIamBinding = import("./healthcareHl7V2StoreIamBinding").HealthcareHl7V2StoreIamBinding;
export const HealthcareHl7V2StoreIamBinding: typeof import("./healthcareHl7V2StoreIamBinding").HealthcareHl7V2StoreIamBinding = null as any;
utilities.lazyLoad(exports, ["HealthcareHl7V2StoreIamBinding"], () => require("./healthcareHl7V2StoreIamBinding"));

export { HealthcareHl7V2StoreIamMemberArgs, HealthcareHl7V2StoreIamMemberState } from "./healthcareHl7V2StoreIamMember";
export type HealthcareHl7V2StoreIamMember = import("./healthcareHl7V2StoreIamMember").HealthcareHl7V2StoreIamMember;
export const HealthcareHl7V2StoreIamMember: typeof import("./healthcareHl7V2StoreIamMember").HealthcareHl7V2StoreIamMember = null as any;
utilities.lazyLoad(exports, ["HealthcareHl7V2StoreIamMember"], () => require("./healthcareHl7V2StoreIamMember"));

export { HealthcareHl7V2StoreIamPolicyArgs, HealthcareHl7V2StoreIamPolicyState } from "./healthcareHl7V2StoreIamPolicy";
export type HealthcareHl7V2StoreIamPolicy = import("./healthcareHl7V2StoreIamPolicy").HealthcareHl7V2StoreIamPolicy;
export const HealthcareHl7V2StoreIamPolicy: typeof import("./healthcareHl7V2StoreIamPolicy").HealthcareHl7V2StoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["HealthcareHl7V2StoreIamPolicy"], () => require("./healthcareHl7V2StoreIamPolicy"));

export { IamAccessBoundaryPolicyArgs, IamAccessBoundaryPolicyState } from "./iamAccessBoundaryPolicy";
export type IamAccessBoundaryPolicy = import("./iamAccessBoundaryPolicy").IamAccessBoundaryPolicy;
export const IamAccessBoundaryPolicy: typeof import("./iamAccessBoundaryPolicy").IamAccessBoundaryPolicy = null as any;
utilities.lazyLoad(exports, ["IamAccessBoundaryPolicy"], () => require("./iamAccessBoundaryPolicy"));

export { IamDenyPolicyArgs, IamDenyPolicyState } from "./iamDenyPolicy";
export type IamDenyPolicy = import("./iamDenyPolicy").IamDenyPolicy;
export const IamDenyPolicy: typeof import("./iamDenyPolicy").IamDenyPolicy = null as any;
utilities.lazyLoad(exports, ["IamDenyPolicy"], () => require("./iamDenyPolicy"));

export { IamWorkforcePoolArgs, IamWorkforcePoolState } from "./iamWorkforcePool";
export type IamWorkforcePool = import("./iamWorkforcePool").IamWorkforcePool;
export const IamWorkforcePool: typeof import("./iamWorkforcePool").IamWorkforcePool = null as any;
utilities.lazyLoad(exports, ["IamWorkforcePool"], () => require("./iamWorkforcePool"));

export { IamWorkforcePoolProviderArgs, IamWorkforcePoolProviderState } from "./iamWorkforcePoolProvider";
export type IamWorkforcePoolProvider = import("./iamWorkforcePoolProvider").IamWorkforcePoolProvider;
export const IamWorkforcePoolProvider: typeof import("./iamWorkforcePoolProvider").IamWorkforcePoolProvider = null as any;
utilities.lazyLoad(exports, ["IamWorkforcePoolProvider"], () => require("./iamWorkforcePoolProvider"));

export { IamWorkloadIdentityPoolArgs, IamWorkloadIdentityPoolState } from "./iamWorkloadIdentityPool";
export type IamWorkloadIdentityPool = import("./iamWorkloadIdentityPool").IamWorkloadIdentityPool;
export const IamWorkloadIdentityPool: typeof import("./iamWorkloadIdentityPool").IamWorkloadIdentityPool = null as any;
utilities.lazyLoad(exports, ["IamWorkloadIdentityPool"], () => require("./iamWorkloadIdentityPool"));

export { IamWorkloadIdentityPoolProviderArgs, IamWorkloadIdentityPoolProviderState } from "./iamWorkloadIdentityPoolProvider";
export type IamWorkloadIdentityPoolProvider = import("./iamWorkloadIdentityPoolProvider").IamWorkloadIdentityPoolProvider;
export const IamWorkloadIdentityPoolProvider: typeof import("./iamWorkloadIdentityPoolProvider").IamWorkloadIdentityPoolProvider = null as any;
utilities.lazyLoad(exports, ["IamWorkloadIdentityPoolProvider"], () => require("./iamWorkloadIdentityPoolProvider"));

export { IapAppEngineServiceIamBindingArgs, IapAppEngineServiceIamBindingState } from "./iapAppEngineServiceIamBinding";
export type IapAppEngineServiceIamBinding = import("./iapAppEngineServiceIamBinding").IapAppEngineServiceIamBinding;
export const IapAppEngineServiceIamBinding: typeof import("./iapAppEngineServiceIamBinding").IapAppEngineServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["IapAppEngineServiceIamBinding"], () => require("./iapAppEngineServiceIamBinding"));

export { IapAppEngineServiceIamMemberArgs, IapAppEngineServiceIamMemberState } from "./iapAppEngineServiceIamMember";
export type IapAppEngineServiceIamMember = import("./iapAppEngineServiceIamMember").IapAppEngineServiceIamMember;
export const IapAppEngineServiceIamMember: typeof import("./iapAppEngineServiceIamMember").IapAppEngineServiceIamMember = null as any;
utilities.lazyLoad(exports, ["IapAppEngineServiceIamMember"], () => require("./iapAppEngineServiceIamMember"));

export { IapAppEngineServiceIamPolicyArgs, IapAppEngineServiceIamPolicyState } from "./iapAppEngineServiceIamPolicy";
export type IapAppEngineServiceIamPolicy = import("./iapAppEngineServiceIamPolicy").IapAppEngineServiceIamPolicy;
export const IapAppEngineServiceIamPolicy: typeof import("./iapAppEngineServiceIamPolicy").IapAppEngineServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["IapAppEngineServiceIamPolicy"], () => require("./iapAppEngineServiceIamPolicy"));

export { IapAppEngineVersionIamBindingArgs, IapAppEngineVersionIamBindingState } from "./iapAppEngineVersionIamBinding";
export type IapAppEngineVersionIamBinding = import("./iapAppEngineVersionIamBinding").IapAppEngineVersionIamBinding;
export const IapAppEngineVersionIamBinding: typeof import("./iapAppEngineVersionIamBinding").IapAppEngineVersionIamBinding = null as any;
utilities.lazyLoad(exports, ["IapAppEngineVersionIamBinding"], () => require("./iapAppEngineVersionIamBinding"));

export { IapAppEngineVersionIamMemberArgs, IapAppEngineVersionIamMemberState } from "./iapAppEngineVersionIamMember";
export type IapAppEngineVersionIamMember = import("./iapAppEngineVersionIamMember").IapAppEngineVersionIamMember;
export const IapAppEngineVersionIamMember: typeof import("./iapAppEngineVersionIamMember").IapAppEngineVersionIamMember = null as any;
utilities.lazyLoad(exports, ["IapAppEngineVersionIamMember"], () => require("./iapAppEngineVersionIamMember"));

export { IapAppEngineVersionIamPolicyArgs, IapAppEngineVersionIamPolicyState } from "./iapAppEngineVersionIamPolicy";
export type IapAppEngineVersionIamPolicy = import("./iapAppEngineVersionIamPolicy").IapAppEngineVersionIamPolicy;
export const IapAppEngineVersionIamPolicy: typeof import("./iapAppEngineVersionIamPolicy").IapAppEngineVersionIamPolicy = null as any;
utilities.lazyLoad(exports, ["IapAppEngineVersionIamPolicy"], () => require("./iapAppEngineVersionIamPolicy"));

export { IapBrandArgs, IapBrandState } from "./iapBrand";
export type IapBrand = import("./iapBrand").IapBrand;
export const IapBrand: typeof import("./iapBrand").IapBrand = null as any;
utilities.lazyLoad(exports, ["IapBrand"], () => require("./iapBrand"));

export { IapClientArgs, IapClientState } from "./iapClient";
export type IapClient = import("./iapClient").IapClient;
export const IapClient: typeof import("./iapClient").IapClient = null as any;
utilities.lazyLoad(exports, ["IapClient"], () => require("./iapClient"));

export { IapTunnelDestGroupArgs, IapTunnelDestGroupState } from "./iapTunnelDestGroup";
export type IapTunnelDestGroup = import("./iapTunnelDestGroup").IapTunnelDestGroup;
export const IapTunnelDestGroup: typeof import("./iapTunnelDestGroup").IapTunnelDestGroup = null as any;
utilities.lazyLoad(exports, ["IapTunnelDestGroup"], () => require("./iapTunnelDestGroup"));

export { IapTunnelDestGroupIamBindingArgs, IapTunnelDestGroupIamBindingState } from "./iapTunnelDestGroupIamBinding";
export type IapTunnelDestGroupIamBinding = import("./iapTunnelDestGroupIamBinding").IapTunnelDestGroupIamBinding;
export const IapTunnelDestGroupIamBinding: typeof import("./iapTunnelDestGroupIamBinding").IapTunnelDestGroupIamBinding = null as any;
utilities.lazyLoad(exports, ["IapTunnelDestGroupIamBinding"], () => require("./iapTunnelDestGroupIamBinding"));

export { IapTunnelDestGroupIamMemberArgs, IapTunnelDestGroupIamMemberState } from "./iapTunnelDestGroupIamMember";
export type IapTunnelDestGroupIamMember = import("./iapTunnelDestGroupIamMember").IapTunnelDestGroupIamMember;
export const IapTunnelDestGroupIamMember: typeof import("./iapTunnelDestGroupIamMember").IapTunnelDestGroupIamMember = null as any;
utilities.lazyLoad(exports, ["IapTunnelDestGroupIamMember"], () => require("./iapTunnelDestGroupIamMember"));

export { IapTunnelDestGroupIamPolicyArgs, IapTunnelDestGroupIamPolicyState } from "./iapTunnelDestGroupIamPolicy";
export type IapTunnelDestGroupIamPolicy = import("./iapTunnelDestGroupIamPolicy").IapTunnelDestGroupIamPolicy;
export const IapTunnelDestGroupIamPolicy: typeof import("./iapTunnelDestGroupIamPolicy").IapTunnelDestGroupIamPolicy = null as any;
utilities.lazyLoad(exports, ["IapTunnelDestGroupIamPolicy"], () => require("./iapTunnelDestGroupIamPolicy"));

export { IapTunnelIamBindingArgs, IapTunnelIamBindingState } from "./iapTunnelIamBinding";
export type IapTunnelIamBinding = import("./iapTunnelIamBinding").IapTunnelIamBinding;
export const IapTunnelIamBinding: typeof import("./iapTunnelIamBinding").IapTunnelIamBinding = null as any;
utilities.lazyLoad(exports, ["IapTunnelIamBinding"], () => require("./iapTunnelIamBinding"));

export { IapTunnelIamMemberArgs, IapTunnelIamMemberState } from "./iapTunnelIamMember";
export type IapTunnelIamMember = import("./iapTunnelIamMember").IapTunnelIamMember;
export const IapTunnelIamMember: typeof import("./iapTunnelIamMember").IapTunnelIamMember = null as any;
utilities.lazyLoad(exports, ["IapTunnelIamMember"], () => require("./iapTunnelIamMember"));

export { IapTunnelIamPolicyArgs, IapTunnelIamPolicyState } from "./iapTunnelIamPolicy";
export type IapTunnelIamPolicy = import("./iapTunnelIamPolicy").IapTunnelIamPolicy;
export const IapTunnelIamPolicy: typeof import("./iapTunnelIamPolicy").IapTunnelIamPolicy = null as any;
utilities.lazyLoad(exports, ["IapTunnelIamPolicy"], () => require("./iapTunnelIamPolicy"));

export { IapTunnelInstanceIamBindingArgs, IapTunnelInstanceIamBindingState } from "./iapTunnelInstanceIamBinding";
export type IapTunnelInstanceIamBinding = import("./iapTunnelInstanceIamBinding").IapTunnelInstanceIamBinding;
export const IapTunnelInstanceIamBinding: typeof import("./iapTunnelInstanceIamBinding").IapTunnelInstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["IapTunnelInstanceIamBinding"], () => require("./iapTunnelInstanceIamBinding"));

export { IapTunnelInstanceIamMemberArgs, IapTunnelInstanceIamMemberState } from "./iapTunnelInstanceIamMember";
export type IapTunnelInstanceIamMember = import("./iapTunnelInstanceIamMember").IapTunnelInstanceIamMember;
export const IapTunnelInstanceIamMember: typeof import("./iapTunnelInstanceIamMember").IapTunnelInstanceIamMember = null as any;
utilities.lazyLoad(exports, ["IapTunnelInstanceIamMember"], () => require("./iapTunnelInstanceIamMember"));

export { IapTunnelInstanceIamPolicyArgs, IapTunnelInstanceIamPolicyState } from "./iapTunnelInstanceIamPolicy";
export type IapTunnelInstanceIamPolicy = import("./iapTunnelInstanceIamPolicy").IapTunnelInstanceIamPolicy;
export const IapTunnelInstanceIamPolicy: typeof import("./iapTunnelInstanceIamPolicy").IapTunnelInstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["IapTunnelInstanceIamPolicy"], () => require("./iapTunnelInstanceIamPolicy"));

export { IapWebBackendServiceIamBindingArgs, IapWebBackendServiceIamBindingState } from "./iapWebBackendServiceIamBinding";
export type IapWebBackendServiceIamBinding = import("./iapWebBackendServiceIamBinding").IapWebBackendServiceIamBinding;
export const IapWebBackendServiceIamBinding: typeof import("./iapWebBackendServiceIamBinding").IapWebBackendServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["IapWebBackendServiceIamBinding"], () => require("./iapWebBackendServiceIamBinding"));

export { IapWebBackendServiceIamMemberArgs, IapWebBackendServiceIamMemberState } from "./iapWebBackendServiceIamMember";
export type IapWebBackendServiceIamMember = import("./iapWebBackendServiceIamMember").IapWebBackendServiceIamMember;
export const IapWebBackendServiceIamMember: typeof import("./iapWebBackendServiceIamMember").IapWebBackendServiceIamMember = null as any;
utilities.lazyLoad(exports, ["IapWebBackendServiceIamMember"], () => require("./iapWebBackendServiceIamMember"));

export { IapWebBackendServiceIamPolicyArgs, IapWebBackendServiceIamPolicyState } from "./iapWebBackendServiceIamPolicy";
export type IapWebBackendServiceIamPolicy = import("./iapWebBackendServiceIamPolicy").IapWebBackendServiceIamPolicy;
export const IapWebBackendServiceIamPolicy: typeof import("./iapWebBackendServiceIamPolicy").IapWebBackendServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["IapWebBackendServiceIamPolicy"], () => require("./iapWebBackendServiceIamPolicy"));

export { IapWebIamBindingArgs, IapWebIamBindingState } from "./iapWebIamBinding";
export type IapWebIamBinding = import("./iapWebIamBinding").IapWebIamBinding;
export const IapWebIamBinding: typeof import("./iapWebIamBinding").IapWebIamBinding = null as any;
utilities.lazyLoad(exports, ["IapWebIamBinding"], () => require("./iapWebIamBinding"));

export { IapWebIamMemberArgs, IapWebIamMemberState } from "./iapWebIamMember";
export type IapWebIamMember = import("./iapWebIamMember").IapWebIamMember;
export const IapWebIamMember: typeof import("./iapWebIamMember").IapWebIamMember = null as any;
utilities.lazyLoad(exports, ["IapWebIamMember"], () => require("./iapWebIamMember"));

export { IapWebIamPolicyArgs, IapWebIamPolicyState } from "./iapWebIamPolicy";
export type IapWebIamPolicy = import("./iapWebIamPolicy").IapWebIamPolicy;
export const IapWebIamPolicy: typeof import("./iapWebIamPolicy").IapWebIamPolicy = null as any;
utilities.lazyLoad(exports, ["IapWebIamPolicy"], () => require("./iapWebIamPolicy"));

export { IapWebRegionBackendServiceIamBindingArgs, IapWebRegionBackendServiceIamBindingState } from "./iapWebRegionBackendServiceIamBinding";
export type IapWebRegionBackendServiceIamBinding = import("./iapWebRegionBackendServiceIamBinding").IapWebRegionBackendServiceIamBinding;
export const IapWebRegionBackendServiceIamBinding: typeof import("./iapWebRegionBackendServiceIamBinding").IapWebRegionBackendServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["IapWebRegionBackendServiceIamBinding"], () => require("./iapWebRegionBackendServiceIamBinding"));

export { IapWebRegionBackendServiceIamMemberArgs, IapWebRegionBackendServiceIamMemberState } from "./iapWebRegionBackendServiceIamMember";
export type IapWebRegionBackendServiceIamMember = import("./iapWebRegionBackendServiceIamMember").IapWebRegionBackendServiceIamMember;
export const IapWebRegionBackendServiceIamMember: typeof import("./iapWebRegionBackendServiceIamMember").IapWebRegionBackendServiceIamMember = null as any;
utilities.lazyLoad(exports, ["IapWebRegionBackendServiceIamMember"], () => require("./iapWebRegionBackendServiceIamMember"));

export { IapWebRegionBackendServiceIamPolicyArgs, IapWebRegionBackendServiceIamPolicyState } from "./iapWebRegionBackendServiceIamPolicy";
export type IapWebRegionBackendServiceIamPolicy = import("./iapWebRegionBackendServiceIamPolicy").IapWebRegionBackendServiceIamPolicy;
export const IapWebRegionBackendServiceIamPolicy: typeof import("./iapWebRegionBackendServiceIamPolicy").IapWebRegionBackendServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["IapWebRegionBackendServiceIamPolicy"], () => require("./iapWebRegionBackendServiceIamPolicy"));

export { IapWebTypeAppEngineIamBindingArgs, IapWebTypeAppEngineIamBindingState } from "./iapWebTypeAppEngineIamBinding";
export type IapWebTypeAppEngineIamBinding = import("./iapWebTypeAppEngineIamBinding").IapWebTypeAppEngineIamBinding;
export const IapWebTypeAppEngineIamBinding: typeof import("./iapWebTypeAppEngineIamBinding").IapWebTypeAppEngineIamBinding = null as any;
utilities.lazyLoad(exports, ["IapWebTypeAppEngineIamBinding"], () => require("./iapWebTypeAppEngineIamBinding"));

export { IapWebTypeAppEngineIamMemberArgs, IapWebTypeAppEngineIamMemberState } from "./iapWebTypeAppEngineIamMember";
export type IapWebTypeAppEngineIamMember = import("./iapWebTypeAppEngineIamMember").IapWebTypeAppEngineIamMember;
export const IapWebTypeAppEngineIamMember: typeof import("./iapWebTypeAppEngineIamMember").IapWebTypeAppEngineIamMember = null as any;
utilities.lazyLoad(exports, ["IapWebTypeAppEngineIamMember"], () => require("./iapWebTypeAppEngineIamMember"));

export { IapWebTypeAppEngineIamPolicyArgs, IapWebTypeAppEngineIamPolicyState } from "./iapWebTypeAppEngineIamPolicy";
export type IapWebTypeAppEngineIamPolicy = import("./iapWebTypeAppEngineIamPolicy").IapWebTypeAppEngineIamPolicy;
export const IapWebTypeAppEngineIamPolicy: typeof import("./iapWebTypeAppEngineIamPolicy").IapWebTypeAppEngineIamPolicy = null as any;
utilities.lazyLoad(exports, ["IapWebTypeAppEngineIamPolicy"], () => require("./iapWebTypeAppEngineIamPolicy"));

export { IapWebTypeComputeIamBindingArgs, IapWebTypeComputeIamBindingState } from "./iapWebTypeComputeIamBinding";
export type IapWebTypeComputeIamBinding = import("./iapWebTypeComputeIamBinding").IapWebTypeComputeIamBinding;
export const IapWebTypeComputeIamBinding: typeof import("./iapWebTypeComputeIamBinding").IapWebTypeComputeIamBinding = null as any;
utilities.lazyLoad(exports, ["IapWebTypeComputeIamBinding"], () => require("./iapWebTypeComputeIamBinding"));

export { IapWebTypeComputeIamMemberArgs, IapWebTypeComputeIamMemberState } from "./iapWebTypeComputeIamMember";
export type IapWebTypeComputeIamMember = import("./iapWebTypeComputeIamMember").IapWebTypeComputeIamMember;
export const IapWebTypeComputeIamMember: typeof import("./iapWebTypeComputeIamMember").IapWebTypeComputeIamMember = null as any;
utilities.lazyLoad(exports, ["IapWebTypeComputeIamMember"], () => require("./iapWebTypeComputeIamMember"));

export { IapWebTypeComputeIamPolicyArgs, IapWebTypeComputeIamPolicyState } from "./iapWebTypeComputeIamPolicy";
export type IapWebTypeComputeIamPolicy = import("./iapWebTypeComputeIamPolicy").IapWebTypeComputeIamPolicy;
export const IapWebTypeComputeIamPolicy: typeof import("./iapWebTypeComputeIamPolicy").IapWebTypeComputeIamPolicy = null as any;
utilities.lazyLoad(exports, ["IapWebTypeComputeIamPolicy"], () => require("./iapWebTypeComputeIamPolicy"));

export { IdentityPlatformConfigArgs, IdentityPlatformConfigState } from "./identityPlatformConfig";
export type IdentityPlatformConfig = import("./identityPlatformConfig").IdentityPlatformConfig;
export const IdentityPlatformConfig: typeof import("./identityPlatformConfig").IdentityPlatformConfig = null as any;
utilities.lazyLoad(exports, ["IdentityPlatformConfig"], () => require("./identityPlatformConfig"));

export { IdentityPlatformDefaultSupportedIdpConfigArgs, IdentityPlatformDefaultSupportedIdpConfigState } from "./identityPlatformDefaultSupportedIdpConfig";
export type IdentityPlatformDefaultSupportedIdpConfig = import("./identityPlatformDefaultSupportedIdpConfig").IdentityPlatformDefaultSupportedIdpConfig;
export const IdentityPlatformDefaultSupportedIdpConfig: typeof import("./identityPlatformDefaultSupportedIdpConfig").IdentityPlatformDefaultSupportedIdpConfig = null as any;
utilities.lazyLoad(exports, ["IdentityPlatformDefaultSupportedIdpConfig"], () => require("./identityPlatformDefaultSupportedIdpConfig"));

export { IdentityPlatformInboundSamlConfigArgs, IdentityPlatformInboundSamlConfigState } from "./identityPlatformInboundSamlConfig";
export type IdentityPlatformInboundSamlConfig = import("./identityPlatformInboundSamlConfig").IdentityPlatformInboundSamlConfig;
export const IdentityPlatformInboundSamlConfig: typeof import("./identityPlatformInboundSamlConfig").IdentityPlatformInboundSamlConfig = null as any;
utilities.lazyLoad(exports, ["IdentityPlatformInboundSamlConfig"], () => require("./identityPlatformInboundSamlConfig"));

export { IdentityPlatformOauthIdpConfigArgs, IdentityPlatformOauthIdpConfigState } from "./identityPlatformOauthIdpConfig";
export type IdentityPlatformOauthIdpConfig = import("./identityPlatformOauthIdpConfig").IdentityPlatformOauthIdpConfig;
export const IdentityPlatformOauthIdpConfig: typeof import("./identityPlatformOauthIdpConfig").IdentityPlatformOauthIdpConfig = null as any;
utilities.lazyLoad(exports, ["IdentityPlatformOauthIdpConfig"], () => require("./identityPlatformOauthIdpConfig"));

export { IdentityPlatformTenantArgs, IdentityPlatformTenantState } from "./identityPlatformTenant";
export type IdentityPlatformTenant = import("./identityPlatformTenant").IdentityPlatformTenant;
export const IdentityPlatformTenant: typeof import("./identityPlatformTenant").IdentityPlatformTenant = null as any;
utilities.lazyLoad(exports, ["IdentityPlatformTenant"], () => require("./identityPlatformTenant"));

export { IdentityPlatformTenantDefaultSupportedIdpConfigArgs, IdentityPlatformTenantDefaultSupportedIdpConfigState } from "./identityPlatformTenantDefaultSupportedIdpConfig";
export type IdentityPlatformTenantDefaultSupportedIdpConfig = import("./identityPlatformTenantDefaultSupportedIdpConfig").IdentityPlatformTenantDefaultSupportedIdpConfig;
export const IdentityPlatformTenantDefaultSupportedIdpConfig: typeof import("./identityPlatformTenantDefaultSupportedIdpConfig").IdentityPlatformTenantDefaultSupportedIdpConfig = null as any;
utilities.lazyLoad(exports, ["IdentityPlatformTenantDefaultSupportedIdpConfig"], () => require("./identityPlatformTenantDefaultSupportedIdpConfig"));

export { IdentityPlatformTenantInboundSamlConfigArgs, IdentityPlatformTenantInboundSamlConfigState } from "./identityPlatformTenantInboundSamlConfig";
export type IdentityPlatformTenantInboundSamlConfig = import("./identityPlatformTenantInboundSamlConfig").IdentityPlatformTenantInboundSamlConfig;
export const IdentityPlatformTenantInboundSamlConfig: typeof import("./identityPlatformTenantInboundSamlConfig").IdentityPlatformTenantInboundSamlConfig = null as any;
utilities.lazyLoad(exports, ["IdentityPlatformTenantInboundSamlConfig"], () => require("./identityPlatformTenantInboundSamlConfig"));

export { IdentityPlatformTenantOauthIdpConfigArgs, IdentityPlatformTenantOauthIdpConfigState } from "./identityPlatformTenantOauthIdpConfig";
export type IdentityPlatformTenantOauthIdpConfig = import("./identityPlatformTenantOauthIdpConfig").IdentityPlatformTenantOauthIdpConfig;
export const IdentityPlatformTenantOauthIdpConfig: typeof import("./identityPlatformTenantOauthIdpConfig").IdentityPlatformTenantOauthIdpConfig = null as any;
utilities.lazyLoad(exports, ["IdentityPlatformTenantOauthIdpConfig"], () => require("./identityPlatformTenantOauthIdpConfig"));

export { IntegrationConnectorsConnectionArgs, IntegrationConnectorsConnectionState } from "./integrationConnectorsConnection";
export type IntegrationConnectorsConnection = import("./integrationConnectorsConnection").IntegrationConnectorsConnection;
export const IntegrationConnectorsConnection: typeof import("./integrationConnectorsConnection").IntegrationConnectorsConnection = null as any;
utilities.lazyLoad(exports, ["IntegrationConnectorsConnection"], () => require("./integrationConnectorsConnection"));

export { IntegrationConnectorsEndpointAttachmentArgs, IntegrationConnectorsEndpointAttachmentState } from "./integrationConnectorsEndpointAttachment";
export type IntegrationConnectorsEndpointAttachment = import("./integrationConnectorsEndpointAttachment").IntegrationConnectorsEndpointAttachment;
export const IntegrationConnectorsEndpointAttachment: typeof import("./integrationConnectorsEndpointAttachment").IntegrationConnectorsEndpointAttachment = null as any;
utilities.lazyLoad(exports, ["IntegrationConnectorsEndpointAttachment"], () => require("./integrationConnectorsEndpointAttachment"));

export { IntegrationConnectorsManagedZoneArgs, IntegrationConnectorsManagedZoneState } from "./integrationConnectorsManagedZone";
export type IntegrationConnectorsManagedZone = import("./integrationConnectorsManagedZone").IntegrationConnectorsManagedZone;
export const IntegrationConnectorsManagedZone: typeof import("./integrationConnectorsManagedZone").IntegrationConnectorsManagedZone = null as any;
utilities.lazyLoad(exports, ["IntegrationConnectorsManagedZone"], () => require("./integrationConnectorsManagedZone"));

export { IntegrationsAuthConfigArgs, IntegrationsAuthConfigState } from "./integrationsAuthConfig";
export type IntegrationsAuthConfig = import("./integrationsAuthConfig").IntegrationsAuthConfig;
export const IntegrationsAuthConfig: typeof import("./integrationsAuthConfig").IntegrationsAuthConfig = null as any;
utilities.lazyLoad(exports, ["IntegrationsAuthConfig"], () => require("./integrationsAuthConfig"));

export { IntegrationsClientArgs, IntegrationsClientState } from "./integrationsClient";
export type IntegrationsClient = import("./integrationsClient").IntegrationsClient;
export const IntegrationsClient: typeof import("./integrationsClient").IntegrationsClient = null as any;
utilities.lazyLoad(exports, ["IntegrationsClient"], () => require("./integrationsClient"));

export { KmsAutokeyConfigArgs, KmsAutokeyConfigState } from "./kmsAutokeyConfig";
export type KmsAutokeyConfig = import("./kmsAutokeyConfig").KmsAutokeyConfig;
export const KmsAutokeyConfig: typeof import("./kmsAutokeyConfig").KmsAutokeyConfig = null as any;
utilities.lazyLoad(exports, ["KmsAutokeyConfig"], () => require("./kmsAutokeyConfig"));

export { KmsCryptoKeyArgs, KmsCryptoKeyState } from "./kmsCryptoKey";
export type KmsCryptoKey = import("./kmsCryptoKey").KmsCryptoKey;
export const KmsCryptoKey: typeof import("./kmsCryptoKey").KmsCryptoKey = null as any;
utilities.lazyLoad(exports, ["KmsCryptoKey"], () => require("./kmsCryptoKey"));

export { KmsCryptoKeyIamBindingArgs, KmsCryptoKeyIamBindingState } from "./kmsCryptoKeyIamBinding";
export type KmsCryptoKeyIamBinding = import("./kmsCryptoKeyIamBinding").KmsCryptoKeyIamBinding;
export const KmsCryptoKeyIamBinding: typeof import("./kmsCryptoKeyIamBinding").KmsCryptoKeyIamBinding = null as any;
utilities.lazyLoad(exports, ["KmsCryptoKeyIamBinding"], () => require("./kmsCryptoKeyIamBinding"));

export { KmsCryptoKeyIamMemberArgs, KmsCryptoKeyIamMemberState } from "./kmsCryptoKeyIamMember";
export type KmsCryptoKeyIamMember = import("./kmsCryptoKeyIamMember").KmsCryptoKeyIamMember;
export const KmsCryptoKeyIamMember: typeof import("./kmsCryptoKeyIamMember").KmsCryptoKeyIamMember = null as any;
utilities.lazyLoad(exports, ["KmsCryptoKeyIamMember"], () => require("./kmsCryptoKeyIamMember"));

export { KmsCryptoKeyIamPolicyArgs, KmsCryptoKeyIamPolicyState } from "./kmsCryptoKeyIamPolicy";
export type KmsCryptoKeyIamPolicy = import("./kmsCryptoKeyIamPolicy").KmsCryptoKeyIamPolicy;
export const KmsCryptoKeyIamPolicy: typeof import("./kmsCryptoKeyIamPolicy").KmsCryptoKeyIamPolicy = null as any;
utilities.lazyLoad(exports, ["KmsCryptoKeyIamPolicy"], () => require("./kmsCryptoKeyIamPolicy"));

export { KmsCryptoKeyVersionArgs, KmsCryptoKeyVersionState } from "./kmsCryptoKeyVersion";
export type KmsCryptoKeyVersion = import("./kmsCryptoKeyVersion").KmsCryptoKeyVersion;
export const KmsCryptoKeyVersion: typeof import("./kmsCryptoKeyVersion").KmsCryptoKeyVersion = null as any;
utilities.lazyLoad(exports, ["KmsCryptoKeyVersion"], () => require("./kmsCryptoKeyVersion"));

export { KmsEkmConnectionArgs, KmsEkmConnectionState } from "./kmsEkmConnection";
export type KmsEkmConnection = import("./kmsEkmConnection").KmsEkmConnection;
export const KmsEkmConnection: typeof import("./kmsEkmConnection").KmsEkmConnection = null as any;
utilities.lazyLoad(exports, ["KmsEkmConnection"], () => require("./kmsEkmConnection"));

export { KmsEkmConnectionIamBindingArgs, KmsEkmConnectionIamBindingState } from "./kmsEkmConnectionIamBinding";
export type KmsEkmConnectionIamBinding = import("./kmsEkmConnectionIamBinding").KmsEkmConnectionIamBinding;
export const KmsEkmConnectionIamBinding: typeof import("./kmsEkmConnectionIamBinding").KmsEkmConnectionIamBinding = null as any;
utilities.lazyLoad(exports, ["KmsEkmConnectionIamBinding"], () => require("./kmsEkmConnectionIamBinding"));

export { KmsEkmConnectionIamMemberArgs, KmsEkmConnectionIamMemberState } from "./kmsEkmConnectionIamMember";
export type KmsEkmConnectionIamMember = import("./kmsEkmConnectionIamMember").KmsEkmConnectionIamMember;
export const KmsEkmConnectionIamMember: typeof import("./kmsEkmConnectionIamMember").KmsEkmConnectionIamMember = null as any;
utilities.lazyLoad(exports, ["KmsEkmConnectionIamMember"], () => require("./kmsEkmConnectionIamMember"));

export { KmsEkmConnectionIamPolicyArgs, KmsEkmConnectionIamPolicyState } from "./kmsEkmConnectionIamPolicy";
export type KmsEkmConnectionIamPolicy = import("./kmsEkmConnectionIamPolicy").KmsEkmConnectionIamPolicy;
export const KmsEkmConnectionIamPolicy: typeof import("./kmsEkmConnectionIamPolicy").KmsEkmConnectionIamPolicy = null as any;
utilities.lazyLoad(exports, ["KmsEkmConnectionIamPolicy"], () => require("./kmsEkmConnectionIamPolicy"));

export { KmsKeyHandleArgs, KmsKeyHandleState } from "./kmsKeyHandle";
export type KmsKeyHandle = import("./kmsKeyHandle").KmsKeyHandle;
export const KmsKeyHandle: typeof import("./kmsKeyHandle").KmsKeyHandle = null as any;
utilities.lazyLoad(exports, ["KmsKeyHandle"], () => require("./kmsKeyHandle"));

export { KmsKeyRingArgs, KmsKeyRingState } from "./kmsKeyRing";
export type KmsKeyRing = import("./kmsKeyRing").KmsKeyRing;
export const KmsKeyRing: typeof import("./kmsKeyRing").KmsKeyRing = null as any;
utilities.lazyLoad(exports, ["KmsKeyRing"], () => require("./kmsKeyRing"));

export { KmsKeyRingIamBindingArgs, KmsKeyRingIamBindingState } from "./kmsKeyRingIamBinding";
export type KmsKeyRingIamBinding = import("./kmsKeyRingIamBinding").KmsKeyRingIamBinding;
export const KmsKeyRingIamBinding: typeof import("./kmsKeyRingIamBinding").KmsKeyRingIamBinding = null as any;
utilities.lazyLoad(exports, ["KmsKeyRingIamBinding"], () => require("./kmsKeyRingIamBinding"));

export { KmsKeyRingIamMemberArgs, KmsKeyRingIamMemberState } from "./kmsKeyRingIamMember";
export type KmsKeyRingIamMember = import("./kmsKeyRingIamMember").KmsKeyRingIamMember;
export const KmsKeyRingIamMember: typeof import("./kmsKeyRingIamMember").KmsKeyRingIamMember = null as any;
utilities.lazyLoad(exports, ["KmsKeyRingIamMember"], () => require("./kmsKeyRingIamMember"));

export { KmsKeyRingIamPolicyArgs, KmsKeyRingIamPolicyState } from "./kmsKeyRingIamPolicy";
export type KmsKeyRingIamPolicy = import("./kmsKeyRingIamPolicy").KmsKeyRingIamPolicy;
export const KmsKeyRingIamPolicy: typeof import("./kmsKeyRingIamPolicy").KmsKeyRingIamPolicy = null as any;
utilities.lazyLoad(exports, ["KmsKeyRingIamPolicy"], () => require("./kmsKeyRingIamPolicy"));

export { KmsKeyRingImportJobArgs, KmsKeyRingImportJobState } from "./kmsKeyRingImportJob";
export type KmsKeyRingImportJob = import("./kmsKeyRingImportJob").KmsKeyRingImportJob;
export const KmsKeyRingImportJob: typeof import("./kmsKeyRingImportJob").KmsKeyRingImportJob = null as any;
utilities.lazyLoad(exports, ["KmsKeyRingImportJob"], () => require("./kmsKeyRingImportJob"));

export { KmsSecretCiphertextArgs, KmsSecretCiphertextState } from "./kmsSecretCiphertext";
export type KmsSecretCiphertext = import("./kmsSecretCiphertext").KmsSecretCiphertext;
export const KmsSecretCiphertext: typeof import("./kmsSecretCiphertext").KmsSecretCiphertext = null as any;
utilities.lazyLoad(exports, ["KmsSecretCiphertext"], () => require("./kmsSecretCiphertext"));

export { LoggingBillingAccountBucketConfigArgs, LoggingBillingAccountBucketConfigState } from "./loggingBillingAccountBucketConfig";
export type LoggingBillingAccountBucketConfig = import("./loggingBillingAccountBucketConfig").LoggingBillingAccountBucketConfig;
export const LoggingBillingAccountBucketConfig: typeof import("./loggingBillingAccountBucketConfig").LoggingBillingAccountBucketConfig = null as any;
utilities.lazyLoad(exports, ["LoggingBillingAccountBucketConfig"], () => require("./loggingBillingAccountBucketConfig"));

export { LoggingBillingAccountExclusionArgs, LoggingBillingAccountExclusionState } from "./loggingBillingAccountExclusion";
export type LoggingBillingAccountExclusion = import("./loggingBillingAccountExclusion").LoggingBillingAccountExclusion;
export const LoggingBillingAccountExclusion: typeof import("./loggingBillingAccountExclusion").LoggingBillingAccountExclusion = null as any;
utilities.lazyLoad(exports, ["LoggingBillingAccountExclusion"], () => require("./loggingBillingAccountExclusion"));

export { LoggingBillingAccountSinkArgs, LoggingBillingAccountSinkState } from "./loggingBillingAccountSink";
export type LoggingBillingAccountSink = import("./loggingBillingAccountSink").LoggingBillingAccountSink;
export const LoggingBillingAccountSink: typeof import("./loggingBillingAccountSink").LoggingBillingAccountSink = null as any;
utilities.lazyLoad(exports, ["LoggingBillingAccountSink"], () => require("./loggingBillingAccountSink"));

export { LoggingFolderBucketConfigArgs, LoggingFolderBucketConfigState } from "./loggingFolderBucketConfig";
export type LoggingFolderBucketConfig = import("./loggingFolderBucketConfig").LoggingFolderBucketConfig;
export const LoggingFolderBucketConfig: typeof import("./loggingFolderBucketConfig").LoggingFolderBucketConfig = null as any;
utilities.lazyLoad(exports, ["LoggingFolderBucketConfig"], () => require("./loggingFolderBucketConfig"));

export { LoggingFolderExclusionArgs, LoggingFolderExclusionState } from "./loggingFolderExclusion";
export type LoggingFolderExclusion = import("./loggingFolderExclusion").LoggingFolderExclusion;
export const LoggingFolderExclusion: typeof import("./loggingFolderExclusion").LoggingFolderExclusion = null as any;
utilities.lazyLoad(exports, ["LoggingFolderExclusion"], () => require("./loggingFolderExclusion"));

export { LoggingFolderSettingsArgs, LoggingFolderSettingsState } from "./loggingFolderSettings";
export type LoggingFolderSettings = import("./loggingFolderSettings").LoggingFolderSettings;
export const LoggingFolderSettings: typeof import("./loggingFolderSettings").LoggingFolderSettings = null as any;
utilities.lazyLoad(exports, ["LoggingFolderSettings"], () => require("./loggingFolderSettings"));

export { LoggingFolderSinkArgs, LoggingFolderSinkState } from "./loggingFolderSink";
export type LoggingFolderSink = import("./loggingFolderSink").LoggingFolderSink;
export const LoggingFolderSink: typeof import("./loggingFolderSink").LoggingFolderSink = null as any;
utilities.lazyLoad(exports, ["LoggingFolderSink"], () => require("./loggingFolderSink"));

export { LoggingLinkedDatasetArgs, LoggingLinkedDatasetState } from "./loggingLinkedDataset";
export type LoggingLinkedDataset = import("./loggingLinkedDataset").LoggingLinkedDataset;
export const LoggingLinkedDataset: typeof import("./loggingLinkedDataset").LoggingLinkedDataset = null as any;
utilities.lazyLoad(exports, ["LoggingLinkedDataset"], () => require("./loggingLinkedDataset"));

export { LoggingLogViewArgs, LoggingLogViewState } from "./loggingLogView";
export type LoggingLogView = import("./loggingLogView").LoggingLogView;
export const LoggingLogView: typeof import("./loggingLogView").LoggingLogView = null as any;
utilities.lazyLoad(exports, ["LoggingLogView"], () => require("./loggingLogView"));

export { LoggingLogViewIamBindingArgs, LoggingLogViewIamBindingState } from "./loggingLogViewIamBinding";
export type LoggingLogViewIamBinding = import("./loggingLogViewIamBinding").LoggingLogViewIamBinding;
export const LoggingLogViewIamBinding: typeof import("./loggingLogViewIamBinding").LoggingLogViewIamBinding = null as any;
utilities.lazyLoad(exports, ["LoggingLogViewIamBinding"], () => require("./loggingLogViewIamBinding"));

export { LoggingLogViewIamMemberArgs, LoggingLogViewIamMemberState } from "./loggingLogViewIamMember";
export type LoggingLogViewIamMember = import("./loggingLogViewIamMember").LoggingLogViewIamMember;
export const LoggingLogViewIamMember: typeof import("./loggingLogViewIamMember").LoggingLogViewIamMember = null as any;
utilities.lazyLoad(exports, ["LoggingLogViewIamMember"], () => require("./loggingLogViewIamMember"));

export { LoggingLogViewIamPolicyArgs, LoggingLogViewIamPolicyState } from "./loggingLogViewIamPolicy";
export type LoggingLogViewIamPolicy = import("./loggingLogViewIamPolicy").LoggingLogViewIamPolicy;
export const LoggingLogViewIamPolicy: typeof import("./loggingLogViewIamPolicy").LoggingLogViewIamPolicy = null as any;
utilities.lazyLoad(exports, ["LoggingLogViewIamPolicy"], () => require("./loggingLogViewIamPolicy"));

export { LoggingMetricArgs, LoggingMetricState } from "./loggingMetric";
export type LoggingMetric = import("./loggingMetric").LoggingMetric;
export const LoggingMetric: typeof import("./loggingMetric").LoggingMetric = null as any;
utilities.lazyLoad(exports, ["LoggingMetric"], () => require("./loggingMetric"));

export { LoggingOrganizationBucketConfigArgs, LoggingOrganizationBucketConfigState } from "./loggingOrganizationBucketConfig";
export type LoggingOrganizationBucketConfig = import("./loggingOrganizationBucketConfig").LoggingOrganizationBucketConfig;
export const LoggingOrganizationBucketConfig: typeof import("./loggingOrganizationBucketConfig").LoggingOrganizationBucketConfig = null as any;
utilities.lazyLoad(exports, ["LoggingOrganizationBucketConfig"], () => require("./loggingOrganizationBucketConfig"));

export { LoggingOrganizationExclusionArgs, LoggingOrganizationExclusionState } from "./loggingOrganizationExclusion";
export type LoggingOrganizationExclusion = import("./loggingOrganizationExclusion").LoggingOrganizationExclusion;
export const LoggingOrganizationExclusion: typeof import("./loggingOrganizationExclusion").LoggingOrganizationExclusion = null as any;
utilities.lazyLoad(exports, ["LoggingOrganizationExclusion"], () => require("./loggingOrganizationExclusion"));

export { LoggingOrganizationSettingsArgs, LoggingOrganizationSettingsState } from "./loggingOrganizationSettings";
export type LoggingOrganizationSettings = import("./loggingOrganizationSettings").LoggingOrganizationSettings;
export const LoggingOrganizationSettings: typeof import("./loggingOrganizationSettings").LoggingOrganizationSettings = null as any;
utilities.lazyLoad(exports, ["LoggingOrganizationSettings"], () => require("./loggingOrganizationSettings"));

export { LoggingOrganizationSinkArgs, LoggingOrganizationSinkState } from "./loggingOrganizationSink";
export type LoggingOrganizationSink = import("./loggingOrganizationSink").LoggingOrganizationSink;
export const LoggingOrganizationSink: typeof import("./loggingOrganizationSink").LoggingOrganizationSink = null as any;
utilities.lazyLoad(exports, ["LoggingOrganizationSink"], () => require("./loggingOrganizationSink"));

export { LoggingProjectBucketConfigArgs, LoggingProjectBucketConfigState } from "./loggingProjectBucketConfig";
export type LoggingProjectBucketConfig = import("./loggingProjectBucketConfig").LoggingProjectBucketConfig;
export const LoggingProjectBucketConfig: typeof import("./loggingProjectBucketConfig").LoggingProjectBucketConfig = null as any;
utilities.lazyLoad(exports, ["LoggingProjectBucketConfig"], () => require("./loggingProjectBucketConfig"));

export { LoggingProjectExclusionArgs, LoggingProjectExclusionState } from "./loggingProjectExclusion";
export type LoggingProjectExclusion = import("./loggingProjectExclusion").LoggingProjectExclusion;
export const LoggingProjectExclusion: typeof import("./loggingProjectExclusion").LoggingProjectExclusion = null as any;
utilities.lazyLoad(exports, ["LoggingProjectExclusion"], () => require("./loggingProjectExclusion"));

export { LoggingProjectSinkArgs, LoggingProjectSinkState } from "./loggingProjectSink";
export type LoggingProjectSink = import("./loggingProjectSink").LoggingProjectSink;
export const LoggingProjectSink: typeof import("./loggingProjectSink").LoggingProjectSink = null as any;
utilities.lazyLoad(exports, ["LoggingProjectSink"], () => require("./loggingProjectSink"));

export { LookerInstanceArgs, LookerInstanceState } from "./lookerInstance";
export type LookerInstance = import("./lookerInstance").LookerInstance;
export const LookerInstance: typeof import("./lookerInstance").LookerInstance = null as any;
utilities.lazyLoad(exports, ["LookerInstance"], () => require("./lookerInstance"));

export { ManagedKafkaClusterArgs, ManagedKafkaClusterState } from "./managedKafkaCluster";
export type ManagedKafkaCluster = import("./managedKafkaCluster").ManagedKafkaCluster;
export const ManagedKafkaCluster: typeof import("./managedKafkaCluster").ManagedKafkaCluster = null as any;
utilities.lazyLoad(exports, ["ManagedKafkaCluster"], () => require("./managedKafkaCluster"));

export { ManagedKafkaTopicArgs, ManagedKafkaTopicState } from "./managedKafkaTopic";
export type ManagedKafkaTopic = import("./managedKafkaTopic").ManagedKafkaTopic;
export const ManagedKafkaTopic: typeof import("./managedKafkaTopic").ManagedKafkaTopic = null as any;
utilities.lazyLoad(exports, ["ManagedKafkaTopic"], () => require("./managedKafkaTopic"));

export { MemcacheInstanceArgs, MemcacheInstanceState } from "./memcacheInstance";
export type MemcacheInstance = import("./memcacheInstance").MemcacheInstance;
export const MemcacheInstance: typeof import("./memcacheInstance").MemcacheInstance = null as any;
utilities.lazyLoad(exports, ["MemcacheInstance"], () => require("./memcacheInstance"));

export { MigrationCenterGroupArgs, MigrationCenterGroupState } from "./migrationCenterGroup";
export type MigrationCenterGroup = import("./migrationCenterGroup").MigrationCenterGroup;
export const MigrationCenterGroup: typeof import("./migrationCenterGroup").MigrationCenterGroup = null as any;
utilities.lazyLoad(exports, ["MigrationCenterGroup"], () => require("./migrationCenterGroup"));

export { MigrationCenterPreferenceSetArgs, MigrationCenterPreferenceSetState } from "./migrationCenterPreferenceSet";
export type MigrationCenterPreferenceSet = import("./migrationCenterPreferenceSet").MigrationCenterPreferenceSet;
export const MigrationCenterPreferenceSet: typeof import("./migrationCenterPreferenceSet").MigrationCenterPreferenceSet = null as any;
utilities.lazyLoad(exports, ["MigrationCenterPreferenceSet"], () => require("./migrationCenterPreferenceSet"));

export { MlEngineModelArgs, MlEngineModelState } from "./mlEngineModel";
export type MlEngineModel = import("./mlEngineModel").MlEngineModel;
export const MlEngineModel: typeof import("./mlEngineModel").MlEngineModel = null as any;
utilities.lazyLoad(exports, ["MlEngineModel"], () => require("./mlEngineModel"));

export { MonitoringAlertPolicyArgs, MonitoringAlertPolicyState } from "./monitoringAlertPolicy";
export type MonitoringAlertPolicy = import("./monitoringAlertPolicy").MonitoringAlertPolicy;
export const MonitoringAlertPolicy: typeof import("./monitoringAlertPolicy").MonitoringAlertPolicy = null as any;
utilities.lazyLoad(exports, ["MonitoringAlertPolicy"], () => require("./monitoringAlertPolicy"));

export { MonitoringCustomServiceArgs, MonitoringCustomServiceState } from "./monitoringCustomService";
export type MonitoringCustomService = import("./monitoringCustomService").MonitoringCustomService;
export const MonitoringCustomService: typeof import("./monitoringCustomService").MonitoringCustomService = null as any;
utilities.lazyLoad(exports, ["MonitoringCustomService"], () => require("./monitoringCustomService"));

export { MonitoringDashboardArgs, MonitoringDashboardState } from "./monitoringDashboard";
export type MonitoringDashboard = import("./monitoringDashboard").MonitoringDashboard;
export const MonitoringDashboard: typeof import("./monitoringDashboard").MonitoringDashboard = null as any;
utilities.lazyLoad(exports, ["MonitoringDashboard"], () => require("./monitoringDashboard"));

export { MonitoringGroupArgs, MonitoringGroupState } from "./monitoringGroup";
export type MonitoringGroup = import("./monitoringGroup").MonitoringGroup;
export const MonitoringGroup: typeof import("./monitoringGroup").MonitoringGroup = null as any;
utilities.lazyLoad(exports, ["MonitoringGroup"], () => require("./monitoringGroup"));

export { MonitoringMetricDescriptorArgs, MonitoringMetricDescriptorState } from "./monitoringMetricDescriptor";
export type MonitoringMetricDescriptor = import("./monitoringMetricDescriptor").MonitoringMetricDescriptor;
export const MonitoringMetricDescriptor: typeof import("./monitoringMetricDescriptor").MonitoringMetricDescriptor = null as any;
utilities.lazyLoad(exports, ["MonitoringMetricDescriptor"], () => require("./monitoringMetricDescriptor"));

export { MonitoringMonitoredProjectArgs, MonitoringMonitoredProjectState } from "./monitoringMonitoredProject";
export type MonitoringMonitoredProject = import("./monitoringMonitoredProject").MonitoringMonitoredProject;
export const MonitoringMonitoredProject: typeof import("./monitoringMonitoredProject").MonitoringMonitoredProject = null as any;
utilities.lazyLoad(exports, ["MonitoringMonitoredProject"], () => require("./monitoringMonitoredProject"));

export { MonitoringNotificationChannelArgs, MonitoringNotificationChannelState } from "./monitoringNotificationChannel";
export type MonitoringNotificationChannel = import("./monitoringNotificationChannel").MonitoringNotificationChannel;
export const MonitoringNotificationChannel: typeof import("./monitoringNotificationChannel").MonitoringNotificationChannel = null as any;
utilities.lazyLoad(exports, ["MonitoringNotificationChannel"], () => require("./monitoringNotificationChannel"));

export { MonitoringServiceArgs, MonitoringServiceState } from "./monitoringService";
export type MonitoringService = import("./monitoringService").MonitoringService;
export const MonitoringService: typeof import("./monitoringService").MonitoringService = null as any;
utilities.lazyLoad(exports, ["MonitoringService"], () => require("./monitoringService"));

export { MonitoringSloArgs, MonitoringSloState } from "./monitoringSlo";
export type MonitoringSlo = import("./monitoringSlo").MonitoringSlo;
export const MonitoringSlo: typeof import("./monitoringSlo").MonitoringSlo = null as any;
utilities.lazyLoad(exports, ["MonitoringSlo"], () => require("./monitoringSlo"));

export { MonitoringUptimeCheckConfigArgs, MonitoringUptimeCheckConfigState } from "./monitoringUptimeCheckConfig";
export type MonitoringUptimeCheckConfig = import("./monitoringUptimeCheckConfig").MonitoringUptimeCheckConfig;
export const MonitoringUptimeCheckConfig: typeof import("./monitoringUptimeCheckConfig").MonitoringUptimeCheckConfig = null as any;
utilities.lazyLoad(exports, ["MonitoringUptimeCheckConfig"], () => require("./monitoringUptimeCheckConfig"));

export { NetappActiveDirectoryArgs, NetappActiveDirectoryState } from "./netappActiveDirectory";
export type NetappActiveDirectory = import("./netappActiveDirectory").NetappActiveDirectory;
export const NetappActiveDirectory: typeof import("./netappActiveDirectory").NetappActiveDirectory = null as any;
utilities.lazyLoad(exports, ["NetappActiveDirectory"], () => require("./netappActiveDirectory"));

export { NetappBackupArgs, NetappBackupState } from "./netappBackup";
export type NetappBackup = import("./netappBackup").NetappBackup;
export const NetappBackup: typeof import("./netappBackup").NetappBackup = null as any;
utilities.lazyLoad(exports, ["NetappBackup"], () => require("./netappBackup"));

export { NetappBackupPolicyArgs, NetappBackupPolicyState } from "./netappBackupPolicy";
export type NetappBackupPolicy = import("./netappBackupPolicy").NetappBackupPolicy;
export const NetappBackupPolicy: typeof import("./netappBackupPolicy").NetappBackupPolicy = null as any;
utilities.lazyLoad(exports, ["NetappBackupPolicy"], () => require("./netappBackupPolicy"));

export { NetappBackupVaultArgs, NetappBackupVaultState } from "./netappBackupVault";
export type NetappBackupVault = import("./netappBackupVault").NetappBackupVault;
export const NetappBackupVault: typeof import("./netappBackupVault").NetappBackupVault = null as any;
utilities.lazyLoad(exports, ["NetappBackupVault"], () => require("./netappBackupVault"));

export { NetappKmsconfigArgs, NetappKmsconfigState } from "./netappKmsconfig";
export type NetappKmsconfig = import("./netappKmsconfig").NetappKmsconfig;
export const NetappKmsconfig: typeof import("./netappKmsconfig").NetappKmsconfig = null as any;
utilities.lazyLoad(exports, ["NetappKmsconfig"], () => require("./netappKmsconfig"));

export { NetappStoragePoolArgs, NetappStoragePoolState } from "./netappStoragePool";
export type NetappStoragePool = import("./netappStoragePool").NetappStoragePool;
export const NetappStoragePool: typeof import("./netappStoragePool").NetappStoragePool = null as any;
utilities.lazyLoad(exports, ["NetappStoragePool"], () => require("./netappStoragePool"));

export { NetappVolumeArgs, NetappVolumeState } from "./netappVolume";
export type NetappVolume = import("./netappVolume").NetappVolume;
export const NetappVolume: typeof import("./netappVolume").NetappVolume = null as any;
utilities.lazyLoad(exports, ["NetappVolume"], () => require("./netappVolume"));

export { NetappVolumeReplicationArgs, NetappVolumeReplicationState } from "./netappVolumeReplication";
export type NetappVolumeReplication = import("./netappVolumeReplication").NetappVolumeReplication;
export const NetappVolumeReplication: typeof import("./netappVolumeReplication").NetappVolumeReplication = null as any;
utilities.lazyLoad(exports, ["NetappVolumeReplication"], () => require("./netappVolumeReplication"));

export { NetappVolumeSnapshotArgs, NetappVolumeSnapshotState } from "./netappVolumeSnapshot";
export type NetappVolumeSnapshot = import("./netappVolumeSnapshot").NetappVolumeSnapshot;
export const NetappVolumeSnapshot: typeof import("./netappVolumeSnapshot").NetappVolumeSnapshot = null as any;
utilities.lazyLoad(exports, ["NetappVolumeSnapshot"], () => require("./netappVolumeSnapshot"));

export { NetworkConnectivityHubArgs, NetworkConnectivityHubState } from "./networkConnectivityHub";
export type NetworkConnectivityHub = import("./networkConnectivityHub").NetworkConnectivityHub;
export const NetworkConnectivityHub: typeof import("./networkConnectivityHub").NetworkConnectivityHub = null as any;
utilities.lazyLoad(exports, ["NetworkConnectivityHub"], () => require("./networkConnectivityHub"));

export { NetworkConnectivityInternalRangeArgs, NetworkConnectivityInternalRangeState } from "./networkConnectivityInternalRange";
export type NetworkConnectivityInternalRange = import("./networkConnectivityInternalRange").NetworkConnectivityInternalRange;
export const NetworkConnectivityInternalRange: typeof import("./networkConnectivityInternalRange").NetworkConnectivityInternalRange = null as any;
utilities.lazyLoad(exports, ["NetworkConnectivityInternalRange"], () => require("./networkConnectivityInternalRange"));

export { NetworkConnectivityPolicyBasedRouteArgs, NetworkConnectivityPolicyBasedRouteState } from "./networkConnectivityPolicyBasedRoute";
export type NetworkConnectivityPolicyBasedRoute = import("./networkConnectivityPolicyBasedRoute").NetworkConnectivityPolicyBasedRoute;
export const NetworkConnectivityPolicyBasedRoute: typeof import("./networkConnectivityPolicyBasedRoute").NetworkConnectivityPolicyBasedRoute = null as any;
utilities.lazyLoad(exports, ["NetworkConnectivityPolicyBasedRoute"], () => require("./networkConnectivityPolicyBasedRoute"));

export { NetworkConnectivityRegionalEndpointArgs, NetworkConnectivityRegionalEndpointState } from "./networkConnectivityRegionalEndpoint";
export type NetworkConnectivityRegionalEndpoint = import("./networkConnectivityRegionalEndpoint").NetworkConnectivityRegionalEndpoint;
export const NetworkConnectivityRegionalEndpoint: typeof import("./networkConnectivityRegionalEndpoint").NetworkConnectivityRegionalEndpoint = null as any;
utilities.lazyLoad(exports, ["NetworkConnectivityRegionalEndpoint"], () => require("./networkConnectivityRegionalEndpoint"));

export { NetworkConnectivityServiceConnectionPolicyArgs, NetworkConnectivityServiceConnectionPolicyState } from "./networkConnectivityServiceConnectionPolicy";
export type NetworkConnectivityServiceConnectionPolicy = import("./networkConnectivityServiceConnectionPolicy").NetworkConnectivityServiceConnectionPolicy;
export const NetworkConnectivityServiceConnectionPolicy: typeof import("./networkConnectivityServiceConnectionPolicy").NetworkConnectivityServiceConnectionPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkConnectivityServiceConnectionPolicy"], () => require("./networkConnectivityServiceConnectionPolicy"));

export { NetworkConnectivitySpokeArgs, NetworkConnectivitySpokeState } from "./networkConnectivitySpoke";
export type NetworkConnectivitySpoke = import("./networkConnectivitySpoke").NetworkConnectivitySpoke;
export const NetworkConnectivitySpoke: typeof import("./networkConnectivitySpoke").NetworkConnectivitySpoke = null as any;
utilities.lazyLoad(exports, ["NetworkConnectivitySpoke"], () => require("./networkConnectivitySpoke"));

export { NetworkManagementConnectivityTestArgs, NetworkManagementConnectivityTestState } from "./networkManagementConnectivityTest";
export type NetworkManagementConnectivityTest = import("./networkManagementConnectivityTest").NetworkManagementConnectivityTest;
export const NetworkManagementConnectivityTest: typeof import("./networkManagementConnectivityTest").NetworkManagementConnectivityTest = null as any;
utilities.lazyLoad(exports, ["NetworkManagementConnectivityTest"], () => require("./networkManagementConnectivityTest"));

export { NetworkSecurityAddressGroupArgs, NetworkSecurityAddressGroupState } from "./networkSecurityAddressGroup";
export type NetworkSecurityAddressGroup = import("./networkSecurityAddressGroup").NetworkSecurityAddressGroup;
export const NetworkSecurityAddressGroup: typeof import("./networkSecurityAddressGroup").NetworkSecurityAddressGroup = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityAddressGroup"], () => require("./networkSecurityAddressGroup"));

export { NetworkSecurityAddressGroupIamBindingArgs, NetworkSecurityAddressGroupIamBindingState } from "./networkSecurityAddressGroupIamBinding";
export type NetworkSecurityAddressGroupIamBinding = import("./networkSecurityAddressGroupIamBinding").NetworkSecurityAddressGroupIamBinding;
export const NetworkSecurityAddressGroupIamBinding: typeof import("./networkSecurityAddressGroupIamBinding").NetworkSecurityAddressGroupIamBinding = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityAddressGroupIamBinding"], () => require("./networkSecurityAddressGroupIamBinding"));

export { NetworkSecurityAddressGroupIamMemberArgs, NetworkSecurityAddressGroupIamMemberState } from "./networkSecurityAddressGroupIamMember";
export type NetworkSecurityAddressGroupIamMember = import("./networkSecurityAddressGroupIamMember").NetworkSecurityAddressGroupIamMember;
export const NetworkSecurityAddressGroupIamMember: typeof import("./networkSecurityAddressGroupIamMember").NetworkSecurityAddressGroupIamMember = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityAddressGroupIamMember"], () => require("./networkSecurityAddressGroupIamMember"));

export { NetworkSecurityAddressGroupIamPolicyArgs, NetworkSecurityAddressGroupIamPolicyState } from "./networkSecurityAddressGroupIamPolicy";
export type NetworkSecurityAddressGroupIamPolicy = import("./networkSecurityAddressGroupIamPolicy").NetworkSecurityAddressGroupIamPolicy;
export const NetworkSecurityAddressGroupIamPolicy: typeof import("./networkSecurityAddressGroupIamPolicy").NetworkSecurityAddressGroupIamPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityAddressGroupIamPolicy"], () => require("./networkSecurityAddressGroupIamPolicy"));

export { NetworkSecurityAuthorizationPolicyArgs, NetworkSecurityAuthorizationPolicyState } from "./networkSecurityAuthorizationPolicy";
export type NetworkSecurityAuthorizationPolicy = import("./networkSecurityAuthorizationPolicy").NetworkSecurityAuthorizationPolicy;
export const NetworkSecurityAuthorizationPolicy: typeof import("./networkSecurityAuthorizationPolicy").NetworkSecurityAuthorizationPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityAuthorizationPolicy"], () => require("./networkSecurityAuthorizationPolicy"));

export { NetworkSecurityClientTlsPolicyArgs, NetworkSecurityClientTlsPolicyState } from "./networkSecurityClientTlsPolicy";
export type NetworkSecurityClientTlsPolicy = import("./networkSecurityClientTlsPolicy").NetworkSecurityClientTlsPolicy;
export const NetworkSecurityClientTlsPolicy: typeof import("./networkSecurityClientTlsPolicy").NetworkSecurityClientTlsPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityClientTlsPolicy"], () => require("./networkSecurityClientTlsPolicy"));

export { NetworkSecurityFirewallEndpointArgs, NetworkSecurityFirewallEndpointState } from "./networkSecurityFirewallEndpoint";
export type NetworkSecurityFirewallEndpoint = import("./networkSecurityFirewallEndpoint").NetworkSecurityFirewallEndpoint;
export const NetworkSecurityFirewallEndpoint: typeof import("./networkSecurityFirewallEndpoint").NetworkSecurityFirewallEndpoint = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityFirewallEndpoint"], () => require("./networkSecurityFirewallEndpoint"));

export { NetworkSecurityFirewallEndpointAssociationArgs, NetworkSecurityFirewallEndpointAssociationState } from "./networkSecurityFirewallEndpointAssociation";
export type NetworkSecurityFirewallEndpointAssociation = import("./networkSecurityFirewallEndpointAssociation").NetworkSecurityFirewallEndpointAssociation;
export const NetworkSecurityFirewallEndpointAssociation: typeof import("./networkSecurityFirewallEndpointAssociation").NetworkSecurityFirewallEndpointAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityFirewallEndpointAssociation"], () => require("./networkSecurityFirewallEndpointAssociation"));

export { NetworkSecurityGatewaySecurityPolicyArgs, NetworkSecurityGatewaySecurityPolicyState } from "./networkSecurityGatewaySecurityPolicy";
export type NetworkSecurityGatewaySecurityPolicy = import("./networkSecurityGatewaySecurityPolicy").NetworkSecurityGatewaySecurityPolicy;
export const NetworkSecurityGatewaySecurityPolicy: typeof import("./networkSecurityGatewaySecurityPolicy").NetworkSecurityGatewaySecurityPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityGatewaySecurityPolicy"], () => require("./networkSecurityGatewaySecurityPolicy"));

export { NetworkSecurityGatewaySecurityPolicyRuleArgs, NetworkSecurityGatewaySecurityPolicyRuleState } from "./networkSecurityGatewaySecurityPolicyRule";
export type NetworkSecurityGatewaySecurityPolicyRule = import("./networkSecurityGatewaySecurityPolicyRule").NetworkSecurityGatewaySecurityPolicyRule;
export const NetworkSecurityGatewaySecurityPolicyRule: typeof import("./networkSecurityGatewaySecurityPolicyRule").NetworkSecurityGatewaySecurityPolicyRule = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityGatewaySecurityPolicyRule"], () => require("./networkSecurityGatewaySecurityPolicyRule"));

export { NetworkSecuritySecurityProfileArgs, NetworkSecuritySecurityProfileState } from "./networkSecuritySecurityProfile";
export type NetworkSecuritySecurityProfile = import("./networkSecuritySecurityProfile").NetworkSecuritySecurityProfile;
export const NetworkSecuritySecurityProfile: typeof import("./networkSecuritySecurityProfile").NetworkSecuritySecurityProfile = null as any;
utilities.lazyLoad(exports, ["NetworkSecuritySecurityProfile"], () => require("./networkSecuritySecurityProfile"));

export { NetworkSecuritySecurityProfileGroupArgs, NetworkSecuritySecurityProfileGroupState } from "./networkSecuritySecurityProfileGroup";
export type NetworkSecuritySecurityProfileGroup = import("./networkSecuritySecurityProfileGroup").NetworkSecuritySecurityProfileGroup;
export const NetworkSecuritySecurityProfileGroup: typeof import("./networkSecuritySecurityProfileGroup").NetworkSecuritySecurityProfileGroup = null as any;
utilities.lazyLoad(exports, ["NetworkSecuritySecurityProfileGroup"], () => require("./networkSecuritySecurityProfileGroup"));

export { NetworkSecurityServerTlsPolicyArgs, NetworkSecurityServerTlsPolicyState } from "./networkSecurityServerTlsPolicy";
export type NetworkSecurityServerTlsPolicy = import("./networkSecurityServerTlsPolicy").NetworkSecurityServerTlsPolicy;
export const NetworkSecurityServerTlsPolicy: typeof import("./networkSecurityServerTlsPolicy").NetworkSecurityServerTlsPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityServerTlsPolicy"], () => require("./networkSecurityServerTlsPolicy"));

export { NetworkSecurityTlsInspectionPolicyArgs, NetworkSecurityTlsInspectionPolicyState } from "./networkSecurityTlsInspectionPolicy";
export type NetworkSecurityTlsInspectionPolicy = import("./networkSecurityTlsInspectionPolicy").NetworkSecurityTlsInspectionPolicy;
export const NetworkSecurityTlsInspectionPolicy: typeof import("./networkSecurityTlsInspectionPolicy").NetworkSecurityTlsInspectionPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityTlsInspectionPolicy"], () => require("./networkSecurityTlsInspectionPolicy"));

export { NetworkSecurityUrlListsArgs, NetworkSecurityUrlListsState } from "./networkSecurityUrlLists";
export type NetworkSecurityUrlLists = import("./networkSecurityUrlLists").NetworkSecurityUrlLists;
export const NetworkSecurityUrlLists: typeof import("./networkSecurityUrlLists").NetworkSecurityUrlLists = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityUrlLists"], () => require("./networkSecurityUrlLists"));

export { NetworkServicesEdgeCacheKeysetArgs, NetworkServicesEdgeCacheKeysetState } from "./networkServicesEdgeCacheKeyset";
export type NetworkServicesEdgeCacheKeyset = import("./networkServicesEdgeCacheKeyset").NetworkServicesEdgeCacheKeyset;
export const NetworkServicesEdgeCacheKeyset: typeof import("./networkServicesEdgeCacheKeyset").NetworkServicesEdgeCacheKeyset = null as any;
utilities.lazyLoad(exports, ["NetworkServicesEdgeCacheKeyset"], () => require("./networkServicesEdgeCacheKeyset"));

export { NetworkServicesEdgeCacheOriginArgs, NetworkServicesEdgeCacheOriginState } from "./networkServicesEdgeCacheOrigin";
export type NetworkServicesEdgeCacheOrigin = import("./networkServicesEdgeCacheOrigin").NetworkServicesEdgeCacheOrigin;
export const NetworkServicesEdgeCacheOrigin: typeof import("./networkServicesEdgeCacheOrigin").NetworkServicesEdgeCacheOrigin = null as any;
utilities.lazyLoad(exports, ["NetworkServicesEdgeCacheOrigin"], () => require("./networkServicesEdgeCacheOrigin"));

export { NetworkServicesEdgeCacheServiceArgs, NetworkServicesEdgeCacheServiceState } from "./networkServicesEdgeCacheService";
export type NetworkServicesEdgeCacheService = import("./networkServicesEdgeCacheService").NetworkServicesEdgeCacheService;
export const NetworkServicesEdgeCacheService: typeof import("./networkServicesEdgeCacheService").NetworkServicesEdgeCacheService = null as any;
utilities.lazyLoad(exports, ["NetworkServicesEdgeCacheService"], () => require("./networkServicesEdgeCacheService"));

export { NetworkServicesEndpointPolicyArgs, NetworkServicesEndpointPolicyState } from "./networkServicesEndpointPolicy";
export type NetworkServicesEndpointPolicy = import("./networkServicesEndpointPolicy").NetworkServicesEndpointPolicy;
export const NetworkServicesEndpointPolicy: typeof import("./networkServicesEndpointPolicy").NetworkServicesEndpointPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkServicesEndpointPolicy"], () => require("./networkServicesEndpointPolicy"));

export { NetworkServicesGatewayArgs, NetworkServicesGatewayState } from "./networkServicesGateway";
export type NetworkServicesGateway = import("./networkServicesGateway").NetworkServicesGateway;
export const NetworkServicesGateway: typeof import("./networkServicesGateway").NetworkServicesGateway = null as any;
utilities.lazyLoad(exports, ["NetworkServicesGateway"], () => require("./networkServicesGateway"));

export { NetworkServicesGrpcRouteArgs, NetworkServicesGrpcRouteState } from "./networkServicesGrpcRoute";
export type NetworkServicesGrpcRoute = import("./networkServicesGrpcRoute").NetworkServicesGrpcRoute;
export const NetworkServicesGrpcRoute: typeof import("./networkServicesGrpcRoute").NetworkServicesGrpcRoute = null as any;
utilities.lazyLoad(exports, ["NetworkServicesGrpcRoute"], () => require("./networkServicesGrpcRoute"));

export { NetworkServicesHttpRouteArgs, NetworkServicesHttpRouteState } from "./networkServicesHttpRoute";
export type NetworkServicesHttpRoute = import("./networkServicesHttpRoute").NetworkServicesHttpRoute;
export const NetworkServicesHttpRoute: typeof import("./networkServicesHttpRoute").NetworkServicesHttpRoute = null as any;
utilities.lazyLoad(exports, ["NetworkServicesHttpRoute"], () => require("./networkServicesHttpRoute"));

export { NetworkServicesLbRouteExtensionArgs, NetworkServicesLbRouteExtensionState } from "./networkServicesLbRouteExtension";
export type NetworkServicesLbRouteExtension = import("./networkServicesLbRouteExtension").NetworkServicesLbRouteExtension;
export const NetworkServicesLbRouteExtension: typeof import("./networkServicesLbRouteExtension").NetworkServicesLbRouteExtension = null as any;
utilities.lazyLoad(exports, ["NetworkServicesLbRouteExtension"], () => require("./networkServicesLbRouteExtension"));

export { NetworkServicesLbTrafficExtensionArgs, NetworkServicesLbTrafficExtensionState } from "./networkServicesLbTrafficExtension";
export type NetworkServicesLbTrafficExtension = import("./networkServicesLbTrafficExtension").NetworkServicesLbTrafficExtension;
export const NetworkServicesLbTrafficExtension: typeof import("./networkServicesLbTrafficExtension").NetworkServicesLbTrafficExtension = null as any;
utilities.lazyLoad(exports, ["NetworkServicesLbTrafficExtension"], () => require("./networkServicesLbTrafficExtension"));

export { NetworkServicesMeshArgs, NetworkServicesMeshState } from "./networkServicesMesh";
export type NetworkServicesMesh = import("./networkServicesMesh").NetworkServicesMesh;
export const NetworkServicesMesh: typeof import("./networkServicesMesh").NetworkServicesMesh = null as any;
utilities.lazyLoad(exports, ["NetworkServicesMesh"], () => require("./networkServicesMesh"));

export { NetworkServicesServiceBindingArgs, NetworkServicesServiceBindingState } from "./networkServicesServiceBinding";
export type NetworkServicesServiceBinding = import("./networkServicesServiceBinding").NetworkServicesServiceBinding;
export const NetworkServicesServiceBinding: typeof import("./networkServicesServiceBinding").NetworkServicesServiceBinding = null as any;
utilities.lazyLoad(exports, ["NetworkServicesServiceBinding"], () => require("./networkServicesServiceBinding"));

export { NetworkServicesServiceLbPoliciesArgs, NetworkServicesServiceLbPoliciesState } from "./networkServicesServiceLbPolicies";
export type NetworkServicesServiceLbPolicies = import("./networkServicesServiceLbPolicies").NetworkServicesServiceLbPolicies;
export const NetworkServicesServiceLbPolicies: typeof import("./networkServicesServiceLbPolicies").NetworkServicesServiceLbPolicies = null as any;
utilities.lazyLoad(exports, ["NetworkServicesServiceLbPolicies"], () => require("./networkServicesServiceLbPolicies"));

export { NetworkServicesTcpRouteArgs, NetworkServicesTcpRouteState } from "./networkServicesTcpRoute";
export type NetworkServicesTcpRoute = import("./networkServicesTcpRoute").NetworkServicesTcpRoute;
export const NetworkServicesTcpRoute: typeof import("./networkServicesTcpRoute").NetworkServicesTcpRoute = null as any;
utilities.lazyLoad(exports, ["NetworkServicesTcpRoute"], () => require("./networkServicesTcpRoute"));

export { NetworkServicesTlsRouteArgs, NetworkServicesTlsRouteState } from "./networkServicesTlsRoute";
export type NetworkServicesTlsRoute = import("./networkServicesTlsRoute").NetworkServicesTlsRoute;
export const NetworkServicesTlsRoute: typeof import("./networkServicesTlsRoute").NetworkServicesTlsRoute = null as any;
utilities.lazyLoad(exports, ["NetworkServicesTlsRoute"], () => require("./networkServicesTlsRoute"));

export { NotebooksEnvironmentArgs, NotebooksEnvironmentState } from "./notebooksEnvironment";
export type NotebooksEnvironment = import("./notebooksEnvironment").NotebooksEnvironment;
export const NotebooksEnvironment: typeof import("./notebooksEnvironment").NotebooksEnvironment = null as any;
utilities.lazyLoad(exports, ["NotebooksEnvironment"], () => require("./notebooksEnvironment"));

export { NotebooksInstanceArgs, NotebooksInstanceState } from "./notebooksInstance";
export type NotebooksInstance = import("./notebooksInstance").NotebooksInstance;
export const NotebooksInstance: typeof import("./notebooksInstance").NotebooksInstance = null as any;
utilities.lazyLoad(exports, ["NotebooksInstance"], () => require("./notebooksInstance"));

export { NotebooksInstanceIamBindingArgs, NotebooksInstanceIamBindingState } from "./notebooksInstanceIamBinding";
export type NotebooksInstanceIamBinding = import("./notebooksInstanceIamBinding").NotebooksInstanceIamBinding;
export const NotebooksInstanceIamBinding: typeof import("./notebooksInstanceIamBinding").NotebooksInstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["NotebooksInstanceIamBinding"], () => require("./notebooksInstanceIamBinding"));

export { NotebooksInstanceIamMemberArgs, NotebooksInstanceIamMemberState } from "./notebooksInstanceIamMember";
export type NotebooksInstanceIamMember = import("./notebooksInstanceIamMember").NotebooksInstanceIamMember;
export const NotebooksInstanceIamMember: typeof import("./notebooksInstanceIamMember").NotebooksInstanceIamMember = null as any;
utilities.lazyLoad(exports, ["NotebooksInstanceIamMember"], () => require("./notebooksInstanceIamMember"));

export { NotebooksInstanceIamPolicyArgs, NotebooksInstanceIamPolicyState } from "./notebooksInstanceIamPolicy";
export type NotebooksInstanceIamPolicy = import("./notebooksInstanceIamPolicy").NotebooksInstanceIamPolicy;
export const NotebooksInstanceIamPolicy: typeof import("./notebooksInstanceIamPolicy").NotebooksInstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["NotebooksInstanceIamPolicy"], () => require("./notebooksInstanceIamPolicy"));

export { NotebooksLocationArgs, NotebooksLocationState } from "./notebooksLocation";
export type NotebooksLocation = import("./notebooksLocation").NotebooksLocation;
export const NotebooksLocation: typeof import("./notebooksLocation").NotebooksLocation = null as any;
utilities.lazyLoad(exports, ["NotebooksLocation"], () => require("./notebooksLocation"));

export { NotebooksRuntimeArgs, NotebooksRuntimeState } from "./notebooksRuntime";
export type NotebooksRuntime = import("./notebooksRuntime").NotebooksRuntime;
export const NotebooksRuntime: typeof import("./notebooksRuntime").NotebooksRuntime = null as any;
utilities.lazyLoad(exports, ["NotebooksRuntime"], () => require("./notebooksRuntime"));

export { NotebooksRuntimeIamBindingArgs, NotebooksRuntimeIamBindingState } from "./notebooksRuntimeIamBinding";
export type NotebooksRuntimeIamBinding = import("./notebooksRuntimeIamBinding").NotebooksRuntimeIamBinding;
export const NotebooksRuntimeIamBinding: typeof import("./notebooksRuntimeIamBinding").NotebooksRuntimeIamBinding = null as any;
utilities.lazyLoad(exports, ["NotebooksRuntimeIamBinding"], () => require("./notebooksRuntimeIamBinding"));

export { NotebooksRuntimeIamMemberArgs, NotebooksRuntimeIamMemberState } from "./notebooksRuntimeIamMember";
export type NotebooksRuntimeIamMember = import("./notebooksRuntimeIamMember").NotebooksRuntimeIamMember;
export const NotebooksRuntimeIamMember: typeof import("./notebooksRuntimeIamMember").NotebooksRuntimeIamMember = null as any;
utilities.lazyLoad(exports, ["NotebooksRuntimeIamMember"], () => require("./notebooksRuntimeIamMember"));

export { NotebooksRuntimeIamPolicyArgs, NotebooksRuntimeIamPolicyState } from "./notebooksRuntimeIamPolicy";
export type NotebooksRuntimeIamPolicy = import("./notebooksRuntimeIamPolicy").NotebooksRuntimeIamPolicy;
export const NotebooksRuntimeIamPolicy: typeof import("./notebooksRuntimeIamPolicy").NotebooksRuntimeIamPolicy = null as any;
utilities.lazyLoad(exports, ["NotebooksRuntimeIamPolicy"], () => require("./notebooksRuntimeIamPolicy"));

export { OrgPolicyCustomConstraintArgs, OrgPolicyCustomConstraintState } from "./orgPolicyCustomConstraint";
export type OrgPolicyCustomConstraint = import("./orgPolicyCustomConstraint").OrgPolicyCustomConstraint;
export const OrgPolicyCustomConstraint: typeof import("./orgPolicyCustomConstraint").OrgPolicyCustomConstraint = null as any;
utilities.lazyLoad(exports, ["OrgPolicyCustomConstraint"], () => require("./orgPolicyCustomConstraint"));

export { OrgPolicyPolicyArgs, OrgPolicyPolicyState } from "./orgPolicyPolicy";
export type OrgPolicyPolicy = import("./orgPolicyPolicy").OrgPolicyPolicy;
export const OrgPolicyPolicy: typeof import("./orgPolicyPolicy").OrgPolicyPolicy = null as any;
utilities.lazyLoad(exports, ["OrgPolicyPolicy"], () => require("./orgPolicyPolicy"));

export { OrganizationAccessApprovalSettingsArgs, OrganizationAccessApprovalSettingsState } from "./organizationAccessApprovalSettings";
export type OrganizationAccessApprovalSettings = import("./organizationAccessApprovalSettings").OrganizationAccessApprovalSettings;
export const OrganizationAccessApprovalSettings: typeof import("./organizationAccessApprovalSettings").OrganizationAccessApprovalSettings = null as any;
utilities.lazyLoad(exports, ["OrganizationAccessApprovalSettings"], () => require("./organizationAccessApprovalSettings"));

export { OrganizationIamAuditConfigArgs, OrganizationIamAuditConfigState } from "./organizationIamAuditConfig";
export type OrganizationIamAuditConfig = import("./organizationIamAuditConfig").OrganizationIamAuditConfig;
export const OrganizationIamAuditConfig: typeof import("./organizationIamAuditConfig").OrganizationIamAuditConfig = null as any;
utilities.lazyLoad(exports, ["OrganizationIamAuditConfig"], () => require("./organizationIamAuditConfig"));

export { OrganizationIamBindingArgs, OrganizationIamBindingState } from "./organizationIamBinding";
export type OrganizationIamBinding = import("./organizationIamBinding").OrganizationIamBinding;
export const OrganizationIamBinding: typeof import("./organizationIamBinding").OrganizationIamBinding = null as any;
utilities.lazyLoad(exports, ["OrganizationIamBinding"], () => require("./organizationIamBinding"));

export { OrganizationIamCustomRoleArgs, OrganizationIamCustomRoleState } from "./organizationIamCustomRole";
export type OrganizationIamCustomRole = import("./organizationIamCustomRole").OrganizationIamCustomRole;
export const OrganizationIamCustomRole: typeof import("./organizationIamCustomRole").OrganizationIamCustomRole = null as any;
utilities.lazyLoad(exports, ["OrganizationIamCustomRole"], () => require("./organizationIamCustomRole"));

export { OrganizationIamMemberArgs, OrganizationIamMemberState } from "./organizationIamMember";
export type OrganizationIamMember = import("./organizationIamMember").OrganizationIamMember;
export const OrganizationIamMember: typeof import("./organizationIamMember").OrganizationIamMember = null as any;
utilities.lazyLoad(exports, ["OrganizationIamMember"], () => require("./organizationIamMember"));

export { OrganizationIamPolicyArgs, OrganizationIamPolicyState } from "./organizationIamPolicy";
export type OrganizationIamPolicy = import("./organizationIamPolicy").OrganizationIamPolicy;
export const OrganizationIamPolicy: typeof import("./organizationIamPolicy").OrganizationIamPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationIamPolicy"], () => require("./organizationIamPolicy"));

export { OrganizationPolicyArgs, OrganizationPolicyState } from "./organizationPolicy";
export type OrganizationPolicy = import("./organizationPolicy").OrganizationPolicy;
export const OrganizationPolicy: typeof import("./organizationPolicy").OrganizationPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationPolicy"], () => require("./organizationPolicy"));

export { OsConfigGuestPoliciesArgs, OsConfigGuestPoliciesState } from "./osConfigGuestPolicies";
export type OsConfigGuestPolicies = import("./osConfigGuestPolicies").OsConfigGuestPolicies;
export const OsConfigGuestPolicies: typeof import("./osConfigGuestPolicies").OsConfigGuestPolicies = null as any;
utilities.lazyLoad(exports, ["OsConfigGuestPolicies"], () => require("./osConfigGuestPolicies"));

export { OsConfigOsPolicyAssignmentArgs, OsConfigOsPolicyAssignmentState } from "./osConfigOsPolicyAssignment";
export type OsConfigOsPolicyAssignment = import("./osConfigOsPolicyAssignment").OsConfigOsPolicyAssignment;
export const OsConfigOsPolicyAssignment: typeof import("./osConfigOsPolicyAssignment").OsConfigOsPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["OsConfigOsPolicyAssignment"], () => require("./osConfigOsPolicyAssignment"));

export { OsConfigPatchDeploymentArgs, OsConfigPatchDeploymentState } from "./osConfigPatchDeployment";
export type OsConfigPatchDeployment = import("./osConfigPatchDeployment").OsConfigPatchDeployment;
export const OsConfigPatchDeployment: typeof import("./osConfigPatchDeployment").OsConfigPatchDeployment = null as any;
utilities.lazyLoad(exports, ["OsConfigPatchDeployment"], () => require("./osConfigPatchDeployment"));

export { OsLoginSshPublicKeyArgs, OsLoginSshPublicKeyState } from "./osLoginSshPublicKey";
export type OsLoginSshPublicKey = import("./osLoginSshPublicKey").OsLoginSshPublicKey;
export const OsLoginSshPublicKey: typeof import("./osLoginSshPublicKey").OsLoginSshPublicKey = null as any;
utilities.lazyLoad(exports, ["OsLoginSshPublicKey"], () => require("./osLoginSshPublicKey"));

export { ParallelstoreInstanceArgs, ParallelstoreInstanceState } from "./parallelstoreInstance";
export type ParallelstoreInstance = import("./parallelstoreInstance").ParallelstoreInstance;
export const ParallelstoreInstance: typeof import("./parallelstoreInstance").ParallelstoreInstance = null as any;
utilities.lazyLoad(exports, ["ParallelstoreInstance"], () => require("./parallelstoreInstance"));

export { PrivatecaCaPoolArgs, PrivatecaCaPoolState } from "./privatecaCaPool";
export type PrivatecaCaPool = import("./privatecaCaPool").PrivatecaCaPool;
export const PrivatecaCaPool: typeof import("./privatecaCaPool").PrivatecaCaPool = null as any;
utilities.lazyLoad(exports, ["PrivatecaCaPool"], () => require("./privatecaCaPool"));

export { PrivatecaCaPoolIamBindingArgs, PrivatecaCaPoolIamBindingState } from "./privatecaCaPoolIamBinding";
export type PrivatecaCaPoolIamBinding = import("./privatecaCaPoolIamBinding").PrivatecaCaPoolIamBinding;
export const PrivatecaCaPoolIamBinding: typeof import("./privatecaCaPoolIamBinding").PrivatecaCaPoolIamBinding = null as any;
utilities.lazyLoad(exports, ["PrivatecaCaPoolIamBinding"], () => require("./privatecaCaPoolIamBinding"));

export { PrivatecaCaPoolIamMemberArgs, PrivatecaCaPoolIamMemberState } from "./privatecaCaPoolIamMember";
export type PrivatecaCaPoolIamMember = import("./privatecaCaPoolIamMember").PrivatecaCaPoolIamMember;
export const PrivatecaCaPoolIamMember: typeof import("./privatecaCaPoolIamMember").PrivatecaCaPoolIamMember = null as any;
utilities.lazyLoad(exports, ["PrivatecaCaPoolIamMember"], () => require("./privatecaCaPoolIamMember"));

export { PrivatecaCaPoolIamPolicyArgs, PrivatecaCaPoolIamPolicyState } from "./privatecaCaPoolIamPolicy";
export type PrivatecaCaPoolIamPolicy = import("./privatecaCaPoolIamPolicy").PrivatecaCaPoolIamPolicy;
export const PrivatecaCaPoolIamPolicy: typeof import("./privatecaCaPoolIamPolicy").PrivatecaCaPoolIamPolicy = null as any;
utilities.lazyLoad(exports, ["PrivatecaCaPoolIamPolicy"], () => require("./privatecaCaPoolIamPolicy"));

export { PrivatecaCertificateArgs, PrivatecaCertificateState } from "./privatecaCertificate";
export type PrivatecaCertificate = import("./privatecaCertificate").PrivatecaCertificate;
export const PrivatecaCertificate: typeof import("./privatecaCertificate").PrivatecaCertificate = null as any;
utilities.lazyLoad(exports, ["PrivatecaCertificate"], () => require("./privatecaCertificate"));

export { PrivatecaCertificateAuthorityArgs, PrivatecaCertificateAuthorityState } from "./privatecaCertificateAuthority";
export type PrivatecaCertificateAuthority = import("./privatecaCertificateAuthority").PrivatecaCertificateAuthority;
export const PrivatecaCertificateAuthority: typeof import("./privatecaCertificateAuthority").PrivatecaCertificateAuthority = null as any;
utilities.lazyLoad(exports, ["PrivatecaCertificateAuthority"], () => require("./privatecaCertificateAuthority"));

export { PrivatecaCertificateTemplateArgs, PrivatecaCertificateTemplateState } from "./privatecaCertificateTemplate";
export type PrivatecaCertificateTemplate = import("./privatecaCertificateTemplate").PrivatecaCertificateTemplate;
export const PrivatecaCertificateTemplate: typeof import("./privatecaCertificateTemplate").PrivatecaCertificateTemplate = null as any;
utilities.lazyLoad(exports, ["PrivatecaCertificateTemplate"], () => require("./privatecaCertificateTemplate"));

export { PrivatecaCertificateTemplateIamBindingArgs, PrivatecaCertificateTemplateIamBindingState } from "./privatecaCertificateTemplateIamBinding";
export type PrivatecaCertificateTemplateIamBinding = import("./privatecaCertificateTemplateIamBinding").PrivatecaCertificateTemplateIamBinding;
export const PrivatecaCertificateTemplateIamBinding: typeof import("./privatecaCertificateTemplateIamBinding").PrivatecaCertificateTemplateIamBinding = null as any;
utilities.lazyLoad(exports, ["PrivatecaCertificateTemplateIamBinding"], () => require("./privatecaCertificateTemplateIamBinding"));

export { PrivatecaCertificateTemplateIamMemberArgs, PrivatecaCertificateTemplateIamMemberState } from "./privatecaCertificateTemplateIamMember";
export type PrivatecaCertificateTemplateIamMember = import("./privatecaCertificateTemplateIamMember").PrivatecaCertificateTemplateIamMember;
export const PrivatecaCertificateTemplateIamMember: typeof import("./privatecaCertificateTemplateIamMember").PrivatecaCertificateTemplateIamMember = null as any;
utilities.lazyLoad(exports, ["PrivatecaCertificateTemplateIamMember"], () => require("./privatecaCertificateTemplateIamMember"));

export { PrivatecaCertificateTemplateIamPolicyArgs, PrivatecaCertificateTemplateIamPolicyState } from "./privatecaCertificateTemplateIamPolicy";
export type PrivatecaCertificateTemplateIamPolicy = import("./privatecaCertificateTemplateIamPolicy").PrivatecaCertificateTemplateIamPolicy;
export const PrivatecaCertificateTemplateIamPolicy: typeof import("./privatecaCertificateTemplateIamPolicy").PrivatecaCertificateTemplateIamPolicy = null as any;
utilities.lazyLoad(exports, ["PrivatecaCertificateTemplateIamPolicy"], () => require("./privatecaCertificateTemplateIamPolicy"));

export { PrivilegedAccessManagerEntitlementArgs, PrivilegedAccessManagerEntitlementState } from "./privilegedAccessManagerEntitlement";
export type PrivilegedAccessManagerEntitlement = import("./privilegedAccessManagerEntitlement").PrivilegedAccessManagerEntitlement;
export const PrivilegedAccessManagerEntitlement: typeof import("./privilegedAccessManagerEntitlement").PrivilegedAccessManagerEntitlement = null as any;
utilities.lazyLoad(exports, ["PrivilegedAccessManagerEntitlement"], () => require("./privilegedAccessManagerEntitlement"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectAccessApprovalSettingsArgs, ProjectAccessApprovalSettingsState } from "./projectAccessApprovalSettings";
export type ProjectAccessApprovalSettings = import("./projectAccessApprovalSettings").ProjectAccessApprovalSettings;
export const ProjectAccessApprovalSettings: typeof import("./projectAccessApprovalSettings").ProjectAccessApprovalSettings = null as any;
utilities.lazyLoad(exports, ["ProjectAccessApprovalSettings"], () => require("./projectAccessApprovalSettings"));

export { ProjectDefaultServiceAccountsArgs, ProjectDefaultServiceAccountsState } from "./projectDefaultServiceAccounts";
export type ProjectDefaultServiceAccounts = import("./projectDefaultServiceAccounts").ProjectDefaultServiceAccounts;
export const ProjectDefaultServiceAccounts: typeof import("./projectDefaultServiceAccounts").ProjectDefaultServiceAccounts = null as any;
utilities.lazyLoad(exports, ["ProjectDefaultServiceAccounts"], () => require("./projectDefaultServiceAccounts"));

export { ProjectIamAuditConfigArgs, ProjectIamAuditConfigState } from "./projectIamAuditConfig";
export type ProjectIamAuditConfig = import("./projectIamAuditConfig").ProjectIamAuditConfig;
export const ProjectIamAuditConfig: typeof import("./projectIamAuditConfig").ProjectIamAuditConfig = null as any;
utilities.lazyLoad(exports, ["ProjectIamAuditConfig"], () => require("./projectIamAuditConfig"));

export { ProjectIamBindingArgs, ProjectIamBindingState } from "./projectIamBinding";
export type ProjectIamBinding = import("./projectIamBinding").ProjectIamBinding;
export const ProjectIamBinding: typeof import("./projectIamBinding").ProjectIamBinding = null as any;
utilities.lazyLoad(exports, ["ProjectIamBinding"], () => require("./projectIamBinding"));

export { ProjectIamCustomRoleArgs, ProjectIamCustomRoleState } from "./projectIamCustomRole";
export type ProjectIamCustomRole = import("./projectIamCustomRole").ProjectIamCustomRole;
export const ProjectIamCustomRole: typeof import("./projectIamCustomRole").ProjectIamCustomRole = null as any;
utilities.lazyLoad(exports, ["ProjectIamCustomRole"], () => require("./projectIamCustomRole"));

export { ProjectIamMemberArgs, ProjectIamMemberState } from "./projectIamMember";
export type ProjectIamMember = import("./projectIamMember").ProjectIamMember;
export const ProjectIamMember: typeof import("./projectIamMember").ProjectIamMember = null as any;
utilities.lazyLoad(exports, ["ProjectIamMember"], () => require("./projectIamMember"));

export { ProjectIamMemberRemoveArgs, ProjectIamMemberRemoveState } from "./projectIamMemberRemove";
export type ProjectIamMemberRemove = import("./projectIamMemberRemove").ProjectIamMemberRemove;
export const ProjectIamMemberRemove: typeof import("./projectIamMemberRemove").ProjectIamMemberRemove = null as any;
utilities.lazyLoad(exports, ["ProjectIamMemberRemove"], () => require("./projectIamMemberRemove"));

export { ProjectIamPolicyArgs, ProjectIamPolicyState } from "./projectIamPolicy";
export type ProjectIamPolicy = import("./projectIamPolicy").ProjectIamPolicy;
export const ProjectIamPolicy: typeof import("./projectIamPolicy").ProjectIamPolicy = null as any;
utilities.lazyLoad(exports, ["ProjectIamPolicy"], () => require("./projectIamPolicy"));

export { ProjectOrganizationPolicyArgs, ProjectOrganizationPolicyState } from "./projectOrganizationPolicy";
export type ProjectOrganizationPolicy = import("./projectOrganizationPolicy").ProjectOrganizationPolicy;
export const ProjectOrganizationPolicy: typeof import("./projectOrganizationPolicy").ProjectOrganizationPolicy = null as any;
utilities.lazyLoad(exports, ["ProjectOrganizationPolicy"], () => require("./projectOrganizationPolicy"));

export { ProjectServiceArgs, ProjectServiceState } from "./projectService";
export type ProjectService = import("./projectService").ProjectService;
export const ProjectService: typeof import("./projectService").ProjectService = null as any;
utilities.lazyLoad(exports, ["ProjectService"], () => require("./projectService"));

export { ProjectServiceIdentityArgs, ProjectServiceIdentityState } from "./projectServiceIdentity";
export type ProjectServiceIdentity = import("./projectServiceIdentity").ProjectServiceIdentity;
export const ProjectServiceIdentity: typeof import("./projectServiceIdentity").ProjectServiceIdentity = null as any;
utilities.lazyLoad(exports, ["ProjectServiceIdentity"], () => require("./projectServiceIdentity"));

export { ProjectUsageExportBucketArgs, ProjectUsageExportBucketState } from "./projectUsageExportBucket";
export type ProjectUsageExportBucket = import("./projectUsageExportBucket").ProjectUsageExportBucket;
export const ProjectUsageExportBucket: typeof import("./projectUsageExportBucket").ProjectUsageExportBucket = null as any;
utilities.lazyLoad(exports, ["ProjectUsageExportBucket"], () => require("./projectUsageExportBucket"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicCaExternalAccountKeyArgs, PublicCaExternalAccountKeyState } from "./publicCaExternalAccountKey";
export type PublicCaExternalAccountKey = import("./publicCaExternalAccountKey").PublicCaExternalAccountKey;
export const PublicCaExternalAccountKey: typeof import("./publicCaExternalAccountKey").PublicCaExternalAccountKey = null as any;
utilities.lazyLoad(exports, ["PublicCaExternalAccountKey"], () => require("./publicCaExternalAccountKey"));

export { PubsubLiteReservationArgs, PubsubLiteReservationState } from "./pubsubLiteReservation";
export type PubsubLiteReservation = import("./pubsubLiteReservation").PubsubLiteReservation;
export const PubsubLiteReservation: typeof import("./pubsubLiteReservation").PubsubLiteReservation = null as any;
utilities.lazyLoad(exports, ["PubsubLiteReservation"], () => require("./pubsubLiteReservation"));

export { PubsubLiteSubscriptionArgs, PubsubLiteSubscriptionState } from "./pubsubLiteSubscription";
export type PubsubLiteSubscription = import("./pubsubLiteSubscription").PubsubLiteSubscription;
export const PubsubLiteSubscription: typeof import("./pubsubLiteSubscription").PubsubLiteSubscription = null as any;
utilities.lazyLoad(exports, ["PubsubLiteSubscription"], () => require("./pubsubLiteSubscription"));

export { PubsubLiteTopicArgs, PubsubLiteTopicState } from "./pubsubLiteTopic";
export type PubsubLiteTopic = import("./pubsubLiteTopic").PubsubLiteTopic;
export const PubsubLiteTopic: typeof import("./pubsubLiteTopic").PubsubLiteTopic = null as any;
utilities.lazyLoad(exports, ["PubsubLiteTopic"], () => require("./pubsubLiteTopic"));

export { PubsubSchemaArgs, PubsubSchemaState } from "./pubsubSchema";
export type PubsubSchema = import("./pubsubSchema").PubsubSchema;
export const PubsubSchema: typeof import("./pubsubSchema").PubsubSchema = null as any;
utilities.lazyLoad(exports, ["PubsubSchema"], () => require("./pubsubSchema"));

export { PubsubSchemaIamBindingArgs, PubsubSchemaIamBindingState } from "./pubsubSchemaIamBinding";
export type PubsubSchemaIamBinding = import("./pubsubSchemaIamBinding").PubsubSchemaIamBinding;
export const PubsubSchemaIamBinding: typeof import("./pubsubSchemaIamBinding").PubsubSchemaIamBinding = null as any;
utilities.lazyLoad(exports, ["PubsubSchemaIamBinding"], () => require("./pubsubSchemaIamBinding"));

export { PubsubSchemaIamMemberArgs, PubsubSchemaIamMemberState } from "./pubsubSchemaIamMember";
export type PubsubSchemaIamMember = import("./pubsubSchemaIamMember").PubsubSchemaIamMember;
export const PubsubSchemaIamMember: typeof import("./pubsubSchemaIamMember").PubsubSchemaIamMember = null as any;
utilities.lazyLoad(exports, ["PubsubSchemaIamMember"], () => require("./pubsubSchemaIamMember"));

export { PubsubSchemaIamPolicyArgs, PubsubSchemaIamPolicyState } from "./pubsubSchemaIamPolicy";
export type PubsubSchemaIamPolicy = import("./pubsubSchemaIamPolicy").PubsubSchemaIamPolicy;
export const PubsubSchemaIamPolicy: typeof import("./pubsubSchemaIamPolicy").PubsubSchemaIamPolicy = null as any;
utilities.lazyLoad(exports, ["PubsubSchemaIamPolicy"], () => require("./pubsubSchemaIamPolicy"));

export { PubsubSubscriptionArgs, PubsubSubscriptionState } from "./pubsubSubscription";
export type PubsubSubscription = import("./pubsubSubscription").PubsubSubscription;
export const PubsubSubscription: typeof import("./pubsubSubscription").PubsubSubscription = null as any;
utilities.lazyLoad(exports, ["PubsubSubscription"], () => require("./pubsubSubscription"));

export { PubsubSubscriptionIamBindingArgs, PubsubSubscriptionIamBindingState } from "./pubsubSubscriptionIamBinding";
export type PubsubSubscriptionIamBinding = import("./pubsubSubscriptionIamBinding").PubsubSubscriptionIamBinding;
export const PubsubSubscriptionIamBinding: typeof import("./pubsubSubscriptionIamBinding").PubsubSubscriptionIamBinding = null as any;
utilities.lazyLoad(exports, ["PubsubSubscriptionIamBinding"], () => require("./pubsubSubscriptionIamBinding"));

export { PubsubSubscriptionIamMemberArgs, PubsubSubscriptionIamMemberState } from "./pubsubSubscriptionIamMember";
export type PubsubSubscriptionIamMember = import("./pubsubSubscriptionIamMember").PubsubSubscriptionIamMember;
export const PubsubSubscriptionIamMember: typeof import("./pubsubSubscriptionIamMember").PubsubSubscriptionIamMember = null as any;
utilities.lazyLoad(exports, ["PubsubSubscriptionIamMember"], () => require("./pubsubSubscriptionIamMember"));

export { PubsubSubscriptionIamPolicyArgs, PubsubSubscriptionIamPolicyState } from "./pubsubSubscriptionIamPolicy";
export type PubsubSubscriptionIamPolicy = import("./pubsubSubscriptionIamPolicy").PubsubSubscriptionIamPolicy;
export const PubsubSubscriptionIamPolicy: typeof import("./pubsubSubscriptionIamPolicy").PubsubSubscriptionIamPolicy = null as any;
utilities.lazyLoad(exports, ["PubsubSubscriptionIamPolicy"], () => require("./pubsubSubscriptionIamPolicy"));

export { PubsubTopicArgs, PubsubTopicState } from "./pubsubTopic";
export type PubsubTopic = import("./pubsubTopic").PubsubTopic;
export const PubsubTopic: typeof import("./pubsubTopic").PubsubTopic = null as any;
utilities.lazyLoad(exports, ["PubsubTopic"], () => require("./pubsubTopic"));

export { PubsubTopicIamBindingArgs, PubsubTopicIamBindingState } from "./pubsubTopicIamBinding";
export type PubsubTopicIamBinding = import("./pubsubTopicIamBinding").PubsubTopicIamBinding;
export const PubsubTopicIamBinding: typeof import("./pubsubTopicIamBinding").PubsubTopicIamBinding = null as any;
utilities.lazyLoad(exports, ["PubsubTopicIamBinding"], () => require("./pubsubTopicIamBinding"));

export { PubsubTopicIamMemberArgs, PubsubTopicIamMemberState } from "./pubsubTopicIamMember";
export type PubsubTopicIamMember = import("./pubsubTopicIamMember").PubsubTopicIamMember;
export const PubsubTopicIamMember: typeof import("./pubsubTopicIamMember").PubsubTopicIamMember = null as any;
utilities.lazyLoad(exports, ["PubsubTopicIamMember"], () => require("./pubsubTopicIamMember"));

export { PubsubTopicIamPolicyArgs, PubsubTopicIamPolicyState } from "./pubsubTopicIamPolicy";
export type PubsubTopicIamPolicy = import("./pubsubTopicIamPolicy").PubsubTopicIamPolicy;
export const PubsubTopicIamPolicy: typeof import("./pubsubTopicIamPolicy").PubsubTopicIamPolicy = null as any;
utilities.lazyLoad(exports, ["PubsubTopicIamPolicy"], () => require("./pubsubTopicIamPolicy"));

export { RecaptchaEnterpriseKeyArgs, RecaptchaEnterpriseKeyState } from "./recaptchaEnterpriseKey";
export type RecaptchaEnterpriseKey = import("./recaptchaEnterpriseKey").RecaptchaEnterpriseKey;
export const RecaptchaEnterpriseKey: typeof import("./recaptchaEnterpriseKey").RecaptchaEnterpriseKey = null as any;
utilities.lazyLoad(exports, ["RecaptchaEnterpriseKey"], () => require("./recaptchaEnterpriseKey"));

export { RedisClusterArgs, RedisClusterState } from "./redisCluster";
export type RedisCluster = import("./redisCluster").RedisCluster;
export const RedisCluster: typeof import("./redisCluster").RedisCluster = null as any;
utilities.lazyLoad(exports, ["RedisCluster"], () => require("./redisCluster"));

export { RedisInstanceArgs, RedisInstanceState } from "./redisInstance";
export type RedisInstance = import("./redisInstance").RedisInstance;
export const RedisInstance: typeof import("./redisInstance").RedisInstance = null as any;
utilities.lazyLoad(exports, ["RedisInstance"], () => require("./redisInstance"));

export { ResourceManagerLienArgs, ResourceManagerLienState } from "./resourceManagerLien";
export type ResourceManagerLien = import("./resourceManagerLien").ResourceManagerLien;
export const ResourceManagerLien: typeof import("./resourceManagerLien").ResourceManagerLien = null as any;
utilities.lazyLoad(exports, ["ResourceManagerLien"], () => require("./resourceManagerLien"));

export { RuntimeconfigConfigArgs, RuntimeconfigConfigState } from "./runtimeconfigConfig";
export type RuntimeconfigConfig = import("./runtimeconfigConfig").RuntimeconfigConfig;
export const RuntimeconfigConfig: typeof import("./runtimeconfigConfig").RuntimeconfigConfig = null as any;
utilities.lazyLoad(exports, ["RuntimeconfigConfig"], () => require("./runtimeconfigConfig"));

export { RuntimeconfigConfigIamBindingArgs, RuntimeconfigConfigIamBindingState } from "./runtimeconfigConfigIamBinding";
export type RuntimeconfigConfigIamBinding = import("./runtimeconfigConfigIamBinding").RuntimeconfigConfigIamBinding;
export const RuntimeconfigConfigIamBinding: typeof import("./runtimeconfigConfigIamBinding").RuntimeconfigConfigIamBinding = null as any;
utilities.lazyLoad(exports, ["RuntimeconfigConfigIamBinding"], () => require("./runtimeconfigConfigIamBinding"));

export { RuntimeconfigConfigIamMemberArgs, RuntimeconfigConfigIamMemberState } from "./runtimeconfigConfigIamMember";
export type RuntimeconfigConfigIamMember = import("./runtimeconfigConfigIamMember").RuntimeconfigConfigIamMember;
export const RuntimeconfigConfigIamMember: typeof import("./runtimeconfigConfigIamMember").RuntimeconfigConfigIamMember = null as any;
utilities.lazyLoad(exports, ["RuntimeconfigConfigIamMember"], () => require("./runtimeconfigConfigIamMember"));

export { RuntimeconfigConfigIamPolicyArgs, RuntimeconfigConfigIamPolicyState } from "./runtimeconfigConfigIamPolicy";
export type RuntimeconfigConfigIamPolicy = import("./runtimeconfigConfigIamPolicy").RuntimeconfigConfigIamPolicy;
export const RuntimeconfigConfigIamPolicy: typeof import("./runtimeconfigConfigIamPolicy").RuntimeconfigConfigIamPolicy = null as any;
utilities.lazyLoad(exports, ["RuntimeconfigConfigIamPolicy"], () => require("./runtimeconfigConfigIamPolicy"));

export { RuntimeconfigVariableArgs, RuntimeconfigVariableState } from "./runtimeconfigVariable";
export type RuntimeconfigVariable = import("./runtimeconfigVariable").RuntimeconfigVariable;
export const RuntimeconfigVariable: typeof import("./runtimeconfigVariable").RuntimeconfigVariable = null as any;
utilities.lazyLoad(exports, ["RuntimeconfigVariable"], () => require("./runtimeconfigVariable"));

export { SccEventThreatDetectionCustomModuleArgs, SccEventThreatDetectionCustomModuleState } from "./sccEventThreatDetectionCustomModule";
export type SccEventThreatDetectionCustomModule = import("./sccEventThreatDetectionCustomModule").SccEventThreatDetectionCustomModule;
export const SccEventThreatDetectionCustomModule: typeof import("./sccEventThreatDetectionCustomModule").SccEventThreatDetectionCustomModule = null as any;
utilities.lazyLoad(exports, ["SccEventThreatDetectionCustomModule"], () => require("./sccEventThreatDetectionCustomModule"));

export { SccFolderCustomModuleArgs, SccFolderCustomModuleState } from "./sccFolderCustomModule";
export type SccFolderCustomModule = import("./sccFolderCustomModule").SccFolderCustomModule;
export const SccFolderCustomModule: typeof import("./sccFolderCustomModule").SccFolderCustomModule = null as any;
utilities.lazyLoad(exports, ["SccFolderCustomModule"], () => require("./sccFolderCustomModule"));

export { SccFolderNotificationConfigArgs, SccFolderNotificationConfigState } from "./sccFolderNotificationConfig";
export type SccFolderNotificationConfig = import("./sccFolderNotificationConfig").SccFolderNotificationConfig;
export const SccFolderNotificationConfig: typeof import("./sccFolderNotificationConfig").SccFolderNotificationConfig = null as any;
utilities.lazyLoad(exports, ["SccFolderNotificationConfig"], () => require("./sccFolderNotificationConfig"));

export { SccManagementFolderSecurityHealthAnalyticsCustomModuleArgs, SccManagementFolderSecurityHealthAnalyticsCustomModuleState } from "./sccManagementFolderSecurityHealthAnalyticsCustomModule";
export type SccManagementFolderSecurityHealthAnalyticsCustomModule = import("./sccManagementFolderSecurityHealthAnalyticsCustomModule").SccManagementFolderSecurityHealthAnalyticsCustomModule;
export const SccManagementFolderSecurityHealthAnalyticsCustomModule: typeof import("./sccManagementFolderSecurityHealthAnalyticsCustomModule").SccManagementFolderSecurityHealthAnalyticsCustomModule = null as any;
utilities.lazyLoad(exports, ["SccManagementFolderSecurityHealthAnalyticsCustomModule"], () => require("./sccManagementFolderSecurityHealthAnalyticsCustomModule"));

export { SccManagementOrganizationEventThreatDetectionCustomModuleArgs, SccManagementOrganizationEventThreatDetectionCustomModuleState } from "./sccManagementOrganizationEventThreatDetectionCustomModule";
export type SccManagementOrganizationEventThreatDetectionCustomModule = import("./sccManagementOrganizationEventThreatDetectionCustomModule").SccManagementOrganizationEventThreatDetectionCustomModule;
export const SccManagementOrganizationEventThreatDetectionCustomModule: typeof import("./sccManagementOrganizationEventThreatDetectionCustomModule").SccManagementOrganizationEventThreatDetectionCustomModule = null as any;
utilities.lazyLoad(exports, ["SccManagementOrganizationEventThreatDetectionCustomModule"], () => require("./sccManagementOrganizationEventThreatDetectionCustomModule"));

export { SccManagementOrganizationSecurityHealthAnalyticsCustomModuleArgs, SccManagementOrganizationSecurityHealthAnalyticsCustomModuleState } from "./sccManagementOrganizationSecurityHealthAnalyticsCustomModule";
export type SccManagementOrganizationSecurityHealthAnalyticsCustomModule = import("./sccManagementOrganizationSecurityHealthAnalyticsCustomModule").SccManagementOrganizationSecurityHealthAnalyticsCustomModule;
export const SccManagementOrganizationSecurityHealthAnalyticsCustomModule: typeof import("./sccManagementOrganizationSecurityHealthAnalyticsCustomModule").SccManagementOrganizationSecurityHealthAnalyticsCustomModule = null as any;
utilities.lazyLoad(exports, ["SccManagementOrganizationSecurityHealthAnalyticsCustomModule"], () => require("./sccManagementOrganizationSecurityHealthAnalyticsCustomModule"));

export { SccManagementProjectSecurityHealthAnalyticsCustomModuleArgs, SccManagementProjectSecurityHealthAnalyticsCustomModuleState } from "./sccManagementProjectSecurityHealthAnalyticsCustomModule";
export type SccManagementProjectSecurityHealthAnalyticsCustomModule = import("./sccManagementProjectSecurityHealthAnalyticsCustomModule").SccManagementProjectSecurityHealthAnalyticsCustomModule;
export const SccManagementProjectSecurityHealthAnalyticsCustomModule: typeof import("./sccManagementProjectSecurityHealthAnalyticsCustomModule").SccManagementProjectSecurityHealthAnalyticsCustomModule = null as any;
utilities.lazyLoad(exports, ["SccManagementProjectSecurityHealthAnalyticsCustomModule"], () => require("./sccManagementProjectSecurityHealthAnalyticsCustomModule"));

export { SccMuteConfigArgs, SccMuteConfigState } from "./sccMuteConfig";
export type SccMuteConfig = import("./sccMuteConfig").SccMuteConfig;
export const SccMuteConfig: typeof import("./sccMuteConfig").SccMuteConfig = null as any;
utilities.lazyLoad(exports, ["SccMuteConfig"], () => require("./sccMuteConfig"));

export { SccNotificationConfigArgs, SccNotificationConfigState } from "./sccNotificationConfig";
export type SccNotificationConfig = import("./sccNotificationConfig").SccNotificationConfig;
export const SccNotificationConfig: typeof import("./sccNotificationConfig").SccNotificationConfig = null as any;
utilities.lazyLoad(exports, ["SccNotificationConfig"], () => require("./sccNotificationConfig"));

export { SccOrganizationCustomModuleArgs, SccOrganizationCustomModuleState } from "./sccOrganizationCustomModule";
export type SccOrganizationCustomModule = import("./sccOrganizationCustomModule").SccOrganizationCustomModule;
export const SccOrganizationCustomModule: typeof import("./sccOrganizationCustomModule").SccOrganizationCustomModule = null as any;
utilities.lazyLoad(exports, ["SccOrganizationCustomModule"], () => require("./sccOrganizationCustomModule"));

export { SccProjectCustomModuleArgs, SccProjectCustomModuleState } from "./sccProjectCustomModule";
export type SccProjectCustomModule = import("./sccProjectCustomModule").SccProjectCustomModule;
export const SccProjectCustomModule: typeof import("./sccProjectCustomModule").SccProjectCustomModule = null as any;
utilities.lazyLoad(exports, ["SccProjectCustomModule"], () => require("./sccProjectCustomModule"));

export { SccProjectNotificationConfigArgs, SccProjectNotificationConfigState } from "./sccProjectNotificationConfig";
export type SccProjectNotificationConfig = import("./sccProjectNotificationConfig").SccProjectNotificationConfig;
export const SccProjectNotificationConfig: typeof import("./sccProjectNotificationConfig").SccProjectNotificationConfig = null as any;
utilities.lazyLoad(exports, ["SccProjectNotificationConfig"], () => require("./sccProjectNotificationConfig"));

export { SccSourceArgs, SccSourceState } from "./sccSource";
export type SccSource = import("./sccSource").SccSource;
export const SccSource: typeof import("./sccSource").SccSource = null as any;
utilities.lazyLoad(exports, ["SccSource"], () => require("./sccSource"));

export { SccSourceIamBindingArgs, SccSourceIamBindingState } from "./sccSourceIamBinding";
export type SccSourceIamBinding = import("./sccSourceIamBinding").SccSourceIamBinding;
export const SccSourceIamBinding: typeof import("./sccSourceIamBinding").SccSourceIamBinding = null as any;
utilities.lazyLoad(exports, ["SccSourceIamBinding"], () => require("./sccSourceIamBinding"));

export { SccSourceIamMemberArgs, SccSourceIamMemberState } from "./sccSourceIamMember";
export type SccSourceIamMember = import("./sccSourceIamMember").SccSourceIamMember;
export const SccSourceIamMember: typeof import("./sccSourceIamMember").SccSourceIamMember = null as any;
utilities.lazyLoad(exports, ["SccSourceIamMember"], () => require("./sccSourceIamMember"));

export { SccSourceIamPolicyArgs, SccSourceIamPolicyState } from "./sccSourceIamPolicy";
export type SccSourceIamPolicy = import("./sccSourceIamPolicy").SccSourceIamPolicy;
export const SccSourceIamPolicy: typeof import("./sccSourceIamPolicy").SccSourceIamPolicy = null as any;
utilities.lazyLoad(exports, ["SccSourceIamPolicy"], () => require("./sccSourceIamPolicy"));

export { SccV2FolderMuteConfigArgs, SccV2FolderMuteConfigState } from "./sccV2FolderMuteConfig";
export type SccV2FolderMuteConfig = import("./sccV2FolderMuteConfig").SccV2FolderMuteConfig;
export const SccV2FolderMuteConfig: typeof import("./sccV2FolderMuteConfig").SccV2FolderMuteConfig = null as any;
utilities.lazyLoad(exports, ["SccV2FolderMuteConfig"], () => require("./sccV2FolderMuteConfig"));

export { SccV2FolderNotificationConfigArgs, SccV2FolderNotificationConfigState } from "./sccV2FolderNotificationConfig";
export type SccV2FolderNotificationConfig = import("./sccV2FolderNotificationConfig").SccV2FolderNotificationConfig;
export const SccV2FolderNotificationConfig: typeof import("./sccV2FolderNotificationConfig").SccV2FolderNotificationConfig = null as any;
utilities.lazyLoad(exports, ["SccV2FolderNotificationConfig"], () => require("./sccV2FolderNotificationConfig"));

export { SccV2OrganizationMuteConfigArgs, SccV2OrganizationMuteConfigState } from "./sccV2OrganizationMuteConfig";
export type SccV2OrganizationMuteConfig = import("./sccV2OrganizationMuteConfig").SccV2OrganizationMuteConfig;
export const SccV2OrganizationMuteConfig: typeof import("./sccV2OrganizationMuteConfig").SccV2OrganizationMuteConfig = null as any;
utilities.lazyLoad(exports, ["SccV2OrganizationMuteConfig"], () => require("./sccV2OrganizationMuteConfig"));

export { SccV2OrganizationNotificationConfigArgs, SccV2OrganizationNotificationConfigState } from "./sccV2OrganizationNotificationConfig";
export type SccV2OrganizationNotificationConfig = import("./sccV2OrganizationNotificationConfig").SccV2OrganizationNotificationConfig;
export const SccV2OrganizationNotificationConfig: typeof import("./sccV2OrganizationNotificationConfig").SccV2OrganizationNotificationConfig = null as any;
utilities.lazyLoad(exports, ["SccV2OrganizationNotificationConfig"], () => require("./sccV2OrganizationNotificationConfig"));

export { SccV2OrganizationSccBigQueryExportsArgs, SccV2OrganizationSccBigQueryExportsState } from "./sccV2OrganizationSccBigQueryExports";
export type SccV2OrganizationSccBigQueryExports = import("./sccV2OrganizationSccBigQueryExports").SccV2OrganizationSccBigQueryExports;
export const SccV2OrganizationSccBigQueryExports: typeof import("./sccV2OrganizationSccBigQueryExports").SccV2OrganizationSccBigQueryExports = null as any;
utilities.lazyLoad(exports, ["SccV2OrganizationSccBigQueryExports"], () => require("./sccV2OrganizationSccBigQueryExports"));

export { SccV2OrganizationSourceArgs, SccV2OrganizationSourceState } from "./sccV2OrganizationSource";
export type SccV2OrganizationSource = import("./sccV2OrganizationSource").SccV2OrganizationSource;
export const SccV2OrganizationSource: typeof import("./sccV2OrganizationSource").SccV2OrganizationSource = null as any;
utilities.lazyLoad(exports, ["SccV2OrganizationSource"], () => require("./sccV2OrganizationSource"));

export { SccV2OrganizationSourceIamBindingArgs, SccV2OrganizationSourceIamBindingState } from "./sccV2OrganizationSourceIamBinding";
export type SccV2OrganizationSourceIamBinding = import("./sccV2OrganizationSourceIamBinding").SccV2OrganizationSourceIamBinding;
export const SccV2OrganizationSourceIamBinding: typeof import("./sccV2OrganizationSourceIamBinding").SccV2OrganizationSourceIamBinding = null as any;
utilities.lazyLoad(exports, ["SccV2OrganizationSourceIamBinding"], () => require("./sccV2OrganizationSourceIamBinding"));

export { SccV2OrganizationSourceIamMemberArgs, SccV2OrganizationSourceIamMemberState } from "./sccV2OrganizationSourceIamMember";
export type SccV2OrganizationSourceIamMember = import("./sccV2OrganizationSourceIamMember").SccV2OrganizationSourceIamMember;
export const SccV2OrganizationSourceIamMember: typeof import("./sccV2OrganizationSourceIamMember").SccV2OrganizationSourceIamMember = null as any;
utilities.lazyLoad(exports, ["SccV2OrganizationSourceIamMember"], () => require("./sccV2OrganizationSourceIamMember"));

export { SccV2OrganizationSourceIamPolicyArgs, SccV2OrganizationSourceIamPolicyState } from "./sccV2OrganizationSourceIamPolicy";
export type SccV2OrganizationSourceIamPolicy = import("./sccV2OrganizationSourceIamPolicy").SccV2OrganizationSourceIamPolicy;
export const SccV2OrganizationSourceIamPolicy: typeof import("./sccV2OrganizationSourceIamPolicy").SccV2OrganizationSourceIamPolicy = null as any;
utilities.lazyLoad(exports, ["SccV2OrganizationSourceIamPolicy"], () => require("./sccV2OrganizationSourceIamPolicy"));

export { SccV2ProjectMuteConfigArgs, SccV2ProjectMuteConfigState } from "./sccV2ProjectMuteConfig";
export type SccV2ProjectMuteConfig = import("./sccV2ProjectMuteConfig").SccV2ProjectMuteConfig;
export const SccV2ProjectMuteConfig: typeof import("./sccV2ProjectMuteConfig").SccV2ProjectMuteConfig = null as any;
utilities.lazyLoad(exports, ["SccV2ProjectMuteConfig"], () => require("./sccV2ProjectMuteConfig"));

export { SccV2ProjectNotificationConfigArgs, SccV2ProjectNotificationConfigState } from "./sccV2ProjectNotificationConfig";
export type SccV2ProjectNotificationConfig = import("./sccV2ProjectNotificationConfig").SccV2ProjectNotificationConfig;
export const SccV2ProjectNotificationConfig: typeof import("./sccV2ProjectNotificationConfig").SccV2ProjectNotificationConfig = null as any;
utilities.lazyLoad(exports, ["SccV2ProjectNotificationConfig"], () => require("./sccV2ProjectNotificationConfig"));

export { SecretManagerSecretArgs, SecretManagerSecretState } from "./secretManagerSecret";
export type SecretManagerSecret = import("./secretManagerSecret").SecretManagerSecret;
export const SecretManagerSecret: typeof import("./secretManagerSecret").SecretManagerSecret = null as any;
utilities.lazyLoad(exports, ["SecretManagerSecret"], () => require("./secretManagerSecret"));

export { SecretManagerSecretIamBindingArgs, SecretManagerSecretIamBindingState } from "./secretManagerSecretIamBinding";
export type SecretManagerSecretIamBinding = import("./secretManagerSecretIamBinding").SecretManagerSecretIamBinding;
export const SecretManagerSecretIamBinding: typeof import("./secretManagerSecretIamBinding").SecretManagerSecretIamBinding = null as any;
utilities.lazyLoad(exports, ["SecretManagerSecretIamBinding"], () => require("./secretManagerSecretIamBinding"));

export { SecretManagerSecretIamMemberArgs, SecretManagerSecretIamMemberState } from "./secretManagerSecretIamMember";
export type SecretManagerSecretIamMember = import("./secretManagerSecretIamMember").SecretManagerSecretIamMember;
export const SecretManagerSecretIamMember: typeof import("./secretManagerSecretIamMember").SecretManagerSecretIamMember = null as any;
utilities.lazyLoad(exports, ["SecretManagerSecretIamMember"], () => require("./secretManagerSecretIamMember"));

export { SecretManagerSecretIamPolicyArgs, SecretManagerSecretIamPolicyState } from "./secretManagerSecretIamPolicy";
export type SecretManagerSecretIamPolicy = import("./secretManagerSecretIamPolicy").SecretManagerSecretIamPolicy;
export const SecretManagerSecretIamPolicy: typeof import("./secretManagerSecretIamPolicy").SecretManagerSecretIamPolicy = null as any;
utilities.lazyLoad(exports, ["SecretManagerSecretIamPolicy"], () => require("./secretManagerSecretIamPolicy"));

export { SecretManagerSecretVersionArgs, SecretManagerSecretVersionState } from "./secretManagerSecretVersion";
export type SecretManagerSecretVersion = import("./secretManagerSecretVersion").SecretManagerSecretVersion;
export const SecretManagerSecretVersion: typeof import("./secretManagerSecretVersion").SecretManagerSecretVersion = null as any;
utilities.lazyLoad(exports, ["SecretManagerSecretVersion"], () => require("./secretManagerSecretVersion"));

export { SecureSourceManagerInstanceArgs, SecureSourceManagerInstanceState } from "./secureSourceManagerInstance";
export type SecureSourceManagerInstance = import("./secureSourceManagerInstance").SecureSourceManagerInstance;
export const SecureSourceManagerInstance: typeof import("./secureSourceManagerInstance").SecureSourceManagerInstance = null as any;
utilities.lazyLoad(exports, ["SecureSourceManagerInstance"], () => require("./secureSourceManagerInstance"));

export { SecureSourceManagerInstanceIamBindingArgs, SecureSourceManagerInstanceIamBindingState } from "./secureSourceManagerInstanceIamBinding";
export type SecureSourceManagerInstanceIamBinding = import("./secureSourceManagerInstanceIamBinding").SecureSourceManagerInstanceIamBinding;
export const SecureSourceManagerInstanceIamBinding: typeof import("./secureSourceManagerInstanceIamBinding").SecureSourceManagerInstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["SecureSourceManagerInstanceIamBinding"], () => require("./secureSourceManagerInstanceIamBinding"));

export { SecureSourceManagerInstanceIamMemberArgs, SecureSourceManagerInstanceIamMemberState } from "./secureSourceManagerInstanceIamMember";
export type SecureSourceManagerInstanceIamMember = import("./secureSourceManagerInstanceIamMember").SecureSourceManagerInstanceIamMember;
export const SecureSourceManagerInstanceIamMember: typeof import("./secureSourceManagerInstanceIamMember").SecureSourceManagerInstanceIamMember = null as any;
utilities.lazyLoad(exports, ["SecureSourceManagerInstanceIamMember"], () => require("./secureSourceManagerInstanceIamMember"));

export { SecureSourceManagerInstanceIamPolicyArgs, SecureSourceManagerInstanceIamPolicyState } from "./secureSourceManagerInstanceIamPolicy";
export type SecureSourceManagerInstanceIamPolicy = import("./secureSourceManagerInstanceIamPolicy").SecureSourceManagerInstanceIamPolicy;
export const SecureSourceManagerInstanceIamPolicy: typeof import("./secureSourceManagerInstanceIamPolicy").SecureSourceManagerInstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["SecureSourceManagerInstanceIamPolicy"], () => require("./secureSourceManagerInstanceIamPolicy"));

export { SecureSourceManagerRepositoryArgs, SecureSourceManagerRepositoryState } from "./secureSourceManagerRepository";
export type SecureSourceManagerRepository = import("./secureSourceManagerRepository").SecureSourceManagerRepository;
export const SecureSourceManagerRepository: typeof import("./secureSourceManagerRepository").SecureSourceManagerRepository = null as any;
utilities.lazyLoad(exports, ["SecureSourceManagerRepository"], () => require("./secureSourceManagerRepository"));

export { SecureSourceManagerRepositoryIamBindingArgs, SecureSourceManagerRepositoryIamBindingState } from "./secureSourceManagerRepositoryIamBinding";
export type SecureSourceManagerRepositoryIamBinding = import("./secureSourceManagerRepositoryIamBinding").SecureSourceManagerRepositoryIamBinding;
export const SecureSourceManagerRepositoryIamBinding: typeof import("./secureSourceManagerRepositoryIamBinding").SecureSourceManagerRepositoryIamBinding = null as any;
utilities.lazyLoad(exports, ["SecureSourceManagerRepositoryIamBinding"], () => require("./secureSourceManagerRepositoryIamBinding"));

export { SecureSourceManagerRepositoryIamMemberArgs, SecureSourceManagerRepositoryIamMemberState } from "./secureSourceManagerRepositoryIamMember";
export type SecureSourceManagerRepositoryIamMember = import("./secureSourceManagerRepositoryIamMember").SecureSourceManagerRepositoryIamMember;
export const SecureSourceManagerRepositoryIamMember: typeof import("./secureSourceManagerRepositoryIamMember").SecureSourceManagerRepositoryIamMember = null as any;
utilities.lazyLoad(exports, ["SecureSourceManagerRepositoryIamMember"], () => require("./secureSourceManagerRepositoryIamMember"));

export { SecureSourceManagerRepositoryIamPolicyArgs, SecureSourceManagerRepositoryIamPolicyState } from "./secureSourceManagerRepositoryIamPolicy";
export type SecureSourceManagerRepositoryIamPolicy = import("./secureSourceManagerRepositoryIamPolicy").SecureSourceManagerRepositoryIamPolicy;
export const SecureSourceManagerRepositoryIamPolicy: typeof import("./secureSourceManagerRepositoryIamPolicy").SecureSourceManagerRepositoryIamPolicy = null as any;
utilities.lazyLoad(exports, ["SecureSourceManagerRepositoryIamPolicy"], () => require("./secureSourceManagerRepositoryIamPolicy"));

export { SecurityScannerScanConfigArgs, SecurityScannerScanConfigState } from "./securityScannerScanConfig";
export type SecurityScannerScanConfig = import("./securityScannerScanConfig").SecurityScannerScanConfig;
export const SecurityScannerScanConfig: typeof import("./securityScannerScanConfig").SecurityScannerScanConfig = null as any;
utilities.lazyLoad(exports, ["SecurityScannerScanConfig"], () => require("./securityScannerScanConfig"));

export { SecurityposturePostureArgs, SecurityposturePostureState } from "./securityposturePosture";
export type SecurityposturePosture = import("./securityposturePosture").SecurityposturePosture;
export const SecurityposturePosture: typeof import("./securityposturePosture").SecurityposturePosture = null as any;
utilities.lazyLoad(exports, ["SecurityposturePosture"], () => require("./securityposturePosture"));

export { SecurityposturePostureDeploymentArgs, SecurityposturePostureDeploymentState } from "./securityposturePostureDeployment";
export type SecurityposturePostureDeployment = import("./securityposturePostureDeployment").SecurityposturePostureDeployment;
export const SecurityposturePostureDeployment: typeof import("./securityposturePostureDeployment").SecurityposturePostureDeployment = null as any;
utilities.lazyLoad(exports, ["SecurityposturePostureDeployment"], () => require("./securityposturePostureDeployment"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { ServiceAccountIamBindingArgs, ServiceAccountIamBindingState } from "./serviceAccountIamBinding";
export type ServiceAccountIamBinding = import("./serviceAccountIamBinding").ServiceAccountIamBinding;
export const ServiceAccountIamBinding: typeof import("./serviceAccountIamBinding").ServiceAccountIamBinding = null as any;
utilities.lazyLoad(exports, ["ServiceAccountIamBinding"], () => require("./serviceAccountIamBinding"));

export { ServiceAccountIamMemberArgs, ServiceAccountIamMemberState } from "./serviceAccountIamMember";
export type ServiceAccountIamMember = import("./serviceAccountIamMember").ServiceAccountIamMember;
export const ServiceAccountIamMember: typeof import("./serviceAccountIamMember").ServiceAccountIamMember = null as any;
utilities.lazyLoad(exports, ["ServiceAccountIamMember"], () => require("./serviceAccountIamMember"));

export { ServiceAccountIamPolicyArgs, ServiceAccountIamPolicyState } from "./serviceAccountIamPolicy";
export type ServiceAccountIamPolicy = import("./serviceAccountIamPolicy").ServiceAccountIamPolicy;
export const ServiceAccountIamPolicy: typeof import("./serviceAccountIamPolicy").ServiceAccountIamPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceAccountIamPolicy"], () => require("./serviceAccountIamPolicy"));

export { ServiceAccountKeyArgs, ServiceAccountKeyState } from "./serviceAccountKey";
export type ServiceAccountKey = import("./serviceAccountKey").ServiceAccountKey;
export const ServiceAccountKey: typeof import("./serviceAccountKey").ServiceAccountKey = null as any;
utilities.lazyLoad(exports, ["ServiceAccountKey"], () => require("./serviceAccountKey"));

export { ServiceDirectoryEndpointArgs, ServiceDirectoryEndpointState } from "./serviceDirectoryEndpoint";
export type ServiceDirectoryEndpoint = import("./serviceDirectoryEndpoint").ServiceDirectoryEndpoint;
export const ServiceDirectoryEndpoint: typeof import("./serviceDirectoryEndpoint").ServiceDirectoryEndpoint = null as any;
utilities.lazyLoad(exports, ["ServiceDirectoryEndpoint"], () => require("./serviceDirectoryEndpoint"));

export { ServiceDirectoryNamespaceArgs, ServiceDirectoryNamespaceState } from "./serviceDirectoryNamespace";
export type ServiceDirectoryNamespace = import("./serviceDirectoryNamespace").ServiceDirectoryNamespace;
export const ServiceDirectoryNamespace: typeof import("./serviceDirectoryNamespace").ServiceDirectoryNamespace = null as any;
utilities.lazyLoad(exports, ["ServiceDirectoryNamespace"], () => require("./serviceDirectoryNamespace"));

export { ServiceDirectoryNamespaceIamBindingArgs, ServiceDirectoryNamespaceIamBindingState } from "./serviceDirectoryNamespaceIamBinding";
export type ServiceDirectoryNamespaceIamBinding = import("./serviceDirectoryNamespaceIamBinding").ServiceDirectoryNamespaceIamBinding;
export const ServiceDirectoryNamespaceIamBinding: typeof import("./serviceDirectoryNamespaceIamBinding").ServiceDirectoryNamespaceIamBinding = null as any;
utilities.lazyLoad(exports, ["ServiceDirectoryNamespaceIamBinding"], () => require("./serviceDirectoryNamespaceIamBinding"));

export { ServiceDirectoryNamespaceIamMemberArgs, ServiceDirectoryNamespaceIamMemberState } from "./serviceDirectoryNamespaceIamMember";
export type ServiceDirectoryNamespaceIamMember = import("./serviceDirectoryNamespaceIamMember").ServiceDirectoryNamespaceIamMember;
export const ServiceDirectoryNamespaceIamMember: typeof import("./serviceDirectoryNamespaceIamMember").ServiceDirectoryNamespaceIamMember = null as any;
utilities.lazyLoad(exports, ["ServiceDirectoryNamespaceIamMember"], () => require("./serviceDirectoryNamespaceIamMember"));

export { ServiceDirectoryNamespaceIamPolicyArgs, ServiceDirectoryNamespaceIamPolicyState } from "./serviceDirectoryNamespaceIamPolicy";
export type ServiceDirectoryNamespaceIamPolicy = import("./serviceDirectoryNamespaceIamPolicy").ServiceDirectoryNamespaceIamPolicy;
export const ServiceDirectoryNamespaceIamPolicy: typeof import("./serviceDirectoryNamespaceIamPolicy").ServiceDirectoryNamespaceIamPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceDirectoryNamespaceIamPolicy"], () => require("./serviceDirectoryNamespaceIamPolicy"));

export { ServiceDirectoryServiceArgs, ServiceDirectoryServiceState } from "./serviceDirectoryService";
export type ServiceDirectoryService = import("./serviceDirectoryService").ServiceDirectoryService;
export const ServiceDirectoryService: typeof import("./serviceDirectoryService").ServiceDirectoryService = null as any;
utilities.lazyLoad(exports, ["ServiceDirectoryService"], () => require("./serviceDirectoryService"));

export { ServiceDirectoryServiceIamBindingArgs, ServiceDirectoryServiceIamBindingState } from "./serviceDirectoryServiceIamBinding";
export type ServiceDirectoryServiceIamBinding = import("./serviceDirectoryServiceIamBinding").ServiceDirectoryServiceIamBinding;
export const ServiceDirectoryServiceIamBinding: typeof import("./serviceDirectoryServiceIamBinding").ServiceDirectoryServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["ServiceDirectoryServiceIamBinding"], () => require("./serviceDirectoryServiceIamBinding"));

export { ServiceDirectoryServiceIamMemberArgs, ServiceDirectoryServiceIamMemberState } from "./serviceDirectoryServiceIamMember";
export type ServiceDirectoryServiceIamMember = import("./serviceDirectoryServiceIamMember").ServiceDirectoryServiceIamMember;
export const ServiceDirectoryServiceIamMember: typeof import("./serviceDirectoryServiceIamMember").ServiceDirectoryServiceIamMember = null as any;
utilities.lazyLoad(exports, ["ServiceDirectoryServiceIamMember"], () => require("./serviceDirectoryServiceIamMember"));

export { ServiceDirectoryServiceIamPolicyArgs, ServiceDirectoryServiceIamPolicyState } from "./serviceDirectoryServiceIamPolicy";
export type ServiceDirectoryServiceIamPolicy = import("./serviceDirectoryServiceIamPolicy").ServiceDirectoryServiceIamPolicy;
export const ServiceDirectoryServiceIamPolicy: typeof import("./serviceDirectoryServiceIamPolicy").ServiceDirectoryServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceDirectoryServiceIamPolicy"], () => require("./serviceDirectoryServiceIamPolicy"));

export { ServiceNetworkingConnectionArgs, ServiceNetworkingConnectionState } from "./serviceNetworkingConnection";
export type ServiceNetworkingConnection = import("./serviceNetworkingConnection").ServiceNetworkingConnection;
export const ServiceNetworkingConnection: typeof import("./serviceNetworkingConnection").ServiceNetworkingConnection = null as any;
utilities.lazyLoad(exports, ["ServiceNetworkingConnection"], () => require("./serviceNetworkingConnection"));

export { ServiceNetworkingPeeredDnsDomainArgs, ServiceNetworkingPeeredDnsDomainState } from "./serviceNetworkingPeeredDnsDomain";
export type ServiceNetworkingPeeredDnsDomain = import("./serviceNetworkingPeeredDnsDomain").ServiceNetworkingPeeredDnsDomain;
export const ServiceNetworkingPeeredDnsDomain: typeof import("./serviceNetworkingPeeredDnsDomain").ServiceNetworkingPeeredDnsDomain = null as any;
utilities.lazyLoad(exports, ["ServiceNetworkingPeeredDnsDomain"], () => require("./serviceNetworkingPeeredDnsDomain"));

export { ServiceNetworkingVpcServiceControlsArgs, ServiceNetworkingVpcServiceControlsState } from "./serviceNetworkingVpcServiceControls";
export type ServiceNetworkingVpcServiceControls = import("./serviceNetworkingVpcServiceControls").ServiceNetworkingVpcServiceControls;
export const ServiceNetworkingVpcServiceControls: typeof import("./serviceNetworkingVpcServiceControls").ServiceNetworkingVpcServiceControls = null as any;
utilities.lazyLoad(exports, ["ServiceNetworkingVpcServiceControls"], () => require("./serviceNetworkingVpcServiceControls"));

export { ServiceUsageConsumerQuotaOverrideArgs, ServiceUsageConsumerQuotaOverrideState } from "./serviceUsageConsumerQuotaOverride";
export type ServiceUsageConsumerQuotaOverride = import("./serviceUsageConsumerQuotaOverride").ServiceUsageConsumerQuotaOverride;
export const ServiceUsageConsumerQuotaOverride: typeof import("./serviceUsageConsumerQuotaOverride").ServiceUsageConsumerQuotaOverride = null as any;
utilities.lazyLoad(exports, ["ServiceUsageConsumerQuotaOverride"], () => require("./serviceUsageConsumerQuotaOverride"));

export { SourcerepoRepositoryArgs, SourcerepoRepositoryState } from "./sourcerepoRepository";
export type SourcerepoRepository = import("./sourcerepoRepository").SourcerepoRepository;
export const SourcerepoRepository: typeof import("./sourcerepoRepository").SourcerepoRepository = null as any;
utilities.lazyLoad(exports, ["SourcerepoRepository"], () => require("./sourcerepoRepository"));

export { SourcerepoRepositoryIamBindingArgs, SourcerepoRepositoryIamBindingState } from "./sourcerepoRepositoryIamBinding";
export type SourcerepoRepositoryIamBinding = import("./sourcerepoRepositoryIamBinding").SourcerepoRepositoryIamBinding;
export const SourcerepoRepositoryIamBinding: typeof import("./sourcerepoRepositoryIamBinding").SourcerepoRepositoryIamBinding = null as any;
utilities.lazyLoad(exports, ["SourcerepoRepositoryIamBinding"], () => require("./sourcerepoRepositoryIamBinding"));

export { SourcerepoRepositoryIamMemberArgs, SourcerepoRepositoryIamMemberState } from "./sourcerepoRepositoryIamMember";
export type SourcerepoRepositoryIamMember = import("./sourcerepoRepositoryIamMember").SourcerepoRepositoryIamMember;
export const SourcerepoRepositoryIamMember: typeof import("./sourcerepoRepositoryIamMember").SourcerepoRepositoryIamMember = null as any;
utilities.lazyLoad(exports, ["SourcerepoRepositoryIamMember"], () => require("./sourcerepoRepositoryIamMember"));

export { SourcerepoRepositoryIamPolicyArgs, SourcerepoRepositoryIamPolicyState } from "./sourcerepoRepositoryIamPolicy";
export type SourcerepoRepositoryIamPolicy = import("./sourcerepoRepositoryIamPolicy").SourcerepoRepositoryIamPolicy;
export const SourcerepoRepositoryIamPolicy: typeof import("./sourcerepoRepositoryIamPolicy").SourcerepoRepositoryIamPolicy = null as any;
utilities.lazyLoad(exports, ["SourcerepoRepositoryIamPolicy"], () => require("./sourcerepoRepositoryIamPolicy"));

export { SpannerDatabaseArgs, SpannerDatabaseState } from "./spannerDatabase";
export type SpannerDatabase = import("./spannerDatabase").SpannerDatabase;
export const SpannerDatabase: typeof import("./spannerDatabase").SpannerDatabase = null as any;
utilities.lazyLoad(exports, ["SpannerDatabase"], () => require("./spannerDatabase"));

export { SpannerDatabaseIamBindingArgs, SpannerDatabaseIamBindingState } from "./spannerDatabaseIamBinding";
export type SpannerDatabaseIamBinding = import("./spannerDatabaseIamBinding").SpannerDatabaseIamBinding;
export const SpannerDatabaseIamBinding: typeof import("./spannerDatabaseIamBinding").SpannerDatabaseIamBinding = null as any;
utilities.lazyLoad(exports, ["SpannerDatabaseIamBinding"], () => require("./spannerDatabaseIamBinding"));

export { SpannerDatabaseIamMemberArgs, SpannerDatabaseIamMemberState } from "./spannerDatabaseIamMember";
export type SpannerDatabaseIamMember = import("./spannerDatabaseIamMember").SpannerDatabaseIamMember;
export const SpannerDatabaseIamMember: typeof import("./spannerDatabaseIamMember").SpannerDatabaseIamMember = null as any;
utilities.lazyLoad(exports, ["SpannerDatabaseIamMember"], () => require("./spannerDatabaseIamMember"));

export { SpannerDatabaseIamPolicyArgs, SpannerDatabaseIamPolicyState } from "./spannerDatabaseIamPolicy";
export type SpannerDatabaseIamPolicy = import("./spannerDatabaseIamPolicy").SpannerDatabaseIamPolicy;
export const SpannerDatabaseIamPolicy: typeof import("./spannerDatabaseIamPolicy").SpannerDatabaseIamPolicy = null as any;
utilities.lazyLoad(exports, ["SpannerDatabaseIamPolicy"], () => require("./spannerDatabaseIamPolicy"));

export { SpannerInstanceArgs, SpannerInstanceState } from "./spannerInstance";
export type SpannerInstance = import("./spannerInstance").SpannerInstance;
export const SpannerInstance: typeof import("./spannerInstance").SpannerInstance = null as any;
utilities.lazyLoad(exports, ["SpannerInstance"], () => require("./spannerInstance"));

export { SpannerInstanceConfigArgs, SpannerInstanceConfigState } from "./spannerInstanceConfig";
export type SpannerInstanceConfig = import("./spannerInstanceConfig").SpannerInstanceConfig;
export const SpannerInstanceConfig: typeof import("./spannerInstanceConfig").SpannerInstanceConfig = null as any;
utilities.lazyLoad(exports, ["SpannerInstanceConfig"], () => require("./spannerInstanceConfig"));

export { SpannerInstanceIamBindingArgs, SpannerInstanceIamBindingState } from "./spannerInstanceIamBinding";
export type SpannerInstanceIamBinding = import("./spannerInstanceIamBinding").SpannerInstanceIamBinding;
export const SpannerInstanceIamBinding: typeof import("./spannerInstanceIamBinding").SpannerInstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["SpannerInstanceIamBinding"], () => require("./spannerInstanceIamBinding"));

export { SpannerInstanceIamMemberArgs, SpannerInstanceIamMemberState } from "./spannerInstanceIamMember";
export type SpannerInstanceIamMember = import("./spannerInstanceIamMember").SpannerInstanceIamMember;
export const SpannerInstanceIamMember: typeof import("./spannerInstanceIamMember").SpannerInstanceIamMember = null as any;
utilities.lazyLoad(exports, ["SpannerInstanceIamMember"], () => require("./spannerInstanceIamMember"));

export { SpannerInstanceIamPolicyArgs, SpannerInstanceIamPolicyState } from "./spannerInstanceIamPolicy";
export type SpannerInstanceIamPolicy = import("./spannerInstanceIamPolicy").SpannerInstanceIamPolicy;
export const SpannerInstanceIamPolicy: typeof import("./spannerInstanceIamPolicy").SpannerInstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["SpannerInstanceIamPolicy"], () => require("./spannerInstanceIamPolicy"));

export { SqlDatabaseArgs, SqlDatabaseState } from "./sqlDatabase";
export type SqlDatabase = import("./sqlDatabase").SqlDatabase;
export const SqlDatabase: typeof import("./sqlDatabase").SqlDatabase = null as any;
utilities.lazyLoad(exports, ["SqlDatabase"], () => require("./sqlDatabase"));

export { SqlDatabaseInstanceArgs, SqlDatabaseInstanceState } from "./sqlDatabaseInstance";
export type SqlDatabaseInstance = import("./sqlDatabaseInstance").SqlDatabaseInstance;
export const SqlDatabaseInstance: typeof import("./sqlDatabaseInstance").SqlDatabaseInstance = null as any;
utilities.lazyLoad(exports, ["SqlDatabaseInstance"], () => require("./sqlDatabaseInstance"));

export { SqlSourceRepresentationInstanceArgs, SqlSourceRepresentationInstanceState } from "./sqlSourceRepresentationInstance";
export type SqlSourceRepresentationInstance = import("./sqlSourceRepresentationInstance").SqlSourceRepresentationInstance;
export const SqlSourceRepresentationInstance: typeof import("./sqlSourceRepresentationInstance").SqlSourceRepresentationInstance = null as any;
utilities.lazyLoad(exports, ["SqlSourceRepresentationInstance"], () => require("./sqlSourceRepresentationInstance"));

export { SqlSslCertArgs, SqlSslCertState } from "./sqlSslCert";
export type SqlSslCert = import("./sqlSslCert").SqlSslCert;
export const SqlSslCert: typeof import("./sqlSslCert").SqlSslCert = null as any;
utilities.lazyLoad(exports, ["SqlSslCert"], () => require("./sqlSslCert"));

export { SqlUserArgs, SqlUserState } from "./sqlUser";
export type SqlUser = import("./sqlUser").SqlUser;
export const SqlUser: typeof import("./sqlUser").SqlUser = null as any;
utilities.lazyLoad(exports, ["SqlUser"], () => require("./sqlUser"));

export { StorageBucketArgs, StorageBucketState } from "./storageBucket";
export type StorageBucket = import("./storageBucket").StorageBucket;
export const StorageBucket: typeof import("./storageBucket").StorageBucket = null as any;
utilities.lazyLoad(exports, ["StorageBucket"], () => require("./storageBucket"));

export { StorageBucketAccessControlArgs, StorageBucketAccessControlState } from "./storageBucketAccessControl";
export type StorageBucketAccessControl = import("./storageBucketAccessControl").StorageBucketAccessControl;
export const StorageBucketAccessControl: typeof import("./storageBucketAccessControl").StorageBucketAccessControl = null as any;
utilities.lazyLoad(exports, ["StorageBucketAccessControl"], () => require("./storageBucketAccessControl"));

export { StorageBucketAclArgs, StorageBucketAclState } from "./storageBucketAcl";
export type StorageBucketAcl = import("./storageBucketAcl").StorageBucketAcl;
export const StorageBucketAcl: typeof import("./storageBucketAcl").StorageBucketAcl = null as any;
utilities.lazyLoad(exports, ["StorageBucketAcl"], () => require("./storageBucketAcl"));

export { StorageBucketIamBindingArgs, StorageBucketIamBindingState } from "./storageBucketIamBinding";
export type StorageBucketIamBinding = import("./storageBucketIamBinding").StorageBucketIamBinding;
export const StorageBucketIamBinding: typeof import("./storageBucketIamBinding").StorageBucketIamBinding = null as any;
utilities.lazyLoad(exports, ["StorageBucketIamBinding"], () => require("./storageBucketIamBinding"));

export { StorageBucketIamMemberArgs, StorageBucketIamMemberState } from "./storageBucketIamMember";
export type StorageBucketIamMember = import("./storageBucketIamMember").StorageBucketIamMember;
export const StorageBucketIamMember: typeof import("./storageBucketIamMember").StorageBucketIamMember = null as any;
utilities.lazyLoad(exports, ["StorageBucketIamMember"], () => require("./storageBucketIamMember"));

export { StorageBucketIamPolicyArgs, StorageBucketIamPolicyState } from "./storageBucketIamPolicy";
export type StorageBucketIamPolicy = import("./storageBucketIamPolicy").StorageBucketIamPolicy;
export const StorageBucketIamPolicy: typeof import("./storageBucketIamPolicy").StorageBucketIamPolicy = null as any;
utilities.lazyLoad(exports, ["StorageBucketIamPolicy"], () => require("./storageBucketIamPolicy"));

export { StorageBucketObjectArgs, StorageBucketObjectState } from "./storageBucketObject";
export type StorageBucketObject = import("./storageBucketObject").StorageBucketObject;
export const StorageBucketObject: typeof import("./storageBucketObject").StorageBucketObject = null as any;
utilities.lazyLoad(exports, ["StorageBucketObject"], () => require("./storageBucketObject"));

export { StorageDefaultObjectAccessControlArgs, StorageDefaultObjectAccessControlState } from "./storageDefaultObjectAccessControl";
export type StorageDefaultObjectAccessControl = import("./storageDefaultObjectAccessControl").StorageDefaultObjectAccessControl;
export const StorageDefaultObjectAccessControl: typeof import("./storageDefaultObjectAccessControl").StorageDefaultObjectAccessControl = null as any;
utilities.lazyLoad(exports, ["StorageDefaultObjectAccessControl"], () => require("./storageDefaultObjectAccessControl"));

export { StorageDefaultObjectAclArgs, StorageDefaultObjectAclState } from "./storageDefaultObjectAcl";
export type StorageDefaultObjectAcl = import("./storageDefaultObjectAcl").StorageDefaultObjectAcl;
export const StorageDefaultObjectAcl: typeof import("./storageDefaultObjectAcl").StorageDefaultObjectAcl = null as any;
utilities.lazyLoad(exports, ["StorageDefaultObjectAcl"], () => require("./storageDefaultObjectAcl"));

export { StorageHmacKeyArgs, StorageHmacKeyState } from "./storageHmacKey";
export type StorageHmacKey = import("./storageHmacKey").StorageHmacKey;
export const StorageHmacKey: typeof import("./storageHmacKey").StorageHmacKey = null as any;
utilities.lazyLoad(exports, ["StorageHmacKey"], () => require("./storageHmacKey"));

export { StorageInsightsReportConfigArgs, StorageInsightsReportConfigState } from "./storageInsightsReportConfig";
export type StorageInsightsReportConfig = import("./storageInsightsReportConfig").StorageInsightsReportConfig;
export const StorageInsightsReportConfig: typeof import("./storageInsightsReportConfig").StorageInsightsReportConfig = null as any;
utilities.lazyLoad(exports, ["StorageInsightsReportConfig"], () => require("./storageInsightsReportConfig"));

export { StorageManagedFolderArgs, StorageManagedFolderState } from "./storageManagedFolder";
export type StorageManagedFolder = import("./storageManagedFolder").StorageManagedFolder;
export const StorageManagedFolder: typeof import("./storageManagedFolder").StorageManagedFolder = null as any;
utilities.lazyLoad(exports, ["StorageManagedFolder"], () => require("./storageManagedFolder"));

export { StorageManagedFolderIamBindingArgs, StorageManagedFolderIamBindingState } from "./storageManagedFolderIamBinding";
export type StorageManagedFolderIamBinding = import("./storageManagedFolderIamBinding").StorageManagedFolderIamBinding;
export const StorageManagedFolderIamBinding: typeof import("./storageManagedFolderIamBinding").StorageManagedFolderIamBinding = null as any;
utilities.lazyLoad(exports, ["StorageManagedFolderIamBinding"], () => require("./storageManagedFolderIamBinding"));

export { StorageManagedFolderIamMemberArgs, StorageManagedFolderIamMemberState } from "./storageManagedFolderIamMember";
export type StorageManagedFolderIamMember = import("./storageManagedFolderIamMember").StorageManagedFolderIamMember;
export const StorageManagedFolderIamMember: typeof import("./storageManagedFolderIamMember").StorageManagedFolderIamMember = null as any;
utilities.lazyLoad(exports, ["StorageManagedFolderIamMember"], () => require("./storageManagedFolderIamMember"));

export { StorageManagedFolderIamPolicyArgs, StorageManagedFolderIamPolicyState } from "./storageManagedFolderIamPolicy";
export type StorageManagedFolderIamPolicy = import("./storageManagedFolderIamPolicy").StorageManagedFolderIamPolicy;
export const StorageManagedFolderIamPolicy: typeof import("./storageManagedFolderIamPolicy").StorageManagedFolderIamPolicy = null as any;
utilities.lazyLoad(exports, ["StorageManagedFolderIamPolicy"], () => require("./storageManagedFolderIamPolicy"));

export { StorageNotificationArgs, StorageNotificationState } from "./storageNotification";
export type StorageNotification = import("./storageNotification").StorageNotification;
export const StorageNotification: typeof import("./storageNotification").StorageNotification = null as any;
utilities.lazyLoad(exports, ["StorageNotification"], () => require("./storageNotification"));

export { StorageObjectAccessControlArgs, StorageObjectAccessControlState } from "./storageObjectAccessControl";
export type StorageObjectAccessControl = import("./storageObjectAccessControl").StorageObjectAccessControl;
export const StorageObjectAccessControl: typeof import("./storageObjectAccessControl").StorageObjectAccessControl = null as any;
utilities.lazyLoad(exports, ["StorageObjectAccessControl"], () => require("./storageObjectAccessControl"));

export { StorageObjectAclArgs, StorageObjectAclState } from "./storageObjectAcl";
export type StorageObjectAcl = import("./storageObjectAcl").StorageObjectAcl;
export const StorageObjectAcl: typeof import("./storageObjectAcl").StorageObjectAcl = null as any;
utilities.lazyLoad(exports, ["StorageObjectAcl"], () => require("./storageObjectAcl"));

export { StorageTransferAgentPoolArgs, StorageTransferAgentPoolState } from "./storageTransferAgentPool";
export type StorageTransferAgentPool = import("./storageTransferAgentPool").StorageTransferAgentPool;
export const StorageTransferAgentPool: typeof import("./storageTransferAgentPool").StorageTransferAgentPool = null as any;
utilities.lazyLoad(exports, ["StorageTransferAgentPool"], () => require("./storageTransferAgentPool"));

export { StorageTransferJobArgs, StorageTransferJobState } from "./storageTransferJob";
export type StorageTransferJob = import("./storageTransferJob").StorageTransferJob;
export const StorageTransferJob: typeof import("./storageTransferJob").StorageTransferJob = null as any;
utilities.lazyLoad(exports, ["StorageTransferJob"], () => require("./storageTransferJob"));

export { TagsLocationTagBindingArgs, TagsLocationTagBindingState } from "./tagsLocationTagBinding";
export type TagsLocationTagBinding = import("./tagsLocationTagBinding").TagsLocationTagBinding;
export const TagsLocationTagBinding: typeof import("./tagsLocationTagBinding").TagsLocationTagBinding = null as any;
utilities.lazyLoad(exports, ["TagsLocationTagBinding"], () => require("./tagsLocationTagBinding"));

export { TagsTagBindingArgs, TagsTagBindingState } from "./tagsTagBinding";
export type TagsTagBinding = import("./tagsTagBinding").TagsTagBinding;
export const TagsTagBinding: typeof import("./tagsTagBinding").TagsTagBinding = null as any;
utilities.lazyLoad(exports, ["TagsTagBinding"], () => require("./tagsTagBinding"));

export { TagsTagKeyArgs, TagsTagKeyState } from "./tagsTagKey";
export type TagsTagKey = import("./tagsTagKey").TagsTagKey;
export const TagsTagKey: typeof import("./tagsTagKey").TagsTagKey = null as any;
utilities.lazyLoad(exports, ["TagsTagKey"], () => require("./tagsTagKey"));

export { TagsTagKeyIamBindingArgs, TagsTagKeyIamBindingState } from "./tagsTagKeyIamBinding";
export type TagsTagKeyIamBinding = import("./tagsTagKeyIamBinding").TagsTagKeyIamBinding;
export const TagsTagKeyIamBinding: typeof import("./tagsTagKeyIamBinding").TagsTagKeyIamBinding = null as any;
utilities.lazyLoad(exports, ["TagsTagKeyIamBinding"], () => require("./tagsTagKeyIamBinding"));

export { TagsTagKeyIamMemberArgs, TagsTagKeyIamMemberState } from "./tagsTagKeyIamMember";
export type TagsTagKeyIamMember = import("./tagsTagKeyIamMember").TagsTagKeyIamMember;
export const TagsTagKeyIamMember: typeof import("./tagsTagKeyIamMember").TagsTagKeyIamMember = null as any;
utilities.lazyLoad(exports, ["TagsTagKeyIamMember"], () => require("./tagsTagKeyIamMember"));

export { TagsTagKeyIamPolicyArgs, TagsTagKeyIamPolicyState } from "./tagsTagKeyIamPolicy";
export type TagsTagKeyIamPolicy = import("./tagsTagKeyIamPolicy").TagsTagKeyIamPolicy;
export const TagsTagKeyIamPolicy: typeof import("./tagsTagKeyIamPolicy").TagsTagKeyIamPolicy = null as any;
utilities.lazyLoad(exports, ["TagsTagKeyIamPolicy"], () => require("./tagsTagKeyIamPolicy"));

export { TagsTagValueArgs, TagsTagValueState } from "./tagsTagValue";
export type TagsTagValue = import("./tagsTagValue").TagsTagValue;
export const TagsTagValue: typeof import("./tagsTagValue").TagsTagValue = null as any;
utilities.lazyLoad(exports, ["TagsTagValue"], () => require("./tagsTagValue"));

export { TagsTagValueIamBindingArgs, TagsTagValueIamBindingState } from "./tagsTagValueIamBinding";
export type TagsTagValueIamBinding = import("./tagsTagValueIamBinding").TagsTagValueIamBinding;
export const TagsTagValueIamBinding: typeof import("./tagsTagValueIamBinding").TagsTagValueIamBinding = null as any;
utilities.lazyLoad(exports, ["TagsTagValueIamBinding"], () => require("./tagsTagValueIamBinding"));

export { TagsTagValueIamMemberArgs, TagsTagValueIamMemberState } from "./tagsTagValueIamMember";
export type TagsTagValueIamMember = import("./tagsTagValueIamMember").TagsTagValueIamMember;
export const TagsTagValueIamMember: typeof import("./tagsTagValueIamMember").TagsTagValueIamMember = null as any;
utilities.lazyLoad(exports, ["TagsTagValueIamMember"], () => require("./tagsTagValueIamMember"));

export { TagsTagValueIamPolicyArgs, TagsTagValueIamPolicyState } from "./tagsTagValueIamPolicy";
export type TagsTagValueIamPolicy = import("./tagsTagValueIamPolicy").TagsTagValueIamPolicy;
export const TagsTagValueIamPolicy: typeof import("./tagsTagValueIamPolicy").TagsTagValueIamPolicy = null as any;
utilities.lazyLoad(exports, ["TagsTagValueIamPolicy"], () => require("./tagsTagValueIamPolicy"));

export { TpuNodeArgs, TpuNodeState } from "./tpuNode";
export type TpuNode = import("./tpuNode").TpuNode;
export const TpuNode: typeof import("./tpuNode").TpuNode = null as any;
utilities.lazyLoad(exports, ["TpuNode"], () => require("./tpuNode"));

export { TpuV2VmArgs, TpuV2VmState } from "./tpuV2Vm";
export type TpuV2Vm = import("./tpuV2Vm").TpuV2Vm;
export const TpuV2Vm: typeof import("./tpuV2Vm").TpuV2Vm = null as any;
utilities.lazyLoad(exports, ["TpuV2Vm"], () => require("./tpuV2Vm"));

export { VertexAiDatasetArgs, VertexAiDatasetState } from "./vertexAiDataset";
export type VertexAiDataset = import("./vertexAiDataset").VertexAiDataset;
export const VertexAiDataset: typeof import("./vertexAiDataset").VertexAiDataset = null as any;
utilities.lazyLoad(exports, ["VertexAiDataset"], () => require("./vertexAiDataset"));

export { VertexAiDeploymentResourcePoolArgs, VertexAiDeploymentResourcePoolState } from "./vertexAiDeploymentResourcePool";
export type VertexAiDeploymentResourcePool = import("./vertexAiDeploymentResourcePool").VertexAiDeploymentResourcePool;
export const VertexAiDeploymentResourcePool: typeof import("./vertexAiDeploymentResourcePool").VertexAiDeploymentResourcePool = null as any;
utilities.lazyLoad(exports, ["VertexAiDeploymentResourcePool"], () => require("./vertexAiDeploymentResourcePool"));

export { VertexAiEndpointArgs, VertexAiEndpointState } from "./vertexAiEndpoint";
export type VertexAiEndpoint = import("./vertexAiEndpoint").VertexAiEndpoint;
export const VertexAiEndpoint: typeof import("./vertexAiEndpoint").VertexAiEndpoint = null as any;
utilities.lazyLoad(exports, ["VertexAiEndpoint"], () => require("./vertexAiEndpoint"));

export { VertexAiEndpointIamBindingArgs, VertexAiEndpointIamBindingState } from "./vertexAiEndpointIamBinding";
export type VertexAiEndpointIamBinding = import("./vertexAiEndpointIamBinding").VertexAiEndpointIamBinding;
export const VertexAiEndpointIamBinding: typeof import("./vertexAiEndpointIamBinding").VertexAiEndpointIamBinding = null as any;
utilities.lazyLoad(exports, ["VertexAiEndpointIamBinding"], () => require("./vertexAiEndpointIamBinding"));

export { VertexAiEndpointIamMemberArgs, VertexAiEndpointIamMemberState } from "./vertexAiEndpointIamMember";
export type VertexAiEndpointIamMember = import("./vertexAiEndpointIamMember").VertexAiEndpointIamMember;
export const VertexAiEndpointIamMember: typeof import("./vertexAiEndpointIamMember").VertexAiEndpointIamMember = null as any;
utilities.lazyLoad(exports, ["VertexAiEndpointIamMember"], () => require("./vertexAiEndpointIamMember"));

export { VertexAiEndpointIamPolicyArgs, VertexAiEndpointIamPolicyState } from "./vertexAiEndpointIamPolicy";
export type VertexAiEndpointIamPolicy = import("./vertexAiEndpointIamPolicy").VertexAiEndpointIamPolicy;
export const VertexAiEndpointIamPolicy: typeof import("./vertexAiEndpointIamPolicy").VertexAiEndpointIamPolicy = null as any;
utilities.lazyLoad(exports, ["VertexAiEndpointIamPolicy"], () => require("./vertexAiEndpointIamPolicy"));

export { VertexAiFeatureGroupArgs, VertexAiFeatureGroupState } from "./vertexAiFeatureGroup";
export type VertexAiFeatureGroup = import("./vertexAiFeatureGroup").VertexAiFeatureGroup;
export const VertexAiFeatureGroup: typeof import("./vertexAiFeatureGroup").VertexAiFeatureGroup = null as any;
utilities.lazyLoad(exports, ["VertexAiFeatureGroup"], () => require("./vertexAiFeatureGroup"));

export { VertexAiFeatureGroupFeatureArgs, VertexAiFeatureGroupFeatureState } from "./vertexAiFeatureGroupFeature";
export type VertexAiFeatureGroupFeature = import("./vertexAiFeatureGroupFeature").VertexAiFeatureGroupFeature;
export const VertexAiFeatureGroupFeature: typeof import("./vertexAiFeatureGroupFeature").VertexAiFeatureGroupFeature = null as any;
utilities.lazyLoad(exports, ["VertexAiFeatureGroupFeature"], () => require("./vertexAiFeatureGroupFeature"));

export { VertexAiFeatureOnlineStoreArgs, VertexAiFeatureOnlineStoreState } from "./vertexAiFeatureOnlineStore";
export type VertexAiFeatureOnlineStore = import("./vertexAiFeatureOnlineStore").VertexAiFeatureOnlineStore;
export const VertexAiFeatureOnlineStore: typeof import("./vertexAiFeatureOnlineStore").VertexAiFeatureOnlineStore = null as any;
utilities.lazyLoad(exports, ["VertexAiFeatureOnlineStore"], () => require("./vertexAiFeatureOnlineStore"));

export { VertexAiFeatureOnlineStoreFeatureviewArgs, VertexAiFeatureOnlineStoreFeatureviewState } from "./vertexAiFeatureOnlineStoreFeatureview";
export type VertexAiFeatureOnlineStoreFeatureview = import("./vertexAiFeatureOnlineStoreFeatureview").VertexAiFeatureOnlineStoreFeatureview;
export const VertexAiFeatureOnlineStoreFeatureview: typeof import("./vertexAiFeatureOnlineStoreFeatureview").VertexAiFeatureOnlineStoreFeatureview = null as any;
utilities.lazyLoad(exports, ["VertexAiFeatureOnlineStoreFeatureview"], () => require("./vertexAiFeatureOnlineStoreFeatureview"));

export { VertexAiFeaturestoreArgs, VertexAiFeaturestoreState } from "./vertexAiFeaturestore";
export type VertexAiFeaturestore = import("./vertexAiFeaturestore").VertexAiFeaturestore;
export const VertexAiFeaturestore: typeof import("./vertexAiFeaturestore").VertexAiFeaturestore = null as any;
utilities.lazyLoad(exports, ["VertexAiFeaturestore"], () => require("./vertexAiFeaturestore"));

export { VertexAiFeaturestoreEntitytypeArgs, VertexAiFeaturestoreEntitytypeState } from "./vertexAiFeaturestoreEntitytype";
export type VertexAiFeaturestoreEntitytype = import("./vertexAiFeaturestoreEntitytype").VertexAiFeaturestoreEntitytype;
export const VertexAiFeaturestoreEntitytype: typeof import("./vertexAiFeaturestoreEntitytype").VertexAiFeaturestoreEntitytype = null as any;
utilities.lazyLoad(exports, ["VertexAiFeaturestoreEntitytype"], () => require("./vertexAiFeaturestoreEntitytype"));

export { VertexAiFeaturestoreEntitytypeFeatureArgs, VertexAiFeaturestoreEntitytypeFeatureState } from "./vertexAiFeaturestoreEntitytypeFeature";
export type VertexAiFeaturestoreEntitytypeFeature = import("./vertexAiFeaturestoreEntitytypeFeature").VertexAiFeaturestoreEntitytypeFeature;
export const VertexAiFeaturestoreEntitytypeFeature: typeof import("./vertexAiFeaturestoreEntitytypeFeature").VertexAiFeaturestoreEntitytypeFeature = null as any;
utilities.lazyLoad(exports, ["VertexAiFeaturestoreEntitytypeFeature"], () => require("./vertexAiFeaturestoreEntitytypeFeature"));

export { VertexAiFeaturestoreEntitytypeIamBindingArgs, VertexAiFeaturestoreEntitytypeIamBindingState } from "./vertexAiFeaturestoreEntitytypeIamBinding";
export type VertexAiFeaturestoreEntitytypeIamBinding = import("./vertexAiFeaturestoreEntitytypeIamBinding").VertexAiFeaturestoreEntitytypeIamBinding;
export const VertexAiFeaturestoreEntitytypeIamBinding: typeof import("./vertexAiFeaturestoreEntitytypeIamBinding").VertexAiFeaturestoreEntitytypeIamBinding = null as any;
utilities.lazyLoad(exports, ["VertexAiFeaturestoreEntitytypeIamBinding"], () => require("./vertexAiFeaturestoreEntitytypeIamBinding"));

export { VertexAiFeaturestoreEntitytypeIamMemberArgs, VertexAiFeaturestoreEntitytypeIamMemberState } from "./vertexAiFeaturestoreEntitytypeIamMember";
export type VertexAiFeaturestoreEntitytypeIamMember = import("./vertexAiFeaturestoreEntitytypeIamMember").VertexAiFeaturestoreEntitytypeIamMember;
export const VertexAiFeaturestoreEntitytypeIamMember: typeof import("./vertexAiFeaturestoreEntitytypeIamMember").VertexAiFeaturestoreEntitytypeIamMember = null as any;
utilities.lazyLoad(exports, ["VertexAiFeaturestoreEntitytypeIamMember"], () => require("./vertexAiFeaturestoreEntitytypeIamMember"));

export { VertexAiFeaturestoreEntitytypeIamPolicyArgs, VertexAiFeaturestoreEntitytypeIamPolicyState } from "./vertexAiFeaturestoreEntitytypeIamPolicy";
export type VertexAiFeaturestoreEntitytypeIamPolicy = import("./vertexAiFeaturestoreEntitytypeIamPolicy").VertexAiFeaturestoreEntitytypeIamPolicy;
export const VertexAiFeaturestoreEntitytypeIamPolicy: typeof import("./vertexAiFeaturestoreEntitytypeIamPolicy").VertexAiFeaturestoreEntitytypeIamPolicy = null as any;
utilities.lazyLoad(exports, ["VertexAiFeaturestoreEntitytypeIamPolicy"], () => require("./vertexAiFeaturestoreEntitytypeIamPolicy"));

export { VertexAiFeaturestoreIamBindingArgs, VertexAiFeaturestoreIamBindingState } from "./vertexAiFeaturestoreIamBinding";
export type VertexAiFeaturestoreIamBinding = import("./vertexAiFeaturestoreIamBinding").VertexAiFeaturestoreIamBinding;
export const VertexAiFeaturestoreIamBinding: typeof import("./vertexAiFeaturestoreIamBinding").VertexAiFeaturestoreIamBinding = null as any;
utilities.lazyLoad(exports, ["VertexAiFeaturestoreIamBinding"], () => require("./vertexAiFeaturestoreIamBinding"));

export { VertexAiFeaturestoreIamMemberArgs, VertexAiFeaturestoreIamMemberState } from "./vertexAiFeaturestoreIamMember";
export type VertexAiFeaturestoreIamMember = import("./vertexAiFeaturestoreIamMember").VertexAiFeaturestoreIamMember;
export const VertexAiFeaturestoreIamMember: typeof import("./vertexAiFeaturestoreIamMember").VertexAiFeaturestoreIamMember = null as any;
utilities.lazyLoad(exports, ["VertexAiFeaturestoreIamMember"], () => require("./vertexAiFeaturestoreIamMember"));

export { VertexAiFeaturestoreIamPolicyArgs, VertexAiFeaturestoreIamPolicyState } from "./vertexAiFeaturestoreIamPolicy";
export type VertexAiFeaturestoreIamPolicy = import("./vertexAiFeaturestoreIamPolicy").VertexAiFeaturestoreIamPolicy;
export const VertexAiFeaturestoreIamPolicy: typeof import("./vertexAiFeaturestoreIamPolicy").VertexAiFeaturestoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["VertexAiFeaturestoreIamPolicy"], () => require("./vertexAiFeaturestoreIamPolicy"));

export { VertexAiIndexArgs, VertexAiIndexState } from "./vertexAiIndex";
export type VertexAiIndex = import("./vertexAiIndex").VertexAiIndex;
export const VertexAiIndex: typeof import("./vertexAiIndex").VertexAiIndex = null as any;
utilities.lazyLoad(exports, ["VertexAiIndex"], () => require("./vertexAiIndex"));

export { VertexAiIndexEndpointArgs, VertexAiIndexEndpointState } from "./vertexAiIndexEndpoint";
export type VertexAiIndexEndpoint = import("./vertexAiIndexEndpoint").VertexAiIndexEndpoint;
export const VertexAiIndexEndpoint: typeof import("./vertexAiIndexEndpoint").VertexAiIndexEndpoint = null as any;
utilities.lazyLoad(exports, ["VertexAiIndexEndpoint"], () => require("./vertexAiIndexEndpoint"));

export { VertexAiIndexEndpointDeployedIndexArgs, VertexAiIndexEndpointDeployedIndexState } from "./vertexAiIndexEndpointDeployedIndex";
export type VertexAiIndexEndpointDeployedIndex = import("./vertexAiIndexEndpointDeployedIndex").VertexAiIndexEndpointDeployedIndex;
export const VertexAiIndexEndpointDeployedIndex: typeof import("./vertexAiIndexEndpointDeployedIndex").VertexAiIndexEndpointDeployedIndex = null as any;
utilities.lazyLoad(exports, ["VertexAiIndexEndpointDeployedIndex"], () => require("./vertexAiIndexEndpointDeployedIndex"));

export { VertexAiMetadataStoreArgs, VertexAiMetadataStoreState } from "./vertexAiMetadataStore";
export type VertexAiMetadataStore = import("./vertexAiMetadataStore").VertexAiMetadataStore;
export const VertexAiMetadataStore: typeof import("./vertexAiMetadataStore").VertexAiMetadataStore = null as any;
utilities.lazyLoad(exports, ["VertexAiMetadataStore"], () => require("./vertexAiMetadataStore"));

export { VertexAiTensorboardArgs, VertexAiTensorboardState } from "./vertexAiTensorboard";
export type VertexAiTensorboard = import("./vertexAiTensorboard").VertexAiTensorboard;
export const VertexAiTensorboard: typeof import("./vertexAiTensorboard").VertexAiTensorboard = null as any;
utilities.lazyLoad(exports, ["VertexAiTensorboard"], () => require("./vertexAiTensorboard"));

export { VmwareengineClusterArgs, VmwareengineClusterState } from "./vmwareengineCluster";
export type VmwareengineCluster = import("./vmwareengineCluster").VmwareengineCluster;
export const VmwareengineCluster: typeof import("./vmwareengineCluster").VmwareengineCluster = null as any;
utilities.lazyLoad(exports, ["VmwareengineCluster"], () => require("./vmwareengineCluster"));

export { VmwareengineExternalAccessRuleArgs, VmwareengineExternalAccessRuleState } from "./vmwareengineExternalAccessRule";
export type VmwareengineExternalAccessRule = import("./vmwareengineExternalAccessRule").VmwareengineExternalAccessRule;
export const VmwareengineExternalAccessRule: typeof import("./vmwareengineExternalAccessRule").VmwareengineExternalAccessRule = null as any;
utilities.lazyLoad(exports, ["VmwareengineExternalAccessRule"], () => require("./vmwareengineExternalAccessRule"));

export { VmwareengineExternalAddressArgs, VmwareengineExternalAddressState } from "./vmwareengineExternalAddress";
export type VmwareengineExternalAddress = import("./vmwareengineExternalAddress").VmwareengineExternalAddress;
export const VmwareengineExternalAddress: typeof import("./vmwareengineExternalAddress").VmwareengineExternalAddress = null as any;
utilities.lazyLoad(exports, ["VmwareengineExternalAddress"], () => require("./vmwareengineExternalAddress"));

export { VmwareengineNetworkArgs, VmwareengineNetworkState } from "./vmwareengineNetwork";
export type VmwareengineNetwork = import("./vmwareengineNetwork").VmwareengineNetwork;
export const VmwareengineNetwork: typeof import("./vmwareengineNetwork").VmwareengineNetwork = null as any;
utilities.lazyLoad(exports, ["VmwareengineNetwork"], () => require("./vmwareengineNetwork"));

export { VmwareengineNetworkPeeringArgs, VmwareengineNetworkPeeringState } from "./vmwareengineNetworkPeering";
export type VmwareengineNetworkPeering = import("./vmwareengineNetworkPeering").VmwareengineNetworkPeering;
export const VmwareengineNetworkPeering: typeof import("./vmwareengineNetworkPeering").VmwareengineNetworkPeering = null as any;
utilities.lazyLoad(exports, ["VmwareengineNetworkPeering"], () => require("./vmwareengineNetworkPeering"));

export { VmwareengineNetworkPolicyArgs, VmwareengineNetworkPolicyState } from "./vmwareengineNetworkPolicy";
export type VmwareengineNetworkPolicy = import("./vmwareengineNetworkPolicy").VmwareengineNetworkPolicy;
export const VmwareengineNetworkPolicy: typeof import("./vmwareengineNetworkPolicy").VmwareengineNetworkPolicy = null as any;
utilities.lazyLoad(exports, ["VmwareengineNetworkPolicy"], () => require("./vmwareengineNetworkPolicy"));

export { VmwareenginePrivateCloudArgs, VmwareenginePrivateCloudState } from "./vmwareenginePrivateCloud";
export type VmwareenginePrivateCloud = import("./vmwareenginePrivateCloud").VmwareenginePrivateCloud;
export const VmwareenginePrivateCloud: typeof import("./vmwareenginePrivateCloud").VmwareenginePrivateCloud = null as any;
utilities.lazyLoad(exports, ["VmwareenginePrivateCloud"], () => require("./vmwareenginePrivateCloud"));

export { VmwareengineSubnetArgs, VmwareengineSubnetState } from "./vmwareengineSubnet";
export type VmwareengineSubnet = import("./vmwareengineSubnet").VmwareengineSubnet;
export const VmwareengineSubnet: typeof import("./vmwareengineSubnet").VmwareengineSubnet = null as any;
utilities.lazyLoad(exports, ["VmwareengineSubnet"], () => require("./vmwareengineSubnet"));

export { VpcAccessConnectorArgs, VpcAccessConnectorState } from "./vpcAccessConnector";
export type VpcAccessConnector = import("./vpcAccessConnector").VpcAccessConnector;
export const VpcAccessConnector: typeof import("./vpcAccessConnector").VpcAccessConnector = null as any;
utilities.lazyLoad(exports, ["VpcAccessConnector"], () => require("./vpcAccessConnector"));

export { WorkbenchInstanceArgs, WorkbenchInstanceState } from "./workbenchInstance";
export type WorkbenchInstance = import("./workbenchInstance").WorkbenchInstance;
export const WorkbenchInstance: typeof import("./workbenchInstance").WorkbenchInstance = null as any;
utilities.lazyLoad(exports, ["WorkbenchInstance"], () => require("./workbenchInstance"));

export { WorkbenchInstanceIamBindingArgs, WorkbenchInstanceIamBindingState } from "./workbenchInstanceIamBinding";
export type WorkbenchInstanceIamBinding = import("./workbenchInstanceIamBinding").WorkbenchInstanceIamBinding;
export const WorkbenchInstanceIamBinding: typeof import("./workbenchInstanceIamBinding").WorkbenchInstanceIamBinding = null as any;
utilities.lazyLoad(exports, ["WorkbenchInstanceIamBinding"], () => require("./workbenchInstanceIamBinding"));

export { WorkbenchInstanceIamMemberArgs, WorkbenchInstanceIamMemberState } from "./workbenchInstanceIamMember";
export type WorkbenchInstanceIamMember = import("./workbenchInstanceIamMember").WorkbenchInstanceIamMember;
export const WorkbenchInstanceIamMember: typeof import("./workbenchInstanceIamMember").WorkbenchInstanceIamMember = null as any;
utilities.lazyLoad(exports, ["WorkbenchInstanceIamMember"], () => require("./workbenchInstanceIamMember"));

export { WorkbenchInstanceIamPolicyArgs, WorkbenchInstanceIamPolicyState } from "./workbenchInstanceIamPolicy";
export type WorkbenchInstanceIamPolicy = import("./workbenchInstanceIamPolicy").WorkbenchInstanceIamPolicy;
export const WorkbenchInstanceIamPolicy: typeof import("./workbenchInstanceIamPolicy").WorkbenchInstanceIamPolicy = null as any;
utilities.lazyLoad(exports, ["WorkbenchInstanceIamPolicy"], () => require("./workbenchInstanceIamPolicy"));

export { WorkflowsWorkflowArgs, WorkflowsWorkflowState } from "./workflowsWorkflow";
export type WorkflowsWorkflow = import("./workflowsWorkflow").WorkflowsWorkflow;
export const WorkflowsWorkflow: typeof import("./workflowsWorkflow").WorkflowsWorkflow = null as any;
utilities.lazyLoad(exports, ["WorkflowsWorkflow"], () => require("./workflowsWorkflow"));

export { WorkstationsWorkstationArgs, WorkstationsWorkstationState } from "./workstationsWorkstation";
export type WorkstationsWorkstation = import("./workstationsWorkstation").WorkstationsWorkstation;
export const WorkstationsWorkstation: typeof import("./workstationsWorkstation").WorkstationsWorkstation = null as any;
utilities.lazyLoad(exports, ["WorkstationsWorkstation"], () => require("./workstationsWorkstation"));

export { WorkstationsWorkstationClusterArgs, WorkstationsWorkstationClusterState } from "./workstationsWorkstationCluster";
export type WorkstationsWorkstationCluster = import("./workstationsWorkstationCluster").WorkstationsWorkstationCluster;
export const WorkstationsWorkstationCluster: typeof import("./workstationsWorkstationCluster").WorkstationsWorkstationCluster = null as any;
utilities.lazyLoad(exports, ["WorkstationsWorkstationCluster"], () => require("./workstationsWorkstationCluster"));

export { WorkstationsWorkstationConfigArgs, WorkstationsWorkstationConfigState } from "./workstationsWorkstationConfig";
export type WorkstationsWorkstationConfig = import("./workstationsWorkstationConfig").WorkstationsWorkstationConfig;
export const WorkstationsWorkstationConfig: typeof import("./workstationsWorkstationConfig").WorkstationsWorkstationConfig = null as any;
utilities.lazyLoad(exports, ["WorkstationsWorkstationConfig"], () => require("./workstationsWorkstationConfig"));

export { WorkstationsWorkstationConfigIamBindingArgs, WorkstationsWorkstationConfigIamBindingState } from "./workstationsWorkstationConfigIamBinding";
export type WorkstationsWorkstationConfigIamBinding = import("./workstationsWorkstationConfigIamBinding").WorkstationsWorkstationConfigIamBinding;
export const WorkstationsWorkstationConfigIamBinding: typeof import("./workstationsWorkstationConfigIamBinding").WorkstationsWorkstationConfigIamBinding = null as any;
utilities.lazyLoad(exports, ["WorkstationsWorkstationConfigIamBinding"], () => require("./workstationsWorkstationConfigIamBinding"));

export { WorkstationsWorkstationConfigIamMemberArgs, WorkstationsWorkstationConfigIamMemberState } from "./workstationsWorkstationConfigIamMember";
export type WorkstationsWorkstationConfigIamMember = import("./workstationsWorkstationConfigIamMember").WorkstationsWorkstationConfigIamMember;
export const WorkstationsWorkstationConfigIamMember: typeof import("./workstationsWorkstationConfigIamMember").WorkstationsWorkstationConfigIamMember = null as any;
utilities.lazyLoad(exports, ["WorkstationsWorkstationConfigIamMember"], () => require("./workstationsWorkstationConfigIamMember"));

export { WorkstationsWorkstationConfigIamPolicyArgs, WorkstationsWorkstationConfigIamPolicyState } from "./workstationsWorkstationConfigIamPolicy";
export type WorkstationsWorkstationConfigIamPolicy = import("./workstationsWorkstationConfigIamPolicy").WorkstationsWorkstationConfigIamPolicy;
export const WorkstationsWorkstationConfigIamPolicy: typeof import("./workstationsWorkstationConfigIamPolicy").WorkstationsWorkstationConfigIamPolicy = null as any;
utilities.lazyLoad(exports, ["WorkstationsWorkstationConfigIamPolicy"], () => require("./workstationsWorkstationConfigIamPolicy"));

export { WorkstationsWorkstationIamBindingArgs, WorkstationsWorkstationIamBindingState } from "./workstationsWorkstationIamBinding";
export type WorkstationsWorkstationIamBinding = import("./workstationsWorkstationIamBinding").WorkstationsWorkstationIamBinding;
export const WorkstationsWorkstationIamBinding: typeof import("./workstationsWorkstationIamBinding").WorkstationsWorkstationIamBinding = null as any;
utilities.lazyLoad(exports, ["WorkstationsWorkstationIamBinding"], () => require("./workstationsWorkstationIamBinding"));

export { WorkstationsWorkstationIamMemberArgs, WorkstationsWorkstationIamMemberState } from "./workstationsWorkstationIamMember";
export type WorkstationsWorkstationIamMember = import("./workstationsWorkstationIamMember").WorkstationsWorkstationIamMember;
export const WorkstationsWorkstationIamMember: typeof import("./workstationsWorkstationIamMember").WorkstationsWorkstationIamMember = null as any;
utilities.lazyLoad(exports, ["WorkstationsWorkstationIamMember"], () => require("./workstationsWorkstationIamMember"));

export { WorkstationsWorkstationIamPolicyArgs, WorkstationsWorkstationIamPolicyState } from "./workstationsWorkstationIamPolicy";
export type WorkstationsWorkstationIamPolicy = import("./workstationsWorkstationIamPolicy").WorkstationsWorkstationIamPolicy;
export const WorkstationsWorkstationIamPolicy: typeof import("./workstationsWorkstationIamPolicy").WorkstationsWorkstationIamPolicy = null as any;
utilities.lazyLoad(exports, ["WorkstationsWorkstationIamPolicy"], () => require("./workstationsWorkstationIamPolicy"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-beta:index/accessContextManagerAccessLevel:AccessContextManagerAccessLevel":
                return new AccessContextManagerAccessLevel(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerAccessLevelCondition:AccessContextManagerAccessLevelCondition":
                return new AccessContextManagerAccessLevelCondition(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerAccessLevels:AccessContextManagerAccessLevels":
                return new AccessContextManagerAccessLevels(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerAccessPolicy:AccessContextManagerAccessPolicy":
                return new AccessContextManagerAccessPolicy(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerAccessPolicyIamBinding:AccessContextManagerAccessPolicyIamBinding":
                return new AccessContextManagerAccessPolicyIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerAccessPolicyIamMember:AccessContextManagerAccessPolicyIamMember":
                return new AccessContextManagerAccessPolicyIamMember(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerAccessPolicyIamPolicy:AccessContextManagerAccessPolicyIamPolicy":
                return new AccessContextManagerAccessPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerAuthorizedOrgsDesc:AccessContextManagerAuthorizedOrgsDesc":
                return new AccessContextManagerAuthorizedOrgsDesc(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerEgressPolicy:AccessContextManagerEgressPolicy":
                return new AccessContextManagerEgressPolicy(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerGcpUserAccessBinding:AccessContextManagerGcpUserAccessBinding":
                return new AccessContextManagerGcpUserAccessBinding(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerIngressPolicy:AccessContextManagerIngressPolicy":
                return new AccessContextManagerIngressPolicy(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerServicePerimeter:AccessContextManagerServicePerimeter":
                return new AccessContextManagerServicePerimeter(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerServicePerimeterDryRunEgressPolicy:AccessContextManagerServicePerimeterDryRunEgressPolicy":
                return new AccessContextManagerServicePerimeterDryRunEgressPolicy(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerServicePerimeterDryRunIngressPolicy:AccessContextManagerServicePerimeterDryRunIngressPolicy":
                return new AccessContextManagerServicePerimeterDryRunIngressPolicy(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerServicePerimeterDryRunResource:AccessContextManagerServicePerimeterDryRunResource":
                return new AccessContextManagerServicePerimeterDryRunResource(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerServicePerimeterEgressPolicy:AccessContextManagerServicePerimeterEgressPolicy":
                return new AccessContextManagerServicePerimeterEgressPolicy(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerServicePerimeterIngressPolicy:AccessContextManagerServicePerimeterIngressPolicy":
                return new AccessContextManagerServicePerimeterIngressPolicy(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerServicePerimeterResource:AccessContextManagerServicePerimeterResource":
                return new AccessContextManagerServicePerimeterResource(name, <any>undefined, { urn })
            case "google-beta:index/accessContextManagerServicePerimeters:AccessContextManagerServicePerimeters":
                return new AccessContextManagerServicePerimeters(name, <any>undefined, { urn })
            case "google-beta:index/activeDirectoryDomain:ActiveDirectoryDomain":
                return new ActiveDirectoryDomain(name, <any>undefined, { urn })
            case "google-beta:index/activeDirectoryDomainTrust:ActiveDirectoryDomainTrust":
                return new ActiveDirectoryDomainTrust(name, <any>undefined, { urn })
            case "google-beta:index/activeDirectoryPeering:ActiveDirectoryPeering":
                return new ActiveDirectoryPeering(name, <any>undefined, { urn })
            case "google-beta:index/alloydbBackup:AlloydbBackup":
                return new AlloydbBackup(name, <any>undefined, { urn })
            case "google-beta:index/alloydbCluster:AlloydbCluster":
                return new AlloydbCluster(name, <any>undefined, { urn })
            case "google-beta:index/alloydbInstance:AlloydbInstance":
                return new AlloydbInstance(name, <any>undefined, { urn })
            case "google-beta:index/alloydbUser:AlloydbUser":
                return new AlloydbUser(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayApi:ApiGatewayApi":
                return new ApiGatewayApi(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayApiConfig:ApiGatewayApiConfig":
                return new ApiGatewayApiConfig(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayApiConfigIamBinding:ApiGatewayApiConfigIamBinding":
                return new ApiGatewayApiConfigIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayApiConfigIamMember:ApiGatewayApiConfigIamMember":
                return new ApiGatewayApiConfigIamMember(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayApiConfigIamPolicy:ApiGatewayApiConfigIamPolicy":
                return new ApiGatewayApiConfigIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayApiIamBinding:ApiGatewayApiIamBinding":
                return new ApiGatewayApiIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayApiIamMember:ApiGatewayApiIamMember":
                return new ApiGatewayApiIamMember(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayApiIamPolicy:ApiGatewayApiIamPolicy":
                return new ApiGatewayApiIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayGateway:ApiGatewayGateway":
                return new ApiGatewayGateway(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayGatewayIamBinding:ApiGatewayGatewayIamBinding":
                return new ApiGatewayGatewayIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayGatewayIamMember:ApiGatewayGatewayIamMember":
                return new ApiGatewayGatewayIamMember(name, <any>undefined, { urn })
            case "google-beta:index/apiGatewayGatewayIamPolicy:ApiGatewayGatewayIamPolicy":
                return new ApiGatewayGatewayIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/apigeeAddonsConfig:ApigeeAddonsConfig":
                return new ApigeeAddonsConfig(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEndpointAttachment:ApigeeEndpointAttachment":
                return new ApigeeEndpointAttachment(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEnvKeystore:ApigeeEnvKeystore":
                return new ApigeeEnvKeystore(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEnvReferences:ApigeeEnvReferences":
                return new ApigeeEnvReferences(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEnvgroup:ApigeeEnvgroup":
                return new ApigeeEnvgroup(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEnvgroupAttachment:ApigeeEnvgroupAttachment":
                return new ApigeeEnvgroupAttachment(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEnvironment:ApigeeEnvironment":
                return new ApigeeEnvironment(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEnvironmentIamBinding:ApigeeEnvironmentIamBinding":
                return new ApigeeEnvironmentIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEnvironmentIamMember:ApigeeEnvironmentIamMember":
                return new ApigeeEnvironmentIamMember(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEnvironmentIamPolicy:ApigeeEnvironmentIamPolicy":
                return new ApigeeEnvironmentIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEnvironmentKeyvaluemaps:ApigeeEnvironmentKeyvaluemaps":
                return new ApigeeEnvironmentKeyvaluemaps(name, <any>undefined, { urn })
            case "google-beta:index/apigeeEnvironmentKeyvaluemapsEntries:ApigeeEnvironmentKeyvaluemapsEntries":
                return new ApigeeEnvironmentKeyvaluemapsEntries(name, <any>undefined, { urn })
            case "google-beta:index/apigeeFlowhook:ApigeeFlowhook":
                return new ApigeeFlowhook(name, <any>undefined, { urn })
            case "google-beta:index/apigeeInstance:ApigeeInstance":
                return new ApigeeInstance(name, <any>undefined, { urn })
            case "google-beta:index/apigeeInstanceAttachment:ApigeeInstanceAttachment":
                return new ApigeeInstanceAttachment(name, <any>undefined, { urn })
            case "google-beta:index/apigeeKeystoresAliasesKeyCertFile:ApigeeKeystoresAliasesKeyCertFile":
                return new ApigeeKeystoresAliasesKeyCertFile(name, <any>undefined, { urn })
            case "google-beta:index/apigeeKeystoresAliasesPkcs12:ApigeeKeystoresAliasesPkcs12":
                return new ApigeeKeystoresAliasesPkcs12(name, <any>undefined, { urn })
            case "google-beta:index/apigeeKeystoresAliasesSelfSignedCert:ApigeeKeystoresAliasesSelfSignedCert":
                return new ApigeeKeystoresAliasesSelfSignedCert(name, <any>undefined, { urn })
            case "google-beta:index/apigeeNatAddress:ApigeeNatAddress":
                return new ApigeeNatAddress(name, <any>undefined, { urn })
            case "google-beta:index/apigeeOrganization:ApigeeOrganization":
                return new ApigeeOrganization(name, <any>undefined, { urn })
            case "google-beta:index/apigeeSharedflow:ApigeeSharedflow":
                return new ApigeeSharedflow(name, <any>undefined, { urn })
            case "google-beta:index/apigeeSharedflowDeployment:ApigeeSharedflowDeployment":
                return new ApigeeSharedflowDeployment(name, <any>undefined, { urn })
            case "google-beta:index/apigeeSyncAuthorization:ApigeeSyncAuthorization":
                return new ApigeeSyncAuthorization(name, <any>undefined, { urn })
            case "google-beta:index/apigeeTargetServer:ApigeeTargetServer":
                return new ApigeeTargetServer(name, <any>undefined, { urn })
            case "google-beta:index/apikeysKey:ApikeysKey":
                return new ApikeysKey(name, <any>undefined, { urn })
            case "google-beta:index/appEngineApplication:AppEngineApplication":
                return new AppEngineApplication(name, <any>undefined, { urn })
            case "google-beta:index/appEngineApplicationUrlDispatchRules:AppEngineApplicationUrlDispatchRules":
                return new AppEngineApplicationUrlDispatchRules(name, <any>undefined, { urn })
            case "google-beta:index/appEngineDomainMapping:AppEngineDomainMapping":
                return new AppEngineDomainMapping(name, <any>undefined, { urn })
            case "google-beta:index/appEngineFirewallRule:AppEngineFirewallRule":
                return new AppEngineFirewallRule(name, <any>undefined, { urn })
            case "google-beta:index/appEngineFlexibleAppVersion:AppEngineFlexibleAppVersion":
                return new AppEngineFlexibleAppVersion(name, <any>undefined, { urn })
            case "google-beta:index/appEngineServiceNetworkSettings:AppEngineServiceNetworkSettings":
                return new AppEngineServiceNetworkSettings(name, <any>undefined, { urn })
            case "google-beta:index/appEngineServiceSplitTraffic:AppEngineServiceSplitTraffic":
                return new AppEngineServiceSplitTraffic(name, <any>undefined, { urn })
            case "google-beta:index/appEngineStandardAppVersion:AppEngineStandardAppVersion":
                return new AppEngineStandardAppVersion(name, <any>undefined, { urn })
            case "google-beta:index/apphubApplication:ApphubApplication":
                return new ApphubApplication(name, <any>undefined, { urn })
            case "google-beta:index/apphubService:ApphubService":
                return new ApphubService(name, <any>undefined, { urn })
            case "google-beta:index/apphubServiceProjectAttachment:ApphubServiceProjectAttachment":
                return new ApphubServiceProjectAttachment(name, <any>undefined, { urn })
            case "google-beta:index/apphubWorkload:ApphubWorkload":
                return new ApphubWorkload(name, <any>undefined, { urn })
            case "google-beta:index/artifactRegistryRepository:ArtifactRegistryRepository":
                return new ArtifactRegistryRepository(name, <any>undefined, { urn })
            case "google-beta:index/artifactRegistryRepositoryIamBinding:ArtifactRegistryRepositoryIamBinding":
                return new ArtifactRegistryRepositoryIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/artifactRegistryRepositoryIamMember:ArtifactRegistryRepositoryIamMember":
                return new ArtifactRegistryRepositoryIamMember(name, <any>undefined, { urn })
            case "google-beta:index/artifactRegistryRepositoryIamPolicy:ArtifactRegistryRepositoryIamPolicy":
                return new ArtifactRegistryRepositoryIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/artifactRegistryVpcscConfig:ArtifactRegistryVpcscConfig":
                return new ArtifactRegistryVpcscConfig(name, <any>undefined, { urn })
            case "google-beta:index/assuredWorkloadsWorkload:AssuredWorkloadsWorkload":
                return new AssuredWorkloadsWorkload(name, <any>undefined, { urn })
            case "google-beta:index/backupDrManagementServer:BackupDrManagementServer":
                return new BackupDrManagementServer(name, <any>undefined, { urn })
            case "google-beta:index/beyondcorpAppConnection:BeyondcorpAppConnection":
                return new BeyondcorpAppConnection(name, <any>undefined, { urn })
            case "google-beta:index/beyondcorpAppConnector:BeyondcorpAppConnector":
                return new BeyondcorpAppConnector(name, <any>undefined, { urn })
            case "google-beta:index/beyondcorpAppGateway:BeyondcorpAppGateway":
                return new BeyondcorpAppGateway(name, <any>undefined, { urn })
            case "google-beta:index/biglakeCatalog:BiglakeCatalog":
                return new BiglakeCatalog(name, <any>undefined, { urn })
            case "google-beta:index/biglakeDatabase:BiglakeDatabase":
                return new BiglakeDatabase(name, <any>undefined, { urn })
            case "google-beta:index/biglakeTable:BiglakeTable":
                return new BiglakeTable(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryAnalyticsHubDataExchange:BigqueryAnalyticsHubDataExchange":
                return new BigqueryAnalyticsHubDataExchange(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryAnalyticsHubDataExchangeIamBinding:BigqueryAnalyticsHubDataExchangeIamBinding":
                return new BigqueryAnalyticsHubDataExchangeIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryAnalyticsHubDataExchangeIamMember:BigqueryAnalyticsHubDataExchangeIamMember":
                return new BigqueryAnalyticsHubDataExchangeIamMember(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryAnalyticsHubDataExchangeIamPolicy:BigqueryAnalyticsHubDataExchangeIamPolicy":
                return new BigqueryAnalyticsHubDataExchangeIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryAnalyticsHubListing:BigqueryAnalyticsHubListing":
                return new BigqueryAnalyticsHubListing(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryAnalyticsHubListingIamBinding:BigqueryAnalyticsHubListingIamBinding":
                return new BigqueryAnalyticsHubListingIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryAnalyticsHubListingIamMember:BigqueryAnalyticsHubListingIamMember":
                return new BigqueryAnalyticsHubListingIamMember(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryAnalyticsHubListingIamPolicy:BigqueryAnalyticsHubListingIamPolicy":
                return new BigqueryAnalyticsHubListingIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryBiReservation:BigqueryBiReservation":
                return new BigqueryBiReservation(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryCapacityCommitment:BigqueryCapacityCommitment":
                return new BigqueryCapacityCommitment(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryConnection:BigqueryConnection":
                return new BigqueryConnection(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryConnectionIamBinding:BigqueryConnectionIamBinding":
                return new BigqueryConnectionIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryConnectionIamMember:BigqueryConnectionIamMember":
                return new BigqueryConnectionIamMember(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryConnectionIamPolicy:BigqueryConnectionIamPolicy":
                return new BigqueryConnectionIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryDataTransferConfig:BigqueryDataTransferConfig":
                return new BigqueryDataTransferConfig(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryDatapolicyDataPolicy:BigqueryDatapolicyDataPolicy":
                return new BigqueryDatapolicyDataPolicy(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryDatapolicyDataPolicyIamBinding:BigqueryDatapolicyDataPolicyIamBinding":
                return new BigqueryDatapolicyDataPolicyIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryDatapolicyDataPolicyIamMember:BigqueryDatapolicyDataPolicyIamMember":
                return new BigqueryDatapolicyDataPolicyIamMember(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryDatapolicyDataPolicyIamPolicy:BigqueryDatapolicyDataPolicyIamPolicy":
                return new BigqueryDatapolicyDataPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryDataset:BigqueryDataset":
                return new BigqueryDataset(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryDatasetAccess:BigqueryDatasetAccess":
                return new BigqueryDatasetAccess(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryDatasetIamBinding:BigqueryDatasetIamBinding":
                return new BigqueryDatasetIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryDatasetIamMember:BigqueryDatasetIamMember":
                return new BigqueryDatasetIamMember(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryDatasetIamPolicy:BigqueryDatasetIamPolicy":
                return new BigqueryDatasetIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryJob:BigqueryJob":
                return new BigqueryJob(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryReservation:BigqueryReservation":
                return new BigqueryReservation(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryReservationAssignment:BigqueryReservationAssignment":
                return new BigqueryReservationAssignment(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryRoutine:BigqueryRoutine":
                return new BigqueryRoutine(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryTable:BigqueryTable":
                return new BigqueryTable(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryTableIamBinding:BigqueryTableIamBinding":
                return new BigqueryTableIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryTableIamMember:BigqueryTableIamMember":
                return new BigqueryTableIamMember(name, <any>undefined, { urn })
            case "google-beta:index/bigqueryTableIamPolicy:BigqueryTableIamPolicy":
                return new BigqueryTableIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/bigtableAppProfile:BigtableAppProfile":
                return new BigtableAppProfile(name, <any>undefined, { urn })
            case "google-beta:index/bigtableAuthorizedView:BigtableAuthorizedView":
                return new BigtableAuthorizedView(name, <any>undefined, { urn })
            case "google-beta:index/bigtableGcPolicy:BigtableGcPolicy":
                return new BigtableGcPolicy(name, <any>undefined, { urn })
            case "google-beta:index/bigtableInstance:BigtableInstance":
                return new BigtableInstance(name, <any>undefined, { urn })
            case "google-beta:index/bigtableInstanceIamBinding:BigtableInstanceIamBinding":
                return new BigtableInstanceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/bigtableInstanceIamMember:BigtableInstanceIamMember":
                return new BigtableInstanceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/bigtableInstanceIamPolicy:BigtableInstanceIamPolicy":
                return new BigtableInstanceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/bigtableTable:BigtableTable":
                return new BigtableTable(name, <any>undefined, { urn })
            case "google-beta:index/bigtableTableIamBinding:BigtableTableIamBinding":
                return new BigtableTableIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/bigtableTableIamMember:BigtableTableIamMember":
                return new BigtableTableIamMember(name, <any>undefined, { urn })
            case "google-beta:index/bigtableTableIamPolicy:BigtableTableIamPolicy":
                return new BigtableTableIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/billingAccountIamBinding:BillingAccountIamBinding":
                return new BillingAccountIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/billingAccountIamMember:BillingAccountIamMember":
                return new BillingAccountIamMember(name, <any>undefined, { urn })
            case "google-beta:index/billingAccountIamPolicy:BillingAccountIamPolicy":
                return new BillingAccountIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/billingBudget:BillingBudget":
                return new BillingBudget(name, <any>undefined, { urn })
            case "google-beta:index/billingProjectInfo:BillingProjectInfo":
                return new BillingProjectInfo(name, <any>undefined, { urn })
            case "google-beta:index/billingSubaccount:BillingSubaccount":
                return new BillingSubaccount(name, <any>undefined, { urn })
            case "google-beta:index/binaryAuthorizationAttestor:BinaryAuthorizationAttestor":
                return new BinaryAuthorizationAttestor(name, <any>undefined, { urn })
            case "google-beta:index/binaryAuthorizationAttestorIamBinding:BinaryAuthorizationAttestorIamBinding":
                return new BinaryAuthorizationAttestorIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/binaryAuthorizationAttestorIamMember:BinaryAuthorizationAttestorIamMember":
                return new BinaryAuthorizationAttestorIamMember(name, <any>undefined, { urn })
            case "google-beta:index/binaryAuthorizationAttestorIamPolicy:BinaryAuthorizationAttestorIamPolicy":
                return new BinaryAuthorizationAttestorIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/binaryAuthorizationPolicy:BinaryAuthorizationPolicy":
                return new BinaryAuthorizationPolicy(name, <any>undefined, { urn })
            case "google-beta:index/blockchainNodeEngineBlockchainNodes:BlockchainNodeEngineBlockchainNodes":
                return new BlockchainNodeEngineBlockchainNodes(name, <any>undefined, { urn })
            case "google-beta:index/certificateManagerCertificate:CertificateManagerCertificate":
                return new CertificateManagerCertificate(name, <any>undefined, { urn })
            case "google-beta:index/certificateManagerCertificateIssuanceConfig:CertificateManagerCertificateIssuanceConfig":
                return new CertificateManagerCertificateIssuanceConfig(name, <any>undefined, { urn })
            case "google-beta:index/certificateManagerCertificateMap:CertificateManagerCertificateMap":
                return new CertificateManagerCertificateMap(name, <any>undefined, { urn })
            case "google-beta:index/certificateManagerCertificateMapEntry:CertificateManagerCertificateMapEntry":
                return new CertificateManagerCertificateMapEntry(name, <any>undefined, { urn })
            case "google-beta:index/certificateManagerDnsAuthorization:CertificateManagerDnsAuthorization":
                return new CertificateManagerDnsAuthorization(name, <any>undefined, { urn })
            case "google-beta:index/certificateManagerTrustConfig:CertificateManagerTrustConfig":
                return new CertificateManagerTrustConfig(name, <any>undefined, { urn })
            case "google-beta:index/cloudAssetFolderFeed:CloudAssetFolderFeed":
                return new CloudAssetFolderFeed(name, <any>undefined, { urn })
            case "google-beta:index/cloudAssetOrganizationFeed:CloudAssetOrganizationFeed":
                return new CloudAssetOrganizationFeed(name, <any>undefined, { urn })
            case "google-beta:index/cloudAssetProjectFeed:CloudAssetProjectFeed":
                return new CloudAssetProjectFeed(name, <any>undefined, { urn })
            case "google-beta:index/cloudIdentityGroup:CloudIdentityGroup":
                return new CloudIdentityGroup(name, <any>undefined, { urn })
            case "google-beta:index/cloudIdentityGroupMembership:CloudIdentityGroupMembership":
                return new CloudIdentityGroupMembership(name, <any>undefined, { urn })
            case "google-beta:index/cloudIdsEndpoint:CloudIdsEndpoint":
                return new CloudIdsEndpoint(name, <any>undefined, { urn })
            case "google-beta:index/cloudQuotasQuotaPreference:CloudQuotasQuotaPreference":
                return new CloudQuotasQuotaPreference(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunDomainMapping:CloudRunDomainMapping":
                return new CloudRunDomainMapping(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunService:CloudRunService":
                return new CloudRunService(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunServiceIamBinding:CloudRunServiceIamBinding":
                return new CloudRunServiceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunServiceIamMember:CloudRunServiceIamMember":
                return new CloudRunServiceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunServiceIamPolicy:CloudRunServiceIamPolicy":
                return new CloudRunServiceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunV2Job:CloudRunV2Job":
                return new CloudRunV2Job(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunV2JobIamBinding:CloudRunV2JobIamBinding":
                return new CloudRunV2JobIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunV2JobIamMember:CloudRunV2JobIamMember":
                return new CloudRunV2JobIamMember(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunV2JobIamPolicy:CloudRunV2JobIamPolicy":
                return new CloudRunV2JobIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunV2Service:CloudRunV2Service":
                return new CloudRunV2Service(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunV2ServiceIamBinding:CloudRunV2ServiceIamBinding":
                return new CloudRunV2ServiceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunV2ServiceIamMember:CloudRunV2ServiceIamMember":
                return new CloudRunV2ServiceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/cloudRunV2ServiceIamPolicy:CloudRunV2ServiceIamPolicy":
                return new CloudRunV2ServiceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/cloudSchedulerJob:CloudSchedulerJob":
                return new CloudSchedulerJob(name, <any>undefined, { urn })
            case "google-beta:index/cloudTasksQueue:CloudTasksQueue":
                return new CloudTasksQueue(name, <any>undefined, { urn })
            case "google-beta:index/cloudTasksQueueIamBinding:CloudTasksQueueIamBinding":
                return new CloudTasksQueueIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/cloudTasksQueueIamMember:CloudTasksQueueIamMember":
                return new CloudTasksQueueIamMember(name, <any>undefined, { urn })
            case "google-beta:index/cloudTasksQueueIamPolicy:CloudTasksQueueIamPolicy":
                return new CloudTasksQueueIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/cloudbuildBitbucketServerConfig:CloudbuildBitbucketServerConfig":
                return new CloudbuildBitbucketServerConfig(name, <any>undefined, { urn })
            case "google-beta:index/cloudbuildTrigger:CloudbuildTrigger":
                return new CloudbuildTrigger(name, <any>undefined, { urn })
            case "google-beta:index/cloudbuildWorkerPool:CloudbuildWorkerPool":
                return new CloudbuildWorkerPool(name, <any>undefined, { urn })
            case "google-beta:index/cloudbuildv2Connection:Cloudbuildv2Connection":
                return new Cloudbuildv2Connection(name, <any>undefined, { urn })
            case "google-beta:index/cloudbuildv2ConnectionIamBinding:Cloudbuildv2ConnectionIamBinding":
                return new Cloudbuildv2ConnectionIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/cloudbuildv2ConnectionIamMember:Cloudbuildv2ConnectionIamMember":
                return new Cloudbuildv2ConnectionIamMember(name, <any>undefined, { urn })
            case "google-beta:index/cloudbuildv2ConnectionIamPolicy:Cloudbuildv2ConnectionIamPolicy":
                return new Cloudbuildv2ConnectionIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/cloudbuildv2Repository:Cloudbuildv2Repository":
                return new Cloudbuildv2Repository(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployAutomation:ClouddeployAutomation":
                return new ClouddeployAutomation(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployCustomTargetType:ClouddeployCustomTargetType":
                return new ClouddeployCustomTargetType(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployCustomTargetTypeIamBinding:ClouddeployCustomTargetTypeIamBinding":
                return new ClouddeployCustomTargetTypeIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployCustomTargetTypeIamMember:ClouddeployCustomTargetTypeIamMember":
                return new ClouddeployCustomTargetTypeIamMember(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployCustomTargetTypeIamPolicy:ClouddeployCustomTargetTypeIamPolicy":
                return new ClouddeployCustomTargetTypeIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployDeliveryPipeline:ClouddeployDeliveryPipeline":
                return new ClouddeployDeliveryPipeline(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployDeliveryPipelineIamBinding:ClouddeployDeliveryPipelineIamBinding":
                return new ClouddeployDeliveryPipelineIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployDeliveryPipelineIamMember:ClouddeployDeliveryPipelineIamMember":
                return new ClouddeployDeliveryPipelineIamMember(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployDeliveryPipelineIamPolicy:ClouddeployDeliveryPipelineIamPolicy":
                return new ClouddeployDeliveryPipelineIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployTarget:ClouddeployTarget":
                return new ClouddeployTarget(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployTargetIamBinding:ClouddeployTargetIamBinding":
                return new ClouddeployTargetIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployTargetIamMember:ClouddeployTargetIamMember":
                return new ClouddeployTargetIamMember(name, <any>undefined, { urn })
            case "google-beta:index/clouddeployTargetIamPolicy:ClouddeployTargetIamPolicy":
                return new ClouddeployTargetIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/clouddomainsRegistration:ClouddomainsRegistration":
                return new ClouddomainsRegistration(name, <any>undefined, { urn })
            case "google-beta:index/cloudfunctions2Function:Cloudfunctions2Function":
                return new Cloudfunctions2Function(name, <any>undefined, { urn })
            case "google-beta:index/cloudfunctions2FunctionIamBinding:Cloudfunctions2FunctionIamBinding":
                return new Cloudfunctions2FunctionIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/cloudfunctions2FunctionIamMember:Cloudfunctions2FunctionIamMember":
                return new Cloudfunctions2FunctionIamMember(name, <any>undefined, { urn })
            case "google-beta:index/cloudfunctions2FunctionIamPolicy:Cloudfunctions2FunctionIamPolicy":
                return new Cloudfunctions2FunctionIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/cloudfunctionsFunction:CloudfunctionsFunction":
                return new CloudfunctionsFunction(name, <any>undefined, { urn })
            case "google-beta:index/cloudfunctionsFunctionIamBinding:CloudfunctionsFunctionIamBinding":
                return new CloudfunctionsFunctionIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/cloudfunctionsFunctionIamMember:CloudfunctionsFunctionIamMember":
                return new CloudfunctionsFunctionIamMember(name, <any>undefined, { urn })
            case "google-beta:index/cloudfunctionsFunctionIamPolicy:CloudfunctionsFunctionIamPolicy":
                return new CloudfunctionsFunctionIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/composerEnvironment:ComposerEnvironment":
                return new ComposerEnvironment(name, <any>undefined, { urn })
            case "google-beta:index/composerUserWorkloadsConfigMap:ComposerUserWorkloadsConfigMap":
                return new ComposerUserWorkloadsConfigMap(name, <any>undefined, { urn })
            case "google-beta:index/composerUserWorkloadsSecret:ComposerUserWorkloadsSecret":
                return new ComposerUserWorkloadsSecret(name, <any>undefined, { urn })
            case "google-beta:index/computeAddress:ComputeAddress":
                return new ComputeAddress(name, <any>undefined, { urn })
            case "google-beta:index/computeAttachedDisk:ComputeAttachedDisk":
                return new ComputeAttachedDisk(name, <any>undefined, { urn })
            case "google-beta:index/computeAutoscaler:ComputeAutoscaler":
                return new ComputeAutoscaler(name, <any>undefined, { urn })
            case "google-beta:index/computeBackendBucket:ComputeBackendBucket":
                return new ComputeBackendBucket(name, <any>undefined, { urn })
            case "google-beta:index/computeBackendBucketIamBinding:ComputeBackendBucketIamBinding":
                return new ComputeBackendBucketIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/computeBackendBucketIamMember:ComputeBackendBucketIamMember":
                return new ComputeBackendBucketIamMember(name, <any>undefined, { urn })
            case "google-beta:index/computeBackendBucketIamPolicy:ComputeBackendBucketIamPolicy":
                return new ComputeBackendBucketIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeBackendBucketSignedUrlKey:ComputeBackendBucketSignedUrlKey":
                return new ComputeBackendBucketSignedUrlKey(name, <any>undefined, { urn })
            case "google-beta:index/computeBackendService:ComputeBackendService":
                return new ComputeBackendService(name, <any>undefined, { urn })
            case "google-beta:index/computeBackendServiceIamBinding:ComputeBackendServiceIamBinding":
                return new ComputeBackendServiceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/computeBackendServiceIamMember:ComputeBackendServiceIamMember":
                return new ComputeBackendServiceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/computeBackendServiceIamPolicy:ComputeBackendServiceIamPolicy":
                return new ComputeBackendServiceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeBackendServiceSignedUrlKey:ComputeBackendServiceSignedUrlKey":
                return new ComputeBackendServiceSignedUrlKey(name, <any>undefined, { urn })
            case "google-beta:index/computeDisk:ComputeDisk":
                return new ComputeDisk(name, <any>undefined, { urn })
            case "google-beta:index/computeDiskAsyncReplication:ComputeDiskAsyncReplication":
                return new ComputeDiskAsyncReplication(name, <any>undefined, { urn })
            case "google-beta:index/computeDiskIamBinding:ComputeDiskIamBinding":
                return new ComputeDiskIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/computeDiskIamMember:ComputeDiskIamMember":
                return new ComputeDiskIamMember(name, <any>undefined, { urn })
            case "google-beta:index/computeDiskIamPolicy:ComputeDiskIamPolicy":
                return new ComputeDiskIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeDiskResourcePolicyAttachment:ComputeDiskResourcePolicyAttachment":
                return new ComputeDiskResourcePolicyAttachment(name, <any>undefined, { urn })
            case "google-beta:index/computeExternalVpnGateway:ComputeExternalVpnGateway":
                return new ComputeExternalVpnGateway(name, <any>undefined, { urn })
            case "google-beta:index/computeFirewall:ComputeFirewall":
                return new ComputeFirewall(name, <any>undefined, { urn })
            case "google-beta:index/computeFirewallPolicy:ComputeFirewallPolicy":
                return new ComputeFirewallPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeFirewallPolicyAssociation:ComputeFirewallPolicyAssociation":
                return new ComputeFirewallPolicyAssociation(name, <any>undefined, { urn })
            case "google-beta:index/computeFirewallPolicyRule:ComputeFirewallPolicyRule":
                return new ComputeFirewallPolicyRule(name, <any>undefined, { urn })
            case "google-beta:index/computeForwardingRule:ComputeForwardingRule":
                return new ComputeForwardingRule(name, <any>undefined, { urn })
            case "google-beta:index/computeGlobalAddress:ComputeGlobalAddress":
                return new ComputeGlobalAddress(name, <any>undefined, { urn })
            case "google-beta:index/computeGlobalForwardingRule:ComputeGlobalForwardingRule":
                return new ComputeGlobalForwardingRule(name, <any>undefined, { urn })
            case "google-beta:index/computeGlobalNetworkEndpoint:ComputeGlobalNetworkEndpoint":
                return new ComputeGlobalNetworkEndpoint(name, <any>undefined, { urn })
            case "google-beta:index/computeGlobalNetworkEndpointGroup:ComputeGlobalNetworkEndpointGroup":
                return new ComputeGlobalNetworkEndpointGroup(name, <any>undefined, { urn })
            case "google-beta:index/computeHaVpnGateway:ComputeHaVpnGateway":
                return new ComputeHaVpnGateway(name, <any>undefined, { urn })
            case "google-beta:index/computeHealthCheck:ComputeHealthCheck":
                return new ComputeHealthCheck(name, <any>undefined, { urn })
            case "google-beta:index/computeHttpHealthCheck:ComputeHttpHealthCheck":
                return new ComputeHttpHealthCheck(name, <any>undefined, { urn })
            case "google-beta:index/computeHttpsHealthCheck:ComputeHttpsHealthCheck":
                return new ComputeHttpsHealthCheck(name, <any>undefined, { urn })
            case "google-beta:index/computeImage:ComputeImage":
                return new ComputeImage(name, <any>undefined, { urn })
            case "google-beta:index/computeImageIamBinding:ComputeImageIamBinding":
                return new ComputeImageIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/computeImageIamMember:ComputeImageIamMember":
                return new ComputeImageIamMember(name, <any>undefined, { urn })
            case "google-beta:index/computeImageIamPolicy:ComputeImageIamPolicy":
                return new ComputeImageIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeInstance:ComputeInstance":
                return new ComputeInstance(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceFromMachineImage:ComputeInstanceFromMachineImage":
                return new ComputeInstanceFromMachineImage(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceFromTemplate:ComputeInstanceFromTemplate":
                return new ComputeInstanceFromTemplate(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceGroup:ComputeInstanceGroup":
                return new ComputeInstanceGroup(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceGroupManager:ComputeInstanceGroupManager":
                return new ComputeInstanceGroupManager(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceGroupMembership:ComputeInstanceGroupMembership":
                return new ComputeInstanceGroupMembership(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceGroupNamedPort:ComputeInstanceGroupNamedPort":
                return new ComputeInstanceGroupNamedPort(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceIamBinding:ComputeInstanceIamBinding":
                return new ComputeInstanceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceIamMember:ComputeInstanceIamMember":
                return new ComputeInstanceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceIamPolicy:ComputeInstanceIamPolicy":
                return new ComputeInstanceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceSettings:ComputeInstanceSettings":
                return new ComputeInstanceSettings(name, <any>undefined, { urn })
            case "google-beta:index/computeInstanceTemplate:ComputeInstanceTemplate":
                return new ComputeInstanceTemplate(name, <any>undefined, { urn })
            case "google-beta:index/computeInterconnect:ComputeInterconnect":
                return new ComputeInterconnect(name, <any>undefined, { urn })
            case "google-beta:index/computeInterconnectAttachment:ComputeInterconnectAttachment":
                return new ComputeInterconnectAttachment(name, <any>undefined, { urn })
            case "google-beta:index/computeMachineImage:ComputeMachineImage":
                return new ComputeMachineImage(name, <any>undefined, { urn })
            case "google-beta:index/computeMachineImageIamBinding:ComputeMachineImageIamBinding":
                return new ComputeMachineImageIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/computeMachineImageIamMember:ComputeMachineImageIamMember":
                return new ComputeMachineImageIamMember(name, <any>undefined, { urn })
            case "google-beta:index/computeMachineImageIamPolicy:ComputeMachineImageIamPolicy":
                return new ComputeMachineImageIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeManagedSslCertificate:ComputeManagedSslCertificate":
                return new ComputeManagedSslCertificate(name, <any>undefined, { urn })
            case "google-beta:index/computeNetwork:ComputeNetwork":
                return new ComputeNetwork(name, <any>undefined, { urn })
            case "google-beta:index/computeNetworkAttachment:ComputeNetworkAttachment":
                return new ComputeNetworkAttachment(name, <any>undefined, { urn })
            case "google-beta:index/computeNetworkEdgeSecurityService:ComputeNetworkEdgeSecurityService":
                return new ComputeNetworkEdgeSecurityService(name, <any>undefined, { urn })
            case "google-beta:index/computeNetworkEndpoint:ComputeNetworkEndpoint":
                return new ComputeNetworkEndpoint(name, <any>undefined, { urn })
            case "google-beta:index/computeNetworkEndpointGroup:ComputeNetworkEndpointGroup":
                return new ComputeNetworkEndpointGroup(name, <any>undefined, { urn })
            case "google-beta:index/computeNetworkEndpoints:ComputeNetworkEndpoints":
                return new ComputeNetworkEndpoints(name, <any>undefined, { urn })
            case "google-beta:index/computeNetworkFirewallPolicy:ComputeNetworkFirewallPolicy":
                return new ComputeNetworkFirewallPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeNetworkFirewallPolicyAssociation:ComputeNetworkFirewallPolicyAssociation":
                return new ComputeNetworkFirewallPolicyAssociation(name, <any>undefined, { urn })
            case "google-beta:index/computeNetworkFirewallPolicyRule:ComputeNetworkFirewallPolicyRule":
                return new ComputeNetworkFirewallPolicyRule(name, <any>undefined, { urn })
            case "google-beta:index/computeNetworkPeering:ComputeNetworkPeering":
                return new ComputeNetworkPeering(name, <any>undefined, { urn })
            case "google-beta:index/computeNetworkPeeringRoutesConfig:ComputeNetworkPeeringRoutesConfig":
                return new ComputeNetworkPeeringRoutesConfig(name, <any>undefined, { urn })
            case "google-beta:index/computeNodeGroup:ComputeNodeGroup":
                return new ComputeNodeGroup(name, <any>undefined, { urn })
            case "google-beta:index/computeNodeTemplate:ComputeNodeTemplate":
                return new ComputeNodeTemplate(name, <any>undefined, { urn })
            case "google-beta:index/computeOrganizationSecurityPolicy:ComputeOrganizationSecurityPolicy":
                return new ComputeOrganizationSecurityPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeOrganizationSecurityPolicyAssociation:ComputeOrganizationSecurityPolicyAssociation":
                return new ComputeOrganizationSecurityPolicyAssociation(name, <any>undefined, { urn })
            case "google-beta:index/computeOrganizationSecurityPolicyRule:ComputeOrganizationSecurityPolicyRule":
                return new ComputeOrganizationSecurityPolicyRule(name, <any>undefined, { urn })
            case "google-beta:index/computePacketMirroring:ComputePacketMirroring":
                return new ComputePacketMirroring(name, <any>undefined, { urn })
            case "google-beta:index/computePerInstanceConfig:ComputePerInstanceConfig":
                return new ComputePerInstanceConfig(name, <any>undefined, { urn })
            case "google-beta:index/computeProjectCloudArmorTier:ComputeProjectCloudArmorTier":
                return new ComputeProjectCloudArmorTier(name, <any>undefined, { urn })
            case "google-beta:index/computeProjectDefaultNetworkTier:ComputeProjectDefaultNetworkTier":
                return new ComputeProjectDefaultNetworkTier(name, <any>undefined, { urn })
            case "google-beta:index/computeProjectMetadata:ComputeProjectMetadata":
                return new ComputeProjectMetadata(name, <any>undefined, { urn })
            case "google-beta:index/computeProjectMetadataItem:ComputeProjectMetadataItem":
                return new ComputeProjectMetadataItem(name, <any>undefined, { urn })
            case "google-beta:index/computePublicAdvertisedPrefix:ComputePublicAdvertisedPrefix":
                return new ComputePublicAdvertisedPrefix(name, <any>undefined, { urn })
            case "google-beta:index/computePublicDelegatedPrefix:ComputePublicDelegatedPrefix":
                return new ComputePublicDelegatedPrefix(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionAutoscaler:ComputeRegionAutoscaler":
                return new ComputeRegionAutoscaler(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionBackendService:ComputeRegionBackendService":
                return new ComputeRegionBackendService(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionBackendServiceIamBinding:ComputeRegionBackendServiceIamBinding":
                return new ComputeRegionBackendServiceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionBackendServiceIamMember:ComputeRegionBackendServiceIamMember":
                return new ComputeRegionBackendServiceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionBackendServiceIamPolicy:ComputeRegionBackendServiceIamPolicy":
                return new ComputeRegionBackendServiceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionCommitment:ComputeRegionCommitment":
                return new ComputeRegionCommitment(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionDisk:ComputeRegionDisk":
                return new ComputeRegionDisk(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionDiskIamBinding:ComputeRegionDiskIamBinding":
                return new ComputeRegionDiskIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionDiskIamMember:ComputeRegionDiskIamMember":
                return new ComputeRegionDiskIamMember(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionDiskIamPolicy:ComputeRegionDiskIamPolicy":
                return new ComputeRegionDiskIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionDiskResourcePolicyAttachment:ComputeRegionDiskResourcePolicyAttachment":
                return new ComputeRegionDiskResourcePolicyAttachment(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionHealthCheck:ComputeRegionHealthCheck":
                return new ComputeRegionHealthCheck(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionInstanceGroupManager:ComputeRegionInstanceGroupManager":
                return new ComputeRegionInstanceGroupManager(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionInstanceTemplate:ComputeRegionInstanceTemplate":
                return new ComputeRegionInstanceTemplate(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionNetworkEndpoint:ComputeRegionNetworkEndpoint":
                return new ComputeRegionNetworkEndpoint(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionNetworkEndpointGroup:ComputeRegionNetworkEndpointGroup":
                return new ComputeRegionNetworkEndpointGroup(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionNetworkFirewallPolicy:ComputeRegionNetworkFirewallPolicy":
                return new ComputeRegionNetworkFirewallPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionNetworkFirewallPolicyAssociation:ComputeRegionNetworkFirewallPolicyAssociation":
                return new ComputeRegionNetworkFirewallPolicyAssociation(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionNetworkFirewallPolicyRule:ComputeRegionNetworkFirewallPolicyRule":
                return new ComputeRegionNetworkFirewallPolicyRule(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionPerInstanceConfig:ComputeRegionPerInstanceConfig":
                return new ComputeRegionPerInstanceConfig(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionSecurityPolicy:ComputeRegionSecurityPolicy":
                return new ComputeRegionSecurityPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionSecurityPolicyRule:ComputeRegionSecurityPolicyRule":
                return new ComputeRegionSecurityPolicyRule(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionSslCertificate:ComputeRegionSslCertificate":
                return new ComputeRegionSslCertificate(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionSslPolicy:ComputeRegionSslPolicy":
                return new ComputeRegionSslPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionTargetHttpProxy:ComputeRegionTargetHttpProxy":
                return new ComputeRegionTargetHttpProxy(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionTargetHttpsProxy:ComputeRegionTargetHttpsProxy":
                return new ComputeRegionTargetHttpsProxy(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionTargetTcpProxy:ComputeRegionTargetTcpProxy":
                return new ComputeRegionTargetTcpProxy(name, <any>undefined, { urn })
            case "google-beta:index/computeRegionUrlMap:ComputeRegionUrlMap":
                return new ComputeRegionUrlMap(name, <any>undefined, { urn })
            case "google-beta:index/computeReservation:ComputeReservation":
                return new ComputeReservation(name, <any>undefined, { urn })
            case "google-beta:index/computeResizeRequest:ComputeResizeRequest":
                return new ComputeResizeRequest(name, <any>undefined, { urn })
            case "google-beta:index/computeResourcePolicy:ComputeResourcePolicy":
                return new ComputeResourcePolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeRoute:ComputeRoute":
                return new ComputeRoute(name, <any>undefined, { urn })
            case "google-beta:index/computeRouter:ComputeRouter":
                return new ComputeRouter(name, <any>undefined, { urn })
            case "google-beta:index/computeRouterInterface:ComputeRouterInterface":
                return new ComputeRouterInterface(name, <any>undefined, { urn })
            case "google-beta:index/computeRouterNat:ComputeRouterNat":
                return new ComputeRouterNat(name, <any>undefined, { urn })
            case "google-beta:index/computeRouterPeer:ComputeRouterPeer":
                return new ComputeRouterPeer(name, <any>undefined, { urn })
            case "google-beta:index/computeRouterRoutePolicy:ComputeRouterRoutePolicy":
                return new ComputeRouterRoutePolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeSecurityPolicy:ComputeSecurityPolicy":
                return new ComputeSecurityPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeSecurityPolicyRule:ComputeSecurityPolicyRule":
                return new ComputeSecurityPolicyRule(name, <any>undefined, { urn })
            case "google-beta:index/computeServiceAttachment:ComputeServiceAttachment":
                return new ComputeServiceAttachment(name, <any>undefined, { urn })
            case "google-beta:index/computeSharedVpcHostProject:ComputeSharedVpcHostProject":
                return new ComputeSharedVpcHostProject(name, <any>undefined, { urn })
            case "google-beta:index/computeSharedVpcServiceProject:ComputeSharedVpcServiceProject":
                return new ComputeSharedVpcServiceProject(name, <any>undefined, { urn })
            case "google-beta:index/computeSnapshot:ComputeSnapshot":
                return new ComputeSnapshot(name, <any>undefined, { urn })
            case "google-beta:index/computeSnapshotIamBinding:ComputeSnapshotIamBinding":
                return new ComputeSnapshotIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/computeSnapshotIamMember:ComputeSnapshotIamMember":
                return new ComputeSnapshotIamMember(name, <any>undefined, { urn })
            case "google-beta:index/computeSnapshotIamPolicy:ComputeSnapshotIamPolicy":
                return new ComputeSnapshotIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeSslCertificate:ComputeSslCertificate":
                return new ComputeSslCertificate(name, <any>undefined, { urn })
            case "google-beta:index/computeSslPolicy:ComputeSslPolicy":
                return new ComputeSslPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeSubnetwork:ComputeSubnetwork":
                return new ComputeSubnetwork(name, <any>undefined, { urn })
            case "google-beta:index/computeSubnetworkIamBinding:ComputeSubnetworkIamBinding":
                return new ComputeSubnetworkIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/computeSubnetworkIamMember:ComputeSubnetworkIamMember":
                return new ComputeSubnetworkIamMember(name, <any>undefined, { urn })
            case "google-beta:index/computeSubnetworkIamPolicy:ComputeSubnetworkIamPolicy":
                return new ComputeSubnetworkIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/computeTargetGrpcProxy:ComputeTargetGrpcProxy":
                return new ComputeTargetGrpcProxy(name, <any>undefined, { urn })
            case "google-beta:index/computeTargetHttpProxy:ComputeTargetHttpProxy":
                return new ComputeTargetHttpProxy(name, <any>undefined, { urn })
            case "google-beta:index/computeTargetHttpsProxy:ComputeTargetHttpsProxy":
                return new ComputeTargetHttpsProxy(name, <any>undefined, { urn })
            case "google-beta:index/computeTargetInstance:ComputeTargetInstance":
                return new ComputeTargetInstance(name, <any>undefined, { urn })
            case "google-beta:index/computeTargetPool:ComputeTargetPool":
                return new ComputeTargetPool(name, <any>undefined, { urn })
            case "google-beta:index/computeTargetSslProxy:ComputeTargetSslProxy":
                return new ComputeTargetSslProxy(name, <any>undefined, { urn })
            case "google-beta:index/computeTargetTcpProxy:ComputeTargetTcpProxy":
                return new ComputeTargetTcpProxy(name, <any>undefined, { urn })
            case "google-beta:index/computeUrlMap:ComputeUrlMap":
                return new ComputeUrlMap(name, <any>undefined, { urn })
            case "google-beta:index/computeVpnGateway:ComputeVpnGateway":
                return new ComputeVpnGateway(name, <any>undefined, { urn })
            case "google-beta:index/computeVpnTunnel:ComputeVpnTunnel":
                return new ComputeVpnTunnel(name, <any>undefined, { urn })
            case "google-beta:index/containerAnalysisNote:ContainerAnalysisNote":
                return new ContainerAnalysisNote(name, <any>undefined, { urn })
            case "google-beta:index/containerAnalysisNoteIamBinding:ContainerAnalysisNoteIamBinding":
                return new ContainerAnalysisNoteIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/containerAnalysisNoteIamMember:ContainerAnalysisNoteIamMember":
                return new ContainerAnalysisNoteIamMember(name, <any>undefined, { urn })
            case "google-beta:index/containerAnalysisNoteIamPolicy:ContainerAnalysisNoteIamPolicy":
                return new ContainerAnalysisNoteIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/containerAnalysisOccurrence:ContainerAnalysisOccurrence":
                return new ContainerAnalysisOccurrence(name, <any>undefined, { urn })
            case "google-beta:index/containerAttachedCluster:ContainerAttachedCluster":
                return new ContainerAttachedCluster(name, <any>undefined, { urn })
            case "google-beta:index/containerAwsCluster:ContainerAwsCluster":
                return new ContainerAwsCluster(name, <any>undefined, { urn })
            case "google-beta:index/containerAwsNodePool:ContainerAwsNodePool":
                return new ContainerAwsNodePool(name, <any>undefined, { urn })
            case "google-beta:index/containerAzureClient:ContainerAzureClient":
                return new ContainerAzureClient(name, <any>undefined, { urn })
            case "google-beta:index/containerAzureCluster:ContainerAzureCluster":
                return new ContainerAzureCluster(name, <any>undefined, { urn })
            case "google-beta:index/containerAzureNodePool:ContainerAzureNodePool":
                return new ContainerAzureNodePool(name, <any>undefined, { urn })
            case "google-beta:index/containerCluster:ContainerCluster":
                return new ContainerCluster(name, <any>undefined, { urn })
            case "google-beta:index/containerNodePool:ContainerNodePool":
                return new ContainerNodePool(name, <any>undefined, { urn })
            case "google-beta:index/containerRegistry:ContainerRegistry":
                return new ContainerRegistry(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogEntry:DataCatalogEntry":
                return new DataCatalogEntry(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogEntryGroup:DataCatalogEntryGroup":
                return new DataCatalogEntryGroup(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogEntryGroupIamBinding:DataCatalogEntryGroupIamBinding":
                return new DataCatalogEntryGroupIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogEntryGroupIamMember:DataCatalogEntryGroupIamMember":
                return new DataCatalogEntryGroupIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogEntryGroupIamPolicy:DataCatalogEntryGroupIamPolicy":
                return new DataCatalogEntryGroupIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogPolicyTag:DataCatalogPolicyTag":
                return new DataCatalogPolicyTag(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogPolicyTagIamBinding:DataCatalogPolicyTagIamBinding":
                return new DataCatalogPolicyTagIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogPolicyTagIamMember:DataCatalogPolicyTagIamMember":
                return new DataCatalogPolicyTagIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogPolicyTagIamPolicy:DataCatalogPolicyTagIamPolicy":
                return new DataCatalogPolicyTagIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogTag:DataCatalogTag":
                return new DataCatalogTag(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogTagTemplate:DataCatalogTagTemplate":
                return new DataCatalogTagTemplate(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogTagTemplateIamBinding:DataCatalogTagTemplateIamBinding":
                return new DataCatalogTagTemplateIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogTagTemplateIamMember:DataCatalogTagTemplateIamMember":
                return new DataCatalogTagTemplateIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogTagTemplateIamPolicy:DataCatalogTagTemplateIamPolicy":
                return new DataCatalogTagTemplateIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogTaxonomy:DataCatalogTaxonomy":
                return new DataCatalogTaxonomy(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogTaxonomyIamBinding:DataCatalogTaxonomyIamBinding":
                return new DataCatalogTaxonomyIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogTaxonomyIamMember:DataCatalogTaxonomyIamMember":
                return new DataCatalogTaxonomyIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataCatalogTaxonomyIamPolicy:DataCatalogTaxonomyIamPolicy":
                return new DataCatalogTaxonomyIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataFusionInstance:DataFusionInstance":
                return new DataFusionInstance(name, <any>undefined, { urn })
            case "google-beta:index/dataFusionInstanceIamBinding:DataFusionInstanceIamBinding":
                return new DataFusionInstanceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataFusionInstanceIamMember:DataFusionInstanceIamMember":
                return new DataFusionInstanceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataFusionInstanceIamPolicy:DataFusionInstanceIamPolicy":
                return new DataFusionInstanceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataLossPreventionDeidentifyTemplate:DataLossPreventionDeidentifyTemplate":
                return new DataLossPreventionDeidentifyTemplate(name, <any>undefined, { urn })
            case "google-beta:index/dataLossPreventionDiscoveryConfig:DataLossPreventionDiscoveryConfig":
                return new DataLossPreventionDiscoveryConfig(name, <any>undefined, { urn })
            case "google-beta:index/dataLossPreventionInspectTemplate:DataLossPreventionInspectTemplate":
                return new DataLossPreventionInspectTemplate(name, <any>undefined, { urn })
            case "google-beta:index/dataLossPreventionJobTrigger:DataLossPreventionJobTrigger":
                return new DataLossPreventionJobTrigger(name, <any>undefined, { urn })
            case "google-beta:index/dataLossPreventionStoredInfoType:DataLossPreventionStoredInfoType":
                return new DataLossPreventionStoredInfoType(name, <any>undefined, { urn })
            case "google-beta:index/dataPipelinePipeline:DataPipelinePipeline":
                return new DataPipelinePipeline(name, <any>undefined, { urn })
            case "google-beta:index/databaseMigrationServiceConnectionProfile:DatabaseMigrationServiceConnectionProfile":
                return new DatabaseMigrationServiceConnectionProfile(name, <any>undefined, { urn })
            case "google-beta:index/databaseMigrationServicePrivateConnection:DatabaseMigrationServicePrivateConnection":
                return new DatabaseMigrationServicePrivateConnection(name, <any>undefined, { urn })
            case "google-beta:index/dataflowFlexTemplateJob:DataflowFlexTemplateJob":
                return new DataflowFlexTemplateJob(name, <any>undefined, { urn })
            case "google-beta:index/dataflowJob:DataflowJob":
                return new DataflowJob(name, <any>undefined, { urn })
            case "google-beta:index/dataformRepository:DataformRepository":
                return new DataformRepository(name, <any>undefined, { urn })
            case "google-beta:index/dataformRepositoryIamBinding:DataformRepositoryIamBinding":
                return new DataformRepositoryIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataformRepositoryIamMember:DataformRepositoryIamMember":
                return new DataformRepositoryIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataformRepositoryIamPolicy:DataformRepositoryIamPolicy":
                return new DataformRepositoryIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataformRepositoryReleaseConfig:DataformRepositoryReleaseConfig":
                return new DataformRepositoryReleaseConfig(name, <any>undefined, { urn })
            case "google-beta:index/dataformRepositoryWorkflowConfig:DataformRepositoryWorkflowConfig":
                return new DataformRepositoryWorkflowConfig(name, <any>undefined, { urn })
            case "google-beta:index/dataplexAspectType:DataplexAspectType":
                return new DataplexAspectType(name, <any>undefined, { urn })
            case "google-beta:index/dataplexAspectTypeIamBinding:DataplexAspectTypeIamBinding":
                return new DataplexAspectTypeIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataplexAspectTypeIamMember:DataplexAspectTypeIamMember":
                return new DataplexAspectTypeIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataplexAspectTypeIamPolicy:DataplexAspectTypeIamPolicy":
                return new DataplexAspectTypeIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataplexAsset:DataplexAsset":
                return new DataplexAsset(name, <any>undefined, { urn })
            case "google-beta:index/dataplexAssetIamBinding:DataplexAssetIamBinding":
                return new DataplexAssetIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataplexAssetIamMember:DataplexAssetIamMember":
                return new DataplexAssetIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataplexAssetIamPolicy:DataplexAssetIamPolicy":
                return new DataplexAssetIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataplexDatascan:DataplexDatascan":
                return new DataplexDatascan(name, <any>undefined, { urn })
            case "google-beta:index/dataplexDatascanIamBinding:DataplexDatascanIamBinding":
                return new DataplexDatascanIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataplexDatascanIamMember:DataplexDatascanIamMember":
                return new DataplexDatascanIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataplexDatascanIamPolicy:DataplexDatascanIamPolicy":
                return new DataplexDatascanIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataplexEntryGroup:DataplexEntryGroup":
                return new DataplexEntryGroup(name, <any>undefined, { urn })
            case "google-beta:index/dataplexEntryGroupIamBinding:DataplexEntryGroupIamBinding":
                return new DataplexEntryGroupIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataplexEntryGroupIamMember:DataplexEntryGroupIamMember":
                return new DataplexEntryGroupIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataplexEntryGroupIamPolicy:DataplexEntryGroupIamPolicy":
                return new DataplexEntryGroupIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataplexEntryType:DataplexEntryType":
                return new DataplexEntryType(name, <any>undefined, { urn })
            case "google-beta:index/dataplexEntryTypeIamBinding:DataplexEntryTypeIamBinding":
                return new DataplexEntryTypeIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataplexEntryTypeIamMember:DataplexEntryTypeIamMember":
                return new DataplexEntryTypeIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataplexEntryTypeIamPolicy:DataplexEntryTypeIamPolicy":
                return new DataplexEntryTypeIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataplexLake:DataplexLake":
                return new DataplexLake(name, <any>undefined, { urn })
            case "google-beta:index/dataplexLakeIamBinding:DataplexLakeIamBinding":
                return new DataplexLakeIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataplexLakeIamMember:DataplexLakeIamMember":
                return new DataplexLakeIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataplexLakeIamPolicy:DataplexLakeIamPolicy":
                return new DataplexLakeIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataplexTask:DataplexTask":
                return new DataplexTask(name, <any>undefined, { urn })
            case "google-beta:index/dataplexTaskIamBinding:DataplexTaskIamBinding":
                return new DataplexTaskIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataplexTaskIamMember:DataplexTaskIamMember":
                return new DataplexTaskIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataplexTaskIamPolicy:DataplexTaskIamPolicy":
                return new DataplexTaskIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataplexZone:DataplexZone":
                return new DataplexZone(name, <any>undefined, { urn })
            case "google-beta:index/dataplexZoneIamBinding:DataplexZoneIamBinding":
                return new DataplexZoneIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataplexZoneIamMember:DataplexZoneIamMember":
                return new DataplexZoneIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataplexZoneIamPolicy:DataplexZoneIamPolicy":
                return new DataplexZoneIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataprocAutoscalingPolicy:DataprocAutoscalingPolicy":
                return new DataprocAutoscalingPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataprocAutoscalingPolicyIamBinding:DataprocAutoscalingPolicyIamBinding":
                return new DataprocAutoscalingPolicyIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataprocAutoscalingPolicyIamMember:DataprocAutoscalingPolicyIamMember":
                return new DataprocAutoscalingPolicyIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataprocAutoscalingPolicyIamPolicy:DataprocAutoscalingPolicyIamPolicy":
                return new DataprocAutoscalingPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataprocCluster:DataprocCluster":
                return new DataprocCluster(name, <any>undefined, { urn })
            case "google-beta:index/dataprocClusterIamBinding:DataprocClusterIamBinding":
                return new DataprocClusterIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataprocClusterIamMember:DataprocClusterIamMember":
                return new DataprocClusterIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataprocClusterIamPolicy:DataprocClusterIamPolicy":
                return new DataprocClusterIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataprocJob:DataprocJob":
                return new DataprocJob(name, <any>undefined, { urn })
            case "google-beta:index/dataprocJobIamBinding:DataprocJobIamBinding":
                return new DataprocJobIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataprocJobIamMember:DataprocJobIamMember":
                return new DataprocJobIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataprocJobIamPolicy:DataprocJobIamPolicy":
                return new DataprocJobIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataprocMetastoreFederation:DataprocMetastoreFederation":
                return new DataprocMetastoreFederation(name, <any>undefined, { urn })
            case "google-beta:index/dataprocMetastoreFederationIamBinding:DataprocMetastoreFederationIamBinding":
                return new DataprocMetastoreFederationIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataprocMetastoreFederationIamMember:DataprocMetastoreFederationIamMember":
                return new DataprocMetastoreFederationIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataprocMetastoreFederationIamPolicy:DataprocMetastoreFederationIamPolicy":
                return new DataprocMetastoreFederationIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataprocMetastoreService:DataprocMetastoreService":
                return new DataprocMetastoreService(name, <any>undefined, { urn })
            case "google-beta:index/dataprocMetastoreServiceIamBinding:DataprocMetastoreServiceIamBinding":
                return new DataprocMetastoreServiceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dataprocMetastoreServiceIamMember:DataprocMetastoreServiceIamMember":
                return new DataprocMetastoreServiceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dataprocMetastoreServiceIamPolicy:DataprocMetastoreServiceIamPolicy":
                return new DataprocMetastoreServiceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dataprocWorkflowTemplate:DataprocWorkflowTemplate":
                return new DataprocWorkflowTemplate(name, <any>undefined, { urn })
            case "google-beta:index/datastreamConnectionProfile:DatastreamConnectionProfile":
                return new DatastreamConnectionProfile(name, <any>undefined, { urn })
            case "google-beta:index/datastreamPrivateConnection:DatastreamPrivateConnection":
                return new DatastreamPrivateConnection(name, <any>undefined, { urn })
            case "google-beta:index/datastreamStream:DatastreamStream":
                return new DatastreamStream(name, <any>undefined, { urn })
            case "google-beta:index/deploymentManagerDeployment:DeploymentManagerDeployment":
                return new DeploymentManagerDeployment(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowAgent:DialogflowAgent":
                return new DialogflowAgent(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowCxAgent:DialogflowCxAgent":
                return new DialogflowCxAgent(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowCxEntityType:DialogflowCxEntityType":
                return new DialogflowCxEntityType(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowCxEnvironment:DialogflowCxEnvironment":
                return new DialogflowCxEnvironment(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowCxFlow:DialogflowCxFlow":
                return new DialogflowCxFlow(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowCxIntent:DialogflowCxIntent":
                return new DialogflowCxIntent(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowCxPage:DialogflowCxPage":
                return new DialogflowCxPage(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowCxSecuritySettings:DialogflowCxSecuritySettings":
                return new DialogflowCxSecuritySettings(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowCxTestCase:DialogflowCxTestCase":
                return new DialogflowCxTestCase(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowCxVersion:DialogflowCxVersion":
                return new DialogflowCxVersion(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowCxWebhook:DialogflowCxWebhook":
                return new DialogflowCxWebhook(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowEntityType:DialogflowEntityType":
                return new DialogflowEntityType(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowFulfillment:DialogflowFulfillment":
                return new DialogflowFulfillment(name, <any>undefined, { urn })
            case "google-beta:index/dialogflowIntent:DialogflowIntent":
                return new DialogflowIntent(name, <any>undefined, { urn })
            case "google-beta:index/discoveryEngineChatEngine:DiscoveryEngineChatEngine":
                return new DiscoveryEngineChatEngine(name, <any>undefined, { urn })
            case "google-beta:index/discoveryEngineDataStore:DiscoveryEngineDataStore":
                return new DiscoveryEngineDataStore(name, <any>undefined, { urn })
            case "google-beta:index/discoveryEngineSchema:DiscoveryEngineSchema":
                return new DiscoveryEngineSchema(name, <any>undefined, { urn })
            case "google-beta:index/discoveryEngineSearchEngine:DiscoveryEngineSearchEngine":
                return new DiscoveryEngineSearchEngine(name, <any>undefined, { urn })
            case "google-beta:index/dnsManagedZone:DnsManagedZone":
                return new DnsManagedZone(name, <any>undefined, { urn })
            case "google-beta:index/dnsManagedZoneIamBinding:DnsManagedZoneIamBinding":
                return new DnsManagedZoneIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/dnsManagedZoneIamMember:DnsManagedZoneIamMember":
                return new DnsManagedZoneIamMember(name, <any>undefined, { urn })
            case "google-beta:index/dnsManagedZoneIamPolicy:DnsManagedZoneIamPolicy":
                return new DnsManagedZoneIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dnsPolicy:DnsPolicy":
                return new DnsPolicy(name, <any>undefined, { urn })
            case "google-beta:index/dnsRecordSet:DnsRecordSet":
                return new DnsRecordSet(name, <any>undefined, { urn })
            case "google-beta:index/dnsResponsePolicy:DnsResponsePolicy":
                return new DnsResponsePolicy(name, <any>undefined, { urn })
            case "google-beta:index/dnsResponsePolicyRule:DnsResponsePolicyRule":
                return new DnsResponsePolicyRule(name, <any>undefined, { urn })
            case "google-beta:index/documentAiProcessor:DocumentAiProcessor":
                return new DocumentAiProcessor(name, <any>undefined, { urn })
            case "google-beta:index/documentAiProcessorDefaultVersion:DocumentAiProcessorDefaultVersion":
                return new DocumentAiProcessorDefaultVersion(name, <any>undefined, { urn })
            case "google-beta:index/documentAiWarehouseDocumentSchema:DocumentAiWarehouseDocumentSchema":
                return new DocumentAiWarehouseDocumentSchema(name, <any>undefined, { urn })
            case "google-beta:index/documentAiWarehouseLocation:DocumentAiWarehouseLocation":
                return new DocumentAiWarehouseLocation(name, <any>undefined, { urn })
            case "google-beta:index/edgecontainerCluster:EdgecontainerCluster":
                return new EdgecontainerCluster(name, <any>undefined, { urn })
            case "google-beta:index/edgecontainerNodePool:EdgecontainerNodePool":
                return new EdgecontainerNodePool(name, <any>undefined, { urn })
            case "google-beta:index/edgecontainerVpnConnection:EdgecontainerVpnConnection":
                return new EdgecontainerVpnConnection(name, <any>undefined, { urn })
            case "google-beta:index/edgenetworkNetwork:EdgenetworkNetwork":
                return new EdgenetworkNetwork(name, <any>undefined, { urn })
            case "google-beta:index/edgenetworkSubnet:EdgenetworkSubnet":
                return new EdgenetworkSubnet(name, <any>undefined, { urn })
            case "google-beta:index/endpointsService:EndpointsService":
                return new EndpointsService(name, <any>undefined, { urn })
            case "google-beta:index/endpointsServiceConsumersIamBinding:EndpointsServiceConsumersIamBinding":
                return new EndpointsServiceConsumersIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/endpointsServiceConsumersIamMember:EndpointsServiceConsumersIamMember":
                return new EndpointsServiceConsumersIamMember(name, <any>undefined, { urn })
            case "google-beta:index/endpointsServiceConsumersIamPolicy:EndpointsServiceConsumersIamPolicy":
                return new EndpointsServiceConsumersIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/endpointsServiceIamBinding:EndpointsServiceIamBinding":
                return new EndpointsServiceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/endpointsServiceIamMember:EndpointsServiceIamMember":
                return new EndpointsServiceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/endpointsServiceIamPolicy:EndpointsServiceIamPolicy":
                return new EndpointsServiceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/essentialContactsContact:EssentialContactsContact":
                return new EssentialContactsContact(name, <any>undefined, { urn })
            case "google-beta:index/eventarcChannel:EventarcChannel":
                return new EventarcChannel(name, <any>undefined, { urn })
            case "google-beta:index/eventarcGoogleChannelConfig:EventarcGoogleChannelConfig":
                return new EventarcGoogleChannelConfig(name, <any>undefined, { urn })
            case "google-beta:index/eventarcTrigger:EventarcTrigger":
                return new EventarcTrigger(name, <any>undefined, { urn })
            case "google-beta:index/filestoreBackup:FilestoreBackup":
                return new FilestoreBackup(name, <any>undefined, { urn })
            case "google-beta:index/filestoreInstance:FilestoreInstance":
                return new FilestoreInstance(name, <any>undefined, { urn })
            case "google-beta:index/filestoreSnapshot:FilestoreSnapshot":
                return new FilestoreSnapshot(name, <any>undefined, { urn })
            case "google-beta:index/firebaseAndroidApp:FirebaseAndroidApp":
                return new FirebaseAndroidApp(name, <any>undefined, { urn })
            case "google-beta:index/firebaseAppCheckAppAttestConfig:FirebaseAppCheckAppAttestConfig":
                return new FirebaseAppCheckAppAttestConfig(name, <any>undefined, { urn })
            case "google-beta:index/firebaseAppCheckDebugToken:FirebaseAppCheckDebugToken":
                return new FirebaseAppCheckDebugToken(name, <any>undefined, { urn })
            case "google-beta:index/firebaseAppCheckDeviceCheckConfig:FirebaseAppCheckDeviceCheckConfig":
                return new FirebaseAppCheckDeviceCheckConfig(name, <any>undefined, { urn })
            case "google-beta:index/firebaseAppCheckPlayIntegrityConfig:FirebaseAppCheckPlayIntegrityConfig":
                return new FirebaseAppCheckPlayIntegrityConfig(name, <any>undefined, { urn })
            case "google-beta:index/firebaseAppCheckRecaptchaEnterpriseConfig:FirebaseAppCheckRecaptchaEnterpriseConfig":
                return new FirebaseAppCheckRecaptchaEnterpriseConfig(name, <any>undefined, { urn })
            case "google-beta:index/firebaseAppCheckRecaptchaV3Config:FirebaseAppCheckRecaptchaV3Config":
                return new FirebaseAppCheckRecaptchaV3Config(name, <any>undefined, { urn })
            case "google-beta:index/firebaseAppCheckServiceConfig:FirebaseAppCheckServiceConfig":
                return new FirebaseAppCheckServiceConfig(name, <any>undefined, { urn })
            case "google-beta:index/firebaseAppleApp:FirebaseAppleApp":
                return new FirebaseAppleApp(name, <any>undefined, { urn })
            case "google-beta:index/firebaseDatabaseInstance:FirebaseDatabaseInstance":
                return new FirebaseDatabaseInstance(name, <any>undefined, { urn })
            case "google-beta:index/firebaseExtensionsInstance:FirebaseExtensionsInstance":
                return new FirebaseExtensionsInstance(name, <any>undefined, { urn })
            case "google-beta:index/firebaseHostingChannel:FirebaseHostingChannel":
                return new FirebaseHostingChannel(name, <any>undefined, { urn })
            case "google-beta:index/firebaseHostingCustomDomain:FirebaseHostingCustomDomain":
                return new FirebaseHostingCustomDomain(name, <any>undefined, { urn })
            case "google-beta:index/firebaseHostingRelease:FirebaseHostingRelease":
                return new FirebaseHostingRelease(name, <any>undefined, { urn })
            case "google-beta:index/firebaseHostingSite:FirebaseHostingSite":
                return new FirebaseHostingSite(name, <any>undefined, { urn })
            case "google-beta:index/firebaseHostingVersion:FirebaseHostingVersion":
                return new FirebaseHostingVersion(name, <any>undefined, { urn })
            case "google-beta:index/firebaseProject:FirebaseProject":
                return new FirebaseProject(name, <any>undefined, { urn })
            case "google-beta:index/firebaseStorageBucket:FirebaseStorageBucket":
                return new FirebaseStorageBucket(name, <any>undefined, { urn })
            case "google-beta:index/firebaseWebApp:FirebaseWebApp":
                return new FirebaseWebApp(name, <any>undefined, { urn })
            case "google-beta:index/firebaserulesRelease:FirebaserulesRelease":
                return new FirebaserulesRelease(name, <any>undefined, { urn })
            case "google-beta:index/firebaserulesRuleset:FirebaserulesRuleset":
                return new FirebaserulesRuleset(name, <any>undefined, { urn })
            case "google-beta:index/firestoreBackupSchedule:FirestoreBackupSchedule":
                return new FirestoreBackupSchedule(name, <any>undefined, { urn })
            case "google-beta:index/firestoreDatabase:FirestoreDatabase":
                return new FirestoreDatabase(name, <any>undefined, { urn })
            case "google-beta:index/firestoreDocument:FirestoreDocument":
                return new FirestoreDocument(name, <any>undefined, { urn })
            case "google-beta:index/firestoreField:FirestoreField":
                return new FirestoreField(name, <any>undefined, { urn })
            case "google-beta:index/firestoreIndex:FirestoreIndex":
                return new FirestoreIndex(name, <any>undefined, { urn })
            case "google-beta:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "google-beta:index/folderAccessApprovalSettings:FolderAccessApprovalSettings":
                return new FolderAccessApprovalSettings(name, <any>undefined, { urn })
            case "google-beta:index/folderIamAuditConfig:FolderIamAuditConfig":
                return new FolderIamAuditConfig(name, <any>undefined, { urn })
            case "google-beta:index/folderIamBinding:FolderIamBinding":
                return new FolderIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/folderIamMember:FolderIamMember":
                return new FolderIamMember(name, <any>undefined, { urn })
            case "google-beta:index/folderIamPolicy:FolderIamPolicy":
                return new FolderIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/folderOrganizationPolicy:FolderOrganizationPolicy":
                return new FolderOrganizationPolicy(name, <any>undefined, { urn })
            case "google-beta:index/gkeBackupBackupPlan:GkeBackupBackupPlan":
                return new GkeBackupBackupPlan(name, <any>undefined, { urn })
            case "google-beta:index/gkeBackupBackupPlanIamBinding:GkeBackupBackupPlanIamBinding":
                return new GkeBackupBackupPlanIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/gkeBackupBackupPlanIamMember:GkeBackupBackupPlanIamMember":
                return new GkeBackupBackupPlanIamMember(name, <any>undefined, { urn })
            case "google-beta:index/gkeBackupBackupPlanIamPolicy:GkeBackupBackupPlanIamPolicy":
                return new GkeBackupBackupPlanIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/gkeBackupRestorePlan:GkeBackupRestorePlan":
                return new GkeBackupRestorePlan(name, <any>undefined, { urn })
            case "google-beta:index/gkeBackupRestorePlanIamBinding:GkeBackupRestorePlanIamBinding":
                return new GkeBackupRestorePlanIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/gkeBackupRestorePlanIamMember:GkeBackupRestorePlanIamMember":
                return new GkeBackupRestorePlanIamMember(name, <any>undefined, { urn })
            case "google-beta:index/gkeBackupRestorePlanIamPolicy:GkeBackupRestorePlanIamPolicy":
                return new GkeBackupRestorePlanIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubFeature:GkeHubFeature":
                return new GkeHubFeature(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubFeatureIamBinding:GkeHubFeatureIamBinding":
                return new GkeHubFeatureIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubFeatureIamMember:GkeHubFeatureIamMember":
                return new GkeHubFeatureIamMember(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubFeatureIamPolicy:GkeHubFeatureIamPolicy":
                return new GkeHubFeatureIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubFeatureMembership:GkeHubFeatureMembership":
                return new GkeHubFeatureMembership(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubFleet:GkeHubFleet":
                return new GkeHubFleet(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubMembership:GkeHubMembership":
                return new GkeHubMembership(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubMembershipBinding:GkeHubMembershipBinding":
                return new GkeHubMembershipBinding(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubMembershipIamBinding:GkeHubMembershipIamBinding":
                return new GkeHubMembershipIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubMembershipIamMember:GkeHubMembershipIamMember":
                return new GkeHubMembershipIamMember(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubMembershipIamPolicy:GkeHubMembershipIamPolicy":
                return new GkeHubMembershipIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubMembershipRbacRoleBinding:GkeHubMembershipRbacRoleBinding":
                return new GkeHubMembershipRbacRoleBinding(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubNamespace:GkeHubNamespace":
                return new GkeHubNamespace(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubScope:GkeHubScope":
                return new GkeHubScope(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubScopeIamBinding:GkeHubScopeIamBinding":
                return new GkeHubScopeIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubScopeIamMember:GkeHubScopeIamMember":
                return new GkeHubScopeIamMember(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubScopeIamPolicy:GkeHubScopeIamPolicy":
                return new GkeHubScopeIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/gkeHubScopeRbacRoleBinding:GkeHubScopeRbacRoleBinding":
                return new GkeHubScopeRbacRoleBinding(name, <any>undefined, { urn })
            case "google-beta:index/gkeonpremBareMetalAdminCluster:GkeonpremBareMetalAdminCluster":
                return new GkeonpremBareMetalAdminCluster(name, <any>undefined, { urn })
            case "google-beta:index/gkeonpremBareMetalCluster:GkeonpremBareMetalCluster":
                return new GkeonpremBareMetalCluster(name, <any>undefined, { urn })
            case "google-beta:index/gkeonpremBareMetalNodePool:GkeonpremBareMetalNodePool":
                return new GkeonpremBareMetalNodePool(name, <any>undefined, { urn })
            case "google-beta:index/gkeonpremVmwareCluster:GkeonpremVmwareCluster":
                return new GkeonpremVmwareCluster(name, <any>undefined, { urn })
            case "google-beta:index/gkeonpremVmwareNodePool:GkeonpremVmwareNodePool":
                return new GkeonpremVmwareNodePool(name, <any>undefined, { urn })
            case "google-beta:index/healthcareConsentStore:HealthcareConsentStore":
                return new HealthcareConsentStore(name, <any>undefined, { urn })
            case "google-beta:index/healthcareConsentStoreIamBinding:HealthcareConsentStoreIamBinding":
                return new HealthcareConsentStoreIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/healthcareConsentStoreIamMember:HealthcareConsentStoreIamMember":
                return new HealthcareConsentStoreIamMember(name, <any>undefined, { urn })
            case "google-beta:index/healthcareConsentStoreIamPolicy:HealthcareConsentStoreIamPolicy":
                return new HealthcareConsentStoreIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/healthcareDataset:HealthcareDataset":
                return new HealthcareDataset(name, <any>undefined, { urn })
            case "google-beta:index/healthcareDatasetIamBinding:HealthcareDatasetIamBinding":
                return new HealthcareDatasetIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/healthcareDatasetIamMember:HealthcareDatasetIamMember":
                return new HealthcareDatasetIamMember(name, <any>undefined, { urn })
            case "google-beta:index/healthcareDatasetIamPolicy:HealthcareDatasetIamPolicy":
                return new HealthcareDatasetIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/healthcareDicomStore:HealthcareDicomStore":
                return new HealthcareDicomStore(name, <any>undefined, { urn })
            case "google-beta:index/healthcareDicomStoreIamBinding:HealthcareDicomStoreIamBinding":
                return new HealthcareDicomStoreIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/healthcareDicomStoreIamMember:HealthcareDicomStoreIamMember":
                return new HealthcareDicomStoreIamMember(name, <any>undefined, { urn })
            case "google-beta:index/healthcareDicomStoreIamPolicy:HealthcareDicomStoreIamPolicy":
                return new HealthcareDicomStoreIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/healthcareFhirStore:HealthcareFhirStore":
                return new HealthcareFhirStore(name, <any>undefined, { urn })
            case "google-beta:index/healthcareFhirStoreIamBinding:HealthcareFhirStoreIamBinding":
                return new HealthcareFhirStoreIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/healthcareFhirStoreIamMember:HealthcareFhirStoreIamMember":
                return new HealthcareFhirStoreIamMember(name, <any>undefined, { urn })
            case "google-beta:index/healthcareFhirStoreIamPolicy:HealthcareFhirStoreIamPolicy":
                return new HealthcareFhirStoreIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/healthcareHl7V2Store:HealthcareHl7V2Store":
                return new HealthcareHl7V2Store(name, <any>undefined, { urn })
            case "google-beta:index/healthcareHl7V2StoreIamBinding:HealthcareHl7V2StoreIamBinding":
                return new HealthcareHl7V2StoreIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/healthcareHl7V2StoreIamMember:HealthcareHl7V2StoreIamMember":
                return new HealthcareHl7V2StoreIamMember(name, <any>undefined, { urn })
            case "google-beta:index/healthcareHl7V2StoreIamPolicy:HealthcareHl7V2StoreIamPolicy":
                return new HealthcareHl7V2StoreIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iamAccessBoundaryPolicy:IamAccessBoundaryPolicy":
                return new IamAccessBoundaryPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iamDenyPolicy:IamDenyPolicy":
                return new IamDenyPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iamWorkforcePool:IamWorkforcePool":
                return new IamWorkforcePool(name, <any>undefined, { urn })
            case "google-beta:index/iamWorkforcePoolProvider:IamWorkforcePoolProvider":
                return new IamWorkforcePoolProvider(name, <any>undefined, { urn })
            case "google-beta:index/iamWorkloadIdentityPool:IamWorkloadIdentityPool":
                return new IamWorkloadIdentityPool(name, <any>undefined, { urn })
            case "google-beta:index/iamWorkloadIdentityPoolProvider:IamWorkloadIdentityPoolProvider":
                return new IamWorkloadIdentityPoolProvider(name, <any>undefined, { urn })
            case "google-beta:index/iapAppEngineServiceIamBinding:IapAppEngineServiceIamBinding":
                return new IapAppEngineServiceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/iapAppEngineServiceIamMember:IapAppEngineServiceIamMember":
                return new IapAppEngineServiceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/iapAppEngineServiceIamPolicy:IapAppEngineServiceIamPolicy":
                return new IapAppEngineServiceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iapAppEngineVersionIamBinding:IapAppEngineVersionIamBinding":
                return new IapAppEngineVersionIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/iapAppEngineVersionIamMember:IapAppEngineVersionIamMember":
                return new IapAppEngineVersionIamMember(name, <any>undefined, { urn })
            case "google-beta:index/iapAppEngineVersionIamPolicy:IapAppEngineVersionIamPolicy":
                return new IapAppEngineVersionIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iapBrand:IapBrand":
                return new IapBrand(name, <any>undefined, { urn })
            case "google-beta:index/iapClient:IapClient":
                return new IapClient(name, <any>undefined, { urn })
            case "google-beta:index/iapTunnelDestGroup:IapTunnelDestGroup":
                return new IapTunnelDestGroup(name, <any>undefined, { urn })
            case "google-beta:index/iapTunnelDestGroupIamBinding:IapTunnelDestGroupIamBinding":
                return new IapTunnelDestGroupIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/iapTunnelDestGroupIamMember:IapTunnelDestGroupIamMember":
                return new IapTunnelDestGroupIamMember(name, <any>undefined, { urn })
            case "google-beta:index/iapTunnelDestGroupIamPolicy:IapTunnelDestGroupIamPolicy":
                return new IapTunnelDestGroupIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iapTunnelIamBinding:IapTunnelIamBinding":
                return new IapTunnelIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/iapTunnelIamMember:IapTunnelIamMember":
                return new IapTunnelIamMember(name, <any>undefined, { urn })
            case "google-beta:index/iapTunnelIamPolicy:IapTunnelIamPolicy":
                return new IapTunnelIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iapTunnelInstanceIamBinding:IapTunnelInstanceIamBinding":
                return new IapTunnelInstanceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/iapTunnelInstanceIamMember:IapTunnelInstanceIamMember":
                return new IapTunnelInstanceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/iapTunnelInstanceIamPolicy:IapTunnelInstanceIamPolicy":
                return new IapTunnelInstanceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iapWebBackendServiceIamBinding:IapWebBackendServiceIamBinding":
                return new IapWebBackendServiceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/iapWebBackendServiceIamMember:IapWebBackendServiceIamMember":
                return new IapWebBackendServiceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/iapWebBackendServiceIamPolicy:IapWebBackendServiceIamPolicy":
                return new IapWebBackendServiceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iapWebIamBinding:IapWebIamBinding":
                return new IapWebIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/iapWebIamMember:IapWebIamMember":
                return new IapWebIamMember(name, <any>undefined, { urn })
            case "google-beta:index/iapWebIamPolicy:IapWebIamPolicy":
                return new IapWebIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iapWebRegionBackendServiceIamBinding:IapWebRegionBackendServiceIamBinding":
                return new IapWebRegionBackendServiceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/iapWebRegionBackendServiceIamMember:IapWebRegionBackendServiceIamMember":
                return new IapWebRegionBackendServiceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/iapWebRegionBackendServiceIamPolicy:IapWebRegionBackendServiceIamPolicy":
                return new IapWebRegionBackendServiceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iapWebTypeAppEngineIamBinding:IapWebTypeAppEngineIamBinding":
                return new IapWebTypeAppEngineIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/iapWebTypeAppEngineIamMember:IapWebTypeAppEngineIamMember":
                return new IapWebTypeAppEngineIamMember(name, <any>undefined, { urn })
            case "google-beta:index/iapWebTypeAppEngineIamPolicy:IapWebTypeAppEngineIamPolicy":
                return new IapWebTypeAppEngineIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/iapWebTypeComputeIamBinding:IapWebTypeComputeIamBinding":
                return new IapWebTypeComputeIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/iapWebTypeComputeIamMember:IapWebTypeComputeIamMember":
                return new IapWebTypeComputeIamMember(name, <any>undefined, { urn })
            case "google-beta:index/iapWebTypeComputeIamPolicy:IapWebTypeComputeIamPolicy":
                return new IapWebTypeComputeIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/identityPlatformConfig:IdentityPlatformConfig":
                return new IdentityPlatformConfig(name, <any>undefined, { urn })
            case "google-beta:index/identityPlatformDefaultSupportedIdpConfig:IdentityPlatformDefaultSupportedIdpConfig":
                return new IdentityPlatformDefaultSupportedIdpConfig(name, <any>undefined, { urn })
            case "google-beta:index/identityPlatformInboundSamlConfig:IdentityPlatformInboundSamlConfig":
                return new IdentityPlatformInboundSamlConfig(name, <any>undefined, { urn })
            case "google-beta:index/identityPlatformOauthIdpConfig:IdentityPlatformOauthIdpConfig":
                return new IdentityPlatformOauthIdpConfig(name, <any>undefined, { urn })
            case "google-beta:index/identityPlatformTenant:IdentityPlatformTenant":
                return new IdentityPlatformTenant(name, <any>undefined, { urn })
            case "google-beta:index/identityPlatformTenantDefaultSupportedIdpConfig:IdentityPlatformTenantDefaultSupportedIdpConfig":
                return new IdentityPlatformTenantDefaultSupportedIdpConfig(name, <any>undefined, { urn })
            case "google-beta:index/identityPlatformTenantInboundSamlConfig:IdentityPlatformTenantInboundSamlConfig":
                return new IdentityPlatformTenantInboundSamlConfig(name, <any>undefined, { urn })
            case "google-beta:index/identityPlatformTenantOauthIdpConfig:IdentityPlatformTenantOauthIdpConfig":
                return new IdentityPlatformTenantOauthIdpConfig(name, <any>undefined, { urn })
            case "google-beta:index/integrationConnectorsConnection:IntegrationConnectorsConnection":
                return new IntegrationConnectorsConnection(name, <any>undefined, { urn })
            case "google-beta:index/integrationConnectorsEndpointAttachment:IntegrationConnectorsEndpointAttachment":
                return new IntegrationConnectorsEndpointAttachment(name, <any>undefined, { urn })
            case "google-beta:index/integrationConnectorsManagedZone:IntegrationConnectorsManagedZone":
                return new IntegrationConnectorsManagedZone(name, <any>undefined, { urn })
            case "google-beta:index/integrationsAuthConfig:IntegrationsAuthConfig":
                return new IntegrationsAuthConfig(name, <any>undefined, { urn })
            case "google-beta:index/integrationsClient:IntegrationsClient":
                return new IntegrationsClient(name, <any>undefined, { urn })
            case "google-beta:index/kmsAutokeyConfig:KmsAutokeyConfig":
                return new KmsAutokeyConfig(name, <any>undefined, { urn })
            case "google-beta:index/kmsCryptoKey:KmsCryptoKey":
                return new KmsCryptoKey(name, <any>undefined, { urn })
            case "google-beta:index/kmsCryptoKeyIamBinding:KmsCryptoKeyIamBinding":
                return new KmsCryptoKeyIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/kmsCryptoKeyIamMember:KmsCryptoKeyIamMember":
                return new KmsCryptoKeyIamMember(name, <any>undefined, { urn })
            case "google-beta:index/kmsCryptoKeyIamPolicy:KmsCryptoKeyIamPolicy":
                return new KmsCryptoKeyIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/kmsCryptoKeyVersion:KmsCryptoKeyVersion":
                return new KmsCryptoKeyVersion(name, <any>undefined, { urn })
            case "google-beta:index/kmsEkmConnection:KmsEkmConnection":
                return new KmsEkmConnection(name, <any>undefined, { urn })
            case "google-beta:index/kmsEkmConnectionIamBinding:KmsEkmConnectionIamBinding":
                return new KmsEkmConnectionIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/kmsEkmConnectionIamMember:KmsEkmConnectionIamMember":
                return new KmsEkmConnectionIamMember(name, <any>undefined, { urn })
            case "google-beta:index/kmsEkmConnectionIamPolicy:KmsEkmConnectionIamPolicy":
                return new KmsEkmConnectionIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/kmsKeyHandle:KmsKeyHandle":
                return new KmsKeyHandle(name, <any>undefined, { urn })
            case "google-beta:index/kmsKeyRing:KmsKeyRing":
                return new KmsKeyRing(name, <any>undefined, { urn })
            case "google-beta:index/kmsKeyRingIamBinding:KmsKeyRingIamBinding":
                return new KmsKeyRingIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/kmsKeyRingIamMember:KmsKeyRingIamMember":
                return new KmsKeyRingIamMember(name, <any>undefined, { urn })
            case "google-beta:index/kmsKeyRingIamPolicy:KmsKeyRingIamPolicy":
                return new KmsKeyRingIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/kmsKeyRingImportJob:KmsKeyRingImportJob":
                return new KmsKeyRingImportJob(name, <any>undefined, { urn })
            case "google-beta:index/kmsSecretCiphertext:KmsSecretCiphertext":
                return new KmsSecretCiphertext(name, <any>undefined, { urn })
            case "google-beta:index/loggingBillingAccountBucketConfig:LoggingBillingAccountBucketConfig":
                return new LoggingBillingAccountBucketConfig(name, <any>undefined, { urn })
            case "google-beta:index/loggingBillingAccountExclusion:LoggingBillingAccountExclusion":
                return new LoggingBillingAccountExclusion(name, <any>undefined, { urn })
            case "google-beta:index/loggingBillingAccountSink:LoggingBillingAccountSink":
                return new LoggingBillingAccountSink(name, <any>undefined, { urn })
            case "google-beta:index/loggingFolderBucketConfig:LoggingFolderBucketConfig":
                return new LoggingFolderBucketConfig(name, <any>undefined, { urn })
            case "google-beta:index/loggingFolderExclusion:LoggingFolderExclusion":
                return new LoggingFolderExclusion(name, <any>undefined, { urn })
            case "google-beta:index/loggingFolderSettings:LoggingFolderSettings":
                return new LoggingFolderSettings(name, <any>undefined, { urn })
            case "google-beta:index/loggingFolderSink:LoggingFolderSink":
                return new LoggingFolderSink(name, <any>undefined, { urn })
            case "google-beta:index/loggingLinkedDataset:LoggingLinkedDataset":
                return new LoggingLinkedDataset(name, <any>undefined, { urn })
            case "google-beta:index/loggingLogView:LoggingLogView":
                return new LoggingLogView(name, <any>undefined, { urn })
            case "google-beta:index/loggingLogViewIamBinding:LoggingLogViewIamBinding":
                return new LoggingLogViewIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/loggingLogViewIamMember:LoggingLogViewIamMember":
                return new LoggingLogViewIamMember(name, <any>undefined, { urn })
            case "google-beta:index/loggingLogViewIamPolicy:LoggingLogViewIamPolicy":
                return new LoggingLogViewIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/loggingMetric:LoggingMetric":
                return new LoggingMetric(name, <any>undefined, { urn })
            case "google-beta:index/loggingOrganizationBucketConfig:LoggingOrganizationBucketConfig":
                return new LoggingOrganizationBucketConfig(name, <any>undefined, { urn })
            case "google-beta:index/loggingOrganizationExclusion:LoggingOrganizationExclusion":
                return new LoggingOrganizationExclusion(name, <any>undefined, { urn })
            case "google-beta:index/loggingOrganizationSettings:LoggingOrganizationSettings":
                return new LoggingOrganizationSettings(name, <any>undefined, { urn })
            case "google-beta:index/loggingOrganizationSink:LoggingOrganizationSink":
                return new LoggingOrganizationSink(name, <any>undefined, { urn })
            case "google-beta:index/loggingProjectBucketConfig:LoggingProjectBucketConfig":
                return new LoggingProjectBucketConfig(name, <any>undefined, { urn })
            case "google-beta:index/loggingProjectExclusion:LoggingProjectExclusion":
                return new LoggingProjectExclusion(name, <any>undefined, { urn })
            case "google-beta:index/loggingProjectSink:LoggingProjectSink":
                return new LoggingProjectSink(name, <any>undefined, { urn })
            case "google-beta:index/lookerInstance:LookerInstance":
                return new LookerInstance(name, <any>undefined, { urn })
            case "google-beta:index/managedKafkaCluster:ManagedKafkaCluster":
                return new ManagedKafkaCluster(name, <any>undefined, { urn })
            case "google-beta:index/managedKafkaTopic:ManagedKafkaTopic":
                return new ManagedKafkaTopic(name, <any>undefined, { urn })
            case "google-beta:index/memcacheInstance:MemcacheInstance":
                return new MemcacheInstance(name, <any>undefined, { urn })
            case "google-beta:index/migrationCenterGroup:MigrationCenterGroup":
                return new MigrationCenterGroup(name, <any>undefined, { urn })
            case "google-beta:index/migrationCenterPreferenceSet:MigrationCenterPreferenceSet":
                return new MigrationCenterPreferenceSet(name, <any>undefined, { urn })
            case "google-beta:index/mlEngineModel:MlEngineModel":
                return new MlEngineModel(name, <any>undefined, { urn })
            case "google-beta:index/monitoringAlertPolicy:MonitoringAlertPolicy":
                return new MonitoringAlertPolicy(name, <any>undefined, { urn })
            case "google-beta:index/monitoringCustomService:MonitoringCustomService":
                return new MonitoringCustomService(name, <any>undefined, { urn })
            case "google-beta:index/monitoringDashboard:MonitoringDashboard":
                return new MonitoringDashboard(name, <any>undefined, { urn })
            case "google-beta:index/monitoringGroup:MonitoringGroup":
                return new MonitoringGroup(name, <any>undefined, { urn })
            case "google-beta:index/monitoringMetricDescriptor:MonitoringMetricDescriptor":
                return new MonitoringMetricDescriptor(name, <any>undefined, { urn })
            case "google-beta:index/monitoringMonitoredProject:MonitoringMonitoredProject":
                return new MonitoringMonitoredProject(name, <any>undefined, { urn })
            case "google-beta:index/monitoringNotificationChannel:MonitoringNotificationChannel":
                return new MonitoringNotificationChannel(name, <any>undefined, { urn })
            case "google-beta:index/monitoringService:MonitoringService":
                return new MonitoringService(name, <any>undefined, { urn })
            case "google-beta:index/monitoringSlo:MonitoringSlo":
                return new MonitoringSlo(name, <any>undefined, { urn })
            case "google-beta:index/monitoringUptimeCheckConfig:MonitoringUptimeCheckConfig":
                return new MonitoringUptimeCheckConfig(name, <any>undefined, { urn })
            case "google-beta:index/netappActiveDirectory:NetappActiveDirectory":
                return new NetappActiveDirectory(name, <any>undefined, { urn })
            case "google-beta:index/netappBackup:NetappBackup":
                return new NetappBackup(name, <any>undefined, { urn })
            case "google-beta:index/netappBackupPolicy:NetappBackupPolicy":
                return new NetappBackupPolicy(name, <any>undefined, { urn })
            case "google-beta:index/netappBackupVault:NetappBackupVault":
                return new NetappBackupVault(name, <any>undefined, { urn })
            case "google-beta:index/netappKmsconfig:NetappKmsconfig":
                return new NetappKmsconfig(name, <any>undefined, { urn })
            case "google-beta:index/netappStoragePool:NetappStoragePool":
                return new NetappStoragePool(name, <any>undefined, { urn })
            case "google-beta:index/netappVolume:NetappVolume":
                return new NetappVolume(name, <any>undefined, { urn })
            case "google-beta:index/netappVolumeReplication:NetappVolumeReplication":
                return new NetappVolumeReplication(name, <any>undefined, { urn })
            case "google-beta:index/netappVolumeSnapshot:NetappVolumeSnapshot":
                return new NetappVolumeSnapshot(name, <any>undefined, { urn })
            case "google-beta:index/networkConnectivityHub:NetworkConnectivityHub":
                return new NetworkConnectivityHub(name, <any>undefined, { urn })
            case "google-beta:index/networkConnectivityInternalRange:NetworkConnectivityInternalRange":
                return new NetworkConnectivityInternalRange(name, <any>undefined, { urn })
            case "google-beta:index/networkConnectivityPolicyBasedRoute:NetworkConnectivityPolicyBasedRoute":
                return new NetworkConnectivityPolicyBasedRoute(name, <any>undefined, { urn })
            case "google-beta:index/networkConnectivityRegionalEndpoint:NetworkConnectivityRegionalEndpoint":
                return new NetworkConnectivityRegionalEndpoint(name, <any>undefined, { urn })
            case "google-beta:index/networkConnectivityServiceConnectionPolicy:NetworkConnectivityServiceConnectionPolicy":
                return new NetworkConnectivityServiceConnectionPolicy(name, <any>undefined, { urn })
            case "google-beta:index/networkConnectivitySpoke:NetworkConnectivitySpoke":
                return new NetworkConnectivitySpoke(name, <any>undefined, { urn })
            case "google-beta:index/networkManagementConnectivityTest:NetworkManagementConnectivityTest":
                return new NetworkManagementConnectivityTest(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityAddressGroup:NetworkSecurityAddressGroup":
                return new NetworkSecurityAddressGroup(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityAddressGroupIamBinding:NetworkSecurityAddressGroupIamBinding":
                return new NetworkSecurityAddressGroupIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityAddressGroupIamMember:NetworkSecurityAddressGroupIamMember":
                return new NetworkSecurityAddressGroupIamMember(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityAddressGroupIamPolicy:NetworkSecurityAddressGroupIamPolicy":
                return new NetworkSecurityAddressGroupIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityAuthorizationPolicy:NetworkSecurityAuthorizationPolicy":
                return new NetworkSecurityAuthorizationPolicy(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityClientTlsPolicy:NetworkSecurityClientTlsPolicy":
                return new NetworkSecurityClientTlsPolicy(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityFirewallEndpoint:NetworkSecurityFirewallEndpoint":
                return new NetworkSecurityFirewallEndpoint(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityFirewallEndpointAssociation:NetworkSecurityFirewallEndpointAssociation":
                return new NetworkSecurityFirewallEndpointAssociation(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityGatewaySecurityPolicy:NetworkSecurityGatewaySecurityPolicy":
                return new NetworkSecurityGatewaySecurityPolicy(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityGatewaySecurityPolicyRule:NetworkSecurityGatewaySecurityPolicyRule":
                return new NetworkSecurityGatewaySecurityPolicyRule(name, <any>undefined, { urn })
            case "google-beta:index/networkSecuritySecurityProfile:NetworkSecuritySecurityProfile":
                return new NetworkSecuritySecurityProfile(name, <any>undefined, { urn })
            case "google-beta:index/networkSecuritySecurityProfileGroup:NetworkSecuritySecurityProfileGroup":
                return new NetworkSecuritySecurityProfileGroup(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityServerTlsPolicy:NetworkSecurityServerTlsPolicy":
                return new NetworkSecurityServerTlsPolicy(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityTlsInspectionPolicy:NetworkSecurityTlsInspectionPolicy":
                return new NetworkSecurityTlsInspectionPolicy(name, <any>undefined, { urn })
            case "google-beta:index/networkSecurityUrlLists:NetworkSecurityUrlLists":
                return new NetworkSecurityUrlLists(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesEdgeCacheKeyset:NetworkServicesEdgeCacheKeyset":
                return new NetworkServicesEdgeCacheKeyset(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesEdgeCacheOrigin:NetworkServicesEdgeCacheOrigin":
                return new NetworkServicesEdgeCacheOrigin(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesEdgeCacheService:NetworkServicesEdgeCacheService":
                return new NetworkServicesEdgeCacheService(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesEndpointPolicy:NetworkServicesEndpointPolicy":
                return new NetworkServicesEndpointPolicy(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesGateway:NetworkServicesGateway":
                return new NetworkServicesGateway(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesGrpcRoute:NetworkServicesGrpcRoute":
                return new NetworkServicesGrpcRoute(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesHttpRoute:NetworkServicesHttpRoute":
                return new NetworkServicesHttpRoute(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesLbRouteExtension:NetworkServicesLbRouteExtension":
                return new NetworkServicesLbRouteExtension(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesLbTrafficExtension:NetworkServicesLbTrafficExtension":
                return new NetworkServicesLbTrafficExtension(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesMesh:NetworkServicesMesh":
                return new NetworkServicesMesh(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesServiceBinding:NetworkServicesServiceBinding":
                return new NetworkServicesServiceBinding(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesServiceLbPolicies:NetworkServicesServiceLbPolicies":
                return new NetworkServicesServiceLbPolicies(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesTcpRoute:NetworkServicesTcpRoute":
                return new NetworkServicesTcpRoute(name, <any>undefined, { urn })
            case "google-beta:index/networkServicesTlsRoute:NetworkServicesTlsRoute":
                return new NetworkServicesTlsRoute(name, <any>undefined, { urn })
            case "google-beta:index/notebooksEnvironment:NotebooksEnvironment":
                return new NotebooksEnvironment(name, <any>undefined, { urn })
            case "google-beta:index/notebooksInstance:NotebooksInstance":
                return new NotebooksInstance(name, <any>undefined, { urn })
            case "google-beta:index/notebooksInstanceIamBinding:NotebooksInstanceIamBinding":
                return new NotebooksInstanceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/notebooksInstanceIamMember:NotebooksInstanceIamMember":
                return new NotebooksInstanceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/notebooksInstanceIamPolicy:NotebooksInstanceIamPolicy":
                return new NotebooksInstanceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/notebooksLocation:NotebooksLocation":
                return new NotebooksLocation(name, <any>undefined, { urn })
            case "google-beta:index/notebooksRuntime:NotebooksRuntime":
                return new NotebooksRuntime(name, <any>undefined, { urn })
            case "google-beta:index/notebooksRuntimeIamBinding:NotebooksRuntimeIamBinding":
                return new NotebooksRuntimeIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/notebooksRuntimeIamMember:NotebooksRuntimeIamMember":
                return new NotebooksRuntimeIamMember(name, <any>undefined, { urn })
            case "google-beta:index/notebooksRuntimeIamPolicy:NotebooksRuntimeIamPolicy":
                return new NotebooksRuntimeIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/orgPolicyCustomConstraint:OrgPolicyCustomConstraint":
                return new OrgPolicyCustomConstraint(name, <any>undefined, { urn })
            case "google-beta:index/orgPolicyPolicy:OrgPolicyPolicy":
                return new OrgPolicyPolicy(name, <any>undefined, { urn })
            case "google-beta:index/organizationAccessApprovalSettings:OrganizationAccessApprovalSettings":
                return new OrganizationAccessApprovalSettings(name, <any>undefined, { urn })
            case "google-beta:index/organizationIamAuditConfig:OrganizationIamAuditConfig":
                return new OrganizationIamAuditConfig(name, <any>undefined, { urn })
            case "google-beta:index/organizationIamBinding:OrganizationIamBinding":
                return new OrganizationIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/organizationIamCustomRole:OrganizationIamCustomRole":
                return new OrganizationIamCustomRole(name, <any>undefined, { urn })
            case "google-beta:index/organizationIamMember:OrganizationIamMember":
                return new OrganizationIamMember(name, <any>undefined, { urn })
            case "google-beta:index/organizationIamPolicy:OrganizationIamPolicy":
                return new OrganizationIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/organizationPolicy:OrganizationPolicy":
                return new OrganizationPolicy(name, <any>undefined, { urn })
            case "google-beta:index/osConfigGuestPolicies:OsConfigGuestPolicies":
                return new OsConfigGuestPolicies(name, <any>undefined, { urn })
            case "google-beta:index/osConfigOsPolicyAssignment:OsConfigOsPolicyAssignment":
                return new OsConfigOsPolicyAssignment(name, <any>undefined, { urn })
            case "google-beta:index/osConfigPatchDeployment:OsConfigPatchDeployment":
                return new OsConfigPatchDeployment(name, <any>undefined, { urn })
            case "google-beta:index/osLoginSshPublicKey:OsLoginSshPublicKey":
                return new OsLoginSshPublicKey(name, <any>undefined, { urn })
            case "google-beta:index/parallelstoreInstance:ParallelstoreInstance":
                return new ParallelstoreInstance(name, <any>undefined, { urn })
            case "google-beta:index/privatecaCaPool:PrivatecaCaPool":
                return new PrivatecaCaPool(name, <any>undefined, { urn })
            case "google-beta:index/privatecaCaPoolIamBinding:PrivatecaCaPoolIamBinding":
                return new PrivatecaCaPoolIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/privatecaCaPoolIamMember:PrivatecaCaPoolIamMember":
                return new PrivatecaCaPoolIamMember(name, <any>undefined, { urn })
            case "google-beta:index/privatecaCaPoolIamPolicy:PrivatecaCaPoolIamPolicy":
                return new PrivatecaCaPoolIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/privatecaCertificate:PrivatecaCertificate":
                return new PrivatecaCertificate(name, <any>undefined, { urn })
            case "google-beta:index/privatecaCertificateAuthority:PrivatecaCertificateAuthority":
                return new PrivatecaCertificateAuthority(name, <any>undefined, { urn })
            case "google-beta:index/privatecaCertificateTemplate:PrivatecaCertificateTemplate":
                return new PrivatecaCertificateTemplate(name, <any>undefined, { urn })
            case "google-beta:index/privatecaCertificateTemplateIamBinding:PrivatecaCertificateTemplateIamBinding":
                return new PrivatecaCertificateTemplateIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/privatecaCertificateTemplateIamMember:PrivatecaCertificateTemplateIamMember":
                return new PrivatecaCertificateTemplateIamMember(name, <any>undefined, { urn })
            case "google-beta:index/privatecaCertificateTemplateIamPolicy:PrivatecaCertificateTemplateIamPolicy":
                return new PrivatecaCertificateTemplateIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/privilegedAccessManagerEntitlement:PrivilegedAccessManagerEntitlement":
                return new PrivilegedAccessManagerEntitlement(name, <any>undefined, { urn })
            case "google-beta:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "google-beta:index/projectAccessApprovalSettings:ProjectAccessApprovalSettings":
                return new ProjectAccessApprovalSettings(name, <any>undefined, { urn })
            case "google-beta:index/projectDefaultServiceAccounts:ProjectDefaultServiceAccounts":
                return new ProjectDefaultServiceAccounts(name, <any>undefined, { urn })
            case "google-beta:index/projectIamAuditConfig:ProjectIamAuditConfig":
                return new ProjectIamAuditConfig(name, <any>undefined, { urn })
            case "google-beta:index/projectIamBinding:ProjectIamBinding":
                return new ProjectIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/projectIamCustomRole:ProjectIamCustomRole":
                return new ProjectIamCustomRole(name, <any>undefined, { urn })
            case "google-beta:index/projectIamMember:ProjectIamMember":
                return new ProjectIamMember(name, <any>undefined, { urn })
            case "google-beta:index/projectIamMemberRemove:ProjectIamMemberRemove":
                return new ProjectIamMemberRemove(name, <any>undefined, { urn })
            case "google-beta:index/projectIamPolicy:ProjectIamPolicy":
                return new ProjectIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/projectOrganizationPolicy:ProjectOrganizationPolicy":
                return new ProjectOrganizationPolicy(name, <any>undefined, { urn })
            case "google-beta:index/projectService:ProjectService":
                return new ProjectService(name, <any>undefined, { urn })
            case "google-beta:index/projectServiceIdentity:ProjectServiceIdentity":
                return new ProjectServiceIdentity(name, <any>undefined, { urn })
            case "google-beta:index/projectUsageExportBucket:ProjectUsageExportBucket":
                return new ProjectUsageExportBucket(name, <any>undefined, { urn })
            case "google-beta:index/publicCaExternalAccountKey:PublicCaExternalAccountKey":
                return new PublicCaExternalAccountKey(name, <any>undefined, { urn })
            case "google-beta:index/pubsubLiteReservation:PubsubLiteReservation":
                return new PubsubLiteReservation(name, <any>undefined, { urn })
            case "google-beta:index/pubsubLiteSubscription:PubsubLiteSubscription":
                return new PubsubLiteSubscription(name, <any>undefined, { urn })
            case "google-beta:index/pubsubLiteTopic:PubsubLiteTopic":
                return new PubsubLiteTopic(name, <any>undefined, { urn })
            case "google-beta:index/pubsubSchema:PubsubSchema":
                return new PubsubSchema(name, <any>undefined, { urn })
            case "google-beta:index/pubsubSchemaIamBinding:PubsubSchemaIamBinding":
                return new PubsubSchemaIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/pubsubSchemaIamMember:PubsubSchemaIamMember":
                return new PubsubSchemaIamMember(name, <any>undefined, { urn })
            case "google-beta:index/pubsubSchemaIamPolicy:PubsubSchemaIamPolicy":
                return new PubsubSchemaIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/pubsubSubscription:PubsubSubscription":
                return new PubsubSubscription(name, <any>undefined, { urn })
            case "google-beta:index/pubsubSubscriptionIamBinding:PubsubSubscriptionIamBinding":
                return new PubsubSubscriptionIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/pubsubSubscriptionIamMember:PubsubSubscriptionIamMember":
                return new PubsubSubscriptionIamMember(name, <any>undefined, { urn })
            case "google-beta:index/pubsubSubscriptionIamPolicy:PubsubSubscriptionIamPolicy":
                return new PubsubSubscriptionIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/pubsubTopic:PubsubTopic":
                return new PubsubTopic(name, <any>undefined, { urn })
            case "google-beta:index/pubsubTopicIamBinding:PubsubTopicIamBinding":
                return new PubsubTopicIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/pubsubTopicIamMember:PubsubTopicIamMember":
                return new PubsubTopicIamMember(name, <any>undefined, { urn })
            case "google-beta:index/pubsubTopicIamPolicy:PubsubTopicIamPolicy":
                return new PubsubTopicIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/recaptchaEnterpriseKey:RecaptchaEnterpriseKey":
                return new RecaptchaEnterpriseKey(name, <any>undefined, { urn })
            case "google-beta:index/redisCluster:RedisCluster":
                return new RedisCluster(name, <any>undefined, { urn })
            case "google-beta:index/redisInstance:RedisInstance":
                return new RedisInstance(name, <any>undefined, { urn })
            case "google-beta:index/resourceManagerLien:ResourceManagerLien":
                return new ResourceManagerLien(name, <any>undefined, { urn })
            case "google-beta:index/runtimeconfigConfig:RuntimeconfigConfig":
                return new RuntimeconfigConfig(name, <any>undefined, { urn })
            case "google-beta:index/runtimeconfigConfigIamBinding:RuntimeconfigConfigIamBinding":
                return new RuntimeconfigConfigIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/runtimeconfigConfigIamMember:RuntimeconfigConfigIamMember":
                return new RuntimeconfigConfigIamMember(name, <any>undefined, { urn })
            case "google-beta:index/runtimeconfigConfigIamPolicy:RuntimeconfigConfigIamPolicy":
                return new RuntimeconfigConfigIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/runtimeconfigVariable:RuntimeconfigVariable":
                return new RuntimeconfigVariable(name, <any>undefined, { urn })
            case "google-beta:index/sccEventThreatDetectionCustomModule:SccEventThreatDetectionCustomModule":
                return new SccEventThreatDetectionCustomModule(name, <any>undefined, { urn })
            case "google-beta:index/sccFolderCustomModule:SccFolderCustomModule":
                return new SccFolderCustomModule(name, <any>undefined, { urn })
            case "google-beta:index/sccFolderNotificationConfig:SccFolderNotificationConfig":
                return new SccFolderNotificationConfig(name, <any>undefined, { urn })
            case "google-beta:index/sccManagementFolderSecurityHealthAnalyticsCustomModule:SccManagementFolderSecurityHealthAnalyticsCustomModule":
                return new SccManagementFolderSecurityHealthAnalyticsCustomModule(name, <any>undefined, { urn })
            case "google-beta:index/sccManagementOrganizationEventThreatDetectionCustomModule:SccManagementOrganizationEventThreatDetectionCustomModule":
                return new SccManagementOrganizationEventThreatDetectionCustomModule(name, <any>undefined, { urn })
            case "google-beta:index/sccManagementOrganizationSecurityHealthAnalyticsCustomModule:SccManagementOrganizationSecurityHealthAnalyticsCustomModule":
                return new SccManagementOrganizationSecurityHealthAnalyticsCustomModule(name, <any>undefined, { urn })
            case "google-beta:index/sccManagementProjectSecurityHealthAnalyticsCustomModule:SccManagementProjectSecurityHealthAnalyticsCustomModule":
                return new SccManagementProjectSecurityHealthAnalyticsCustomModule(name, <any>undefined, { urn })
            case "google-beta:index/sccMuteConfig:SccMuteConfig":
                return new SccMuteConfig(name, <any>undefined, { urn })
            case "google-beta:index/sccNotificationConfig:SccNotificationConfig":
                return new SccNotificationConfig(name, <any>undefined, { urn })
            case "google-beta:index/sccOrganizationCustomModule:SccOrganizationCustomModule":
                return new SccOrganizationCustomModule(name, <any>undefined, { urn })
            case "google-beta:index/sccProjectCustomModule:SccProjectCustomModule":
                return new SccProjectCustomModule(name, <any>undefined, { urn })
            case "google-beta:index/sccProjectNotificationConfig:SccProjectNotificationConfig":
                return new SccProjectNotificationConfig(name, <any>undefined, { urn })
            case "google-beta:index/sccSource:SccSource":
                return new SccSource(name, <any>undefined, { urn })
            case "google-beta:index/sccSourceIamBinding:SccSourceIamBinding":
                return new SccSourceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/sccSourceIamMember:SccSourceIamMember":
                return new SccSourceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/sccSourceIamPolicy:SccSourceIamPolicy":
                return new SccSourceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/sccV2FolderMuteConfig:SccV2FolderMuteConfig":
                return new SccV2FolderMuteConfig(name, <any>undefined, { urn })
            case "google-beta:index/sccV2FolderNotificationConfig:SccV2FolderNotificationConfig":
                return new SccV2FolderNotificationConfig(name, <any>undefined, { urn })
            case "google-beta:index/sccV2OrganizationMuteConfig:SccV2OrganizationMuteConfig":
                return new SccV2OrganizationMuteConfig(name, <any>undefined, { urn })
            case "google-beta:index/sccV2OrganizationNotificationConfig:SccV2OrganizationNotificationConfig":
                return new SccV2OrganizationNotificationConfig(name, <any>undefined, { urn })
            case "google-beta:index/sccV2OrganizationSccBigQueryExports:SccV2OrganizationSccBigQueryExports":
                return new SccV2OrganizationSccBigQueryExports(name, <any>undefined, { urn })
            case "google-beta:index/sccV2OrganizationSource:SccV2OrganizationSource":
                return new SccV2OrganizationSource(name, <any>undefined, { urn })
            case "google-beta:index/sccV2OrganizationSourceIamBinding:SccV2OrganizationSourceIamBinding":
                return new SccV2OrganizationSourceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/sccV2OrganizationSourceIamMember:SccV2OrganizationSourceIamMember":
                return new SccV2OrganizationSourceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/sccV2OrganizationSourceIamPolicy:SccV2OrganizationSourceIamPolicy":
                return new SccV2OrganizationSourceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/sccV2ProjectMuteConfig:SccV2ProjectMuteConfig":
                return new SccV2ProjectMuteConfig(name, <any>undefined, { urn })
            case "google-beta:index/sccV2ProjectNotificationConfig:SccV2ProjectNotificationConfig":
                return new SccV2ProjectNotificationConfig(name, <any>undefined, { urn })
            case "google-beta:index/secretManagerSecret:SecretManagerSecret":
                return new SecretManagerSecret(name, <any>undefined, { urn })
            case "google-beta:index/secretManagerSecretIamBinding:SecretManagerSecretIamBinding":
                return new SecretManagerSecretIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/secretManagerSecretIamMember:SecretManagerSecretIamMember":
                return new SecretManagerSecretIamMember(name, <any>undefined, { urn })
            case "google-beta:index/secretManagerSecretIamPolicy:SecretManagerSecretIamPolicy":
                return new SecretManagerSecretIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/secretManagerSecretVersion:SecretManagerSecretVersion":
                return new SecretManagerSecretVersion(name, <any>undefined, { urn })
            case "google-beta:index/secureSourceManagerInstance:SecureSourceManagerInstance":
                return new SecureSourceManagerInstance(name, <any>undefined, { urn })
            case "google-beta:index/secureSourceManagerInstanceIamBinding:SecureSourceManagerInstanceIamBinding":
                return new SecureSourceManagerInstanceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/secureSourceManagerInstanceIamMember:SecureSourceManagerInstanceIamMember":
                return new SecureSourceManagerInstanceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/secureSourceManagerInstanceIamPolicy:SecureSourceManagerInstanceIamPolicy":
                return new SecureSourceManagerInstanceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/secureSourceManagerRepository:SecureSourceManagerRepository":
                return new SecureSourceManagerRepository(name, <any>undefined, { urn })
            case "google-beta:index/secureSourceManagerRepositoryIamBinding:SecureSourceManagerRepositoryIamBinding":
                return new SecureSourceManagerRepositoryIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/secureSourceManagerRepositoryIamMember:SecureSourceManagerRepositoryIamMember":
                return new SecureSourceManagerRepositoryIamMember(name, <any>undefined, { urn })
            case "google-beta:index/secureSourceManagerRepositoryIamPolicy:SecureSourceManagerRepositoryIamPolicy":
                return new SecureSourceManagerRepositoryIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/securityScannerScanConfig:SecurityScannerScanConfig":
                return new SecurityScannerScanConfig(name, <any>undefined, { urn })
            case "google-beta:index/securityposturePosture:SecurityposturePosture":
                return new SecurityposturePosture(name, <any>undefined, { urn })
            case "google-beta:index/securityposturePostureDeployment:SecurityposturePostureDeployment":
                return new SecurityposturePostureDeployment(name, <any>undefined, { urn })
            case "google-beta:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "google-beta:index/serviceAccountIamBinding:ServiceAccountIamBinding":
                return new ServiceAccountIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/serviceAccountIamMember:ServiceAccountIamMember":
                return new ServiceAccountIamMember(name, <any>undefined, { urn })
            case "google-beta:index/serviceAccountIamPolicy:ServiceAccountIamPolicy":
                return new ServiceAccountIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/serviceAccountKey:ServiceAccountKey":
                return new ServiceAccountKey(name, <any>undefined, { urn })
            case "google-beta:index/serviceDirectoryEndpoint:ServiceDirectoryEndpoint":
                return new ServiceDirectoryEndpoint(name, <any>undefined, { urn })
            case "google-beta:index/serviceDirectoryNamespace:ServiceDirectoryNamespace":
                return new ServiceDirectoryNamespace(name, <any>undefined, { urn })
            case "google-beta:index/serviceDirectoryNamespaceIamBinding:ServiceDirectoryNamespaceIamBinding":
                return new ServiceDirectoryNamespaceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/serviceDirectoryNamespaceIamMember:ServiceDirectoryNamespaceIamMember":
                return new ServiceDirectoryNamespaceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/serviceDirectoryNamespaceIamPolicy:ServiceDirectoryNamespaceIamPolicy":
                return new ServiceDirectoryNamespaceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/serviceDirectoryService:ServiceDirectoryService":
                return new ServiceDirectoryService(name, <any>undefined, { urn })
            case "google-beta:index/serviceDirectoryServiceIamBinding:ServiceDirectoryServiceIamBinding":
                return new ServiceDirectoryServiceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/serviceDirectoryServiceIamMember:ServiceDirectoryServiceIamMember":
                return new ServiceDirectoryServiceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/serviceDirectoryServiceIamPolicy:ServiceDirectoryServiceIamPolicy":
                return new ServiceDirectoryServiceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/serviceNetworkingConnection:ServiceNetworkingConnection":
                return new ServiceNetworkingConnection(name, <any>undefined, { urn })
            case "google-beta:index/serviceNetworkingPeeredDnsDomain:ServiceNetworkingPeeredDnsDomain":
                return new ServiceNetworkingPeeredDnsDomain(name, <any>undefined, { urn })
            case "google-beta:index/serviceNetworkingVpcServiceControls:ServiceNetworkingVpcServiceControls":
                return new ServiceNetworkingVpcServiceControls(name, <any>undefined, { urn })
            case "google-beta:index/serviceUsageConsumerQuotaOverride:ServiceUsageConsumerQuotaOverride":
                return new ServiceUsageConsumerQuotaOverride(name, <any>undefined, { urn })
            case "google-beta:index/sourcerepoRepository:SourcerepoRepository":
                return new SourcerepoRepository(name, <any>undefined, { urn })
            case "google-beta:index/sourcerepoRepositoryIamBinding:SourcerepoRepositoryIamBinding":
                return new SourcerepoRepositoryIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/sourcerepoRepositoryIamMember:SourcerepoRepositoryIamMember":
                return new SourcerepoRepositoryIamMember(name, <any>undefined, { urn })
            case "google-beta:index/sourcerepoRepositoryIamPolicy:SourcerepoRepositoryIamPolicy":
                return new SourcerepoRepositoryIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/spannerDatabase:SpannerDatabase":
                return new SpannerDatabase(name, <any>undefined, { urn })
            case "google-beta:index/spannerDatabaseIamBinding:SpannerDatabaseIamBinding":
                return new SpannerDatabaseIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/spannerDatabaseIamMember:SpannerDatabaseIamMember":
                return new SpannerDatabaseIamMember(name, <any>undefined, { urn })
            case "google-beta:index/spannerDatabaseIamPolicy:SpannerDatabaseIamPolicy":
                return new SpannerDatabaseIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/spannerInstance:SpannerInstance":
                return new SpannerInstance(name, <any>undefined, { urn })
            case "google-beta:index/spannerInstanceConfig:SpannerInstanceConfig":
                return new SpannerInstanceConfig(name, <any>undefined, { urn })
            case "google-beta:index/spannerInstanceIamBinding:SpannerInstanceIamBinding":
                return new SpannerInstanceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/spannerInstanceIamMember:SpannerInstanceIamMember":
                return new SpannerInstanceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/spannerInstanceIamPolicy:SpannerInstanceIamPolicy":
                return new SpannerInstanceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/sqlDatabase:SqlDatabase":
                return new SqlDatabase(name, <any>undefined, { urn })
            case "google-beta:index/sqlDatabaseInstance:SqlDatabaseInstance":
                return new SqlDatabaseInstance(name, <any>undefined, { urn })
            case "google-beta:index/sqlSourceRepresentationInstance:SqlSourceRepresentationInstance":
                return new SqlSourceRepresentationInstance(name, <any>undefined, { urn })
            case "google-beta:index/sqlSslCert:SqlSslCert":
                return new SqlSslCert(name, <any>undefined, { urn })
            case "google-beta:index/sqlUser:SqlUser":
                return new SqlUser(name, <any>undefined, { urn })
            case "google-beta:index/storageBucket:StorageBucket":
                return new StorageBucket(name, <any>undefined, { urn })
            case "google-beta:index/storageBucketAccessControl:StorageBucketAccessControl":
                return new StorageBucketAccessControl(name, <any>undefined, { urn })
            case "google-beta:index/storageBucketAcl:StorageBucketAcl":
                return new StorageBucketAcl(name, <any>undefined, { urn })
            case "google-beta:index/storageBucketIamBinding:StorageBucketIamBinding":
                return new StorageBucketIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/storageBucketIamMember:StorageBucketIamMember":
                return new StorageBucketIamMember(name, <any>undefined, { urn })
            case "google-beta:index/storageBucketIamPolicy:StorageBucketIamPolicy":
                return new StorageBucketIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/storageBucketObject:StorageBucketObject":
                return new StorageBucketObject(name, <any>undefined, { urn })
            case "google-beta:index/storageDefaultObjectAccessControl:StorageDefaultObjectAccessControl":
                return new StorageDefaultObjectAccessControl(name, <any>undefined, { urn })
            case "google-beta:index/storageDefaultObjectAcl:StorageDefaultObjectAcl":
                return new StorageDefaultObjectAcl(name, <any>undefined, { urn })
            case "google-beta:index/storageHmacKey:StorageHmacKey":
                return new StorageHmacKey(name, <any>undefined, { urn })
            case "google-beta:index/storageInsightsReportConfig:StorageInsightsReportConfig":
                return new StorageInsightsReportConfig(name, <any>undefined, { urn })
            case "google-beta:index/storageManagedFolder:StorageManagedFolder":
                return new StorageManagedFolder(name, <any>undefined, { urn })
            case "google-beta:index/storageManagedFolderIamBinding:StorageManagedFolderIamBinding":
                return new StorageManagedFolderIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/storageManagedFolderIamMember:StorageManagedFolderIamMember":
                return new StorageManagedFolderIamMember(name, <any>undefined, { urn })
            case "google-beta:index/storageManagedFolderIamPolicy:StorageManagedFolderIamPolicy":
                return new StorageManagedFolderIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/storageNotification:StorageNotification":
                return new StorageNotification(name, <any>undefined, { urn })
            case "google-beta:index/storageObjectAccessControl:StorageObjectAccessControl":
                return new StorageObjectAccessControl(name, <any>undefined, { urn })
            case "google-beta:index/storageObjectAcl:StorageObjectAcl":
                return new StorageObjectAcl(name, <any>undefined, { urn })
            case "google-beta:index/storageTransferAgentPool:StorageTransferAgentPool":
                return new StorageTransferAgentPool(name, <any>undefined, { urn })
            case "google-beta:index/storageTransferJob:StorageTransferJob":
                return new StorageTransferJob(name, <any>undefined, { urn })
            case "google-beta:index/tagsLocationTagBinding:TagsLocationTagBinding":
                return new TagsLocationTagBinding(name, <any>undefined, { urn })
            case "google-beta:index/tagsTagBinding:TagsTagBinding":
                return new TagsTagBinding(name, <any>undefined, { urn })
            case "google-beta:index/tagsTagKey:TagsTagKey":
                return new TagsTagKey(name, <any>undefined, { urn })
            case "google-beta:index/tagsTagKeyIamBinding:TagsTagKeyIamBinding":
                return new TagsTagKeyIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/tagsTagKeyIamMember:TagsTagKeyIamMember":
                return new TagsTagKeyIamMember(name, <any>undefined, { urn })
            case "google-beta:index/tagsTagKeyIamPolicy:TagsTagKeyIamPolicy":
                return new TagsTagKeyIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/tagsTagValue:TagsTagValue":
                return new TagsTagValue(name, <any>undefined, { urn })
            case "google-beta:index/tagsTagValueIamBinding:TagsTagValueIamBinding":
                return new TagsTagValueIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/tagsTagValueIamMember:TagsTagValueIamMember":
                return new TagsTagValueIamMember(name, <any>undefined, { urn })
            case "google-beta:index/tagsTagValueIamPolicy:TagsTagValueIamPolicy":
                return new TagsTagValueIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/tpuNode:TpuNode":
                return new TpuNode(name, <any>undefined, { urn })
            case "google-beta:index/tpuV2Vm:TpuV2Vm":
                return new TpuV2Vm(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiDataset:VertexAiDataset":
                return new VertexAiDataset(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiDeploymentResourcePool:VertexAiDeploymentResourcePool":
                return new VertexAiDeploymentResourcePool(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiEndpoint:VertexAiEndpoint":
                return new VertexAiEndpoint(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiEndpointIamBinding:VertexAiEndpointIamBinding":
                return new VertexAiEndpointIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiEndpointIamMember:VertexAiEndpointIamMember":
                return new VertexAiEndpointIamMember(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiEndpointIamPolicy:VertexAiEndpointIamPolicy":
                return new VertexAiEndpointIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeatureGroup:VertexAiFeatureGroup":
                return new VertexAiFeatureGroup(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeatureGroupFeature:VertexAiFeatureGroupFeature":
                return new VertexAiFeatureGroupFeature(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeatureOnlineStore:VertexAiFeatureOnlineStore":
                return new VertexAiFeatureOnlineStore(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeatureOnlineStoreFeatureview:VertexAiFeatureOnlineStoreFeatureview":
                return new VertexAiFeatureOnlineStoreFeatureview(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeaturestore:VertexAiFeaturestore":
                return new VertexAiFeaturestore(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeaturestoreEntitytype:VertexAiFeaturestoreEntitytype":
                return new VertexAiFeaturestoreEntitytype(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeaturestoreEntitytypeFeature:VertexAiFeaturestoreEntitytypeFeature":
                return new VertexAiFeaturestoreEntitytypeFeature(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeaturestoreEntitytypeIamBinding:VertexAiFeaturestoreEntitytypeIamBinding":
                return new VertexAiFeaturestoreEntitytypeIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeaturestoreEntitytypeIamMember:VertexAiFeaturestoreEntitytypeIamMember":
                return new VertexAiFeaturestoreEntitytypeIamMember(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeaturestoreEntitytypeIamPolicy:VertexAiFeaturestoreEntitytypeIamPolicy":
                return new VertexAiFeaturestoreEntitytypeIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeaturestoreIamBinding:VertexAiFeaturestoreIamBinding":
                return new VertexAiFeaturestoreIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeaturestoreIamMember:VertexAiFeaturestoreIamMember":
                return new VertexAiFeaturestoreIamMember(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiFeaturestoreIamPolicy:VertexAiFeaturestoreIamPolicy":
                return new VertexAiFeaturestoreIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiIndex:VertexAiIndex":
                return new VertexAiIndex(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiIndexEndpoint:VertexAiIndexEndpoint":
                return new VertexAiIndexEndpoint(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiIndexEndpointDeployedIndex:VertexAiIndexEndpointDeployedIndex":
                return new VertexAiIndexEndpointDeployedIndex(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiMetadataStore:VertexAiMetadataStore":
                return new VertexAiMetadataStore(name, <any>undefined, { urn })
            case "google-beta:index/vertexAiTensorboard:VertexAiTensorboard":
                return new VertexAiTensorboard(name, <any>undefined, { urn })
            case "google-beta:index/vmwareengineCluster:VmwareengineCluster":
                return new VmwareengineCluster(name, <any>undefined, { urn })
            case "google-beta:index/vmwareengineExternalAccessRule:VmwareengineExternalAccessRule":
                return new VmwareengineExternalAccessRule(name, <any>undefined, { urn })
            case "google-beta:index/vmwareengineExternalAddress:VmwareengineExternalAddress":
                return new VmwareengineExternalAddress(name, <any>undefined, { urn })
            case "google-beta:index/vmwareengineNetwork:VmwareengineNetwork":
                return new VmwareengineNetwork(name, <any>undefined, { urn })
            case "google-beta:index/vmwareengineNetworkPeering:VmwareengineNetworkPeering":
                return new VmwareengineNetworkPeering(name, <any>undefined, { urn })
            case "google-beta:index/vmwareengineNetworkPolicy:VmwareengineNetworkPolicy":
                return new VmwareengineNetworkPolicy(name, <any>undefined, { urn })
            case "google-beta:index/vmwareenginePrivateCloud:VmwareenginePrivateCloud":
                return new VmwareenginePrivateCloud(name, <any>undefined, { urn })
            case "google-beta:index/vmwareengineSubnet:VmwareengineSubnet":
                return new VmwareengineSubnet(name, <any>undefined, { urn })
            case "google-beta:index/vpcAccessConnector:VpcAccessConnector":
                return new VpcAccessConnector(name, <any>undefined, { urn })
            case "google-beta:index/workbenchInstance:WorkbenchInstance":
                return new WorkbenchInstance(name, <any>undefined, { urn })
            case "google-beta:index/workbenchInstanceIamBinding:WorkbenchInstanceIamBinding":
                return new WorkbenchInstanceIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/workbenchInstanceIamMember:WorkbenchInstanceIamMember":
                return new WorkbenchInstanceIamMember(name, <any>undefined, { urn })
            case "google-beta:index/workbenchInstanceIamPolicy:WorkbenchInstanceIamPolicy":
                return new WorkbenchInstanceIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/workflowsWorkflow:WorkflowsWorkflow":
                return new WorkflowsWorkflow(name, <any>undefined, { urn })
            case "google-beta:index/workstationsWorkstation:WorkstationsWorkstation":
                return new WorkstationsWorkstation(name, <any>undefined, { urn })
            case "google-beta:index/workstationsWorkstationCluster:WorkstationsWorkstationCluster":
                return new WorkstationsWorkstationCluster(name, <any>undefined, { urn })
            case "google-beta:index/workstationsWorkstationConfig:WorkstationsWorkstationConfig":
                return new WorkstationsWorkstationConfig(name, <any>undefined, { urn })
            case "google-beta:index/workstationsWorkstationConfigIamBinding:WorkstationsWorkstationConfigIamBinding":
                return new WorkstationsWorkstationConfigIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/workstationsWorkstationConfigIamMember:WorkstationsWorkstationConfigIamMember":
                return new WorkstationsWorkstationConfigIamMember(name, <any>undefined, { urn })
            case "google-beta:index/workstationsWorkstationConfigIamPolicy:WorkstationsWorkstationConfigIamPolicy":
                return new WorkstationsWorkstationConfigIamPolicy(name, <any>undefined, { urn })
            case "google-beta:index/workstationsWorkstationIamBinding:WorkstationsWorkstationIamBinding":
                return new WorkstationsWorkstationIamBinding(name, <any>undefined, { urn })
            case "google-beta:index/workstationsWorkstationIamMember:WorkstationsWorkstationIamMember":
                return new WorkstationsWorkstationIamMember(name, <any>undefined, { urn })
            case "google-beta:index/workstationsWorkstationIamPolicy:WorkstationsWorkstationIamPolicy":
                return new WorkstationsWorkstationIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerAccessLevel", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerAccessLevelCondition", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerAccessLevels", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerAccessPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerAccessPolicyIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerAccessPolicyIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerAccessPolicyIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerAuthorizedOrgsDesc", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerEgressPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerGcpUserAccessBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerIngressPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerServicePerimeter", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerServicePerimeterDryRunEgressPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerServicePerimeterDryRunIngressPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerServicePerimeterDryRunResource", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerServicePerimeterEgressPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerServicePerimeterIngressPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerServicePerimeterResource", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/accessContextManagerServicePerimeters", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/activeDirectoryDomain", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/activeDirectoryDomainTrust", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/activeDirectoryPeering", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/alloydbBackup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/alloydbCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/alloydbInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/alloydbUser", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayApi", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayApiConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayApiConfigIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayApiConfigIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayApiConfigIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayApiIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayApiIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayApiIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayGateway", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayGatewayIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayGatewayIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apiGatewayGatewayIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeAddonsConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEndpointAttachment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEnvKeystore", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEnvReferences", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEnvgroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEnvgroupAttachment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEnvironment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEnvironmentIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEnvironmentIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEnvironmentIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEnvironmentKeyvaluemaps", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeEnvironmentKeyvaluemapsEntries", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeFlowhook", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeInstanceAttachment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeKeystoresAliasesKeyCertFile", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeKeystoresAliasesPkcs12", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeKeystoresAliasesSelfSignedCert", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeNatAddress", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeOrganization", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeSharedflow", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeSharedflowDeployment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeSyncAuthorization", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apigeeTargetServer", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apikeysKey", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/appEngineApplication", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/appEngineApplicationUrlDispatchRules", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/appEngineDomainMapping", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/appEngineFirewallRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/appEngineFlexibleAppVersion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/appEngineServiceNetworkSettings", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/appEngineServiceSplitTraffic", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/appEngineStandardAppVersion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apphubApplication", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apphubService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apphubServiceProjectAttachment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/apphubWorkload", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/artifactRegistryRepository", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/artifactRegistryRepositoryIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/artifactRegistryRepositoryIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/artifactRegistryRepositoryIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/artifactRegistryVpcscConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/assuredWorkloadsWorkload", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/backupDrManagementServer", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/beyondcorpAppConnection", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/beyondcorpAppConnector", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/beyondcorpAppGateway", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/biglakeCatalog", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/biglakeDatabase", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/biglakeTable", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryAnalyticsHubDataExchange", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryAnalyticsHubDataExchangeIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryAnalyticsHubDataExchangeIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryAnalyticsHubDataExchangeIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryAnalyticsHubListing", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryAnalyticsHubListingIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryAnalyticsHubListingIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryAnalyticsHubListingIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryBiReservation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryCapacityCommitment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryConnection", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryConnectionIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryConnectionIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryConnectionIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryDataTransferConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryDatapolicyDataPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryDatapolicyDataPolicyIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryDatapolicyDataPolicyIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryDatapolicyDataPolicyIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryDataset", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryDatasetAccess", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryDatasetIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryDatasetIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryDatasetIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryJob", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryReservation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryReservationAssignment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryRoutine", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryTable", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryTableIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryTableIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigqueryTableIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableAppProfile", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableAuthorizedView", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableGcPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableInstanceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableInstanceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableInstanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableTable", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableTableIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableTableIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/bigtableTableIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/billingAccountIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/billingAccountIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/billingAccountIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/billingBudget", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/billingProjectInfo", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/billingSubaccount", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/binaryAuthorizationAttestor", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/binaryAuthorizationAttestorIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/binaryAuthorizationAttestorIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/binaryAuthorizationAttestorIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/binaryAuthorizationPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/blockchainNodeEngineBlockchainNodes", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/certificateManagerCertificate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/certificateManagerCertificateIssuanceConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/certificateManagerCertificateMap", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/certificateManagerCertificateMapEntry", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/certificateManagerDnsAuthorization", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/certificateManagerTrustConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudAssetFolderFeed", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudAssetOrganizationFeed", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudAssetProjectFeed", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudIdentityGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudIdentityGroupMembership", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudIdsEndpoint", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudQuotasQuotaPreference", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunDomainMapping", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunServiceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunV2Job", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunV2JobIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunV2JobIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunV2JobIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunV2Service", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunV2ServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunV2ServiceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudRunV2ServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudSchedulerJob", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudTasksQueue", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudTasksQueueIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudTasksQueueIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudTasksQueueIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudbuildBitbucketServerConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudbuildTrigger", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudbuildWorkerPool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudbuildv2Connection", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudbuildv2ConnectionIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudbuildv2ConnectionIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudbuildv2ConnectionIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudbuildv2Repository", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployAutomation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployCustomTargetType", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployCustomTargetTypeIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployCustomTargetTypeIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployCustomTargetTypeIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployDeliveryPipeline", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployDeliveryPipelineIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployDeliveryPipelineIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployDeliveryPipelineIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployTarget", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployTargetIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployTargetIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddeployTargetIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/clouddomainsRegistration", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudfunctions2Function", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudfunctions2FunctionIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudfunctions2FunctionIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudfunctions2FunctionIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudfunctionsFunction", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudfunctionsFunctionIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudfunctionsFunctionIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/cloudfunctionsFunctionIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/composerEnvironment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/composerUserWorkloadsConfigMap", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/composerUserWorkloadsSecret", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeAddress", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeAttachedDisk", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeAutoscaler", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeBackendBucket", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeBackendBucketIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeBackendBucketIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeBackendBucketIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeBackendBucketSignedUrlKey", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeBackendService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeBackendServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeBackendServiceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeBackendServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeBackendServiceSignedUrlKey", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeDisk", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeDiskAsyncReplication", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeDiskIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeDiskIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeDiskIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeDiskResourcePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeExternalVpnGateway", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeFirewall", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeFirewallPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeFirewallPolicyRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeForwardingRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeGlobalAddress", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeGlobalForwardingRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeGlobalNetworkEndpoint", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeGlobalNetworkEndpointGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeHaVpnGateway", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeHealthCheck", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeHttpHealthCheck", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeHttpsHealthCheck", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeImage", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeImageIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeImageIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeImageIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceFromMachineImage", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceFromTemplate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceGroupManager", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceGroupMembership", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceGroupNamedPort", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceSettings", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInstanceTemplate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInterconnect", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeInterconnectAttachment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeMachineImage", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeMachineImageIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeMachineImageIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeMachineImageIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeManagedSslCertificate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetwork", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetworkAttachment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetworkEdgeSecurityService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetworkEndpoint", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetworkEndpointGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetworkEndpoints", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetworkFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetworkFirewallPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetworkFirewallPolicyRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetworkPeering", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNetworkPeeringRoutesConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNodeGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeNodeTemplate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeOrganizationSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeOrganizationSecurityPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeOrganizationSecurityPolicyRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computePacketMirroring", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computePerInstanceConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeProjectCloudArmorTier", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeProjectDefaultNetworkTier", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeProjectMetadata", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeProjectMetadataItem", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computePublicAdvertisedPrefix", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computePublicDelegatedPrefix", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionAutoscaler", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionBackendService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionBackendServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionBackendServiceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionBackendServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionCommitment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionDisk", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionDiskIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionDiskIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionDiskIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionDiskResourcePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionHealthCheck", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionInstanceGroupManager", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionInstanceTemplate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionNetworkEndpoint", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionNetworkEndpointGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionNetworkFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionNetworkFirewallPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionNetworkFirewallPolicyRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionPerInstanceConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionSecurityPolicyRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionSslCertificate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionSslPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionTargetHttpProxy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionTargetHttpsProxy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionTargetTcpProxy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRegionUrlMap", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeReservation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeResizeRequest", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeResourcePolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRoute", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRouter", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRouterInterface", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRouterNat", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRouterPeer", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeRouterRoutePolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSecurityPolicyRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeServiceAttachment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSharedVpcHostProject", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSharedVpcServiceProject", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSnapshot", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSnapshotIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSnapshotIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSnapshotIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSslCertificate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSslPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSubnetwork", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSubnetworkIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSubnetworkIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeSubnetworkIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeTargetGrpcProxy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeTargetHttpProxy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeTargetHttpsProxy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeTargetInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeTargetPool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeTargetSslProxy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeTargetTcpProxy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeUrlMap", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeVpnGateway", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/computeVpnTunnel", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAnalysisNote", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAnalysisNoteIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAnalysisNoteIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAnalysisNoteIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAnalysisOccurrence", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAttachedCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAwsCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAwsNodePool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAzureClient", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAzureCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerAzureNodePool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerNodePool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/containerRegistry", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogEntry", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogEntryGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogEntryGroupIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogEntryGroupIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogEntryGroupIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogPolicyTag", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogPolicyTagIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogPolicyTagIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogPolicyTagIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogTag", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogTagTemplate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogTagTemplateIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogTagTemplateIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogTagTemplateIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogTaxonomy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogTaxonomyIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogTaxonomyIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataCatalogTaxonomyIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataFusionInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataFusionInstanceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataFusionInstanceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataFusionInstanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataLossPreventionDeidentifyTemplate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataLossPreventionDiscoveryConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataLossPreventionInspectTemplate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataLossPreventionJobTrigger", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataLossPreventionStoredInfoType", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataPipelinePipeline", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/databaseMigrationServiceConnectionProfile", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/databaseMigrationServicePrivateConnection", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataflowFlexTemplateJob", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataflowJob", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataformRepository", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataformRepositoryIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataformRepositoryIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataformRepositoryIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataformRepositoryReleaseConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataformRepositoryWorkflowConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexAspectType", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexAspectTypeIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexAspectTypeIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexAspectTypeIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexAsset", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexAssetIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexAssetIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexAssetIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexDatascan", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexDatascanIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexDatascanIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexDatascanIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexEntryGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexEntryGroupIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexEntryGroupIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexEntryGroupIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexEntryType", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexEntryTypeIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexEntryTypeIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexEntryTypeIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexLake", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexLakeIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexLakeIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexLakeIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexTask", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexTaskIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexTaskIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexTaskIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexZone", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexZoneIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexZoneIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataplexZoneIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocAutoscalingPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocAutoscalingPolicyIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocAutoscalingPolicyIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocAutoscalingPolicyIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocClusterIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocClusterIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocClusterIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocJob", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocJobIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocJobIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocJobIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocMetastoreFederation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocMetastoreFederationIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocMetastoreFederationIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocMetastoreFederationIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocMetastoreService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocMetastoreServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocMetastoreServiceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocMetastoreServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dataprocWorkflowTemplate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/datastreamConnectionProfile", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/datastreamPrivateConnection", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/datastreamStream", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/deploymentManagerDeployment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowAgent", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowCxAgent", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowCxEntityType", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowCxEnvironment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowCxFlow", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowCxIntent", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowCxPage", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowCxSecuritySettings", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowCxTestCase", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowCxVersion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowCxWebhook", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowEntityType", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowFulfillment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dialogflowIntent", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/discoveryEngineChatEngine", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/discoveryEngineDataStore", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/discoveryEngineSchema", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/discoveryEngineSearchEngine", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dnsManagedZone", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dnsManagedZoneIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dnsManagedZoneIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dnsManagedZoneIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dnsPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dnsRecordSet", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dnsResponsePolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/dnsResponsePolicyRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/documentAiProcessor", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/documentAiProcessorDefaultVersion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/documentAiWarehouseDocumentSchema", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/documentAiWarehouseLocation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/edgecontainerCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/edgecontainerNodePool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/edgecontainerVpnConnection", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/edgenetworkNetwork", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/edgenetworkSubnet", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/endpointsService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/endpointsServiceConsumersIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/endpointsServiceConsumersIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/endpointsServiceConsumersIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/endpointsServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/endpointsServiceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/endpointsServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/essentialContactsContact", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/eventarcChannel", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/eventarcGoogleChannelConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/eventarcTrigger", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/filestoreBackup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/filestoreInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/filestoreSnapshot", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseAndroidApp", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseAppCheckAppAttestConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseAppCheckDebugToken", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseAppCheckDeviceCheckConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseAppCheckPlayIntegrityConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseAppCheckRecaptchaEnterpriseConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseAppCheckRecaptchaV3Config", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseAppCheckServiceConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseAppleApp", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseDatabaseInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseExtensionsInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseHostingChannel", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseHostingCustomDomain", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseHostingRelease", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseHostingSite", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseHostingVersion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseProject", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseStorageBucket", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaseWebApp", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaserulesRelease", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firebaserulesRuleset", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firestoreBackupSchedule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firestoreDatabase", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firestoreDocument", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firestoreField", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/firestoreIndex", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/folder", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/folderAccessApprovalSettings", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/folderIamAuditConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/folderIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/folderIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/folderIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/folderOrganizationPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeBackupBackupPlan", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeBackupBackupPlanIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeBackupBackupPlanIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeBackupBackupPlanIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeBackupRestorePlan", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeBackupRestorePlanIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeBackupRestorePlanIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeBackupRestorePlanIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubFeature", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubFeatureIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubFeatureIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubFeatureIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubFeatureMembership", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubFleet", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubMembership", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubMembershipBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubMembershipIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubMembershipIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubMembershipIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubMembershipRbacRoleBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubNamespace", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubScope", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubScopeIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubScopeIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubScopeIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeHubScopeRbacRoleBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeonpremBareMetalAdminCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeonpremBareMetalCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeonpremBareMetalNodePool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeonpremVmwareCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/gkeonpremVmwareNodePool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareConsentStore", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareConsentStoreIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareConsentStoreIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareConsentStoreIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareDataset", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareDatasetIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareDatasetIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareDatasetIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareDicomStore", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareDicomStoreIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareDicomStoreIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareDicomStoreIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareFhirStore", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareFhirStoreIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareFhirStoreIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareFhirStoreIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareHl7V2Store", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareHl7V2StoreIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareHl7V2StoreIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/healthcareHl7V2StoreIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iamAccessBoundaryPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iamDenyPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iamWorkforcePool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iamWorkforcePoolProvider", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iamWorkloadIdentityPool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iamWorkloadIdentityPoolProvider", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapAppEngineServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapAppEngineServiceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapAppEngineServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapAppEngineVersionIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapAppEngineVersionIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapAppEngineVersionIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapBrand", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapClient", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapTunnelDestGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapTunnelDestGroupIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapTunnelDestGroupIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapTunnelDestGroupIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapTunnelIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapTunnelIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapTunnelIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapTunnelInstanceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapTunnelInstanceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapTunnelInstanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebBackendServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebBackendServiceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebBackendServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebRegionBackendServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebRegionBackendServiceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebRegionBackendServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebTypeAppEngineIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebTypeAppEngineIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebTypeAppEngineIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebTypeComputeIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebTypeComputeIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/iapWebTypeComputeIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/identityPlatformConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/identityPlatformDefaultSupportedIdpConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/identityPlatformInboundSamlConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/identityPlatformOauthIdpConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/identityPlatformTenant", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/identityPlatformTenantDefaultSupportedIdpConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/identityPlatformTenantInboundSamlConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/identityPlatformTenantOauthIdpConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/integrationConnectorsConnection", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/integrationConnectorsEndpointAttachment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/integrationConnectorsManagedZone", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/integrationsAuthConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/integrationsClient", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsAutokeyConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsCryptoKey", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsCryptoKeyIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsCryptoKeyIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsCryptoKeyIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsCryptoKeyVersion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsEkmConnection", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsEkmConnectionIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsEkmConnectionIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsEkmConnectionIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsKeyHandle", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsKeyRing", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsKeyRingIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsKeyRingIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsKeyRingIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsKeyRingImportJob", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/kmsSecretCiphertext", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingBillingAccountBucketConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingBillingAccountExclusion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingBillingAccountSink", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingFolderBucketConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingFolderExclusion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingFolderSettings", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingFolderSink", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingLinkedDataset", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingLogView", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingLogViewIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingLogViewIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingLogViewIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingMetric", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingOrganizationBucketConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingOrganizationExclusion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingOrganizationSettings", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingOrganizationSink", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingProjectBucketConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingProjectExclusion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/loggingProjectSink", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/lookerInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/managedKafkaCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/managedKafkaTopic", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/memcacheInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/migrationCenterGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/migrationCenterPreferenceSet", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/mlEngineModel", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/monitoringAlertPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/monitoringCustomService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/monitoringDashboard", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/monitoringGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/monitoringMetricDescriptor", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/monitoringMonitoredProject", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/monitoringNotificationChannel", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/monitoringService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/monitoringSlo", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/monitoringUptimeCheckConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/netappActiveDirectory", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/netappBackup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/netappBackupPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/netappBackupVault", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/netappKmsconfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/netappStoragePool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/netappVolume", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/netappVolumeReplication", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/netappVolumeSnapshot", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkConnectivityHub", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkConnectivityInternalRange", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkConnectivityPolicyBasedRoute", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkConnectivityRegionalEndpoint", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkConnectivityServiceConnectionPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkConnectivitySpoke", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkManagementConnectivityTest", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityAddressGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityAddressGroupIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityAddressGroupIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityAddressGroupIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityAuthorizationPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityClientTlsPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityFirewallEndpoint", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityFirewallEndpointAssociation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityGatewaySecurityPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityGatewaySecurityPolicyRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecuritySecurityProfile", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecuritySecurityProfileGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityServerTlsPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityTlsInspectionPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkSecurityUrlLists", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesEdgeCacheKeyset", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesEdgeCacheOrigin", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesEdgeCacheService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesEndpointPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesGateway", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesGrpcRoute", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesHttpRoute", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesLbRouteExtension", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesLbTrafficExtension", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesMesh", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesServiceBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesServiceLbPolicies", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesTcpRoute", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/networkServicesTlsRoute", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/notebooksEnvironment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/notebooksInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/notebooksInstanceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/notebooksInstanceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/notebooksInstanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/notebooksLocation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/notebooksRuntime", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/notebooksRuntimeIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/notebooksRuntimeIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/notebooksRuntimeIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/orgPolicyCustomConstraint", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/orgPolicyPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/organizationAccessApprovalSettings", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/organizationIamAuditConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/organizationIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/organizationIamCustomRole", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/organizationIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/organizationIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/organizationPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/osConfigGuestPolicies", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/osConfigOsPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/osConfigPatchDeployment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/osLoginSshPublicKey", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/parallelstoreInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privatecaCaPool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privatecaCaPoolIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privatecaCaPoolIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privatecaCaPoolIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privatecaCertificate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privatecaCertificateAuthority", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privatecaCertificateTemplate", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privatecaCertificateTemplateIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privatecaCertificateTemplateIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privatecaCertificateTemplateIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/privilegedAccessManagerEntitlement", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/project", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectAccessApprovalSettings", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectDefaultServiceAccounts", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectIamAuditConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectIamCustomRole", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectIamMemberRemove", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectOrganizationPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectServiceIdentity", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/projectUsageExportBucket", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/publicCaExternalAccountKey", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubLiteReservation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubLiteSubscription", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubLiteTopic", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubSchema", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubSchemaIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubSchemaIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubSchemaIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubSubscription", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubSubscriptionIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubSubscriptionIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubSubscriptionIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubTopic", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubTopicIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubTopicIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/pubsubTopicIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/recaptchaEnterpriseKey", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/redisCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/redisInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/resourceManagerLien", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/runtimeconfigConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/runtimeconfigConfigIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/runtimeconfigConfigIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/runtimeconfigConfigIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/runtimeconfigVariable", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccEventThreatDetectionCustomModule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccFolderCustomModule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccFolderNotificationConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccManagementFolderSecurityHealthAnalyticsCustomModule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccManagementOrganizationEventThreatDetectionCustomModule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccManagementOrganizationSecurityHealthAnalyticsCustomModule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccManagementProjectSecurityHealthAnalyticsCustomModule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccMuteConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccNotificationConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccOrganizationCustomModule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccProjectCustomModule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccProjectNotificationConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccSource", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccSourceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccSourceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccSourceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2FolderMuteConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2FolderNotificationConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2OrganizationMuteConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2OrganizationNotificationConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2OrganizationSccBigQueryExports", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2OrganizationSource", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2OrganizationSourceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2OrganizationSourceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2OrganizationSourceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2ProjectMuteConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sccV2ProjectNotificationConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secretManagerSecret", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secretManagerSecretIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secretManagerSecretIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secretManagerSecretIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secretManagerSecretVersion", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secureSourceManagerInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secureSourceManagerInstanceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secureSourceManagerInstanceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secureSourceManagerInstanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secureSourceManagerRepository", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secureSourceManagerRepositoryIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secureSourceManagerRepositoryIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/secureSourceManagerRepositoryIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/securityScannerScanConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/securityposturePosture", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/securityposturePostureDeployment", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceAccountIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceAccountIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceAccountIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceAccountKey", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceDirectoryEndpoint", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceDirectoryNamespace", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceDirectoryNamespaceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceDirectoryNamespaceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceDirectoryNamespaceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceDirectoryService", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceDirectoryServiceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceDirectoryServiceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceDirectoryServiceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceNetworkingConnection", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceNetworkingPeeredDnsDomain", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceNetworkingVpcServiceControls", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/serviceUsageConsumerQuotaOverride", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sourcerepoRepository", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sourcerepoRepositoryIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sourcerepoRepositoryIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sourcerepoRepositoryIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/spannerDatabase", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/spannerDatabaseIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/spannerDatabaseIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/spannerDatabaseIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/spannerInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/spannerInstanceConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/spannerInstanceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/spannerInstanceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/spannerInstanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sqlDatabase", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sqlDatabaseInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sqlSourceRepresentationInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sqlSslCert", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/sqlUser", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageBucket", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageBucketAccessControl", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageBucketAcl", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageBucketIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageBucketIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageBucketIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageBucketObject", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageDefaultObjectAccessControl", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageDefaultObjectAcl", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageHmacKey", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageInsightsReportConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageManagedFolder", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageManagedFolderIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageManagedFolderIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageManagedFolderIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageNotification", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageObjectAccessControl", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageObjectAcl", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageTransferAgentPool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/storageTransferJob", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tagsLocationTagBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tagsTagBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tagsTagKey", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tagsTagKeyIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tagsTagKeyIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tagsTagKeyIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tagsTagValue", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tagsTagValueIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tagsTagValueIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tagsTagValueIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tpuNode", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/tpuV2Vm", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiDataset", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiDeploymentResourcePool", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiEndpoint", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiEndpointIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiEndpointIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiEndpointIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeatureGroup", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeatureGroupFeature", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeatureOnlineStore", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeatureOnlineStoreFeatureview", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeaturestore", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeaturestoreEntitytype", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeaturestoreEntitytypeFeature", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeaturestoreEntitytypeIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeaturestoreEntitytypeIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeaturestoreEntitytypeIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeaturestoreIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeaturestoreIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiFeaturestoreIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiIndex", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiIndexEndpoint", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiIndexEndpointDeployedIndex", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiMetadataStore", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vertexAiTensorboard", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vmwareengineCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vmwareengineExternalAccessRule", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vmwareengineExternalAddress", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vmwareengineNetwork", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vmwareengineNetworkPeering", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vmwareengineNetworkPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vmwareenginePrivateCloud", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vmwareengineSubnet", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/vpcAccessConnector", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workbenchInstance", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workbenchInstanceIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workbenchInstanceIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workbenchInstanceIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workflowsWorkflow", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workstationsWorkstation", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workstationsWorkstationCluster", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workstationsWorkstationConfig", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workstationsWorkstationConfigIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workstationsWorkstationConfigIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workstationsWorkstationConfigIamPolicy", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workstationsWorkstationIamBinding", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workstationsWorkstationIamMember", _module)
pulumi.runtime.registerResourceModule("google-beta", "index/workstationsWorkstationIamPolicy", _module)
pulumi.runtime.registerResourcePackage("google-beta", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:google-beta") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
