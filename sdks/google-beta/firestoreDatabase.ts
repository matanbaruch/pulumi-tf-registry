// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirestoreDatabase extends pulumi.CustomResource {
    /**
     * Get an existing FirestoreDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirestoreDatabaseState, opts?: pulumi.CustomResourceOptions): FirestoreDatabase {
        return new FirestoreDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/firestoreDatabase:FirestoreDatabase';

    /**
     * Returns true if the given object is an instance of FirestoreDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirestoreDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirestoreDatabase.__pulumiType;
    }

    /**
     * The App Engine integration mode to use for this database. Possible values: ["ENABLED", "DISABLED"]
     */
    public readonly appEngineIntegrationMode!: pulumi.Output<string>;
    /**
     * The CMEK (Customer Managed Encryption Key) configuration for a Firestore database. If not present, the database is
     * secured by the default Google encryption key.
     */
    public readonly cmekConfig!: pulumi.Output<outputs.FirestoreDatabaseCmekConfig | undefined>;
    /**
     * The concurrency control mode to use for this database. Possible values: ["OPTIMISTIC", "PESSIMISTIC",
     * "OPTIMISTIC_WITH_ENTITY_GROUPS"]
     */
    public readonly concurrencyMode!: pulumi.Output<string>;
    /**
     * Output only. The timestamp at which this database was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly deleteProtectionState!: pulumi.Output<string>;
    public readonly deletionPolicy!: pulumi.Output<string | undefined>;
    /**
     * Output only. The earliest timestamp at which older versions of the data can be read from the database. See
     * versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod. This value is continuously
     * updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account
     * for the time from the moment when the value is queried to the moment when you initiate the recovery. A timestamp in
     * RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z"
     * and "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly earliestVersionTime!: pulumi.Output<string>;
    /**
     * Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and
     * delete requests to ensure the client has an up-to-date value before proceeding.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Output only. The keyPrefix for this database. This keyPrefix is used, in combination with the project id ("~") to
     * construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation
     * runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead
     * of v~foo).
     */
    public /*out*/ readonly keyPrefix!: pulumi.Output<string>;
    /**
     * The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
     */
    public readonly locationId!: pulumi.Output<string>;
    /**
     * The ID to use for the database, which will become the final component of the database's resource name. This value should
     * be 4-63 characters. Valid characters are /[a-z][0-9]-/ with first character a letter and the last a letter or a number.
     * Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether to enable the PITR feature on this database. If 'POINT_IN_TIME_RECOVERY_ENABLED' is selected, reads are
     * supported on selected versions of the data from within the past 7 days. versionRetentionPeriod and earliestVersionTime
     * can be used to determine the supported versions. These include reads against any timestamp within the past hour and
     * reads against 1-minute snapshots beyond 1 hour and within 7 days. If 'POINT_IN_TIME_RECOVERY_DISABLED' is selected,
     * reads are supported on any version of the data from within the past 1 hour. Default value:
     * "POINT_IN_TIME_RECOVERY_DISABLED" Possible values: ["POINT_IN_TIME_RECOVERY_ENABLED", "POINT_IN_TIME_RECOVERY_DISABLED"]
     */
    public readonly pointInTimeRecoveryEnablement!: pulumi.Output<string | undefined>;
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FirestoreDatabaseTimeouts | undefined>;
    /**
     * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how
     * to choose. Possible values: ["FIRESTORE_NATIVE", "DATASTORE_MODE"]
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Output only. The system-generated UUID4 for this Database.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Output only. The timestamp at which this database was most recently updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Output only. The period during which past versions of data are retained in the database. Any read or query can specify a
     * readTime within this window, and will read the state of the database at that time. If the PITR feature is enabled, the
     * retention period is 7 days. Otherwise, the retention period is 1 hour. A duration in seconds with up to nine fractional
     * digits, ending with 's'. Example: "3.5s".
     */
    public /*out*/ readonly versionRetentionPeriod!: pulumi.Output<string>;

    /**
     * Create a FirestoreDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirestoreDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirestoreDatabaseArgs | FirestoreDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirestoreDatabaseState | undefined;
            resourceInputs["appEngineIntegrationMode"] = state ? state.appEngineIntegrationMode : undefined;
            resourceInputs["cmekConfig"] = state ? state.cmekConfig : undefined;
            resourceInputs["concurrencyMode"] = state ? state.concurrencyMode : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteProtectionState"] = state ? state.deleteProtectionState : undefined;
            resourceInputs["deletionPolicy"] = state ? state.deletionPolicy : undefined;
            resourceInputs["earliestVersionTime"] = state ? state.earliestVersionTime : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["keyPrefix"] = state ? state.keyPrefix : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pointInTimeRecoveryEnablement"] = state ? state.pointInTimeRecoveryEnablement : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["versionRetentionPeriod"] = state ? state.versionRetentionPeriod : undefined;
        } else {
            const args = argsOrState as FirestoreDatabaseArgs | undefined;
            if ((!args || args.locationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["appEngineIntegrationMode"] = args ? args.appEngineIntegrationMode : undefined;
            resourceInputs["cmekConfig"] = args ? args.cmekConfig : undefined;
            resourceInputs["concurrencyMode"] = args ? args.concurrencyMode : undefined;
            resourceInputs["deleteProtectionState"] = args ? args.deleteProtectionState : undefined;
            resourceInputs["deletionPolicy"] = args ? args.deletionPolicy : undefined;
            resourceInputs["locationId"] = args ? args.locationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pointInTimeRecoveryEnablement"] = args ? args.pointInTimeRecoveryEnablement : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["earliestVersionTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["keyPrefix"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["versionRetentionPeriod"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirestoreDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirestoreDatabase resources.
 */
export interface FirestoreDatabaseState {
    /**
     * The App Engine integration mode to use for this database. Possible values: ["ENABLED", "DISABLED"]
     */
    appEngineIntegrationMode?: pulumi.Input<string>;
    /**
     * The CMEK (Customer Managed Encryption Key) configuration for a Firestore database. If not present, the database is
     * secured by the default Google encryption key.
     */
    cmekConfig?: pulumi.Input<inputs.FirestoreDatabaseCmekConfig>;
    /**
     * The concurrency control mode to use for this database. Possible values: ["OPTIMISTIC", "PESSIMISTIC",
     * "OPTIMISTIC_WITH_ENTITY_GROUPS"]
     */
    concurrencyMode?: pulumi.Input<string>;
    /**
     * Output only. The timestamp at which this database was created.
     */
    createTime?: pulumi.Input<string>;
    deleteProtectionState?: pulumi.Input<string>;
    deletionPolicy?: pulumi.Input<string>;
    /**
     * Output only. The earliest timestamp at which older versions of the data can be read from the database. See
     * versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod. This value is continuously
     * updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account
     * for the time from the moment when the value is queried to the moment when you initiate the recovery. A timestamp in
     * RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z"
     * and "2014-10-02T15:01:23.045123456Z".
     */
    earliestVersionTime?: pulumi.Input<string>;
    /**
     * Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and
     * delete requests to ensure the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * Output only. The keyPrefix for this database. This keyPrefix is used, in combination with the project id ("~") to
     * construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation
     * runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead
     * of v~foo).
     */
    keyPrefix?: pulumi.Input<string>;
    /**
     * The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
     */
    locationId?: pulumi.Input<string>;
    /**
     * The ID to use for the database, which will become the final component of the database's resource name. This value should
     * be 4-63 characters. Valid characters are /[a-z][0-9]-/ with first character a letter and the last a letter or a number.
     * Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to enable the PITR feature on this database. If 'POINT_IN_TIME_RECOVERY_ENABLED' is selected, reads are
     * supported on selected versions of the data from within the past 7 days. versionRetentionPeriod and earliestVersionTime
     * can be used to determine the supported versions. These include reads against any timestamp within the past hour and
     * reads against 1-minute snapshots beyond 1 hour and within 7 days. If 'POINT_IN_TIME_RECOVERY_DISABLED' is selected,
     * reads are supported on any version of the data from within the past 1 hour. Default value:
     * "POINT_IN_TIME_RECOVERY_DISABLED" Possible values: ["POINT_IN_TIME_RECOVERY_ENABLED", "POINT_IN_TIME_RECOVERY_DISABLED"]
     */
    pointInTimeRecoveryEnablement?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirestoreDatabaseTimeouts>;
    /**
     * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how
     * to choose. Possible values: ["FIRESTORE_NATIVE", "DATASTORE_MODE"]
     */
    type?: pulumi.Input<string>;
    /**
     * Output only. The system-generated UUID4 for this Database.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. The timestamp at which this database was most recently updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Output only. The period during which past versions of data are retained in the database. Any read or query can specify a
     * readTime within this window, and will read the state of the database at that time. If the PITR feature is enabled, the
     * retention period is 7 days. Otherwise, the retention period is 1 hour. A duration in seconds with up to nine fractional
     * digits, ending with 's'. Example: "3.5s".
     */
    versionRetentionPeriod?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirestoreDatabase resource.
 */
export interface FirestoreDatabaseArgs {
    /**
     * The App Engine integration mode to use for this database. Possible values: ["ENABLED", "DISABLED"]
     */
    appEngineIntegrationMode?: pulumi.Input<string>;
    /**
     * The CMEK (Customer Managed Encryption Key) configuration for a Firestore database. If not present, the database is
     * secured by the default Google encryption key.
     */
    cmekConfig?: pulumi.Input<inputs.FirestoreDatabaseCmekConfig>;
    /**
     * The concurrency control mode to use for this database. Possible values: ["OPTIMISTIC", "PESSIMISTIC",
     * "OPTIMISTIC_WITH_ENTITY_GROUPS"]
     */
    concurrencyMode?: pulumi.Input<string>;
    deleteProtectionState?: pulumi.Input<string>;
    deletionPolicy?: pulumi.Input<string>;
    /**
     * The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
     */
    locationId: pulumi.Input<string>;
    /**
     * The ID to use for the database, which will become the final component of the database's resource name. This value should
     * be 4-63 characters. Valid characters are /[a-z][0-9]-/ with first character a letter and the last a letter or a number.
     * Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to enable the PITR feature on this database. If 'POINT_IN_TIME_RECOVERY_ENABLED' is selected, reads are
     * supported on selected versions of the data from within the past 7 days. versionRetentionPeriod and earliestVersionTime
     * can be used to determine the supported versions. These include reads against any timestamp within the past hour and
     * reads against 1-minute snapshots beyond 1 hour and within 7 days. If 'POINT_IN_TIME_RECOVERY_DISABLED' is selected,
     * reads are supported on any version of the data from within the past 1 hour. Default value:
     * "POINT_IN_TIME_RECOVERY_DISABLED" Possible values: ["POINT_IN_TIME_RECOVERY_ENABLED", "POINT_IN_TIME_RECOVERY_DISABLED"]
     */
    pointInTimeRecoveryEnablement?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirestoreDatabaseTimeouts>;
    /**
     * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how
     * to choose. Possible values: ["FIRESTORE_NATIVE", "DATASTORE_MODE"]
     */
    type: pulumi.Input<string>;
}
