// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProjectAccessApprovalSettings extends pulumi.CustomResource {
    /**
     * Get an existing ProjectAccessApprovalSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectAccessApprovalSettingsState, opts?: pulumi.CustomResourceOptions): ProjectAccessApprovalSettings {
        return new ProjectAccessApprovalSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/projectAccessApprovalSettings:ProjectAccessApprovalSettings';

    /**
     * Returns true if the given object is an instance of ProjectAccessApprovalSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectAccessApprovalSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectAccessApprovalSettings.__pulumiType;
    }

    /**
     * The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a
     * Google-managed key should be used for signing. This property will be ignored if set by an ancestor of the resource, and
     * new non-empty values may not be set.
     */
    public readonly activeKeyVersion!: pulumi.Output<string | undefined>;
    /**
     * If the field is true, that indicates that an ancestor of this Project has set active_key_version.
     */
    public /*out*/ readonly ancestorHasActiveKeyVersion!: pulumi.Output<boolean>;
    /**
     * If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors
     * of the Project.
     */
    public /*out*/ readonly enrolledAncestor!: pulumi.Output<boolean>;
    /**
     * A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the
     * resource given by name against any of these services contained here will be required to have explicit approval.
     * Enrollment can only be done on an all or nothing basis. A maximum of 10 enrolled services will be enforced, to be
     * expanded as the set of supported services is expanded.
     */
    public readonly enrolledServices!: pulumi.Output<outputs.ProjectAccessApprovalSettingsEnrolledService[]>;
    /**
     * If the field is true, that indicates that there is some configuration issue with the active_key_version configured on
     * this Project (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it,
     * etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited
     * top-down.
     */
    public /*out*/ readonly invalidKeyVersion!: pulumi.Output<boolean>;
    /**
     * The resource name of the settings. Format is "projects/{project_id}/accessApprovalSettings"
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to
     * a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email
     * addresses are allowed.
     */
    public readonly notificationEmails!: pulumi.Output<string[]>;
    /**
     * Project id.
     *
     * @deprecated Deprecated
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * ID of the project of the access approval settings.
     */
    public readonly projectId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ProjectAccessApprovalSettingsTimeouts | undefined>;

    /**
     * Create a ProjectAccessApprovalSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectAccessApprovalSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectAccessApprovalSettingsArgs | ProjectAccessApprovalSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectAccessApprovalSettingsState | undefined;
            resourceInputs["activeKeyVersion"] = state ? state.activeKeyVersion : undefined;
            resourceInputs["ancestorHasActiveKeyVersion"] = state ? state.ancestorHasActiveKeyVersion : undefined;
            resourceInputs["enrolledAncestor"] = state ? state.enrolledAncestor : undefined;
            resourceInputs["enrolledServices"] = state ? state.enrolledServices : undefined;
            resourceInputs["invalidKeyVersion"] = state ? state.invalidKeyVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationEmails"] = state ? state.notificationEmails : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ProjectAccessApprovalSettingsArgs | undefined;
            if ((!args || args.enrolledServices === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enrolledServices'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["activeKeyVersion"] = args ? args.activeKeyVersion : undefined;
            resourceInputs["enrolledServices"] = args ? args.enrolledServices : undefined;
            resourceInputs["notificationEmails"] = args ? args.notificationEmails : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ancestorHasActiveKeyVersion"] = undefined /*out*/;
            resourceInputs["enrolledAncestor"] = undefined /*out*/;
            resourceInputs["invalidKeyVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectAccessApprovalSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProjectAccessApprovalSettings resources.
 */
export interface ProjectAccessApprovalSettingsState {
    /**
     * The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a
     * Google-managed key should be used for signing. This property will be ignored if set by an ancestor of the resource, and
     * new non-empty values may not be set.
     */
    activeKeyVersion?: pulumi.Input<string>;
    /**
     * If the field is true, that indicates that an ancestor of this Project has set active_key_version.
     */
    ancestorHasActiveKeyVersion?: pulumi.Input<boolean>;
    /**
     * If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors
     * of the Project.
     */
    enrolledAncestor?: pulumi.Input<boolean>;
    /**
     * A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the
     * resource given by name against any of these services contained here will be required to have explicit approval.
     * Enrollment can only be done on an all or nothing basis. A maximum of 10 enrolled services will be enforced, to be
     * expanded as the set of supported services is expanded.
     */
    enrolledServices?: pulumi.Input<pulumi.Input<inputs.ProjectAccessApprovalSettingsEnrolledService>[]>;
    /**
     * If the field is true, that indicates that there is some configuration issue with the active_key_version configured on
     * this Project (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it,
     * etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited
     * top-down.
     */
    invalidKeyVersion?: pulumi.Input<boolean>;
    /**
     * The resource name of the settings. Format is "projects/{project_id}/accessApprovalSettings"
     */
    name?: pulumi.Input<string>;
    /**
     * A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to
     * a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email
     * addresses are allowed.
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project id.
     *
     * @deprecated Deprecated
     */
    project?: pulumi.Input<string>;
    /**
     * ID of the project of the access approval settings.
     */
    projectId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ProjectAccessApprovalSettingsTimeouts>;
}

/**
 * The set of arguments for constructing a ProjectAccessApprovalSettings resource.
 */
export interface ProjectAccessApprovalSettingsArgs {
    /**
     * The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a
     * Google-managed key should be used for signing. This property will be ignored if set by an ancestor of the resource, and
     * new non-empty values may not be set.
     */
    activeKeyVersion?: pulumi.Input<string>;
    /**
     * A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the
     * resource given by name against any of these services contained here will be required to have explicit approval.
     * Enrollment can only be done on an all or nothing basis. A maximum of 10 enrolled services will be enforced, to be
     * expanded as the set of supported services is expanded.
     */
    enrolledServices: pulumi.Input<pulumi.Input<inputs.ProjectAccessApprovalSettingsEnrolledService>[]>;
    /**
     * A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to
     * a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email
     * addresses are allowed.
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project id.
     *
     * @deprecated Deprecated
     */
    project?: pulumi.Input<string>;
    /**
     * ID of the project of the access approval settings.
     */
    projectId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ProjectAccessApprovalSettingsTimeouts>;
}
