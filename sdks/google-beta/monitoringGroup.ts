// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitoringGroup extends pulumi.CustomResource {
    /**
     * Get an existing MonitoringGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitoringGroupState, opts?: pulumi.CustomResourceOptions): MonitoringGroup {
        return new MonitoringGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/monitoringGroup:MonitoringGroup';

    /**
     * Returns true if the given object is an instance of MonitoringGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitoringGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitoringGroup.__pulumiType;
    }

    /**
     * A user-assigned name for this group, used only for display purposes.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The filter used to determine which monitored resources belong to this group.
     */
    public readonly filter!: pulumi.Output<string>;
    /**
     * If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups
     * that are clusters.
     */
    public readonly isCluster!: pulumi.Output<boolean | undefined>;
    /**
     * A unique identifier for this group. The format is "projects/{project_id_or_number}/groups/{group_id}".
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The name of the group's parent, if it has one. The format is "projects/{project_id_or_number}/groups/{group_id}". For
     * groups with no parent, parentName is the empty string, "".
     */
    public readonly parentName!: pulumi.Output<string | undefined>;
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MonitoringGroupTimeouts | undefined>;

    /**
     * Create a MonitoringGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitoringGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitoringGroupArgs | MonitoringGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitoringGroupState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["isCluster"] = state ? state.isCluster : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentName"] = state ? state.parentName : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MonitoringGroupArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["isCluster"] = args ? args.isCluster : undefined;
            resourceInputs["parentName"] = args ? args.parentName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitoringGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitoringGroup resources.
 */
export interface MonitoringGroupState {
    /**
     * A user-assigned name for this group, used only for display purposes.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The filter used to determine which monitored resources belong to this group.
     */
    filter?: pulumi.Input<string>;
    /**
     * If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups
     * that are clusters.
     */
    isCluster?: pulumi.Input<boolean>;
    /**
     * A unique identifier for this group. The format is "projects/{project_id_or_number}/groups/{group_id}".
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the group's parent, if it has one. The format is "projects/{project_id_or_number}/groups/{group_id}". For
     * groups with no parent, parentName is the empty string, "".
     */
    parentName?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitoringGroupTimeouts>;
}

/**
 * The set of arguments for constructing a MonitoringGroup resource.
 */
export interface MonitoringGroupArgs {
    /**
     * A user-assigned name for this group, used only for display purposes.
     */
    displayName: pulumi.Input<string>;
    /**
     * The filter used to determine which monitored resources belong to this group.
     */
    filter: pulumi.Input<string>;
    /**
     * If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups
     * that are clusters.
     */
    isCluster?: pulumi.Input<boolean>;
    /**
     * The name of the group's parent, if it has one. The format is "projects/{project_id_or_number}/groups/{group_id}". For
     * groups with no parent, parentName is the empty string, "".
     */
    parentName?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitoringGroupTimeouts>;
}
