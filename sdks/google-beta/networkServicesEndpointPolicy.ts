// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkServicesEndpointPolicy extends pulumi.CustomResource {
    /**
     * Get an existing NetworkServicesEndpointPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkServicesEndpointPolicyState, opts?: pulumi.CustomResourceOptions): NetworkServicesEndpointPolicy {
        return new NetworkServicesEndpointPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/networkServicesEndpointPolicy:NetworkServicesEndpointPolicy';

    /**
     * Returns true if the given object is an instance of NetworkServicesEndpointPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkServicesEndpointPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkServicesEndpointPolicy.__pulumiType;
    }

    /**
     * This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic
     * at the matched endpoints.
     */
    public readonly authorizationPolicy!: pulumi.Output<string | undefined>;
    /**
     * A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from
     * the proxy to the actual endpoints.
     */
    public readonly clientTlsPolicy!: pulumi.Output<string | undefined>;
    /**
     * Time the TcpRoute was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Required. A matcher that selects endpoints to which the policies should be applied.
     */
    public readonly endpointMatcher!: pulumi.Output<outputs.NetworkServicesEndpointPolicyEndpointMatcher>;
    /**
     * Set of label tags associated with the TcpRoute resource. **Note**: This field is non-authoritative, and will only manage
     * the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
     * the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the EndpointPolicy resource.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be
     * applied to terminate the inbound traffic at the identified backends.
     */
    public readonly serverTlsPolicy!: pulumi.Output<string | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkServicesEndpointPolicyTimeouts | undefined>;
    /**
     * Port selector for the (matched) endpoints. If no port selector is provided, the matched config is applied to all ports.
     */
    public readonly trafficPortSelector!: pulumi.Output<outputs.NetworkServicesEndpointPolicyTrafficPortSelector | undefined>;
    /**
     * The type of endpoint policy. This is primarily used to validate the configuration. Possible values: ["SIDECAR_PROXY",
     * "GRPC_SERVER"]
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Time the TcpRoute was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a NetworkServicesEndpointPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkServicesEndpointPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkServicesEndpointPolicyArgs | NetworkServicesEndpointPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkServicesEndpointPolicyState | undefined;
            resourceInputs["authorizationPolicy"] = state ? state.authorizationPolicy : undefined;
            resourceInputs["clientTlsPolicy"] = state ? state.clientTlsPolicy : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["endpointMatcher"] = state ? state.endpointMatcher : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serverTlsPolicy"] = state ? state.serverTlsPolicy : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trafficPortSelector"] = state ? state.trafficPortSelector : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as NetworkServicesEndpointPolicyArgs | undefined;
            if ((!args || args.endpointMatcher === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointMatcher'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["authorizationPolicy"] = args ? args.authorizationPolicy : undefined;
            resourceInputs["clientTlsPolicy"] = args ? args.clientTlsPolicy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endpointMatcher"] = args ? args.endpointMatcher : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serverTlsPolicy"] = args ? args.serverTlsPolicy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trafficPortSelector"] = args ? args.trafficPortSelector : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkServicesEndpointPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkServicesEndpointPolicy resources.
 */
export interface NetworkServicesEndpointPolicyState {
    /**
     * This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic
     * at the matched endpoints.
     */
    authorizationPolicy?: pulumi.Input<string>;
    /**
     * A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from
     * the proxy to the actual endpoints.
     */
    clientTlsPolicy?: pulumi.Input<string>;
    /**
     * Time the TcpRoute was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. A matcher that selects endpoints to which the policies should be applied.
     */
    endpointMatcher?: pulumi.Input<inputs.NetworkServicesEndpointPolicyEndpointMatcher>;
    /**
     * Set of label tags associated with the TcpRoute resource. **Note**: This field is non-authoritative, and will only manage
     * the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
     * the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the EndpointPolicy resource.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be
     * applied to terminate the inbound traffic at the identified backends.
     */
    serverTlsPolicy?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NetworkServicesEndpointPolicyTimeouts>;
    /**
     * Port selector for the (matched) endpoints. If no port selector is provided, the matched config is applied to all ports.
     */
    trafficPortSelector?: pulumi.Input<inputs.NetworkServicesEndpointPolicyTrafficPortSelector>;
    /**
     * The type of endpoint policy. This is primarily used to validate the configuration. Possible values: ["SIDECAR_PROXY",
     * "GRPC_SERVER"]
     */
    type?: pulumi.Input<string>;
    /**
     * Time the TcpRoute was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkServicesEndpointPolicy resource.
 */
export interface NetworkServicesEndpointPolicyArgs {
    /**
     * This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic
     * at the matched endpoints.
     */
    authorizationPolicy?: pulumi.Input<string>;
    /**
     * A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from
     * the proxy to the actual endpoints.
     */
    clientTlsPolicy?: pulumi.Input<string>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Required. A matcher that selects endpoints to which the policies should be applied.
     */
    endpointMatcher: pulumi.Input<inputs.NetworkServicesEndpointPolicyEndpointMatcher>;
    /**
     * Set of label tags associated with the TcpRoute resource. **Note**: This field is non-authoritative, and will only manage
     * the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on
     * the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the EndpointPolicy resource.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be
     * applied to terminate the inbound traffic at the identified backends.
     */
    serverTlsPolicy?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkServicesEndpointPolicyTimeouts>;
    /**
     * Port selector for the (matched) endpoints. If no port selector is provided, the matched config is applied to all ports.
     */
    trafficPortSelector?: pulumi.Input<inputs.NetworkServicesEndpointPolicyTrafficPortSelector>;
    /**
     * The type of endpoint policy. This is primarily used to validate the configuration. Possible values: ["SIDECAR_PROXY",
     * "GRPC_SERVER"]
     */
    type: pulumi.Input<string>;
}
