// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GkeonpremVmwareNodePool extends pulumi.CustomResource {
    /**
     * Get an existing GkeonpremVmwareNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GkeonpremVmwareNodePoolState, opts?: pulumi.CustomResourceOptions): GkeonpremVmwareNodePool {
        return new GkeonpremVmwareNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/gkeonpremVmwareNodePool:GkeonpremVmwareNodePool';

    /**
     * Returns true if the given object is an instance of GkeonpremVmwareNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GkeonpremVmwareNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GkeonpremVmwareNodePool.__pulumiType;
    }

    /**
     * Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
     * and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
     * slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
     * dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
     * only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
     * the annotations present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The node configuration of the node pool.
     */
    public readonly config!: pulumi.Output<outputs.GkeonpremVmwareNodePoolConfig>;
    /**
     * The time the cluster was created, in RFC3339 text format.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The time the cluster was deleted, in RFC3339 text format.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * The display name for the node pool.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
     * requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
     * read-modify-writes through optimistic concurrency control.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The location of the resource.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The vmware node pool name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Node Pool autoscaling config for the node pool.
     */
    public readonly nodePoolAutoscaling!: pulumi.Output<outputs.GkeonpremVmwareNodePoolNodePoolAutoscaling | undefined>;
    /**
     * Anthos version for the node pool. Defaults to the user cluster version.
     */
    public /*out*/ readonly onPremVersion!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * If set, there are currently changes in flight to the node pool.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * The current state of this cluster.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * ResourceStatus representing detailed cluster state.
     */
    public /*out*/ readonly statuses!: pulumi.Output<outputs.GkeonpremVmwareNodePoolStatus[]>;
    public readonly timeouts!: pulumi.Output<outputs.GkeonpremVmwareNodePoolTimeouts | undefined>;
    /**
     * The unique identifier of the node pool.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The time the cluster was last updated, in RFC3339 text format.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The cluster this node pool belongs to.
     */
    public readonly vmwareCluster!: pulumi.Output<string>;

    /**
     * Create a GkeonpremVmwareNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GkeonpremVmwareNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GkeonpremVmwareNodePoolArgs | GkeonpremVmwareNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GkeonpremVmwareNodePoolState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteTime"] = state ? state.deleteTime : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodePoolAutoscaling"] = state ? state.nodePoolAutoscaling : undefined;
            resourceInputs["onPremVersion"] = state ? state.onPremVersion : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vmwareCluster"] = state ? state.vmwareCluster : undefined;
        } else {
            const args = argsOrState as GkeonpremVmwareNodePoolArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.vmwareCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmwareCluster'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodePoolAutoscaling"] = args ? args.nodePoolAutoscaling : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmwareCluster"] = args ? args.vmwareCluster : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["onPremVersion"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["statuses"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GkeonpremVmwareNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GkeonpremVmwareNodePool resources.
 */
export interface GkeonpremVmwareNodePoolState {
    /**
     * Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
     * and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
     * slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
     * dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
     * only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
     * the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The node configuration of the node pool.
     */
    config?: pulumi.Input<inputs.GkeonpremVmwareNodePoolConfig>;
    /**
     * The time the cluster was created, in RFC3339 text format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The time the cluster was deleted, in RFC3339 text format.
     */
    deleteTime?: pulumi.Input<string>;
    /**
     * The display name for the node pool.
     */
    displayName?: pulumi.Input<string>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete
     * requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent
     * read-modify-writes through optimistic concurrency control.
     */
    etag?: pulumi.Input<string>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The vmware node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * Node Pool autoscaling config for the node pool.
     */
    nodePoolAutoscaling?: pulumi.Input<inputs.GkeonpremVmwareNodePoolNodePoolAutoscaling>;
    /**
     * Anthos version for the node pool. Defaults to the user cluster version.
     */
    onPremVersion?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * If set, there are currently changes in flight to the node pool.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * The current state of this cluster.
     */
    state?: pulumi.Input<string>;
    /**
     * ResourceStatus representing detailed cluster state.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.GkeonpremVmwareNodePoolStatus>[]>;
    timeouts?: pulumi.Input<inputs.GkeonpremVmwareNodePoolTimeouts>;
    /**
     * The unique identifier of the node pool.
     */
    uid?: pulumi.Input<string>;
    /**
     * The time the cluster was last updated, in RFC3339 text format.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The cluster this node pool belongs to.
     */
    vmwareCluster?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GkeonpremVmwareNodePool resource.
 */
export interface GkeonpremVmwareNodePoolArgs {
    /**
     * Annotations on the node Pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys
     * and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a
     * slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with
     * dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is non-authoritative, and will
     * only manage the annotations present in your configuration. Please refer to the field 'effective_annotations' for all of
     * the annotations present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The node configuration of the node pool.
     */
    config: pulumi.Input<inputs.GkeonpremVmwareNodePoolConfig>;
    /**
     * The display name for the node pool.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The location of the resource.
     */
    location: pulumi.Input<string>;
    /**
     * The vmware node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * Node Pool autoscaling config for the node pool.
     */
    nodePoolAutoscaling?: pulumi.Input<inputs.GkeonpremVmwareNodePoolNodePoolAutoscaling>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GkeonpremVmwareNodePoolTimeouts>;
    /**
     * The cluster this node pool belongs to.
     */
    vmwareCluster: pulumi.Input<string>;
}
