// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SccSource extends pulumi.CustomResource {
    /**
     * Get an existing SccSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SccSourceState, opts?: pulumi.CustomResourceOptions): SccSource {
        return new SccSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/sccSource:SccSource';

    /**
     * Returns true if the given object is an instance of SccSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SccSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SccSource.__pulumiType;
    }

    /**
     * The description of the source (max of 1024 characters).
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The source’s display name. A source’s display name must be unique amongst its siblings, for example, two sources
     * with the same parent can't share the same display name. The display name must start and end with a letter or digit, may
     * contain letters, digits, spaces, hyphens, and underscores, and can be no longer than 32 characters.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The resource name of this source, in the format 'organizations/{{organization}}/sources/{{source}}'.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The organization whose Cloud Security Command Center the Source lives in.
     */
    public readonly organization!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SccSourceTimeouts | undefined>;

    /**
     * Create a SccSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SccSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SccSourceArgs | SccSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SccSourceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SccSourceArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SccSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SccSource resources.
 */
export interface SccSourceState {
    /**
     * The description of the source (max of 1024 characters).
     */
    description?: pulumi.Input<string>;
    /**
     * The source’s display name. A source’s display name must be unique amongst its siblings, for example, two sources
     * with the same parent can't share the same display name. The display name must start and end with a letter or digit, may
     * contain letters, digits, spaces, hyphens, and underscores, and can be no longer than 32 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The resource name of this source, in the format 'organizations/{{organization}}/sources/{{source}}'.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Source lives in.
     */
    organization?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SccSourceTimeouts>;
}

/**
 * The set of arguments for constructing a SccSource resource.
 */
export interface SccSourceArgs {
    /**
     * The description of the source (max of 1024 characters).
     */
    description?: pulumi.Input<string>;
    /**
     * The source’s display name. A source’s display name must be unique amongst its siblings, for example, two sources
     * with the same parent can't share the same display name. The display name must start and end with a letter or digit, may
     * contain letters, digits, spaces, hyphens, and underscores, and can be no longer than 32 characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Source lives in.
     */
    organization: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SccSourceTimeouts>;
}
