// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirebaseAppCheckServiceConfig extends pulumi.CustomResource {
    /**
     * Get an existing FirebaseAppCheckServiceConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirebaseAppCheckServiceConfigState, opts?: pulumi.CustomResourceOptions): FirebaseAppCheckServiceConfig {
        return new FirebaseAppCheckServiceConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/firebaseAppCheckServiceConfig:FirebaseAppCheckServiceConfig';

    /**
     * Returns true if the given object is an instance of FirebaseAppCheckServiceConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirebaseAppCheckServiceConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirebaseAppCheckServiceConfig.__pulumiType;
    }

    public readonly enforcementMode!: pulumi.Output<string | undefined>;
    /**
     * The fully-qualified resource name of the service enforcement configuration.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
     * firebasestorage.googleapis.com (Cloud Storage for Firebase) firebasedatabase.googleapis.com (Firebase Realtime Database)
     * firestore.googleapis.com (Cloud Firestore) identitytoolkit.googleapis.com (Authentication)
     */
    public readonly serviceId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FirebaseAppCheckServiceConfigTimeouts | undefined>;

    /**
     * Create a FirebaseAppCheckServiceConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirebaseAppCheckServiceConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirebaseAppCheckServiceConfigArgs | FirebaseAppCheckServiceConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirebaseAppCheckServiceConfigState | undefined;
            resourceInputs["enforcementMode"] = state ? state.enforcementMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FirebaseAppCheckServiceConfigArgs | undefined;
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["enforcementMode"] = args ? args.enforcementMode : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirebaseAppCheckServiceConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirebaseAppCheckServiceConfig resources.
 */
export interface FirebaseAppCheckServiceConfigState {
    enforcementMode?: pulumi.Input<string>;
    /**
     * The fully-qualified resource name of the service enforcement configuration.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
     * firebasestorage.googleapis.com (Cloud Storage for Firebase) firebasedatabase.googleapis.com (Firebase Realtime Database)
     * firestore.googleapis.com (Cloud Firestore) identitytoolkit.googleapis.com (Authentication)
     */
    serviceId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirebaseAppCheckServiceConfigTimeouts>;
}

/**
 * The set of arguments for constructing a FirebaseAppCheckServiceConfig resource.
 */
export interface FirebaseAppCheckServiceConfigArgs {
    enforcementMode?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The identifier of the service to configure enforcement. Currently, the following service IDs are supported:
     * firebasestorage.googleapis.com (Cloud Storage for Firebase) firebasedatabase.googleapis.com (Firebase Realtime Database)
     * firestore.googleapis.com (Cloud Firestore) identitytoolkit.googleapis.com (Authentication)
     */
    serviceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirebaseAppCheckServiceConfigTimeouts>;
}
