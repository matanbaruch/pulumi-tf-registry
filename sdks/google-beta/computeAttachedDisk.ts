// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeAttachedDisk extends pulumi.CustomResource {
    /**
     * Get an existing ComputeAttachedDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeAttachedDiskState, opts?: pulumi.CustomResourceOptions): ComputeAttachedDisk {
        return new ComputeAttachedDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-beta:index/computeAttachedDisk:ComputeAttachedDisk';

    /**
     * Returns true if the given object is an instance of ComputeAttachedDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeAttachedDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeAttachedDisk.__pulumiType;
    }

    /**
     * Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux
     * operating system running within the instance. This name can be used to reference the device for mounting, resizing, and
     * so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in
     * the form persistent-disks-x, where x is a number assigned by Google Compute Engine.
     */
    public readonly deviceName!: pulumi.Output<string>;
    /**
     * name or self_link of the disk that will be attached.
     */
    public readonly disk!: pulumi.Output<string>;
    /**
     * name or self_link of the compute instance that the disk will be attached to. If the self_link is provided then zone and
     * project are extracted from the self link. If only the name is used then zone and project must be defined as properties
     * on the resource or provider.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the
     * disk in READ_WRITE mode.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The project that the referenced compute instance is a part of. If instance is referenced by its self_link the project
     * defined in the link will take precedence.
     */
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeAttachedDiskTimeouts | undefined>;
    /**
     * The zone that the referenced compute instance is located within. If instance is referenced by its self_link the zone
     * defined in the link will take precedence.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a ComputeAttachedDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeAttachedDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeAttachedDiskArgs | ComputeAttachedDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeAttachedDiskState | undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ComputeAttachedDiskArgs | undefined;
            if ((!args || args.disk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disk'");
            }
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["disk"] = args ? args.disk : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeAttachedDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeAttachedDisk resources.
 */
export interface ComputeAttachedDiskState {
    /**
     * Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux
     * operating system running within the instance. This name can be used to reference the device for mounting, resizing, and
     * so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in
     * the form persistent-disks-x, where x is a number assigned by Google Compute Engine.
     */
    deviceName?: pulumi.Input<string>;
    /**
     * name or self_link of the disk that will be attached.
     */
    disk?: pulumi.Input<string>;
    /**
     * name or self_link of the compute instance that the disk will be attached to. If the self_link is provided then zone and
     * project are extracted from the self link. If only the name is used then zone and project must be defined as properties
     * on the resource or provider.
     */
    instance?: pulumi.Input<string>;
    /**
     * The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the
     * disk in READ_WRITE mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * The project that the referenced compute instance is a part of. If instance is referenced by its self_link the project
     * defined in the link will take precedence.
     */
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeAttachedDiskTimeouts>;
    /**
     * The zone that the referenced compute instance is located within. If instance is referenced by its self_link the zone
     * defined in the link will take precedence.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeAttachedDisk resource.
 */
export interface ComputeAttachedDiskArgs {
    /**
     * Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux
     * operating system running within the instance. This name can be used to reference the device for mounting, resizing, and
     * so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in
     * the form persistent-disks-x, where x is a number assigned by Google Compute Engine.
     */
    deviceName?: pulumi.Input<string>;
    /**
     * name or self_link of the disk that will be attached.
     */
    disk: pulumi.Input<string>;
    /**
     * name or self_link of the compute instance that the disk will be attached to. If the self_link is provided then zone and
     * project are extracted from the self link. If only the name is used then zone and project must be defined as properties
     * on the resource or provider.
     */
    instance: pulumi.Input<string>;
    /**
     * The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the
     * disk in READ_WRITE mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * The project that the referenced compute instance is a part of. If instance is referenced by its self_link the project
     * defined in the link will take precedence.
     */
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeAttachedDiskTimeouts>;
    /**
     * The zone that the referenced compute instance is located within. If instance is referenced by its self_link the zone
     * defined in the link will take precedence.
     */
    zone?: pulumi.Input<string>;
}
