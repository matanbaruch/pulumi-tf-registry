// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getTlsSubscription(args?: GetTlsSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetTlsSubscriptionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fastly:index/getTlsSubscription:getTlsSubscription", {
        "certificateAuthority": args.certificateAuthority,
        "configurationId": args.configurationId,
        "domains": args.domains,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTlsSubscription.
 */
export interface GetTlsSubscriptionArgs {
    certificateAuthority?: string;
    configurationId?: string;
    domains?: string[];
    id?: string;
}

/**
 * A collection of values returned by getTlsSubscription.
 */
export interface GetTlsSubscriptionResult {
    readonly certificateAuthority: string;
    readonly certificateIds: string[];
    readonly commonName: string;
    readonly configurationId: string;
    readonly createdAt: string;
    readonly domains: string[];
    readonly id: string;
    readonly state: string;
    readonly updatedAt: string;
}
export function getTlsSubscriptionOutput(args?: GetTlsSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTlsSubscriptionResult> {
    return pulumi.output(args).apply((a: any) => getTlsSubscription(a, opts))
}

/**
 * A collection of arguments for invoking getTlsSubscription.
 */
export interface GetTlsSubscriptionOutputArgs {
    certificateAuthority?: pulumi.Input<string>;
    configurationId?: pulumi.Input<string>;
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
}
