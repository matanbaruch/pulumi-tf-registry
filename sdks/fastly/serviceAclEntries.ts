// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceAclEntries extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAclEntries resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceAclEntriesState, opts?: pulumi.CustomResourceOptions): ServiceAclEntries {
        return new ServiceAclEntries(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/serviceAclEntries:ServiceAclEntries';

    /**
     * Returns true if the given object is an instance of ServiceAclEntries.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceAclEntries {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAclEntries.__pulumiType;
    }

    /**
     * The ID of the ACL that the items belong to
     */
    public readonly aclId!: pulumi.Output<string>;
    /**
     * ACL Entries
     */
    public readonly entries!: pulumi.Output<outputs.ServiceAclEntriesEntry[] | undefined>;
    /**
     * Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally
     */
    public readonly manageEntries!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Service that the ACL belongs to
     */
    public readonly serviceId!: pulumi.Output<string>;

    /**
     * Create a ServiceAclEntries resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceAclEntriesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceAclEntriesArgs | ServiceAclEntriesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceAclEntriesState | undefined;
            resourceInputs["aclId"] = state ? state.aclId : undefined;
            resourceInputs["entries"] = state ? state.entries : undefined;
            resourceInputs["manageEntries"] = state ? state.manageEntries : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
        } else {
            const args = argsOrState as ServiceAclEntriesArgs | undefined;
            if ((!args || args.aclId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclId'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["aclId"] = args ? args.aclId : undefined;
            resourceInputs["entries"] = args ? args.entries : undefined;
            resourceInputs["manageEntries"] = args ? args.manageEntries : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceAclEntries.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceAclEntries resources.
 */
export interface ServiceAclEntriesState {
    /**
     * The ID of the ACL that the items belong to
     */
    aclId?: pulumi.Input<string>;
    /**
     * ACL Entries
     */
    entries?: pulumi.Input<pulumi.Input<inputs.ServiceAclEntriesEntry>[]>;
    /**
     * Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally
     */
    manageEntries?: pulumi.Input<boolean>;
    /**
     * The ID of the Service that the ACL belongs to
     */
    serviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceAclEntries resource.
 */
export interface ServiceAclEntriesArgs {
    /**
     * The ID of the ACL that the items belong to
     */
    aclId: pulumi.Input<string>;
    /**
     * ACL Entries
     */
    entries?: pulumi.Input<pulumi.Input<inputs.ServiceAclEntriesEntry>[]>;
    /**
     * Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally
     */
    manageEntries?: pulumi.Input<boolean>;
    /**
     * The ID of the Service that the ACL belongs to
     */
    serviceId: pulumi.Input<string>;
}
