// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getUserAttributes(args: GetUserAttributesArgs, opts?: pulumi.InvokeOptions): Promise<GetUserAttributesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("splunkconfig:index/getUserAttributes:getUserAttributes", {
        "id": args.id,
        "userName": args.userName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUserAttributes.
 */
export interface GetUserAttributesArgs {
    id?: string;
    userName: string;
}

/**
 * A collection of values returned by getUserAttributes.
 */
export interface GetUserAttributesResult {
    readonly email: string;
    readonly forceChangePass: boolean;
    readonly id: string;
    readonly password: string;
    readonly realname: string;
    readonly roles: string[];
    readonly userName: string;
}
export function getUserAttributesOutput(args: GetUserAttributesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserAttributesResult> {
    return pulumi.output(args).apply((a: any) => getUserAttributes(a, opts))
}

/**
 * A collection of arguments for invoking getUserAttributes.
 */
export interface GetUserAttributesOutputArgs {
    id?: pulumi.Input<string>;
    userName: pulumi.Input<string>;
}
