// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getAppPackage(args: GetAppPackageArgs, opts?: pulumi.InvokeOptions): Promise<GetAppPackageResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("splunkconfig:index/getAppPackage:getAppPackage", {
        "appId": args.appId,
        "id": args.id,
        "patchCount": args.patchCount,
        "path": args.path,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAppPackage.
 */
export interface GetAppPackageArgs {
    appId: string;
    id?: string;
    patchCount?: number;
    path: string;
}

/**
 * A collection of values returned by getAppPackage.
 */
export interface GetAppPackageResult {
    readonly appId: string;
    readonly effectiveVersion: string;
    readonly id: string;
    readonly patchCount?: number;
    readonly path: string;
    readonly tarballPath: string;
}
export function getAppPackageOutput(args: GetAppPackageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppPackageResult> {
    return pulumi.output(args).apply((a: any) => getAppPackage(a, opts))
}

/**
 * A collection of arguments for invoking getAppPackage.
 */
export interface GetAppPackageOutputArgs {
    appId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    patchCount?: pulumi.Input<number>;
    path: pulumi.Input<string>;
}
