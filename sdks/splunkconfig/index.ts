// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppAutoVersionArgs, AppAutoVersionState } from "./appAutoVersion";
export type AppAutoVersion = import("./appAutoVersion").AppAutoVersion;
export const AppAutoVersion: typeof import("./appAutoVersion").AppAutoVersion = null as any;
utilities.lazyLoad(exports, ["AppAutoVersion"], () => require("./appAutoVersion"));

export { AppPackageArgs, AppPackageState } from "./appPackage";
export type AppPackage = import("./appPackage").AppPackage;
export const AppPackage: typeof import("./appPackage").AppPackage = null as any;
utilities.lazyLoad(exports, ["AppPackage"], () => require("./appPackage"));

export { GetAppAttributesArgs, GetAppAttributesResult, GetAppAttributesOutputArgs } from "./getAppAttributes";
export const getAppAttributes: typeof import("./getAppAttributes").getAppAttributes = null as any;
export const getAppAttributesOutput: typeof import("./getAppAttributes").getAppAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getAppAttributes","getAppAttributesOutput"], () => require("./getAppAttributes"));

export { GetAppIdsArgs, GetAppIdsResult, GetAppIdsOutputArgs } from "./getAppIds";
export const getAppIds: typeof import("./getAppIds").getAppIds = null as any;
export const getAppIdsOutput: typeof import("./getAppIds").getAppIdsOutput = null as any;
utilities.lazyLoad(exports, ["getAppIds","getAppIdsOutput"], () => require("./getAppIds"));

export { GetAppPackageArgs, GetAppPackageResult, GetAppPackageOutputArgs } from "./getAppPackage";
export const getAppPackage: typeof import("./getAppPackage").getAppPackage = null as any;
export const getAppPackageOutput: typeof import("./getAppPackage").getAppPackageOutput = null as any;
utilities.lazyLoad(exports, ["getAppPackage","getAppPackageOutput"], () => require("./getAppPackage"));

export { GetIndexAttributesArgs, GetIndexAttributesResult, GetIndexAttributesOutputArgs } from "./getIndexAttributes";
export const getIndexAttributes: typeof import("./getIndexAttributes").getIndexAttributes = null as any;
export const getIndexAttributesOutput: typeof import("./getIndexAttributes").getIndexAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getIndexAttributes","getIndexAttributesOutput"], () => require("./getIndexAttributes"));

export { GetIndexNamesArgs, GetIndexNamesResult, GetIndexNamesOutputArgs } from "./getIndexNames";
export const getIndexNames: typeof import("./getIndexNames").getIndexNames = null as any;
export const getIndexNamesOutput: typeof import("./getIndexNames").getIndexNamesOutput = null as any;
utilities.lazyLoad(exports, ["getIndexNames","getIndexNamesOutput"], () => require("./getIndexNames"));

export { GetLookupAttributesArgs, GetLookupAttributesResult, GetLookupAttributesOutputArgs } from "./getLookupAttributes";
export const getLookupAttributes: typeof import("./getLookupAttributes").getLookupAttributes = null as any;
export const getLookupAttributesOutput: typeof import("./getLookupAttributes").getLookupAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getLookupAttributes","getLookupAttributesOutput"], () => require("./getLookupAttributes"));

export { GetRoleAttributesArgs, GetRoleAttributesResult, GetRoleAttributesOutputArgs } from "./getRoleAttributes";
export const getRoleAttributes: typeof import("./getRoleAttributes").getRoleAttributes = null as any;
export const getRoleAttributesOutput: typeof import("./getRoleAttributes").getRoleAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getRoleAttributes","getRoleAttributesOutput"], () => require("./getRoleAttributes"));

export { GetRoleNamesArgs, GetRoleNamesResult, GetRoleNamesOutputArgs } from "./getRoleNames";
export const getRoleNames: typeof import("./getRoleNames").getRoleNames = null as any;
export const getRoleNamesOutput: typeof import("./getRoleNames").getRoleNamesOutput = null as any;
utilities.lazyLoad(exports, ["getRoleNames","getRoleNamesOutput"], () => require("./getRoleNames"));

export { GetSamlGroupAttributesArgs, GetSamlGroupAttributesResult, GetSamlGroupAttributesOutputArgs } from "./getSamlGroupAttributes";
export const getSamlGroupAttributes: typeof import("./getSamlGroupAttributes").getSamlGroupAttributes = null as any;
export const getSamlGroupAttributesOutput: typeof import("./getSamlGroupAttributes").getSamlGroupAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getSamlGroupAttributes","getSamlGroupAttributesOutput"], () => require("./getSamlGroupAttributes"));

export { GetSamlGroupNamesArgs, GetSamlGroupNamesResult, GetSamlGroupNamesOutputArgs } from "./getSamlGroupNames";
export const getSamlGroupNames: typeof import("./getSamlGroupNames").getSamlGroupNames = null as any;
export const getSamlGroupNamesOutput: typeof import("./getSamlGroupNames").getSamlGroupNamesOutput = null as any;
utilities.lazyLoad(exports, ["getSamlGroupNames","getSamlGroupNamesOutput"], () => require("./getSamlGroupNames"));

export { GetUserAttributesArgs, GetUserAttributesResult, GetUserAttributesOutputArgs } from "./getUserAttributes";
export const getUserAttributes: typeof import("./getUserAttributes").getUserAttributes = null as any;
export const getUserAttributesOutput: typeof import("./getUserAttributes").getUserAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getUserAttributes","getUserAttributesOutput"], () => require("./getUserAttributes"));

export { GetUserNamesArgs, GetUserNamesResult, GetUserNamesOutputArgs } from "./getUserNames";
export const getUserNames: typeof import("./getUserNames").getUserNames = null as any;
export const getUserNamesOutput: typeof import("./getUserNames").getUserNamesOutput = null as any;
utilities.lazyLoad(exports, ["getUserNames","getUserNamesOutput"], () => require("./getUserNames"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "splunkconfig:index/appAutoVersion:AppAutoVersion":
                return new AppAutoVersion(name, <any>undefined, { urn })
            case "splunkconfig:index/appPackage:AppPackage":
                return new AppPackage(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("splunkconfig", "index/appAutoVersion", _module)
pulumi.runtime.registerResourceModule("splunkconfig", "index/appPackage", _module)
pulumi.runtime.registerResourcePackage("splunkconfig", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:splunkconfig") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
