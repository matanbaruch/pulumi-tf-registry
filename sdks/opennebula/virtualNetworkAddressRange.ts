// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualNetworkAddressRange extends pulumi.CustomResource {
    /**
     * Get an existing VirtualNetworkAddressRange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualNetworkAddressRangeState, opts?: pulumi.CustomResourceOptions): VirtualNetworkAddressRange {
        return new VirtualNetworkAddressRange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opennebula:index/virtualNetworkAddressRange:VirtualNetworkAddressRange';

    /**
     * Returns true if the given object is an instance of VirtualNetworkAddressRange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualNetworkAddressRange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualNetworkAddressRange.__pulumiType;
    }

    /**
     * Type of the Address Range: IP4, IP6. Default is 'IP4'
     */
    public readonly arType!: pulumi.Output<string | undefined>;
    /**
     * Add custom attributes
     */
    public readonly custom!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Global prefix for IP6 or IP4_6
     */
    public readonly globalPrefix!: pulumi.Output<string | undefined>;
    /**
     * List of IPs held in this address range
     */
    public /*out*/ readonly heldIps!: pulumi.Output<string[]>;
    /**
     * List of IPs to be held from this address range
     */
    public readonly holdIps!: pulumi.Output<string[] | undefined>;
    /**
     * Start IPv4 of the range to be allocated (Required if IP4 or IP4_6).
     */
    public readonly ip4!: pulumi.Output<string | undefined>;
    /**
     * Start IPv6 of the range to be allocated (Required if IP6_STATIC or IP4_6_STATIC)
     */
    public readonly ip6!: pulumi.Output<string | undefined>;
    /**
     * IPAM driver
     */
    public readonly ipam!: pulumi.Output<string | undefined>;
    /**
     * Start MAC of the range to be allocated
     */
    public readonly mac!: pulumi.Output<string>;
    /**
     * Prefix length Only needed for IP6_STATIC or IP4_6_STATIC
     */
    public readonly prefixLength!: pulumi.Output<string | undefined>;
    /**
     * Count of addresses in the ip range
     */
    public readonly size!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualNetworkAddressRangeTimeouts | undefined>;
    /**
     * ULA prefix for IP6 or IP4_6
     */
    public readonly ulaPrefix!: pulumi.Output<string | undefined>;
    public readonly virtualNetworkId!: pulumi.Output<number>;

    /**
     * Create a VirtualNetworkAddressRange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualNetworkAddressRangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualNetworkAddressRangeArgs | VirtualNetworkAddressRangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualNetworkAddressRangeState | undefined;
            resourceInputs["arType"] = state ? state.arType : undefined;
            resourceInputs["custom"] = state ? state.custom : undefined;
            resourceInputs["globalPrefix"] = state ? state.globalPrefix : undefined;
            resourceInputs["heldIps"] = state ? state.heldIps : undefined;
            resourceInputs["holdIps"] = state ? state.holdIps : undefined;
            resourceInputs["ip4"] = state ? state.ip4 : undefined;
            resourceInputs["ip6"] = state ? state.ip6 : undefined;
            resourceInputs["ipam"] = state ? state.ipam : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["ulaPrefix"] = state ? state.ulaPrefix : undefined;
            resourceInputs["virtualNetworkId"] = state ? state.virtualNetworkId : undefined;
        } else {
            const args = argsOrState as VirtualNetworkAddressRangeArgs | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.virtualNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetworkId'");
            }
            resourceInputs["arType"] = args ? args.arType : undefined;
            resourceInputs["custom"] = args ? args.custom : undefined;
            resourceInputs["globalPrefix"] = args ? args.globalPrefix : undefined;
            resourceInputs["holdIps"] = args ? args.holdIps : undefined;
            resourceInputs["ip4"] = args ? args.ip4 : undefined;
            resourceInputs["ip6"] = args ? args.ip6 : undefined;
            resourceInputs["ipam"] = args ? args.ipam : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ulaPrefix"] = args ? args.ulaPrefix : undefined;
            resourceInputs["virtualNetworkId"] = args ? args.virtualNetworkId : undefined;
            resourceInputs["heldIps"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualNetworkAddressRange.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualNetworkAddressRange resources.
 */
export interface VirtualNetworkAddressRangeState {
    /**
     * Type of the Address Range: IP4, IP6. Default is 'IP4'
     */
    arType?: pulumi.Input<string>;
    /**
     * Add custom attributes
     */
    custom?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Global prefix for IP6 or IP4_6
     */
    globalPrefix?: pulumi.Input<string>;
    /**
     * List of IPs held in this address range
     */
    heldIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IPs to be held from this address range
     */
    holdIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Start IPv4 of the range to be allocated (Required if IP4 or IP4_6).
     */
    ip4?: pulumi.Input<string>;
    /**
     * Start IPv6 of the range to be allocated (Required if IP6_STATIC or IP4_6_STATIC)
     */
    ip6?: pulumi.Input<string>;
    /**
     * IPAM driver
     */
    ipam?: pulumi.Input<string>;
    /**
     * Start MAC of the range to be allocated
     */
    mac?: pulumi.Input<string>;
    /**
     * Prefix length Only needed for IP6_STATIC or IP4_6_STATIC
     */
    prefixLength?: pulumi.Input<string>;
    /**
     * Count of addresses in the ip range
     */
    size?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.VirtualNetworkAddressRangeTimeouts>;
    /**
     * ULA prefix for IP6 or IP4_6
     */
    ulaPrefix?: pulumi.Input<string>;
    virtualNetworkId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VirtualNetworkAddressRange resource.
 */
export interface VirtualNetworkAddressRangeArgs {
    /**
     * Type of the Address Range: IP4, IP6. Default is 'IP4'
     */
    arType?: pulumi.Input<string>;
    /**
     * Add custom attributes
     */
    custom?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Global prefix for IP6 or IP4_6
     */
    globalPrefix?: pulumi.Input<string>;
    /**
     * List of IPs to be held from this address range
     */
    holdIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Start IPv4 of the range to be allocated (Required if IP4 or IP4_6).
     */
    ip4?: pulumi.Input<string>;
    /**
     * Start IPv6 of the range to be allocated (Required if IP6_STATIC or IP4_6_STATIC)
     */
    ip6?: pulumi.Input<string>;
    /**
     * IPAM driver
     */
    ipam?: pulumi.Input<string>;
    /**
     * Start MAC of the range to be allocated
     */
    mac?: pulumi.Input<string>;
    /**
     * Prefix length Only needed for IP6_STATIC or IP4_6_STATIC
     */
    prefixLength?: pulumi.Input<string>;
    /**
     * Count of addresses in the ip range
     */
    size: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.VirtualNetworkAddressRangeTimeouts>;
    /**
     * ULA prefix for IP6 or IP4_6
     */
    ulaPrefix?: pulumi.Input<string>;
    virtualNetworkId: pulumi.Input<number>;
}
