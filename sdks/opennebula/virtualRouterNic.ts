// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualRouterNic extends pulumi.CustomResource {
    /**
     * Get an existing VirtualRouterNic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualRouterNicState, opts?: pulumi.CustomResourceOptions): VirtualRouterNic {
        return new VirtualRouterNic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opennebula:index/virtualRouterNic:VirtualRouterNic';

    /**
     * Returns true if the given object is an instance of VirtualRouterNic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualRouterNic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualRouterNic.__pulumiType;
    }

    public readonly floatingIp!: pulumi.Output<boolean | undefined>;
    public readonly model!: pulumi.Output<string>;
    public /*out*/ readonly network!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<number>;
    public readonly physicalDevice!: pulumi.Output<string>;
    public readonly securityGroups!: pulumi.Output<number[]>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualRouterNicTimeouts | undefined>;
    /**
     * Only if model is virtio
     */
    public readonly virtioQueues!: pulumi.Output<string>;
    public readonly virtualRouterId!: pulumi.Output<number>;

    /**
     * Create a VirtualRouterNic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualRouterNicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualRouterNicArgs | VirtualRouterNicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualRouterNicState | undefined;
            resourceInputs["floatingIp"] = state ? state.floatingIp : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["physicalDevice"] = state ? state.physicalDevice : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtioQueues"] = state ? state.virtioQueues : undefined;
            resourceInputs["virtualRouterId"] = state ? state.virtualRouterId : undefined;
        } else {
            const args = argsOrState as VirtualRouterNicArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.virtualRouterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualRouterId'");
            }
            resourceInputs["floatingIp"] = args ? args.floatingIp : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["physicalDevice"] = args ? args.physicalDevice : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtioQueues"] = args ? args.virtioQueues : undefined;
            resourceInputs["virtualRouterId"] = args ? args.virtualRouterId : undefined;
            resourceInputs["network"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualRouterNic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualRouterNic resources.
 */
export interface VirtualRouterNicState {
    floatingIp?: pulumi.Input<boolean>;
    model?: pulumi.Input<string>;
    network?: pulumi.Input<string>;
    networkId?: pulumi.Input<number>;
    physicalDevice?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<number>[]>;
    timeouts?: pulumi.Input<inputs.VirtualRouterNicTimeouts>;
    /**
     * Only if model is virtio
     */
    virtioQueues?: pulumi.Input<string>;
    virtualRouterId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VirtualRouterNic resource.
 */
export interface VirtualRouterNicArgs {
    floatingIp?: pulumi.Input<boolean>;
    model?: pulumi.Input<string>;
    networkId: pulumi.Input<number>;
    physicalDevice?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<number>[]>;
    timeouts?: pulumi.Input<inputs.VirtualRouterNicTimeouts>;
    /**
     * Only if model is virtio
     */
    virtioQueues?: pulumi.Input<string>;
    virtualRouterId: pulumi.Input<number>;
}
