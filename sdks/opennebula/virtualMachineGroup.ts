// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualMachineGroup extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachineGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineGroupState, opts?: pulumi.CustomResourceOptions): VirtualMachineGroup {
        return new VirtualMachineGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opennebula:index/virtualMachineGroup:VirtualMachineGroup';

    /**
     * Returns true if the given object is an instance of VirtualMachineGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachineGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachineGroup.__pulumiType;
    }

    /**
     * Default tags defined in the provider configuration
     */
    public /*out*/ readonly defaultTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * ID of the group that will own the template vm group
     */
    public /*out*/ readonly gid!: pulumi.Output<number>;
    /**
     * Name of the group that will own the template vm group
     */
    public /*out*/ readonly gname!: pulumi.Output<string>;
    /**
     * Name of the Group that onws the Template VM Group, If empty, it uses caller group
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Name of the template
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Permissions for the template vm group (in Unix format, owner-group-other, use-manage-admin)
     */
    public readonly permissions!: pulumi.Output<string>;
    /**
     * Roles of the VM Group
     */
    public readonly roles!: pulumi.Output<outputs.VirtualMachineGroupRole[]>;
    /**
     * Add custom tags to the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Result of the applied default_tags and resource tags
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Add custom section to the resource
     */
    public readonly templateSections!: pulumi.Output<outputs.VirtualMachineGroupTemplateSection[] | undefined>;
    /**
     * ID of the user that will own the template vm group
     */
    public /*out*/ readonly uid!: pulumi.Output<number>;
    /**
     * Name of the user that will own the template vm group
     */
    public /*out*/ readonly uname!: pulumi.Output<string>;

    /**
     * Create a VirtualMachineGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineGroupArgs | VirtualMachineGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineGroupState | undefined;
            resourceInputs["defaultTags"] = state ? state.defaultTags : undefined;
            resourceInputs["gid"] = state ? state.gid : undefined;
            resourceInputs["gname"] = state ? state.gname : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["templateSections"] = state ? state.templateSections : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["uname"] = state ? state.uname : undefined;
        } else {
            const args = argsOrState as VirtualMachineGroupArgs | undefined;
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateSections"] = args ? args.templateSections : undefined;
            resourceInputs["defaultTags"] = undefined /*out*/;
            resourceInputs["gid"] = undefined /*out*/;
            resourceInputs["gname"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["uname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachineGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachineGroup resources.
 */
export interface VirtualMachineGroupState {
    /**
     * Default tags defined in the provider configuration
     */
    defaultTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the group that will own the template vm group
     */
    gid?: pulumi.Input<number>;
    /**
     * Name of the group that will own the template vm group
     */
    gname?: pulumi.Input<string>;
    /**
     * Name of the Group that onws the Template VM Group, If empty, it uses caller group
     */
    group?: pulumi.Input<string>;
    /**
     * Name of the template
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions for the template vm group (in Unix format, owner-group-other, use-manage-admin)
     */
    permissions?: pulumi.Input<string>;
    /**
     * Roles of the VM Group
     */
    roles?: pulumi.Input<pulumi.Input<inputs.VirtualMachineGroupRole>[]>;
    /**
     * Add custom tags to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Result of the applied default_tags and resource tags
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Add custom section to the resource
     */
    templateSections?: pulumi.Input<pulumi.Input<inputs.VirtualMachineGroupTemplateSection>[]>;
    /**
     * ID of the user that will own the template vm group
     */
    uid?: pulumi.Input<number>;
    /**
     * Name of the user that will own the template vm group
     */
    uname?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualMachineGroup resource.
 */
export interface VirtualMachineGroupArgs {
    /**
     * Name of the Group that onws the Template VM Group, If empty, it uses caller group
     */
    group?: pulumi.Input<string>;
    /**
     * Name of the template
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions for the template vm group (in Unix format, owner-group-other, use-manage-admin)
     */
    permissions?: pulumi.Input<string>;
    /**
     * Roles of the VM Group
     */
    roles: pulumi.Input<pulumi.Input<inputs.VirtualMachineGroupRole>[]>;
    /**
     * Add custom tags to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Add custom section to the resource
     */
    templateSections?: pulumi.Input<pulumi.Input<inputs.VirtualMachineGroupTemplateSection>[]>;
}
