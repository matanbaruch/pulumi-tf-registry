// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MarketplaceAppliance extends pulumi.CustomResource {
    /**
     * Get an existing MarketplaceAppliance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MarketplaceApplianceState, opts?: pulumi.CustomResourceOptions): MarketplaceAppliance {
        return new MarketplaceAppliance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opennebula:index/marketplaceAppliance:MarketplaceAppliance';

    /**
     * Returns true if the given object is an instance of MarketplaceAppliance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MarketplaceAppliance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MarketplaceAppliance.__pulumiType;
    }

    /**
     * Associated template that will be added to the registered object
     */
    public readonly apptemplate64!: pulumi.Output<string | undefined>;
    /**
     * Default tags defined in the provider configuration
     */
    public /*out*/ readonly defaultTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * Text description of the appliance
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Allow to enable or disable the appliance
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the group owning the appliance
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Lock level of the new resource: USE, MANAGE, ADMIN, ALL, UNLOCK
     */
    public readonly lock!: pulumi.Output<string | undefined>;
    /**
     * The ID of the market to host the appliance
     */
    public readonly marketId!: pulumi.Output<number>;
    /**
     * Name of the appliance
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the source image
     */
    public readonly originId!: pulumi.Output<number | undefined>;
    /**
     * Permissions for the appliance (in Unix format, owner-group-other, use-manage-admin)
     */
    public readonly permissions!: pulumi.Output<string>;
    /**
     * Publisher of the appliance
     */
    public readonly publisher!: pulumi.Output<string | undefined>;
    /**
     * Add custom tags to the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Result of the applied default_tags and resource tags
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Add custom section to the resource
     */
    public readonly templateSections!: pulumi.Output<outputs.MarketplaceApplianceTemplateSection[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MarketplaceApplianceTimeouts | undefined>;
    /**
     * Type of the app: IMAGE, VMTEMPLATE, SERVICE_TEMPLATE
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * A string indicating the appliance version
     */
    public readonly version!: pulumi.Output<string | undefined>;
    /**
     * Creates this template pointing to the base image
     */
    public readonly vmtemplate64!: pulumi.Output<string | undefined>;

    /**
     * Create a MarketplaceAppliance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MarketplaceApplianceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MarketplaceApplianceArgs | MarketplaceApplianceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MarketplaceApplianceState | undefined;
            resourceInputs["apptemplate64"] = state ? state.apptemplate64 : undefined;
            resourceInputs["defaultTags"] = state ? state.defaultTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["lock"] = state ? state.lock : undefined;
            resourceInputs["marketId"] = state ? state.marketId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["originId"] = state ? state.originId : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["publisher"] = state ? state.publisher : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["templateSections"] = state ? state.templateSections : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vmtemplate64"] = state ? state.vmtemplate64 : undefined;
        } else {
            const args = argsOrState as MarketplaceApplianceArgs | undefined;
            if ((!args || args.marketId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'marketId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["apptemplate64"] = args ? args.apptemplate64 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["lock"] = args ? args.lock : undefined;
            resourceInputs["marketId"] = args ? args.marketId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["originId"] = args ? args.originId : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["publisher"] = args ? args.publisher : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateSections"] = args ? args.templateSections : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vmtemplate64"] = args ? args.vmtemplate64 : undefined;
            resourceInputs["defaultTags"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MarketplaceAppliance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MarketplaceAppliance resources.
 */
export interface MarketplaceApplianceState {
    /**
     * Associated template that will be added to the registered object
     */
    apptemplate64?: pulumi.Input<string>;
    /**
     * Default tags defined in the provider configuration
     */
    defaultTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Text description of the appliance
     */
    description?: pulumi.Input<string>;
    /**
     * Allow to enable or disable the appliance
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Name of the group owning the appliance
     */
    group?: pulumi.Input<string>;
    /**
     * Lock level of the new resource: USE, MANAGE, ADMIN, ALL, UNLOCK
     */
    lock?: pulumi.Input<string>;
    /**
     * The ID of the market to host the appliance
     */
    marketId?: pulumi.Input<number>;
    /**
     * Name of the appliance
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the source image
     */
    originId?: pulumi.Input<number>;
    /**
     * Permissions for the appliance (in Unix format, owner-group-other, use-manage-admin)
     */
    permissions?: pulumi.Input<string>;
    /**
     * Publisher of the appliance
     */
    publisher?: pulumi.Input<string>;
    /**
     * Add custom tags to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Result of the applied default_tags and resource tags
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Add custom section to the resource
     */
    templateSections?: pulumi.Input<pulumi.Input<inputs.MarketplaceApplianceTemplateSection>[]>;
    timeouts?: pulumi.Input<inputs.MarketplaceApplianceTimeouts>;
    /**
     * Type of the app: IMAGE, VMTEMPLATE, SERVICE_TEMPLATE
     */
    type?: pulumi.Input<string>;
    /**
     * A string indicating the appliance version
     */
    version?: pulumi.Input<string>;
    /**
     * Creates this template pointing to the base image
     */
    vmtemplate64?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MarketplaceAppliance resource.
 */
export interface MarketplaceApplianceArgs {
    /**
     * Associated template that will be added to the registered object
     */
    apptemplate64?: pulumi.Input<string>;
    /**
     * Text description of the appliance
     */
    description?: pulumi.Input<string>;
    /**
     * Allow to enable or disable the appliance
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Name of the group owning the appliance
     */
    group?: pulumi.Input<string>;
    /**
     * Lock level of the new resource: USE, MANAGE, ADMIN, ALL, UNLOCK
     */
    lock?: pulumi.Input<string>;
    /**
     * The ID of the market to host the appliance
     */
    marketId: pulumi.Input<number>;
    /**
     * Name of the appliance
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the source image
     */
    originId?: pulumi.Input<number>;
    /**
     * Permissions for the appliance (in Unix format, owner-group-other, use-manage-admin)
     */
    permissions?: pulumi.Input<string>;
    /**
     * Publisher of the appliance
     */
    publisher?: pulumi.Input<string>;
    /**
     * Add custom tags to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Add custom section to the resource
     */
    templateSections?: pulumi.Input<pulumi.Input<inputs.MarketplaceApplianceTemplateSection>[]>;
    timeouts?: pulumi.Input<inputs.MarketplaceApplianceTimeouts>;
    /**
     * Type of the app: IMAGE, VMTEMPLATE, SERVICE_TEMPLATE
     */
    type: pulumi.Input<string>;
    /**
     * A string indicating the appliance version
     */
    version?: pulumi.Input<string>;
    /**
     * Creates this template pointing to the base image
     */
    vmtemplate64?: pulumi.Input<string>;
}
