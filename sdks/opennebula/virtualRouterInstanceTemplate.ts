// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualRouterInstanceTemplate extends pulumi.CustomResource {
    /**
     * Get an existing VirtualRouterInstanceTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualRouterInstanceTemplateState, opts?: pulumi.CustomResourceOptions): VirtualRouterInstanceTemplate {
        return new VirtualRouterInstanceTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opennebula:index/virtualRouterInstanceTemplate:VirtualRouterInstanceTemplate';

    /**
     * Returns true if the given object is an instance of VirtualRouterInstanceTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualRouterInstanceTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualRouterInstanceTemplate.__pulumiType;
    }

    /**
     * Context variables
     */
    public readonly context!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Amount of CPU quota assigned to the virtual machine
     */
    public readonly cpu!: pulumi.Output<number>;
    /**
     * Definition of CPU Model type for the Virtual Machine
     */
    public readonly cpumodel!: pulumi.Output<outputs.VirtualRouterInstanceTemplateCpumodel | undefined>;
    /**
     * Default tags defined in the provider configuration
     */
    public /*out*/ readonly defaultTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * A description of the entity
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Definition of disks assigned to the Virtual Machine
     */
    public readonly disks!: pulumi.Output<outputs.VirtualRouterInstanceTemplateDisk[] | undefined>;
    /**
     * List of Features
     */
    public readonly features!: pulumi.Output<outputs.VirtualRouterInstanceTemplateFeature[] | undefined>;
    /**
     * ID of the group that will own the resource
     */
    public /*out*/ readonly gid!: pulumi.Output<number>;
    /**
     * Name of the group that will own the resource
     */
    public /*out*/ readonly gname!: pulumi.Output<string>;
    /**
     * Definition of graphics adapter assigned to the Virtual Machine
     */
    public readonly graphics!: pulumi.Output<outputs.VirtualRouterInstanceTemplateGraphics | undefined>;
    /**
     * Name of the Group that onws the resource, If empty, it uses caller group
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Lock level of the new resource: USE, MANAGE, ADMIN, ALL, UNLOCK
     */
    public readonly lock!: pulumi.Output<string | undefined>;
    /**
     * Amount of memory (RAM) in MB assigned to the virtual machine
     */
    public readonly memory!: pulumi.Output<number>;
    /**
     * Name of the template
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Definition of OS boot and type for the Virtual Machine
     */
    public readonly os!: pulumi.Output<outputs.VirtualRouterInstanceTemplateOs | undefined>;
    /**
     * Permissions for the resource (in Unix format, owner-group-other, use-manage-admin)
     */
    public readonly permissions!: pulumi.Output<string>;
    /**
     * Low-level hypervisor tuning
     */
    public readonly raw!: pulumi.Output<outputs.VirtualRouterInstanceTemplateRaw | undefined>;
    /**
     * Registration time
     */
    public /*out*/ readonly regTime!: pulumi.Output<number>;
    /**
     * Storage placement requirements to deploy the resource following specific rule
     */
    public readonly schedDsRequirements!: pulumi.Output<string | undefined>;
    /**
     * Scheduling requirements to deploy the resource following specific rule
     */
    public readonly schedRequirements!: pulumi.Output<string | undefined>;
    /**
     * Add custom tags to the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Result of the applied default_tags and resource tags
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Add custom section to the resource
     */
    public readonly templateSections!: pulumi.Output<outputs.VirtualRouterInstanceTemplateTemplateSection[] | undefined>;
    /**
     * ID of the user that will own the resource
     */
    public /*out*/ readonly uid!: pulumi.Output<number>;
    /**
     * Name of the user that will own the resource
     */
    public /*out*/ readonly uname!: pulumi.Output<string>;
    /**
     * Provides the template creator with the possibility to dynamically ask the user instantiating the template for dynamic
     * values that must be defined.
     */
    public readonly userInputs!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Number of virtual CPUs assigned to the virtual machine
     */
    public readonly vcpu!: pulumi.Output<number>;
    /**
     * Virtual Machine Group to associate with during VM creation only. If it changes, a New VM is created
     */
    public readonly vmgroup!: pulumi.Output<outputs.VirtualRouterInstanceTemplateVmgroup | undefined>;

    /**
     * Create a VirtualRouterInstanceTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VirtualRouterInstanceTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualRouterInstanceTemplateArgs | VirtualRouterInstanceTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualRouterInstanceTemplateState | undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["cpumodel"] = state ? state.cpumodel : undefined;
            resourceInputs["defaultTags"] = state ? state.defaultTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["gid"] = state ? state.gid : undefined;
            resourceInputs["gname"] = state ? state.gname : undefined;
            resourceInputs["graphics"] = state ? state.graphics : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["lock"] = state ? state.lock : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["raw"] = state ? state.raw : undefined;
            resourceInputs["regTime"] = state ? state.regTime : undefined;
            resourceInputs["schedDsRequirements"] = state ? state.schedDsRequirements : undefined;
            resourceInputs["schedRequirements"] = state ? state.schedRequirements : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["templateSections"] = state ? state.templateSections : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["uname"] = state ? state.uname : undefined;
            resourceInputs["userInputs"] = state ? state.userInputs : undefined;
            resourceInputs["vcpu"] = state ? state.vcpu : undefined;
            resourceInputs["vmgroup"] = state ? state.vmgroup : undefined;
        } else {
            const args = argsOrState as VirtualRouterInstanceTemplateArgs | undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["cpumodel"] = args ? args.cpumodel : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["features"] = args ? args.features : undefined;
            resourceInputs["graphics"] = args ? args.graphics : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["lock"] = args ? args.lock : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["raw"] = args ? args.raw : undefined;
            resourceInputs["schedDsRequirements"] = args ? args.schedDsRequirements : undefined;
            resourceInputs["schedRequirements"] = args ? args.schedRequirements : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateSections"] = args ? args.templateSections : undefined;
            resourceInputs["userInputs"] = args ? args.userInputs : undefined;
            resourceInputs["vcpu"] = args ? args.vcpu : undefined;
            resourceInputs["vmgroup"] = args ? args.vmgroup : undefined;
            resourceInputs["defaultTags"] = undefined /*out*/;
            resourceInputs["gid"] = undefined /*out*/;
            resourceInputs["gname"] = undefined /*out*/;
            resourceInputs["regTime"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["uname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualRouterInstanceTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualRouterInstanceTemplate resources.
 */
export interface VirtualRouterInstanceTemplateState {
    /**
     * Context variables
     */
    context?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Amount of CPU quota assigned to the virtual machine
     */
    cpu?: pulumi.Input<number>;
    /**
     * Definition of CPU Model type for the Virtual Machine
     */
    cpumodel?: pulumi.Input<inputs.VirtualRouterInstanceTemplateCpumodel>;
    /**
     * Default tags defined in the provider configuration
     */
    defaultTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A description of the entity
     */
    description?: pulumi.Input<string>;
    /**
     * Definition of disks assigned to the Virtual Machine
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualRouterInstanceTemplateDisk>[]>;
    /**
     * List of Features
     */
    features?: pulumi.Input<pulumi.Input<inputs.VirtualRouterInstanceTemplateFeature>[]>;
    /**
     * ID of the group that will own the resource
     */
    gid?: pulumi.Input<number>;
    /**
     * Name of the group that will own the resource
     */
    gname?: pulumi.Input<string>;
    /**
     * Definition of graphics adapter assigned to the Virtual Machine
     */
    graphics?: pulumi.Input<inputs.VirtualRouterInstanceTemplateGraphics>;
    /**
     * Name of the Group that onws the resource, If empty, it uses caller group
     */
    group?: pulumi.Input<string>;
    /**
     * Lock level of the new resource: USE, MANAGE, ADMIN, ALL, UNLOCK
     */
    lock?: pulumi.Input<string>;
    /**
     * Amount of memory (RAM) in MB assigned to the virtual machine
     */
    memory?: pulumi.Input<number>;
    /**
     * Name of the template
     */
    name?: pulumi.Input<string>;
    /**
     * Definition of OS boot and type for the Virtual Machine
     */
    os?: pulumi.Input<inputs.VirtualRouterInstanceTemplateOs>;
    /**
     * Permissions for the resource (in Unix format, owner-group-other, use-manage-admin)
     */
    permissions?: pulumi.Input<string>;
    /**
     * Low-level hypervisor tuning
     */
    raw?: pulumi.Input<inputs.VirtualRouterInstanceTemplateRaw>;
    /**
     * Registration time
     */
    regTime?: pulumi.Input<number>;
    /**
     * Storage placement requirements to deploy the resource following specific rule
     */
    schedDsRequirements?: pulumi.Input<string>;
    /**
     * Scheduling requirements to deploy the resource following specific rule
     */
    schedRequirements?: pulumi.Input<string>;
    /**
     * Add custom tags to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Result of the applied default_tags and resource tags
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Add custom section to the resource
     */
    templateSections?: pulumi.Input<pulumi.Input<inputs.VirtualRouterInstanceTemplateTemplateSection>[]>;
    /**
     * ID of the user that will own the resource
     */
    uid?: pulumi.Input<number>;
    /**
     * Name of the user that will own the resource
     */
    uname?: pulumi.Input<string>;
    /**
     * Provides the template creator with the possibility to dynamically ask the user instantiating the template for dynamic
     * values that must be defined.
     */
    userInputs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Number of virtual CPUs assigned to the virtual machine
     */
    vcpu?: pulumi.Input<number>;
    /**
     * Virtual Machine Group to associate with during VM creation only. If it changes, a New VM is created
     */
    vmgroup?: pulumi.Input<inputs.VirtualRouterInstanceTemplateVmgroup>;
}

/**
 * The set of arguments for constructing a VirtualRouterInstanceTemplate resource.
 */
export interface VirtualRouterInstanceTemplateArgs {
    /**
     * Context variables
     */
    context?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Amount of CPU quota assigned to the virtual machine
     */
    cpu?: pulumi.Input<number>;
    /**
     * Definition of CPU Model type for the Virtual Machine
     */
    cpumodel?: pulumi.Input<inputs.VirtualRouterInstanceTemplateCpumodel>;
    /**
     * A description of the entity
     */
    description?: pulumi.Input<string>;
    /**
     * Definition of disks assigned to the Virtual Machine
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualRouterInstanceTemplateDisk>[]>;
    /**
     * List of Features
     */
    features?: pulumi.Input<pulumi.Input<inputs.VirtualRouterInstanceTemplateFeature>[]>;
    /**
     * Definition of graphics adapter assigned to the Virtual Machine
     */
    graphics?: pulumi.Input<inputs.VirtualRouterInstanceTemplateGraphics>;
    /**
     * Name of the Group that onws the resource, If empty, it uses caller group
     */
    group?: pulumi.Input<string>;
    /**
     * Lock level of the new resource: USE, MANAGE, ADMIN, ALL, UNLOCK
     */
    lock?: pulumi.Input<string>;
    /**
     * Amount of memory (RAM) in MB assigned to the virtual machine
     */
    memory?: pulumi.Input<number>;
    /**
     * Name of the template
     */
    name?: pulumi.Input<string>;
    /**
     * Definition of OS boot and type for the Virtual Machine
     */
    os?: pulumi.Input<inputs.VirtualRouterInstanceTemplateOs>;
    /**
     * Permissions for the resource (in Unix format, owner-group-other, use-manage-admin)
     */
    permissions?: pulumi.Input<string>;
    /**
     * Low-level hypervisor tuning
     */
    raw?: pulumi.Input<inputs.VirtualRouterInstanceTemplateRaw>;
    /**
     * Storage placement requirements to deploy the resource following specific rule
     */
    schedDsRequirements?: pulumi.Input<string>;
    /**
     * Scheduling requirements to deploy the resource following specific rule
     */
    schedRequirements?: pulumi.Input<string>;
    /**
     * Add custom tags to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Add custom section to the resource
     */
    templateSections?: pulumi.Input<pulumi.Input<inputs.VirtualRouterInstanceTemplateTemplateSection>[]>;
    /**
     * Provides the template creator with the possibility to dynamically ask the user instantiating the template for dynamic
     * values that must be defined.
     */
    userInputs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Number of virtual CPUs assigned to the virtual machine
     */
    vcpu?: pulumi.Input<number>;
    /**
     * Virtual Machine Group to associate with during VM creation only. If it changes, a New VM is created
     */
    vmgroup?: pulumi.Input<inputs.VirtualRouterInstanceTemplateVmgroup>;
}
