// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GroupQuotas extends pulumi.CustomResource {
    /**
     * Get an existing GroupQuotas resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupQuotasState, opts?: pulumi.CustomResourceOptions): GroupQuotas {
        return new GroupQuotas(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opennebula:index/groupQuotas:GroupQuotas';

    /**
     * Returns true if the given object is an instance of GroupQuotas.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupQuotas {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupQuotas.__pulumiType;
    }

    /**
     * Datastore quotas
     */
    public readonly datastores!: pulumi.Output<outputs.GroupQuotasDatastore[] | undefined>;
    /**
     * ID of the group to apply the quota
     */
    public readonly groupId!: pulumi.Output<number>;
    /**
     * Image quotas
     */
    public readonly images!: pulumi.Output<outputs.GroupQuotasImage[] | undefined>;
    /**
     * Network quotas
     */
    public readonly networks!: pulumi.Output<outputs.GroupQuotasNetwork[] | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * VM quotas
     */
    public readonly vms!: pulumi.Output<outputs.GroupQuotasVm[] | undefined>;

    /**
     * Create a GroupQuotas resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupQuotasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupQuotasArgs | GroupQuotasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupQuotasState | undefined;
            resourceInputs["datastores"] = state ? state.datastores : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["images"] = state ? state.images : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vms"] = state ? state.vms : undefined;
        } else {
            const args = argsOrState as GroupQuotasArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            resourceInputs["datastores"] = args ? args.datastores : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["images"] = args ? args.images : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["vms"] = args ? args.vms : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupQuotas.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GroupQuotas resources.
 */
export interface GroupQuotasState {
    /**
     * Datastore quotas
     */
    datastores?: pulumi.Input<pulumi.Input<inputs.GroupQuotasDatastore>[]>;
    /**
     * ID of the group to apply the quota
     */
    groupId?: pulumi.Input<number>;
    /**
     * Image quotas
     */
    images?: pulumi.Input<pulumi.Input<inputs.GroupQuotasImage>[]>;
    /**
     * Network quotas
     */
    networks?: pulumi.Input<pulumi.Input<inputs.GroupQuotasNetwork>[]>;
    type?: pulumi.Input<string>;
    /**
     * VM quotas
     */
    vms?: pulumi.Input<pulumi.Input<inputs.GroupQuotasVm>[]>;
}

/**
 * The set of arguments for constructing a GroupQuotas resource.
 */
export interface GroupQuotasArgs {
    /**
     * Datastore quotas
     */
    datastores?: pulumi.Input<pulumi.Input<inputs.GroupQuotasDatastore>[]>;
    /**
     * ID of the group to apply the quota
     */
    groupId: pulumi.Input<number>;
    /**
     * Image quotas
     */
    images?: pulumi.Input<pulumi.Input<inputs.GroupQuotasImage>[]>;
    /**
     * Network quotas
     */
    networks?: pulumi.Input<pulumi.Input<inputs.GroupQuotasNetwork>[]>;
    /**
     * VM quotas
     */
    vms?: pulumi.Input<pulumi.Input<inputs.GroupQuotasVm>[]>;
}
