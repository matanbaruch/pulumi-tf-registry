// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opennebula:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Extra template information in json format to be added to the service template during instantiate.
     */
    public readonly extraTemplate!: pulumi.Output<string | undefined>;
    /**
     * ID of the group that will own the Service
     */
    public readonly gid!: pulumi.Output<number>;
    /**
     * Name of the group that will own the Service
     */
    public readonly gname!: pulumi.Output<string>;
    /**
     * Name of the Service
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Map with the service networks names as key and id as value
     */
    public /*out*/ readonly networks!: pulumi.Output<{[key: string]: number}>;
    /**
     * Permissions for the service (in Unix format, owner-group-other, use-manage-admin)
     */
    public readonly permissions!: pulumi.Output<string>;
    /**
     * Map with the role dinamically generated information
     */
    public /*out*/ readonly roles!: pulumi.Output<outputs.ServiceRole[]>;
    /**
     * Current state of the Service
     */
    public /*out*/ readonly state!: pulumi.Output<number>;
    /**
     * Id of the Service template to use
     */
    public readonly templateId!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.ServiceTimeouts | undefined>;
    /**
     * ID of the user that will own the Service
     */
    public readonly uid!: pulumi.Output<number>;
    /**
     * Name of the user that will own the Service
     */
    public readonly uname!: pulumi.Output<string>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["extraTemplate"] = state ? state.extraTemplate : undefined;
            resourceInputs["gid"] = state ? state.gid : undefined;
            resourceInputs["gname"] = state ? state.gname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["uname"] = state ? state.uname : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            resourceInputs["extraTemplate"] = args ? args.extraTemplate : undefined;
            resourceInputs["gid"] = args ? args.gid : undefined;
            resourceInputs["gname"] = args ? args.gname : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["uid"] = args ? args.uid : undefined;
            resourceInputs["uname"] = args ? args.uname : undefined;
            resourceInputs["networks"] = undefined /*out*/;
            resourceInputs["roles"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * Extra template information in json format to be added to the service template during instantiate.
     */
    extraTemplate?: pulumi.Input<string>;
    /**
     * ID of the group that will own the Service
     */
    gid?: pulumi.Input<number>;
    /**
     * Name of the group that will own the Service
     */
    gname?: pulumi.Input<string>;
    /**
     * Name of the Service
     */
    name?: pulumi.Input<string>;
    /**
     * Map with the service networks names as key and id as value
     */
    networks?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * Permissions for the service (in Unix format, owner-group-other, use-manage-admin)
     */
    permissions?: pulumi.Input<string>;
    /**
     * Map with the role dinamically generated information
     */
    roles?: pulumi.Input<pulumi.Input<inputs.ServiceRole>[]>;
    /**
     * Current state of the Service
     */
    state?: pulumi.Input<number>;
    /**
     * Id of the Service template to use
     */
    templateId?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ServiceTimeouts>;
    /**
     * ID of the user that will own the Service
     */
    uid?: pulumi.Input<number>;
    /**
     * Name of the user that will own the Service
     */
    uname?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Extra template information in json format to be added to the service template during instantiate.
     */
    extraTemplate?: pulumi.Input<string>;
    /**
     * ID of the group that will own the Service
     */
    gid?: pulumi.Input<number>;
    /**
     * Name of the group that will own the Service
     */
    gname?: pulumi.Input<string>;
    /**
     * Name of the Service
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions for the service (in Unix format, owner-group-other, use-manage-admin)
     */
    permissions?: pulumi.Input<string>;
    /**
     * Id of the Service template to use
     */
    templateId: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ServiceTimeouts>;
    /**
     * ID of the user that will own the Service
     */
    uid?: pulumi.Input<number>;
    /**
     * Name of the user that will own the Service
     */
    uname?: pulumi.Input<string>;
}
