// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Datastore extends pulumi.CustomResource {
    /**
     * Get an existing Datastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatastoreState, opts?: pulumi.CustomResourceOptions): Datastore {
        return new Datastore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opennebula:index/datastore:Datastore';

    /**
     * Returns true if the given object is an instance of Datastore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datastore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datastore.__pulumiType;
    }

    /**
     * List of hosts that have access to the storage to add new images to the datastore
     */
    public readonly bridgeLists!: pulumi.Output<string[] | undefined>;
    public readonly cephs!: pulumi.Output<outputs.DatastoreCeph[] | undefined>;
    /**
     * If yes, the available capacity of the Datastore is checked before creating a new image
     */
    public readonly checkAvailableCapacity!: pulumi.Output<boolean | undefined>;
    /**
     * List of cluster IDs hosting the datastore, if not set it uses the default cluster
     */
    public readonly clusterIds!: pulumi.Output<number[] | undefined>;
    /**
     * For Image Datastores only. Set the System Datastores IDs that can be used with an Image Datastore
     */
    public readonly compatibleSystemDatastores!: pulumi.Output<number[] | undefined>;
    public readonly customs!: pulumi.Output<outputs.DatastoreCustom[] | undefined>;
    /**
     * Default tags defined in the provider configuration
     */
    public /*out*/ readonly defaultTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * Specific image mapping driver enforcement. If present it overrides image DRIVER set in the image attributes and VM
     * template
     */
    public readonly driver!: pulumi.Output<string>;
    /**
     * Name of the Datastore
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Do not try to untar or decompress the file to be registered
     */
    public readonly noDecompress!: pulumi.Output<boolean | undefined>;
    /**
     * Paths that cannot be used to register images. A space separated list of paths
     */
    public readonly restrictedDirectories!: pulumi.Output<string>;
    /**
     * If you need to allow a directory listed under RESTRICTED_DIRS. A space separated list of paths
     */
    public readonly safeDirectories!: pulumi.Output<string>;
    /**
     * Path in the storage bridge host to copy an Image before moving it to its final destination
     */
    public readonly stagingDir!: pulumi.Output<string | undefined>;
    /**
     * The maximum capacity allowed for the Datastore in MB
     */
    public readonly storageUsageLimit!: pulumi.Output<number | undefined>;
    /**
     * Add custom tags to the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Result of the applied default_tags and resource tags
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Specify the maximum transfer rate in bytes/second when downloading images from a http/https URL. Suffixes K, M or G can
     * be used
     */
    public readonly transferBandwithLimit!: pulumi.Output<number | undefined>;
    /**
     * Type of the datastore: image, system, files
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Datastore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatastoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatastoreArgs | DatastoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatastoreState | undefined;
            resourceInputs["bridgeLists"] = state ? state.bridgeLists : undefined;
            resourceInputs["cephs"] = state ? state.cephs : undefined;
            resourceInputs["checkAvailableCapacity"] = state ? state.checkAvailableCapacity : undefined;
            resourceInputs["clusterIds"] = state ? state.clusterIds : undefined;
            resourceInputs["compatibleSystemDatastores"] = state ? state.compatibleSystemDatastores : undefined;
            resourceInputs["customs"] = state ? state.customs : undefined;
            resourceInputs["defaultTags"] = state ? state.defaultTags : undefined;
            resourceInputs["driver"] = state ? state.driver : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noDecompress"] = state ? state.noDecompress : undefined;
            resourceInputs["restrictedDirectories"] = state ? state.restrictedDirectories : undefined;
            resourceInputs["safeDirectories"] = state ? state.safeDirectories : undefined;
            resourceInputs["stagingDir"] = state ? state.stagingDir : undefined;
            resourceInputs["storageUsageLimit"] = state ? state.storageUsageLimit : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["transferBandwithLimit"] = state ? state.transferBandwithLimit : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DatastoreArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bridgeLists"] = args ? args.bridgeLists : undefined;
            resourceInputs["cephs"] = args ? args.cephs : undefined;
            resourceInputs["checkAvailableCapacity"] = args ? args.checkAvailableCapacity : undefined;
            resourceInputs["clusterIds"] = args ? args.clusterIds : undefined;
            resourceInputs["compatibleSystemDatastores"] = args ? args.compatibleSystemDatastores : undefined;
            resourceInputs["customs"] = args ? args.customs : undefined;
            resourceInputs["driver"] = args ? args.driver : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noDecompress"] = args ? args.noDecompress : undefined;
            resourceInputs["restrictedDirectories"] = args ? args.restrictedDirectories : undefined;
            resourceInputs["safeDirectories"] = args ? args.safeDirectories : undefined;
            resourceInputs["stagingDir"] = args ? args.stagingDir : undefined;
            resourceInputs["storageUsageLimit"] = args ? args.storageUsageLimit : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transferBandwithLimit"] = args ? args.transferBandwithLimit : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["defaultTags"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Datastore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Datastore resources.
 */
export interface DatastoreState {
    /**
     * List of hosts that have access to the storage to add new images to the datastore
     */
    bridgeLists?: pulumi.Input<pulumi.Input<string>[]>;
    cephs?: pulumi.Input<pulumi.Input<inputs.DatastoreCeph>[]>;
    /**
     * If yes, the available capacity of the Datastore is checked before creating a new image
     */
    checkAvailableCapacity?: pulumi.Input<boolean>;
    /**
     * List of cluster IDs hosting the datastore, if not set it uses the default cluster
     */
    clusterIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * For Image Datastores only. Set the System Datastores IDs that can be used with an Image Datastore
     */
    compatibleSystemDatastores?: pulumi.Input<pulumi.Input<number>[]>;
    customs?: pulumi.Input<pulumi.Input<inputs.DatastoreCustom>[]>;
    /**
     * Default tags defined in the provider configuration
     */
    defaultTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specific image mapping driver enforcement. If present it overrides image DRIVER set in the image attributes and VM
     * template
     */
    driver?: pulumi.Input<string>;
    /**
     * Name of the Datastore
     */
    name?: pulumi.Input<string>;
    /**
     * Do not try to untar or decompress the file to be registered
     */
    noDecompress?: pulumi.Input<boolean>;
    /**
     * Paths that cannot be used to register images. A space separated list of paths
     */
    restrictedDirectories?: pulumi.Input<string>;
    /**
     * If you need to allow a directory listed under RESTRICTED_DIRS. A space separated list of paths
     */
    safeDirectories?: pulumi.Input<string>;
    /**
     * Path in the storage bridge host to copy an Image before moving it to its final destination
     */
    stagingDir?: pulumi.Input<string>;
    /**
     * The maximum capacity allowed for the Datastore in MB
     */
    storageUsageLimit?: pulumi.Input<number>;
    /**
     * Add custom tags to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Result of the applied default_tags and resource tags
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specify the maximum transfer rate in bytes/second when downloading images from a http/https URL. Suffixes K, M or G can
     * be used
     */
    transferBandwithLimit?: pulumi.Input<number>;
    /**
     * Type of the datastore: image, system, files
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Datastore resource.
 */
export interface DatastoreArgs {
    /**
     * List of hosts that have access to the storage to add new images to the datastore
     */
    bridgeLists?: pulumi.Input<pulumi.Input<string>[]>;
    cephs?: pulumi.Input<pulumi.Input<inputs.DatastoreCeph>[]>;
    /**
     * If yes, the available capacity of the Datastore is checked before creating a new image
     */
    checkAvailableCapacity?: pulumi.Input<boolean>;
    /**
     * List of cluster IDs hosting the datastore, if not set it uses the default cluster
     */
    clusterIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * For Image Datastores only. Set the System Datastores IDs that can be used with an Image Datastore
     */
    compatibleSystemDatastores?: pulumi.Input<pulumi.Input<number>[]>;
    customs?: pulumi.Input<pulumi.Input<inputs.DatastoreCustom>[]>;
    /**
     * Specific image mapping driver enforcement. If present it overrides image DRIVER set in the image attributes and VM
     * template
     */
    driver?: pulumi.Input<string>;
    /**
     * Name of the Datastore
     */
    name?: pulumi.Input<string>;
    /**
     * Do not try to untar or decompress the file to be registered
     */
    noDecompress?: pulumi.Input<boolean>;
    /**
     * Paths that cannot be used to register images. A space separated list of paths
     */
    restrictedDirectories?: pulumi.Input<string>;
    /**
     * If you need to allow a directory listed under RESTRICTED_DIRS. A space separated list of paths
     */
    safeDirectories?: pulumi.Input<string>;
    /**
     * Path in the storage bridge host to copy an Image before moving it to its final destination
     */
    stagingDir?: pulumi.Input<string>;
    /**
     * The maximum capacity allowed for the Datastore in MB
     */
    storageUsageLimit?: pulumi.Input<number>;
    /**
     * Add custom tags to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specify the maximum transfer rate in bytes/second when downloading images from a http/https URL. Suffixes K, M or G can
     * be used
     */
    transferBandwithLimit?: pulumi.Input<number>;
    /**
     * Type of the datastore: image, system, files
     */
    type: pulumi.Input<string>;
}
