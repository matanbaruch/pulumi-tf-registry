// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opennebula:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Authentication driver. Select between: core, public, ssh, x509, ldap, server_cipher, server_x509 and custom. Defaults to
     * 'core'.
     */
    public readonly authDriver!: pulumi.Output<string | undefined>;
    /**
     * Default tags defined in the provider configuration
     */
    public /*out*/ readonly defaultTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * List of group IDs to add to the user
     */
    public readonly groups!: pulumi.Output<number[] | undefined>;
    /**
     * Name of the User
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password of the User. Required for all `auth_driver` options excepted 'ldap'
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Primary (Default) Group ID of the user. Defaults to 0
     */
    public readonly primaryGroup!: pulumi.Output<number | undefined>;
    /**
     * Define user quota
     *
     * @deprecated Deprecated
     */
    public readonly quotas!: pulumi.Output<outputs.UserQuota[] | undefined>;
    /**
     * User SSH public key
     */
    public readonly sshPublicKey!: pulumi.Output<string | undefined>;
    /**
     * Add custom tags to the resource
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Result of the applied default_tags and resource tags
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Add custom section to the resource
     */
    public readonly templateSections!: pulumi.Output<outputs.UserTemplateSection[] | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["authDriver"] = state ? state.authDriver : undefined;
            resourceInputs["defaultTags"] = state ? state.defaultTags : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["primaryGroup"] = state ? state.primaryGroup : undefined;
            resourceInputs["quotas"] = state ? state.quotas : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["templateSections"] = state ? state.templateSections : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            resourceInputs["authDriver"] = args ? args.authDriver : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["primaryGroup"] = args ? args.primaryGroup : undefined;
            resourceInputs["quotas"] = args ? args.quotas : undefined;
            resourceInputs["sshPublicKey"] = args ? args.sshPublicKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateSections"] = args ? args.templateSections : undefined;
            resourceInputs["defaultTags"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Authentication driver. Select between: core, public, ssh, x509, ldap, server_cipher, server_x509 and custom. Defaults to
     * 'core'.
     */
    authDriver?: pulumi.Input<string>;
    /**
     * Default tags defined in the provider configuration
     */
    defaultTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of group IDs to add to the user
     */
    groups?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Name of the User
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the User. Required for all `auth_driver` options excepted 'ldap'
     */
    password?: pulumi.Input<string>;
    /**
     * Primary (Default) Group ID of the user. Defaults to 0
     */
    primaryGroup?: pulumi.Input<number>;
    /**
     * Define user quota
     *
     * @deprecated Deprecated
     */
    quotas?: pulumi.Input<pulumi.Input<inputs.UserQuota>[]>;
    /**
     * User SSH public key
     */
    sshPublicKey?: pulumi.Input<string>;
    /**
     * Add custom tags to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Result of the applied default_tags and resource tags
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Add custom section to the resource
     */
    templateSections?: pulumi.Input<pulumi.Input<inputs.UserTemplateSection>[]>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Authentication driver. Select between: core, public, ssh, x509, ldap, server_cipher, server_x509 and custom. Defaults to
     * 'core'.
     */
    authDriver?: pulumi.Input<string>;
    /**
     * List of group IDs to add to the user
     */
    groups?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Name of the User
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the User. Required for all `auth_driver` options excepted 'ldap'
     */
    password?: pulumi.Input<string>;
    /**
     * Primary (Default) Group ID of the user. Defaults to 0
     */
    primaryGroup?: pulumi.Input<number>;
    /**
     * Define user quota
     *
     * @deprecated Deprecated
     */
    quotas?: pulumi.Input<pulumi.Input<inputs.UserQuota>[]>;
    /**
     * User SSH public key
     */
    sshPublicKey?: pulumi.Input<string>;
    /**
     * Add custom tags to the resource
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Add custom section to the resource
     */
    templateSections?: pulumi.Input<pulumi.Input<inputs.UserTemplateSection>[]>;
}
