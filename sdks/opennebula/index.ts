// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { DatastoreArgs, DatastoreState } from "./datastore";
export type Datastore = import("./datastore").Datastore;
export const Datastore: typeof import("./datastore").Datastore = null as any;
utilities.lazyLoad(exports, ["Datastore"], () => require("./datastore"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetDatastoreArgs, GetDatastoreResult, GetDatastoreOutputArgs } from "./getDatastore";
export const getDatastore: typeof import("./getDatastore").getDatastore = null as any;
export const getDatastoreOutput: typeof import("./getDatastore").getDatastoreOutput = null as any;
utilities.lazyLoad(exports, ["getDatastore","getDatastoreOutput"], () => require("./getDatastore"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetMarketplaceArgs, GetMarketplaceResult, GetMarketplaceOutputArgs } from "./getMarketplace";
export const getMarketplace: typeof import("./getMarketplace").getMarketplace = null as any;
export const getMarketplaceOutput: typeof import("./getMarketplace").getMarketplaceOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplace","getMarketplaceOutput"], () => require("./getMarketplace"));

export { GetSecurityGroupArgs, GetSecurityGroupResult, GetSecurityGroupOutputArgs } from "./getSecurityGroup";
export const getSecurityGroup: typeof import("./getSecurityGroup").getSecurityGroup = null as any;
export const getSecurityGroupOutput: typeof import("./getSecurityGroup").getSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroup","getSecurityGroupOutput"], () => require("./getSecurityGroup"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetTemplatesArgs, GetTemplatesResult, GetTemplatesOutputArgs } from "./getTemplates";
export const getTemplates: typeof import("./getTemplates").getTemplates = null as any;
export const getTemplatesOutput: typeof import("./getTemplates").getTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getTemplates","getTemplatesOutput"], () => require("./getTemplates"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetVirtualDataCenterArgs, GetVirtualDataCenterResult, GetVirtualDataCenterOutputArgs } from "./getVirtualDataCenter";
export const getVirtualDataCenter: typeof import("./getVirtualDataCenter").getVirtualDataCenter = null as any;
export const getVirtualDataCenterOutput: typeof import("./getVirtualDataCenter").getVirtualDataCenterOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualDataCenter","getVirtualDataCenterOutput"], () => require("./getVirtualDataCenter"));

export { GetVirtualMachineGroupArgs, GetVirtualMachineGroupResult, GetVirtualMachineGroupOutputArgs } from "./getVirtualMachineGroup";
export const getVirtualMachineGroup: typeof import("./getVirtualMachineGroup").getVirtualMachineGroup = null as any;
export const getVirtualMachineGroupOutput: typeof import("./getVirtualMachineGroup").getVirtualMachineGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualMachineGroup","getVirtualMachineGroupOutput"], () => require("./getVirtualMachineGroup"));

export { GetVirtualNetworkArgs, GetVirtualNetworkResult, GetVirtualNetworkOutputArgs } from "./getVirtualNetwork";
export const getVirtualNetwork: typeof import("./getVirtualNetwork").getVirtualNetwork = null as any;
export const getVirtualNetworkOutput: typeof import("./getVirtualNetwork").getVirtualNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetwork","getVirtualNetworkOutput"], () => require("./getVirtualNetwork"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupAdminsArgs, GroupAdminsState } from "./groupAdmins";
export type GroupAdmins = import("./groupAdmins").GroupAdmins;
export const GroupAdmins: typeof import("./groupAdmins").GroupAdmins = null as any;
utilities.lazyLoad(exports, ["GroupAdmins"], () => require("./groupAdmins"));

export { GroupQuotasArgs, GroupQuotasState } from "./groupQuotas";
export type GroupQuotas = import("./groupQuotas").GroupQuotas;
export const GroupQuotas: typeof import("./groupQuotas").GroupQuotas = null as any;
utilities.lazyLoad(exports, ["GroupQuotas"], () => require("./groupQuotas"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { MarketplaceArgs, MarketplaceState } from "./marketplace";
export type Marketplace = import("./marketplace").Marketplace;
export const Marketplace: typeof import("./marketplace").Marketplace = null as any;
utilities.lazyLoad(exports, ["Marketplace"], () => require("./marketplace"));

export { MarketplaceApplianceArgs, MarketplaceApplianceState } from "./marketplaceAppliance";
export type MarketplaceAppliance = import("./marketplaceAppliance").MarketplaceAppliance;
export const MarketplaceAppliance: typeof import("./marketplaceAppliance").MarketplaceAppliance = null as any;
utilities.lazyLoad(exports, ["MarketplaceAppliance"], () => require("./marketplaceAppliance"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceTemplateArgs, ServiceTemplateState } from "./serviceTemplate";
export type ServiceTemplate = import("./serviceTemplate").ServiceTemplate;
export const ServiceTemplate: typeof import("./serviceTemplate").ServiceTemplate = null as any;
utilities.lazyLoad(exports, ["ServiceTemplate"], () => require("./serviceTemplate"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserQuotasArgs, UserQuotasState } from "./userQuotas";
export type UserQuotas = import("./userQuotas").UserQuotas;
export const UserQuotas: typeof import("./userQuotas").UserQuotas = null as any;
utilities.lazyLoad(exports, ["UserQuotas"], () => require("./userQuotas"));

export { VirtualDataCenterArgs, VirtualDataCenterState } from "./virtualDataCenter";
export type VirtualDataCenter = import("./virtualDataCenter").VirtualDataCenter;
export const VirtualDataCenter: typeof import("./virtualDataCenter").VirtualDataCenter = null as any;
utilities.lazyLoad(exports, ["VirtualDataCenter"], () => require("./virtualDataCenter"));

export { VirtualMachineArgs, VirtualMachineState } from "./virtualMachine";
export type VirtualMachine = import("./virtualMachine").VirtualMachine;
export const VirtualMachine: typeof import("./virtualMachine").VirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));

export { VirtualMachineGroupArgs, VirtualMachineGroupState } from "./virtualMachineGroup";
export type VirtualMachineGroup = import("./virtualMachineGroup").VirtualMachineGroup;
export const VirtualMachineGroup: typeof import("./virtualMachineGroup").VirtualMachineGroup = null as any;
utilities.lazyLoad(exports, ["VirtualMachineGroup"], () => require("./virtualMachineGroup"));

export { VirtualNetworkArgs, VirtualNetworkState } from "./virtualNetwork";
export type VirtualNetwork = import("./virtualNetwork").VirtualNetwork;
export const VirtualNetwork: typeof import("./virtualNetwork").VirtualNetwork = null as any;
utilities.lazyLoad(exports, ["VirtualNetwork"], () => require("./virtualNetwork"));

export { VirtualNetworkAddressRangeArgs, VirtualNetworkAddressRangeState } from "./virtualNetworkAddressRange";
export type VirtualNetworkAddressRange = import("./virtualNetworkAddressRange").VirtualNetworkAddressRange;
export const VirtualNetworkAddressRange: typeof import("./virtualNetworkAddressRange").VirtualNetworkAddressRange = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkAddressRange"], () => require("./virtualNetworkAddressRange"));

export { VirtualRouterArgs, VirtualRouterState } from "./virtualRouter";
export type VirtualRouter = import("./virtualRouter").VirtualRouter;
export const VirtualRouter: typeof import("./virtualRouter").VirtualRouter = null as any;
utilities.lazyLoad(exports, ["VirtualRouter"], () => require("./virtualRouter"));

export { VirtualRouterInstanceArgs, VirtualRouterInstanceState } from "./virtualRouterInstance";
export type VirtualRouterInstance = import("./virtualRouterInstance").VirtualRouterInstance;
export const VirtualRouterInstance: typeof import("./virtualRouterInstance").VirtualRouterInstance = null as any;
utilities.lazyLoad(exports, ["VirtualRouterInstance"], () => require("./virtualRouterInstance"));

export { VirtualRouterInstanceTemplateArgs, VirtualRouterInstanceTemplateState } from "./virtualRouterInstanceTemplate";
export type VirtualRouterInstanceTemplate = import("./virtualRouterInstanceTemplate").VirtualRouterInstanceTemplate;
export const VirtualRouterInstanceTemplate: typeof import("./virtualRouterInstanceTemplate").VirtualRouterInstanceTemplate = null as any;
utilities.lazyLoad(exports, ["VirtualRouterInstanceTemplate"], () => require("./virtualRouterInstanceTemplate"));

export { VirtualRouterNicArgs, VirtualRouterNicState } from "./virtualRouterNic";
export type VirtualRouterNic = import("./virtualRouterNic").VirtualRouterNic;
export const VirtualRouterNic: typeof import("./virtualRouterNic").VirtualRouterNic = null as any;
utilities.lazyLoad(exports, ["VirtualRouterNic"], () => require("./virtualRouterNic"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "opennebula:index/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "opennebula:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "opennebula:index/datastore:Datastore":
                return new Datastore(name, <any>undefined, { urn })
            case "opennebula:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "opennebula:index/groupAdmins:GroupAdmins":
                return new GroupAdmins(name, <any>undefined, { urn })
            case "opennebula:index/groupQuotas:GroupQuotas":
                return new GroupQuotas(name, <any>undefined, { urn })
            case "opennebula:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "opennebula:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "opennebula:index/marketplace:Marketplace":
                return new Marketplace(name, <any>undefined, { urn })
            case "opennebula:index/marketplaceAppliance:MarketplaceAppliance":
                return new MarketplaceAppliance(name, <any>undefined, { urn })
            case "opennebula:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "opennebula:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "opennebula:index/serviceTemplate:ServiceTemplate":
                return new ServiceTemplate(name, <any>undefined, { urn })
            case "opennebula:index/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "opennebula:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "opennebula:index/userQuotas:UserQuotas":
                return new UserQuotas(name, <any>undefined, { urn })
            case "opennebula:index/virtualDataCenter:VirtualDataCenter":
                return new VirtualDataCenter(name, <any>undefined, { urn })
            case "opennebula:index/virtualMachine:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "opennebula:index/virtualMachineGroup:VirtualMachineGroup":
                return new VirtualMachineGroup(name, <any>undefined, { urn })
            case "opennebula:index/virtualNetwork:VirtualNetwork":
                return new VirtualNetwork(name, <any>undefined, { urn })
            case "opennebula:index/virtualNetworkAddressRange:VirtualNetworkAddressRange":
                return new VirtualNetworkAddressRange(name, <any>undefined, { urn })
            case "opennebula:index/virtualRouter:VirtualRouter":
                return new VirtualRouter(name, <any>undefined, { urn })
            case "opennebula:index/virtualRouterInstance:VirtualRouterInstance":
                return new VirtualRouterInstance(name, <any>undefined, { urn })
            case "opennebula:index/virtualRouterInstanceTemplate:VirtualRouterInstanceTemplate":
                return new VirtualRouterInstanceTemplate(name, <any>undefined, { urn })
            case "opennebula:index/virtualRouterNic:VirtualRouterNic":
                return new VirtualRouterNic(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("opennebula", "index/acl", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/cluster", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/datastore", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/group", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/groupAdmins", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/groupQuotas", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/host", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/image", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/marketplace", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/marketplaceAppliance", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/service", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/serviceTemplate", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/template", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/user", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/userQuotas", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/virtualDataCenter", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/virtualMachine", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/virtualMachineGroup", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/virtualNetwork", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/virtualNetworkAddressRange", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/virtualRouter", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/virtualRouterInstance", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/virtualRouterInstanceTemplate", _module)
pulumi.runtime.registerResourceModule("opennebula", "index/virtualRouterNic", _module)
pulumi.runtime.registerResourcePackage("opennebula", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:opennebula") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
