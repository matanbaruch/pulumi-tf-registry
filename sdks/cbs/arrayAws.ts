// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ArrayAws extends pulumi.CustomResource {
    /**
     * Get an existing ArrayAws resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArrayAwsState, opts?: pulumi.CustomResourceOptions): ArrayAws {
        return new ArrayAws(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cbs:index/arrayAws:ArrayAws';

    /**
     * Returns true if the given object is an instance of ArrayAws.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArrayAws {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArrayAws.__pulumiType;
    }

    public readonly alertRecipients!: pulumi.Output<string[] | undefined>;
    public readonly arrayModel!: pulumi.Output<string>;
    public readonly arrayName!: pulumi.Output<string>;
    public readonly deploymentRoleArn!: pulumi.Output<string>;
    public readonly deploymentTemplateUrl!: pulumi.Output<string>;
    public /*out*/ readonly guiEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly iscsiEndpointCt0!: pulumi.Output<string>;
    public /*out*/ readonly iscsiEndpointCt1!: pulumi.Output<string>;
    public readonly iscsiSecurityGroup!: pulumi.Output<string>;
    public readonly iscsiSubnet!: pulumi.Output<string>;
    public readonly licenseKey!: pulumi.Output<string>;
    public readonly logSenderDomain!: pulumi.Output<string>;
    public /*out*/ readonly managementEndpoint!: pulumi.Output<string>;
    public readonly managementSecurityGroup!: pulumi.Output<string>;
    public readonly managementSubnet!: pulumi.Output<string>;
    public readonly pureuserKeyPairName!: pulumi.Output<string>;
    public readonly pureuserPrivateKey!: pulumi.Output<string | undefined>;
    public readonly pureuserPrivateKeyPath!: pulumi.Output<string | undefined>;
    public /*out*/ readonly replicationEndpointCt0!: pulumi.Output<string>;
    public /*out*/ readonly replicationEndpointCt1!: pulumi.Output<string>;
    public readonly replicationSecurityGroup!: pulumi.Output<string>;
    public readonly replicationSubnet!: pulumi.Output<string>;
    public /*out*/ readonly resumeLambda!: pulumi.Output<string>;
    public /*out*/ readonly stackName!: pulumi.Output<string>;
    public readonly systemSubnet!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ArrayAwsTimeouts | undefined>;

    /**
     * Create a ArrayAws resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArrayAwsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArrayAwsArgs | ArrayAwsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArrayAwsState | undefined;
            resourceInputs["alertRecipients"] = state ? state.alertRecipients : undefined;
            resourceInputs["arrayModel"] = state ? state.arrayModel : undefined;
            resourceInputs["arrayName"] = state ? state.arrayName : undefined;
            resourceInputs["deploymentRoleArn"] = state ? state.deploymentRoleArn : undefined;
            resourceInputs["deploymentTemplateUrl"] = state ? state.deploymentTemplateUrl : undefined;
            resourceInputs["guiEndpoint"] = state ? state.guiEndpoint : undefined;
            resourceInputs["iscsiEndpointCt0"] = state ? state.iscsiEndpointCt0 : undefined;
            resourceInputs["iscsiEndpointCt1"] = state ? state.iscsiEndpointCt1 : undefined;
            resourceInputs["iscsiSecurityGroup"] = state ? state.iscsiSecurityGroup : undefined;
            resourceInputs["iscsiSubnet"] = state ? state.iscsiSubnet : undefined;
            resourceInputs["licenseKey"] = state ? state.licenseKey : undefined;
            resourceInputs["logSenderDomain"] = state ? state.logSenderDomain : undefined;
            resourceInputs["managementEndpoint"] = state ? state.managementEndpoint : undefined;
            resourceInputs["managementSecurityGroup"] = state ? state.managementSecurityGroup : undefined;
            resourceInputs["managementSubnet"] = state ? state.managementSubnet : undefined;
            resourceInputs["pureuserKeyPairName"] = state ? state.pureuserKeyPairName : undefined;
            resourceInputs["pureuserPrivateKey"] = state ? state.pureuserPrivateKey : undefined;
            resourceInputs["pureuserPrivateKeyPath"] = state ? state.pureuserPrivateKeyPath : undefined;
            resourceInputs["replicationEndpointCt0"] = state ? state.replicationEndpointCt0 : undefined;
            resourceInputs["replicationEndpointCt1"] = state ? state.replicationEndpointCt1 : undefined;
            resourceInputs["replicationSecurityGroup"] = state ? state.replicationSecurityGroup : undefined;
            resourceInputs["replicationSubnet"] = state ? state.replicationSubnet : undefined;
            resourceInputs["resumeLambda"] = state ? state.resumeLambda : undefined;
            resourceInputs["stackName"] = state ? state.stackName : undefined;
            resourceInputs["systemSubnet"] = state ? state.systemSubnet : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ArrayAwsArgs | undefined;
            if ((!args || args.arrayModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'arrayModel'");
            }
            if ((!args || args.arrayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'arrayName'");
            }
            if ((!args || args.deploymentRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentRoleArn'");
            }
            if ((!args || args.deploymentTemplateUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentTemplateUrl'");
            }
            if ((!args || args.iscsiSecurityGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iscsiSecurityGroup'");
            }
            if ((!args || args.iscsiSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iscsiSubnet'");
            }
            if ((!args || args.licenseKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseKey'");
            }
            if ((!args || args.logSenderDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logSenderDomain'");
            }
            if ((!args || args.managementSecurityGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementSecurityGroup'");
            }
            if ((!args || args.managementSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementSubnet'");
            }
            if ((!args || args.pureuserKeyPairName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pureuserKeyPairName'");
            }
            if ((!args || args.replicationSecurityGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationSecurityGroup'");
            }
            if ((!args || args.replicationSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationSubnet'");
            }
            if ((!args || args.systemSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'systemSubnet'");
            }
            resourceInputs["alertRecipients"] = args ? args.alertRecipients : undefined;
            resourceInputs["arrayModel"] = args ? args.arrayModel : undefined;
            resourceInputs["arrayName"] = args ? args.arrayName : undefined;
            resourceInputs["deploymentRoleArn"] = args ? args.deploymentRoleArn : undefined;
            resourceInputs["deploymentTemplateUrl"] = args ? args.deploymentTemplateUrl : undefined;
            resourceInputs["iscsiSecurityGroup"] = args ? args.iscsiSecurityGroup : undefined;
            resourceInputs["iscsiSubnet"] = args ? args.iscsiSubnet : undefined;
            resourceInputs["licenseKey"] = args ? args.licenseKey : undefined;
            resourceInputs["logSenderDomain"] = args ? args.logSenderDomain : undefined;
            resourceInputs["managementSecurityGroup"] = args ? args.managementSecurityGroup : undefined;
            resourceInputs["managementSubnet"] = args ? args.managementSubnet : undefined;
            resourceInputs["pureuserKeyPairName"] = args ? args.pureuserKeyPairName : undefined;
            resourceInputs["pureuserPrivateKey"] = args?.pureuserPrivateKey ? pulumi.secret(args.pureuserPrivateKey) : undefined;
            resourceInputs["pureuserPrivateKeyPath"] = args ? args.pureuserPrivateKeyPath : undefined;
            resourceInputs["replicationSecurityGroup"] = args ? args.replicationSecurityGroup : undefined;
            resourceInputs["replicationSubnet"] = args ? args.replicationSubnet : undefined;
            resourceInputs["systemSubnet"] = args ? args.systemSubnet : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["guiEndpoint"] = undefined /*out*/;
            resourceInputs["iscsiEndpointCt0"] = undefined /*out*/;
            resourceInputs["iscsiEndpointCt1"] = undefined /*out*/;
            resourceInputs["managementEndpoint"] = undefined /*out*/;
            resourceInputs["replicationEndpointCt0"] = undefined /*out*/;
            resourceInputs["replicationEndpointCt1"] = undefined /*out*/;
            resourceInputs["resumeLambda"] = undefined /*out*/;
            resourceInputs["stackName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["pureuserPrivateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ArrayAws.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArrayAws resources.
 */
export interface ArrayAwsState {
    alertRecipients?: pulumi.Input<pulumi.Input<string>[]>;
    arrayModel?: pulumi.Input<string>;
    arrayName?: pulumi.Input<string>;
    deploymentRoleArn?: pulumi.Input<string>;
    deploymentTemplateUrl?: pulumi.Input<string>;
    guiEndpoint?: pulumi.Input<string>;
    iscsiEndpointCt0?: pulumi.Input<string>;
    iscsiEndpointCt1?: pulumi.Input<string>;
    iscsiSecurityGroup?: pulumi.Input<string>;
    iscsiSubnet?: pulumi.Input<string>;
    licenseKey?: pulumi.Input<string>;
    logSenderDomain?: pulumi.Input<string>;
    managementEndpoint?: pulumi.Input<string>;
    managementSecurityGroup?: pulumi.Input<string>;
    managementSubnet?: pulumi.Input<string>;
    pureuserKeyPairName?: pulumi.Input<string>;
    pureuserPrivateKey?: pulumi.Input<string>;
    pureuserPrivateKeyPath?: pulumi.Input<string>;
    replicationEndpointCt0?: pulumi.Input<string>;
    replicationEndpointCt1?: pulumi.Input<string>;
    replicationSecurityGroup?: pulumi.Input<string>;
    replicationSubnet?: pulumi.Input<string>;
    resumeLambda?: pulumi.Input<string>;
    stackName?: pulumi.Input<string>;
    systemSubnet?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ArrayAwsTimeouts>;
}

/**
 * The set of arguments for constructing a ArrayAws resource.
 */
export interface ArrayAwsArgs {
    alertRecipients?: pulumi.Input<pulumi.Input<string>[]>;
    arrayModel: pulumi.Input<string>;
    arrayName: pulumi.Input<string>;
    deploymentRoleArn: pulumi.Input<string>;
    deploymentTemplateUrl: pulumi.Input<string>;
    iscsiSecurityGroup: pulumi.Input<string>;
    iscsiSubnet: pulumi.Input<string>;
    licenseKey: pulumi.Input<string>;
    logSenderDomain: pulumi.Input<string>;
    managementSecurityGroup: pulumi.Input<string>;
    managementSubnet: pulumi.Input<string>;
    pureuserKeyPairName: pulumi.Input<string>;
    pureuserPrivateKey?: pulumi.Input<string>;
    pureuserPrivateKeyPath?: pulumi.Input<string>;
    replicationSecurityGroup: pulumi.Input<string>;
    replicationSubnet: pulumi.Input<string>;
    systemSubnet: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ArrayAwsTimeouts>;
}
