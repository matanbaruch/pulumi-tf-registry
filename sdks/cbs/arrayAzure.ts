// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ArrayAzure extends pulumi.CustomResource {
    /**
     * Get an existing ArrayAzure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArrayAzureState, opts?: pulumi.CustomResourceOptions): ArrayAzure {
        return new ArrayAzure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cbs:index/arrayAzure:ArrayAzure';

    /**
     * Returns true if the given object is an instance of ArrayAzure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArrayAzure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArrayAzure.__pulumiType;
    }

    public readonly alertRecipients!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly applicationName!: pulumi.Output<string>;
    public readonly arrayModel!: pulumi.Output<string>;
    public readonly arrayName!: pulumi.Output<string>;
    public /*out*/ readonly ct0Name!: pulumi.Output<string>;
    public /*out*/ readonly ct1Name!: pulumi.Output<string>;
    public /*out*/ readonly iscsiEndpointCt0!: pulumi.Output<string>;
    public /*out*/ readonly iscsiEndpointCt1!: pulumi.Output<string>;
    public readonly iscsiSubnet!: pulumi.Output<string>;
    /**
     * This is a list of Azure group object IDs for people who are allowed to approve JIT requests
     */
    public readonly jitApprovalGroupObjectIds!: pulumi.Output<string[]>;
    public readonly keyVaultId!: pulumi.Output<string>;
    public readonly licenseKey!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly logSenderDomain!: pulumi.Output<string>;
    public /*out*/ readonly managedResourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly managementEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly managementEndpointCt0!: pulumi.Output<string>;
    public /*out*/ readonly managementEndpointCt1!: pulumi.Output<string>;
    public readonly managementSubnet!: pulumi.Output<string>;
    public readonly plan!: pulumi.Output<outputs.ArrayAzurePlan | undefined>;
    public readonly pureuserPrivateKey!: pulumi.Output<string | undefined>;
    public readonly pureuserPrivateKeyPath!: pulumi.Output<string | undefined>;
    public /*out*/ readonly replicationEndpointCt0!: pulumi.Output<string>;
    public /*out*/ readonly replicationEndpointCt1!: pulumi.Output<string>;
    public readonly replicationSubnet!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * Optional field that defines specific tags for specific resource types
     */
    public readonly resourceTags!: pulumi.Output<outputs.ArrayAzureResourceTag[] | undefined>;
    public readonly systemSubnet!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ArrayAzureTimeouts | undefined>;
    /**
     * A required input that denotes the identity of the customer User Assigned identity.
     */
    public readonly userAssignedIdentity!: pulumi.Output<string>;
    public readonly virtualNetworkId!: pulumi.Output<string>;
    public readonly zone!: pulumi.Output<number>;

    /**
     * Create a ArrayAzure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArrayAzureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArrayAzureArgs | ArrayAzureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArrayAzureState | undefined;
            resourceInputs["alertRecipients"] = state ? state.alertRecipients : undefined;
            resourceInputs["applicationName"] = state ? state.applicationName : undefined;
            resourceInputs["arrayModel"] = state ? state.arrayModel : undefined;
            resourceInputs["arrayName"] = state ? state.arrayName : undefined;
            resourceInputs["ct0Name"] = state ? state.ct0Name : undefined;
            resourceInputs["ct1Name"] = state ? state.ct1Name : undefined;
            resourceInputs["iscsiEndpointCt0"] = state ? state.iscsiEndpointCt0 : undefined;
            resourceInputs["iscsiEndpointCt1"] = state ? state.iscsiEndpointCt1 : undefined;
            resourceInputs["iscsiSubnet"] = state ? state.iscsiSubnet : undefined;
            resourceInputs["jitApprovalGroupObjectIds"] = state ? state.jitApprovalGroupObjectIds : undefined;
            resourceInputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            resourceInputs["licenseKey"] = state ? state.licenseKey : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logSenderDomain"] = state ? state.logSenderDomain : undefined;
            resourceInputs["managedResourceGroupName"] = state ? state.managedResourceGroupName : undefined;
            resourceInputs["managementEndpoint"] = state ? state.managementEndpoint : undefined;
            resourceInputs["managementEndpointCt0"] = state ? state.managementEndpointCt0 : undefined;
            resourceInputs["managementEndpointCt1"] = state ? state.managementEndpointCt1 : undefined;
            resourceInputs["managementSubnet"] = state ? state.managementSubnet : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["pureuserPrivateKey"] = state ? state.pureuserPrivateKey : undefined;
            resourceInputs["pureuserPrivateKeyPath"] = state ? state.pureuserPrivateKeyPath : undefined;
            resourceInputs["replicationEndpointCt0"] = state ? state.replicationEndpointCt0 : undefined;
            resourceInputs["replicationEndpointCt1"] = state ? state.replicationEndpointCt1 : undefined;
            resourceInputs["replicationSubnet"] = state ? state.replicationSubnet : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["resourceTags"] = state ? state.resourceTags : undefined;
            resourceInputs["systemSubnet"] = state ? state.systemSubnet : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userAssignedIdentity"] = state ? state.userAssignedIdentity : undefined;
            resourceInputs["virtualNetworkId"] = state ? state.virtualNetworkId : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ArrayAzureArgs | undefined;
            if ((!args || args.arrayModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'arrayModel'");
            }
            if ((!args || args.arrayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'arrayName'");
            }
            if ((!args || args.iscsiSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iscsiSubnet'");
            }
            if ((!args || args.jitApprovalGroupObjectIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jitApprovalGroupObjectIds'");
            }
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            if ((!args || args.licenseKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseKey'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.logSenderDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logSenderDomain'");
            }
            if ((!args || args.managementSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementSubnet'");
            }
            if ((!args || args.replicationSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationSubnet'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.systemSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'systemSubnet'");
            }
            if ((!args || args.userAssignedIdentity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userAssignedIdentity'");
            }
            if ((!args || args.virtualNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetworkId'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["alertRecipients"] = args ? args.alertRecipients : undefined;
            resourceInputs["arrayModel"] = args ? args.arrayModel : undefined;
            resourceInputs["arrayName"] = args ? args.arrayName : undefined;
            resourceInputs["iscsiSubnet"] = args ? args.iscsiSubnet : undefined;
            resourceInputs["jitApprovalGroupObjectIds"] = args ? args.jitApprovalGroupObjectIds : undefined;
            resourceInputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            resourceInputs["licenseKey"] = args ? args.licenseKey : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logSenderDomain"] = args ? args.logSenderDomain : undefined;
            resourceInputs["managementSubnet"] = args ? args.managementSubnet : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["pureuserPrivateKey"] = args?.pureuserPrivateKey ? pulumi.secret(args.pureuserPrivateKey) : undefined;
            resourceInputs["pureuserPrivateKeyPath"] = args ? args.pureuserPrivateKeyPath : undefined;
            resourceInputs["replicationSubnet"] = args ? args.replicationSubnet : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["resourceTags"] = args ? args.resourceTags : undefined;
            resourceInputs["systemSubnet"] = args ? args.systemSubnet : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userAssignedIdentity"] = args ? args.userAssignedIdentity : undefined;
            resourceInputs["virtualNetworkId"] = args ? args.virtualNetworkId : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["applicationName"] = undefined /*out*/;
            resourceInputs["ct0Name"] = undefined /*out*/;
            resourceInputs["ct1Name"] = undefined /*out*/;
            resourceInputs["iscsiEndpointCt0"] = undefined /*out*/;
            resourceInputs["iscsiEndpointCt1"] = undefined /*out*/;
            resourceInputs["managedResourceGroupName"] = undefined /*out*/;
            resourceInputs["managementEndpoint"] = undefined /*out*/;
            resourceInputs["managementEndpointCt0"] = undefined /*out*/;
            resourceInputs["managementEndpointCt1"] = undefined /*out*/;
            resourceInputs["replicationEndpointCt0"] = undefined /*out*/;
            resourceInputs["replicationEndpointCt1"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["pureuserPrivateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ArrayAzure.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArrayAzure resources.
 */
export interface ArrayAzureState {
    alertRecipients?: pulumi.Input<pulumi.Input<string>[]>;
    applicationName?: pulumi.Input<string>;
    arrayModel?: pulumi.Input<string>;
    arrayName?: pulumi.Input<string>;
    ct0Name?: pulumi.Input<string>;
    ct1Name?: pulumi.Input<string>;
    iscsiEndpointCt0?: pulumi.Input<string>;
    iscsiEndpointCt1?: pulumi.Input<string>;
    iscsiSubnet?: pulumi.Input<string>;
    /**
     * This is a list of Azure group object IDs for people who are allowed to approve JIT requests
     */
    jitApprovalGroupObjectIds?: pulumi.Input<pulumi.Input<string>[]>;
    keyVaultId?: pulumi.Input<string>;
    licenseKey?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    logSenderDomain?: pulumi.Input<string>;
    managedResourceGroupName?: pulumi.Input<string>;
    managementEndpoint?: pulumi.Input<string>;
    managementEndpointCt0?: pulumi.Input<string>;
    managementEndpointCt1?: pulumi.Input<string>;
    managementSubnet?: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.ArrayAzurePlan>;
    pureuserPrivateKey?: pulumi.Input<string>;
    pureuserPrivateKeyPath?: pulumi.Input<string>;
    replicationEndpointCt0?: pulumi.Input<string>;
    replicationEndpointCt1?: pulumi.Input<string>;
    replicationSubnet?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Optional field that defines specific tags for specific resource types
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.ArrayAzureResourceTag>[]>;
    systemSubnet?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ArrayAzureTimeouts>;
    /**
     * A required input that denotes the identity of the customer User Assigned identity.
     */
    userAssignedIdentity?: pulumi.Input<string>;
    virtualNetworkId?: pulumi.Input<string>;
    zone?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ArrayAzure resource.
 */
export interface ArrayAzureArgs {
    alertRecipients?: pulumi.Input<pulumi.Input<string>[]>;
    arrayModel: pulumi.Input<string>;
    arrayName: pulumi.Input<string>;
    iscsiSubnet: pulumi.Input<string>;
    /**
     * This is a list of Azure group object IDs for people who are allowed to approve JIT requests
     */
    jitApprovalGroupObjectIds: pulumi.Input<pulumi.Input<string>[]>;
    keyVaultId: pulumi.Input<string>;
    licenseKey: pulumi.Input<string>;
    location: pulumi.Input<string>;
    logSenderDomain: pulumi.Input<string>;
    managementSubnet: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.ArrayAzurePlan>;
    pureuserPrivateKey?: pulumi.Input<string>;
    pureuserPrivateKeyPath?: pulumi.Input<string>;
    replicationSubnet: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    /**
     * Optional field that defines specific tags for specific resource types
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.ArrayAzureResourceTag>[]>;
    systemSubnet: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ArrayAzureTimeouts>;
    /**
     * A required input that denotes the identity of the customer User Assigned identity.
     */
    userAssignedIdentity: pulumi.Input<string>;
    virtualNetworkId: pulumi.Input<string>;
    zone: pulumi.Input<number>;
}
