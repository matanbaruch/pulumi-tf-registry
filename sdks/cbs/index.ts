// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ArrayAwsArgs, ArrayAwsState } from "./arrayAws";
export type ArrayAws = import("./arrayAws").ArrayAws;
export const ArrayAws: typeof import("./arrayAws").ArrayAws = null as any;
utilities.lazyLoad(exports, ["ArrayAws"], () => require("./arrayAws"));

export { ArrayAzureArgs, ArrayAzureState } from "./arrayAzure";
export type ArrayAzure = import("./arrayAzure").ArrayAzure;
export const ArrayAzure: typeof import("./arrayAzure").ArrayAzure = null as any;
utilities.lazyLoad(exports, ["ArrayAzure"], () => require("./arrayAzure"));

export { GetAzurePlansArgs, GetAzurePlansResult, GetAzurePlansOutputArgs } from "./getAzurePlans";
export const getAzurePlans: typeof import("./getAzurePlans").getAzurePlans = null as any;
export const getAzurePlansOutput: typeof import("./getAzurePlans").getAzurePlansOutput = null as any;
utilities.lazyLoad(exports, ["getAzurePlans","getAzurePlansOutput"], () => require("./getAzurePlans"));

export { GetPlanAzureArgs, GetPlanAzureResult, GetPlanAzureOutputArgs } from "./getPlanAzure";
export const getPlanAzure: typeof import("./getPlanAzure").getPlanAzure = null as any;
export const getPlanAzureOutput: typeof import("./getPlanAzure").getPlanAzureOutput = null as any;
utilities.lazyLoad(exports, ["getPlanAzure","getPlanAzureOutput"], () => require("./getPlanAzure"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cbs:index/arrayAws:ArrayAws":
                return new ArrayAws(name, <any>undefined, { urn })
            case "cbs:index/arrayAzure:ArrayAzure":
                return new ArrayAzure(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cbs", "index/arrayAws", _module)
pulumi.runtime.registerResourceModule("cbs", "index/arrayAzure", _module)
pulumi.runtime.registerResourcePackage("cbs", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cbs") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
