// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AmazonHypervisorArgs, AmazonHypervisorState } from "./amazonHypervisor";
export type AmazonHypervisor = import("./amazonHypervisor").AmazonHypervisor;
export const AmazonHypervisor: typeof import("./amazonHypervisor").AmazonHypervisor = null as any;
utilities.lazyLoad(exports, ["AmazonHypervisor"], () => require("./amazonHypervisor"));

export { AwsStorageArgs, AwsStorageState } from "./awsStorage";
export type AwsStorage = import("./awsStorage").AwsStorage;
export const AwsStorage: typeof import("./awsStorage").AwsStorage = null as any;
utilities.lazyLoad(exports, ["AwsStorage"], () => require("./awsStorage"));

export { AzureHypervisorArgs, AzureHypervisorState } from "./azureHypervisor";
export type AzureHypervisor = import("./azureHypervisor").AzureHypervisor;
export const AzureHypervisor: typeof import("./azureHypervisor").AzureHypervisor = null as any;
utilities.lazyLoad(exports, ["AzureHypervisor"], () => require("./azureHypervisor"));

export { AzureStorageArgs, AzureStorageState } from "./azureStorage";
export type AzureStorage = import("./azureStorage").AzureStorage;
export const AzureStorage: typeof import("./azureStorage").AzureStorage = null as any;
utilities.lazyLoad(exports, ["AzureStorage"], () => require("./azureStorage"));

export { CompanyArgs, CompanyState } from "./company";
export type Company = import("./company").Company;
export const Company: typeof import("./company").Company = null as any;
utilities.lazyLoad(exports, ["Company"], () => require("./company"));

export { CredentialAwsArgs, CredentialAwsState } from "./credentialAws";
export type CredentialAws = import("./credentialAws").CredentialAws;
export const CredentialAws: typeof import("./credentialAws").CredentialAws = null as any;
utilities.lazyLoad(exports, ["CredentialAws"], () => require("./credentialAws"));

export { CredentialAwswithrolearnArgs, CredentialAwswithrolearnState } from "./credentialAwswithrolearn";
export type CredentialAwswithrolearn = import("./credentialAwswithrolearn").CredentialAwswithrolearn;
export const CredentialAwswithrolearn: typeof import("./credentialAwswithrolearn").CredentialAwswithrolearn = null as any;
utilities.lazyLoad(exports, ["CredentialAwswithrolearn"], () => require("./credentialAwswithrolearn"));

export { CredentialAzureArgs, CredentialAzureState } from "./credentialAzure";
export type CredentialAzure = import("./credentialAzure").CredentialAzure;
export const CredentialAzure: typeof import("./credentialAzure").CredentialAzure = null as any;
utilities.lazyLoad(exports, ["CredentialAzure"], () => require("./credentialAzure"));

export { CredentialAzurewithtenantidArgs, CredentialAzurewithtenantidState } from "./credentialAzurewithtenantid";
export type CredentialAzurewithtenantid = import("./credentialAzurewithtenantid").CredentialAzurewithtenantid;
export const CredentialAzurewithtenantid: typeof import("./credentialAzurewithtenantid").CredentialAzurewithtenantid = null as any;
utilities.lazyLoad(exports, ["CredentialAzurewithtenantid"], () => require("./credentialAzurewithtenantid"));

export { DiskAccesspathArgs, DiskAccesspathState } from "./diskAccesspath";
export type DiskAccesspath = import("./diskAccesspath").DiskAccesspath;
export const DiskAccesspath: typeof import("./diskAccesspath").DiskAccesspath = null as any;
utilities.lazyLoad(exports, ["DiskAccesspath"], () => require("./diskAccesspath"));

export { DiskStorageArgs, DiskStorageState } from "./diskStorage";
export type DiskStorage = import("./diskStorage").DiskStorage;
export const DiskStorage: typeof import("./diskStorage").DiskStorage = null as any;
utilities.lazyLoad(exports, ["DiskStorage"], () => require("./diskStorage"));

export { GetClientArgs, GetClientResult, GetClientOutputArgs } from "./getClient";
export const getClient: typeof import("./getClient").getClient = null as any;
export const getClientOutput: typeof import("./getClient").getClientOutput = null as any;
utilities.lazyLoad(exports, ["getClient","getClientOutput"], () => require("./getClient"));

export { GetClientgroupArgs, GetClientgroupResult, GetClientgroupOutputArgs } from "./getClientgroup";
export const getClientgroup: typeof import("./getClientgroup").getClientgroup = null as any;
export const getClientgroupOutput: typeof import("./getClientgroup").getClientgroupOutput = null as any;
utilities.lazyLoad(exports, ["getClientgroup","getClientgroupOutput"], () => require("./getClientgroup"));

export { GetCompanyArgs, GetCompanyResult, GetCompanyOutputArgs } from "./getCompany";
export const getCompany: typeof import("./getCompany").getCompany = null as any;
export const getCompanyOutput: typeof import("./getCompany").getCompanyOutput = null as any;
utilities.lazyLoad(exports, ["getCompany","getCompanyOutput"], () => require("./getCompany"));

export { GetCredentialArgs, GetCredentialResult, GetCredentialOutputArgs } from "./getCredential";
export const getCredential: typeof import("./getCredential").getCredential = null as any;
export const getCredentialOutput: typeof import("./getCredential").getCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getCredential","getCredentialOutput"], () => require("./getCredential"));

export { GetHyperscaleArgs, GetHyperscaleResult, GetHyperscaleOutputArgs } from "./getHyperscale";
export const getHyperscale: typeof import("./getHyperscale").getHyperscale = null as any;
export const getHyperscaleOutput: typeof import("./getHyperscale").getHyperscaleOutput = null as any;
utilities.lazyLoad(exports, ["getHyperscale","getHyperscaleOutput"], () => require("./getHyperscale"));

export { GetKubernetesApplicationsArgs, GetKubernetesApplicationsResult, GetKubernetesApplicationsOutputArgs } from "./getKubernetesApplications";
export const getKubernetesApplications: typeof import("./getKubernetesApplications").getKubernetesApplications = null as any;
export const getKubernetesApplicationsOutput: typeof import("./getKubernetesApplications").getKubernetesApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesApplications","getKubernetesApplicationsOutput"], () => require("./getKubernetesApplications"));

export { GetKubernetesLabelsArgs, GetKubernetesLabelsResult, GetKubernetesLabelsOutputArgs } from "./getKubernetesLabels";
export const getKubernetesLabels: typeof import("./getKubernetesLabels").getKubernetesLabels = null as any;
export const getKubernetesLabelsOutput: typeof import("./getKubernetesLabels").getKubernetesLabelsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesLabels","getKubernetesLabelsOutput"], () => require("./getKubernetesLabels"));

export { GetKubernetesNamespacesArgs, GetKubernetesNamespacesResult, GetKubernetesNamespacesOutputArgs } from "./getKubernetesNamespaces";
export const getKubernetesNamespaces: typeof import("./getKubernetesNamespaces").getKubernetesNamespaces = null as any;
export const getKubernetesNamespacesOutput: typeof import("./getKubernetesNamespaces").getKubernetesNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNamespaces","getKubernetesNamespacesOutput"], () => require("./getKubernetesNamespaces"));

export { GetKubernetesStorageclassesArgs, GetKubernetesStorageclassesResult, GetKubernetesStorageclassesOutputArgs } from "./getKubernetesStorageclasses";
export const getKubernetesStorageclasses: typeof import("./getKubernetesStorageclasses").getKubernetesStorageclasses = null as any;
export const getKubernetesStorageclassesOutput: typeof import("./getKubernetesStorageclasses").getKubernetesStorageclassesOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesStorageclasses","getKubernetesStorageclassesOutput"], () => require("./getKubernetesStorageclasses"));

export { GetKubernetesVolumesArgs, GetKubernetesVolumesResult, GetKubernetesVolumesOutputArgs } from "./getKubernetesVolumes";
export const getKubernetesVolumes: typeof import("./getKubernetesVolumes").getKubernetesVolumes = null as any;
export const getKubernetesVolumesOutput: typeof import("./getKubernetesVolumes").getKubernetesVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesVolumes","getKubernetesVolumesOutput"], () => require("./getKubernetesVolumes"));

export { GetPermissionArgs, GetPermissionResult, GetPermissionOutputArgs } from "./getPermission";
export const getPermission: typeof import("./getPermission").getPermission = null as any;
export const getPermissionOutput: typeof import("./getPermission").getPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getPermission","getPermissionOutput"], () => require("./getPermission"));

export { GetPlanArgs, GetPlanResult, GetPlanOutputArgs } from "./getPlan";
export const getPlan: typeof import("./getPlan").getPlan = null as any;
export const getPlanOutput: typeof import("./getPlan").getPlanOutput = null as any;
utilities.lazyLoad(exports, ["getPlan","getPlanOutput"], () => require("./getPlan"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetStoragepoolArgs, GetStoragepoolResult, GetStoragepoolOutputArgs } from "./getStoragepool";
export const getStoragepool: typeof import("./getStoragepool").getStoragepool = null as any;
export const getStoragepoolOutput: typeof import("./getStoragepool").getStoragepoolOutput = null as any;
utilities.lazyLoad(exports, ["getStoragepool","getStoragepoolOutput"], () => require("./getStoragepool"));

export { GetTimezoneArgs, GetTimezoneResult, GetTimezoneOutputArgs } from "./getTimezone";
export const getTimezone: typeof import("./getTimezone").getTimezone = null as any;
export const getTimezoneOutput: typeof import("./getTimezone").getTimezoneOutput = null as any;
utilities.lazyLoad(exports, ["getTimezone","getTimezoneOutput"], () => require("./getTimezone"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsergroupArgs, GetUsergroupResult, GetUsergroupOutputArgs } from "./getUsergroup";
export const getUsergroup: typeof import("./getUsergroup").getUsergroup = null as any;
export const getUsergroupOutput: typeof import("./getUsergroup").getUsergroupOutput = null as any;
utilities.lazyLoad(exports, ["getUsergroup","getUsergroupOutput"], () => require("./getUsergroup"));

export { GoogleStorageArgs, GoogleStorageState } from "./googleStorage";
export type GoogleStorage = import("./googleStorage").GoogleStorage;
export const GoogleStorage: typeof import("./googleStorage").GoogleStorage = null as any;
utilities.lazyLoad(exports, ["GoogleStorage"], () => require("./googleStorage"));

export { HypervisorAwsArgs, HypervisorAwsState } from "./hypervisorAws";
export type HypervisorAws = import("./hypervisorAws").HypervisorAws;
export const HypervisorAws: typeof import("./hypervisorAws").HypervisorAws = null as any;
utilities.lazyLoad(exports, ["HypervisorAws"], () => require("./hypervisorAws"));

export { HypervisorAzureArgs, HypervisorAzureState } from "./hypervisorAzure";
export type HypervisorAzure = import("./hypervisorAzure").HypervisorAzure;
export const HypervisorAzure: typeof import("./hypervisorAzure").HypervisorAzure = null as any;
utilities.lazyLoad(exports, ["HypervisorAzure"], () => require("./hypervisorAzure"));

export { InstallMaArgs, InstallMaState } from "./installMa";
export type InstallMa = import("./installMa").InstallMa;
export const InstallMa: typeof import("./installMa").InstallMa = null as any;
utilities.lazyLoad(exports, ["InstallMa"], () => require("./installMa"));

export { KubernetesAppgroupArgs, KubernetesAppgroupState } from "./kubernetesAppgroup";
export type KubernetesAppgroup = import("./kubernetesAppgroup").KubernetesAppgroup;
export const KubernetesAppgroup: typeof import("./kubernetesAppgroup").KubernetesAppgroup = null as any;
utilities.lazyLoad(exports, ["KubernetesAppgroup"], () => require("./kubernetesAppgroup"));

export { KubernetesClusterArgs, KubernetesClusterState } from "./kubernetesCluster";
export type KubernetesCluster = import("./kubernetesCluster").KubernetesCluster;
export const KubernetesCluster: typeof import("./kubernetesCluster").KubernetesCluster = null as any;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));

export { LoginArgs, LoginState } from "./login";
export type Login = import("./login").Login;
export const Login: typeof import("./login").Login = null as any;
utilities.lazyLoad(exports, ["Login"], () => require("./login"));

export { PlanArgs, PlanState } from "./plan";
export type Plan = import("./plan").Plan;
export const Plan: typeof import("./plan").Plan = null as any;
utilities.lazyLoad(exports, ["Plan"], () => require("./plan"));

export { PlanBackupdestinationArgs, PlanBackupdestinationState } from "./planBackupdestination";
export type PlanBackupdestination = import("./planBackupdestination").PlanBackupdestination;
export const PlanBackupdestination: typeof import("./planBackupdestination").PlanBackupdestination = null as any;
utilities.lazyLoad(exports, ["PlanBackupdestination"], () => require("./planBackupdestination"));

export { PlanServerArgs, PlanServerState } from "./planServer";
export type PlanServer = import("./planServer").PlanServer;
export const PlanServer: typeof import("./planServer").PlanServer = null as any;
utilities.lazyLoad(exports, ["PlanServer"], () => require("./planServer"));

export { PlanToVmArgs, PlanToVmState } from "./planToVm";
export type PlanToVm = import("./planToVm").PlanToVm;
export const PlanToVm: typeof import("./planToVm").PlanToVm = null as any;
utilities.lazyLoad(exports, ["PlanToVm"], () => require("./planToVm"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { SecurityAssociationArgs, SecurityAssociationState } from "./securityAssociation";
export type SecurityAssociation = import("./securityAssociation").SecurityAssociation;
export const SecurityAssociation: typeof import("./securityAssociation").SecurityAssociation = null as any;
utilities.lazyLoad(exports, ["SecurityAssociation"], () => require("./securityAssociation"));

export { SecurityAssociationV2Args, SecurityAssociationV2State } from "./securityAssociationV2";
export type SecurityAssociationV2 = import("./securityAssociationV2").SecurityAssociationV2;
export const SecurityAssociationV2: typeof import("./securityAssociationV2").SecurityAssociationV2 = null as any;
utilities.lazyLoad(exports, ["SecurityAssociationV2"], () => require("./securityAssociationV2"));

export { StorageCloudAccesspathArgs, StorageCloudAccesspathState } from "./storageCloudAccesspath";
export type StorageCloudAccesspath = import("./storageCloudAccesspath").StorageCloudAccesspath;
export const StorageCloudAccesspath: typeof import("./storageCloudAccesspath").StorageCloudAccesspath = null as any;
utilities.lazyLoad(exports, ["StorageCloudAccesspath"], () => require("./storageCloudAccesspath"));

export { StorageCloudAzureArgs, StorageCloudAzureState } from "./storageCloudAzure";
export type StorageCloudAzure = import("./storageCloudAzure").StorageCloudAzure;
export const StorageCloudAzure: typeof import("./storageCloudAzure").StorageCloudAzure = null as any;
utilities.lazyLoad(exports, ["StorageCloudAzure"], () => require("./storageCloudAzure"));

export { StorageCloudBucketS3Args, StorageCloudBucketS3State } from "./storageCloudBucketS3";
export type StorageCloudBucketS3 = import("./storageCloudBucketS3").StorageCloudBucketS3;
export const StorageCloudBucketS3: typeof import("./storageCloudBucketS3").StorageCloudBucketS3 = null as any;
utilities.lazyLoad(exports, ["StorageCloudBucketS3"], () => require("./storageCloudBucketS3"));

export { StorageCloudS3Args, StorageCloudS3State } from "./storageCloudS3";
export type StorageCloudS3 = import("./storageCloudS3").StorageCloudS3;
export const StorageCloudS3: typeof import("./storageCloudS3").StorageCloudS3 = null as any;
utilities.lazyLoad(exports, ["StorageCloudS3"], () => require("./storageCloudS3"));

export { StorageContainerAzureArgs, StorageContainerAzureState } from "./storageContainerAzure";
export type StorageContainerAzure = import("./storageContainerAzure").StorageContainerAzure;
export const StorageContainerAzure: typeof import("./storageContainerAzure").StorageContainerAzure = null as any;
utilities.lazyLoad(exports, ["StorageContainerAzure"], () => require("./storageContainerAzure"));

export { StorageDiskArgs, StorageDiskState } from "./storageDisk";
export type StorageDisk = import("./storageDisk").StorageDisk;
export const StorageDisk: typeof import("./storageDisk").StorageDisk = null as any;
utilities.lazyLoad(exports, ["StorageDisk"], () => require("./storageDisk"));

export { StorageDiskBackupLocationArgs, StorageDiskBackupLocationState } from "./storageDiskBackupLocation";
export type StorageDiskBackupLocation = import("./storageDiskBackupLocation").StorageDiskBackupLocation;
export const StorageDiskBackupLocation: typeof import("./storageDiskBackupLocation").StorageDiskBackupLocation = null as any;
utilities.lazyLoad(exports, ["StorageDiskBackupLocation"], () => require("./storageDiskBackupLocation"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserV2Args, UserV2State } from "./userV2";
export type UserV2 = import("./userV2").UserV2;
export const UserV2: typeof import("./userV2").UserV2 = null as any;
utilities.lazyLoad(exports, ["UserV2"], () => require("./userV2"));

export { UsergroupArgs, UsergroupState } from "./usergroup";
export type Usergroup = import("./usergroup").Usergroup;
export const Usergroup: typeof import("./usergroup").Usergroup = null as any;
utilities.lazyLoad(exports, ["Usergroup"], () => require("./usergroup"));

export { VmGroupArgs, VmGroupState } from "./vmGroup";
export type VmGroup = import("./vmGroup").VmGroup;
export const VmGroup: typeof import("./vmGroup").VmGroup = null as any;
utilities.lazyLoad(exports, ["VmGroup"], () => require("./vmGroup"));

export { VmgroupV2Args, VmgroupV2State } from "./vmgroupV2";
export type VmgroupV2 = import("./vmgroupV2").VmgroupV2;
export const VmgroupV2: typeof import("./vmgroupV2").VmgroupV2 = null as any;
utilities.lazyLoad(exports, ["VmgroupV2"], () => require("./vmgroupV2"));

export { VmwareHypervisorArgs, VmwareHypervisorState } from "./vmwareHypervisor";
export type VmwareHypervisor = import("./vmwareHypervisor").VmwareHypervisor;
export const VmwareHypervisor: typeof import("./vmwareHypervisor").VmwareHypervisor = null as any;
utilities.lazyLoad(exports, ["VmwareHypervisor"], () => require("./vmwareHypervisor"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "commvault:index/amazonHypervisor:AmazonHypervisor":
                return new AmazonHypervisor(name, <any>undefined, { urn })
            case "commvault:index/awsStorage:AwsStorage":
                return new AwsStorage(name, <any>undefined, { urn })
            case "commvault:index/azureHypervisor:AzureHypervisor":
                return new AzureHypervisor(name, <any>undefined, { urn })
            case "commvault:index/azureStorage:AzureStorage":
                return new AzureStorage(name, <any>undefined, { urn })
            case "commvault:index/company:Company":
                return new Company(name, <any>undefined, { urn })
            case "commvault:index/credentialAws:CredentialAws":
                return new CredentialAws(name, <any>undefined, { urn })
            case "commvault:index/credentialAwswithrolearn:CredentialAwswithrolearn":
                return new CredentialAwswithrolearn(name, <any>undefined, { urn })
            case "commvault:index/credentialAzure:CredentialAzure":
                return new CredentialAzure(name, <any>undefined, { urn })
            case "commvault:index/credentialAzurewithtenantid:CredentialAzurewithtenantid":
                return new CredentialAzurewithtenantid(name, <any>undefined, { urn })
            case "commvault:index/diskAccesspath:DiskAccesspath":
                return new DiskAccesspath(name, <any>undefined, { urn })
            case "commvault:index/diskStorage:DiskStorage":
                return new DiskStorage(name, <any>undefined, { urn })
            case "commvault:index/googleStorage:GoogleStorage":
                return new GoogleStorage(name, <any>undefined, { urn })
            case "commvault:index/hypervisorAws:HypervisorAws":
                return new HypervisorAws(name, <any>undefined, { urn })
            case "commvault:index/hypervisorAzure:HypervisorAzure":
                return new HypervisorAzure(name, <any>undefined, { urn })
            case "commvault:index/installMa:InstallMa":
                return new InstallMa(name, <any>undefined, { urn })
            case "commvault:index/kubernetesAppgroup:KubernetesAppgroup":
                return new KubernetesAppgroup(name, <any>undefined, { urn })
            case "commvault:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "commvault:index/login:Login":
                return new Login(name, <any>undefined, { urn })
            case "commvault:index/plan:Plan":
                return new Plan(name, <any>undefined, { urn })
            case "commvault:index/planBackupdestination:PlanBackupdestination":
                return new PlanBackupdestination(name, <any>undefined, { urn })
            case "commvault:index/planServer:PlanServer":
                return new PlanServer(name, <any>undefined, { urn })
            case "commvault:index/planToVm:PlanToVm":
                return new PlanToVm(name, <any>undefined, { urn })
            case "commvault:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "commvault:index/securityAssociation:SecurityAssociation":
                return new SecurityAssociation(name, <any>undefined, { urn })
            case "commvault:index/securityAssociationV2:SecurityAssociationV2":
                return new SecurityAssociationV2(name, <any>undefined, { urn })
            case "commvault:index/storageCloudAccesspath:StorageCloudAccesspath":
                return new StorageCloudAccesspath(name, <any>undefined, { urn })
            case "commvault:index/storageCloudAzure:StorageCloudAzure":
                return new StorageCloudAzure(name, <any>undefined, { urn })
            case "commvault:index/storageCloudBucketS3:StorageCloudBucketS3":
                return new StorageCloudBucketS3(name, <any>undefined, { urn })
            case "commvault:index/storageCloudS3:StorageCloudS3":
                return new StorageCloudS3(name, <any>undefined, { urn })
            case "commvault:index/storageContainerAzure:StorageContainerAzure":
                return new StorageContainerAzure(name, <any>undefined, { urn })
            case "commvault:index/storageDisk:StorageDisk":
                return new StorageDisk(name, <any>undefined, { urn })
            case "commvault:index/storageDiskBackupLocation:StorageDiskBackupLocation":
                return new StorageDiskBackupLocation(name, <any>undefined, { urn })
            case "commvault:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "commvault:index/userV2:UserV2":
                return new UserV2(name, <any>undefined, { urn })
            case "commvault:index/usergroup:Usergroup":
                return new Usergroup(name, <any>undefined, { urn })
            case "commvault:index/vmGroup:VmGroup":
                return new VmGroup(name, <any>undefined, { urn })
            case "commvault:index/vmgroupV2:VmgroupV2":
                return new VmgroupV2(name, <any>undefined, { urn })
            case "commvault:index/vmwareHypervisor:VmwareHypervisor":
                return new VmwareHypervisor(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("commvault", "index/amazonHypervisor", _module)
pulumi.runtime.registerResourceModule("commvault", "index/awsStorage", _module)
pulumi.runtime.registerResourceModule("commvault", "index/azureHypervisor", _module)
pulumi.runtime.registerResourceModule("commvault", "index/azureStorage", _module)
pulumi.runtime.registerResourceModule("commvault", "index/company", _module)
pulumi.runtime.registerResourceModule("commvault", "index/credentialAws", _module)
pulumi.runtime.registerResourceModule("commvault", "index/credentialAwswithrolearn", _module)
pulumi.runtime.registerResourceModule("commvault", "index/credentialAzure", _module)
pulumi.runtime.registerResourceModule("commvault", "index/credentialAzurewithtenantid", _module)
pulumi.runtime.registerResourceModule("commvault", "index/diskAccesspath", _module)
pulumi.runtime.registerResourceModule("commvault", "index/diskStorage", _module)
pulumi.runtime.registerResourceModule("commvault", "index/googleStorage", _module)
pulumi.runtime.registerResourceModule("commvault", "index/hypervisorAws", _module)
pulumi.runtime.registerResourceModule("commvault", "index/hypervisorAzure", _module)
pulumi.runtime.registerResourceModule("commvault", "index/installMa", _module)
pulumi.runtime.registerResourceModule("commvault", "index/kubernetesAppgroup", _module)
pulumi.runtime.registerResourceModule("commvault", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("commvault", "index/login", _module)
pulumi.runtime.registerResourceModule("commvault", "index/plan", _module)
pulumi.runtime.registerResourceModule("commvault", "index/planBackupdestination", _module)
pulumi.runtime.registerResourceModule("commvault", "index/planServer", _module)
pulumi.runtime.registerResourceModule("commvault", "index/planToVm", _module)
pulumi.runtime.registerResourceModule("commvault", "index/role", _module)
pulumi.runtime.registerResourceModule("commvault", "index/securityAssociation", _module)
pulumi.runtime.registerResourceModule("commvault", "index/securityAssociationV2", _module)
pulumi.runtime.registerResourceModule("commvault", "index/storageCloudAccesspath", _module)
pulumi.runtime.registerResourceModule("commvault", "index/storageCloudAzure", _module)
pulumi.runtime.registerResourceModule("commvault", "index/storageCloudBucketS3", _module)
pulumi.runtime.registerResourceModule("commvault", "index/storageCloudS3", _module)
pulumi.runtime.registerResourceModule("commvault", "index/storageContainerAzure", _module)
pulumi.runtime.registerResourceModule("commvault", "index/storageDisk", _module)
pulumi.runtime.registerResourceModule("commvault", "index/storageDiskBackupLocation", _module)
pulumi.runtime.registerResourceModule("commvault", "index/user", _module)
pulumi.runtime.registerResourceModule("commvault", "index/userV2", _module)
pulumi.runtime.registerResourceModule("commvault", "index/usergroup", _module)
pulumi.runtime.registerResourceModule("commvault", "index/vmGroup", _module)
pulumi.runtime.registerResourceModule("commvault", "index/vmgroupV2", _module)
pulumi.runtime.registerResourceModule("commvault", "index/vmwareHypervisor", _module)
pulumi.runtime.registerResourcePackage("commvault", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:commvault") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
