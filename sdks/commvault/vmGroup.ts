// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VmGroup extends pulumi.CustomResource {
    /**
     * Get an existing VmGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmGroupState, opts?: pulumi.CustomResourceOptions): VmGroup {
        return new VmGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/vmGroup:VmGroup';

    /**
     * Returns true if the given object is an instance of VmGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmGroup.__pulumiType;
    }

    /**
     * Specifies The ID of the hypervisor client.
     */
    public readonly clientId!: pulumi.Output<number>;
    /**
     * Specifies the company id to which the vm group should be associated with.
     */
    public readonly companyId!: pulumi.Output<number | undefined>;
    /**
     * Specifies The ID of the plan that you want to associate with the VM group.
     */
    public readonly planId!: pulumi.Output<number>;
    /**
     * Specifies The Tags that you want to back up in a VM group.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies The name of the VM group.
     */
    public readonly vmGroupName!: pulumi.Output<string>;
    /**
     * Specifies The VMs that you want to back up in a VM group.
     */
    public readonly vms!: pulumi.Output<string[] | undefined>;

    /**
     * Create a VmGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmGroupArgs | VmGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmGroupState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["companyId"] = state ? state.companyId : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vmGroupName"] = state ? state.vmGroupName : undefined;
            resourceInputs["vms"] = state ? state.vms : undefined;
        } else {
            const args = argsOrState as VmGroupArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.planId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planId'");
            }
            if ((!args || args.vmGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmGroupName'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["companyId"] = args ? args.companyId : undefined;
            resourceInputs["planId"] = args ? args.planId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vmGroupName"] = args ? args.vmGroupName : undefined;
            resourceInputs["vms"] = args ? args.vms : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmGroup resources.
 */
export interface VmGroupState {
    /**
     * Specifies The ID of the hypervisor client.
     */
    clientId?: pulumi.Input<number>;
    /**
     * Specifies the company id to which the vm group should be associated with.
     */
    companyId?: pulumi.Input<number>;
    /**
     * Specifies The ID of the plan that you want to associate with the VM group.
     */
    planId?: pulumi.Input<number>;
    /**
     * Specifies The Tags that you want to back up in a VM group.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies The name of the VM group.
     */
    vmGroupName?: pulumi.Input<string>;
    /**
     * Specifies The VMs that you want to back up in a VM group.
     */
    vms?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VmGroup resource.
 */
export interface VmGroupArgs {
    /**
     * Specifies The ID of the hypervisor client.
     */
    clientId: pulumi.Input<number>;
    /**
     * Specifies the company id to which the vm group should be associated with.
     */
    companyId?: pulumi.Input<number>;
    /**
     * Specifies The ID of the plan that you want to associate with the VM group.
     */
    planId: pulumi.Input<number>;
    /**
     * Specifies The Tags that you want to back up in a VM group.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies The name of the VM group.
     */
    vmGroupName: pulumi.Input<string>;
    /**
     * Specifies The VMs that you want to back up in a VM group.
     */
    vms?: pulumi.Input<pulumi.Input<string>[]>;
}
