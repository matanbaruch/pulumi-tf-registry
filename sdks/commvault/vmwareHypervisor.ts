// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VmwareHypervisor extends pulumi.CustomResource {
    /**
     * Get an existing VmwareHypervisor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmwareHypervisorState, opts?: pulumi.CustomResourceOptions): VmwareHypervisor {
        return new VmwareHypervisor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/vmwareHypervisor:VmwareHypervisor';

    /**
     * Returns true if the given object is an instance of VmwareHypervisor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmwareHypervisor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmwareHypervisor.__pulumiType;
    }

    /**
     * Specifies The clients that have the VSA package installed and that act as proxy clients for hypervisors.
     */
    public readonly accessNodes!: pulumi.Output<string>;
    /**
     * Specifies the company id to which the Vmware Hypervisor should be associated with.
     */
    public readonly companyId!: pulumi.Output<number | undefined>;
    /**
     * Specifies The display name of the hypervisor.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Specifies The host name of the hypervisor.
     */
    public readonly hostName!: pulumi.Output<string>;
    /**
     * Specifies The password for the account.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Specifies The user name for the account.
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a VmwareHypervisor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmwareHypervisorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmwareHypervisorArgs | VmwareHypervisorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmwareHypervisorState | undefined;
            resourceInputs["accessNodes"] = state ? state.accessNodes : undefined;
            resourceInputs["companyId"] = state ? state.companyId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as VmwareHypervisorArgs | undefined;
            if ((!args || args.accessNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessNodes'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.hostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["accessNodes"] = args ? args.accessNodes : undefined;
            resourceInputs["companyId"] = args ? args.companyId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmwareHypervisor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmwareHypervisor resources.
 */
export interface VmwareHypervisorState {
    /**
     * Specifies The clients that have the VSA package installed and that act as proxy clients for hypervisors.
     */
    accessNodes?: pulumi.Input<string>;
    /**
     * Specifies the company id to which the Vmware Hypervisor should be associated with.
     */
    companyId?: pulumi.Input<number>;
    /**
     * Specifies The display name of the hypervisor.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Specifies The host name of the hypervisor.
     */
    hostName?: pulumi.Input<string>;
    /**
     * Specifies The password for the account.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies The user name for the account.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmwareHypervisor resource.
 */
export interface VmwareHypervisorArgs {
    /**
     * Specifies The clients that have the VSA package installed and that act as proxy clients for hypervisors.
     */
    accessNodes: pulumi.Input<string>;
    /**
     * Specifies the company id to which the Vmware Hypervisor should be associated with.
     */
    companyId?: pulumi.Input<number>;
    /**
     * Specifies The display name of the hypervisor.
     */
    displayName: pulumi.Input<string>;
    /**
     * Specifies The host name of the hypervisor.
     */
    hostName: pulumi.Input<string>;
    /**
     * Specifies The password for the account.
     */
    password: pulumi.Input<string>;
    /**
     * Specifies The user name for the account.
     */
    userName: pulumi.Input<string>;
}
