// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PlanServer extends pulumi.CustomResource {
    /**
     * Get an existing PlanServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlanServerState, opts?: pulumi.CustomResourceOptions): PlanServer {
        return new PlanServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/planServer:PlanServer';

    /**
     * Returns true if the given object is an instance of PlanServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlanServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlanServer.__pulumiType;
    }

    /**
     * Flag to enable overriding of plan. Plan cannot be overriden by default.
     */
    public readonly allowplanoverride!: pulumi.Output<string>;
    /**
     * This feature applies only to file system agents
     */
    public readonly backupcontents!: pulumi.Output<outputs.PlanServerBackupcontent[] | undefined>;
    /**
     * Primary Backup Destination Ids (which were created before plan creation). This is only considered when
     * backupDestinations array object is not defined.
     */
    public readonly backupdestinationids!: pulumi.Output<number[]>;
    /**
     * Backup destinations for the plan. Specify where you want to store your backup data.
     */
    public readonly backupdestinations!: pulumi.Output<outputs.PlanServerBackupdestination[] | undefined>;
    /**
     * This feature applies only to database agents
     */
    public readonly databaseoptions!: pulumi.Output<outputs.PlanServerDatabaseoption[] | undefined>;
    /**
     * flag to enable backup content association for applicable file system workload.
     */
    public readonly filesystemaddon!: pulumi.Output<string>;
    /**
     * This feature applies to derived plans when inherit mode is optional.Provides user to set entity preference between
     * parent and derived plan.
     */
    public readonly overrideinheritsettings!: pulumi.Output<outputs.PlanServerOverrideinheritsetting[] | undefined>;
    /**
     * To allow the derived plans that use this plan as the base plan to override the settings, property allowPlanOverride must
     * be true, and then select one of the options for Storage pool, RPO and backup Content.
     */
    public readonly overriderestrictions!: pulumi.Output<outputs.PlanServerOverriderestriction[] | undefined>;
    public readonly parentplans!: pulumi.Output<outputs.PlanServerParentplan[] | undefined>;
    /**
     * Name of the new plan
     */
    public readonly planname!: pulumi.Output<string>;
    public readonly regiontoconfigures!: pulumi.Output<outputs.PlanServerRegiontoconfigure[] | undefined>;
    /**
     * Recovery Point Objective (RPO) is the maximum amount of time that data can be lost during a service disruption. Your RPO
     * determines the frequency of your backup jobs.
     */
    public readonly rpos!: pulumi.Output<outputs.PlanServerRpo[] | undefined>;
    public readonly settings!: pulumi.Output<outputs.PlanServerSetting[] | undefined>;
    /**
     * This feature applies only to File System Agents
     */
    public readonly snapshotoptions!: pulumi.Output<outputs.PlanServerSnapshotoption[] | undefined>;
    public readonly workloads!: pulumi.Output<outputs.PlanServerWorkload[] | undefined>;

    /**
     * Create a PlanServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlanServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlanServerArgs | PlanServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlanServerState | undefined;
            resourceInputs["allowplanoverride"] = state ? state.allowplanoverride : undefined;
            resourceInputs["backupcontents"] = state ? state.backupcontents : undefined;
            resourceInputs["backupdestinationids"] = state ? state.backupdestinationids : undefined;
            resourceInputs["backupdestinations"] = state ? state.backupdestinations : undefined;
            resourceInputs["databaseoptions"] = state ? state.databaseoptions : undefined;
            resourceInputs["filesystemaddon"] = state ? state.filesystemaddon : undefined;
            resourceInputs["overrideinheritsettings"] = state ? state.overrideinheritsettings : undefined;
            resourceInputs["overriderestrictions"] = state ? state.overriderestrictions : undefined;
            resourceInputs["parentplans"] = state ? state.parentplans : undefined;
            resourceInputs["planname"] = state ? state.planname : undefined;
            resourceInputs["regiontoconfigures"] = state ? state.regiontoconfigures : undefined;
            resourceInputs["rpos"] = state ? state.rpos : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["snapshotoptions"] = state ? state.snapshotoptions : undefined;
            resourceInputs["workloads"] = state ? state.workloads : undefined;
        } else {
            const args = argsOrState as PlanServerArgs | undefined;
            if ((!args || args.planname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planname'");
            }
            resourceInputs["allowplanoverride"] = args ? args.allowplanoverride : undefined;
            resourceInputs["backupcontents"] = args ? args.backupcontents : undefined;
            resourceInputs["backupdestinationids"] = args ? args.backupdestinationids : undefined;
            resourceInputs["backupdestinations"] = args ? args.backupdestinations : undefined;
            resourceInputs["databaseoptions"] = args ? args.databaseoptions : undefined;
            resourceInputs["filesystemaddon"] = args ? args.filesystemaddon : undefined;
            resourceInputs["overrideinheritsettings"] = args ? args.overrideinheritsettings : undefined;
            resourceInputs["overriderestrictions"] = args ? args.overriderestrictions : undefined;
            resourceInputs["parentplans"] = args ? args.parentplans : undefined;
            resourceInputs["planname"] = args ? args.planname : undefined;
            resourceInputs["regiontoconfigures"] = args ? args.regiontoconfigures : undefined;
            resourceInputs["rpos"] = args ? args.rpos : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["snapshotoptions"] = args ? args.snapshotoptions : undefined;
            resourceInputs["workloads"] = args ? args.workloads : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlanServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlanServer resources.
 */
export interface PlanServerState {
    /**
     * Flag to enable overriding of plan. Plan cannot be overriden by default.
     */
    allowplanoverride?: pulumi.Input<string>;
    /**
     * This feature applies only to file system agents
     */
    backupcontents?: pulumi.Input<pulumi.Input<inputs.PlanServerBackupcontent>[]>;
    /**
     * Primary Backup Destination Ids (which were created before plan creation). This is only considered when
     * backupDestinations array object is not defined.
     */
    backupdestinationids?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Backup destinations for the plan. Specify where you want to store your backup data.
     */
    backupdestinations?: pulumi.Input<pulumi.Input<inputs.PlanServerBackupdestination>[]>;
    /**
     * This feature applies only to database agents
     */
    databaseoptions?: pulumi.Input<pulumi.Input<inputs.PlanServerDatabaseoption>[]>;
    /**
     * flag to enable backup content association for applicable file system workload.
     */
    filesystemaddon?: pulumi.Input<string>;
    /**
     * This feature applies to derived plans when inherit mode is optional.Provides user to set entity preference between
     * parent and derived plan.
     */
    overrideinheritsettings?: pulumi.Input<pulumi.Input<inputs.PlanServerOverrideinheritsetting>[]>;
    /**
     * To allow the derived plans that use this plan as the base plan to override the settings, property allowPlanOverride must
     * be true, and then select one of the options for Storage pool, RPO and backup Content.
     */
    overriderestrictions?: pulumi.Input<pulumi.Input<inputs.PlanServerOverriderestriction>[]>;
    parentplans?: pulumi.Input<pulumi.Input<inputs.PlanServerParentplan>[]>;
    /**
     * Name of the new plan
     */
    planname?: pulumi.Input<string>;
    regiontoconfigures?: pulumi.Input<pulumi.Input<inputs.PlanServerRegiontoconfigure>[]>;
    /**
     * Recovery Point Objective (RPO) is the maximum amount of time that data can be lost during a service disruption. Your RPO
     * determines the frequency of your backup jobs.
     */
    rpos?: pulumi.Input<pulumi.Input<inputs.PlanServerRpo>[]>;
    settings?: pulumi.Input<pulumi.Input<inputs.PlanServerSetting>[]>;
    /**
     * This feature applies only to File System Agents
     */
    snapshotoptions?: pulumi.Input<pulumi.Input<inputs.PlanServerSnapshotoption>[]>;
    workloads?: pulumi.Input<pulumi.Input<inputs.PlanServerWorkload>[]>;
}

/**
 * The set of arguments for constructing a PlanServer resource.
 */
export interface PlanServerArgs {
    /**
     * Flag to enable overriding of plan. Plan cannot be overriden by default.
     */
    allowplanoverride?: pulumi.Input<string>;
    /**
     * This feature applies only to file system agents
     */
    backupcontents?: pulumi.Input<pulumi.Input<inputs.PlanServerBackupcontent>[]>;
    /**
     * Primary Backup Destination Ids (which were created before plan creation). This is only considered when
     * backupDestinations array object is not defined.
     */
    backupdestinationids?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Backup destinations for the plan. Specify where you want to store your backup data.
     */
    backupdestinations?: pulumi.Input<pulumi.Input<inputs.PlanServerBackupdestination>[]>;
    /**
     * This feature applies only to database agents
     */
    databaseoptions?: pulumi.Input<pulumi.Input<inputs.PlanServerDatabaseoption>[]>;
    /**
     * flag to enable backup content association for applicable file system workload.
     */
    filesystemaddon?: pulumi.Input<string>;
    /**
     * This feature applies to derived plans when inherit mode is optional.Provides user to set entity preference between
     * parent and derived plan.
     */
    overrideinheritsettings?: pulumi.Input<pulumi.Input<inputs.PlanServerOverrideinheritsetting>[]>;
    /**
     * To allow the derived plans that use this plan as the base plan to override the settings, property allowPlanOverride must
     * be true, and then select one of the options for Storage pool, RPO and backup Content.
     */
    overriderestrictions?: pulumi.Input<pulumi.Input<inputs.PlanServerOverriderestriction>[]>;
    parentplans?: pulumi.Input<pulumi.Input<inputs.PlanServerParentplan>[]>;
    /**
     * Name of the new plan
     */
    planname: pulumi.Input<string>;
    regiontoconfigures?: pulumi.Input<pulumi.Input<inputs.PlanServerRegiontoconfigure>[]>;
    /**
     * Recovery Point Objective (RPO) is the maximum amount of time that data can be lost during a service disruption. Your RPO
     * determines the frequency of your backup jobs.
     */
    rpos?: pulumi.Input<pulumi.Input<inputs.PlanServerRpo>[]>;
    settings?: pulumi.Input<pulumi.Input<inputs.PlanServerSetting>[]>;
    /**
     * This feature applies only to File System Agents
     */
    snapshotoptions?: pulumi.Input<pulumi.Input<inputs.PlanServerSnapshotoption>[]>;
    workloads?: pulumi.Input<pulumi.Input<inputs.PlanServerWorkload>[]>;
}
