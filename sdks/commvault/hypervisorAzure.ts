// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HypervisorAzure extends pulumi.CustomResource {
    /**
     * Get an existing HypervisorAzure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HypervisorAzureState, opts?: pulumi.CustomResourceOptions): HypervisorAzure {
        return new HypervisorAzure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/hypervisorAzure:HypervisorAzure';

    /**
     * Returns true if the given object is an instance of HypervisorAzure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HypervisorAzure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HypervisorAzure.__pulumiType;
    }

    public readonly accessnodes!: pulumi.Output<outputs.HypervisorAzureAccessnode[] | undefined>;
    public readonly activitycontrols!: pulumi.Output<outputs.HypervisorAzureActivitycontrol[] | undefined>;
    /**
     * Application id of Azure login Application
     */
    public readonly applicationid!: pulumi.Output<string>;
    /**
     * Application Password of Azure login Application
     */
    public readonly applicationpassword!: pulumi.Output<string>;
    public readonly credentials!: pulumi.Output<outputs.HypervisorAzureCredential[] | undefined>;
    /**
     * The name of the hypervisor that has to be changed
     */
    public readonly displayname!: pulumi.Output<string>;
    /**
     * ETCD Protection options for a cluster
     */
    public readonly etcdprotections!: pulumi.Output<outputs.HypervisorAzureEtcdprotection[] | undefined>;
    public readonly fbrunixmediaagents!: pulumi.Output<outputs.HypervisorAzureFbrunixmediaagent[] | undefined>;
    /**
     * [Azure_V2]
     */
    public readonly hypervisortype!: pulumi.Output<string>;
    /**
     * The name of the hypervisor group being created
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Application Password of Azure login Application
     */
    public readonly password!: pulumi.Output<string>;
    public readonly securities!: pulumi.Output<outputs.HypervisorAzureSecurity[] | undefined>;
    /**
     * Client Name to Update
     */
    public readonly servername!: pulumi.Output<string>;
    public readonly settings!: pulumi.Output<outputs.HypervisorAzureSetting[] | undefined>;
    /**
     * if credential validation has to be skipped.
     */
    public readonly skipcredentialvalidation!: pulumi.Output<string>;
    /**
     * subscription id of Azure
     */
    public readonly subscriptionid!: pulumi.Output<string>;
    /**
     * Tenant id of Azure login Application
     */
    public readonly tenantid!: pulumi.Output<string>;
    public readonly usemanagedidentity!: pulumi.Output<string>;
    /**
     * Application id of Azure login Application
     */
    public readonly username!: pulumi.Output<string>;
    public readonly workloadregions!: pulumi.Output<outputs.HypervisorAzureWorkloadregion[] | undefined>;

    /**
     * Create a HypervisorAzure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HypervisorAzureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HypervisorAzureArgs | HypervisorAzureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HypervisorAzureState | undefined;
            resourceInputs["accessnodes"] = state ? state.accessnodes : undefined;
            resourceInputs["activitycontrols"] = state ? state.activitycontrols : undefined;
            resourceInputs["applicationid"] = state ? state.applicationid : undefined;
            resourceInputs["applicationpassword"] = state ? state.applicationpassword : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["displayname"] = state ? state.displayname : undefined;
            resourceInputs["etcdprotections"] = state ? state.etcdprotections : undefined;
            resourceInputs["fbrunixmediaagents"] = state ? state.fbrunixmediaagents : undefined;
            resourceInputs["hypervisortype"] = state ? state.hypervisortype : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["securities"] = state ? state.securities : undefined;
            resourceInputs["servername"] = state ? state.servername : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["skipcredentialvalidation"] = state ? state.skipcredentialvalidation : undefined;
            resourceInputs["subscriptionid"] = state ? state.subscriptionid : undefined;
            resourceInputs["tenantid"] = state ? state.tenantid : undefined;
            resourceInputs["usemanagedidentity"] = state ? state.usemanagedidentity : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["workloadregions"] = state ? state.workloadregions : undefined;
        } else {
            const args = argsOrState as HypervisorAzureArgs | undefined;
            if ((!args || args.subscriptionid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionid'");
            }
            if ((!args || args.tenantid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantid'");
            }
            resourceInputs["accessnodes"] = args ? args.accessnodes : undefined;
            resourceInputs["activitycontrols"] = args ? args.activitycontrols : undefined;
            resourceInputs["applicationid"] = args ? args.applicationid : undefined;
            resourceInputs["applicationpassword"] = args ? args.applicationpassword : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["displayname"] = args ? args.displayname : undefined;
            resourceInputs["etcdprotections"] = args ? args.etcdprotections : undefined;
            resourceInputs["fbrunixmediaagents"] = args ? args.fbrunixmediaagents : undefined;
            resourceInputs["hypervisortype"] = args ? args.hypervisortype : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["securities"] = args ? args.securities : undefined;
            resourceInputs["servername"] = args ? args.servername : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["skipcredentialvalidation"] = args ? args.skipcredentialvalidation : undefined;
            resourceInputs["subscriptionid"] = args ? args.subscriptionid : undefined;
            resourceInputs["tenantid"] = args ? args.tenantid : undefined;
            resourceInputs["usemanagedidentity"] = args ? args.usemanagedidentity : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["workloadregions"] = args ? args.workloadregions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HypervisorAzure.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HypervisorAzure resources.
 */
export interface HypervisorAzureState {
    accessnodes?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureAccessnode>[]>;
    activitycontrols?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureActivitycontrol>[]>;
    /**
     * Application id of Azure login Application
     */
    applicationid?: pulumi.Input<string>;
    /**
     * Application Password of Azure login Application
     */
    applicationpassword?: pulumi.Input<string>;
    credentials?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureCredential>[]>;
    /**
     * The name of the hypervisor that has to be changed
     */
    displayname?: pulumi.Input<string>;
    /**
     * ETCD Protection options for a cluster
     */
    etcdprotections?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureEtcdprotection>[]>;
    fbrunixmediaagents?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureFbrunixmediaagent>[]>;
    /**
     * [Azure_V2]
     */
    hypervisortype?: pulumi.Input<string>;
    /**
     * The name of the hypervisor group being created
     */
    name?: pulumi.Input<string>;
    /**
     * Application Password of Azure login Application
     */
    password?: pulumi.Input<string>;
    securities?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureSecurity>[]>;
    /**
     * Client Name to Update
     */
    servername?: pulumi.Input<string>;
    settings?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureSetting>[]>;
    /**
     * if credential validation has to be skipped.
     */
    skipcredentialvalidation?: pulumi.Input<string>;
    /**
     * subscription id of Azure
     */
    subscriptionid?: pulumi.Input<string>;
    /**
     * Tenant id of Azure login Application
     */
    tenantid?: pulumi.Input<string>;
    usemanagedidentity?: pulumi.Input<string>;
    /**
     * Application id of Azure login Application
     */
    username?: pulumi.Input<string>;
    workloadregions?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureWorkloadregion>[]>;
}

/**
 * The set of arguments for constructing a HypervisorAzure resource.
 */
export interface HypervisorAzureArgs {
    accessnodes?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureAccessnode>[]>;
    activitycontrols?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureActivitycontrol>[]>;
    /**
     * Application id of Azure login Application
     */
    applicationid?: pulumi.Input<string>;
    /**
     * Application Password of Azure login Application
     */
    applicationpassword?: pulumi.Input<string>;
    credentials?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureCredential>[]>;
    /**
     * The name of the hypervisor that has to be changed
     */
    displayname?: pulumi.Input<string>;
    /**
     * ETCD Protection options for a cluster
     */
    etcdprotections?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureEtcdprotection>[]>;
    fbrunixmediaagents?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureFbrunixmediaagent>[]>;
    /**
     * [Azure_V2]
     */
    hypervisortype?: pulumi.Input<string>;
    /**
     * The name of the hypervisor group being created
     */
    name?: pulumi.Input<string>;
    /**
     * Application Password of Azure login Application
     */
    password?: pulumi.Input<string>;
    securities?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureSecurity>[]>;
    /**
     * Client Name to Update
     */
    servername?: pulumi.Input<string>;
    settings?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureSetting>[]>;
    /**
     * if credential validation has to be skipped.
     */
    skipcredentialvalidation?: pulumi.Input<string>;
    /**
     * subscription id of Azure
     */
    subscriptionid: pulumi.Input<string>;
    /**
     * Tenant id of Azure login Application
     */
    tenantid: pulumi.Input<string>;
    usemanagedidentity?: pulumi.Input<string>;
    /**
     * Application id of Azure login Application
     */
    username?: pulumi.Input<string>;
    workloadregions?: pulumi.Input<pulumi.Input<inputs.HypervisorAzureWorkloadregion>[]>;
}
