// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageCloudAzure extends pulumi.CustomResource {
    /**
     * Get an existing StorageCloudAzure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageCloudAzureState, opts?: pulumi.CustomResourceOptions): StorageCloudAzure {
        return new StorageCloudAzure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/storageCloudAzure:StorageCloudAzure';

    /**
     * Returns true if the given object is an instance of StorageCloudAzure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageCloudAzure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageCloudAzure.__pulumiType;
    }

    /**
     * Only for IAM VM and IAM AD
     */
    public readonly accountname!: pulumi.Output<string>;
    /**
     * Authentication type for the cloud storage server. Only Access & Account Name and IAM AD require credentials. [Access and
     * secret keys, IAM VM role assignment, IAM AD application role assignment (Credential Manager)]
     */
    public readonly authentication!: pulumi.Output<string>;
    /**
     * Name of container
     */
    public readonly container!: pulumi.Output<string>;
    public readonly credentials!: pulumi.Output<outputs.StorageCloudAzureCredential[] | undefined>;
    /**
     * A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to
     * save/store data by eliminating duplicate blocks of data during backups
     */
    public readonly deduplicationdblocations!: pulumi.Output<outputs.StorageCloudAzureDeduplicationdblocation[] | undefined>;
    /**
     * Different ways in which data can be encrypted.
     */
    public readonly encryptions!: pulumi.Output<outputs.StorageCloudAzureEncryption[] | undefined>;
    public readonly mediaagents!: pulumi.Output<outputs.StorageCloudAzureMediaagent[]>;
    /**
     * Name of the cloud storage library
     */
    public readonly name!: pulumi.Output<string>;
    public readonly securities!: pulumi.Output<outputs.StorageCloudAzureSecurity[] | undefined>;
    /**
     * IP address or fully qualified domain name or URL for the cloud library based on cloud vendor
     */
    public readonly servicehost!: pulumi.Output<string>;
    /**
     * Appropriate storage class for your account [Container's default, Hot, Cool, Archive, Hot/Archive (Combined Storage
     * Tiers), Cool/Archive (Combined Storage Tiers)]
     */
    public readonly storageclass!: pulumi.Output<string>;
    /**
     * Enables or disables deduplication on the storage
     */
    public readonly usededuplication!: pulumi.Output<string>;

    /**
     * Create a StorageCloudAzure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageCloudAzureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageCloudAzureArgs | StorageCloudAzureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageCloudAzureState | undefined;
            resourceInputs["accountname"] = state ? state.accountname : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["container"] = state ? state.container : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["deduplicationdblocations"] = state ? state.deduplicationdblocations : undefined;
            resourceInputs["encryptions"] = state ? state.encryptions : undefined;
            resourceInputs["mediaagents"] = state ? state.mediaagents : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["securities"] = state ? state.securities : undefined;
            resourceInputs["servicehost"] = state ? state.servicehost : undefined;
            resourceInputs["storageclass"] = state ? state.storageclass : undefined;
            resourceInputs["usededuplication"] = state ? state.usededuplication : undefined;
        } else {
            const args = argsOrState as StorageCloudAzureArgs | undefined;
            if ((!args || args.authentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authentication'");
            }
            if ((!args || args.container === undefined) && !opts.urn) {
                throw new Error("Missing required property 'container'");
            }
            if ((!args || args.mediaagents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaagents'");
            }
            if ((!args || args.storageclass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageclass'");
            }
            resourceInputs["accountname"] = args ? args.accountname : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["deduplicationdblocations"] = args ? args.deduplicationdblocations : undefined;
            resourceInputs["encryptions"] = args ? args.encryptions : undefined;
            resourceInputs["mediaagents"] = args ? args.mediaagents : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securities"] = args ? args.securities : undefined;
            resourceInputs["servicehost"] = args ? args.servicehost : undefined;
            resourceInputs["storageclass"] = args ? args.storageclass : undefined;
            resourceInputs["usededuplication"] = args ? args.usededuplication : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageCloudAzure.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageCloudAzure resources.
 */
export interface StorageCloudAzureState {
    /**
     * Only for IAM VM and IAM AD
     */
    accountname?: pulumi.Input<string>;
    /**
     * Authentication type for the cloud storage server. Only Access & Account Name and IAM AD require credentials. [Access and
     * secret keys, IAM VM role assignment, IAM AD application role assignment (Credential Manager)]
     */
    authentication?: pulumi.Input<string>;
    /**
     * Name of container
     */
    container?: pulumi.Input<string>;
    credentials?: pulumi.Input<pulumi.Input<inputs.StorageCloudAzureCredential>[]>;
    /**
     * A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to
     * save/store data by eliminating duplicate blocks of data during backups
     */
    deduplicationdblocations?: pulumi.Input<pulumi.Input<inputs.StorageCloudAzureDeduplicationdblocation>[]>;
    /**
     * Different ways in which data can be encrypted.
     */
    encryptions?: pulumi.Input<pulumi.Input<inputs.StorageCloudAzureEncryption>[]>;
    mediaagents?: pulumi.Input<pulumi.Input<inputs.StorageCloudAzureMediaagent>[]>;
    /**
     * Name of the cloud storage library
     */
    name?: pulumi.Input<string>;
    securities?: pulumi.Input<pulumi.Input<inputs.StorageCloudAzureSecurity>[]>;
    /**
     * IP address or fully qualified domain name or URL for the cloud library based on cloud vendor
     */
    servicehost?: pulumi.Input<string>;
    /**
     * Appropriate storage class for your account [Container's default, Hot, Cool, Archive, Hot/Archive (Combined Storage
     * Tiers), Cool/Archive (Combined Storage Tiers)]
     */
    storageclass?: pulumi.Input<string>;
    /**
     * Enables or disables deduplication on the storage
     */
    usededuplication?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageCloudAzure resource.
 */
export interface StorageCloudAzureArgs {
    /**
     * Only for IAM VM and IAM AD
     */
    accountname?: pulumi.Input<string>;
    /**
     * Authentication type for the cloud storage server. Only Access & Account Name and IAM AD require credentials. [Access and
     * secret keys, IAM VM role assignment, IAM AD application role assignment (Credential Manager)]
     */
    authentication: pulumi.Input<string>;
    /**
     * Name of container
     */
    container: pulumi.Input<string>;
    credentials?: pulumi.Input<pulumi.Input<inputs.StorageCloudAzureCredential>[]>;
    /**
     * A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to
     * save/store data by eliminating duplicate blocks of data during backups
     */
    deduplicationdblocations?: pulumi.Input<pulumi.Input<inputs.StorageCloudAzureDeduplicationdblocation>[]>;
    /**
     * Different ways in which data can be encrypted.
     */
    encryptions?: pulumi.Input<pulumi.Input<inputs.StorageCloudAzureEncryption>[]>;
    mediaagents: pulumi.Input<pulumi.Input<inputs.StorageCloudAzureMediaagent>[]>;
    /**
     * Name of the cloud storage library
     */
    name?: pulumi.Input<string>;
    securities?: pulumi.Input<pulumi.Input<inputs.StorageCloudAzureSecurity>[]>;
    /**
     * IP address or fully qualified domain name or URL for the cloud library based on cloud vendor
     */
    servicehost?: pulumi.Input<string>;
    /**
     * Appropriate storage class for your account [Container's default, Hot, Cool, Archive, Hot/Archive (Combined Storage
     * Tiers), Cool/Archive (Combined Storage Tiers)]
     */
    storageclass: pulumi.Input<string>;
    /**
     * Enables or disables deduplication on the storage
     */
    usededuplication?: pulumi.Input<string>;
}
