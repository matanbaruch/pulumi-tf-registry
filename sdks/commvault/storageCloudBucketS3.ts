// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageCloudBucketS3 extends pulumi.CustomResource {
    /**
     * Get an existing StorageCloudBucketS3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageCloudBucketS3State, opts?: pulumi.CustomResourceOptions): StorageCloudBucketS3 {
        return new StorageCloudBucketS3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/storageCloudBucketS3:StorageCloudBucketS3';

    /**
     * Returns true if the given object is an instance of StorageCloudBucketS3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageCloudBucketS3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageCloudBucketS3.__pulumiType;
    }

    /**
     * The access type for the access path can be either read (writing to path not allowed) or read and write (writing to path
     * allowed). [READ_AND_WRITE, READ]
     */
    public readonly access!: pulumi.Output<string>;
    /**
     * Needed for AWS STS assume role and AWS STS assume role with IAM role policy
     */
    public readonly arnrole!: pulumi.Output<string>;
    /**
     * Authentication type for the cloud storage server [Access and secret keys, AWS IAM role policy, AWS STS assume role, AWS
     * STS assume role with IAM role policy]
     */
    public readonly authentication!: pulumi.Output<string>;
    /**
     * Name of bucket
     */
    public readonly bucket!: pulumi.Output<string>;
    public readonly cloudstorageid!: pulumi.Output<number>;
    public readonly configurations!: pulumi.Output<outputs.StorageCloudBucketS3Configuration[] | undefined>;
    public readonly credentials!: pulumi.Output<outputs.StorageCloudBucketS3Credential[] | undefined>;
    /**
     * Enable/Disable access of bucket to a media Agent
     */
    public readonly enable!: pulumi.Output<string>;
    public readonly mediaagents!: pulumi.Output<outputs.StorageCloudBucketS3Mediaagent[]>;
    /**
     * Password for proxy configuration (Should be in Base64 format)
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Port for proxy configuration
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * If the MediaAgent accesses the mount path using a proxy then proxy server address needs to be provided. If you want to
     * remove proxy information, pass empty string in proxyAddress.
     */
    public readonly proxyaddress!: pulumi.Output<string>;
    /**
     * IP address or fully qualified domain name or URL for the cloud library based on cloud vendor
     */
    public readonly servicehost!: pulumi.Output<string>;
    /**
     * Appropriate storage class for your account [Standard, Reduced Redundancy Storage, Standard - Infrequent access, One zone
     * - Infrequent access, Intelligent tiering, S3 Glacier, Standard/Glacier (Combined Storage Tiers), Standard-IA/Glacier
     * (Combined Storage Tiers), One Zone-IA/Glacier (Combined Storage Tiers), Intelligent-Tiering/Glacier (Combined Storage
     * Tiers), S3 Glacier Deep Archive, Standard/Deep Archive (Combined Storage Tiers), Standard-IA/Deep Archive (Combined
     * Storage Tiers), One Zone-IA/Deep Archive (Combined Storage Tiers), Intelligent-Tiering/Deep Archive (Combined Storage
     * Tiers)]
     */
    public readonly storageclass!: pulumi.Output<string>;
    /**
     * Username for proxy configuration
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a StorageCloudBucketS3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageCloudBucketS3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageCloudBucketS3Args | StorageCloudBucketS3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageCloudBucketS3State | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["arnrole"] = state ? state.arnrole : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["cloudstorageid"] = state ? state.cloudstorageid : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["mediaagents"] = state ? state.mediaagents : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["proxyaddress"] = state ? state.proxyaddress : undefined;
            resourceInputs["servicehost"] = state ? state.servicehost : undefined;
            resourceInputs["storageclass"] = state ? state.storageclass : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as StorageCloudBucketS3Args | undefined;
            if ((!args || args.authentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authentication'");
            }
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.cloudstorageid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudstorageid'");
            }
            if ((!args || args.mediaagents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaagents'");
            }
            if ((!args || args.servicehost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicehost'");
            }
            if ((!args || args.storageclass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageclass'");
            }
            resourceInputs["access"] = args ? args.access : undefined;
            resourceInputs["arnrole"] = args ? args.arnrole : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["cloudstorageid"] = args ? args.cloudstorageid : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["mediaagents"] = args ? args.mediaagents : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["proxyaddress"] = args ? args.proxyaddress : undefined;
            resourceInputs["servicehost"] = args ? args.servicehost : undefined;
            resourceInputs["storageclass"] = args ? args.storageclass : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageCloudBucketS3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageCloudBucketS3 resources.
 */
export interface StorageCloudBucketS3State {
    /**
     * The access type for the access path can be either read (writing to path not allowed) or read and write (writing to path
     * allowed). [READ_AND_WRITE, READ]
     */
    access?: pulumi.Input<string>;
    /**
     * Needed for AWS STS assume role and AWS STS assume role with IAM role policy
     */
    arnrole?: pulumi.Input<string>;
    /**
     * Authentication type for the cloud storage server [Access and secret keys, AWS IAM role policy, AWS STS assume role, AWS
     * STS assume role with IAM role policy]
     */
    authentication?: pulumi.Input<string>;
    /**
     * Name of bucket
     */
    bucket?: pulumi.Input<string>;
    cloudstorageid?: pulumi.Input<number>;
    configurations?: pulumi.Input<pulumi.Input<inputs.StorageCloudBucketS3Configuration>[]>;
    credentials?: pulumi.Input<pulumi.Input<inputs.StorageCloudBucketS3Credential>[]>;
    /**
     * Enable/Disable access of bucket to a media Agent
     */
    enable?: pulumi.Input<string>;
    mediaagents?: pulumi.Input<pulumi.Input<inputs.StorageCloudBucketS3Mediaagent>[]>;
    /**
     * Password for proxy configuration (Should be in Base64 format)
     */
    password?: pulumi.Input<string>;
    /**
     * Port for proxy configuration
     */
    port?: pulumi.Input<number>;
    /**
     * If the MediaAgent accesses the mount path using a proxy then proxy server address needs to be provided. If you want to
     * remove proxy information, pass empty string in proxyAddress.
     */
    proxyaddress?: pulumi.Input<string>;
    /**
     * IP address or fully qualified domain name or URL for the cloud library based on cloud vendor
     */
    servicehost?: pulumi.Input<string>;
    /**
     * Appropriate storage class for your account [Standard, Reduced Redundancy Storage, Standard - Infrequent access, One zone
     * - Infrequent access, Intelligent tiering, S3 Glacier, Standard/Glacier (Combined Storage Tiers), Standard-IA/Glacier
     * (Combined Storage Tiers), One Zone-IA/Glacier (Combined Storage Tiers), Intelligent-Tiering/Glacier (Combined Storage
     * Tiers), S3 Glacier Deep Archive, Standard/Deep Archive (Combined Storage Tiers), Standard-IA/Deep Archive (Combined
     * Storage Tiers), One Zone-IA/Deep Archive (Combined Storage Tiers), Intelligent-Tiering/Deep Archive (Combined Storage
     * Tiers)]
     */
    storageclass?: pulumi.Input<string>;
    /**
     * Username for proxy configuration
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageCloudBucketS3 resource.
 */
export interface StorageCloudBucketS3Args {
    /**
     * The access type for the access path can be either read (writing to path not allowed) or read and write (writing to path
     * allowed). [READ_AND_WRITE, READ]
     */
    access?: pulumi.Input<string>;
    /**
     * Needed for AWS STS assume role and AWS STS assume role with IAM role policy
     */
    arnrole?: pulumi.Input<string>;
    /**
     * Authentication type for the cloud storage server [Access and secret keys, AWS IAM role policy, AWS STS assume role, AWS
     * STS assume role with IAM role policy]
     */
    authentication: pulumi.Input<string>;
    /**
     * Name of bucket
     */
    bucket: pulumi.Input<string>;
    cloudstorageid: pulumi.Input<number>;
    configurations?: pulumi.Input<pulumi.Input<inputs.StorageCloudBucketS3Configuration>[]>;
    credentials?: pulumi.Input<pulumi.Input<inputs.StorageCloudBucketS3Credential>[]>;
    /**
     * Enable/Disable access of bucket to a media Agent
     */
    enable?: pulumi.Input<string>;
    mediaagents: pulumi.Input<pulumi.Input<inputs.StorageCloudBucketS3Mediaagent>[]>;
    /**
     * Password for proxy configuration (Should be in Base64 format)
     */
    password?: pulumi.Input<string>;
    /**
     * Port for proxy configuration
     */
    port?: pulumi.Input<number>;
    /**
     * If the MediaAgent accesses the mount path using a proxy then proxy server address needs to be provided. If you want to
     * remove proxy information, pass empty string in proxyAddress.
     */
    proxyaddress?: pulumi.Input<string>;
    /**
     * IP address or fully qualified domain name or URL for the cloud library based on cloud vendor
     */
    servicehost: pulumi.Input<string>;
    /**
     * Appropriate storage class for your account [Standard, Reduced Redundancy Storage, Standard - Infrequent access, One zone
     * - Infrequent access, Intelligent tiering, S3 Glacier, Standard/Glacier (Combined Storage Tiers), Standard-IA/Glacier
     * (Combined Storage Tiers), One Zone-IA/Glacier (Combined Storage Tiers), Intelligent-Tiering/Glacier (Combined Storage
     * Tiers), S3 Glacier Deep Archive, Standard/Deep Archive (Combined Storage Tiers), Standard-IA/Deep Archive (Combined
     * Storage Tiers), One Zone-IA/Deep Archive (Combined Storage Tiers), Intelligent-Tiering/Deep Archive (Combined Storage
     * Tiers)]
     */
    storageclass: pulumi.Input<string>;
    /**
     * Username for proxy configuration
     */
    username?: pulumi.Input<string>;
}
