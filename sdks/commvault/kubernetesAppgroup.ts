// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesAppgroup extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesAppgroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesAppgroupState, opts?: pulumi.CustomResourceOptions): KubernetesAppgroup {
        return new KubernetesAppgroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/kubernetesAppgroup:KubernetesAppgroup';

    /**
     * Returns true if the given object is an instance of KubernetesAppgroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesAppgroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesAppgroup.__pulumiType;
    }

    public readonly activitycontrols!: pulumi.Output<outputs.KubernetesAppgroupActivitycontrol[] | undefined>;
    public readonly clusters!: pulumi.Output<outputs.KubernetesAppgroupCluster[] | undefined>;
    /**
     * Item describing the content for Application Group
     */
    public readonly contents!: pulumi.Output<outputs.KubernetesAppgroupContent[] | undefined>;
    public readonly filters!: pulumi.Output<outputs.KubernetesAppgroupFilter[] | undefined>;
    /**
     * Specify new name to rename an Application Group
     */
    public readonly name!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<outputs.KubernetesAppgroupOption[] | undefined>;
    public readonly plans!: pulumi.Output<outputs.KubernetesAppgroupPlan[] | undefined>;
    public readonly tags!: pulumi.Output<outputs.KubernetesAppgroupTag[] | undefined>;
    public readonly timezones!: pulumi.Output<outputs.KubernetesAppgroupTimezone[] | undefined>;

    /**
     * Create a KubernetesAppgroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KubernetesAppgroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesAppgroupArgs | KubernetesAppgroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesAppgroupState | undefined;
            resourceInputs["activitycontrols"] = state ? state.activitycontrols : undefined;
            resourceInputs["clusters"] = state ? state.clusters : undefined;
            resourceInputs["contents"] = state ? state.contents : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["plans"] = state ? state.plans : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timezones"] = state ? state.timezones : undefined;
        } else {
            const args = argsOrState as KubernetesAppgroupArgs | undefined;
            resourceInputs["activitycontrols"] = args ? args.activitycontrols : undefined;
            resourceInputs["clusters"] = args ? args.clusters : undefined;
            resourceInputs["contents"] = args ? args.contents : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["plans"] = args ? args.plans : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timezones"] = args ? args.timezones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesAppgroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesAppgroup resources.
 */
export interface KubernetesAppgroupState {
    activitycontrols?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupActivitycontrol>[]>;
    clusters?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupCluster>[]>;
    /**
     * Item describing the content for Application Group
     */
    contents?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupContent>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupFilter>[]>;
    /**
     * Specify new name to rename an Application Group
     */
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupOption>[]>;
    plans?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupPlan>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupTag>[]>;
    timezones?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupTimezone>[]>;
}

/**
 * The set of arguments for constructing a KubernetesAppgroup resource.
 */
export interface KubernetesAppgroupArgs {
    activitycontrols?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupActivitycontrol>[]>;
    clusters?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupCluster>[]>;
    /**
     * Item describing the content for Application Group
     */
    contents?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupContent>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupFilter>[]>;
    /**
     * Specify new name to rename an Application Group
     */
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupOption>[]>;
    plans?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupPlan>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupTag>[]>;
    timezones?: pulumi.Input<pulumi.Input<inputs.KubernetesAppgroupTimezone>[]>;
}
