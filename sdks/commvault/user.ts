// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Specifies the company id for which the created user will be associated with.
     */
    public readonly companyId!: pulumi.Output<number | undefined>;
    /**
     * Specifies The description of the user account.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies The email address of the user.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Specifies The first, middle, and last names of the user.
     */
    public readonly fullName!: pulumi.Output<string | undefined>;
    /**
     * Spcifies the new name for the user
     */
    public readonly newName!: pulumi.Output<string | undefined>;
    /**
     * Specifies The password for the account.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Specifies The user name for the account.
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["companyId"] = state ? state.companyId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["newName"] = state ? state.newName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["companyId"] = args ? args.companyId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["fullName"] = args ? args.fullName : undefined;
            resourceInputs["newName"] = args ? args.newName : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Specifies the company id for which the created user will be associated with.
     */
    companyId?: pulumi.Input<number>;
    /**
     * Specifies The description of the user account.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies The email address of the user.
     */
    email?: pulumi.Input<string>;
    /**
     * Specifies The first, middle, and last names of the user.
     */
    fullName?: pulumi.Input<string>;
    /**
     * Spcifies the new name for the user
     */
    newName?: pulumi.Input<string>;
    /**
     * Specifies The password for the account.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies The user name for the account.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Specifies the company id for which the created user will be associated with.
     */
    companyId?: pulumi.Input<number>;
    /**
     * Specifies The description of the user account.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies The email address of the user.
     */
    email: pulumi.Input<string>;
    /**
     * Specifies The first, middle, and last names of the user.
     */
    fullName?: pulumi.Input<string>;
    /**
     * Spcifies the new name for the user
     */
    newName?: pulumi.Input<string>;
    /**
     * Specifies The password for the account.
     */
    password: pulumi.Input<string>;
    /**
     * Specifies The user name for the account.
     */
    userName: pulumi.Input<string>;
}
