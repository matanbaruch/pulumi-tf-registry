// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageDisk extends pulumi.CustomResource {
    /**
     * Get an existing StorageDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageDiskState, opts?: pulumi.CustomResourceOptions): StorageDisk {
        return new StorageDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/storageDisk:StorageDisk';

    /**
     * Returns true if the given object is an instance of StorageDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageDisk.__pulumiType;
    }

    /**
     * Different ways in which data can be encrypted.
     */
    public readonly dataencryptions!: pulumi.Output<outputs.StorageDiskDataencryption[] | undefined>;
    /**
     * A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to
     * save/store data by eliminating duplicate blocks of data during backups.
     */
    public readonly deduplicationdbstorages!: pulumi.Output<outputs.StorageDiskDeduplicationdbstorage[] | undefined>;
    /**
     * enables or disables deduplication
     */
    public readonly enablededuplication!: pulumi.Output<string>;
    /**
     * Name of the Disk Storage to be created.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly securities!: pulumi.Output<outputs.StorageDiskSecurity[] | undefined>;
    /**
     * A list of backup locations can be provided for the storage pool being created.
     */
    public readonly storages!: pulumi.Output<outputs.StorageDiskStorage[]>;

    /**
     * Create a StorageDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageDiskArgs | StorageDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageDiskState | undefined;
            resourceInputs["dataencryptions"] = state ? state.dataencryptions : undefined;
            resourceInputs["deduplicationdbstorages"] = state ? state.deduplicationdbstorages : undefined;
            resourceInputs["enablededuplication"] = state ? state.enablededuplication : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["securities"] = state ? state.securities : undefined;
            resourceInputs["storages"] = state ? state.storages : undefined;
        } else {
            const args = argsOrState as StorageDiskArgs | undefined;
            if ((!args || args.enablededuplication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enablededuplication'");
            }
            if ((!args || args.storages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storages'");
            }
            resourceInputs["dataencryptions"] = args ? args.dataencryptions : undefined;
            resourceInputs["deduplicationdbstorages"] = args ? args.deduplicationdbstorages : undefined;
            resourceInputs["enablededuplication"] = args ? args.enablededuplication : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securities"] = args ? args.securities : undefined;
            resourceInputs["storages"] = args ? args.storages : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageDisk resources.
 */
export interface StorageDiskState {
    /**
     * Different ways in which data can be encrypted.
     */
    dataencryptions?: pulumi.Input<pulumi.Input<inputs.StorageDiskDataencryption>[]>;
    /**
     * A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to
     * save/store data by eliminating duplicate blocks of data during backups.
     */
    deduplicationdbstorages?: pulumi.Input<pulumi.Input<inputs.StorageDiskDeduplicationdbstorage>[]>;
    /**
     * enables or disables deduplication
     */
    enablededuplication?: pulumi.Input<string>;
    /**
     * Name of the Disk Storage to be created.
     */
    name?: pulumi.Input<string>;
    securities?: pulumi.Input<pulumi.Input<inputs.StorageDiskSecurity>[]>;
    /**
     * A list of backup locations can be provided for the storage pool being created.
     */
    storages?: pulumi.Input<pulumi.Input<inputs.StorageDiskStorage>[]>;
}

/**
 * The set of arguments for constructing a StorageDisk resource.
 */
export interface StorageDiskArgs {
    /**
     * Different ways in which data can be encrypted.
     */
    dataencryptions?: pulumi.Input<pulumi.Input<inputs.StorageDiskDataencryption>[]>;
    /**
     * A list of dedupe locations can be provided for the storage pool being created. This provides an efficient way to
     * save/store data by eliminating duplicate blocks of data during backups.
     */
    deduplicationdbstorages?: pulumi.Input<pulumi.Input<inputs.StorageDiskDeduplicationdbstorage>[]>;
    /**
     * enables or disables deduplication
     */
    enablededuplication: pulumi.Input<string>;
    /**
     * Name of the Disk Storage to be created.
     */
    name?: pulumi.Input<string>;
    securities?: pulumi.Input<pulumi.Input<inputs.StorageDiskSecurity>[]>;
    /**
     * A list of backup locations can be provided for the storage pool being created.
     */
    storages: pulumi.Input<pulumi.Input<inputs.StorageDiskStorage>[]>;
}
