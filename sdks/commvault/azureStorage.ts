// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AzureStorage extends pulumi.CustomResource {
    /**
     * Get an existing AzureStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureStorageState, opts?: pulumi.CustomResourceOptions): AzureStorage {
        return new AzureStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/azureStorage:AzureStorage';

    /**
     * Returns true if the given object is an instance of AzureStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureStorage.__pulumiType;
    }

    /**
     * Specifies the access key id for the Azure Storage.
     */
    public readonly accessKeyId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Account name for the Azure Storage.
     */
    public readonly accountName!: pulumi.Output<string | undefined>;
    /**
     * Specifies the company id to which the created Azure storage should be associated with.
     */
    public readonly companyId!: pulumi.Output<number | undefined>;
    /**
     * Specifies the container name user for the Azure Storage.
     */
    public readonly container!: pulumi.Output<string>;
    /**
     * Specifies the saved creation name for creating Azure Storage.
     */
    public readonly credentialsName!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Deduplication path for the Azure Storage
     */
    public readonly ddbLocation!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Media agent used for the Azure Storage.
     */
    public readonly mediaagent!: pulumi.Output<string>;
    /**
     * Specifies the service host name for the Azure storage.
     */
    public readonly serviceHost!: pulumi.Output<string>;
    /**
     * Specifies the Name of the Azure Storage.
     */
    public readonly storageName!: pulumi.Output<string>;

    /**
     * Create a AzureStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureStorageArgs | AzureStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureStorageState | undefined;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["companyId"] = state ? state.companyId : undefined;
            resourceInputs["container"] = state ? state.container : undefined;
            resourceInputs["credentialsName"] = state ? state.credentialsName : undefined;
            resourceInputs["ddbLocation"] = state ? state.ddbLocation : undefined;
            resourceInputs["mediaagent"] = state ? state.mediaagent : undefined;
            resourceInputs["serviceHost"] = state ? state.serviceHost : undefined;
            resourceInputs["storageName"] = state ? state.storageName : undefined;
        } else {
            const args = argsOrState as AzureStorageArgs | undefined;
            if ((!args || args.container === undefined) && !opts.urn) {
                throw new Error("Missing required property 'container'");
            }
            if ((!args || args.mediaagent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaagent'");
            }
            if ((!args || args.serviceHost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceHost'");
            }
            if ((!args || args.storageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageName'");
            }
            resourceInputs["accessKeyId"] = args ? args.accessKeyId : undefined;
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["companyId"] = args ? args.companyId : undefined;
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["credentialsName"] = args ? args.credentialsName : undefined;
            resourceInputs["ddbLocation"] = args ? args.ddbLocation : undefined;
            resourceInputs["mediaagent"] = args ? args.mediaagent : undefined;
            resourceInputs["serviceHost"] = args ? args.serviceHost : undefined;
            resourceInputs["storageName"] = args ? args.storageName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureStorage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureStorage resources.
 */
export interface AzureStorageState {
    /**
     * Specifies the access key id for the Azure Storage.
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * Specifies the Account name for the Azure Storage.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Specifies the company id to which the created Azure storage should be associated with.
     */
    companyId?: pulumi.Input<number>;
    /**
     * Specifies the container name user for the Azure Storage.
     */
    container?: pulumi.Input<string>;
    /**
     * Specifies the saved creation name for creating Azure Storage.
     */
    credentialsName?: pulumi.Input<string>;
    /**
     * Specifies the Deduplication path for the Azure Storage
     */
    ddbLocation?: pulumi.Input<string>;
    /**
     * Specifies the Media agent used for the Azure Storage.
     */
    mediaagent?: pulumi.Input<string>;
    /**
     * Specifies the service host name for the Azure storage.
     */
    serviceHost?: pulumi.Input<string>;
    /**
     * Specifies the Name of the Azure Storage.
     */
    storageName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureStorage resource.
 */
export interface AzureStorageArgs {
    /**
     * Specifies the access key id for the Azure Storage.
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * Specifies the Account name for the Azure Storage.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Specifies the company id to which the created Azure storage should be associated with.
     */
    companyId?: pulumi.Input<number>;
    /**
     * Specifies the container name user for the Azure Storage.
     */
    container: pulumi.Input<string>;
    /**
     * Specifies the saved creation name for creating Azure Storage.
     */
    credentialsName?: pulumi.Input<string>;
    /**
     * Specifies the Deduplication path for the Azure Storage
     */
    ddbLocation?: pulumi.Input<string>;
    /**
     * Specifies the Media agent used for the Azure Storage.
     */
    mediaagent: pulumi.Input<string>;
    /**
     * Specifies the service host name for the Azure storage.
     */
    serviceHost: pulumi.Input<string>;
    /**
     * Specifies the Name of the Azure Storage.
     */
    storageName: pulumi.Input<string>;
}
