// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PlanToVm extends pulumi.CustomResource {
    /**
     * Get an existing PlanToVm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlanToVmState, opts?: pulumi.CustomResourceOptions): PlanToVm {
        return new PlanToVm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/planToVm:PlanToVm';

    /**
     * Returns true if the given object is an instance of PlanToVm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlanToVm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlanToVm.__pulumiType;
    }

    /**
     * Specifies the new plan name for association
     */
    public readonly newPlan!: pulumi.Output<string | undefined>;
    /**
     * Specifies the plan name to associate.
     */
    public readonly plan!: pulumi.Output<string>;
    /**
     * Specifies the vm name to associate.
     */
    public readonly vmName!: pulumi.Output<string>;

    /**
     * Create a PlanToVm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlanToVmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlanToVmArgs | PlanToVmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlanToVmState | undefined;
            resourceInputs["newPlan"] = state ? state.newPlan : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["vmName"] = state ? state.vmName : undefined;
        } else {
            const args = argsOrState as PlanToVmArgs | undefined;
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.vmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmName'");
            }
            resourceInputs["newPlan"] = args ? args.newPlan : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["vmName"] = args ? args.vmName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlanToVm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlanToVm resources.
 */
export interface PlanToVmState {
    /**
     * Specifies the new plan name for association
     */
    newPlan?: pulumi.Input<string>;
    /**
     * Specifies the plan name to associate.
     */
    plan?: pulumi.Input<string>;
    /**
     * Specifies the vm name to associate.
     */
    vmName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlanToVm resource.
 */
export interface PlanToVmArgs {
    /**
     * Specifies the new plan name for association
     */
    newPlan?: pulumi.Input<string>;
    /**
     * Specifies the plan name to associate.
     */
    plan: pulumi.Input<string>;
    /**
     * Specifies the vm name to associate.
     */
    vmName: pulumi.Input<string>;
}
