// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UserV2 extends pulumi.CustomResource {
    /**
     * Get an existing UserV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserV2State, opts?: pulumi.CustomResourceOptions): UserV2 {
        return new UserV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/userV2:UserV2';

    /**
     * Returns true if the given object is an instance of UserV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserV2.__pulumiType;
    }

    /**
     * Change the current authentication method of user. SAML user association can be removed using this.
     */
    public readonly authenticationmethod!: pulumi.Output<string>;
    public readonly companies!: pulumi.Output<outputs.UserV2Company[] | undefined>;
    /**
     * Used to provide an email-id to the new user. This email-id is used for logging in the user. Please note that email ids
     * are compulsory for company and local users and optional for external users.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * enable or disable the user.
     */
    public readonly enabled!: pulumi.Output<string>;
    /**
     * Used to provide a name to the new user.
     */
    public readonly fullname!: pulumi.Output<string>;
    /**
     * User will receive an email to install backup software package on their device if this is set to true.
     */
    public readonly inviteuser!: pulumi.Output<string>;
    /**
     * Used to provide the new user with a username. This username can be used for logging in the user instead of email-id when
     * duplicate email-ids are present. For external user, it is necessary to provide the domain name along with the username
     * (domainName\\username). To create a company user, the company id or name needs to be provided in the company entity.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Used to provide a password to the user being created. This will be accepted when the useSystemGeneratePassword tag is
     * false. The password has to be provided in Base64 format.
     */
    public readonly password!: pulumi.Output<string>;
    public readonly plans!: pulumi.Output<outputs.UserV2Plan[] | undefined>;
    /**
     * Change User Principal Name(UPN) for existing user. This User Principal Name can be used for logging-in.
     */
    public readonly userprincipalname!: pulumi.Output<string>;
    /**
     * Choose to provide a system generated password to the user instead of providing your own password. An email will be sent
     * to the user to reset the password. If it is set to true, password tag need not be provided. If it is set to false,
     * password needs to be provided in the password tag in Base64 format.
     */
    public readonly usesystemgeneratepassword!: pulumi.Output<string>;

    /**
     * Create a UserV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserV2Args | UserV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserV2State | undefined;
            resourceInputs["authenticationmethod"] = state ? state.authenticationmethod : undefined;
            resourceInputs["companies"] = state ? state.companies : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["inviteuser"] = state ? state.inviteuser : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["plans"] = state ? state.plans : undefined;
            resourceInputs["userprincipalname"] = state ? state.userprincipalname : undefined;
            resourceInputs["usesystemgeneratepassword"] = state ? state.usesystemgeneratepassword : undefined;
        } else {
            const args = argsOrState as UserV2Args | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["authenticationmethod"] = args ? args.authenticationmethod : undefined;
            resourceInputs["companies"] = args ? args.companies : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fullname"] = args ? args.fullname : undefined;
            resourceInputs["inviteuser"] = args ? args.inviteuser : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["plans"] = args ? args.plans : undefined;
            resourceInputs["userprincipalname"] = args ? args.userprincipalname : undefined;
            resourceInputs["usesystemgeneratepassword"] = args ? args.usesystemgeneratepassword : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UserV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserV2 resources.
 */
export interface UserV2State {
    /**
     * Change the current authentication method of user. SAML user association can be removed using this.
     */
    authenticationmethod?: pulumi.Input<string>;
    companies?: pulumi.Input<pulumi.Input<inputs.UserV2Company>[]>;
    /**
     * Used to provide an email-id to the new user. This email-id is used for logging in the user. Please note that email ids
     * are compulsory for company and local users and optional for external users.
     */
    email?: pulumi.Input<string>;
    /**
     * enable or disable the user.
     */
    enabled?: pulumi.Input<string>;
    /**
     * Used to provide a name to the new user.
     */
    fullname?: pulumi.Input<string>;
    /**
     * User will receive an email to install backup software package on their device if this is set to true.
     */
    inviteuser?: pulumi.Input<string>;
    /**
     * Used to provide the new user with a username. This username can be used for logging in the user instead of email-id when
     * duplicate email-ids are present. For external user, it is necessary to provide the domain name along with the username
     * (domainName\\username). To create a company user, the company id or name needs to be provided in the company entity.
     */
    name?: pulumi.Input<string>;
    /**
     * Used to provide a password to the user being created. This will be accepted when the useSystemGeneratePassword tag is
     * false. The password has to be provided in Base64 format.
     */
    password?: pulumi.Input<string>;
    plans?: pulumi.Input<pulumi.Input<inputs.UserV2Plan>[]>;
    /**
     * Change User Principal Name(UPN) for existing user. This User Principal Name can be used for logging-in.
     */
    userprincipalname?: pulumi.Input<string>;
    /**
     * Choose to provide a system generated password to the user instead of providing your own password. An email will be sent
     * to the user to reset the password. If it is set to true, password tag need not be provided. If it is set to false,
     * password needs to be provided in the password tag in Base64 format.
     */
    usesystemgeneratepassword?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserV2 resource.
 */
export interface UserV2Args {
    /**
     * Change the current authentication method of user. SAML user association can be removed using this.
     */
    authenticationmethod?: pulumi.Input<string>;
    companies?: pulumi.Input<pulumi.Input<inputs.UserV2Company>[]>;
    /**
     * Used to provide an email-id to the new user. This email-id is used for logging in the user. Please note that email ids
     * are compulsory for company and local users and optional for external users.
     */
    email: pulumi.Input<string>;
    /**
     * enable or disable the user.
     */
    enabled?: pulumi.Input<string>;
    /**
     * Used to provide a name to the new user.
     */
    fullname?: pulumi.Input<string>;
    /**
     * User will receive an email to install backup software package on their device if this is set to true.
     */
    inviteuser?: pulumi.Input<string>;
    /**
     * Used to provide the new user with a username. This username can be used for logging in the user instead of email-id when
     * duplicate email-ids are present. For external user, it is necessary to provide the domain name along with the username
     * (domainName\\username). To create a company user, the company id or name needs to be provided in the company entity.
     */
    name?: pulumi.Input<string>;
    /**
     * Used to provide a password to the user being created. This will be accepted when the useSystemGeneratePassword tag is
     * false. The password has to be provided in Base64 format.
     */
    password?: pulumi.Input<string>;
    plans?: pulumi.Input<pulumi.Input<inputs.UserV2Plan>[]>;
    /**
     * Change User Principal Name(UPN) for existing user. This User Principal Name can be used for logging-in.
     */
    userprincipalname?: pulumi.Input<string>;
    /**
     * Choose to provide a system generated password to the user instead of providing your own password. An email will be sent
     * to the user to reset the password. If it is set to true, password tag need not be provided. If it is set to false,
     * password needs to be provided in the password tag in Base64 format.
     */
    usesystemgeneratepassword?: pulumi.Input<string>;
}
