// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PlanBackupdestination extends pulumi.CustomResource {
    /**
     * Get an existing PlanBackupdestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlanBackupdestinationState, opts?: pulumi.CustomResourceOptions): PlanBackupdestination {
        return new PlanBackupdestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/planBackupdestination:PlanBackupdestination';

    /**
     * Returns true if the given object is an instance of PlanBackupdestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlanBackupdestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlanBackupdestination.__pulumiType;
    }

    /**
     * Backup start time in seconds. The time is provided in unix time format.
     */
    public readonly backupstarttime!: pulumi.Output<number>;
    /**
     * All_JOBS means SYNCHRONOUS copy type, others are applicable for SELECTIVE copy Type only. [All_JOBS, ALL_FULLS,
     * HOURLY_FULLS, DAILY_FULLS, WEEKLY_FULLS, MONTHLY_FULLS, QUARTERLY_FULLS, HALF_YEARLY_FULLS, YEARLY_FULLS, ADVANCED]
     */
    public readonly backupstocopy!: pulumi.Output<string>;
    /**
     * Tells if this copy has data aging enabled
     */
    public readonly enabledataaging!: pulumi.Output<string>;
    /**
     * If you want to update, specify the whole object. Extended retention rules should be bigger than retention period.
     */
    public readonly extendedretentionrules!: pulumi.Output<outputs.PlanBackupdestinationExtendedretentionrule[] | undefined>;
    /**
     * Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default is
     * LAST while adding new backup destination. [FIRST, LAST]
     */
    public readonly fullbackuptypestocopy!: pulumi.Output<string>;
    /**
     * Is this a mirror copy? Only considered when isSnapCopy is true.
     */
    public readonly ismirrorcopy!: pulumi.Output<string>;
    /**
     * Is this a snap copy? If isMirrorCopy is not set, then default is Vault/Replica.
     */
    public readonly issnapcopy!: pulumi.Output<string>;
    public readonly mappings!: pulumi.Output<outputs.PlanBackupdestinationMapping[] | undefined>;
    /**
     * Name of backup destination
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Only for snap copy. Enabling this changes SVM Mapping to NetApp cloud targets only.
     */
    public readonly netappcloudtarget!: pulumi.Output<string>;
    /**
     * Flag to specify if primary storage is copy data management enabled.
     */
    public readonly optimizeforinstantclone!: pulumi.Output<string>;
    /**
     * Tells if this copy should use storage pool retention period days or the retention defined for this copy. Set as true to
     * use retention defined on this copy.
     */
    public readonly overrideretentionsettings!: pulumi.Output<string>;
    public readonly regions!: pulumi.Output<outputs.PlanBackupdestinationRegion[] | undefined>;
    /**
     * Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not
     * specified, this takes precedence.
     */
    public readonly retentionperioddays!: pulumi.Output<number>;
    /**
     * Which type of retention rule should be used for the given backup destination [RETENTION_PERIOD, SNAP_RECOVERY_POINTS]
     */
    public readonly retentionruletype!: pulumi.Output<string>;
    /**
     * Number of snap recovery points for snap copy for retention. Can be specified instead of retention period in Days for
     * snap copy.
     */
    public readonly snaprecoverypoints!: pulumi.Output<number>;
    public readonly sourcecopies!: pulumi.Output<outputs.PlanBackupdestinationSourcecopy[] | undefined>;
    public readonly storagepools!: pulumi.Output<outputs.PlanBackupdestinationStoragepool[]>;
    /**
     * [ALL, DISK, CLOUD, HYPERSCALE, TAPE]
     */
    public readonly storagetype!: pulumi.Output<string>;
    /**
     * Use extended retention rules
     */
    public readonly useextendedretentionrules!: pulumi.Output<string>;

    /**
     * Create a PlanBackupdestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlanBackupdestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlanBackupdestinationArgs | PlanBackupdestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlanBackupdestinationState | undefined;
            resourceInputs["backupstarttime"] = state ? state.backupstarttime : undefined;
            resourceInputs["backupstocopy"] = state ? state.backupstocopy : undefined;
            resourceInputs["enabledataaging"] = state ? state.enabledataaging : undefined;
            resourceInputs["extendedretentionrules"] = state ? state.extendedretentionrules : undefined;
            resourceInputs["fullbackuptypestocopy"] = state ? state.fullbackuptypestocopy : undefined;
            resourceInputs["ismirrorcopy"] = state ? state.ismirrorcopy : undefined;
            resourceInputs["issnapcopy"] = state ? state.issnapcopy : undefined;
            resourceInputs["mappings"] = state ? state.mappings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netappcloudtarget"] = state ? state.netappcloudtarget : undefined;
            resourceInputs["optimizeforinstantclone"] = state ? state.optimizeforinstantclone : undefined;
            resourceInputs["overrideretentionsettings"] = state ? state.overrideretentionsettings : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["retentionperioddays"] = state ? state.retentionperioddays : undefined;
            resourceInputs["retentionruletype"] = state ? state.retentionruletype : undefined;
            resourceInputs["snaprecoverypoints"] = state ? state.snaprecoverypoints : undefined;
            resourceInputs["sourcecopies"] = state ? state.sourcecopies : undefined;
            resourceInputs["storagepools"] = state ? state.storagepools : undefined;
            resourceInputs["storagetype"] = state ? state.storagetype : undefined;
            resourceInputs["useextendedretentionrules"] = state ? state.useextendedretentionrules : undefined;
        } else {
            const args = argsOrState as PlanBackupdestinationArgs | undefined;
            if ((!args || args.storagepools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storagepools'");
            }
            resourceInputs["backupstarttime"] = args ? args.backupstarttime : undefined;
            resourceInputs["backupstocopy"] = args ? args.backupstocopy : undefined;
            resourceInputs["enabledataaging"] = args ? args.enabledataaging : undefined;
            resourceInputs["extendedretentionrules"] = args ? args.extendedretentionrules : undefined;
            resourceInputs["fullbackuptypestocopy"] = args ? args.fullbackuptypestocopy : undefined;
            resourceInputs["ismirrorcopy"] = args ? args.ismirrorcopy : undefined;
            resourceInputs["issnapcopy"] = args ? args.issnapcopy : undefined;
            resourceInputs["mappings"] = args ? args.mappings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netappcloudtarget"] = args ? args.netappcloudtarget : undefined;
            resourceInputs["optimizeforinstantclone"] = args ? args.optimizeforinstantclone : undefined;
            resourceInputs["overrideretentionsettings"] = args ? args.overrideretentionsettings : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["retentionperioddays"] = args ? args.retentionperioddays : undefined;
            resourceInputs["retentionruletype"] = args ? args.retentionruletype : undefined;
            resourceInputs["snaprecoverypoints"] = args ? args.snaprecoverypoints : undefined;
            resourceInputs["sourcecopies"] = args ? args.sourcecopies : undefined;
            resourceInputs["storagepools"] = args ? args.storagepools : undefined;
            resourceInputs["storagetype"] = args ? args.storagetype : undefined;
            resourceInputs["useextendedretentionrules"] = args ? args.useextendedretentionrules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlanBackupdestination.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlanBackupdestination resources.
 */
export interface PlanBackupdestinationState {
    /**
     * Backup start time in seconds. The time is provided in unix time format.
     */
    backupstarttime?: pulumi.Input<number>;
    /**
     * All_JOBS means SYNCHRONOUS copy type, others are applicable for SELECTIVE copy Type only. [All_JOBS, ALL_FULLS,
     * HOURLY_FULLS, DAILY_FULLS, WEEKLY_FULLS, MONTHLY_FULLS, QUARTERLY_FULLS, HALF_YEARLY_FULLS, YEARLY_FULLS, ADVANCED]
     */
    backupstocopy?: pulumi.Input<string>;
    /**
     * Tells if this copy has data aging enabled
     */
    enabledataaging?: pulumi.Input<string>;
    /**
     * If you want to update, specify the whole object. Extended retention rules should be bigger than retention period.
     */
    extendedretentionrules?: pulumi.Input<pulumi.Input<inputs.PlanBackupdestinationExtendedretentionrule>[]>;
    /**
     * Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default is
     * LAST while adding new backup destination. [FIRST, LAST]
     */
    fullbackuptypestocopy?: pulumi.Input<string>;
    /**
     * Is this a mirror copy? Only considered when isSnapCopy is true.
     */
    ismirrorcopy?: pulumi.Input<string>;
    /**
     * Is this a snap copy? If isMirrorCopy is not set, then default is Vault/Replica.
     */
    issnapcopy?: pulumi.Input<string>;
    mappings?: pulumi.Input<pulumi.Input<inputs.PlanBackupdestinationMapping>[]>;
    /**
     * Name of backup destination
     */
    name?: pulumi.Input<string>;
    /**
     * Only for snap copy. Enabling this changes SVM Mapping to NetApp cloud targets only.
     */
    netappcloudtarget?: pulumi.Input<string>;
    /**
     * Flag to specify if primary storage is copy data management enabled.
     */
    optimizeforinstantclone?: pulumi.Input<string>;
    /**
     * Tells if this copy should use storage pool retention period days or the retention defined for this copy. Set as true to
     * use retention defined on this copy.
     */
    overrideretentionsettings?: pulumi.Input<string>;
    regions?: pulumi.Input<pulumi.Input<inputs.PlanBackupdestinationRegion>[]>;
    /**
     * Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not
     * specified, this takes precedence.
     */
    retentionperioddays?: pulumi.Input<number>;
    /**
     * Which type of retention rule should be used for the given backup destination [RETENTION_PERIOD, SNAP_RECOVERY_POINTS]
     */
    retentionruletype?: pulumi.Input<string>;
    /**
     * Number of snap recovery points for snap copy for retention. Can be specified instead of retention period in Days for
     * snap copy.
     */
    snaprecoverypoints?: pulumi.Input<number>;
    sourcecopies?: pulumi.Input<pulumi.Input<inputs.PlanBackupdestinationSourcecopy>[]>;
    storagepools?: pulumi.Input<pulumi.Input<inputs.PlanBackupdestinationStoragepool>[]>;
    /**
     * [ALL, DISK, CLOUD, HYPERSCALE, TAPE]
     */
    storagetype?: pulumi.Input<string>;
    /**
     * Use extended retention rules
     */
    useextendedretentionrules?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlanBackupdestination resource.
 */
export interface PlanBackupdestinationArgs {
    /**
     * Backup start time in seconds. The time is provided in unix time format.
     */
    backupstarttime?: pulumi.Input<number>;
    /**
     * All_JOBS means SYNCHRONOUS copy type, others are applicable for SELECTIVE copy Type only. [All_JOBS, ALL_FULLS,
     * HOURLY_FULLS, DAILY_FULLS, WEEKLY_FULLS, MONTHLY_FULLS, QUARTERLY_FULLS, HALF_YEARLY_FULLS, YEARLY_FULLS, ADVANCED]
     */
    backupstocopy?: pulumi.Input<string>;
    /**
     * Tells if this copy has data aging enabled
     */
    enabledataaging?: pulumi.Input<string>;
    /**
     * If you want to update, specify the whole object. Extended retention rules should be bigger than retention period.
     */
    extendedretentionrules?: pulumi.Input<pulumi.Input<inputs.PlanBackupdestinationExtendedretentionrule>[]>;
    /**
     * Which type of backup type should be copied for the given backup destination when backup type is not all jobs. Default is
     * LAST while adding new backup destination. [FIRST, LAST]
     */
    fullbackuptypestocopy?: pulumi.Input<string>;
    /**
     * Is this a mirror copy? Only considered when isSnapCopy is true.
     */
    ismirrorcopy?: pulumi.Input<string>;
    /**
     * Is this a snap copy? If isMirrorCopy is not set, then default is Vault/Replica.
     */
    issnapcopy?: pulumi.Input<string>;
    mappings?: pulumi.Input<pulumi.Input<inputs.PlanBackupdestinationMapping>[]>;
    /**
     * Name of backup destination
     */
    name?: pulumi.Input<string>;
    /**
     * Only for snap copy. Enabling this changes SVM Mapping to NetApp cloud targets only.
     */
    netappcloudtarget?: pulumi.Input<string>;
    /**
     * Flag to specify if primary storage is copy data management enabled.
     */
    optimizeforinstantclone?: pulumi.Input<string>;
    /**
     * Tells if this copy should use storage pool retention period days or the retention defined for this copy. Set as true to
     * use retention defined on this copy.
     */
    overrideretentionsettings?: pulumi.Input<string>;
    regions?: pulumi.Input<pulumi.Input<inputs.PlanBackupdestinationRegion>[]>;
    /**
     * Retention period in days. -1 can be specified for infinite retention. If this and snapRecoveryPoints both are not
     * specified, this takes precedence.
     */
    retentionperioddays?: pulumi.Input<number>;
    /**
     * Which type of retention rule should be used for the given backup destination [RETENTION_PERIOD, SNAP_RECOVERY_POINTS]
     */
    retentionruletype?: pulumi.Input<string>;
    /**
     * Number of snap recovery points for snap copy for retention. Can be specified instead of retention period in Days for
     * snap copy.
     */
    snaprecoverypoints?: pulumi.Input<number>;
    sourcecopies?: pulumi.Input<pulumi.Input<inputs.PlanBackupdestinationSourcecopy>[]>;
    storagepools: pulumi.Input<pulumi.Input<inputs.PlanBackupdestinationStoragepool>[]>;
    /**
     * [ALL, DISK, CLOUD, HYPERSCALE, TAPE]
     */
    storagetype?: pulumi.Input<string>;
    /**
     * Use extended retention rules
     */
    useextendedretentionrules?: pulumi.Input<string>;
}
