// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DiskAccesspath extends pulumi.CustomResource {
    /**
     * Get an existing DiskAccesspath resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiskAccesspathState, opts?: pulumi.CustomResourceOptions): DiskAccesspath {
        return new DiskAccesspath(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/diskAccesspath:DiskAccesspath';

    /**
     * Returns true if the given object is an instance of DiskAccesspath.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiskAccesspath {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiskAccesspath.__pulumiType;
    }

    /**
     * The access type for the access path can be either read (writing to path not allowed) or read and write (writing to path
     * allowed). [READ_AND_WRITE, READ]
     */
    public readonly access!: pulumi.Output<string>;
    /**
     * Id of the backup location whose details have to be fetched to add a new access path
     */
    public readonly backuplocationid!: pulumi.Output<number>;
    public readonly enabled!: pulumi.Output<string>;
    /**
     * Can add a list of media agents to be added as the disk access path.
     */
    public readonly mediaagents!: pulumi.Output<outputs.DiskAccesspathMediaagent[]>;
    /**
     * Id of the disk storage pool whose details have to be fetched to add a new access path
     */
    public readonly storagepoolid!: pulumi.Output<number>;

    /**
     * Create a DiskAccesspath resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskAccesspathArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiskAccesspathArgs | DiskAccesspathState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiskAccesspathState | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["backuplocationid"] = state ? state.backuplocationid : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["mediaagents"] = state ? state.mediaagents : undefined;
            resourceInputs["storagepoolid"] = state ? state.storagepoolid : undefined;
        } else {
            const args = argsOrState as DiskAccesspathArgs | undefined;
            if ((!args || args.backuplocationid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backuplocationid'");
            }
            if ((!args || args.mediaagents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaagents'");
            }
            if ((!args || args.storagepoolid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storagepoolid'");
            }
            resourceInputs["access"] = args ? args.access : undefined;
            resourceInputs["backuplocationid"] = args ? args.backuplocationid : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["mediaagents"] = args ? args.mediaagents : undefined;
            resourceInputs["storagepoolid"] = args ? args.storagepoolid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiskAccesspath.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DiskAccesspath resources.
 */
export interface DiskAccesspathState {
    /**
     * The access type for the access path can be either read (writing to path not allowed) or read and write (writing to path
     * allowed). [READ_AND_WRITE, READ]
     */
    access?: pulumi.Input<string>;
    /**
     * Id of the backup location whose details have to be fetched to add a new access path
     */
    backuplocationid?: pulumi.Input<number>;
    enabled?: pulumi.Input<string>;
    /**
     * Can add a list of media agents to be added as the disk access path.
     */
    mediaagents?: pulumi.Input<pulumi.Input<inputs.DiskAccesspathMediaagent>[]>;
    /**
     * Id of the disk storage pool whose details have to be fetched to add a new access path
     */
    storagepoolid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DiskAccesspath resource.
 */
export interface DiskAccesspathArgs {
    /**
     * The access type for the access path can be either read (writing to path not allowed) or read and write (writing to path
     * allowed). [READ_AND_WRITE, READ]
     */
    access?: pulumi.Input<string>;
    /**
     * Id of the backup location whose details have to be fetched to add a new access path
     */
    backuplocationid: pulumi.Input<number>;
    enabled?: pulumi.Input<string>;
    /**
     * Can add a list of media agents to be added as the disk access path.
     */
    mediaagents: pulumi.Input<pulumi.Input<inputs.DiskAccesspathMediaagent>[]>;
    /**
     * Id of the disk storage pool whose details have to be fetched to add a new access path
     */
    storagepoolid: pulumi.Input<number>;
}
