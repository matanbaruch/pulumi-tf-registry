// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Company extends pulumi.CustomResource {
    /**
     * Get an existing Company resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CompanyState, opts?: pulumi.CustomResourceOptions): Company {
        return new Company(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/company:Company';

    /**
     * Returns true if the given object is an instance of Company.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Company {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Company.__pulumiType;
    }

    /**
     * Specifies the SMTP address of the company.
     */
    public readonly associatedSmtp!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Alias name for the company.
     */
    public readonly companyAlias!: pulumi.Output<string>;
    /**
     * Specifies the company id to which the child company should be associated with.
     */
    public readonly companyId!: pulumi.Output<number | undefined>;
    /**
     * Specifies the name of the Company.
     */
    public readonly companyName!: pulumi.Output<string>;
    /**
     * Specifies Name of the tenant administrator.
     */
    public readonly contactName!: pulumi.Output<string>;
    /**
     * Specifies Email address for the tenant administrator.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Specifies the data protection plans to use for the company. The plans you select are the plans that the tenant
     * administrator can choose from.
     */
    public readonly plans!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies whether email needs to be sent ot not
     */
    public readonly sendEmail!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Company resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CompanyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CompanyArgs | CompanyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CompanyState | undefined;
            resourceInputs["associatedSmtp"] = state ? state.associatedSmtp : undefined;
            resourceInputs["companyAlias"] = state ? state.companyAlias : undefined;
            resourceInputs["companyId"] = state ? state.companyId : undefined;
            resourceInputs["companyName"] = state ? state.companyName : undefined;
            resourceInputs["contactName"] = state ? state.contactName : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["plans"] = state ? state.plans : undefined;
            resourceInputs["sendEmail"] = state ? state.sendEmail : undefined;
        } else {
            const args = argsOrState as CompanyArgs | undefined;
            if ((!args || args.companyAlias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'companyAlias'");
            }
            if ((!args || args.companyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'companyName'");
            }
            if ((!args || args.contactName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contactName'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["associatedSmtp"] = args ? args.associatedSmtp : undefined;
            resourceInputs["companyAlias"] = args ? args.companyAlias : undefined;
            resourceInputs["companyId"] = args ? args.companyId : undefined;
            resourceInputs["companyName"] = args ? args.companyName : undefined;
            resourceInputs["contactName"] = args ? args.contactName : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["plans"] = args ? args.plans : undefined;
            resourceInputs["sendEmail"] = args ? args.sendEmail : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Company.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Company resources.
 */
export interface CompanyState {
    /**
     * Specifies the SMTP address of the company.
     */
    associatedSmtp?: pulumi.Input<string>;
    /**
     * Specifies the Alias name for the company.
     */
    companyAlias?: pulumi.Input<string>;
    /**
     * Specifies the company id to which the child company should be associated with.
     */
    companyId?: pulumi.Input<number>;
    /**
     * Specifies the name of the Company.
     */
    companyName?: pulumi.Input<string>;
    /**
     * Specifies Name of the tenant administrator.
     */
    contactName?: pulumi.Input<string>;
    /**
     * Specifies Email address for the tenant administrator.
     */
    email?: pulumi.Input<string>;
    /**
     * Specifies the data protection plans to use for the company. The plans you select are the plans that the tenant
     * administrator can choose from.
     */
    plans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether email needs to be sent ot not
     */
    sendEmail?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Company resource.
 */
export interface CompanyArgs {
    /**
     * Specifies the SMTP address of the company.
     */
    associatedSmtp?: pulumi.Input<string>;
    /**
     * Specifies the Alias name for the company.
     */
    companyAlias: pulumi.Input<string>;
    /**
     * Specifies the company id to which the child company should be associated with.
     */
    companyId?: pulumi.Input<number>;
    /**
     * Specifies the name of the Company.
     */
    companyName: pulumi.Input<string>;
    /**
     * Specifies Name of the tenant administrator.
     */
    contactName: pulumi.Input<string>;
    /**
     * Specifies Email address for the tenant administrator.
     */
    email: pulumi.Input<string>;
    /**
     * Specifies the data protection plans to use for the company. The plans you select are the plans that the tenant
     * administrator can choose from.
     */
    plans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether email needs to be sent ot not
     */
    sendEmail?: pulumi.Input<boolean>;
}
