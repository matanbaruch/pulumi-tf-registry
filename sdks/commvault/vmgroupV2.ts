// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmgroupV2 extends pulumi.CustomResource {
    /**
     * Get an existing VmgroupV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmgroupV2State, opts?: pulumi.CustomResourceOptions): VmgroupV2 {
        return new VmgroupV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commvault:index/vmgroupV2:VmgroupV2';

    /**
     * Returns true if the given object is an instance of VmgroupV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmgroupV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmgroupV2.__pulumiType;
    }

    public readonly accessnodes!: pulumi.Output<outputs.VmgroupV2Accessnode[] | undefined>;
    public readonly activitycontrols!: pulumi.Output<outputs.VmgroupV2Activitycontrol[] | undefined>;
    public readonly applicationvalidations!: pulumi.Output<outputs.VmgroupV2Applicationvalidation[] | undefined>;
    public readonly contents!: pulumi.Output<outputs.VmgroupV2Content[]>;
    public readonly diskfilters!: pulumi.Output<outputs.VmgroupV2Diskfilter[] | undefined>;
    /**
     * True if file indexing needs to be enabled
     */
    public readonly enablefileindexing!: pulumi.Output<string>;
    public readonly filters!: pulumi.Output<outputs.VmgroupV2Filter[] | undefined>;
    public readonly hypervisors!: pulumi.Output<outputs.VmgroupV2Hypervisor[]>;
    public readonly mediteches!: pulumi.Output<outputs.VmgroupV2Meditech[] | undefined>;
    public readonly meditechsystems!: pulumi.Output<outputs.VmgroupV2Meditechsystem[] | undefined>;
    /**
     * subclient name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly plans!: pulumi.Output<outputs.VmgroupV2Plan[]>;
    public readonly securityassociations!: pulumi.Output<outputs.VmgroupV2Securityassociation[] | undefined>;
    public readonly settings!: pulumi.Output<outputs.VmgroupV2Setting[] | undefined>;
    public readonly snapshotmanagements!: pulumi.Output<outputs.VmgroupV2Snapshotmanagement[] | undefined>;
    public readonly storages!: pulumi.Output<outputs.VmgroupV2Storage[] | undefined>;
    public readonly timezones!: pulumi.Output<outputs.VmgroupV2Timezone[] | undefined>;

    /**
     * Create a VmgroupV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmgroupV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmgroupV2Args | VmgroupV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmgroupV2State | undefined;
            resourceInputs["accessnodes"] = state ? state.accessnodes : undefined;
            resourceInputs["activitycontrols"] = state ? state.activitycontrols : undefined;
            resourceInputs["applicationvalidations"] = state ? state.applicationvalidations : undefined;
            resourceInputs["contents"] = state ? state.contents : undefined;
            resourceInputs["diskfilters"] = state ? state.diskfilters : undefined;
            resourceInputs["enablefileindexing"] = state ? state.enablefileindexing : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["hypervisors"] = state ? state.hypervisors : undefined;
            resourceInputs["mediteches"] = state ? state.mediteches : undefined;
            resourceInputs["meditechsystems"] = state ? state.meditechsystems : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plans"] = state ? state.plans : undefined;
            resourceInputs["securityassociations"] = state ? state.securityassociations : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["snapshotmanagements"] = state ? state.snapshotmanagements : undefined;
            resourceInputs["storages"] = state ? state.storages : undefined;
            resourceInputs["timezones"] = state ? state.timezones : undefined;
        } else {
            const args = argsOrState as VmgroupV2Args | undefined;
            if ((!args || args.contents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contents'");
            }
            if ((!args || args.hypervisors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hypervisors'");
            }
            if ((!args || args.plans === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plans'");
            }
            resourceInputs["accessnodes"] = args ? args.accessnodes : undefined;
            resourceInputs["activitycontrols"] = args ? args.activitycontrols : undefined;
            resourceInputs["applicationvalidations"] = args ? args.applicationvalidations : undefined;
            resourceInputs["contents"] = args ? args.contents : undefined;
            resourceInputs["diskfilters"] = args ? args.diskfilters : undefined;
            resourceInputs["enablefileindexing"] = args ? args.enablefileindexing : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["hypervisors"] = args ? args.hypervisors : undefined;
            resourceInputs["mediteches"] = args ? args.mediteches : undefined;
            resourceInputs["meditechsystems"] = args ? args.meditechsystems : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plans"] = args ? args.plans : undefined;
            resourceInputs["securityassociations"] = args ? args.securityassociations : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["snapshotmanagements"] = args ? args.snapshotmanagements : undefined;
            resourceInputs["storages"] = args ? args.storages : undefined;
            resourceInputs["timezones"] = args ? args.timezones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmgroupV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmgroupV2 resources.
 */
export interface VmgroupV2State {
    accessnodes?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Accessnode>[]>;
    activitycontrols?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Activitycontrol>[]>;
    applicationvalidations?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Applicationvalidation>[]>;
    contents?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Content>[]>;
    diskfilters?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Diskfilter>[]>;
    /**
     * True if file indexing needs to be enabled
     */
    enablefileindexing?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Filter>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Hypervisor>[]>;
    mediteches?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Meditech>[]>;
    meditechsystems?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Meditechsystem>[]>;
    /**
     * subclient name
     */
    name?: pulumi.Input<string>;
    plans?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Plan>[]>;
    securityassociations?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Securityassociation>[]>;
    settings?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Setting>[]>;
    snapshotmanagements?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Snapshotmanagement>[]>;
    storages?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Storage>[]>;
    timezones?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Timezone>[]>;
}

/**
 * The set of arguments for constructing a VmgroupV2 resource.
 */
export interface VmgroupV2Args {
    accessnodes?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Accessnode>[]>;
    activitycontrols?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Activitycontrol>[]>;
    applicationvalidations?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Applicationvalidation>[]>;
    contents: pulumi.Input<pulumi.Input<inputs.VmgroupV2Content>[]>;
    diskfilters?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Diskfilter>[]>;
    /**
     * True if file indexing needs to be enabled
     */
    enablefileindexing?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Filter>[]>;
    hypervisors: pulumi.Input<pulumi.Input<inputs.VmgroupV2Hypervisor>[]>;
    mediteches?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Meditech>[]>;
    meditechsystems?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Meditechsystem>[]>;
    /**
     * subclient name
     */
    name?: pulumi.Input<string>;
    plans: pulumi.Input<pulumi.Input<inputs.VmgroupV2Plan>[]>;
    securityassociations?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Securityassociation>[]>;
    settings?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Setting>[]>;
    snapshotmanagements?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Snapshotmanagement>[]>;
    storages?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Storage>[]>;
    timezones?: pulumi.Input<pulumi.Input<inputs.VmgroupV2Timezone>[]>;
}
