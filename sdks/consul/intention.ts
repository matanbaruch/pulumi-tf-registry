// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Intention extends pulumi.CustomResource {
    /**
     * Get an existing Intention resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntentionState, opts?: pulumi.CustomResourceOptions): Intention {
        return new Intention(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/intention:Intention';

    /**
     * Returns true if the given object is an instance of Intention.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Intention {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Intention.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly datacenter!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destinationName!: pulumi.Output<string>;
    public readonly destinationNamespace!: pulumi.Output<string | undefined>;
    public readonly meta!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly sourceName!: pulumi.Output<string>;
    public readonly sourceNamespace!: pulumi.Output<string | undefined>;

    /**
     * Create a Intention resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntentionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntentionArgs | IntentionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntentionState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationName"] = state ? state.destinationName : undefined;
            resourceInputs["destinationNamespace"] = state ? state.destinationNamespace : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["sourceName"] = state ? state.sourceName : undefined;
            resourceInputs["sourceNamespace"] = state ? state.sourceNamespace : undefined;
        } else {
            const args = argsOrState as IntentionArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.destinationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationName'");
            }
            if ((!args || args.sourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["datacenter"] = args ? args.datacenter : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationName"] = args ? args.destinationName : undefined;
            resourceInputs["destinationNamespace"] = args ? args.destinationNamespace : undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["sourceName"] = args ? args.sourceName : undefined;
            resourceInputs["sourceNamespace"] = args ? args.sourceNamespace : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Intention.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Intention resources.
 */
export interface IntentionState {
    action?: pulumi.Input<string>;
    datacenter?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationName?: pulumi.Input<string>;
    destinationNamespace?: pulumi.Input<string>;
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sourceName?: pulumi.Input<string>;
    sourceNamespace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Intention resource.
 */
export interface IntentionArgs {
    action: pulumi.Input<string>;
    datacenter?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationName: pulumi.Input<string>;
    destinationNamespace?: pulumi.Input<string>;
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sourceName: pulumi.Input<string>;
    sourceNamespace?: pulumi.Input<string>;
}
