// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServiceHealth(args: GetServiceHealthArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceHealthResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("consul:index/getServiceHealth:getServiceHealth", {
        "datacenter": args.datacenter,
        "filter": args.filter,
        "id": args.id,
        "name": args.name,
        "near": args.near,
        "nodeMeta": args.nodeMeta,
        "passing": args.passing,
        "tag": args.tag,
        "waitFor": args.waitFor,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServiceHealth.
 */
export interface GetServiceHealthArgs {
    datacenter?: string;
    filter?: string;
    id?: string;
    name: string;
    near?: string;
    nodeMeta?: {[key: string]: string};
    passing?: boolean;
    tag?: string;
    waitFor?: string;
}

/**
 * A collection of values returned by getServiceHealth.
 */
export interface GetServiceHealthResult {
    readonly datacenter?: string;
    readonly filter?: string;
    readonly id: string;
    readonly name: string;
    readonly near?: string;
    readonly nodeMeta?: {[key: string]: string};
    readonly passing?: boolean;
    readonly results: outputs.GetServiceHealthResult[];
    readonly tag?: string;
    readonly waitFor?: string;
}
export function getServiceHealthOutput(args: GetServiceHealthOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceHealthResult> {
    return pulumi.output(args).apply((a: any) => getServiceHealth(a, opts))
}

/**
 * A collection of arguments for invoking getServiceHealth.
 */
export interface GetServiceHealthOutputArgs {
    datacenter?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    near?: pulumi.Input<string>;
    nodeMeta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    passing?: pulumi.Input<boolean>;
    tag?: pulumi.Input<string>;
    waitFor?: pulumi.Input<string>;
}
