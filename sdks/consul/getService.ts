// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("consul:index/getService:getService", {
        "datacenter": args.datacenter,
        "filter": args.filter,
        "id": args.id,
        "name": args.name,
        "queryOptions": args.queryOptions,
        "tag": args.tag,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceArgs {
    datacenter?: string;
    filter?: string;
    id?: string;
    name: string;
    queryOptions?: inputs.GetServiceQueryOption[];
    tag?: string;
}

/**
 * A collection of values returned by getService.
 */
export interface GetServiceResult {
    readonly datacenter?: string;
    readonly filter?: string;
    readonly id: string;
    readonly name: string;
    readonly queryOptions?: outputs.GetServiceQueryOption[];
    readonly services: outputs.GetServiceService[];
    readonly tag?: string;
}
export function getServiceOutput(args: GetServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceResult> {
    return pulumi.output(args).apply((a: any) => getService(a, opts))
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceOutputArgs {
    datacenter?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    queryOptions?: pulumi.Input<pulumi.Input<inputs.GetServiceQueryOptionArgs>[]>;
    tag?: pulumi.Input<string>;
}
