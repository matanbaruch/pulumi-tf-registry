// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPeering(args: GetPeeringArgs, opts?: pulumi.InvokeOptions): Promise<GetPeeringResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("consul:index/getPeering:getPeering", {
        "id": args.id,
        "partition": args.partition,
        "peerName": args.peerName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPeering.
 */
export interface GetPeeringArgs {
    id?: string;
    partition?: string;
    peerName: string;
}

/**
 * A collection of values returned by getPeering.
 */
export interface GetPeeringResult {
    readonly deletedAt: string;
    readonly id: string;
    readonly meta: {[key: string]: string};
    readonly partition?: string;
    readonly peerCaPems: string[];
    readonly peerId: string;
    readonly peerName: string;
    readonly peerServerAddresses: string[];
    readonly peerServerName: string;
    readonly state: string;
}
export function getPeeringOutput(args: GetPeeringOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPeeringResult> {
    return pulumi.output(args).apply((a: any) => getPeering(a, opts))
}

/**
 * A collection of arguments for invoking getPeering.
 */
export interface GetPeeringOutputArgs {
    id?: pulumi.Input<string>;
    partition?: pulumi.Input<string>;
    peerName: pulumi.Input<string>;
}
