// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AutopilotConfig extends pulumi.CustomResource {
    /**
     * Get an existing AutopilotConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutopilotConfigState, opts?: pulumi.CustomResourceOptions): AutopilotConfig {
        return new AutopilotConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'consul:index/autopilotConfig:AutopilotConfig';

    /**
     * Returns true if the given object is an instance of AutopilotConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutopilotConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutopilotConfig.__pulumiType;
    }

    public readonly cleanupDeadServers!: pulumi.Output<boolean | undefined>;
    public readonly datacenter!: pulumi.Output<string | undefined>;
    public readonly disableUpgradeMigration!: pulumi.Output<boolean | undefined>;
    public readonly lastContactThreshold!: pulumi.Output<string | undefined>;
    public readonly maxTrailingLogs!: pulumi.Output<number | undefined>;
    public readonly redundancyZoneTag!: pulumi.Output<string | undefined>;
    public readonly serverStabilizationTime!: pulumi.Output<string | undefined>;
    public readonly upgradeVersionTag!: pulumi.Output<string | undefined>;

    /**
     * Create a AutopilotConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AutopilotConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutopilotConfigArgs | AutopilotConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutopilotConfigState | undefined;
            resourceInputs["cleanupDeadServers"] = state ? state.cleanupDeadServers : undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["disableUpgradeMigration"] = state ? state.disableUpgradeMigration : undefined;
            resourceInputs["lastContactThreshold"] = state ? state.lastContactThreshold : undefined;
            resourceInputs["maxTrailingLogs"] = state ? state.maxTrailingLogs : undefined;
            resourceInputs["redundancyZoneTag"] = state ? state.redundancyZoneTag : undefined;
            resourceInputs["serverStabilizationTime"] = state ? state.serverStabilizationTime : undefined;
            resourceInputs["upgradeVersionTag"] = state ? state.upgradeVersionTag : undefined;
        } else {
            const args = argsOrState as AutopilotConfigArgs | undefined;
            resourceInputs["cleanupDeadServers"] = args ? args.cleanupDeadServers : undefined;
            resourceInputs["datacenter"] = args ? args.datacenter : undefined;
            resourceInputs["disableUpgradeMigration"] = args ? args.disableUpgradeMigration : undefined;
            resourceInputs["lastContactThreshold"] = args ? args.lastContactThreshold : undefined;
            resourceInputs["maxTrailingLogs"] = args ? args.maxTrailingLogs : undefined;
            resourceInputs["redundancyZoneTag"] = args ? args.redundancyZoneTag : undefined;
            resourceInputs["serverStabilizationTime"] = args ? args.serverStabilizationTime : undefined;
            resourceInputs["upgradeVersionTag"] = args ? args.upgradeVersionTag : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutopilotConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutopilotConfig resources.
 */
export interface AutopilotConfigState {
    cleanupDeadServers?: pulumi.Input<boolean>;
    datacenter?: pulumi.Input<string>;
    disableUpgradeMigration?: pulumi.Input<boolean>;
    lastContactThreshold?: pulumi.Input<string>;
    maxTrailingLogs?: pulumi.Input<number>;
    redundancyZoneTag?: pulumi.Input<string>;
    serverStabilizationTime?: pulumi.Input<string>;
    upgradeVersionTag?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutopilotConfig resource.
 */
export interface AutopilotConfigArgs {
    cleanupDeadServers?: pulumi.Input<boolean>;
    datacenter?: pulumi.Input<string>;
    disableUpgradeMigration?: pulumi.Input<boolean>;
    lastContactThreshold?: pulumi.Input<string>;
    maxTrailingLogs?: pulumi.Input<number>;
    redundancyZoneTag?: pulumi.Input<string>;
    serverStabilizationTime?: pulumi.Input<string>;
    upgradeVersionTag?: pulumi.Input<string>;
}
