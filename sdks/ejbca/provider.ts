// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The provider type for the ejbca package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'ejbca';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * The path to the CA certificate file used to validate the EJBCA server's certificate. Certificates must be in PEM format.
     */
    public readonly caCertPath!: pulumi.Output<string | undefined>;
    /**
     * Hostname of the EJBCA instance. Hostname can include the port in the format {hostname}:{port}. If not specified, the
     * environment variable EJBCA_HOSTNAME will be used.
     */
    public readonly hostname!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["caCertPath"] = args ? args.caCertPath : undefined;
            resourceInputs["certAuth"] = pulumi.output(args ? args.certAuth : undefined).apply(JSON.stringify);
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["oauth"] = pulumi.output(args ? args.oauth : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * The path to the CA certificate file used to validate the EJBCA server's certificate. Certificates must be in PEM format.
     */
    caCertPath?: pulumi.Input<string>;
    /**
     * An object containing configuration on where the provider should read the client certificate/private key from. Required
     * if Client Cert Auth is used.
     */
    certAuth?: pulumi.Input<inputs.ProviderCertAuth>;
    /**
     * Hostname of the EJBCA instance. Hostname can include the port in the format {hostname}:{port}. If not specified, the
     * environment variable EJBCA_HOSTNAME will be used.
     */
    hostname?: pulumi.Input<string>;
    /**
     * An object containing configuration for OAuth 2.0 authentication. Required if OAuth 2.0 is used.
     */
    oauth?: pulumi.Input<inputs.ProviderOauth>;
}
