// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ejbca:index/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * An account binding ID in EJBCA to associate with issued certificates.
     */
    public readonly accountBindingId!: pulumi.Output<string | undefined>;
    /**
     * PEM encoded X509v3 leaf certificate
     */
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    /**
     * EJBCA Certificate Authority Name used to sign the certificate
     */
    public readonly certificateAuthorityName!: pulumi.Output<string>;
    /**
     * EJBCA Certificate Profile Name to use for the certificate. Profile must exist in the connected EJBCA instance, and it
     * must correspond to the format of the certificate_signing_request.
     */
    public readonly certificateProfileName!: pulumi.Output<string>;
    /**
     * PKCS#10 PEM-encoded Certificate Signing Request
     */
    public readonly certificateSigningRequest!: pulumi.Output<string>;
    /**
     * The PEM encoded X509v3 certificate chain up to the root CA.
     */
    public /*out*/ readonly chain!: pulumi.Output<string>;
    /**
     * The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This
     * can be useful to renew the certificate in advance of the expiration of the current certificate. The advance update can
     * only be performed if the resource is applied within the early renewal period. (default: `0`)
     */
    public readonly earlyRenewalHours!: pulumi.Output<number>;
    /**
     * Name of the EJBCA entity to create for the certificate
     */
    public readonly endEntityName!: pulumi.Output<string | undefined>;
    /**
     * EJBCA End Entity Profile Name to use for the certificate
     */
    public readonly endEntityProfileName!: pulumi.Output<string>;
    /**
     * Was the certificate revoked by the issuing CA?
     */
    public /*out*/ readonly isRevoked!: pulumi.Output<boolean>;
    /**
     * Distinguished name of the certificate issuer
     */
    public /*out*/ readonly issuerDn!: pulumi.Output<string>;
    /**
     * Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within
     * the `early_renewal_hours`)?
     */
    public /*out*/ readonly readyForRenewal!: pulumi.Output<boolean>;
    /**
     * The time until which the certificate is invalid, expressed as an
     * [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) timestamp.
     */
    public /*out*/ readonly validityEndTime!: pulumi.Output<string>;
    /**
     * The time after which the certificate is valid, expressed as an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)
     * timestamp.
     */
    public /*out*/ readonly validityStartTime!: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["accountBindingId"] = state ? state.accountBindingId : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateAuthorityName"] = state ? state.certificateAuthorityName : undefined;
            resourceInputs["certificateProfileName"] = state ? state.certificateProfileName : undefined;
            resourceInputs["certificateSigningRequest"] = state ? state.certificateSigningRequest : undefined;
            resourceInputs["chain"] = state ? state.chain : undefined;
            resourceInputs["earlyRenewalHours"] = state ? state.earlyRenewalHours : undefined;
            resourceInputs["endEntityName"] = state ? state.endEntityName : undefined;
            resourceInputs["endEntityProfileName"] = state ? state.endEntityProfileName : undefined;
            resourceInputs["isRevoked"] = state ? state.isRevoked : undefined;
            resourceInputs["issuerDn"] = state ? state.issuerDn : undefined;
            resourceInputs["readyForRenewal"] = state ? state.readyForRenewal : undefined;
            resourceInputs["validityEndTime"] = state ? state.validityEndTime : undefined;
            resourceInputs["validityStartTime"] = state ? state.validityStartTime : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.certificateAuthorityName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthorityName'");
            }
            if ((!args || args.certificateProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateProfileName'");
            }
            if ((!args || args.certificateSigningRequest === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateSigningRequest'");
            }
            if ((!args || args.endEntityProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endEntityProfileName'");
            }
            resourceInputs["accountBindingId"] = args ? args.accountBindingId : undefined;
            resourceInputs["certificateAuthorityName"] = args ? args.certificateAuthorityName : undefined;
            resourceInputs["certificateProfileName"] = args ? args.certificateProfileName : undefined;
            resourceInputs["certificateSigningRequest"] = args ? args.certificateSigningRequest : undefined;
            resourceInputs["earlyRenewalHours"] = args ? args.earlyRenewalHours : undefined;
            resourceInputs["endEntityName"] = args ? args.endEntityName : undefined;
            resourceInputs["endEntityProfileName"] = args ? args.endEntityProfileName : undefined;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["chain"] = undefined /*out*/;
            resourceInputs["isRevoked"] = undefined /*out*/;
            resourceInputs["issuerDn"] = undefined /*out*/;
            resourceInputs["readyForRenewal"] = undefined /*out*/;
            resourceInputs["validityEndTime"] = undefined /*out*/;
            resourceInputs["validityStartTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * An account binding ID in EJBCA to associate with issued certificates.
     */
    accountBindingId?: pulumi.Input<string>;
    /**
     * PEM encoded X509v3 leaf certificate
     */
    certificate?: pulumi.Input<string>;
    /**
     * EJBCA Certificate Authority Name used to sign the certificate
     */
    certificateAuthorityName?: pulumi.Input<string>;
    /**
     * EJBCA Certificate Profile Name to use for the certificate. Profile must exist in the connected EJBCA instance, and it
     * must correspond to the format of the certificate_signing_request.
     */
    certificateProfileName?: pulumi.Input<string>;
    /**
     * PKCS#10 PEM-encoded Certificate Signing Request
     */
    certificateSigningRequest?: pulumi.Input<string>;
    /**
     * The PEM encoded X509v3 certificate chain up to the root CA.
     */
    chain?: pulumi.Input<string>;
    /**
     * The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This
     * can be useful to renew the certificate in advance of the expiration of the current certificate. The advance update can
     * only be performed if the resource is applied within the early renewal period. (default: `0`)
     */
    earlyRenewalHours?: pulumi.Input<number>;
    /**
     * Name of the EJBCA entity to create for the certificate
     */
    endEntityName?: pulumi.Input<string>;
    /**
     * EJBCA End Entity Profile Name to use for the certificate
     */
    endEntityProfileName?: pulumi.Input<string>;
    /**
     * Was the certificate revoked by the issuing CA?
     */
    isRevoked?: pulumi.Input<boolean>;
    /**
     * Distinguished name of the certificate issuer
     */
    issuerDn?: pulumi.Input<string>;
    /**
     * Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within
     * the `early_renewal_hours`)?
     */
    readyForRenewal?: pulumi.Input<boolean>;
    /**
     * The time until which the certificate is invalid, expressed as an
     * [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) timestamp.
     */
    validityEndTime?: pulumi.Input<string>;
    /**
     * The time after which the certificate is valid, expressed as an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)
     * timestamp.
     */
    validityStartTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * An account binding ID in EJBCA to associate with issued certificates.
     */
    accountBindingId?: pulumi.Input<string>;
    /**
     * EJBCA Certificate Authority Name used to sign the certificate
     */
    certificateAuthorityName: pulumi.Input<string>;
    /**
     * EJBCA Certificate Profile Name to use for the certificate. Profile must exist in the connected EJBCA instance, and it
     * must correspond to the format of the certificate_signing_request.
     */
    certificateProfileName: pulumi.Input<string>;
    /**
     * PKCS#10 PEM-encoded Certificate Signing Request
     */
    certificateSigningRequest: pulumi.Input<string>;
    /**
     * The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This
     * can be useful to renew the certificate in advance of the expiration of the current certificate. The advance update can
     * only be performed if the resource is applied within the early renewal period. (default: `0`)
     */
    earlyRenewalHours?: pulumi.Input<number>;
    /**
     * Name of the EJBCA entity to create for the certificate
     */
    endEntityName?: pulumi.Input<string>;
    /**
     * EJBCA End Entity Profile Name to use for the certificate
     */
    endEntityProfileName: pulumi.Input<string>;
}
