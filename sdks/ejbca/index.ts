// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { GetAuthorizedEndEntityProfilesResult } from "./getAuthorizedEndEntityProfiles";
export const getAuthorizedEndEntityProfiles: typeof import("./getAuthorizedEndEntityProfiles").getAuthorizedEndEntityProfiles = null as any;
export const getAuthorizedEndEntityProfilesOutput: typeof import("./getAuthorizedEndEntityProfiles").getAuthorizedEndEntityProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizedEndEntityProfiles","getAuthorizedEndEntityProfilesOutput"], () => require("./getAuthorizedEndEntityProfiles"));

export { GetCaPemArgs, GetCaPemResult, GetCaPemOutputArgs } from "./getCaPem";
export const getCaPem: typeof import("./getCaPem").getCaPem = null as any;
export const getCaPemOutput: typeof import("./getCaPem").getCaPemOutput = null as any;
utilities.lazyLoad(exports, ["getCaPem","getCaPemOutput"], () => require("./getCaPem"));

export { GetEndEntityProfileArgs, GetEndEntityProfileResult, GetEndEntityProfileOutputArgs } from "./getEndEntityProfile";
export const getEndEntityProfile: typeof import("./getEndEntityProfile").getEndEntityProfile = null as any;
export const getEndEntityProfileOutput: typeof import("./getEndEntityProfile").getEndEntityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getEndEntityProfile","getEndEntityProfileOutput"], () => require("./getEndEntityProfile"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ejbca:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ejbca", "index/certificate", _module)
pulumi.runtime.registerResourcePackage("ejbca", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ejbca") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
