// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Acl extends pulumi.CustomResource {
    /**
     * Get an existing Acl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclState, opts?: pulumi.CustomResourceOptions): Acl {
        return new Acl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kafka:index/acl:Acl';

    /**
     * Returns true if the given object is an instance of Acl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acl.__pulumiType;
    }

    public readonly aclHost!: pulumi.Output<string>;
    public readonly aclOperation!: pulumi.Output<string>;
    public readonly aclPermissionType!: pulumi.Output<string>;
    public readonly aclPrincipal!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public readonly resourceName!: pulumi.Output<string>;
    public readonly resourcePatternTypeFilter!: pulumi.Output<string | undefined>;
    public readonly resourceType!: pulumi.Output<string>;

    /**
     * Create a Acl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclArgs | AclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclState | undefined;
            resourceInputs["aclHost"] = state ? state.aclHost : undefined;
            resourceInputs["aclOperation"] = state ? state.aclOperation : undefined;
            resourceInputs["aclPermissionType"] = state ? state.aclPermissionType : undefined;
            resourceInputs["aclPrincipal"] = state ? state.aclPrincipal : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["resourcePatternTypeFilter"] = state ? state.resourcePatternTypeFilter : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
        } else {
            const args = argsOrState as AclArgs | undefined;
            if ((!args || args.aclHost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclHost'");
            }
            if ((!args || args.aclOperation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclOperation'");
            }
            if ((!args || args.aclPermissionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclPermissionType'");
            }
            if ((!args || args.aclPrincipal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclPrincipal'");
            }
            if ((!args || args.resourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["aclHost"] = args ? args.aclHost : undefined;
            resourceInputs["aclOperation"] = args ? args.aclOperation : undefined;
            resourceInputs["aclPermissionType"] = args ? args.aclPermissionType : undefined;
            resourceInputs["aclPrincipal"] = args ? args.aclPrincipal : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["resourcePatternTypeFilter"] = args ? args.resourcePatternTypeFilter : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Acl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Acl resources.
 */
export interface AclState {
    aclHost?: pulumi.Input<string>;
    aclOperation?: pulumi.Input<string>;
    aclPermissionType?: pulumi.Input<string>;
    aclPrincipal?: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    resourceName?: pulumi.Input<string>;
    resourcePatternTypeFilter?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Acl resource.
 */
export interface AclArgs {
    aclHost: pulumi.Input<string>;
    aclOperation: pulumi.Input<string>;
    aclPermissionType: pulumi.Input<string>;
    aclPrincipal: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    resourceName: pulumi.Input<string>;
    resourcePatternTypeFilter?: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
}
