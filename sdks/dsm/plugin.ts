// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Plugin extends pulumi.CustomResource {
    /**
     * Get an existing Plugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PluginState, opts?: pulumi.CustomResourceOptions): Plugin {
        return new Plugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dsm:index/plugin:Plugin';

    /**
     * Returns true if the given object is an instance of Plugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Plugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Plugin.__pulumiType;
    }

    /**
     * Account ID from Fortanix DSM.
     */
    public /*out*/ readonly acctId!: pulumi.Output<string>;
    /**
     * If a plugin creation requires approval, then request id will be stored here.
     */
    public /*out*/ readonly approvalRequestId!: pulumi.Output<string>;
    /**
     * Plugin code that will be executed in DSM. Code should be in specified programming language.
     */
    public readonly code!: pulumi.Output<string>;
    /**
     * The creator of the security object from Fortanix DSM. * `user`: If the plugin object was created by a user, the computed
     * value will be the matching user id. * `app`: If the plugin object was created by a app, the computed value will be the
     * matching app id.
     */
    public /*out*/ readonly creator!: pulumi.Output<{[key: string]: string}>;
    /**
     * The Fortanix DSM group object id to be mapped to the plugin by default.
     */
    public readonly defaultGroup!: pulumi.Output<string>;
    /**
     * The Fortanix DSM plugin object description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether the security object is enabled or disabled. The values are true/false.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * List of other Fortanix DSM group object ids to be mapped to the plugin.
     */
    public readonly groups!: pulumi.Output<string[] | undefined>;
    /**
     * Programming language for plugin code (Default value is `LUA`).
     */
    public readonly language!: pulumi.Output<string | undefined>;
    /**
     * The Fortanix DSM plugin object name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Plugin object ID from Fortanix DSM.
     */
    public /*out*/ readonly pluginId!: pulumi.Output<string>;
    /**
     * Type of the plugin.
     */
    public readonly pluginType!: pulumi.Output<string | undefined>;

    /**
     * Create a Plugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PluginArgs | PluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PluginState | undefined;
            resourceInputs["acctId"] = state ? state.acctId : undefined;
            resourceInputs["approvalRequestId"] = state ? state.approvalRequestId : undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["defaultGroup"] = state ? state.defaultGroup : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pluginId"] = state ? state.pluginId : undefined;
            resourceInputs["pluginType"] = state ? state.pluginType : undefined;
        } else {
            const args = argsOrState as PluginArgs | undefined;
            if ((!args || args.code === undefined) && !opts.urn) {
                throw new Error("Missing required property 'code'");
            }
            if ((!args || args.defaultGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultGroup'");
            }
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["defaultGroup"] = args ? args.defaultGroup : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pluginType"] = args ? args.pluginType : undefined;
            resourceInputs["acctId"] = undefined /*out*/;
            resourceInputs["approvalRequestId"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["pluginId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Plugin.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Plugin resources.
 */
export interface PluginState {
    /**
     * Account ID from Fortanix DSM.
     */
    acctId?: pulumi.Input<string>;
    /**
     * If a plugin creation requires approval, then request id will be stored here.
     */
    approvalRequestId?: pulumi.Input<string>;
    /**
     * Plugin code that will be executed in DSM. Code should be in specified programming language.
     */
    code?: pulumi.Input<string>;
    /**
     * The creator of the security object from Fortanix DSM. * `user`: If the plugin object was created by a user, the computed
     * value will be the matching user id. * `app`: If the plugin object was created by a app, the computed value will be the
     * matching app id.
     */
    creator?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Fortanix DSM group object id to be mapped to the plugin by default.
     */
    defaultGroup?: pulumi.Input<string>;
    /**
     * The Fortanix DSM plugin object description.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the security object is enabled or disabled. The values are true/false.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of other Fortanix DSM group object ids to be mapped to the plugin.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Programming language for plugin code (Default value is `LUA`).
     */
    language?: pulumi.Input<string>;
    /**
     * The Fortanix DSM plugin object name.
     */
    name?: pulumi.Input<string>;
    /**
     * Plugin object ID from Fortanix DSM.
     */
    pluginId?: pulumi.Input<string>;
    /**
     * Type of the plugin.
     */
    pluginType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Plugin resource.
 */
export interface PluginArgs {
    /**
     * Plugin code that will be executed in DSM. Code should be in specified programming language.
     */
    code: pulumi.Input<string>;
    /**
     * The Fortanix DSM group object id to be mapped to the plugin by default.
     */
    defaultGroup: pulumi.Input<string>;
    /**
     * The Fortanix DSM plugin object description.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the security object is enabled or disabled. The values are true/false.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of other Fortanix DSM group object ids to be mapped to the plugin.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Programming language for plugin code (Default value is `LUA`).
     */
    language?: pulumi.Input<string>;
    /**
     * The Fortanix DSM plugin object name.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of the plugin.
     */
    pluginType?: pulumi.Input<string>;
}
