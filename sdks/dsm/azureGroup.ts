// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AzureGroup extends pulumi.CustomResource {
    /**
     * Get an existing AzureGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureGroupState, opts?: pulumi.CustomResourceOptions): AzureGroup {
        return new AzureGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dsm:index/azureGroup:AzureGroup';

    /**
     * Returns true if the given object is an instance of AzureGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureGroup.__pulumiType;
    }

    /**
     * The Account ID from Fortanix DSM.
     */
    public /*out*/ readonly acctId!: pulumi.Output<string>;
    /**
     * The Azure registered application id (username).
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * The creator of the group from Fortanix DSM. * `user`: If the group was created by a user, the computed value will be the
     * matching user id. * `app`: If the group was created by a app, the computed value will be the matching app id.
     */
    public /*out*/ readonly creator!: pulumi.Output<{[key: string]: string}>;
    /**
     * Description of the Azure KV Fortanix DSM group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The Azure KV group object ID from Fortanix DSM.
     */
    public /*out*/ readonly groupId!: pulumi.Output<string>;
    /**
     * The type of key vault. The default value is `Standard`. Values are Standard/Premium.
     */
    public readonly keyVaultType!: pulumi.Output<string | undefined>;
    /**
     * The Azure KV group object name in Fortanix DSM.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A secret string that a registered application in Azure uses to prove its identity (application password).
     */
    public readonly secretKey!: pulumi.Output<string>;
    /**
     * The ID of the Azure AD subscription.
     */
    public readonly subscriptionId!: pulumi.Output<string>;
    /**
     * The tenant/directory id of the Azure subscription.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * The URL of the object in an Azure KV that uniquely identifies the object.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a AzureGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureGroupArgs | AzureGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureGroupState | undefined;
            resourceInputs["acctId"] = state ? state.acctId : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["keyVaultType"] = state ? state.keyVaultType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as AzureGroupArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.secretKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["keyVaultType"] = args ? args.keyVaultType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["acctId"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["groupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AzureGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureGroup resources.
 */
export interface AzureGroupState {
    /**
     * The Account ID from Fortanix DSM.
     */
    acctId?: pulumi.Input<string>;
    /**
     * The Azure registered application id (username).
     */
    clientId?: pulumi.Input<string>;
    /**
     * The creator of the group from Fortanix DSM. * `user`: If the group was created by a user, the computed value will be the
     * matching user id. * `app`: If the group was created by a app, the computed value will be the matching app id.
     */
    creator?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the Azure KV Fortanix DSM group.
     */
    description?: pulumi.Input<string>;
    /**
     * The Azure KV group object ID from Fortanix DSM.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The type of key vault. The default value is `Standard`. Values are Standard/Premium.
     */
    keyVaultType?: pulumi.Input<string>;
    /**
     * The Azure KV group object name in Fortanix DSM.
     */
    name?: pulumi.Input<string>;
    /**
     * A secret string that a registered application in Azure uses to prove its identity (application password).
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The ID of the Azure AD subscription.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * The tenant/directory id of the Azure subscription.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The URL of the object in an Azure KV that uniquely identifies the object.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureGroup resource.
 */
export interface AzureGroupArgs {
    /**
     * The Azure registered application id (username).
     */
    clientId: pulumi.Input<string>;
    /**
     * Description of the Azure KV Fortanix DSM group.
     */
    description?: pulumi.Input<string>;
    /**
     * The type of key vault. The default value is `Standard`. Values are Standard/Premium.
     */
    keyVaultType?: pulumi.Input<string>;
    /**
     * The Azure KV group object name in Fortanix DSM.
     */
    name?: pulumi.Input<string>;
    /**
     * A secret string that a registered application in Azure uses to prove its identity (application password).
     */
    secretKey: pulumi.Input<string>;
    /**
     * The ID of the Azure AD subscription.
     */
    subscriptionId: pulumi.Input<string>;
    /**
     * The tenant/directory id of the Azure subscription.
     */
    tenantId: pulumi.Input<string>;
    /**
     * The URL of the object in an Azure KV that uniquely identifies the object.
     */
    url: pulumi.Input<string>;
}
