// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sobject extends pulumi.CustomResource {
    /**
     * Get an existing Sobject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SobjectState, opts?: pulumi.CustomResourceOptions): Sobject {
        return new Sobject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dsm:index/sobject:Sobject';

    /**
     * Returns true if the given object is an instance of Sobject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sobject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sobject.__pulumiType;
    }

    /**
     * Account ID from Fortanix DSM.
     */
    public /*out*/ readonly acctId!: pulumi.Output<string>;
    /**
     * The security object key justification policies for GCP External Key Manager. The allowed permissions are: *
     * CUSTOMER_INITIATED_SUPPORT * CUSTOMER_INITIATED_ACCESS * GOOGLE_INITIATED_SERVICE * GOOGLE_INITIATED_REVIEW *
     * GOOGLE_INITIATED_SYSTEM_OPERATION * THIRD_PARTY_DATA_REQUEST * REASON_NOT_EXPECTED * REASON_UNSPECIFIED *
     * MODIFIED_CUSTOMER_INITIATED_ACCESS * MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION * GOOGLE_RESPONSE_TO_PRODUCTION_ALERT
     */
    public readonly allowedKeyJustificationsPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * Boolean value which allows missing justifications even if not provided to the security object. The values are True /
     * False.
     */
    public readonly allowedMissingJustifications!: pulumi.Output<boolean | undefined>;
    /**
     * Security object that is copied to the current security object.
     */
    public /*out*/ readonly copiedFrom!: pulumi.Output<string>;
    /**
     * List of security objects copied by the current security object.
     */
    public /*out*/ readonly copiedTos!: pulumi.Output<string[]>;
    /**
     * The creator of the security object from Fortanix DSM. * `user`: If the security object was created by a user, the
     * computed value will be the matching user id. * `app`: If the security object was created by a app, the computed value
     * will be the matching app id.
     */
    public /*out*/ readonly creator!: pulumi.Output<{[key: string]: string}>;
    /**
     * The user defined security object attributes added to the key’s metadata from Fortanix DSM.
     */
    public readonly customMetadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * The security object description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The security object name.
     */
    public /*out*/ readonly dsmName!: pulumi.Output<string>;
    /**
     * Standardized elliptic curve. It should be given only when the obj_type is EC or ECKCDSA. | obj_type | Curve | key_ops |
     * | -------- | -------- |-------- | | `EC` | SecP192K1, SecP224K1, SecP256K1 NistP192, NistP224, NistP256, NistP384,
     * NistP521, X25519, Ed25519 | APPMANAGEABLE, SIGN, VERIFY, AGREEKEY, EXPORT | | `ECKCDSA` | SecP192K1, SecP224K1,
     * SecP256K1 NistP192, NistP224, NistP256, NistP384, NistP521 | APPMANAGEABLE, SIGN, VERIFY, EXPORT |
     */
    public readonly ellipticCurve!: pulumi.Output<string | undefined>;
    /**
     * Whether the security object is enabled or disabled. * The values are true/false.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The security object expiry date in RFC format.
     */
    public readonly expiryDate!: pulumi.Output<string | undefined>;
    /**
     * FPE specific options. obj_type should be AES. It should be given in string format like below: ```This is a sample
     * variable that specifies fpeOptions to create a Tokenization object that can tokenize credit card format data: variable
     * "fpeOptionsExample" { type = any description = "The policy document. This is a JSON formatted string." default = <<-EOF
     * { "description":"Credit card" "format": { "char_set": [ [ "0", "9" ] ], "min_length": 13, "max_length": 19,
     * "constraints": { "luhn_check": true } } } EOF } This is how we can reference this fpeOptions: fpe =
     * var.fpeOptionsExample Refer to the fpeOptions schema in https://www.fortanix.com/fortanix-restful-api-references/dsm for
     * a better understanding of the fpe body. ```
     */
    public readonly fpe!: pulumi.Output<string | undefined>;
    /**
     * integer, The base for input data. The radix should be a number from 2 to 36, inclusive. Each radix corresponds to a
     * subset of ASCII alphanumeric characters (with all letters being uppercase). For instance, a radix of 10 corresponds to a
     * character set consisting of the digits from 0 to 9, while a character set of 16 corresponds to a character set
     * consisting of all hexadecimal digits (with letters A-F being uppercase).
     */
    public readonly fpeRadix!: pulumi.Output<number | undefined>;
    /**
     * The security object group assignment.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * Hashing Algorithm for KCDSA and ECKCDSA. | obj_type | hash_alg | | -------- | -------- | | `ECKCDSA` | SHA1,SHA224,
     * SHA256, SHA384, SHA521| | `KCDSA` | SHA224, SHA256 |
     */
    public readonly hashAlg!: pulumi.Output<string | undefined>;
    /**
     * The security object key permission from Fortanix DSM. * Default is to allow all permissions except EXPORT
     */
    public readonly keyOps!: pulumi.Output<string[]>;
    /**
     * The security object size. It should not be given only when the obj_type is EC and ECKCDSA. | obj_type | key_size |
     * key_ops | | -------- | -------- |-------- | | `RSA` | 1024, 2048, 4096, 8192 | APPMANAGEABLE, SIGN, VERIFY, ENCRYPT,
     * DECRYPT, WRAPKEY, UNWRAPKEY, EXPORT | | `DSA` | 2048, 3072 | APPMANAGEABLE, SIGN, VERIFY, EXPORT | | `KCDSA` | 2048 |
     * APPMANAGEABLE, SIGN, VERIFY, EXPORT | | `AES` | 128, 192, 256 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY,
     * MACGENERATE, MACVERIFY, APPMANAGEABLE, EXPORT | | `DES` | 56 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY,
     * APPMANAGEABLE, EXPORT | | `DES3` | 112, 168 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY, MACGENERATE, MACVERIFY,
     * APPMANAGEABLE, EXPORT | | `ARIA` | 128, 192, 256 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY, MACGENERATE,
     * MACVERIFY, APPMANAGEABLE, EXPORT | | `SEED` | 128 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY, EXPORT |
     */
    public readonly keySize!: pulumi.Output<number | undefined>;
    /**
     * The security object ID from Fortanix DSM.
     */
    public /*out*/ readonly kid!: pulumi.Output<string>;
    /**
     * The security object name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The security object type. * `Supported security objects`: AES, DES, DES3, RSA, DSA, KCDSA, EC, ECKCDSA, ARIA, SEED and
     * Tokenization(fpe).
     */
    public readonly objType!: pulumi.Output<string>;
    /**
     * Public key (if ”RSA” obj_type is specified).
     */
    public /*out*/ readonly pubKey!: pulumi.Output<string>;
    /**
     * Replaced by a security object.
     */
    public /*out*/ readonly replaced!: pulumi.Output<string>;
    /**
     * Replacement of a security object.
     */
    public /*out*/ readonly replacement!: pulumi.Output<string>;
    /**
     * specify method to use for key rotation.
     */
    public readonly rotate!: pulumi.Output<string | undefined>;
    /**
     * Name of the security object to be rotated from.
     */
    public readonly rotateFrom!: pulumi.Output<string | undefined>;
    /**
     * Policy to rotate a Security Object, configure the below parameters. * `interval_days`: Rotate the key for every given
     * number of days. * `interval_months`: Rotate the key for every given number of months. * `effective_at`: Start of the
     * rotation policy time. * `rotate_copied_keys`: Enable key rotation for copied keys. * `deactivate_rotated_key`:
     * Deactivate original key after rotation true/false. * **Note:** Either interval_days or interval_months should be given,
     * but not both.
     */
    public readonly rotationPolicy!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * rsaOptions passed as a string (if ”RSA” obj_type is specified). The string should match the 'rsa' value in Post body
     * while working with Fortanix Rest API. For Example: `rsa =
     * "{\"encryption_policy\":[{\"padding\":{\"RAW_DECRYPT\":{}}},{\"padding\":{\"OAEP\":{\"mgf\":{\"mgf1\":{\"hash\":\"SHA1\"}}}}}],\"signature_policy\":[{\"padding\":{\"PKCS1_V15\":{}}},{\"padding\":{\"PSS\":{\"mgf\":{\"mgf1\":{\"hash\":\"SHA384\"}}}}}]}"`
     */
    public readonly rsa!: pulumi.Output<string | undefined>;
    /**
     * Open SSH public key (if ”RSA” obj_type is specified).
     */
    public /*out*/ readonly sshPubKey!: pulumi.Output<string>;
    /**
     * The state of the secret security object. * Allowed states are: None, PreActive, Active, Deactivated, Compromised,
     * Destroyed, Deleted.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Subgroup Size for DSA and ECKCDSA. The allowed Subgroup Sizes are 224 and 256. | obj_type | subgroup_size | usage |
     * -------- | -------- | -------- | | `DSA` | 224, 256| 224: When DSA key_size is 2048. 256: When DSA key_size is 2048 and
     * 3072. | `KCDSA` | 224, 256| 224, 256: When KCDSA key_size is 2048.
     */
    public readonly subgroupSize!: pulumi.Output<number | undefined>;
    /**
     * Sobject content when importing content.
     */
    public readonly value!: pulumi.Output<string | undefined>;

    /**
     * Create a Sobject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SobjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SobjectArgs | SobjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SobjectState | undefined;
            resourceInputs["acctId"] = state ? state.acctId : undefined;
            resourceInputs["allowedKeyJustificationsPolicies"] = state ? state.allowedKeyJustificationsPolicies : undefined;
            resourceInputs["allowedMissingJustifications"] = state ? state.allowedMissingJustifications : undefined;
            resourceInputs["copiedFrom"] = state ? state.copiedFrom : undefined;
            resourceInputs["copiedTos"] = state ? state.copiedTos : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["customMetadata"] = state ? state.customMetadata : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dsmName"] = state ? state.dsmName : undefined;
            resourceInputs["ellipticCurve"] = state ? state.ellipticCurve : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expiryDate"] = state ? state.expiryDate : undefined;
            resourceInputs["fpe"] = state ? state.fpe : undefined;
            resourceInputs["fpeRadix"] = state ? state.fpeRadix : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["hashAlg"] = state ? state.hashAlg : undefined;
            resourceInputs["keyOps"] = state ? state.keyOps : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["kid"] = state ? state.kid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objType"] = state ? state.objType : undefined;
            resourceInputs["pubKey"] = state ? state.pubKey : undefined;
            resourceInputs["replaced"] = state ? state.replaced : undefined;
            resourceInputs["replacement"] = state ? state.replacement : undefined;
            resourceInputs["rotate"] = state ? state.rotate : undefined;
            resourceInputs["rotateFrom"] = state ? state.rotateFrom : undefined;
            resourceInputs["rotationPolicy"] = state ? state.rotationPolicy : undefined;
            resourceInputs["rsa"] = state ? state.rsa : undefined;
            resourceInputs["sshPubKey"] = state ? state.sshPubKey : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subgroupSize"] = state ? state.subgroupSize : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as SobjectArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.objType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objType'");
            }
            resourceInputs["allowedKeyJustificationsPolicies"] = args ? args.allowedKeyJustificationsPolicies : undefined;
            resourceInputs["allowedMissingJustifications"] = args ? args.allowedMissingJustifications : undefined;
            resourceInputs["customMetadata"] = args ? args.customMetadata : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ellipticCurve"] = args ? args.ellipticCurve : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["expiryDate"] = args ? args.expiryDate : undefined;
            resourceInputs["fpe"] = args ? args.fpe : undefined;
            resourceInputs["fpeRadix"] = args ? args.fpeRadix : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["hashAlg"] = args ? args.hashAlg : undefined;
            resourceInputs["keyOps"] = args ? args.keyOps : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objType"] = args ? args.objType : undefined;
            resourceInputs["rotate"] = args ? args.rotate : undefined;
            resourceInputs["rotateFrom"] = args ? args.rotateFrom : undefined;
            resourceInputs["rotationPolicy"] = args ? args.rotationPolicy : undefined;
            resourceInputs["rsa"] = args ? args.rsa : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["subgroupSize"] = args ? args.subgroupSize : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["acctId"] = undefined /*out*/;
            resourceInputs["copiedFrom"] = undefined /*out*/;
            resourceInputs["copiedTos"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["dsmName"] = undefined /*out*/;
            resourceInputs["kid"] = undefined /*out*/;
            resourceInputs["pubKey"] = undefined /*out*/;
            resourceInputs["replaced"] = undefined /*out*/;
            resourceInputs["replacement"] = undefined /*out*/;
            resourceInputs["sshPubKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sobject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sobject resources.
 */
export interface SobjectState {
    /**
     * Account ID from Fortanix DSM.
     */
    acctId?: pulumi.Input<string>;
    /**
     * The security object key justification policies for GCP External Key Manager. The allowed permissions are: *
     * CUSTOMER_INITIATED_SUPPORT * CUSTOMER_INITIATED_ACCESS * GOOGLE_INITIATED_SERVICE * GOOGLE_INITIATED_REVIEW *
     * GOOGLE_INITIATED_SYSTEM_OPERATION * THIRD_PARTY_DATA_REQUEST * REASON_NOT_EXPECTED * REASON_UNSPECIFIED *
     * MODIFIED_CUSTOMER_INITIATED_ACCESS * MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION * GOOGLE_RESPONSE_TO_PRODUCTION_ALERT
     */
    allowedKeyJustificationsPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean value which allows missing justifications even if not provided to the security object. The values are True /
     * False.
     */
    allowedMissingJustifications?: pulumi.Input<boolean>;
    /**
     * Security object that is copied to the current security object.
     */
    copiedFrom?: pulumi.Input<string>;
    /**
     * List of security objects copied by the current security object.
     */
    copiedTos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The creator of the security object from Fortanix DSM. * `user`: If the security object was created by a user, the
     * computed value will be the matching user id. * `app`: If the security object was created by a app, the computed value
     * will be the matching app id.
     */
    creator?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The user defined security object attributes added to the key’s metadata from Fortanix DSM.
     */
    customMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The security object description.
     */
    description?: pulumi.Input<string>;
    /**
     * The security object name.
     */
    dsmName?: pulumi.Input<string>;
    /**
     * Standardized elliptic curve. It should be given only when the obj_type is EC or ECKCDSA. | obj_type | Curve | key_ops |
     * | -------- | -------- |-------- | | `EC` | SecP192K1, SecP224K1, SecP256K1 NistP192, NistP224, NistP256, NistP384,
     * NistP521, X25519, Ed25519 | APPMANAGEABLE, SIGN, VERIFY, AGREEKEY, EXPORT | | `ECKCDSA` | SecP192K1, SecP224K1,
     * SecP256K1 NistP192, NistP224, NistP256, NistP384, NistP521 | APPMANAGEABLE, SIGN, VERIFY, EXPORT |
     */
    ellipticCurve?: pulumi.Input<string>;
    /**
     * Whether the security object is enabled or disabled. * The values are true/false.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The security object expiry date in RFC format.
     */
    expiryDate?: pulumi.Input<string>;
    /**
     * FPE specific options. obj_type should be AES. It should be given in string format like below: ```This is a sample
     * variable that specifies fpeOptions to create a Tokenization object that can tokenize credit card format data: variable
     * "fpeOptionsExample" { type = any description = "The policy document. This is a JSON formatted string." default = <<-EOF
     * { "description":"Credit card" "format": { "char_set": [ [ "0", "9" ] ], "min_length": 13, "max_length": 19,
     * "constraints": { "luhn_check": true } } } EOF } This is how we can reference this fpeOptions: fpe =
     * var.fpeOptionsExample Refer to the fpeOptions schema in https://www.fortanix.com/fortanix-restful-api-references/dsm for
     * a better understanding of the fpe body. ```
     */
    fpe?: pulumi.Input<string>;
    /**
     * integer, The base for input data. The radix should be a number from 2 to 36, inclusive. Each radix corresponds to a
     * subset of ASCII alphanumeric characters (with all letters being uppercase). For instance, a radix of 10 corresponds to a
     * character set consisting of the digits from 0 to 9, while a character set of 16 corresponds to a character set
     * consisting of all hexadecimal digits (with letters A-F being uppercase).
     */
    fpeRadix?: pulumi.Input<number>;
    /**
     * The security object group assignment.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Hashing Algorithm for KCDSA and ECKCDSA. | obj_type | hash_alg | | -------- | -------- | | `ECKCDSA` | SHA1,SHA224,
     * SHA256, SHA384, SHA521| | `KCDSA` | SHA224, SHA256 |
     */
    hashAlg?: pulumi.Input<string>;
    /**
     * The security object key permission from Fortanix DSM. * Default is to allow all permissions except EXPORT
     */
    keyOps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The security object size. It should not be given only when the obj_type is EC and ECKCDSA. | obj_type | key_size |
     * key_ops | | -------- | -------- |-------- | | `RSA` | 1024, 2048, 4096, 8192 | APPMANAGEABLE, SIGN, VERIFY, ENCRYPT,
     * DECRYPT, WRAPKEY, UNWRAPKEY, EXPORT | | `DSA` | 2048, 3072 | APPMANAGEABLE, SIGN, VERIFY, EXPORT | | `KCDSA` | 2048 |
     * APPMANAGEABLE, SIGN, VERIFY, EXPORT | | `AES` | 128, 192, 256 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY,
     * MACGENERATE, MACVERIFY, APPMANAGEABLE, EXPORT | | `DES` | 56 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY,
     * APPMANAGEABLE, EXPORT | | `DES3` | 112, 168 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY, MACGENERATE, MACVERIFY,
     * APPMANAGEABLE, EXPORT | | `ARIA` | 128, 192, 256 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY, MACGENERATE,
     * MACVERIFY, APPMANAGEABLE, EXPORT | | `SEED` | 128 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY, EXPORT |
     */
    keySize?: pulumi.Input<number>;
    /**
     * The security object ID from Fortanix DSM.
     */
    kid?: pulumi.Input<string>;
    /**
     * The security object name.
     */
    name?: pulumi.Input<string>;
    /**
     * The security object type. * `Supported security objects`: AES, DES, DES3, RSA, DSA, KCDSA, EC, ECKCDSA, ARIA, SEED and
     * Tokenization(fpe).
     */
    objType?: pulumi.Input<string>;
    /**
     * Public key (if ”RSA” obj_type is specified).
     */
    pubKey?: pulumi.Input<string>;
    /**
     * Replaced by a security object.
     */
    replaced?: pulumi.Input<string>;
    /**
     * Replacement of a security object.
     */
    replacement?: pulumi.Input<string>;
    /**
     * specify method to use for key rotation.
     */
    rotate?: pulumi.Input<string>;
    /**
     * Name of the security object to be rotated from.
     */
    rotateFrom?: pulumi.Input<string>;
    /**
     * Policy to rotate a Security Object, configure the below parameters. * `interval_days`: Rotate the key for every given
     * number of days. * `interval_months`: Rotate the key for every given number of months. * `effective_at`: Start of the
     * rotation policy time. * `rotate_copied_keys`: Enable key rotation for copied keys. * `deactivate_rotated_key`:
     * Deactivate original key after rotation true/false. * **Note:** Either interval_days or interval_months should be given,
     * but not both.
     */
    rotationPolicy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * rsaOptions passed as a string (if ”RSA” obj_type is specified). The string should match the 'rsa' value in Post body
     * while working with Fortanix Rest API. For Example: `rsa =
     * "{\"encryption_policy\":[{\"padding\":{\"RAW_DECRYPT\":{}}},{\"padding\":{\"OAEP\":{\"mgf\":{\"mgf1\":{\"hash\":\"SHA1\"}}}}}],\"signature_policy\":[{\"padding\":{\"PKCS1_V15\":{}}},{\"padding\":{\"PSS\":{\"mgf\":{\"mgf1\":{\"hash\":\"SHA384\"}}}}}]}"`
     */
    rsa?: pulumi.Input<string>;
    /**
     * Open SSH public key (if ”RSA” obj_type is specified).
     */
    sshPubKey?: pulumi.Input<string>;
    /**
     * The state of the secret security object. * Allowed states are: None, PreActive, Active, Deactivated, Compromised,
     * Destroyed, Deleted.
     */
    state?: pulumi.Input<string>;
    /**
     * Subgroup Size for DSA and ECKCDSA. The allowed Subgroup Sizes are 224 and 256. | obj_type | subgroup_size | usage |
     * -------- | -------- | -------- | | `DSA` | 224, 256| 224: When DSA key_size is 2048. 256: When DSA key_size is 2048 and
     * 3072. | `KCDSA` | 224, 256| 224, 256: When KCDSA key_size is 2048.
     */
    subgroupSize?: pulumi.Input<number>;
    /**
     * Sobject content when importing content.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sobject resource.
 */
export interface SobjectArgs {
    /**
     * The security object key justification policies for GCP External Key Manager. The allowed permissions are: *
     * CUSTOMER_INITIATED_SUPPORT * CUSTOMER_INITIATED_ACCESS * GOOGLE_INITIATED_SERVICE * GOOGLE_INITIATED_REVIEW *
     * GOOGLE_INITIATED_SYSTEM_OPERATION * THIRD_PARTY_DATA_REQUEST * REASON_NOT_EXPECTED * REASON_UNSPECIFIED *
     * MODIFIED_CUSTOMER_INITIATED_ACCESS * MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION * GOOGLE_RESPONSE_TO_PRODUCTION_ALERT
     */
    allowedKeyJustificationsPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean value which allows missing justifications even if not provided to the security object. The values are True /
     * False.
     */
    allowedMissingJustifications?: pulumi.Input<boolean>;
    /**
     * The user defined security object attributes added to the key’s metadata from Fortanix DSM.
     */
    customMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The security object description.
     */
    description?: pulumi.Input<string>;
    /**
     * Standardized elliptic curve. It should be given only when the obj_type is EC or ECKCDSA. | obj_type | Curve | key_ops |
     * | -------- | -------- |-------- | | `EC` | SecP192K1, SecP224K1, SecP256K1 NistP192, NistP224, NistP256, NistP384,
     * NistP521, X25519, Ed25519 | APPMANAGEABLE, SIGN, VERIFY, AGREEKEY, EXPORT | | `ECKCDSA` | SecP192K1, SecP224K1,
     * SecP256K1 NistP192, NistP224, NistP256, NistP384, NistP521 | APPMANAGEABLE, SIGN, VERIFY, EXPORT |
     */
    ellipticCurve?: pulumi.Input<string>;
    /**
     * Whether the security object is enabled or disabled. * The values are true/false.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The security object expiry date in RFC format.
     */
    expiryDate?: pulumi.Input<string>;
    /**
     * FPE specific options. obj_type should be AES. It should be given in string format like below: ```This is a sample
     * variable that specifies fpeOptions to create a Tokenization object that can tokenize credit card format data: variable
     * "fpeOptionsExample" { type = any description = "The policy document. This is a JSON formatted string." default = <<-EOF
     * { "description":"Credit card" "format": { "char_set": [ [ "0", "9" ] ], "min_length": 13, "max_length": 19,
     * "constraints": { "luhn_check": true } } } EOF } This is how we can reference this fpeOptions: fpe =
     * var.fpeOptionsExample Refer to the fpeOptions schema in https://www.fortanix.com/fortanix-restful-api-references/dsm for
     * a better understanding of the fpe body. ```
     */
    fpe?: pulumi.Input<string>;
    /**
     * integer, The base for input data. The radix should be a number from 2 to 36, inclusive. Each radix corresponds to a
     * subset of ASCII alphanumeric characters (with all letters being uppercase). For instance, a radix of 10 corresponds to a
     * character set consisting of the digits from 0 to 9, while a character set of 16 corresponds to a character set
     * consisting of all hexadecimal digits (with letters A-F being uppercase).
     */
    fpeRadix?: pulumi.Input<number>;
    /**
     * The security object group assignment.
     */
    groupId: pulumi.Input<string>;
    /**
     * Hashing Algorithm for KCDSA and ECKCDSA. | obj_type | hash_alg | | -------- | -------- | | `ECKCDSA` | SHA1,SHA224,
     * SHA256, SHA384, SHA521| | `KCDSA` | SHA224, SHA256 |
     */
    hashAlg?: pulumi.Input<string>;
    /**
     * The security object key permission from Fortanix DSM. * Default is to allow all permissions except EXPORT
     */
    keyOps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The security object size. It should not be given only when the obj_type is EC and ECKCDSA. | obj_type | key_size |
     * key_ops | | -------- | -------- |-------- | | `RSA` | 1024, 2048, 4096, 8192 | APPMANAGEABLE, SIGN, VERIFY, ENCRYPT,
     * DECRYPT, WRAPKEY, UNWRAPKEY, EXPORT | | `DSA` | 2048, 3072 | APPMANAGEABLE, SIGN, VERIFY, EXPORT | | `KCDSA` | 2048 |
     * APPMANAGEABLE, SIGN, VERIFY, EXPORT | | `AES` | 128, 192, 256 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY,
     * MACGENERATE, MACVERIFY, APPMANAGEABLE, EXPORT | | `DES` | 56 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY,
     * APPMANAGEABLE, EXPORT | | `DES3` | 112, 168 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY, MACGENERATE, MACVERIFY,
     * APPMANAGEABLE, EXPORT | | `ARIA` | 128, 192, 256 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY, MACGENERATE,
     * MACVERIFY, APPMANAGEABLE, EXPORT | | `SEED` | 128 | ENCRYPT, DECRYPT, WRAPKEY, UNWRAPKEY, DERIVEKEY, EXPORT |
     */
    keySize?: pulumi.Input<number>;
    /**
     * The security object name.
     */
    name?: pulumi.Input<string>;
    /**
     * The security object type. * `Supported security objects`: AES, DES, DES3, RSA, DSA, KCDSA, EC, ECKCDSA, ARIA, SEED and
     * Tokenization(fpe).
     */
    objType: pulumi.Input<string>;
    /**
     * specify method to use for key rotation.
     */
    rotate?: pulumi.Input<string>;
    /**
     * Name of the security object to be rotated from.
     */
    rotateFrom?: pulumi.Input<string>;
    /**
     * Policy to rotate a Security Object, configure the below parameters. * `interval_days`: Rotate the key for every given
     * number of days. * `interval_months`: Rotate the key for every given number of months. * `effective_at`: Start of the
     * rotation policy time. * `rotate_copied_keys`: Enable key rotation for copied keys. * `deactivate_rotated_key`:
     * Deactivate original key after rotation true/false. * **Note:** Either interval_days or interval_months should be given,
     * but not both.
     */
    rotationPolicy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * rsaOptions passed as a string (if ”RSA” obj_type is specified). The string should match the 'rsa' value in Post body
     * while working with Fortanix Rest API. For Example: `rsa =
     * "{\"encryption_policy\":[{\"padding\":{\"RAW_DECRYPT\":{}}},{\"padding\":{\"OAEP\":{\"mgf\":{\"mgf1\":{\"hash\":\"SHA1\"}}}}}],\"signature_policy\":[{\"padding\":{\"PKCS1_V15\":{}}},{\"padding\":{\"PSS\":{\"mgf\":{\"mgf1\":{\"hash\":\"SHA384\"}}}}}]}"`
     */
    rsa?: pulumi.Input<string>;
    /**
     * The state of the secret security object. * Allowed states are: None, PreActive, Active, Deactivated, Compromised,
     * Destroyed, Deleted.
     */
    state?: pulumi.Input<string>;
    /**
     * Subgroup Size for DSA and ECKCDSA. The allowed Subgroup Sizes are 224 and 256. | obj_type | subgroup_size | usage |
     * -------- | -------- | -------- | | `DSA` | 224, 256| 224: When DSA key_size is 2048. 256: When DSA key_size is 2048 and
     * 3072. | `KCDSA` | 224, 256| 224, 256: When KCDSA key_size is 2048.
     */
    subgroupSize?: pulumi.Input<number>;
    /**
     * Sobject content when importing content.
     */
    value?: pulumi.Input<string>;
}
