// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccCryptoPolicyArgs, AccCryptoPolicyState } from "./accCryptoPolicy";
export type AccCryptoPolicy = import("./accCryptoPolicy").AccCryptoPolicy;
export const AccCryptoPolicy: typeof import("./accCryptoPolicy").AccCryptoPolicy = null as any;
utilities.lazyLoad(exports, ["AccCryptoPolicy"], () => require("./accCryptoPolicy"));

export { AccQuorumPolicyArgs, AccQuorumPolicyState } from "./accQuorumPolicy";
export type AccQuorumPolicy = import("./accQuorumPolicy").AccQuorumPolicy;
export const AccQuorumPolicy: typeof import("./accQuorumPolicy").AccQuorumPolicy = null as any;
utilities.lazyLoad(exports, ["AccQuorumPolicy"], () => require("./accQuorumPolicy"));

export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { AppNonApiKeyArgs, AppNonApiKeyState } from "./appNonApiKey";
export type AppNonApiKey = import("./appNonApiKey").AppNonApiKey;
export const AppNonApiKey: typeof import("./appNonApiKey").AppNonApiKey = null as any;
utilities.lazyLoad(exports, ["AppNonApiKey"], () => require("./appNonApiKey"));

export { AwsGroupArgs, AwsGroupState } from "./awsGroup";
export type AwsGroup = import("./awsGroup").AwsGroup;
export const AwsGroup: typeof import("./awsGroup").AwsGroup = null as any;
utilities.lazyLoad(exports, ["AwsGroup"], () => require("./awsGroup"));

export { AwsSobjectArgs, AwsSobjectState } from "./awsSobject";
export type AwsSobject = import("./awsSobject").AwsSobject;
export const AwsSobject: typeof import("./awsSobject").AwsSobject = null as any;
utilities.lazyLoad(exports, ["AwsSobject"], () => require("./awsSobject"));

export { AzureGroupArgs, AzureGroupState } from "./azureGroup";
export type AzureGroup = import("./azureGroup").AzureGroup;
export const AzureGroup: typeof import("./azureGroup").AzureGroup = null as any;
utilities.lazyLoad(exports, ["AzureGroup"], () => require("./azureGroup"));

export { AzureSobjectArgs, AzureSobjectState } from "./azureSobject";
export type AzureSobject = import("./azureSobject").AzureSobject;
export const AzureSobject: typeof import("./azureSobject").AzureSobject = null as any;
utilities.lazyLoad(exports, ["AzureSobject"], () => require("./azureSobject"));

export { CsrArgs, CsrState } from "./csr";
export type Csr = import("./csr").Csr;
export const Csr: typeof import("./csr").Csr = null as any;
utilities.lazyLoad(exports, ["Csr"], () => require("./csr"));

export { ExistingGroupArgs, ExistingGroupState } from "./existingGroup";
export type ExistingGroup = import("./existingGroup").ExistingGroup;
export const ExistingGroup: typeof import("./existingGroup").ExistingGroup = null as any;
utilities.lazyLoad(exports, ["ExistingGroup"], () => require("./existingGroup"));

export { GcpEkmSaArgs, GcpEkmSaState } from "./gcpEkmSa";
export type GcpEkmSa = import("./gcpEkmSa").GcpEkmSa;
export const GcpEkmSa: typeof import("./gcpEkmSa").GcpEkmSa = null as any;
utilities.lazyLoad(exports, ["GcpEkmSa"], () => require("./gcpEkmSa"));

export { GcpSobjectArgs, GcpSobjectState } from "./gcpSobject";
export type GcpSobject = import("./gcpSobject").GcpSobject;
export const GcpSobject: typeof import("./gcpSobject").GcpSobject = null as any;
utilities.lazyLoad(exports, ["GcpSobject"], () => require("./gcpSobject"));

export { GetAppArgs, GetAppResult, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { GetAwsGroupArgs, GetAwsGroupResult, GetAwsGroupOutputArgs } from "./getAwsGroup";
export const getAwsGroup: typeof import("./getAwsGroup").getAwsGroup = null as any;
export const getAwsGroupOutput: typeof import("./getAwsGroup").getAwsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAwsGroup","getAwsGroupOutput"], () => require("./getAwsGroup"));

export { GetAzureGroupArgs, GetAzureGroupResult, GetAzureGroupOutputArgs } from "./getAzureGroup";
export const getAzureGroup: typeof import("./getAzureGroup").getAzureGroup = null as any;
export const getAzureGroupOutput: typeof import("./getAzureGroup").getAzureGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAzureGroup","getAzureGroupOutput"], () => require("./getAzureGroup"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetPluginArgs, GetPluginResult, GetPluginOutputArgs } from "./getPlugin";
export const getPlugin: typeof import("./getPlugin").getPlugin = null as any;
export const getPluginOutput: typeof import("./getPlugin").getPluginOutput = null as any;
utilities.lazyLoad(exports, ["getPlugin","getPluginOutput"], () => require("./getPlugin"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GetSobjectArgs, GetSobjectResult, GetSobjectOutputArgs } from "./getSobject";
export const getSobject: typeof import("./getSobject").getSobject = null as any;
export const getSobjectOutput: typeof import("./getSobject").getSobjectOutput = null as any;
utilities.lazyLoad(exports, ["getSobject","getSobjectOutput"], () => require("./getSobject"));

export { GetSobjectInfoArgs, GetSobjectInfoResult, GetSobjectInfoOutputArgs } from "./getSobjectInfo";
export const getSobjectInfo: typeof import("./getSobjectInfo").getSobjectInfo = null as any;
export const getSobjectInfoOutput: typeof import("./getSobjectInfo").getSobjectInfoOutput = null as any;
utilities.lazyLoad(exports, ["getSobjectInfo","getSobjectInfoOutput"], () => require("./getSobjectInfo"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetVersionArgs, GetVersionResult, GetVersionOutputArgs } from "./getVersion";
export const getVersion: typeof import("./getVersion").getVersion = null as any;
export const getVersionOutput: typeof import("./getVersion").getVersionOutput = null as any;
utilities.lazyLoad(exports, ["getVersion","getVersionOutput"], () => require("./getVersion"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupCryptoPolicyArgs, GroupCryptoPolicyState } from "./groupCryptoPolicy";
export type GroupCryptoPolicy = import("./groupCryptoPolicy").GroupCryptoPolicy;
export const GroupCryptoPolicy: typeof import("./groupCryptoPolicy").GroupCryptoPolicy = null as any;
utilities.lazyLoad(exports, ["GroupCryptoPolicy"], () => require("./groupCryptoPolicy"));

export { GroupUserRoleArgs, GroupUserRoleState } from "./groupUserRole";
export type GroupUserRole = import("./groupUserRole").GroupUserRole;
export const GroupUserRole: typeof import("./groupUserRole").GroupUserRole = null as any;
utilities.lazyLoad(exports, ["GroupUserRole"], () => require("./groupUserRole"));

export { PluginArgs, PluginState } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SobjectArgs, SobjectState } from "./sobject";
export type Sobject = import("./sobject").Sobject;
export const Sobject: typeof import("./sobject").Sobject = null as any;
utilities.lazyLoad(exports, ["Sobject"], () => require("./sobject"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "dsm:index/accCryptoPolicy:AccCryptoPolicy":
                return new AccCryptoPolicy(name, <any>undefined, { urn })
            case "dsm:index/accQuorumPolicy:AccQuorumPolicy":
                return new AccQuorumPolicy(name, <any>undefined, { urn })
            case "dsm:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "dsm:index/appNonApiKey:AppNonApiKey":
                return new AppNonApiKey(name, <any>undefined, { urn })
            case "dsm:index/awsGroup:AwsGroup":
                return new AwsGroup(name, <any>undefined, { urn })
            case "dsm:index/awsSobject:AwsSobject":
                return new AwsSobject(name, <any>undefined, { urn })
            case "dsm:index/azureGroup:AzureGroup":
                return new AzureGroup(name, <any>undefined, { urn })
            case "dsm:index/azureSobject:AzureSobject":
                return new AzureSobject(name, <any>undefined, { urn })
            case "dsm:index/csr:Csr":
                return new Csr(name, <any>undefined, { urn })
            case "dsm:index/existingGroup:ExistingGroup":
                return new ExistingGroup(name, <any>undefined, { urn })
            case "dsm:index/gcpEkmSa:GcpEkmSa":
                return new GcpEkmSa(name, <any>undefined, { urn })
            case "dsm:index/gcpSobject:GcpSobject":
                return new GcpSobject(name, <any>undefined, { urn })
            case "dsm:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "dsm:index/groupCryptoPolicy:GroupCryptoPolicy":
                return new GroupCryptoPolicy(name, <any>undefined, { urn })
            case "dsm:index/groupUserRole:GroupUserRole":
                return new GroupUserRole(name, <any>undefined, { urn })
            case "dsm:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "dsm:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "dsm:index/sobject:Sobject":
                return new Sobject(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("dsm", "index/accCryptoPolicy", _module)
pulumi.runtime.registerResourceModule("dsm", "index/accQuorumPolicy", _module)
pulumi.runtime.registerResourceModule("dsm", "index/app", _module)
pulumi.runtime.registerResourceModule("dsm", "index/appNonApiKey", _module)
pulumi.runtime.registerResourceModule("dsm", "index/awsGroup", _module)
pulumi.runtime.registerResourceModule("dsm", "index/awsSobject", _module)
pulumi.runtime.registerResourceModule("dsm", "index/azureGroup", _module)
pulumi.runtime.registerResourceModule("dsm", "index/azureSobject", _module)
pulumi.runtime.registerResourceModule("dsm", "index/csr", _module)
pulumi.runtime.registerResourceModule("dsm", "index/existingGroup", _module)
pulumi.runtime.registerResourceModule("dsm", "index/gcpEkmSa", _module)
pulumi.runtime.registerResourceModule("dsm", "index/gcpSobject", _module)
pulumi.runtime.registerResourceModule("dsm", "index/group", _module)
pulumi.runtime.registerResourceModule("dsm", "index/groupCryptoPolicy", _module)
pulumi.runtime.registerResourceModule("dsm", "index/groupUserRole", _module)
pulumi.runtime.registerResourceModule("dsm", "index/plugin", _module)
pulumi.runtime.registerResourceModule("dsm", "index/secret", _module)
pulumi.runtime.registerResourceModule("dsm", "index/sobject", _module)
pulumi.runtime.registerResourcePackage("dsm", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:dsm") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
