// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Secret extends pulumi.CustomResource {
    /**
     * Get an existing Secret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretState, opts?: pulumi.CustomResourceOptions): Secret {
        return new Secret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dsm:index/secret:Secret';

    /**
     * Returns true if the given object is an instance of Secret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Secret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Secret.__pulumiType;
    }

    /**
     * Account ID from Fortanix DSM.
     */
    public /*out*/ readonly acctId!: pulumi.Output<string>;
    /**
     * Security object that is copied to the current security object.
     */
    public /*out*/ readonly copiedFrom!: pulumi.Output<string>;
    /**
     * List of security objects copied by the current security object.
     */
    public /*out*/ readonly copiedTos!: pulumi.Output<string[]>;
    /**
     * The creator of the security object from Fortanix DSM. * `user`: If the security object was created by a user, the
     * computed value will be the matching user id. * `app`: If the security object was created by a app, the computed value
     * will be the matching app id.
     */
    public /*out*/ readonly creator!: pulumi.Output<{[key: string]: string}>;
    /**
     * The user defined security object attributes added to the key’s metadata.
     */
    public readonly customMetadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The Fortanix DSM security object description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether the security object is Enabled or Disabled. The values are true/false.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The security object expiry date in RFC format.
     */
    public readonly expiryDate!: pulumi.Output<string | undefined>;
    /**
     * The Fortanix DSM security object group assignment.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The security object key permission from Fortanix DSM. * Default is to allow all permissions.
     */
    public /*out*/ readonly keyOps!: pulumi.Output<string[]>;
    /**
     * Security object ID from Fortanix DSM.
     */
    public /*out*/ readonly kid!: pulumi.Output<string>;
    /**
     * The Fortanix DSM secret security object name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The security object key type from Fortanix DSM.
     */
    public /*out*/ readonly objType!: pulumi.Output<string>;
    /**
     * Replaced by a security object.
     */
    public /*out*/ readonly replaced!: pulumi.Output<string>;
    /**
     * Replacement of a security object.
     */
    public /*out*/ readonly replacement!: pulumi.Output<string>;
    /**
     * boolean value true/false to enable/disable rotation.
     */
    public readonly rotate!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the security object to be rotated from.
     */
    public readonly rotateFrom!: pulumi.Output<string | undefined>;
    /**
     * The state of the secret security object. * Allowed states are: None, PreActive, Active, Deactivated, Compromised,
     * Destroyed, Deleted.
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * The secret value
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a Secret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretArgs | SecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretState | undefined;
            resourceInputs["acctId"] = state ? state.acctId : undefined;
            resourceInputs["copiedFrom"] = state ? state.copiedFrom : undefined;
            resourceInputs["copiedTos"] = state ? state.copiedTos : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["customMetadata"] = state ? state.customMetadata : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expiryDate"] = state ? state.expiryDate : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["keyOps"] = state ? state.keyOps : undefined;
            resourceInputs["kid"] = state ? state.kid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objType"] = state ? state.objType : undefined;
            resourceInputs["replaced"] = state ? state.replaced : undefined;
            resourceInputs["replacement"] = state ? state.replacement : undefined;
            resourceInputs["rotate"] = state ? state.rotate : undefined;
            resourceInputs["rotateFrom"] = state ? state.rotateFrom : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as SecretArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["customMetadata"] = args ? args.customMetadata : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["expiryDate"] = args ? args.expiryDate : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rotate"] = args ? args.rotate : undefined;
            resourceInputs["rotateFrom"] = args ? args.rotateFrom : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
            resourceInputs["acctId"] = undefined /*out*/;
            resourceInputs["copiedFrom"] = undefined /*out*/;
            resourceInputs["copiedTos"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["keyOps"] = undefined /*out*/;
            resourceInputs["kid"] = undefined /*out*/;
            resourceInputs["objType"] = undefined /*out*/;
            resourceInputs["replaced"] = undefined /*out*/;
            resourceInputs["replacement"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Secret.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Secret resources.
 */
export interface SecretState {
    /**
     * Account ID from Fortanix DSM.
     */
    acctId?: pulumi.Input<string>;
    /**
     * Security object that is copied to the current security object.
     */
    copiedFrom?: pulumi.Input<string>;
    /**
     * List of security objects copied by the current security object.
     */
    copiedTos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The creator of the security object from Fortanix DSM. * `user`: If the security object was created by a user, the
     * computed value will be the matching user id. * `app`: If the security object was created by a app, the computed value
     * will be the matching app id.
     */
    creator?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The user defined security object attributes added to the key’s metadata.
     */
    customMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Fortanix DSM security object description.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the security object is Enabled or Disabled. The values are true/false.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The security object expiry date in RFC format.
     */
    expiryDate?: pulumi.Input<string>;
    /**
     * The Fortanix DSM security object group assignment.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The security object key permission from Fortanix DSM. * Default is to allow all permissions.
     */
    keyOps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Security object ID from Fortanix DSM.
     */
    kid?: pulumi.Input<string>;
    /**
     * The Fortanix DSM secret security object name
     */
    name?: pulumi.Input<string>;
    /**
     * The security object key type from Fortanix DSM.
     */
    objType?: pulumi.Input<string>;
    /**
     * Replaced by a security object.
     */
    replaced?: pulumi.Input<string>;
    /**
     * Replacement of a security object.
     */
    replacement?: pulumi.Input<string>;
    /**
     * boolean value true/false to enable/disable rotation.
     */
    rotate?: pulumi.Input<boolean>;
    /**
     * Name of the security object to be rotated from.
     */
    rotateFrom?: pulumi.Input<string>;
    /**
     * The state of the secret security object. * Allowed states are: None, PreActive, Active, Deactivated, Compromised,
     * Destroyed, Deleted.
     */
    state?: pulumi.Input<string>;
    /**
     * The secret value
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Secret resource.
 */
export interface SecretArgs {
    /**
     * The user defined security object attributes added to the key’s metadata.
     */
    customMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Fortanix DSM security object description.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the security object is Enabled or Disabled. The values are true/false.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The security object expiry date in RFC format.
     */
    expiryDate?: pulumi.Input<string>;
    /**
     * The Fortanix DSM security object group assignment.
     */
    groupId: pulumi.Input<string>;
    /**
     * The Fortanix DSM secret security object name
     */
    name?: pulumi.Input<string>;
    /**
     * boolean value true/false to enable/disable rotation.
     */
    rotate?: pulumi.Input<boolean>;
    /**
     * Name of the security object to be rotated from.
     */
    rotateFrom?: pulumi.Input<string>;
    /**
     * The state of the secret security object. * Allowed states are: None, PreActive, Active, Deactivated, Compromised,
     * Destroyed, Deleted.
     */
    state?: pulumi.Input<string>;
    /**
     * The secret value
     */
    value: pulumi.Input<string>;
}
