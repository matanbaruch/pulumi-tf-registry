// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDiskImage(args?: GetDiskImageArgs, opts?: pulumi.InvokeOptions): Promise<GetDiskImageResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("civo:index/getDiskImage:getDiskImage", {
        "filters": args.filters,
        "id": args.id,
        "region": args.region,
        "sorts": args.sorts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDiskImage.
 */
export interface GetDiskImageArgs {
    filters?: inputs.GetDiskImageFilter[];
    id?: string;
    region?: string;
    sorts?: inputs.GetDiskImageSort[];
}

/**
 * A collection of values returned by getDiskImage.
 */
export interface GetDiskImageResult {
    readonly diskimages: outputs.GetDiskImageDiskimage[];
    readonly filters?: outputs.GetDiskImageFilter[];
    readonly id: string;
    readonly region?: string;
    readonly sorts?: outputs.GetDiskImageSort[];
}
export function getDiskImageOutput(args?: GetDiskImageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDiskImageResult> {
    return pulumi.output(args).apply((a: any) => getDiskImage(a, opts))
}

/**
 * A collection of arguments for invoking getDiskImage.
 */
export interface GetDiskImageOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetDiskImageFilterArgs>[]>;
    id?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sorts?: pulumi.Input<pulumi.Input<inputs.GetDiskImageSortArgs>[]>;
}
