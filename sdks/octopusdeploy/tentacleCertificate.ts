// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TentacleCertificate extends pulumi.CustomResource {
    /**
     * Get an existing TentacleCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TentacleCertificateState, opts?: pulumi.CustomResourceOptions): TentacleCertificate {
        return new TentacleCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'octopusdeploy:index/tentacleCertificate:TentacleCertificate';

    /**
     * Returns true if the given object is an instance of TentacleCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TentacleCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TentacleCertificate.__pulumiType;
    }

    /**
     * The base64 encoded pfx certificate.
     */
    public /*out*/ readonly base64!: pulumi.Output<string>;
    /**
     * Optional map of dependencies that when modified will trigger a re-creation of this resource.
     */
    public readonly dependencies!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The SHA1 sum of the certificate represented in hexadecimal.
     */
    public /*out*/ readonly thumbprint!: pulumi.Output<string>;

    /**
     * Create a TentacleCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TentacleCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TentacleCertificateArgs | TentacleCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TentacleCertificateState | undefined;
            resourceInputs["base64"] = state ? state.base64 : undefined;
            resourceInputs["dependencies"] = state ? state.dependencies : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
        } else {
            const args = argsOrState as TentacleCertificateArgs | undefined;
            resourceInputs["dependencies"] = args ? args.dependencies : undefined;
            resourceInputs["base64"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["base64"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TentacleCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TentacleCertificate resources.
 */
export interface TentacleCertificateState {
    /**
     * The base64 encoded pfx certificate.
     */
    base64?: pulumi.Input<string>;
    /**
     * Optional map of dependencies that when modified will trigger a re-creation of this resource.
     */
    dependencies?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The SHA1 sum of the certificate represented in hexadecimal.
     */
    thumbprint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TentacleCertificate resource.
 */
export interface TentacleCertificateArgs {
    /**
     * Optional map of dependencies that when modified will trigger a re-creation of this resource.
     */
    dependencies?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
