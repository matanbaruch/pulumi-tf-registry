// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AzureCloudServiceDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.AzureCloudServiceDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterCertificatePath?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containerOptions?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.AzureCloudServiceDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.AzureCloudServiceDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface AzureCloudServiceDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    tokenPath?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface AzureCloudServiceDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface AzureCloudServiceDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.AzureServiceFabricClusterDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterCertificatePath?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containerOptions?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.AzureServiceFabricClusterDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.AzureServiceFabricClusterDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    tokenPath?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface AzureWebAppDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.AzureWebAppDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterCertificatePath?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containerOptions?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.AzureWebAppDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.AzureWebAppDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.AzureWebAppDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface AzureWebAppDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    tokenPath?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface AzureWebAppDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface AzureWebAppDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface AzureWebAppDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface ChannelRule {
    actionPackages: pulumi.Input<pulumi.Input<inputs.ChannelRuleActionPackage>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface ChannelRuleActionPackage {
    deploymentAction?: pulumi.Input<string>;
    packageReference?: pulumi.Input<string>;
}

export interface CloudRegionDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.CloudRegionDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterCertificatePath?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containerOptions?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.CloudRegionDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.CloudRegionDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.CloudRegionDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface CloudRegionDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    tokenPath?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface CloudRegionDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface CloudRegionDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface CloudRegionDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface DeploymentProcessStep {
    actions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepAction>[]>;
    applyTerraformTemplateActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateAction>[]>;
    /**
     * When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
     */
    condition?: pulumi.Input<string>;
    /**
     * The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
     */
    conditionExpression?: pulumi.Input<string>;
    deployKubernetesSecretActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployKubernetesSecretAction>[]>;
    deployPackageActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployPackageAction>[]>;
    deployWindowsServiceActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceAction>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    manualInterventionActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepManualInterventionAction>[]>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * Whether to run this step before or after package acquisition (if possible)
     */
    packageRequirement?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runKubectlScriptActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptAction>[]>;
    runScriptActions?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunScriptAction>[]>;
    /**
     * Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
     */
    startTrigger?: pulumi.Input<string>;
    /**
     * The roles that this step run against, or runs on behalf of
     */
    targetRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum number of targets to deploy to simultaneously
     */
    windowSize?: pulumi.Input<string>;
}

export interface DeploymentProcessStepAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepActionActionTemplate>;
    /**
     * The type of action
     */
    actionType: pulumi.Input<string>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.DeploymentProcessStepActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage?: pulumi.Input<inputs.DeploymentProcessStepActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this step runs on a worker or on the target
     */
    runOnServer?: pulumi.Input<boolean>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The worker pool associated with this deployment action.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * The worker pool variable associated with this deployment action.
     */
    workerPoolVariable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface DeploymentProcessStepActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * Whether to extract the package during deployment
     */
    extractDuringDeployment?: pulumi.Input<boolean>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the package
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepApplyTerraformTemplateAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionActionTemplate>;
    advancedOptions: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions>;
    awsAccount?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccount>;
    azureAccount?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionAzureAccount>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionGitDependency>;
    googleCloudAccount?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    inlineTemplate?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this step runs on a worker or on the target
     */
    runOnServer?: pulumi.Input<boolean>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    template?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionTemplate>;
    templateParameters?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The worker pool associated with this deployment action.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * The worker pool variable associated with this deployment action.
     */
    workerPoolVariable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions {
    allowAdditionalPluginDownloads?: pulumi.Input<boolean>;
    applyParameters?: pulumi.Input<string>;
    initParameters?: pulumi.Input<string>;
    pluginCacheDirectory?: pulumi.Input<string>;
    workspace?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAwsAccount {
    region?: pulumi.Input<string>;
    role?: pulumi.Input<inputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole>;
    useInstanceRole?: pulumi.Input<boolean>;
    variable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole {
    arn?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    roleSessionName?: pulumi.Input<string>;
    sessionDuration?: pulumi.Input<number>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionAzureAccount {
    variable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount {
    /**
     * Impersonate service accounts
     */
    impersonateServiceAccount?: pulumi.Input<boolean>;
    /**
     * This sets GOOGLE_PROJECT environment variable
     */
    project?: pulumi.Input<string>;
    /**
     * This sets GOOGLE_REGION environment variable
     */
    region?: pulumi.Input<string>;
    /**
     * This sets GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable
     */
    serviceAccountEmails?: pulumi.Input<string>;
    /**
     * When running in a Compute Engine virtual machine, use the associated VM service account
     */
    useVmServiceAccount?: pulumi.Input<boolean>;
    variable?: pulumi.Input<string>;
    /**
     * This sets GOOGLE_ZONE environment variable
     */
    zone?: pulumi.Input<string>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepApplyTerraformTemplateActionTemplate {
    additionalVariableFiles?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    runAutomaticFileSubstitution?: pulumi.Input<boolean>;
    targetFiles?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployKubernetesSecretAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepDeployKubernetesSecretActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployKubernetesSecretActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.DeploymentProcessStepDeployKubernetesSecretActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * Indicates the status of the Kubernetes Object Status feature
     */
    kubernetesObjectStatusCheckEnabled?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployKubernetesSecretActionPackage>[]>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this step runs on a worker or on the target
     */
    runOnServer?: pulumi.Input<boolean>;
    /**
     * The name of the secret resource
     */
    secretName: pulumi.Input<string>;
    secretValues: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The worker pool associated with this deployment action.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * The worker pool variable associated with this deployment action.
     */
    workerPoolVariable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployKubernetesSecretActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepDeployKubernetesSecretActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployKubernetesSecretActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployKubernetesSecretActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepDeployPackageAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage: pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Deploy a windows service feature
     */
    windowsService?: pulumi.Input<inputs.DeploymentProcessStepDeployPackageActionWindowsService>;
}

export interface DeploymentProcessStepDeployPackageActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepDeployPackageActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployPackageActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployPackageActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepDeployPackageActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepDeployPackageActionWindowsService {
    /**
     * The command line arguments that will be passed to the service when it starts
     */
    arguments?: pulumi.Input<string>;
    createOrUpdateService?: pulumi.Input<boolean>;
    /**
     * The Windows/domain account of the custom user that the service will run under
     */
    customAccountName?: pulumi.Input<string>;
    /**
     * The password for the custom account
     */
    customAccountPassword?: pulumi.Input<string>;
    /**
     * Any dependencies that the service has. Separate the names using forward slashes (/).
     */
    dependencies?: pulumi.Input<string>;
    /**
     * User-friendly description of the service (optional)
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the service (optional)
     */
    displayName?: pulumi.Input<string>;
    /**
     * The path to the executable relative to the package installation directory
     */
    executablePath: pulumi.Input<string>;
    /**
     * Which built-in account will the service run under. Can be LocalSystem, NT Authority\NetworkService, NT Authority\LocalService, _CUSTOM or an expression
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The name of the service
     */
    serviceName: pulumi.Input<string>;
    /**
     * When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
     */
    startMode?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployWindowsServiceAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceActionActionTemplate>;
    /**
     * The command line arguments that will be passed to the service when it starts
     */
    arguments?: pulumi.Input<string>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceActionContainer>[]>;
    createOrUpdateService?: pulumi.Input<boolean>;
    /**
     * The Windows/domain account of the custom user that the service will run under
     */
    customAccountName?: pulumi.Input<string>;
    /**
     * The password for the custom account
     */
    customAccountPassword?: pulumi.Input<string>;
    /**
     * Any dependencies that the service has. Separate the names using forward slashes (/).
     */
    dependencies?: pulumi.Input<string>;
    /**
     * User-friendly description of the service (optional)
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the service (optional)
     */
    displayName?: pulumi.Input<string>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path to the executable relative to the package installation directory
     */
    executablePath: pulumi.Input<string>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage: pulumi.Input<inputs.DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Which built-in account will the service run under. Can be LocalSystem, NT Authority\NetworkService, NT Authority\LocalService, _CUSTOM or an expression
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The name of the service
     */
    serviceName: pulumi.Input<string>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
     */
    startMode?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentProcessStepDeployWindowsServiceActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepDeployWindowsServiceActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployWindowsServiceActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface DeploymentProcessStepDeployWindowsServiceActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepManualInterventionAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepManualInterventionActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepManualInterventionActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.DeploymentProcessStepManualInterventionActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The instructions for the user to follow
     */
    instructions: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepManualInterventionActionPackage>[]>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The teams responsible to resolve this step. If no teams are specified, all users who have permission to deploy the project can resolve it.
     */
    responsibleTeams?: pulumi.Input<string>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentProcessStepManualInterventionActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepManualInterventionActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepManualInterventionActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface DeploymentProcessStepManualInterventionActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepRunKubectlScriptAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage?: pulumi.Input<inputs.DeploymentProcessStepRunKubectlScriptActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this step runs on a worker or on the target
     */
    runOnServer?: pulumi.Input<boolean>;
    scriptBody?: pulumi.Input<string>;
    /**
     * The script file name in the package
     */
    scriptFileName?: pulumi.Input<string>;
    /**
     * Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
     */
    scriptParameters?: pulumi.Input<string>;
    scriptSource?: pulumi.Input<string>;
    scriptSyntax?: pulumi.Input<string>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
     */
    variableSubstitutionInFiles?: pulumi.Input<string>;
    /**
     * The worker pool associated with this deployment action.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * The worker pool variable associated with this deployment action.
     */
    workerPoolVariable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepRunKubectlScriptActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepRunKubectlScriptActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepRunKubectlScriptActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface DeploymentProcessStepRunKubectlScriptActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * Whether to extract the package during deployment
     */
    extractDuringDeployment?: pulumi.Input<boolean>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the package
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepRunKubectlScriptActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepRunScriptAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.DeploymentProcessStepRunScriptActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunScriptActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.DeploymentProcessStepRunScriptActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.DeploymentProcessStepRunScriptActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage?: pulumi.Input<inputs.DeploymentProcessStepRunScriptActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     *
     * @deprecated Deprecated
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this step runs on a worker or on the target
     */
    runOnServer?: pulumi.Input<boolean>;
    scriptBody?: pulumi.Input<string>;
    /**
     * The script file name in the package
     */
    scriptFileName?: pulumi.Input<string>;
    /**
     * Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
     */
    scriptParameters?: pulumi.Input<string>;
    scriptSource?: pulumi.Input<string>;
    scriptSyntax?: pulumi.Input<string>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
     */
    variableSubstitutionInFiles?: pulumi.Input<string>;
    /**
     * The worker pool associated with this deployment action.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * The worker pool variable associated with this deployment action.
     */
    workerPoolVariable?: pulumi.Input<string>;
}

export interface DeploymentProcessStepRunScriptActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface DeploymentProcessStepRunScriptActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface DeploymentProcessStepRunScriptActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface DeploymentProcessStepRunScriptActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * Whether to extract the package during deployment
     */
    extractDuringDeployment?: pulumi.Input<boolean>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the package
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DeploymentProcessStepRunScriptActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface EnvironmentJiraExtensionSetting {
    /**
     * The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, `"unmapped"`.
     */
    environmentType?: pulumi.Input<string>;
}

export interface EnvironmentJiraServiceManagementExtensionSetting {
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled?: pulumi.Input<boolean>;
}

export interface EnvironmentServicenowExtensionSetting {
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled?: pulumi.Input<boolean>;
}

export interface ExternalFeedCreateReleaseTriggerPackage {
    deploymentActionSlug: pulumi.Input<string>;
    packageReference: pulumi.Input<string>;
}

export interface ExternalFeedCreateReleaseTriggerPrimaryPackage {
    deploymentActionSlug: pulumi.Input<string>;
}

export interface GetVariablesScope {
    /**
     * A list of actions that are scoped to this variable value.
     */
    actions?: string[];
    /**
     * A list of channels that are scoped to this variable value.
     */
    channels?: string[];
    /**
     * A list of environments that are scoped to this variable value.
     */
    environments?: string[];
    /**
     * A list of machines that are scoped to this variable value.
     */
    machines?: string[];
    /**
     * A list of processes that are scoped to this variable value.
     */
    processes?: string[];
    /**
     * A list of roles that are scoped to this variable value.
     */
    roles?: string[];
    /**
     * A list of tenant tags that are scoped to this variable value.
     */
    tenantTags?: string[];
}

export interface GetVariablesScopeArgs {
    /**
     * A list of actions that are scoped to this variable value.
     */
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of channels that are scoped to this variable value.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of environments that are scoped to this variable value.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of machines that are scoped to this variable value.
     */
    machines?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of processes that are scoped to this variable value.
     */
    processes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of roles that are scoped to this variable value.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tenant tags that are scoped to this variable value.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KubernetesClusterDeploymentTargetAuthentication {
    accountId?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetAwsAccountAuthentication {
    accountId: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
}

export interface KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication {
    accountId: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    clusterResourceGroup: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetCertificateAuthentication {
    clientCertificate?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.KubernetesClusterDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterCertificatePath?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containerOptions?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    tokenPath?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetGcpAccountAuthentication {
    accountId: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface KubernetesClusterDeploymentTargetPodAuthentication {
    tokenPath: pulumi.Input<string>;
}

export interface LibraryVariableSetTemplate {
    /**
     * A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * The display settings for the parameter.
     */
    displaySettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The help presented alongside the parameter input.
     */
    helpText?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
     */
    label?: pulumi.Input<string>;
    /**
     * The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`
     */
    name: pulumi.Input<string>;
}

export interface LifecyclePhase {
    /**
     * Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
     */
    automaticDeploymentTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * If false a release must be deployed to this phase before it can be deployed to the next phase.
     */
    isOptionalPhase?: pulumi.Input<boolean>;
    /**
     * The number of units required before a release can enter the next phase. If 0, all environments are required.
     */
    minimumEnvironmentsBeforePromotion?: pulumi.Input<number>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
     */
    optionalDeploymentTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines the retention policy for releases or tentacles.
     */
    releaseRetentionPolicies?: pulumi.Input<pulumi.Input<inputs.LifecyclePhaseReleaseRetentionPolicy>[]>;
    /**
     * Defines the retention policy for releases or tentacles.
     */
    tentacleRetentionPolicies?: pulumi.Input<pulumi.Input<inputs.LifecyclePhaseTentacleRetentionPolicy>[]>;
}

export interface LifecyclePhaseReleaseRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is 30. If 0 then all are kept.
     */
    quantityToKeep?: pulumi.Input<number>;
    /**
     * Indicates if items should never be deleted. The default value is false.
     */
    shouldKeepForever?: pulumi.Input<boolean>;
    /**
     * The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
     */
    unit?: pulumi.Input<string>;
}

export interface LifecyclePhaseTentacleRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is 30. If 0 then all are kept.
     */
    quantityToKeep?: pulumi.Input<number>;
    /**
     * Indicates if items should never be deleted. The default value is false.
     */
    shouldKeepForever?: pulumi.Input<boolean>;
    /**
     * The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
     */
    unit?: pulumi.Input<string>;
}

export interface LifecycleReleaseRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is 30. If 0 then all are kept.
     */
    quantityToKeep?: pulumi.Input<number>;
    /**
     * Indicates if items should never be deleted. The default value is false.
     */
    shouldKeepForever?: pulumi.Input<boolean>;
    /**
     * The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
     */
    unit?: pulumi.Input<string>;
}

export interface LifecycleTentacleRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is 30. If 0 then all are kept.
     */
    quantityToKeep?: pulumi.Input<number>;
    /**
     * Indicates if items should never be deleted. The default value is false.
     */
    shouldKeepForever?: pulumi.Input<boolean>;
    /**
     * The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
     */
    unit?: pulumi.Input<string>;
}

export interface ListeningTentacleDeploymentTargetTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface MachinePolicyMachineCleanupPolicy {
    deleteMachinesBehavior?: pulumi.Input<string>;
    /**
     * In nanoseconds.
     */
    deleteMachinesElapsedTimespan?: pulumi.Input<number>;
}

export interface MachinePolicyMachineConnectivityPolicy {
    machineConnectivityBehavior?: pulumi.Input<string>;
}

export interface MachinePolicyMachineHealthCheckPolicy {
    bashHealthCheckPolicy: pulumi.Input<inputs.MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy>;
    healthCheckCron?: pulumi.Input<string>;
    healthCheckCronTimezone?: pulumi.Input<string>;
    /**
     * In nanoseconds.
     */
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    powershellHealthCheckPolicy: pulumi.Input<inputs.MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy>;
}

export interface MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy {
    runType?: pulumi.Input<string>;
    scriptBody?: pulumi.Input<string>;
}

export interface MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy {
    runType?: pulumi.Input<string>;
    scriptBody?: pulumi.Input<string>;
}

export interface MachinePolicyMachineUpdatePolicy {
    /**
     * The behaviour of how Calamari is updated. Valid values are `UpdateAlways`, `UpdateOnDeployment` and `UpdateOnNewMachine`.
     */
    calamariUpdateBehavior?: pulumi.Input<string>;
    /**
     * The behaviour of how Kubernetes agent machines are updated. Valid values are `NeverUpdate` and `Update`.
     */
    kubernetesAgentUpdateBehavior?: pulumi.Input<string>;
    /**
     * The Account ID to perform any Tentacle updates under.
     */
    tentacleUpdateAccountId?: pulumi.Input<string>;
    /**
     * The behaviour of how Tentacle machines are updated. Valid values are `NeverUpdate` and `Update`.
     */
    tentacleUpdateBehavior?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.OfflinePackageDropDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterCertificatePath?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containerOptions?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.OfflinePackageDropDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.OfflinePackageDropDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    tokenPath?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.PollingTentacleDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterCertificatePath?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containerOptions?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.PollingTentacleDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.PollingTentacleDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.PollingTentacleDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    tokenPath?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface PollingTentacleDeploymentTargetTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface ProjectAutoDeployReleaseOverride {
    environmentId?: pulumi.Input<string>;
    releaseId?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}

export interface ProjectConnectivityPolicy {
    allowDeploymentsToNoTargets?: pulumi.Input<boolean>;
    excludeUnhealthyTargets?: pulumi.Input<boolean>;
    skipMachineBehavior?: pulumi.Input<string>;
    targetRoles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectGitAnonymousPersistenceSetting {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL associated with these version control settings.
     */
    url: pulumi.Input<string>;
}

export interface ProjectGitLibraryPersistenceSetting {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: pulumi.Input<string>;
    gitCredentialId: pulumi.Input<string>;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL associated with these version control settings.
     */
    url: pulumi.Input<string>;
}

export interface ProjectGitUsernamePasswordPersistenceSetting {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * The password for the Git credential
     */
    password: pulumi.Input<string>;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL associated with these version control settings.
     */
    url: pulumi.Input<string>;
    /**
     * The username for the Git credential.
     */
    username: pulumi.Input<string>;
}

export interface ProjectJiraServiceManagementExtensionSetting {
    /**
     * The connection identifier associated with the extension settings.
     */
    connectionId: pulumi.Input<string>;
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: pulumi.Input<boolean>;
    /**
     * The project name associated with this extension.
     */
    serviceDeskProjectName: pulumi.Input<string>;
}

export interface ProjectReleaseCreationStrategy {
    channelId?: pulumi.Input<string>;
    releaseCreationPackageStepId?: pulumi.Input<string>;
    releaseCreationPackages?: pulumi.Input<pulumi.Input<inputs.ProjectReleaseCreationStrategyReleaseCreationPackage>[]>;
}

export interface ProjectReleaseCreationStrategyReleaseCreationPackage {
    deploymentAction?: pulumi.Input<string>;
    packageReference?: pulumi.Input<string>;
}

export interface ProjectScheduledTriggerContinuousDailySchedule {
    /**
     * The days of the week to run the trigger.
     */
    daysOfWeeks: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How often to run the trigger in hours. Only used when the interval is set to 'OnceHourly'.
     */
    hourInterval?: pulumi.Input<number>;
    /**
     * The interval in minutes to run the trigger.
     */
    interval: pulumi.Input<string>;
    /**
     * How often to run the trigger in minutes. Only used when the interval is set to 'OnceEveryMinute'.
     */
    minuteInterval?: pulumi.Input<number>;
    /**
     * The time of day to start the trigger.
     */
    runAfter: pulumi.Input<string>;
    /**
     * The time of day to end the trigger.
     */
    runUntil: pulumi.Input<string>;
}

export interface ProjectScheduledTriggerCronExpressionSchedule {
    /**
     * The cron expression for the schedule.
     */
    cronExpression: pulumi.Input<string>;
}

export interface ProjectScheduledTriggerDaysPerMonthSchedule {
    /**
     * Which date of the month to run the trigger. String number between 1 - 31 Incl. or L for the last day of the month.
     */
    dateOfMonth?: pulumi.Input<string>;
    /**
     * Which ordinal day of the week to run the trigger on. String number between 1 - 4 Incl. or L for the last occurrence of day_of_week for the month.
     */
    dayNumberOfMonth?: pulumi.Input<string>;
    /**
     * Which day of the week to run the trigger on. Required when monthly_schedule_type is set to 'DayOfMonth'.
     */
    dayOfWeek?: pulumi.Input<string>;
    /**
     * The type of monthly schedule to run the trigger
     */
    monthlyScheduleType: pulumi.Input<string>;
    /**
     * The time of day to start the trigger.
     */
    startTime: pulumi.Input<string>;
}

export interface ProjectScheduledTriggerDeployLatestReleaseAction {
    /**
     * The environment ID to deploy the selected release to.
     */
    destinationEnvironmentId: pulumi.Input<string>;
    /**
     * Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
     */
    shouldRedeploy?: pulumi.Input<boolean>;
    /**
     * The environment ID to use when selecting the release to deploy from.
     */
    sourceEnvironmentId: pulumi.Input<string>;
}

export interface ProjectScheduledTriggerDeployNewReleaseAction {
    /**
     * The environment ID to deploy the selected release to.
     */
    destinationEnvironmentId: pulumi.Input<string>;
    /**
     * The git reference to use when creating the release. Can be a branch, tag, or commit hash.
     */
    gitReference?: pulumi.Input<string>;
}

export interface ProjectScheduledTriggerOnceDailySchedule {
    /**
     * The days of the week to run the trigger.
     */
    daysOfWeeks: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time of day to start the trigger.
     */
    startTime: pulumi.Input<string>;
}

export interface ProjectScheduledTriggerRunRunbookAction {
    /**
     * The ID of the runbook to run.
     */
    runbookId: pulumi.Input<string>;
    /**
     * The IDs of the environments to run the runbook in.
     */
    targetEnvironmentIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectServicenowExtensionSetting {
    /**
     * The connection identifier associated with the extension settings.
     */
    connectionId: pulumi.Input<string>;
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: pulumi.Input<boolean>;
    /**
     * Specifies whether or not this extension will automatically transition the state of a deployment for this project.
     */
    isStateAutomaticallyTransitioned: pulumi.Input<boolean>;
    /**
     * The name of the standard change template associated with this extension. If provided, deployments will create a standard change based on the provided template, otherwise a normal change will be created.
     */
    standardChangeTemplateName?: pulumi.Input<string>;
}

export interface ProjectTemplate {
    /**
     * A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * The display settings for the parameter.
     */
    displaySettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The help presented alongside the parameter input.
     */
    helpText?: pulumi.Input<string>;
    /**
     * The ID of the template parameter.
     */
    id?: pulumi.Input<string>;
    /**
     * The label shown beside the parameter when presented in the deployment process.
     */
    label?: pulumi.Input<string>;
    /**
     * The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods.
     */
    name: pulumi.Input<string>;
}

export interface ProjectVersioningStrategy {
    donorPackageStepId?: pulumi.Input<string>;
    donorPackages?: pulumi.Input<pulumi.Input<inputs.ProjectVersioningStrategyDonorPackage>[]>;
    template?: pulumi.Input<string>;
}

export interface ProjectVersioningStrategyDonorPackage {
    deploymentAction?: pulumi.Input<string>;
    packageReference?: pulumi.Input<string>;
}

export interface RunbookConnectivityPolicy {
    allowDeploymentsToNoTargets?: pulumi.Input<boolean>;
    excludeUnhealthyTargets?: pulumi.Input<boolean>;
    skipMachineBehavior?: pulumi.Input<string>;
    targetRoles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RunbookProcessStep {
    actions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepAction>[]>;
    applyTerraformTemplateActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateAction>[]>;
    /**
     * When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
     */
    condition?: pulumi.Input<string>;
    /**
     * The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
     */
    conditionExpression?: pulumi.Input<string>;
    deployKubernetesSecretActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployKubernetesSecretAction>[]>;
    deployPackageActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployPackageAction>[]>;
    deployWindowsServiceActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceAction>[]>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    manualInterventionActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepManualInterventionAction>[]>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * Whether to run this step before or after package acquisition (if possible)
     */
    packageRequirement?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    runKubectlScriptActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptAction>[]>;
    runScriptActions?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunScriptAction>[]>;
    /**
     * Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
     */
    startTrigger?: pulumi.Input<string>;
    /**
     * The roles that this step run against, or runs on behalf of
     */
    targetRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum number of targets to deploy to simultaneously
     */
    windowSize?: pulumi.Input<string>;
}

export interface RunbookProcessStepAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepActionActionTemplate>;
    /**
     * The type of action
     */
    actionType: pulumi.Input<string>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.RunbookProcessStepActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage?: pulumi.Input<inputs.RunbookProcessStepActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this step runs on a worker or on the target
     */
    runOnServer?: pulumi.Input<boolean>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The worker pool associated with this deployment action.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * The worker pool variable associated with this deployment action.
     */
    workerPoolVariable?: pulumi.Input<string>;
}

export interface RunbookProcessStepActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface RunbookProcessStepActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * Whether to extract the package during deployment
     */
    extractDuringDeployment?: pulumi.Input<boolean>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the package
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepApplyTerraformTemplateAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionActionTemplate>;
    advancedOptions: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions>;
    awsAccount?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccount>;
    azureAccount?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionAzureAccount>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionGitDependency>;
    googleCloudAccount?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    inlineTemplate?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this step runs on a worker or on the target
     */
    runOnServer?: pulumi.Input<boolean>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    template?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionTemplate>;
    templateParameters?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The worker pool associated with this deployment action.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * The worker pool variable associated with this deployment action.
     */
    workerPoolVariable?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions {
    allowAdditionalPluginDownloads?: pulumi.Input<boolean>;
    applyParameters?: pulumi.Input<string>;
    initParameters?: pulumi.Input<string>;
    pluginCacheDirectory?: pulumi.Input<string>;
    workspace?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAwsAccount {
    region?: pulumi.Input<string>;
    role?: pulumi.Input<inputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole>;
    useInstanceRole?: pulumi.Input<boolean>;
    variable?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole {
    arn?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    roleSessionName?: pulumi.Input<string>;
    sessionDuration?: pulumi.Input<number>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionAzureAccount {
    variable?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount {
    /**
     * Impersonate service accounts
     */
    impersonateServiceAccount?: pulumi.Input<boolean>;
    /**
     * This sets GOOGLE_PROJECT environment variable
     */
    project?: pulumi.Input<string>;
    /**
     * This sets GOOGLE_REGION environment variable
     */
    region?: pulumi.Input<string>;
    /**
     * This sets GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable
     */
    serviceAccountEmails?: pulumi.Input<string>;
    /**
     * When running in a Compute Engine virtual machine, use the associated VM service account
     */
    useVmServiceAccount?: pulumi.Input<boolean>;
    variable?: pulumi.Input<string>;
    /**
     * This sets GOOGLE_ZONE environment variable
     */
    zone?: pulumi.Input<string>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepApplyTerraformTemplateActionTemplate {
    additionalVariableFiles?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    runAutomaticFileSubstitution?: pulumi.Input<boolean>;
    targetFiles?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployKubernetesSecretAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepDeployKubernetesSecretActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployKubernetesSecretActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.RunbookProcessStepDeployKubernetesSecretActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * Indicates the status of the Kubernetes Object Status feature
     */
    kubernetesObjectStatusCheckEnabled?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployKubernetesSecretActionPackage>[]>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this step runs on a worker or on the target
     */
    runOnServer?: pulumi.Input<boolean>;
    /**
     * The name of the secret resource
     */
    secretName: pulumi.Input<string>;
    secretValues: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The worker pool associated with this deployment action.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * The worker pool variable associated with this deployment action.
     */
    workerPoolVariable?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployKubernetesSecretActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepDeployKubernetesSecretActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployKubernetesSecretActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployKubernetesSecretActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepDeployPackageAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepDeployPackageActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployPackageActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.RunbookProcessStepDeployPackageActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployPackageActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage: pulumi.Input<inputs.RunbookProcessStepDeployPackageActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Deploy a windows service feature
     */
    windowsService?: pulumi.Input<inputs.RunbookProcessStepDeployPackageActionWindowsService>;
}

export interface RunbookProcessStepDeployPackageActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepDeployPackageActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployPackageActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployPackageActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepDeployPackageActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepDeployPackageActionWindowsService {
    /**
     * The command line arguments that will be passed to the service when it starts
     */
    arguments?: pulumi.Input<string>;
    createOrUpdateService?: pulumi.Input<boolean>;
    /**
     * The Windows/domain account of the custom user that the service will run under
     */
    customAccountName?: pulumi.Input<string>;
    /**
     * The password for the custom account
     */
    customAccountPassword?: pulumi.Input<string>;
    /**
     * Any dependencies that the service has. Separate the names using forward slashes (/).
     */
    dependencies?: pulumi.Input<string>;
    /**
     * User-friendly description of the service (optional)
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the service (optional)
     */
    displayName?: pulumi.Input<string>;
    /**
     * The path to the executable relative to the package installation directory
     */
    executablePath: pulumi.Input<string>;
    /**
     * Which built-in account will the service run under. Can be LocalSystem, NT Authority\NetworkService, NT Authority\LocalService, _CUSTOM or an expression
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The name of the service
     */
    serviceName: pulumi.Input<string>;
    /**
     * When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
     */
    startMode?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployWindowsServiceAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceActionActionTemplate>;
    /**
     * The command line arguments that will be passed to the service when it starts
     */
    arguments?: pulumi.Input<string>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceActionContainer>[]>;
    createOrUpdateService?: pulumi.Input<boolean>;
    /**
     * The Windows/domain account of the custom user that the service will run under
     */
    customAccountName?: pulumi.Input<string>;
    /**
     * The password for the custom account
     */
    customAccountPassword?: pulumi.Input<string>;
    /**
     * Any dependencies that the service has. Separate the names using forward slashes (/).
     */
    dependencies?: pulumi.Input<string>;
    /**
     * User-friendly description of the service (optional)
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the service (optional)
     */
    displayName?: pulumi.Input<string>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path to the executable relative to the package installation directory
     */
    executablePath: pulumi.Input<string>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage: pulumi.Input<inputs.RunbookProcessStepDeployWindowsServiceActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Which built-in account will the service run under. Can be LocalSystem, NT Authority\NetworkService, NT Authority\LocalService, _CUSTOM or an expression
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The name of the service
     */
    serviceName: pulumi.Input<string>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
     */
    startMode?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RunbookProcessStepDeployWindowsServiceActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepDeployWindowsServiceActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployWindowsServiceActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface RunbookProcessStepDeployWindowsServiceActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepDeployWindowsServiceActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepManualInterventionAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepManualInterventionActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepManualInterventionActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.RunbookProcessStepManualInterventionActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The instructions for the user to follow
     */
    instructions: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepManualInterventionActionPackage>[]>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The teams responsible to resolve this step. If no teams are specified, all users who have permission to deploy the project can resolve it.
     */
    responsibleTeams?: pulumi.Input<string>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RunbookProcessStepManualInterventionActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepManualInterventionActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepManualInterventionActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface RunbookProcessStepManualInterventionActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepRunKubectlScriptAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage?: pulumi.Input<inputs.RunbookProcessStepRunKubectlScriptActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this step runs on a worker or on the target
     */
    runOnServer?: pulumi.Input<boolean>;
    scriptBody?: pulumi.Input<string>;
    /**
     * The script file name in the package
     */
    scriptFileName?: pulumi.Input<string>;
    /**
     * Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
     */
    scriptParameters?: pulumi.Input<string>;
    scriptSource?: pulumi.Input<string>;
    scriptSyntax?: pulumi.Input<string>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
     */
    variableSubstitutionInFiles?: pulumi.Input<string>;
    /**
     * The worker pool associated with this deployment action.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * The worker pool variable associated with this deployment action.
     */
    workerPoolVariable?: pulumi.Input<string>;
}

export interface RunbookProcessStepRunKubectlScriptActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepRunKubectlScriptActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepRunKubectlScriptActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface RunbookProcessStepRunKubectlScriptActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * Whether to extract the package during deployment
     */
    extractDuringDeployment?: pulumi.Input<boolean>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the package
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepRunKubectlScriptActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepRunScriptAction {
    /**
     * Represents the template that is associated with this action.
     */
    actionTemplate?: pulumi.Input<inputs.RunbookProcessStepRunScriptActionActionTemplate>;
    canBeUsedForProjectVersioning?: pulumi.Input<boolean>;
    /**
     * The channels associated with this deployment action.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition associated with this deployment action.
     */
    condition?: pulumi.Input<string>;
    /**
     * The deployment action container associated with this deployment action.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunScriptActionContainer>[]>;
    /**
     * The environments within which this deployment action will run.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environments that this step will be skipped in
     */
    excludedEnvironments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of enabled features for this action.
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for resource sourcing from a git repository.
     */
    gitDependency?: pulumi.Input<inputs.RunbookProcessStepRunScriptActionGitDependency>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates the disabled status of this deployment action.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates the required status of this deployment action.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    /**
     * The notes associated with this deployment action.
     */
    notes?: pulumi.Input<string>;
    /**
     * The package assocated with this action.
     */
    packages?: pulumi.Input<pulumi.Input<inputs.RunbookProcessStepRunScriptActionPackage>[]>;
    /**
     * The package assocated with this action.
     */
    primaryPackage?: pulumi.Input<inputs.RunbookProcessStepRunScriptActionPrimaryPackage>;
    /**
     * The properties associated with this deployment action.
     *
     * @deprecated Deprecated
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether this step runs on a worker or on the target
     */
    runOnServer?: pulumi.Input<boolean>;
    scriptBody?: pulumi.Input<string>;
    /**
     * The script file name in the package
     */
    scriptFileName?: pulumi.Input<string>;
    /**
     * Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
     */
    scriptParameters?: pulumi.Input<string>;
    scriptSource?: pulumi.Input<string>;
    scriptSyntax?: pulumi.Input<string>;
    /**
     * The human-readable unique identifier for this resource.
     */
    slug?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<number>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
     */
    variableSubstitutionInFiles?: pulumi.Input<string>;
    /**
     * The worker pool associated with this deployment action.
     */
    workerPoolId?: pulumi.Input<string>;
    /**
     * The worker pool variable associated with this deployment action.
     */
    workerPoolVariable?: pulumi.Input<string>;
}

export interface RunbookProcessStepRunScriptActionActionTemplate {
    communityActionTemplateId?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface RunbookProcessStepRunScriptActionContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface RunbookProcessStepRunScriptActionGitDependency {
    /**
     * Name of the default branch of the repository.
     */
    defaultBranch: pulumi.Input<string>;
    /**
     * List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
     */
    filePathFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of an existing Git credential.
     */
    gitCredentialId?: pulumi.Input<string>;
    /**
     * The Git credential authentication type.
     */
    gitCredentialType: pulumi.Input<string>;
    /**
     * The Git URI for the repository where this resource is sourced from.
     */
    repositoryUri: pulumi.Input<string>;
}

export interface RunbookProcessStepRunScriptActionPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * Whether to extract the package during deployment
     */
    extractDuringDeployment?: pulumi.Input<boolean>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the package
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookProcessStepRunScriptActionPrimaryPackage {
    /**
     * Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
     */
    acquisitionLocation?: pulumi.Input<string>;
    /**
     * The feed ID associated with this package reference.
     */
    feedId?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the package.
     */
    packageId: pulumi.Input<string>;
    /**
     * A list of properties associated with this package.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RunbookRetentionPolicy {
    /**
     * How many runs to keep per environment.
     */
    quantityToKeep?: pulumi.Input<number>;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever?: pulumi.Input<boolean>;
}

export interface ScriptModuleScript {
    /**
     * The body of this script module.
     */
    body: pulumi.Input<string>;
    /**
     * The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
     */
    syntax: pulumi.Input<string>;
}

export interface SshConnectionDeploymentTargetEndpoint {
    aadClientCredentialSecret?: pulumi.Input<string>;
    aadCredentialType?: pulumi.Input<string>;
    aadUserCredentialUsername?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    applicationsDirectory?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.SshConnectionDeploymentTargetEndpointAuthentication>;
    certificateSignatureAlgorithm?: pulumi.Input<string>;
    certificateStoreLocation?: pulumi.Input<string>;
    certificateStoreName?: pulumi.Input<string>;
    clientCertificateVariable?: pulumi.Input<string>;
    cloudServiceName?: pulumi.Input<string>;
    clusterCertificate?: pulumi.Input<string>;
    clusterCertificatePath?: pulumi.Input<string>;
    clusterUrl?: pulumi.Input<string>;
    communicationStyle: pulumi.Input<string>;
    connectionEndpoint?: pulumi.Input<string>;
    containerOptions?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.SshConnectionDeploymentTargetEndpointContainer>[]>;
    defaultWorkerPoolId?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.SshConnectionDeploymentTargetEndpointDestination>[]>;
    dotNetCorePlatform?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    runningInContainer?: pulumi.Input<boolean>;
    securityMode?: pulumi.Input<string>;
    serverCertificateThumbprint?: pulumi.Input<string>;
    skipTlsVerification?: pulumi.Input<boolean>;
    slot?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    swapIfPossible?: pulumi.Input<boolean>;
    tentacleVersionDetails?: pulumi.Input<pulumi.Input<inputs.SshConnectionDeploymentTargetEndpointTentacleVersionDetail>[]>;
    thumbprint?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    useCurrentInstanceCount?: pulumi.Input<boolean>;
    webAppName?: pulumi.Input<string>;
    webAppSlotName?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

export interface SshConnectionDeploymentTargetEndpointAuthentication {
    accountId?: pulumi.Input<string>;
    adminLogin?: pulumi.Input<string>;
    assumeRole?: pulumi.Input<boolean>;
    assumeRoleExternalId?: pulumi.Input<string>;
    assumeRoleSessionDuration?: pulumi.Input<number>;
    assumedRoleArn?: pulumi.Input<string>;
    assumedRoleSession?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterResourceGroup?: pulumi.Input<string>;
    impersonateServiceAccount?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceAccountEmails?: pulumi.Input<string>;
    tokenPath?: pulumi.Input<string>;
    useInstanceRole?: pulumi.Input<boolean>;
    useVmServiceAccount?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

export interface SshConnectionDeploymentTargetEndpointContainer {
    feedId?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
}

export interface SshConnectionDeploymentTargetEndpointDestination {
    destinationType?: pulumi.Input<string>;
    dropFolderPath?: pulumi.Input<string>;
}

export interface SshConnectionDeploymentTargetEndpointTentacleVersionDetail {
    upgradeLocked?: pulumi.Input<boolean>;
    upgradeRequired?: pulumi.Input<boolean>;
    upgradeSuggested?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

export interface TeamExternalSecurityGroup {
    displayIdAndName?: pulumi.Input<boolean>;
    displayName?: pulumi.Input<string>;
    /**
     * The unique ID for this resource.
     */
    id?: pulumi.Input<string>;
}

export interface TeamUserRole {
    environmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
    projectGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    spaceId: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
    tenantIds?: pulumi.Input<pulumi.Input<string>[]>;
    userRoleId: pulumi.Input<string>;
}

export interface UserIdentity {
    claims?: pulumi.Input<pulumi.Input<inputs.UserIdentityClaim>[]>;
    provider?: pulumi.Input<string>;
}

export interface UserIdentityClaim {
    isIdentifyingClaim: pulumi.Input<boolean>;
    /**
     * The name of this resource.
     */
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface VariablePrompt {
    /**
     * The description of this variable prompt option.
     */
    description?: pulumi.Input<string>;
    displaySettings?: pulumi.Input<pulumi.Input<inputs.VariablePromptDisplaySetting>[]>;
    isRequired?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
}

export interface VariablePromptDisplaySetting {
    /**
     * The type of control for rendering this prompted variable. Valid types are `SingleLineText`, `MultiLineText`, `Checkbox`, `Select`.
     */
    controlType: pulumi.Input<string>;
    /**
     * If the `control_type` is `Select`, then this value defines an option.
     */
    selectOptions?: pulumi.Input<pulumi.Input<inputs.VariablePromptDisplaySettingSelectOption>[]>;
}

export interface VariablePromptDisplaySettingSelectOption {
    /**
     * The display name for the select value
     */
    displayName: pulumi.Input<string>;
    /**
     * The select value
     */
    value: pulumi.Input<string>;
}

export interface VariableScope {
    /**
     * A list of actions that are scoped to this variable value.
     */
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of channels that are scoped to this variable value.
     */
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of environments that are scoped to this variable value.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of machines that are scoped to this variable value.
     */
    machines?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of processes that are scoped to this variable value.
     */
    processes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of roles that are scoped to this variable value.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tenant tags that are scoped to this variable value.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
}
