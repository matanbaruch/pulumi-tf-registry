// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KubernetesAgentDeploymentTarget extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesAgentDeploymentTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesAgentDeploymentTargetState, opts?: pulumi.CustomResourceOptions): KubernetesAgentDeploymentTarget {
        return new KubernetesAgentDeploymentTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'octopusdeploy:index/kubernetesAgentDeploymentTarget:KubernetesAgentDeploymentTarget';

    /**
     * Returns true if the given object is an instance of KubernetesAgentDeploymentTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesAgentDeploymentTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesAgentDeploymentTarget.__pulumiType;
    }

    /**
     * Name of the Helm release that the agent belongs to.
     */
    public /*out*/ readonly agentHelmReleaseName!: pulumi.Output<string>;
    /**
     * Name of the Kubernetes namespace where the agent is installed.
     */
    public /*out*/ readonly agentKubernetesNamespace!: pulumi.Output<string>;
    /**
     * Current Tentacle version of the agent
     */
    public /*out*/ readonly agentTentacleVersion!: pulumi.Output<string>;
    /**
     * Current upgrade availability status of the agent. One of 'NoUpgrades', 'UpgradeAvailable', 'UpgradeSuggested',
     * 'UpgradeRequired'
     */
    public /*out*/ readonly agentUpgradeStatus!: pulumi.Output<string>;
    /**
     * Current Helm chart version of the agent.
     */
    public /*out*/ readonly agentVersion!: pulumi.Output<string>;
    /**
     * The communication mode used by the Kubernetes agent to communicate with Octopus Server. Currently, the only supported
     * value is 'Polling'.
     */
    public readonly communicationMode!: pulumi.Output<string | undefined>;
    /**
     * Optional default namespace that will be used when using Kubernetes deployment steps, can be overrides within step
     * configurations.
     */
    public readonly defaultNamespace!: pulumi.Output<string>;
    /**
     * A list of environment IDs this Kubernetes agent can deploy to.
     */
    public readonly environments!: pulumi.Output<string[]>;
    /**
     * Whether the Kubernetes agent is disabled. If the agent is disabled, it will not be included in any deployments.
     */
    public readonly isDisabled!: pulumi.Output<boolean | undefined>;
    /**
     * Optional ID of the machine policy that the Kubernetes agent will use. If not provided the default machine policy will be
     * used.
     */
    public readonly machinePolicyId!: pulumi.Output<string>;
    /**
     * The name of this resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of target roles that are associated to this Kubernetes agent.
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * The space ID associated with this resource.
     */
    public readonly spaceId!: pulumi.Output<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    public readonly tenantTags!: pulumi.Output<string[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or
     * `Tenanted`.
     */
    public readonly tenantedDeploymentParticipation!: pulumi.Output<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    public readonly tenants!: pulumi.Output<string[]>;
    /**
     * The thumbprint of the Kubernetes agent's certificate used by server to verify the identity of the agent. This is the
     * same thumbprint that was used when installing the agent.
     */
    public readonly thumbprint!: pulumi.Output<string>;
    /**
     * If enabled the Kubernetes agent will not automatically upgrade and will stay on the currently installed version, even if
     * the associated machine policy is configured to automatically upgrade.
     */
    public readonly upgradeLocked!: pulumi.Output<boolean | undefined>;
    /**
     * The URI of the Kubernetes agent's used by the server to queue messages. This is the same subscription uri that was used
     * when installing the agent.
     */
    public readonly uri!: pulumi.Output<string>;

    /**
     * Create a KubernetesAgentDeploymentTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesAgentDeploymentTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesAgentDeploymentTargetArgs | KubernetesAgentDeploymentTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesAgentDeploymentTargetState | undefined;
            resourceInputs["agentHelmReleaseName"] = state ? state.agentHelmReleaseName : undefined;
            resourceInputs["agentKubernetesNamespace"] = state ? state.agentKubernetesNamespace : undefined;
            resourceInputs["agentTentacleVersion"] = state ? state.agentTentacleVersion : undefined;
            resourceInputs["agentUpgradeStatus"] = state ? state.agentUpgradeStatus : undefined;
            resourceInputs["agentVersion"] = state ? state.agentVersion : undefined;
            resourceInputs["communicationMode"] = state ? state.communicationMode : undefined;
            resourceInputs["defaultNamespace"] = state ? state.defaultNamespace : undefined;
            resourceInputs["environments"] = state ? state.environments : undefined;
            resourceInputs["isDisabled"] = state ? state.isDisabled : undefined;
            resourceInputs["machinePolicyId"] = state ? state.machinePolicyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["tenantTags"] = state ? state.tenantTags : undefined;
            resourceInputs["tenantedDeploymentParticipation"] = state ? state.tenantedDeploymentParticipation : undefined;
            resourceInputs["tenants"] = state ? state.tenants : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
            resourceInputs["upgradeLocked"] = state ? state.upgradeLocked : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as KubernetesAgentDeploymentTargetArgs | undefined;
            if ((!args || args.environments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environments'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.thumbprint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'thumbprint'");
            }
            if ((!args || args.uri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uri'");
            }
            resourceInputs["communicationMode"] = args ? args.communicationMode : undefined;
            resourceInputs["defaultNamespace"] = args ? args.defaultNamespace : undefined;
            resourceInputs["environments"] = args ? args.environments : undefined;
            resourceInputs["isDisabled"] = args ? args.isDisabled : undefined;
            resourceInputs["machinePolicyId"] = args ? args.machinePolicyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["tenantTags"] = args ? args.tenantTags : undefined;
            resourceInputs["tenantedDeploymentParticipation"] = args ? args.tenantedDeploymentParticipation : undefined;
            resourceInputs["tenants"] = args ? args.tenants : undefined;
            resourceInputs["thumbprint"] = args ? args.thumbprint : undefined;
            resourceInputs["upgradeLocked"] = args ? args.upgradeLocked : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
            resourceInputs["agentHelmReleaseName"] = undefined /*out*/;
            resourceInputs["agentKubernetesNamespace"] = undefined /*out*/;
            resourceInputs["agentTentacleVersion"] = undefined /*out*/;
            resourceInputs["agentUpgradeStatus"] = undefined /*out*/;
            resourceInputs["agentVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesAgentDeploymentTarget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesAgentDeploymentTarget resources.
 */
export interface KubernetesAgentDeploymentTargetState {
    /**
     * Name of the Helm release that the agent belongs to.
     */
    agentHelmReleaseName?: pulumi.Input<string>;
    /**
     * Name of the Kubernetes namespace where the agent is installed.
     */
    agentKubernetesNamespace?: pulumi.Input<string>;
    /**
     * Current Tentacle version of the agent
     */
    agentTentacleVersion?: pulumi.Input<string>;
    /**
     * Current upgrade availability status of the agent. One of 'NoUpgrades', 'UpgradeAvailable', 'UpgradeSuggested',
     * 'UpgradeRequired'
     */
    agentUpgradeStatus?: pulumi.Input<string>;
    /**
     * Current Helm chart version of the agent.
     */
    agentVersion?: pulumi.Input<string>;
    /**
     * The communication mode used by the Kubernetes agent to communicate with Octopus Server. Currently, the only supported
     * value is 'Polling'.
     */
    communicationMode?: pulumi.Input<string>;
    /**
     * Optional default namespace that will be used when using Kubernetes deployment steps, can be overrides within step
     * configurations.
     */
    defaultNamespace?: pulumi.Input<string>;
    /**
     * A list of environment IDs this Kubernetes agent can deploy to.
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the Kubernetes agent is disabled. If the agent is disabled, it will not be included in any deployments.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Optional ID of the machine policy that the Kubernetes agent will use. If not provided the default machine policy will be
     * used.
     */
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of target roles that are associated to this Kubernetes agent.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or
     * `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The thumbprint of the Kubernetes agent's certificate used by server to verify the identity of the agent. This is the
     * same thumbprint that was used when installing the agent.
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * If enabled the Kubernetes agent will not automatically upgrade and will stay on the currently installed version, even if
     * the associated machine policy is configured to automatically upgrade.
     */
    upgradeLocked?: pulumi.Input<boolean>;
    /**
     * The URI of the Kubernetes agent's used by the server to queue messages. This is the same subscription uri that was used
     * when installing the agent.
     */
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesAgentDeploymentTarget resource.
 */
export interface KubernetesAgentDeploymentTargetArgs {
    /**
     * The communication mode used by the Kubernetes agent to communicate with Octopus Server. Currently, the only supported
     * value is 'Polling'.
     */
    communicationMode?: pulumi.Input<string>;
    /**
     * Optional default namespace that will be used when using Kubernetes deployment steps, can be overrides within step
     * configurations.
     */
    defaultNamespace?: pulumi.Input<string>;
    /**
     * A list of environment IDs this Kubernetes agent can deploy to.
     */
    environments: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the Kubernetes agent is disabled. If the agent is disabled, it will not be included in any deployments.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * Optional ID of the machine policy that the Kubernetes agent will use. If not provided the default machine policy will be
     * used.
     */
    machinePolicyId?: pulumi.Input<string>;
    /**
     * The name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of target roles that are associated to this Kubernetes agent.
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The space ID associated with this resource.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or
     * `Tenanted`.
     */
    tenantedDeploymentParticipation?: pulumi.Input<string>;
    /**
     * A list of tenant IDs associated with this resource.
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The thumbprint of the Kubernetes agent's certificate used by server to verify the identity of the agent. This is the
     * same thumbprint that was used when installing the agent.
     */
    thumbprint: pulumi.Input<string>;
    /**
     * If enabled the Kubernetes agent will not automatically upgrade and will stay on the currently installed version, even if
     * the associated machine policy is configured to automatically upgrade.
     */
    upgradeLocked?: pulumi.Input<boolean>;
    /**
     * The URI of the Kubernetes agent's used by the server to queue messages. This is the same subscription uri that was used
     * when installing the agent.
     */
    uri: pulumi.Input<string>;
}
