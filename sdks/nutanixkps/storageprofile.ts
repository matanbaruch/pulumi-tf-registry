// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Storageprofile extends pulumi.CustomResource {
    /**
     * Get an existing Storageprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageprofileState, opts?: pulumi.CustomResourceOptions): Storageprofile {
        return new Storageprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanixkps:index/storageprofile:Storageprofile';

    /**
     * Returns true if the given object is an instance of Storageprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Storageprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Storageprofile.__pulumiType;
    }

    /**
     * Configuration for the EBS type storage profile which uses the AWS EBS volumes as the backend storage for this profile.
     */
    public readonly ebsStorageConfig!: pulumi.Output<outputs.StorageprofileEbsStorageConfig | undefined>;
    /**
     * Default setting is true. Set to false indicates this storage profile is not the default profile for the service domain.
     */
    public readonly isDefault!: pulumi.Output<boolean>;
    /**
     * Name of the service instance: Maximum length of 200 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configuration for the Nutanix AOS cluster storage which uses Nutanix Volumes as the backend storage for this profile.
     */
    public readonly nutanixVolumesConfig!: pulumi.Output<outputs.StorageprofileNutanixVolumesConfig | undefined>;
    /**
     * ID of the Service Domain to which this Storage Profile belongs.
     */
    public readonly serviceDomainId!: pulumi.Output<string>;
    /**
     * Type of the Storage Profile, auto-computed. No input required for this field.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Storageprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageprofileArgs | StorageprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageprofileState | undefined;
            resourceInputs["ebsStorageConfig"] = state ? state.ebsStorageConfig : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nutanixVolumesConfig"] = state ? state.nutanixVolumesConfig : undefined;
            resourceInputs["serviceDomainId"] = state ? state.serviceDomainId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as StorageprofileArgs | undefined;
            if ((!args || args.isDefault === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isDefault'");
            }
            if ((!args || args.serviceDomainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceDomainId'");
            }
            resourceInputs["ebsStorageConfig"] = args ? args.ebsStorageConfig : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nutanixVolumesConfig"] = args ? args.nutanixVolumesConfig : undefined;
            resourceInputs["serviceDomainId"] = args ? args.serviceDomainId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Storageprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Storageprofile resources.
 */
export interface StorageprofileState {
    /**
     * Configuration for the EBS type storage profile which uses the AWS EBS volumes as the backend storage for this profile.
     */
    ebsStorageConfig?: pulumi.Input<inputs.StorageprofileEbsStorageConfig>;
    /**
     * Default setting is true. Set to false indicates this storage profile is not the default profile for the service domain.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Name of the service instance: Maximum length of 200 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration for the Nutanix AOS cluster storage which uses Nutanix Volumes as the backend storage for this profile.
     */
    nutanixVolumesConfig?: pulumi.Input<inputs.StorageprofileNutanixVolumesConfig>;
    /**
     * ID of the Service Domain to which this Storage Profile belongs.
     */
    serviceDomainId?: pulumi.Input<string>;
    /**
     * Type of the Storage Profile, auto-computed. No input required for this field.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Storageprofile resource.
 */
export interface StorageprofileArgs {
    /**
     * Configuration for the EBS type storage profile which uses the AWS EBS volumes as the backend storage for this profile.
     */
    ebsStorageConfig?: pulumi.Input<inputs.StorageprofileEbsStorageConfig>;
    /**
     * Default setting is true. Set to false indicates this storage profile is not the default profile for the service domain.
     */
    isDefault: pulumi.Input<boolean>;
    /**
     * Name of the service instance: Maximum length of 200 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration for the Nutanix AOS cluster storage which uses Nutanix Volumes as the backend storage for this profile.
     */
    nutanixVolumesConfig?: pulumi.Input<inputs.StorageprofileNutanixVolumesConfig>;
    /**
     * ID of the Service Domain to which this Storage Profile belongs.
     */
    serviceDomainId: pulumi.Input<string>;
    /**
     * Type of the Storage Profile, auto-computed. No input required for this field.
     */
    type?: pulumi.Input<string>;
}
