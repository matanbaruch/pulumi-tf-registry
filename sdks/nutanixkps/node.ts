// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Node extends pulumi.CustomResource {
    /**
     * Get an existing Node resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeState, opts?: pulumi.CustomResourceOptions): Node {
        return new Node(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanixkps:index/node:Node';

    /**
     * Returns true if the given object is an instance of Node.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Node {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Node.__pulumiType;
    }

    /**
     * Describe the node. For example, the main purpose or use case of the node.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Gateway IPv4 address for this node
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * IPv4 address of this node
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * Default setting is true. Set to false indicates this node is not a bootstrap master.
     */
    public readonly isBootstrapMaster!: pulumi.Output<boolean>;
    /**
     * Name of the node: Name must include lowercase alphanumeric characters and must start and end with an lowercase
     * alphanumeric character. Dash (-) and dot (.) characters are allowed as delimiters. Maximum length of 60 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set the role as master or worker. Default setting is true to enable the role as master as well as worker. Set to false
     * to disable a role.
     */
    public readonly role!: pulumi.Output<outputs.NodeRole>;
    /**
     * Node serial number. Any alpha characters must be in all capitals.
     */
    public readonly serialNumber!: pulumi.Output<string>;
    /**
     * Id of the service domain to which this node belongs
     */
    public readonly serviceDomainId!: pulumi.Output<string>;
    /**
     * Subnet mask for this node
     */
    public readonly subnet!: pulumi.Output<string>;
    public readonly waitForOnboarding!: pulumi.Output<boolean | undefined>;
    /**
     * Wait timeout in minutes
     */
    public readonly waitTimeoutMinutes!: pulumi.Output<number | undefined>;

    /**
     * Create a Node resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeArgs | NodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["isBootstrapMaster"] = state ? state.isBootstrapMaster : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["serviceDomainId"] = state ? state.serviceDomainId : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["waitForOnboarding"] = state ? state.waitForOnboarding : undefined;
            resourceInputs["waitTimeoutMinutes"] = state ? state.waitTimeoutMinutes : undefined;
        } else {
            const args = argsOrState as NodeArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.serialNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serialNumber'");
            }
            if ((!args || args.serviceDomainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceDomainId'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["isBootstrapMaster"] = args ? args.isBootstrapMaster : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["serialNumber"] = args ? args.serialNumber : undefined;
            resourceInputs["serviceDomainId"] = args ? args.serviceDomainId : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["waitForOnboarding"] = args ? args.waitForOnboarding : undefined;
            resourceInputs["waitTimeoutMinutes"] = args ? args.waitTimeoutMinutes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Node.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Node resources.
 */
export interface NodeState {
    /**
     * Describe the node. For example, the main purpose or use case of the node.
     */
    description?: pulumi.Input<string>;
    /**
     * Gateway IPv4 address for this node
     */
    gateway?: pulumi.Input<string>;
    /**
     * IPv4 address of this node
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Default setting is true. Set to false indicates this node is not a bootstrap master.
     */
    isBootstrapMaster?: pulumi.Input<boolean>;
    /**
     * Name of the node: Name must include lowercase alphanumeric characters and must start and end with an lowercase
     * alphanumeric character. Dash (-) and dot (.) characters are allowed as delimiters. Maximum length of 60 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Set the role as master or worker. Default setting is true to enable the role as master as well as worker. Set to false
     * to disable a role.
     */
    role?: pulumi.Input<inputs.NodeRole>;
    /**
     * Node serial number. Any alpha characters must be in all capitals.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * Id of the service domain to which this node belongs
     */
    serviceDomainId?: pulumi.Input<string>;
    /**
     * Subnet mask for this node
     */
    subnet?: pulumi.Input<string>;
    waitForOnboarding?: pulumi.Input<boolean>;
    /**
     * Wait timeout in minutes
     */
    waitTimeoutMinutes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Node resource.
 */
export interface NodeArgs {
    /**
     * Describe the node. For example, the main purpose or use case of the node.
     */
    description: pulumi.Input<string>;
    /**
     * Gateway IPv4 address for this node
     */
    gateway: pulumi.Input<string>;
    /**
     * IPv4 address of this node
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Default setting is true. Set to false indicates this node is not a bootstrap master.
     */
    isBootstrapMaster?: pulumi.Input<boolean>;
    /**
     * Name of the node: Name must include lowercase alphanumeric characters and must start and end with an lowercase
     * alphanumeric character. Dash (-) and dot (.) characters are allowed as delimiters. Maximum length of 60 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Set the role as master or worker. Default setting is true to enable the role as master as well as worker. Set to false
     * to disable a role.
     */
    role: pulumi.Input<inputs.NodeRole>;
    /**
     * Node serial number. Any alpha characters must be in all capitals.
     */
    serialNumber: pulumi.Input<string>;
    /**
     * Id of the service domain to which this node belongs
     */
    serviceDomainId: pulumi.Input<string>;
    /**
     * Subnet mask for this node
     */
    subnet: pulumi.Input<string>;
    waitForOnboarding?: pulumi.Input<boolean>;
    /**
     * Wait timeout in minutes
     */
    waitTimeoutMinutes?: pulumi.Input<number>;
}
