// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { GetNodeArgs, GetNodeResult, GetNodeOutputArgs } from "./getNode";
export const getNode: typeof import("./getNode").getNode = null as any;
export const getNodeOutput: typeof import("./getNode").getNodeOutput = null as any;
utilities.lazyLoad(exports, ["getNode","getNodeOutput"], () => require("./getNode"));

export { GetNodesArgs, GetNodesResult, GetNodesOutputArgs } from "./getNodes";
export const getNodes: typeof import("./getNodes").getNodes = null as any;
export const getNodesOutput: typeof import("./getNodes").getNodesOutput = null as any;
utilities.lazyLoad(exports, ["getNodes","getNodesOutput"], () => require("./getNodes"));

export { GetServiceclassArgs, GetServiceclassResult, GetServiceclassOutputArgs } from "./getServiceclass";
export const getServiceclass: typeof import("./getServiceclass").getServiceclass = null as any;
export const getServiceclassOutput: typeof import("./getServiceclass").getServiceclassOutput = null as any;
utilities.lazyLoad(exports, ["getServiceclass","getServiceclassOutput"], () => require("./getServiceclass"));

export { GetServiceclassesArgs, GetServiceclassesResult, GetServiceclassesOutputArgs } from "./getServiceclasses";
export const getServiceclasses: typeof import("./getServiceclasses").getServiceclasses = null as any;
export const getServiceclassesOutput: typeof import("./getServiceclasses").getServiceclassesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceclasses","getServiceclassesOutput"], () => require("./getServiceclasses"));

export { GetServicedomainsArgs, GetServicedomainsResult, GetServicedomainsOutputArgs } from "./getServicedomains";
export const getServicedomains: typeof import("./getServicedomains").getServicedomains = null as any;
export const getServicedomainsOutput: typeof import("./getServicedomains").getServicedomainsOutput = null as any;
utilities.lazyLoad(exports, ["getServicedomains","getServicedomainsOutput"], () => require("./getServicedomains"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetVmConfigArgs, GetVmConfigResult, GetVmConfigOutputArgs } from "./getVmConfig";
export const getVmConfig: typeof import("./getVmConfig").getVmConfig = null as any;
export const getVmConfigOutput: typeof import("./getVmConfig").getVmConfigOutput = null as any;
utilities.lazyLoad(exports, ["getVmConfig","getVmConfigOutput"], () => require("./getVmConfig"));

export { NodeArgs, NodeState } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServicebindingArgs, ServicebindingState } from "./servicebinding";
export type Servicebinding = import("./servicebinding").Servicebinding;
export const Servicebinding: typeof import("./servicebinding").Servicebinding = null as any;
utilities.lazyLoad(exports, ["Servicebinding"], () => require("./servicebinding"));

export { ServicedomainArgs, ServicedomainState } from "./servicedomain";
export type Servicedomain = import("./servicedomain").Servicedomain;
export const Servicedomain: typeof import("./servicedomain").Servicedomain = null as any;
utilities.lazyLoad(exports, ["Servicedomain"], () => require("./servicedomain"));

export { ServiceinstanceArgs, ServiceinstanceState } from "./serviceinstance";
export type Serviceinstance = import("./serviceinstance").Serviceinstance;
export const Serviceinstance: typeof import("./serviceinstance").Serviceinstance = null as any;
utilities.lazyLoad(exports, ["Serviceinstance"], () => require("./serviceinstance"));

export { StorageprofileArgs, StorageprofileState } from "./storageprofile";
export type Storageprofile = import("./storageprofile").Storageprofile;
export const Storageprofile: typeof import("./storageprofile").Storageprofile = null as any;
utilities.lazyLoad(exports, ["Storageprofile"], () => require("./storageprofile"));

export { VmCloudConfigArgs, VmCloudConfigState } from "./vmCloudConfig";
export type VmCloudConfig = import("./vmCloudConfig").VmCloudConfig;
export const VmCloudConfig: typeof import("./vmCloudConfig").VmCloudConfig = null as any;
utilities.lazyLoad(exports, ["VmCloudConfig"], () => require("./vmCloudConfig"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nutanixkps:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "nutanixkps:index/node:Node":
                return new Node(name, <any>undefined, { urn })
            case "nutanixkps:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "nutanixkps:index/servicebinding:Servicebinding":
                return new Servicebinding(name, <any>undefined, { urn })
            case "nutanixkps:index/servicedomain:Servicedomain":
                return new Servicedomain(name, <any>undefined, { urn })
            case "nutanixkps:index/serviceinstance:Serviceinstance":
                return new Serviceinstance(name, <any>undefined, { urn })
            case "nutanixkps:index/storageprofile:Storageprofile":
                return new Storageprofile(name, <any>undefined, { urn })
            case "nutanixkps:index/vmCloudConfig:VmCloudConfig":
                return new VmCloudConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nutanixkps", "index/application", _module)
pulumi.runtime.registerResourceModule("nutanixkps", "index/node", _module)
pulumi.runtime.registerResourceModule("nutanixkps", "index/project", _module)
pulumi.runtime.registerResourceModule("nutanixkps", "index/servicebinding", _module)
pulumi.runtime.registerResourceModule("nutanixkps", "index/servicedomain", _module)
pulumi.runtime.registerResourceModule("nutanixkps", "index/serviceinstance", _module)
pulumi.runtime.registerResourceModule("nutanixkps", "index/storageprofile", _module)
pulumi.runtime.registerResourceModule("nutanixkps", "index/vmCloudConfig", _module)
pulumi.runtime.registerResourcePackage("nutanixkps", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nutanixkps") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
