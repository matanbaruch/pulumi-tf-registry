// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNode(args: GetNodeArgs, opts?: pulumi.InvokeOptions): Promise<GetNodeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanixkps:index/getNode:getNode", {
        "description": args.description,
        "gateway": args.gateway,
        "id": args.id,
        "ipAddress": args.ipAddress,
        "isBootstrapMaster": args.isBootstrapMaster,
        "name": args.name,
        "nodeId": args.nodeId,
        "nodeName": args.nodeName,
        "role": args.role,
        "serialNumber": args.serialNumber,
        "serviceDomainId": args.serviceDomainId,
        "subnet": args.subnet,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNode.
 */
export interface GetNodeArgs {
    description?: string;
    gateway?: string;
    id?: string;
    ipAddress?: string;
    isBootstrapMaster?: boolean;
    name?: string;
    nodeId?: string;
    nodeName?: string;
    role?: inputs.GetNodeRole;
    serialNumber: string;
    serviceDomainId?: string;
    subnet?: string;
}

/**
 * A collection of values returned by getNode.
 */
export interface GetNodeResult {
    readonly description: string;
    readonly gateway: string;
    readonly id: string;
    readonly ipAddress: string;
    readonly isBootstrapMaster: boolean;
    readonly name: string;
    readonly nodeId?: string;
    readonly nodeName?: string;
    readonly role?: outputs.GetNodeRole;
    readonly serialNumber: string;
    readonly serviceDomainId: string;
    readonly subnet: string;
}
export function getNodeOutput(args: GetNodeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodeResult> {
    return pulumi.output(args).apply((a: any) => getNode(a, opts))
}

/**
 * A collection of arguments for invoking getNode.
 */
export interface GetNodeOutputArgs {
    description?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    isBootstrapMaster?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nodeId?: pulumi.Input<string>;
    nodeName?: pulumi.Input<string>;
    role?: pulumi.Input<inputs.GetNodeRoleArgs>;
    serialNumber: pulumi.Input<string>;
    serviceDomainId?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
}
