// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AgentArgs, AgentState } from "./agent";
export type Agent = import("./agent").Agent;
export const Agent: typeof import("./agent").Agent = null as any;
utilities.lazyLoad(exports, ["Agent"], () => require("./agent"));

export { AgentInstanceArgs, AgentInstanceState } from "./agentInstance";
export type AgentInstance = import("./agentInstance").AgentInstance;
export const AgentInstance: typeof import("./agentInstance").AgentInstance = null as any;
utilities.lazyLoad(exports, ["AgentInstance"], () => require("./agentInstance"));

export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { EnvArgs, EnvState } from "./env";
export type Env = import("./env").Env;
export const Env: typeof import("./env").Env = null as any;
utilities.lazyLoad(exports, ["Env"], () => require("./env"));

export { GetExternalAuthArgs, GetExternalAuthResult, GetExternalAuthOutputArgs } from "./getExternalAuth";
export const getExternalAuth: typeof import("./getExternalAuth").getExternalAuth = null as any;
export const getExternalAuthOutput: typeof import("./getExternalAuth").getExternalAuthOutput = null as any;
utilities.lazyLoad(exports, ["getExternalAuth","getExternalAuthOutput"], () => require("./getExternalAuth"));

export { GetGitAuthArgs, GetGitAuthResult, GetGitAuthOutputArgs } from "./getGitAuth";
export const getGitAuth: typeof import("./getGitAuth").getGitAuth = null as any;
export const getGitAuthOutput: typeof import("./getGitAuth").getGitAuthOutput = null as any;
utilities.lazyLoad(exports, ["getGitAuth","getGitAuthOutput"], () => require("./getGitAuth"));

export { GetParameterArgs, GetParameterResult, GetParameterOutputArgs } from "./getParameter";
export const getParameter: typeof import("./getParameter").getParameter = null as any;
export const getParameterOutput: typeof import("./getParameter").getParameterOutput = null as any;
utilities.lazyLoad(exports, ["getParameter","getParameterOutput"], () => require("./getParameter"));

export { GetProvisionerArgs, GetProvisionerResult, GetProvisionerOutputArgs } from "./getProvisioner";
export const getProvisioner: typeof import("./getProvisioner").getProvisioner = null as any;
export const getProvisionerOutput: typeof import("./getProvisioner").getProvisionerOutput = null as any;
utilities.lazyLoad(exports, ["getProvisioner","getProvisionerOutput"], () => require("./getProvisioner"));

export { GetWorkspaceResult } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { GetWorkspaceOwnerResult } from "./getWorkspaceOwner";
export const getWorkspaceOwner: typeof import("./getWorkspaceOwner").getWorkspaceOwner = null as any;
export const getWorkspaceOwnerOutput: typeof import("./getWorkspaceOwner").getWorkspaceOwnerOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceOwner","getWorkspaceOwnerOutput"], () => require("./getWorkspaceOwner"));

export { GetWorkspaceTagsArgs, GetWorkspaceTagsResult, GetWorkspaceTagsOutputArgs } from "./getWorkspaceTags";
export const getWorkspaceTags: typeof import("./getWorkspaceTags").getWorkspaceTags = null as any;
export const getWorkspaceTagsOutput: typeof import("./getWorkspaceTags").getWorkspaceTagsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceTags","getWorkspaceTagsOutput"], () => require("./getWorkspaceTags"));

export { MetadataArgs, MetadataState } from "./metadata";
export type Metadata = import("./metadata").Metadata;
export const Metadata: typeof import("./metadata").Metadata = null as any;
utilities.lazyLoad(exports, ["Metadata"], () => require("./metadata"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "coder:index/agent:Agent":
                return new Agent(name, <any>undefined, { urn })
            case "coder:index/agentInstance:AgentInstance":
                return new AgentInstance(name, <any>undefined, { urn })
            case "coder:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "coder:index/env:Env":
                return new Env(name, <any>undefined, { urn })
            case "coder:index/metadata:Metadata":
                return new Metadata(name, <any>undefined, { urn })
            case "coder:index/script:Script":
                return new Script(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("coder", "index/agent", _module)
pulumi.runtime.registerResourceModule("coder", "index/agentInstance", _module)
pulumi.runtime.registerResourceModule("coder", "index/app", _module)
pulumi.runtime.registerResourceModule("coder", "index/env", _module)
pulumi.runtime.registerResourceModule("coder", "index/metadata", _module)
pulumi.runtime.registerResourceModule("coder", "index/script", _module)
pulumi.runtime.registerResourcePackage("coder", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:coder") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
