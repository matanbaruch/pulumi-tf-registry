// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Script extends pulumi.CustomResource {
    /**
     * Get an existing Script resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScriptState, opts?: pulumi.CustomResourceOptions): Script {
        return new Script(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coder:index/script:Script';

    /**
     * Returns true if the given object is an instance of Script.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Script {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Script.__pulumiType;
    }

    /**
     * The `id` property of a `coder.Agent` resource to associate with.
     */
    public readonly agentId!: pulumi.Output<string>;
    /**
     * The cron schedule to run the script on. This is a cron expression.
     */
    public readonly cron!: pulumi.Output<string | undefined>;
    /**
     * The display name of the script to display logs in the dashboard.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * A URL to an icon that will display in the dashboard. View built-in icons
     * [here](https://github.com/coder/coder/tree/main/site/static/icon). Use a built-in icon with
     * `"${data.coder_workspace.me.access_url}/icon/<path>"`.
     */
    public readonly icon!: pulumi.Output<string | undefined>;
    /**
     * The path of a file to write the logs to. If relative, it will be appended to tmp.
     */
    public readonly logPath!: pulumi.Output<string | undefined>;
    /**
     * This option defines whether or not the script should run when the agent starts. The script should exit when it is done
     * to signal that the agent is ready.
     */
    public readonly runOnStart!: pulumi.Output<boolean | undefined>;
    /**
     * This option defines whether or not the script should run when the agent stops. The script should exit when it is done to
     * signal that the workspace can be stopped.
     */
    public readonly runOnStop!: pulumi.Output<boolean | undefined>;
    /**
     * The content of the script that will be run.
     */
    public readonly script!: pulumi.Output<string>;
    /**
     * This option determines whether users can log in immediately or must wait for the workspace to finish running this script
     * upon startup. If not enabled, users may encounter an incomplete workspace when logging in. This option only sets the
     * default, the user can still manually override the behavior.
     */
    public readonly startBlocksLogin!: pulumi.Output<boolean | undefined>;
    /**
     * Time in seconds that the script is allowed to run. If the script does not complete within this time, the script is
     * terminated and the agent lifecycle status is marked as timed out. A value of zero (default) means no timeout.
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a Script resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScriptArgs | ScriptState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScriptState | undefined;
            resourceInputs["agentId"] = state ? state.agentId : undefined;
            resourceInputs["cron"] = state ? state.cron : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["icon"] = state ? state.icon : undefined;
            resourceInputs["logPath"] = state ? state.logPath : undefined;
            resourceInputs["runOnStart"] = state ? state.runOnStart : undefined;
            resourceInputs["runOnStop"] = state ? state.runOnStop : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["startBlocksLogin"] = state ? state.startBlocksLogin : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as ScriptArgs | undefined;
            if ((!args || args.agentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.script === undefined) && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            resourceInputs["agentId"] = args ? args.agentId : undefined;
            resourceInputs["cron"] = args ? args.cron : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["icon"] = args ? args.icon : undefined;
            resourceInputs["logPath"] = args ? args.logPath : undefined;
            resourceInputs["runOnStart"] = args ? args.runOnStart : undefined;
            resourceInputs["runOnStop"] = args ? args.runOnStop : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["startBlocksLogin"] = args ? args.startBlocksLogin : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Script.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Script resources.
 */
export interface ScriptState {
    /**
     * The `id` property of a `coder.Agent` resource to associate with.
     */
    agentId?: pulumi.Input<string>;
    /**
     * The cron schedule to run the script on. This is a cron expression.
     */
    cron?: pulumi.Input<string>;
    /**
     * The display name of the script to display logs in the dashboard.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A URL to an icon that will display in the dashboard. View built-in icons
     * [here](https://github.com/coder/coder/tree/main/site/static/icon). Use a built-in icon with
     * `"${data.coder_workspace.me.access_url}/icon/<path>"`.
     */
    icon?: pulumi.Input<string>;
    /**
     * The path of a file to write the logs to. If relative, it will be appended to tmp.
     */
    logPath?: pulumi.Input<string>;
    /**
     * This option defines whether or not the script should run when the agent starts. The script should exit when it is done
     * to signal that the agent is ready.
     */
    runOnStart?: pulumi.Input<boolean>;
    /**
     * This option defines whether or not the script should run when the agent stops. The script should exit when it is done to
     * signal that the workspace can be stopped.
     */
    runOnStop?: pulumi.Input<boolean>;
    /**
     * The content of the script that will be run.
     */
    script?: pulumi.Input<string>;
    /**
     * This option determines whether users can log in immediately or must wait for the workspace to finish running this script
     * upon startup. If not enabled, users may encounter an incomplete workspace when logging in. This option only sets the
     * default, the user can still manually override the behavior.
     */
    startBlocksLogin?: pulumi.Input<boolean>;
    /**
     * Time in seconds that the script is allowed to run. If the script does not complete within this time, the script is
     * terminated and the agent lifecycle status is marked as timed out. A value of zero (default) means no timeout.
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Script resource.
 */
export interface ScriptArgs {
    /**
     * The `id` property of a `coder.Agent` resource to associate with.
     */
    agentId: pulumi.Input<string>;
    /**
     * The cron schedule to run the script on. This is a cron expression.
     */
    cron?: pulumi.Input<string>;
    /**
     * The display name of the script to display logs in the dashboard.
     */
    displayName: pulumi.Input<string>;
    /**
     * A URL to an icon that will display in the dashboard. View built-in icons
     * [here](https://github.com/coder/coder/tree/main/site/static/icon). Use a built-in icon with
     * `"${data.coder_workspace.me.access_url}/icon/<path>"`.
     */
    icon?: pulumi.Input<string>;
    /**
     * The path of a file to write the logs to. If relative, it will be appended to tmp.
     */
    logPath?: pulumi.Input<string>;
    /**
     * This option defines whether or not the script should run when the agent starts. The script should exit when it is done
     * to signal that the agent is ready.
     */
    runOnStart?: pulumi.Input<boolean>;
    /**
     * This option defines whether or not the script should run when the agent stops. The script should exit when it is done to
     * signal that the workspace can be stopped.
     */
    runOnStop?: pulumi.Input<boolean>;
    /**
     * The content of the script that will be run.
     */
    script: pulumi.Input<string>;
    /**
     * This option determines whether users can log in immediately or must wait for the workspace to finish running this script
     * upon startup. If not enabled, users may encounter an incomplete workspace when logging in. This option only sets the
     * default, the user can still manually override the behavior.
     */
    startBlocksLogin?: pulumi.Input<boolean>;
    /**
     * Time in seconds that the script is allowed to run. If the script does not complete within this time, the script is
     * terminated and the agent lifecycle status is marked as timed out. A value of zero (default) means no timeout.
     */
    timeout?: pulumi.Input<number>;
}
