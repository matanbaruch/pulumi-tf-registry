// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Metadata extends pulumi.CustomResource {
    /**
     * Get an existing Metadata resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetadataState, opts?: pulumi.CustomResourceOptions): Metadata {
        return new Metadata(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coder:index/metadata:Metadata';

    /**
     * Returns true if the given object is an instance of Metadata.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Metadata {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Metadata.__pulumiType;
    }

    /**
     * (Enterprise) The cost of this resource every 24 hours. Use the smallest denomination of your preferred currency. For
     * example, if you work in USD, use cents.
     */
    public readonly dailyCost!: pulumi.Output<number | undefined>;
    /**
     * Hide the resource from the UI.
     */
    public readonly hide!: pulumi.Output<boolean | undefined>;
    /**
     * A URL to an icon that will display in the dashboard. View built-in icons
     * [here](https://github.com/coder/coder/tree/main/site/static/icon). Use a built-in icon with
     * `"${data.coder_workspace.me.access_url}/icon/<path>"`.
     */
    public readonly icon!: pulumi.Output<string | undefined>;
    /**
     * Each `item` block defines a single metadata item consisting of a key/value pair.
     */
    public readonly items!: pulumi.Output<outputs.MetadataItem[] | undefined>;
    /**
     * The `id` property of another resource that metadata should be attached to.
     */
    public readonly resourceId!: pulumi.Output<string>;

    /**
     * Create a Metadata resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetadataArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetadataArgs | MetadataState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetadataState | undefined;
            resourceInputs["dailyCost"] = state ? state.dailyCost : undefined;
            resourceInputs["hide"] = state ? state.hide : undefined;
            resourceInputs["icon"] = state ? state.icon : undefined;
            resourceInputs["items"] = state ? state.items : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
        } else {
            const args = argsOrState as MetadataArgs | undefined;
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["dailyCost"] = args ? args.dailyCost : undefined;
            resourceInputs["hide"] = args ? args.hide : undefined;
            resourceInputs["icon"] = args ? args.icon : undefined;
            resourceInputs["items"] = args ? args.items : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Metadata.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Metadata resources.
 */
export interface MetadataState {
    /**
     * (Enterprise) The cost of this resource every 24 hours. Use the smallest denomination of your preferred currency. For
     * example, if you work in USD, use cents.
     */
    dailyCost?: pulumi.Input<number>;
    /**
     * Hide the resource from the UI.
     */
    hide?: pulumi.Input<boolean>;
    /**
     * A URL to an icon that will display in the dashboard. View built-in icons
     * [here](https://github.com/coder/coder/tree/main/site/static/icon). Use a built-in icon with
     * `"${data.coder_workspace.me.access_url}/icon/<path>"`.
     */
    icon?: pulumi.Input<string>;
    /**
     * Each `item` block defines a single metadata item consisting of a key/value pair.
     */
    items?: pulumi.Input<pulumi.Input<inputs.MetadataItem>[]>;
    /**
     * The `id` property of another resource that metadata should be attached to.
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Metadata resource.
 */
export interface MetadataArgs {
    /**
     * (Enterprise) The cost of this resource every 24 hours. Use the smallest denomination of your preferred currency. For
     * example, if you work in USD, use cents.
     */
    dailyCost?: pulumi.Input<number>;
    /**
     * Hide the resource from the UI.
     */
    hide?: pulumi.Input<boolean>;
    /**
     * A URL to an icon that will display in the dashboard. View built-in icons
     * [here](https://github.com/coder/coder/tree/main/site/static/icon). Use a built-in icon with
     * `"${data.coder_workspace.me.access_url}/icon/<path>"`.
     */
    icon?: pulumi.Input<string>;
    /**
     * Each `item` block defines a single metadata item consisting of a key/value pair.
     */
    items?: pulumi.Input<pulumi.Input<inputs.MetadataItem>[]>;
    /**
     * The `id` property of another resource that metadata should be attached to.
     */
    resourceId: pulumi.Input<string>;
}
