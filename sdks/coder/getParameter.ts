// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getParameter(args: GetParameterArgs, opts?: pulumi.InvokeOptions): Promise<GetParameterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("coder:index/getParameter:getParameter", {
        "default": args.default,
        "description": args.description,
        "displayName": args.displayName,
        "ephemeral": args.ephemeral,
        "icon": args.icon,
        "id": args.id,
        "mutable": args.mutable,
        "name": args.name,
        "options": args.options,
        "order": args.order,
        "type": args.type,
        "validation": args.validation,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getParameter.
 */
export interface GetParameterArgs {
    default?: string;
    description?: string;
    displayName?: string;
    ephemeral?: boolean;
    icon?: string;
    id?: string;
    mutable?: boolean;
    name: string;
    options?: inputs.GetParameterOption[];
    order?: number;
    type?: string;
    validation?: inputs.GetParameterValidation;
}

/**
 * A collection of values returned by getParameter.
 */
export interface GetParameterResult {
    readonly default?: string;
    readonly description?: string;
    readonly displayName?: string;
    readonly ephemeral?: boolean;
    readonly icon?: string;
    readonly id: string;
    readonly mutable?: boolean;
    readonly name: string;
    readonly optional: boolean;
    readonly options?: outputs.GetParameterOption[];
    readonly order?: number;
    readonly type?: string;
    readonly validation?: outputs.GetParameterValidation;
    readonly value: string;
}
export function getParameterOutput(args: GetParameterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetParameterResult> {
    return pulumi.output(args).apply((a: any) => getParameter(a, opts))
}

/**
 * A collection of arguments for invoking getParameter.
 */
export interface GetParameterOutputArgs {
    default?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    ephemeral?: pulumi.Input<boolean>;
    icon?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    mutable?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.GetParameterOptionArgs>[]>;
    order?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    validation?: pulumi.Input<inputs.GetParameterValidationArgs>;
}
