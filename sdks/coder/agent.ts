// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Agent extends pulumi.CustomResource {
    /**
     * Get an existing Agent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AgentState, opts?: pulumi.CustomResourceOptions): Agent {
        return new Agent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coder:index/agent:Agent';

    /**
     * Returns true if the given object is an instance of Agent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Agent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Agent.__pulumiType;
    }

    /**
     * The architecture the agent will run on. Must be one of: `"amd64"`, `"armv7"`, `"arm64"`.
     */
    public readonly arch!: pulumi.Output<string>;
    /**
     * The authentication type the agent will use. Must be one of: `"token"`, `"google-instance-identity"`,
     * `"aws-instance-identity"`, `"azure-instance-identity"`.
     */
    public readonly auth!: pulumi.Output<string | undefined>;
    /**
     * Time in seconds until the agent is marked as timed out when a connection with the server cannot be established. A value
     * of zero never marks the agent as timed out.
     */
    public readonly connectionTimeout!: pulumi.Output<number | undefined>;
    /**
     * The starting directory when a user creates a shell session. Defaults to `"$HOME"`.
     */
    public readonly dir!: pulumi.Output<string | undefined>;
    /**
     * The list of built-in apps to display in the agent bar.
     */
    public readonly displayApps!: pulumi.Output<outputs.AgentDisplayApps | undefined>;
    /**
     * A mapping of environment variables to set inside the workspace.
     */
    public readonly env!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Run this script on startup of an instance to initialize the agent.
     */
    public /*out*/ readonly initScript!: pulumi.Output<string>;
    /**
     * This option defines whether or not the user can (by default) login to the workspace before it is ready. Ready means that
     * e.g. the `startup_script` is done and has exited. When enabled, users may see an incomplete workspace when logging in.
     *
     * @deprecated Deprecated
     */
    public readonly loginBeforeReady!: pulumi.Output<boolean | undefined>;
    /**
     * Each `metadata` block defines a single item consisting of a key/value pair. This feature is in alpha and may break in
     * future releases.
     */
    public readonly metadatas!: pulumi.Output<outputs.AgentMetadata[] | undefined>;
    /**
     * The path to a file within the workspace containing a message to display to users when they login via SSH. A typical
     * value would be `"/etc/motd"`.
     */
    public readonly motdFile!: pulumi.Output<string | undefined>;
    /**
     * The order determines the position of agents in the UI presentation. The lowest order is shown first and agents with
     * equal order are sorted by name (ascending order).
     */
    public readonly order!: pulumi.Output<number | undefined>;
    /**
     * The operating system the agent will run on. Must be one of: `"linux"`, `"darwin"`, or `"windows"`.
     */
    public readonly os!: pulumi.Output<string>;
    /**
     * A script to run before the agent is stopped. The script should exit when it is done to signal that the workspace can be
     * stopped. This option is an alias for defining a `coder.Script` resource with `run_on_stop` set to `true`.
     */
    public readonly shutdownScript!: pulumi.Output<string | undefined>;
    /**
     * Time in seconds until the agent lifecycle status is marked as timed out during shutdown, this happens when the shutdown
     * script has not completed (exited) in the given time.
     *
     * @deprecated Deprecated
     */
    public readonly shutdownScriptTimeout!: pulumi.Output<number | undefined>;
    /**
     * A script to run after the agent starts. The script should exit when it is done to signal that the agent is ready. This
     * option is an alias for defining a `coder.Script` resource with `run_on_start` set to `true`.
     */
    public readonly startupScript!: pulumi.Output<string | undefined>;
    /**
     * This option sets the behavior of the `startup_script`. When set to `"blocking"`, the `startup_script` must exit before
     * the workspace is ready. When set to `"non-blocking"`, the `startup_script` may run in the background and the workspace
     * will be ready immediately. Default is `"non-blocking"`, although `"blocking"` is recommended. This option is an alias
     * for defining a `coder.Script` resource with `start_blocks_login` set to `true` (blocking).
     */
    public readonly startupScriptBehavior!: pulumi.Output<string | undefined>;
    /**
     * Time in seconds until the agent lifecycle status is marked as timed out during start, this happens when the startup
     * script has not completed (exited) in the given time.
     *
     * @deprecated Deprecated
     */
    public readonly startupScriptTimeout!: pulumi.Output<number | undefined>;
    /**
     * Set the environment variable `CODER_AGENT_TOKEN` with this token to authenticate an agent.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * A URL to a document with instructions for troubleshooting problems with the agent.
     */
    public readonly troubleshootingUrl!: pulumi.Output<string | undefined>;

    /**
     * Create a Agent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AgentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AgentArgs | AgentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AgentState | undefined;
            resourceInputs["arch"] = state ? state.arch : undefined;
            resourceInputs["auth"] = state ? state.auth : undefined;
            resourceInputs["connectionTimeout"] = state ? state.connectionTimeout : undefined;
            resourceInputs["dir"] = state ? state.dir : undefined;
            resourceInputs["displayApps"] = state ? state.displayApps : undefined;
            resourceInputs["env"] = state ? state.env : undefined;
            resourceInputs["initScript"] = state ? state.initScript : undefined;
            resourceInputs["loginBeforeReady"] = state ? state.loginBeforeReady : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["motdFile"] = state ? state.motdFile : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["shutdownScript"] = state ? state.shutdownScript : undefined;
            resourceInputs["shutdownScriptTimeout"] = state ? state.shutdownScriptTimeout : undefined;
            resourceInputs["startupScript"] = state ? state.startupScript : undefined;
            resourceInputs["startupScriptBehavior"] = state ? state.startupScriptBehavior : undefined;
            resourceInputs["startupScriptTimeout"] = state ? state.startupScriptTimeout : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["troubleshootingUrl"] = state ? state.troubleshootingUrl : undefined;
        } else {
            const args = argsOrState as AgentArgs | undefined;
            if ((!args || args.arch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'arch'");
            }
            if ((!args || args.os === undefined) && !opts.urn) {
                throw new Error("Missing required property 'os'");
            }
            resourceInputs["arch"] = args ? args.arch : undefined;
            resourceInputs["auth"] = args ? args.auth : undefined;
            resourceInputs["connectionTimeout"] = args ? args.connectionTimeout : undefined;
            resourceInputs["dir"] = args ? args.dir : undefined;
            resourceInputs["displayApps"] = args ? args.displayApps : undefined;
            resourceInputs["env"] = args ? args.env : undefined;
            resourceInputs["loginBeforeReady"] = args ? args.loginBeforeReady : undefined;
            resourceInputs["metadatas"] = args ? args.metadatas : undefined;
            resourceInputs["motdFile"] = args ? args.motdFile : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["shutdownScript"] = args ? args.shutdownScript : undefined;
            resourceInputs["shutdownScriptTimeout"] = args ? args.shutdownScriptTimeout : undefined;
            resourceInputs["startupScript"] = args ? args.startupScript : undefined;
            resourceInputs["startupScriptBehavior"] = args ? args.startupScriptBehavior : undefined;
            resourceInputs["startupScriptTimeout"] = args ? args.startupScriptTimeout : undefined;
            resourceInputs["troubleshootingUrl"] = args ? args.troubleshootingUrl : undefined;
            resourceInputs["initScript"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Agent.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Agent resources.
 */
export interface AgentState {
    /**
     * The architecture the agent will run on. Must be one of: `"amd64"`, `"armv7"`, `"arm64"`.
     */
    arch?: pulumi.Input<string>;
    /**
     * The authentication type the agent will use. Must be one of: `"token"`, `"google-instance-identity"`,
     * `"aws-instance-identity"`, `"azure-instance-identity"`.
     */
    auth?: pulumi.Input<string>;
    /**
     * Time in seconds until the agent is marked as timed out when a connection with the server cannot be established. A value
     * of zero never marks the agent as timed out.
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * The starting directory when a user creates a shell session. Defaults to `"$HOME"`.
     */
    dir?: pulumi.Input<string>;
    /**
     * The list of built-in apps to display in the agent bar.
     */
    displayApps?: pulumi.Input<inputs.AgentDisplayApps>;
    /**
     * A mapping of environment variables to set inside the workspace.
     */
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Run this script on startup of an instance to initialize the agent.
     */
    initScript?: pulumi.Input<string>;
    /**
     * This option defines whether or not the user can (by default) login to the workspace before it is ready. Ready means that
     * e.g. the `startup_script` is done and has exited. When enabled, users may see an incomplete workspace when logging in.
     *
     * @deprecated Deprecated
     */
    loginBeforeReady?: pulumi.Input<boolean>;
    /**
     * Each `metadata` block defines a single item consisting of a key/value pair. This feature is in alpha and may break in
     * future releases.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.AgentMetadata>[]>;
    /**
     * The path to a file within the workspace containing a message to display to users when they login via SSH. A typical
     * value would be `"/etc/motd"`.
     */
    motdFile?: pulumi.Input<string>;
    /**
     * The order determines the position of agents in the UI presentation. The lowest order is shown first and agents with
     * equal order are sorted by name (ascending order).
     */
    order?: pulumi.Input<number>;
    /**
     * The operating system the agent will run on. Must be one of: `"linux"`, `"darwin"`, or `"windows"`.
     */
    os?: pulumi.Input<string>;
    /**
     * A script to run before the agent is stopped. The script should exit when it is done to signal that the workspace can be
     * stopped. This option is an alias for defining a `coder.Script` resource with `run_on_stop` set to `true`.
     */
    shutdownScript?: pulumi.Input<string>;
    /**
     * Time in seconds until the agent lifecycle status is marked as timed out during shutdown, this happens when the shutdown
     * script has not completed (exited) in the given time.
     *
     * @deprecated Deprecated
     */
    shutdownScriptTimeout?: pulumi.Input<number>;
    /**
     * A script to run after the agent starts. The script should exit when it is done to signal that the agent is ready. This
     * option is an alias for defining a `coder.Script` resource with `run_on_start` set to `true`.
     */
    startupScript?: pulumi.Input<string>;
    /**
     * This option sets the behavior of the `startup_script`. When set to `"blocking"`, the `startup_script` must exit before
     * the workspace is ready. When set to `"non-blocking"`, the `startup_script` may run in the background and the workspace
     * will be ready immediately. Default is `"non-blocking"`, although `"blocking"` is recommended. This option is an alias
     * for defining a `coder.Script` resource with `start_blocks_login` set to `true` (blocking).
     */
    startupScriptBehavior?: pulumi.Input<string>;
    /**
     * Time in seconds until the agent lifecycle status is marked as timed out during start, this happens when the startup
     * script has not completed (exited) in the given time.
     *
     * @deprecated Deprecated
     */
    startupScriptTimeout?: pulumi.Input<number>;
    /**
     * Set the environment variable `CODER_AGENT_TOKEN` with this token to authenticate an agent.
     */
    token?: pulumi.Input<string>;
    /**
     * A URL to a document with instructions for troubleshooting problems with the agent.
     */
    troubleshootingUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Agent resource.
 */
export interface AgentArgs {
    /**
     * The architecture the agent will run on. Must be one of: `"amd64"`, `"armv7"`, `"arm64"`.
     */
    arch: pulumi.Input<string>;
    /**
     * The authentication type the agent will use. Must be one of: `"token"`, `"google-instance-identity"`,
     * `"aws-instance-identity"`, `"azure-instance-identity"`.
     */
    auth?: pulumi.Input<string>;
    /**
     * Time in seconds until the agent is marked as timed out when a connection with the server cannot be established. A value
     * of zero never marks the agent as timed out.
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * The starting directory when a user creates a shell session. Defaults to `"$HOME"`.
     */
    dir?: pulumi.Input<string>;
    /**
     * The list of built-in apps to display in the agent bar.
     */
    displayApps?: pulumi.Input<inputs.AgentDisplayApps>;
    /**
     * A mapping of environment variables to set inside the workspace.
     */
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * This option defines whether or not the user can (by default) login to the workspace before it is ready. Ready means that
     * e.g. the `startup_script` is done and has exited. When enabled, users may see an incomplete workspace when logging in.
     *
     * @deprecated Deprecated
     */
    loginBeforeReady?: pulumi.Input<boolean>;
    /**
     * Each `metadata` block defines a single item consisting of a key/value pair. This feature is in alpha and may break in
     * future releases.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.AgentMetadata>[]>;
    /**
     * The path to a file within the workspace containing a message to display to users when they login via SSH. A typical
     * value would be `"/etc/motd"`.
     */
    motdFile?: pulumi.Input<string>;
    /**
     * The order determines the position of agents in the UI presentation. The lowest order is shown first and agents with
     * equal order are sorted by name (ascending order).
     */
    order?: pulumi.Input<number>;
    /**
     * The operating system the agent will run on. Must be one of: `"linux"`, `"darwin"`, or `"windows"`.
     */
    os: pulumi.Input<string>;
    /**
     * A script to run before the agent is stopped. The script should exit when it is done to signal that the workspace can be
     * stopped. This option is an alias for defining a `coder.Script` resource with `run_on_stop` set to `true`.
     */
    shutdownScript?: pulumi.Input<string>;
    /**
     * Time in seconds until the agent lifecycle status is marked as timed out during shutdown, this happens when the shutdown
     * script has not completed (exited) in the given time.
     *
     * @deprecated Deprecated
     */
    shutdownScriptTimeout?: pulumi.Input<number>;
    /**
     * A script to run after the agent starts. The script should exit when it is done to signal that the agent is ready. This
     * option is an alias for defining a `coder.Script` resource with `run_on_start` set to `true`.
     */
    startupScript?: pulumi.Input<string>;
    /**
     * This option sets the behavior of the `startup_script`. When set to `"blocking"`, the `startup_script` must exit before
     * the workspace is ready. When set to `"non-blocking"`, the `startup_script` may run in the background and the workspace
     * will be ready immediately. Default is `"non-blocking"`, although `"blocking"` is recommended. This option is an alias
     * for defining a `coder.Script` resource with `start_blocks_login` set to `true` (blocking).
     */
    startupScriptBehavior?: pulumi.Input<string>;
    /**
     * Time in seconds until the agent lifecycle status is marked as timed out during start, this happens when the startup
     * script has not completed (exited) in the given time.
     *
     * @deprecated Deprecated
     */
    startupScriptTimeout?: pulumi.Input<number>;
    /**
     * A URL to a document with instructions for troubleshooting problems with the agent.
     */
    troubleshootingUrl?: pulumi.Input<string>;
}
