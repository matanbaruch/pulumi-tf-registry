// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PipelineSchedule extends pulumi.CustomResource {
    /**
     * Get an existing PipelineSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipelineScheduleState, opts?: pulumi.CustomResourceOptions): PipelineSchedule {
        return new PipelineSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buildkite:index/pipelineSchedule:PipelineSchedule';

    /**
     * Returns true if the given object is an instance of PipelineSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PipelineSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PipelineSchedule.__pulumiType;
    }

    /**
     * The branch that the schedule should run on.
     */
    public readonly branch!: pulumi.Output<string>;
    /**
     * The commit that the schedule should run on.
     */
    public readonly commit!: pulumi.Output<string>;
    /**
     * The cronline that describes when the schedule should run.
     * See[here](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals) for supported syntax.
     */
    public readonly cronline!: pulumi.Output<string>;
    /**
     * Whether the schedule is enabled or not.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The environment variables that scheduled builds should use.
     */
    public readonly env!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A label to describe the schedule.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * The message the builds show for builds created by this schedule.
     */
    public readonly message!: pulumi.Output<string | undefined>;
    /**
     * The GraphQL ID of the pipeline that this schedule belongs to.
     */
    public readonly pipelineId!: pulumi.Output<string>;
    /**
     * The UUID of the schedule.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a PipelineSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipelineScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipelineScheduleArgs | PipelineScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipelineScheduleState | undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["commit"] = state ? state.commit : undefined;
            resourceInputs["cronline"] = state ? state.cronline : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["env"] = state ? state.env : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["pipelineId"] = state ? state.pipelineId : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as PipelineScheduleArgs | undefined;
            if ((!args || args.branch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if ((!args || args.cronline === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cronline'");
            }
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if ((!args || args.pipelineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineId'");
            }
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["commit"] = args ? args.commit : undefined;
            resourceInputs["cronline"] = args ? args.cronline : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["env"] = args ? args.env : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["pipelineId"] = args ? args.pipelineId : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PipelineSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PipelineSchedule resources.
 */
export interface PipelineScheduleState {
    /**
     * The branch that the schedule should run on.
     */
    branch?: pulumi.Input<string>;
    /**
     * The commit that the schedule should run on.
     */
    commit?: pulumi.Input<string>;
    /**
     * The cronline that describes when the schedule should run.
     * See[here](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals) for supported syntax.
     */
    cronline?: pulumi.Input<string>;
    /**
     * Whether the schedule is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The environment variables that scheduled builds should use.
     */
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A label to describe the schedule.
     */
    label?: pulumi.Input<string>;
    /**
     * The message the builds show for builds created by this schedule.
     */
    message?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the pipeline that this schedule belongs to.
     */
    pipelineId?: pulumi.Input<string>;
    /**
     * The UUID of the schedule.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PipelineSchedule resource.
 */
export interface PipelineScheduleArgs {
    /**
     * The branch that the schedule should run on.
     */
    branch: pulumi.Input<string>;
    /**
     * The commit that the schedule should run on.
     */
    commit?: pulumi.Input<string>;
    /**
     * The cronline that describes when the schedule should run.
     * See[here](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals) for supported syntax.
     */
    cronline: pulumi.Input<string>;
    /**
     * Whether the schedule is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The environment variables that scheduled builds should use.
     */
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A label to describe the schedule.
     */
    label: pulumi.Input<string>;
    /**
     * The message the builds show for builds created by this schedule.
     */
    message?: pulumi.Input<string>;
    /**
     * The GraphQL ID of the pipeline that this schedule belongs to.
     */
    pipelineId: pulumi.Input<string>;
}
