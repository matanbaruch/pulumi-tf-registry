// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AgentTokenArgs, AgentTokenState } from "./agentToken";
export type AgentToken = import("./agentToken").AgentToken;
export const AgentToken: typeof import("./agentToken").AgentToken = null as any;
utilities.lazyLoad(exports, ["AgentToken"], () => require("./agentToken"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterAgentTokenArgs, ClusterAgentTokenState } from "./clusterAgentToken";
export type ClusterAgentToken = import("./clusterAgentToken").ClusterAgentToken;
export const ClusterAgentToken: typeof import("./clusterAgentToken").ClusterAgentToken = null as any;
utilities.lazyLoad(exports, ["ClusterAgentToken"], () => require("./clusterAgentToken"));

export { ClusterDefaultQueueArgs, ClusterDefaultQueueState } from "./clusterDefaultQueue";
export type ClusterDefaultQueue = import("./clusterDefaultQueue").ClusterDefaultQueue;
export const ClusterDefaultQueue: typeof import("./clusterDefaultQueue").ClusterDefaultQueue = null as any;
utilities.lazyLoad(exports, ["ClusterDefaultQueue"], () => require("./clusterDefaultQueue"));

export { ClusterQueueArgs, ClusterQueueState } from "./clusterQueue";
export type ClusterQueue = import("./clusterQueue").ClusterQueue;
export const ClusterQueue: typeof import("./clusterQueue").ClusterQueue = null as any;
utilities.lazyLoad(exports, ["ClusterQueue"], () => require("./clusterQueue"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetMetaResult } from "./getMeta";
export const getMeta: typeof import("./getMeta").getMeta = null as any;
export const getMetaOutput: typeof import("./getMeta").getMetaOutput = null as any;
utilities.lazyLoad(exports, ["getMeta","getMetaOutput"], () => require("./getMeta"));

export { GetOrganizationResult } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetPipelineArgs, GetPipelineResult, GetPipelineOutputArgs } from "./getPipeline";
export const getPipeline: typeof import("./getPipeline").getPipeline = null as any;
export const getPipelineOutput: typeof import("./getPipeline").getPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getPipeline","getPipelineOutput"], () => require("./getPipeline"));

export { GetPipelineTemplateArgs, GetPipelineTemplateResult, GetPipelineTemplateOutputArgs } from "./getPipelineTemplate";
export const getPipelineTemplate: typeof import("./getPipelineTemplate").getPipelineTemplate = null as any;
export const getPipelineTemplateOutput: typeof import("./getPipelineTemplate").getPipelineTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getPipelineTemplate","getPipelineTemplateOutput"], () => require("./getPipelineTemplate"));

export { GetSignedPipelineStepsArgs, GetSignedPipelineStepsResult, GetSignedPipelineStepsOutputArgs } from "./getSignedPipelineSteps";
export const getSignedPipelineSteps: typeof import("./getSignedPipelineSteps").getSignedPipelineSteps = null as any;
export const getSignedPipelineStepsOutput: typeof import("./getSignedPipelineSteps").getSignedPipelineStepsOutput = null as any;
utilities.lazyLoad(exports, ["getSignedPipelineSteps","getSignedPipelineStepsOutput"], () => require("./getSignedPipelineSteps"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetTestSuiteArgs, GetTestSuiteResult, GetTestSuiteOutputArgs } from "./getTestSuite";
export const getTestSuite: typeof import("./getTestSuite").getTestSuite = null as any;
export const getTestSuiteOutput: typeof import("./getTestSuite").getTestSuiteOutput = null as any;
utilities.lazyLoad(exports, ["getTestSuite","getTestSuiteOutput"], () => require("./getTestSuite"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { OrganizationBannerArgs, OrganizationBannerState } from "./organizationBanner";
export type OrganizationBanner = import("./organizationBanner").OrganizationBanner;
export const OrganizationBanner: typeof import("./organizationBanner").OrganizationBanner = null as any;
utilities.lazyLoad(exports, ["OrganizationBanner"], () => require("./organizationBanner"));

export { PipelineArgs, PipelineState } from "./pipeline";
export type Pipeline = import("./pipeline").Pipeline;
export const Pipeline: typeof import("./pipeline").Pipeline = null as any;
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));

export { PipelineScheduleArgs, PipelineScheduleState } from "./pipelineSchedule";
export type PipelineSchedule = import("./pipelineSchedule").PipelineSchedule;
export const PipelineSchedule: typeof import("./pipelineSchedule").PipelineSchedule = null as any;
utilities.lazyLoad(exports, ["PipelineSchedule"], () => require("./pipelineSchedule"));

export { PipelineTeamArgs, PipelineTeamState } from "./pipelineTeam";
export type PipelineTeam = import("./pipelineTeam").PipelineTeam;
export const PipelineTeam: typeof import("./pipelineTeam").PipelineTeam = null as any;
utilities.lazyLoad(exports, ["PipelineTeam"], () => require("./pipelineTeam"));

export { PipelineTemplateArgs, PipelineTemplateState } from "./pipelineTemplate";
export type PipelineTemplate = import("./pipelineTemplate").PipelineTemplate;
export const PipelineTemplate: typeof import("./pipelineTemplate").PipelineTemplate = null as any;
utilities.lazyLoad(exports, ["PipelineTemplate"], () => require("./pipelineTemplate"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamMemberArgs, TeamMemberState } from "./teamMember";
export type TeamMember = import("./teamMember").TeamMember;
export const TeamMember: typeof import("./teamMember").TeamMember = null as any;
utilities.lazyLoad(exports, ["TeamMember"], () => require("./teamMember"));

export { TestSuiteArgs, TestSuiteState } from "./testSuite";
export type TestSuite = import("./testSuite").TestSuite;
export const TestSuite: typeof import("./testSuite").TestSuite = null as any;
utilities.lazyLoad(exports, ["TestSuite"], () => require("./testSuite"));

export { TestSuiteTeamArgs, TestSuiteTeamState } from "./testSuiteTeam";
export type TestSuiteTeam = import("./testSuiteTeam").TestSuiteTeam;
export const TestSuiteTeam: typeof import("./testSuiteTeam").TestSuiteTeam = null as any;
utilities.lazyLoad(exports, ["TestSuiteTeam"], () => require("./testSuiteTeam"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "buildkite:index/agentToken:AgentToken":
                return new AgentToken(name, <any>undefined, { urn })
            case "buildkite:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "buildkite:index/clusterAgentToken:ClusterAgentToken":
                return new ClusterAgentToken(name, <any>undefined, { urn })
            case "buildkite:index/clusterDefaultQueue:ClusterDefaultQueue":
                return new ClusterDefaultQueue(name, <any>undefined, { urn })
            case "buildkite:index/clusterQueue:ClusterQueue":
                return new ClusterQueue(name, <any>undefined, { urn })
            case "buildkite:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "buildkite:index/organizationBanner:OrganizationBanner":
                return new OrganizationBanner(name, <any>undefined, { urn })
            case "buildkite:index/pipeline:Pipeline":
                return new Pipeline(name, <any>undefined, { urn })
            case "buildkite:index/pipelineSchedule:PipelineSchedule":
                return new PipelineSchedule(name, <any>undefined, { urn })
            case "buildkite:index/pipelineTeam:PipelineTeam":
                return new PipelineTeam(name, <any>undefined, { urn })
            case "buildkite:index/pipelineTemplate:PipelineTemplate":
                return new PipelineTemplate(name, <any>undefined, { urn })
            case "buildkite:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "buildkite:index/teamMember:TeamMember":
                return new TeamMember(name, <any>undefined, { urn })
            case "buildkite:index/testSuite:TestSuite":
                return new TestSuite(name, <any>undefined, { urn })
            case "buildkite:index/testSuiteTeam:TestSuiteTeam":
                return new TestSuiteTeam(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("buildkite", "index/agentToken", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/cluster", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/clusterAgentToken", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/clusterDefaultQueue", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/clusterQueue", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/organization", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/organizationBanner", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/pipeline", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/pipelineSchedule", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/pipelineTeam", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/pipelineTemplate", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/team", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/teamMember", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/testSuite", _module)
pulumi.runtime.registerResourceModule("buildkite", "index/testSuiteTeam", _module)
pulumi.runtime.registerResourcePackage("buildkite", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:buildkite") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
