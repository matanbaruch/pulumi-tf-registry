// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataLossPreventionStoredInfoType extends pulumi.CustomResource {
    /**
     * Get an existing DataLossPreventionStoredInfoType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataLossPreventionStoredInfoTypeState, opts?: pulumi.CustomResourceOptions): DataLossPreventionStoredInfoType {
        return new DataLossPreventionStoredInfoType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/dataLossPreventionStoredInfoType:DataLossPreventionStoredInfoType';

    /**
     * Returns true if the given object is an instance of DataLossPreventionStoredInfoType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataLossPreventionStoredInfoType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataLossPreventionStoredInfoType.__pulumiType;
    }

    /**
     * A description of the info type.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Dictionary which defines the rule.
     */
    public readonly dictionary!: pulumi.Output<outputs.DataLossPreventionStoredInfoTypeDictionary | undefined>;
    /**
     * User set display name of the info type.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Dictionary which defines the rule.
     */
    public readonly largeCustomDictionary!: pulumi.Output<outputs.DataLossPreventionStoredInfoTypeLargeCustomDictionary | undefined>;
    /**
     * The resource name of the info type. Set by the server.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The parent of the info type in any of the following formats: * 'projects/{{project}}' *
     * 'projects/{{project}}/locations/{{location}}' * 'organizations/{{organization_id}}' *
     * 'organizations/{{organization_id}}/locations/{{location}}'
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * Regular expression which defines the rule.
     */
    public readonly regex!: pulumi.Output<outputs.DataLossPreventionStoredInfoTypeRegex | undefined>;
    /**
     * The storedInfoType ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the
     * regular expression: [a-zA-Z\d-_]+. The maximum length is 100 characters. Can be empty to allow the system to generate
     * one.
     */
    public readonly storedInfoTypeId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DataLossPreventionStoredInfoTypeTimeouts | undefined>;

    /**
     * Create a DataLossPreventionStoredInfoType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataLossPreventionStoredInfoTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataLossPreventionStoredInfoTypeArgs | DataLossPreventionStoredInfoTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataLossPreventionStoredInfoTypeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dictionary"] = state ? state.dictionary : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["largeCustomDictionary"] = state ? state.largeCustomDictionary : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["regex"] = state ? state.regex : undefined;
            resourceInputs["storedInfoTypeId"] = state ? state.storedInfoTypeId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DataLossPreventionStoredInfoTypeArgs | undefined;
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dictionary"] = args ? args.dictionary : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["largeCustomDictionary"] = args ? args.largeCustomDictionary : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["regex"] = args ? args.regex : undefined;
            resourceInputs["storedInfoTypeId"] = args ? args.storedInfoTypeId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataLossPreventionStoredInfoType.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataLossPreventionStoredInfoType resources.
 */
export interface DataLossPreventionStoredInfoTypeState {
    /**
     * A description of the info type.
     */
    description?: pulumi.Input<string>;
    /**
     * Dictionary which defines the rule.
     */
    dictionary?: pulumi.Input<inputs.DataLossPreventionStoredInfoTypeDictionary>;
    /**
     * User set display name of the info type.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Dictionary which defines the rule.
     */
    largeCustomDictionary?: pulumi.Input<inputs.DataLossPreventionStoredInfoTypeLargeCustomDictionary>;
    /**
     * The resource name of the info type. Set by the server.
     */
    name?: pulumi.Input<string>;
    /**
     * The parent of the info type in any of the following formats: * 'projects/{{project}}' *
     * 'projects/{{project}}/locations/{{location}}' * 'organizations/{{organization_id}}' *
     * 'organizations/{{organization_id}}/locations/{{location}}'
     */
    parent?: pulumi.Input<string>;
    /**
     * Regular expression which defines the rule.
     */
    regex?: pulumi.Input<inputs.DataLossPreventionStoredInfoTypeRegex>;
    /**
     * The storedInfoType ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the
     * regular expression: [a-zA-Z\d-_]+. The maximum length is 100 characters. Can be empty to allow the system to generate
     * one.
     */
    storedInfoTypeId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataLossPreventionStoredInfoTypeTimeouts>;
}

/**
 * The set of arguments for constructing a DataLossPreventionStoredInfoType resource.
 */
export interface DataLossPreventionStoredInfoTypeArgs {
    /**
     * A description of the info type.
     */
    description?: pulumi.Input<string>;
    /**
     * Dictionary which defines the rule.
     */
    dictionary?: pulumi.Input<inputs.DataLossPreventionStoredInfoTypeDictionary>;
    /**
     * User set display name of the info type.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Dictionary which defines the rule.
     */
    largeCustomDictionary?: pulumi.Input<inputs.DataLossPreventionStoredInfoTypeLargeCustomDictionary>;
    /**
     * The parent of the info type in any of the following formats: * 'projects/{{project}}' *
     * 'projects/{{project}}/locations/{{location}}' * 'organizations/{{organization_id}}' *
     * 'organizations/{{organization_id}}/locations/{{location}}'
     */
    parent: pulumi.Input<string>;
    /**
     * Regular expression which defines the rule.
     */
    regex?: pulumi.Input<inputs.DataLossPreventionStoredInfoTypeRegex>;
    /**
     * The storedInfoType ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the
     * regular expression: [a-zA-Z\d-_]+. The maximum length is 100 characters. Can be empty to allow the system to generate
     * one.
     */
    storedInfoTypeId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataLossPreventionStoredInfoTypeTimeouts>;
}
