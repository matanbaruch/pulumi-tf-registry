// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputePacketMirroring extends pulumi.CustomResource {
    /**
     * Get an existing ComputePacketMirroring resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputePacketMirroringState, opts?: pulumi.CustomResourceOptions): ComputePacketMirroring {
        return new ComputePacketMirroring(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/computePacketMirroring:ComputePacketMirroring';

    /**
     * Returns true if the given object is an instance of ComputePacketMirroring.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputePacketMirroring {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputePacketMirroring.__pulumiType;
    }

    /**
     * The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL) that will be used as collector for mirrored
     * traffic. The specified forwarding rule must have is_mirroring_collector set to true.
     */
    public readonly collectorIlb!: pulumi.Output<outputs.ComputePacketMirroringCollectorIlb>;
    /**
     * A human-readable description of the rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A filter for mirrored traffic. If unset, all traffic is mirrored.
     */
    public readonly filter!: pulumi.Output<outputs.ComputePacketMirroringFilter | undefined>;
    /**
     * A means of specifying which resources to mirror.
     */
    public readonly mirroredResources!: pulumi.Output<outputs.ComputePacketMirroringMirroredResources>;
    /**
     * The name of the packet mirroring rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in
     * the given network. All mirrored subnetworks should belong to the given network.
     */
    public readonly network!: pulumi.Output<outputs.ComputePacketMirroringNetwork>;
    /**
     * Since only one rule can be active at a time, priority is used to break ties in the case of two rules that apply to the
     * same instances.
     */
    public readonly priority!: pulumi.Output<number>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The Region in which the created address should reside. If it is not provided, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ComputePacketMirroringTimeouts | undefined>;

    /**
     * Create a ComputePacketMirroring resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputePacketMirroringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputePacketMirroringArgs | ComputePacketMirroringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputePacketMirroringState | undefined;
            resourceInputs["collectorIlb"] = state ? state.collectorIlb : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["mirroredResources"] = state ? state.mirroredResources : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ComputePacketMirroringArgs | undefined;
            if ((!args || args.collectorIlb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectorIlb'");
            }
            if ((!args || args.mirroredResources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mirroredResources'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            resourceInputs["collectorIlb"] = args ? args.collectorIlb : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["mirroredResources"] = args ? args.mirroredResources : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputePacketMirroring.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputePacketMirroring resources.
 */
export interface ComputePacketMirroringState {
    /**
     * The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL) that will be used as collector for mirrored
     * traffic. The specified forwarding rule must have is_mirroring_collector set to true.
     */
    collectorIlb?: pulumi.Input<inputs.ComputePacketMirroringCollectorIlb>;
    /**
     * A human-readable description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * A filter for mirrored traffic. If unset, all traffic is mirrored.
     */
    filter?: pulumi.Input<inputs.ComputePacketMirroringFilter>;
    /**
     * A means of specifying which resources to mirror.
     */
    mirroredResources?: pulumi.Input<inputs.ComputePacketMirroringMirroredResources>;
    /**
     * The name of the packet mirroring rule
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in
     * the given network. All mirrored subnetworks should belong to the given network.
     */
    network?: pulumi.Input<inputs.ComputePacketMirroringNetwork>;
    /**
     * Since only one rule can be active at a time, priority is used to break ties in the case of two rules that apply to the
     * same instances.
     */
    priority?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * The Region in which the created address should reside. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputePacketMirroringTimeouts>;
}

/**
 * The set of arguments for constructing a ComputePacketMirroring resource.
 */
export interface ComputePacketMirroringArgs {
    /**
     * The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL) that will be used as collector for mirrored
     * traffic. The specified forwarding rule must have is_mirroring_collector set to true.
     */
    collectorIlb: pulumi.Input<inputs.ComputePacketMirroringCollectorIlb>;
    /**
     * A human-readable description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * A filter for mirrored traffic. If unset, all traffic is mirrored.
     */
    filter?: pulumi.Input<inputs.ComputePacketMirroringFilter>;
    /**
     * A means of specifying which resources to mirror.
     */
    mirroredResources: pulumi.Input<inputs.ComputePacketMirroringMirroredResources>;
    /**
     * The name of the packet mirroring rule
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in
     * the given network. All mirrored subnetworks should belong to the given network.
     */
    network: pulumi.Input<inputs.ComputePacketMirroringNetwork>;
    /**
     * Since only one rule can be active at a time, priority is used to break ties in the case of two rules that apply to the
     * same instances.
     */
    priority?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * The Region in which the created address should reside. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputePacketMirroringTimeouts>;
}
