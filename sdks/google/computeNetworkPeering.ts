// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeNetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing ComputeNetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeNetworkPeeringState, opts?: pulumi.CustomResourceOptions): ComputeNetworkPeering {
        return new ComputeNetworkPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/computeNetworkPeering:ComputeNetworkPeering';

    /**
     * Returns true if the given object is an instance of ComputeNetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeNetworkPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeNetworkPeering.__pulumiType;
    }

    /**
     * Whether to export the custom routes to the peer network. Defaults to false.
     */
    public readonly exportCustomRoutes!: pulumi.Output<boolean | undefined>;
    public readonly exportSubnetRoutesWithPublicIp!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to export the custom routes from the peer network. Defaults to false.
     */
    public readonly importCustomRoutes!: pulumi.Output<boolean | undefined>;
    public readonly importSubnetRoutesWithPublicIp!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the peering.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The primary network of the peering.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * The peer network in the peering. The peer network may belong to a different project.
     */
    public readonly peerNetwork!: pulumi.Output<string>;
    /**
     * Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default
     * value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"]
     */
    public readonly stackType!: pulumi.Output<string | undefined>;
    /**
     * State for the peering, either ACTIVE or INACTIVE. The peering is ACTIVE when there's a matching configuration in the
     * peer network.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Details about the current state of the peering.
     */
    public /*out*/ readonly stateDetails!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeNetworkPeeringTimeouts | undefined>;

    /**
     * Create a ComputeNetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeNetworkPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeNetworkPeeringArgs | ComputeNetworkPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeNetworkPeeringState | undefined;
            resourceInputs["exportCustomRoutes"] = state ? state.exportCustomRoutes : undefined;
            resourceInputs["exportSubnetRoutesWithPublicIp"] = state ? state.exportSubnetRoutesWithPublicIp : undefined;
            resourceInputs["importCustomRoutes"] = state ? state.importCustomRoutes : undefined;
            resourceInputs["importSubnetRoutesWithPublicIp"] = state ? state.importSubnetRoutesWithPublicIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["peerNetwork"] = state ? state.peerNetwork : undefined;
            resourceInputs["stackType"] = state ? state.stackType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateDetails"] = state ? state.stateDetails : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ComputeNetworkPeeringArgs | undefined;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.peerNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetwork'");
            }
            resourceInputs["exportCustomRoutes"] = args ? args.exportCustomRoutes : undefined;
            resourceInputs["exportSubnetRoutesWithPublicIp"] = args ? args.exportSubnetRoutesWithPublicIp : undefined;
            resourceInputs["importCustomRoutes"] = args ? args.importCustomRoutes : undefined;
            resourceInputs["importSubnetRoutesWithPublicIp"] = args ? args.importSubnetRoutesWithPublicIp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["peerNetwork"] = args ? args.peerNetwork : undefined;
            resourceInputs["stackType"] = args ? args.stackType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeNetworkPeering.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeNetworkPeering resources.
 */
export interface ComputeNetworkPeeringState {
    /**
     * Whether to export the custom routes to the peer network. Defaults to false.
     */
    exportCustomRoutes?: pulumi.Input<boolean>;
    exportSubnetRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * Whether to export the custom routes from the peer network. Defaults to false.
     */
    importCustomRoutes?: pulumi.Input<boolean>;
    importSubnetRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * Name of the peering.
     */
    name?: pulumi.Input<string>;
    /**
     * The primary network of the peering.
     */
    network?: pulumi.Input<string>;
    /**
     * The peer network in the peering. The peer network may belong to a different project.
     */
    peerNetwork?: pulumi.Input<string>;
    /**
     * Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default
     * value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"]
     */
    stackType?: pulumi.Input<string>;
    /**
     * State for the peering, either ACTIVE or INACTIVE. The peering is ACTIVE when there's a matching configuration in the
     * peer network.
     */
    state?: pulumi.Input<string>;
    /**
     * Details about the current state of the peering.
     */
    stateDetails?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeNetworkPeeringTimeouts>;
}

/**
 * The set of arguments for constructing a ComputeNetworkPeering resource.
 */
export interface ComputeNetworkPeeringArgs {
    /**
     * Whether to export the custom routes to the peer network. Defaults to false.
     */
    exportCustomRoutes?: pulumi.Input<boolean>;
    exportSubnetRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * Whether to export the custom routes from the peer network. Defaults to false.
     */
    importCustomRoutes?: pulumi.Input<boolean>;
    importSubnetRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * Name of the peering.
     */
    name?: pulumi.Input<string>;
    /**
     * The primary network of the peering.
     */
    network: pulumi.Input<string>;
    /**
     * The peer network in the peering. The peer network may belong to a different project.
     */
    peerNetwork: pulumi.Input<string>;
    /**
     * Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default
     * value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"]
     */
    stackType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeNetworkPeeringTimeouts>;
}
