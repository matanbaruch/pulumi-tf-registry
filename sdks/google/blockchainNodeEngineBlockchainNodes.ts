// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlockchainNodeEngineBlockchainNodes extends pulumi.CustomResource {
    /**
     * Get an existing BlockchainNodeEngineBlockchainNodes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockchainNodeEngineBlockchainNodesState, opts?: pulumi.CustomResourceOptions): BlockchainNodeEngineBlockchainNodes {
        return new BlockchainNodeEngineBlockchainNodes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/blockchainNodeEngineBlockchainNodes:BlockchainNodeEngineBlockchainNodes';

    /**
     * Returns true if the given object is an instance of BlockchainNodeEngineBlockchainNodes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockchainNodeEngineBlockchainNodes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockchainNodeEngineBlockchainNodes.__pulumiType;
    }

    /**
     * ID of the requesting object.
     */
    public readonly blockchainNodeId!: pulumi.Output<string>;
    /**
     * User-provided key-value pairs Possible values: ["ETHEREUM"]
     */
    public readonly blockchainType!: pulumi.Output<string | undefined>;
    /**
     * The connection information through which to interact with a blockchain node.
     */
    public /*out*/ readonly connectionInfos!: pulumi.Output<outputs.BlockchainNodeEngineBlockchainNodesConnectionInfo[]>;
    /**
     * The timestamp at which the blockchain node was first created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * User-provided key-value pairs
     */
    public readonly ethereumDetails!: pulumi.Output<outputs.BlockchainNodeEngineBlockchainNodesEthereumDetails | undefined>;
    /**
     * User-provided key-value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Location of Blockchain Node being created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.BlockchainNodeEngineBlockchainNodesTimeouts | undefined>;
    /**
     * The timestamp at which the blockchain node was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a BlockchainNodeEngineBlockchainNodes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockchainNodeEngineBlockchainNodesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockchainNodeEngineBlockchainNodesArgs | BlockchainNodeEngineBlockchainNodesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockchainNodeEngineBlockchainNodesState | undefined;
            resourceInputs["blockchainNodeId"] = state ? state.blockchainNodeId : undefined;
            resourceInputs["blockchainType"] = state ? state.blockchainType : undefined;
            resourceInputs["connectionInfos"] = state ? state.connectionInfos : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["ethereumDetails"] = state ? state.ethereumDetails : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as BlockchainNodeEngineBlockchainNodesArgs | undefined;
            if ((!args || args.blockchainNodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockchainNodeId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["blockchainNodeId"] = args ? args.blockchainNodeId : undefined;
            resourceInputs["blockchainType"] = args ? args.blockchainType : undefined;
            resourceInputs["ethereumDetails"] = args ? args.ethereumDetails : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["connectionInfos"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockchainNodeEngineBlockchainNodes.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockchainNodeEngineBlockchainNodes resources.
 */
export interface BlockchainNodeEngineBlockchainNodesState {
    /**
     * ID of the requesting object.
     */
    blockchainNodeId?: pulumi.Input<string>;
    /**
     * User-provided key-value pairs Possible values: ["ETHEREUM"]
     */
    blockchainType?: pulumi.Input<string>;
    /**
     * The connection information through which to interact with a blockchain node.
     */
    connectionInfos?: pulumi.Input<pulumi.Input<inputs.BlockchainNodeEngineBlockchainNodesConnectionInfo>[]>;
    /**
     * The timestamp at which the blockchain node was first created.
     */
    createTime?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User-provided key-value pairs
     */
    ethereumDetails?: pulumi.Input<inputs.BlockchainNodeEngineBlockchainNodesEthereumDetails>;
    /**
     * User-provided key-value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location of Blockchain Node being created.
     */
    location?: pulumi.Input<string>;
    /**
     * The fully qualified name of the blockchain node. e.g. projects/my-project/locations/us-central1/blockchainNodes/my-node.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.BlockchainNodeEngineBlockchainNodesTimeouts>;
    /**
     * The timestamp at which the blockchain node was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockchainNodeEngineBlockchainNodes resource.
 */
export interface BlockchainNodeEngineBlockchainNodesArgs {
    /**
     * ID of the requesting object.
     */
    blockchainNodeId: pulumi.Input<string>;
    /**
     * User-provided key-value pairs Possible values: ["ETHEREUM"]
     */
    blockchainType?: pulumi.Input<string>;
    /**
     * User-provided key-value pairs
     */
    ethereumDetails?: pulumi.Input<inputs.BlockchainNodeEngineBlockchainNodesEthereumDetails>;
    /**
     * User-provided key-value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location of Blockchain Node being created.
     */
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlockchainNodeEngineBlockchainNodesTimeouts>;
}
