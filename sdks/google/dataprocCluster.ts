// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataprocCluster extends pulumi.CustomResource {
    /**
     * Get an existing DataprocCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataprocClusterState, opts?: pulumi.CustomResourceOptions): DataprocCluster {
        return new DataprocCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/dataprocCluster:DataprocCluster';

    /**
     * Returns true if the given object is an instance of DataprocCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataprocCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataprocCluster.__pulumiType;
    }

    /**
     * Allows you to configure various aspects of the cluster.
     */
    public readonly clusterConfig!: pulumi.Output<outputs.DataprocClusterClusterConfig | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly gracefulDecommissionTimeout!: pulumi.Output<string | undefined>;
    /**
     * The list of the labels (key/value pairs) configured on the resource and to be applied to instances in the cluster.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
     * to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the cluster, unique within the project and zone.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project in which the cluster will exist. If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The region in which the cluster and associated nodes will be created in. Defaults to global.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.DataprocClusterTimeouts | undefined>;
    /**
     * The virtual cluster config is used when creating a Dataproc cluster that does not directly control the underlying
     * compute resources, for example, when creating a Dataproc-on-GKE cluster. Dataproc may set default values, and values may
     * change when clusters are updated. Exactly one of config or virtualClusterConfig must be specified.
     */
    public readonly virtualClusterConfig!: pulumi.Output<outputs.DataprocClusterVirtualClusterConfig | undefined>;

    /**
     * Create a DataprocCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DataprocClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataprocClusterArgs | DataprocClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataprocClusterState | undefined;
            resourceInputs["clusterConfig"] = state ? state.clusterConfig : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["gracefulDecommissionTimeout"] = state ? state.gracefulDecommissionTimeout : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualClusterConfig"] = state ? state.virtualClusterConfig : undefined;
        } else {
            const args = argsOrState as DataprocClusterArgs | undefined;
            resourceInputs["clusterConfig"] = args ? args.clusterConfig : undefined;
            resourceInputs["gracefulDecommissionTimeout"] = args ? args.gracefulDecommissionTimeout : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualClusterConfig"] = args ? args.virtualClusterConfig : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataprocCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataprocCluster resources.
 */
export interface DataprocClusterState {
    /**
     * Allows you to configure various aspects of the cluster.
     */
    clusterConfig?: pulumi.Input<inputs.DataprocClusterClusterConfig>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gracefulDecommissionTimeout?: pulumi.Input<string>;
    /**
     * The list of the labels (key/value pairs) configured on the resource and to be applied to instances in the cluster.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
     * to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the cluster, unique within the project and zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the cluster will exist. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region in which the cluster and associated nodes will be created in. Defaults to global.
     */
    region?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DataprocClusterTimeouts>;
    /**
     * The virtual cluster config is used when creating a Dataproc cluster that does not directly control the underlying
     * compute resources, for example, when creating a Dataproc-on-GKE cluster. Dataproc may set default values, and values may
     * change when clusters are updated. Exactly one of config or virtualClusterConfig must be specified.
     */
    virtualClusterConfig?: pulumi.Input<inputs.DataprocClusterVirtualClusterConfig>;
}

/**
 * The set of arguments for constructing a DataprocCluster resource.
 */
export interface DataprocClusterArgs {
    /**
     * Allows you to configure various aspects of the cluster.
     */
    clusterConfig?: pulumi.Input<inputs.DataprocClusterClusterConfig>;
    gracefulDecommissionTimeout?: pulumi.Input<string>;
    /**
     * The list of the labels (key/value pairs) configured on the resource and to be applied to instances in the cluster.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
     * to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the cluster, unique within the project and zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the cluster will exist. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region in which the cluster and associated nodes will be created in. Defaults to global.
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataprocClusterTimeouts>;
    /**
     * The virtual cluster config is used when creating a Dataproc cluster that does not directly control the underlying
     * compute resources, for example, when creating a Dataproc-on-GKE cluster. Dataproc may set default values, and values may
     * change when clusters are updated. Exactly one of config or virtualClusterConfig must be specified.
     */
    virtualClusterConfig?: pulumi.Input<inputs.DataprocClusterVirtualClusterConfig>;
}
