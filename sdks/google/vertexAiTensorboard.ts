// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VertexAiTensorboard extends pulumi.CustomResource {
    /**
     * Get an existing VertexAiTensorboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VertexAiTensorboardState, opts?: pulumi.CustomResourceOptions): VertexAiTensorboard {
        return new VertexAiTensorboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/vertexAiTensorboard:VertexAiTensorboard';

    /**
     * Returns true if the given object is an instance of VertexAiTensorboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VertexAiTensorboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VertexAiTensorboard.__pulumiType;
    }

    /**
     * Consumer project Cloud Storage path prefix used to store blob data, which can either be a bucket or directory. Does not
     * end with a '/'.
     */
    public /*out*/ readonly blobStoragePathPrefix!: pulumi.Output<string>;
    /**
     * The timestamp of when the Tensorboard was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of this Tensorboard.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * User provided name of this Tensorboard.
     */
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this
     * Tensorboard will be secured by this key.
     */
    public readonly encryptionSpec!: pulumi.Output<outputs.VertexAiTensorboardEncryptionSpec | undefined>;
    /**
     * The labels with user-defined metadata to organize your Tensorboards. **Note**: This field is non-authoritative, and will
     * only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the Tensorboard.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The region of the tensorboard. eg us-central1
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The number of Runs stored in this Tensorboard.
     */
    public /*out*/ readonly runCount!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.VertexAiTensorboardTimeouts | undefined>;
    /**
     * The timestamp of when the Tensorboard was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
     * to nine fractional digits.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a VertexAiTensorboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VertexAiTensorboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VertexAiTensorboardArgs | VertexAiTensorboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VertexAiTensorboardState | undefined;
            resourceInputs["blobStoragePathPrefix"] = state ? state.blobStoragePathPrefix : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["encryptionSpec"] = state ? state.encryptionSpec : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["runCount"] = state ? state.runCount : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as VertexAiTensorboardArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["encryptionSpec"] = args ? args.encryptionSpec : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["blobStoragePathPrefix"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["runCount"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VertexAiTensorboard.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VertexAiTensorboard resources.
 */
export interface VertexAiTensorboardState {
    /**
     * Consumer project Cloud Storage path prefix used to store blob data, which can either be a bucket or directory. Does not
     * end with a '/'.
     */
    blobStoragePathPrefix?: pulumi.Input<string>;
    /**
     * The timestamp of when the Tensorboard was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of this Tensorboard.
     */
    description?: pulumi.Input<string>;
    /**
     * User provided name of this Tensorboard.
     */
    displayName?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this
     * Tensorboard will be secured by this key.
     */
    encryptionSpec?: pulumi.Input<inputs.VertexAiTensorboardEncryptionSpec>;
    /**
     * The labels with user-defined metadata to organize your Tensorboards. **Note**: This field is non-authoritative, and will
     * only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Tensorboard.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region of the tensorboard. eg us-central1
     */
    region?: pulumi.Input<string>;
    /**
     * The number of Runs stored in this Tensorboard.
     */
    runCount?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VertexAiTensorboardTimeouts>;
    /**
     * The timestamp of when the Tensorboard was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
     * to nine fractional digits.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VertexAiTensorboard resource.
 */
export interface VertexAiTensorboardArgs {
    /**
     * Description of this Tensorboard.
     */
    description?: pulumi.Input<string>;
    /**
     * User provided name of this Tensorboard.
     */
    displayName: pulumi.Input<string>;
    /**
     * Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this
     * Tensorboard will be secured by this key.
     */
    encryptionSpec?: pulumi.Input<inputs.VertexAiTensorboardEncryptionSpec>;
    /**
     * The labels with user-defined metadata to organize your Tensorboards. **Note**: This field is non-authoritative, and will
     * only manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    project?: pulumi.Input<string>;
    /**
     * The region of the tensorboard. eg us-central1
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VertexAiTensorboardTimeouts>;
}
