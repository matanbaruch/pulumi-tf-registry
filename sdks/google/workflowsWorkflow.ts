// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkflowsWorkflow extends pulumi.CustomResource {
    /**
     * Get an existing WorkflowsWorkflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowsWorkflowState, opts?: pulumi.CustomResourceOptions): WorkflowsWorkflow {
        return new WorkflowsWorkflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/workflowsWorkflow:WorkflowsWorkflow';

    /**
     * Returns true if the given object is an instance of WorkflowsWorkflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkflowsWorkflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkflowsWorkflow.__pulumiType;
    }

    /**
     * Describes the level of platform logging to apply to calls and call responses during executions of this workflow. If both
     * the workflow and the execution specify a logging level, the execution level takes precedence. Possible values:
     * ["CALL_LOG_LEVEL_UNSPECIFIED", "LOG_ALL_CALLS", "LOG_ERRORS_ONLY", "LOG_NONE"]
     */
    public readonly callLogLevel!: pulumi.Output<string | undefined>;
    /**
     * The timestamp of when the workflow was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The KMS key used to encrypt workflow and execution data. Format:
     * projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey}
     */
    public readonly cryptoKeyName!: pulumi.Output<string | undefined>;
    /**
     * Description of the workflow provided by the user. Must be at most 1000 unicode characters long.
     */
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * A set of key/value label pairs to assign to this Workflow. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the Workflow.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The region of the workflow.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * The revision of the workflow. A new one is generated if the service account or source contents is changed.
     */
    public /*out*/ readonly revisionId!: pulumi.Output<string>;
    /**
     * Name of the service account associated with the latest workflow version. This service account represents the identity of
     * the workflow and determines what permissions the workflow has. Format: projects/{project}/serviceAccounts/{account} or
     * {account}. Using - as a wildcard for the {project} or not providing one at all will infer the project from the account.
     * The {account} value can be the email address or the unique_id of the service account. If not provided, workflow will use
     * the project's default service account. Modifying this field for an existing workflow results in a new workflow revision.
     */
    public readonly serviceAccount!: pulumi.Output<string>;
    /**
     * Workflow code to be executed. The size limit is 128KB.
     */
    public readonly sourceContents!: pulumi.Output<string | undefined>;
    /**
     * State of the workflow deployment.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.WorkflowsWorkflowTimeouts | undefined>;
    /**
     * The timestamp of when the workflow was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * User-defined environment variables associated with this workflow revision. This map has a maximum length of 20. Each
     * string can take up to 4KiB. Keys cannot be empty strings and cannot start with “GOOGLE” or “WORKFLOWS".
     */
    public readonly userEnvVars!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a WorkflowsWorkflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkflowsWorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowsWorkflowArgs | WorkflowsWorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowsWorkflowState | undefined;
            resourceInputs["callLogLevel"] = state ? state.callLogLevel : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["cryptoKeyName"] = state ? state.cryptoKeyName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["revisionId"] = state ? state.revisionId : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["sourceContents"] = state ? state.sourceContents : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["userEnvVars"] = state ? state.userEnvVars : undefined;
        } else {
            const args = argsOrState as WorkflowsWorkflowArgs | undefined;
            resourceInputs["callLogLevel"] = args ? args.callLogLevel : undefined;
            resourceInputs["cryptoKeyName"] = args ? args.cryptoKeyName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["sourceContents"] = args ? args.sourceContents : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userEnvVars"] = args ? args.userEnvVars : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkflowsWorkflow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkflowsWorkflow resources.
 */
export interface WorkflowsWorkflowState {
    /**
     * Describes the level of platform logging to apply to calls and call responses during executions of this workflow. If both
     * the workflow and the execution specify a logging level, the execution level takes precedence. Possible values:
     * ["CALL_LOG_LEVEL_UNSPECIFIED", "LOG_ALL_CALLS", "LOG_ERRORS_ONLY", "LOG_NONE"]
     */
    callLogLevel?: pulumi.Input<string>;
    /**
     * The timestamp of when the workflow was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The KMS key used to encrypt workflow and execution data. Format:
     * projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey}
     */
    cryptoKeyName?: pulumi.Input<string>;
    /**
     * Description of the workflow provided by the user. Must be at most 1000 unicode characters long.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of key/value label pairs to assign to this Workflow. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Workflow.
     */
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region of the workflow.
     */
    region?: pulumi.Input<string>;
    /**
     * The revision of the workflow. A new one is generated if the service account or source contents is changed.
     */
    revisionId?: pulumi.Input<string>;
    /**
     * Name of the service account associated with the latest workflow version. This service account represents the identity of
     * the workflow and determines what permissions the workflow has. Format: projects/{project}/serviceAccounts/{account} or
     * {account}. Using - as a wildcard for the {project} or not providing one at all will infer the project from the account.
     * The {account} value can be the email address or the unique_id of the service account. If not provided, workflow will use
     * the project's default service account. Modifying this field for an existing workflow results in a new workflow revision.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Workflow code to be executed. The size limit is 128KB.
     */
    sourceContents?: pulumi.Input<string>;
    /**
     * State of the workflow deployment.
     */
    state?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.WorkflowsWorkflowTimeouts>;
    /**
     * The timestamp of when the workflow was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
     * nine fractional digits.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * User-defined environment variables associated with this workflow revision. This map has a maximum length of 20. Each
     * string can take up to 4KiB. Keys cannot be empty strings and cannot start with “GOOGLE” or “WORKFLOWS".
     */
    userEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a WorkflowsWorkflow resource.
 */
export interface WorkflowsWorkflowArgs {
    /**
     * Describes the level of platform logging to apply to calls and call responses during executions of this workflow. If both
     * the workflow and the execution specify a logging level, the execution level takes precedence. Possible values:
     * ["CALL_LOG_LEVEL_UNSPECIFIED", "LOG_ALL_CALLS", "LOG_ERRORS_ONLY", "LOG_NONE"]
     */
    callLogLevel?: pulumi.Input<string>;
    /**
     * The KMS key used to encrypt workflow and execution data. Format:
     * projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey}
     */
    cryptoKeyName?: pulumi.Input<string>;
    /**
     * Description of the workflow provided by the user. Must be at most 1000 unicode characters long.
     */
    description?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to this Workflow. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Workflow.
     */
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region of the workflow.
     */
    region?: pulumi.Input<string>;
    /**
     * Name of the service account associated with the latest workflow version. This service account represents the identity of
     * the workflow and determines what permissions the workflow has. Format: projects/{project}/serviceAccounts/{account} or
     * {account}. Using - as a wildcard for the {project} or not providing one at all will infer the project from the account.
     * The {account} value can be the email address or the unique_id of the service account. If not provided, workflow will use
     * the project's default service account. Modifying this field for an existing workflow results in a new workflow revision.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Workflow code to be executed. The size limit is 128KB.
     */
    sourceContents?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.WorkflowsWorkflowTimeouts>;
    /**
     * User-defined environment variables associated with this workflow revision. This map has a maximum length of 20. Each
     * string can take up to 4KiB. Keys cannot be empty strings and cannot start with “GOOGLE” or “WORKFLOWS".
     */
    userEnvVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
