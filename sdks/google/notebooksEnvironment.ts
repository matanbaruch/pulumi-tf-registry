// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotebooksEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing NotebooksEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotebooksEnvironmentState, opts?: pulumi.CustomResourceOptions): NotebooksEnvironment {
        return new NotebooksEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/notebooksEnvironment:NotebooksEnvironment';

    /**
     * Returns true if the given object is an instance of NotebooksEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotebooksEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotebooksEnvironment.__pulumiType;
    }

    /**
     * Use a container image to start the notebook instance.
     */
    public readonly containerImage!: pulumi.Output<outputs.NotebooksEnvironmentContainerImage | undefined>;
    /**
     * Instance creation time
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A brief description of this environment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display name of this environment for the UI.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * A reference to the zone where the machine resides.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name specified for the Environment instance. Format:
     * projects/{project_id}/locations/{location}/environments/{environmentId}
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud
     * Storage path. Example: "gs://path-to-file/file-name"
     */
    public readonly postStartupScript!: pulumi.Output<string | undefined>;
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NotebooksEnvironmentTimeouts | undefined>;
    /**
     * Use a Compute Engine VM image to start the notebook instance.
     */
    public readonly vmImage!: pulumi.Output<outputs.NotebooksEnvironmentVmImage | undefined>;

    /**
     * Create a NotebooksEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotebooksEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotebooksEnvironmentArgs | NotebooksEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotebooksEnvironmentState | undefined;
            resourceInputs["containerImage"] = state ? state.containerImage : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["postStartupScript"] = state ? state.postStartupScript : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vmImage"] = state ? state.vmImage : undefined;
        } else {
            const args = argsOrState as NotebooksEnvironmentArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["containerImage"] = args ? args.containerImage : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["postStartupScript"] = args ? args.postStartupScript : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmImage"] = args ? args.vmImage : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotebooksEnvironment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NotebooksEnvironment resources.
 */
export interface NotebooksEnvironmentState {
    /**
     * Use a container image to start the notebook instance.
     */
    containerImage?: pulumi.Input<inputs.NotebooksEnvironmentContainerImage>;
    /**
     * Instance creation time
     */
    createTime?: pulumi.Input<string>;
    /**
     * A brief description of this environment.
     */
    description?: pulumi.Input<string>;
    /**
     * Display name of this environment for the UI.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A reference to the zone where the machine resides.
     */
    location?: pulumi.Input<string>;
    /**
     * The name specified for the Environment instance. Format:
     * projects/{project_id}/locations/{location}/environments/{environmentId}
     */
    name?: pulumi.Input<string>;
    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud
     * Storage path. Example: "gs://path-to-file/file-name"
     */
    postStartupScript?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NotebooksEnvironmentTimeouts>;
    /**
     * Use a Compute Engine VM image to start the notebook instance.
     */
    vmImage?: pulumi.Input<inputs.NotebooksEnvironmentVmImage>;
}

/**
 * The set of arguments for constructing a NotebooksEnvironment resource.
 */
export interface NotebooksEnvironmentArgs {
    /**
     * Use a container image to start the notebook instance.
     */
    containerImage?: pulumi.Input<inputs.NotebooksEnvironmentContainerImage>;
    /**
     * A brief description of this environment.
     */
    description?: pulumi.Input<string>;
    /**
     * Display name of this environment for the UI.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A reference to the zone where the machine resides.
     */
    location: pulumi.Input<string>;
    /**
     * The name specified for the Environment instance. Format:
     * projects/{project_id}/locations/{location}/environments/{environmentId}
     */
    name?: pulumi.Input<string>;
    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud
     * Storage path. Example: "gs://path-to-file/file-name"
     */
    postStartupScript?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NotebooksEnvironmentTimeouts>;
    /**
     * Use a Compute Engine VM image to start the notebook instance.
     */
    vmImage?: pulumi.Input<inputs.NotebooksEnvironmentVmImage>;
}
