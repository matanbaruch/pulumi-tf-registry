// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BigqueryDatasetAccess extends pulumi.CustomResource {
    /**
     * Get an existing BigqueryDatasetAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BigqueryDatasetAccessState, opts?: pulumi.CustomResourceOptions): BigqueryDatasetAccess {
        return new BigqueryDatasetAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/bigqueryDatasetAccess:BigqueryDatasetAccess';

    /**
     * Returns true if the given object is an instance of BigqueryDatasetAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BigqueryDatasetAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BigqueryDatasetAccess.__pulumiType;
    }

    /**
     * If true, represents that that the iam_member in the config was translated to a different member type by the API, and is
     * stored in state as a different member type
     */
    public /*out*/ readonly apiUpdatedMember!: pulumi.Output<boolean>;
    /**
     * Grants all resources of particular types in a particular dataset read access to the current dataset.
     */
    public readonly dataset!: pulumi.Output<outputs.BigqueryDatasetAccessDataset | undefined>;
    /**
     * A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or
     * underscores (_). The maximum length is 1,024 characters.
     */
    public readonly datasetId!: pulumi.Output<string>;
    /**
     * A domain to grant access to. Any users signed in with the domain specified will be granted the specified access
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    /**
     * An email address of a Google Group to grant access to.
     */
    public readonly groupByEmail!: pulumi.Output<string | undefined>;
    /**
     * Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group. For example:
     * 'allUsers'
     */
    public readonly iamMember!: pulumi.Output<string | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Describes the rights granted to the user specified by the other member of the access object. Basic, predefined, and
     * custom roles are supported. Predefined roles that have equivalent basic roles are swapped by the API to their basic
     * counterparts, and will show a diff post-create. See [official
     * docs](https://cloud.google.com/bigquery/docs/access-control).
     */
    public readonly role!: pulumi.Output<string | undefined>;
    /**
     * A routine from a different dataset to grant access to. Queries executed against that routine will have read access to
     * tables in this dataset. The role field is not required when this field is set. If that routine is updated by any user,
     * access to the routine needs to be granted again via an update operation.
     */
    public readonly routine!: pulumi.Output<outputs.BigqueryDatasetAccessRoutine | undefined>;
    /**
     * A special group to grant access to. Possible values include: * 'projectOwners': Owners of the enclosing project. *
     * 'projectReaders': Readers of the enclosing project. * 'projectWriters': Writers of the enclosing project. *
     * 'allAuthenticatedUsers': All authenticated BigQuery users.
     */
    public readonly specialGroup!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BigqueryDatasetAccessTimeouts | undefined>;
    /**
     * An email address of a user to grant access to. For example: fred@example.com
     */
    public readonly userByEmail!: pulumi.Output<string | undefined>;
    /**
     * A view from a different dataset to grant access to. Queries executed against that view will have read access to tables
     * in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to
     * the view needs to be granted again via an update operation.
     */
    public readonly view!: pulumi.Output<outputs.BigqueryDatasetAccessView | undefined>;

    /**
     * Create a BigqueryDatasetAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BigqueryDatasetAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BigqueryDatasetAccessArgs | BigqueryDatasetAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BigqueryDatasetAccessState | undefined;
            resourceInputs["apiUpdatedMember"] = state ? state.apiUpdatedMember : undefined;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["datasetId"] = state ? state.datasetId : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["groupByEmail"] = state ? state.groupByEmail : undefined;
            resourceInputs["iamMember"] = state ? state.iamMember : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["routine"] = state ? state.routine : undefined;
            resourceInputs["specialGroup"] = state ? state.specialGroup : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userByEmail"] = state ? state.userByEmail : undefined;
            resourceInputs["view"] = state ? state.view : undefined;
        } else {
            const args = argsOrState as BigqueryDatasetAccessArgs | undefined;
            if ((!args || args.datasetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetId'");
            }
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["datasetId"] = args ? args.datasetId : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["groupByEmail"] = args ? args.groupByEmail : undefined;
            resourceInputs["iamMember"] = args ? args.iamMember : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["routine"] = args ? args.routine : undefined;
            resourceInputs["specialGroup"] = args ? args.specialGroup : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userByEmail"] = args ? args.userByEmail : undefined;
            resourceInputs["view"] = args ? args.view : undefined;
            resourceInputs["apiUpdatedMember"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BigqueryDatasetAccess.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BigqueryDatasetAccess resources.
 */
export interface BigqueryDatasetAccessState {
    /**
     * If true, represents that that the iam_member in the config was translated to a different member type by the API, and is
     * stored in state as a different member type
     */
    apiUpdatedMember?: pulumi.Input<boolean>;
    /**
     * Grants all resources of particular types in a particular dataset read access to the current dataset.
     */
    dataset?: pulumi.Input<inputs.BigqueryDatasetAccessDataset>;
    /**
     * A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or
     * underscores (_). The maximum length is 1,024 characters.
     */
    datasetId?: pulumi.Input<string>;
    /**
     * A domain to grant access to. Any users signed in with the domain specified will be granted the specified access
     */
    domain?: pulumi.Input<string>;
    /**
     * An email address of a Google Group to grant access to.
     */
    groupByEmail?: pulumi.Input<string>;
    /**
     * Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group. For example:
     * 'allUsers'
     */
    iamMember?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Describes the rights granted to the user specified by the other member of the access object. Basic, predefined, and
     * custom roles are supported. Predefined roles that have equivalent basic roles are swapped by the API to their basic
     * counterparts, and will show a diff post-create. See [official
     * docs](https://cloud.google.com/bigquery/docs/access-control).
     */
    role?: pulumi.Input<string>;
    /**
     * A routine from a different dataset to grant access to. Queries executed against that routine will have read access to
     * tables in this dataset. The role field is not required when this field is set. If that routine is updated by any user,
     * access to the routine needs to be granted again via an update operation.
     */
    routine?: pulumi.Input<inputs.BigqueryDatasetAccessRoutine>;
    /**
     * A special group to grant access to. Possible values include: * 'projectOwners': Owners of the enclosing project. *
     * 'projectReaders': Readers of the enclosing project. * 'projectWriters': Writers of the enclosing project. *
     * 'allAuthenticatedUsers': All authenticated BigQuery users.
     */
    specialGroup?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BigqueryDatasetAccessTimeouts>;
    /**
     * An email address of a user to grant access to. For example: fred@example.com
     */
    userByEmail?: pulumi.Input<string>;
    /**
     * A view from a different dataset to grant access to. Queries executed against that view will have read access to tables
     * in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to
     * the view needs to be granted again via an update operation.
     */
    view?: pulumi.Input<inputs.BigqueryDatasetAccessView>;
}

/**
 * The set of arguments for constructing a BigqueryDatasetAccess resource.
 */
export interface BigqueryDatasetAccessArgs {
    /**
     * Grants all resources of particular types in a particular dataset read access to the current dataset.
     */
    dataset?: pulumi.Input<inputs.BigqueryDatasetAccessDataset>;
    /**
     * A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or
     * underscores (_). The maximum length is 1,024 characters.
     */
    datasetId: pulumi.Input<string>;
    /**
     * A domain to grant access to. Any users signed in with the domain specified will be granted the specified access
     */
    domain?: pulumi.Input<string>;
    /**
     * An email address of a Google Group to grant access to.
     */
    groupByEmail?: pulumi.Input<string>;
    /**
     * Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group. For example:
     * 'allUsers'
     */
    iamMember?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Describes the rights granted to the user specified by the other member of the access object. Basic, predefined, and
     * custom roles are supported. Predefined roles that have equivalent basic roles are swapped by the API to their basic
     * counterparts, and will show a diff post-create. See [official
     * docs](https://cloud.google.com/bigquery/docs/access-control).
     */
    role?: pulumi.Input<string>;
    /**
     * A routine from a different dataset to grant access to. Queries executed against that routine will have read access to
     * tables in this dataset. The role field is not required when this field is set. If that routine is updated by any user,
     * access to the routine needs to be granted again via an update operation.
     */
    routine?: pulumi.Input<inputs.BigqueryDatasetAccessRoutine>;
    /**
     * A special group to grant access to. Possible values include: * 'projectOwners': Owners of the enclosing project. *
     * 'projectReaders': Readers of the enclosing project. * 'projectWriters': Writers of the enclosing project. *
     * 'allAuthenticatedUsers': All authenticated BigQuery users.
     */
    specialGroup?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BigqueryDatasetAccessTimeouts>;
    /**
     * An email address of a user to grant access to. For example: fred@example.com
     */
    userByEmail?: pulumi.Input<string>;
    /**
     * A view from a different dataset to grant access to. Queries executed against that view will have read access to tables
     * in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to
     * the view needs to be granted again via an update operation.
     */
    view?: pulumi.Input<inputs.BigqueryDatasetAccessView>;
}
