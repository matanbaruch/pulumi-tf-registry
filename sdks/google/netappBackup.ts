// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetappBackup extends pulumi.CustomResource {
    /**
     * Get an existing NetappBackup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetappBackupState, opts?: pulumi.CustomResourceOptions): NetappBackup {
        return new NetappBackup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/netappBackup:NetappBackup';

    /**
     * Returns true if the given object is an instance of NetappBackup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetappBackup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetappBackup.__pulumiType;
    }

    /**
     * Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
     */
    public /*out*/ readonly backupType!: pulumi.Output<string>;
    /**
     * Backups of a volume build incrementally on top of each other. They form a "backup chain". Total size of all backups in a
     * chain in bytes = baseline backup size + sum(incremental backup size)
     */
    public /*out*/ readonly chainStorageBytes!: pulumi.Output<string>;
    /**
     * Create time of the backup. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
     * field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Location of the backup.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the backup. Needs to be unique per location.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * If specified, backup will be created from the given snapshot. If not specified, there will be a new snapshot taken to
     * initiate the backup creation. Format:
     * 'projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}''
     */
    public readonly sourceSnapshot!: pulumi.Output<string | undefined>;
    /**
     * ID of volumes this backup belongs to. Format: 'projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}''
     */
    public readonly sourceVolume!: pulumi.Output<string | undefined>;
    /**
     * The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR,
     * UPDATING]
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.NetappBackupTimeouts | undefined>;
    /**
     * Name of the backup vault to store the backup in.
     */
    public readonly vaultName!: pulumi.Output<string>;
    /**
     * Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity
     * will have to be at least as big.
     */
    public /*out*/ readonly volumeUsageBytes!: pulumi.Output<string>;

    /**
     * Create a NetappBackup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetappBackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetappBackupArgs | NetappBackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetappBackupState | undefined;
            resourceInputs["backupType"] = state ? state.backupType : undefined;
            resourceInputs["chainStorageBytes"] = state ? state.chainStorageBytes : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["sourceSnapshot"] = state ? state.sourceSnapshot : undefined;
            resourceInputs["sourceVolume"] = state ? state.sourceVolume : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vaultName"] = state ? state.vaultName : undefined;
            resourceInputs["volumeUsageBytes"] = state ? state.volumeUsageBytes : undefined;
        } else {
            const args = argsOrState as NetappBackupArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.vaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sourceSnapshot"] = args ? args.sourceSnapshot : undefined;
            resourceInputs["sourceVolume"] = args ? args.sourceVolume : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vaultName"] = args ? args.vaultName : undefined;
            resourceInputs["backupType"] = undefined /*out*/;
            resourceInputs["chainStorageBytes"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["volumeUsageBytes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetappBackup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetappBackup resources.
 */
export interface NetappBackupState {
    /**
     * Type of backup, manually created or created by a backup policy. Possible Values : [TYPE_UNSPECIFIED, MANUAL, SCHEDULED]
     */
    backupType?: pulumi.Input<string>;
    /**
     * Backups of a volume build incrementally on top of each other. They form a "backup chain". Total size of all backups in a
     * chain in bytes = baseline backup size + sum(incremental backup size)
     */
    chainStorageBytes?: pulumi.Input<string>;
    /**
     * Create time of the backup. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
     * field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location of the backup.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the backup. Needs to be unique per location.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * If specified, backup will be created from the given snapshot. If not specified, there will be a new snapshot taken to
     * initiate the backup creation. Format:
     * 'projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}''
     */
    sourceSnapshot?: pulumi.Input<string>;
    /**
     * ID of volumes this backup belongs to. Format: 'projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}''
     */
    sourceVolume?: pulumi.Input<string>;
    /**
     * The state of the Backup Vault. Possible Values : [STATE_UNSPECIFIED, CREATING, UPLOADING, READY, DELETING, ERROR,
     * UPDATING]
     */
    state?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NetappBackupTimeouts>;
    /**
     * Name of the backup vault to store the backup in.
     */
    vaultName?: pulumi.Input<string>;
    /**
     * Size of the file system when the backup was created. When creating a new volume from the backup, the volume capacity
     * will have to be at least as big.
     */
    volumeUsageBytes?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetappBackup resource.
 */
export interface NetappBackupArgs {
    /**
     * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels as key value pairs. Example: '{ "owner": "Bob", "department": "finance", "purpose": "testing" }'. **Note**: This
     * field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location of the backup.
     */
    location: pulumi.Input<string>;
    /**
     * The resource name of the backup. Needs to be unique per location.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * If specified, backup will be created from the given snapshot. If not specified, there will be a new snapshot taken to
     * initiate the backup creation. Format:
     * 'projects/{{projectId}}/locations/{{location}}/volumes/{{volumename}}/snapshots/{{snapshotname}}''
     */
    sourceSnapshot?: pulumi.Input<string>;
    /**
     * ID of volumes this backup belongs to. Format: 'projects/{{projects_id}}/locations/{{location}}/volumes/{{name}}''
     */
    sourceVolume?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetappBackupTimeouts>;
    /**
     * Name of the backup vault to store the backup in.
     */
    vaultName: pulumi.Input<string>;
}
