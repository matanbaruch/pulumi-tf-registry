// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageBucket(args: GetStorageBucketArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageBucketResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google:index/getStorageBucket:getStorageBucket", {
        "id": args.id,
        "name": args.name,
        "project": args.project,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageBucket.
 */
export interface GetStorageBucketArgs {
    id?: string;
    name: string;
    project?: string;
}

/**
 * A collection of values returned by getStorageBucket.
 */
export interface GetStorageBucketResult {
    readonly autoclasses: outputs.GetStorageBucketAutoclass[];
    readonly cors: outputs.GetStorageBucketCor[];
    readonly customPlacementConfigs: outputs.GetStorageBucketCustomPlacementConfig[];
    readonly defaultEventBasedHold: boolean;
    readonly effectiveLabels: {[key: string]: string};
    readonly enableObjectRetention: boolean;
    readonly encryptions: outputs.GetStorageBucketEncryption[];
    readonly forceDestroy: boolean;
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly lifecycleRules: outputs.GetStorageBucketLifecycleRule[];
    readonly location: string;
    readonly loggings: outputs.GetStorageBucketLogging[];
    readonly name: string;
    readonly project?: string;
    readonly projectNumber: number;
    readonly publicAccessPrevention: string;
    readonly requesterPays: boolean;
    readonly retentionPolicies: outputs.GetStorageBucketRetentionPolicy[];
    readonly rpo: string;
    readonly selfLink: string;
    readonly softDeletePolicies: outputs.GetStorageBucketSoftDeletePolicy[];
    readonly storageClass: string;
    readonly terraformLabels: {[key: string]: string};
    readonly uniformBucketLevelAccess: boolean;
    readonly url: string;
    readonly versionings: outputs.GetStorageBucketVersioning[];
    readonly websites: outputs.GetStorageBucketWebsite[];
}
export function getStorageBucketOutput(args: GetStorageBucketOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageBucketResult> {
    return pulumi.output(args).apply((a: any) => getStorageBucket(a, opts))
}

/**
 * A collection of arguments for invoking getStorageBucket.
 */
export interface GetStorageBucketOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
