// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceNetworkingConnection extends pulumi.CustomResource {
    /**
     * Get an existing ServiceNetworkingConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceNetworkingConnectionState, opts?: pulumi.CustomResourceOptions): ServiceNetworkingConnection {
        return new ServiceNetworkingConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/serviceNetworkingConnection:ServiceNetworkingConnection';

    /**
     * Returns true if the given object is an instance of ServiceNetworkingConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceNetworkingConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceNetworkingConnection.__pulumiType;
    }

    public readonly deletionPolicy!: pulumi.Output<string | undefined>;
    /**
     * Name of VPC network connected with service producers using VPC peering.
     */
    public readonly network!: pulumi.Output<string>;
    public /*out*/ readonly peering!: pulumi.Output<string>;
    /**
     * Named IP address range(s) of PEERING type reserved for this service provider. Note that invoking this method with a
     * different range when connection is already established will not reallocate already provisioned service producer
     * subnetworks.
     */
    public readonly reservedPeeringRanges!: pulumi.Output<string[]>;
    /**
     * Provider peering service that is managing peering connectivity for a service provider organization. For Google services
     * that support this functionality it is 'servicenetworking.googleapis.com'.
     */
    public readonly service!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ServiceNetworkingConnectionTimeouts | undefined>;
    /**
     * When set to true, enforce an update of the reserved peering ranges on the existing service networking connection in case
     * of a new connection creation failure.
     */
    public readonly updateOnCreationFail!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ServiceNetworkingConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceNetworkingConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceNetworkingConnectionArgs | ServiceNetworkingConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceNetworkingConnectionState | undefined;
            resourceInputs["deletionPolicy"] = state ? state.deletionPolicy : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["peering"] = state ? state.peering : undefined;
            resourceInputs["reservedPeeringRanges"] = state ? state.reservedPeeringRanges : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateOnCreationFail"] = state ? state.updateOnCreationFail : undefined;
        } else {
            const args = argsOrState as ServiceNetworkingConnectionArgs | undefined;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.reservedPeeringRanges === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reservedPeeringRanges'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["deletionPolicy"] = args ? args.deletionPolicy : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["reservedPeeringRanges"] = args ? args.reservedPeeringRanges : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["updateOnCreationFail"] = args ? args.updateOnCreationFail : undefined;
            resourceInputs["peering"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceNetworkingConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceNetworkingConnection resources.
 */
export interface ServiceNetworkingConnectionState {
    deletionPolicy?: pulumi.Input<string>;
    /**
     * Name of VPC network connected with service producers using VPC peering.
     */
    network?: pulumi.Input<string>;
    peering?: pulumi.Input<string>;
    /**
     * Named IP address range(s) of PEERING type reserved for this service provider. Note that invoking this method with a
     * different range when connection is already established will not reallocate already provisioned service producer
     * subnetworks.
     */
    reservedPeeringRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Provider peering service that is managing peering connectivity for a service provider organization. For Google services
     * that support this functionality it is 'servicenetworking.googleapis.com'.
     */
    service?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServiceNetworkingConnectionTimeouts>;
    /**
     * When set to true, enforce an update of the reserved peering ranges on the existing service networking connection in case
     * of a new connection creation failure.
     */
    updateOnCreationFail?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ServiceNetworkingConnection resource.
 */
export interface ServiceNetworkingConnectionArgs {
    deletionPolicy?: pulumi.Input<string>;
    /**
     * Name of VPC network connected with service producers using VPC peering.
     */
    network: pulumi.Input<string>;
    /**
     * Named IP address range(s) of PEERING type reserved for this service provider. Note that invoking this method with a
     * different range when connection is already established will not reallocate already provisioned service producer
     * subnetworks.
     */
    reservedPeeringRanges: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Provider peering service that is managing peering connectivity for a service provider organization. For Google services
     * that support this functionality it is 'servicenetworking.googleapis.com'.
     */
    service: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServiceNetworkingConnectionTimeouts>;
    /**
     * When set to true, enforce an update of the reserved peering ranges on the existing service networking connection in case
     * of a new connection creation failure.
     */
    updateOnCreationFail?: pulumi.Input<boolean>;
}
