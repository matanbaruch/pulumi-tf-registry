// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DataplexAssetIamPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DataplexAssetIamPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataplexAssetIamPolicyState, opts?: pulumi.CustomResourceOptions): DataplexAssetIamPolicy {
        return new DataplexAssetIamPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/dataplexAssetIamPolicy:DataplexAssetIamPolicy';

    /**
     * Returns true if the given object is an instance of DataplexAssetIamPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataplexAssetIamPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataplexAssetIamPolicy.__pulumiType;
    }

    public readonly asset!: pulumi.Output<string>;
    public readonly dataplexZone!: pulumi.Output<string>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    public readonly lake!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly policyData!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a DataplexAssetIamPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataplexAssetIamPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataplexAssetIamPolicyArgs | DataplexAssetIamPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataplexAssetIamPolicyState | undefined;
            resourceInputs["asset"] = state ? state.asset : undefined;
            resourceInputs["dataplexZone"] = state ? state.dataplexZone : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["lake"] = state ? state.lake : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["policyData"] = state ? state.policyData : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as DataplexAssetIamPolicyArgs | undefined;
            if ((!args || args.asset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'asset'");
            }
            if ((!args || args.dataplexZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataplexZone'");
            }
            if ((!args || args.lake === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lake'");
            }
            if ((!args || args.policyData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyData'");
            }
            resourceInputs["asset"] = args ? args.asset : undefined;
            resourceInputs["dataplexZone"] = args ? args.dataplexZone : undefined;
            resourceInputs["lake"] = args ? args.lake : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["policyData"] = args ? args.policyData : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataplexAssetIamPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataplexAssetIamPolicy resources.
 */
export interface DataplexAssetIamPolicyState {
    asset?: pulumi.Input<string>;
    dataplexZone?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    lake?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    policyData?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataplexAssetIamPolicy resource.
 */
export interface DataplexAssetIamPolicyArgs {
    asset: pulumi.Input<string>;
    dataplexZone: pulumi.Input<string>;
    lake: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    policyData: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
