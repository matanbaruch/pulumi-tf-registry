// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkManagementConnectivityTest extends pulumi.CustomResource {
    /**
     * Get an existing NetworkManagementConnectivityTest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkManagementConnectivityTestState, opts?: pulumi.CustomResourceOptions): NetworkManagementConnectivityTest {
        return new NetworkManagementConnectivityTest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/networkManagementConnectivityTest:NetworkManagementConnectivityTest';

    /**
     * Returns true if the given object is an instance of NetworkManagementConnectivityTest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkManagementConnectivityTest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkManagementConnectivityTest.__pulumiType;
    }

    /**
     * The user-supplied description of the Connectivity Test. Maximum of 512 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Required. Destination specification of the Connectivity Test. You can use a combination of destination IP address,
     * Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP
     * address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from
     * route information. If the destination you specify is a VM instance and the instance has multiple network interfaces,
     * then you must also specify either a destination IP address or VPC network to identify the destination interface. A
     * reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints
     * that you don't intend to test.
     */
    public readonly destination!: pulumi.Output<outputs.NetworkManagementConnectivityTestDestination>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Unique name for the connectivity test.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * IP Protocol of the test. When not provided, "TCP" is assumed.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross
     * project boundaries.
     */
    public readonly relatedProjects!: pulumi.Output<string[] | undefined>;
    /**
     * Required. Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine
     * (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is
     * an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC
     * network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information.
     * If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the
     * source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient
     * to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis
     * proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend
     * to test.
     */
    public readonly source!: pulumi.Output<outputs.NetworkManagementConnectivityTestSource>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkManagementConnectivityTestTimeouts | undefined>;

    /**
     * Create a NetworkManagementConnectivityTest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkManagementConnectivityTestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkManagementConnectivityTestArgs | NetworkManagementConnectivityTestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkManagementConnectivityTestState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["relatedProjects"] = state ? state.relatedProjects : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkManagementConnectivityTestArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["relatedProjects"] = args ? args.relatedProjects : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkManagementConnectivityTest.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkManagementConnectivityTest resources.
 */
export interface NetworkManagementConnectivityTestState {
    /**
     * The user-supplied description of the Connectivity Test. Maximum of 512 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Required. Destination specification of the Connectivity Test. You can use a combination of destination IP address,
     * Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP
     * address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from
     * route information. If the destination you specify is a VM instance and the instance has multiple network interfaces,
     * then you must also specify either a destination IP address or VPC network to identify the destination interface. A
     * reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints
     * that you don't intend to test.
     */
    destination?: pulumi.Input<inputs.NetworkManagementConnectivityTestDestination>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Unique name for the connectivity test.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * IP Protocol of the test. When not provided, "TCP" is assumed.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross
     * project boundaries.
     */
    relatedProjects?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required. Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine
     * (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is
     * an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC
     * network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information.
     * If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the
     * source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient
     * to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis
     * proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend
     * to test.
     */
    source?: pulumi.Input<inputs.NetworkManagementConnectivityTestSource>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NetworkManagementConnectivityTestTimeouts>;
}

/**
 * The set of arguments for constructing a NetworkManagementConnectivityTest resource.
 */
export interface NetworkManagementConnectivityTestArgs {
    /**
     * The user-supplied description of the Connectivity Test. Maximum of 512 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Required. Destination specification of the Connectivity Test. You can use a combination of destination IP address,
     * Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP
     * address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from
     * route information. If the destination you specify is a VM instance and the instance has multiple network interfaces,
     * then you must also specify either a destination IP address or VPC network to identify the destination interface. A
     * reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints
     * that you don't intend to test.
     */
    destination: pulumi.Input<inputs.NetworkManagementConnectivityTestDestination>;
    /**
     * Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Unique name for the connectivity test.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * IP Protocol of the test. When not provided, "TCP" is assumed.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross
     * project boundaries.
     */
    relatedProjects?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required. Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine
     * (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is
     * an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC
     * network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information.
     * If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the
     * source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient
     * to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis
     * proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend
     * to test.
     */
    source: pulumi.Input<inputs.NetworkManagementConnectivityTestSource>;
    timeouts?: pulumi.Input<inputs.NetworkManagementConnectivityTestTimeouts>;
}
