// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppEngineDomainMapping extends pulumi.CustomResource {
    /**
     * Get an existing AppEngineDomainMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppEngineDomainMappingState, opts?: pulumi.CustomResourceOptions): AppEngineDomainMapping {
        return new AppEngineDomainMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/appEngineDomainMapping:AppEngineDomainMapping';

    /**
     * Returns true if the given object is an instance of AppEngineDomainMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppEngineDomainMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppEngineDomainMapping.__pulumiType;
    }

    /**
     * Relative name of the domain serving the application. Example: example.com.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.
     * Default value: "STRICT" Possible values: ["STRICT", "OVERRIDE"]
     */
    public readonly overrideStrategy!: pulumi.Output<string | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The resource records required to configure this domain mapping. These records must be added to the domain's DNS
     * configuration in order to serve the application via this domain mapping.
     */
    public /*out*/ readonly resourceRecords!: pulumi.Output<outputs.AppEngineDomainMappingResourceRecord[]>;
    /**
     * SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
     */
    public readonly sslSettings!: pulumi.Output<outputs.AppEngineDomainMappingSslSettings | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AppEngineDomainMappingTimeouts | undefined>;

    /**
     * Create a AppEngineDomainMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppEngineDomainMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppEngineDomainMappingArgs | AppEngineDomainMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppEngineDomainMappingState | undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrideStrategy"] = state ? state.overrideStrategy : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["resourceRecords"] = state ? state.resourceRecords : undefined;
            resourceInputs["sslSettings"] = state ? state.sslSettings : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AppEngineDomainMappingArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["overrideStrategy"] = args ? args.overrideStrategy : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sslSettings"] = args ? args.sslSettings : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resourceRecords"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppEngineDomainMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppEngineDomainMapping resources.
 */
export interface AppEngineDomainMappingState {
    /**
     * Relative name of the domain serving the application. Example: example.com.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.
     * Default value: "STRICT" Possible values: ["STRICT", "OVERRIDE"]
     */
    overrideStrategy?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The resource records required to configure this domain mapping. These records must be added to the domain's DNS
     * configuration in order to serve the application via this domain mapping.
     */
    resourceRecords?: pulumi.Input<pulumi.Input<inputs.AppEngineDomainMappingResourceRecord>[]>;
    /**
     * SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
     */
    sslSettings?: pulumi.Input<inputs.AppEngineDomainMappingSslSettings>;
    timeouts?: pulumi.Input<inputs.AppEngineDomainMappingTimeouts>;
}

/**
 * The set of arguments for constructing a AppEngineDomainMapping resource.
 */
export interface AppEngineDomainMappingArgs {
    /**
     * Relative name of the domain serving the application. Example: example.com.
     */
    domainName: pulumi.Input<string>;
    /**
     * Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.
     * Default value: "STRICT" Possible values: ["STRICT", "OVERRIDE"]
     */
    overrideStrategy?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
     */
    sslSettings?: pulumi.Input<inputs.AppEngineDomainMappingSslSettings>;
    timeouts?: pulumi.Input<inputs.AppEngineDomainMappingTimeouts>;
}
