// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeSecurityPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ComputeSecurityPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeSecurityPolicyState, opts?: pulumi.CustomResourceOptions): ComputeSecurityPolicy {
        return new ComputeSecurityPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/computeSecurityPolicy:ComputeSecurityPolicy';

    /**
     * Returns true if the given object is an instance of ComputeSecurityPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeSecurityPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeSecurityPolicy.__pulumiType;
    }

    /**
     * Adaptive Protection Config of this security policy.
     */
    public readonly adaptiveProtectionConfig!: pulumi.Output<outputs.ComputeSecurityPolicyAdaptiveProtectionConfig | undefined>;
    /**
     * Advanced Options Config of this security policy.
     */
    public readonly advancedOptionsConfig!: pulumi.Output<outputs.ComputeSecurityPolicyAdvancedOptionsConfig | undefined>;
    /**
     * An optional description of this security policy. Max size is 2048.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Fingerprint of this resource.
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * The name of the security policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project in which the resource belongs. If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * reCAPTCHA configuration options to be applied for the security policy.
     */
    public readonly recaptchaOptionsConfig!: pulumi.Output<outputs.ComputeSecurityPolicyRecaptchaOptionsConfig | undefined>;
    /**
     * The set of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and
     * match "*"). If no rules are provided when creating a security policy, a default rule with action "allow" will be added.
     */
    public readonly rules!: pulumi.Output<outputs.ComputeSecurityPolicyRule[] | undefined>;
    /**
     * The URI of the created resource.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeSecurityPolicyTimeouts | undefined>;
    /**
     * The type indicates the intended use of the security policy. CLOUD_ARMOR - Cloud Armor backend security policies can be
     * configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin
     * servers. CLOUD_ARMOR_EDGE - Cloud Armor edge security policies can be configured to filter incoming HTTP requests
     * targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter
     * requests before the request is served from Google's cache.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ComputeSecurityPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ComputeSecurityPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeSecurityPolicyArgs | ComputeSecurityPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeSecurityPolicyState | undefined;
            resourceInputs["adaptiveProtectionConfig"] = state ? state.adaptiveProtectionConfig : undefined;
            resourceInputs["advancedOptionsConfig"] = state ? state.advancedOptionsConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["recaptchaOptionsConfig"] = state ? state.recaptchaOptionsConfig : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ComputeSecurityPolicyArgs | undefined;
            resourceInputs["adaptiveProtectionConfig"] = args ? args.adaptiveProtectionConfig : undefined;
            resourceInputs["advancedOptionsConfig"] = args ? args.advancedOptionsConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["recaptchaOptionsConfig"] = args ? args.recaptchaOptionsConfig : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeSecurityPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeSecurityPolicy resources.
 */
export interface ComputeSecurityPolicyState {
    /**
     * Adaptive Protection Config of this security policy.
     */
    adaptiveProtectionConfig?: pulumi.Input<inputs.ComputeSecurityPolicyAdaptiveProtectionConfig>;
    /**
     * Advanced Options Config of this security policy.
     */
    advancedOptionsConfig?: pulumi.Input<inputs.ComputeSecurityPolicyAdvancedOptionsConfig>;
    /**
     * An optional description of this security policy. Max size is 2048.
     */
    description?: pulumi.Input<string>;
    /**
     * Fingerprint of this resource.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * The name of the security policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * reCAPTCHA configuration options to be applied for the security policy.
     */
    recaptchaOptionsConfig?: pulumi.Input<inputs.ComputeSecurityPolicyRecaptchaOptionsConfig>;
    /**
     * The set of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and
     * match "*"). If no rules are provided when creating a security policy, a default rule with action "allow" will be added.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.ComputeSecurityPolicyRule>[]>;
    /**
     * The URI of the created resource.
     */
    selfLink?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeSecurityPolicyTimeouts>;
    /**
     * The type indicates the intended use of the security policy. CLOUD_ARMOR - Cloud Armor backend security policies can be
     * configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin
     * servers. CLOUD_ARMOR_EDGE - Cloud Armor edge security policies can be configured to filter incoming HTTP requests
     * targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter
     * requests before the request is served from Google's cache.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeSecurityPolicy resource.
 */
export interface ComputeSecurityPolicyArgs {
    /**
     * Adaptive Protection Config of this security policy.
     */
    adaptiveProtectionConfig?: pulumi.Input<inputs.ComputeSecurityPolicyAdaptiveProtectionConfig>;
    /**
     * Advanced Options Config of this security policy.
     */
    advancedOptionsConfig?: pulumi.Input<inputs.ComputeSecurityPolicyAdvancedOptionsConfig>;
    /**
     * An optional description of this security policy. Max size is 2048.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the security policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * reCAPTCHA configuration options to be applied for the security policy.
     */
    recaptchaOptionsConfig?: pulumi.Input<inputs.ComputeSecurityPolicyRecaptchaOptionsConfig>;
    /**
     * The set of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and
     * match "*"). If no rules are provided when creating a security policy, a default rule with action "allow" will be added.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.ComputeSecurityPolicyRule>[]>;
    timeouts?: pulumi.Input<inputs.ComputeSecurityPolicyTimeouts>;
    /**
     * The type indicates the intended use of the security policy. CLOUD_ARMOR - Cloud Armor backend security policies can be
     * configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin
     * servers. CLOUD_ARMOR_EDGE - Cloud Armor edge security policies can be configured to filter incoming HTTP requests
     * targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter
     * requests before the request is served from Google's cache.
     */
    type?: pulumi.Input<string>;
}
