// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirestoreBackupSchedule extends pulumi.CustomResource {
    /**
     * Get an existing FirestoreBackupSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirestoreBackupScheduleState, opts?: pulumi.CustomResourceOptions): FirestoreBackupSchedule {
        return new FirestoreBackupSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/firestoreBackupSchedule:FirestoreBackupSchedule';

    /**
     * Returns true if the given object is an instance of FirestoreBackupSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirestoreBackupSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirestoreBackupSchedule.__pulumiType;
    }

    /**
     * For a schedule that runs daily.
     */
    public readonly dailyRecurrence!: pulumi.Output<outputs.FirestoreBackupScheduleDailyRecurrence | undefined>;
    /**
     * The Firestore database id. Defaults to '"(default)"'.
     */
    public readonly database!: pulumi.Output<string | undefined>;
    /**
     * The unique backup schedule identifier across all locations and databases for the given project. Format:
     * 'projects/{{project}}/databases/{{database}}/backupSchedules/{{backupSchedule}}'
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for
     * 7 days. A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s". You can set this to a
     * value up to 14 weeks.
     */
    public readonly retention!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FirestoreBackupScheduleTimeouts | undefined>;
    /**
     * For a schedule that runs weekly on a specific day.
     */
    public readonly weeklyRecurrence!: pulumi.Output<outputs.FirestoreBackupScheduleWeeklyRecurrence | undefined>;

    /**
     * Create a FirestoreBackupSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirestoreBackupScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirestoreBackupScheduleArgs | FirestoreBackupScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirestoreBackupScheduleState | undefined;
            resourceInputs["dailyRecurrence"] = state ? state.dailyRecurrence : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["retention"] = state ? state.retention : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["weeklyRecurrence"] = state ? state.weeklyRecurrence : undefined;
        } else {
            const args = argsOrState as FirestoreBackupScheduleArgs | undefined;
            if ((!args || args.retention === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retention'");
            }
            resourceInputs["dailyRecurrence"] = args ? args.dailyRecurrence : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["retention"] = args ? args.retention : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["weeklyRecurrence"] = args ? args.weeklyRecurrence : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirestoreBackupSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirestoreBackupSchedule resources.
 */
export interface FirestoreBackupScheduleState {
    /**
     * For a schedule that runs daily.
     */
    dailyRecurrence?: pulumi.Input<inputs.FirestoreBackupScheduleDailyRecurrence>;
    /**
     * The Firestore database id. Defaults to '"(default)"'.
     */
    database?: pulumi.Input<string>;
    /**
     * The unique backup schedule identifier across all locations and databases for the given project. Format:
     * 'projects/{{project}}/databases/{{database}}/backupSchedules/{{backupSchedule}}'
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for
     * 7 days. A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s". You can set this to a
     * value up to 14 weeks.
     */
    retention?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirestoreBackupScheduleTimeouts>;
    /**
     * For a schedule that runs weekly on a specific day.
     */
    weeklyRecurrence?: pulumi.Input<inputs.FirestoreBackupScheduleWeeklyRecurrence>;
}

/**
 * The set of arguments for constructing a FirestoreBackupSchedule resource.
 */
export interface FirestoreBackupScheduleArgs {
    /**
     * For a schedule that runs daily.
     */
    dailyRecurrence?: pulumi.Input<inputs.FirestoreBackupScheduleDailyRecurrence>;
    /**
     * The Firestore database id. Defaults to '"(default)"'.
     */
    database?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for
     * 7 days. A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s". You can set this to a
     * value up to 14 weeks.
     */
    retention: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirestoreBackupScheduleTimeouts>;
    /**
     * For a schedule that runs weekly on a specific day.
     */
    weeklyRecurrence?: pulumi.Input<inputs.FirestoreBackupScheduleWeeklyRecurrence>;
}
