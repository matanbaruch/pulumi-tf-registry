// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProjectUsageExportBucket extends pulumi.CustomResource {
    /**
     * Get an existing ProjectUsageExportBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectUsageExportBucketState, opts?: pulumi.CustomResourceOptions): ProjectUsageExportBucket {
        return new ProjectUsageExportBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/projectUsageExportBucket:ProjectUsageExportBucket';

    /**
     * Returns true if the given object is an instance of ProjectUsageExportBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectUsageExportBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectUsageExportBucket.__pulumiType;
    }

    /**
     * The bucket to store reports in.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * A prefix for the reports, for instance, the project name.
     */
    public readonly prefix!: pulumi.Output<string | undefined>;
    /**
     * The project to set the export bucket on. If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ProjectUsageExportBucketTimeouts | undefined>;

    /**
     * Create a ProjectUsageExportBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectUsageExportBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectUsageExportBucketArgs | ProjectUsageExportBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectUsageExportBucketState | undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ProjectUsageExportBucketArgs | undefined;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectUsageExportBucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProjectUsageExportBucket resources.
 */
export interface ProjectUsageExportBucketState {
    /**
     * The bucket to store reports in.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * A prefix for the reports, for instance, the project name.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The project to set the export bucket on. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ProjectUsageExportBucketTimeouts>;
}

/**
 * The set of arguments for constructing a ProjectUsageExportBucket resource.
 */
export interface ProjectUsageExportBucketArgs {
    /**
     * The bucket to store reports in.
     */
    bucketName: pulumi.Input<string>;
    /**
     * A prefix for the reports, for instance, the project name.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The project to set the export bucket on. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ProjectUsageExportBucketTimeouts>;
}
