// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageHmacKey extends pulumi.CustomResource {
    /**
     * Get an existing StorageHmacKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageHmacKeyState, opts?: pulumi.CustomResourceOptions): StorageHmacKey {
        return new StorageHmacKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/storageHmacKey:StorageHmacKey';

    /**
     * Returns true if the given object is an instance of StorageHmacKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageHmacKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageHmacKey.__pulumiType;
    }

    /**
     * The access ID of the HMAC Key.
     */
    public /*out*/ readonly accessId!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * HMAC secret key material.
     */
    public /*out*/ readonly secret!: pulumi.Output<string>;
    /**
     * The email address of the key's associated service account.
     */
    public readonly serviceAccountEmail!: pulumi.Output<string>;
    /**
     * The state of the key. Can be set to one of ACTIVE, INACTIVE. Default value: "ACTIVE" Possible values: ["ACTIVE",
     * "INACTIVE"]
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * 'The creation time of the HMAC key in RFC 3339 format. '
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageHmacKeyTimeouts | undefined>;
    /**
     * 'The last modification time of the HMAC key metadata in RFC 3339 format.'
     */
    public /*out*/ readonly updated!: pulumi.Output<string>;

    /**
     * Create a StorageHmacKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageHmacKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageHmacKeyArgs | StorageHmacKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageHmacKeyState | undefined;
            resourceInputs["accessId"] = state ? state.accessId : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["serviceAccountEmail"] = state ? state.serviceAccountEmail : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
        } else {
            const args = argsOrState as StorageHmacKeyArgs | undefined;
            if ((!args || args.serviceAccountEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountEmail'");
            }
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceAccountEmail"] = args ? args.serviceAccountEmail : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["accessId"] = undefined /*out*/;
            resourceInputs["secret"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StorageHmacKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageHmacKey resources.
 */
export interface StorageHmacKeyState {
    /**
     * The access ID of the HMAC Key.
     */
    accessId?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * HMAC secret key material.
     */
    secret?: pulumi.Input<string>;
    /**
     * The email address of the key's associated service account.
     */
    serviceAccountEmail?: pulumi.Input<string>;
    /**
     * The state of the key. Can be set to one of ACTIVE, INACTIVE. Default value: "ACTIVE" Possible values: ["ACTIVE",
     * "INACTIVE"]
     */
    state?: pulumi.Input<string>;
    /**
     * 'The creation time of the HMAC key in RFC 3339 format. '
     */
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageHmacKeyTimeouts>;
    /**
     * 'The last modification time of the HMAC key metadata in RFC 3339 format.'
     */
    updated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageHmacKey resource.
 */
export interface StorageHmacKeyArgs {
    project?: pulumi.Input<string>;
    /**
     * The email address of the key's associated service account.
     */
    serviceAccountEmail: pulumi.Input<string>;
    /**
     * The state of the key. Can be set to one of ACTIVE, INACTIVE. Default value: "ACTIVE" Possible values: ["ACTIVE",
     * "INACTIVE"]
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageHmacKeyTimeouts>;
}
