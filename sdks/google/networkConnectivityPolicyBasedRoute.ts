// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkConnectivityPolicyBasedRoute extends pulumi.CustomResource {
    /**
     * Get an existing NetworkConnectivityPolicyBasedRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkConnectivityPolicyBasedRouteState, opts?: pulumi.CustomResourceOptions): NetworkConnectivityPolicyBasedRoute {
        return new NetworkConnectivityPolicyBasedRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/networkConnectivityPolicyBasedRoute:NetworkConnectivityPolicyBasedRoute';

    /**
     * Returns true if the given object is an instance of NetworkConnectivityPolicyBasedRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkConnectivityPolicyBasedRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkConnectivityPolicyBasedRoute.__pulumiType;
    }

    /**
     * Time when the policy-based route was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The filter to match L4 traffic.
     */
    public readonly filter!: pulumi.Output<outputs.NetworkConnectivityPolicyBasedRouteFilter>;
    /**
     * The interconnect attachments that this policy-based route applies to.
     */
    public readonly interconnectAttachment!: pulumi.Output<outputs.NetworkConnectivityPolicyBasedRouteInterconnectAttachment | undefined>;
    /**
     * Type of this resource.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the policy based route.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Fully-qualified URL of the network that this route applies to, for example:
     * projects/my-project/global/networks/my-network.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
     */
    public readonly nextHopIlbIp!: pulumi.Output<string | undefined>;
    /**
     * Other routes that will be referenced to determine the next hop of the packet. Possible values: ["DEFAULT_ROUTING"]
     */
    public readonly nextHopOtherRoutes!: pulumi.Output<string | undefined>;
    /**
     * The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
     * policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
     * priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkConnectivityPolicyBasedRouteTimeouts | undefined>;
    /**
     * Time when the policy-based route was created.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * VM instances to which this policy-based route applies to.
     */
    public readonly virtualMachine!: pulumi.Output<outputs.NetworkConnectivityPolicyBasedRouteVirtualMachine | undefined>;
    /**
     * If potential misconfigurations are detected for this route, this field will be populated with warning messages.
     */
    public /*out*/ readonly warnings!: pulumi.Output<outputs.NetworkConnectivityPolicyBasedRouteWarning[]>;

    /**
     * Create a NetworkConnectivityPolicyBasedRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkConnectivityPolicyBasedRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkConnectivityPolicyBasedRouteArgs | NetworkConnectivityPolicyBasedRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkConnectivityPolicyBasedRouteState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["interconnectAttachment"] = state ? state.interconnectAttachment : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["nextHopIlbIp"] = state ? state.nextHopIlbIp : undefined;
            resourceInputs["nextHopOtherRoutes"] = state ? state.nextHopOtherRoutes : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["virtualMachine"] = state ? state.virtualMachine : undefined;
            resourceInputs["warnings"] = state ? state.warnings : undefined;
        } else {
            const args = argsOrState as NetworkConnectivityPolicyBasedRouteArgs | undefined;
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["interconnectAttachment"] = args ? args.interconnectAttachment : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["nextHopIlbIp"] = args ? args.nextHopIlbIp : undefined;
            resourceInputs["nextHopOtherRoutes"] = args ? args.nextHopOtherRoutes : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualMachine"] = args ? args.virtualMachine : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["warnings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkConnectivityPolicyBasedRoute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkConnectivityPolicyBasedRoute resources.
 */
export interface NetworkConnectivityPolicyBasedRouteState {
    /**
     * Time when the policy-based route was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The filter to match L4 traffic.
     */
    filter?: pulumi.Input<inputs.NetworkConnectivityPolicyBasedRouteFilter>;
    /**
     * The interconnect attachments that this policy-based route applies to.
     */
    interconnectAttachment?: pulumi.Input<inputs.NetworkConnectivityPolicyBasedRouteInterconnectAttachment>;
    /**
     * Type of this resource.
     */
    kind?: pulumi.Input<string>;
    /**
     * User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the policy based route.
     */
    name?: pulumi.Input<string>;
    /**
     * Fully-qualified URL of the network that this route applies to, for example:
     * projects/my-project/global/networks/my-network.
     */
    network?: pulumi.Input<string>;
    /**
     * The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
     */
    nextHopIlbIp?: pulumi.Input<string>;
    /**
     * Other routes that will be referenced to determine the next hop of the packet. Possible values: ["DEFAULT_ROUTING"]
     */
    nextHopOtherRoutes?: pulumi.Input<string>;
    /**
     * The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
     * policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
     * priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
     */
    priority?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NetworkConnectivityPolicyBasedRouteTimeouts>;
    /**
     * Time when the policy-based route was created.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * VM instances to which this policy-based route applies to.
     */
    virtualMachine?: pulumi.Input<inputs.NetworkConnectivityPolicyBasedRouteVirtualMachine>;
    /**
     * If potential misconfigurations are detected for this route, this field will be populated with warning messages.
     */
    warnings?: pulumi.Input<pulumi.Input<inputs.NetworkConnectivityPolicyBasedRouteWarning>[]>;
}

/**
 * The set of arguments for constructing a NetworkConnectivityPolicyBasedRoute resource.
 */
export interface NetworkConnectivityPolicyBasedRouteArgs {
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The filter to match L4 traffic.
     */
    filter: pulumi.Input<inputs.NetworkConnectivityPolicyBasedRouteFilter>;
    /**
     * The interconnect attachments that this policy-based route applies to.
     */
    interconnectAttachment?: pulumi.Input<inputs.NetworkConnectivityPolicyBasedRouteInterconnectAttachment>;
    /**
     * User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the policy based route.
     */
    name?: pulumi.Input<string>;
    /**
     * Fully-qualified URL of the network that this route applies to, for example:
     * projects/my-project/global/networks/my-network.
     */
    network: pulumi.Input<string>;
    /**
     * The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets.
     */
    nextHopIlbIp?: pulumi.Input<string>;
    /**
     * Other routes that will be referenced to determine the next hop of the packet. Possible values: ["DEFAULT_ROUTING"]
     */
    nextHopOtherRoutes?: pulumi.Input<string>;
    /**
     * The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching
     * policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered
     * priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
     */
    priority?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkConnectivityPolicyBasedRouteTimeouts>;
    /**
     * VM instances to which this policy-based route applies to.
     */
    virtualMachine?: pulumi.Input<inputs.NetworkConnectivityPolicyBasedRouteVirtualMachine>;
}
