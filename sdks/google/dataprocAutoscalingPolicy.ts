// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataprocAutoscalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DataprocAutoscalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataprocAutoscalingPolicyState, opts?: pulumi.CustomResourceOptions): DataprocAutoscalingPolicy {
        return new DataprocAutoscalingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/dataprocAutoscalingPolicy:DataprocAutoscalingPolicy';

    /**
     * Returns true if the given object is an instance of DataprocAutoscalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataprocAutoscalingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataprocAutoscalingPolicy.__pulumiType;
    }

    /**
     * Basic algorithm for autoscaling.
     */
    public readonly basicAlgorithm!: pulumi.Output<outputs.DataprocAutoscalingPolicyBasicAlgorithm | undefined>;
    /**
     * The location where the autoscaling policy should reside. The default value is 'global'.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The "resource name" of the autoscaling policy.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot
     * begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
     */
    public readonly policyId!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Describes how the autoscaler will operate for secondary workers.
     */
    public readonly secondaryWorkerConfig!: pulumi.Output<outputs.DataprocAutoscalingPolicySecondaryWorkerConfig | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DataprocAutoscalingPolicyTimeouts | undefined>;
    /**
     * Describes how the autoscaler will operate for primary workers.
     */
    public readonly workerConfig!: pulumi.Output<outputs.DataprocAutoscalingPolicyWorkerConfig | undefined>;

    /**
     * Create a DataprocAutoscalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataprocAutoscalingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataprocAutoscalingPolicyArgs | DataprocAutoscalingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataprocAutoscalingPolicyState | undefined;
            resourceInputs["basicAlgorithm"] = state ? state.basicAlgorithm : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["secondaryWorkerConfig"] = state ? state.secondaryWorkerConfig : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workerConfig"] = state ? state.workerConfig : undefined;
        } else {
            const args = argsOrState as DataprocAutoscalingPolicyArgs | undefined;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["basicAlgorithm"] = args ? args.basicAlgorithm : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["secondaryWorkerConfig"] = args ? args.secondaryWorkerConfig : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workerConfig"] = args ? args.workerConfig : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataprocAutoscalingPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataprocAutoscalingPolicy resources.
 */
export interface DataprocAutoscalingPolicyState {
    /**
     * Basic algorithm for autoscaling.
     */
    basicAlgorithm?: pulumi.Input<inputs.DataprocAutoscalingPolicyBasicAlgorithm>;
    /**
     * The location where the autoscaling policy should reside. The default value is 'global'.
     */
    location?: pulumi.Input<string>;
    /**
     * The "resource name" of the autoscaling policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot
     * begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
     */
    policyId?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Describes how the autoscaler will operate for secondary workers.
     */
    secondaryWorkerConfig?: pulumi.Input<inputs.DataprocAutoscalingPolicySecondaryWorkerConfig>;
    timeouts?: pulumi.Input<inputs.DataprocAutoscalingPolicyTimeouts>;
    /**
     * Describes how the autoscaler will operate for primary workers.
     */
    workerConfig?: pulumi.Input<inputs.DataprocAutoscalingPolicyWorkerConfig>;
}

/**
 * The set of arguments for constructing a DataprocAutoscalingPolicy resource.
 */
export interface DataprocAutoscalingPolicyArgs {
    /**
     * Basic algorithm for autoscaling.
     */
    basicAlgorithm?: pulumi.Input<inputs.DataprocAutoscalingPolicyBasicAlgorithm>;
    /**
     * The location where the autoscaling policy should reside. The default value is 'global'.
     */
    location?: pulumi.Input<string>;
    /**
     * The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot
     * begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
     */
    policyId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Describes how the autoscaler will operate for secondary workers.
     */
    secondaryWorkerConfig?: pulumi.Input<inputs.DataprocAutoscalingPolicySecondaryWorkerConfig>;
    timeouts?: pulumi.Input<inputs.DataprocAutoscalingPolicyTimeouts>;
    /**
     * Describes how the autoscaler will operate for primary workers.
     */
    workerConfig?: pulumi.Input<inputs.DataprocAutoscalingPolicyWorkerConfig>;
}
