// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecurityposturePostureDeployment extends pulumi.CustomResource {
    /**
     * Get an existing SecurityposturePostureDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityposturePostureDeploymentState, opts?: pulumi.CustomResourceOptions): SecurityposturePostureDeployment {
        return new SecurityposturePostureDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/securityposturePostureDeployment:SecurityposturePostureDeployment';

    /**
     * Returns true if the given object is an instance of SecurityposturePostureDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityposturePostureDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityposturePostureDeployment.__pulumiType;
    }

    /**
     * Time the posture deployment was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the posture deployment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
     * CREATE_FAILED or DELETE_FAILED. It denotes the desired posture to be deployed.
     */
    public /*out*/ readonly desiredPostureId!: pulumi.Output<string>;
    /**
     * This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
     * CREATE_FAILED or DELETE_FAILED. It denotes the desired posture revision_id to be deployed.
     */
    public /*out*/ readonly desiredPostureRevisionId!: pulumi.Output<string>;
    /**
     * For Resource freshness validation (https://google.aip.dev/154)
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * This is a output only optional field which will be filled in case where PostureDeployment enters a failure state like
     * UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
     * CREATE/UPDATE/DELETE methods.
     */
    public /*out*/ readonly failureMessage!: pulumi.Output<string>;
    /**
     * The location of the resource, eg. global'.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the posture deployment instance.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The parent of the resource, an organization. Format should be 'organizations/{organization_id}'.
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * ID of the posture deployment.
     */
    public readonly postureDeploymentId!: pulumi.Output<string>;
    /**
     * Relative name of the posture which needs to be deployed. It should be in the format:
     * organizations/{organization_id}/locations/{location}/postures/{posture_id}
     */
    public readonly postureId!: pulumi.Output<string>;
    /**
     * Revision_id the posture which needs to be deployed.
     */
    public readonly postureRevisionId!: pulumi.Output<string>;
    /**
     * If set, there are currently changes in flight to the posture deployment.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * State of the posture deployment. A posture deployment can be in the following terminal states: ACTIVE, CREATE_FAILED,
     * UPDATE_FAILED, DELETE_FAILED.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The resource on which the posture should be deployed. This can be in one of the following formats:
     * projects/{project_number}, folders/{folder_number}, organizations/{organization_id}
     */
    public readonly targetResource!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SecurityposturePostureDeploymentTimeouts | undefined>;
    /**
     * Time the posture deployment was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a SecurityposturePostureDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityposturePostureDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityposturePostureDeploymentArgs | SecurityposturePostureDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityposturePostureDeploymentState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredPostureId"] = state ? state.desiredPostureId : undefined;
            resourceInputs["desiredPostureRevisionId"] = state ? state.desiredPostureRevisionId : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["failureMessage"] = state ? state.failureMessage : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["postureDeploymentId"] = state ? state.postureDeploymentId : undefined;
            resourceInputs["postureId"] = state ? state.postureId : undefined;
            resourceInputs["postureRevisionId"] = state ? state.postureRevisionId : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetResource"] = state ? state.targetResource : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as SecurityposturePostureDeploymentArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            if ((!args || args.postureDeploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postureDeploymentId'");
            }
            if ((!args || args.postureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postureId'");
            }
            if ((!args || args.postureRevisionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postureRevisionId'");
            }
            if ((!args || args.targetResource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResource'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["postureDeploymentId"] = args ? args.postureDeploymentId : undefined;
            resourceInputs["postureId"] = args ? args.postureId : undefined;
            resourceInputs["postureRevisionId"] = args ? args.postureRevisionId : undefined;
            resourceInputs["targetResource"] = args ? args.targetResource : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["desiredPostureId"] = undefined /*out*/;
            resourceInputs["desiredPostureRevisionId"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["failureMessage"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityposturePostureDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecurityposturePostureDeployment resources.
 */
export interface SecurityposturePostureDeploymentState {
    /**
     * Time the posture deployment was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the posture deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
     * CREATE_FAILED or DELETE_FAILED. It denotes the desired posture to be deployed.
     */
    desiredPostureId?: pulumi.Input<string>;
    /**
     * This is an output only optional field which will be filled in case when PostureDeployment state is UPDATE_FAILED or
     * CREATE_FAILED or DELETE_FAILED. It denotes the desired posture revision_id to be deployed.
     */
    desiredPostureRevisionId?: pulumi.Input<string>;
    /**
     * For Resource freshness validation (https://google.aip.dev/154)
     */
    etag?: pulumi.Input<string>;
    /**
     * This is a output only optional field which will be filled in case where PostureDeployment enters a failure state like
     * UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
     * CREATE/UPDATE/DELETE methods.
     */
    failureMessage?: pulumi.Input<string>;
    /**
     * The location of the resource, eg. global'.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the posture deployment instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The parent of the resource, an organization. Format should be 'organizations/{organization_id}'.
     */
    parent?: pulumi.Input<string>;
    /**
     * ID of the posture deployment.
     */
    postureDeploymentId?: pulumi.Input<string>;
    /**
     * Relative name of the posture which needs to be deployed. It should be in the format:
     * organizations/{organization_id}/locations/{location}/postures/{posture_id}
     */
    postureId?: pulumi.Input<string>;
    /**
     * Revision_id the posture which needs to be deployed.
     */
    postureRevisionId?: pulumi.Input<string>;
    /**
     * If set, there are currently changes in flight to the posture deployment.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * State of the posture deployment. A posture deployment can be in the following terminal states: ACTIVE, CREATE_FAILED,
     * UPDATE_FAILED, DELETE_FAILED.
     */
    state?: pulumi.Input<string>;
    /**
     * The resource on which the posture should be deployed. This can be in one of the following formats:
     * projects/{project_number}, folders/{folder_number}, organizations/{organization_id}
     */
    targetResource?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecurityposturePostureDeploymentTimeouts>;
    /**
     * Time the posture deployment was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityposturePostureDeployment resource.
 */
export interface SecurityposturePostureDeploymentArgs {
    /**
     * Description of the posture deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * The location of the resource, eg. global'.
     */
    location: pulumi.Input<string>;
    /**
     * The parent of the resource, an organization. Format should be 'organizations/{organization_id}'.
     */
    parent: pulumi.Input<string>;
    /**
     * ID of the posture deployment.
     */
    postureDeploymentId: pulumi.Input<string>;
    /**
     * Relative name of the posture which needs to be deployed. It should be in the format:
     * organizations/{organization_id}/locations/{location}/postures/{posture_id}
     */
    postureId: pulumi.Input<string>;
    /**
     * Revision_id the posture which needs to be deployed.
     */
    postureRevisionId: pulumi.Input<string>;
    /**
     * The resource on which the posture should be deployed. This can be in one of the following formats:
     * projects/{project_number}, folders/{folder_number}, organizations/{organization_id}
     */
    targetResource: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecurityposturePostureDeploymentTimeouts>;
}
