// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcAccessConnector extends pulumi.CustomResource {
    /**
     * Get an existing VpcAccessConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcAccessConnectorState, opts?: pulumi.CustomResourceOptions): VpcAccessConnector {
        return new VpcAccessConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/vpcAccessConnector:VpcAccessConnector';

    /**
     * Returns true if the given object is an instance of VpcAccessConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcAccessConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcAccessConnector.__pulumiType;
    }

    /**
     * List of projects using the connector.
     */
    public /*out*/ readonly connectedProjects!: pulumi.Output<string[]>;
    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: '10.132.0.0/28'.
     */
    public readonly ipCidrRange!: pulumi.Output<string | undefined>;
    /**
     * Machine type of VM Instance underlying connector. Default is e2-micro
     */
    public readonly machineType!: pulumi.Output<string | undefined>;
    /**
     * Maximum value of instances in autoscaling group underlying the connector. Value must be between 3 and 10, inclusive.
     * Must be higher than the value specified by min_instances.
     */
    public readonly maxInstances!: pulumi.Output<number>;
    /**
     * Maximum throughput of the connector in Mbps, must be greater than 'min_throughput'. Default is 300. Refers to the
     * expected throughput when using an e2-micro machine type. Value must be a multiple of 100 from 300 through 1000. Must be
     * higher than the value specified by min_throughput. If both max_throughput and max_instances are provided, max_instances
     * takes precedence over max_throughput. The use of max_throughput is discouraged in favor of max_instances.
     */
    public readonly maxThroughput!: pulumi.Output<number>;
    /**
     * Minimum value of instances in autoscaling group underlying the connector. Value must be between 2 and 9, inclusive. Must
     * be lower than the value specified by max_instances.
     */
    public readonly minInstances!: pulumi.Output<number>;
    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200. Refers to the expected throughput when using an
     * e2-micro machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by
     * max_throughput. If both min_throughput and min_instances are provided, min_instances takes precedence over
     * min_throughput. The use of min_throughput is discouraged in favor of min_instances.
     */
    public readonly minThroughput!: pulumi.Output<number>;
    /**
     * The name of the resource (Max 25 characters).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
     */
    public readonly network!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Region where the VPC Access connector resides. If it is not provided, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The fully qualified name of this VPC connector
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * State of the VPC access connector.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The subnet in which to house the connector
     */
    public readonly subnet!: pulumi.Output<outputs.VpcAccessConnectorSubnet | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VpcAccessConnectorTimeouts | undefined>;

    /**
     * Create a VpcAccessConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpcAccessConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcAccessConnectorArgs | VpcAccessConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcAccessConnectorState | undefined;
            resourceInputs["connectedProjects"] = state ? state.connectedProjects : undefined;
            resourceInputs["ipCidrRange"] = state ? state.ipCidrRange : undefined;
            resourceInputs["machineType"] = state ? state.machineType : undefined;
            resourceInputs["maxInstances"] = state ? state.maxInstances : undefined;
            resourceInputs["maxThroughput"] = state ? state.maxThroughput : undefined;
            resourceInputs["minInstances"] = state ? state.minInstances : undefined;
            resourceInputs["minThroughput"] = state ? state.minThroughput : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as VpcAccessConnectorArgs | undefined;
            resourceInputs["ipCidrRange"] = args ? args.ipCidrRange : undefined;
            resourceInputs["machineType"] = args ? args.machineType : undefined;
            resourceInputs["maxInstances"] = args ? args.maxInstances : undefined;
            resourceInputs["maxThroughput"] = args ? args.maxThroughput : undefined;
            resourceInputs["minInstances"] = args ? args.minInstances : undefined;
            resourceInputs["minThroughput"] = args ? args.minThroughput : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["connectedProjects"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcAccessConnector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcAccessConnector resources.
 */
export interface VpcAccessConnectorState {
    /**
     * List of projects using the connector.
     */
    connectedProjects?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: '10.132.0.0/28'.
     */
    ipCidrRange?: pulumi.Input<string>;
    /**
     * Machine type of VM Instance underlying connector. Default is e2-micro
     */
    machineType?: pulumi.Input<string>;
    /**
     * Maximum value of instances in autoscaling group underlying the connector. Value must be between 3 and 10, inclusive.
     * Must be higher than the value specified by min_instances.
     */
    maxInstances?: pulumi.Input<number>;
    /**
     * Maximum throughput of the connector in Mbps, must be greater than 'min_throughput'. Default is 300. Refers to the
     * expected throughput when using an e2-micro machine type. Value must be a multiple of 100 from 300 through 1000. Must be
     * higher than the value specified by min_throughput. If both max_throughput and max_instances are provided, max_instances
     * takes precedence over max_throughput. The use of max_throughput is discouraged in favor of max_instances.
     */
    maxThroughput?: pulumi.Input<number>;
    /**
     * Minimum value of instances in autoscaling group underlying the connector. Value must be between 2 and 9, inclusive. Must
     * be lower than the value specified by max_instances.
     */
    minInstances?: pulumi.Input<number>;
    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200. Refers to the expected throughput when using an
     * e2-micro machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by
     * max_throughput. If both min_throughput and min_instances are provided, min_instances takes precedence over
     * min_throughput. The use of min_throughput is discouraged in favor of min_instances.
     */
    minThroughput?: pulumi.Input<number>;
    /**
     * The name of the resource (Max 25 characters).
     */
    name?: pulumi.Input<string>;
    /**
     * Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
     */
    network?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Region where the VPC Access connector resides. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The fully qualified name of this VPC connector
     */
    selfLink?: pulumi.Input<string>;
    /**
     * State of the VPC access connector.
     */
    state?: pulumi.Input<string>;
    /**
     * The subnet in which to house the connector
     */
    subnet?: pulumi.Input<inputs.VpcAccessConnectorSubnet>;
    timeouts?: pulumi.Input<inputs.VpcAccessConnectorTimeouts>;
}

/**
 * The set of arguments for constructing a VpcAccessConnector resource.
 */
export interface VpcAccessConnectorArgs {
    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: '10.132.0.0/28'.
     */
    ipCidrRange?: pulumi.Input<string>;
    /**
     * Machine type of VM Instance underlying connector. Default is e2-micro
     */
    machineType?: pulumi.Input<string>;
    /**
     * Maximum value of instances in autoscaling group underlying the connector. Value must be between 3 and 10, inclusive.
     * Must be higher than the value specified by min_instances.
     */
    maxInstances?: pulumi.Input<number>;
    /**
     * Maximum throughput of the connector in Mbps, must be greater than 'min_throughput'. Default is 300. Refers to the
     * expected throughput when using an e2-micro machine type. Value must be a multiple of 100 from 300 through 1000. Must be
     * higher than the value specified by min_throughput. If both max_throughput and max_instances are provided, max_instances
     * takes precedence over max_throughput. The use of max_throughput is discouraged in favor of max_instances.
     */
    maxThroughput?: pulumi.Input<number>;
    /**
     * Minimum value of instances in autoscaling group underlying the connector. Value must be between 2 and 9, inclusive. Must
     * be lower than the value specified by max_instances.
     */
    minInstances?: pulumi.Input<number>;
    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200. Refers to the expected throughput when using an
     * e2-micro machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by
     * max_throughput. If both min_throughput and min_instances are provided, min_instances takes precedence over
     * min_throughput. The use of min_throughput is discouraged in favor of min_instances.
     */
    minThroughput?: pulumi.Input<number>;
    /**
     * The name of the resource (Max 25 characters).
     */
    name?: pulumi.Input<string>;
    /**
     * Name or self_link of the VPC network. Required if 'ip_cidr_range' is set.
     */
    network?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Region where the VPC Access connector resides. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The subnet in which to house the connector
     */
    subnet?: pulumi.Input<inputs.VpcAccessConnectorSubnet>;
    timeouts?: pulumi.Input<inputs.VpcAccessConnectorTimeouts>;
}
