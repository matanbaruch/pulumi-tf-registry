// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AccessContextManagerAccessLevelCondition extends pulumi.CustomResource {
    /**
     * Get an existing AccessContextManagerAccessLevelCondition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessContextManagerAccessLevelConditionState, opts?: pulumi.CustomResourceOptions): AccessContextManagerAccessLevelCondition {
        return new AccessContextManagerAccessLevelCondition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/accessContextManagerAccessLevelCondition:AccessContextManagerAccessLevelCondition';

    /**
     * Returns true if the given object is an instance of AccessContextManagerAccessLevelCondition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessContextManagerAccessLevelCondition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessContextManagerAccessLevelCondition.__pulumiType;
    }

    /**
     * The name of the Access Level to add this condition to.
     */
    public readonly accessLevel!: pulumi.Output<string>;
    /**
     * Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are
     * allowed.
     */
    public readonly devicePolicy!: pulumi.Output<outputs.AccessContextManagerAccessLevelConditionDevicePolicy | undefined>;
    /**
     * A list of CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the
     * specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered
     * malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly, for IPv6, "2001:db8::/32" is
     * accepted whereas "2001:db8::1/32" is not. The originating IP of a request must be in one of the listed subnets in order
     * for this Condition to be true. If empty, all IP addresses are allowed.
     */
    public readonly ipSubnetworks!: pulumi.Output<string[] | undefined>;
    /**
     * An allowed list of members (users, service accounts). Using groups is not supported yet. The signed-in user originating
     * the request must be a part of one of the provided members. If not specified, a request may come from any user (logged
     * in/not logged in, not present in any groups, etc.). Formats: 'user:{emailid}', 'serviceAccount:{emailid}'
     */
    public readonly members!: pulumi.Output<string[] | undefined>;
    /**
     * Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be
     * false for the Condition overall to be satisfied. Defaults to false.
     */
    public readonly negate!: pulumi.Output<boolean | undefined>;
    /**
     * The request must originate from one of the provided countries/regions. Format: A valid ISO 3166-1 alpha-2 code.
     */
    public readonly regions!: pulumi.Output<string[] | undefined>;
    /**
     * A list of other access levels defined in the same Policy, referenced by resource name. Referencing an AccessLevel which
     * does not exist is an error. All access levels listed must be granted for the Condition to be true. Format:
     * accessPolicies/{policy_id}/accessLevels/{short_name}
     */
    public readonly requiredAccessLevels!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AccessContextManagerAccessLevelConditionTimeouts | undefined>;
    /**
     * The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together
     * with 'ip_subnetworks'.
     */
    public readonly vpcNetworkSources!: pulumi.Output<outputs.AccessContextManagerAccessLevelConditionVpcNetworkSource[] | undefined>;

    /**
     * Create a AccessContextManagerAccessLevelCondition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessContextManagerAccessLevelConditionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessContextManagerAccessLevelConditionArgs | AccessContextManagerAccessLevelConditionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessContextManagerAccessLevelConditionState | undefined;
            resourceInputs["accessLevel"] = state ? state.accessLevel : undefined;
            resourceInputs["devicePolicy"] = state ? state.devicePolicy : undefined;
            resourceInputs["ipSubnetworks"] = state ? state.ipSubnetworks : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["negate"] = state ? state.negate : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["requiredAccessLevels"] = state ? state.requiredAccessLevels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcNetworkSources"] = state ? state.vpcNetworkSources : undefined;
        } else {
            const args = argsOrState as AccessContextManagerAccessLevelConditionArgs | undefined;
            if ((!args || args.accessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessLevel'");
            }
            resourceInputs["accessLevel"] = args ? args.accessLevel : undefined;
            resourceInputs["devicePolicy"] = args ? args.devicePolicy : undefined;
            resourceInputs["ipSubnetworks"] = args ? args.ipSubnetworks : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["negate"] = args ? args.negate : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["requiredAccessLevels"] = args ? args.requiredAccessLevels : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcNetworkSources"] = args ? args.vpcNetworkSources : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessContextManagerAccessLevelCondition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AccessContextManagerAccessLevelCondition resources.
 */
export interface AccessContextManagerAccessLevelConditionState {
    /**
     * The name of the Access Level to add this condition to.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are
     * allowed.
     */
    devicePolicy?: pulumi.Input<inputs.AccessContextManagerAccessLevelConditionDevicePolicy>;
    /**
     * A list of CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the
     * specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered
     * malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly, for IPv6, "2001:db8::/32" is
     * accepted whereas "2001:db8::1/32" is not. The originating IP of a request must be in one of the listed subnets in order
     * for this Condition to be true. If empty, all IP addresses are allowed.
     */
    ipSubnetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An allowed list of members (users, service accounts). Using groups is not supported yet. The signed-in user originating
     * the request must be a part of one of the provided members. If not specified, a request may come from any user (logged
     * in/not logged in, not present in any groups, etc.). Formats: 'user:{emailid}', 'serviceAccount:{emailid}'
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be
     * false for the Condition overall to be satisfied. Defaults to false.
     */
    negate?: pulumi.Input<boolean>;
    /**
     * The request must originate from one of the provided countries/regions. Format: A valid ISO 3166-1 alpha-2 code.
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of other access levels defined in the same Policy, referenced by resource name. Referencing an AccessLevel which
     * does not exist is an error. All access levels listed must be granted for the Condition to be true. Format:
     * accessPolicies/{policy_id}/accessLevels/{short_name}
     */
    requiredAccessLevels?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.AccessContextManagerAccessLevelConditionTimeouts>;
    /**
     * The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together
     * with 'ip_subnetworks'.
     */
    vpcNetworkSources?: pulumi.Input<pulumi.Input<inputs.AccessContextManagerAccessLevelConditionVpcNetworkSource>[]>;
}

/**
 * The set of arguments for constructing a AccessContextManagerAccessLevelCondition resource.
 */
export interface AccessContextManagerAccessLevelConditionArgs {
    /**
     * The name of the Access Level to add this condition to.
     */
    accessLevel: pulumi.Input<string>;
    /**
     * Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are
     * allowed.
     */
    devicePolicy?: pulumi.Input<inputs.AccessContextManagerAccessLevelConditionDevicePolicy>;
    /**
     * A list of CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the
     * specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered
     * malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly, for IPv6, "2001:db8::/32" is
     * accepted whereas "2001:db8::1/32" is not. The originating IP of a request must be in one of the listed subnets in order
     * for this Condition to be true. If empty, all IP addresses are allowed.
     */
    ipSubnetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An allowed list of members (users, service accounts). Using groups is not supported yet. The signed-in user originating
     * the request must be a part of one of the provided members. If not specified, a request may come from any user (logged
     * in/not logged in, not present in any groups, etc.). Formats: 'user:{emailid}', 'serviceAccount:{emailid}'
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be
     * false for the Condition overall to be satisfied. Defaults to false.
     */
    negate?: pulumi.Input<boolean>;
    /**
     * The request must originate from one of the provided countries/regions. Format: A valid ISO 3166-1 alpha-2 code.
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of other access levels defined in the same Policy, referenced by resource name. Referencing an AccessLevel which
     * does not exist is an error. All access levels listed must be granted for the Condition to be true. Format:
     * accessPolicies/{policy_id}/accessLevels/{short_name}
     */
    requiredAccessLevels?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.AccessContextManagerAccessLevelConditionTimeouts>;
    /**
     * The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together
     * with 'ip_subnetworks'.
     */
    vpcNetworkSources?: pulumi.Input<pulumi.Input<inputs.AccessContextManagerAccessLevelConditionVpcNetworkSource>[]>;
}
