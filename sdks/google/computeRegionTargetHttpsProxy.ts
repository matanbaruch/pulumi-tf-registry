// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeRegionTargetHttpsProxy extends pulumi.CustomResource {
    /**
     * Get an existing ComputeRegionTargetHttpsProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeRegionTargetHttpsProxyState, opts?: pulumi.CustomResourceOptions): ComputeRegionTargetHttpsProxy {
        return new ComputeRegionTargetHttpsProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/computeRegionTargetHttpsProxy:ComputeRegionTargetHttpsProxy';

    /**
     * Returns true if the given object is an instance of ComputeRegionTargetHttpsProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeRegionTargetHttpsProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeRegionTargetHttpsProxy.__pulumiType;
    }

    /**
     * URLs to certificate manager certificate resources that are used to authenticate connections between users and the load
     * balancer. sslCertificates and certificateManagerCertificates can't be defined together. Accepted format is
     * '//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}' or just the
     * self_link 'projects/{project}/locations/{location}/certificates/{resourceName}'
     */
    public readonly certificateManagerCertificates!: pulumi.Output<string[] | undefined>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
     * means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
     * digit, except the last character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The unique identifier for the resource.
     */
    public /*out*/ readonly proxyId!: pulumi.Output<number>;
    /**
     * The Region in which the created target https proxy should reside. If it is not provided, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * A URL referring to a networksecurity.ServerTlsPolicy resource that describes how the proxy should authenticate inbound
     * traffic. serverTlsPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED. For details which ServerTlsPolicy
     * resources are accepted with INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED loadBalancingScheme consult
     * ServerTlsPolicy documentation. If left blank, communications are not encrypted. If you remove this field from your
     * configuration at the same time as deleting or recreating a referenced ServerTlsPolicy resource, you will receive a
     * resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy within the ServerTlsPolicy resource to avoid
     * this.
     */
    public readonly serverTlsPolicy!: pulumi.Output<string | undefined>;
    /**
     * URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least
     * one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. sslCertificates do not
     * apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
     */
    public readonly sslCertificates!: pulumi.Output<string[] | undefined>;
    /**
     * A reference to the Region SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the
     * TargetHttpsProxy resource will not have any SSL policy configured.
     */
    public readonly sslPolicy!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeRegionTargetHttpsProxyTimeouts | undefined>;
    /**
     * A reference to the RegionUrlMap resource that defines the mapping from URL to the RegionBackendService.
     */
    public readonly urlMap!: pulumi.Output<string>;

    /**
     * Create a ComputeRegionTargetHttpsProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeRegionTargetHttpsProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeRegionTargetHttpsProxyArgs | ComputeRegionTargetHttpsProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeRegionTargetHttpsProxyState | undefined;
            resourceInputs["certificateManagerCertificates"] = state ? state.certificateManagerCertificates : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["proxyId"] = state ? state.proxyId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["serverTlsPolicy"] = state ? state.serverTlsPolicy : undefined;
            resourceInputs["sslCertificates"] = state ? state.sslCertificates : undefined;
            resourceInputs["sslPolicy"] = state ? state.sslPolicy : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["urlMap"] = state ? state.urlMap : undefined;
        } else {
            const args = argsOrState as ComputeRegionTargetHttpsProxyArgs | undefined;
            if ((!args || args.urlMap === undefined) && !opts.urn) {
                throw new Error("Missing required property 'urlMap'");
            }
            resourceInputs["certificateManagerCertificates"] = args ? args.certificateManagerCertificates : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serverTlsPolicy"] = args ? args.serverTlsPolicy : undefined;
            resourceInputs["sslCertificates"] = args ? args.sslCertificates : undefined;
            resourceInputs["sslPolicy"] = args ? args.sslPolicy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["urlMap"] = args ? args.urlMap : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["proxyId"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeRegionTargetHttpsProxy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeRegionTargetHttpsProxy resources.
 */
export interface ComputeRegionTargetHttpsProxyState {
    /**
     * URLs to certificate manager certificate resources that are used to authenticate connections between users and the load
     * balancer. sslCertificates and certificateManagerCertificates can't be defined together. Accepted format is
     * '//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}' or just the
     * self_link 'projects/{project}/locations/{location}/certificates/{resourceName}'
     */
    certificateManagerCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
     * means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
     * digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The unique identifier for the resource.
     */
    proxyId?: pulumi.Input<number>;
    /**
     * The Region in which the created target https proxy should reside. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    /**
     * A URL referring to a networksecurity.ServerTlsPolicy resource that describes how the proxy should authenticate inbound
     * traffic. serverTlsPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED. For details which ServerTlsPolicy
     * resources are accepted with INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED loadBalancingScheme consult
     * ServerTlsPolicy documentation. If left blank, communications are not encrypted. If you remove this field from your
     * configuration at the same time as deleting or recreating a referenced ServerTlsPolicy resource, you will receive a
     * resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy within the ServerTlsPolicy resource to avoid
     * this.
     */
    serverTlsPolicy?: pulumi.Input<string>;
    /**
     * URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least
     * one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. sslCertificates do not
     * apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
     */
    sslCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to the Region SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the
     * TargetHttpsProxy resource will not have any SSL policy configured.
     */
    sslPolicy?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeRegionTargetHttpsProxyTimeouts>;
    /**
     * A reference to the RegionUrlMap resource that defines the mapping from URL to the RegionBackendService.
     */
    urlMap?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeRegionTargetHttpsProxy resource.
 */
export interface ComputeRegionTargetHttpsProxyArgs {
    /**
     * URLs to certificate manager certificate resources that are used to authenticate connections between users and the load
     * balancer. sslCertificates and certificateManagerCertificates can't be defined together. Accepted format is
     * '//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}' or just the
     * self_link 'projects/{project}/locations/{location}/certificates/{resourceName}'
     */
    certificateManagerCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
     * comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression 'a-z?' which
     * means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or
     * digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The Region in which the created target https proxy should reside. If it is not provided, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * A URL referring to a networksecurity.ServerTlsPolicy resource that describes how the proxy should authenticate inbound
     * traffic. serverTlsPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED. For details which ServerTlsPolicy
     * resources are accepted with INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED loadBalancingScheme consult
     * ServerTlsPolicy documentation. If left blank, communications are not encrypted. If you remove this field from your
     * configuration at the same time as deleting or recreating a referenced ServerTlsPolicy resource, you will receive a
     * resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy within the ServerTlsPolicy resource to avoid
     * this.
     */
    serverTlsPolicy?: pulumi.Input<string>;
    /**
     * URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least
     * one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. sslCertificates do not
     * apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
     */
    sslCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to the Region SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the
     * TargetHttpsProxy resource will not have any SSL policy configured.
     */
    sslPolicy?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeRegionTargetHttpsProxyTimeouts>;
    /**
     * A reference to the RegionUrlMap resource that defines the mapping from URL to the RegionBackendService.
     */
    urlMap: pulumi.Input<string>;
}
