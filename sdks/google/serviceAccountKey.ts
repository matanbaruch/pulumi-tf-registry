// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceAccountKey extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAccountKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceAccountKeyState, opts?: pulumi.CustomResourceOptions): ServiceAccountKey {
        return new ServiceAccountKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/serviceAccountKey:ServiceAccountKey';

    /**
     * Returns true if the given object is an instance of ServiceAccountKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceAccountKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAccountKey.__pulumiType;
    }

    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource.
     */
    public readonly keepers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The algorithm used to generate the key, used only on create. KEY_ALG_RSA_2048 is the default algorithm. Valid values
     * are: "KEY_ALG_RSA_1024", "KEY_ALG_RSA_2048".
     */
    public readonly keyAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * The name used for this key pair
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The private key in JSON format, base64 encoded. This is what you normally get as a file when creating service account
     * keys through the CLI or web console. This is only populated when creating a new key.
     */
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    public readonly privateKeyType!: pulumi.Output<string | undefined>;
    /**
     * The public key, base64 encoded
     */
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    /**
     * A field that allows clients to upload their own public key. If set, use this public key data to create a service account
     * key for given service account. Please note, the expected format for this field is a base64 encoded X509_PEM.
     */
    public readonly publicKeyData!: pulumi.Output<string | undefined>;
    public readonly publicKeyType!: pulumi.Output<string | undefined>;
    /**
     * The ID of the parent service account of the key. This can be a string in the format {ACCOUNT} or
     * projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}, where {ACCOUNT} is the email address or unique id of the service
     * account. If the {ACCOUNT} syntax is used, the project will be inferred from the provider's configuration.
     */
    public readonly serviceAccountId!: pulumi.Output<string>;
    /**
     * The key can be used after this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
     * "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly validAfter!: pulumi.Output<string>;
    /**
     * The key can be used before this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
     * "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly validBefore!: pulumi.Output<string>;

    /**
     * Create a ServiceAccountKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceAccountKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceAccountKeyArgs | ServiceAccountKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceAccountKeyState | undefined;
            resourceInputs["keepers"] = state ? state.keepers : undefined;
            resourceInputs["keyAlgorithm"] = state ? state.keyAlgorithm : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["privateKeyType"] = state ? state.privateKeyType : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["publicKeyData"] = state ? state.publicKeyData : undefined;
            resourceInputs["publicKeyType"] = state ? state.publicKeyType : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            resourceInputs["validAfter"] = state ? state.validAfter : undefined;
            resourceInputs["validBefore"] = state ? state.validBefore : undefined;
        } else {
            const args = argsOrState as ServiceAccountKeyArgs | undefined;
            if ((!args || args.serviceAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            resourceInputs["keepers"] = args ? args.keepers : undefined;
            resourceInputs["keyAlgorithm"] = args ? args.keyAlgorithm : undefined;
            resourceInputs["privateKeyType"] = args ? args.privateKeyType : undefined;
            resourceInputs["publicKeyData"] = args ? args.publicKeyData : undefined;
            resourceInputs["publicKeyType"] = args ? args.publicKeyType : undefined;
            resourceInputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
            resourceInputs["validAfter"] = undefined /*out*/;
            resourceInputs["validBefore"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceAccountKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceAccountKey resources.
 */
export interface ServiceAccountKeyState {
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The algorithm used to generate the key, used only on create. KEY_ALG_RSA_2048 is the default algorithm. Valid values
     * are: "KEY_ALG_RSA_1024", "KEY_ALG_RSA_2048".
     */
    keyAlgorithm?: pulumi.Input<string>;
    /**
     * The name used for this key pair
     */
    name?: pulumi.Input<string>;
    /**
     * The private key in JSON format, base64 encoded. This is what you normally get as a file when creating service account
     * keys through the CLI or web console. This is only populated when creating a new key.
     */
    privateKey?: pulumi.Input<string>;
    privateKeyType?: pulumi.Input<string>;
    /**
     * The public key, base64 encoded
     */
    publicKey?: pulumi.Input<string>;
    /**
     * A field that allows clients to upload their own public key. If set, use this public key data to create a service account
     * key for given service account. Please note, the expected format for this field is a base64 encoded X509_PEM.
     */
    publicKeyData?: pulumi.Input<string>;
    publicKeyType?: pulumi.Input<string>;
    /**
     * The ID of the parent service account of the key. This can be a string in the format {ACCOUNT} or
     * projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}, where {ACCOUNT} is the email address or unique id of the service
     * account. If the {ACCOUNT} syntax is used, the project will be inferred from the provider's configuration.
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * The key can be used after this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
     * "2014-10-02T15:01:23.045123456Z".
     */
    validAfter?: pulumi.Input<string>;
    /**
     * The key can be used before this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
     * "2014-10-02T15:01:23.045123456Z".
     */
    validBefore?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceAccountKey resource.
 */
export interface ServiceAccountKeyArgs {
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The algorithm used to generate the key, used only on create. KEY_ALG_RSA_2048 is the default algorithm. Valid values
     * are: "KEY_ALG_RSA_1024", "KEY_ALG_RSA_2048".
     */
    keyAlgorithm?: pulumi.Input<string>;
    privateKeyType?: pulumi.Input<string>;
    /**
     * A field that allows clients to upload their own public key. If set, use this public key data to create a service account
     * key for given service account. Please note, the expected format for this field is a base64 encoded X509_PEM.
     */
    publicKeyData?: pulumi.Input<string>;
    publicKeyType?: pulumi.Input<string>;
    /**
     * The ID of the parent service account of the key. This can be a string in the format {ACCOUNT} or
     * projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}, where {ACCOUNT} is the email address or unique id of the service
     * account. If the {ACCOUNT} syntax is used, the project will be inferred from the provider's configuration.
     */
    serviceAccountId: pulumi.Input<string>;
}
