// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DiscoveryEngineSchema extends pulumi.CustomResource {
    /**
     * Get an existing DiscoveryEngineSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiscoveryEngineSchemaState, opts?: pulumi.CustomResourceOptions): DiscoveryEngineSchema {
        return new DiscoveryEngineSchema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/discoveryEngineSchema:DiscoveryEngineSchema';

    /**
     * Returns true if the given object is an instance of DiscoveryEngineSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiscoveryEngineSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiscoveryEngineSchema.__pulumiType;
    }

    /**
     * The unique id of the data store.
     */
    public readonly dataStoreId!: pulumi.Output<string>;
    /**
     * The JSON representation of the schema.
     */
    public readonly jsonSchema!: pulumi.Output<string | undefined>;
    /**
     * The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The unique full resource name of the schema. Values are of the format
     * 'projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/schemas/{schema_id}'.
     * This field must be a UTF-8 encoded string with a length limit of 1024 characters.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The unique id of the schema.
     */
    public readonly schemaId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DiscoveryEngineSchemaTimeouts | undefined>;

    /**
     * Create a DiscoveryEngineSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiscoveryEngineSchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiscoveryEngineSchemaArgs | DiscoveryEngineSchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiscoveryEngineSchemaState | undefined;
            resourceInputs["dataStoreId"] = state ? state.dataStoreId : undefined;
            resourceInputs["jsonSchema"] = state ? state.jsonSchema : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DiscoveryEngineSchemaArgs | undefined;
            if ((!args || args.dataStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataStoreId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            resourceInputs["dataStoreId"] = args ? args.dataStoreId : undefined;
            resourceInputs["jsonSchema"] = args ? args.jsonSchema : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiscoveryEngineSchema.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DiscoveryEngineSchema resources.
 */
export interface DiscoveryEngineSchemaState {
    /**
     * The unique id of the data store.
     */
    dataStoreId?: pulumi.Input<string>;
    /**
     * The JSON representation of the schema.
     */
    jsonSchema?: pulumi.Input<string>;
    /**
     * The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
     */
    location?: pulumi.Input<string>;
    /**
     * The unique full resource name of the schema. Values are of the format
     * 'projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/schemas/{schema_id}'.
     * This field must be a UTF-8 encoded string with a length limit of 1024 characters.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The unique id of the schema.
     */
    schemaId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DiscoveryEngineSchemaTimeouts>;
}

/**
 * The set of arguments for constructing a DiscoveryEngineSchema resource.
 */
export interface DiscoveryEngineSchemaArgs {
    /**
     * The unique id of the data store.
     */
    dataStoreId: pulumi.Input<string>;
    /**
     * The JSON representation of the schema.
     */
    jsonSchema?: pulumi.Input<string>;
    /**
     * The geographic location where the data store should reside. The value can only be one of "global", "us" and "eu".
     */
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The unique id of the schema.
     */
    schemaId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DiscoveryEngineSchemaTimeouts>;
}
