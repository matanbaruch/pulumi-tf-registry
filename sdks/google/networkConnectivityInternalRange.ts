// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkConnectivityInternalRange extends pulumi.CustomResource {
    /**
     * Get an existing NetworkConnectivityInternalRange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkConnectivityInternalRangeState, opts?: pulumi.CustomResourceOptions): NetworkConnectivityInternalRange {
        return new NetworkConnectivityInternalRange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/networkConnectivityInternalRange:NetworkConnectivityInternalRange';

    /**
     * Returns true if the given object is an instance of NetworkConnectivityInternalRange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkConnectivityInternalRange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkConnectivityInternalRange.__pulumiType;
    }

    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The IP range that this internal range defines.
     */
    public readonly ipCidrRange!: pulumi.Output<string>;
    /**
     * User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the policy based route.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Fully-qualified URL of the network that this route applies to, for example:
     * projects/my-project/global/networks/my-network.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * Optional. Types of resources that are allowed to overlap with the current internal range. Possible values:
     * ["OVERLAP_ROUTE_RANGE", "OVERLAP_EXISTING_SUBNET_RANGE"]
     */
    public readonly overlaps!: pulumi.Output<string[] | undefined>;
    /**
     * The type of peering set for this internal range. Possible values: ["FOR_SELF", "FOR_PEER", "NOT_SHARED"]
     */
    public readonly peering!: pulumi.Output<string>;
    /**
     * An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the
     * given size. If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be
     * used during updates to change the range size.
     */
    public readonly prefixLength!: pulumi.Output<number | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Optional. Can be set to narrow down or pick a different address space while searching for a free range. If not set,
     * defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like
     * "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
     */
    public readonly targetCidrRanges!: pulumi.Output<string[] | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkConnectivityInternalRangeTimeouts | undefined>;
    /**
     * The type of usage set for this InternalRange. Possible values: ["FOR_VPC", "EXTERNAL_TO_VPC"]
     */
    public readonly usage!: pulumi.Output<string>;
    /**
     * Output only. The list of resources that refer to this internal range. Resources that use the internal range for their
     * range allocation are referred to as users of the range. Other resources mark themselves as users while doing so by
     * creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal
     * range referred to. Can be empty.
     */
    public /*out*/ readonly users!: pulumi.Output<string[]>;

    /**
     * Create a NetworkConnectivityInternalRange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkConnectivityInternalRangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkConnectivityInternalRangeArgs | NetworkConnectivityInternalRangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkConnectivityInternalRangeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["ipCidrRange"] = state ? state.ipCidrRange : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["overlaps"] = state ? state.overlaps : undefined;
            resourceInputs["peering"] = state ? state.peering : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["targetCidrRanges"] = state ? state.targetCidrRanges : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usage"] = state ? state.usage : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as NetworkConnectivityInternalRangeArgs | undefined;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.peering === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peering'");
            }
            if ((!args || args.usage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usage'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipCidrRange"] = args ? args.ipCidrRange : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["overlaps"] = args ? args.overlaps : undefined;
            resourceInputs["peering"] = args ? args.peering : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["targetCidrRanges"] = args ? args.targetCidrRanges : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["usage"] = args ? args.usage : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["users"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkConnectivityInternalRange.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkConnectivityInternalRange resources.
 */
export interface NetworkConnectivityInternalRangeState {
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The IP range that this internal range defines.
     */
    ipCidrRange?: pulumi.Input<string>;
    /**
     * User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the policy based route.
     */
    name?: pulumi.Input<string>;
    /**
     * Fully-qualified URL of the network that this route applies to, for example:
     * projects/my-project/global/networks/my-network.
     */
    network?: pulumi.Input<string>;
    /**
     * Optional. Types of resources that are allowed to overlap with the current internal range. Possible values:
     * ["OVERLAP_ROUTE_RANGE", "OVERLAP_EXISTING_SUBNET_RANGE"]
     */
    overlaps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of peering set for this internal range. Possible values: ["FOR_SELF", "FOR_PEER", "NOT_SHARED"]
     */
    peering?: pulumi.Input<string>;
    /**
     * An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the
     * given size. If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be
     * used during updates to change the range size.
     */
    prefixLength?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * Optional. Can be set to narrow down or pick a different address space while searching for a free range. If not set,
     * defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like
     * "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
     */
    targetCidrRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NetworkConnectivityInternalRangeTimeouts>;
    /**
     * The type of usage set for this InternalRange. Possible values: ["FOR_VPC", "EXTERNAL_TO_VPC"]
     */
    usage?: pulumi.Input<string>;
    /**
     * Output only. The list of resources that refer to this internal range. Resources that use the internal range for their
     * range allocation are referred to as users of the range. Other resources mark themselves as users while doing so by
     * creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal
     * range referred to. Can be empty.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NetworkConnectivityInternalRange resource.
 */
export interface NetworkConnectivityInternalRangeArgs {
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The IP range that this internal range defines.
     */
    ipCidrRange?: pulumi.Input<string>;
    /**
     * User-defined labels. **Note**: This field is non-authoritative, and will only manage the labels present in your
     * configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the policy based route.
     */
    name?: pulumi.Input<string>;
    /**
     * Fully-qualified URL of the network that this route applies to, for example:
     * projects/my-project/global/networks/my-network.
     */
    network: pulumi.Input<string>;
    /**
     * Optional. Types of resources that are allowed to overlap with the current internal range. Possible values:
     * ["OVERLAP_ROUTE_RANGE", "OVERLAP_EXISTING_SUBNET_RANGE"]
     */
    overlaps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of peering set for this internal range. Possible values: ["FOR_SELF", "FOR_PEER", "NOT_SHARED"]
     */
    peering: pulumi.Input<string>;
    /**
     * An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the
     * given size. If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be
     * used during updates to change the range size.
     */
    prefixLength?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * Optional. Can be set to narrow down or pick a different address space while searching for a free range. If not set,
     * defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like
     * "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
     */
    targetCidrRanges?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.NetworkConnectivityInternalRangeTimeouts>;
    /**
     * The type of usage set for this InternalRange. Possible values: ["FOR_VPC", "EXTERNAL_TO_VPC"]
     */
    usage: pulumi.Input<string>;
}
