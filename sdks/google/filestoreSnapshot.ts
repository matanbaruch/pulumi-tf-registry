// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FilestoreSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing FilestoreSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FilestoreSnapshotState, opts?: pulumi.CustomResourceOptions): FilestoreSnapshot {
        return new FilestoreSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/filestoreSnapshot:FilestoreSnapshot';

    /**
     * Returns true if the given object is an instance of FilestoreSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FilestoreSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FilestoreSnapshot.__pulumiType;
    }

    /**
     * The time when the snapshot was created in RFC3339 text format.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A description of the snapshot with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The amount of bytes needed to allocate a full copy of the snapshot content.
     */
    public /*out*/ readonly filesystemUsedBytes!: pulumi.Output<string>;
    /**
     * The resource name of the filestore instance.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the snapshot. The name must be unique within the specified instance. The name must be 1-63
     * characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
     * expression 'a-z?' which means the first character must be a lowercase letter, and all following characters must be a
     * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The snapshot state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.FilestoreSnapshotTimeouts | undefined>;

    /**
     * Create a FilestoreSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FilestoreSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FilestoreSnapshotArgs | FilestoreSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FilestoreSnapshotState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["filesystemUsedBytes"] = state ? state.filesystemUsedBytes : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FilestoreSnapshotArgs | undefined;
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["filesystemUsedBytes"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FilestoreSnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FilestoreSnapshot resources.
 */
export interface FilestoreSnapshotState {
    /**
     * The time when the snapshot was created in RFC3339 text format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A description of the snapshot with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    description?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The amount of bytes needed to allocate a full copy of the snapshot content.
     */
    filesystemUsedBytes?: pulumi.Input<string>;
    /**
     * The resource name of the filestore instance.
     */
    instance?: pulumi.Input<string>;
    /**
     * Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the snapshot. The name must be unique within the specified instance. The name must be 1-63
     * characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
     * expression 'a-z?' which means the first character must be a lowercase letter, and all following characters must be a
     * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The snapshot state.
     */
    state?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.FilestoreSnapshotTimeouts>;
}

/**
 * The set of arguments for constructing a FilestoreSnapshot resource.
 */
export interface FilestoreSnapshotArgs {
    /**
     * A description of the snapshot with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    description?: pulumi.Input<string>;
    /**
     * The resource name of the filestore instance.
     */
    instance: pulumi.Input<string>;
    /**
     * Resource labels to represent user-provided metadata. **Note**: This field is non-authoritative, and will only manage the
     * labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
     * resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
     */
    location: pulumi.Input<string>;
    /**
     * The resource name of the snapshot. The name must be unique within the specified instance. The name must be 1-63
     * characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
     * expression 'a-z?' which means the first character must be a lowercase letter, and all following characters must be a
     * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FilestoreSnapshotTimeouts>;
}
