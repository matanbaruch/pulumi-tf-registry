// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KmsKeyRingImportJob extends pulumi.CustomResource {
    /**
     * Get an existing KmsKeyRingImportJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsKeyRingImportJobState, opts?: pulumi.CustomResourceOptions): KmsKeyRingImportJob {
        return new KmsKeyRingImportJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/kmsKeyRingImportJob:KmsKeyRingImportJob';

    /**
     * Returns true if the given object is an instance of KmsKeyRingImportJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsKeyRingImportJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsKeyRingImportJob.__pulumiType;
    }

    /**
     * Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this
     * statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen
     * ImportMethod is one with a protection level of HSM.
     */
    public /*out*/ readonly attestations!: pulumi.Output<outputs.KmsKeyRingImportJobAttestation[]>;
    /**
     * The time at which this resource is scheduled for expiration and can no longer be used. This is in RFC3339 text format.
     */
    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    /**
     * It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
     */
    public readonly importJobId!: pulumi.Output<string>;
    /**
     * The wrapping method to be used for incoming key material. Possible values: ["RSA_OAEP_3072_SHA1_AES_256",
     * "RSA_OAEP_4096_SHA1_AES_256"]
     */
    public readonly importMethod!: pulumi.Output<string>;
    /**
     * The KeyRing that this import job belongs to. Format:
     * ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.
     */
    public readonly keyRing!: pulumi.Output<string>;
    /**
     * The resource name for this ImportJob in the format projects/*&#47;locations/*&#47;keyRings/*&#47;importJobs/*.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The protection level of the ImportJob. This must match the protectionLevel of the versionTemplate on the CryptoKey you
     * attempt to import into. Possible values: ["SOFTWARE", "HSM", "EXTERNAL"]
     */
    public readonly protectionLevel!: pulumi.Output<string>;
    /**
     * The public key with which to wrap key material prior to import. Only returned if state is 'ACTIVE'.
     */
    public /*out*/ readonly publicKeys!: pulumi.Output<outputs.KmsKeyRingImportJobPublicKey[]>;
    /**
     * The current state of the ImportJob, indicating if it can be used.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KmsKeyRingImportJobTimeouts | undefined>;

    /**
     * Create a KmsKeyRingImportJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsKeyRingImportJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsKeyRingImportJobArgs | KmsKeyRingImportJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsKeyRingImportJobState | undefined;
            resourceInputs["attestations"] = state ? state.attestations : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["importJobId"] = state ? state.importJobId : undefined;
            resourceInputs["importMethod"] = state ? state.importMethod : undefined;
            resourceInputs["keyRing"] = state ? state.keyRing : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protectionLevel"] = state ? state.protectionLevel : undefined;
            resourceInputs["publicKeys"] = state ? state.publicKeys : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as KmsKeyRingImportJobArgs | undefined;
            if ((!args || args.importJobId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importJobId'");
            }
            if ((!args || args.importMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importMethod'");
            }
            if ((!args || args.keyRing === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyRing'");
            }
            if ((!args || args.protectionLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protectionLevel'");
            }
            resourceInputs["importJobId"] = args ? args.importJobId : undefined;
            resourceInputs["importMethod"] = args ? args.importMethod : undefined;
            resourceInputs["keyRing"] = args ? args.keyRing : undefined;
            resourceInputs["protectionLevel"] = args ? args.protectionLevel : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["attestations"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["publicKeys"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmsKeyRingImportJob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsKeyRingImportJob resources.
 */
export interface KmsKeyRingImportJobState {
    /**
     * Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this
     * statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen
     * ImportMethod is one with a protection level of HSM.
     */
    attestations?: pulumi.Input<pulumi.Input<inputs.KmsKeyRingImportJobAttestation>[]>;
    /**
     * The time at which this resource is scheduled for expiration and can no longer be used. This is in RFC3339 text format.
     */
    expireTime?: pulumi.Input<string>;
    /**
     * It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
     */
    importJobId?: pulumi.Input<string>;
    /**
     * The wrapping method to be used for incoming key material. Possible values: ["RSA_OAEP_3072_SHA1_AES_256",
     * "RSA_OAEP_4096_SHA1_AES_256"]
     */
    importMethod?: pulumi.Input<string>;
    /**
     * The KeyRing that this import job belongs to. Format:
     * ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.
     */
    keyRing?: pulumi.Input<string>;
    /**
     * The resource name for this ImportJob in the format projects/*&#47;locations/*&#47;keyRings/*&#47;importJobs/*.
     */
    name?: pulumi.Input<string>;
    /**
     * The protection level of the ImportJob. This must match the protectionLevel of the versionTemplate on the CryptoKey you
     * attempt to import into. Possible values: ["SOFTWARE", "HSM", "EXTERNAL"]
     */
    protectionLevel?: pulumi.Input<string>;
    /**
     * The public key with which to wrap key material prior to import. Only returned if state is 'ACTIVE'.
     */
    publicKeys?: pulumi.Input<pulumi.Input<inputs.KmsKeyRingImportJobPublicKey>[]>;
    /**
     * The current state of the ImportJob, indicating if it can be used.
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsKeyRingImportJobTimeouts>;
}

/**
 * The set of arguments for constructing a KmsKeyRingImportJob resource.
 */
export interface KmsKeyRingImportJobArgs {
    /**
     * It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
     */
    importJobId: pulumi.Input<string>;
    /**
     * The wrapping method to be used for incoming key material. Possible values: ["RSA_OAEP_3072_SHA1_AES_256",
     * "RSA_OAEP_4096_SHA1_AES_256"]
     */
    importMethod: pulumi.Input<string>;
    /**
     * The KeyRing that this import job belongs to. Format:
     * ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.
     */
    keyRing: pulumi.Input<string>;
    /**
     * The protection level of the ImportJob. This must match the protectionLevel of the versionTemplate on the CryptoKey you
     * attempt to import into. Possible values: ["SOFTWARE", "HSM", "EXTERNAL"]
     */
    protectionLevel: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsKeyRingImportJobTimeouts>;
}
