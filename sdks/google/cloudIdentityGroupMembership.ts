// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudIdentityGroupMembership extends pulumi.CustomResource {
    /**
     * Get an existing CloudIdentityGroupMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudIdentityGroupMembershipState, opts?: pulumi.CustomResourceOptions): CloudIdentityGroupMembership {
        return new CloudIdentityGroupMembership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/cloudIdentityGroupMembership:CloudIdentityGroupMembership';

    /**
     * Returns true if the given object is an instance of CloudIdentityGroupMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudIdentityGroupMembership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudIdentityGroupMembership.__pulumiType;
    }

    /**
     * The time when the Membership was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The name of the Group to create this membership in.
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * The resource name of the Membership, of the form groups/{group_id}/memberships/{membership_id}.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * EntityKey of the member.
     */
    public readonly preferredMemberKey!: pulumi.Output<outputs.CloudIdentityGroupMembershipPreferredMemberKey | undefined>;
    /**
     * The MembershipRoles that apply to the Membership. Must not contain duplicate MembershipRoles with the same name.
     */
    public readonly roles!: pulumi.Output<outputs.CloudIdentityGroupMembershipRole[]>;
    public readonly timeouts!: pulumi.Output<outputs.CloudIdentityGroupMembershipTimeouts | undefined>;
    /**
     * The type of the membership.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The time when the Membership was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CloudIdentityGroupMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudIdentityGroupMembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudIdentityGroupMembershipArgs | CloudIdentityGroupMembershipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudIdentityGroupMembershipState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["preferredMemberKey"] = state ? state.preferredMemberKey : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as CloudIdentityGroupMembershipArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["preferredMemberKey"] = args ? args.preferredMemberKey : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudIdentityGroupMembership.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudIdentityGroupMembership resources.
 */
export interface CloudIdentityGroupMembershipState {
    /**
     * The time when the Membership was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The name of the Group to create this membership in.
     */
    group?: pulumi.Input<string>;
    /**
     * The resource name of the Membership, of the form groups/{group_id}/memberships/{membership_id}.
     */
    name?: pulumi.Input<string>;
    /**
     * EntityKey of the member.
     */
    preferredMemberKey?: pulumi.Input<inputs.CloudIdentityGroupMembershipPreferredMemberKey>;
    /**
     * The MembershipRoles that apply to the Membership. Must not contain duplicate MembershipRoles with the same name.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.CloudIdentityGroupMembershipRole>[]>;
    timeouts?: pulumi.Input<inputs.CloudIdentityGroupMembershipTimeouts>;
    /**
     * The type of the membership.
     */
    type?: pulumi.Input<string>;
    /**
     * The time when the Membership was last updated.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudIdentityGroupMembership resource.
 */
export interface CloudIdentityGroupMembershipArgs {
    /**
     * The name of the Group to create this membership in.
     */
    group: pulumi.Input<string>;
    /**
     * EntityKey of the member.
     */
    preferredMemberKey?: pulumi.Input<inputs.CloudIdentityGroupMembershipPreferredMemberKey>;
    /**
     * The MembershipRoles that apply to the Membership. Must not contain duplicate MembershipRoles with the same name.
     */
    roles: pulumi.Input<pulumi.Input<inputs.CloudIdentityGroupMembershipRole>[]>;
    timeouts?: pulumi.Input<inputs.CloudIdentityGroupMembershipTimeouts>;
}
