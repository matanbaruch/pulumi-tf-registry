// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KmsEkmConnection extends pulumi.CustomResource {
    /**
     * Get an existing KmsEkmConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsEkmConnectionState, opts?: pulumi.CustomResourceOptions): KmsEkmConnection {
        return new KmsEkmConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/kmsEkmConnection:KmsEkmConnection';

    /**
     * Returns true if the given object is an instance of KmsEkmConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsEkmConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsEkmConnection.__pulumiType;
    }

    /**
     * Output only. The time at which the EkmConnection was created. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
     * resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if
     * KeyManagementMode is CLOUD_KMS.
     */
    public readonly cryptoSpacePath!: pulumi.Output<string>;
    /**
     * Optional. Etag of the currently stored EkmConnection.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL Default
     * value: "MANUAL" Possible values: ["MANUAL", "CLOUD_KMS"]
     */
    public readonly keyManagementMode!: pulumi.Output<string | undefined>;
    /**
     * The location for the EkmConnection. A full list of valid locations can be found by running 'gcloud kms locations list'.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name for the EkmConnection.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently,
     * only a single ServiceResolver is supported
     */
    public readonly serviceResolvers!: pulumi.Output<outputs.KmsEkmConnectionServiceResolver[]>;
    public readonly timeouts!: pulumi.Output<outputs.KmsEkmConnectionTimeouts | undefined>;

    /**
     * Create a KmsEkmConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsEkmConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsEkmConnectionArgs | KmsEkmConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsEkmConnectionState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["cryptoSpacePath"] = state ? state.cryptoSpacePath : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["keyManagementMode"] = state ? state.keyManagementMode : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceResolvers"] = state ? state.serviceResolvers : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as KmsEkmConnectionArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.serviceResolvers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceResolvers'");
            }
            resourceInputs["cryptoSpacePath"] = args ? args.cryptoSpacePath : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["keyManagementMode"] = args ? args.keyManagementMode : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceResolvers"] = args ? args.serviceResolvers : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmsEkmConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsEkmConnection resources.
 */
export interface KmsEkmConnectionState {
    /**
     * Output only. The time at which the EkmConnection was created. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
     * resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if
     * KeyManagementMode is CLOUD_KMS.
     */
    cryptoSpacePath?: pulumi.Input<string>;
    /**
     * Optional. Etag of the currently stored EkmConnection.
     */
    etag?: pulumi.Input<string>;
    /**
     * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL Default
     * value: "MANUAL" Possible values: ["MANUAL", "CLOUD_KMS"]
     */
    keyManagementMode?: pulumi.Input<string>;
    /**
     * The location for the EkmConnection. A full list of valid locations can be found by running 'gcloud kms locations list'.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name for the EkmConnection.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently,
     * only a single ServiceResolver is supported
     */
    serviceResolvers?: pulumi.Input<pulumi.Input<inputs.KmsEkmConnectionServiceResolver>[]>;
    timeouts?: pulumi.Input<inputs.KmsEkmConnectionTimeouts>;
}

/**
 * The set of arguments for constructing a KmsEkmConnection resource.
 */
export interface KmsEkmConnectionArgs {
    /**
     * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if
     * KeyManagementMode is CLOUD_KMS.
     */
    cryptoSpacePath?: pulumi.Input<string>;
    /**
     * Optional. Etag of the currently stored EkmConnection.
     */
    etag?: pulumi.Input<string>;
    /**
     * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL Default
     * value: "MANUAL" Possible values: ["MANUAL", "CLOUD_KMS"]
     */
    keyManagementMode?: pulumi.Input<string>;
    /**
     * The location for the EkmConnection. A full list of valid locations can be found by running 'gcloud kms locations list'.
     */
    location: pulumi.Input<string>;
    /**
     * The resource name for the EkmConnection.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently,
     * only a single ServiceResolver is supported
     */
    serviceResolvers: pulumi.Input<pulumi.Input<inputs.KmsEkmConnectionServiceResolver>[]>;
    timeouts?: pulumi.Input<inputs.KmsEkmConnectionTimeouts>;
}
