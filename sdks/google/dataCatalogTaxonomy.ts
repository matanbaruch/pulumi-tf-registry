// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataCatalogTaxonomy extends pulumi.CustomResource {
    /**
     * Get an existing DataCatalogTaxonomy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataCatalogTaxonomyState, opts?: pulumi.CustomResourceOptions): DataCatalogTaxonomy {
        return new DataCatalogTaxonomy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/dataCatalogTaxonomy:DataCatalogTaxonomy';

    /**
     * Returns true if the given object is an instance of DataCatalogTaxonomy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataCatalogTaxonomy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataCatalogTaxonomy.__pulumiType;
    }

    /**
     * A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list. Possible values:
     * ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]
     */
    public readonly activatedPolicyTypes!: pulumi.Output<string[] | undefined>;
    /**
     * Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page
     * breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * User defined name of this taxonomy. The taxonomy display name must be unique within an organization. It must: contain
     * only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes
     * long when encoded in UTF-8.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Resource name of this taxonomy, whose format is: "projects/{project}/locations/{region}/taxonomies/{taxonomy}".
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Taxonomy location region.
     */
    public readonly region!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DataCatalogTaxonomyTimeouts | undefined>;

    /**
     * Create a DataCatalogTaxonomy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataCatalogTaxonomyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataCatalogTaxonomyArgs | DataCatalogTaxonomyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataCatalogTaxonomyState | undefined;
            resourceInputs["activatedPolicyTypes"] = state ? state.activatedPolicyTypes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DataCatalogTaxonomyArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["activatedPolicyTypes"] = args ? args.activatedPolicyTypes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataCatalogTaxonomy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataCatalogTaxonomy resources.
 */
export interface DataCatalogTaxonomyState {
    /**
     * A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list. Possible values:
     * ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]
     */
    activatedPolicyTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page
     * breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.
     */
    description?: pulumi.Input<string>;
    /**
     * User defined name of this taxonomy. The taxonomy display name must be unique within an organization. It must: contain
     * only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes
     * long when encoded in UTF-8.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Resource name of this taxonomy, whose format is: "projects/{project}/locations/{region}/taxonomies/{taxonomy}".
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Taxonomy location region.
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataCatalogTaxonomyTimeouts>;
}

/**
 * The set of arguments for constructing a DataCatalogTaxonomy resource.
 */
export interface DataCatalogTaxonomyArgs {
    /**
     * A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list. Possible values:
     * ["POLICY_TYPE_UNSPECIFIED", "FINE_GRAINED_ACCESS_CONTROL"]
     */
    activatedPolicyTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page
     * breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.
     */
    description?: pulumi.Input<string>;
    /**
     * User defined name of this taxonomy. The taxonomy display name must be unique within an organization. It must: contain
     * only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes
     * long when encoded in UTF-8.
     */
    displayName: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Taxonomy location region.
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataCatalogTaxonomyTimeouts>;
}
