// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeResourcePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ComputeResourcePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeResourcePolicyState, opts?: pulumi.CustomResourceOptions): ComputeResourcePolicy {
        return new ComputeResourcePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/computeResourcePolicy:ComputeResourcePolicy';

    /**
     * Returns true if the given object is an instance of ComputeResourcePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeResourcePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeResourcePolicy.__pulumiType;
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Replication consistency group for asynchronous disk replication.
     */
    public readonly diskConsistencyGroupPolicy!: pulumi.Output<outputs.ComputeResourcePolicyDiskConsistencyGroupPolicy | undefined>;
    /**
     * Resource policy for instances used for placement configuration.
     */
    public readonly groupPlacementPolicy!: pulumi.Output<outputs.ComputeResourcePolicyGroupPlacementPolicy | undefined>;
    /**
     * Resource policy for scheduling instance operations.
     */
    public readonly instanceSchedulePolicy!: pulumi.Output<outputs.ComputeResourcePolicyInstanceSchedulePolicy | undefined>;
    /**
     * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63
     * characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
     * expression 'a-z'? which means the first character must be a lowercase letter, and all following characters must be a
     * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Region where resource policy resides.
     */
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Policy for creating snapshots of persistent disks.
     */
    public readonly snapshotSchedulePolicy!: pulumi.Output<outputs.ComputeResourcePolicySnapshotSchedulePolicy | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeResourcePolicyTimeouts | undefined>;

    /**
     * Create a ComputeResourcePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ComputeResourcePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeResourcePolicyArgs | ComputeResourcePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeResourcePolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskConsistencyGroupPolicy"] = state ? state.diskConsistencyGroupPolicy : undefined;
            resourceInputs["groupPlacementPolicy"] = state ? state.groupPlacementPolicy : undefined;
            resourceInputs["instanceSchedulePolicy"] = state ? state.instanceSchedulePolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["snapshotSchedulePolicy"] = state ? state.snapshotSchedulePolicy : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ComputeResourcePolicyArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskConsistencyGroupPolicy"] = args ? args.diskConsistencyGroupPolicy : undefined;
            resourceInputs["groupPlacementPolicy"] = args ? args.groupPlacementPolicy : undefined;
            resourceInputs["instanceSchedulePolicy"] = args ? args.instanceSchedulePolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["snapshotSchedulePolicy"] = args ? args.snapshotSchedulePolicy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeResourcePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeResourcePolicy resources.
 */
export interface ComputeResourcePolicyState {
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Replication consistency group for asynchronous disk replication.
     */
    diskConsistencyGroupPolicy?: pulumi.Input<inputs.ComputeResourcePolicyDiskConsistencyGroupPolicy>;
    /**
     * Resource policy for instances used for placement configuration.
     */
    groupPlacementPolicy?: pulumi.Input<inputs.ComputeResourcePolicyGroupPlacementPolicy>;
    /**
     * Resource policy for scheduling instance operations.
     */
    instanceSchedulePolicy?: pulumi.Input<inputs.ComputeResourcePolicyInstanceSchedulePolicy>;
    /**
     * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63
     * characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
     * expression 'a-z'? which means the first character must be a lowercase letter, and all following characters must be a
     * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Region where resource policy resides.
     */
    region?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    /**
     * Policy for creating snapshots of persistent disks.
     */
    snapshotSchedulePolicy?: pulumi.Input<inputs.ComputeResourcePolicySnapshotSchedulePolicy>;
    timeouts?: pulumi.Input<inputs.ComputeResourcePolicyTimeouts>;
}

/**
 * The set of arguments for constructing a ComputeResourcePolicy resource.
 */
export interface ComputeResourcePolicyArgs {
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Replication consistency group for asynchronous disk replication.
     */
    diskConsistencyGroupPolicy?: pulumi.Input<inputs.ComputeResourcePolicyDiskConsistencyGroupPolicy>;
    /**
     * Resource policy for instances used for placement configuration.
     */
    groupPlacementPolicy?: pulumi.Input<inputs.ComputeResourcePolicyGroupPlacementPolicy>;
    /**
     * Resource policy for scheduling instance operations.
     */
    instanceSchedulePolicy?: pulumi.Input<inputs.ComputeResourcePolicyInstanceSchedulePolicy>;
    /**
     * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63
     * characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
     * expression 'a-z'? which means the first character must be a lowercase letter, and all following characters must be a
     * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Region where resource policy resides.
     */
    region?: pulumi.Input<string>;
    /**
     * Policy for creating snapshots of persistent disks.
     */
    snapshotSchedulePolicy?: pulumi.Input<inputs.ComputeResourcePolicySnapshotSchedulePolicy>;
    timeouts?: pulumi.Input<inputs.ComputeResourcePolicyTimeouts>;
}
