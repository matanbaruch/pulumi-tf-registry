// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BillingBudget extends pulumi.CustomResource {
    /**
     * Get an existing BillingBudget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BillingBudgetState, opts?: pulumi.CustomResourceOptions): BillingBudget {
        return new BillingBudget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/billingBudget:BillingBudget';

    /**
     * Returns true if the given object is an instance of BillingBudget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BillingBudget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BillingBudget.__pulumiType;
    }

    /**
     * Defines notifications that are sent on every update to the billing account's spend, regardless of the thresholds defined
     * using threshold rules.
     */
    public readonly allUpdatesRule!: pulumi.Output<outputs.BillingBudgetAllUpdatesRule | undefined>;
    /**
     * The budgeted amount for each usage period.
     */
    public readonly amount!: pulumi.Output<outputs.BillingBudgetAmount>;
    /**
     * ID of the billing account to set a budget on.
     */
    public readonly billingAccount!: pulumi.Output<string>;
    /**
     * Filters that define which resources are used to compute the actual spend against the budget.
     */
    public readonly budgetFilter!: pulumi.Output<outputs.BillingBudgetBudgetFilter | undefined>;
    /**
     * User data for display name in UI. Must be <= 60 chars.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
     * billingAccounts/{billingAccountId}/budgets/{budgetId}.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ownership scope of the budget. The ownership scope and users' IAM permissions determine who has full access to the
     * budget's data. Possible values: ["OWNERSHIP_SCOPE_UNSPECIFIED", "ALL_USERS", "BILLING_ACCOUNT"]
     */
    public readonly ownershipScope!: pulumi.Output<string | undefined>;
    /**
     * Rules that trigger alerts (notifications of thresholds being crossed) when spend exceeds the specified percentages of
     * the budget.
     */
    public readonly thresholdRules!: pulumi.Output<outputs.BillingBudgetThresholdRule[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BillingBudgetTimeouts | undefined>;

    /**
     * Create a BillingBudget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BillingBudgetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BillingBudgetArgs | BillingBudgetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BillingBudgetState | undefined;
            resourceInputs["allUpdatesRule"] = state ? state.allUpdatesRule : undefined;
            resourceInputs["amount"] = state ? state.amount : undefined;
            resourceInputs["billingAccount"] = state ? state.billingAccount : undefined;
            resourceInputs["budgetFilter"] = state ? state.budgetFilter : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownershipScope"] = state ? state.ownershipScope : undefined;
            resourceInputs["thresholdRules"] = state ? state.thresholdRules : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BillingBudgetArgs | undefined;
            if ((!args || args.amount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'amount'");
            }
            if ((!args || args.billingAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'billingAccount'");
            }
            resourceInputs["allUpdatesRule"] = args ? args.allUpdatesRule : undefined;
            resourceInputs["amount"] = args ? args.amount : undefined;
            resourceInputs["billingAccount"] = args ? args.billingAccount : undefined;
            resourceInputs["budgetFilter"] = args ? args.budgetFilter : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["ownershipScope"] = args ? args.ownershipScope : undefined;
            resourceInputs["thresholdRules"] = args ? args.thresholdRules : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BillingBudget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BillingBudget resources.
 */
export interface BillingBudgetState {
    /**
     * Defines notifications that are sent on every update to the billing account's spend, regardless of the thresholds defined
     * using threshold rules.
     */
    allUpdatesRule?: pulumi.Input<inputs.BillingBudgetAllUpdatesRule>;
    /**
     * The budgeted amount for each usage period.
     */
    amount?: pulumi.Input<inputs.BillingBudgetAmount>;
    /**
     * ID of the billing account to set a budget on.
     */
    billingAccount?: pulumi.Input<string>;
    /**
     * Filters that define which resources are used to compute the actual spend against the budget.
     */
    budgetFilter?: pulumi.Input<inputs.BillingBudgetBudgetFilter>;
    /**
     * User data for display name in UI. Must be <= 60 chars.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
     * billingAccounts/{billingAccountId}/budgets/{budgetId}.
     */
    name?: pulumi.Input<string>;
    /**
     * The ownership scope of the budget. The ownership scope and users' IAM permissions determine who has full access to the
     * budget's data. Possible values: ["OWNERSHIP_SCOPE_UNSPECIFIED", "ALL_USERS", "BILLING_ACCOUNT"]
     */
    ownershipScope?: pulumi.Input<string>;
    /**
     * Rules that trigger alerts (notifications of thresholds being crossed) when spend exceeds the specified percentages of
     * the budget.
     */
    thresholdRules?: pulumi.Input<pulumi.Input<inputs.BillingBudgetThresholdRule>[]>;
    timeouts?: pulumi.Input<inputs.BillingBudgetTimeouts>;
}

/**
 * The set of arguments for constructing a BillingBudget resource.
 */
export interface BillingBudgetArgs {
    /**
     * Defines notifications that are sent on every update to the billing account's spend, regardless of the thresholds defined
     * using threshold rules.
     */
    allUpdatesRule?: pulumi.Input<inputs.BillingBudgetAllUpdatesRule>;
    /**
     * The budgeted amount for each usage period.
     */
    amount: pulumi.Input<inputs.BillingBudgetAmount>;
    /**
     * ID of the billing account to set a budget on.
     */
    billingAccount: pulumi.Input<string>;
    /**
     * Filters that define which resources are used to compute the actual spend against the budget.
     */
    budgetFilter?: pulumi.Input<inputs.BillingBudgetBudgetFilter>;
    /**
     * User data for display name in UI. Must be <= 60 chars.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The ownership scope of the budget. The ownership scope and users' IAM permissions determine who has full access to the
     * budget's data. Possible values: ["OWNERSHIP_SCOPE_UNSPECIFIED", "ALL_USERS", "BILLING_ACCOUNT"]
     */
    ownershipScope?: pulumi.Input<string>;
    /**
     * Rules that trigger alerts (notifications of thresholds being crossed) when spend exceeds the specified percentages of
     * the budget.
     */
    thresholdRules?: pulumi.Input<pulumi.Input<inputs.BillingBudgetThresholdRule>[]>;
    timeouts?: pulumi.Input<inputs.BillingBudgetTimeouts>;
}
