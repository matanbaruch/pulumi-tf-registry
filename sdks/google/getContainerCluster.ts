// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getContainerCluster(args: GetContainerClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google:index/getContainerCluster:getContainerCluster", {
        "id": args.id,
        "location": args.location,
        "name": args.name,
        "project": args.project,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getContainerCluster.
 */
export interface GetContainerClusterArgs {
    id?: string;
    location?: string;
    name: string;
    project?: string;
}

/**
 * A collection of values returned by getContainerCluster.
 */
export interface GetContainerClusterResult {
    readonly addonsConfigs: outputs.GetContainerClusterAddonsConfig[];
    readonly allowNetAdmin: boolean;
    readonly authenticatorGroupsConfigs: outputs.GetContainerClusterAuthenticatorGroupsConfig[];
    readonly binaryAuthorizations: outputs.GetContainerClusterBinaryAuthorization[];
    readonly clusterAutoscalings: outputs.GetContainerClusterClusterAutoscaling[];
    readonly clusterIpv4Cidr: string;
    readonly confidentialNodes: outputs.GetContainerClusterConfidentialNode[];
    readonly costManagementConfigs: outputs.GetContainerClusterCostManagementConfig[];
    readonly databaseEncryptions: outputs.GetContainerClusterDatabaseEncryption[];
    readonly datapathProvider: string;
    readonly defaultMaxPodsPerNode: number;
    readonly defaultSnatStatuses: outputs.GetContainerClusterDefaultSnatStatus[];
    readonly deletionProtection: boolean;
    readonly description: string;
    readonly dnsConfigs: outputs.GetContainerClusterDnsConfig[];
    readonly effectiveLabels: {[key: string]: string};
    readonly enableAutopilot: boolean;
    readonly enableCiliumClusterwideNetworkPolicy: boolean;
    readonly enableIntranodeVisibility: boolean;
    readonly enableK8sBetaApis: outputs.GetContainerClusterEnableK8sBetaApi[];
    readonly enableKubernetesAlpha: boolean;
    readonly enableL4IlbSubsetting: boolean;
    readonly enableLegacyAbac: boolean;
    readonly enableMultiNetworking: boolean;
    readonly enableShieldedNodes: boolean;
    readonly enableTpu: boolean;
    readonly endpoint: string;
    readonly fleets: outputs.GetContainerClusterFleet[];
    readonly gatewayApiConfigs: outputs.GetContainerClusterGatewayApiConfig[];
    readonly id: string;
    readonly identityServiceConfigs: outputs.GetContainerClusterIdentityServiceConfig[];
    readonly initialNodeCount: number;
    readonly ipAllocationPolicies: outputs.GetContainerClusterIpAllocationPolicy[];
    readonly labelFingerprint: string;
    readonly location?: string;
    readonly loggingConfigs: outputs.GetContainerClusterLoggingConfig[];
    readonly loggingService: string;
    readonly maintenancePolicies: outputs.GetContainerClusterMaintenancePolicy[];
    readonly masterAuthorizedNetworksConfigs: outputs.GetContainerClusterMasterAuthorizedNetworksConfig[];
    readonly masterAuths: outputs.GetContainerClusterMasterAuth[];
    readonly masterVersion: string;
    readonly meshCertificates: outputs.GetContainerClusterMeshCertificate[];
    readonly minMasterVersion: string;
    readonly monitoringConfigs: outputs.GetContainerClusterMonitoringConfig[];
    readonly monitoringService: string;
    readonly name: string;
    readonly network: string;
    readonly networkPolicies: outputs.GetContainerClusterNetworkPolicy[];
    readonly networkingMode: string;
    readonly nodeConfigs: outputs.GetContainerClusterNodeConfig[];
    readonly nodeLocations: string[];
    readonly nodePoolAutoConfigs: outputs.GetContainerClusterNodePoolAutoConfig[];
    readonly nodePoolDefaults: outputs.GetContainerClusterNodePoolDefault[];
    readonly nodePools: outputs.GetContainerClusterNodePool[];
    readonly nodeVersion: string;
    readonly notificationConfigs: outputs.GetContainerClusterNotificationConfig[];
    readonly operation: string;
    readonly privateClusterConfigs: outputs.GetContainerClusterPrivateClusterConfig[];
    readonly privateIpv6GoogleAccess: string;
    readonly project?: string;
    readonly releaseChannels: outputs.GetContainerClusterReleaseChannel[];
    readonly removeDefaultNodePool: boolean;
    readonly resourceLabels: {[key: string]: string};
    readonly resourceUsageExportConfigs: outputs.GetContainerClusterResourceUsageExportConfig[];
    readonly secretManagerConfigs: outputs.GetContainerClusterSecretManagerConfig[];
    readonly securityPostureConfigs: outputs.GetContainerClusterSecurityPostureConfig[];
    readonly selfLink: string;
    readonly serviceExternalIpsConfigs: outputs.GetContainerClusterServiceExternalIpsConfig[];
    readonly servicesIpv4Cidr: string;
    readonly subnetwork: string;
    readonly terraformLabels: {[key: string]: string};
    readonly tpuIpv4CidrBlock: string;
    readonly verticalPodAutoscalings: outputs.GetContainerClusterVerticalPodAutoscaling[];
    readonly workloadIdentityConfigs: outputs.GetContainerClusterWorkloadIdentityConfig[];
}
export function getContainerClusterOutput(args: GetContainerClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContainerClusterResult> {
    return pulumi.output(args).apply((a: any) => getContainerCluster(a, opts))
}

/**
 * A collection of arguments for invoking getContainerCluster.
 */
export interface GetContainerClusterOutputArgs {
    id?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
