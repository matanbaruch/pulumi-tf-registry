// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SqlSslCert extends pulumi.CustomResource {
    /**
     * Get an existing SqlSslCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlSslCertState, opts?: pulumi.CustomResourceOptions): SqlSslCert {
        return new SqlSslCert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/sqlSslCert:SqlSslCert';

    /**
     * Returns true if the given object is an instance of SqlSslCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlSslCert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlSslCert.__pulumiType;
    }

    /**
     * The actual certificate data for this client certificate.
     */
    public /*out*/ readonly cert!: pulumi.Output<string>;
    /**
     * The serial number extracted from the certificate data.
     */
    public /*out*/ readonly certSerialNumber!: pulumi.Output<string>;
    /**
     * The common name to be used in the certificate to identify the client. Constrained to [a-zA-Z.-_ ]+. Changing this forces
     * a new resource to be created.
     */
    public readonly commonName!: pulumi.Output<string>;
    /**
     * The time when the certificate was created in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The time when the certificate expires in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
     */
    public /*out*/ readonly expirationTime!: pulumi.Output<string>;
    /**
     * The name of the Cloud SQL instance. Changing this forces a new resource to be created.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * The private key associated with the client certificate.
     */
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The CA cert of the server this client cert was generated from.
     */
    public /*out*/ readonly serverCaCert!: pulumi.Output<string>;
    /**
     * The SHA1 Fingerprint of the certificate.
     */
    public /*out*/ readonly sha1Fingerprint!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SqlSslCertTimeouts | undefined>;

    /**
     * Create a SqlSslCert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlSslCertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlSslCertArgs | SqlSslCertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlSslCertState | undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["certSerialNumber"] = state ? state.certSerialNumber : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["expirationTime"] = state ? state.expirationTime : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serverCaCert"] = state ? state.serverCaCert : undefined;
            resourceInputs["sha1Fingerprint"] = state ? state.sha1Fingerprint : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SqlSslCertArgs | undefined;
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["cert"] = undefined /*out*/;
            resourceInputs["certSerialNumber"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["expirationTime"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["serverCaCert"] = undefined /*out*/;
            resourceInputs["sha1Fingerprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["cert", "privateKey", "serverCaCert"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SqlSslCert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SqlSslCert resources.
 */
export interface SqlSslCertState {
    /**
     * The actual certificate data for this client certificate.
     */
    cert?: pulumi.Input<string>;
    /**
     * The serial number extracted from the certificate data.
     */
    certSerialNumber?: pulumi.Input<string>;
    /**
     * The common name to be used in the certificate to identify the client. Constrained to [a-zA-Z.-_ ]+. Changing this forces
     * a new resource to be created.
     */
    commonName?: pulumi.Input<string>;
    /**
     * The time when the certificate was created in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The time when the certificate expires in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * The name of the Cloud SQL instance. Changing this forces a new resource to be created.
     */
    instance?: pulumi.Input<string>;
    /**
     * The private key associated with the client certificate.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The CA cert of the server this client cert was generated from.
     */
    serverCaCert?: pulumi.Input<string>;
    /**
     * The SHA1 Fingerprint of the certificate.
     */
    sha1Fingerprint?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SqlSslCertTimeouts>;
}

/**
 * The set of arguments for constructing a SqlSslCert resource.
 */
export interface SqlSslCertArgs {
    /**
     * The common name to be used in the certificate to identify the client. Constrained to [a-zA-Z.-_ ]+. Changing this forces
     * a new resource to be created.
     */
    commonName: pulumi.Input<string>;
    /**
     * The name of the Cloud SQL instance. Changing this forces a new resource to be created.
     */
    instance: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SqlSslCertTimeouts>;
}
