// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeVpnTunnel extends pulumi.CustomResource {
    /**
     * Get an existing ComputeVpnTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeVpnTunnelState, opts?: pulumi.CustomResourceOptions): ComputeVpnTunnel {
        return new ComputeVpnTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/computeVpnTunnel:ComputeVpnTunnel';

    /**
     * Returns true if the given object is an instance of ComputeVpnTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeVpnTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeVpnTunnel.__pulumiType;
    }

    /**
     * Creation timestamp in RFC3339 text format.
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * An optional description of this resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Detailed status message for the VPN tunnel.
     */
    public /*out*/ readonly detailedStatus!: pulumi.Output<string>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * IKE protocol version to use when establishing the VPN tunnel with peer VPN gateway. Acceptable IKE versions are 1 or 2.
     * Default version is 2.
     */
    public readonly ikeVersion!: pulumi.Output<number | undefined>;
    /**
     * The fingerprint used for optimistic locking of this resource. Used internally during updates.
     */
    public /*out*/ readonly labelFingerprint!: pulumi.Output<string>;
    /**
     * Labels to apply to this VpnTunnel. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Local traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR
     * formatted string, for example '192.168.0.0/16'. The ranges should be disjoint. Only IPv4 is supported.
     */
    public readonly localTrafficSelectors!: pulumi.Output<string[]>;
    /**
     * Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be
     * 1-63 characters long and match the regular expression 'a-z?' which means the first character must be a lowercase letter,
     * and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a
     * dash.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * URL of the peer side external VPN gateway to which this VPN tunnel is connected.
     */
    public readonly peerExternalGateway!: pulumi.Output<string | undefined>;
    /**
     * The interface ID of the external VPN gateway to which this VPN tunnel is connected.
     */
    public readonly peerExternalGatewayInterface!: pulumi.Output<number | undefined>;
    /**
     * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. If provided, the VPN tunnel will
     * automatically use the same vpn_gateway_interface ID in the peer GCP VPN gateway. This field must reference a
     * 'google_compute_ha_vpn_gateway' resource.
     */
    public readonly peerGcpGateway!: pulumi.Output<string | undefined>;
    /**
     * IP address of the peer VPN gateway. Only IPv4 is supported.
     */
    public readonly peerIp!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The region where the tunnel is located. If unset, is set to the region of 'target_vpn_gateway'.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Remote traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR
     * formatted string, for example '192.168.0.0/16'. The ranges should be disjoint. Only IPv4 is supported.
     */
    public readonly remoteTrafficSelectors!: pulumi.Output<string[]>;
    /**
     * URL of router resource to be used for dynamic routing.
     */
    public readonly router!: pulumi.Output<string | undefined>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway.
     */
    public readonly sharedSecret!: pulumi.Output<string>;
    /**
     * Hash of the shared secret.
     */
    public /*out*/ readonly sharedSecretHash!: pulumi.Output<string>;
    /**
     * URL of the Target VPN gateway with which this VPN tunnel is associated.
     */
    public readonly targetVpnGateway!: pulumi.Output<string | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeVpnTunnelTimeouts | undefined>;
    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     */
    public /*out*/ readonly tunnelId!: pulumi.Output<string>;
    /**
     * URL of the VPN gateway with which this VPN tunnel is associated. This must be used if a High Availability VPN gateway
     * resource is created. This field must reference a 'google_compute_ha_vpn_gateway' resource.
     */
    public readonly vpnGateway!: pulumi.Output<string | undefined>;
    /**
     * The interface ID of the VPN gateway with which this VPN tunnel is associated.
     */
    public readonly vpnGatewayInterface!: pulumi.Output<number | undefined>;

    /**
     * Create a ComputeVpnTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeVpnTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeVpnTunnelArgs | ComputeVpnTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeVpnTunnelState | undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detailedStatus"] = state ? state.detailedStatus : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["ikeVersion"] = state ? state.ikeVersion : undefined;
            resourceInputs["labelFingerprint"] = state ? state.labelFingerprint : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["localTrafficSelectors"] = state ? state.localTrafficSelectors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peerExternalGateway"] = state ? state.peerExternalGateway : undefined;
            resourceInputs["peerExternalGatewayInterface"] = state ? state.peerExternalGatewayInterface : undefined;
            resourceInputs["peerGcpGateway"] = state ? state.peerGcpGateway : undefined;
            resourceInputs["peerIp"] = state ? state.peerIp : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["remoteTrafficSelectors"] = state ? state.remoteTrafficSelectors : undefined;
            resourceInputs["router"] = state ? state.router : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["sharedSecret"] = state ? state.sharedSecret : undefined;
            resourceInputs["sharedSecretHash"] = state ? state.sharedSecretHash : undefined;
            resourceInputs["targetVpnGateway"] = state ? state.targetVpnGateway : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tunnelId"] = state ? state.tunnelId : undefined;
            resourceInputs["vpnGateway"] = state ? state.vpnGateway : undefined;
            resourceInputs["vpnGatewayInterface"] = state ? state.vpnGatewayInterface : undefined;
        } else {
            const args = argsOrState as ComputeVpnTunnelArgs | undefined;
            if ((!args || args.sharedSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedSecret'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ikeVersion"] = args ? args.ikeVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["localTrafficSelectors"] = args ? args.localTrafficSelectors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peerExternalGateway"] = args ? args.peerExternalGateway : undefined;
            resourceInputs["peerExternalGatewayInterface"] = args ? args.peerExternalGatewayInterface : undefined;
            resourceInputs["peerGcpGateway"] = args ? args.peerGcpGateway : undefined;
            resourceInputs["peerIp"] = args ? args.peerIp : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["remoteTrafficSelectors"] = args ? args.remoteTrafficSelectors : undefined;
            resourceInputs["router"] = args ? args.router : undefined;
            resourceInputs["sharedSecret"] = args?.sharedSecret ? pulumi.secret(args.sharedSecret) : undefined;
            resourceInputs["targetVpnGateway"] = args ? args.targetVpnGateway : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpnGateway"] = args ? args.vpnGateway : undefined;
            resourceInputs["vpnGatewayInterface"] = args ? args.vpnGatewayInterface : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["detailedStatus"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["labelFingerprint"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["sharedSecretHash"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["tunnelId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ComputeVpnTunnel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeVpnTunnel resources.
 */
export interface ComputeVpnTunnelState {
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Detailed status message for the VPN tunnel.
     */
    detailedStatus?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * IKE protocol version to use when establishing the VPN tunnel with peer VPN gateway. Acceptable IKE versions are 1 or 2.
     * Default version is 2.
     */
    ikeVersion?: pulumi.Input<number>;
    /**
     * The fingerprint used for optimistic locking of this resource. Used internally during updates.
     */
    labelFingerprint?: pulumi.Input<string>;
    /**
     * Labels to apply to this VpnTunnel. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Local traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR
     * formatted string, for example '192.168.0.0/16'. The ranges should be disjoint. Only IPv4 is supported.
     */
    localTrafficSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be
     * 1-63 characters long and match the regular expression 'a-z?' which means the first character must be a lowercase letter,
     * and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a
     * dash.
     */
    name?: pulumi.Input<string>;
    /**
     * URL of the peer side external VPN gateway to which this VPN tunnel is connected.
     */
    peerExternalGateway?: pulumi.Input<string>;
    /**
     * The interface ID of the external VPN gateway to which this VPN tunnel is connected.
     */
    peerExternalGatewayInterface?: pulumi.Input<number>;
    /**
     * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. If provided, the VPN tunnel will
     * automatically use the same vpn_gateway_interface ID in the peer GCP VPN gateway. This field must reference a
     * 'google_compute_ha_vpn_gateway' resource.
     */
    peerGcpGateway?: pulumi.Input<string>;
    /**
     * IP address of the peer VPN gateway. Only IPv4 is supported.
     */
    peerIp?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region where the tunnel is located. If unset, is set to the region of 'target_vpn_gateway'.
     */
    region?: pulumi.Input<string>;
    /**
     * Remote traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR
     * formatted string, for example '192.168.0.0/16'. The ranges should be disjoint. Only IPv4 is supported.
     */
    remoteTrafficSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL of router resource to be used for dynamic routing.
     */
    router?: pulumi.Input<string>;
    selfLink?: pulumi.Input<string>;
    /**
     * Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway.
     */
    sharedSecret?: pulumi.Input<string>;
    /**
     * Hash of the shared secret.
     */
    sharedSecretHash?: pulumi.Input<string>;
    /**
     * URL of the Target VPN gateway with which this VPN tunnel is associated.
     */
    targetVpnGateway?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ComputeVpnTunnelTimeouts>;
    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     */
    tunnelId?: pulumi.Input<string>;
    /**
     * URL of the VPN gateway with which this VPN tunnel is associated. This must be used if a High Availability VPN gateway
     * resource is created. This field must reference a 'google_compute_ha_vpn_gateway' resource.
     */
    vpnGateway?: pulumi.Input<string>;
    /**
     * The interface ID of the VPN gateway with which this VPN tunnel is associated.
     */
    vpnGatewayInterface?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ComputeVpnTunnel resource.
 */
export interface ComputeVpnTunnelArgs {
    /**
     * An optional description of this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * IKE protocol version to use when establishing the VPN tunnel with peer VPN gateway. Acceptable IKE versions are 1 or 2.
     * Default version is 2.
     */
    ikeVersion?: pulumi.Input<number>;
    /**
     * Labels to apply to this VpnTunnel. **Note**: This field is non-authoritative, and will only manage the labels present in
     * your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Local traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR
     * formatted string, for example '192.168.0.0/16'. The ranges should be disjoint. Only IPv4 is supported.
     */
    localTrafficSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be
     * 1-63 characters long and match the regular expression 'a-z?' which means the first character must be a lowercase letter,
     * and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a
     * dash.
     */
    name?: pulumi.Input<string>;
    /**
     * URL of the peer side external VPN gateway to which this VPN tunnel is connected.
     */
    peerExternalGateway?: pulumi.Input<string>;
    /**
     * The interface ID of the external VPN gateway to which this VPN tunnel is connected.
     */
    peerExternalGatewayInterface?: pulumi.Input<number>;
    /**
     * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. If provided, the VPN tunnel will
     * automatically use the same vpn_gateway_interface ID in the peer GCP VPN gateway. This field must reference a
     * 'google_compute_ha_vpn_gateway' resource.
     */
    peerGcpGateway?: pulumi.Input<string>;
    /**
     * IP address of the peer VPN gateway. Only IPv4 is supported.
     */
    peerIp?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region where the tunnel is located. If unset, is set to the region of 'target_vpn_gateway'.
     */
    region?: pulumi.Input<string>;
    /**
     * Remote traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR
     * formatted string, for example '192.168.0.0/16'. The ranges should be disjoint. Only IPv4 is supported.
     */
    remoteTrafficSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL of router resource to be used for dynamic routing.
     */
    router?: pulumi.Input<string>;
    /**
     * Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway.
     */
    sharedSecret: pulumi.Input<string>;
    /**
     * URL of the Target VPN gateway with which this VPN tunnel is associated.
     */
    targetVpnGateway?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeVpnTunnelTimeouts>;
    /**
     * URL of the VPN gateway with which this VPN tunnel is associated. This must be used if a High Availability VPN gateway
     * resource is created. This field must reference a 'google_compute_ha_vpn_gateway' resource.
     */
    vpnGateway?: pulumi.Input<string>;
    /**
     * The interface ID of the VPN gateway with which this VPN tunnel is associated.
     */
    vpnGatewayInterface?: pulumi.Input<number>;
}
