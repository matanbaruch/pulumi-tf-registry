// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirestoreDocument extends pulumi.CustomResource {
    /**
     * Get an existing FirestoreDocument resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirestoreDocumentState, opts?: pulumi.CustomResourceOptions): FirestoreDocument {
        return new FirestoreDocument(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/firestoreDocument:FirestoreDocument';

    /**
     * Returns true if the given object is an instance of FirestoreDocument.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirestoreDocument {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirestoreDocument.__pulumiType;
    }

    /**
     * The collection ID, relative to database. For example: chatrooms or chatrooms/my-document/private-messages.
     */
    public readonly collection!: pulumi.Output<string>;
    /**
     * Creation timestamp in RFC3339 format.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The Firestore database id. Defaults to '"(default)"'.
     */
    public readonly database!: pulumi.Output<string | undefined>;
    /**
     * The client-assigned document ID to use for this document during creation.
     */
    public readonly documentId!: pulumi.Output<string>;
    /**
     * The document's [fields](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents) formated
     * as a json string.
     */
    public readonly fields!: pulumi.Output<string>;
    /**
     * A server defined name for this document. Format:
     * 'projects/{{project_id}}/databases/{{database_id}}/documents/{{path}}/{{document_id}}'
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * A relative path to the collection this document exists within
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FirestoreDocumentTimeouts | undefined>;
    /**
     * Last update timestamp in RFC3339 format.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a FirestoreDocument resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirestoreDocumentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirestoreDocumentArgs | FirestoreDocumentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirestoreDocumentState | undefined;
            resourceInputs["collection"] = state ? state.collection : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["documentId"] = state ? state.documentId : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as FirestoreDocumentArgs | undefined;
            if ((!args || args.collection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collection'");
            }
            if ((!args || args.documentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'documentId'");
            }
            if ((!args || args.fields === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fields'");
            }
            resourceInputs["collection"] = args ? args.collection : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["documentId"] = args ? args.documentId : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirestoreDocument.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirestoreDocument resources.
 */
export interface FirestoreDocumentState {
    /**
     * The collection ID, relative to database. For example: chatrooms or chatrooms/my-document/private-messages.
     */
    collection?: pulumi.Input<string>;
    /**
     * Creation timestamp in RFC3339 format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The Firestore database id. Defaults to '"(default)"'.
     */
    database?: pulumi.Input<string>;
    /**
     * The client-assigned document ID to use for this document during creation.
     */
    documentId?: pulumi.Input<string>;
    /**
     * The document's [fields](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents) formated
     * as a json string.
     */
    fields?: pulumi.Input<string>;
    /**
     * A server defined name for this document. Format:
     * 'projects/{{project_id}}/databases/{{database_id}}/documents/{{path}}/{{document_id}}'
     */
    name?: pulumi.Input<string>;
    /**
     * A relative path to the collection this document exists within
     */
    path?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirestoreDocumentTimeouts>;
    /**
     * Last update timestamp in RFC3339 format.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirestoreDocument resource.
 */
export interface FirestoreDocumentArgs {
    /**
     * The collection ID, relative to database. For example: chatrooms or chatrooms/my-document/private-messages.
     */
    collection: pulumi.Input<string>;
    /**
     * The Firestore database id. Defaults to '"(default)"'.
     */
    database?: pulumi.Input<string>;
    /**
     * The client-assigned document ID to use for this document during creation.
     */
    documentId: pulumi.Input<string>;
    /**
     * The document's [fields](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents) formated
     * as a json string.
     */
    fields: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirestoreDocumentTimeouts>;
}
