// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeNetworkEndpoints extends pulumi.CustomResource {
    /**
     * Get an existing ComputeNetworkEndpoints resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeNetworkEndpointsState, opts?: pulumi.CustomResourceOptions): ComputeNetworkEndpoints {
        return new ComputeNetworkEndpoints(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/computeNetworkEndpoints:ComputeNetworkEndpoints';

    /**
     * Returns true if the given object is an instance of ComputeNetworkEndpoints.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeNetworkEndpoints {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeNetworkEndpoints.__pulumiType;
    }

    /**
     * The network endpoint group these endpoints are part of.
     */
    public readonly networkEndpointGroup!: pulumi.Output<string>;
    /**
     * The network endpoints to be added to the enclosing network endpoint group (NEG). Each endpoint specifies an IP address
     * and port, along with additional information depending on the NEG type.
     */
    public readonly networkEndpoints!: pulumi.Output<outputs.ComputeNetworkEndpointsNetworkEndpoint[] | undefined>;
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeNetworkEndpointsTimeouts | undefined>;
    /**
     * Zone where the containing network endpoint group is located.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a ComputeNetworkEndpoints resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeNetworkEndpointsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeNetworkEndpointsArgs | ComputeNetworkEndpointsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeNetworkEndpointsState | undefined;
            resourceInputs["networkEndpointGroup"] = state ? state.networkEndpointGroup : undefined;
            resourceInputs["networkEndpoints"] = state ? state.networkEndpoints : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ComputeNetworkEndpointsArgs | undefined;
            if ((!args || args.networkEndpointGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkEndpointGroup'");
            }
            resourceInputs["networkEndpointGroup"] = args ? args.networkEndpointGroup : undefined;
            resourceInputs["networkEndpoints"] = args ? args.networkEndpoints : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeNetworkEndpoints.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeNetworkEndpoints resources.
 */
export interface ComputeNetworkEndpointsState {
    /**
     * The network endpoint group these endpoints are part of.
     */
    networkEndpointGroup?: pulumi.Input<string>;
    /**
     * The network endpoints to be added to the enclosing network endpoint group (NEG). Each endpoint specifies an IP address
     * and port, along with additional information depending on the NEG type.
     */
    networkEndpoints?: pulumi.Input<pulumi.Input<inputs.ComputeNetworkEndpointsNetworkEndpoint>[]>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeNetworkEndpointsTimeouts>;
    /**
     * Zone where the containing network endpoint group is located.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeNetworkEndpoints resource.
 */
export interface ComputeNetworkEndpointsArgs {
    /**
     * The network endpoint group these endpoints are part of.
     */
    networkEndpointGroup: pulumi.Input<string>;
    /**
     * The network endpoints to be added to the enclosing network endpoint group (NEG). Each endpoint specifies an IP address
     * and port, along with additional information depending on the NEG type.
     */
    networkEndpoints?: pulumi.Input<pulumi.Input<inputs.ComputeNetworkEndpointsNetworkEndpoint>[]>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeNetworkEndpointsTimeouts>;
    /**
     * Zone where the containing network endpoint group is located.
     */
    zone?: pulumi.Input<string>;
}
