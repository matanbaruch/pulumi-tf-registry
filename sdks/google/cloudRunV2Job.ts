// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudRunV2Job extends pulumi.CustomResource {
    /**
     * Get an existing CloudRunV2Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudRunV2JobState, opts?: pulumi.CustomResourceOptions): CloudRunV2Job {
        return new CloudRunV2Job(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/cloudRunV2Job:CloudRunV2Job';

    /**
     * Returns true if the given object is an instance of CloudRunV2Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudRunV2Job {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudRunV2Job.__pulumiType;
    }

    /**
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
     * should be preserved when modifying objects. Cloud Run API v2 does not support annotations with 'run.googleapis.com',
     * 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected on new
     * resources. All system annotations in v1 now have a corresponding field in v2 Job. This field follows Kubernetes
     * annotations' namespacing, limits, and rules. **Note**: This field is non-authoritative, and will only manage the
     * annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
     * present on the resource.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Settings for the Binary Authorization feature.
     */
    public readonly binaryAuthorization!: pulumi.Output<outputs.CloudRunV2JobBinaryAuthorization | undefined>;
    /**
     * Arbitrary identifier for the API client.
     */
    public readonly client!: pulumi.Output<string | undefined>;
    /**
     * Arbitrary version identifier for the API client.
     */
    public readonly clientVersion!: pulumi.Output<string | undefined>;
    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Job
     * does not reach its desired state. See comments in reconciling for additional information on 'reconciliation' process in
     * Cloud Run.
     */
    public /*out*/ readonly conditions!: pulumi.Output<outputs.CloudRunV2JobCondition[]>;
    /**
     * The creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Email address of the authenticated creator.
     */
    public /*out*/ readonly creator!: pulumi.Output<string>;
    /**
     * The deletion time.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly effectiveAnnotations!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during
     * updates.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Number of executions created for this job.
     */
    public /*out*/ readonly executionCount!: pulumi.Output<number>;
    /**
     * For a deleted resource, the time after which it will be permamently deleted.
     */
    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    /**
     * A number that monotonically increases every time the user modifies the desired state.
     */
    public /*out*/ readonly generation!: pulumi.Output<string>;
    /**
     * Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with
     * Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment,
     * state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
     * https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with
     * 'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they
     * will be rejected. All system labels in v1 now have a corresponding field in v2 Job. **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Email address of the last authenticated modifier.
     */
    public /*out*/ readonly lastModifier!: pulumi.Output<string>;
    /**
     * Name of the last created execution.
     */
    public /*out*/ readonly latestCreatedExecutions!: pulumi.Output<outputs.CloudRunV2JobLatestCreatedExecution[]>;
    /**
     * The launch stage as defined by [Google Cloud Platform Launch
     * Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA. If no value is
     * specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that
     * stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as
     * input, but only BETA and GA-level features are used, this field will be BETA on output. Possible values:
     * ["UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]
     */
    public readonly launchStage!: pulumi.Output<string>;
    /**
     * The location of the cloud run job
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the Job.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The generation of this Job. See comments in reconciling for additional information on reconciliation process in Cloud
     * Run.
     */
    public /*out*/ readonly observedGeneration!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Returns true if the Job is currently being acted upon by the system to bring it into the desired state. When a new Job
     * is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to
     * the desired state. This process is called reconciliation. While reconciliation is in process, observedGeneration and
     * latest_succeeded_execution, will have transient values that might mismatch the intended state: Once reconciliation is
     * over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job,
     * or there was an error, and reconciliation failed. This state can be found in terminalCondition.state. If reconciliation
     * succeeded, the following fields will match: observedGeneration and generation, latest_succeeded_execution and
     * latestCreatedExecution. If reconciliation failed, observedGeneration and latest_succeeded_execution will have the state
     * of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in
     * terminalCondition and conditions
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * The template used to create executions for this Job.
     */
    public readonly template!: pulumi.Output<outputs.CloudRunV2JobTemplate>;
    /**
     * The Condition of this Job, containing its readiness status, and detailed error information in case it did not reach the
     * desired state
     */
    public /*out*/ readonly terminalConditions!: pulumi.Output<outputs.CloudRunV2JobTerminalCondition[]>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.CloudRunV2JobTimeouts | undefined>;
    /**
     * Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged
     * until the resource is deleted.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The last-modified time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CloudRunV2Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudRunV2JobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudRunV2JobArgs | CloudRunV2JobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudRunV2JobState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["binaryAuthorization"] = state ? state.binaryAuthorization : undefined;
            resourceInputs["client"] = state ? state.client : undefined;
            resourceInputs["clientVersion"] = state ? state.clientVersion : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["deleteTime"] = state ? state.deleteTime : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["effectiveAnnotations"] = state ? state.effectiveAnnotations : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["executionCount"] = state ? state.executionCount : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["generation"] = state ? state.generation : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lastModifier"] = state ? state.lastModifier : undefined;
            resourceInputs["latestCreatedExecutions"] = state ? state.latestCreatedExecutions : undefined;
            resourceInputs["launchStage"] = state ? state.launchStage : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["observedGeneration"] = state ? state.observedGeneration : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["terminalConditions"] = state ? state.terminalConditions : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as CloudRunV2JobArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["binaryAuthorization"] = args ? args.binaryAuthorization : undefined;
            resourceInputs["client"] = args ? args.client : undefined;
            resourceInputs["clientVersion"] = args ? args.clientVersion : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["launchStage"] = args ? args.launchStage : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["effectiveAnnotations"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["executionCount"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["generation"] = undefined /*out*/;
            resourceInputs["lastModifier"] = undefined /*out*/;
            resourceInputs["latestCreatedExecutions"] = undefined /*out*/;
            resourceInputs["observedGeneration"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["terminalConditions"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudRunV2Job.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudRunV2Job resources.
 */
export interface CloudRunV2JobState {
    /**
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
     * should be preserved when modifying objects. Cloud Run API v2 does not support annotations with 'run.googleapis.com',
     * 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected on new
     * resources. All system annotations in v1 now have a corresponding field in v2 Job. This field follows Kubernetes
     * annotations' namespacing, limits, and rules. **Note**: This field is non-authoritative, and will only manage the
     * annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
     * present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Settings for the Binary Authorization feature.
     */
    binaryAuthorization?: pulumi.Input<inputs.CloudRunV2JobBinaryAuthorization>;
    /**
     * Arbitrary identifier for the API client.
     */
    client?: pulumi.Input<string>;
    /**
     * Arbitrary version identifier for the API client.
     */
    clientVersion?: pulumi.Input<string>;
    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Job
     * does not reach its desired state. See comments in reconciling for additional information on 'reconciliation' process in
     * Cloud Run.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.CloudRunV2JobCondition>[]>;
    /**
     * The creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Email address of the authenticated creator.
     */
    creator?: pulumi.Input<string>;
    /**
     * The deletion time.
     */
    deleteTime?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    effectiveAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during
     * updates.
     */
    etag?: pulumi.Input<string>;
    /**
     * Number of executions created for this job.
     */
    executionCount?: pulumi.Input<number>;
    /**
     * For a deleted resource, the time after which it will be permamently deleted.
     */
    expireTime?: pulumi.Input<string>;
    /**
     * A number that monotonically increases every time the user modifies the desired state.
     */
    generation?: pulumi.Input<string>;
    /**
     * Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with
     * Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment,
     * state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
     * https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with
     * 'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they
     * will be rejected. All system labels in v1 now have a corresponding field in v2 Job. **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Email address of the last authenticated modifier.
     */
    lastModifier?: pulumi.Input<string>;
    /**
     * Name of the last created execution.
     */
    latestCreatedExecutions?: pulumi.Input<pulumi.Input<inputs.CloudRunV2JobLatestCreatedExecution>[]>;
    /**
     * The launch stage as defined by [Google Cloud Platform Launch
     * Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA. If no value is
     * specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that
     * stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as
     * input, but only BETA and GA-level features are used, this field will be BETA on output. Possible values:
     * ["UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]
     */
    launchStage?: pulumi.Input<string>;
    /**
     * The location of the cloud run job
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the Job.
     */
    name?: pulumi.Input<string>;
    /**
     * The generation of this Job. See comments in reconciling for additional information on reconciliation process in Cloud
     * Run.
     */
    observedGeneration?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Returns true if the Job is currently being acted upon by the system to bring it into the desired state. When a new Job
     * is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to
     * the desired state. This process is called reconciliation. While reconciliation is in process, observedGeneration and
     * latest_succeeded_execution, will have transient values that might mismatch the intended state: Once reconciliation is
     * over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job,
     * or there was an error, and reconciliation failed. This state can be found in terminalCondition.state. If reconciliation
     * succeeded, the following fields will match: observedGeneration and generation, latest_succeeded_execution and
     * latestCreatedExecution. If reconciliation failed, observedGeneration and latest_succeeded_execution will have the state
     * of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in
     * terminalCondition and conditions
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * The template used to create executions for this Job.
     */
    template?: pulumi.Input<inputs.CloudRunV2JobTemplate>;
    /**
     * The Condition of this Job, containing its readiness status, and detailed error information in case it did not reach the
     * desired state
     */
    terminalConditions?: pulumi.Input<pulumi.Input<inputs.CloudRunV2JobTerminalCondition>[]>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CloudRunV2JobTimeouts>;
    /**
     * Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged
     * until the resource is deleted.
     */
    uid?: pulumi.Input<string>;
    /**
     * The last-modified time.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudRunV2Job resource.
 */
export interface CloudRunV2JobArgs {
    /**
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and
     * should be preserved when modifying objects. Cloud Run API v2 does not support annotations with 'run.googleapis.com',
     * 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected on new
     * resources. All system annotations in v1 now have a corresponding field in v2 Job. This field follows Kubernetes
     * annotations' namespacing, limits, and rules. **Note**: This field is non-authoritative, and will only manage the
     * annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
     * present on the resource.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Settings for the Binary Authorization feature.
     */
    binaryAuthorization?: pulumi.Input<inputs.CloudRunV2JobBinaryAuthorization>;
    /**
     * Arbitrary identifier for the API client.
     */
    client?: pulumi.Input<string>;
    /**
     * Arbitrary version identifier for the API client.
     */
    clientVersion?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with
     * Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment,
     * state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
     * https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with
     * 'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they
     * will be rejected. All system labels in v1 now have a corresponding field in v2 Job. **Note**: This field is
     * non-authoritative, and will only manage the labels present in your configuration. Please refer to the field
     * 'effective_labels' for all of the labels present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The launch stage as defined by [Google Cloud Platform Launch
     * Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA. If no value is
     * specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that
     * stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as
     * input, but only BETA and GA-level features are used, this field will be BETA on output. Possible values:
     * ["UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]
     */
    launchStage?: pulumi.Input<string>;
    /**
     * The location of the cloud run job
     */
    location: pulumi.Input<string>;
    /**
     * Name of the Job.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The template used to create executions for this Job.
     */
    template: pulumi.Input<inputs.CloudRunV2JobTemplate>;
    timeouts?: pulumi.Input<inputs.CloudRunV2JobTimeouts>;
}
