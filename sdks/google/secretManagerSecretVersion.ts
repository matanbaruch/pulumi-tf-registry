// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecretManagerSecretVersion extends pulumi.CustomResource {
    /**
     * Get an existing SecretManagerSecretVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretManagerSecretVersionState, opts?: pulumi.CustomResourceOptions): SecretManagerSecretVersion {
        return new SecretManagerSecretVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/secretManagerSecretVersion:SecretManagerSecretVersion';

    /**
     * Returns true if the given object is an instance of SecretManagerSecretVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretManagerSecretVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretManagerSecretVersion.__pulumiType;
    }

    /**
     * The time at which the Secret was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The deletion policy for the secret version. Setting 'ABANDON' allows the resource to be abandoned rather than deleted.
     * Setting 'DISABLE' allows the resource to be disabled rather than deleted. Default is 'DELETE'. Possible values are: *
     * DELETE * DISABLE * ABANDON
     */
    public readonly deletionPolicy!: pulumi.Output<string | undefined>;
    /**
     * The time at which the Secret was destroyed. Only present if state is DESTROYED.
     */
    public /*out*/ readonly destroyTime!: pulumi.Output<string>;
    /**
     * The current state of the SecretVersion.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
     */
    public readonly isSecretDataBase64!: pulumi.Output<boolean | undefined>;
    /**
     * The resource name of the SecretVersion. Format: 'projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}'
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Secret Manager secret resource
     */
    public readonly secret!: pulumi.Output<string>;
    /**
     * The secret data. Must be no larger than 64KiB.
     */
    public readonly secretData!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SecretManagerSecretVersionTimeouts | undefined>;
    /**
     * The version of the Secret.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a SecretManagerSecretVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretManagerSecretVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretManagerSecretVersionArgs | SecretManagerSecretVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretManagerSecretVersionState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deletionPolicy"] = state ? state.deletionPolicy : undefined;
            resourceInputs["destroyTime"] = state ? state.destroyTime : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["isSecretDataBase64"] = state ? state.isSecretDataBase64 : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["secretData"] = state ? state.secretData : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SecretManagerSecretVersionArgs | undefined;
            if ((!args || args.secret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secret'");
            }
            if ((!args || args.secretData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretData'");
            }
            resourceInputs["deletionPolicy"] = args ? args.deletionPolicy : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["isSecretDataBase64"] = args ? args.isSecretDataBase64 : undefined;
            resourceInputs["secret"] = args ? args.secret : undefined;
            resourceInputs["secretData"] = args?.secretData ? pulumi.secret(args.secretData) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["destroyTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretManagerSecretVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretManagerSecretVersion resources.
 */
export interface SecretManagerSecretVersionState {
    /**
     * The time at which the Secret was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The deletion policy for the secret version. Setting 'ABANDON' allows the resource to be abandoned rather than deleted.
     * Setting 'DISABLE' allows the resource to be disabled rather than deleted. Default is 'DELETE'. Possible values are: *
     * DELETE * DISABLE * ABANDON
     */
    deletionPolicy?: pulumi.Input<string>;
    /**
     * The time at which the Secret was destroyed. Only present if state is DESTROYED.
     */
    destroyTime?: pulumi.Input<string>;
    /**
     * The current state of the SecretVersion.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
     */
    isSecretDataBase64?: pulumi.Input<boolean>;
    /**
     * The resource name of the SecretVersion. Format: 'projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}'
     */
    name?: pulumi.Input<string>;
    /**
     * Secret Manager secret resource
     */
    secret?: pulumi.Input<string>;
    /**
     * The secret data. Must be no larger than 64KiB.
     */
    secretData?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecretManagerSecretVersionTimeouts>;
    /**
     * The version of the Secret.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretManagerSecretVersion resource.
 */
export interface SecretManagerSecretVersionArgs {
    /**
     * The deletion policy for the secret version. Setting 'ABANDON' allows the resource to be abandoned rather than deleted.
     * Setting 'DISABLE' allows the resource to be disabled rather than deleted. Default is 'DELETE'. Possible values are: *
     * DELETE * DISABLE * ABANDON
     */
    deletionPolicy?: pulumi.Input<string>;
    /**
     * The current state of the SecretVersion.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
     */
    isSecretDataBase64?: pulumi.Input<boolean>;
    /**
     * Secret Manager secret resource
     */
    secret: pulumi.Input<string>;
    /**
     * The secret data. Must be no larger than 64KiB.
     */
    secretData: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecretManagerSecretVersionTimeouts>;
}
