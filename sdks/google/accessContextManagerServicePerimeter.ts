// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AccessContextManagerServicePerimeter extends pulumi.CustomResource {
    /**
     * Get an existing AccessContextManagerServicePerimeter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessContextManagerServicePerimeterState, opts?: pulumi.CustomResourceOptions): AccessContextManagerServicePerimeter {
        return new AccessContextManagerServicePerimeter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/accessContextManagerServicePerimeter:AccessContextManagerServicePerimeter';

    /**
     * Returns true if the given object is an instance of AccessContextManagerServicePerimeter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessContextManagerServicePerimeter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessContextManagerServicePerimeter.__pulumiType;
    }

    /**
     * Time the AccessPolicy was created in UTC.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the ServicePerimeter and its use. Does not affect behavior.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Resource name for the ServicePerimeter. The short_name component must begin with a letter and only include alphanumeric
     * and '_'. Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * Specifies the type of the Perimeter. There are two types: regular and bridge. Regular Service Perimeter contains
     * resources, access levels, and restricted services. Every resource can be in at most ONE regular Service Perimeter. In
     * addition to being in a regular service perimeter, a resource can also be in zero or more perimeter bridges. A perimeter
     * bridge only contains resources. Cross project operations are permitted if all effected resources share some perimeter
     * (whether bridge or regular). Perimeter Bridge does not contain access levels or services: those are governed entirely by
     * the regular perimeter that resource is in. Perimeter Bridges are typically useful when building more complex topologies
     * with many independent perimeters that need to share some data with a common perimeter, but should not be able to share
     * data among themselves. Default value: "PERIMETER_TYPE_REGULAR" Possible values: ["PERIMETER_TYPE_REGULAR",
     * "PERIMETER_TYPE_BRIDGE"]
     */
    public readonly perimeterType!: pulumi.Output<string | undefined>;
    /**
     * Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter
     * configuration without enforcing actual access restrictions. Only allowed to be set when the 'useExplicitDryRunSpec' flag
     * is set.
     */
    public readonly spec!: pulumi.Output<outputs.AccessContextManagerServicePerimeterSpec | undefined>;
    /**
     * ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine
     * perimeter content and boundaries.
     */
    public readonly status!: pulumi.Output<outputs.AccessContextManagerServicePerimeterStatus | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AccessContextManagerServicePerimeterTimeouts | undefined>;
    /**
     * Human readable title. Must be unique within the Policy.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Time the AccessPolicy was updated in UTC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec
     * is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the
     * implicit spec, thereby allowing the user to explicitly provide a configuration ("spec") to use in a dry-run version of
     * the Service Perimeter. This allows the user to test changes to the enforced config ("status") without actually enforcing
     * them. This testing is done through analyzing the differences between currently enforced and suggested restrictions.
     * useExplicitDryRunSpec must bet set to True if any of the fields in the spec are set to non-default values.
     */
    public readonly useExplicitDryRunSpec!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AccessContextManagerServicePerimeter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessContextManagerServicePerimeterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessContextManagerServicePerimeterArgs | AccessContextManagerServicePerimeterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessContextManagerServicePerimeterState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["perimeterType"] = state ? state.perimeterType : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["useExplicitDryRunSpec"] = state ? state.useExplicitDryRunSpec : undefined;
        } else {
            const args = argsOrState as AccessContextManagerServicePerimeterArgs | undefined;
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["perimeterType"] = args ? args.perimeterType : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["useExplicitDryRunSpec"] = args ? args.useExplicitDryRunSpec : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessContextManagerServicePerimeter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AccessContextManagerServicePerimeter resources.
 */
export interface AccessContextManagerServicePerimeterState {
    /**
     * Time the AccessPolicy was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the ServicePerimeter and its use. Does not affect behavior.
     */
    description?: pulumi.Input<string>;
    /**
     * Resource name for the ServicePerimeter. The short_name component must begin with a letter and only include alphanumeric
     * and '_'. Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
     */
    name?: pulumi.Input<string>;
    /**
     * The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
     */
    parent?: pulumi.Input<string>;
    /**
     * Specifies the type of the Perimeter. There are two types: regular and bridge. Regular Service Perimeter contains
     * resources, access levels, and restricted services. Every resource can be in at most ONE regular Service Perimeter. In
     * addition to being in a regular service perimeter, a resource can also be in zero or more perimeter bridges. A perimeter
     * bridge only contains resources. Cross project operations are permitted if all effected resources share some perimeter
     * (whether bridge or regular). Perimeter Bridge does not contain access levels or services: those are governed entirely by
     * the regular perimeter that resource is in. Perimeter Bridges are typically useful when building more complex topologies
     * with many independent perimeters that need to share some data with a common perimeter, but should not be able to share
     * data among themselves. Default value: "PERIMETER_TYPE_REGULAR" Possible values: ["PERIMETER_TYPE_REGULAR",
     * "PERIMETER_TYPE_BRIDGE"]
     */
    perimeterType?: pulumi.Input<string>;
    /**
     * Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter
     * configuration without enforcing actual access restrictions. Only allowed to be set when the 'useExplicitDryRunSpec' flag
     * is set.
     */
    spec?: pulumi.Input<inputs.AccessContextManagerServicePerimeterSpec>;
    /**
     * ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine
     * perimeter content and boundaries.
     */
    status?: pulumi.Input<inputs.AccessContextManagerServicePerimeterStatus>;
    timeouts?: pulumi.Input<inputs.AccessContextManagerServicePerimeterTimeouts>;
    /**
     * Human readable title. Must be unique within the Policy.
     */
    title?: pulumi.Input<string>;
    /**
     * Time the AccessPolicy was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec
     * is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the
     * implicit spec, thereby allowing the user to explicitly provide a configuration ("spec") to use in a dry-run version of
     * the Service Perimeter. This allows the user to test changes to the enforced config ("status") without actually enforcing
     * them. This testing is done through analyzing the differences between currently enforced and suggested restrictions.
     * useExplicitDryRunSpec must bet set to True if any of the fields in the spec are set to non-default values.
     */
    useExplicitDryRunSpec?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AccessContextManagerServicePerimeter resource.
 */
export interface AccessContextManagerServicePerimeterArgs {
    /**
     * Description of the ServicePerimeter and its use. Does not affect behavior.
     */
    description?: pulumi.Input<string>;
    /**
     * Resource name for the ServicePerimeter. The short_name component must begin with a letter and only include alphanumeric
     * and '_'. Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
     */
    name?: pulumi.Input<string>;
    /**
     * The AccessPolicy this ServicePerimeter lives in. Format: accessPolicies/{policy_id}
     */
    parent: pulumi.Input<string>;
    /**
     * Specifies the type of the Perimeter. There are two types: regular and bridge. Regular Service Perimeter contains
     * resources, access levels, and restricted services. Every resource can be in at most ONE regular Service Perimeter. In
     * addition to being in a regular service perimeter, a resource can also be in zero or more perimeter bridges. A perimeter
     * bridge only contains resources. Cross project operations are permitted if all effected resources share some perimeter
     * (whether bridge or regular). Perimeter Bridge does not contain access levels or services: those are governed entirely by
     * the regular perimeter that resource is in. Perimeter Bridges are typically useful when building more complex topologies
     * with many independent perimeters that need to share some data with a common perimeter, but should not be able to share
     * data among themselves. Default value: "PERIMETER_TYPE_REGULAR" Possible values: ["PERIMETER_TYPE_REGULAR",
     * "PERIMETER_TYPE_BRIDGE"]
     */
    perimeterType?: pulumi.Input<string>;
    /**
     * Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter
     * configuration without enforcing actual access restrictions. Only allowed to be set when the 'useExplicitDryRunSpec' flag
     * is set.
     */
    spec?: pulumi.Input<inputs.AccessContextManagerServicePerimeterSpec>;
    /**
     * ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine
     * perimeter content and boundaries.
     */
    status?: pulumi.Input<inputs.AccessContextManagerServicePerimeterStatus>;
    timeouts?: pulumi.Input<inputs.AccessContextManagerServicePerimeterTimeouts>;
    /**
     * Human readable title. Must be unique within the Policy.
     */
    title: pulumi.Input<string>;
    /**
     * Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec
     * is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the
     * implicit spec, thereby allowing the user to explicitly provide a configuration ("spec") to use in a dry-run version of
     * the Service Perimeter. This allows the user to test changes to the enforced config ("status") without actually enforcing
     * them. This testing is done through analyzing the differences between currently enforced and suggested restrictions.
     * useExplicitDryRunSpec must bet set to True if any of the fields in the spec are set to non-default values.
     */
    useExplicitDryRunSpec?: pulumi.Input<boolean>;
}
