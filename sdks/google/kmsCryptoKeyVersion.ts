// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KmsCryptoKeyVersion extends pulumi.CustomResource {
    /**
     * Get an existing KmsCryptoKeyVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsCryptoKeyVersionState, opts?: pulumi.CustomResourceOptions): KmsCryptoKeyVersion {
        return new KmsCryptoKeyVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/kmsCryptoKeyVersion:KmsCryptoKeyVersion';

    /**
     * Returns true if the given object is an instance of KmsCryptoKeyVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsCryptoKeyVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsCryptoKeyVersion.__pulumiType;
    }

    /**
     * The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     */
    public /*out*/ readonly algorithm!: pulumi.Output<string>;
    /**
     * Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the
     * key as stored on the HSM, independently of Google. Only provided for key versions with protectionLevel HSM.
     */
    public /*out*/ readonly attestations!: pulumi.Output<outputs.KmsCryptoKeyVersionAttestation[]>;
    /**
     * The name of the cryptoKey associated with the CryptoKeyVersions. Format:
     * ''projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}''
     */
    public readonly cryptoKey!: pulumi.Output<string>;
    /**
     * ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific
     * to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
     */
    public readonly externalProtectionLevelOptions!: pulumi.Output<outputs.KmsCryptoKeyVersionExternalProtectionLevelOptions | undefined>;
    /**
     * The time this CryptoKeyVersion key material was generated
     */
    public /*out*/ readonly generateTime!: pulumi.Output<string>;
    /**
     * The resource name for this CryptoKeyVersion.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
     */
    public /*out*/ readonly protectionLevel!: pulumi.Output<string>;
    /**
     * The current state of the CryptoKeyVersion. Possible values: ["PENDING_GENERATION", "ENABLED", "DISABLED", "DESTROYED",
     * "DESTROY_SCHEDULED", "PENDING_IMPORT", "IMPORT_FAILED"]
     */
    public readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KmsCryptoKeyVersionTimeouts | undefined>;

    /**
     * Create a KmsCryptoKeyVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsCryptoKeyVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsCryptoKeyVersionArgs | KmsCryptoKeyVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsCryptoKeyVersionState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["attestations"] = state ? state.attestations : undefined;
            resourceInputs["cryptoKey"] = state ? state.cryptoKey : undefined;
            resourceInputs["externalProtectionLevelOptions"] = state ? state.externalProtectionLevelOptions : undefined;
            resourceInputs["generateTime"] = state ? state.generateTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protectionLevel"] = state ? state.protectionLevel : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as KmsCryptoKeyVersionArgs | undefined;
            if ((!args || args.cryptoKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cryptoKey'");
            }
            resourceInputs["cryptoKey"] = args ? args.cryptoKey : undefined;
            resourceInputs["externalProtectionLevelOptions"] = args ? args.externalProtectionLevelOptions : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["algorithm"] = undefined /*out*/;
            resourceInputs["attestations"] = undefined /*out*/;
            resourceInputs["generateTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["protectionLevel"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmsCryptoKeyVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsCryptoKeyVersion resources.
 */
export interface KmsCryptoKeyVersionState {
    /**
     * The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the
     * key as stored on the HSM, independently of Google. Only provided for key versions with protectionLevel HSM.
     */
    attestations?: pulumi.Input<pulumi.Input<inputs.KmsCryptoKeyVersionAttestation>[]>;
    /**
     * The name of the cryptoKey associated with the CryptoKeyVersions. Format:
     * ''projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}''
     */
    cryptoKey?: pulumi.Input<string>;
    /**
     * ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific
     * to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
     */
    externalProtectionLevelOptions?: pulumi.Input<inputs.KmsCryptoKeyVersionExternalProtectionLevelOptions>;
    /**
     * The time this CryptoKeyVersion key material was generated
     */
    generateTime?: pulumi.Input<string>;
    /**
     * The resource name for this CryptoKeyVersion.
     */
    name?: pulumi.Input<string>;
    /**
     * The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
     */
    protectionLevel?: pulumi.Input<string>;
    /**
     * The current state of the CryptoKeyVersion. Possible values: ["PENDING_GENERATION", "ENABLED", "DISABLED", "DESTROYED",
     * "DESTROY_SCHEDULED", "PENDING_IMPORT", "IMPORT_FAILED"]
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsCryptoKeyVersionTimeouts>;
}

/**
 * The set of arguments for constructing a KmsCryptoKeyVersion resource.
 */
export interface KmsCryptoKeyVersionArgs {
    /**
     * The name of the cryptoKey associated with the CryptoKeyVersions. Format:
     * ''projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}''
     */
    cryptoKey: pulumi.Input<string>;
    /**
     * ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific
     * to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
     */
    externalProtectionLevelOptions?: pulumi.Input<inputs.KmsCryptoKeyVersionExternalProtectionLevelOptions>;
    /**
     * The current state of the CryptoKeyVersion. Possible values: ["PENDING_GENERATION", "ENABLED", "DISABLED", "DESTROYED",
     * "DESTROY_SCHEDULED", "PENDING_IMPORT", "IMPORT_FAILED"]
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsCryptoKeyVersionTimeouts>;
}
