// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DialogflowIntent extends pulumi.CustomResource {
    /**
     * Get an existing DialogflowIntent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DialogflowIntentState, opts?: pulumi.CustomResourceOptions): DialogflowIntent {
        return new DialogflowIntent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/dialogflowIntent:DialogflowIntent';

    /**
     * Returns true if the given object is an instance of DialogflowIntent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DialogflowIntent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DialogflowIntent.__pulumiType;
    }

    /**
     * The name of the action associated with the intent. Note: The action name must not contain whitespaces.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The list of platforms for which the first responses will be copied from the messages in PLATFORM_UNSPECIFIED (i.e.
     * default platform). Possible values: ["FACEBOOK", "SLACK", "TELEGRAM", "KIK", "SKYPE", "LINE", "VIBER",
     * "ACTIONS_ON_GOOGLE", "GOOGLE_HANGOUTS"]
     */
    public readonly defaultResponsePlatforms!: pulumi.Output<string[] | undefined>;
    /**
     * The name of this intent to be displayed on the console.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The collection of event names that trigger the intent. If the collection of input contexts is not empty, all of the
     * contexts must be present in the active user session for an event to trigger this intent. See the [events
     * reference](https://cloud.google.com/dialogflow/docs/events-overview) for more details.
     */
    public readonly events!: pulumi.Output<string[] | undefined>;
    /**
     * Information about all followup intents that have this intent as a direct or indirect parent. We populate this field only
     * in the output.
     */
    public /*out*/ readonly followupIntentInfos!: pulumi.Output<outputs.DialogflowIntentFollowupIntentInfo[]>;
    /**
     * The list of context names required for this intent to be triggered. Format: projects/<Project
     * ID>/agent/sessions/-/contexts/<Context ID>.
     */
    public readonly inputContextNames!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether this is a fallback intent.
     */
    public readonly isFallback!: pulumi.Output<boolean>;
    /**
     * Indicates whether Machine Learning is disabled for the intent. Note: If mlDisabled setting is set to true, then this
     * intent is not taken into account during inference in ML ONLY match mode. Also, auto-markup in the UI is turned off.
     */
    public readonly mlDisabled!: pulumi.Output<boolean>;
    /**
     * The unique identifier of this intent. Format: projects/<Project ID>/agent/intents/<Intent ID>.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The unique identifier of the parent intent in the chain of followup intents. Format: projects/<Project
     * ID>/agent/intents/<Intent ID>.
     */
    public readonly parentFollowupIntentName!: pulumi.Output<string>;
    /**
     * The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0,
     * the service translates the value to 500,000, which corresponds to the Normal priority in the console. - If the supplied
     * value is negative, the intent is ignored in runtime detect intent requests.
     */
    public readonly priority!: pulumi.Output<number>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Indicates whether to delete all contexts in the current session when this intent is matched.
     */
    public readonly resetContexts!: pulumi.Output<boolean>;
    /**
     * The unique identifier of the root intent in the chain of followup intents. It identifies the correct followup intents
     * chain for this intent. Format: projects/<Project ID>/agent/intents/<Intent ID>.
     */
    public /*out*/ readonly rootFollowupIntentName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DialogflowIntentTimeouts | undefined>;
    /**
     * Indicates whether webhooks are enabled for the intent. * WEBHOOK_STATE_ENABLED: Webhook is enabled in the agent and in
     * the intent. * WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING: Webhook is enabled in the agent and in the intent. Also, each slot
     * filling prompt is forwarded to the webhook. Possible values: ["WEBHOOK_STATE_ENABLED",
     * "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING"]
     */
    public readonly webhookState!: pulumi.Output<string>;

    /**
     * Create a DialogflowIntent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DialogflowIntentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DialogflowIntentArgs | DialogflowIntentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DialogflowIntentState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["defaultResponsePlatforms"] = state ? state.defaultResponsePlatforms : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["followupIntentInfos"] = state ? state.followupIntentInfos : undefined;
            resourceInputs["inputContextNames"] = state ? state.inputContextNames : undefined;
            resourceInputs["isFallback"] = state ? state.isFallback : undefined;
            resourceInputs["mlDisabled"] = state ? state.mlDisabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentFollowupIntentName"] = state ? state.parentFollowupIntentName : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["resetContexts"] = state ? state.resetContexts : undefined;
            resourceInputs["rootFollowupIntentName"] = state ? state.rootFollowupIntentName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["webhookState"] = state ? state.webhookState : undefined;
        } else {
            const args = argsOrState as DialogflowIntentArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["defaultResponsePlatforms"] = args ? args.defaultResponsePlatforms : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["inputContextNames"] = args ? args.inputContextNames : undefined;
            resourceInputs["isFallback"] = args ? args.isFallback : undefined;
            resourceInputs["mlDisabled"] = args ? args.mlDisabled : undefined;
            resourceInputs["parentFollowupIntentName"] = args ? args.parentFollowupIntentName : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["resetContexts"] = args ? args.resetContexts : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["webhookState"] = args ? args.webhookState : undefined;
            resourceInputs["followupIntentInfos"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["rootFollowupIntentName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DialogflowIntent.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DialogflowIntent resources.
 */
export interface DialogflowIntentState {
    /**
     * The name of the action associated with the intent. Note: The action name must not contain whitespaces.
     */
    action?: pulumi.Input<string>;
    /**
     * The list of platforms for which the first responses will be copied from the messages in PLATFORM_UNSPECIFIED (i.e.
     * default platform). Possible values: ["FACEBOOK", "SLACK", "TELEGRAM", "KIK", "SKYPE", "LINE", "VIBER",
     * "ACTIONS_ON_GOOGLE", "GOOGLE_HANGOUTS"]
     */
    defaultResponsePlatforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of this intent to be displayed on the console.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The collection of event names that trigger the intent. If the collection of input contexts is not empty, all of the
     * contexts must be present in the active user session for an event to trigger this intent. See the [events
     * reference](https://cloud.google.com/dialogflow/docs/events-overview) for more details.
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Information about all followup intents that have this intent as a direct or indirect parent. We populate this field only
     * in the output.
     */
    followupIntentInfos?: pulumi.Input<pulumi.Input<inputs.DialogflowIntentFollowupIntentInfo>[]>;
    /**
     * The list of context names required for this intent to be triggered. Format: projects/<Project
     * ID>/agent/sessions/-/contexts/<Context ID>.
     */
    inputContextNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether this is a fallback intent.
     */
    isFallback?: pulumi.Input<boolean>;
    /**
     * Indicates whether Machine Learning is disabled for the intent. Note: If mlDisabled setting is set to true, then this
     * intent is not taken into account during inference in ML ONLY match mode. Also, auto-markup in the UI is turned off.
     */
    mlDisabled?: pulumi.Input<boolean>;
    /**
     * The unique identifier of this intent. Format: projects/<Project ID>/agent/intents/<Intent ID>.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier of the parent intent in the chain of followup intents. Format: projects/<Project
     * ID>/agent/intents/<Intent ID>.
     */
    parentFollowupIntentName?: pulumi.Input<string>;
    /**
     * The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0,
     * the service translates the value to 500,000, which corresponds to the Normal priority in the console. - If the supplied
     * value is negative, the intent is ignored in runtime detect intent requests.
     */
    priority?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * Indicates whether to delete all contexts in the current session when this intent is matched.
     */
    resetContexts?: pulumi.Input<boolean>;
    /**
     * The unique identifier of the root intent in the chain of followup intents. It identifies the correct followup intents
     * chain for this intent. Format: projects/<Project ID>/agent/intents/<Intent ID>.
     */
    rootFollowupIntentName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DialogflowIntentTimeouts>;
    /**
     * Indicates whether webhooks are enabled for the intent. * WEBHOOK_STATE_ENABLED: Webhook is enabled in the agent and in
     * the intent. * WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING: Webhook is enabled in the agent and in the intent. Also, each slot
     * filling prompt is forwarded to the webhook. Possible values: ["WEBHOOK_STATE_ENABLED",
     * "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING"]
     */
    webhookState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DialogflowIntent resource.
 */
export interface DialogflowIntentArgs {
    /**
     * The name of the action associated with the intent. Note: The action name must not contain whitespaces.
     */
    action?: pulumi.Input<string>;
    /**
     * The list of platforms for which the first responses will be copied from the messages in PLATFORM_UNSPECIFIED (i.e.
     * default platform). Possible values: ["FACEBOOK", "SLACK", "TELEGRAM", "KIK", "SKYPE", "LINE", "VIBER",
     * "ACTIONS_ON_GOOGLE", "GOOGLE_HANGOUTS"]
     */
    defaultResponsePlatforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of this intent to be displayed on the console.
     */
    displayName: pulumi.Input<string>;
    /**
     * The collection of event names that trigger the intent. If the collection of input contexts is not empty, all of the
     * contexts must be present in the active user session for an event to trigger this intent. See the [events
     * reference](https://cloud.google.com/dialogflow/docs/events-overview) for more details.
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of context names required for this intent to be triggered. Format: projects/<Project
     * ID>/agent/sessions/-/contexts/<Context ID>.
     */
    inputContextNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether this is a fallback intent.
     */
    isFallback?: pulumi.Input<boolean>;
    /**
     * Indicates whether Machine Learning is disabled for the intent. Note: If mlDisabled setting is set to true, then this
     * intent is not taken into account during inference in ML ONLY match mode. Also, auto-markup in the UI is turned off.
     */
    mlDisabled?: pulumi.Input<boolean>;
    /**
     * The unique identifier of the parent intent in the chain of followup intents. Format: projects/<Project
     * ID>/agent/intents/<Intent ID>.
     */
    parentFollowupIntentName?: pulumi.Input<string>;
    /**
     * The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0,
     * the service translates the value to 500,000, which corresponds to the Normal priority in the console. - If the supplied
     * value is negative, the intent is ignored in runtime detect intent requests.
     */
    priority?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * Indicates whether to delete all contexts in the current session when this intent is matched.
     */
    resetContexts?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DialogflowIntentTimeouts>;
    /**
     * Indicates whether webhooks are enabled for the intent. * WEBHOOK_STATE_ENABLED: Webhook is enabled in the agent and in
     * the intent. * WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING: Webhook is enabled in the agent and in the intent. Also, each slot
     * filling prompt is forwarded to the webhook. Possible values: ["WEBHOOK_STATE_ENABLED",
     * "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING"]
     */
    webhookState?: pulumi.Input<string>;
}
