// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SccV2OrganizationMuteConfig extends pulumi.CustomResource {
    /**
     * Get an existing SccV2OrganizationMuteConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SccV2OrganizationMuteConfigState, opts?: pulumi.CustomResourceOptions): SccV2OrganizationMuteConfig {
        return new SccV2OrganizationMuteConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/sccV2OrganizationMuteConfig:SccV2OrganizationMuteConfig';

    /**
     * Returns true if the given object is an instance of SccV2OrganizationMuteConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SccV2OrganizationMuteConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SccV2OrganizationMuteConfig.__pulumiType;
    }

    /**
     * The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
     * creation.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A description of the mute config.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
     * be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
     * created under the project = Y scope, it might not match any findings.
     */
    public readonly filter!: pulumi.Output<string>;
    /**
     * location Id is provided by organization. If not provided, Use global as default.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
     * provided on config creation or update.
     */
    public /*out*/ readonly mostRecentEditor!: pulumi.Output<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     */
    public readonly muteConfigId!: pulumi.Output<string>;
    /**
     * Name of the mute config. Its format is organizations/{organization}/locations/global/muteConfigs/{configId},
     * folders/{folder}/locations/global/muteConfigs/{configId}, or projects/{project}/locations/global/muteConfigs/{configId}
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The organization whose Cloud Security Command Center the Mute Config lives in.
     */
    public readonly organization!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SccV2OrganizationMuteConfigTimeouts | undefined>;
    /**
     * The type of the mute config.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
     * ignored if provided on config creation or update.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a SccV2OrganizationMuteConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SccV2OrganizationMuteConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SccV2OrganizationMuteConfigArgs | SccV2OrganizationMuteConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SccV2OrganizationMuteConfigState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mostRecentEditor"] = state ? state.mostRecentEditor : undefined;
            resourceInputs["muteConfigId"] = state ? state.muteConfigId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as SccV2OrganizationMuteConfigArgs | undefined;
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.muteConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'muteConfigId'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["muteConfigId"] = args ? args.muteConfigId : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["mostRecentEditor"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SccV2OrganizationMuteConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SccV2OrganizationMuteConfig resources.
 */
export interface SccV2OrganizationMuteConfigState {
    /**
     * The time at which the mute config was created. This field is set by the server and will be ignored if provided on config
     * creation.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A description of the mute config.
     */
    description?: pulumi.Input<string>;
    /**
     * An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
     * be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
     * created under the project = Y scope, it might not match any findings.
     */
    filter?: pulumi.Input<string>;
    /**
     * location Id is provided by organization. If not provided, Use global as default.
     */
    location?: pulumi.Input<string>;
    /**
     * Email address of the user who last edited the mute config. This field is set by the server and will be ignored if
     * provided on config creation or update.
     */
    mostRecentEditor?: pulumi.Input<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     */
    muteConfigId?: pulumi.Input<string>;
    /**
     * Name of the mute config. Its format is organizations/{organization}/locations/global/muteConfigs/{configId},
     * folders/{folder}/locations/global/muteConfigs/{configId}, or projects/{project}/locations/global/muteConfigs/{configId}
     */
    name?: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Mute Config lives in.
     */
    organization?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SccV2OrganizationMuteConfigTimeouts>;
    /**
     * The type of the mute config.
     */
    type?: pulumi.Input<string>;
    /**
     * Output only. The most recent time at which the mute config was updated. This field is set by the server and will be
     * ignored if provided on config creation or update.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SccV2OrganizationMuteConfig resource.
 */
export interface SccV2OrganizationMuteConfigArgs {
    /**
     * A description of the mute config.
     */
    description?: pulumi.Input<string>;
    /**
     * An expression that defines the filter to apply across create/update events of findings. While creating a filter string,
     * be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is
     * created under the project = Y scope, it might not match any findings.
     */
    filter: pulumi.Input<string>;
    /**
     * location Id is provided by organization. If not provided, Use global as default.
     */
    location?: pulumi.Input<string>;
    /**
     * Unique identifier provided by the client within the parent scope.
     */
    muteConfigId: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Mute Config lives in.
     */
    organization: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SccV2OrganizationMuteConfigTimeouts>;
    /**
     * The type of the mute config.
     */
    type: pulumi.Input<string>;
}
