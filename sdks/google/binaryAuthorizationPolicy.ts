// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BinaryAuthorizationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing BinaryAuthorizationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BinaryAuthorizationPolicyState, opts?: pulumi.CustomResourceOptions): BinaryAuthorizationPolicy {
        return new BinaryAuthorizationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/binaryAuthorizationPolicy:BinaryAuthorizationPolicy';

    /**
     * Returns true if the given object is an instance of BinaryAuthorizationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BinaryAuthorizationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BinaryAuthorizationPolicy.__pulumiType;
    }

    /**
     * A whitelist of image patterns to exclude from admission rules. If an image's name matches a whitelist pattern, the
     * image's admission requests will always be permitted regardless of your admission rules.
     */
    public readonly admissionWhitelistPatterns!: pulumi.Output<outputs.BinaryAuthorizationPolicyAdmissionWhitelistPattern[] | undefined>;
    /**
     * Per-cluster admission rules. An admission rule specifies either that all container images used in a pod creation request
     * must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be
     * denied. There can be at most one admission rule per cluster spec. Identifier format: '{{location}}.{{clusterId}}'. A
     * location is either a compute zone (e.g. 'us-central1-a') or a region (e.g. 'us-central1').
     */
    public readonly clusterAdmissionRules!: pulumi.Output<outputs.BinaryAuthorizationPolicyClusterAdmissionRule[] | undefined>;
    /**
     * Default admission rule for a cluster without a per-cluster admission rule.
     */
    public readonly defaultAdmissionRule!: pulumi.Output<outputs.BinaryAuthorizationPolicyDefaultAdmissionRule>;
    /**
     * A descriptive comment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not
     * covered by the global policy will be subject to the project admission policy. Possible values: ["ENABLE", "DISABLE"]
     */
    public readonly globalPolicyEvaluationMode!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BinaryAuthorizationPolicyTimeouts | undefined>;

    /**
     * Create a BinaryAuthorizationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BinaryAuthorizationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BinaryAuthorizationPolicyArgs | BinaryAuthorizationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BinaryAuthorizationPolicyState | undefined;
            resourceInputs["admissionWhitelistPatterns"] = state ? state.admissionWhitelistPatterns : undefined;
            resourceInputs["clusterAdmissionRules"] = state ? state.clusterAdmissionRules : undefined;
            resourceInputs["defaultAdmissionRule"] = state ? state.defaultAdmissionRule : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["globalPolicyEvaluationMode"] = state ? state.globalPolicyEvaluationMode : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BinaryAuthorizationPolicyArgs | undefined;
            if ((!args || args.defaultAdmissionRule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultAdmissionRule'");
            }
            resourceInputs["admissionWhitelistPatterns"] = args ? args.admissionWhitelistPatterns : undefined;
            resourceInputs["clusterAdmissionRules"] = args ? args.clusterAdmissionRules : undefined;
            resourceInputs["defaultAdmissionRule"] = args ? args.defaultAdmissionRule : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["globalPolicyEvaluationMode"] = args ? args.globalPolicyEvaluationMode : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BinaryAuthorizationPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BinaryAuthorizationPolicy resources.
 */
export interface BinaryAuthorizationPolicyState {
    /**
     * A whitelist of image patterns to exclude from admission rules. If an image's name matches a whitelist pattern, the
     * image's admission requests will always be permitted regardless of your admission rules.
     */
    admissionWhitelistPatterns?: pulumi.Input<pulumi.Input<inputs.BinaryAuthorizationPolicyAdmissionWhitelistPattern>[]>;
    /**
     * Per-cluster admission rules. An admission rule specifies either that all container images used in a pod creation request
     * must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be
     * denied. There can be at most one admission rule per cluster spec. Identifier format: '{{location}}.{{clusterId}}'. A
     * location is either a compute zone (e.g. 'us-central1-a') or a region (e.g. 'us-central1').
     */
    clusterAdmissionRules?: pulumi.Input<pulumi.Input<inputs.BinaryAuthorizationPolicyClusterAdmissionRule>[]>;
    /**
     * Default admission rule for a cluster without a per-cluster admission rule.
     */
    defaultAdmissionRule?: pulumi.Input<inputs.BinaryAuthorizationPolicyDefaultAdmissionRule>;
    /**
     * A descriptive comment.
     */
    description?: pulumi.Input<string>;
    /**
     * Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not
     * covered by the global policy will be subject to the project admission policy. Possible values: ["ENABLE", "DISABLE"]
     */
    globalPolicyEvaluationMode?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BinaryAuthorizationPolicyTimeouts>;
}

/**
 * The set of arguments for constructing a BinaryAuthorizationPolicy resource.
 */
export interface BinaryAuthorizationPolicyArgs {
    /**
     * A whitelist of image patterns to exclude from admission rules. If an image's name matches a whitelist pattern, the
     * image's admission requests will always be permitted regardless of your admission rules.
     */
    admissionWhitelistPatterns?: pulumi.Input<pulumi.Input<inputs.BinaryAuthorizationPolicyAdmissionWhitelistPattern>[]>;
    /**
     * Per-cluster admission rules. An admission rule specifies either that all container images used in a pod creation request
     * must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be
     * denied. There can be at most one admission rule per cluster spec. Identifier format: '{{location}}.{{clusterId}}'. A
     * location is either a compute zone (e.g. 'us-central1-a') or a region (e.g. 'us-central1').
     */
    clusterAdmissionRules?: pulumi.Input<pulumi.Input<inputs.BinaryAuthorizationPolicyClusterAdmissionRule>[]>;
    /**
     * Default admission rule for a cluster without a per-cluster admission rule.
     */
    defaultAdmissionRule: pulumi.Input<inputs.BinaryAuthorizationPolicyDefaultAdmissionRule>;
    /**
     * A descriptive comment.
     */
    description?: pulumi.Input<string>;
    /**
     * Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not
     * covered by the global policy will be subject to the project admission policy. Possible values: ["ENABLE", "DISABLE"]
     */
    globalPolicyEvaluationMode?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BinaryAuthorizationPolicyTimeouts>;
}
