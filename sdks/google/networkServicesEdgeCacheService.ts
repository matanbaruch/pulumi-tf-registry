// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkServicesEdgeCacheService extends pulumi.CustomResource {
    /**
     * Get an existing NetworkServicesEdgeCacheService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkServicesEdgeCacheServiceState, opts?: pulumi.CustomResourceOptions): NetworkServicesEdgeCacheService {
        return new NetworkServicesEdgeCacheService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/networkServicesEdgeCacheService:NetworkServicesEdgeCacheService';

    /**
     * Returns true if the given object is an instance of NetworkServicesEdgeCacheService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkServicesEdgeCacheService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkServicesEdgeCacheService.__pulumiType;
    }

    /**
     * A human-readable description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Disables HTTP/2. HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use
     * and reduces connection setup overhead by sending multiple streams over the same connection. Some legacy HTTP clients may
     * have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from
     * being advertised and negotiated.
     */
    public readonly disableHttp2!: pulumi.Output<boolean | undefined>;
    /**
     * HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
     */
    public readonly disableQuic!: pulumi.Output<boolean>;
    /**
     * Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the
     * EdgeCacheService.
     */
    public readonly edgeSecurityPolicy!: pulumi.Output<string | undefined>;
    /**
     * URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService. Note
     * that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
     */
    public readonly edgeSslCertificates!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
     */
    public /*out*/ readonly ipv4Addresses!: pulumi.Output<string[]>;
    /**
     * The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
     */
    public /*out*/ readonly ipv6Addresses!: pulumi.Output<string[]>;
    /**
     * Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to
     * Cloud Logging.
     */
    public readonly logConfig!: pulumi.Output<outputs.NetworkServicesEdgeCacheServiceLogConfig | undefined>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
     * match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
     * characters must be a dash, underscore, letter or digit.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Require TLS (HTTPS) for all clients connecting to this service. Clients who connect over HTTP (port 80) will receive a
     * HTTP 301 to the same URL over HTTPS (port 443). You must have at least one (1) edgeSslCertificate specified to enable
     * this.
     */
    public readonly requireTls!: pulumi.Output<boolean>;
    /**
     * Defines how requests are routed, modified, cached and/or which origin content is filled from.
     */
    public readonly routing!: pulumi.Output<outputs.NetworkServicesEdgeCacheServiceRouting>;
    /**
     * URL of the SslPolicy resource that will be associated with the EdgeCacheService. If not set, the EdgeCacheService has no
     * SSL policy configured, and will default to the "COMPATIBLE" policy.
     */
    public readonly sslPolicy!: pulumi.Output<string | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkServicesEdgeCacheServiceTimeouts | undefined>;

    /**
     * Create a NetworkServicesEdgeCacheService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkServicesEdgeCacheServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkServicesEdgeCacheServiceArgs | NetworkServicesEdgeCacheServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkServicesEdgeCacheServiceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableHttp2"] = state ? state.disableHttp2 : undefined;
            resourceInputs["disableQuic"] = state ? state.disableQuic : undefined;
            resourceInputs["edgeSecurityPolicy"] = state ? state.edgeSecurityPolicy : undefined;
            resourceInputs["edgeSslCertificates"] = state ? state.edgeSslCertificates : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["ipv4Addresses"] = state ? state.ipv4Addresses : undefined;
            resourceInputs["ipv6Addresses"] = state ? state.ipv6Addresses : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["logConfig"] = state ? state.logConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["requireTls"] = state ? state.requireTls : undefined;
            resourceInputs["routing"] = state ? state.routing : undefined;
            resourceInputs["sslPolicy"] = state ? state.sslPolicy : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkServicesEdgeCacheServiceArgs | undefined;
            if ((!args || args.routing === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routing'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableHttp2"] = args ? args.disableHttp2 : undefined;
            resourceInputs["disableQuic"] = args ? args.disableQuic : undefined;
            resourceInputs["edgeSecurityPolicy"] = args ? args.edgeSecurityPolicy : undefined;
            resourceInputs["edgeSslCertificates"] = args ? args.edgeSslCertificates : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["logConfig"] = args ? args.logConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requireTls"] = args ? args.requireTls : undefined;
            resourceInputs["routing"] = args ? args.routing : undefined;
            resourceInputs["sslPolicy"] = args ? args.sslPolicy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["ipv4Addresses"] = undefined /*out*/;
            resourceInputs["ipv6Addresses"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkServicesEdgeCacheService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkServicesEdgeCacheService resources.
 */
export interface NetworkServicesEdgeCacheServiceState {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Disables HTTP/2. HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use
     * and reduces connection setup overhead by sending multiple streams over the same connection. Some legacy HTTP clients may
     * have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from
     * being advertised and negotiated.
     */
    disableHttp2?: pulumi.Input<boolean>;
    /**
     * HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
     */
    disableQuic?: pulumi.Input<boolean>;
    /**
     * Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the
     * EdgeCacheService.
     */
    edgeSecurityPolicy?: pulumi.Input<string>;
    /**
     * URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService. Note
     * that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
     */
    edgeSslCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
     */
    ipv4Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
     */
    ipv6Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to
     * Cloud Logging.
     */
    logConfig?: pulumi.Input<inputs.NetworkServicesEdgeCacheServiceLogConfig>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
     * match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
     * characters must be a dash, underscore, letter or digit.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Require TLS (HTTPS) for all clients connecting to this service. Clients who connect over HTTP (port 80) will receive a
     * HTTP 301 to the same URL over HTTPS (port 443). You must have at least one (1) edgeSslCertificate specified to enable
     * this.
     */
    requireTls?: pulumi.Input<boolean>;
    /**
     * Defines how requests are routed, modified, cached and/or which origin content is filled from.
     */
    routing?: pulumi.Input<inputs.NetworkServicesEdgeCacheServiceRouting>;
    /**
     * URL of the SslPolicy resource that will be associated with the EdgeCacheService. If not set, the EdgeCacheService has no
     * SSL policy configured, and will default to the "COMPATIBLE" policy.
     */
    sslPolicy?: pulumi.Input<string>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NetworkServicesEdgeCacheServiceTimeouts>;
}

/**
 * The set of arguments for constructing a NetworkServicesEdgeCacheService resource.
 */
export interface NetworkServicesEdgeCacheServiceArgs {
    /**
     * A human-readable description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Disables HTTP/2. HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use
     * and reduces connection setup overhead by sending multiple streams over the same connection. Some legacy HTTP clients may
     * have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from
     * being advertised and negotiated.
     */
    disableHttp2?: pulumi.Input<boolean>;
    /**
     * HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
     */
    disableQuic?: pulumi.Input<boolean>;
    /**
     * Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the
     * EdgeCacheService.
     */
    edgeSecurityPolicy?: pulumi.Input<string>;
    /**
     * URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService. Note
     * that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
     */
    edgeSslCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of label tags associated with the EdgeCache resource. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the logging options for the traffic served by this service. If logging is enabled, logs will be exported to
     * Cloud Logging.
     */
    logConfig?: pulumi.Input<inputs.NetworkServicesEdgeCacheServiceLogConfig>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-64 characters long, and
     * match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter, and all following
     * characters must be a dash, underscore, letter or digit.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Require TLS (HTTPS) for all clients connecting to this service. Clients who connect over HTTP (port 80) will receive a
     * HTTP 301 to the same URL over HTTPS (port 443). You must have at least one (1) edgeSslCertificate specified to enable
     * this.
     */
    requireTls?: pulumi.Input<boolean>;
    /**
     * Defines how requests are routed, modified, cached and/or which origin content is filled from.
     */
    routing: pulumi.Input<inputs.NetworkServicesEdgeCacheServiceRouting>;
    /**
     * URL of the SslPolicy resource that will be associated with the EdgeCacheService. If not set, the EdgeCacheService has no
     * SSL policy configured, and will default to the "COMPATIBLE" policy.
     */
    sslPolicy?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkServicesEdgeCacheServiceTimeouts>;
}
