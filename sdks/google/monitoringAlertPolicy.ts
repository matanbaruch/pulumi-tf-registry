// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitoringAlertPolicy extends pulumi.CustomResource {
    /**
     * Get an existing MonitoringAlertPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitoringAlertPolicyState, opts?: pulumi.CustomResourceOptions): MonitoringAlertPolicy {
        return new MonitoringAlertPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/monitoringAlertPolicy:MonitoringAlertPolicy';

    /**
     * Returns true if the given object is an instance of MonitoringAlertPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitoringAlertPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitoringAlertPolicy.__pulumiType;
    }

    /**
     * Control over how this alert policy's notification channels are notified.
     */
    public readonly alertStrategy!: pulumi.Output<outputs.MonitoringAlertPolicyAlertStrategy | undefined>;
    /**
     * How to combine the results of multiple conditions to determine if an incident should be opened. Possible values: ["AND",
     * "OR", "AND_WITH_MATCHING_RESOURCE"]
     */
    public readonly combiner!: pulumi.Output<string>;
    /**
     * A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
     * combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
     */
    public readonly conditions!: pulumi.Output<outputs.MonitoringAlertPolicyCondition[]>;
    /**
     * A read-only record of the creation of the alerting policy. If provided in a call to create or update, this field will be
     * ignored.
     */
    public /*out*/ readonly creationRecords!: pulumi.Output<outputs.MonitoringAlertPolicyCreationRecord[]>;
    /**
     * A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
     * don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
     * characters.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Documentation that is included with notifications and incidents related to this policy. Best practice is for the
     * documentation to include information to help responders understand, mitigate, escalate, and correct the underlying
     * problems detected by the alerting policy. Notification channels that have limited capacity might not show this
     * documentation.
     */
    public readonly documentation!: pulumi.Output<outputs.MonitoringAlertPolicyDocumentation | undefined>;
    /**
     * Whether or not the policy is enabled. The default is true.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The unique resource name for this policy. Its syntax is: projects/[PROJECT_ID]/alertPolicies/[ALERT_POLICY_ID]
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
     * new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
     * the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
     * in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
     */
    public readonly notificationChannels!: pulumi.Output<string[] | undefined>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will
     * be displayed on the Incident detail page and in notifications. Possible values: ["CRITICAL", "ERROR", "WARNING"]
     */
    public readonly severity!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MonitoringAlertPolicyTimeouts | undefined>;
    /**
     * This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
     * entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
     */
    public readonly userLabels!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a MonitoringAlertPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitoringAlertPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitoringAlertPolicyArgs | MonitoringAlertPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitoringAlertPolicyState | undefined;
            resourceInputs["alertStrategy"] = state ? state.alertStrategy : undefined;
            resourceInputs["combiner"] = state ? state.combiner : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["creationRecords"] = state ? state.creationRecords : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["documentation"] = state ? state.documentation : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationChannels"] = state ? state.notificationChannels : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userLabels"] = state ? state.userLabels : undefined;
        } else {
            const args = argsOrState as MonitoringAlertPolicyArgs | undefined;
            if ((!args || args.combiner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'combiner'");
            }
            if ((!args || args.conditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditions'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["alertStrategy"] = args ? args.alertStrategy : undefined;
            resourceInputs["combiner"] = args ? args.combiner : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["documentation"] = args ? args.documentation : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["notificationChannels"] = args ? args.notificationChannels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userLabels"] = args ? args.userLabels : undefined;
            resourceInputs["creationRecords"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitoringAlertPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitoringAlertPolicy resources.
 */
export interface MonitoringAlertPolicyState {
    /**
     * Control over how this alert policy's notification channels are notified.
     */
    alertStrategy?: pulumi.Input<inputs.MonitoringAlertPolicyAlertStrategy>;
    /**
     * How to combine the results of multiple conditions to determine if an incident should be opened. Possible values: ["AND",
     * "OR", "AND_WITH_MATCHING_RESOURCE"]
     */
    combiner?: pulumi.Input<string>;
    /**
     * A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
     * combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.MonitoringAlertPolicyCondition>[]>;
    /**
     * A read-only record of the creation of the alerting policy. If provided in a call to create or update, this field will be
     * ignored.
     */
    creationRecords?: pulumi.Input<pulumi.Input<inputs.MonitoringAlertPolicyCreationRecord>[]>;
    /**
     * A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
     * don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
     * characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Documentation that is included with notifications and incidents related to this policy. Best practice is for the
     * documentation to include information to help responders understand, mitigate, escalate, and correct the underlying
     * problems detected by the alerting policy. Notification channels that have limited capacity might not show this
     * documentation.
     */
    documentation?: pulumi.Input<inputs.MonitoringAlertPolicyDocumentation>;
    /**
     * Whether or not the policy is enabled. The default is true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The unique resource name for this policy. Its syntax is: projects/[PROJECT_ID]/alertPolicies/[ALERT_POLICY_ID]
     */
    name?: pulumi.Input<string>;
    /**
     * Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
     * new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
     * the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
     * in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
     */
    notificationChannels?: pulumi.Input<pulumi.Input<string>[]>;
    project?: pulumi.Input<string>;
    /**
     * The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will
     * be displayed on the Incident detail page and in notifications. Possible values: ["CRITICAL", "ERROR", "WARNING"]
     */
    severity?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitoringAlertPolicyTimeouts>;
    /**
     * This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
     * entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
     */
    userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a MonitoringAlertPolicy resource.
 */
export interface MonitoringAlertPolicyArgs {
    /**
     * Control over how this alert policy's notification channels are notified.
     */
    alertStrategy?: pulumi.Input<inputs.MonitoringAlertPolicyAlertStrategy>;
    /**
     * How to combine the results of multiple conditions to determine if an incident should be opened. Possible values: ["AND",
     * "OR", "AND_WITH_MATCHING_RESOURCE"]
     */
    combiner: pulumi.Input<string>;
    /**
     * A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
     * combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
     */
    conditions: pulumi.Input<pulumi.Input<inputs.MonitoringAlertPolicyCondition>[]>;
    /**
     * A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
     * don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
     * characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * Documentation that is included with notifications and incidents related to this policy. Best practice is for the
     * documentation to include information to help responders understand, mitigate, escalate, and correct the underlying
     * problems detected by the alerting policy. Notification channels that have limited capacity might not show this
     * documentation.
     */
    documentation?: pulumi.Input<inputs.MonitoringAlertPolicyDocumentation>;
    /**
     * Whether or not the policy is enabled. The default is true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
     * new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
     * the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
     * in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
     */
    notificationChannels?: pulumi.Input<pulumi.Input<string>[]>;
    project?: pulumi.Input<string>;
    /**
     * The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will
     * be displayed on the Incident detail page and in notifications. Possible values: ["CRITICAL", "ERROR", "WARNING"]
     */
    severity?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitoringAlertPolicyTimeouts>;
    /**
     * This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
     * entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
     * can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
     */
    userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
