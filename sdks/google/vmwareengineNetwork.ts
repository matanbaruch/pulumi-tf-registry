// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmwareengineNetwork extends pulumi.CustomResource {
    /**
     * Get an existing VmwareengineNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmwareengineNetworkState, opts?: pulumi.CustomResourceOptions): VmwareengineNetwork {
        return new VmwareengineNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/vmwareengineNetwork:VmwareengineNetwork';

    /**
     * Returns true if the given object is an instance of VmwareengineNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmwareengineNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmwareengineNetwork.__pulumiType;
    }

    /**
     * User-provided description for this VMware Engine network.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The location where the VMwareEngineNetwork should reside.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The ID of the VMwareEngineNetwork.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * State of the VMware Engine network.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VmwareengineNetworkTimeouts | undefined>;
    /**
     * VMware Engine network type. Possible values: ["LEGACY", "STANDARD"]
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * System-generated unique identifier for the resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * VMware Engine service VPC networks that provide connectivity from a private cloud to customer projects, the internet,
     * and other Google Cloud services.
     */
    public /*out*/ readonly vpcNetworks!: pulumi.Output<outputs.VmwareengineNetworkVpcNetwork[]>;

    /**
     * Create a VmwareengineNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmwareengineNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmwareengineNetworkArgs | VmwareengineNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmwareengineNetworkState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["vpcNetworks"] = state ? state.vpcNetworks : undefined;
        } else {
            const args = argsOrState as VmwareengineNetworkArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["vpcNetworks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmwareengineNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmwareengineNetwork resources.
 */
export interface VmwareengineNetworkState {
    /**
     * User-provided description for this VMware Engine network.
     */
    description?: pulumi.Input<string>;
    /**
     * The location where the VMwareEngineNetwork should reside.
     */
    location?: pulumi.Input<string>;
    /**
     * The ID of the VMwareEngineNetwork.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * State of the VMware Engine network.
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VmwareengineNetworkTimeouts>;
    /**
     * VMware Engine network type. Possible values: ["LEGACY", "STANDARD"]
     */
    type?: pulumi.Input<string>;
    /**
     * System-generated unique identifier for the resource.
     */
    uid?: pulumi.Input<string>;
    /**
     * VMware Engine service VPC networks that provide connectivity from a private cloud to customer projects, the internet,
     * and other Google Cloud services.
     */
    vpcNetworks?: pulumi.Input<pulumi.Input<inputs.VmwareengineNetworkVpcNetwork>[]>;
}

/**
 * The set of arguments for constructing a VmwareengineNetwork resource.
 */
export interface VmwareengineNetworkArgs {
    /**
     * User-provided description for this VMware Engine network.
     */
    description?: pulumi.Input<string>;
    /**
     * The location where the VMwareEngineNetwork should reside.
     */
    location: pulumi.Input<string>;
    /**
     * The ID of the VMwareEngineNetwork.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VmwareengineNetworkTimeouts>;
    /**
     * VMware Engine network type. Possible values: ["LEGACY", "STANDARD"]
     */
    type: pulumi.Input<string>;
}
