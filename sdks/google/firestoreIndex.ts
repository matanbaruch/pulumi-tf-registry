// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirestoreIndex extends pulumi.CustomResource {
    /**
     * Get an existing FirestoreIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirestoreIndexState, opts?: pulumi.CustomResourceOptions): FirestoreIndex {
        return new FirestoreIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/firestoreIndex:FirestoreIndex';

    /**
     * Returns true if the given object is an instance of FirestoreIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirestoreIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirestoreIndex.__pulumiType;
    }

    /**
     * The API scope at which a query is run. Default value: "ANY_API" Possible values: ["ANY_API", "DATASTORE_MODE_API"]
     */
    public readonly apiScope!: pulumi.Output<string | undefined>;
    /**
     * The collection being indexed.
     */
    public readonly collection!: pulumi.Output<string>;
    /**
     * The Firestore database id. Defaults to '"(default)"'.
     */
    public readonly database!: pulumi.Output<string | undefined>;
    /**
     * The fields supported by this index. The last non-stored field entry is always for the field path '__name__'. If, on
     * creation, '__name__' was not specified as the last field, it will be added automatically with the same direction as that
     * of the last field defined. If the final field in a composite index is not directional, the '__name__' will be ordered
     * '"ASCENDING"' (unless explicitly specified otherwise).
     */
    public readonly fields!: pulumi.Output<outputs.FirestoreIndexField[]>;
    /**
     * A server defined name for this index. Format:
     * 'projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/indexes/{{server_generated_id}}'
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The scope at which a query is run. Default value: "COLLECTION" Possible values: ["COLLECTION", "COLLECTION_GROUP",
     * "COLLECTION_RECURSIVE"]
     */
    public readonly queryScope!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.FirestoreIndexTimeouts | undefined>;

    /**
     * Create a FirestoreIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirestoreIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirestoreIndexArgs | FirestoreIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirestoreIndexState | undefined;
            resourceInputs["apiScope"] = state ? state.apiScope : undefined;
            resourceInputs["collection"] = state ? state.collection : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["queryScope"] = state ? state.queryScope : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FirestoreIndexArgs | undefined;
            if ((!args || args.collection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collection'");
            }
            if ((!args || args.fields === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fields'");
            }
            resourceInputs["apiScope"] = args ? args.apiScope : undefined;
            resourceInputs["collection"] = args ? args.collection : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["queryScope"] = args ? args.queryScope : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirestoreIndex.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirestoreIndex resources.
 */
export interface FirestoreIndexState {
    /**
     * The API scope at which a query is run. Default value: "ANY_API" Possible values: ["ANY_API", "DATASTORE_MODE_API"]
     */
    apiScope?: pulumi.Input<string>;
    /**
     * The collection being indexed.
     */
    collection?: pulumi.Input<string>;
    /**
     * The Firestore database id. Defaults to '"(default)"'.
     */
    database?: pulumi.Input<string>;
    /**
     * The fields supported by this index. The last non-stored field entry is always for the field path '__name__'. If, on
     * creation, '__name__' was not specified as the last field, it will be added automatically with the same direction as that
     * of the last field defined. If the final field in a composite index is not directional, the '__name__' will be ordered
     * '"ASCENDING"' (unless explicitly specified otherwise).
     */
    fields?: pulumi.Input<pulumi.Input<inputs.FirestoreIndexField>[]>;
    /**
     * A server defined name for this index. Format:
     * 'projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/indexes/{{server_generated_id}}'
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The scope at which a query is run. Default value: "COLLECTION" Possible values: ["COLLECTION", "COLLECTION_GROUP",
     * "COLLECTION_RECURSIVE"]
     */
    queryScope?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirestoreIndexTimeouts>;
}

/**
 * The set of arguments for constructing a FirestoreIndex resource.
 */
export interface FirestoreIndexArgs {
    /**
     * The API scope at which a query is run. Default value: "ANY_API" Possible values: ["ANY_API", "DATASTORE_MODE_API"]
     */
    apiScope?: pulumi.Input<string>;
    /**
     * The collection being indexed.
     */
    collection: pulumi.Input<string>;
    /**
     * The Firestore database id. Defaults to '"(default)"'.
     */
    database?: pulumi.Input<string>;
    /**
     * The fields supported by this index. The last non-stored field entry is always for the field path '__name__'. If, on
     * creation, '__name__' was not specified as the last field, it will be added automatically with the same direction as that
     * of the last field defined. If the final field in a composite index is not directional, the '__name__' will be ordered
     * '"ASCENDING"' (unless explicitly specified otherwise).
     */
    fields: pulumi.Input<pulumi.Input<inputs.FirestoreIndexField>[]>;
    project?: pulumi.Input<string>;
    /**
     * The scope at which a query is run. Default value: "COLLECTION" Possible values: ["COLLECTION", "COLLECTION_GROUP",
     * "COLLECTION_RECURSIVE"]
     */
    queryScope?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirestoreIndexTimeouts>;
}
