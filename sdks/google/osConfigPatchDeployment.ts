// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsConfigPatchDeployment extends pulumi.CustomResource {
    /**
     * Get an existing OsConfigPatchDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsConfigPatchDeploymentState, opts?: pulumi.CustomResourceOptions): OsConfigPatchDeployment {
        return new OsConfigPatchDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/osConfigPatchDeployment:OsConfigPatchDeployment';

    /**
     * Returns true if the given object is an instance of OsConfigPatchDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsConfigPatchDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsConfigPatchDeployment.__pulumiType;
    }

    /**
     * Time the patch deployment was created. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu" format,
     * accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the patch deployment. Length of the description is limited to 1024 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
     * digits, terminated by 's'. Example: "3.5s"
     */
    public readonly duration!: pulumi.Output<string | undefined>;
    /**
     * VM instances to patch.
     */
    public readonly instanceFilter!: pulumi.Output<outputs.OsConfigPatchDeploymentInstanceFilter>;
    /**
     * The last time a patch job was started by this deployment. Timestamp is in RFC3339 text format. A timestamp in RFC3339
     * UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly lastExecuteTime!: pulumi.Output<string>;
    /**
     * Unique name for the patch deployment resource in a project. The patch deployment name is in the form:
     * projects/{project_id}/patchDeployments/{patchDeploymentId}.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Schedule a one-time execution.
     */
    public readonly oneTimeSchedule!: pulumi.Output<outputs.OsConfigPatchDeploymentOneTimeSchedule | undefined>;
    /**
     * Patch configuration that is applied.
     */
    public readonly patchConfig!: pulumi.Output<outputs.OsConfigPatchDeploymentPatchConfig | undefined>;
    /**
     * A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only
     * lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with
     * a number or a letter. * Must be unique within the project.
     */
    public readonly patchDeploymentId!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Schedule recurring executions.
     */
    public readonly recurringSchedule!: pulumi.Output<outputs.OsConfigPatchDeploymentRecurringSchedule | undefined>;
    /**
     * Rollout strategy of the patch job.
     */
    public readonly rollout!: pulumi.Output<outputs.OsConfigPatchDeploymentRollout | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.OsConfigPatchDeploymentTimeouts | undefined>;
    /**
     * Time the patch deployment was last updated. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu"
     * format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a OsConfigPatchDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsConfigPatchDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsConfigPatchDeploymentArgs | OsConfigPatchDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsConfigPatchDeploymentState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["instanceFilter"] = state ? state.instanceFilter : undefined;
            resourceInputs["lastExecuteTime"] = state ? state.lastExecuteTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oneTimeSchedule"] = state ? state.oneTimeSchedule : undefined;
            resourceInputs["patchConfig"] = state ? state.patchConfig : undefined;
            resourceInputs["patchDeploymentId"] = state ? state.patchDeploymentId : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["recurringSchedule"] = state ? state.recurringSchedule : undefined;
            resourceInputs["rollout"] = state ? state.rollout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as OsConfigPatchDeploymentArgs | undefined;
            if ((!args || args.instanceFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceFilter'");
            }
            if ((!args || args.patchDeploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'patchDeploymentId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["instanceFilter"] = args ? args.instanceFilter : undefined;
            resourceInputs["oneTimeSchedule"] = args ? args.oneTimeSchedule : undefined;
            resourceInputs["patchConfig"] = args ? args.patchConfig : undefined;
            resourceInputs["patchDeploymentId"] = args ? args.patchDeploymentId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["recurringSchedule"] = args ? args.recurringSchedule : undefined;
            resourceInputs["rollout"] = args ? args.rollout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["lastExecuteTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsConfigPatchDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsConfigPatchDeployment resources.
 */
export interface OsConfigPatchDeploymentState {
    /**
     * Time the patch deployment was created. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu" format,
     * accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the patch deployment. Length of the description is limited to 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
     * digits, terminated by 's'. Example: "3.5s"
     */
    duration?: pulumi.Input<string>;
    /**
     * VM instances to patch.
     */
    instanceFilter?: pulumi.Input<inputs.OsConfigPatchDeploymentInstanceFilter>;
    /**
     * The last time a patch job was started by this deployment. Timestamp is in RFC3339 text format. A timestamp in RFC3339
     * UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    lastExecuteTime?: pulumi.Input<string>;
    /**
     * Unique name for the patch deployment resource in a project. The patch deployment name is in the form:
     * projects/{project_id}/patchDeployments/{patchDeploymentId}.
     */
    name?: pulumi.Input<string>;
    /**
     * Schedule a one-time execution.
     */
    oneTimeSchedule?: pulumi.Input<inputs.OsConfigPatchDeploymentOneTimeSchedule>;
    /**
     * Patch configuration that is applied.
     */
    patchConfig?: pulumi.Input<inputs.OsConfigPatchDeploymentPatchConfig>;
    /**
     * A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only
     * lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with
     * a number or a letter. * Must be unique within the project.
     */
    patchDeploymentId?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Schedule recurring executions.
     */
    recurringSchedule?: pulumi.Input<inputs.OsConfigPatchDeploymentRecurringSchedule>;
    /**
     * Rollout strategy of the patch job.
     */
    rollout?: pulumi.Input<inputs.OsConfigPatchDeploymentRollout>;
    timeouts?: pulumi.Input<inputs.OsConfigPatchDeploymentTimeouts>;
    /**
     * Time the patch deployment was last updated. Timestamp is in RFC3339 text format. A timestamp in RFC3339 UTC "Zulu"
     * format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OsConfigPatchDeployment resource.
 */
export interface OsConfigPatchDeploymentArgs {
    /**
     * Description of the patch deployment. Length of the description is limited to 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional
     * digits, terminated by 's'. Example: "3.5s"
     */
    duration?: pulumi.Input<string>;
    /**
     * VM instances to patch.
     */
    instanceFilter: pulumi.Input<inputs.OsConfigPatchDeploymentInstanceFilter>;
    /**
     * Schedule a one-time execution.
     */
    oneTimeSchedule?: pulumi.Input<inputs.OsConfigPatchDeploymentOneTimeSchedule>;
    /**
     * Patch configuration that is applied.
     */
    patchConfig?: pulumi.Input<inputs.OsConfigPatchDeploymentPatchConfig>;
    /**
     * A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only
     * lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with
     * a number or a letter. * Must be unique within the project.
     */
    patchDeploymentId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Schedule recurring executions.
     */
    recurringSchedule?: pulumi.Input<inputs.OsConfigPatchDeploymentRecurringSchedule>;
    /**
     * Rollout strategy of the patch job.
     */
    rollout?: pulumi.Input<inputs.OsConfigPatchDeploymentRollout>;
    timeouts?: pulumi.Input<inputs.OsConfigPatchDeploymentTimeouts>;
}
