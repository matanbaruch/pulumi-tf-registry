// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VertexAiFeatureOnlineStoreFeatureview extends pulumi.CustomResource {
    /**
     * Get an existing VertexAiFeatureOnlineStoreFeatureview resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VertexAiFeatureOnlineStoreFeatureviewState, opts?: pulumi.CustomResourceOptions): VertexAiFeatureOnlineStoreFeatureview {
        return new VertexAiFeatureOnlineStoreFeatureview(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/vertexAiFeatureOnlineStoreFeatureview:VertexAiFeatureOnlineStoreFeatureview';

    /**
     * Returns true if the given object is an instance of VertexAiFeatureOnlineStoreFeatureview.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VertexAiFeatureOnlineStoreFeatureview {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VertexAiFeatureOnlineStoreFeatureview.__pulumiType;
    }

    /**
     * Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
     */
    public readonly bigQuerySource!: pulumi.Output<outputs.VertexAiFeatureOnlineStoreFeatureviewBigQuerySource | undefined>;
    /**
     * The timestamp of when the featureOnlinestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
     * to nine fractional digits.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly effectiveLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the FeatureOnlineStore to use for the featureview.
     */
    public readonly featureOnlineStore!: pulumi.Output<string>;
    /**
     * Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
     */
    public readonly featureRegistrySource!: pulumi.Output<outputs.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySource | undefined>;
    /**
     * A set of key/value label pairs to assign to this FeatureView. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character
     * cannot be a number.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The region for the resource. It should be the same as the featureonlinestore region.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for
     * each entityId of this FeatureView are made ready for online serving.
     */
    public readonly syncConfig!: pulumi.Output<outputs.VertexAiFeatureOnlineStoreFeatureviewSyncConfig | undefined>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    public /*out*/ readonly terraformLabels!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.VertexAiFeatureOnlineStoreFeatureviewTimeouts | undefined>;
    /**
     * The timestamp of when the featureOnlinestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution
     * and up to nine fractional digits.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a VertexAiFeatureOnlineStoreFeatureview resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VertexAiFeatureOnlineStoreFeatureviewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VertexAiFeatureOnlineStoreFeatureviewArgs | VertexAiFeatureOnlineStoreFeatureviewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VertexAiFeatureOnlineStoreFeatureviewState | undefined;
            resourceInputs["bigQuerySource"] = state ? state.bigQuerySource : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveLabels"] = state ? state.effectiveLabels : undefined;
            resourceInputs["featureOnlineStore"] = state ? state.featureOnlineStore : undefined;
            resourceInputs["featureRegistrySource"] = state ? state.featureRegistrySource : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["syncConfig"] = state ? state.syncConfig : undefined;
            resourceInputs["terraformLabels"] = state ? state.terraformLabels : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as VertexAiFeatureOnlineStoreFeatureviewArgs | undefined;
            if ((!args || args.featureOnlineStore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureOnlineStore'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["bigQuerySource"] = args ? args.bigQuerySource : undefined;
            resourceInputs["featureOnlineStore"] = args ? args.featureOnlineStore : undefined;
            resourceInputs["featureRegistrySource"] = args ? args.featureRegistrySource : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["syncConfig"] = args ? args.syncConfig : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["effectiveLabels"] = undefined /*out*/;
            resourceInputs["terraformLabels"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VertexAiFeatureOnlineStoreFeatureview.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VertexAiFeatureOnlineStoreFeatureview resources.
 */
export interface VertexAiFeatureOnlineStoreFeatureviewState {
    /**
     * Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
     */
    bigQuerySource?: pulumi.Input<inputs.VertexAiFeatureOnlineStoreFeatureviewBigQuerySource>;
    /**
     * The timestamp of when the featureOnlinestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
     * to nine fractional digits.
     */
    createTime?: pulumi.Input<string>;
    effectiveLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the FeatureOnlineStore to use for the featureview.
     */
    featureOnlineStore?: pulumi.Input<string>;
    /**
     * Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
     */
    featureRegistrySource?: pulumi.Input<inputs.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySource>;
    /**
     * A set of key/value label pairs to assign to this FeatureView. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character
     * cannot be a number.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region for the resource. It should be the same as the featureonlinestore region.
     */
    region?: pulumi.Input<string>;
    /**
     * Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for
     * each entityId of this FeatureView are made ready for online serving.
     */
    syncConfig?: pulumi.Input<inputs.VertexAiFeatureOnlineStoreFeatureviewSyncConfig>;
    /**
     * The combination of labels configured directly on the resource and default labels configured on the provider.
     */
    terraformLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VertexAiFeatureOnlineStoreFeatureviewTimeouts>;
    /**
     * The timestamp of when the featureOnlinestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution
     * and up to nine fractional digits.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VertexAiFeatureOnlineStoreFeatureview resource.
 */
export interface VertexAiFeatureOnlineStoreFeatureviewArgs {
    /**
     * Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
     */
    bigQuerySource?: pulumi.Input<inputs.VertexAiFeatureOnlineStoreFeatureviewBigQuerySource>;
    /**
     * The name of the FeatureOnlineStore to use for the featureview.
     */
    featureOnlineStore: pulumi.Input<string>;
    /**
     * Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
     */
    featureRegistrySource?: pulumi.Input<inputs.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySource>;
    /**
     * A set of key/value label pairs to assign to this FeatureView. **Note**: This field is non-authoritative, and will only
     * manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
     * present on the resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character
     * cannot be a number.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The region for the resource. It should be the same as the featureonlinestore region.
     */
    region: pulumi.Input<string>;
    /**
     * Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for
     * each entityId of this FeatureView are made ready for online serving.
     */
    syncConfig?: pulumi.Input<inputs.VertexAiFeatureOnlineStoreFeatureviewSyncConfig>;
    timeouts?: pulumi.Input<inputs.VertexAiFeatureOnlineStoreFeatureviewTimeouts>;
}
