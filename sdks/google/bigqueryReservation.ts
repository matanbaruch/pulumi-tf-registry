// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BigqueryReservation extends pulumi.CustomResource {
    /**
     * Get an existing BigqueryReservation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BigqueryReservationState, opts?: pulumi.CustomResourceOptions): BigqueryReservation {
        return new BigqueryReservation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/bigqueryReservation:BigqueryReservation';

    /**
     * Returns true if the given object is an instance of BigqueryReservation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BigqueryReservation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BigqueryReservation.__pulumiType;
    }

    /**
     * The configuration parameters for the auto scaling feature.
     */
    public readonly autoscale!: pulumi.Output<outputs.BigqueryReservationAutoscale | undefined>;
    /**
     * Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to
     * asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that
     * concurrency will be automatically set based on the reservation size.
     */
    public readonly concurrency!: pulumi.Output<number | undefined>;
    /**
     * The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
     */
    public readonly edition!: pulumi.Output<string>;
    /**
     * If false, any query using this reservation will use idle slots from other reservations within the same admin project. If
     * true, a query using this reservation will execute with the slot capacity specified above at most.
     */
    public readonly ignoreIdleSlots!: pulumi.Output<boolean | undefined>;
    /**
     * The geographic location where the transfer config should reside. Examples: US, EU, asia-northeast1. The default value is
     * US.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The name of the reservation. This field must only contain alphanumeric characters or dash.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the unit
     * of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
     */
    public readonly slotCapacity!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.BigqueryReservationTimeouts | undefined>;

    /**
     * Create a BigqueryReservation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BigqueryReservationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BigqueryReservationArgs | BigqueryReservationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BigqueryReservationState | undefined;
            resourceInputs["autoscale"] = state ? state.autoscale : undefined;
            resourceInputs["concurrency"] = state ? state.concurrency : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["ignoreIdleSlots"] = state ? state.ignoreIdleSlots : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["slotCapacity"] = state ? state.slotCapacity : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BigqueryReservationArgs | undefined;
            if ((!args || args.slotCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slotCapacity'");
            }
            resourceInputs["autoscale"] = args ? args.autoscale : undefined;
            resourceInputs["concurrency"] = args ? args.concurrency : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["ignoreIdleSlots"] = args ? args.ignoreIdleSlots : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["slotCapacity"] = args ? args.slotCapacity : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BigqueryReservation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BigqueryReservation resources.
 */
export interface BigqueryReservationState {
    /**
     * The configuration parameters for the auto scaling feature.
     */
    autoscale?: pulumi.Input<inputs.BigqueryReservationAutoscale>;
    /**
     * Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to
     * asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that
     * concurrency will be automatically set based on the reservation size.
     */
    concurrency?: pulumi.Input<number>;
    /**
     * The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
     */
    edition?: pulumi.Input<string>;
    /**
     * If false, any query using this reservation will use idle slots from other reservations within the same admin project. If
     * true, a query using this reservation will execute with the slot capacity specified above at most.
     */
    ignoreIdleSlots?: pulumi.Input<boolean>;
    /**
     * The geographic location where the transfer config should reside. Examples: US, EU, asia-northeast1. The default value is
     * US.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the reservation. This field must only contain alphanumeric characters or dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the unit
     * of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
     */
    slotCapacity?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.BigqueryReservationTimeouts>;
}

/**
 * The set of arguments for constructing a BigqueryReservation resource.
 */
export interface BigqueryReservationArgs {
    /**
     * The configuration parameters for the auto scaling feature.
     */
    autoscale?: pulumi.Input<inputs.BigqueryReservationAutoscale>;
    /**
     * Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to
     * asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that
     * concurrency will be automatically set based on the reservation size.
     */
    concurrency?: pulumi.Input<number>;
    /**
     * The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
     */
    edition?: pulumi.Input<string>;
    /**
     * If false, any query using this reservation will use idle slots from other reservations within the same admin project. If
     * true, a query using this reservation will execute with the slot capacity specified above at most.
     */
    ignoreIdleSlots?: pulumi.Input<boolean>;
    /**
     * The geographic location where the transfer config should reside. Examples: US, EU, asia-northeast1. The default value is
     * US.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the reservation. This field must only contain alphanumeric characters or dash.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the unit
     * of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
     */
    slotCapacity: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.BigqueryReservationTimeouts>;
}
