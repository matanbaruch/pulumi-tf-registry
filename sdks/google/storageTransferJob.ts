// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageTransferJob extends pulumi.CustomResource {
    /**
     * Get an existing StorageTransferJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageTransferJobState, opts?: pulumi.CustomResourceOptions): StorageTransferJob {
        return new StorageTransferJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google:index/storageTransferJob:StorageTransferJob';

    /**
     * Returns true if the given object is an instance of StorageTransferJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageTransferJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageTransferJob.__pulumiType;
    }

    /**
     * When the Transfer Job was created.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * When the Transfer Job was deleted.
     */
    public /*out*/ readonly deletionTime!: pulumi.Output<string>;
    /**
     * Unique description to identify the Transfer Job.
     */
    public readonly description!: pulumi.Output<string>;
    public readonly eventStream!: pulumi.Output<outputs.StorageTransferJobEventStream | undefined>;
    /**
     * When the Transfer Job was last modified.
     */
    public /*out*/ readonly lastModificationTime!: pulumi.Output<string>;
    /**
     * The name of the Transfer Job.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notification configuration.
     */
    public readonly notificationConfig!: pulumi.Output<outputs.StorageTransferJobNotificationConfig | undefined>;
    /**
     * The project in which the resource belongs. If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run.
     */
    public readonly schedule!: pulumi.Output<outputs.StorageTransferJobSchedule | undefined>;
    /**
     * Status of the job. Default: ENABLED. NOTE: The effect of the new job status takes place during a subsequent job run. For
     * example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the
     * status change would not affect the current operation.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Transfer specification.
     */
    public readonly transferSpec!: pulumi.Output<outputs.StorageTransferJobTransferSpec>;

    /**
     * Create a StorageTransferJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageTransferJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageTransferJobArgs | StorageTransferJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageTransferJobState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["deletionTime"] = state ? state.deletionTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventStream"] = state ? state.eventStream : undefined;
            resourceInputs["lastModificationTime"] = state ? state.lastModificationTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationConfig"] = state ? state.notificationConfig : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["transferSpec"] = state ? state.transferSpec : undefined;
        } else {
            const args = argsOrState as StorageTransferJobArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.transferSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transferSpec'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventStream"] = args ? args.eventStream : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationConfig"] = args ? args.notificationConfig : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["transferSpec"] = args ? args.transferSpec : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["deletionTime"] = undefined /*out*/;
            resourceInputs["lastModificationTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageTransferJob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageTransferJob resources.
 */
export interface StorageTransferJobState {
    /**
     * When the Transfer Job was created.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * When the Transfer Job was deleted.
     */
    deletionTime?: pulumi.Input<string>;
    /**
     * Unique description to identify the Transfer Job.
     */
    description?: pulumi.Input<string>;
    eventStream?: pulumi.Input<inputs.StorageTransferJobEventStream>;
    /**
     * When the Transfer Job was last modified.
     */
    lastModificationTime?: pulumi.Input<string>;
    /**
     * The name of the Transfer Job.
     */
    name?: pulumi.Input<string>;
    /**
     * Notification configuration.
     */
    notificationConfig?: pulumi.Input<inputs.StorageTransferJobNotificationConfig>;
    /**
     * The project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run.
     */
    schedule?: pulumi.Input<inputs.StorageTransferJobSchedule>;
    /**
     * Status of the job. Default: ENABLED. NOTE: The effect of the new job status takes place during a subsequent job run. For
     * example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the
     * status change would not affect the current operation.
     */
    status?: pulumi.Input<string>;
    /**
     * Transfer specification.
     */
    transferSpec?: pulumi.Input<inputs.StorageTransferJobTransferSpec>;
}

/**
 * The set of arguments for constructing a StorageTransferJob resource.
 */
export interface StorageTransferJobArgs {
    /**
     * Unique description to identify the Transfer Job.
     */
    description: pulumi.Input<string>;
    eventStream?: pulumi.Input<inputs.StorageTransferJobEventStream>;
    /**
     * The name of the Transfer Job.
     */
    name?: pulumi.Input<string>;
    /**
     * Notification configuration.
     */
    notificationConfig?: pulumi.Input<inputs.StorageTransferJobNotificationConfig>;
    /**
     * The project in which the resource belongs. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run.
     */
    schedule?: pulumi.Input<inputs.StorageTransferJobSchedule>;
    /**
     * Status of the job. Default: ENABLED. NOTE: The effect of the new job status takes place during a subsequent job run. For
     * example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the
     * status change would not affect the current operation.
     */
    status?: pulumi.Input<string>;
    /**
     * Transfer specification.
     */
    transferSpec: pulumi.Input<inputs.StorageTransferJobTransferSpec>;
}
