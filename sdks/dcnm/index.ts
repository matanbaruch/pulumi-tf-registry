// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetInterfaceArgs, GetInterfaceResult, GetInterfaceOutputArgs } from "./getInterface";
export const getInterface: typeof import("./getInterface").getInterface = null as any;
export const getInterfaceOutput: typeof import("./getInterface").getInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getInterface","getInterfaceOutput"], () => require("./getInterface"));

export { GetInventoryArgs, GetInventoryResult, GetInventoryOutputArgs } from "./getInventory";
export const getInventory: typeof import("./getInventory").getInventory = null as any;
export const getInventoryOutput: typeof import("./getInventory").getInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getInventory","getInventoryOutput"], () => require("./getInventory"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetRoutePeeringArgs, GetRoutePeeringResult, GetRoutePeeringOutputArgs } from "./getRoutePeering";
export const getRoutePeering: typeof import("./getRoutePeering").getRoutePeering = null as any;
export const getRoutePeeringOutput: typeof import("./getRoutePeering").getRoutePeeringOutput = null as any;
utilities.lazyLoad(exports, ["getRoutePeering","getRoutePeeringOutput"], () => require("./getRoutePeering"));

export { GetServiceNodeArgs, GetServiceNodeResult, GetServiceNodeOutputArgs } from "./getServiceNode";
export const getServiceNode: typeof import("./getServiceNode").getServiceNode = null as any;
export const getServiceNodeOutput: typeof import("./getServiceNode").getServiceNodeOutput = null as any;
utilities.lazyLoad(exports, ["getServiceNode","getServiceNodeOutput"], () => require("./getServiceNode"));

export { GetServicePolicyArgs, GetServicePolicyResult, GetServicePolicyOutputArgs } from "./getServicePolicy";
export const getServicePolicy: typeof import("./getServicePolicy").getServicePolicy = null as any;
export const getServicePolicyOutput: typeof import("./getServicePolicy").getServicePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServicePolicy","getServicePolicyOutput"], () => require("./getServicePolicy"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetVrfArgs, GetVrfResult, GetVrfOutputArgs } from "./getVrf";
export const getVrf: typeof import("./getVrf").getVrf = null as any;
export const getVrfOutput: typeof import("./getVrf").getVrfOutput = null as any;
utilities.lazyLoad(exports, ["getVrf","getVrfOutput"], () => require("./getVrf"));

export { InterfaceArgs, InterfaceState } from "./interface";
export type Interface = import("./interface").Interface;
export const Interface: typeof import("./interface").Interface = null as any;
utilities.lazyLoad(exports, ["Interface"], () => require("./interface"));

export { InventoryArgs, InventoryState } from "./inventory";
export type Inventory = import("./inventory").Inventory;
export const Inventory: typeof import("./inventory").Inventory = null as any;
utilities.lazyLoad(exports, ["Inventory"], () => require("./inventory"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RestArgs, RestState } from "./rest";
export type Rest = import("./rest").Rest;
export const Rest: typeof import("./rest").Rest = null as any;
utilities.lazyLoad(exports, ["Rest"], () => require("./rest"));

export { RoutePeeringArgs, RoutePeeringState } from "./routePeering";
export type RoutePeering = import("./routePeering").RoutePeering;
export const RoutePeering: typeof import("./routePeering").RoutePeering = null as any;
utilities.lazyLoad(exports, ["RoutePeering"], () => require("./routePeering"));

export { ServiceNodeArgs, ServiceNodeState } from "./serviceNode";
export type ServiceNode = import("./serviceNode").ServiceNode;
export const ServiceNode: typeof import("./serviceNode").ServiceNode = null as any;
utilities.lazyLoad(exports, ["ServiceNode"], () => require("./serviceNode"));

export { ServicePolicyArgs, ServicePolicyState } from "./servicePolicy";
export type ServicePolicy = import("./servicePolicy").ServicePolicy;
export const ServicePolicy: typeof import("./servicePolicy").ServicePolicy = null as any;
utilities.lazyLoad(exports, ["ServicePolicy"], () => require("./servicePolicy"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { VrfArgs, VrfState } from "./vrf";
export type Vrf = import("./vrf").Vrf;
export const Vrf: typeof import("./vrf").Vrf = null as any;
utilities.lazyLoad(exports, ["Vrf"], () => require("./vrf"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "dcnm:index/interface:Interface":
                return new Interface(name, <any>undefined, { urn })
            case "dcnm:index/inventory:Inventory":
                return new Inventory(name, <any>undefined, { urn })
            case "dcnm:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "dcnm:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "dcnm:index/rest:Rest":
                return new Rest(name, <any>undefined, { urn })
            case "dcnm:index/routePeering:RoutePeering":
                return new RoutePeering(name, <any>undefined, { urn })
            case "dcnm:index/serviceNode:ServiceNode":
                return new ServiceNode(name, <any>undefined, { urn })
            case "dcnm:index/servicePolicy:ServicePolicy":
                return new ServicePolicy(name, <any>undefined, { urn })
            case "dcnm:index/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "dcnm:index/vrf:Vrf":
                return new Vrf(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("dcnm", "index/interface", _module)
pulumi.runtime.registerResourceModule("dcnm", "index/inventory", _module)
pulumi.runtime.registerResourceModule("dcnm", "index/network", _module)
pulumi.runtime.registerResourceModule("dcnm", "index/policy", _module)
pulumi.runtime.registerResourceModule("dcnm", "index/rest", _module)
pulumi.runtime.registerResourceModule("dcnm", "index/routePeering", _module)
pulumi.runtime.registerResourceModule("dcnm", "index/serviceNode", _module)
pulumi.runtime.registerResourceModule("dcnm", "index/servicePolicy", _module)
pulumi.runtime.registerResourceModule("dcnm", "index/template", _module)
pulumi.runtime.registerResourceModule("dcnm", "index/vrf", _module)
pulumi.runtime.registerResourcePackage("dcnm", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:dcnm") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
