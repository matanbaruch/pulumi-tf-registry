// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getServicePolicy(args: GetServicePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetServicePolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dcnm:index/getServicePolicy:getServicePolicy", {
        "attachedFabric": args.attachedFabric,
        "deploy": args.deploy,
        "destNetwork": args.destNetwork,
        "destPort": args.destPort,
        "destVrfName": args.destVrfName,
        "fwdDirection": args.fwdDirection,
        "id": args.id,
        "nextHopAction": args.nextHopAction,
        "nextHopIp": args.nextHopIp,
        "peeringName": args.peeringName,
        "policyName": args.policyName,
        "policyTemplateName": args.policyTemplateName,
        "protocol": args.protocol,
        "reverseEnabled": args.reverseEnabled,
        "reverseNextHopIp": args.reverseNextHopIp,
        "routeMapAction": args.routeMapAction,
        "serviceFabric": args.serviceFabric,
        "serviceNodeName": args.serviceNodeName,
        "serviceNodeType": args.serviceNodeType,
        "sourceNetwork": args.sourceNetwork,
        "sourceVrfName": args.sourceVrfName,
        "srcPort": args.srcPort,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServicePolicy.
 */
export interface GetServicePolicyArgs {
    attachedFabric: string;
    deploy?: boolean;
    destNetwork?: string;
    destPort?: string;
    destVrfName?: string;
    fwdDirection?: boolean;
    id?: string;
    nextHopAction?: string;
    nextHopIp?: string;
    peeringName?: string;
    policyName: string;
    policyTemplateName?: string;
    protocol?: string;
    reverseEnabled?: boolean;
    reverseNextHopIp?: string;
    routeMapAction?: string;
    serviceFabric: string;
    serviceNodeName: string;
    serviceNodeType?: string;
    sourceNetwork?: string;
    sourceVrfName?: string;
    srcPort?: string;
}

/**
 * A collection of values returned by getServicePolicy.
 */
export interface GetServicePolicyResult {
    readonly attachedFabric: string;
    readonly deploy: boolean;
    readonly destNetwork: string;
    readonly destPort: string;
    readonly destVrfName: string;
    readonly fwdDirection: boolean;
    readonly id: string;
    readonly nextHopAction: string;
    readonly nextHopIp: string;
    readonly peeringName: string;
    readonly policyName: string;
    readonly policyTemplateName: string;
    readonly protocol: string;
    readonly reverseEnabled: boolean;
    readonly reverseNextHopIp: string;
    readonly routeMapAction: string;
    readonly serviceFabric: string;
    readonly serviceNodeName: string;
    readonly serviceNodeType: string;
    readonly sourceNetwork: string;
    readonly sourceVrfName: string;
    readonly srcPort: string;
}
export function getServicePolicyOutput(args: GetServicePolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServicePolicyResult> {
    return pulumi.output(args).apply((a: any) => getServicePolicy(a, opts))
}

/**
 * A collection of arguments for invoking getServicePolicy.
 */
export interface GetServicePolicyOutputArgs {
    attachedFabric: pulumi.Input<string>;
    deploy?: pulumi.Input<boolean>;
    destNetwork?: pulumi.Input<string>;
    destPort?: pulumi.Input<string>;
    destVrfName?: pulumi.Input<string>;
    fwdDirection?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    nextHopAction?: pulumi.Input<string>;
    nextHopIp?: pulumi.Input<string>;
    peeringName?: pulumi.Input<string>;
    policyName: pulumi.Input<string>;
    policyTemplateName?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    reverseEnabled?: pulumi.Input<boolean>;
    reverseNextHopIp?: pulumi.Input<string>;
    routeMapAction?: pulumi.Input<string>;
    serviceFabric: pulumi.Input<string>;
    serviceNodeName: pulumi.Input<string>;
    serviceNodeType?: pulumi.Input<string>;
    sourceNetwork?: pulumi.Input<string>;
    sourceVrfName?: pulumi.Input<string>;
    srcPort?: pulumi.Input<string>;
}
