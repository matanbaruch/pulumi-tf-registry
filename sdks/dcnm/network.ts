// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dcnm:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    public readonly arpSuppFlag!: pulumi.Output<boolean>;
    public readonly attachments!: pulumi.Output<outputs.NetworkAttachment[] | undefined>;
    public readonly deploy!: pulumi.Output<boolean | undefined>;
    public readonly deployTimeout!: pulumi.Output<number | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly dhcp1!: pulumi.Output<string | undefined>;
    public readonly dhcp2!: pulumi.Output<string | undefined>;
    public readonly dhcp3!: pulumi.Output<string | undefined>;
    public readonly dhcpVrf!: pulumi.Output<string | undefined>;
    public readonly dhcpVrf2!: pulumi.Output<string | undefined>;
    public readonly dhcpVrf3!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly extensionTemplate!: pulumi.Output<string | undefined>;
    public readonly fabricName!: pulumi.Output<string>;
    public readonly ipv4Gateway!: pulumi.Output<string>;
    public readonly ipv6Gateway!: pulumi.Output<string>;
    public readonly irEnableFlag!: pulumi.Output<boolean>;
    public readonly l2OnlyFlag!: pulumi.Output<boolean>;
    public readonly l3GatewayFlag!: pulumi.Output<boolean>;
    public readonly loopbackId!: pulumi.Output<number | undefined>;
    public readonly mcastGroup!: pulumi.Output<string>;
    public readonly mtu!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly netflowFlag!: pulumi.Output<boolean | undefined>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly nveId!: pulumi.Output<number | undefined>;
    public readonly rtBothFlag!: pulumi.Output<boolean>;
    public readonly secondaryGw1!: pulumi.Output<string>;
    public readonly secondaryGw2!: pulumi.Output<string>;
    public readonly secondaryGw3!: pulumi.Output<string>;
    public readonly secondaryGw4!: pulumi.Output<string>;
    public readonly serviceTemplate!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string>;
    public readonly sviNetflowMonitor!: pulumi.Output<string>;
    public readonly tag!: pulumi.Output<string>;
    public readonly template!: pulumi.Output<string | undefined>;
    public readonly trmEnableFlag!: pulumi.Output<boolean>;
    public readonly vlanId!: pulumi.Output<number>;
    public readonly vlanName!: pulumi.Output<string>;
    public readonly vlanNetflowMonitor!: pulumi.Output<string>;
    public readonly vrfName!: pulumi.Output<string | undefined>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["arpSuppFlag"] = state ? state.arpSuppFlag : undefined;
            resourceInputs["attachments"] = state ? state.attachments : undefined;
            resourceInputs["deploy"] = state ? state.deploy : undefined;
            resourceInputs["deployTimeout"] = state ? state.deployTimeout : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcp1"] = state ? state.dhcp1 : undefined;
            resourceInputs["dhcp2"] = state ? state.dhcp2 : undefined;
            resourceInputs["dhcp3"] = state ? state.dhcp3 : undefined;
            resourceInputs["dhcpVrf"] = state ? state.dhcpVrf : undefined;
            resourceInputs["dhcpVrf2"] = state ? state.dhcpVrf2 : undefined;
            resourceInputs["dhcpVrf3"] = state ? state.dhcpVrf3 : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["extensionTemplate"] = state ? state.extensionTemplate : undefined;
            resourceInputs["fabricName"] = state ? state.fabricName : undefined;
            resourceInputs["ipv4Gateway"] = state ? state.ipv4Gateway : undefined;
            resourceInputs["ipv6Gateway"] = state ? state.ipv6Gateway : undefined;
            resourceInputs["irEnableFlag"] = state ? state.irEnableFlag : undefined;
            resourceInputs["l2OnlyFlag"] = state ? state.l2OnlyFlag : undefined;
            resourceInputs["l3GatewayFlag"] = state ? state.l3GatewayFlag : undefined;
            resourceInputs["loopbackId"] = state ? state.loopbackId : undefined;
            resourceInputs["mcastGroup"] = state ? state.mcastGroup : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netflowFlag"] = state ? state.netflowFlag : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["nveId"] = state ? state.nveId : undefined;
            resourceInputs["rtBothFlag"] = state ? state.rtBothFlag : undefined;
            resourceInputs["secondaryGw1"] = state ? state.secondaryGw1 : undefined;
            resourceInputs["secondaryGw2"] = state ? state.secondaryGw2 : undefined;
            resourceInputs["secondaryGw3"] = state ? state.secondaryGw3 : undefined;
            resourceInputs["secondaryGw4"] = state ? state.secondaryGw4 : undefined;
            resourceInputs["serviceTemplate"] = state ? state.serviceTemplate : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sviNetflowMonitor"] = state ? state.sviNetflowMonitor : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["trmEnableFlag"] = state ? state.trmEnableFlag : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
            resourceInputs["vlanName"] = state ? state.vlanName : undefined;
            resourceInputs["vlanNetflowMonitor"] = state ? state.vlanNetflowMonitor : undefined;
            resourceInputs["vrfName"] = state ? state.vrfName : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if ((!args || args.fabricName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fabricName'");
            }
            resourceInputs["arpSuppFlag"] = args ? args.arpSuppFlag : undefined;
            resourceInputs["attachments"] = args ? args.attachments : undefined;
            resourceInputs["deploy"] = args ? args.deploy : undefined;
            resourceInputs["deployTimeout"] = args ? args.deployTimeout : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcp1"] = args ? args.dhcp1 : undefined;
            resourceInputs["dhcp2"] = args ? args.dhcp2 : undefined;
            resourceInputs["dhcp3"] = args ? args.dhcp3 : undefined;
            resourceInputs["dhcpVrf"] = args ? args.dhcpVrf : undefined;
            resourceInputs["dhcpVrf2"] = args ? args.dhcpVrf2 : undefined;
            resourceInputs["dhcpVrf3"] = args ? args.dhcpVrf3 : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["extensionTemplate"] = args ? args.extensionTemplate : undefined;
            resourceInputs["fabricName"] = args ? args.fabricName : undefined;
            resourceInputs["ipv4Gateway"] = args ? args.ipv4Gateway : undefined;
            resourceInputs["ipv6Gateway"] = args ? args.ipv6Gateway : undefined;
            resourceInputs["irEnableFlag"] = args ? args.irEnableFlag : undefined;
            resourceInputs["l2OnlyFlag"] = args ? args.l2OnlyFlag : undefined;
            resourceInputs["l3GatewayFlag"] = args ? args.l3GatewayFlag : undefined;
            resourceInputs["loopbackId"] = args ? args.loopbackId : undefined;
            resourceInputs["mcastGroup"] = args ? args.mcastGroup : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netflowFlag"] = args ? args.netflowFlag : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["nveId"] = args ? args.nveId : undefined;
            resourceInputs["rtBothFlag"] = args ? args.rtBothFlag : undefined;
            resourceInputs["secondaryGw1"] = args ? args.secondaryGw1 : undefined;
            resourceInputs["secondaryGw2"] = args ? args.secondaryGw2 : undefined;
            resourceInputs["secondaryGw3"] = args ? args.secondaryGw3 : undefined;
            resourceInputs["secondaryGw4"] = args ? args.secondaryGw4 : undefined;
            resourceInputs["serviceTemplate"] = args ? args.serviceTemplate : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sviNetflowMonitor"] = args ? args.sviNetflowMonitor : undefined;
            resourceInputs["tag"] = args ? args.tag : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["trmEnableFlag"] = args ? args.trmEnableFlag : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["vlanName"] = args ? args.vlanName : undefined;
            resourceInputs["vlanNetflowMonitor"] = args ? args.vlanNetflowMonitor : undefined;
            resourceInputs["vrfName"] = args ? args.vrfName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    arpSuppFlag?: pulumi.Input<boolean>;
    attachments?: pulumi.Input<pulumi.Input<inputs.NetworkAttachment>[]>;
    deploy?: pulumi.Input<boolean>;
    deployTimeout?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    dhcp1?: pulumi.Input<string>;
    dhcp2?: pulumi.Input<string>;
    dhcp3?: pulumi.Input<string>;
    dhcpVrf?: pulumi.Input<string>;
    dhcpVrf2?: pulumi.Input<string>;
    dhcpVrf3?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    extensionTemplate?: pulumi.Input<string>;
    fabricName?: pulumi.Input<string>;
    ipv4Gateway?: pulumi.Input<string>;
    ipv6Gateway?: pulumi.Input<string>;
    irEnableFlag?: pulumi.Input<boolean>;
    l2OnlyFlag?: pulumi.Input<boolean>;
    l3GatewayFlag?: pulumi.Input<boolean>;
    loopbackId?: pulumi.Input<number>;
    mcastGroup?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    netflowFlag?: pulumi.Input<boolean>;
    networkId?: pulumi.Input<string>;
    nveId?: pulumi.Input<number>;
    rtBothFlag?: pulumi.Input<boolean>;
    secondaryGw1?: pulumi.Input<string>;
    secondaryGw2?: pulumi.Input<string>;
    secondaryGw3?: pulumi.Input<string>;
    secondaryGw4?: pulumi.Input<string>;
    serviceTemplate?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sviNetflowMonitor?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
    trmEnableFlag?: pulumi.Input<boolean>;
    vlanId?: pulumi.Input<number>;
    vlanName?: pulumi.Input<string>;
    vlanNetflowMonitor?: pulumi.Input<string>;
    vrfName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    arpSuppFlag?: pulumi.Input<boolean>;
    attachments?: pulumi.Input<pulumi.Input<inputs.NetworkAttachment>[]>;
    deploy?: pulumi.Input<boolean>;
    deployTimeout?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    dhcp1?: pulumi.Input<string>;
    dhcp2?: pulumi.Input<string>;
    dhcp3?: pulumi.Input<string>;
    dhcpVrf?: pulumi.Input<string>;
    dhcpVrf2?: pulumi.Input<string>;
    dhcpVrf3?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    extensionTemplate?: pulumi.Input<string>;
    fabricName: pulumi.Input<string>;
    ipv4Gateway?: pulumi.Input<string>;
    ipv6Gateway?: pulumi.Input<string>;
    irEnableFlag?: pulumi.Input<boolean>;
    l2OnlyFlag?: pulumi.Input<boolean>;
    l3GatewayFlag?: pulumi.Input<boolean>;
    loopbackId?: pulumi.Input<number>;
    mcastGroup?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    netflowFlag?: pulumi.Input<boolean>;
    networkId?: pulumi.Input<string>;
    nveId?: pulumi.Input<number>;
    rtBothFlag?: pulumi.Input<boolean>;
    secondaryGw1?: pulumi.Input<string>;
    secondaryGw2?: pulumi.Input<string>;
    secondaryGw3?: pulumi.Input<string>;
    secondaryGw4?: pulumi.Input<string>;
    serviceTemplate?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sviNetflowMonitor?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
    trmEnableFlag?: pulumi.Input<boolean>;
    vlanId?: pulumi.Input<number>;
    vlanName?: pulumi.Input<string>;
    vlanNetflowMonitor?: pulumi.Input<string>;
    vrfName?: pulumi.Input<string>;
}
