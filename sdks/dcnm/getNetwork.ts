// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetwork(args: GetNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dcnm:index/getNetwork:getNetwork", {
        "arpSuppFlag": args.arpSuppFlag,
        "attachments": args.attachments,
        "deploy": args.deploy,
        "description": args.description,
        "dhcp1": args.dhcp1,
        "dhcp2": args.dhcp2,
        "dhcpVrf": args.dhcpVrf,
        "displayName": args.displayName,
        "extensionTemplate": args.extensionTemplate,
        "fabricName": args.fabricName,
        "id": args.id,
        "ipv4Gateway": args.ipv4Gateway,
        "ipv6Gateway": args.ipv6Gateway,
        "irEnableFlag": args.irEnableFlag,
        "l2OnlyFlag": args.l2OnlyFlag,
        "l3GatewayFlag": args.l3GatewayFlag,
        "loopbackId": args.loopbackId,
        "mcastGroup": args.mcastGroup,
        "mtu": args.mtu,
        "name": args.name,
        "networkId": args.networkId,
        "rtBothFlag": args.rtBothFlag,
        "secondaryGw1": args.secondaryGw1,
        "secondaryGw2": args.secondaryGw2,
        "serviceTemplate": args.serviceTemplate,
        "source": args.source,
        "tag": args.tag,
        "template": args.template,
        "trmEnableFlag": args.trmEnableFlag,
        "vlanId": args.vlanId,
        "vlanName": args.vlanName,
        "vrfName": args.vrfName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetwork.
 */
export interface GetNetworkArgs {
    arpSuppFlag?: boolean;
    attachments?: inputs.GetNetworkAttachment[];
    deploy?: boolean;
    description?: string;
    dhcp1?: string;
    dhcp2?: string;
    dhcpVrf?: string;
    displayName?: string;
    extensionTemplate?: string;
    fabricName: string;
    id?: string;
    ipv4Gateway?: string;
    ipv6Gateway?: string;
    irEnableFlag?: boolean;
    l2OnlyFlag?: boolean;
    l3GatewayFlag?: boolean;
    loopbackId?: number;
    mcastGroup?: string;
    mtu?: number;
    name: string;
    networkId?: string;
    rtBothFlag?: boolean;
    secondaryGw1?: string;
    secondaryGw2?: string;
    serviceTemplate?: string;
    source?: string;
    tag?: string;
    template?: string;
    trmEnableFlag?: boolean;
    vlanId?: number;
    vlanName?: string;
    vrfName?: string;
}

/**
 * A collection of values returned by getNetwork.
 */
export interface GetNetworkResult {
    readonly arpSuppFlag: boolean;
    readonly attachments?: outputs.GetNetworkAttachment[];
    readonly deploy: boolean;
    readonly description: string;
    readonly dhcp1: string;
    readonly dhcp2: string;
    readonly dhcpVrf: string;
    readonly displayName: string;
    readonly extensionTemplate: string;
    readonly fabricName: string;
    readonly id: string;
    readonly ipv4Gateway: string;
    readonly ipv6Gateway: string;
    readonly irEnableFlag: boolean;
    readonly l2OnlyFlag: boolean;
    readonly l3GatewayFlag: boolean;
    readonly loopbackId: number;
    readonly mcastGroup: string;
    readonly mtu: number;
    readonly name: string;
    readonly networkId: string;
    readonly rtBothFlag: boolean;
    readonly secondaryGw1: string;
    readonly secondaryGw2: string;
    readonly serviceTemplate: string;
    readonly source: string;
    readonly tag: string;
    readonly template: string;
    readonly trmEnableFlag: boolean;
    readonly vlanId: number;
    readonly vlanName: string;
    readonly vrfName: string;
}
export function getNetworkOutput(args: GetNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkResult> {
    return pulumi.output(args).apply((a: any) => getNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getNetwork.
 */
export interface GetNetworkOutputArgs {
    arpSuppFlag?: pulumi.Input<boolean>;
    attachments?: pulumi.Input<pulumi.Input<inputs.GetNetworkAttachmentArgs>[]>;
    deploy?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    dhcp1?: pulumi.Input<string>;
    dhcp2?: pulumi.Input<string>;
    dhcpVrf?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    extensionTemplate?: pulumi.Input<string>;
    fabricName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipv4Gateway?: pulumi.Input<string>;
    ipv6Gateway?: pulumi.Input<string>;
    irEnableFlag?: pulumi.Input<boolean>;
    l2OnlyFlag?: pulumi.Input<boolean>;
    l3GatewayFlag?: pulumi.Input<boolean>;
    loopbackId?: pulumi.Input<number>;
    mcastGroup?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    rtBothFlag?: pulumi.Input<boolean>;
    secondaryGw1?: pulumi.Input<string>;
    secondaryGw2?: pulumi.Input<string>;
    serviceTemplate?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
    trmEnableFlag?: pulumi.Input<boolean>;
    vlanId?: pulumi.Input<number>;
    vlanName?: pulumi.Input<string>;
    vrfName?: pulumi.Input<string>;
}
