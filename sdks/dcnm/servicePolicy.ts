// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServicePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ServicePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePolicyState, opts?: pulumi.CustomResourceOptions): ServicePolicy {
        return new ServicePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dcnm:index/servicePolicy:ServicePolicy';

    /**
     * Returns true if the given object is an instance of ServicePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePolicy.__pulumiType;
    }

    public readonly attachedFabric!: pulumi.Output<string>;
    public readonly deploy!: pulumi.Output<boolean | undefined>;
    public readonly deployTimeout!: pulumi.Output<number | undefined>;
    public readonly destNetwork!: pulumi.Output<string>;
    public readonly destPort!: pulumi.Output<string | undefined>;
    public readonly destVrfName!: pulumi.Output<string>;
    public readonly fwdDirection!: pulumi.Output<boolean | undefined>;
    public readonly nextHopAction!: pulumi.Output<string | undefined>;
    public readonly nextHopIp!: pulumi.Output<string>;
    public readonly peeringName!: pulumi.Output<string>;
    public readonly policyName!: pulumi.Output<string>;
    public readonly policyTemplateName!: pulumi.Output<string | undefined>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    public readonly reverseEnabled!: pulumi.Output<boolean | undefined>;
    public readonly routeMapAction!: pulumi.Output<string | undefined>;
    public readonly serviceFabric!: pulumi.Output<string>;
    public readonly serviceNodeName!: pulumi.Output<string>;
    public readonly sourceNetwork!: pulumi.Output<string>;
    public readonly sourceVrfName!: pulumi.Output<string>;
    public readonly srcPort!: pulumi.Output<string | undefined>;

    /**
     * Create a ServicePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicePolicyArgs | ServicePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicePolicyState | undefined;
            resourceInputs["attachedFabric"] = state ? state.attachedFabric : undefined;
            resourceInputs["deploy"] = state ? state.deploy : undefined;
            resourceInputs["deployTimeout"] = state ? state.deployTimeout : undefined;
            resourceInputs["destNetwork"] = state ? state.destNetwork : undefined;
            resourceInputs["destPort"] = state ? state.destPort : undefined;
            resourceInputs["destVrfName"] = state ? state.destVrfName : undefined;
            resourceInputs["fwdDirection"] = state ? state.fwdDirection : undefined;
            resourceInputs["nextHopAction"] = state ? state.nextHopAction : undefined;
            resourceInputs["nextHopIp"] = state ? state.nextHopIp : undefined;
            resourceInputs["peeringName"] = state ? state.peeringName : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["policyTemplateName"] = state ? state.policyTemplateName : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["reverseEnabled"] = state ? state.reverseEnabled : undefined;
            resourceInputs["routeMapAction"] = state ? state.routeMapAction : undefined;
            resourceInputs["serviceFabric"] = state ? state.serviceFabric : undefined;
            resourceInputs["serviceNodeName"] = state ? state.serviceNodeName : undefined;
            resourceInputs["sourceNetwork"] = state ? state.sourceNetwork : undefined;
            resourceInputs["sourceVrfName"] = state ? state.sourceVrfName : undefined;
            resourceInputs["srcPort"] = state ? state.srcPort : undefined;
        } else {
            const args = argsOrState as ServicePolicyArgs | undefined;
            if ((!args || args.attachedFabric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attachedFabric'");
            }
            if ((!args || args.destNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destNetwork'");
            }
            if ((!args || args.destVrfName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destVrfName'");
            }
            if ((!args || args.nextHopIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHopIp'");
            }
            if ((!args || args.peeringName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peeringName'");
            }
            if ((!args || args.policyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            if ((!args || args.serviceFabric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceFabric'");
            }
            if ((!args || args.serviceNodeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceNodeName'");
            }
            if ((!args || args.sourceNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceNetwork'");
            }
            if ((!args || args.sourceVrfName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceVrfName'");
            }
            resourceInputs["attachedFabric"] = args ? args.attachedFabric : undefined;
            resourceInputs["deploy"] = args ? args.deploy : undefined;
            resourceInputs["deployTimeout"] = args ? args.deployTimeout : undefined;
            resourceInputs["destNetwork"] = args ? args.destNetwork : undefined;
            resourceInputs["destPort"] = args ? args.destPort : undefined;
            resourceInputs["destVrfName"] = args ? args.destVrfName : undefined;
            resourceInputs["fwdDirection"] = args ? args.fwdDirection : undefined;
            resourceInputs["nextHopAction"] = args ? args.nextHopAction : undefined;
            resourceInputs["nextHopIp"] = args ? args.nextHopIp : undefined;
            resourceInputs["peeringName"] = args ? args.peeringName : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["policyTemplateName"] = args ? args.policyTemplateName : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["reverseEnabled"] = args ? args.reverseEnabled : undefined;
            resourceInputs["routeMapAction"] = args ? args.routeMapAction : undefined;
            resourceInputs["serviceFabric"] = args ? args.serviceFabric : undefined;
            resourceInputs["serviceNodeName"] = args ? args.serviceNodeName : undefined;
            resourceInputs["sourceNetwork"] = args ? args.sourceNetwork : undefined;
            resourceInputs["sourceVrfName"] = args ? args.sourceVrfName : undefined;
            resourceInputs["srcPort"] = args ? args.srcPort : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicePolicy resources.
 */
export interface ServicePolicyState {
    attachedFabric?: pulumi.Input<string>;
    deploy?: pulumi.Input<boolean>;
    deployTimeout?: pulumi.Input<number>;
    destNetwork?: pulumi.Input<string>;
    destPort?: pulumi.Input<string>;
    destVrfName?: pulumi.Input<string>;
    fwdDirection?: pulumi.Input<boolean>;
    nextHopAction?: pulumi.Input<string>;
    nextHopIp?: pulumi.Input<string>;
    peeringName?: pulumi.Input<string>;
    policyName?: pulumi.Input<string>;
    policyTemplateName?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    reverseEnabled?: pulumi.Input<boolean>;
    routeMapAction?: pulumi.Input<string>;
    serviceFabric?: pulumi.Input<string>;
    serviceNodeName?: pulumi.Input<string>;
    sourceNetwork?: pulumi.Input<string>;
    sourceVrfName?: pulumi.Input<string>;
    srcPort?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServicePolicy resource.
 */
export interface ServicePolicyArgs {
    attachedFabric: pulumi.Input<string>;
    deploy?: pulumi.Input<boolean>;
    deployTimeout?: pulumi.Input<number>;
    destNetwork: pulumi.Input<string>;
    destPort?: pulumi.Input<string>;
    destVrfName: pulumi.Input<string>;
    fwdDirection?: pulumi.Input<boolean>;
    nextHopAction?: pulumi.Input<string>;
    nextHopIp: pulumi.Input<string>;
    peeringName: pulumi.Input<string>;
    policyName: pulumi.Input<string>;
    policyTemplateName?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    reverseEnabled?: pulumi.Input<boolean>;
    routeMapAction?: pulumi.Input<string>;
    serviceFabric: pulumi.Input<string>;
    serviceNodeName: pulumi.Input<string>;
    sourceNetwork: pulumi.Input<string>;
    sourceVrfName: pulumi.Input<string>;
    srcPort?: pulumi.Input<string>;
}
