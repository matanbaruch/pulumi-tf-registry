// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getInterface(args: GetInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetInterfaceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dcnm:index/getInterface:getInterface", {
        "accessVlans": args.accessVlans,
        "adminState": args.adminState,
        "allowedVlans": args.allowedVlans,
        "bpduGuardFlag": args.bpduGuardFlag,
        "configuration": args.configuration,
        "deploy": args.deploy,
        "description": args.description,
        "ethernetSpeed": args.ethernetSpeed,
        "fabricName": args.fabricName,
        "id": args.id,
        "ipv4": args.ipv4,
        "ipv4Prefix": args.ipv4Prefix,
        "ipv6": args.ipv6,
        "ipv6Prefix": args.ipv6Prefix,
        "loopbackLsRouting": args.loopbackLsRouting,
        "loopbackReplicationMode": args.loopbackReplicationMode,
        "loopbackRouterId": args.loopbackRouterId,
        "loopbackRoutingTag": args.loopbackRoutingTag,
        "loopbackTag": args.loopbackTag,
        "mode": args.mode,
        "mtu": args.mtu,
        "name": args.name,
        "pcInterfaces": args.pcInterfaces,
        "policy": args.policy,
        "portFastFlag": args.portFastFlag,
        "serialNumber": args.serialNumber,
        "subinterfaceMtu": args.subinterfaceMtu,
        "subinterfaceVlan": args.subinterfaceVlan,
        "switchName1": args.switchName1,
        "switchName2": args.switchName2,
        "type": args.type,
        "vpcPeer1AccessVlans": args.vpcPeer1AccessVlans,
        "vpcPeer1AllowedVlans": args.vpcPeer1AllowedVlans,
        "vpcPeer1Conf": args.vpcPeer1Conf,
        "vpcPeer1Desc": args.vpcPeer1Desc,
        "vpcPeer1Id": args.vpcPeer1Id,
        "vpcPeer1Interfaces": args.vpcPeer1Interfaces,
        "vpcPeer2AccessVlans": args.vpcPeer2AccessVlans,
        "vpcPeer2AllowedVlans": args.vpcPeer2AllowedVlans,
        "vpcPeer2Conf": args.vpcPeer2Conf,
        "vpcPeer2Desc": args.vpcPeer2Desc,
        "vpcPeer2Id": args.vpcPeer2Id,
        "vpcPeer2Interfaces": args.vpcPeer2Interfaces,
        "vrf": args.vrf,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getInterface.
 */
export interface GetInterfaceArgs {
    accessVlans?: string;
    adminState?: boolean;
    allowedVlans?: string;
    bpduGuardFlag?: string;
    configuration?: string;
    deploy?: boolean;
    description?: string;
    ethernetSpeed?: string;
    fabricName?: string;
    id?: string;
    ipv4?: string;
    ipv4Prefix?: string;
    ipv6?: string;
    ipv6Prefix?: string;
    loopbackLsRouting?: string;
    loopbackReplicationMode?: string;
    loopbackRouterId?: string;
    loopbackRoutingTag?: string;
    loopbackTag?: string;
    mode?: string;
    mtu?: string;
    name: string;
    pcInterfaces?: string[];
    policy?: string;
    portFastFlag?: boolean;
    serialNumber: string;
    subinterfaceMtu?: string;
    subinterfaceVlan?: number;
    switchName1?: string;
    switchName2?: string;
    type: string;
    vpcPeer1AccessVlans?: string;
    vpcPeer1AllowedVlans?: string;
    vpcPeer1Conf?: string;
    vpcPeer1Desc?: string;
    vpcPeer1Id?: number;
    vpcPeer1Interfaces?: string[];
    vpcPeer2AccessVlans?: string;
    vpcPeer2AllowedVlans?: string;
    vpcPeer2Conf?: string;
    vpcPeer2Desc?: string;
    vpcPeer2Id?: number;
    vpcPeer2Interfaces?: string[];
    vrf?: string;
}

/**
 * A collection of values returned by getInterface.
 */
export interface GetInterfaceResult {
    readonly accessVlans: string;
    readonly adminState: boolean;
    readonly allowedVlans: string;
    readonly bpduGuardFlag: string;
    readonly configuration: string;
    readonly deploy: boolean;
    readonly description: string;
    readonly ethernetSpeed: string;
    readonly fabricName: string;
    readonly id: string;
    readonly ipv4: string;
    readonly ipv4Prefix: string;
    readonly ipv6: string;
    readonly ipv6Prefix: string;
    readonly loopbackLsRouting: string;
    readonly loopbackReplicationMode: string;
    readonly loopbackRouterId: string;
    readonly loopbackRoutingTag: string;
    readonly loopbackTag: string;
    readonly mode: string;
    readonly mtu: string;
    readonly name: string;
    readonly pcInterfaces: string[];
    readonly policy: string;
    readonly portFastFlag?: boolean;
    readonly serialNumber: string;
    readonly subinterfaceMtu: string;
    readonly subinterfaceVlan: number;
    readonly switchName1: string;
    readonly switchName2: string;
    readonly type: string;
    readonly vpcPeer1AccessVlans: string;
    readonly vpcPeer1AllowedVlans: string;
    readonly vpcPeer1Conf: string;
    readonly vpcPeer1Desc: string;
    readonly vpcPeer1Id: number;
    readonly vpcPeer1Interfaces: string[];
    readonly vpcPeer2AccessVlans: string;
    readonly vpcPeer2AllowedVlans: string;
    readonly vpcPeer2Conf: string;
    readonly vpcPeer2Desc: string;
    readonly vpcPeer2Id: number;
    readonly vpcPeer2Interfaces: string[];
    readonly vrf: string;
}
export function getInterfaceOutput(args: GetInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getInterface(a, opts))
}

/**
 * A collection of arguments for invoking getInterface.
 */
export interface GetInterfaceOutputArgs {
    accessVlans?: pulumi.Input<string>;
    adminState?: pulumi.Input<boolean>;
    allowedVlans?: pulumi.Input<string>;
    bpduGuardFlag?: pulumi.Input<string>;
    configuration?: pulumi.Input<string>;
    deploy?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    ethernetSpeed?: pulumi.Input<string>;
    fabricName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipv4?: pulumi.Input<string>;
    ipv4Prefix?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    ipv6Prefix?: pulumi.Input<string>;
    loopbackLsRouting?: pulumi.Input<string>;
    loopbackReplicationMode?: pulumi.Input<string>;
    loopbackRouterId?: pulumi.Input<string>;
    loopbackRoutingTag?: pulumi.Input<string>;
    loopbackTag?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    pcInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    policy?: pulumi.Input<string>;
    portFastFlag?: pulumi.Input<boolean>;
    serialNumber: pulumi.Input<string>;
    subinterfaceMtu?: pulumi.Input<string>;
    subinterfaceVlan?: pulumi.Input<number>;
    switchName1?: pulumi.Input<string>;
    switchName2?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vpcPeer1AccessVlans?: pulumi.Input<string>;
    vpcPeer1AllowedVlans?: pulumi.Input<string>;
    vpcPeer1Conf?: pulumi.Input<string>;
    vpcPeer1Desc?: pulumi.Input<string>;
    vpcPeer1Id?: pulumi.Input<number>;
    vpcPeer1Interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    vpcPeer2AccessVlans?: pulumi.Input<string>;
    vpcPeer2AllowedVlans?: pulumi.Input<string>;
    vpcPeer2Conf?: pulumi.Input<string>;
    vpcPeer2Desc?: pulumi.Input<string>;
    vpcPeer2Id?: pulumi.Input<number>;
    vpcPeer2Interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    vrf?: pulumi.Input<string>;
}
