// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Interface extends pulumi.CustomResource {
    /**
     * Get an existing Interface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceState, opts?: pulumi.CustomResourceOptions): Interface {
        return new Interface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dcnm:index/interface:Interface';

    /**
     * Returns true if the given object is an instance of Interface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Interface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Interface.__pulumiType;
    }

    public readonly accessVlans!: pulumi.Output<string>;
    public readonly adminState!: pulumi.Output<boolean | undefined>;
    public readonly allowedVlans!: pulumi.Output<string>;
    public readonly bpduGuardFlag!: pulumi.Output<string>;
    public readonly configuration!: pulumi.Output<string>;
    public readonly deploy!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly ethernetSpeed!: pulumi.Output<string>;
    public readonly fabricName!: pulumi.Output<string>;
    public readonly ipv4!: pulumi.Output<string>;
    public readonly ipv4Prefix!: pulumi.Output<string>;
    public readonly ipv6!: pulumi.Output<string>;
    public readonly ipv6Prefix!: pulumi.Output<string>;
    public readonly loopbackLsRouting!: pulumi.Output<string>;
    public readonly loopbackReplicationMode!: pulumi.Output<string>;
    public readonly loopbackRouterId!: pulumi.Output<string>;
    public readonly loopbackRoutingTag!: pulumi.Output<string>;
    public readonly loopbackTag!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly mtu!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly pcInterfaces!: pulumi.Output<string[]>;
    public readonly policy!: pulumi.Output<string>;
    public readonly portFastFlag!: pulumi.Output<boolean | undefined>;
    public readonly serialNumber!: pulumi.Output<string>;
    public readonly subinterfaceMtu!: pulumi.Output<string>;
    public readonly subinterfaceVlan!: pulumi.Output<number>;
    public readonly switchName1!: pulumi.Output<string>;
    public readonly switchName2!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly vpcPeer1AccessVlans!: pulumi.Output<string>;
    public readonly vpcPeer1AllowedVlans!: pulumi.Output<string>;
    public readonly vpcPeer1Conf!: pulumi.Output<string>;
    public readonly vpcPeer1Desc!: pulumi.Output<string>;
    public readonly vpcPeer1Id!: pulumi.Output<number>;
    public readonly vpcPeer1Interfaces!: pulumi.Output<string[]>;
    public readonly vpcPeer2AccessVlans!: pulumi.Output<string>;
    public readonly vpcPeer2AllowedVlans!: pulumi.Output<string>;
    public readonly vpcPeer2Conf!: pulumi.Output<string>;
    public readonly vpcPeer2Desc!: pulumi.Output<string>;
    public readonly vpcPeer2Id!: pulumi.Output<number>;
    public readonly vpcPeer2Interfaces!: pulumi.Output<string[]>;
    public readonly vrf!: pulumi.Output<string>;

    /**
     * Create a Interface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceArgs | InterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceState | undefined;
            resourceInputs["accessVlans"] = state ? state.accessVlans : undefined;
            resourceInputs["adminState"] = state ? state.adminState : undefined;
            resourceInputs["allowedVlans"] = state ? state.allowedVlans : undefined;
            resourceInputs["bpduGuardFlag"] = state ? state.bpduGuardFlag : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["deploy"] = state ? state.deploy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ethernetSpeed"] = state ? state.ethernetSpeed : undefined;
            resourceInputs["fabricName"] = state ? state.fabricName : undefined;
            resourceInputs["ipv4"] = state ? state.ipv4 : undefined;
            resourceInputs["ipv4Prefix"] = state ? state.ipv4Prefix : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["ipv6Prefix"] = state ? state.ipv6Prefix : undefined;
            resourceInputs["loopbackLsRouting"] = state ? state.loopbackLsRouting : undefined;
            resourceInputs["loopbackReplicationMode"] = state ? state.loopbackReplicationMode : undefined;
            resourceInputs["loopbackRouterId"] = state ? state.loopbackRouterId : undefined;
            resourceInputs["loopbackRoutingTag"] = state ? state.loopbackRoutingTag : undefined;
            resourceInputs["loopbackTag"] = state ? state.loopbackTag : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pcInterfaces"] = state ? state.pcInterfaces : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["portFastFlag"] = state ? state.portFastFlag : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["subinterfaceMtu"] = state ? state.subinterfaceMtu : undefined;
            resourceInputs["subinterfaceVlan"] = state ? state.subinterfaceVlan : undefined;
            resourceInputs["switchName1"] = state ? state.switchName1 : undefined;
            resourceInputs["switchName2"] = state ? state.switchName2 : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vpcPeer1AccessVlans"] = state ? state.vpcPeer1AccessVlans : undefined;
            resourceInputs["vpcPeer1AllowedVlans"] = state ? state.vpcPeer1AllowedVlans : undefined;
            resourceInputs["vpcPeer1Conf"] = state ? state.vpcPeer1Conf : undefined;
            resourceInputs["vpcPeer1Desc"] = state ? state.vpcPeer1Desc : undefined;
            resourceInputs["vpcPeer1Id"] = state ? state.vpcPeer1Id : undefined;
            resourceInputs["vpcPeer1Interfaces"] = state ? state.vpcPeer1Interfaces : undefined;
            resourceInputs["vpcPeer2AccessVlans"] = state ? state.vpcPeer2AccessVlans : undefined;
            resourceInputs["vpcPeer2AllowedVlans"] = state ? state.vpcPeer2AllowedVlans : undefined;
            resourceInputs["vpcPeer2Conf"] = state ? state.vpcPeer2Conf : undefined;
            resourceInputs["vpcPeer2Desc"] = state ? state.vpcPeer2Desc : undefined;
            resourceInputs["vpcPeer2Id"] = state ? state.vpcPeer2Id : undefined;
            resourceInputs["vpcPeer2Interfaces"] = state ? state.vpcPeer2Interfaces : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
        } else {
            const args = argsOrState as InterfaceArgs | undefined;
            if ((!args || args.fabricName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fabricName'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.switchName1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switchName1'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accessVlans"] = args ? args.accessVlans : undefined;
            resourceInputs["adminState"] = args ? args.adminState : undefined;
            resourceInputs["allowedVlans"] = args ? args.allowedVlans : undefined;
            resourceInputs["bpduGuardFlag"] = args ? args.bpduGuardFlag : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["deploy"] = args ? args.deploy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ethernetSpeed"] = args ? args.ethernetSpeed : undefined;
            resourceInputs["fabricName"] = args ? args.fabricName : undefined;
            resourceInputs["ipv4"] = args ? args.ipv4 : undefined;
            resourceInputs["ipv4Prefix"] = args ? args.ipv4Prefix : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["ipv6Prefix"] = args ? args.ipv6Prefix : undefined;
            resourceInputs["loopbackLsRouting"] = args ? args.loopbackLsRouting : undefined;
            resourceInputs["loopbackReplicationMode"] = args ? args.loopbackReplicationMode : undefined;
            resourceInputs["loopbackRouterId"] = args ? args.loopbackRouterId : undefined;
            resourceInputs["loopbackRoutingTag"] = args ? args.loopbackRoutingTag : undefined;
            resourceInputs["loopbackTag"] = args ? args.loopbackTag : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pcInterfaces"] = args ? args.pcInterfaces : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["portFastFlag"] = args ? args.portFastFlag : undefined;
            resourceInputs["serialNumber"] = args ? args.serialNumber : undefined;
            resourceInputs["subinterfaceMtu"] = args ? args.subinterfaceMtu : undefined;
            resourceInputs["subinterfaceVlan"] = args ? args.subinterfaceVlan : undefined;
            resourceInputs["switchName1"] = args ? args.switchName1 : undefined;
            resourceInputs["switchName2"] = args ? args.switchName2 : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpcPeer1AccessVlans"] = args ? args.vpcPeer1AccessVlans : undefined;
            resourceInputs["vpcPeer1AllowedVlans"] = args ? args.vpcPeer1AllowedVlans : undefined;
            resourceInputs["vpcPeer1Conf"] = args ? args.vpcPeer1Conf : undefined;
            resourceInputs["vpcPeer1Desc"] = args ? args.vpcPeer1Desc : undefined;
            resourceInputs["vpcPeer1Id"] = args ? args.vpcPeer1Id : undefined;
            resourceInputs["vpcPeer1Interfaces"] = args ? args.vpcPeer1Interfaces : undefined;
            resourceInputs["vpcPeer2AccessVlans"] = args ? args.vpcPeer2AccessVlans : undefined;
            resourceInputs["vpcPeer2AllowedVlans"] = args ? args.vpcPeer2AllowedVlans : undefined;
            resourceInputs["vpcPeer2Conf"] = args ? args.vpcPeer2Conf : undefined;
            resourceInputs["vpcPeer2Desc"] = args ? args.vpcPeer2Desc : undefined;
            resourceInputs["vpcPeer2Id"] = args ? args.vpcPeer2Id : undefined;
            resourceInputs["vpcPeer2Interfaces"] = args ? args.vpcPeer2Interfaces : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Interface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Interface resources.
 */
export interface InterfaceState {
    accessVlans?: pulumi.Input<string>;
    adminState?: pulumi.Input<boolean>;
    allowedVlans?: pulumi.Input<string>;
    bpduGuardFlag?: pulumi.Input<string>;
    configuration?: pulumi.Input<string>;
    deploy?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    ethernetSpeed?: pulumi.Input<string>;
    fabricName?: pulumi.Input<string>;
    ipv4?: pulumi.Input<string>;
    ipv4Prefix?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    ipv6Prefix?: pulumi.Input<string>;
    loopbackLsRouting?: pulumi.Input<string>;
    loopbackReplicationMode?: pulumi.Input<string>;
    loopbackRouterId?: pulumi.Input<string>;
    loopbackRoutingTag?: pulumi.Input<string>;
    loopbackTag?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pcInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    policy?: pulumi.Input<string>;
    portFastFlag?: pulumi.Input<boolean>;
    serialNumber?: pulumi.Input<string>;
    subinterfaceMtu?: pulumi.Input<string>;
    subinterfaceVlan?: pulumi.Input<number>;
    switchName1?: pulumi.Input<string>;
    switchName2?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vpcPeer1AccessVlans?: pulumi.Input<string>;
    vpcPeer1AllowedVlans?: pulumi.Input<string>;
    vpcPeer1Conf?: pulumi.Input<string>;
    vpcPeer1Desc?: pulumi.Input<string>;
    vpcPeer1Id?: pulumi.Input<number>;
    vpcPeer1Interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    vpcPeer2AccessVlans?: pulumi.Input<string>;
    vpcPeer2AllowedVlans?: pulumi.Input<string>;
    vpcPeer2Conf?: pulumi.Input<string>;
    vpcPeer2Desc?: pulumi.Input<string>;
    vpcPeer2Id?: pulumi.Input<number>;
    vpcPeer2Interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    vrf?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Interface resource.
 */
export interface InterfaceArgs {
    accessVlans?: pulumi.Input<string>;
    adminState?: pulumi.Input<boolean>;
    allowedVlans?: pulumi.Input<string>;
    bpduGuardFlag?: pulumi.Input<string>;
    configuration?: pulumi.Input<string>;
    deploy?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    ethernetSpeed?: pulumi.Input<string>;
    fabricName: pulumi.Input<string>;
    ipv4?: pulumi.Input<string>;
    ipv4Prefix?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    ipv6Prefix?: pulumi.Input<string>;
    loopbackLsRouting?: pulumi.Input<string>;
    loopbackReplicationMode?: pulumi.Input<string>;
    loopbackRouterId?: pulumi.Input<string>;
    loopbackRoutingTag?: pulumi.Input<string>;
    loopbackTag?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pcInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    policy: pulumi.Input<string>;
    portFastFlag?: pulumi.Input<boolean>;
    serialNumber?: pulumi.Input<string>;
    subinterfaceMtu?: pulumi.Input<string>;
    subinterfaceVlan?: pulumi.Input<number>;
    switchName1: pulumi.Input<string>;
    switchName2?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vpcPeer1AccessVlans?: pulumi.Input<string>;
    vpcPeer1AllowedVlans?: pulumi.Input<string>;
    vpcPeer1Conf?: pulumi.Input<string>;
    vpcPeer1Desc?: pulumi.Input<string>;
    vpcPeer1Id?: pulumi.Input<number>;
    vpcPeer1Interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    vpcPeer2AccessVlans?: pulumi.Input<string>;
    vpcPeer2AllowedVlans?: pulumi.Input<string>;
    vpcPeer2Conf?: pulumi.Input<string>;
    vpcPeer2Desc?: pulumi.Input<string>;
    vpcPeer2Id?: pulumi.Input<number>;
    vpcPeer2Interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    vrf?: pulumi.Input<string>;
}
