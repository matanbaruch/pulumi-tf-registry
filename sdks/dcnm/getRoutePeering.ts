// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRoutePeering(args: GetRoutePeeringArgs, opts?: pulumi.InvokeOptions): Promise<GetRoutePeeringResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dcnm:index/getRoutePeering:getRoutePeering", {
        "attachedFabric": args.attachedFabric,
        "deploy": args.deploy,
        "deployTimeout": args.deployTimeout,
        "deploymentMode": args.deploymentMode,
        "id": args.id,
        "name": args.name,
        "nextHopIp": args.nextHopIp,
        "option": args.option,
        "reverseNextHopIp": args.reverseNextHopIp,
        "routes": args.routes,
        "serviceFabric": args.serviceFabric,
        "serviceNetworks": args.serviceNetworks,
        "serviceNodeName": args.serviceNodeName,
        "serviceNodeType": args.serviceNodeType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRoutePeering.
 */
export interface GetRoutePeeringArgs {
    attachedFabric: string;
    deploy?: boolean;
    deployTimeout?: number;
    deploymentMode?: string;
    id?: string;
    name: string;
    nextHopIp?: string;
    option?: string;
    reverseNextHopIp?: string;
    routes?: inputs.GetRoutePeeringRoute[];
    serviceFabric: string;
    serviceNetworks?: inputs.GetRoutePeeringServiceNetwork[];
    serviceNodeName: string;
    serviceNodeType?: string;
}

/**
 * A collection of values returned by getRoutePeering.
 */
export interface GetRoutePeeringResult {
    readonly attachedFabric: string;
    readonly deploy?: boolean;
    readonly deployTimeout?: number;
    readonly deploymentMode?: string;
    readonly id: string;
    readonly name: string;
    readonly nextHopIp?: string;
    readonly option?: string;
    readonly reverseNextHopIp?: string;
    readonly routes?: outputs.GetRoutePeeringRoute[];
    readonly serviceFabric: string;
    readonly serviceNetworks?: outputs.GetRoutePeeringServiceNetwork[];
    readonly serviceNodeName: string;
    readonly serviceNodeType?: string;
}
export function getRoutePeeringOutput(args: GetRoutePeeringOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRoutePeeringResult> {
    return pulumi.output(args).apply((a: any) => getRoutePeering(a, opts))
}

/**
 * A collection of arguments for invoking getRoutePeering.
 */
export interface GetRoutePeeringOutputArgs {
    attachedFabric: pulumi.Input<string>;
    deploy?: pulumi.Input<boolean>;
    deployTimeout?: pulumi.Input<number>;
    deploymentMode?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nextHopIp?: pulumi.Input<string>;
    option?: pulumi.Input<string>;
    reverseNextHopIp?: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.GetRoutePeeringRouteArgs>[]>;
    serviceFabric: pulumi.Input<string>;
    serviceNetworks?: pulumi.Input<pulumi.Input<inputs.GetRoutePeeringServiceNetworkArgs>[]>;
    serviceNodeName: pulumi.Input<string>;
    serviceNodeType?: pulumi.Input<string>;
}
