// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceNode extends pulumi.CustomResource {
    /**
     * Get an existing ServiceNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceNodeState, opts?: pulumi.CustomResourceOptions): ServiceNode {
        return new ServiceNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dcnm:index/serviceNode:ServiceNode';

    /**
     * Returns true if the given object is an instance of ServiceNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceNode.__pulumiType;
    }

    public readonly adminState!: pulumi.Output<string | undefined>;
    public readonly allowedVlans!: pulumi.Output<string | undefined>;
    public readonly attachedFabric!: pulumi.Output<string>;
    public readonly attachedSwitchInterfaceName!: pulumi.Output<string>;
    public readonly bpduGuardFlag!: pulumi.Output<string | undefined>;
    public readonly formFactor!: pulumi.Output<string | undefined>;
    public readonly interfaceName!: pulumi.Output<string>;
    public readonly linkTemplateName!: pulumi.Output<string | undefined>;
    public readonly mtu!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeType!: pulumi.Output<string>;
    public readonly policyDescription!: pulumi.Output<string>;
    public readonly porttypeFastEnabled!: pulumi.Output<string | undefined>;
    public readonly serviceFabric!: pulumi.Output<string>;
    public readonly speed!: pulumi.Output<string | undefined>;
    public readonly switches!: pulumi.Output<string[]>;

    /**
     * Create a ServiceNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceNodeArgs | ServiceNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceNodeState | undefined;
            resourceInputs["adminState"] = state ? state.adminState : undefined;
            resourceInputs["allowedVlans"] = state ? state.allowedVlans : undefined;
            resourceInputs["attachedFabric"] = state ? state.attachedFabric : undefined;
            resourceInputs["attachedSwitchInterfaceName"] = state ? state.attachedSwitchInterfaceName : undefined;
            resourceInputs["bpduGuardFlag"] = state ? state.bpduGuardFlag : undefined;
            resourceInputs["formFactor"] = state ? state.formFactor : undefined;
            resourceInputs["interfaceName"] = state ? state.interfaceName : undefined;
            resourceInputs["linkTemplateName"] = state ? state.linkTemplateName : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["policyDescription"] = state ? state.policyDescription : undefined;
            resourceInputs["porttypeFastEnabled"] = state ? state.porttypeFastEnabled : undefined;
            resourceInputs["serviceFabric"] = state ? state.serviceFabric : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["switches"] = state ? state.switches : undefined;
        } else {
            const args = argsOrState as ServiceNodeArgs | undefined;
            if ((!args || args.attachedFabric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attachedFabric'");
            }
            if ((!args || args.attachedSwitchInterfaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attachedSwitchInterfaceName'");
            }
            if ((!args || args.interfaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaceName'");
            }
            if ((!args || args.nodeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            if ((!args || args.serviceFabric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceFabric'");
            }
            if ((!args || args.switches === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switches'");
            }
            resourceInputs["adminState"] = args ? args.adminState : undefined;
            resourceInputs["allowedVlans"] = args ? args.allowedVlans : undefined;
            resourceInputs["attachedFabric"] = args ? args.attachedFabric : undefined;
            resourceInputs["attachedSwitchInterfaceName"] = args ? args.attachedSwitchInterfaceName : undefined;
            resourceInputs["bpduGuardFlag"] = args ? args.bpduGuardFlag : undefined;
            resourceInputs["formFactor"] = args ? args.formFactor : undefined;
            resourceInputs["interfaceName"] = args ? args.interfaceName : undefined;
            resourceInputs["linkTemplateName"] = args ? args.linkTemplateName : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["policyDescription"] = args ? args.policyDescription : undefined;
            resourceInputs["porttypeFastEnabled"] = args ? args.porttypeFastEnabled : undefined;
            resourceInputs["serviceFabric"] = args ? args.serviceFabric : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["switches"] = args ? args.switches : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceNode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceNode resources.
 */
export interface ServiceNodeState {
    adminState?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<string>;
    attachedFabric?: pulumi.Input<string>;
    attachedSwitchInterfaceName?: pulumi.Input<string>;
    bpduGuardFlag?: pulumi.Input<string>;
    formFactor?: pulumi.Input<string>;
    interfaceName?: pulumi.Input<string>;
    linkTemplateName?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    policyDescription?: pulumi.Input<string>;
    porttypeFastEnabled?: pulumi.Input<string>;
    serviceFabric?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    switches?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ServiceNode resource.
 */
export interface ServiceNodeArgs {
    adminState?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<string>;
    attachedFabric: pulumi.Input<string>;
    attachedSwitchInterfaceName: pulumi.Input<string>;
    bpduGuardFlag?: pulumi.Input<string>;
    formFactor?: pulumi.Input<string>;
    interfaceName: pulumi.Input<string>;
    linkTemplateName?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeType: pulumi.Input<string>;
    policyDescription?: pulumi.Input<string>;
    porttypeFastEnabled?: pulumi.Input<string>;
    serviceFabric: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    switches: pulumi.Input<pulumi.Input<string>[]>;
}
