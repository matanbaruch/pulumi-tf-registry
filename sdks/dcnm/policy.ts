// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dcnm:index/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    public /*out*/ readonly childPolicies!: pulumi.Output<string[]>;
    public readonly deploy!: pulumi.Output<boolean | undefined>;
    public readonly deployTimeout!: pulumi.Output<number | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly entityName!: pulumi.Output<string>;
    public readonly entityType!: pulumi.Output<string>;
    public readonly policyId!: pulumi.Output<string | undefined>;
    public readonly priority!: pulumi.Output<string>;
    public readonly serialNumber!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string>;
    public readonly templateContentType!: pulumi.Output<string>;
    public readonly templateName!: pulumi.Output<string>;
    public readonly templateProps!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["childPolicies"] = state ? state.childPolicies : undefined;
            resourceInputs["deploy"] = state ? state.deploy : undefined;
            resourceInputs["deployTimeout"] = state ? state.deployTimeout : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entityName"] = state ? state.entityName : undefined;
            resourceInputs["entityType"] = state ? state.entityType : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["templateContentType"] = state ? state.templateContentType : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["templateProps"] = state ? state.templateProps : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.serialNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serialNumber'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            if ((!args || args.templateProps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateProps'");
            }
            resourceInputs["deploy"] = args ? args.deploy : undefined;
            resourceInputs["deployTimeout"] = args ? args.deployTimeout : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entityName"] = args ? args.entityName : undefined;
            resourceInputs["entityType"] = args ? args.entityType : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["serialNumber"] = args ? args.serialNumber : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["templateContentType"] = args ? args.templateContentType : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["templateProps"] = args ? args.templateProps : undefined;
            resourceInputs["childPolicies"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    childPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    deploy?: pulumi.Input<boolean>;
    deployTimeout?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    entityName?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    policyId?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    templateContentType?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
    templateProps?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    deploy?: pulumi.Input<boolean>;
    deployTimeout?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    entityName?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    policyId?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    serialNumber: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    templateContentType?: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
    templateProps: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
