// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OrganizationIntegration extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationIntegrationState, opts?: pulumi.CustomResourceOptions): OrganizationIntegration {
        return new OrganizationIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pipes:index/organizationIntegration:OrganizationIntegration';

    /**
     * Returns true if the given object is an instance of OrganizationIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationIntegration.__pulumiType;
    }

    public readonly config!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly githubInstallationId!: pulumi.Output<string>;
    public readonly handle!: pulumi.Output<string>;
    public readonly integrationId!: pulumi.Output<string>;
    public readonly organization!: pulumi.Output<string>;
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    public readonly pipelineId!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly stateReason!: pulumi.Output<string>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public readonly updatedBy!: pulumi.Output<string>;
    public /*out*/ readonly versionId!: pulumi.Output<number>;

    /**
     * Create a OrganizationIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationIntegrationArgs | OrganizationIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationIntegrationState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["githubInstallationId"] = state ? state.githubInstallationId : undefined;
            resourceInputs["handle"] = state ? state.handle : undefined;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["pipelineId"] = state ? state.pipelineId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateReason"] = state ? state.stateReason : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as OrganizationIntegrationArgs | undefined;
            if ((!args || args.handle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handle'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["config"] = args?.config ? pulumi.secret(args.config) : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["githubInstallationId"] = args ? args.githubInstallationId : undefined;
            resourceInputs["handle"] = args ? args.handle : undefined;
            resourceInputs["integrationId"] = args ? args.integrationId : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["pipelineId"] = args ? args.pipelineId : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["stateReason"] = args ? args.stateReason : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["updatedBy"] = args ? args.updatedBy : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["config"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OrganizationIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrganizationIntegration resources.
 */
export interface OrganizationIntegrationState {
    config?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    githubInstallationId?: pulumi.Input<string>;
    handle?: pulumi.Input<string>;
    integrationId?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    pipelineId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    stateReason?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
    versionId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OrganizationIntegration resource.
 */
export interface OrganizationIntegrationArgs {
    config?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    githubInstallationId?: pulumi.Input<string>;
    handle: pulumi.Input<string>;
    integrationId?: pulumi.Input<string>;
    organization: pulumi.Input<string>;
    pipelineId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    stateReason?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
}
