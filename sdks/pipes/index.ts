// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetProcessArgs, GetProcessResult, GetProcessOutputArgs } from "./getProcess";
export const getProcess: typeof import("./getProcess").getProcess = null as any;
export const getProcessOutput: typeof import("./getProcess").getProcessOutput = null as any;
utilities.lazyLoad(exports, ["getProcess","getProcessOutput"], () => require("./getProcess"));

export { GetTenantArgs, GetTenantResult, GetTenantOutputArgs } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
export const getTenantOutput: typeof import("./getTenant").getTenantOutput = null as any;
utilities.lazyLoad(exports, ["getTenant","getTenantOutput"], () => require("./getTenant"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { OrganizationConnectionArgs, OrganizationConnectionState } from "./organizationConnection";
export type OrganizationConnection = import("./organizationConnection").OrganizationConnection;
export const OrganizationConnection: typeof import("./organizationConnection").OrganizationConnection = null as any;
utilities.lazyLoad(exports, ["OrganizationConnection"], () => require("./organizationConnection"));

export { OrganizationConnectionFolderArgs, OrganizationConnectionFolderState } from "./organizationConnectionFolder";
export type OrganizationConnectionFolder = import("./organizationConnectionFolder").OrganizationConnectionFolder;
export const OrganizationConnectionFolder: typeof import("./organizationConnectionFolder").OrganizationConnectionFolder = null as any;
utilities.lazyLoad(exports, ["OrganizationConnectionFolder"], () => require("./organizationConnectionFolder"));

export { OrganizationConnectionFolderPermissionArgs, OrganizationConnectionFolderPermissionState } from "./organizationConnectionFolderPermission";
export type OrganizationConnectionFolderPermission = import("./organizationConnectionFolderPermission").OrganizationConnectionFolderPermission;
export const OrganizationConnectionFolderPermission: typeof import("./organizationConnectionFolderPermission").OrganizationConnectionFolderPermission = null as any;
utilities.lazyLoad(exports, ["OrganizationConnectionFolderPermission"], () => require("./organizationConnectionFolderPermission"));

export { OrganizationConnectionPermissionArgs, OrganizationConnectionPermissionState } from "./organizationConnectionPermission";
export type OrganizationConnectionPermission = import("./organizationConnectionPermission").OrganizationConnectionPermission;
export const OrganizationConnectionPermission: typeof import("./organizationConnectionPermission").OrganizationConnectionPermission = null as any;
utilities.lazyLoad(exports, ["OrganizationConnectionPermission"], () => require("./organizationConnectionPermission"));

export { OrganizationIntegrationArgs, OrganizationIntegrationState } from "./organizationIntegration";
export type OrganizationIntegration = import("./organizationIntegration").OrganizationIntegration;
export const OrganizationIntegration: typeof import("./organizationIntegration").OrganizationIntegration = null as any;
utilities.lazyLoad(exports, ["OrganizationIntegration"], () => require("./organizationIntegration"));

export { OrganizationMemberArgs, OrganizationMemberState } from "./organizationMember";
export type OrganizationMember = import("./organizationMember").OrganizationMember;
export const OrganizationMember: typeof import("./organizationMember").OrganizationMember = null as any;
utilities.lazyLoad(exports, ["OrganizationMember"], () => require("./organizationMember"));

export { OrganizationWorkspaceMemberArgs, OrganizationWorkspaceMemberState } from "./organizationWorkspaceMember";
export type OrganizationWorkspaceMember = import("./organizationWorkspaceMember").OrganizationWorkspaceMember;
export const OrganizationWorkspaceMember: typeof import("./organizationWorkspaceMember").OrganizationWorkspaceMember = null as any;
utilities.lazyLoad(exports, ["OrganizationWorkspaceMember"], () => require("./organizationWorkspaceMember"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TenantConnectionArgs, TenantConnectionState } from "./tenantConnection";
export type TenantConnection = import("./tenantConnection").TenantConnection;
export const TenantConnection: typeof import("./tenantConnection").TenantConnection = null as any;
utilities.lazyLoad(exports, ["TenantConnection"], () => require("./tenantConnection"));

export { TenantConnectionFolderArgs, TenantConnectionFolderState } from "./tenantConnectionFolder";
export type TenantConnectionFolder = import("./tenantConnectionFolder").TenantConnectionFolder;
export const TenantConnectionFolder: typeof import("./tenantConnectionFolder").TenantConnectionFolder = null as any;
utilities.lazyLoad(exports, ["TenantConnectionFolder"], () => require("./tenantConnectionFolder"));

export { TenantConnectionFolderPermissionArgs, TenantConnectionFolderPermissionState } from "./tenantConnectionFolderPermission";
export type TenantConnectionFolderPermission = import("./tenantConnectionFolderPermission").TenantConnectionFolderPermission;
export const TenantConnectionFolderPermission: typeof import("./tenantConnectionFolderPermission").TenantConnectionFolderPermission = null as any;
utilities.lazyLoad(exports, ["TenantConnectionFolderPermission"], () => require("./tenantConnectionFolderPermission"));

export { TenantConnectionPermissionArgs, TenantConnectionPermissionState } from "./tenantConnectionPermission";
export type TenantConnectionPermission = import("./tenantConnectionPermission").TenantConnectionPermission;
export const TenantConnectionPermission: typeof import("./tenantConnectionPermission").TenantConnectionPermission = null as any;
utilities.lazyLoad(exports, ["TenantConnectionPermission"], () => require("./tenantConnectionPermission"));

export { TenantIntegrationArgs, TenantIntegrationState } from "./tenantIntegration";
export type TenantIntegration = import("./tenantIntegration").TenantIntegration;
export const TenantIntegration: typeof import("./tenantIntegration").TenantIntegration = null as any;
utilities.lazyLoad(exports, ["TenantIntegration"], () => require("./tenantIntegration"));

export { TenantMemberArgs, TenantMemberState } from "./tenantMember";
export type TenantMember = import("./tenantMember").TenantMember;
export const TenantMember: typeof import("./tenantMember").TenantMember = null as any;
utilities.lazyLoad(exports, ["TenantMember"], () => require("./tenantMember"));

export { UserIntegrationArgs, UserIntegrationState } from "./userIntegration";
export type UserIntegration = import("./userIntegration").UserIntegration;
export const UserIntegration: typeof import("./userIntegration").UserIntegration = null as any;
utilities.lazyLoad(exports, ["UserIntegration"], () => require("./userIntegration"));

export { UserPreferencesArgs, UserPreferencesState } from "./userPreferences";
export type UserPreferences = import("./userPreferences").UserPreferences;
export const UserPreferences: typeof import("./userPreferences").UserPreferences = null as any;
utilities.lazyLoad(exports, ["UserPreferences"], () => require("./userPreferences"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspaceAggregatorArgs, WorkspaceAggregatorState } from "./workspaceAggregator";
export type WorkspaceAggregator = import("./workspaceAggregator").WorkspaceAggregator;
export const WorkspaceAggregator: typeof import("./workspaceAggregator").WorkspaceAggregator = null as any;
utilities.lazyLoad(exports, ["WorkspaceAggregator"], () => require("./workspaceAggregator"));

export { WorkspaceConnectionArgs, WorkspaceConnectionState } from "./workspaceConnection";
export type WorkspaceConnection = import("./workspaceConnection").WorkspaceConnection;
export const WorkspaceConnection: typeof import("./workspaceConnection").WorkspaceConnection = null as any;
utilities.lazyLoad(exports, ["WorkspaceConnection"], () => require("./workspaceConnection"));

export { WorkspaceConnectionFolderArgs, WorkspaceConnectionFolderState } from "./workspaceConnectionFolder";
export type WorkspaceConnectionFolder = import("./workspaceConnectionFolder").WorkspaceConnectionFolder;
export const WorkspaceConnectionFolder: typeof import("./workspaceConnectionFolder").WorkspaceConnectionFolder = null as any;
utilities.lazyLoad(exports, ["WorkspaceConnectionFolder"], () => require("./workspaceConnectionFolder"));

export { WorkspaceDatatankArgs, WorkspaceDatatankState } from "./workspaceDatatank";
export type WorkspaceDatatank = import("./workspaceDatatank").WorkspaceDatatank;
export const WorkspaceDatatank: typeof import("./workspaceDatatank").WorkspaceDatatank = null as any;
utilities.lazyLoad(exports, ["WorkspaceDatatank"], () => require("./workspaceDatatank"));

export { WorkspaceDatatankTableArgs, WorkspaceDatatankTableState } from "./workspaceDatatankTable";
export type WorkspaceDatatankTable = import("./workspaceDatatankTable").WorkspaceDatatankTable;
export const WorkspaceDatatankTable: typeof import("./workspaceDatatankTable").WorkspaceDatatankTable = null as any;
utilities.lazyLoad(exports, ["WorkspaceDatatankTable"], () => require("./workspaceDatatankTable"));

export { WorkspaceModArgs, WorkspaceModState } from "./workspaceMod";
export type WorkspaceMod = import("./workspaceMod").WorkspaceMod;
export const WorkspaceMod: typeof import("./workspaceMod").WorkspaceMod = null as any;
utilities.lazyLoad(exports, ["WorkspaceMod"], () => require("./workspaceMod"));

export { WorkspaceModVariableArgs, WorkspaceModVariableState } from "./workspaceModVariable";
export type WorkspaceModVariable = import("./workspaceModVariable").WorkspaceModVariable;
export const WorkspaceModVariable: typeof import("./workspaceModVariable").WorkspaceModVariable = null as any;
utilities.lazyLoad(exports, ["WorkspaceModVariable"], () => require("./workspaceModVariable"));

export { WorkspacePipelineArgs, WorkspacePipelineState } from "./workspacePipeline";
export type WorkspacePipeline = import("./workspacePipeline").WorkspacePipeline;
export const WorkspacePipeline: typeof import("./workspacePipeline").WorkspacePipeline = null as any;
utilities.lazyLoad(exports, ["WorkspacePipeline"], () => require("./workspacePipeline"));

export { WorkspaceSchemaArgs, WorkspaceSchemaState } from "./workspaceSchema";
export type WorkspaceSchema = import("./workspaceSchema").WorkspaceSchema;
export const WorkspaceSchema: typeof import("./workspaceSchema").WorkspaceSchema = null as any;
utilities.lazyLoad(exports, ["WorkspaceSchema"], () => require("./workspaceSchema"));

export { WorkspaceSnapshotArgs, WorkspaceSnapshotState } from "./workspaceSnapshot";
export type WorkspaceSnapshot = import("./workspaceSnapshot").WorkspaceSnapshot;
export const WorkspaceSnapshot: typeof import("./workspaceSnapshot").WorkspaceSnapshot = null as any;
utilities.lazyLoad(exports, ["WorkspaceSnapshot"], () => require("./workspaceSnapshot"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pipes:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "pipes:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "pipes:index/organizationConnection:OrganizationConnection":
                return new OrganizationConnection(name, <any>undefined, { urn })
            case "pipes:index/organizationConnectionFolder:OrganizationConnectionFolder":
                return new OrganizationConnectionFolder(name, <any>undefined, { urn })
            case "pipes:index/organizationConnectionFolderPermission:OrganizationConnectionFolderPermission":
                return new OrganizationConnectionFolderPermission(name, <any>undefined, { urn })
            case "pipes:index/organizationConnectionPermission:OrganizationConnectionPermission":
                return new OrganizationConnectionPermission(name, <any>undefined, { urn })
            case "pipes:index/organizationIntegration:OrganizationIntegration":
                return new OrganizationIntegration(name, <any>undefined, { urn })
            case "pipes:index/organizationMember:OrganizationMember":
                return new OrganizationMember(name, <any>undefined, { urn })
            case "pipes:index/organizationWorkspaceMember:OrganizationWorkspaceMember":
                return new OrganizationWorkspaceMember(name, <any>undefined, { urn })
            case "pipes:index/tenantConnection:TenantConnection":
                return new TenantConnection(name, <any>undefined, { urn })
            case "pipes:index/tenantConnectionFolder:TenantConnectionFolder":
                return new TenantConnectionFolder(name, <any>undefined, { urn })
            case "pipes:index/tenantConnectionFolderPermission:TenantConnectionFolderPermission":
                return new TenantConnectionFolderPermission(name, <any>undefined, { urn })
            case "pipes:index/tenantConnectionPermission:TenantConnectionPermission":
                return new TenantConnectionPermission(name, <any>undefined, { urn })
            case "pipes:index/tenantIntegration:TenantIntegration":
                return new TenantIntegration(name, <any>undefined, { urn })
            case "pipes:index/tenantMember:TenantMember":
                return new TenantMember(name, <any>undefined, { urn })
            case "pipes:index/userIntegration:UserIntegration":
                return new UserIntegration(name, <any>undefined, { urn })
            case "pipes:index/userPreferences:UserPreferences":
                return new UserPreferences(name, <any>undefined, { urn })
            case "pipes:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            case "pipes:index/workspaceAggregator:WorkspaceAggregator":
                return new WorkspaceAggregator(name, <any>undefined, { urn })
            case "pipes:index/workspaceConnection:WorkspaceConnection":
                return new WorkspaceConnection(name, <any>undefined, { urn })
            case "pipes:index/workspaceConnectionFolder:WorkspaceConnectionFolder":
                return new WorkspaceConnectionFolder(name, <any>undefined, { urn })
            case "pipes:index/workspaceDatatank:WorkspaceDatatank":
                return new WorkspaceDatatank(name, <any>undefined, { urn })
            case "pipes:index/workspaceDatatankTable:WorkspaceDatatankTable":
                return new WorkspaceDatatankTable(name, <any>undefined, { urn })
            case "pipes:index/workspaceMod:WorkspaceMod":
                return new WorkspaceMod(name, <any>undefined, { urn })
            case "pipes:index/workspaceModVariable:WorkspaceModVariable":
                return new WorkspaceModVariable(name, <any>undefined, { urn })
            case "pipes:index/workspacePipeline:WorkspacePipeline":
                return new WorkspacePipeline(name, <any>undefined, { urn })
            case "pipes:index/workspaceSchema:WorkspaceSchema":
                return new WorkspaceSchema(name, <any>undefined, { urn })
            case "pipes:index/workspaceSnapshot:WorkspaceSnapshot":
                return new WorkspaceSnapshot(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pipes", "index/connection", _module)
pulumi.runtime.registerResourceModule("pipes", "index/organization", _module)
pulumi.runtime.registerResourceModule("pipes", "index/organizationConnection", _module)
pulumi.runtime.registerResourceModule("pipes", "index/organizationConnectionFolder", _module)
pulumi.runtime.registerResourceModule("pipes", "index/organizationConnectionFolderPermission", _module)
pulumi.runtime.registerResourceModule("pipes", "index/organizationConnectionPermission", _module)
pulumi.runtime.registerResourceModule("pipes", "index/organizationIntegration", _module)
pulumi.runtime.registerResourceModule("pipes", "index/organizationMember", _module)
pulumi.runtime.registerResourceModule("pipes", "index/organizationWorkspaceMember", _module)
pulumi.runtime.registerResourceModule("pipes", "index/tenantConnection", _module)
pulumi.runtime.registerResourceModule("pipes", "index/tenantConnectionFolder", _module)
pulumi.runtime.registerResourceModule("pipes", "index/tenantConnectionFolderPermission", _module)
pulumi.runtime.registerResourceModule("pipes", "index/tenantConnectionPermission", _module)
pulumi.runtime.registerResourceModule("pipes", "index/tenantIntegration", _module)
pulumi.runtime.registerResourceModule("pipes", "index/tenantMember", _module)
pulumi.runtime.registerResourceModule("pipes", "index/userIntegration", _module)
pulumi.runtime.registerResourceModule("pipes", "index/userPreferences", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspace", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspaceAggregator", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspaceConnection", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspaceConnectionFolder", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspaceDatatank", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspaceDatatankTable", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspaceMod", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspaceModVariable", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspacePipeline", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspaceSchema", _module)
pulumi.runtime.registerResourceModule("pipes", "index/workspaceSnapshot", _module)
pulumi.runtime.registerResourcePackage("pipes", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pipes") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
