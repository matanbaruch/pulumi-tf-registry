// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TenantConnection extends pulumi.CustomResource {
    /**
     * Get an existing TenantConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TenantConnectionState, opts?: pulumi.CustomResourceOptions): TenantConnection {
        return new TenantConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pipes:index/tenantConnection:TenantConnection';

    /**
     * Returns true if the given object is an instance of TenantConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TenantConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TenantConnection.__pulumiType;
    }

    public readonly config!: pulumi.Output<string | undefined>;
    public readonly configSource!: pulumi.Output<string>;
    public readonly connectionId!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly credentialSource!: pulumi.Output<string>;
    public readonly handle!: pulumi.Output<string>;
    public /*out*/ readonly handleDynamic!: pulumi.Output<string>;
    public /*out*/ readonly handleMode!: pulumi.Output<string>;
    public /*out*/ readonly integrationResourceIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly integrationResourceName!: pulumi.Output<string>;
    public /*out*/ readonly integrationResourcePath!: pulumi.Output<string>;
    public /*out*/ readonly integrationResourceType!: pulumi.Output<string>;
    public /*out*/ readonly managedById!: pulumi.Output<string>;
    public /*out*/ readonly parentId!: pulumi.Output<string>;
    public readonly plugin!: pulumi.Output<string>;
    public readonly pluginVersion!: pulumi.Output<string>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    public /*out*/ readonly trunks!: pulumi.Output<{[key: string]: string}[]>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public readonly updatedBy!: pulumi.Output<string>;
    public /*out*/ readonly versionId!: pulumi.Output<number>;

    /**
     * Create a TenantConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TenantConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TenantConnectionArgs | TenantConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TenantConnectionState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["configSource"] = state ? state.configSource : undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["credentialSource"] = state ? state.credentialSource : undefined;
            resourceInputs["handle"] = state ? state.handle : undefined;
            resourceInputs["handleDynamic"] = state ? state.handleDynamic : undefined;
            resourceInputs["handleMode"] = state ? state.handleMode : undefined;
            resourceInputs["integrationResourceIdentifier"] = state ? state.integrationResourceIdentifier : undefined;
            resourceInputs["integrationResourceName"] = state ? state.integrationResourceName : undefined;
            resourceInputs["integrationResourcePath"] = state ? state.integrationResourcePath : undefined;
            resourceInputs["integrationResourceType"] = state ? state.integrationResourceType : undefined;
            resourceInputs["managedById"] = state ? state.managedById : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["plugin"] = state ? state.plugin : undefined;
            resourceInputs["pluginVersion"] = state ? state.pluginVersion : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["trunks"] = state ? state.trunks : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as TenantConnectionArgs | undefined;
            if ((!args || args.handle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handle'");
            }
            if ((!args || args.plugin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plugin'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["configSource"] = args ? args.configSource : undefined;
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["credentialSource"] = args ? args.credentialSource : undefined;
            resourceInputs["handle"] = args ? args.handle : undefined;
            resourceInputs["plugin"] = args ? args.plugin : undefined;
            resourceInputs["pluginVersion"] = args ? args.pluginVersion : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["updatedBy"] = args ? args.updatedBy : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["handleDynamic"] = undefined /*out*/;
            resourceInputs["handleMode"] = undefined /*out*/;
            resourceInputs["integrationResourceIdentifier"] = undefined /*out*/;
            resourceInputs["integrationResourceName"] = undefined /*out*/;
            resourceInputs["integrationResourcePath"] = undefined /*out*/;
            resourceInputs["integrationResourceType"] = undefined /*out*/;
            resourceInputs["managedById"] = undefined /*out*/;
            resourceInputs["parentId"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["trunks"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TenantConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TenantConnection resources.
 */
export interface TenantConnectionState {
    config?: pulumi.Input<string>;
    configSource?: pulumi.Input<string>;
    connectionId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    credentialSource?: pulumi.Input<string>;
    handle?: pulumi.Input<string>;
    handleDynamic?: pulumi.Input<string>;
    handleMode?: pulumi.Input<string>;
    integrationResourceIdentifier?: pulumi.Input<string>;
    integrationResourceName?: pulumi.Input<string>;
    integrationResourcePath?: pulumi.Input<string>;
    integrationResourceType?: pulumi.Input<string>;
    managedById?: pulumi.Input<string>;
    parentId?: pulumi.Input<string>;
    plugin?: pulumi.Input<string>;
    pluginVersion?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    trunks?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
    versionId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TenantConnection resource.
 */
export interface TenantConnectionArgs {
    config?: pulumi.Input<string>;
    configSource?: pulumi.Input<string>;
    connectionId?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    credentialSource?: pulumi.Input<string>;
    handle: pulumi.Input<string>;
    plugin: pulumi.Input<string>;
    pluginVersion?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
}
