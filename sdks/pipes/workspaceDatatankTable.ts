// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WorkspaceDatatankTable extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceDatatankTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceDatatankTableState, opts?: pulumi.CustomResourceOptions): WorkspaceDatatankTable {
        return new WorkspaceDatatankTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pipes:index/workspaceDatatankTable:WorkspaceDatatankTable';

    /**
     * Returns true if the given object is an instance of WorkspaceDatatankTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceDatatankTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceDatatankTable.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public readonly datatankHandle!: pulumi.Output<string>;
    public readonly datatankId!: pulumi.Output<string>;
    public readonly datatankTableId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly desiredState!: pulumi.Output<string>;
    public readonly frequency!: pulumi.Output<string>;
    public /*out*/ readonly freshness!: pulumi.Output<string>;
    public /*out*/ readonly migratingFreshness!: pulumi.Output<string>;
    public readonly migratingName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly organization!: pulumi.Output<string>;
    public readonly partPer!: pulumi.Output<string | undefined>;
    public readonly sourceQuery!: pulumi.Output<string | undefined>;
    public readonly sourceSchema!: pulumi.Output<string | undefined>;
    public readonly sourceTable!: pulumi.Output<string | undefined>;
    public readonly state!: pulumi.Output<string>;
    public readonly stateReason!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    public /*out*/ readonly versionId!: pulumi.Output<number>;
    public readonly workspaceHandle!: pulumi.Output<string>;

    /**
     * Create a WorkspaceDatatankTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceDatatankTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceDatatankTableArgs | WorkspaceDatatankTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceDatatankTableState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["datatankHandle"] = state ? state.datatankHandle : undefined;
            resourceInputs["datatankId"] = state ? state.datatankId : undefined;
            resourceInputs["datatankTableId"] = state ? state.datatankTableId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredState"] = state ? state.desiredState : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["freshness"] = state ? state.freshness : undefined;
            resourceInputs["migratingFreshness"] = state ? state.migratingFreshness : undefined;
            resourceInputs["migratingName"] = state ? state.migratingName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["partPer"] = state ? state.partPer : undefined;
            resourceInputs["sourceQuery"] = state ? state.sourceQuery : undefined;
            resourceInputs["sourceSchema"] = state ? state.sourceSchema : undefined;
            resourceInputs["sourceTable"] = state ? state.sourceTable : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateReason"] = state ? state.stateReason : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
            resourceInputs["workspaceHandle"] = state ? state.workspaceHandle : undefined;
        } else {
            const args = argsOrState as WorkspaceDatatankTableArgs | undefined;
            if ((!args || args.datatankHandle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datatankHandle'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.workspaceHandle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceHandle'");
            }
            resourceInputs["datatankHandle"] = args ? args.datatankHandle : undefined;
            resourceInputs["datatankId"] = args ? args.datatankId : undefined;
            resourceInputs["datatankTableId"] = args ? args.datatankTableId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["migratingName"] = args ? args.migratingName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["partPer"] = args ? args.partPer : undefined;
            resourceInputs["sourceQuery"] = args ? args.sourceQuery : undefined;
            resourceInputs["sourceSchema"] = args ? args.sourceSchema : undefined;
            resourceInputs["sourceTable"] = args ? args.sourceTable : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["stateReason"] = args ? args.stateReason : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["workspaceHandle"] = args ? args.workspaceHandle : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["freshness"] = undefined /*out*/;
            resourceInputs["migratingFreshness"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkspaceDatatankTable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceDatatankTable resources.
 */
export interface WorkspaceDatatankTableState {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    datatankHandle?: pulumi.Input<string>;
    datatankId?: pulumi.Input<string>;
    datatankTableId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    desiredState?: pulumi.Input<string>;
    frequency?: pulumi.Input<string>;
    freshness?: pulumi.Input<string>;
    migratingFreshness?: pulumi.Input<string>;
    migratingName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    partPer?: pulumi.Input<string>;
    sourceQuery?: pulumi.Input<string>;
    sourceSchema?: pulumi.Input<string>;
    sourceTable?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    stateReason?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
    versionId?: pulumi.Input<number>;
    workspaceHandle?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkspaceDatatankTable resource.
 */
export interface WorkspaceDatatankTableArgs {
    datatankHandle: pulumi.Input<string>;
    datatankId?: pulumi.Input<string>;
    datatankTableId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    desiredState?: pulumi.Input<string>;
    frequency: pulumi.Input<string>;
    migratingName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    partPer?: pulumi.Input<string>;
    sourceQuery?: pulumi.Input<string>;
    sourceSchema?: pulumi.Input<string>;
    sourceTable?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    stateReason?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    workspaceHandle: pulumi.Input<string>;
}
