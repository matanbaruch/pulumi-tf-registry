// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserContactMethod extends pulumi.CustomResource {
    /**
     * Get an existing UserContactMethod resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserContactMethodState, opts?: pulumi.CustomResourceOptions): UserContactMethod {
        return new UserContactMethod(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/userContactMethod:UserContactMethod';

    /**
     * Returns true if the given object is an instance of UserContactMethod.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserContactMethod {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserContactMethod.__pulumiType;
    }

    public readonly address!: pulumi.Output<string>;
    public /*out*/ readonly blacklisted!: pulumi.Output<boolean>;
    public readonly countryCode!: pulumi.Output<number>;
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    public readonly label!: pulumi.Output<string>;
    public readonly sendShortEmail!: pulumi.Output<boolean | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserContactMethod resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserContactMethodArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserContactMethodArgs | UserContactMethodState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserContactMethodState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["blacklisted"] = state ? state.blacklisted : undefined;
            resourceInputs["countryCode"] = state ? state.countryCode : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["sendShortEmail"] = state ? state.sendShortEmail : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserContactMethodArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["countryCode"] = args ? args.countryCode : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["sendShortEmail"] = args ? args.sendShortEmail : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["blacklisted"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserContactMethod.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserContactMethod resources.
 */
export interface UserContactMethodState {
    address?: pulumi.Input<string>;
    blacklisted?: pulumi.Input<boolean>;
    countryCode?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    sendShortEmail?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserContactMethod resource.
 */
export interface UserContactMethodArgs {
    address: pulumi.Input<string>;
    countryCode?: pulumi.Input<number>;
    label: pulumi.Input<string>;
    sendShortEmail?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    userId: pulumi.Input<string>;
}
