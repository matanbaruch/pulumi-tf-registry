// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Extension extends pulumi.CustomResource {
    /**
     * Get an existing Extension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtensionState, opts?: pulumi.CustomResourceOptions): Extension {
        return new Extension(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/extension:Extension';

    /**
     * Returns true if the given object is an instance of Extension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Extension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Extension.__pulumiType;
    }

    public readonly config!: pulumi.Output<string>;
    public readonly endpointUrl!: pulumi.Output<string>;
    public readonly extensionObjects!: pulumi.Output<string[]>;
    public readonly extensionSchema!: pulumi.Output<string>;
    public /*out*/ readonly htmlUrl!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly summary!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Extension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtensionArgs | ExtensionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtensionState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["endpointUrl"] = state ? state.endpointUrl : undefined;
            resourceInputs["extensionObjects"] = state ? state.extensionObjects : undefined;
            resourceInputs["extensionSchema"] = state ? state.extensionSchema : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["summary"] = state ? state.summary : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ExtensionArgs | undefined;
            if ((!args || args.extensionObjects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensionObjects'");
            }
            if ((!args || args.extensionSchema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensionSchema'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["endpointUrl"] = args?.endpointUrl ? pulumi.secret(args.endpointUrl) : undefined;
            resourceInputs["extensionObjects"] = args ? args.extensionObjects : undefined;
            resourceInputs["extensionSchema"] = args ? args.extensionSchema : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["htmlUrl"] = undefined /*out*/;
            resourceInputs["summary"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["endpointUrl"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Extension.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Extension resources.
 */
export interface ExtensionState {
    config?: pulumi.Input<string>;
    endpointUrl?: pulumi.Input<string>;
    extensionObjects?: pulumi.Input<pulumi.Input<string>[]>;
    extensionSchema?: pulumi.Input<string>;
    htmlUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    summary?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Extension resource.
 */
export interface ExtensionArgs {
    config?: pulumi.Input<string>;
    endpointUrl?: pulumi.Input<string>;
    extensionObjects: pulumi.Input<pulumi.Input<string>[]>;
    extensionSchema: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
