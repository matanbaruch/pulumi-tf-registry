// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ServiceIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceIntegrationState, opts?: pulumi.CustomResourceOptions): ServiceIntegration {
        return new ServiceIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/serviceIntegration:ServiceIntegration';

    /**
     * Returns true if the given object is an instance of ServiceIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceIntegration.__pulumiType;
    }

    public readonly emailFilterMode!: pulumi.Output<string>;
    public readonly emailFilters!: pulumi.Output<outputs.ServiceIntegrationEmailFilter[] | undefined>;
    public readonly emailIncidentCreation!: pulumi.Output<string>;
    public readonly emailParsers!: pulumi.Output<outputs.ServiceIntegrationEmailParser[] | undefined>;
    public readonly emailParsingFallback!: pulumi.Output<string>;
    public /*out*/ readonly htmlUrl!: pulumi.Output<string>;
    public readonly integrationEmail!: pulumi.Output<string>;
    public readonly integrationKey!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly service!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly vendor!: pulumi.Output<string>;

    /**
     * Create a ServiceIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceIntegrationArgs | ServiceIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceIntegrationState | undefined;
            resourceInputs["emailFilterMode"] = state ? state.emailFilterMode : undefined;
            resourceInputs["emailFilters"] = state ? state.emailFilters : undefined;
            resourceInputs["emailIncidentCreation"] = state ? state.emailIncidentCreation : undefined;
            resourceInputs["emailParsers"] = state ? state.emailParsers : undefined;
            resourceInputs["emailParsingFallback"] = state ? state.emailParsingFallback : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["integrationEmail"] = state ? state.integrationEmail : undefined;
            resourceInputs["integrationKey"] = state ? state.integrationKey : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
        } else {
            const args = argsOrState as ServiceIntegrationArgs | undefined;
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["emailFilterMode"] = args ? args.emailFilterMode : undefined;
            resourceInputs["emailFilters"] = args ? args.emailFilters : undefined;
            resourceInputs["emailIncidentCreation"] = args ? args.emailIncidentCreation : undefined;
            resourceInputs["emailParsers"] = args ? args.emailParsers : undefined;
            resourceInputs["emailParsingFallback"] = args ? args.emailParsingFallback : undefined;
            resourceInputs["integrationEmail"] = args ? args.integrationEmail : undefined;
            resourceInputs["integrationKey"] = args ? args.integrationKey : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vendor"] = args ? args.vendor : undefined;
            resourceInputs["htmlUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceIntegration resources.
 */
export interface ServiceIntegrationState {
    emailFilterMode?: pulumi.Input<string>;
    emailFilters?: pulumi.Input<pulumi.Input<inputs.ServiceIntegrationEmailFilter>[]>;
    emailIncidentCreation?: pulumi.Input<string>;
    emailParsers?: pulumi.Input<pulumi.Input<inputs.ServiceIntegrationEmailParser>[]>;
    emailParsingFallback?: pulumi.Input<string>;
    htmlUrl?: pulumi.Input<string>;
    integrationEmail?: pulumi.Input<string>;
    integrationKey?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceIntegration resource.
 */
export interface ServiceIntegrationArgs {
    emailFilterMode?: pulumi.Input<string>;
    emailFilters?: pulumi.Input<pulumi.Input<inputs.ServiceIntegrationEmailFilter>[]>;
    emailIncidentCreation?: pulumi.Input<string>;
    emailParsers?: pulumi.Input<pulumi.Input<inputs.ServiceIntegrationEmailParser>[]>;
    emailParsingFallback?: pulumi.Input<string>;
    integrationEmail?: pulumi.Input<string>;
    integrationKey?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    service: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
}
