// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RulesetRule extends pulumi.CustomResource {
    /**
     * Get an existing RulesetRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RulesetRuleState, opts?: pulumi.CustomResourceOptions): RulesetRule {
        return new RulesetRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/rulesetRule:RulesetRule';

    /**
     * Returns true if the given object is an instance of RulesetRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RulesetRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RulesetRule.__pulumiType;
    }

    public readonly actions!: pulumi.Output<outputs.RulesetRuleActions | undefined>;
    public readonly catchAll!: pulumi.Output<boolean | undefined>;
    public readonly conditions!: pulumi.Output<outputs.RulesetRuleConditions | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public readonly position!: pulumi.Output<number | undefined>;
    public readonly ruleset!: pulumi.Output<string>;
    public readonly timeFrame!: pulumi.Output<outputs.RulesetRuleTimeFrame | undefined>;
    public readonly variables!: pulumi.Output<outputs.RulesetRuleVariable[] | undefined>;

    /**
     * Create a RulesetRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RulesetRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RulesetRuleArgs | RulesetRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RulesetRuleState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["catchAll"] = state ? state.catchAll : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["ruleset"] = state ? state.ruleset : undefined;
            resourceInputs["timeFrame"] = state ? state.timeFrame : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as RulesetRuleArgs | undefined;
            if ((!args || args.ruleset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleset'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["catchAll"] = args ? args.catchAll : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["ruleset"] = args ? args.ruleset : undefined;
            resourceInputs["timeFrame"] = args ? args.timeFrame : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RulesetRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RulesetRule resources.
 */
export interface RulesetRuleState {
    actions?: pulumi.Input<inputs.RulesetRuleActions>;
    catchAll?: pulumi.Input<boolean>;
    conditions?: pulumi.Input<inputs.RulesetRuleConditions>;
    disabled?: pulumi.Input<boolean>;
    position?: pulumi.Input<number>;
    ruleset?: pulumi.Input<string>;
    timeFrame?: pulumi.Input<inputs.RulesetRuleTimeFrame>;
    variables?: pulumi.Input<pulumi.Input<inputs.RulesetRuleVariable>[]>;
}

/**
 * The set of arguments for constructing a RulesetRule resource.
 */
export interface RulesetRuleArgs {
    actions?: pulumi.Input<inputs.RulesetRuleActions>;
    catchAll?: pulumi.Input<boolean>;
    conditions?: pulumi.Input<inputs.RulesetRuleConditions>;
    disabled?: pulumi.Input<boolean>;
    position?: pulumi.Input<number>;
    ruleset: pulumi.Input<string>;
    timeFrame?: pulumi.Input<inputs.RulesetRuleTimeFrame>;
    variables?: pulumi.Input<pulumi.Input<inputs.RulesetRuleVariable>[]>;
}
