// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventOrchestrationRouter extends pulumi.CustomResource {
    /**
     * Get an existing EventOrchestrationRouter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventOrchestrationRouterState, opts?: pulumi.CustomResourceOptions): EventOrchestrationRouter {
        return new EventOrchestrationRouter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/eventOrchestrationRouter:EventOrchestrationRouter';

    /**
     * Returns true if the given object is an instance of EventOrchestrationRouter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventOrchestrationRouter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventOrchestrationRouter.__pulumiType;
    }

    public readonly catchAll!: pulumi.Output<outputs.EventOrchestrationRouterCatchAll>;
    public readonly eventOrchestration!: pulumi.Output<string>;
    public readonly set!: pulumi.Output<outputs.EventOrchestrationRouterSet>;

    /**
     * Create a EventOrchestrationRouter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventOrchestrationRouterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventOrchestrationRouterArgs | EventOrchestrationRouterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventOrchestrationRouterState | undefined;
            resourceInputs["catchAll"] = state ? state.catchAll : undefined;
            resourceInputs["eventOrchestration"] = state ? state.eventOrchestration : undefined;
            resourceInputs["set"] = state ? state.set : undefined;
        } else {
            const args = argsOrState as EventOrchestrationRouterArgs | undefined;
            if ((!args || args.catchAll === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catchAll'");
            }
            if ((!args || args.eventOrchestration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventOrchestration'");
            }
            if ((!args || args.set === undefined) && !opts.urn) {
                throw new Error("Missing required property 'set'");
            }
            resourceInputs["catchAll"] = args ? args.catchAll : undefined;
            resourceInputs["eventOrchestration"] = args ? args.eventOrchestration : undefined;
            resourceInputs["set"] = args ? args.set : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventOrchestrationRouter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventOrchestrationRouter resources.
 */
export interface EventOrchestrationRouterState {
    catchAll?: pulumi.Input<inputs.EventOrchestrationRouterCatchAll>;
    eventOrchestration?: pulumi.Input<string>;
    set?: pulumi.Input<inputs.EventOrchestrationRouterSet>;
}

/**
 * The set of arguments for constructing a EventOrchestrationRouter resource.
 */
export interface EventOrchestrationRouterArgs {
    catchAll: pulumi.Input<inputs.EventOrchestrationRouterCatchAll>;
    eventOrchestration: pulumi.Input<string>;
    set: pulumi.Input<inputs.EventOrchestrationRouterSet>;
}
