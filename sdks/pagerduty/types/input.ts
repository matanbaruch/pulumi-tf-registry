// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AutomationActionsActionActionDataReference {
    invocationCommand?: pulumi.Input<string>;
    processAutomationJobArguments?: pulumi.Input<string>;
    processAutomationJobId?: pulumi.Input<string>;
    processAutomationNodeFilter?: pulumi.Input<string>;
    script?: pulumi.Input<string>;
}

export interface EscalationPolicyRule {
    escalationDelayInMinutes: pulumi.Input<number>;
    escalationRuleAssignmentStrategy?: pulumi.Input<inputs.EscalationPolicyRuleEscalationRuleAssignmentStrategy>;
    id?: pulumi.Input<string>;
    targets: pulumi.Input<pulumi.Input<inputs.EscalationPolicyRuleTarget>[]>;
}

export interface EscalationPolicyRuleEscalationRuleAssignmentStrategy {
    type?: pulumi.Input<string>;
}

export interface EscalationPolicyRuleTarget {
    id: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalCacheVariableCondition {
    expression: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalCacheVariableConfiguration {
    regex?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    ttlSeconds?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalCatchAll {
    actions: pulumi.Input<inputs.EventOrchestrationGlobalCatchAllActions>;
}

export interface EventOrchestrationGlobalCatchAllActions {
    annotate?: pulumi.Input<string>;
    automationAction?: pulumi.Input<inputs.EventOrchestrationGlobalCatchAllActionsAutomationAction>;
    dropEvent?: pulumi.Input<boolean>;
    escalationPolicy?: pulumi.Input<string>;
    eventAction?: pulumi.Input<string>;
    extractions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalCatchAllActionsExtraction>[]>;
    incidentCustomFieldUpdates?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate>[]>;
    priority?: pulumi.Input<string>;
    routeTo?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    suppress?: pulumi.Input<boolean>;
    suspend?: pulumi.Input<number>;
    variables?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalCatchAllActionsVariable>[]>;
}

export interface EventOrchestrationGlobalCatchAllActionsAutomationAction {
    autoSend?: pulumi.Input<boolean>;
    headers?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalCatchAllActionsAutomationActionHeader>[]>;
    name: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalCatchAllActionsAutomationActionParameter>[]>;
    url: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalCatchAllActionsAutomationActionHeader {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalCatchAllActionsAutomationActionParameter {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalCatchAllActionsExtraction {
    regex?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate {
    id: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalCatchAllActionsVariable {
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalSet {
    id: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalSetRule>[]>;
}

export interface EventOrchestrationGlobalSetRule {
    actions: pulumi.Input<inputs.EventOrchestrationGlobalSetRuleActions>;
    conditions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalSetRuleCondition>[]>;
    disabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalSetRuleActions {
    annotate?: pulumi.Input<string>;
    automationAction?: pulumi.Input<inputs.EventOrchestrationGlobalSetRuleActionsAutomationAction>;
    dropEvent?: pulumi.Input<boolean>;
    escalationPolicy?: pulumi.Input<string>;
    eventAction?: pulumi.Input<string>;
    extractions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalSetRuleActionsExtraction>[]>;
    incidentCustomFieldUpdates?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalSetRuleActionsIncidentCustomFieldUpdate>[]>;
    priority?: pulumi.Input<string>;
    routeTo?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    suppress?: pulumi.Input<boolean>;
    suspend?: pulumi.Input<number>;
    variables?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalSetRuleActionsVariable>[]>;
}

export interface EventOrchestrationGlobalSetRuleActionsAutomationAction {
    autoSend?: pulumi.Input<boolean>;
    headers?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalSetRuleActionsAutomationActionHeader>[]>;
    name: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationGlobalSetRuleActionsAutomationActionParameter>[]>;
    url: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalSetRuleActionsAutomationActionHeader {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalSetRuleActionsAutomationActionParameter {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalSetRuleActionsExtraction {
    regex?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalSetRuleActionsIncidentCustomFieldUpdate {
    id: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalSetRuleActionsVariable {
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationGlobalSetRuleCondition {
    expression: pulumi.Input<string>;
}

export interface EventOrchestrationIntegration {
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationIntegrationParameter>[]>;
}

export interface EventOrchestrationIntegrationParameter {
    routingKey: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface EventOrchestrationRouterCatchAll {
    actions: pulumi.Input<inputs.EventOrchestrationRouterCatchAllActions>;
}

export interface EventOrchestrationRouterCatchAllActions {
    routeTo: pulumi.Input<string>;
}

export interface EventOrchestrationRouterSet {
    id: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationRouterSetRule>[]>;
}

export interface EventOrchestrationRouterSetRule {
    actions: pulumi.Input<inputs.EventOrchestrationRouterSetRuleActions>;
    conditions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationRouterSetRuleCondition>[]>;
    disabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
}

export interface EventOrchestrationRouterSetRuleActions {
    dynamicRouteTos?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationRouterSetRuleActionsDynamicRouteTo>[]>;
    routeTo?: pulumi.Input<string>;
}

export interface EventOrchestrationRouterSetRuleActionsDynamicRouteTo {
    lookupBy: pulumi.Input<string>;
    regex: pulumi.Input<string>;
    source: pulumi.Input<string>;
}

export interface EventOrchestrationRouterSetRuleCondition {
    expression: pulumi.Input<string>;
}

export interface EventOrchestrationServiceCacheVariableCondition {
    expression: pulumi.Input<string>;
}

export interface EventOrchestrationServiceCacheVariableConfiguration {
    regex?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    ttlSeconds?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface EventOrchestrationServiceCatchAll {
    actions: pulumi.Input<inputs.EventOrchestrationServiceCatchAllActions>;
}

export interface EventOrchestrationServiceCatchAllActions {
    annotate?: pulumi.Input<string>;
    automationAction?: pulumi.Input<inputs.EventOrchestrationServiceCatchAllActionsAutomationAction>;
    escalationPolicy?: pulumi.Input<string>;
    eventAction?: pulumi.Input<string>;
    extractions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceCatchAllActionsExtraction>[]>;
    incidentCustomFieldUpdates?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceCatchAllActionsIncidentCustomFieldUpdate>[]>;
    pagerdutyAutomationAction?: pulumi.Input<inputs.EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction>;
    priority?: pulumi.Input<string>;
    routeTo?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    suppress?: pulumi.Input<boolean>;
    suspend?: pulumi.Input<number>;
    variables?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceCatchAllActionsVariable>[]>;
}

export interface EventOrchestrationServiceCatchAllActionsAutomationAction {
    autoSend?: pulumi.Input<boolean>;
    headers?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceCatchAllActionsAutomationActionHeader>[]>;
    name: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceCatchAllActionsAutomationActionParameter>[]>;
    url: pulumi.Input<string>;
}

export interface EventOrchestrationServiceCatchAllActionsAutomationActionHeader {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationServiceCatchAllActionsAutomationActionParameter {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationServiceCatchAllActionsExtraction {
    regex?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface EventOrchestrationServiceCatchAllActionsIncidentCustomFieldUpdate {
    id: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction {
    actionId: pulumi.Input<string>;
}

export interface EventOrchestrationServiceCatchAllActionsVariable {
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationServiceSet {
    id: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceSetRule>[]>;
}

export interface EventOrchestrationServiceSetRule {
    actions: pulumi.Input<inputs.EventOrchestrationServiceSetRuleActions>;
    conditions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceSetRuleCondition>[]>;
    disabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
}

export interface EventOrchestrationServiceSetRuleActions {
    annotate?: pulumi.Input<string>;
    automationAction?: pulumi.Input<inputs.EventOrchestrationServiceSetRuleActionsAutomationAction>;
    escalationPolicy?: pulumi.Input<string>;
    eventAction?: pulumi.Input<string>;
    extractions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceSetRuleActionsExtraction>[]>;
    incidentCustomFieldUpdates?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdate>[]>;
    pagerdutyAutomationAction?: pulumi.Input<inputs.EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction>;
    priority?: pulumi.Input<string>;
    routeTo?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    suppress?: pulumi.Input<boolean>;
    suspend?: pulumi.Input<number>;
    variables?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceSetRuleActionsVariable>[]>;
}

export interface EventOrchestrationServiceSetRuleActionsAutomationAction {
    autoSend?: pulumi.Input<boolean>;
    headers?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceSetRuleActionsAutomationActionHeader>[]>;
    name: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationServiceSetRuleActionsAutomationActionParameter>[]>;
    url: pulumi.Input<string>;
}

export interface EventOrchestrationServiceSetRuleActionsAutomationActionHeader {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationServiceSetRuleActionsAutomationActionParameter {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationServiceSetRuleActionsExtraction {
    regex?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdate {
    id: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction {
    actionId: pulumi.Input<string>;
}

export interface EventOrchestrationServiceSetRuleActionsVariable {
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationServiceSetRuleCondition {
    expression: pulumi.Input<string>;
}

export interface EventOrchestrationUnroutedCatchAll {
    actions: pulumi.Input<inputs.EventOrchestrationUnroutedCatchAllActions>;
}

export interface EventOrchestrationUnroutedCatchAllActions {
    eventAction?: pulumi.Input<string>;
    extractions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationUnroutedCatchAllActionsExtraction>[]>;
    severity?: pulumi.Input<string>;
    suppress?: pulumi.Input<boolean>;
    variables?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationUnroutedCatchAllActionsVariable>[]>;
}

export interface EventOrchestrationUnroutedCatchAllActionsExtraction {
    regex?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface EventOrchestrationUnroutedCatchAllActionsVariable {
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationUnroutedSet {
    id: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationUnroutedSetRule>[]>;
}

export interface EventOrchestrationUnroutedSetRule {
    actions: pulumi.Input<inputs.EventOrchestrationUnroutedSetRuleActions>;
    conditions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationUnroutedSetRuleCondition>[]>;
    disabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
}

export interface EventOrchestrationUnroutedSetRuleActions {
    eventAction?: pulumi.Input<string>;
    extractions?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationUnroutedSetRuleActionsExtraction>[]>;
    routeTo?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.EventOrchestrationUnroutedSetRuleActionsVariable>[]>;
}

export interface EventOrchestrationUnroutedSetRuleActionsExtraction {
    regex?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface EventOrchestrationUnroutedSetRuleActionsVariable {
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EventOrchestrationUnroutedSetRuleCondition {
    expression: pulumi.Input<string>;
}

export interface GetEventOrchestrationIntegration {
    id?: string;
    label?: string;
    parameters?: inputs.GetEventOrchestrationIntegrationParameter[];
}

export interface GetEventOrchestrationIntegrationArgs {
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.GetEventOrchestrationIntegrationParameterArgs>[]>;
}

export interface GetEventOrchestrationIntegrationParameter {
    routingKey?: string;
    type?: string;
}

export interface GetEventOrchestrationIntegrationParameterArgs {
    routingKey?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface IncidentWorkflowStep {
    action: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inlineStepsInputs?: pulumi.Input<pulumi.Input<inputs.IncidentWorkflowStepInlineStepsInput>[]>;
    inputs?: pulumi.Input<pulumi.Input<inputs.IncidentWorkflowStepInput>[]>;
    name: pulumi.Input<string>;
}

export interface IncidentWorkflowStepInlineStepsInput {
    name: pulumi.Input<string>;
    steps?: pulumi.Input<pulumi.Input<inputs.IncidentWorkflowStepInlineStepsInputStep>[]>;
}

export interface IncidentWorkflowStepInlineStepsInputStep {
    action: pulumi.Input<string>;
    inputs?: pulumi.Input<pulumi.Input<inputs.IncidentWorkflowStepInlineStepsInputStepInput>[]>;
    name: pulumi.Input<string>;
}

export interface IncidentWorkflowStepInlineStepsInputStepInput {
    generated?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface IncidentWorkflowStepInput {
    generated?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface IncidentWorkflowTriggerPermissions {
    restricted?: pulumi.Input<boolean>;
    teamId?: pulumi.Input<string>;
}

export interface ProviderUseAppOauthScopedToken {
    pdClientId?: pulumi.Input<string>;
    pdClientSecret?: pulumi.Input<string>;
    pdSubdomain?: pulumi.Input<string>;
}

export interface ResponsePlayResponder {
    description?: pulumi.Input<string>;
    escalationRules?: pulumi.Input<pulumi.Input<inputs.ResponsePlayResponderEscalationRule>[]>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numLoops?: pulumi.Input<number>;
    onCallHandoffNotifications?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.ResponsePlayResponderService>[]>;
    teams?: pulumi.Input<pulumi.Input<inputs.ResponsePlayResponderTeam>[]>;
    type?: pulumi.Input<string>;
}

export interface ResponsePlayResponderEscalationRule {
    escalationDelayInMinutes: pulumi.Input<number>;
    id: pulumi.Input<string>;
    targets: pulumi.Input<pulumi.Input<inputs.ResponsePlayResponderEscalationRuleTarget>[]>;
}

export interface ResponsePlayResponderEscalationRuleTarget {
    id: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ResponsePlayResponderService {
    id: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ResponsePlayResponderTeam {
    id: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ResponsePlaySubscriber {
    id?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface RulesetRuleActions {
    annotates?: pulumi.Input<pulumi.Input<inputs.RulesetRuleActionsAnnotate>[]>;
    eventActions?: pulumi.Input<pulumi.Input<inputs.RulesetRuleActionsEventAction>[]>;
    extractions?: pulumi.Input<pulumi.Input<inputs.RulesetRuleActionsExtraction>[]>;
    priorities?: pulumi.Input<pulumi.Input<inputs.RulesetRuleActionsPriority>[]>;
    routes?: pulumi.Input<pulumi.Input<inputs.RulesetRuleActionsRoute>[]>;
    severities?: pulumi.Input<pulumi.Input<inputs.RulesetRuleActionsSeverity>[]>;
    suppresses?: pulumi.Input<pulumi.Input<inputs.RulesetRuleActionsSuppress>[]>;
    suspends?: pulumi.Input<pulumi.Input<inputs.RulesetRuleActionsSuspend>[]>;
}

export interface RulesetRuleActionsAnnotate {
    value?: pulumi.Input<string>;
}

export interface RulesetRuleActionsEventAction {
    value?: pulumi.Input<string>;
}

export interface RulesetRuleActionsExtraction {
    regex?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface RulesetRuleActionsPriority {
    value?: pulumi.Input<string>;
}

export interface RulesetRuleActionsRoute {
    value?: pulumi.Input<string>;
}

export interface RulesetRuleActionsSeverity {
    value?: pulumi.Input<string>;
}

export interface RulesetRuleActionsSuppress {
    thresholdTimeAmount?: pulumi.Input<number>;
    thresholdTimeUnit?: pulumi.Input<string>;
    thresholdValue?: pulumi.Input<number>;
    value?: pulumi.Input<boolean>;
}

export interface RulesetRuleActionsSuspend {
    value?: pulumi.Input<number>;
}

export interface RulesetRuleConditions {
    operator?: pulumi.Input<string>;
    subconditions?: pulumi.Input<pulumi.Input<inputs.RulesetRuleConditionsSubcondition>[]>;
}

export interface RulesetRuleConditionsSubcondition {
    operator?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.RulesetRuleConditionsSubconditionParameter>[]>;
}

export interface RulesetRuleConditionsSubconditionParameter {
    path?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface RulesetRuleTimeFrame {
    activeBetweens?: pulumi.Input<pulumi.Input<inputs.RulesetRuleTimeFrameActiveBetween>[]>;
    scheduledWeeklies?: pulumi.Input<pulumi.Input<inputs.RulesetRuleTimeFrameScheduledWeekly>[]>;
}

export interface RulesetRuleTimeFrameActiveBetween {
    endTime?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
}

export interface RulesetRuleTimeFrameScheduledWeekly {
    duration?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
    timezone?: pulumi.Input<string>;
    weekdays?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface RulesetRuleVariable {
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.RulesetRuleVariableParameter>[]>;
    type?: pulumi.Input<string>;
}

export interface RulesetRuleVariableParameter {
    path?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface RulesetTeam {
    id: pulumi.Input<string>;
}

export interface ScheduleFinalSchedule {
    name: pulumi.Input<string>;
    renderedCoveragePercentage: pulumi.Input<string>;
}

export interface ScheduleLayer {
    end?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    renderedCoveragePercentage?: pulumi.Input<string>;
    restrictions?: pulumi.Input<pulumi.Input<inputs.ScheduleLayerRestriction>[]>;
    rotationTurnLengthSeconds: pulumi.Input<number>;
    rotationVirtualStart: pulumi.Input<string>;
    start: pulumi.Input<string>;
    users: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ScheduleLayerRestriction {
    durationSeconds: pulumi.Input<number>;
    startDayOfWeek?: pulumi.Input<number>;
    startTimeOfDay: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceAlertGroupingParameters {
    config?: pulumi.Input<inputs.ServiceAlertGroupingParametersConfig>;
    type?: pulumi.Input<string>;
}

export interface ServiceAlertGroupingParametersConfig {
    aggregate?: pulumi.Input<string>;
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    timeWindow?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
}

export interface ServiceAutoPauseNotificationsParameters {
    enabled?: pulumi.Input<boolean>;
    timeout?: pulumi.Input<number>;
}

export interface ServiceDependencyDependency {
    dependentServices?: pulumi.Input<pulumi.Input<inputs.ServiceDependencyDependencyDependentService>[]>;
    supportingServices?: pulumi.Input<pulumi.Input<inputs.ServiceDependencyDependencySupportingService>[]>;
    type?: pulumi.Input<string>;
}

export interface ServiceDependencyDependencyDependentService {
    id: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceDependencyDependencySupportingService {
    id: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceEventRuleActions {
    annotates?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleActionsAnnotate>[]>;
    eventActions?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleActionsEventAction>[]>;
    extractions?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleActionsExtraction>[]>;
    priorities?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleActionsPriority>[]>;
    severities?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleActionsSeverity>[]>;
    suppresses?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleActionsSuppress>[]>;
    suspends?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleActionsSuspend>[]>;
}

export interface ServiceEventRuleActionsAnnotate {
    value?: pulumi.Input<string>;
}

export interface ServiceEventRuleActionsEventAction {
    value?: pulumi.Input<string>;
}

export interface ServiceEventRuleActionsExtraction {
    regex?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface ServiceEventRuleActionsPriority {
    value?: pulumi.Input<string>;
}

export interface ServiceEventRuleActionsSeverity {
    value?: pulumi.Input<string>;
}

export interface ServiceEventRuleActionsSuppress {
    thresholdTimeAmount?: pulumi.Input<number>;
    thresholdTimeUnit?: pulumi.Input<string>;
    thresholdValue?: pulumi.Input<number>;
    value?: pulumi.Input<boolean>;
}

export interface ServiceEventRuleActionsSuspend {
    value?: pulumi.Input<number>;
}

export interface ServiceEventRuleConditions {
    operator?: pulumi.Input<string>;
    subconditions?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleConditionsSubcondition>[]>;
}

export interface ServiceEventRuleConditionsSubcondition {
    operator?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleConditionsSubconditionParameter>[]>;
}

export interface ServiceEventRuleConditionsSubconditionParameter {
    path?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceEventRuleTimeFrame {
    activeBetweens?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleTimeFrameActiveBetween>[]>;
    scheduledWeeklies?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleTimeFrameScheduledWeekly>[]>;
}

export interface ServiceEventRuleTimeFrameActiveBetween {
    endTime?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
}

export interface ServiceEventRuleTimeFrameScheduledWeekly {
    duration?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
    timezone?: pulumi.Input<string>;
    weekdays?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ServiceEventRuleVariable {
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ServiceEventRuleVariableParameter>[]>;
    type?: pulumi.Input<string>;
}

export interface ServiceEventRuleVariableParameter {
    path?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceIncidentUrgencyRule {
    duringSupportHours?: pulumi.Input<inputs.ServiceIncidentUrgencyRuleDuringSupportHours>;
    outsideSupportHours?: pulumi.Input<inputs.ServiceIncidentUrgencyRuleOutsideSupportHours>;
    type: pulumi.Input<string>;
    urgency?: pulumi.Input<string>;
}

export interface ServiceIncidentUrgencyRuleDuringSupportHours {
    type?: pulumi.Input<string>;
    urgency?: pulumi.Input<string>;
}

export interface ServiceIncidentUrgencyRuleOutsideSupportHours {
    type?: pulumi.Input<string>;
    urgency?: pulumi.Input<string>;
}

export interface ServiceIntegrationEmailFilter {
    bodyMode?: pulumi.Input<string>;
    bodyRegex?: pulumi.Input<string>;
    fromEmailMode?: pulumi.Input<string>;
    fromEmailRegex?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    subjectMode?: pulumi.Input<string>;
    subjectRegex?: pulumi.Input<string>;
}

export interface ServiceIntegrationEmailParser {
    action: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    matchPredicate: pulumi.Input<inputs.ServiceIntegrationEmailParserMatchPredicate>;
    valueExtractors?: pulumi.Input<pulumi.Input<inputs.ServiceIntegrationEmailParserValueExtractor>[]>;
}

export interface ServiceIntegrationEmailParserMatchPredicate {
    predicates?: pulumi.Input<pulumi.Input<inputs.ServiceIntegrationEmailParserMatchPredicatePredicate>[]>;
    type: pulumi.Input<string>;
}

export interface ServiceIntegrationEmailParserMatchPredicatePredicate {
    matcher?: pulumi.Input<string>;
    part?: pulumi.Input<string>;
    predicates?: pulumi.Input<pulumi.Input<inputs.ServiceIntegrationEmailParserMatchPredicatePredicatePredicate>[]>;
    type: pulumi.Input<string>;
}

export interface ServiceIntegrationEmailParserMatchPredicatePredicatePredicate {
    matcher: pulumi.Input<string>;
    part: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceIntegrationEmailParserValueExtractor {
    endsBefore?: pulumi.Input<string>;
    part: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
    startsAfter?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    valueName: pulumi.Input<string>;
}

export interface ServiceScheduledAction {
    ats?: pulumi.Input<pulumi.Input<inputs.ServiceScheduledActionAt>[]>;
    toUrgency?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ServiceScheduledActionAt {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ServiceSupportHours {
    daysOfWeeks?: pulumi.Input<pulumi.Input<number>[]>;
    endTime?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SlackConnectionConfig {
    events: pulumi.Input<pulumi.Input<string>[]>;
    priorities?: pulumi.Input<pulumi.Input<string>[]>;
    urgency?: pulumi.Input<string>;
}

export interface UserHandoffNotificationRuleContactMethod {
    id: pulumi.Input<string>;
    /**
     * The type of contact method to notify for. Possible values are 'email_contact_method', 'email_contact_method_reference', 'phone_contact_method', 'phone_contact_method_reference', 'push_notification_contact_method', 'push_notification_contact_method_reference', 'sms_contact_method', 'sms_contact_method_reference'.
     */
    type: pulumi.Input<string>;
}

export interface WebhookSubscriptionDeliveryMethod {
    customHeaders?: pulumi.Input<pulumi.Input<inputs.WebhookSubscriptionDeliveryMethodCustomHeader>[]>;
    temporarilyDisabled?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface WebhookSubscriptionDeliveryMethodCustomHeader {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface WebhookSubscriptionFilter {
    id?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
export namespace config {
}
