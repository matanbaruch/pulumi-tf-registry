// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AutomationActionsActionActionDataReference {
    invocationCommand?: string;
    processAutomationJobArguments?: string;
    processAutomationJobId?: string;
    processAutomationNodeFilter?: string;
    script?: string;
}

export interface EscalationPolicyRule {
    escalationDelayInMinutes: number;
    escalationRuleAssignmentStrategy?: outputs.EscalationPolicyRuleEscalationRuleAssignmentStrategy;
    id: string;
    targets: outputs.EscalationPolicyRuleTarget[];
}

export interface EscalationPolicyRuleEscalationRuleAssignmentStrategy {
    type: string;
}

export interface EscalationPolicyRuleTarget {
    id: string;
    type?: string;
}

export interface EventOrchestrationGlobalCacheVariableCondition {
    expression: string;
}

export interface EventOrchestrationGlobalCacheVariableConfiguration {
    regex?: string;
    source?: string;
    ttlSeconds?: number;
    type: string;
}

export interface EventOrchestrationGlobalCatchAll {
    actions: outputs.EventOrchestrationGlobalCatchAllActions;
}

export interface EventOrchestrationGlobalCatchAllActions {
    annotate?: string;
    automationAction?: outputs.EventOrchestrationGlobalCatchAllActionsAutomationAction;
    dropEvent?: boolean;
    escalationPolicy?: string;
    eventAction?: string;
    extractions?: outputs.EventOrchestrationGlobalCatchAllActionsExtraction[];
    incidentCustomFieldUpdates?: outputs.EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate[];
    priority?: string;
    routeTo?: string;
    severity?: string;
    suppress?: boolean;
    suspend?: number;
    variables?: outputs.EventOrchestrationGlobalCatchAllActionsVariable[];
}

export interface EventOrchestrationGlobalCatchAllActionsAutomationAction {
    autoSend?: boolean;
    headers?: outputs.EventOrchestrationGlobalCatchAllActionsAutomationActionHeader[];
    name: string;
    parameters?: outputs.EventOrchestrationGlobalCatchAllActionsAutomationActionParameter[];
    url: string;
}

export interface EventOrchestrationGlobalCatchAllActionsAutomationActionHeader {
    key: string;
    value: string;
}

export interface EventOrchestrationGlobalCatchAllActionsAutomationActionParameter {
    key: string;
    value: string;
}

export interface EventOrchestrationGlobalCatchAllActionsExtraction {
    regex?: string;
    source?: string;
    target: string;
    template?: string;
}

export interface EventOrchestrationGlobalCatchAllActionsIncidentCustomFieldUpdate {
    id: string;
    value: string;
}

export interface EventOrchestrationGlobalCatchAllActionsVariable {
    name: string;
    path: string;
    type: string;
    value: string;
}

export interface EventOrchestrationGlobalSet {
    id: string;
    rules?: outputs.EventOrchestrationGlobalSetRule[];
}

export interface EventOrchestrationGlobalSetRule {
    actions: outputs.EventOrchestrationGlobalSetRuleActions;
    conditions?: outputs.EventOrchestrationGlobalSetRuleCondition[];
    disabled?: boolean;
    id: string;
    label?: string;
}

export interface EventOrchestrationGlobalSetRuleActions {
    annotate?: string;
    automationAction?: outputs.EventOrchestrationGlobalSetRuleActionsAutomationAction;
    dropEvent?: boolean;
    escalationPolicy?: string;
    eventAction?: string;
    extractions?: outputs.EventOrchestrationGlobalSetRuleActionsExtraction[];
    incidentCustomFieldUpdates?: outputs.EventOrchestrationGlobalSetRuleActionsIncidentCustomFieldUpdate[];
    priority?: string;
    routeTo?: string;
    severity?: string;
    suppress?: boolean;
    suspend?: number;
    variables?: outputs.EventOrchestrationGlobalSetRuleActionsVariable[];
}

export interface EventOrchestrationGlobalSetRuleActionsAutomationAction {
    autoSend?: boolean;
    headers?: outputs.EventOrchestrationGlobalSetRuleActionsAutomationActionHeader[];
    name: string;
    parameters?: outputs.EventOrchestrationGlobalSetRuleActionsAutomationActionParameter[];
    url: string;
}

export interface EventOrchestrationGlobalSetRuleActionsAutomationActionHeader {
    key: string;
    value: string;
}

export interface EventOrchestrationGlobalSetRuleActionsAutomationActionParameter {
    key: string;
    value: string;
}

export interface EventOrchestrationGlobalSetRuleActionsExtraction {
    regex?: string;
    source?: string;
    target: string;
    template?: string;
}

export interface EventOrchestrationGlobalSetRuleActionsIncidentCustomFieldUpdate {
    id: string;
    value: string;
}

export interface EventOrchestrationGlobalSetRuleActionsVariable {
    name: string;
    path: string;
    type: string;
    value: string;
}

export interface EventOrchestrationGlobalSetRuleCondition {
    expression: string;
}

export interface EventOrchestrationIntegration {
    id: string;
    label: string;
    parameters: outputs.EventOrchestrationIntegrationParameter[];
}

export interface EventOrchestrationIntegrationParameter {
    routingKey: string;
    type: string;
}

export interface EventOrchestrationRouterCatchAll {
    actions: outputs.EventOrchestrationRouterCatchAllActions;
}

export interface EventOrchestrationRouterCatchAllActions {
    routeTo: string;
}

export interface EventOrchestrationRouterSet {
    id: string;
    rules?: outputs.EventOrchestrationRouterSetRule[];
}

export interface EventOrchestrationRouterSetRule {
    actions: outputs.EventOrchestrationRouterSetRuleActions;
    conditions?: outputs.EventOrchestrationRouterSetRuleCondition[];
    disabled?: boolean;
    id: string;
    label?: string;
}

export interface EventOrchestrationRouterSetRuleActions {
    dynamicRouteTos?: outputs.EventOrchestrationRouterSetRuleActionsDynamicRouteTo[];
    routeTo?: string;
}

export interface EventOrchestrationRouterSetRuleActionsDynamicRouteTo {
    lookupBy: string;
    regex: string;
    source: string;
}

export interface EventOrchestrationRouterSetRuleCondition {
    expression: string;
}

export interface EventOrchestrationServiceCacheVariableCondition {
    expression: string;
}

export interface EventOrchestrationServiceCacheVariableConfiguration {
    regex?: string;
    source?: string;
    ttlSeconds?: number;
    type: string;
}

export interface EventOrchestrationServiceCatchAll {
    actions: outputs.EventOrchestrationServiceCatchAllActions;
}

export interface EventOrchestrationServiceCatchAllActions {
    annotate?: string;
    automationAction?: outputs.EventOrchestrationServiceCatchAllActionsAutomationAction;
    escalationPolicy?: string;
    eventAction?: string;
    extractions?: outputs.EventOrchestrationServiceCatchAllActionsExtraction[];
    incidentCustomFieldUpdates?: outputs.EventOrchestrationServiceCatchAllActionsIncidentCustomFieldUpdate[];
    pagerdutyAutomationAction?: outputs.EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction;
    priority?: string;
    routeTo?: string;
    severity?: string;
    suppress?: boolean;
    suspend?: number;
    variables?: outputs.EventOrchestrationServiceCatchAllActionsVariable[];
}

export interface EventOrchestrationServiceCatchAllActionsAutomationAction {
    autoSend?: boolean;
    headers?: outputs.EventOrchestrationServiceCatchAllActionsAutomationActionHeader[];
    name: string;
    parameters?: outputs.EventOrchestrationServiceCatchAllActionsAutomationActionParameter[];
    url: string;
}

export interface EventOrchestrationServiceCatchAllActionsAutomationActionHeader {
    key: string;
    value: string;
}

export interface EventOrchestrationServiceCatchAllActionsAutomationActionParameter {
    key: string;
    value: string;
}

export interface EventOrchestrationServiceCatchAllActionsExtraction {
    regex?: string;
    source?: string;
    target: string;
    template?: string;
}

export interface EventOrchestrationServiceCatchAllActionsIncidentCustomFieldUpdate {
    id: string;
    value: string;
}

export interface EventOrchestrationServiceCatchAllActionsPagerdutyAutomationAction {
    actionId: string;
}

export interface EventOrchestrationServiceCatchAllActionsVariable {
    name: string;
    path: string;
    type: string;
    value: string;
}

export interface EventOrchestrationServiceSet {
    id: string;
    rules?: outputs.EventOrchestrationServiceSetRule[];
}

export interface EventOrchestrationServiceSetRule {
    actions: outputs.EventOrchestrationServiceSetRuleActions;
    conditions?: outputs.EventOrchestrationServiceSetRuleCondition[];
    disabled?: boolean;
    id: string;
    label?: string;
}

export interface EventOrchestrationServiceSetRuleActions {
    annotate?: string;
    automationAction?: outputs.EventOrchestrationServiceSetRuleActionsAutomationAction;
    escalationPolicy?: string;
    eventAction?: string;
    extractions?: outputs.EventOrchestrationServiceSetRuleActionsExtraction[];
    incidentCustomFieldUpdates?: outputs.EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdate[];
    pagerdutyAutomationAction?: outputs.EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction;
    priority?: string;
    routeTo?: string;
    severity?: string;
    suppress?: boolean;
    suspend?: number;
    variables?: outputs.EventOrchestrationServiceSetRuleActionsVariable[];
}

export interface EventOrchestrationServiceSetRuleActionsAutomationAction {
    autoSend?: boolean;
    headers?: outputs.EventOrchestrationServiceSetRuleActionsAutomationActionHeader[];
    name: string;
    parameters?: outputs.EventOrchestrationServiceSetRuleActionsAutomationActionParameter[];
    url: string;
}

export interface EventOrchestrationServiceSetRuleActionsAutomationActionHeader {
    key: string;
    value: string;
}

export interface EventOrchestrationServiceSetRuleActionsAutomationActionParameter {
    key: string;
    value: string;
}

export interface EventOrchestrationServiceSetRuleActionsExtraction {
    regex?: string;
    source?: string;
    target: string;
    template?: string;
}

export interface EventOrchestrationServiceSetRuleActionsIncidentCustomFieldUpdate {
    id: string;
    value: string;
}

export interface EventOrchestrationServiceSetRuleActionsPagerdutyAutomationAction {
    actionId: string;
}

export interface EventOrchestrationServiceSetRuleActionsVariable {
    name: string;
    path: string;
    type: string;
    value: string;
}

export interface EventOrchestrationServiceSetRuleCondition {
    expression: string;
}

export interface EventOrchestrationUnroutedCatchAll {
    actions: outputs.EventOrchestrationUnroutedCatchAllActions;
}

export interface EventOrchestrationUnroutedCatchAllActions {
    eventAction?: string;
    extractions?: outputs.EventOrchestrationUnroutedCatchAllActionsExtraction[];
    severity?: string;
    suppress: boolean;
    variables?: outputs.EventOrchestrationUnroutedCatchAllActionsVariable[];
}

export interface EventOrchestrationUnroutedCatchAllActionsExtraction {
    regex?: string;
    source?: string;
    target: string;
    template?: string;
}

export interface EventOrchestrationUnroutedCatchAllActionsVariable {
    name: string;
    path: string;
    type: string;
    value: string;
}

export interface EventOrchestrationUnroutedSet {
    id: string;
    rules?: outputs.EventOrchestrationUnroutedSetRule[];
}

export interface EventOrchestrationUnroutedSetRule {
    actions: outputs.EventOrchestrationUnroutedSetRuleActions;
    conditions?: outputs.EventOrchestrationUnroutedSetRuleCondition[];
    disabled?: boolean;
    id: string;
    label?: string;
}

export interface EventOrchestrationUnroutedSetRuleActions {
    eventAction?: string;
    extractions?: outputs.EventOrchestrationUnroutedSetRuleActionsExtraction[];
    routeTo?: string;
    severity?: string;
    variables?: outputs.EventOrchestrationUnroutedSetRuleActionsVariable[];
}

export interface EventOrchestrationUnroutedSetRuleActionsExtraction {
    regex?: string;
    source?: string;
    target: string;
    template?: string;
}

export interface EventOrchestrationUnroutedSetRuleActionsVariable {
    name: string;
    path: string;
    type: string;
    value: string;
}

export interface EventOrchestrationUnroutedSetRuleCondition {
    expression: string;
}

export interface GetAutomationActionsActionActionDataReference {
    invocationCommand: string;
    processAutomationJobArguments: string;
    processAutomationJobId: string;
    processAutomationNodeFilter: string;
    script: string;
}

export interface GetEventOrchestrationGlobalCacheVariableCondition {
    expression: string;
}

export interface GetEventOrchestrationGlobalCacheVariableConfiguration {
    regex: string;
    source: string;
    ttlSeconds: number;
    type: string;
}

export interface GetEventOrchestrationIntegration {
    id: string;
    label: string;
    parameters: outputs.GetEventOrchestrationIntegrationParameter[];
}

export interface GetEventOrchestrationIntegrationParameter {
    routingKey: string;
    type: string;
}

export interface GetEventOrchestrationServiceCacheVariableCondition {
    expression: string;
}

export interface GetEventOrchestrationServiceCacheVariableConfiguration {
    regex: string;
    source: string;
    ttlSeconds: number;
    type: string;
}

export interface GetEventOrchestrationsEventOrchestration {
    id: string;
    integrations: outputs.GetEventOrchestrationsEventOrchestrationIntegration[];
    name: string;
}

export interface GetEventOrchestrationsEventOrchestrationIntegration {
    id: string;
    label: string;
    parameters: outputs.GetEventOrchestrationsEventOrchestrationIntegrationParameter[];
}

export interface GetEventOrchestrationsEventOrchestrationIntegrationParameter {
    routingKey: string;
    type: string;
}

export interface GetLicensesLicense {
    allocationsAvailable: number;
    currentValue: number;
    description: string;
    htmlUrl: string;
    id: string;
    name: string;
    roleGroup: string;
    self: string;
    summary: string;
    type: string;
    validRoles: string[];
}

export interface GetServiceTeam {
    id: string;
    name: string;
}

export interface GetStandardsResourceScoresScore {
    passing: number;
    total: number;
}

export interface GetStandardsResourceScoresStandard {
    active: boolean;
    description: string;
    id: string;
    name: string;
    pass: boolean;
    type: string;
}

export interface GetStandardsResourcesScoresResource {
    resourceId: string;
    resourceType: string;
    score: outputs.GetStandardsResourcesScoresResourceScore;
    standards: outputs.GetStandardsResourcesScoresResourceStandard[];
}

export interface GetStandardsResourcesScoresResourceScore {
    passing: number;
    total: number;
}

export interface GetStandardsResourcesScoresResourceStandard {
    active: boolean;
    description: string;
    id: string;
    name: string;
    pass: boolean;
    type: string;
}

export interface GetStandardsStandard {
    active: boolean;
    description: string;
    exclusions: outputs.GetStandardsStandardExclusion[];
    id: string;
    inclusions: outputs.GetStandardsStandardInclusion[];
    name: string;
    resourceType: string;
    type: string;
}

export interface GetStandardsStandardExclusion {
    id: string;
    type: string;
}

export interface GetStandardsStandardInclusion {
    id: string;
    type: string;
}

export interface GetTeamMembersMember {
    id: string;
    role: string;
    summary: string;
    type: string;
}

export interface GetUsersUser {
    description: string;
    email: string;
    id: string;
    jobTitle: string;
    name: string;
    role: string;
    timeZone: string;
    type: string;
}

export interface IncidentWorkflowStep {
    action: string;
    id: string;
    inlineStepsInputs?: outputs.IncidentWorkflowStepInlineStepsInput[];
    inputs?: outputs.IncidentWorkflowStepInput[];
    name: string;
}

export interface IncidentWorkflowStepInlineStepsInput {
    name: string;
    steps?: outputs.IncidentWorkflowStepInlineStepsInputStep[];
}

export interface IncidentWorkflowStepInlineStepsInputStep {
    action: string;
    inputs?: outputs.IncidentWorkflowStepInlineStepsInputStepInput[];
    name: string;
}

export interface IncidentWorkflowStepInlineStepsInputStepInput {
    generated: boolean;
    name: string;
    value: string;
}

export interface IncidentWorkflowStepInput {
    generated: boolean;
    name: string;
    value: string;
}

export interface IncidentWorkflowTriggerPermissions {
    restricted: boolean;
    teamId?: string;
}

export interface ResponsePlayResponder {
    description?: string;
    escalationRules: outputs.ResponsePlayResponderEscalationRule[];
    id?: string;
    name?: string;
    numLoops: number;
    onCallHandoffNotifications: string;
    services: outputs.ResponsePlayResponderService[];
    teams: outputs.ResponsePlayResponderTeam[];
    type?: string;
}

export interface ResponsePlayResponderEscalationRule {
    escalationDelayInMinutes: number;
    id: string;
    targets: outputs.ResponsePlayResponderEscalationRuleTarget[];
}

export interface ResponsePlayResponderEscalationRuleTarget {
    id: string;
    type: string;
}

export interface ResponsePlayResponderService {
    id: string;
    type: string;
}

export interface ResponsePlayResponderTeam {
    id: string;
    type: string;
}

export interface ResponsePlaySubscriber {
    id?: string;
    type?: string;
}

export interface RulesetRuleActions {
    annotates?: outputs.RulesetRuleActionsAnnotate[];
    eventActions?: outputs.RulesetRuleActionsEventAction[];
    extractions?: outputs.RulesetRuleActionsExtraction[];
    priorities?: outputs.RulesetRuleActionsPriority[];
    routes?: outputs.RulesetRuleActionsRoute[];
    severities?: outputs.RulesetRuleActionsSeverity[];
    suppresses?: outputs.RulesetRuleActionsSuppress[];
    suspends?: outputs.RulesetRuleActionsSuspend[];
}

export interface RulesetRuleActionsAnnotate {
    value?: string;
}

export interface RulesetRuleActionsEventAction {
    value?: string;
}

export interface RulesetRuleActionsExtraction {
    regex?: string;
    source?: string;
    target?: string;
    template?: string;
}

export interface RulesetRuleActionsPriority {
    value?: string;
}

export interface RulesetRuleActionsRoute {
    value?: string;
}

export interface RulesetRuleActionsSeverity {
    value?: string;
}

export interface RulesetRuleActionsSuppress {
    thresholdTimeAmount?: number;
    thresholdTimeUnit?: string;
    thresholdValue?: number;
    value?: boolean;
}

export interface RulesetRuleActionsSuspend {
    value?: number;
}

export interface RulesetRuleConditions {
    operator?: string;
    subconditions?: outputs.RulesetRuleConditionsSubcondition[];
}

export interface RulesetRuleConditionsSubcondition {
    operator?: string;
    parameters?: outputs.RulesetRuleConditionsSubconditionParameter[];
}

export interface RulesetRuleConditionsSubconditionParameter {
    path?: string;
    value?: string;
}

export interface RulesetRuleTimeFrame {
    activeBetweens?: outputs.RulesetRuleTimeFrameActiveBetween[];
    scheduledWeeklies?: outputs.RulesetRuleTimeFrameScheduledWeekly[];
}

export interface RulesetRuleTimeFrameActiveBetween {
    endTime?: number;
    startTime?: number;
}

export interface RulesetRuleTimeFrameScheduledWeekly {
    duration?: number;
    startTime?: number;
    timezone?: string;
    weekdays?: number[];
}

export interface RulesetRuleVariable {
    name?: string;
    parameters?: outputs.RulesetRuleVariableParameter[];
    type?: string;
}

export interface RulesetRuleVariableParameter {
    path?: string;
    value?: string;
}

export interface RulesetTeam {
    id: string;
}

export interface ScheduleFinalSchedule {
    name: string;
    renderedCoveragePercentage: string;
}

export interface ScheduleLayer {
    end?: string;
    id: string;
    name: string;
    renderedCoveragePercentage: string;
    restrictions?: outputs.ScheduleLayerRestriction[];
    rotationTurnLengthSeconds: number;
    rotationVirtualStart: string;
    start: string;
    users: string[];
}

export interface ScheduleLayerRestriction {
    durationSeconds: number;
    startDayOfWeek?: number;
    startTimeOfDay: string;
    type: string;
}

export interface ServiceAlertGroupingParameters {
    config?: outputs.ServiceAlertGroupingParametersConfig;
    type?: string;
}

export interface ServiceAlertGroupingParametersConfig {
    aggregate?: string;
    fields?: string[];
    timeWindow: number;
    timeout?: number;
}

export interface ServiceAutoPauseNotificationsParameters {
    enabled: boolean;
    timeout: number;
}

export interface ServiceDependencyDependency {
    dependentServices?: outputs.ServiceDependencyDependencyDependentService[];
    supportingServices?: outputs.ServiceDependencyDependencySupportingService[];
    type: string;
}

export interface ServiceDependencyDependencyDependentService {
    id: string;
    type: string;
}

export interface ServiceDependencyDependencySupportingService {
    id: string;
    type: string;
}

export interface ServiceEventRuleActions {
    annotates?: outputs.ServiceEventRuleActionsAnnotate[];
    eventActions?: outputs.ServiceEventRuleActionsEventAction[];
    extractions?: outputs.ServiceEventRuleActionsExtraction[];
    priorities?: outputs.ServiceEventRuleActionsPriority[];
    severities?: outputs.ServiceEventRuleActionsSeverity[];
    suppresses?: outputs.ServiceEventRuleActionsSuppress[];
    suspends?: outputs.ServiceEventRuleActionsSuspend[];
}

export interface ServiceEventRuleActionsAnnotate {
    value?: string;
}

export interface ServiceEventRuleActionsEventAction {
    value?: string;
}

export interface ServiceEventRuleActionsExtraction {
    regex?: string;
    source?: string;
    target?: string;
    template?: string;
}

export interface ServiceEventRuleActionsPriority {
    value?: string;
}

export interface ServiceEventRuleActionsSeverity {
    value?: string;
}

export interface ServiceEventRuleActionsSuppress {
    thresholdTimeAmount?: number;
    thresholdTimeUnit?: string;
    thresholdValue?: number;
    value?: boolean;
}

export interface ServiceEventRuleActionsSuspend {
    value?: number;
}

export interface ServiceEventRuleConditions {
    operator?: string;
    subconditions?: outputs.ServiceEventRuleConditionsSubcondition[];
}

export interface ServiceEventRuleConditionsSubcondition {
    operator?: string;
    parameters?: outputs.ServiceEventRuleConditionsSubconditionParameter[];
}

export interface ServiceEventRuleConditionsSubconditionParameter {
    path?: string;
    value?: string;
}

export interface ServiceEventRuleTimeFrame {
    activeBetweens?: outputs.ServiceEventRuleTimeFrameActiveBetween[];
    scheduledWeeklies?: outputs.ServiceEventRuleTimeFrameScheduledWeekly[];
}

export interface ServiceEventRuleTimeFrameActiveBetween {
    endTime?: number;
    startTime?: number;
}

export interface ServiceEventRuleTimeFrameScheduledWeekly {
    duration?: number;
    startTime?: number;
    timezone?: string;
    weekdays?: number[];
}

export interface ServiceEventRuleVariable {
    name?: string;
    parameters?: outputs.ServiceEventRuleVariableParameter[];
    type?: string;
}

export interface ServiceEventRuleVariableParameter {
    path?: string;
    value?: string;
}

export interface ServiceIncidentUrgencyRule {
    duringSupportHours?: outputs.ServiceIncidentUrgencyRuleDuringSupportHours;
    outsideSupportHours?: outputs.ServiceIncidentUrgencyRuleOutsideSupportHours;
    type: string;
    urgency?: string;
}

export interface ServiceIncidentUrgencyRuleDuringSupportHours {
    type?: string;
    urgency?: string;
}

export interface ServiceIncidentUrgencyRuleOutsideSupportHours {
    type?: string;
    urgency?: string;
}

export interface ServiceIntegrationEmailFilter {
    bodyMode?: string;
    bodyRegex?: string;
    fromEmailMode?: string;
    fromEmailRegex?: string;
    id: string;
    subjectMode?: string;
    subjectRegex?: string;
}

export interface ServiceIntegrationEmailParser {
    action: string;
    id: number;
    matchPredicate: outputs.ServiceIntegrationEmailParserMatchPredicate;
    valueExtractors?: outputs.ServiceIntegrationEmailParserValueExtractor[];
}

export interface ServiceIntegrationEmailParserMatchPredicate {
    predicates?: outputs.ServiceIntegrationEmailParserMatchPredicatePredicate[];
    type: string;
}

export interface ServiceIntegrationEmailParserMatchPredicatePredicate {
    matcher?: string;
    part?: string;
    predicates?: outputs.ServiceIntegrationEmailParserMatchPredicatePredicatePredicate[];
    type: string;
}

export interface ServiceIntegrationEmailParserMatchPredicatePredicatePredicate {
    matcher: string;
    part: string;
    type: string;
}

export interface ServiceIntegrationEmailParserValueExtractor {
    endsBefore?: string;
    part: string;
    regex?: string;
    startsAfter?: string;
    type: string;
    valueName: string;
}

export interface ServiceScheduledAction {
    ats?: outputs.ServiceScheduledActionAt[];
    toUrgency?: string;
    type?: string;
}

export interface ServiceScheduledActionAt {
    name?: string;
    type?: string;
}

export interface ServiceSupportHours {
    daysOfWeeks?: number[];
    endTime?: string;
    startTime?: string;
    timeZone?: string;
    type?: string;
}

export interface SlackConnectionConfig {
    events: string[];
    priorities?: string[];
    urgency?: string;
}

export interface UserHandoffNotificationRuleContactMethod {
    id: string;
    /**
     * The type of contact method to notify for. Possible values are 'email_contact_method', 'email_contact_method_reference', 'phone_contact_method', 'phone_contact_method_reference', 'push_notification_contact_method', 'push_notification_contact_method_reference', 'sms_contact_method', 'sms_contact_method_reference'.
     */
    type: string;
}

export interface WebhookSubscriptionDeliveryMethod {
    customHeaders?: outputs.WebhookSubscriptionDeliveryMethodCustomHeader[];
    temporarilyDisabled: boolean;
    type?: string;
    url?: string;
}

export interface WebhookSubscriptionDeliveryMethodCustomHeader {
    name: string;
    value: string;
}

export interface WebhookSubscriptionFilter {
    id?: string;
    type: string;
}

export namespace config {
    export interface UseAppOauthScopedToken {
        pdClientId?: string;
        pdClientSecret?: string;
        pdSubdomain?: string;
    }

}
