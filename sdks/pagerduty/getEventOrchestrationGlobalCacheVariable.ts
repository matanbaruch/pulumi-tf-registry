// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEventOrchestrationGlobalCacheVariable(args: GetEventOrchestrationGlobalCacheVariableArgs, opts?: pulumi.InvokeOptions): Promise<GetEventOrchestrationGlobalCacheVariableResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pagerduty:index/getEventOrchestrationGlobalCacheVariable:getEventOrchestrationGlobalCacheVariable", {
        "eventOrchestration": args.eventOrchestration,
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEventOrchestrationGlobalCacheVariable.
 */
export interface GetEventOrchestrationGlobalCacheVariableArgs {
    eventOrchestration: string;
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getEventOrchestrationGlobalCacheVariable.
 */
export interface GetEventOrchestrationGlobalCacheVariableResult {
    readonly conditions: outputs.GetEventOrchestrationGlobalCacheVariableCondition[];
    readonly configurations: outputs.GetEventOrchestrationGlobalCacheVariableConfiguration[];
    readonly disabled: boolean;
    readonly eventOrchestration: string;
    readonly id?: string;
    readonly name?: string;
}
export function getEventOrchestrationGlobalCacheVariableOutput(args: GetEventOrchestrationGlobalCacheVariableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventOrchestrationGlobalCacheVariableResult> {
    return pulumi.output(args).apply((a: any) => getEventOrchestrationGlobalCacheVariable(a, opts))
}

/**
 * A collection of arguments for invoking getEventOrchestrationGlobalCacheVariable.
 */
export interface GetEventOrchestrationGlobalCacheVariableOutputArgs {
    eventOrchestration: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
