// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlackConnection extends pulumi.CustomResource {
    /**
     * Get an existing SlackConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlackConnectionState, opts?: pulumi.CustomResourceOptions): SlackConnection {
        return new SlackConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pagerduty:index/slackConnection:SlackConnection';

    /**
     * Returns true if the given object is an instance of SlackConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlackConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlackConnection.__pulumiType;
    }

    public readonly channelId!: pulumi.Output<string>;
    public /*out*/ readonly channelName!: pulumi.Output<string>;
    public readonly configs!: pulumi.Output<outputs.SlackConnectionConfig[]>;
    public readonly notificationType!: pulumi.Output<string>;
    public readonly sourceId!: pulumi.Output<string>;
    public /*out*/ readonly sourceName!: pulumi.Output<string>;
    public readonly sourceType!: pulumi.Output<string>;
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a SlackConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlackConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlackConnectionArgs | SlackConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlackConnectionState | undefined;
            resourceInputs["channelId"] = state ? state.channelId : undefined;
            resourceInputs["channelName"] = state ? state.channelName : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["notificationType"] = state ? state.notificationType : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
            resourceInputs["sourceName"] = state ? state.sourceName : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as SlackConnectionArgs | undefined;
            if ((!args || args.channelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelId'");
            }
            if ((!args || args.configs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configs'");
            }
            if ((!args || args.notificationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationType'");
            }
            if ((!args || args.sourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["channelId"] = args ? args.channelId : undefined;
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["notificationType"] = args ? args.notificationType : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["channelName"] = undefined /*out*/;
            resourceInputs["sourceName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlackConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlackConnection resources.
 */
export interface SlackConnectionState {
    channelId?: pulumi.Input<string>;
    channelName?: pulumi.Input<string>;
    configs?: pulumi.Input<pulumi.Input<inputs.SlackConnectionConfig>[]>;
    notificationType?: pulumi.Input<string>;
    sourceId?: pulumi.Input<string>;
    sourceName?: pulumi.Input<string>;
    sourceType?: pulumi.Input<string>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlackConnection resource.
 */
export interface SlackConnectionArgs {
    channelId: pulumi.Input<string>;
    configs: pulumi.Input<pulumi.Input<inputs.SlackConnectionConfig>[]>;
    notificationType: pulumi.Input<string>;
    sourceId: pulumi.Input<string>;
    sourceType: pulumi.Input<string>;
    workspaceId: pulumi.Input<string>;
}
