// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Bucket extends pulumi.CustomResource {
    /**
     * Get an existing Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketState, opts?: pulumi.CustomResourceOptions): Bucket {
        return new Bucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'b2:index/bucket:Bucket';

    /**
     * Returns true if the given object is an instance of Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bucket.__pulumiType;
    }

    /**
     * Account ID that the bucket belongs to.
     */
    public /*out*/ readonly accountId!: pulumi.Output<string>;
    /**
     * The ID of the bucket.
     */
    public /*out*/ readonly bucketId!: pulumi.Output<string>;
    /**
     * User-defined information to be stored with the bucket.
     */
    public readonly bucketInfo!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the bucket.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * The bucket type. Either 'allPublic', meaning that files in this bucket can be downloaded by anybody, or 'allPrivate'.
     */
    public readonly bucketType!: pulumi.Output<string>;
    /**
     * The initial list of CORS rules for this bucket.
     */
    public readonly corsRules!: pulumi.Output<outputs.BucketCorsRule[] | undefined>;
    /**
     * The default server-side encryption settings for this bucket.
     */
    public readonly defaultServerSideEncryption!: pulumi.Output<outputs.BucketDefaultServerSideEncryption | undefined>;
    /**
     * File lock enabled flag, and default retention settings.
     */
    public readonly fileLockConfigurations!: pulumi.Output<outputs.BucketFileLockConfiguration[] | undefined>;
    /**
     * The initial list of lifecycle rules for this bucket.
     */
    public readonly lifecycleRules!: pulumi.Output<outputs.BucketLifecycleRule[] | undefined>;
    /**
     * List of bucket options.
     */
    public /*out*/ readonly options!: pulumi.Output<string[]>;
    /**
     * Bucket revision.
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;

    /**
     * Create a Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketArgs | BucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["bucketInfo"] = state ? state.bucketInfo : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["bucketType"] = state ? state.bucketType : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["defaultServerSideEncryption"] = state ? state.defaultServerSideEncryption : undefined;
            resourceInputs["fileLockConfigurations"] = state ? state.fileLockConfigurations : undefined;
            resourceInputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
        } else {
            const args = argsOrState as BucketArgs | undefined;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.bucketType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketType'");
            }
            resourceInputs["bucketInfo"] = args ? args.bucketInfo : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["bucketType"] = args ? args.bucketType : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["defaultServerSideEncryption"] = args ? args.defaultServerSideEncryption : undefined;
            resourceInputs["fileLockConfigurations"] = args ? args.fileLockConfigurations : undefined;
            resourceInputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["bucketId"] = undefined /*out*/;
            resourceInputs["options"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Bucket resources.
 */
export interface BucketState {
    /**
     * Account ID that the bucket belongs to.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The ID of the bucket.
     */
    bucketId?: pulumi.Input<string>;
    /**
     * User-defined information to be stored with the bucket.
     */
    bucketInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the bucket.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The bucket type. Either 'allPublic', meaning that files in this bucket can be downloaded by anybody, or 'allPrivate'.
     */
    bucketType?: pulumi.Input<string>;
    /**
     * The initial list of CORS rules for this bucket.
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.BucketCorsRule>[]>;
    /**
     * The default server-side encryption settings for this bucket.
     */
    defaultServerSideEncryption?: pulumi.Input<inputs.BucketDefaultServerSideEncryption>;
    /**
     * File lock enabled flag, and default retention settings.
     */
    fileLockConfigurations?: pulumi.Input<pulumi.Input<inputs.BucketFileLockConfiguration>[]>;
    /**
     * The initial list of lifecycle rules for this bucket.
     */
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.BucketLifecycleRule>[]>;
    /**
     * List of bucket options.
     */
    options?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Bucket revision.
     */
    revision?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Bucket resource.
 */
export interface BucketArgs {
    /**
     * User-defined information to be stored with the bucket.
     */
    bucketInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the bucket.
     */
    bucketName: pulumi.Input<string>;
    /**
     * The bucket type. Either 'allPublic', meaning that files in this bucket can be downloaded by anybody, or 'allPrivate'.
     */
    bucketType: pulumi.Input<string>;
    /**
     * The initial list of CORS rules for this bucket.
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.BucketCorsRule>[]>;
    /**
     * The default server-side encryption settings for this bucket.
     */
    defaultServerSideEncryption?: pulumi.Input<inputs.BucketDefaultServerSideEncryption>;
    /**
     * File lock enabled flag, and default retention settings.
     */
    fileLockConfigurations?: pulumi.Input<pulumi.Input<inputs.BucketFileLockConfiguration>[]>;
    /**
     * The initial list of lifecycle rules for this bucket.
     */
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.BucketLifecycleRule>[]>;
}
