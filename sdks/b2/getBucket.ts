// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getBucket(args: GetBucketArgs, opts?: pulumi.InvokeOptions): Promise<GetBucketResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("b2:index/getBucket:getBucket", {
        "bucketName": args.bucketName,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBucket.
 */
export interface GetBucketArgs {
    bucketName: string;
    id?: string;
}

/**
 * A collection of values returned by getBucket.
 */
export interface GetBucketResult {
    readonly accountId: string;
    readonly bucketId: string;
    readonly bucketInfo: {[key: string]: string};
    readonly bucketName: string;
    readonly bucketType: string;
    readonly corsRules: outputs.GetBucketCorsRule[];
    readonly defaultServerSideEncryptions: outputs.GetBucketDefaultServerSideEncryption[];
    readonly fileLockConfigurations: outputs.GetBucketFileLockConfiguration[];
    readonly id: string;
    readonly lifecycleRules: outputs.GetBucketLifecycleRule[];
    readonly options: string[];
    readonly revision: number;
}
export function getBucketOutput(args: GetBucketOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBucketResult> {
    return pulumi.output(args).apply((a: any) => getBucket(a, opts))
}

/**
 * A collection of arguments for invoking getBucket.
 */
export interface GetBucketOutputArgs {
    bucketName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
