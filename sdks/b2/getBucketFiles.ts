// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getBucketFiles(args: GetBucketFilesArgs, opts?: pulumi.InvokeOptions): Promise<GetBucketFilesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("b2:index/getBucketFiles:getBucketFiles", {
        "bucketId": args.bucketId,
        "folderName": args.folderName,
        "id": args.id,
        "recursive": args.recursive,
        "showVersions": args.showVersions,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBucketFiles.
 */
export interface GetBucketFilesArgs {
    bucketId: string;
    folderName?: string;
    id?: string;
    recursive?: boolean;
    showVersions?: boolean;
}

/**
 * A collection of values returned by getBucketFiles.
 */
export interface GetBucketFilesResult {
    readonly bucketId: string;
    readonly fileVersions: outputs.GetBucketFilesFileVersion[];
    readonly folderName?: string;
    readonly id: string;
    readonly recursive?: boolean;
    readonly showVersions?: boolean;
}
export function getBucketFilesOutput(args: GetBucketFilesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBucketFilesResult> {
    return pulumi.output(args).apply((a: any) => getBucketFiles(a, opts))
}

/**
 * A collection of arguments for invoking getBucketFiles.
 */
export interface GetBucketFilesOutputArgs {
    bucketId: pulumi.Input<string>;
    folderName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    recursive?: pulumi.Input<boolean>;
    showVersions?: pulumi.Input<boolean>;
}
