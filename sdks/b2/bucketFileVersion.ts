// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BucketFileVersion extends pulumi.CustomResource {
    /**
     * Get an existing BucketFileVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketFileVersionState, opts?: pulumi.CustomResourceOptions): BucketFileVersion {
        return new BucketFileVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'b2:index/bucketFileVersion:BucketFileVersion';

    /**
     * Returns true if the given object is an instance of BucketFileVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketFileVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketFileVersion.__pulumiType;
    }

    /**
     * One of 'start', 'upload', 'hide', 'folder', or other values added in the future.
     */
    public /*out*/ readonly action!: pulumi.Output<string>;
    /**
     * The ID of the bucket.
     */
    public readonly bucketId!: pulumi.Output<string>;
    /**
     * MD5 sum of the content.
     */
    public /*out*/ readonly contentMd5!: pulumi.Output<string>;
    /**
     * SHA1 hash of the content.
     */
    public /*out*/ readonly contentSha1!: pulumi.Output<string>;
    /**
     * Content type. If not set, it will be set based on the file extension.
     */
    public readonly contentType!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier for this version of this file.
     */
    public /*out*/ readonly fileId!: pulumi.Output<string>;
    /**
     * The custom information that is uploaded with the file.
     */
    public readonly fileInfo!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the B2 file.
     */
    public readonly fileName!: pulumi.Output<string>;
    /**
     * Server-side encryption settings.
     */
    public readonly serverSideEncryption!: pulumi.Output<outputs.BucketFileVersionServerSideEncryption | undefined>;
    /**
     * The file size.
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * Path to the local file.
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * This is a UTC time when this file was uploaded.
     */
    public /*out*/ readonly uploadTimestamp!: pulumi.Output<number>;

    /**
     * Create a BucketFileVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketFileVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketFileVersionArgs | BucketFileVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketFileVersionState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["contentMd5"] = state ? state.contentMd5 : undefined;
            resourceInputs["contentSha1"] = state ? state.contentSha1 : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["fileId"] = state ? state.fileId : undefined;
            resourceInputs["fileInfo"] = state ? state.fileInfo : undefined;
            resourceInputs["fileName"] = state ? state.fileName : undefined;
            resourceInputs["serverSideEncryption"] = state ? state.serverSideEncryption : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["uploadTimestamp"] = state ? state.uploadTimestamp : undefined;
        } else {
            const args = argsOrState as BucketFileVersionArgs | undefined;
            if ((!args || args.bucketId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketId'");
            }
            if ((!args || args.fileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileName'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["bucketId"] = args ? args.bucketId : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["fileInfo"] = args ? args.fileInfo : undefined;
            resourceInputs["fileName"] = args ? args.fileName : undefined;
            resourceInputs["serverSideEncryption"] = args ? args.serverSideEncryption : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["action"] = undefined /*out*/;
            resourceInputs["contentMd5"] = undefined /*out*/;
            resourceInputs["contentSha1"] = undefined /*out*/;
            resourceInputs["fileId"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["uploadTimestamp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketFileVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BucketFileVersion resources.
 */
export interface BucketFileVersionState {
    /**
     * One of 'start', 'upload', 'hide', 'folder', or other values added in the future.
     */
    action?: pulumi.Input<string>;
    /**
     * The ID of the bucket.
     */
    bucketId?: pulumi.Input<string>;
    /**
     * MD5 sum of the content.
     */
    contentMd5?: pulumi.Input<string>;
    /**
     * SHA1 hash of the content.
     */
    contentSha1?: pulumi.Input<string>;
    /**
     * Content type. If not set, it will be set based on the file extension.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The unique identifier for this version of this file.
     */
    fileId?: pulumi.Input<string>;
    /**
     * The custom information that is uploaded with the file.
     */
    fileInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the B2 file.
     */
    fileName?: pulumi.Input<string>;
    /**
     * Server-side encryption settings.
     */
    serverSideEncryption?: pulumi.Input<inputs.BucketFileVersionServerSideEncryption>;
    /**
     * The file size.
     */
    size?: pulumi.Input<number>;
    /**
     * Path to the local file.
     */
    source?: pulumi.Input<string>;
    /**
     * This is a UTC time when this file was uploaded.
     */
    uploadTimestamp?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BucketFileVersion resource.
 */
export interface BucketFileVersionArgs {
    /**
     * The ID of the bucket.
     */
    bucketId: pulumi.Input<string>;
    /**
     * Content type. If not set, it will be set based on the file extension.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The custom information that is uploaded with the file.
     */
    fileInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the B2 file.
     */
    fileName: pulumi.Input<string>;
    /**
     * Server-side encryption settings.
     */
    serverSideEncryption?: pulumi.Input<inputs.BucketFileVersionServerSideEncryption>;
    /**
     * Path to the local file.
     */
    source: pulumi.Input<string>;
}
