// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BucketCorsRule {
    /**
     * If present, this is a list of headers that are allowed in a pre-flight OPTIONS's request's Access-Control-Request-Headers header value.
     */
    allowedHeaders?: string[];
    /**
     * A list specifying which operations the rule allows.
     */
    allowedOperations: string[];
    /**
     * A non-empty list specifying which origins the rule covers.
     */
    allowedOrigins: string[];
    /**
     * A name for humans to recognize the rule in a user interface.
     */
    corsRuleName: string;
    /**
     * If present, this is a list of headers that may be exposed to an application inside the client.
     */
    exposeHeaders?: string[];
    /**
     * This specifies the maximum number of seconds that a browser may cache the response to a preflight request.
     */
    maxAgeSeconds: number;
}

export interface BucketDefaultServerSideEncryption {
    /**
     * Server-side encryption algorithm. AES256 is the only one supported.
     */
    algorithm?: string;
    /**
     * Server-side encryption mode.
     */
    mode?: string;
}

export interface BucketFileLockConfiguration {
    /**
     * Default retention settings for files uploaded to this bucket
     */
    defaultRetention?: outputs.BucketFileLockConfigurationDefaultRetention;
    /**
     * If present, the boolean value specifies whether bucket is File Lock-enabled. Defaults to `false`.
     */
    isFileLockEnabled?: boolean;
}

export interface BucketFileLockConfigurationDefaultRetention {
    /**
     * Default retention mode (compliance|governance|none).
     */
    mode: string;
    /**
     * How long for to make files immutable
     */
    period?: outputs.BucketFileLockConfigurationDefaultRetentionPeriod;
}

export interface BucketFileLockConfigurationDefaultRetentionPeriod {
    /**
     * Duration
     */
    duration: number;
    /**
     * Unit for duration (days|years)
     */
    unit: string;
}

export interface BucketFileVersionServerSideEncryption {
    /**
     * Server-side encryption algorithm. AES256 is the only one supported.
     */
    algorithm?: string;
    /**
     * Key used in SSE-C mode.
     */
    key?: outputs.BucketFileVersionServerSideEncryptionKey;
    /**
     * Server-side encryption mode.
     */
    mode?: string;
}

export interface BucketFileVersionServerSideEncryptionKey {
    /**
     * Key identifier stored in file info metadata
     */
    keyId?: string;
    /**
     * Secret key value, in standard Base 64 encoding (RFC 4648)
     */
    secretB64?: string;
}

export interface BucketLifecycleRule {
    /**
     * It says how long to keep file versions that are not the current version.
     */
    daysFromHidingToDeleting?: number;
    /**
     * It causes files to be hidden automatically after the given number of days.
     */
    daysFromUploadingToHiding?: number;
    /**
     * It specifies which files in the bucket it applies to.
     */
    fileNamePrefix: string;
}

export interface GetAccountInfoAllowed {
    bucketId: string;
    bucketName: string;
    capabilities: string[];
    namePrefix: string;
}

export interface GetBucketCorsRule {
    allowedHeaders: string[];
    allowedOperations: string[];
    allowedOrigins: string[];
    corsRuleName: string;
    exposeHeaders: string[];
    maxAgeSeconds: number;
}

export interface GetBucketDefaultServerSideEncryption {
    algorithm: string;
    mode: string;
}

export interface GetBucketFileFileVersion {
    action: string;
    bucketId: string;
    contentMd5: string;
    contentSha1: string;
    contentType: string;
    fileId: string;
    fileInfo: {[key: string]: string};
    fileName: string;
    serverSideEncryptions: outputs.GetBucketFileFileVersionServerSideEncryption[];
    size: number;
    uploadTimestamp: number;
}

export interface GetBucketFileFileVersionServerSideEncryption {
    algorithm: string;
    mode: string;
}

export interface GetBucketFileLockConfiguration {
    defaultRetentions: outputs.GetBucketFileLockConfigurationDefaultRetention[];
    isFileLockEnabled: boolean;
}

export interface GetBucketFileLockConfigurationDefaultRetention {
    mode: string;
    periods: outputs.GetBucketFileLockConfigurationDefaultRetentionPeriod[];
}

export interface GetBucketFileLockConfigurationDefaultRetentionPeriod {
    duration: number;
    unit: string;
}

export interface GetBucketFilesFileVersion {
    action: string;
    bucketId: string;
    contentMd5: string;
    contentSha1: string;
    contentType: string;
    fileId: string;
    fileInfo: {[key: string]: string};
    fileName: string;
    serverSideEncryptions: outputs.GetBucketFilesFileVersionServerSideEncryption[];
    size: number;
    uploadTimestamp: number;
}

export interface GetBucketFilesFileVersionServerSideEncryption {
    algorithm: string;
    mode: string;
}

export interface GetBucketLifecycleRule {
    daysFromHidingToDeleting: number;
    daysFromUploadingToHiding: number;
    fileNamePrefix: string;
}

