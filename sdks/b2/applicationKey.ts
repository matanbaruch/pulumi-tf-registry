// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApplicationKey extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationKeyState, opts?: pulumi.CustomResourceOptions): ApplicationKey {
        return new ApplicationKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'b2:index/applicationKey:ApplicationKey';

    /**
     * Returns true if the given object is an instance of ApplicationKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationKey.__pulumiType;
    }

    /**
     * The key.
     */
    public /*out*/ readonly applicationKey!: pulumi.Output<string>;
    /**
     * The ID of the newly created key.
     */
    public /*out*/ readonly applicationKeyId!: pulumi.Output<string>;
    /**
     * When present, restricts access to one bucket.
     */
    public readonly bucketId!: pulumi.Output<string | undefined>;
    /**
     * A set of strings, each one naming a capability the key has.
     */
    public readonly capabilities!: pulumi.Output<string[]>;
    /**
     * The name of the key.
     */
    public readonly keyName!: pulumi.Output<string>;
    /**
     * When present, restricts access to files whose names start with the prefix.
     */
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    /**
     * List of application key options.
     */
    public /*out*/ readonly options!: pulumi.Output<string[]>;

    /**
     * Create a ApplicationKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationKeyArgs | ApplicationKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationKeyState | undefined;
            resourceInputs["applicationKey"] = state ? state.applicationKey : undefined;
            resourceInputs["applicationKeyId"] = state ? state.applicationKeyId : undefined;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
        } else {
            const args = argsOrState as ApplicationKeyArgs | undefined;
            if ((!args || args.capabilities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capabilities'");
            }
            if ((!args || args.keyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyName'");
            }
            resourceInputs["bucketId"] = args ? args.bucketId : undefined;
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["applicationKey"] = undefined /*out*/;
            resourceInputs["applicationKeyId"] = undefined /*out*/;
            resourceInputs["options"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["applicationKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApplicationKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationKey resources.
 */
export interface ApplicationKeyState {
    /**
     * The key.
     */
    applicationKey?: pulumi.Input<string>;
    /**
     * The ID of the newly created key.
     */
    applicationKeyId?: pulumi.Input<string>;
    /**
     * When present, restricts access to one bucket.
     */
    bucketId?: pulumi.Input<string>;
    /**
     * A set of strings, each one naming a capability the key has.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the key.
     */
    keyName?: pulumi.Input<string>;
    /**
     * When present, restricts access to files whose names start with the prefix.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * List of application key options.
     */
    options?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ApplicationKey resource.
 */
export interface ApplicationKeyArgs {
    /**
     * When present, restricts access to one bucket.
     */
    bucketId?: pulumi.Input<string>;
    /**
     * A set of strings, each one naming a capability the key has.
     */
    capabilities: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the key.
     */
    keyName: pulumi.Input<string>;
    /**
     * When present, restricts access to files whose names start with the prefix.
     */
    namePrefix?: pulumi.Input<string>;
}
