// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { GetConnectedAccountsArgs, GetConnectedAccountsResult, GetConnectedAccountsOutputArgs } from "./getConnectedAccounts";
export const getConnectedAccounts: typeof import("./getConnectedAccounts").getConnectedAccounts = null as any;
export const getConnectedAccountsOutput: typeof import("./getConnectedAccounts").getConnectedAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getConnectedAccounts","getConnectedAccountsOutput"], () => require("./getConnectedAccounts"));

export { GetCustomerSubnetsArgs, GetCustomerSubnetsResult, GetCustomerSubnetsOutputArgs } from "./getCustomerSubnets";
export const getCustomerSubnets: typeof import("./getCustomerSubnets").getCustomerSubnets = null as any;
export const getCustomerSubnetsOutput: typeof import("./getCustomerSubnets").getCustomerSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerSubnets","getCustomerSubnetsOutput"], () => require("./getCustomerSubnets"));

export { GetOrgResult } from "./getOrg";
export const getOrg: typeof import("./getOrg").getOrg = null as any;
export const getOrgOutput: typeof import("./getOrg").getOrgOutput = null as any;
utilities.lazyLoad(exports, ["getOrg","getOrgOutput"], () => require("./getOrg"));

export { GetSddcArgs, GetSddcResult, GetSddcOutputArgs } from "./getSddc";
export const getSddc: typeof import("./getSddc").getSddc = null as any;
export const getSddcOutput: typeof import("./getSddc").getSddcOutput = null as any;
utilities.lazyLoad(exports, ["getSddc","getSddcOutput"], () => require("./getSddc"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicIpArgs, PublicIpState } from "./publicIp";
export type PublicIp = import("./publicIp").PublicIp;
export const PublicIp: typeof import("./publicIp").PublicIp = null as any;
utilities.lazyLoad(exports, ["PublicIp"], () => require("./publicIp"));

export { SddcArgs, SddcState } from "./sddc";
export type Sddc = import("./sddc").Sddc;
export const Sddc: typeof import("./sddc").Sddc = null as any;
utilities.lazyLoad(exports, ["Sddc"], () => require("./sddc"));

export { SddcGroupArgs, SddcGroupState } from "./sddcGroup";
export type SddcGroup = import("./sddcGroup").SddcGroup;
export const SddcGroup: typeof import("./sddcGroup").SddcGroup = null as any;
utilities.lazyLoad(exports, ["SddcGroup"], () => require("./sddcGroup"));

export { SiteRecoveryArgs, SiteRecoveryState } from "./siteRecovery";
export type SiteRecovery = import("./siteRecovery").SiteRecovery;
export const SiteRecovery: typeof import("./siteRecovery").SiteRecovery = null as any;
utilities.lazyLoad(exports, ["SiteRecovery"], () => require("./siteRecovery"));

export { SrmNodeArgs, SrmNodeState } from "./srmNode";
export type SrmNode = import("./srmNode").SrmNode;
export const SrmNode: typeof import("./srmNode").SrmNode = null as any;
utilities.lazyLoad(exports, ["SrmNode"], () => require("./srmNode"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vmc:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "vmc:index/publicIp:PublicIp":
                return new PublicIp(name, <any>undefined, { urn })
            case "vmc:index/sddc:Sddc":
                return new Sddc(name, <any>undefined, { urn })
            case "vmc:index/sddcGroup:SddcGroup":
                return new SddcGroup(name, <any>undefined, { urn })
            case "vmc:index/siteRecovery:SiteRecovery":
                return new SiteRecovery(name, <any>undefined, { urn })
            case "vmc:index/srmNode:SrmNode":
                return new SrmNode(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vmc", "index/cluster", _module)
pulumi.runtime.registerResourceModule("vmc", "index/publicIp", _module)
pulumi.runtime.registerResourceModule("vmc", "index/sddc", _module)
pulumi.runtime.registerResourceModule("vmc", "index/sddcGroup", _module)
pulumi.runtime.registerResourceModule("vmc", "index/siteRecovery", _module)
pulumi.runtime.registerResourceModule("vmc", "index/srmNode", _module)
pulumi.runtime.registerResourcePackage("vmc", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vmc") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
