// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Sddc extends pulumi.CustomResource {
    /**
     * Get an existing Sddc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SddcState, opts?: pulumi.CustomResourceOptions): Sddc {
        return new Sddc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vmc:index/sddc:Sddc';

    /**
     * Returns true if the given object is an instance of Sddc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sddc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sddc.__pulumiType;
    }

    public readonly accountLinkSddcConfigs!: pulumi.Output<outputs.SddcAccountLinkSddcConfig[] | undefined>;
    public /*out*/ readonly accountLinkState!: pulumi.Output<string>;
    public /*out*/ readonly availabilityZones!: pulumi.Output<string[]>;
    public /*out*/ readonly cloudPassword!: pulumi.Output<string>;
    public /*out*/ readonly cloudUsername!: pulumi.Output<string>;
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly clusterInfo!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    public readonly delayAccountLink!: pulumi.Output<boolean | undefined>;
    public readonly deploymentType!: pulumi.Output<string | undefined>;
    /**
     * The EDRS policy type. This can either be 'cost', 'performance', 'storage-scaleup' or 'rapid-scaleup'. Default :
     * storage-scaleup.
     */
    public readonly edrsPolicyType!: pulumi.Output<string>;
    /**
     * True if EDRS is enabled
     */
    public readonly enableEdrs!: pulumi.Output<boolean>;
    public readonly hostInstanceType!: pulumi.Output<string | undefined>;
    /**
     * Uplink MTU of direct connect, SDDC-grouping and outposts traffic in edge tier-0 router port.
     */
    public readonly intranetMtuUplink!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of hosts that the cluster can scale out to.
     */
    public readonly maxHosts!: pulumi.Output<number>;
    /**
     * Indicates the desired licensing support, if any, of Microsoft software.
     */
    public readonly microsoftLicensingConfigs!: pulumi.Output<outputs.SddcMicrosoftLicensingConfig[] | undefined>;
    /**
     * The minimum number of hosts that the cluster can scale in to.
     */
    public readonly minHosts!: pulumi.Output<number>;
    public readonly nsxtCloudadmin!: pulumi.Output<string>;
    public readonly nsxtCloudadminPassword!: pulumi.Output<string>;
    public readonly nsxtCloudaudit!: pulumi.Output<string>;
    public readonly nsxtCloudauditPassword!: pulumi.Output<string>;
    public readonly nsxtPrivateIp!: pulumi.Output<string>;
    public readonly nsxtPrivateUrl!: pulumi.Output<string>;
    public /*out*/ readonly nsxtReverseProxyUrl!: pulumi.Output<string>;
    public readonly nsxtUi!: pulumi.Output<boolean>;
    /**
     * The amount of hosts in the primary cluster of the SDDC
     */
    public readonly numHost!: pulumi.Output<number>;
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    public readonly providerType!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly sddcAccessState!: pulumi.Output<string>;
    public readonly sddcName!: pulumi.Output<string>;
    public /*out*/ readonly sddcSize!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly sddcState!: pulumi.Output<string>;
    public readonly sddcTemplateId!: pulumi.Output<string | undefined>;
    public readonly sddcType!: pulumi.Output<string | undefined>;
    /**
     * The size of the vCenter and NSX appliances. 'large' or 'LARGE' SDDC size corresponds to a large vCenter appliance and
     * large NSX appliance. 'medium' or 'MEDIUM' SDDC size corresponds to medium vCenter appliance and medium NSX appliance.
     * Default : 'medium'.
     */
    public readonly size!: pulumi.Output<string | undefined>;
    public readonly skipCreatingVxlan!: pulumi.Output<boolean | undefined>;
    public readonly ssoDomain!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SddcTimeouts | undefined>;
    public /*out*/ readonly updated!: pulumi.Output<string>;
    public /*out*/ readonly updatedByUserId!: pulumi.Output<string>;
    public /*out*/ readonly updatedByUserName!: pulumi.Output<string>;
    public /*out*/ readonly userId!: pulumi.Output<string>;
    public /*out*/ readonly userName!: pulumi.Output<string>;
    public /*out*/ readonly vcUrl!: pulumi.Output<string>;
    public /*out*/ readonly version!: pulumi.Output<number>;
    public readonly vpcCidr!: pulumi.Output<string | undefined>;
    public readonly vxlanSubnet!: pulumi.Output<string | undefined>;

    /**
     * Create a Sddc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SddcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SddcArgs | SddcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SddcState | undefined;
            resourceInputs["accountLinkSddcConfigs"] = state ? state.accountLinkSddcConfigs : undefined;
            resourceInputs["accountLinkState"] = state ? state.accountLinkState : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["cloudPassword"] = state ? state.cloudPassword : undefined;
            resourceInputs["cloudUsername"] = state ? state.cloudUsername : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterInfo"] = state ? state.clusterInfo : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["delayAccountLink"] = state ? state.delayAccountLink : undefined;
            resourceInputs["deploymentType"] = state ? state.deploymentType : undefined;
            resourceInputs["edrsPolicyType"] = state ? state.edrsPolicyType : undefined;
            resourceInputs["enableEdrs"] = state ? state.enableEdrs : undefined;
            resourceInputs["hostInstanceType"] = state ? state.hostInstanceType : undefined;
            resourceInputs["intranetMtuUplink"] = state ? state.intranetMtuUplink : undefined;
            resourceInputs["maxHosts"] = state ? state.maxHosts : undefined;
            resourceInputs["microsoftLicensingConfigs"] = state ? state.microsoftLicensingConfigs : undefined;
            resourceInputs["minHosts"] = state ? state.minHosts : undefined;
            resourceInputs["nsxtCloudadmin"] = state ? state.nsxtCloudadmin : undefined;
            resourceInputs["nsxtCloudadminPassword"] = state ? state.nsxtCloudadminPassword : undefined;
            resourceInputs["nsxtCloudaudit"] = state ? state.nsxtCloudaudit : undefined;
            resourceInputs["nsxtCloudauditPassword"] = state ? state.nsxtCloudauditPassword : undefined;
            resourceInputs["nsxtPrivateIp"] = state ? state.nsxtPrivateIp : undefined;
            resourceInputs["nsxtPrivateUrl"] = state ? state.nsxtPrivateUrl : undefined;
            resourceInputs["nsxtReverseProxyUrl"] = state ? state.nsxtReverseProxyUrl : undefined;
            resourceInputs["nsxtUi"] = state ? state.nsxtUi : undefined;
            resourceInputs["numHost"] = state ? state.numHost : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sddcAccessState"] = state ? state.sddcAccessState : undefined;
            resourceInputs["sddcName"] = state ? state.sddcName : undefined;
            resourceInputs["sddcSize"] = state ? state.sddcSize : undefined;
            resourceInputs["sddcState"] = state ? state.sddcState : undefined;
            resourceInputs["sddcTemplateId"] = state ? state.sddcTemplateId : undefined;
            resourceInputs["sddcType"] = state ? state.sddcType : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["skipCreatingVxlan"] = state ? state.skipCreatingVxlan : undefined;
            resourceInputs["ssoDomain"] = state ? state.ssoDomain : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["updatedByUserId"] = state ? state.updatedByUserId : undefined;
            resourceInputs["updatedByUserName"] = state ? state.updatedByUserName : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["vcUrl"] = state ? state.vcUrl : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcCidr"] = state ? state.vpcCidr : undefined;
            resourceInputs["vxlanSubnet"] = state ? state.vxlanSubnet : undefined;
        } else {
            const args = argsOrState as SddcArgs | undefined;
            if ((!args || args.numHost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numHost'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.sddcName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sddcName'");
            }
            resourceInputs["accountLinkSddcConfigs"] = args ? args.accountLinkSddcConfigs : undefined;
            resourceInputs["delayAccountLink"] = args ? args.delayAccountLink : undefined;
            resourceInputs["deploymentType"] = args ? args.deploymentType : undefined;
            resourceInputs["edrsPolicyType"] = args ? args.edrsPolicyType : undefined;
            resourceInputs["enableEdrs"] = args ? args.enableEdrs : undefined;
            resourceInputs["hostInstanceType"] = args ? args.hostInstanceType : undefined;
            resourceInputs["intranetMtuUplink"] = args ? args.intranetMtuUplink : undefined;
            resourceInputs["maxHosts"] = args ? args.maxHosts : undefined;
            resourceInputs["microsoftLicensingConfigs"] = args ? args.microsoftLicensingConfigs : undefined;
            resourceInputs["minHosts"] = args ? args.minHosts : undefined;
            resourceInputs["nsxtCloudadmin"] = args ? args.nsxtCloudadmin : undefined;
            resourceInputs["nsxtCloudadminPassword"] = args ? args.nsxtCloudadminPassword : undefined;
            resourceInputs["nsxtCloudaudit"] = args ? args.nsxtCloudaudit : undefined;
            resourceInputs["nsxtCloudauditPassword"] = args ? args.nsxtCloudauditPassword : undefined;
            resourceInputs["nsxtPrivateIp"] = args ? args.nsxtPrivateIp : undefined;
            resourceInputs["nsxtPrivateUrl"] = args ? args.nsxtPrivateUrl : undefined;
            resourceInputs["nsxtUi"] = args ? args.nsxtUi : undefined;
            resourceInputs["numHost"] = args ? args.numHost : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sddcName"] = args ? args.sddcName : undefined;
            resourceInputs["sddcTemplateId"] = args ? args.sddcTemplateId : undefined;
            resourceInputs["sddcType"] = args ? args.sddcType : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["skipCreatingVxlan"] = args ? args.skipCreatingVxlan : undefined;
            resourceInputs["ssoDomain"] = args ? args.ssoDomain : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcCidr"] = args ? args.vpcCidr : undefined;
            resourceInputs["vxlanSubnet"] = args ? args.vxlanSubnet : undefined;
            resourceInputs["accountLinkState"] = undefined /*out*/;
            resourceInputs["availabilityZones"] = undefined /*out*/;
            resourceInputs["cloudPassword"] = undefined /*out*/;
            resourceInputs["cloudUsername"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["clusterInfo"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["nsxtReverseProxyUrl"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["sddcAccessState"] = undefined /*out*/;
            resourceInputs["sddcSize"] = undefined /*out*/;
            resourceInputs["sddcState"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
            resourceInputs["updatedByUserId"] = undefined /*out*/;
            resourceInputs["updatedByUserName"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
            resourceInputs["userName"] = undefined /*out*/;
            resourceInputs["vcUrl"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sddc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sddc resources.
 */
export interface SddcState {
    accountLinkSddcConfigs?: pulumi.Input<pulumi.Input<inputs.SddcAccountLinkSddcConfig>[]>;
    accountLinkState?: pulumi.Input<string>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    cloudPassword?: pulumi.Input<string>;
    cloudUsername?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    clusterInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    created?: pulumi.Input<string>;
    delayAccountLink?: pulumi.Input<boolean>;
    deploymentType?: pulumi.Input<string>;
    /**
     * The EDRS policy type. This can either be 'cost', 'performance', 'storage-scaleup' or 'rapid-scaleup'. Default :
     * storage-scaleup.
     */
    edrsPolicyType?: pulumi.Input<string>;
    /**
     * True if EDRS is enabled
     */
    enableEdrs?: pulumi.Input<boolean>;
    hostInstanceType?: pulumi.Input<string>;
    /**
     * Uplink MTU of direct connect, SDDC-grouping and outposts traffic in edge tier-0 router port.
     */
    intranetMtuUplink?: pulumi.Input<number>;
    /**
     * The maximum number of hosts that the cluster can scale out to.
     */
    maxHosts?: pulumi.Input<number>;
    /**
     * Indicates the desired licensing support, if any, of Microsoft software.
     */
    microsoftLicensingConfigs?: pulumi.Input<pulumi.Input<inputs.SddcMicrosoftLicensingConfig>[]>;
    /**
     * The minimum number of hosts that the cluster can scale in to.
     */
    minHosts?: pulumi.Input<number>;
    nsxtCloudadmin?: pulumi.Input<string>;
    nsxtCloudadminPassword?: pulumi.Input<string>;
    nsxtCloudaudit?: pulumi.Input<string>;
    nsxtCloudauditPassword?: pulumi.Input<string>;
    nsxtPrivateIp?: pulumi.Input<string>;
    nsxtPrivateUrl?: pulumi.Input<string>;
    nsxtReverseProxyUrl?: pulumi.Input<string>;
    nsxtUi?: pulumi.Input<boolean>;
    /**
     * The amount of hosts in the primary cluster of the SDDC
     */
    numHost?: pulumi.Input<number>;
    orgId?: pulumi.Input<string>;
    providerType?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sddcAccessState?: pulumi.Input<string>;
    sddcName?: pulumi.Input<string>;
    sddcSize?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sddcState?: pulumi.Input<string>;
    sddcTemplateId?: pulumi.Input<string>;
    sddcType?: pulumi.Input<string>;
    /**
     * The size of the vCenter and NSX appliances. 'large' or 'LARGE' SDDC size corresponds to a large vCenter appliance and
     * large NSX appliance. 'medium' or 'MEDIUM' SDDC size corresponds to medium vCenter appliance and medium NSX appliance.
     * Default : 'medium'.
     */
    size?: pulumi.Input<string>;
    skipCreatingVxlan?: pulumi.Input<boolean>;
    ssoDomain?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SddcTimeouts>;
    updated?: pulumi.Input<string>;
    updatedByUserId?: pulumi.Input<string>;
    updatedByUserName?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    vcUrl?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
    vpcCidr?: pulumi.Input<string>;
    vxlanSubnet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sddc resource.
 */
export interface SddcArgs {
    accountLinkSddcConfigs?: pulumi.Input<pulumi.Input<inputs.SddcAccountLinkSddcConfig>[]>;
    delayAccountLink?: pulumi.Input<boolean>;
    deploymentType?: pulumi.Input<string>;
    /**
     * The EDRS policy type. This can either be 'cost', 'performance', 'storage-scaleup' or 'rapid-scaleup'. Default :
     * storage-scaleup.
     */
    edrsPolicyType?: pulumi.Input<string>;
    /**
     * True if EDRS is enabled
     */
    enableEdrs?: pulumi.Input<boolean>;
    hostInstanceType?: pulumi.Input<string>;
    /**
     * Uplink MTU of direct connect, SDDC-grouping and outposts traffic in edge tier-0 router port.
     */
    intranetMtuUplink?: pulumi.Input<number>;
    /**
     * The maximum number of hosts that the cluster can scale out to.
     */
    maxHosts?: pulumi.Input<number>;
    /**
     * Indicates the desired licensing support, if any, of Microsoft software.
     */
    microsoftLicensingConfigs?: pulumi.Input<pulumi.Input<inputs.SddcMicrosoftLicensingConfig>[]>;
    /**
     * The minimum number of hosts that the cluster can scale in to.
     */
    minHosts?: pulumi.Input<number>;
    nsxtCloudadmin?: pulumi.Input<string>;
    nsxtCloudadminPassword?: pulumi.Input<string>;
    nsxtCloudaudit?: pulumi.Input<string>;
    nsxtCloudauditPassword?: pulumi.Input<string>;
    nsxtPrivateIp?: pulumi.Input<string>;
    nsxtPrivateUrl?: pulumi.Input<string>;
    nsxtUi?: pulumi.Input<boolean>;
    /**
     * The amount of hosts in the primary cluster of the SDDC
     */
    numHost: pulumi.Input<number>;
    providerType?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    sddcName: pulumi.Input<string>;
    sddcTemplateId?: pulumi.Input<string>;
    sddcType?: pulumi.Input<string>;
    /**
     * The size of the vCenter and NSX appliances. 'large' or 'LARGE' SDDC size corresponds to a large vCenter appliance and
     * large NSX appliance. 'medium' or 'MEDIUM' SDDC size corresponds to medium vCenter appliance and medium NSX appliance.
     * Default : 'medium'.
     */
    size?: pulumi.Input<string>;
    skipCreatingVxlan?: pulumi.Input<boolean>;
    ssoDomain?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SddcTimeouts>;
    vpcCidr?: pulumi.Input<string>;
    vxlanSubnet?: pulumi.Input<string>;
}
