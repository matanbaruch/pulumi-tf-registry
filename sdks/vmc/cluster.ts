// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vmc:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public /*out*/ readonly clusterInfo!: pulumi.Output<{[key: string]: string}>;
    /**
     * The EDRS policy type. This can either be 'cost', 'performance', 'storage-scaleup' or 'rapid-scaleup'. Default :
     * storage-scaleup.
     */
    public readonly edrsPolicyType!: pulumi.Output<string>;
    /**
     * True if EDRS is enabled
     */
    public readonly enableEdrs!: pulumi.Output<boolean>;
    /**
     * Customize CPU cores on hosts in a cluster. Specify number of cores to be enabled on hosts in a cluster.
     */
    public readonly hostCpuCoresCount!: pulumi.Output<number | undefined>;
    /**
     * The instance type for the esx hosts added to this cluster.
     */
    public readonly hostInstanceType!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of hosts that the cluster can scale out to.
     */
    public readonly maxHosts!: pulumi.Output<number>;
    /**
     * Indicates the desired licensing support, if any, of Microsoft software.
     */
    public readonly microsoftLicensingConfigs!: pulumi.Output<outputs.ClusterMicrosoftLicensingConfig[] | undefined>;
    /**
     * The minimum number of hosts that the cluster can scale in to.
     */
    public readonly minHosts!: pulumi.Output<number>;
    /**
     * The number of hosts.
     */
    public readonly numHosts!: pulumi.Output<number>;
    /**
     * SDDC identifier
     */
    public readonly sddcId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ClusterTimeouts | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["clusterInfo"] = state ? state.clusterInfo : undefined;
            resourceInputs["edrsPolicyType"] = state ? state.edrsPolicyType : undefined;
            resourceInputs["enableEdrs"] = state ? state.enableEdrs : undefined;
            resourceInputs["hostCpuCoresCount"] = state ? state.hostCpuCoresCount : undefined;
            resourceInputs["hostInstanceType"] = state ? state.hostInstanceType : undefined;
            resourceInputs["maxHosts"] = state ? state.maxHosts : undefined;
            resourceInputs["microsoftLicensingConfigs"] = state ? state.microsoftLicensingConfigs : undefined;
            resourceInputs["minHosts"] = state ? state.minHosts : undefined;
            resourceInputs["numHosts"] = state ? state.numHosts : undefined;
            resourceInputs["sddcId"] = state ? state.sddcId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.numHosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numHosts'");
            }
            if ((!args || args.sddcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sddcId'");
            }
            resourceInputs["edrsPolicyType"] = args ? args.edrsPolicyType : undefined;
            resourceInputs["enableEdrs"] = args ? args.enableEdrs : undefined;
            resourceInputs["hostCpuCoresCount"] = args ? args.hostCpuCoresCount : undefined;
            resourceInputs["hostInstanceType"] = args ? args.hostInstanceType : undefined;
            resourceInputs["maxHosts"] = args ? args.maxHosts : undefined;
            resourceInputs["microsoftLicensingConfigs"] = args ? args.microsoftLicensingConfigs : undefined;
            resourceInputs["minHosts"] = args ? args.minHosts : undefined;
            resourceInputs["numHosts"] = args ? args.numHosts : undefined;
            resourceInputs["sddcId"] = args ? args.sddcId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["clusterInfo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    clusterInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The EDRS policy type. This can either be 'cost', 'performance', 'storage-scaleup' or 'rapid-scaleup'. Default :
     * storage-scaleup.
     */
    edrsPolicyType?: pulumi.Input<string>;
    /**
     * True if EDRS is enabled
     */
    enableEdrs?: pulumi.Input<boolean>;
    /**
     * Customize CPU cores on hosts in a cluster. Specify number of cores to be enabled on hosts in a cluster.
     */
    hostCpuCoresCount?: pulumi.Input<number>;
    /**
     * The instance type for the esx hosts added to this cluster.
     */
    hostInstanceType?: pulumi.Input<string>;
    /**
     * The maximum number of hosts that the cluster can scale out to.
     */
    maxHosts?: pulumi.Input<number>;
    /**
     * Indicates the desired licensing support, if any, of Microsoft software.
     */
    microsoftLicensingConfigs?: pulumi.Input<pulumi.Input<inputs.ClusterMicrosoftLicensingConfig>[]>;
    /**
     * The minimum number of hosts that the cluster can scale in to.
     */
    minHosts?: pulumi.Input<number>;
    /**
     * The number of hosts.
     */
    numHosts?: pulumi.Input<number>;
    /**
     * SDDC identifier
     */
    sddcId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClusterTimeouts>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The EDRS policy type. This can either be 'cost', 'performance', 'storage-scaleup' or 'rapid-scaleup'. Default :
     * storage-scaleup.
     */
    edrsPolicyType?: pulumi.Input<string>;
    /**
     * True if EDRS is enabled
     */
    enableEdrs?: pulumi.Input<boolean>;
    /**
     * Customize CPU cores on hosts in a cluster. Specify number of cores to be enabled on hosts in a cluster.
     */
    hostCpuCoresCount?: pulumi.Input<number>;
    /**
     * The instance type for the esx hosts added to this cluster.
     */
    hostInstanceType?: pulumi.Input<string>;
    /**
     * The maximum number of hosts that the cluster can scale out to.
     */
    maxHosts?: pulumi.Input<number>;
    /**
     * Indicates the desired licensing support, if any, of Microsoft software.
     */
    microsoftLicensingConfigs?: pulumi.Input<pulumi.Input<inputs.ClusterMicrosoftLicensingConfig>[]>;
    /**
     * The minimum number of hosts that the cluster can scale in to.
     */
    minHosts?: pulumi.Input<number>;
    /**
     * The number of hosts.
     */
    numHosts: pulumi.Input<number>;
    /**
     * SDDC identifier
     */
    sddcId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClusterTimeouts>;
}
