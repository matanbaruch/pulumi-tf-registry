// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AbacRulesArgs, AbacRulesState } from "./abacRules";
export type AbacRules = import("./abacRules").AbacRules;
export const AbacRules: typeof import("./abacRules").AbacRules = null as any;
utilities.lazyLoad(exports, ["AbacRules"], () => require("./abacRules"));

export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountAdminsArgs, AccountAdminsState } from "./accountAdmins";
export type AccountAdmins = import("./accountAdmins").AccountAdmins;
export const AccountAdmins: typeof import("./accountAdmins").AccountAdmins = null as any;
utilities.lazyLoad(exports, ["AccountAdmins"], () => require("./accountAdmins"));

export { AccountGitopsSettingsArgs, AccountGitopsSettingsState } from "./accountGitopsSettings";
export type AccountGitopsSettings = import("./accountGitopsSettings").AccountGitopsSettings;
export const AccountGitopsSettings: typeof import("./accountGitopsSettings").AccountGitopsSettings = null as any;
utilities.lazyLoad(exports, ["AccountGitopsSettings"], () => require("./accountGitopsSettings"));

export { AccountIdpArgs, AccountIdpState } from "./accountIdp";
export type AccountIdp = import("./accountIdp").AccountIdp;
export const AccountIdp: typeof import("./accountIdp").AccountIdp = null as any;
utilities.lazyLoad(exports, ["AccountIdp"], () => require("./accountIdp"));

export { AccountUserAssociationArgs, AccountUserAssociationState } from "./accountUserAssociation";
export type AccountUserAssociation = import("./accountUserAssociation").AccountUserAssociation;
export const AccountUserAssociation: typeof import("./accountUserAssociation").AccountUserAssociation = null as any;
utilities.lazyLoad(exports, ["AccountUserAssociation"], () => require("./accountUserAssociation"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { ContextArgs, ContextState } from "./context";
export type Context = import("./context").Context;
export const Context: typeof import("./context").Context = null as any;
utilities.lazyLoad(exports, ["Context"], () => require("./context"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAccountGitopsSettingsResult } from "./getAccountGitopsSettings";
export const getAccountGitopsSettings: typeof import("./getAccountGitopsSettings").getAccountGitopsSettings = null as any;
export const getAccountGitopsSettingsOutput: typeof import("./getAccountGitopsSettings").getAccountGitopsSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getAccountGitopsSettings","getAccountGitopsSettingsOutput"], () => require("./getAccountGitopsSettings"));

export { GetAccountIdpArgs, GetAccountIdpResult, GetAccountIdpOutputArgs } from "./getAccountIdp";
export const getAccountIdp: typeof import("./getAccountIdp").getAccountIdp = null as any;
export const getAccountIdpOutput: typeof import("./getAccountIdp").getAccountIdpOutput = null as any;
utilities.lazyLoad(exports, ["getAccountIdp","getAccountIdpOutput"], () => require("./getAccountIdp"));

export { GetContextArgs, GetContextResult, GetContextOutputArgs } from "./getContext";
export const getContext: typeof import("./getContext").getContext = null as any;
export const getContextOutput: typeof import("./getContext").getContextOutput = null as any;
utilities.lazyLoad(exports, ["getContext","getContextOutput"], () => require("./getContext"));

export { GetCurrentAccountArgs, GetCurrentAccountResult, GetCurrentAccountOutputArgs } from "./getCurrentAccount";
export const getCurrentAccount: typeof import("./getCurrentAccount").getCurrentAccount = null as any;
export const getCurrentAccountOutput: typeof import("./getCurrentAccount").getCurrentAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCurrentAccount","getCurrentAccountOutput"], () => require("./getCurrentAccount"));

export { GetIdpsArgs, GetIdpsResult, GetIdpsOutputArgs } from "./getIdps";
export const getIdps: typeof import("./getIdps").getIdps = null as any;
export const getIdpsOutput: typeof import("./getIdps").getIdpsOutput = null as any;
utilities.lazyLoad(exports, ["getIdps","getIdpsOutput"], () => require("./getIdps"));

export { GetPipelinesArgs, GetPipelinesResult, GetPipelinesOutputArgs } from "./getPipelines";
export const getPipelines: typeof import("./getPipelines").getPipelines = null as any;
export const getPipelinesOutput: typeof import("./getPipelines").getPipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getPipelines","getPipelinesOutput"], () => require("./getPipelines"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetRegistryArgs, GetRegistryResult, GetRegistryOutputArgs } from "./getRegistry";
export const getRegistry: typeof import("./getRegistry").getRegistry = null as any;
export const getRegistryOutput: typeof import("./getRegistry").getRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getRegistry","getRegistryOutput"], () => require("./getRegistry"));

export { GetStepTypesArgs, GetStepTypesResult, GetStepTypesOutputArgs } from "./getStepTypes";
export const getStepTypes: typeof import("./getStepTypes").getStepTypes = null as any;
export const getStepTypesOutput: typeof import("./getStepTypes").getStepTypesOutput = null as any;
utilities.lazyLoad(exports, ["getStepTypes","getStepTypesOutput"], () => require("./getStepTypes"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { IdpArgs, IdpState } from "./idp";
export type Idp = import("./idp").Idp;
export const Idp: typeof import("./idp").Idp = null as any;
utilities.lazyLoad(exports, ["Idp"], () => require("./idp"));

export { IdpAccountsArgs, IdpAccountsState } from "./idpAccounts";
export type IdpAccounts = import("./idpAccounts").IdpAccounts;
export const IdpAccounts: typeof import("./idpAccounts").IdpAccounts = null as any;
utilities.lazyLoad(exports, ["IdpAccounts"], () => require("./idpAccounts"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { PipelineArgs, PipelineState } from "./pipeline";
export type Pipeline = import("./pipeline").Pipeline;
export const Pipeline: typeof import("./pipeline").Pipeline = null as any;
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));

export { PipelineCronTriggerArgs, PipelineCronTriggerState } from "./pipelineCronTrigger";
export type PipelineCronTrigger = import("./pipelineCronTrigger").PipelineCronTrigger;
export const PipelineCronTrigger: typeof import("./pipelineCronTrigger").PipelineCronTrigger = null as any;
utilities.lazyLoad(exports, ["PipelineCronTrigger"], () => require("./pipelineCronTrigger"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RegistryArgs, RegistryState } from "./registry";
export type Registry = import("./registry").Registry;
export const Registry: typeof import("./registry").Registry = null as any;
utilities.lazyLoad(exports, ["Registry"], () => require("./registry"));

export { StepTypesArgs, StepTypesState } from "./stepTypes";
export type StepTypes = import("./stepTypes").StepTypes;
export const StepTypes: typeof import("./stepTypes").StepTypes = null as any;
utilities.lazyLoad(exports, ["StepTypes"], () => require("./stepTypes"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "codefresh:index/abacRules:AbacRules":
                return new AbacRules(name, <any>undefined, { urn })
            case "codefresh:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "codefresh:index/accountAdmins:AccountAdmins":
                return new AccountAdmins(name, <any>undefined, { urn })
            case "codefresh:index/accountGitopsSettings:AccountGitopsSettings":
                return new AccountGitopsSettings(name, <any>undefined, { urn })
            case "codefresh:index/accountIdp:AccountIdp":
                return new AccountIdp(name, <any>undefined, { urn })
            case "codefresh:index/accountUserAssociation:AccountUserAssociation":
                return new AccountUserAssociation(name, <any>undefined, { urn })
            case "codefresh:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "codefresh:index/context:Context":
                return new Context(name, <any>undefined, { urn })
            case "codefresh:index/idp:Idp":
                return new Idp(name, <any>undefined, { urn })
            case "codefresh:index/idpAccounts:IdpAccounts":
                return new IdpAccounts(name, <any>undefined, { urn })
            case "codefresh:index/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "codefresh:index/pipeline:Pipeline":
                return new Pipeline(name, <any>undefined, { urn })
            case "codefresh:index/pipelineCronTrigger:PipelineCronTrigger":
                return new PipelineCronTrigger(name, <any>undefined, { urn })
            case "codefresh:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "codefresh:index/registry:Registry":
                return new Registry(name, <any>undefined, { urn })
            case "codefresh:index/stepTypes:StepTypes":
                return new StepTypes(name, <any>undefined, { urn })
            case "codefresh:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "codefresh:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("codefresh", "index/abacRules", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/account", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/accountAdmins", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/accountGitopsSettings", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/accountIdp", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/accountUserAssociation", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/context", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/idp", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/idpAccounts", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/permission", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/pipeline", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/pipelineCronTrigger", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/project", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/registry", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/stepTypes", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/team", _module)
pulumi.runtime.registerResourceModule("codefresh", "index/user", _module)
pulumi.runtime.registerResourcePackage("codefresh", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:codefresh") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
