// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AbacRulesAttribute {
    key?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AccountBuild {
    /**
     * The number of nodes allowed for this account (default: `1`).
     */
    nodes?: pulumi.Input<number>;
    /**
     * The number of parallel builds allowed for this account.
     */
    parallel: pulumi.Input<number>;
}

export interface AccountIdpAuth0 {
    /**
     * Client ID from Auth0
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret from Auth0
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The domain of the Auth0 application
     */
    domain: pulumi.Input<string>;
}

export interface AccountIdpAzure {
    /**
     * The Application ID from your Enterprise Application Properties in Azure AD
     */
    appId: pulumi.Input<string>;
    /**
     * Set to true to sync user accounts in Azure AD to your Codefresh account
     */
    autosyncTeamsAndUsers?: pulumi.Input<boolean>;
    /**
     * Client secret from Azure
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The Object ID from your Enterprise Application Properties in Azure AD
     */
    objectId?: pulumi.Input<string>;
    /**
     * Sync interval in hours for syncing user accounts in Azure AD to your Codefresh account. If not set the sync inteval will be 12 hours
     */
    syncInterval?: pulumi.Input<number>;
    /**
     * Azure tenant
     */
    tenant?: pulumi.Input<string>;
}

export interface AccountIdpGithub {
    /**
     * GitHub API host, Defaults to api.github.com
     */
    apiHost?: pulumi.Input<string>;
    /**
     * GitHub API url path prefix, defaults to /
     */
    apiPathPrefix?: pulumi.Input<string>;
    /**
     * Authentication url, Defaults to https://github.com/login/oauth/authorize
     */
    authenticationUrl?: pulumi.Input<string>;
    /**
     * Client ID from Github
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret from GitHub
     */
    clientSecret: pulumi.Input<string>;
    /**
     * GitHub token endpoint url, Defaults to https://github.com/login/oauth/access_token
     */
    tokenUrl?: pulumi.Input<string>;
    /**
     * GitHub user profile url, Defaults to https://api.github.com/user
     */
    userProfileUrl?: pulumi.Input<string>;
}

export interface AccountIdpGitlab {
    /**
     * Base url for Gitlab API, Defaults to https://gitlab.com/api/v4/
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * Authentication url, Defaults to https://gitlab.com
     */
    authenticationUrl?: pulumi.Input<string>;
    /**
     * Client ID from Gitlab
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret from Gitlab
     */
    clientSecret: pulumi.Input<string>;
    /**
     * User profile url, Defaults to https://gitlab.com/api/v4/user
     */
    userProfileUrl?: pulumi.Input<string>;
}

export interface AccountIdpGoogle {
    /**
     * Email of a user with admin permissions on google, relevant only for synchronization
     */
    adminEmail?: pulumi.Input<string>;
    /**
     * Comma separated list of groups to sync
     */
    allowedGroupsForSync?: pulumi.Input<string>;
    /**
     * Client ID in Google, must be unique across all identity providers in Codefresh
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret in Google
     */
    clientSecret: pulumi.Input<string>;
    /**
     * JSON keyfile for google service account used for synchronization
     */
    jsonKeyfile?: pulumi.Input<string>;
    /**
     * Relevant for custom schema-based synchronization only. See Codefresh documentation
     */
    syncField?: pulumi.Input<string>;
}

export interface AccountIdpKeycloak {
    /**
     * Client ID from Keycloak
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret from Keycloak
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The Keycloak URL
     */
    host: pulumi.Input<string>;
    /**
     * The Realm ID for Codefresh in Keycloak. Defaults to master
     */
    realm?: pulumi.Input<string>;
}

export interface AccountIdpLdap {
    /**
     * To sync only by specified groups - specify a comma separated list of groups, by default all groups will be synced
     */
    allowedGroupsForSync?: pulumi.Input<string>;
    /**
     * For ldaps only: The security certificate of the LDAP server. Do not convert to base64 or any other encoding
     */
    certificate?: pulumi.Input<string>;
    /**
     * The username to be used to search other users in LDAP notation (combination of cn, ou,dc)
     */
    distinguishedName?: pulumi.Input<string>;
    /**
     * The password of the user defined in Distinguished name that will be used to search other users
     */
    password: pulumi.Input<string>;
    /**
     * The search-user scope in LDAP notation
     */
    searchBase: pulumi.Input<string>;
    /**
     * Synchronize using a custom search base, by deafult seach_base is used
     */
    searchBaseForSync?: pulumi.Input<string>;
    /**
     * The attribute by which to search for the user on the LDAP server. By default, set to uid. For the Azure LDAP server, set this field to sAMAccountName
     */
    searchFilter?: pulumi.Input<string>;
    /**
     * ldap server url
     */
    url: pulumi.Input<string>;
}

export interface AccountIdpOkta {
    /**
     * The Okta API token generated in Okta, used to sync groups and their users from Okta to Codefresh
     */
    accessToken?: pulumi.Input<string>;
    /**
     * The Codefresh application ID in your OKTA organization
     */
    appId?: pulumi.Input<string>;
    /**
     * The OKTA organization URL, for example, https://<company>.okta.com
     */
    clientHost: pulumi.Input<string>;
    /**
     * Client ID in Okta, must be unique across all identity providers in Codefresh
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret in Okta
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The names of the additional Codefresh accounts to be synced from Okta
     */
    syncMirrorAccounts?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccountIdpOnelogin {
    /**
     * Client ID for onelogin API, only needed if syncing users and groups from Onelogin
     */
    apiClientId?: pulumi.Input<string>;
    /**
     * Client secret for onelogin API, only needed if syncing users and groups from Onelogin
     */
    apiClientSecret?: pulumi.Input<string>;
    /**
     * The Codefresh application ID in your Onelogin
     */
    appId?: pulumi.Input<string>;
    /**
     * Client ID from Onelogin
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret from Onelogin
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The domain to be used for authentication
     */
    domain: pulumi.Input<string>;
}

export interface AccountIdpSaml {
    /**
     * Valid for Okta only: The Okta API token generated in Okta, used to sync groups and their users from Okta to Codefresh
     */
    accessToken?: pulumi.Input<string>;
    /**
     * Valid for Okta only: If set to true, Codefresh will automatically invite and activate new users added during the automated sync, without waiting for the users to accept the invitations. Defaults to false
     */
    activateUsersAfterSync?: pulumi.Input<boolean>;
    /**
     * Valid for GSuite only: Email of a user with admin permissions on google, relevant only for synchronization
     */
    adminEmail?: pulumi.Input<string>;
    /**
     * Valid for GSuite only: Comma separated list of groups to sync
     */
    allowedGroupsForSync?: pulumi.Input<string>;
    /**
     * Valid for Okta only: The Codefresh application ID in Okta
     */
    appId?: pulumi.Input<string>;
    /**
     * The security certificate of your Identity Provider. Paste the value directly on the field. Do not convert to base64 or any other encoding by hand
     */
    applicationCertificate: pulumi.Input<string>;
    /**
     * Valid for Okta/GSuite: Set to true to sync user accounts and teams in okta/gsuite to your Codefresh account
     */
    autosyncTeamsAndUsers?: pulumi.Input<boolean>;
    /**
     * Valid for Okta only: OKTA organization URL, for example, https://<company>.okta.com
     */
    clientHost?: pulumi.Input<string>;
    /**
     * The SSO endpoint of your Identity Provider
     */
    endpoint: pulumi.Input<string>;
    /**
     * Valid for GSuite only: JSON keyfile for google service account used for synchronization
     */
    jsonKeyfile?: pulumi.Input<string>;
    /**
     * SAML provider. Currently supported values - GSuite, okta or empty string for generic provider. Defaults to empty string
     */
    provider?: pulumi.Input<string>;
    /**
     * Valid for Okta/GSuite: Sync interval in hours for syncing user accounts in okta/gsuite to your Codefresh account. If not set the sync inteval will be 12 hours
     */
    syncInterval?: pulumi.Input<number>;
}

export interface AccountLimit {
    /**
     * The number of collaborators allowed for this account.
     */
    collaborators: pulumi.Input<number>;
    /**
     * Specifies the number of weeks for which to store the builds (default: `5`).
     */
    dataRetentionWeeks?: pulumi.Input<number>;
}

export interface ContextSpec {
    config?: pulumi.Input<inputs.ContextSpecConfig>;
    secret?: pulumi.Input<inputs.ContextSpecSecret>;
    secretyaml?: pulumi.Input<inputs.ContextSpecSecretyaml>;
    storageazuref?: pulumi.Input<inputs.ContextSpecStorageazuref>;
    storagegc?: pulumi.Input<inputs.ContextSpecStoragegc>;
    storages3?: pulumi.Input<inputs.ContextSpecStorages3>;
    yaml?: pulumi.Input<inputs.ContextSpecYaml>;
}

export interface ContextSpecConfig {
    /**
     * The map of variables representing the shared config.
     */
    data: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ContextSpecSecret {
    /**
     * The map of variables representing the shared config (secret).
     */
    data: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ContextSpecSecretyaml {
    /**
     * The YAML string representing the shared config (secret).
     */
    data: pulumi.Input<string>;
}

export interface ContextSpecStorageazuref {
    data: pulumi.Input<inputs.ContextSpecStorageazurefData>;
}

export interface ContextSpecStorageazurefData {
    auth: pulumi.Input<inputs.ContextSpecStorageazurefDataAuth>;
}

export interface ContextSpecStorageazurefDataAuth {
    accountKey: pulumi.Input<string>;
    accountName: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ContextSpecStoragegc {
    data: pulumi.Input<inputs.ContextSpecStoragegcData>;
}

export interface ContextSpecStoragegcData {
    auth: pulumi.Input<inputs.ContextSpecStoragegcDataAuth>;
}

export interface ContextSpecStoragegcDataAuth {
    jsonConfig: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type: pulumi.Input<string>;
}

export interface ContextSpecStorages3 {
    data: pulumi.Input<inputs.ContextSpecStorages3Data>;
}

export interface ContextSpecStorages3Data {
    auth: pulumi.Input<inputs.ContextSpecStorages3DataAuth>;
}

export interface ContextSpecStorages3DataAuth {
    jsonConfig: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type: pulumi.Input<string>;
}

export interface ContextSpecYaml {
    /**
     * The YAML string representing the shared config.
     */
    data: pulumi.Input<string>;
}

export interface GetCurrentAccountUser {
    email: string;
    id: string;
    name: string;
}

export interface GetCurrentAccountUserArgs {
    email: pulumi.Input<string>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface IdpAuth0 {
    /**
     * Client ID from Auth0
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret from Auth0
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The domain of the Auth0 application
     */
    domain: pulumi.Input<string>;
}

export interface IdpAzure {
    /**
     * The Application ID from your Enterprise Application Properties in Azure AD
     */
    appId: pulumi.Input<string>;
    /**
     * Set to true to sync user accounts in Azure AD to your Codefresh account
     */
    autosyncTeamsAndUsers?: pulumi.Input<boolean>;
    /**
     * Client secret from Azure
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The Object ID from your Enterprise Application Properties in Azure AD
     */
    objectId?: pulumi.Input<string>;
    /**
     * Sync interval in hours for syncing user accounts in Azure AD to your Codefresh account. If not set the sync inteval will be 12 hours
     */
    syncInterval?: pulumi.Input<number>;
    /**
     * Azure tenant
     */
    tenant?: pulumi.Input<string>;
}

export interface IdpGithub {
    /**
     * GitHub API host, Defaults to api.github.com
     */
    apiHost?: pulumi.Input<string>;
    /**
     * GitHub API url path prefix, defaults to /
     */
    apiPathPrefix?: pulumi.Input<string>;
    /**
     * Authentication url, Defaults to https://github.com/login/oauth/authorize
     */
    authenticationUrl?: pulumi.Input<string>;
    /**
     * Client ID from Github
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret from GitHub
     */
    clientSecret: pulumi.Input<string>;
    /**
     * GitHub token endpoint url, Defaults to https://github.com/login/oauth/access_token
     */
    tokenUrl?: pulumi.Input<string>;
    /**
     * GitHub user profile url, Defaults to https://api.github.com/user
     */
    userProfileUrl?: pulumi.Input<string>;
}

export interface IdpGitlab {
    /**
     * Base url for Gitlab API, Defaults to https://gitlab.com/api/v4/
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * Authentication url, Defaults to https://gitlab.com
     */
    authenticationUrl?: pulumi.Input<string>;
    /**
     * Client ID from Gitlab
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret from Gitlab
     */
    clientSecret: pulumi.Input<string>;
    /**
     * User profile url, Defaults to https://gitlab.com/api/v4/user
     */
    userProfileUrl?: pulumi.Input<string>;
}

export interface IdpGoogle {
    /**
     * Email of a user with admin permissions on google, relevant only for synchronization
     */
    adminEmail?: pulumi.Input<string>;
    /**
     * Comma separated list of groups to sync
     */
    allowedGroupsForSync?: pulumi.Input<string>;
    /**
     * Client ID in Google, must be unique across all identity providers in Codefresh
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret in Google
     */
    clientSecret: pulumi.Input<string>;
    /**
     * JSON keyfile for google service account used for synchronization
     */
    jsonKeyfile?: pulumi.Input<string>;
    /**
     * Relevant for custom schema-based synchronization only. See Codefresh documentation
     */
    syncField?: pulumi.Input<string>;
}

export interface IdpKeycloak {
    /**
     * Client ID from Keycloak
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret from Keycloak
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The Keycloak URL
     */
    host: pulumi.Input<string>;
    /**
     * The Realm ID for Codefresh in Keycloak. Defaults to master
     */
    realm?: pulumi.Input<string>;
}

export interface IdpLdap {
    /**
     * To sync only by specified groups - specify a comma separated list of groups, by default all groups will be synced
     */
    allowedGroupsForSync?: pulumi.Input<string>;
    /**
     * For ldaps only: The security certificate of the LDAP server. Do not convert to base64 or any other encoding
     */
    certificate?: pulumi.Input<string>;
    /**
     * The username to be used to search other users in LDAP notation (combination of cn, ou,dc)
     */
    distinguishedName?: pulumi.Input<string>;
    /**
     * The password of the user defined in Distinguished name that will be used to search other users
     */
    password: pulumi.Input<string>;
    /**
     * The search-user scope in LDAP notation
     */
    searchBase: pulumi.Input<string>;
    /**
     * Synchronize using a custom search base, by deafult seach_base is used
     */
    searchBaseForSync?: pulumi.Input<string>;
    /**
     * The attribute by which to search for the user on the LDAP server. By default, set to uid. For the Azure LDAP server, set this field to sAMAccountName
     */
    searchFilter?: pulumi.Input<string>;
    /**
     * ldap server url
     */
    url: pulumi.Input<string>;
}

export interface IdpOkta {
    /**
     * The Okta API token generated in Okta, used to sync groups and their users from Okta to Codefresh
     */
    accessToken?: pulumi.Input<string>;
    /**
     * The Codefresh application ID in your OKTA organization
     */
    appId?: pulumi.Input<string>;
    /**
     * The OKTA organization URL, for example, https://<company>.okta.com
     */
    clientHost: pulumi.Input<string>;
    /**
     * Client ID in Okta, must be unique across all identity providers in Codefresh
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret in Okta
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The names of the additional Codefresh accounts to be synced from Okta
     */
    syncMirrorAccounts?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IdpOnelogin {
    /**
     * Client ID for onelogin API, only needed if syncing users and groups from Onelogin
     */
    apiClientId?: pulumi.Input<string>;
    /**
     * Client secret for onelogin API, only needed if syncing users and groups from Onelogin
     */
    apiClientSecret?: pulumi.Input<string>;
    /**
     * The Codefresh application ID in your Onelogin
     */
    appId?: pulumi.Input<string>;
    /**
     * Client ID from Onelogin
     */
    clientId: pulumi.Input<string>;
    /**
     * Client secret from Onelogin
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The domain to be used for authentication
     */
    domain: pulumi.Input<string>;
}

export interface IdpSaml {
    /**
     * Valid for Okta only: The Okta API token generated in Okta, used to sync groups and their users from Okta to Codefresh
     */
    accessToken?: pulumi.Input<string>;
    /**
     * Valid for Okta only: If set to true, Codefresh will automatically invite and activate new users added during the automated sync, without waiting for the users to accept the invitations. Defaults to false
     */
    activateUsersAfterSync?: pulumi.Input<boolean>;
    /**
     * Valid for GSuite only: Email of a user with admin permissions on google, relevant only for synchronization
     */
    adminEmail?: pulumi.Input<string>;
    /**
     * Valid for GSuite only: Comma separated list of groups to sync
     */
    allowedGroupsForSync?: pulumi.Input<string>;
    /**
     * Valid for Okta only: The Codefresh application ID in Okta
     */
    appId?: pulumi.Input<string>;
    /**
     * The security certificate of your Identity Provider. Paste the value directly on the field. Do not convert to base64 or any other encoding by hand
     */
    applicationCertificate: pulumi.Input<string>;
    /**
     * Valid for Okta/GSuite: Set to true to sync user accounts and teams in okta/gsuite to your Codefresh account
     */
    autosyncTeamsAndUsers?: pulumi.Input<boolean>;
    /**
     * Valid for Okta only: OKTA organization URL, for example, https://<company>.okta.com
     */
    clientHost?: pulumi.Input<string>;
    /**
     * The SSO endpoint of your Identity Provider
     */
    endpoint: pulumi.Input<string>;
    /**
     * Valid for GSuite only: JSON keyfile for google service account used for synchronization
     */
    jsonKeyfile?: pulumi.Input<string>;
    /**
     * SAML provider. Currently supported values - GSuite, okta or empty string for generic provider. Defaults to empty string
     */
    provider?: pulumi.Input<string>;
    /**
     * Valid for Okta/GSuite: Sync interval in hours for syncing user accounts in okta/gsuite to your Codefresh account. If not set the sync inteval will be 12 hours
     */
    syncInterval?: pulumi.Input<number>;
}

export interface PipelineSpec {
    /**
     * The maximum amount of concurrent builds that may run for each branch. Zero is unlimited (default: `0`).
     */
    branchConcurrency?: pulumi.Input<number>;
    /**
     * The maximum amount of concurrent builds. Zero is unlimited (default: `0`).
     */
    concurrency?: pulumi.Input<number>;
    /**
     * A list of strings representing the contexts ([shared_configuration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be configured for the pipeline.
     */
    contexts?: pulumi.Input<pulumi.Input<string>[]>;
    cronTriggers?: pulumi.Input<pulumi.Input<inputs.PipelineSpecCronTrigger>[]>;
    /**
     * Pipeline level encrypted variables. Please note that drift will not be detected for encrypted variables
     */
    encryptedVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalResources?: pulumi.Input<pulumi.Input<inputs.PipelineSpecExternalResource>[]>;
    /**
     * The options for the pipeline.
     */
    options?: pulumi.Input<inputs.PipelineSpecOptions>;
    /**
     * SAAS pack (`5cd1746617313f468d669013` for Small; `5cd1746717313f468d669014` for Medium; `5cd1746817313f468d669015` for Large; `5cd1746817313f468d669017` for XL; `5cd1746817313f468d669018` for XXL); `5cd1746817313f468d669020` for 4XL).
     */
    packId?: pulumi.Input<string>;
    /**
     * Defines whether it is permitted to restart builds in this pipeline from failed step. Defaults to true
     */
    permitRestartFromFailedSteps?: pulumi.Input<boolean>;
    /**
     * Helps to organize the order of builds execution in case of reaching the concurrency limit (default: `0`).
     */
    priority?: pulumi.Input<number>;
    /**
     * Minimum disk space required for build filesystem ( unit Gi is required).
     */
    requiredAvailableStorage?: pulumi.Input<string>;
    /**
     * The runtime environment for the pipeline.
     */
    runtimeEnvironments?: pulumi.Input<pulumi.Input<inputs.PipelineSpecRuntimeEnvironment>[]>;
    /**
     * The pipeline's spec template.
     */
    specTemplates?: pulumi.Input<pulumi.Input<inputs.PipelineSpecSpecTemplate>[]>;
    /**
     * The termination policy for the pipeline.
     */
    terminationPolicy?: pulumi.Input<inputs.PipelineSpecTerminationPolicy>;
    /**
     * The maximum amount of concurrent builds that may run for each trigger (default: `0`).
     */
    triggerConcurrency?: pulumi.Input<number>;
    /**
     * The pipeline's triggers (currently the only nested trigger supported is git; for other trigger types, use the `codefresh_pipeline_*_trigger` resources).
     */
    triggers?: pulumi.Input<pulumi.Input<inputs.PipelineSpecTrigger>[]>;
    /**
     * The pipeline's variables.
     */
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface PipelineSpecCronTrigger {
    /**
     * Branch that should be passed for build triggered by this cron trigger.
     */
    branch?: pulumi.Input<string>;
    /**
     * Flag to disable the trigger.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Trigger level encrypted variables. Please note that drift will not be detected for encrypted variables
     */
    encryptedVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    expression: pulumi.Input<string>;
    /**
     * Related git-trigger id. Will by used to take all possible git information by branch.
     */
    gitTriggerId?: pulumi.Input<string>;
    message: pulumi.Input<string>;
    /**
     * The name of the cron trigger.
     */
    name: pulumi.Input<string>;
    /**
     * The trigger's options.
     */
    options?: pulumi.Input<pulumi.Input<inputs.PipelineSpecCronTriggerOption>[]>;
    /**
     * The runtime environment for the trigger.
     */
    runtimeEnvironments?: pulumi.Input<pulumi.Input<inputs.PipelineSpecCronTriggerRuntimeEnvironment>[]>;
    /**
     * The type of the trigger (default: `cron`; see notes above).
     */
    type?: pulumi.Input<string>;
    /**
     * Trigger variables.
     */
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface PipelineSpecCronTriggerOption {
    /**
     * If false the pipeline will not send notifications to Slack and status updates back to the Git provider.
     */
    enableNotifications?: pulumi.Input<boolean>;
    /**
     * If true, docker layer cache is disabled.
     */
    noCache?: pulumi.Input<boolean>;
    /**
     * If true, extra Codefresh caching is disabled.
     */
    noCfCache?: pulumi.Input<boolean>;
    /**
     * If true, all files on volume will be deleted before each execution.
     */
    resetVolume?: pulumi.Input<boolean>;
}

export interface PipelineSpecCronTriggerRuntimeEnvironment {
    /**
     * The CPU allocated to the runtime environment.
     */
    cpu?: pulumi.Input<string>;
    /**
     * The storage allocated to the runtime environment.
     */
    dindStorage?: pulumi.Input<string>;
    /**
     * The memory allocated to the runtime environment.
     */
    memory?: pulumi.Input<string>;
    /**
     * The name of the runtime environment.
     */
    name?: pulumi.Input<string>;
    /**
     * Minimum disk space required for build filesystem ( unit Gi is required).
     */
    requiredAvailableStorage?: pulumi.Input<string>;
}

export interface PipelineSpecExternalResource {
    /**
     * Context name for the git repository
     */
    context: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Whether or not the resource specified in source_path is a folder
     */
    isFolder?: pulumi.Input<boolean>;
    /**
     * git repository url
     */
    repo: pulumi.Input<string>;
    /**
     * Revision/branch in the git repository
     */
    revision: pulumi.Input<string>;
    /**
     * The source folder in the repository (use relative path)
     */
    sourcePath: pulumi.Input<string>;
    /**
     * The target folder in the pipeline workspace where the file/folder will be copied to (use absolute path)
     */
    targetPath: pulumi.Input<string>;
    /**
     * Type of the external resource. Currently only 'git' is supported
     */
    type?: pulumi.Input<string>;
}

export interface PipelineSpecOptions {
    enableNotifications?: pulumi.Input<boolean>;
    /**
     * When build enters 'Pending Approval' state, volume should:
     * 	* Default (attribute not specified): "Use Setting accounts"
     * 	* true: "Remain (build remains active)"
     * 	* false: "Be removed"
     */
    keepPvcsForPendingApproval?: pulumi.Input<boolean>;
    /**
     * Pipeline concurrency policy: Builds on 'Pending Approval' state should be:
     * 	* Default (attribute not specified): "Use Setting accounts"
     * 	* true: "Included in concurrency"
     * 	* false: "Not included in concurrency"
     */
    pendingApprovalConcurrencyApplied?: pulumi.Input<boolean>;
}

export interface PipelineSpecRuntimeEnvironment {
    /**
     * The CPU allocated to the runtime environment.
     */
    cpu?: pulumi.Input<string>;
    /**
     * The storage allocated to the runtime environment.
     */
    dindStorage?: pulumi.Input<string>;
    /**
     * The memory allocated to the runtime environment.
     */
    memory?: pulumi.Input<string>;
    /**
     * The name of the runtime environment.
     */
    name?: pulumi.Input<string>;
    /**
     * Minimum disk space required for build filesystem ( unit Gi is required).
     */
    requiredAvailableStorage?: pulumi.Input<string>;
}

export interface PipelineSpecSpecTemplate {
    /**
     * The Codefresh git context (default: `github`).
     */
    context?: pulumi.Input<string>;
    /**
     * The location of the spec template (default: `git`).
     */
    location?: pulumi.Input<string>;
    /**
     * The relative path to the Codefresh pipeline file.
     */
    path: pulumi.Input<string>;
    /**
     * The repository of the spec template (owner/repo).
     */
    repo: pulumi.Input<string>;
    /**
     * The git revision of the spec template. Possible values: '', *name of branch*. Use '' to autoselect a branch.
     */
    revision: pulumi.Input<string>;
}

export interface PipelineSpecTerminationPolicy {
    /**
     * The following table presents how to configure this block based on the options available in the UI:
     *
     * | Option Description                                                            | Value Selected           | on_create_branch | branch_name | ignore_trigger | ignore_branch |
     * | ----------------------------------------------------------------------------- |:------------------------:|:----------------:|:-----------:|---------------:| -------------:|
     * | Once a build is created terminate previous builds from the same branch        | Disabled                 |        Omit      |     N/A     |       N/A      |      N/A      |
     * | Once a build is created terminate previous builds from the same branch        | From the SAME trigger    |       Defined    |     N/A     |      false     |      N/A      |
     * | Once a build is created terminate previous builds from the same branch        | From ANY trigger         |       Defined    |     N/A     |      true      |      N/A      |
     * | Once a build is created terminate previous builds only from a specific branch | Disabled                 |        Omit      |     N/A     |       N/A      |      N/A      |
     * | Once a build is created terminate previous builds only from a specific branch | From the SAME trigger    |       Defined    |    Regex    |      false     |      N/A      |
     * | Once a build is created terminate previous builds only from a specific branch | From ANY trigger         |       Defined    |    Regex    |      true      |      N/A      |
     * | Once a build is created, terminate all other running builds                   | Disabled                 |        Omit      |     N/A     |       N/A      |      N/A      |
     * | Once a build is created, terminate all other running builds                   | From the SAME trigger    |       Defined    |     N/A     |      false     |      true     |
     * | Once a build is created, terminate all other running builds                   | From ANY trigger         |       Defined    |     N/A     |      true      |      true     |
     */
    onCreateBranch?: pulumi.Input<inputs.PipelineSpecTerminationPolicyOnCreateBranch>;
    /**
     * Enables the policy `Once a build is terminated, terminate all child builds initiated from it`.
     */
    onTerminateAnnotation?: pulumi.Input<boolean>;
}

export interface PipelineSpecTerminationPolicyOnCreateBranch {
    /**
     * A regular expression to filter the branches on with the termination policy applies.
     */
    branchName?: pulumi.Input<string>;
    /**
     * Whether to ignore the branch.
     */
    ignoreBranch?: pulumi.Input<boolean>;
    /**
     * Whether to ignore the trigger.
     */
    ignoreTrigger?: pulumi.Input<boolean>;
}

export interface PipelineSpecTrigger {
    /**
     * A regular expression and will only trigger for branches that match this naming pattern (default: `/.*&#47;gi`).
     */
    branchRegex?: pulumi.Input<string>;
    /**
     * Flag to manage how the `branch_regex` field is interpreted. Possible values: `multiselect-exclude`, `multiselect`, `regex` (default: `regex`).
     */
    branchRegexInput?: pulumi.Input<string>;
    /**
     * A regular expression and will only trigger for pull requests where a comment matches this naming pattern (default: `/.*&#47;gi`).
     */
    commentRegex?: pulumi.Input<string>;
    /**
     * The commit status title pushed to the git provider.
     */
    commitStatusTitle?: pulumi.Input<string>;
    /**
     * The Codefresh git context.
     */
    context?: pulumi.Input<string>;
    /**
     * A list of strings representing the contexts ([shared_configuration](https://codefresh.io/docs/docs/configure-ci-cd-pipeline/shared-configuration/)) to be loaded when the trigger is executed.
     */
    contexts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Flag to disable the trigger.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Trigger level encrypted variables. Please note that drift will not be detected for encrypted variables
     */
    encryptedVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of GitHub events for which a Pipeline is triggered.
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allows to constrain the build and trigger it only if the modified files from the commit match this glob expression (default: `""`).
     */
    modifiedFilesGlob?: pulumi.Input<string>;
    /**
     * The name of the trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * The trigger's options.
     */
    options?: pulumi.Input<pulumi.Input<inputs.PipelineSpecTriggerOption>[]>;
    /**
     * The git provider tied to the trigger.
     */
    provider?: pulumi.Input<string>;
    /**
     * If this trigger is also applicable to git forks.
     */
    pullRequestAllowForkEvents?: pulumi.Input<boolean>;
    /**
     * A regular expression and will only trigger for pull requests to branches that match this naming pattern.
     */
    pullRequestTargetBranchRegex?: pulumi.Input<string>;
    /**
     * The repository name, (owner/repo)
     */
    repo?: pulumi.Input<string>;
    /**
     * The runtime environment for the trigger.
     */
    runtimeEnvironments?: pulumi.Input<pulumi.Input<inputs.PipelineSpecTriggerRuntimeEnvironment>[]>;
    /**
     * The type of the trigger (default: `git`; see notes above).
     */
    type?: pulumi.Input<string>;
    /**
     * Trigger variables.
     */
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface PipelineSpecTriggerOption {
    /**
     * If false the pipeline will not send notifications to Slack and status updates back to the Git provider.
     */
    enableNotifications?: pulumi.Input<boolean>;
    /**
     * If true, docker layer cache is disabled
     */
    noCache?: pulumi.Input<boolean>;
    /**
     * If true, extra Codefresh caching is disabled.
     */
    noCfCache?: pulumi.Input<boolean>;
    /**
     * If true, all files on volume will be deleted before each execution.
     */
    resetVolume?: pulumi.Input<boolean>;
}

export interface PipelineSpecTriggerRuntimeEnvironment {
    /**
     * The CPU allocated to the runtime environment.
     */
    cpu?: pulumi.Input<string>;
    /**
     * The storage allocated to the runtime environment.
     */
    dindStorage?: pulumi.Input<string>;
    /**
     * The memory allocated to the runtime environment.
     */
    memory?: pulumi.Input<string>;
    /**
     * The name of the runtime environment.
     */
    name?: pulumi.Input<string>;
    /**
     * Minimum disk space required for build filesystem ( unit Gi is required).
     */
    requiredAvailableStorage?: pulumi.Input<string>;
}

export interface RegistrySpec {
    /**
     * An `acr` block as documented below ([Azure Container Registry](https://codefresh.io/docs/docs/integrations/docker-registries/azure-docker-registry)).
     */
    acr?: pulumi.Input<inputs.RegistrySpecAcr>;
    /**
     * A `bintray` block as documented below ([Bintray / Artifactory](https://codefresh.io/docs/docs/integrations/docker-registries/bintray-io)).
     */
    bintray?: pulumi.Input<inputs.RegistrySpecBintray>;
    /**
     * A `dockerhub` block as documented below ([Docker Hub Registry](https://codefresh.io/docs/docs/integrations/docker-registries/docker-hub/)).
     */
    dockerhub?: pulumi.Input<inputs.RegistrySpecDockerhub>;
    /**
     * An `ecr` block as documented below ([Amazon EC2 Container Registry](https://codefresh.io/docs/docs/integrations/docker-registries/amazon-ec2-container-registry)).
     */
    ecr?: pulumi.Input<inputs.RegistrySpecEcr>;
    /**
     * A `gar` block as documented below ([Google Artifact Registry](https://codefresh.io/docs/docs/integrations/docker-registries/google-artifact-registry)).
     */
    gar?: pulumi.Input<inputs.RegistrySpecGar>;
    /**
     * [Google Container Registry](https://codefresh.io/docs/docs/integrations/docker-registries/google-container-registry).
     */
    gcr?: pulumi.Input<inputs.RegistrySpecGcr>;
    /**
     * `other` provider block described below ([Other Providers](https://codefresh.io/docs/docs/integrations/docker-registries/other-registries)).
     */
    other?: pulumi.Input<inputs.RegistrySpecOther>;
}

export interface RegistrySpecAcr {
    /**
     * The Client ID.
     */
    clientId: pulumi.Input<string>;
    /**
     * The Client Secret.
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The ACR registry domain.
     */
    domain: pulumi.Input<string>;
    /**
     * See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
}

export interface RegistrySpecBintray {
    /**
     * The Bintray domain.
     */
    domain: pulumi.Input<string>;
    /**
     * See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
    /**
     * The Bintray token.
     */
    token: pulumi.Input<string>;
    /**
     * The Bintray username.
     */
    username: pulumi.Input<string>;
}

export interface RegistrySpecDockerhub {
    /**
     * The DockerHub password.
     */
    password: pulumi.Input<string>;
    /**
     * The DockerHub username.
     */
    username: pulumi.Input<string>;
}

export interface RegistrySpecEcr {
    /**
     * The AWS access key ID.
     */
    accessKeyId: pulumi.Input<string>;
    /**
     * The AWS region.
     */
    region: pulumi.Input<string>;
    /**
     * See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
    /**
     * The AWS secret access key.
     */
    secretAccessKey: pulumi.Input<string>;
}

export interface RegistrySpecGar {
    /**
     * The serviceaccount json file contents.
     */
    keyfile: pulumi.Input<string>;
    /**
     * The GAR location.
     */
    location: pulumi.Input<string>;
    /**
     * See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
}

export interface RegistrySpecGcr {
    /**
     * The GCR registry domain.
     */
    domain: pulumi.Input<string>;
    /**
     * The serviceaccount json file contents.
     */
    keyfile: pulumi.Input<string>;
    /**
     * See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
}

export interface RegistrySpecOther {
    /**
     * See the [docs](https://codefresh.io/docs/docs/administration/behind-the-firewall/#accessing-an-internal-docker-registry).
     */
    behindFirewall?: pulumi.Input<boolean>;
    /**
     * The domain.
     */
    domain: pulumi.Input<string>;
    /**
     * The password.
     */
    password: pulumi.Input<string>;
    /**
     * See the [docs](https://codefresh.io/docs/docs/integrations/docker-registries/#using-an-optional-repository-prefix).
     */
    repositoryPrefix?: pulumi.Input<string>;
    /**
     * The username.
     */
    username: pulumi.Input<string>;
}

export interface StepTypesVersion {
    stepTypesYaml: pulumi.Input<string>;
    versionNumber: pulumi.Input<string>;
}

export interface UserLogin {
    /**
     * The IdP ID for the user's login.
     */
    idpId?: pulumi.Input<string>;
    /**
     * Whether to enforce SSO for the user.
     */
    sso?: pulumi.Input<boolean>;
}

export interface UserPersonal {
    /**
     * The company name of the user.
     */
    companyName?: pulumi.Input<string>;
    /**
     * The country of the user.
     */
    country?: pulumi.Input<string>;
    /**
     * The first name of the user.
     */
    firstName?: pulumi.Input<string>;
    /**
     * The last name of the user.
     */
    lastName?: pulumi.Input<string>;
    /**
     * The phone number of the user.
     */
    phoneNumber?: pulumi.Input<string>;
}

export interface UserShortProfile {
    userName: pulumi.Input<string>;
}
