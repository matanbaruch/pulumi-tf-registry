// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AccountGitopsSettings extends pulumi.CustomResource {
    /**
     * Get an existing AccountGitopsSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountGitopsSettingsState, opts?: pulumi.CustomResourceOptions): AccountGitopsSettings {
        return new AccountGitopsSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'codefresh:index/accountGitopsSettings:AccountGitopsSettings';

    /**
     * Returns true if the given object is an instance of AccountGitopsSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountGitopsSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountGitopsSettings.__pulumiType;
    }

    /**
     * Git provider name - currently supported values are: GITHUB ,GERRIT ,GITLAB ,BITBUCKET ,BITBUCKET_SERVER
     */
    public readonly gitProvider!: pulumi.Output<string>;
    /**
     * Git provider API url. If not provided can automatically be set for known SaaS git providers. For example - for github it
     * will be set to https://api.github.com
     */
    public readonly gitProviderApiUrl!: pulumi.Output<string | undefined>;
    /**
     * Account name for active account
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Shared config repository url. Must be a valid git url which contains `.git`. May also include path and branch references
     */
    public readonly sharedConfigRepository!: pulumi.Output<string>;

    /**
     * Create a AccountGitopsSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountGitopsSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountGitopsSettingsArgs | AccountGitopsSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountGitopsSettingsState | undefined;
            resourceInputs["gitProvider"] = state ? state.gitProvider : undefined;
            resourceInputs["gitProviderApiUrl"] = state ? state.gitProviderApiUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sharedConfigRepository"] = state ? state.sharedConfigRepository : undefined;
        } else {
            const args = argsOrState as AccountGitopsSettingsArgs | undefined;
            if ((!args || args.gitProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gitProvider'");
            }
            if ((!args || args.sharedConfigRepository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedConfigRepository'");
            }
            resourceInputs["gitProvider"] = args ? args.gitProvider : undefined;
            resourceInputs["gitProviderApiUrl"] = args ? args.gitProviderApiUrl : undefined;
            resourceInputs["sharedConfigRepository"] = args ? args.sharedConfigRepository : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountGitopsSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AccountGitopsSettings resources.
 */
export interface AccountGitopsSettingsState {
    /**
     * Git provider name - currently supported values are: GITHUB ,GERRIT ,GITLAB ,BITBUCKET ,BITBUCKET_SERVER
     */
    gitProvider?: pulumi.Input<string>;
    /**
     * Git provider API url. If not provided can automatically be set for known SaaS git providers. For example - for github it
     * will be set to https://api.github.com
     */
    gitProviderApiUrl?: pulumi.Input<string>;
    /**
     * Account name for active account
     */
    name?: pulumi.Input<string>;
    /**
     * Shared config repository url. Must be a valid git url which contains `.git`. May also include path and branch references
     */
    sharedConfigRepository?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountGitopsSettings resource.
 */
export interface AccountGitopsSettingsArgs {
    /**
     * Git provider name - currently supported values are: GITHUB ,GERRIT ,GITLAB ,BITBUCKET ,BITBUCKET_SERVER
     */
    gitProvider: pulumi.Input<string>;
    /**
     * Git provider API url. If not provided can automatically be set for known SaaS git providers. For example - for github it
     * will be set to https://api.github.com
     */
    gitProviderApiUrl?: pulumi.Input<string>;
    /**
     * Shared config repository url. Must be a valid git url which contains `.git`. May also include path and branch references
     */
    sharedConfigRepository: pulumi.Input<string>;
}
