// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Registry extends pulumi.CustomResource {
    /**
     * Get an existing Registry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryState, opts?: pulumi.CustomResourceOptions): Registry {
        return new Registry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'codefresh:index/registry:Registry';

    /**
     * Returns true if the given object is an instance of Registry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Registry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Registry.__pulumiType;
    }

    /**
     * Whether this registry is the default registry (default: `false`).
     */
    public readonly default!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the fallback registry.
     */
    public readonly fallbackRegistry!: pulumi.Output<string | undefined>;
    /**
     * The kind of registry.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * The display name for the registry.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether this registry is the primary registry (default: `true`).
     */
    public readonly primary!: pulumi.Output<boolean | undefined>;
    /**
     * The registry's specs.
     */
    public readonly spec!: pulumi.Output<outputs.RegistrySpec>;

    /**
     * Create a Registry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryArgs | RegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryState | undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["fallbackRegistry"] = state ? state.fallbackRegistry : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primary"] = state ? state.primary : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
        } else {
            const args = argsOrState as RegistryArgs | undefined;
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["fallbackRegistry"] = args ? args.fallbackRegistry : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primary"] = args ? args.primary : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["kind"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Registry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Registry resources.
 */
export interface RegistryState {
    /**
     * Whether this registry is the default registry (default: `false`).
     */
    default?: pulumi.Input<boolean>;
    /**
     * The name of the fallback registry.
     */
    fallbackRegistry?: pulumi.Input<string>;
    /**
     * The kind of registry.
     */
    kind?: pulumi.Input<string>;
    /**
     * The display name for the registry.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether this registry is the primary registry (default: `true`).
     */
    primary?: pulumi.Input<boolean>;
    /**
     * The registry's specs.
     */
    spec?: pulumi.Input<inputs.RegistrySpec>;
}

/**
 * The set of arguments for constructing a Registry resource.
 */
export interface RegistryArgs {
    /**
     * Whether this registry is the default registry (default: `false`).
     */
    default?: pulumi.Input<boolean>;
    /**
     * The name of the fallback registry.
     */
    fallbackRegistry?: pulumi.Input<string>;
    /**
     * The display name for the registry.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether this registry is the primary registry (default: `true`).
     */
    primary?: pulumi.Input<boolean>;
    /**
     * The registry's specs.
     */
    spec: pulumi.Input<inputs.RegistrySpec>;
}
