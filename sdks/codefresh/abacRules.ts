// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AbacRules extends pulumi.CustomResource {
    /**
     * Get an existing AbacRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AbacRulesState, opts?: pulumi.CustomResourceOptions): AbacRules {
        return new AbacRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'codefresh:index/abacRules:AbacRules';

    /**
     * Returns true if the given object is an instance of AbacRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AbacRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AbacRules.__pulumiType;
    }

    /**
     * Action to be allowed. Possible values: * REFRESH * SYNC * TERMINATE_SYNC * VIEW_POD_LOGS * APP_ROLLBACK
     */
    public readonly actions!: pulumi.Output<string[]>;
    /**
     * Resource attribute that need to be validated
     */
    public readonly attributes!: pulumi.Output<outputs.AbacRulesAttribute[] | undefined>;
    /**
     * The type of resources the ABAC rules applies to. Possible values: * gitopsApplications
     */
    public readonly entityType!: pulumi.Output<string>;
    /**
     * The effective tags of the resource to apply the permission to. There are two special tags: * untagged: Apply to all
     * resources without tags. * * (asterisk): Apply to all resources with any tag.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The IDs of the teams the ABAC rules apply to.
     */
    public readonly teams!: pulumi.Output<string[]>;

    /**
     * Create a AbacRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AbacRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AbacRulesArgs | AbacRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AbacRulesState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["entityType"] = state ? state.entityType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
        } else {
            const args = argsOrState as AbacRulesArgs | undefined;
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.entityType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityType'");
            }
            if ((!args || args.teams === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teams'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["entityType"] = args ? args.entityType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AbacRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AbacRules resources.
 */
export interface AbacRulesState {
    /**
     * Action to be allowed. Possible values: * REFRESH * SYNC * TERMINATE_SYNC * VIEW_POD_LOGS * APP_ROLLBACK
     */
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource attribute that need to be validated
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.AbacRulesAttribute>[]>;
    /**
     * The type of resources the ABAC rules applies to. Possible values: * gitopsApplications
     */
    entityType?: pulumi.Input<string>;
    /**
     * The effective tags of the resource to apply the permission to. There are two special tags: * untagged: Apply to all
     * resources without tags. * * (asterisk): Apply to all resources with any tag.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IDs of the teams the ABAC rules apply to.
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AbacRules resource.
 */
export interface AbacRulesArgs {
    /**
     * Action to be allowed. Possible values: * REFRESH * SYNC * TERMINATE_SYNC * VIEW_POD_LOGS * APP_ROLLBACK
     */
    actions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource attribute that need to be validated
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.AbacRulesAttribute>[]>;
    /**
     * The type of resources the ABAC rules applies to. Possible values: * gitopsApplications
     */
    entityType: pulumi.Input<string>;
    /**
     * The effective tags of the resource to apply the permission to. There are two special tags: * untagged: Apply to all
     * resources without tags. * * (asterisk): Apply to all resources with any tag.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IDs of the teams the ABAC rules apply to.
     */
    teams: pulumi.Input<pulumi.Input<string>[]>;
}
