// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dnsimple:index/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    public /*out*/ readonly accountId!: pulumi.Output<number>;
    public readonly active!: pulumi.Output<boolean>;
    public /*out*/ readonly lastTransferredAt!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly reverse!: pulumi.Output<boolean>;
    public /*out*/ readonly secondary!: pulumi.Output<boolean>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["lastTransferredAt"] = state ? state.lastTransferredAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reverse"] = state ? state.reverse : undefined;
            resourceInputs["secondary"] = state ? state.secondary : undefined;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["lastTransferredAt"] = undefined /*out*/;
            resourceInputs["reverse"] = undefined /*out*/;
            resourceInputs["secondary"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    accountId?: pulumi.Input<number>;
    active?: pulumi.Input<boolean>;
    lastTransferredAt?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    reverse?: pulumi.Input<boolean>;
    secondary?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    active?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
}
