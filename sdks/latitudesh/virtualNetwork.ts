// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VirtualNetwork extends pulumi.CustomResource {
    /**
     * Get an existing VirtualNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualNetworkState, opts?: pulumi.CustomResourceOptions): VirtualNetwork {
        return new VirtualNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'latitudesh:index/virtualNetwork:VirtualNetwork';

    /**
     * Returns true if the given object is an instance of VirtualNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualNetwork.__pulumiType;
    }

    /**
     * Amount of devices assigned to the virtual network
     */
    public /*out*/ readonly assignmentsCount!: pulumi.Output<number>;
    /**
     * The virtual network description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The project id or slug
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The site id or slug
     */
    public readonly site!: pulumi.Output<string>;
    /**
     * List of virtual network tags
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The vlan ID of the virtual network
     */
    public /*out*/ readonly vid!: pulumi.Output<number>;

    /**
     * Create a VirtualNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualNetworkArgs | VirtualNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualNetworkState | undefined;
            resourceInputs["assignmentsCount"] = state ? state.assignmentsCount : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vid"] = state ? state.vid : undefined;
        } else {
            const args = argsOrState as VirtualNetworkArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.site === undefined) && !opts.urn) {
                throw new Error("Missing required property 'site'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["assignmentsCount"] = undefined /*out*/;
            resourceInputs["vid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualNetwork resources.
 */
export interface VirtualNetworkState {
    /**
     * Amount of devices assigned to the virtual network
     */
    assignmentsCount?: pulumi.Input<number>;
    /**
     * The virtual network description
     */
    description?: pulumi.Input<string>;
    /**
     * The project id or slug
     */
    project?: pulumi.Input<string>;
    /**
     * The site id or slug
     */
    site?: pulumi.Input<string>;
    /**
     * List of virtual network tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The vlan ID of the virtual network
     */
    vid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VirtualNetwork resource.
 */
export interface VirtualNetworkArgs {
    /**
     * The virtual network description
     */
    description: pulumi.Input<string>;
    /**
     * The project id or slug
     */
    project: pulumi.Input<string>;
    /**
     * The site id or slug
     */
    site: pulumi.Input<string>;
    /**
     * List of virtual network tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
