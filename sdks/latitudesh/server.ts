// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'latitudesh:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    public readonly allowReinstall!: pulumi.Output<boolean | undefined>;
    /**
     * The server billing type. Accepts hourly and monthly for on demand projects and yearly for reserved projects.
     */
    public readonly billing!: pulumi.Output<string | undefined>;
    /**
     * The timestamp for when the server was created
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * The server hostname
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Url for the iPXE script that will be used. Updating ipxe_url will trigger a reinstall if allow_reinstall is set to true.
     */
    public readonly ipxeUrl!: pulumi.Output<string | undefined>;
    /**
     * Lock/unlock the server. A locked server cannot be deleted or updated.
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * The server OS. Updating operating_system will trigger a reinstall if allow_reinstall is set to true.
     */
    public readonly operatingSystem!: pulumi.Output<string>;
    /**
     * The server plan
     */
    public readonly plan!: pulumi.Output<string>;
    /**
     * The server IP address
     */
    public /*out*/ readonly primaryIpv4!: pulumi.Output<string>;
    /**
     * The id or slug of the project
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * RAID mode for the server. Updating raid will trigger a reinstall if allow_reinstall is set to true.
     */
    public readonly raid!: pulumi.Output<string | undefined>;
    /**
     * The server site
     */
    public readonly site!: pulumi.Output<string>;
    /**
     * List of server SSH key ids. Updating ssh_keys will trigger a reinstall if allow_reinstall is set to true.
     */
    public readonly sshKeys!: pulumi.Output<string[] | undefined>;
    /**
     * List of server tags
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The timestamp for the last time the server was updated
     */
    public /*out*/ readonly updated!: pulumi.Output<string>;
    /**
     * The id of user data to set on the server. Updating user_data will trigger a reinstall if allow_reinstall is set to true.
     */
    public readonly userData!: pulumi.Output<string | undefined>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["allowReinstall"] = state ? state.allowReinstall : undefined;
            resourceInputs["billing"] = state ? state.billing : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ipxeUrl"] = state ? state.ipxeUrl : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["primaryIpv4"] = state ? state.primaryIpv4 : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["raid"] = state ? state.raid : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.operatingSystem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operatingSystem'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.site === undefined) && !opts.urn) {
                throw new Error("Missing required property 'site'");
            }
            resourceInputs["allowReinstall"] = args ? args.allowReinstall : undefined;
            resourceInputs["billing"] = args ? args.billing : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ipxeUrl"] = args ? args.ipxeUrl : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["operatingSystem"] = args ? args.operatingSystem : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["raid"] = args ? args.raid : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["sshKeys"] = args ? args.sshKeys : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["primaryIpv4"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * @deprecated Deprecated
     */
    allowReinstall?: pulumi.Input<boolean>;
    /**
     * The server billing type. Accepts hourly and monthly for on demand projects and yearly for reserved projects.
     */
    billing?: pulumi.Input<string>;
    /**
     * The timestamp for when the server was created
     */
    created?: pulumi.Input<string>;
    /**
     * The server hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Url for the iPXE script that will be used. Updating ipxe_url will trigger a reinstall if allow_reinstall is set to true.
     */
    ipxeUrl?: pulumi.Input<string>;
    /**
     * Lock/unlock the server. A locked server cannot be deleted or updated.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * The server OS. Updating operating_system will trigger a reinstall if allow_reinstall is set to true.
     */
    operatingSystem?: pulumi.Input<string>;
    /**
     * The server plan
     */
    plan?: pulumi.Input<string>;
    /**
     * The server IP address
     */
    primaryIpv4?: pulumi.Input<string>;
    /**
     * The id or slug of the project
     */
    project?: pulumi.Input<string>;
    /**
     * RAID mode for the server. Updating raid will trigger a reinstall if allow_reinstall is set to true.
     */
    raid?: pulumi.Input<string>;
    /**
     * The server site
     */
    site?: pulumi.Input<string>;
    /**
     * List of server SSH key ids. Updating ssh_keys will trigger a reinstall if allow_reinstall is set to true.
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of server tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timestamp for the last time the server was updated
     */
    updated?: pulumi.Input<string>;
    /**
     * The id of user data to set on the server. Updating user_data will trigger a reinstall if allow_reinstall is set to true.
     */
    userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * @deprecated Deprecated
     */
    allowReinstall?: pulumi.Input<boolean>;
    /**
     * The server billing type. Accepts hourly and monthly for on demand projects and yearly for reserved projects.
     */
    billing?: pulumi.Input<string>;
    /**
     * The server hostname
     */
    hostname: pulumi.Input<string>;
    /**
     * Url for the iPXE script that will be used. Updating ipxe_url will trigger a reinstall if allow_reinstall is set to true.
     */
    ipxeUrl?: pulumi.Input<string>;
    /**
     * Lock/unlock the server. A locked server cannot be deleted or updated.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * The server OS. Updating operating_system will trigger a reinstall if allow_reinstall is set to true.
     */
    operatingSystem: pulumi.Input<string>;
    /**
     * The server plan
     */
    plan: pulumi.Input<string>;
    /**
     * The id or slug of the project
     */
    project: pulumi.Input<string>;
    /**
     * RAID mode for the server. Updating raid will trigger a reinstall if allow_reinstall is set to true.
     */
    raid?: pulumi.Input<string>;
    /**
     * The server site
     */
    site: pulumi.Input<string>;
    /**
     * List of server SSH key ids. Updating ssh_keys will trigger a reinstall if allow_reinstall is set to true.
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of server tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The id of user data to set on the server. Updating user_data will trigger a reinstall if allow_reinstall is set to true.
     */
    userData?: pulumi.Input<string>;
}
