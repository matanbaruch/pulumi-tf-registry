// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetPlanArgs, GetPlanResult, GetPlanOutputArgs } from "./getPlan";
export const getPlan: typeof import("./getPlan").getPlan = null as any;
export const getPlanOutput: typeof import("./getPlan").getPlanOutput = null as any;
utilities.lazyLoad(exports, ["getPlan","getPlanOutput"], () => require("./getPlan"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { MemberArgs, MemberState } from "./member";
export type Member = import("./member").Member;
export const Member: typeof import("./member").Member = null as any;
utilities.lazyLoad(exports, ["Member"], () => require("./member"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { UserDataArgs, UserDataState } from "./userData";
export type UserData = import("./userData").UserData;
export const UserData: typeof import("./userData").UserData = null as any;
utilities.lazyLoad(exports, ["UserData"], () => require("./userData"));

export { VirtualNetworkArgs, VirtualNetworkState } from "./virtualNetwork";
export type VirtualNetwork = import("./virtualNetwork").VirtualNetwork;
export const VirtualNetwork: typeof import("./virtualNetwork").VirtualNetwork = null as any;
utilities.lazyLoad(exports, ["VirtualNetwork"], () => require("./virtualNetwork"));

export { VlanAssignmentArgs, VlanAssignmentState } from "./vlanAssignment";
export type VlanAssignment = import("./vlanAssignment").VlanAssignment;
export const VlanAssignment: typeof import("./vlanAssignment").VlanAssignment = null as any;
utilities.lazyLoad(exports, ["VlanAssignment"], () => require("./vlanAssignment"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "latitudesh:index/member:Member":
                return new Member(name, <any>undefined, { urn })
            case "latitudesh:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "latitudesh:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "latitudesh:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "latitudesh:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "latitudesh:index/userData:UserData":
                return new UserData(name, <any>undefined, { urn })
            case "latitudesh:index/virtualNetwork:VirtualNetwork":
                return new VirtualNetwork(name, <any>undefined, { urn })
            case "latitudesh:index/vlanAssignment:VlanAssignment":
                return new VlanAssignment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("latitudesh", "index/member", _module)
pulumi.runtime.registerResourceModule("latitudesh", "index/project", _module)
pulumi.runtime.registerResourceModule("latitudesh", "index/server", _module)
pulumi.runtime.registerResourceModule("latitudesh", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("latitudesh", "index/tag", _module)
pulumi.runtime.registerResourceModule("latitudesh", "index/userData", _module)
pulumi.runtime.registerResourceModule("latitudesh", "index/virtualNetwork", _module)
pulumi.runtime.registerResourceModule("latitudesh", "index/vlanAssignment", _module)
pulumi.runtime.registerResourcePackage("latitudesh", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:latitudesh") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
