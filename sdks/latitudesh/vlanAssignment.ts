// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VlanAssignment extends pulumi.CustomResource {
    /**
     * Get an existing VlanAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VlanAssignmentState, opts?: pulumi.CustomResourceOptions): VlanAssignment {
        return new VlanAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'latitudesh:index/vlanAssignment:VlanAssignment';

    /**
     * Returns true if the given object is an instance of VlanAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VlanAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VlanAssignment.__pulumiType;
    }

    /**
     * The Virtual Network description
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The assignment server hostname
     */
    public /*out*/ readonly serverHostname!: pulumi.Output<string>;
    /**
     * The assignment server ID
     */
    public readonly serverId!: pulumi.Output<string>;
    /**
     * The assignment server label
     */
    public /*out*/ readonly serverLabel!: pulumi.Output<string>;
    /**
     * The assignment status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The vlan ID of the virtual network
     */
    public /*out*/ readonly vid!: pulumi.Output<number>;
    /**
     * The virtual network ID
     */
    public readonly virtualNetworkId!: pulumi.Output<string>;

    /**
     * Create a VlanAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VlanAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VlanAssignmentArgs | VlanAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VlanAssignmentState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["serverHostname"] = state ? state.serverHostname : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["serverLabel"] = state ? state.serverLabel : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vid"] = state ? state.vid : undefined;
            resourceInputs["virtualNetworkId"] = state ? state.virtualNetworkId : undefined;
        } else {
            const args = argsOrState as VlanAssignmentArgs | undefined;
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            if ((!args || args.virtualNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetworkId'");
            }
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["virtualNetworkId"] = args ? args.virtualNetworkId : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["serverHostname"] = undefined /*out*/;
            resourceInputs["serverLabel"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VlanAssignment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VlanAssignment resources.
 */
export interface VlanAssignmentState {
    /**
     * The Virtual Network description
     */
    description?: pulumi.Input<string>;
    /**
     * The assignment server hostname
     */
    serverHostname?: pulumi.Input<string>;
    /**
     * The assignment server ID
     */
    serverId?: pulumi.Input<string>;
    /**
     * The assignment server label
     */
    serverLabel?: pulumi.Input<string>;
    /**
     * The assignment status
     */
    status?: pulumi.Input<string>;
    /**
     * The vlan ID of the virtual network
     */
    vid?: pulumi.Input<number>;
    /**
     * The virtual network ID
     */
    virtualNetworkId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VlanAssignment resource.
 */
export interface VlanAssignmentArgs {
    /**
     * The assignment server ID
     */
    serverId: pulumi.Input<string>;
    /**
     * The virtual network ID
     */
    virtualNetworkId: pulumi.Input<string>;
}
