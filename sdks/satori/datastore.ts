// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Datastore extends pulumi.CustomResource {
    /**
     * Get an existing Datastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatastoreState, opts?: pulumi.CustomResourceOptions): Datastore {
        return new Datastore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'satori:index/datastore:Datastore';

    /**
     * Returns true if the given object is an instance of Datastore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datastore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datastore.__pulumiType;
    }

    /**
     * Baseline security policy.
     */
    public readonly baselineSecurityPolicy!: pulumi.Output<outputs.DatastoreBaselineSecurityPolicy | undefined>;
    /**
     * Custom ingress port number description.
     */
    public readonly customIngressPort!: pulumi.Output<number | undefined>;
    /**
     * Host FQDN name.
     */
    public readonly dataaccessControllerId!: pulumi.Output<string>;
    /**
     * Settings for a Data Store (may be unique per Data Store)
     */
    public readonly datastoreSettings!: pulumi.Output<outputs.DatastoreDatastoreSetting[] | undefined>;
    /**
     * Data provider's FQDN hostname.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * DataStore name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A network Policy for a Data Store
     */
    public readonly networkPolicies!: pulumi.Output<outputs.DatastoreNetworkPolicy[] | undefined>;
    /**
     * Port number description.
     */
    public readonly originPort!: pulumi.Output<number | undefined>;
    /**
     * ProjectIds list of project IDs
     */
    public readonly projectIds!: pulumi.Output<string[] | undefined>;
    /**
     * Sets the authentication settings for the Data Store
     */
    public readonly satoriAuthSettings!: pulumi.Output<outputs.DatastoreSatoriAuthSettings | undefined>;
    /**
     * Satori Hostname.
     */
    public /*out*/ readonly satoriHostname!: pulumi.Output<string>;
    /**
     * The datastore type, for example: POSTGRESQL, SNOWFLAKE, etc. The full list is available at
     * https://app.satoricyber.com/docs/api#post-/api/v1/datastore
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Datastore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatastoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatastoreArgs | DatastoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatastoreState | undefined;
            resourceInputs["baselineSecurityPolicy"] = state ? state.baselineSecurityPolicy : undefined;
            resourceInputs["customIngressPort"] = state ? state.customIngressPort : undefined;
            resourceInputs["dataaccessControllerId"] = state ? state.dataaccessControllerId : undefined;
            resourceInputs["datastoreSettings"] = state ? state.datastoreSettings : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkPolicies"] = state ? state.networkPolicies : undefined;
            resourceInputs["originPort"] = state ? state.originPort : undefined;
            resourceInputs["projectIds"] = state ? state.projectIds : undefined;
            resourceInputs["satoriAuthSettings"] = state ? state.satoriAuthSettings : undefined;
            resourceInputs["satoriHostname"] = state ? state.satoriHostname : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DatastoreArgs | undefined;
            if ((!args || args.dataaccessControllerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataaccessControllerId'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["baselineSecurityPolicy"] = args ? args.baselineSecurityPolicy : undefined;
            resourceInputs["customIngressPort"] = args ? args.customIngressPort : undefined;
            resourceInputs["dataaccessControllerId"] = args ? args.dataaccessControllerId : undefined;
            resourceInputs["datastoreSettings"] = args ? args.datastoreSettings : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkPolicies"] = args ? args.networkPolicies : undefined;
            resourceInputs["originPort"] = args ? args.originPort : undefined;
            resourceInputs["projectIds"] = args ? args.projectIds : undefined;
            resourceInputs["satoriAuthSettings"] = args ? args.satoriAuthSettings : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["satoriHostname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Datastore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Datastore resources.
 */
export interface DatastoreState {
    /**
     * Baseline security policy.
     */
    baselineSecurityPolicy?: pulumi.Input<inputs.DatastoreBaselineSecurityPolicy>;
    /**
     * Custom ingress port number description.
     */
    customIngressPort?: pulumi.Input<number>;
    /**
     * Host FQDN name.
     */
    dataaccessControllerId?: pulumi.Input<string>;
    /**
     * Settings for a Data Store (may be unique per Data Store)
     */
    datastoreSettings?: pulumi.Input<pulumi.Input<inputs.DatastoreDatastoreSetting>[]>;
    /**
     * Data provider's FQDN hostname.
     */
    hostname?: pulumi.Input<string>;
    /**
     * DataStore name.
     */
    name?: pulumi.Input<string>;
    /**
     * A network Policy for a Data Store
     */
    networkPolicies?: pulumi.Input<pulumi.Input<inputs.DatastoreNetworkPolicy>[]>;
    /**
     * Port number description.
     */
    originPort?: pulumi.Input<number>;
    /**
     * ProjectIds list of project IDs
     */
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets the authentication settings for the Data Store
     */
    satoriAuthSettings?: pulumi.Input<inputs.DatastoreSatoriAuthSettings>;
    /**
     * Satori Hostname.
     */
    satoriHostname?: pulumi.Input<string>;
    /**
     * The datastore type, for example: POSTGRESQL, SNOWFLAKE, etc. The full list is available at
     * https://app.satoricyber.com/docs/api#post-/api/v1/datastore
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Datastore resource.
 */
export interface DatastoreArgs {
    /**
     * Baseline security policy.
     */
    baselineSecurityPolicy?: pulumi.Input<inputs.DatastoreBaselineSecurityPolicy>;
    /**
     * Custom ingress port number description.
     */
    customIngressPort?: pulumi.Input<number>;
    /**
     * Host FQDN name.
     */
    dataaccessControllerId: pulumi.Input<string>;
    /**
     * Settings for a Data Store (may be unique per Data Store)
     */
    datastoreSettings?: pulumi.Input<pulumi.Input<inputs.DatastoreDatastoreSetting>[]>;
    /**
     * Data provider's FQDN hostname.
     */
    hostname: pulumi.Input<string>;
    /**
     * DataStore name.
     */
    name?: pulumi.Input<string>;
    /**
     * A network Policy for a Data Store
     */
    networkPolicies?: pulumi.Input<pulumi.Input<inputs.DatastoreNetworkPolicy>[]>;
    /**
     * Port number description.
     */
    originPort?: pulumi.Input<number>;
    /**
     * ProjectIds list of project IDs
     */
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets the authentication settings for the Data Store
     */
    satoriAuthSettings?: pulumi.Input<inputs.DatastoreSatoriAuthSettings>;
    /**
     * The datastore type, for example: POSTGRESQL, SNOWFLAKE, etc. The full list is available at
     * https://app.satoricyber.com/docs/api#post-/api/v1/datastore
     */
    type: pulumi.Input<string>;
}
