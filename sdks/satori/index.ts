// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessRuleArgs, AccessRuleState } from "./accessRule";
export type AccessRule = import("./accessRule").AccessRule;
export const AccessRule: typeof import("./accessRule").AccessRule = null as any;
utilities.lazyLoad(exports, ["AccessRule"], () => require("./accessRule"));

export { CustomTaxonomyCategoryArgs, CustomTaxonomyCategoryState } from "./customTaxonomyCategory";
export type CustomTaxonomyCategory = import("./customTaxonomyCategory").CustomTaxonomyCategory;
export const CustomTaxonomyCategory: typeof import("./customTaxonomyCategory").CustomTaxonomyCategory = null as any;
utilities.lazyLoad(exports, ["CustomTaxonomyCategory"], () => require("./customTaxonomyCategory"));

export { CustomTaxonomyClassifierArgs, CustomTaxonomyClassifierState } from "./customTaxonomyClassifier";
export type CustomTaxonomyClassifier = import("./customTaxonomyClassifier").CustomTaxonomyClassifier;
export const CustomTaxonomyClassifier: typeof import("./customTaxonomyClassifier").CustomTaxonomyClassifier = null as any;
utilities.lazyLoad(exports, ["CustomTaxonomyClassifier"], () => require("./customTaxonomyClassifier"));

export { DatasetArgs, DatasetState } from "./dataset";
export type Dataset = import("./dataset").Dataset;
export const Dataset: typeof import("./dataset").Dataset = null as any;
utilities.lazyLoad(exports, ["Dataset"], () => require("./dataset"));

export { DatastoreArgs, DatastoreState } from "./datastore";
export type Datastore = import("./datastore").Datastore;
export const Datastore: typeof import("./datastore").Datastore = null as any;
utilities.lazyLoad(exports, ["Datastore"], () => require("./datastore"));

export { DirectoryGroupArgs, DirectoryGroupState } from "./directoryGroup";
export type DirectoryGroup = import("./directoryGroup").DirectoryGroup;
export const DirectoryGroup: typeof import("./directoryGroup").DirectoryGroup = null as any;
utilities.lazyLoad(exports, ["DirectoryGroup"], () => require("./directoryGroup"));

export { GetDacDeploymentSettingsArgs, GetDacDeploymentSettingsResult, GetDacDeploymentSettingsOutputArgs } from "./getDacDeploymentSettings";
export const getDacDeploymentSettings: typeof import("./getDacDeploymentSettings").getDacDeploymentSettings = null as any;
export const getDacDeploymentSettingsOutput: typeof import("./getDacDeploymentSettings").getDacDeploymentSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getDacDeploymentSettings","getDacDeploymentSettingsOutput"], () => require("./getDacDeploymentSettings"));

export { GetDataAccessControllerArgs, GetDataAccessControllerResult, GetDataAccessControllerOutputArgs } from "./getDataAccessController";
export const getDataAccessController: typeof import("./getDataAccessController").getDataAccessController = null as any;
export const getDataAccessControllerOutput: typeof import("./getDataAccessController").getDataAccessControllerOutput = null as any;
utilities.lazyLoad(exports, ["getDataAccessController","getDataAccessControllerOutput"], () => require("./getDataAccessController"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { MaskingProfileArgs, MaskingProfileState } from "./maskingProfile";
export type MaskingProfile = import("./maskingProfile").MaskingProfile;
export const MaskingProfile: typeof import("./maskingProfile").MaskingProfile = null as any;
utilities.lazyLoad(exports, ["MaskingProfile"], () => require("./maskingProfile"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RequestAccessRuleArgs, RequestAccessRuleState } from "./requestAccessRule";
export type RequestAccessRule = import("./requestAccessRule").RequestAccessRule;
export const RequestAccessRule: typeof import("./requestAccessRule").RequestAccessRule = null as any;
utilities.lazyLoad(exports, ["RequestAccessRule"], () => require("./requestAccessRule"));

export { SecurityPolicyArgs, SecurityPolicyState } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));

export { SelfServiceAccessRuleArgs, SelfServiceAccessRuleState } from "./selfServiceAccessRule";
export type SelfServiceAccessRule = import("./selfServiceAccessRule").SelfServiceAccessRule;
export const SelfServiceAccessRule: typeof import("./selfServiceAccessRule").SelfServiceAccessRule = null as any;
utilities.lazyLoad(exports, ["SelfServiceAccessRule"], () => require("./selfServiceAccessRule"));

export { UserSettingsArgs, UserSettingsState } from "./userSettings";
export type UserSettings = import("./userSettings").UserSettings;
export const UserSettings: typeof import("./userSettings").UserSettings = null as any;
utilities.lazyLoad(exports, ["UserSettings"], () => require("./userSettings"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "satori:index/accessRule:AccessRule":
                return new AccessRule(name, <any>undefined, { urn })
            case "satori:index/customTaxonomyCategory:CustomTaxonomyCategory":
                return new CustomTaxonomyCategory(name, <any>undefined, { urn })
            case "satori:index/customTaxonomyClassifier:CustomTaxonomyClassifier":
                return new CustomTaxonomyClassifier(name, <any>undefined, { urn })
            case "satori:index/dataset:Dataset":
                return new Dataset(name, <any>undefined, { urn })
            case "satori:index/datastore:Datastore":
                return new Datastore(name, <any>undefined, { urn })
            case "satori:index/directoryGroup:DirectoryGroup":
                return new DirectoryGroup(name, <any>undefined, { urn })
            case "satori:index/maskingProfile:MaskingProfile":
                return new MaskingProfile(name, <any>undefined, { urn })
            case "satori:index/requestAccessRule:RequestAccessRule":
                return new RequestAccessRule(name, <any>undefined, { urn })
            case "satori:index/securityPolicy:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "satori:index/selfServiceAccessRule:SelfServiceAccessRule":
                return new SelfServiceAccessRule(name, <any>undefined, { urn })
            case "satori:index/userSettings:UserSettings":
                return new UserSettings(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("satori", "index/accessRule", _module)
pulumi.runtime.registerResourceModule("satori", "index/customTaxonomyCategory", _module)
pulumi.runtime.registerResourceModule("satori", "index/customTaxonomyClassifier", _module)
pulumi.runtime.registerResourceModule("satori", "index/dataset", _module)
pulumi.runtime.registerResourceModule("satori", "index/datastore", _module)
pulumi.runtime.registerResourceModule("satori", "index/directoryGroup", _module)
pulumi.runtime.registerResourceModule("satori", "index/maskingProfile", _module)
pulumi.runtime.registerResourceModule("satori", "index/requestAccessRule", _module)
pulumi.runtime.registerResourceModule("satori", "index/securityPolicy", _module)
pulumi.runtime.registerResourceModule("satori", "index/selfServiceAccessRule", _module)
pulumi.runtime.registerResourceModule("satori", "index/userSettings", _module)
pulumi.runtime.registerResourcePackage("satori", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:satori") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
