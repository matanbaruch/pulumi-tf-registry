// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessRuleIdentity {
    /**
     * Directory group ID for identity of type GROUP.
     * Can not be changed after creation.
     */
    groupId?: pulumi.Input<string>;
    /**
     * User/group name for identity types of USER and IDP_GROUP.
     * Can not be changed after creation.
     */
    name?: pulumi.Input<string>;
    /**
     * Identity type, valid types are: USER, DB_USER, IDP_GROUP, GROUP, DATABRICKS_GROUP, DATABRICKS_SERVICE_PRINCIPAL, SNOWFLAKE_ROLE, EVERYONE.
     * Can not be changed after creation.
     */
    type: pulumi.Input<string>;
}

export interface CustomTaxonomyClassifierCustomConfig {
    /**
     * Field name pattern.
     */
    fieldNamePattern?: pulumi.Input<string>;
    /**
     * Field type, valid types are: ANY, TEXT, NUMERIC, DATE.
     */
    fieldType: pulumi.Input<string>;
    /**
     * Should value match be case sensitive. Defaults to `true`.
     */
    valueCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Value pattern.
     */
    valuePattern?: pulumi.Input<string>;
    /**
     * List of possible field values.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomTaxonomyClassifierSatoriBasedConfig {
    /**
     * Base Satori classifier ID.
     * See https://satoricyber.com/docs/taxonomy/standard-classifiers for a list of possible values.
     */
    satoriBaseClassifier: pulumi.Input<string>;
}

export interface CustomTaxonomyClassifierScope {
    /**
     * IDs of datasets to include in the scope.
     */
    datasets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Location to include in the scope.
     */
    includeLocations?: pulumi.Input<pulumi.Input<inputs.CustomTaxonomyClassifierScopeIncludeLocation>[]>;
}

export interface CustomTaxonomyClassifierScopeIncludeLocation {
    /**
     * Data store ID.
     */
    datastore: pulumi.Input<string>;
    /**
     * Location for a data store. Can include only one location type field from the above: relational_location, mysql_location, athena_location, mongo_location and s3_location . Conflicts with 'relational_location' field.
     */
    location?: pulumi.Input<inputs.CustomTaxonomyClassifierScopeIncludeLocationLocation>;
    /**
     * Location for a relational data store. Conflicts with 'location' field. The 'relational_location' field has been deprecated. Please use the 'location' field instead.
     *
     * @deprecated Deprecated
     */
    relationalLocation?: pulumi.Input<inputs.CustomTaxonomyClassifierScopeIncludeLocationRelationalLocation>;
}

export interface CustomTaxonomyClassifierScopeIncludeLocationLocation {
    /**
     * Location for Athena data store.
     */
    athenaLocation?: pulumi.Input<inputs.CustomTaxonomyClassifierScopeIncludeLocationLocationAthenaLocation>;
    /**
     * Location for MongoDB data store.
     */
    mongoLocation?: pulumi.Input<inputs.CustomTaxonomyClassifierScopeIncludeLocationLocationMongoLocation>;
    /**
     * Location for MySql and MariaDB data stores.
     */
    mysqlLocation?: pulumi.Input<inputs.CustomTaxonomyClassifierScopeIncludeLocationLocationMysqlLocation>;
    /**
     * Location for a relational data store.
     */
    relationalLocation?: pulumi.Input<inputs.CustomTaxonomyClassifierScopeIncludeLocationLocationRelationalLocation>;
    /**
     * Location for S3 data store.
     */
    s3Location?: pulumi.Input<inputs.CustomTaxonomyClassifierScopeIncludeLocationLocationS3Location>;
}

export interface CustomTaxonomyClassifierScopeIncludeLocationLocationAthenaLocation {
    /**
     * Catalog name.
     */
    catalog: pulumi.Input<string>;
    /**
     * Database name.
     */
    db?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface CustomTaxonomyClassifierScopeIncludeLocationLocationMongoLocation {
    /**
     * Collection name.
     */
    collection?: pulumi.Input<string>;
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
}

export interface CustomTaxonomyClassifierScopeIncludeLocationLocationMysqlLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface CustomTaxonomyClassifierScopeIncludeLocationLocationRelationalLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Schema name.
     */
    schema?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface CustomTaxonomyClassifierScopeIncludeLocationLocationS3Location {
    /**
     * Bucket name.
     */
    bucket: pulumi.Input<string>;
    /**
     * Object Key name.
     */
    objectKey?: pulumi.Input<string>;
}

export interface CustomTaxonomyClassifierScopeIncludeLocationRelationalLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Schema name.
     */
    schema?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface DatasetAccessControlSettings {
    /**
     * Enforce access control to this dataset. Defaults to `false`.
     */
    enableAccessControl?: pulumi.Input<boolean>;
}

export interface DatasetCustomPolicy {
    /**
     * Dataset custom policy priority. Defaults to `100`.
     */
    priority?: pulumi.Input<number>;
    /**
     * Custom policy rules YAML.
     */
    rulesYaml?: pulumi.Input<string>;
    /**
     * Custom policy tags YAML.
     */
    tagsYaml?: pulumi.Input<string>;
}

export interface DatasetDefinition {
    /**
     * Identities of Satori users/groups that will be set as dataset approvers.
     */
    approvers?: pulumi.Input<pulumi.Input<inputs.DatasetDefinitionApprover>[]>;
    /**
     * Dataset description.
     */
    description?: pulumi.Input<string>;
    /**
     * Location to exclude from dataset.
     */
    excludeLocations?: pulumi.Input<pulumi.Input<inputs.DatasetDefinitionExcludeLocation>[]>;
    /**
     * Location to include in dataset.
     */
    includeLocations?: pulumi.Input<pulumi.Input<inputs.DatasetDefinitionIncludeLocation>[]>;
    /**
     * Dataset name.
     */
    name: pulumi.Input<string>;
    /**
     * IDs of Satori users that will be set as dataset owners.
     */
    owners?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatasetDefinitionApprover {
    /**
     * The ID of the approver entity
     */
    id: pulumi.Input<string>;
    /**
     * Approver type, can be either `GROUP` (IdP Group alone) or `USER`
     */
    type: pulumi.Input<string>;
}

export interface DatasetDefinitionExcludeLocation {
    /**
     * Data store ID.
     */
    datastore: pulumi.Input<string>;
    /**
     * Location for a data store. Can include only one location type field from the above: relational_location, mysql_location, athena_location, mongo_location and s3_location . Conflicts with 'relational_location' field.
     */
    location?: pulumi.Input<inputs.DatasetDefinitionExcludeLocationLocation>;
    /**
     * Location for a relational data store. Conflicts with 'location' field. The 'relational_location' field has been deprecated. Please use the 'location' field instead.
     *
     * @deprecated Deprecated
     */
    relationalLocation?: pulumi.Input<inputs.DatasetDefinitionExcludeLocationRelationalLocation>;
}

export interface DatasetDefinitionExcludeLocationLocation {
    /**
     * Location for Athena data store.
     */
    athenaLocation?: pulumi.Input<inputs.DatasetDefinitionExcludeLocationLocationAthenaLocation>;
    /**
     * Location for MongoDB data store.
     */
    mongoLocation?: pulumi.Input<inputs.DatasetDefinitionExcludeLocationLocationMongoLocation>;
    /**
     * Location for MySql and MariaDB data stores.
     */
    mysqlLocation?: pulumi.Input<inputs.DatasetDefinitionExcludeLocationLocationMysqlLocation>;
    /**
     * Location for a relational data store.
     */
    relationalLocation?: pulumi.Input<inputs.DatasetDefinitionExcludeLocationLocationRelationalLocation>;
    /**
     * Location for S3 data store.
     */
    s3Location?: pulumi.Input<inputs.DatasetDefinitionExcludeLocationLocationS3Location>;
}

export interface DatasetDefinitionExcludeLocationLocationAthenaLocation {
    /**
     * Catalog name.
     */
    catalog: pulumi.Input<string>;
    /**
     * Database name.
     */
    db?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface DatasetDefinitionExcludeLocationLocationMongoLocation {
    /**
     * Collection name.
     */
    collection?: pulumi.Input<string>;
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
}

export interface DatasetDefinitionExcludeLocationLocationMysqlLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface DatasetDefinitionExcludeLocationLocationRelationalLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Schema name.
     */
    schema?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface DatasetDefinitionExcludeLocationLocationS3Location {
    /**
     * Bucket name.
     */
    bucket: pulumi.Input<string>;
    /**
     * Object Key name.
     */
    objectKey?: pulumi.Input<string>;
}

export interface DatasetDefinitionExcludeLocationRelationalLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Schema name.
     */
    schema?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface DatasetDefinitionIncludeLocation {
    /**
     * Data store ID.
     */
    datastore: pulumi.Input<string>;
    /**
     * Location for a data store. Can include only one location type field from the above: relational_location, mysql_location, athena_location, mongo_location and s3_location . Conflicts with 'relational_location' field.
     */
    location?: pulumi.Input<inputs.DatasetDefinitionIncludeLocationLocation>;
    /**
     * Location for a relational data store. Conflicts with 'location' field. The 'relational_location' field has been deprecated. Please use the 'location' field instead.
     *
     * @deprecated Deprecated
     */
    relationalLocation?: pulumi.Input<inputs.DatasetDefinitionIncludeLocationRelationalLocation>;
}

export interface DatasetDefinitionIncludeLocationLocation {
    /**
     * Location for Athena data store.
     */
    athenaLocation?: pulumi.Input<inputs.DatasetDefinitionIncludeLocationLocationAthenaLocation>;
    /**
     * Location for MongoDB data store.
     */
    mongoLocation?: pulumi.Input<inputs.DatasetDefinitionIncludeLocationLocationMongoLocation>;
    /**
     * Location for MySql and MariaDB data stores.
     */
    mysqlLocation?: pulumi.Input<inputs.DatasetDefinitionIncludeLocationLocationMysqlLocation>;
    /**
     * Location for a relational data store.
     */
    relationalLocation?: pulumi.Input<inputs.DatasetDefinitionIncludeLocationLocationRelationalLocation>;
    /**
     * Location for S3 data store.
     */
    s3Location?: pulumi.Input<inputs.DatasetDefinitionIncludeLocationLocationS3Location>;
}

export interface DatasetDefinitionIncludeLocationLocationAthenaLocation {
    /**
     * Catalog name.
     */
    catalog: pulumi.Input<string>;
    /**
     * Database name.
     */
    db?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface DatasetDefinitionIncludeLocationLocationMongoLocation {
    /**
     * Collection name.
     */
    collection?: pulumi.Input<string>;
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
}

export interface DatasetDefinitionIncludeLocationLocationMysqlLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface DatasetDefinitionIncludeLocationLocationRelationalLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Schema name.
     */
    schema?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface DatasetDefinitionIncludeLocationLocationS3Location {
    /**
     * Bucket name.
     */
    bucket: pulumi.Input<string>;
    /**
     * Object Key name.
     */
    objectKey?: pulumi.Input<string>;
}

export interface DatasetDefinitionIncludeLocationRelationalLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Schema name.
     */
    schema?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface DatastoreBaselineSecurityPolicy {
    /**
     * Exempt users and patterns from baseline security policy
     */
    exclusions: pulumi.Input<inputs.DatastoreBaselineSecurityPolicyExclusions>;
    /**
     * DataStore security policy. Defaults to `BASELINE_POLICY`.
     */
    type?: pulumi.Input<string>;
    /**
     * UnassociatedQueriesCategory
     */
    unassociatedQueriesCategory: pulumi.Input<inputs.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategory>;
    /**
     * UnsupportedQueriesCategory
     */
    unsupportedQueriesCategory: pulumi.Input<inputs.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategory>;
}

export interface DatastoreBaselineSecurityPolicyExclusions {
    /**
     * Exempt Users from the Baseline Security Policy
     */
    excludedIdentities?: pulumi.Input<pulumi.Input<inputs.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentity>[]>;
    /**
     * Exempt Queries from the Baseline Security Policy
     */
    excludedQueryPatterns?: pulumi.Input<pulumi.Input<inputs.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPattern>[]>;
}

export interface DatastoreBaselineSecurityPolicyExclusionsExcludedIdentity {
    /**
     * Username
     */
    identity?: pulumi.Input<string>;
    /**
     * USER type is supported
     */
    identityType?: pulumi.Input<string>;
}

export interface DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPattern {
    /**
     * Query pattern
     */
    pattern?: pulumi.Input<string>;
}

export interface DatastoreBaselineSecurityPolicyUnassociatedQueriesCategory {
    /**
     * Default policy action for querying locations that are not associated with a dataset, modes supported:  PASS┃REDACT┃BLOCK.
     */
    queryAction?: pulumi.Input<string>;
}

export interface DatastoreBaselineSecurityPolicyUnsupportedQueriesCategory {
    /**
     * Default policy action for unsupported queries and objects, modes supported:  PASS┃REDACT┃BLOCK
     */
    queryAction: pulumi.Input<string>;
}

export interface DatastoreDatastoreSetting {
    /**
     * MongoDB deployment type, for now supports only mongodb+srv and mongodb deployment
     */
    deploymentType?: pulumi.Input<string>;
}

export interface DatastoreNetworkPolicy {
    /**
     * Allowed Ip Rules
     */
    allowedRules?: pulumi.Input<pulumi.Input<inputs.DatastoreNetworkPolicyAllowedRule>[]>;
    /**
     * Blocked Ips Rules
     */
    blockedRules?: pulumi.Input<pulumi.Input<inputs.DatastoreNetworkPolicyBlockedRule>[]>;
}

export interface DatastoreNetworkPolicyAllowedRule {
    /**
     * Defines IP addresses or CIDR ranges allowed to access the datastore
     */
    ipRanges?: pulumi.Input<pulumi.Input<inputs.DatastoreNetworkPolicyAllowedRuleIpRange>[]>;
    /**
     * custom description for allowed IP ranges
     */
    note?: pulumi.Input<string>;
}

export interface DatastoreNetworkPolicyAllowedRuleIpRange {
    /**
     * Range (IP or CIDR)
     */
    ipRange: pulumi.Input<string>;
}

export interface DatastoreNetworkPolicyBlockedRule {
    /**
     * Defines IP addresses or CIDR ranges allowed to access the datastore
     */
    ipRanges?: pulumi.Input<pulumi.Input<inputs.DatastoreNetworkPolicyBlockedRuleIpRange>[]>;
    /**
     * custom description for blocked IP ranges
     */
    note?: pulumi.Input<string>;
}

export interface DatastoreNetworkPolicyBlockedRuleIpRange {
    /**
     * Range (IP or CIDR)
     */
    ipRange: pulumi.Input<string>;
}

export interface DatastoreSatoriAuthSettings {
    /**
     * Root user credentials
     */
    credentials?: pulumi.Input<inputs.DatastoreSatoriAuthSettingsCredentials>;
    /**
     * Enables Satori Personal Access Token authentication for this data store. to be able using personal access token for authentication on this data store - data store temporary credentials must be enabled and personal access token feature should be enabled for the current account (see Account setting page in Satori platform). Defaults to `false`.
     */
    enablePersonalAccessToken?: pulumi.Input<boolean>;
    /**
     * Enables Satori Data Store authentication. Defaults to `false`.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface DatastoreSatoriAuthSettingsCredentials {
    password: pulumi.Input<string>;
    /**
     * Username of root user
     */
    username: pulumi.Input<string>;
}

export interface DirectoryGroupMember {
    /**
     * Data store type for member of type DB_ROLE, valid types are: SNOWFLAKE, REDSHIFT, BIGQUERY, POSTGRESQL, ATHENA, MSSQL, SYNAPSE
     */
    dataStoreType?: pulumi.Input<string>;
    /**
     * Member email available for types: USERNAME.
     */
    email?: pulumi.Input<string>;
    /**
     * Directory group ID for member of type DIRECTORY_GROUP.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Identity provider type for member of type IDP_GROUP, valid identity providers are: OKTA, AZURE, ONELOGIN
     */
    identityProvider?: pulumi.Input<string>;
    /**
     * Member name for types: USERNAME, IDP_GROUP and DB_ROLE.
     */
    name?: pulumi.Input<string>;
    /**
     * Member type, valid types are: USERNAME, IDP_GROUP, DB_ROLE, DIRECTORY_GROUP.
     */
    type: pulumi.Input<string>;
}

export interface MaskingProfileCondition {
    /**
     * Replacement, relevant for: REPLACE_CHAR, REPLACE_STRING.
     */
    replacement?: pulumi.Input<string>;
    /**
     * Tag.
     */
    tag: pulumi.Input<string>;
    /**
     * Truncate, relevant for: TRUNCATE.
     */
    truncate?: pulumi.Input<number>;
    /**
     * Type. Can be one of [TRUNCATE, REPLACE_CHAR, REPLACE_STRING, HASH, EMAIL_PREFIX, EMAIL_SUFFIX, EMAIL_FULL, EMAIL_HASH, CREDIT_CARD_PREFIX, CREDIT_CARD_FULL, CREDIT_CARD_HASH, IP_SUFFIX, IP_FULL, IP_HASH, DATE_YEAR_ONLY, DATE_1970_AGAIN, NO_ACTION, REDACT, NUMBER_ZERO, NUMBER_ROUND, ...]
     */
    type: pulumi.Input<string>;
}

export interface RequestAccessRuleApprover {
    /**
     * The ID of the approver entity, when type is `MANAGER` this field must not be set.
     */
    id?: pulumi.Input<string>;
    /**
     * Approver type, can be either `GROUP` (IdP Group alone) or `USER`
     */
    type: pulumi.Input<string>;
}

export interface RequestAccessRuleExpireIn {
    /**
     * Unit type for units field, possible values are: MINUTES, HOURS, DAYS, WEEKS, MONTHS, YEARS.
     */
    unitType: pulumi.Input<string>;
    /**
     * Number of units of unit_type.
     */
    units: pulumi.Input<number>;
}

export interface RequestAccessRuleIdentity {
    /**
     * Directory group ID for identity of type GROUP.
     * Can not be changed after creation.
     */
    groupId?: pulumi.Input<string>;
    /**
     * User/group name for identity types of USER and IDP_GROUP.
     * Can not be changed after creation.
     */
    name?: pulumi.Input<string>;
    /**
     * Identity type, valid types are: USER, DB_USER, IDP_GROUP, GROUP, DATABRICKS_GROUP, DATABRICKS_SERVICE_PRINCIPAL, SNOWFLAKE_ROLE, EVERYONE.
     * Can not be changed after creation.
     */
    type: pulumi.Input<string>;
}

export interface SecurityPolicyProfile {
    /**
     * Masking profile.
     */
    masking?: pulumi.Input<inputs.SecurityPolicyProfileMasking>;
    /**
     * Row level security profile
     */
    rowLevelSecurity?: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurity>;
}

export interface SecurityPolicyProfileMasking {
    /**
     * Is active.
     */
    active: pulumi.Input<boolean>;
    /**
     * Masking Rule.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.SecurityPolicyProfileMaskingRule>[]>;
}

export interface SecurityPolicyProfileMaskingRule {
    /**
     * Rule action.
     */
    action: pulumi.Input<inputs.SecurityPolicyProfileMaskingRuleAction>;
    /**
     * Is active rule.
     */
    active: pulumi.Input<boolean>;
    /**
     * Masking criteria.
     */
    criteria: pulumi.Input<inputs.SecurityPolicyProfileMaskingRuleCriteria>;
    /**
     * Rule description.
     */
    description: pulumi.Input<string>;
    /**
     * Rule id, has to be unique.
     */
    id: pulumi.Input<string>;
}

export interface SecurityPolicyProfileMaskingRuleAction {
    /**
     * The reference id to be applied as masking profile.
     */
    maskingProfileId: pulumi.Input<string>;
    /**
     * Rule type. Defaults to `APPLY_MASKING_PROFILE`.
     */
    type?: pulumi.Input<string>;
}

export interface SecurityPolicyProfileMaskingRuleCriteria {
    /**
     * Identity condition, for example IS_NOT, IS, etc.
     */
    condition: pulumi.Input<string>;
    /**
     * Identity to apply the rule for.
     */
    identity: pulumi.Input<inputs.SecurityPolicyProfileMaskingRuleCriteriaIdentity>;
}

export interface SecurityPolicyProfileMaskingRuleCriteriaIdentity {
    /**
     * Directory group ID for identity of type GROUP.
     * Can not be changed after creation.
     */
    groupId?: pulumi.Input<string>;
    /**
     * User/group name for identity types of USER and IDP_GROUP or a custom expression based on attributes of the identity for CEL identity type.
     * Can not be changed after creation.
     */
    name?: pulumi.Input<string>;
    /**
     * Identity type, valid types are: USER, DB_USER, IDP_GROUP, GROUP, DATABRICKS_GROUP, DATABRICKS_SERVICE_PRINCIPAL, SNOWFLAKE_ROLE, CEL, EVERYONE.
     * Can not be changed after creation.
     */
    type: pulumi.Input<string>;
}

export interface SecurityPolicyProfileRowLevelSecurity {
    /**
     * Row level security activation.
     */
    active: pulumi.Input<boolean>;
    /**
     * Row Level Security Mapping.
     */
    mappings?: pulumi.Input<pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityMapping>[]>;
    /**
     * Row Level Security Rule definition.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityRule>[]>;
}

export interface SecurityPolicyProfileRowLevelSecurityMapping {
    /**
     * A list of default values to be applied in this filter if there was no match. Values are dependent on their type and has to be homogeneous
     */
    defaults: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityMappingDefaults>;
    /**
     * Filter definition.
     */
    filter: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityMappingFilter>;
    /**
     * Filter name, has to be unique in this policy.
     */
    name: pulumi.Input<string>;
}

export interface SecurityPolicyProfileRowLevelSecurityMappingDefaults {
    /**
     * Default values type
     */
    type: pulumi.Input<string>;
    /**
     * List of values, when NO_VALUE or ALL_OTHER_VALUES are defined, the list has to be empty
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityPolicyProfileRowLevelSecurityMappingFilter {
    /**
     * Filter criteria.
     */
    criteria: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityMappingFilterCriteria>;
    /**
     * A list of values to be applied in this filter. Values are dependent on their type and has to be homogeneous
     */
    values: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityMappingFilterValues>;
}

export interface SecurityPolicyProfileRowLevelSecurityMappingFilterCriteria {
    /**
     * Identity condition, for example IS_NOT, IS, etc.
     */
    condition: pulumi.Input<string>;
    /**
     * Identity to apply the rule for.
     */
    identity: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityMappingFilterCriteriaIdentity>;
}

export interface SecurityPolicyProfileRowLevelSecurityMappingFilterCriteriaIdentity {
    /**
     * Directory group ID for identity of type GROUP.
     * Can not be changed after creation.
     */
    groupId?: pulumi.Input<string>;
    /**
     * User/group name for identity types of USER and IDP_GROUP or a custom expression based on attributes of the identity for CEL identity type.
     * Can not be changed after creation.
     */
    name?: pulumi.Input<string>;
    /**
     * Identity type, valid types are: USER, DB_USER, IDP_GROUP, GROUP, DATABRICKS_GROUP, DATABRICKS_SERVICE_PRINCIPAL, SNOWFLAKE_ROLE, CEL, EVERYONE.
     * Can not be changed after creation.
     */
    type: pulumi.Input<string>;
}

export interface SecurityPolicyProfileRowLevelSecurityMappingFilterValues {
    /**
     * Values type.
     */
    type: pulumi.Input<string>;
    /**
     * List of values, when ANY_VALUE or ALL_OTHER_VALUES are defined, the list has to be empty
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityPolicyProfileRowLevelSecurityRule {
    /**
     * Is active rule.
     */
    active: pulumi.Input<boolean>;
    /**
     * Rule description.
     */
    description: pulumi.Input<string>;
    /**
     * Rule filter.
     */
    filter: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityRuleFilter>;
    /**
     * Rule id, has to be unique.
     */
    id: pulumi.Input<string>;
}

export interface SecurityPolicyProfileRowLevelSecurityRuleFilter {
    /**
     * Describes if logic yaml contains complex configuration. Defaults to `true`.
     */
    advanced?: pulumi.Input<boolean>;
    /**
     * Datastore ID.
     */
    datastoreId: pulumi.Input<string>;
    /**
     * Location to to be included in the rule. The 'location_prefix' field has been deprecated. Please use the 'location' field instead.
     *
     * @deprecated Deprecated
     */
    locationPrefixes?: pulumi.Input<pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityRuleFilterLocationPrefix>[]>;
    /**
     * Location to be included in the rule.
     */
    locations?: pulumi.Input<pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityRuleFilterLocation>[]>;
    /**
     * Conditional rule, for more info see https://satoricyber.com/docs/security-policies/#setting-up-data-filtering.
     */
    logicYaml: pulumi.Input<string>;
}

export interface SecurityPolicyProfileRowLevelSecurityRuleFilterLocation {
    /**
     * Location for Athena data store.
     */
    athenaLocation?: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityRuleFilterLocationAthenaLocation>;
    /**
     * Location for MongoDB data store.
     */
    mongoLocation?: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMongoLocation>;
    /**
     * Location for MySql and MariaDB data stores.
     */
    mysqlLocation?: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMysqlLocation>;
    /**
     * Location for a relational data store.
     */
    relationalLocation?: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityRuleFilterLocationRelationalLocation>;
    /**
     * Location for S3 data store.
     */
    s3Location?: pulumi.Input<inputs.SecurityPolicyProfileRowLevelSecurityRuleFilterLocationS3Location>;
}

export interface SecurityPolicyProfileRowLevelSecurityRuleFilterLocationAthenaLocation {
    /**
     * Catalog name.
     */
    catalog: pulumi.Input<string>;
    /**
     * Database name.
     */
    db?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMongoLocation {
    /**
     * Collection name.
     */
    collection?: pulumi.Input<string>;
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
}

export interface SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMysqlLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface SecurityPolicyProfileRowLevelSecurityRuleFilterLocationPrefix {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Schema name.
     */
    schema?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface SecurityPolicyProfileRowLevelSecurityRuleFilterLocationRelationalLocation {
    /**
     * Database name.
     */
    db: pulumi.Input<string>;
    /**
     * Schema name.
     */
    schema?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table?: pulumi.Input<string>;
}

export interface SecurityPolicyProfileRowLevelSecurityRuleFilterLocationS3Location {
    /**
     * Bucket name.
     */
    bucket: pulumi.Input<string>;
    /**
     * Object Key name.
     */
    objectKey?: pulumi.Input<string>;
}

export interface SelfServiceAccessRuleExpireIn {
    /**
     * Unit type for units field, possible values are: MINUTES, HOURS, DAYS, WEEKS, MONTHS, YEARS.
     */
    unitType: pulumi.Input<string>;
    /**
     * Number of units of unit_type.
     */
    units: pulumi.Input<number>;
}

export interface SelfServiceAccessRuleIdentity {
    /**
     * Directory group ID for identity of type GROUP.
     * Can not be changed after creation.
     */
    groupId?: pulumi.Input<string>;
    /**
     * User/group name for identity types of USER and IDP_GROUP.
     * Can not be changed after creation.
     */
    name?: pulumi.Input<string>;
    /**
     * Identity type, valid types are: USER, DB_USER, IDP_GROUP, GROUP, DATABRICKS_GROUP, DATABRICKS_SERVICE_PRINCIPAL, SNOWFLAKE_ROLE, EVERYONE.
     * Can not be changed after creation.
     */
    type: pulumi.Input<string>;
}
