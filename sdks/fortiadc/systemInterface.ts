// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemInterface extends pulumi.CustomResource {
    /**
     * Get an existing SystemInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemInterfaceState, opts?: pulumi.CustomResourceOptions): SystemInterface {
        return new SystemInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/systemInterface:SystemInterface';

    /**
     * Returns true if the given object is an instance of SystemInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemInterface.__pulumiType;
    }

    public readonly aggregateAlgorithm!: pulumi.Output<string>;
    public readonly aggregateMode!: pulumi.Output<string>;
    public readonly allowaccess!: pulumi.Output<string>;
    public readonly dedicateToManagement!: pulumi.Output<string>;
    public readonly defaultGw!: pulumi.Output<string>;
    public readonly dhcpGateway!: pulumi.Output<string>;
    public readonly dhcpGwDistance!: pulumi.Output<string>;
    public readonly dhcpGwOverride!: pulumi.Output<string>;
    public readonly dhcpIpOverlap!: pulumi.Output<string>;
    public readonly discRetryTimeout!: pulumi.Output<string>;
    public readonly dnsServerOverride!: pulumi.Output<string>;
    public readonly floating!: pulumi.Output<string>;
    public readonly floatingIp!: pulumi.Output<string>;
    public readonly floatingIp6!: pulumi.Output<string>;
    public readonly interface!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly ip6!: pulumi.Output<string>;
    public readonly mkey!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly mtu!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly redundantMember!: pulumi.Output<string>;
    public readonly secondaryIp!: pulumi.Output<string>;
    public readonly speed!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly trafficGroup!: pulumi.Output<string>;
    public readonly trustIp!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string>;
    public readonly vlanid!: pulumi.Output<string>;
    public readonly wccp!: pulumi.Output<string>;

    /**
     * Create a SystemInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemInterfaceArgs | SystemInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemInterfaceState | undefined;
            resourceInputs["aggregateAlgorithm"] = state ? state.aggregateAlgorithm : undefined;
            resourceInputs["aggregateMode"] = state ? state.aggregateMode : undefined;
            resourceInputs["allowaccess"] = state ? state.allowaccess : undefined;
            resourceInputs["dedicateToManagement"] = state ? state.dedicateToManagement : undefined;
            resourceInputs["defaultGw"] = state ? state.defaultGw : undefined;
            resourceInputs["dhcpGateway"] = state ? state.dhcpGateway : undefined;
            resourceInputs["dhcpGwDistance"] = state ? state.dhcpGwDistance : undefined;
            resourceInputs["dhcpGwOverride"] = state ? state.dhcpGwOverride : undefined;
            resourceInputs["dhcpIpOverlap"] = state ? state.dhcpIpOverlap : undefined;
            resourceInputs["discRetryTimeout"] = state ? state.discRetryTimeout : undefined;
            resourceInputs["dnsServerOverride"] = state ? state.dnsServerOverride : undefined;
            resourceInputs["floating"] = state ? state.floating : undefined;
            resourceInputs["floatingIp"] = state ? state.floatingIp : undefined;
            resourceInputs["floatingIp6"] = state ? state.floatingIp6 : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ip6"] = state ? state.ip6 : undefined;
            resourceInputs["mkey"] = state ? state.mkey : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["redundantMember"] = state ? state.redundantMember : undefined;
            resourceInputs["secondaryIp"] = state ? state.secondaryIp : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["trafficGroup"] = state ? state.trafficGroup : undefined;
            resourceInputs["trustIp"] = state ? state.trustIp : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
            resourceInputs["vlanid"] = state ? state.vlanid : undefined;
            resourceInputs["wccp"] = state ? state.wccp : undefined;
        } else {
            const args = argsOrState as SystemInterfaceArgs | undefined;
            if ((!args || args.mkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mkey'");
            }
            resourceInputs["aggregateAlgorithm"] = args ? args.aggregateAlgorithm : undefined;
            resourceInputs["aggregateMode"] = args ? args.aggregateMode : undefined;
            resourceInputs["allowaccess"] = args ? args.allowaccess : undefined;
            resourceInputs["dedicateToManagement"] = args ? args.dedicateToManagement : undefined;
            resourceInputs["defaultGw"] = args ? args.defaultGw : undefined;
            resourceInputs["dhcpGateway"] = args ? args.dhcpGateway : undefined;
            resourceInputs["dhcpGwDistance"] = args ? args.dhcpGwDistance : undefined;
            resourceInputs["dhcpGwOverride"] = args ? args.dhcpGwOverride : undefined;
            resourceInputs["dhcpIpOverlap"] = args ? args.dhcpIpOverlap : undefined;
            resourceInputs["discRetryTimeout"] = args ? args.discRetryTimeout : undefined;
            resourceInputs["dnsServerOverride"] = args ? args.dnsServerOverride : undefined;
            resourceInputs["floating"] = args ? args.floating : undefined;
            resourceInputs["floatingIp"] = args ? args.floatingIp : undefined;
            resourceInputs["floatingIp6"] = args ? args.floatingIp6 : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ip6"] = args ? args.ip6 : undefined;
            resourceInputs["mkey"] = args ? args.mkey : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["redundantMember"] = args ? args.redundantMember : undefined;
            resourceInputs["secondaryIp"] = args ? args.secondaryIp : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["trafficGroup"] = args ? args.trafficGroup : undefined;
            resourceInputs["trustIp"] = args ? args.trustIp : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
            resourceInputs["vlanid"] = args ? args.vlanid : undefined;
            resourceInputs["wccp"] = args ? args.wccp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemInterface resources.
 */
export interface SystemInterfaceState {
    aggregateAlgorithm?: pulumi.Input<string>;
    aggregateMode?: pulumi.Input<string>;
    allowaccess?: pulumi.Input<string>;
    dedicateToManagement?: pulumi.Input<string>;
    defaultGw?: pulumi.Input<string>;
    dhcpGateway?: pulumi.Input<string>;
    dhcpGwDistance?: pulumi.Input<string>;
    dhcpGwOverride?: pulumi.Input<string>;
    dhcpIpOverlap?: pulumi.Input<string>;
    discRetryTimeout?: pulumi.Input<string>;
    dnsServerOverride?: pulumi.Input<string>;
    floating?: pulumi.Input<string>;
    floatingIp?: pulumi.Input<string>;
    floatingIp6?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
    mkey?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    redundantMember?: pulumi.Input<string>;
    secondaryIp?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trafficGroup?: pulumi.Input<string>;
    trustIp?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    vlanid?: pulumi.Input<string>;
    wccp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemInterface resource.
 */
export interface SystemInterfaceArgs {
    aggregateAlgorithm?: pulumi.Input<string>;
    aggregateMode?: pulumi.Input<string>;
    allowaccess?: pulumi.Input<string>;
    dedicateToManagement?: pulumi.Input<string>;
    defaultGw?: pulumi.Input<string>;
    dhcpGateway?: pulumi.Input<string>;
    dhcpGwDistance?: pulumi.Input<string>;
    dhcpGwOverride?: pulumi.Input<string>;
    dhcpIpOverlap?: pulumi.Input<string>;
    discRetryTimeout?: pulumi.Input<string>;
    dnsServerOverride?: pulumi.Input<string>;
    floating?: pulumi.Input<string>;
    floatingIp?: pulumi.Input<string>;
    floatingIp6?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    redundantMember?: pulumi.Input<string>;
    secondaryIp?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trafficGroup?: pulumi.Input<string>;
    trustIp?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    vlanid?: pulumi.Input<string>;
    wccp?: pulumi.Input<string>;
}
