// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemGlobal extends pulumi.CustomResource {
    /**
     * Get an existing SystemGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemGlobalState, opts?: pulumi.CustomResourceOptions): SystemGlobal {
        return new SystemGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/systemGlobal:SystemGlobal';

    /**
     * Returns true if the given object is an instance of SystemGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemGlobal.__pulumiType;
    }

    public readonly adminIdleTimeout!: pulumi.Output<string>;
    public readonly configSyncEnable!: pulumi.Output<string>;
    public readonly configSyncPort!: pulumi.Output<string>;
    public readonly defaultIntermediateCaGroup!: pulumi.Output<string>;
    public readonly guiDeviceLatitude!: pulumi.Output<string>;
    public readonly guiDeviceLongtitude!: pulumi.Output<string>;
    public readonly guiLog!: pulumi.Output<string>;
    public readonly guiRouter!: pulumi.Output<string>;
    public readonly guiSystem!: pulumi.Output<string>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly httpPort!: pulumi.Output<string>;
    public readonly httpsPort!: pulumi.Output<string>;
    public readonly httpsRedirect!: pulumi.Output<string>;
    public readonly httpsServerCert!: pulumi.Output<string>;
    public readonly ipPrimary!: pulumi.Output<string>;
    public readonly ipSecond!: pulumi.Output<string>;
    public readonly preLoginBanner!: pulumi.Output<string>;
    public readonly sshPort!: pulumi.Output<string>;
    public readonly sysGlobalLanguage!: pulumi.Output<string>;
    public readonly telnetPort!: pulumi.Output<string>;
    public readonly useDefaultHostname!: pulumi.Output<string>;
    public readonly vdomAdmin!: pulumi.Output<string>;
    public readonly vdomMode!: pulumi.Output<string>;

    /**
     * Create a SystemGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemGlobalArgs | SystemGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemGlobalState | undefined;
            resourceInputs["adminIdleTimeout"] = state ? state.adminIdleTimeout : undefined;
            resourceInputs["configSyncEnable"] = state ? state.configSyncEnable : undefined;
            resourceInputs["configSyncPort"] = state ? state.configSyncPort : undefined;
            resourceInputs["defaultIntermediateCaGroup"] = state ? state.defaultIntermediateCaGroup : undefined;
            resourceInputs["guiDeviceLatitude"] = state ? state.guiDeviceLatitude : undefined;
            resourceInputs["guiDeviceLongtitude"] = state ? state.guiDeviceLongtitude : undefined;
            resourceInputs["guiLog"] = state ? state.guiLog : undefined;
            resourceInputs["guiRouter"] = state ? state.guiRouter : undefined;
            resourceInputs["guiSystem"] = state ? state.guiSystem : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["httpPort"] = state ? state.httpPort : undefined;
            resourceInputs["httpsPort"] = state ? state.httpsPort : undefined;
            resourceInputs["httpsRedirect"] = state ? state.httpsRedirect : undefined;
            resourceInputs["httpsServerCert"] = state ? state.httpsServerCert : undefined;
            resourceInputs["ipPrimary"] = state ? state.ipPrimary : undefined;
            resourceInputs["ipSecond"] = state ? state.ipSecond : undefined;
            resourceInputs["preLoginBanner"] = state ? state.preLoginBanner : undefined;
            resourceInputs["sshPort"] = state ? state.sshPort : undefined;
            resourceInputs["sysGlobalLanguage"] = state ? state.sysGlobalLanguage : undefined;
            resourceInputs["telnetPort"] = state ? state.telnetPort : undefined;
            resourceInputs["useDefaultHostname"] = state ? state.useDefaultHostname : undefined;
            resourceInputs["vdomAdmin"] = state ? state.vdomAdmin : undefined;
            resourceInputs["vdomMode"] = state ? state.vdomMode : undefined;
        } else {
            const args = argsOrState as SystemGlobalArgs | undefined;
            resourceInputs["adminIdleTimeout"] = args ? args.adminIdleTimeout : undefined;
            resourceInputs["configSyncEnable"] = args ? args.configSyncEnable : undefined;
            resourceInputs["configSyncPort"] = args ? args.configSyncPort : undefined;
            resourceInputs["defaultIntermediateCaGroup"] = args ? args.defaultIntermediateCaGroup : undefined;
            resourceInputs["guiDeviceLatitude"] = args ? args.guiDeviceLatitude : undefined;
            resourceInputs["guiDeviceLongtitude"] = args ? args.guiDeviceLongtitude : undefined;
            resourceInputs["guiLog"] = args ? args.guiLog : undefined;
            resourceInputs["guiRouter"] = args ? args.guiRouter : undefined;
            resourceInputs["guiSystem"] = args ? args.guiSystem : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["httpPort"] = args ? args.httpPort : undefined;
            resourceInputs["httpsPort"] = args ? args.httpsPort : undefined;
            resourceInputs["httpsRedirect"] = args ? args.httpsRedirect : undefined;
            resourceInputs["httpsServerCert"] = args ? args.httpsServerCert : undefined;
            resourceInputs["ipPrimary"] = args ? args.ipPrimary : undefined;
            resourceInputs["ipSecond"] = args ? args.ipSecond : undefined;
            resourceInputs["preLoginBanner"] = args ? args.preLoginBanner : undefined;
            resourceInputs["sshPort"] = args ? args.sshPort : undefined;
            resourceInputs["sysGlobalLanguage"] = args ? args.sysGlobalLanguage : undefined;
            resourceInputs["telnetPort"] = args ? args.telnetPort : undefined;
            resourceInputs["useDefaultHostname"] = args ? args.useDefaultHostname : undefined;
            resourceInputs["vdomAdmin"] = args ? args.vdomAdmin : undefined;
            resourceInputs["vdomMode"] = args ? args.vdomMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemGlobal resources.
 */
export interface SystemGlobalState {
    adminIdleTimeout?: pulumi.Input<string>;
    configSyncEnable?: pulumi.Input<string>;
    configSyncPort?: pulumi.Input<string>;
    defaultIntermediateCaGroup?: pulumi.Input<string>;
    guiDeviceLatitude?: pulumi.Input<string>;
    guiDeviceLongtitude?: pulumi.Input<string>;
    guiLog?: pulumi.Input<string>;
    guiRouter?: pulumi.Input<string>;
    guiSystem?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    httpPort?: pulumi.Input<string>;
    httpsPort?: pulumi.Input<string>;
    httpsRedirect?: pulumi.Input<string>;
    httpsServerCert?: pulumi.Input<string>;
    ipPrimary?: pulumi.Input<string>;
    ipSecond?: pulumi.Input<string>;
    preLoginBanner?: pulumi.Input<string>;
    sshPort?: pulumi.Input<string>;
    sysGlobalLanguage?: pulumi.Input<string>;
    telnetPort?: pulumi.Input<string>;
    useDefaultHostname?: pulumi.Input<string>;
    vdomAdmin?: pulumi.Input<string>;
    vdomMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemGlobal resource.
 */
export interface SystemGlobalArgs {
    adminIdleTimeout?: pulumi.Input<string>;
    configSyncEnable?: pulumi.Input<string>;
    configSyncPort?: pulumi.Input<string>;
    defaultIntermediateCaGroup?: pulumi.Input<string>;
    guiDeviceLatitude?: pulumi.Input<string>;
    guiDeviceLongtitude?: pulumi.Input<string>;
    guiLog?: pulumi.Input<string>;
    guiRouter?: pulumi.Input<string>;
    guiSystem?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    httpPort?: pulumi.Input<string>;
    httpsPort?: pulumi.Input<string>;
    httpsRedirect?: pulumi.Input<string>;
    httpsServerCert?: pulumi.Input<string>;
    ipPrimary?: pulumi.Input<string>;
    ipSecond?: pulumi.Input<string>;
    preLoginBanner?: pulumi.Input<string>;
    sshPort?: pulumi.Input<string>;
    sysGlobalLanguage?: pulumi.Input<string>;
    telnetPort?: pulumi.Input<string>;
    useDefaultHostname?: pulumi.Input<string>;
    vdomAdmin?: pulumi.Input<string>;
    vdomMode?: pulumi.Input<string>;
}
