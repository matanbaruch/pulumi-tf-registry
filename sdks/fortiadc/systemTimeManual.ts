// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemTimeManual extends pulumi.CustomResource {
    /**
     * Get an existing SystemTimeManual resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemTimeManualState, opts?: pulumi.CustomResourceOptions): SystemTimeManual {
        return new SystemTimeManual(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/systemTimeManual:SystemTimeManual';

    /**
     * Returns true if the given object is an instance of SystemTimeManual.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemTimeManual {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemTimeManual.__pulumiType;
    }

    public readonly dst!: pulumi.Output<string>;
    public readonly hour!: pulumi.Output<number>;
    public readonly mday!: pulumi.Output<number>;
    public readonly minute!: pulumi.Output<number>;
    public readonly month!: pulumi.Output<number>;
    public readonly ntpserver!: pulumi.Output<string>;
    public readonly ntpsync!: pulumi.Output<string>;
    public readonly second!: pulumi.Output<number>;
    public readonly syncinterval!: pulumi.Output<string>;
    public readonly tz!: pulumi.Output<string>;
    public readonly year!: pulumi.Output<number>;

    /**
     * Create a SystemTimeManual resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemTimeManualArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemTimeManualArgs | SystemTimeManualState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemTimeManualState | undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["hour"] = state ? state.hour : undefined;
            resourceInputs["mday"] = state ? state.mday : undefined;
            resourceInputs["minute"] = state ? state.minute : undefined;
            resourceInputs["month"] = state ? state.month : undefined;
            resourceInputs["ntpserver"] = state ? state.ntpserver : undefined;
            resourceInputs["ntpsync"] = state ? state.ntpsync : undefined;
            resourceInputs["second"] = state ? state.second : undefined;
            resourceInputs["syncinterval"] = state ? state.syncinterval : undefined;
            resourceInputs["tz"] = state ? state.tz : undefined;
            resourceInputs["year"] = state ? state.year : undefined;
        } else {
            const args = argsOrState as SystemTimeManualArgs | undefined;
            if ((!args || args.dst === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dst'");
            }
            if ((!args || args.ntpsync === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ntpsync'");
            }
            if ((!args || args.tz === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tz'");
            }
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["hour"] = args ? args.hour : undefined;
            resourceInputs["mday"] = args ? args.mday : undefined;
            resourceInputs["minute"] = args ? args.minute : undefined;
            resourceInputs["month"] = args ? args.month : undefined;
            resourceInputs["ntpserver"] = args ? args.ntpserver : undefined;
            resourceInputs["ntpsync"] = args ? args.ntpsync : undefined;
            resourceInputs["second"] = args ? args.second : undefined;
            resourceInputs["syncinterval"] = args ? args.syncinterval : undefined;
            resourceInputs["tz"] = args ? args.tz : undefined;
            resourceInputs["year"] = args ? args.year : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemTimeManual.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemTimeManual resources.
 */
export interface SystemTimeManualState {
    dst?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    mday?: pulumi.Input<number>;
    minute?: pulumi.Input<number>;
    month?: pulumi.Input<number>;
    ntpserver?: pulumi.Input<string>;
    ntpsync?: pulumi.Input<string>;
    second?: pulumi.Input<number>;
    syncinterval?: pulumi.Input<string>;
    tz?: pulumi.Input<string>;
    year?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SystemTimeManual resource.
 */
export interface SystemTimeManualArgs {
    dst: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    mday?: pulumi.Input<number>;
    minute?: pulumi.Input<number>;
    month?: pulumi.Input<number>;
    ntpserver?: pulumi.Input<string>;
    ntpsync: pulumi.Input<string>;
    second?: pulumi.Input<number>;
    syncinterval?: pulumi.Input<string>;
    tz: pulumi.Input<string>;
    year?: pulumi.Input<number>;
}
