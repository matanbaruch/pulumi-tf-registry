// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLoadBalanceRealServerSslProfile(args: GetLoadBalanceRealServerSslProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadBalanceRealServerSslProfileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortiadc:index/getLoadBalanceRealServerSslProfile:getLoadBalanceRealServerSslProfile", {
        "id": args.id,
        "mkey": args.mkey,
        "vdom": args.vdom,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoadBalanceRealServerSslProfile.
 */
export interface GetLoadBalanceRealServerSslProfileArgs {
    id?: string;
    mkey: string;
    vdom?: string;
}

/**
 * A collection of values returned by getLoadBalanceRealServerSslProfile.
 */
export interface GetLoadBalanceRealServerSslProfileResult {
    readonly allowSslVersions: string;
    readonly certVerify: string;
    readonly ciphersTlsv13: string;
    readonly customizedSslCiphers: string;
    readonly customizedSslCiphersFlag: string;
    readonly id: string;
    readonly localCert: string;
    readonly mkey: string;
    readonly newSslCiphersLong: string;
    readonly renegotiatePeriod: string;
    readonly renegotiateSize: string;
    readonly renegotiation: string;
    readonly renegotiationDenyAction: string;
    readonly rfc7919Comply: string;
    readonly secureRenegotiation: string;
    readonly serverOcspStapling: string;
    readonly sessionReuseFlag: string;
    readonly sessionReuseLimit: string;
    readonly sni: string;
    readonly sniForwardFlag: string;
    readonly ssl: string;
    readonly supportedGroups: string;
    readonly tlsTicketFlag: string;
    readonly vdom?: string;
}
export function getLoadBalanceRealServerSslProfileOutput(args: GetLoadBalanceRealServerSslProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadBalanceRealServerSslProfileResult> {
    return pulumi.output(args).apply((a: any) => getLoadBalanceRealServerSslProfile(a, opts))
}

/**
 * A collection of arguments for invoking getLoadBalanceRealServerSslProfile.
 */
export interface GetLoadBalanceRealServerSslProfileOutputArgs {
    id?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}
