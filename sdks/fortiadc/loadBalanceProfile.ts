// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadBalanceProfile extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalanceProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalanceProfileState, opts?: pulumi.CustomResourceOptions): LoadBalanceProfile {
        return new LoadBalanceProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/loadBalanceProfile:LoadBalanceProfile';

    /**
     * Returns true if the given object is an instance of LoadBalanceProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalanceProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalanceProfile.__pulumiType;
    }

    public readonly allowSslVersions!: pulumi.Output<string>;
    public readonly certVerify!: pulumi.Output<string>;
    public readonly clientAddress!: pulumi.Output<string>;
    public readonly clientKeepalive!: pulumi.Output<string>;
    public readonly clientProtocol!: pulumi.Output<string>;
    public readonly clientSniRequired!: pulumi.Output<string>;
    public readonly clientSsl!: pulumi.Output<string>;
    public readonly clientTimeout!: pulumi.Output<string>;
    public readonly compression!: pulumi.Output<string>;
    public readonly connectTimeout!: pulumi.Output<string>;
    public readonly customizedSslCiphers!: pulumi.Output<string>;
    public readonly customizedSslCiphersFlag!: pulumi.Output<string>;
    public readonly decompression!: pulumi.Output<string>;
    public readonly deployMode!: pulumi.Output<string>;
    public readonly dnsAuthenticateFlag!: pulumi.Output<string>;
    public readonly dnsCacheAgeoutTime!: pulumi.Output<string>;
    public readonly dnsCacheEntrySize!: pulumi.Output<string>;
    public readonly dnsCacheFlag!: pulumi.Output<string>;
    public readonly dnsCacheResponseType!: pulumi.Output<string>;
    public readonly dnsCacheSize!: pulumi.Output<string>;
    public readonly dnsMalformQueryAction!: pulumi.Output<string>;
    public readonly dnsMaxQueryLength!: pulumi.Output<string>;
    public readonly dynamicAuth!: pulumi.Output<string>;
    public readonly dynamicAuthPort!: pulumi.Output<string>;
    public readonly failedClientStr!: pulumi.Output<string>;
    public readonly failedClientType!: pulumi.Output<string>;
    public readonly failedServerStr!: pulumi.Output<string>;
    public readonly failedServerType!: pulumi.Output<string>;
    public readonly forwardClientCertificate!: pulumi.Output<string>;
    public readonly forwardClientCertificateHeader!: pulumi.Output<string>;
    public readonly geoipList!: pulumi.Output<string>;
    public readonly geoipRedirect!: pulumi.Output<string>;
    public readonly http2Profile!: pulumi.Output<string>;
    public readonly httpKeepaliveTimeout!: pulumi.Output<string>;
    public readonly httpMode!: pulumi.Output<string>;
    public readonly httpRequestTimeout!: pulumi.Output<string>;
    public readonly httpSendTimeout!: pulumi.Output<string>;
    public readonly httpXForwardedFor!: pulumi.Output<string>;
    public readonly httpXForwardedForHeader!: pulumi.Output<string>;
    public readonly idleTime!: pulumi.Output<string>;
    public readonly idleTimeout!: pulumi.Output<string>;
    public readonly insertClientIp!: pulumi.Output<string>;
    public readonly intermediateCaGroup!: pulumi.Output<string>;
    public readonly ipReputation!: pulumi.Output<string>;
    public readonly ipReputationRedirect!: pulumi.Output<string>;
    public readonly lengthIndicatorShift!: pulumi.Output<string>;
    public readonly lengthIndicatorSize!: pulumi.Output<string>;
    public readonly lengthIndicatorType!: pulumi.Output<string>;
    public readonly localCert!: pulumi.Output<string>;
    public readonly localCertGroup!: pulumi.Output<string>;
    public readonly maxHeaderSize!: pulumi.Output<string>;
    public readonly maxHttpHeaders!: pulumi.Output<string>;
    public readonly mediaAddress!: pulumi.Output<string>;
    public readonly mkey!: pulumi.Output<string>;
    public readonly msgEncodeType!: pulumi.Output<string>;
    public readonly mysqlMode!: pulumi.Output<string>;
    public readonly newSslCiphersLong!: pulumi.Output<string>;
    public readonly optHeaderLength!: pulumi.Output<string>;
    public readonly optTrailerHex!: pulumi.Output<string>;
    public readonly originHost!: pulumi.Output<string>;
    public readonly originRealm!: pulumi.Output<string>;
    public readonly productName!: pulumi.Output<string>;
    public readonly queueTimeout!: pulumi.Output<string>;
    public readonly ramCaching!: pulumi.Output<string>;
    public readonly responseHalfClosedRequest!: pulumi.Output<string>;
    public readonly securityMode!: pulumi.Output<string>;
    public readonly serverAge!: pulumi.Output<string>;
    public readonly serverClosePropagation!: pulumi.Output<string>;
    public readonly serverKeepalive!: pulumi.Output<string>;
    public readonly serverKeepaliveTimeout!: pulumi.Output<string>;
    public readonly serverMaxSize!: pulumi.Output<string>;
    public readonly serverProtocol!: pulumi.Output<string>;
    public readonly serverTimeout!: pulumi.Output<string>;
    public readonly sipDlgTimeout!: pulumi.Output<string>;
    public readonly sipMaxSize!: pulumi.Output<string>;
    public readonly smtpDisableCommand!: pulumi.Output<string>;
    public readonly smtpDisableCommandStatus!: pulumi.Output<string>;
    public readonly smtpDomainName!: pulumi.Output<string>;
    public readonly sourcePort!: pulumi.Output<string>;
    public readonly ssl!: pulumi.Output<string>;
    public readonly sslAlgorithm!: pulumi.Output<string>;
    public readonly sslCiphers!: pulumi.Output<string>;
    public readonly sslProxy!: pulumi.Output<string>;
    public readonly starttlsActiveMode!: pulumi.Output<string>;
    public readonly stateless!: pulumi.Output<string>;
    public readonly timeoutIpSession!: pulumi.Output<string>;
    public readonly timeoutRadiusSession!: pulumi.Output<string>;
    public readonly timeoutTcpSession!: pulumi.Output<string>;
    public readonly timeoutTcpSessionAfterFin!: pulumi.Output<string>;
    public readonly timeoutUdpSession!: pulumi.Output<string>;
    public readonly tuneBufsize!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly useTlsTickets!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string | undefined>;
    public readonly vendorId!: pulumi.Output<string>;
    public readonly whitelist!: pulumi.Output<string>;

    /**
     * Create a LoadBalanceProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalanceProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalanceProfileArgs | LoadBalanceProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalanceProfileState | undefined;
            resourceInputs["allowSslVersions"] = state ? state.allowSslVersions : undefined;
            resourceInputs["certVerify"] = state ? state.certVerify : undefined;
            resourceInputs["clientAddress"] = state ? state.clientAddress : undefined;
            resourceInputs["clientKeepalive"] = state ? state.clientKeepalive : undefined;
            resourceInputs["clientProtocol"] = state ? state.clientProtocol : undefined;
            resourceInputs["clientSniRequired"] = state ? state.clientSniRequired : undefined;
            resourceInputs["clientSsl"] = state ? state.clientSsl : undefined;
            resourceInputs["clientTimeout"] = state ? state.clientTimeout : undefined;
            resourceInputs["compression"] = state ? state.compression : undefined;
            resourceInputs["connectTimeout"] = state ? state.connectTimeout : undefined;
            resourceInputs["customizedSslCiphers"] = state ? state.customizedSslCiphers : undefined;
            resourceInputs["customizedSslCiphersFlag"] = state ? state.customizedSslCiphersFlag : undefined;
            resourceInputs["decompression"] = state ? state.decompression : undefined;
            resourceInputs["deployMode"] = state ? state.deployMode : undefined;
            resourceInputs["dnsAuthenticateFlag"] = state ? state.dnsAuthenticateFlag : undefined;
            resourceInputs["dnsCacheAgeoutTime"] = state ? state.dnsCacheAgeoutTime : undefined;
            resourceInputs["dnsCacheEntrySize"] = state ? state.dnsCacheEntrySize : undefined;
            resourceInputs["dnsCacheFlag"] = state ? state.dnsCacheFlag : undefined;
            resourceInputs["dnsCacheResponseType"] = state ? state.dnsCacheResponseType : undefined;
            resourceInputs["dnsCacheSize"] = state ? state.dnsCacheSize : undefined;
            resourceInputs["dnsMalformQueryAction"] = state ? state.dnsMalformQueryAction : undefined;
            resourceInputs["dnsMaxQueryLength"] = state ? state.dnsMaxQueryLength : undefined;
            resourceInputs["dynamicAuth"] = state ? state.dynamicAuth : undefined;
            resourceInputs["dynamicAuthPort"] = state ? state.dynamicAuthPort : undefined;
            resourceInputs["failedClientStr"] = state ? state.failedClientStr : undefined;
            resourceInputs["failedClientType"] = state ? state.failedClientType : undefined;
            resourceInputs["failedServerStr"] = state ? state.failedServerStr : undefined;
            resourceInputs["failedServerType"] = state ? state.failedServerType : undefined;
            resourceInputs["forwardClientCertificate"] = state ? state.forwardClientCertificate : undefined;
            resourceInputs["forwardClientCertificateHeader"] = state ? state.forwardClientCertificateHeader : undefined;
            resourceInputs["geoipList"] = state ? state.geoipList : undefined;
            resourceInputs["geoipRedirect"] = state ? state.geoipRedirect : undefined;
            resourceInputs["http2Profile"] = state ? state.http2Profile : undefined;
            resourceInputs["httpKeepaliveTimeout"] = state ? state.httpKeepaliveTimeout : undefined;
            resourceInputs["httpMode"] = state ? state.httpMode : undefined;
            resourceInputs["httpRequestTimeout"] = state ? state.httpRequestTimeout : undefined;
            resourceInputs["httpSendTimeout"] = state ? state.httpSendTimeout : undefined;
            resourceInputs["httpXForwardedFor"] = state ? state.httpXForwardedFor : undefined;
            resourceInputs["httpXForwardedForHeader"] = state ? state.httpXForwardedForHeader : undefined;
            resourceInputs["idleTime"] = state ? state.idleTime : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["insertClientIp"] = state ? state.insertClientIp : undefined;
            resourceInputs["intermediateCaGroup"] = state ? state.intermediateCaGroup : undefined;
            resourceInputs["ipReputation"] = state ? state.ipReputation : undefined;
            resourceInputs["ipReputationRedirect"] = state ? state.ipReputationRedirect : undefined;
            resourceInputs["lengthIndicatorShift"] = state ? state.lengthIndicatorShift : undefined;
            resourceInputs["lengthIndicatorSize"] = state ? state.lengthIndicatorSize : undefined;
            resourceInputs["lengthIndicatorType"] = state ? state.lengthIndicatorType : undefined;
            resourceInputs["localCert"] = state ? state.localCert : undefined;
            resourceInputs["localCertGroup"] = state ? state.localCertGroup : undefined;
            resourceInputs["maxHeaderSize"] = state ? state.maxHeaderSize : undefined;
            resourceInputs["maxHttpHeaders"] = state ? state.maxHttpHeaders : undefined;
            resourceInputs["mediaAddress"] = state ? state.mediaAddress : undefined;
            resourceInputs["mkey"] = state ? state.mkey : undefined;
            resourceInputs["msgEncodeType"] = state ? state.msgEncodeType : undefined;
            resourceInputs["mysqlMode"] = state ? state.mysqlMode : undefined;
            resourceInputs["newSslCiphersLong"] = state ? state.newSslCiphersLong : undefined;
            resourceInputs["optHeaderLength"] = state ? state.optHeaderLength : undefined;
            resourceInputs["optTrailerHex"] = state ? state.optTrailerHex : undefined;
            resourceInputs["originHost"] = state ? state.originHost : undefined;
            resourceInputs["originRealm"] = state ? state.originRealm : undefined;
            resourceInputs["productName"] = state ? state.productName : undefined;
            resourceInputs["queueTimeout"] = state ? state.queueTimeout : undefined;
            resourceInputs["ramCaching"] = state ? state.ramCaching : undefined;
            resourceInputs["responseHalfClosedRequest"] = state ? state.responseHalfClosedRequest : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["serverAge"] = state ? state.serverAge : undefined;
            resourceInputs["serverClosePropagation"] = state ? state.serverClosePropagation : undefined;
            resourceInputs["serverKeepalive"] = state ? state.serverKeepalive : undefined;
            resourceInputs["serverKeepaliveTimeout"] = state ? state.serverKeepaliveTimeout : undefined;
            resourceInputs["serverMaxSize"] = state ? state.serverMaxSize : undefined;
            resourceInputs["serverProtocol"] = state ? state.serverProtocol : undefined;
            resourceInputs["serverTimeout"] = state ? state.serverTimeout : undefined;
            resourceInputs["sipDlgTimeout"] = state ? state.sipDlgTimeout : undefined;
            resourceInputs["sipMaxSize"] = state ? state.sipMaxSize : undefined;
            resourceInputs["smtpDisableCommand"] = state ? state.smtpDisableCommand : undefined;
            resourceInputs["smtpDisableCommandStatus"] = state ? state.smtpDisableCommandStatus : undefined;
            resourceInputs["smtpDomainName"] = state ? state.smtpDomainName : undefined;
            resourceInputs["sourcePort"] = state ? state.sourcePort : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["sslAlgorithm"] = state ? state.sslAlgorithm : undefined;
            resourceInputs["sslCiphers"] = state ? state.sslCiphers : undefined;
            resourceInputs["sslProxy"] = state ? state.sslProxy : undefined;
            resourceInputs["starttlsActiveMode"] = state ? state.starttlsActiveMode : undefined;
            resourceInputs["stateless"] = state ? state.stateless : undefined;
            resourceInputs["timeoutIpSession"] = state ? state.timeoutIpSession : undefined;
            resourceInputs["timeoutRadiusSession"] = state ? state.timeoutRadiusSession : undefined;
            resourceInputs["timeoutTcpSession"] = state ? state.timeoutTcpSession : undefined;
            resourceInputs["timeoutTcpSessionAfterFin"] = state ? state.timeoutTcpSessionAfterFin : undefined;
            resourceInputs["timeoutUdpSession"] = state ? state.timeoutUdpSession : undefined;
            resourceInputs["tuneBufsize"] = state ? state.tuneBufsize : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useTlsTickets"] = state ? state.useTlsTickets : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
            resourceInputs["vendorId"] = state ? state.vendorId : undefined;
            resourceInputs["whitelist"] = state ? state.whitelist : undefined;
        } else {
            const args = argsOrState as LoadBalanceProfileArgs | undefined;
            if ((!args || args.mkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mkey'");
            }
            resourceInputs["allowSslVersions"] = args ? args.allowSslVersions : undefined;
            resourceInputs["certVerify"] = args ? args.certVerify : undefined;
            resourceInputs["clientAddress"] = args ? args.clientAddress : undefined;
            resourceInputs["clientKeepalive"] = args ? args.clientKeepalive : undefined;
            resourceInputs["clientProtocol"] = args ? args.clientProtocol : undefined;
            resourceInputs["clientSniRequired"] = args ? args.clientSniRequired : undefined;
            resourceInputs["clientSsl"] = args ? args.clientSsl : undefined;
            resourceInputs["clientTimeout"] = args ? args.clientTimeout : undefined;
            resourceInputs["compression"] = args ? args.compression : undefined;
            resourceInputs["connectTimeout"] = args ? args.connectTimeout : undefined;
            resourceInputs["customizedSslCiphers"] = args ? args.customizedSslCiphers : undefined;
            resourceInputs["customizedSslCiphersFlag"] = args ? args.customizedSslCiphersFlag : undefined;
            resourceInputs["decompression"] = args ? args.decompression : undefined;
            resourceInputs["deployMode"] = args ? args.deployMode : undefined;
            resourceInputs["dnsAuthenticateFlag"] = args ? args.dnsAuthenticateFlag : undefined;
            resourceInputs["dnsCacheAgeoutTime"] = args ? args.dnsCacheAgeoutTime : undefined;
            resourceInputs["dnsCacheEntrySize"] = args ? args.dnsCacheEntrySize : undefined;
            resourceInputs["dnsCacheFlag"] = args ? args.dnsCacheFlag : undefined;
            resourceInputs["dnsCacheResponseType"] = args ? args.dnsCacheResponseType : undefined;
            resourceInputs["dnsCacheSize"] = args ? args.dnsCacheSize : undefined;
            resourceInputs["dnsMalformQueryAction"] = args ? args.dnsMalformQueryAction : undefined;
            resourceInputs["dnsMaxQueryLength"] = args ? args.dnsMaxQueryLength : undefined;
            resourceInputs["dynamicAuth"] = args ? args.dynamicAuth : undefined;
            resourceInputs["dynamicAuthPort"] = args ? args.dynamicAuthPort : undefined;
            resourceInputs["failedClientStr"] = args ? args.failedClientStr : undefined;
            resourceInputs["failedClientType"] = args ? args.failedClientType : undefined;
            resourceInputs["failedServerStr"] = args ? args.failedServerStr : undefined;
            resourceInputs["failedServerType"] = args ? args.failedServerType : undefined;
            resourceInputs["forwardClientCertificate"] = args ? args.forwardClientCertificate : undefined;
            resourceInputs["forwardClientCertificateHeader"] = args ? args.forwardClientCertificateHeader : undefined;
            resourceInputs["geoipList"] = args ? args.geoipList : undefined;
            resourceInputs["geoipRedirect"] = args ? args.geoipRedirect : undefined;
            resourceInputs["http2Profile"] = args ? args.http2Profile : undefined;
            resourceInputs["httpKeepaliveTimeout"] = args ? args.httpKeepaliveTimeout : undefined;
            resourceInputs["httpMode"] = args ? args.httpMode : undefined;
            resourceInputs["httpRequestTimeout"] = args ? args.httpRequestTimeout : undefined;
            resourceInputs["httpSendTimeout"] = args ? args.httpSendTimeout : undefined;
            resourceInputs["httpXForwardedFor"] = args ? args.httpXForwardedFor : undefined;
            resourceInputs["httpXForwardedForHeader"] = args ? args.httpXForwardedForHeader : undefined;
            resourceInputs["idleTime"] = args ? args.idleTime : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["insertClientIp"] = args ? args.insertClientIp : undefined;
            resourceInputs["intermediateCaGroup"] = args ? args.intermediateCaGroup : undefined;
            resourceInputs["ipReputation"] = args ? args.ipReputation : undefined;
            resourceInputs["ipReputationRedirect"] = args ? args.ipReputationRedirect : undefined;
            resourceInputs["lengthIndicatorShift"] = args ? args.lengthIndicatorShift : undefined;
            resourceInputs["lengthIndicatorSize"] = args ? args.lengthIndicatorSize : undefined;
            resourceInputs["lengthIndicatorType"] = args ? args.lengthIndicatorType : undefined;
            resourceInputs["localCert"] = args ? args.localCert : undefined;
            resourceInputs["localCertGroup"] = args ? args.localCertGroup : undefined;
            resourceInputs["maxHeaderSize"] = args ? args.maxHeaderSize : undefined;
            resourceInputs["maxHttpHeaders"] = args ? args.maxHttpHeaders : undefined;
            resourceInputs["mediaAddress"] = args ? args.mediaAddress : undefined;
            resourceInputs["mkey"] = args ? args.mkey : undefined;
            resourceInputs["msgEncodeType"] = args ? args.msgEncodeType : undefined;
            resourceInputs["mysqlMode"] = args ? args.mysqlMode : undefined;
            resourceInputs["newSslCiphersLong"] = args ? args.newSslCiphersLong : undefined;
            resourceInputs["optHeaderLength"] = args ? args.optHeaderLength : undefined;
            resourceInputs["optTrailerHex"] = args ? args.optTrailerHex : undefined;
            resourceInputs["originHost"] = args ? args.originHost : undefined;
            resourceInputs["originRealm"] = args ? args.originRealm : undefined;
            resourceInputs["productName"] = args ? args.productName : undefined;
            resourceInputs["queueTimeout"] = args ? args.queueTimeout : undefined;
            resourceInputs["ramCaching"] = args ? args.ramCaching : undefined;
            resourceInputs["responseHalfClosedRequest"] = args ? args.responseHalfClosedRequest : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["serverAge"] = args ? args.serverAge : undefined;
            resourceInputs["serverClosePropagation"] = args ? args.serverClosePropagation : undefined;
            resourceInputs["serverKeepalive"] = args ? args.serverKeepalive : undefined;
            resourceInputs["serverKeepaliveTimeout"] = args ? args.serverKeepaliveTimeout : undefined;
            resourceInputs["serverMaxSize"] = args ? args.serverMaxSize : undefined;
            resourceInputs["serverProtocol"] = args ? args.serverProtocol : undefined;
            resourceInputs["serverTimeout"] = args ? args.serverTimeout : undefined;
            resourceInputs["sipDlgTimeout"] = args ? args.sipDlgTimeout : undefined;
            resourceInputs["sipMaxSize"] = args ? args.sipMaxSize : undefined;
            resourceInputs["smtpDisableCommand"] = args ? args.smtpDisableCommand : undefined;
            resourceInputs["smtpDisableCommandStatus"] = args ? args.smtpDisableCommandStatus : undefined;
            resourceInputs["smtpDomainName"] = args ? args.smtpDomainName : undefined;
            resourceInputs["sourcePort"] = args ? args.sourcePort : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["sslAlgorithm"] = args ? args.sslAlgorithm : undefined;
            resourceInputs["sslCiphers"] = args ? args.sslCiphers : undefined;
            resourceInputs["sslProxy"] = args ? args.sslProxy : undefined;
            resourceInputs["starttlsActiveMode"] = args ? args.starttlsActiveMode : undefined;
            resourceInputs["stateless"] = args ? args.stateless : undefined;
            resourceInputs["timeoutIpSession"] = args ? args.timeoutIpSession : undefined;
            resourceInputs["timeoutRadiusSession"] = args ? args.timeoutRadiusSession : undefined;
            resourceInputs["timeoutTcpSession"] = args ? args.timeoutTcpSession : undefined;
            resourceInputs["timeoutTcpSessionAfterFin"] = args ? args.timeoutTcpSessionAfterFin : undefined;
            resourceInputs["timeoutUdpSession"] = args ? args.timeoutUdpSession : undefined;
            resourceInputs["tuneBufsize"] = args ? args.tuneBufsize : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["useTlsTickets"] = args ? args.useTlsTickets : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
            resourceInputs["vendorId"] = args ? args.vendorId : undefined;
            resourceInputs["whitelist"] = args ? args.whitelist : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalanceProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalanceProfile resources.
 */
export interface LoadBalanceProfileState {
    allowSslVersions?: pulumi.Input<string>;
    certVerify?: pulumi.Input<string>;
    clientAddress?: pulumi.Input<string>;
    clientKeepalive?: pulumi.Input<string>;
    clientProtocol?: pulumi.Input<string>;
    clientSniRequired?: pulumi.Input<string>;
    clientSsl?: pulumi.Input<string>;
    clientTimeout?: pulumi.Input<string>;
    compression?: pulumi.Input<string>;
    connectTimeout?: pulumi.Input<string>;
    customizedSslCiphers?: pulumi.Input<string>;
    customizedSslCiphersFlag?: pulumi.Input<string>;
    decompression?: pulumi.Input<string>;
    deployMode?: pulumi.Input<string>;
    dnsAuthenticateFlag?: pulumi.Input<string>;
    dnsCacheAgeoutTime?: pulumi.Input<string>;
    dnsCacheEntrySize?: pulumi.Input<string>;
    dnsCacheFlag?: pulumi.Input<string>;
    dnsCacheResponseType?: pulumi.Input<string>;
    dnsCacheSize?: pulumi.Input<string>;
    dnsMalformQueryAction?: pulumi.Input<string>;
    dnsMaxQueryLength?: pulumi.Input<string>;
    dynamicAuth?: pulumi.Input<string>;
    dynamicAuthPort?: pulumi.Input<string>;
    failedClientStr?: pulumi.Input<string>;
    failedClientType?: pulumi.Input<string>;
    failedServerStr?: pulumi.Input<string>;
    failedServerType?: pulumi.Input<string>;
    forwardClientCertificate?: pulumi.Input<string>;
    forwardClientCertificateHeader?: pulumi.Input<string>;
    geoipList?: pulumi.Input<string>;
    geoipRedirect?: pulumi.Input<string>;
    http2Profile?: pulumi.Input<string>;
    httpKeepaliveTimeout?: pulumi.Input<string>;
    httpMode?: pulumi.Input<string>;
    httpRequestTimeout?: pulumi.Input<string>;
    httpSendTimeout?: pulumi.Input<string>;
    httpXForwardedFor?: pulumi.Input<string>;
    httpXForwardedForHeader?: pulumi.Input<string>;
    idleTime?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<string>;
    insertClientIp?: pulumi.Input<string>;
    intermediateCaGroup?: pulumi.Input<string>;
    ipReputation?: pulumi.Input<string>;
    ipReputationRedirect?: pulumi.Input<string>;
    lengthIndicatorShift?: pulumi.Input<string>;
    lengthIndicatorSize?: pulumi.Input<string>;
    lengthIndicatorType?: pulumi.Input<string>;
    localCert?: pulumi.Input<string>;
    localCertGroup?: pulumi.Input<string>;
    maxHeaderSize?: pulumi.Input<string>;
    maxHttpHeaders?: pulumi.Input<string>;
    mediaAddress?: pulumi.Input<string>;
    mkey?: pulumi.Input<string>;
    msgEncodeType?: pulumi.Input<string>;
    mysqlMode?: pulumi.Input<string>;
    newSslCiphersLong?: pulumi.Input<string>;
    optHeaderLength?: pulumi.Input<string>;
    optTrailerHex?: pulumi.Input<string>;
    originHost?: pulumi.Input<string>;
    originRealm?: pulumi.Input<string>;
    productName?: pulumi.Input<string>;
    queueTimeout?: pulumi.Input<string>;
    ramCaching?: pulumi.Input<string>;
    responseHalfClosedRequest?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    serverAge?: pulumi.Input<string>;
    serverClosePropagation?: pulumi.Input<string>;
    serverKeepalive?: pulumi.Input<string>;
    serverKeepaliveTimeout?: pulumi.Input<string>;
    serverMaxSize?: pulumi.Input<string>;
    serverProtocol?: pulumi.Input<string>;
    serverTimeout?: pulumi.Input<string>;
    sipDlgTimeout?: pulumi.Input<string>;
    sipMaxSize?: pulumi.Input<string>;
    smtpDisableCommand?: pulumi.Input<string>;
    smtpDisableCommandStatus?: pulumi.Input<string>;
    smtpDomainName?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCiphers?: pulumi.Input<string>;
    sslProxy?: pulumi.Input<string>;
    starttlsActiveMode?: pulumi.Input<string>;
    stateless?: pulumi.Input<string>;
    timeoutIpSession?: pulumi.Input<string>;
    timeoutRadiusSession?: pulumi.Input<string>;
    timeoutTcpSession?: pulumi.Input<string>;
    timeoutTcpSessionAfterFin?: pulumi.Input<string>;
    timeoutUdpSession?: pulumi.Input<string>;
    tuneBufsize?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    useTlsTickets?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    vendorId?: pulumi.Input<string>;
    whitelist?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalanceProfile resource.
 */
export interface LoadBalanceProfileArgs {
    allowSslVersions?: pulumi.Input<string>;
    certVerify?: pulumi.Input<string>;
    clientAddress?: pulumi.Input<string>;
    clientKeepalive?: pulumi.Input<string>;
    clientProtocol?: pulumi.Input<string>;
    clientSniRequired?: pulumi.Input<string>;
    clientSsl?: pulumi.Input<string>;
    clientTimeout?: pulumi.Input<string>;
    compression?: pulumi.Input<string>;
    connectTimeout?: pulumi.Input<string>;
    customizedSslCiphers?: pulumi.Input<string>;
    customizedSslCiphersFlag?: pulumi.Input<string>;
    decompression?: pulumi.Input<string>;
    deployMode?: pulumi.Input<string>;
    dnsAuthenticateFlag?: pulumi.Input<string>;
    dnsCacheAgeoutTime?: pulumi.Input<string>;
    dnsCacheEntrySize?: pulumi.Input<string>;
    dnsCacheFlag?: pulumi.Input<string>;
    dnsCacheResponseType?: pulumi.Input<string>;
    dnsCacheSize?: pulumi.Input<string>;
    dnsMalformQueryAction?: pulumi.Input<string>;
    dnsMaxQueryLength?: pulumi.Input<string>;
    dynamicAuth?: pulumi.Input<string>;
    dynamicAuthPort?: pulumi.Input<string>;
    failedClientStr?: pulumi.Input<string>;
    failedClientType?: pulumi.Input<string>;
    failedServerStr?: pulumi.Input<string>;
    failedServerType?: pulumi.Input<string>;
    forwardClientCertificate?: pulumi.Input<string>;
    forwardClientCertificateHeader?: pulumi.Input<string>;
    geoipList?: pulumi.Input<string>;
    geoipRedirect?: pulumi.Input<string>;
    http2Profile?: pulumi.Input<string>;
    httpKeepaliveTimeout?: pulumi.Input<string>;
    httpMode?: pulumi.Input<string>;
    httpRequestTimeout?: pulumi.Input<string>;
    httpSendTimeout?: pulumi.Input<string>;
    httpXForwardedFor?: pulumi.Input<string>;
    httpXForwardedForHeader?: pulumi.Input<string>;
    idleTime?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<string>;
    insertClientIp?: pulumi.Input<string>;
    intermediateCaGroup?: pulumi.Input<string>;
    ipReputation?: pulumi.Input<string>;
    ipReputationRedirect?: pulumi.Input<string>;
    lengthIndicatorShift?: pulumi.Input<string>;
    lengthIndicatorSize?: pulumi.Input<string>;
    lengthIndicatorType?: pulumi.Input<string>;
    localCert?: pulumi.Input<string>;
    localCertGroup?: pulumi.Input<string>;
    maxHeaderSize?: pulumi.Input<string>;
    maxHttpHeaders?: pulumi.Input<string>;
    mediaAddress?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    msgEncodeType?: pulumi.Input<string>;
    mysqlMode?: pulumi.Input<string>;
    newSslCiphersLong?: pulumi.Input<string>;
    optHeaderLength?: pulumi.Input<string>;
    optTrailerHex?: pulumi.Input<string>;
    originHost?: pulumi.Input<string>;
    originRealm?: pulumi.Input<string>;
    productName?: pulumi.Input<string>;
    queueTimeout?: pulumi.Input<string>;
    ramCaching?: pulumi.Input<string>;
    responseHalfClosedRequest?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    serverAge?: pulumi.Input<string>;
    serverClosePropagation?: pulumi.Input<string>;
    serverKeepalive?: pulumi.Input<string>;
    serverKeepaliveTimeout?: pulumi.Input<string>;
    serverMaxSize?: pulumi.Input<string>;
    serverProtocol?: pulumi.Input<string>;
    serverTimeout?: pulumi.Input<string>;
    sipDlgTimeout?: pulumi.Input<string>;
    sipMaxSize?: pulumi.Input<string>;
    smtpDisableCommand?: pulumi.Input<string>;
    smtpDisableCommandStatus?: pulumi.Input<string>;
    smtpDomainName?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCiphers?: pulumi.Input<string>;
    sslProxy?: pulumi.Input<string>;
    starttlsActiveMode?: pulumi.Input<string>;
    stateless?: pulumi.Input<string>;
    timeoutIpSession?: pulumi.Input<string>;
    timeoutRadiusSession?: pulumi.Input<string>;
    timeoutTcpSession?: pulumi.Input<string>;
    timeoutTcpSessionAfterFin?: pulumi.Input<string>;
    timeoutUdpSession?: pulumi.Input<string>;
    tuneBufsize?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    useTlsTickets?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    vendorId?: pulumi.Input<string>;
    whitelist?: pulumi.Input<string>;
}
