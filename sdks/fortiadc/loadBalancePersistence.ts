// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadBalancePersistence extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancePersistence resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancePersistenceState, opts?: pulumi.CustomResourceOptions): LoadBalancePersistence {
        return new LoadBalancePersistence(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/loadBalancePersistence:LoadBalancePersistence';

    /**
     * Returns true if the given object is an instance of LoadBalancePersistence.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancePersistence {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancePersistence.__pulumiType;
    }

    public readonly avpno!: pulumi.Output<string>;
    public readonly cookieCustomAttr!: pulumi.Output<string>;
    public readonly cookieCustomAttrVal!: pulumi.Output<string>;
    public readonly cookieDomain!: pulumi.Output<string>;
    public readonly cookieHttponly!: pulumi.Output<string>;
    public readonly cookieSamesite!: pulumi.Output<string>;
    public readonly cookieSecure!: pulumi.Output<string>;
    public readonly ipv4Maskbits!: pulumi.Output<string>;
    public readonly ipv6Maskbits!: pulumi.Output<string>;
    public readonly iso8583BitmapRelation!: pulumi.Output<string>;
    public readonly keyvalueRelation!: pulumi.Output<string>;
    public readonly keyword!: pulumi.Output<string>;
    public readonly matchAcrossServers!: pulumi.Output<string>;
    public readonly mkey!: pulumi.Output<string>;
    public readonly overrideConnectionLimit!: pulumi.Output<string>;
    public readonly radiusAttributeRelation!: pulumi.Output<string>;
    public readonly sessKwType!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string | undefined>;

    /**
     * Create a LoadBalancePersistence resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancePersistenceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancePersistenceArgs | LoadBalancePersistenceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancePersistenceState | undefined;
            resourceInputs["avpno"] = state ? state.avpno : undefined;
            resourceInputs["cookieCustomAttr"] = state ? state.cookieCustomAttr : undefined;
            resourceInputs["cookieCustomAttrVal"] = state ? state.cookieCustomAttrVal : undefined;
            resourceInputs["cookieDomain"] = state ? state.cookieDomain : undefined;
            resourceInputs["cookieHttponly"] = state ? state.cookieHttponly : undefined;
            resourceInputs["cookieSamesite"] = state ? state.cookieSamesite : undefined;
            resourceInputs["cookieSecure"] = state ? state.cookieSecure : undefined;
            resourceInputs["ipv4Maskbits"] = state ? state.ipv4Maskbits : undefined;
            resourceInputs["ipv6Maskbits"] = state ? state.ipv6Maskbits : undefined;
            resourceInputs["iso8583BitmapRelation"] = state ? state.iso8583BitmapRelation : undefined;
            resourceInputs["keyvalueRelation"] = state ? state.keyvalueRelation : undefined;
            resourceInputs["keyword"] = state ? state.keyword : undefined;
            resourceInputs["matchAcrossServers"] = state ? state.matchAcrossServers : undefined;
            resourceInputs["mkey"] = state ? state.mkey : undefined;
            resourceInputs["overrideConnectionLimit"] = state ? state.overrideConnectionLimit : undefined;
            resourceInputs["radiusAttributeRelation"] = state ? state.radiusAttributeRelation : undefined;
            resourceInputs["sessKwType"] = state ? state.sessKwType : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
        } else {
            const args = argsOrState as LoadBalancePersistenceArgs | undefined;
            if ((!args || args.mkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mkey'");
            }
            resourceInputs["avpno"] = args ? args.avpno : undefined;
            resourceInputs["cookieCustomAttr"] = args ? args.cookieCustomAttr : undefined;
            resourceInputs["cookieCustomAttrVal"] = args ? args.cookieCustomAttrVal : undefined;
            resourceInputs["cookieDomain"] = args ? args.cookieDomain : undefined;
            resourceInputs["cookieHttponly"] = args ? args.cookieHttponly : undefined;
            resourceInputs["cookieSamesite"] = args ? args.cookieSamesite : undefined;
            resourceInputs["cookieSecure"] = args ? args.cookieSecure : undefined;
            resourceInputs["ipv4Maskbits"] = args ? args.ipv4Maskbits : undefined;
            resourceInputs["ipv6Maskbits"] = args ? args.ipv6Maskbits : undefined;
            resourceInputs["iso8583BitmapRelation"] = args ? args.iso8583BitmapRelation : undefined;
            resourceInputs["keyvalueRelation"] = args ? args.keyvalueRelation : undefined;
            resourceInputs["keyword"] = args ? args.keyword : undefined;
            resourceInputs["matchAcrossServers"] = args ? args.matchAcrossServers : undefined;
            resourceInputs["mkey"] = args ? args.mkey : undefined;
            resourceInputs["overrideConnectionLimit"] = args ? args.overrideConnectionLimit : undefined;
            resourceInputs["radiusAttributeRelation"] = args ? args.radiusAttributeRelation : undefined;
            resourceInputs["sessKwType"] = args ? args.sessKwType : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancePersistence.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancePersistence resources.
 */
export interface LoadBalancePersistenceState {
    avpno?: pulumi.Input<string>;
    cookieCustomAttr?: pulumi.Input<string>;
    cookieCustomAttrVal?: pulumi.Input<string>;
    cookieDomain?: pulumi.Input<string>;
    cookieHttponly?: pulumi.Input<string>;
    cookieSamesite?: pulumi.Input<string>;
    cookieSecure?: pulumi.Input<string>;
    ipv4Maskbits?: pulumi.Input<string>;
    ipv6Maskbits?: pulumi.Input<string>;
    iso8583BitmapRelation?: pulumi.Input<string>;
    keyvalueRelation?: pulumi.Input<string>;
    keyword?: pulumi.Input<string>;
    matchAcrossServers?: pulumi.Input<string>;
    mkey?: pulumi.Input<string>;
    overrideConnectionLimit?: pulumi.Input<string>;
    radiusAttributeRelation?: pulumi.Input<string>;
    sessKwType?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancePersistence resource.
 */
export interface LoadBalancePersistenceArgs {
    avpno?: pulumi.Input<string>;
    cookieCustomAttr?: pulumi.Input<string>;
    cookieCustomAttrVal?: pulumi.Input<string>;
    cookieDomain?: pulumi.Input<string>;
    cookieHttponly?: pulumi.Input<string>;
    cookieSamesite?: pulumi.Input<string>;
    cookieSecure?: pulumi.Input<string>;
    ipv4Maskbits?: pulumi.Input<string>;
    ipv6Maskbits?: pulumi.Input<string>;
    iso8583BitmapRelation?: pulumi.Input<string>;
    keyvalueRelation?: pulumi.Input<string>;
    keyword?: pulumi.Input<string>;
    matchAcrossServers?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    overrideConnectionLimit?: pulumi.Input<string>;
    radiusAttributeRelation?: pulumi.Input<string>;
    sessKwType?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}
