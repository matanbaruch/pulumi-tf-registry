// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadBalanceVirtualServer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalanceVirtualServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalanceVirtualServerState, opts?: pulumi.CustomResourceOptions): LoadBalanceVirtualServer {
        return new LoadBalanceVirtualServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/loadBalanceVirtualServer:LoadBalanceVirtualServer';

    /**
     * Returns true if the given object is an instance of LoadBalanceVirtualServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalanceVirtualServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalanceVirtualServer.__pulumiType;
    }

    public readonly addrType!: pulumi.Output<string>;
    public readonly address!: pulumi.Output<string>;
    public readonly address6!: pulumi.Output<string>;
    public readonly adfsPublishedService!: pulumi.Output<string>;
    public readonly alone!: pulumi.Output<string>;
    public readonly authPolicy!: pulumi.Output<string>;
    public readonly avProfile!: pulumi.Output<string>;
    public readonly azureLbBackend!: pulumi.Output<string>;
    public readonly captchaProfile!: pulumi.Output<string>;
    public readonly clientSslProfile!: pulumi.Output<string>;
    public readonly clonePool!: pulumi.Output<string>;
    public readonly cloneTrafficType!: pulumi.Output<string>;
    public readonly comments!: pulumi.Output<string>;
    public readonly connectionLimit!: pulumi.Output<string>;
    public readonly connectionPool!: pulumi.Output<string>;
    public readonly connectionRateLimit!: pulumi.Output<string>;
    public readonly contentRewriting!: pulumi.Output<string>;
    public readonly contentRewritingList!: pulumi.Output<string>;
    public readonly contentRouting!: pulumi.Output<string>;
    public readonly contentRoutingList!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly dosProfile!: pulumi.Output<string>;
    public readonly errorMsg!: pulumi.Output<string>;
    public readonly errorPage!: pulumi.Output<string>;
    public readonly fortiview!: pulumi.Output<string>;
    public readonly hostName!: pulumi.Output<string>;
    public readonly http2https!: pulumi.Output<string>;
    public readonly http2httpsPort!: pulumi.Output<string>;
    public readonly interface!: pulumi.Output<string>;
    public readonly ipsProfile!: pulumi.Output<string>;
    public readonly l2ExceptionList!: pulumi.Output<string>;
    public readonly method!: pulumi.Output<string>;
    public readonly mkey!: pulumi.Output<string>;
    public readonly oneClickGslbServer!: pulumi.Output<string>;
    public readonly packetFwdMethod!: pulumi.Output<string>;
    public readonly pagespeed!: pulumi.Output<string>;
    public readonly persistence!: pulumi.Output<string>;
    public readonly pool!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<string>;
    public readonly profile!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly publicIp!: pulumi.Output<string>;
    public readonly publicIp6!: pulumi.Output<string>;
    public readonly publicIpType!: pulumi.Output<string>;
    public readonly scheduleList!: pulumi.Output<string>;
    public readonly schedulePoolList!: pulumi.Output<string>;
    public readonly scriptingFlag!: pulumi.Output<string>;
    public readonly scriptingList!: pulumi.Output<string>;
    public readonly sourcePoolList!: pulumi.Output<string>;
    public readonly sslMirror!: pulumi.Output<string>;
    public readonly sslMirrorIntf!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly streamScriptingFlag!: pulumi.Output<string>;
    public readonly streamScriptingList!: pulumi.Output<string>;
    public readonly trafficGroup!: pulumi.Output<string>;
    public readonly trafficLog!: pulumi.Output<string>;
    public readonly transRateLimit!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly useAzureLbBackendIp!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string | undefined>;
    public readonly wafProfile!: pulumi.Output<string>;
    public readonly warmrate!: pulumi.Output<string>;
    public readonly warmup!: pulumi.Output<string>;
    public readonly wccp!: pulumi.Output<string>;
    public readonly ztnaProfile!: pulumi.Output<string>;

    /**
     * Create a LoadBalanceVirtualServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalanceVirtualServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalanceVirtualServerArgs | LoadBalanceVirtualServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalanceVirtualServerState | undefined;
            resourceInputs["addrType"] = state ? state.addrType : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["address6"] = state ? state.address6 : undefined;
            resourceInputs["adfsPublishedService"] = state ? state.adfsPublishedService : undefined;
            resourceInputs["alone"] = state ? state.alone : undefined;
            resourceInputs["authPolicy"] = state ? state.authPolicy : undefined;
            resourceInputs["avProfile"] = state ? state.avProfile : undefined;
            resourceInputs["azureLbBackend"] = state ? state.azureLbBackend : undefined;
            resourceInputs["captchaProfile"] = state ? state.captchaProfile : undefined;
            resourceInputs["clientSslProfile"] = state ? state.clientSslProfile : undefined;
            resourceInputs["clonePool"] = state ? state.clonePool : undefined;
            resourceInputs["cloneTrafficType"] = state ? state.cloneTrafficType : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["connectionLimit"] = state ? state.connectionLimit : undefined;
            resourceInputs["connectionPool"] = state ? state.connectionPool : undefined;
            resourceInputs["connectionRateLimit"] = state ? state.connectionRateLimit : undefined;
            resourceInputs["contentRewriting"] = state ? state.contentRewriting : undefined;
            resourceInputs["contentRewritingList"] = state ? state.contentRewritingList : undefined;
            resourceInputs["contentRouting"] = state ? state.contentRouting : undefined;
            resourceInputs["contentRoutingList"] = state ? state.contentRoutingList : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["dosProfile"] = state ? state.dosProfile : undefined;
            resourceInputs["errorMsg"] = state ? state.errorMsg : undefined;
            resourceInputs["errorPage"] = state ? state.errorPage : undefined;
            resourceInputs["fortiview"] = state ? state.fortiview : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["http2https"] = state ? state.http2https : undefined;
            resourceInputs["http2httpsPort"] = state ? state.http2httpsPort : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipsProfile"] = state ? state.ipsProfile : undefined;
            resourceInputs["l2ExceptionList"] = state ? state.l2ExceptionList : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["mkey"] = state ? state.mkey : undefined;
            resourceInputs["oneClickGslbServer"] = state ? state.oneClickGslbServer : undefined;
            resourceInputs["packetFwdMethod"] = state ? state.packetFwdMethod : undefined;
            resourceInputs["pagespeed"] = state ? state.pagespeed : undefined;
            resourceInputs["persistence"] = state ? state.persistence : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["profile"] = state ? state.profile : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["publicIp6"] = state ? state.publicIp6 : undefined;
            resourceInputs["publicIpType"] = state ? state.publicIpType : undefined;
            resourceInputs["scheduleList"] = state ? state.scheduleList : undefined;
            resourceInputs["schedulePoolList"] = state ? state.schedulePoolList : undefined;
            resourceInputs["scriptingFlag"] = state ? state.scriptingFlag : undefined;
            resourceInputs["scriptingList"] = state ? state.scriptingList : undefined;
            resourceInputs["sourcePoolList"] = state ? state.sourcePoolList : undefined;
            resourceInputs["sslMirror"] = state ? state.sslMirror : undefined;
            resourceInputs["sslMirrorIntf"] = state ? state.sslMirrorIntf : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["streamScriptingFlag"] = state ? state.streamScriptingFlag : undefined;
            resourceInputs["streamScriptingList"] = state ? state.streamScriptingList : undefined;
            resourceInputs["trafficGroup"] = state ? state.trafficGroup : undefined;
            resourceInputs["trafficLog"] = state ? state.trafficLog : undefined;
            resourceInputs["transRateLimit"] = state ? state.transRateLimit : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useAzureLbBackendIp"] = state ? state.useAzureLbBackendIp : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
            resourceInputs["wafProfile"] = state ? state.wafProfile : undefined;
            resourceInputs["warmrate"] = state ? state.warmrate : undefined;
            resourceInputs["warmup"] = state ? state.warmup : undefined;
            resourceInputs["wccp"] = state ? state.wccp : undefined;
            resourceInputs["ztnaProfile"] = state ? state.ztnaProfile : undefined;
        } else {
            const args = argsOrState as LoadBalanceVirtualServerArgs | undefined;
            if ((!args || args.mkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mkey'");
            }
            resourceInputs["addrType"] = args ? args.addrType : undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["address6"] = args ? args.address6 : undefined;
            resourceInputs["adfsPublishedService"] = args ? args.adfsPublishedService : undefined;
            resourceInputs["alone"] = args ? args.alone : undefined;
            resourceInputs["authPolicy"] = args ? args.authPolicy : undefined;
            resourceInputs["avProfile"] = args ? args.avProfile : undefined;
            resourceInputs["azureLbBackend"] = args ? args.azureLbBackend : undefined;
            resourceInputs["captchaProfile"] = args ? args.captchaProfile : undefined;
            resourceInputs["clientSslProfile"] = args ? args.clientSslProfile : undefined;
            resourceInputs["clonePool"] = args ? args.clonePool : undefined;
            resourceInputs["cloneTrafficType"] = args ? args.cloneTrafficType : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["connectionLimit"] = args ? args.connectionLimit : undefined;
            resourceInputs["connectionPool"] = args ? args.connectionPool : undefined;
            resourceInputs["connectionRateLimit"] = args ? args.connectionRateLimit : undefined;
            resourceInputs["contentRewriting"] = args ? args.contentRewriting : undefined;
            resourceInputs["contentRewritingList"] = args ? args.contentRewritingList : undefined;
            resourceInputs["contentRouting"] = args ? args.contentRouting : undefined;
            resourceInputs["contentRoutingList"] = args ? args.contentRoutingList : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["dosProfile"] = args ? args.dosProfile : undefined;
            resourceInputs["errorMsg"] = args ? args.errorMsg : undefined;
            resourceInputs["errorPage"] = args ? args.errorPage : undefined;
            resourceInputs["fortiview"] = args ? args.fortiview : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["http2https"] = args ? args.http2https : undefined;
            resourceInputs["http2httpsPort"] = args ? args.http2httpsPort : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipsProfile"] = args ? args.ipsProfile : undefined;
            resourceInputs["l2ExceptionList"] = args ? args.l2ExceptionList : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["mkey"] = args ? args.mkey : undefined;
            resourceInputs["oneClickGslbServer"] = args ? args.oneClickGslbServer : undefined;
            resourceInputs["packetFwdMethod"] = args ? args.packetFwdMethod : undefined;
            resourceInputs["pagespeed"] = args ? args.pagespeed : undefined;
            resourceInputs["persistence"] = args ? args.persistence : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["profile"] = args ? args.profile : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["publicIp"] = args ? args.publicIp : undefined;
            resourceInputs["publicIp6"] = args ? args.publicIp6 : undefined;
            resourceInputs["publicIpType"] = args ? args.publicIpType : undefined;
            resourceInputs["scheduleList"] = args ? args.scheduleList : undefined;
            resourceInputs["schedulePoolList"] = args ? args.schedulePoolList : undefined;
            resourceInputs["scriptingFlag"] = args ? args.scriptingFlag : undefined;
            resourceInputs["scriptingList"] = args ? args.scriptingList : undefined;
            resourceInputs["sourcePoolList"] = args ? args.sourcePoolList : undefined;
            resourceInputs["sslMirror"] = args ? args.sslMirror : undefined;
            resourceInputs["sslMirrorIntf"] = args ? args.sslMirrorIntf : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["streamScriptingFlag"] = args ? args.streamScriptingFlag : undefined;
            resourceInputs["streamScriptingList"] = args ? args.streamScriptingList : undefined;
            resourceInputs["trafficGroup"] = args ? args.trafficGroup : undefined;
            resourceInputs["trafficLog"] = args ? args.trafficLog : undefined;
            resourceInputs["transRateLimit"] = args ? args.transRateLimit : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["useAzureLbBackendIp"] = args ? args.useAzureLbBackendIp : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
            resourceInputs["wafProfile"] = args ? args.wafProfile : undefined;
            resourceInputs["warmrate"] = args ? args.warmrate : undefined;
            resourceInputs["warmup"] = args ? args.warmup : undefined;
            resourceInputs["wccp"] = args ? args.wccp : undefined;
            resourceInputs["ztnaProfile"] = args ? args.ztnaProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalanceVirtualServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalanceVirtualServer resources.
 */
export interface LoadBalanceVirtualServerState {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    address6?: pulumi.Input<string>;
    adfsPublishedService?: pulumi.Input<string>;
    alone?: pulumi.Input<string>;
    authPolicy?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    azureLbBackend?: pulumi.Input<string>;
    captchaProfile?: pulumi.Input<string>;
    clientSslProfile?: pulumi.Input<string>;
    clonePool?: pulumi.Input<string>;
    cloneTrafficType?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    connectionLimit?: pulumi.Input<string>;
    connectionPool?: pulumi.Input<string>;
    connectionRateLimit?: pulumi.Input<string>;
    contentRewriting?: pulumi.Input<string>;
    contentRewritingList?: pulumi.Input<string>;
    contentRouting?: pulumi.Input<string>;
    contentRoutingList?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    dosProfile?: pulumi.Input<string>;
    errorMsg?: pulumi.Input<string>;
    errorPage?: pulumi.Input<string>;
    fortiview?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    http2https?: pulumi.Input<string>;
    http2httpsPort?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    ipsProfile?: pulumi.Input<string>;
    l2ExceptionList?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    mkey?: pulumi.Input<string>;
    oneClickGslbServer?: pulumi.Input<string>;
    packetFwdMethod?: pulumi.Input<string>;
    pagespeed?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    pool?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicIp6?: pulumi.Input<string>;
    publicIpType?: pulumi.Input<string>;
    scheduleList?: pulumi.Input<string>;
    schedulePoolList?: pulumi.Input<string>;
    scriptingFlag?: pulumi.Input<string>;
    scriptingList?: pulumi.Input<string>;
    sourcePoolList?: pulumi.Input<string>;
    sslMirror?: pulumi.Input<string>;
    sslMirrorIntf?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    streamScriptingFlag?: pulumi.Input<string>;
    streamScriptingList?: pulumi.Input<string>;
    trafficGroup?: pulumi.Input<string>;
    trafficLog?: pulumi.Input<string>;
    transRateLimit?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    useAzureLbBackendIp?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    wafProfile?: pulumi.Input<string>;
    warmrate?: pulumi.Input<string>;
    warmup?: pulumi.Input<string>;
    wccp?: pulumi.Input<string>;
    ztnaProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalanceVirtualServer resource.
 */
export interface LoadBalanceVirtualServerArgs {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    address6?: pulumi.Input<string>;
    adfsPublishedService?: pulumi.Input<string>;
    alone?: pulumi.Input<string>;
    authPolicy?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    azureLbBackend?: pulumi.Input<string>;
    captchaProfile?: pulumi.Input<string>;
    clientSslProfile?: pulumi.Input<string>;
    clonePool?: pulumi.Input<string>;
    cloneTrafficType?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    connectionLimit?: pulumi.Input<string>;
    connectionPool?: pulumi.Input<string>;
    connectionRateLimit?: pulumi.Input<string>;
    contentRewriting?: pulumi.Input<string>;
    contentRewritingList?: pulumi.Input<string>;
    contentRouting?: pulumi.Input<string>;
    contentRoutingList?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    dosProfile?: pulumi.Input<string>;
    errorMsg?: pulumi.Input<string>;
    errorPage?: pulumi.Input<string>;
    fortiview?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    http2https?: pulumi.Input<string>;
    http2httpsPort?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    ipsProfile?: pulumi.Input<string>;
    l2ExceptionList?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    oneClickGslbServer?: pulumi.Input<string>;
    packetFwdMethod?: pulumi.Input<string>;
    pagespeed?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    pool?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicIp6?: pulumi.Input<string>;
    publicIpType?: pulumi.Input<string>;
    scheduleList?: pulumi.Input<string>;
    schedulePoolList?: pulumi.Input<string>;
    scriptingFlag?: pulumi.Input<string>;
    scriptingList?: pulumi.Input<string>;
    sourcePoolList?: pulumi.Input<string>;
    sslMirror?: pulumi.Input<string>;
    sslMirrorIntf?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    streamScriptingFlag?: pulumi.Input<string>;
    streamScriptingList?: pulumi.Input<string>;
    trafficGroup?: pulumi.Input<string>;
    trafficLog?: pulumi.Input<string>;
    transRateLimit?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    useAzureLbBackendIp?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    wafProfile?: pulumi.Input<string>;
    warmrate?: pulumi.Input<string>;
    warmup?: pulumi.Input<string>;
    wccp?: pulumi.Input<string>;
    ztnaProfile?: pulumi.Input<string>;
}
