// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLoadBalanceVirtualServer(args: GetLoadBalanceVirtualServerArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadBalanceVirtualServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortiadc:index/getLoadBalanceVirtualServer:getLoadBalanceVirtualServer", {
        "id": args.id,
        "mkey": args.mkey,
        "vdom": args.vdom,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoadBalanceVirtualServer.
 */
export interface GetLoadBalanceVirtualServerArgs {
    id?: string;
    mkey: string;
    vdom?: string;
}

/**
 * A collection of values returned by getLoadBalanceVirtualServer.
 */
export interface GetLoadBalanceVirtualServerResult {
    readonly addrType: string;
    readonly address: string;
    readonly address6: string;
    readonly adfsPublishedService: string;
    readonly alone: string;
    readonly authPolicy: string;
    readonly avProfile: string;
    readonly azureLbBackend: string;
    readonly captchaProfile: string;
    readonly clientSslProfile: string;
    readonly clonePool: string;
    readonly cloneTrafficType: string;
    readonly comments: string;
    readonly connectionLimit: string;
    readonly connectionPool: string;
    readonly connectionRateLimit: string;
    readonly contentRewriting: string;
    readonly contentRewritingList: string;
    readonly contentRouting: string;
    readonly contentRoutingList: string;
    readonly domainName: string;
    readonly dosProfile: string;
    readonly errorMsg: string;
    readonly errorPage: string;
    readonly fortiview: string;
    readonly hostName: string;
    readonly http2https: string;
    readonly http2httpsPort: string;
    readonly id: string;
    readonly interface: string;
    readonly ipsProfile: string;
    readonly l2ExceptionList: string;
    readonly method: string;
    readonly mkey: string;
    readonly oneClickGslbServer: string;
    readonly packetFwdMethod: string;
    readonly pagespeed: string;
    readonly persistence: string;
    readonly pool: string;
    readonly port: string;
    readonly profile: string;
    readonly protocol: string;
    readonly publicIp: string;
    readonly publicIp6: string;
    readonly publicIpType: string;
    readonly scheduleList: string;
    readonly schedulePoolList: string;
    readonly scriptingFlag: string;
    readonly scriptingList: string;
    readonly sourcePoolList: string;
    readonly sslMirror: string;
    readonly sslMirrorIntf: string;
    readonly status: string;
    readonly streamScriptingFlag: string;
    readonly streamScriptingList: string;
    readonly trafficGroup: string;
    readonly trafficLog: string;
    readonly transRateLimit: string;
    readonly type: string;
    readonly useAzureLbBackendIp: string;
    readonly vdom?: string;
    readonly wafProfile: string;
    readonly warmrate: string;
    readonly warmup: string;
    readonly wccp: string;
    readonly ztnaProfile: string;
}
export function getLoadBalanceVirtualServerOutput(args: GetLoadBalanceVirtualServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadBalanceVirtualServerResult> {
    return pulumi.output(args).apply((a: any) => getLoadBalanceVirtualServer(a, opts))
}

/**
 * A collection of arguments for invoking getLoadBalanceVirtualServer.
 */
export interface GetLoadBalanceVirtualServerOutputArgs {
    id?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}
