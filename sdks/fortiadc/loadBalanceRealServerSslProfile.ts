// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadBalanceRealServerSslProfile extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalanceRealServerSslProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalanceRealServerSslProfileState, opts?: pulumi.CustomResourceOptions): LoadBalanceRealServerSslProfile {
        return new LoadBalanceRealServerSslProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/loadBalanceRealServerSslProfile:LoadBalanceRealServerSslProfile';

    /**
     * Returns true if the given object is an instance of LoadBalanceRealServerSslProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalanceRealServerSslProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalanceRealServerSslProfile.__pulumiType;
    }

    public readonly allowSslVersions!: pulumi.Output<string>;
    public readonly certVerify!: pulumi.Output<string>;
    public readonly ciphersTlsv13!: pulumi.Output<string>;
    public readonly customizedSslCiphers!: pulumi.Output<string>;
    public readonly customizedSslCiphersFlag!: pulumi.Output<string>;
    public readonly localCert!: pulumi.Output<string>;
    public readonly mkey!: pulumi.Output<string>;
    public readonly newSslCiphersLong!: pulumi.Output<string>;
    public readonly renegotiatePeriod!: pulumi.Output<string>;
    public readonly renegotiateSize!: pulumi.Output<string>;
    public readonly renegotiation!: pulumi.Output<string>;
    public readonly renegotiationDenyAction!: pulumi.Output<string>;
    public readonly rfc7919Comply!: pulumi.Output<string>;
    public readonly secureRenegotiation!: pulumi.Output<string>;
    public readonly serverOcspStapling!: pulumi.Output<string>;
    public readonly sessionReuseFlag!: pulumi.Output<string>;
    public readonly sessionReuseLimit!: pulumi.Output<string>;
    public readonly sni!: pulumi.Output<string>;
    public readonly sniForwardFlag!: pulumi.Output<string>;
    public readonly ssl!: pulumi.Output<string>;
    public readonly supportedGroups!: pulumi.Output<string>;
    public readonly tlsTicketFlag!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string | undefined>;

    /**
     * Create a LoadBalanceRealServerSslProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalanceRealServerSslProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalanceRealServerSslProfileArgs | LoadBalanceRealServerSslProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalanceRealServerSslProfileState | undefined;
            resourceInputs["allowSslVersions"] = state ? state.allowSslVersions : undefined;
            resourceInputs["certVerify"] = state ? state.certVerify : undefined;
            resourceInputs["ciphersTlsv13"] = state ? state.ciphersTlsv13 : undefined;
            resourceInputs["customizedSslCiphers"] = state ? state.customizedSslCiphers : undefined;
            resourceInputs["customizedSslCiphersFlag"] = state ? state.customizedSslCiphersFlag : undefined;
            resourceInputs["localCert"] = state ? state.localCert : undefined;
            resourceInputs["mkey"] = state ? state.mkey : undefined;
            resourceInputs["newSslCiphersLong"] = state ? state.newSslCiphersLong : undefined;
            resourceInputs["renegotiatePeriod"] = state ? state.renegotiatePeriod : undefined;
            resourceInputs["renegotiateSize"] = state ? state.renegotiateSize : undefined;
            resourceInputs["renegotiation"] = state ? state.renegotiation : undefined;
            resourceInputs["renegotiationDenyAction"] = state ? state.renegotiationDenyAction : undefined;
            resourceInputs["rfc7919Comply"] = state ? state.rfc7919Comply : undefined;
            resourceInputs["secureRenegotiation"] = state ? state.secureRenegotiation : undefined;
            resourceInputs["serverOcspStapling"] = state ? state.serverOcspStapling : undefined;
            resourceInputs["sessionReuseFlag"] = state ? state.sessionReuseFlag : undefined;
            resourceInputs["sessionReuseLimit"] = state ? state.sessionReuseLimit : undefined;
            resourceInputs["sni"] = state ? state.sni : undefined;
            resourceInputs["sniForwardFlag"] = state ? state.sniForwardFlag : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["supportedGroups"] = state ? state.supportedGroups : undefined;
            resourceInputs["tlsTicketFlag"] = state ? state.tlsTicketFlag : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
        } else {
            const args = argsOrState as LoadBalanceRealServerSslProfileArgs | undefined;
            if ((!args || args.mkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mkey'");
            }
            resourceInputs["allowSslVersions"] = args ? args.allowSslVersions : undefined;
            resourceInputs["certVerify"] = args ? args.certVerify : undefined;
            resourceInputs["ciphersTlsv13"] = args ? args.ciphersTlsv13 : undefined;
            resourceInputs["customizedSslCiphers"] = args ? args.customizedSslCiphers : undefined;
            resourceInputs["customizedSslCiphersFlag"] = args ? args.customizedSslCiphersFlag : undefined;
            resourceInputs["localCert"] = args ? args.localCert : undefined;
            resourceInputs["mkey"] = args ? args.mkey : undefined;
            resourceInputs["newSslCiphersLong"] = args ? args.newSslCiphersLong : undefined;
            resourceInputs["renegotiatePeriod"] = args ? args.renegotiatePeriod : undefined;
            resourceInputs["renegotiateSize"] = args ? args.renegotiateSize : undefined;
            resourceInputs["renegotiation"] = args ? args.renegotiation : undefined;
            resourceInputs["renegotiationDenyAction"] = args ? args.renegotiationDenyAction : undefined;
            resourceInputs["rfc7919Comply"] = args ? args.rfc7919Comply : undefined;
            resourceInputs["secureRenegotiation"] = args ? args.secureRenegotiation : undefined;
            resourceInputs["serverOcspStapling"] = args ? args.serverOcspStapling : undefined;
            resourceInputs["sessionReuseFlag"] = args ? args.sessionReuseFlag : undefined;
            resourceInputs["sessionReuseLimit"] = args ? args.sessionReuseLimit : undefined;
            resourceInputs["sni"] = args ? args.sni : undefined;
            resourceInputs["sniForwardFlag"] = args ? args.sniForwardFlag : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["supportedGroups"] = args ? args.supportedGroups : undefined;
            resourceInputs["tlsTicketFlag"] = args ? args.tlsTicketFlag : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalanceRealServerSslProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalanceRealServerSslProfile resources.
 */
export interface LoadBalanceRealServerSslProfileState {
    allowSslVersions?: pulumi.Input<string>;
    certVerify?: pulumi.Input<string>;
    ciphersTlsv13?: pulumi.Input<string>;
    customizedSslCiphers?: pulumi.Input<string>;
    customizedSslCiphersFlag?: pulumi.Input<string>;
    localCert?: pulumi.Input<string>;
    mkey?: pulumi.Input<string>;
    newSslCiphersLong?: pulumi.Input<string>;
    renegotiatePeriod?: pulumi.Input<string>;
    renegotiateSize?: pulumi.Input<string>;
    renegotiation?: pulumi.Input<string>;
    renegotiationDenyAction?: pulumi.Input<string>;
    rfc7919Comply?: pulumi.Input<string>;
    secureRenegotiation?: pulumi.Input<string>;
    serverOcspStapling?: pulumi.Input<string>;
    sessionReuseFlag?: pulumi.Input<string>;
    sessionReuseLimit?: pulumi.Input<string>;
    sni?: pulumi.Input<string>;
    sniForwardFlag?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    supportedGroups?: pulumi.Input<string>;
    tlsTicketFlag?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalanceRealServerSslProfile resource.
 */
export interface LoadBalanceRealServerSslProfileArgs {
    allowSslVersions?: pulumi.Input<string>;
    certVerify?: pulumi.Input<string>;
    ciphersTlsv13?: pulumi.Input<string>;
    customizedSslCiphers?: pulumi.Input<string>;
    customizedSslCiphersFlag?: pulumi.Input<string>;
    localCert?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    newSslCiphersLong?: pulumi.Input<string>;
    renegotiatePeriod?: pulumi.Input<string>;
    renegotiateSize?: pulumi.Input<string>;
    renegotiation?: pulumi.Input<string>;
    renegotiationDenyAction?: pulumi.Input<string>;
    rfc7919Comply?: pulumi.Input<string>;
    secureRenegotiation?: pulumi.Input<string>;
    serverOcspStapling?: pulumi.Input<string>;
    sessionReuseFlag?: pulumi.Input<string>;
    sessionReuseLimit?: pulumi.Input<string>;
    sni?: pulumi.Input<string>;
    sniForwardFlag?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    supportedGroups?: pulumi.Input<string>;
    tlsTicketFlag?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}
