// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadBalanceCompression extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalanceCompression resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalanceCompressionState, opts?: pulumi.CustomResourceOptions): LoadBalanceCompression {
        return new LoadBalanceCompression(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/loadBalanceCompression:LoadBalanceCompression';

    /**
     * Returns true if the given object is an instance of LoadBalanceCompression.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalanceCompression {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalanceCompression.__pulumiType;
    }

    public readonly cpuLimit!: pulumi.Output<string>;
    public readonly gzipMemoryLevel!: pulumi.Output<string>;
    public readonly gzipWindowSize!: pulumi.Output<string>;
    public readonly level!: pulumi.Output<string>;
    public readonly maxCpuUsage!: pulumi.Output<string>;
    public readonly method!: pulumi.Output<string>;
    public readonly minContentLength!: pulumi.Output<string>;
    public readonly mkey!: pulumi.Output<string>;
    public readonly uriListType!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string | undefined>;

    /**
     * Create a LoadBalanceCompression resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalanceCompressionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalanceCompressionArgs | LoadBalanceCompressionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalanceCompressionState | undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["gzipMemoryLevel"] = state ? state.gzipMemoryLevel : undefined;
            resourceInputs["gzipWindowSize"] = state ? state.gzipWindowSize : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["maxCpuUsage"] = state ? state.maxCpuUsage : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["minContentLength"] = state ? state.minContentLength : undefined;
            resourceInputs["mkey"] = state ? state.mkey : undefined;
            resourceInputs["uriListType"] = state ? state.uriListType : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
        } else {
            const args = argsOrState as LoadBalanceCompressionArgs | undefined;
            if ((!args || args.mkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mkey'");
            }
            resourceInputs["cpuLimit"] = args ? args.cpuLimit : undefined;
            resourceInputs["gzipMemoryLevel"] = args ? args.gzipMemoryLevel : undefined;
            resourceInputs["gzipWindowSize"] = args ? args.gzipWindowSize : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["maxCpuUsage"] = args ? args.maxCpuUsage : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["minContentLength"] = args ? args.minContentLength : undefined;
            resourceInputs["mkey"] = args ? args.mkey : undefined;
            resourceInputs["uriListType"] = args ? args.uriListType : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalanceCompression.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalanceCompression resources.
 */
export interface LoadBalanceCompressionState {
    cpuLimit?: pulumi.Input<string>;
    gzipMemoryLevel?: pulumi.Input<string>;
    gzipWindowSize?: pulumi.Input<string>;
    level?: pulumi.Input<string>;
    maxCpuUsage?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    minContentLength?: pulumi.Input<string>;
    mkey?: pulumi.Input<string>;
    uriListType?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalanceCompression resource.
 */
export interface LoadBalanceCompressionArgs {
    cpuLimit?: pulumi.Input<string>;
    gzipMemoryLevel?: pulumi.Input<string>;
    gzipWindowSize?: pulumi.Input<string>;
    level?: pulumi.Input<string>;
    maxCpuUsage?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    minContentLength?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    uriListType?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}
