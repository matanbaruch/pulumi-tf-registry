// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemVdom extends pulumi.CustomResource {
    /**
     * Get an existing SystemVdom resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemVdomState, opts?: pulumi.CustomResourceOptions): SystemVdom {
        return new SystemVdom(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/systemVdom:SystemVdom';

    /**
     * Returns true if the given object is an instance of SystemVdom.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemVdom {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemVdom.__pulumiType;
    }

    public readonly concurrentsession!: pulumi.Output<string>;
    public readonly ep!: pulumi.Output<string>;
    public readonly hc!: pulumi.Output<string>;
    public readonly inbound!: pulumi.Output<string>;
    public readonly l4cps!: pulumi.Output<string>;
    public readonly l7cps!: pulumi.Output<string>;
    public readonly l7rps!: pulumi.Output<string>;
    public readonly lu!: pulumi.Output<string>;
    public readonly mkey!: pulumi.Output<string>;
    public readonly outbound!: pulumi.Output<string>;
    public readonly rs!: pulumi.Output<string>;
    public readonly sp!: pulumi.Output<string>;
    public readonly sslcps!: pulumi.Output<string>;
    public readonly sslthroughput!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly ug!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string | undefined>;
    public readonly vs!: pulumi.Output<string>;

    /**
     * Create a SystemVdom resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemVdomArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemVdomArgs | SystemVdomState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemVdomState | undefined;
            resourceInputs["concurrentsession"] = state ? state.concurrentsession : undefined;
            resourceInputs["ep"] = state ? state.ep : undefined;
            resourceInputs["hc"] = state ? state.hc : undefined;
            resourceInputs["inbound"] = state ? state.inbound : undefined;
            resourceInputs["l4cps"] = state ? state.l4cps : undefined;
            resourceInputs["l7cps"] = state ? state.l7cps : undefined;
            resourceInputs["l7rps"] = state ? state.l7rps : undefined;
            resourceInputs["lu"] = state ? state.lu : undefined;
            resourceInputs["mkey"] = state ? state.mkey : undefined;
            resourceInputs["outbound"] = state ? state.outbound : undefined;
            resourceInputs["rs"] = state ? state.rs : undefined;
            resourceInputs["sp"] = state ? state.sp : undefined;
            resourceInputs["sslcps"] = state ? state.sslcps : undefined;
            resourceInputs["sslthroughput"] = state ? state.sslthroughput : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["ug"] = state ? state.ug : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
            resourceInputs["vs"] = state ? state.vs : undefined;
        } else {
            const args = argsOrState as SystemVdomArgs | undefined;
            if ((!args || args.mkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mkey'");
            }
            resourceInputs["concurrentsession"] = args ? args.concurrentsession : undefined;
            resourceInputs["ep"] = args ? args.ep : undefined;
            resourceInputs["hc"] = args ? args.hc : undefined;
            resourceInputs["inbound"] = args ? args.inbound : undefined;
            resourceInputs["l4cps"] = args ? args.l4cps : undefined;
            resourceInputs["l7cps"] = args ? args.l7cps : undefined;
            resourceInputs["l7rps"] = args ? args.l7rps : undefined;
            resourceInputs["lu"] = args ? args.lu : undefined;
            resourceInputs["mkey"] = args ? args.mkey : undefined;
            resourceInputs["outbound"] = args ? args.outbound : undefined;
            resourceInputs["rs"] = args ? args.rs : undefined;
            resourceInputs["sp"] = args ? args.sp : undefined;
            resourceInputs["sslcps"] = args ? args.sslcps : undefined;
            resourceInputs["sslthroughput"] = args ? args.sslthroughput : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["ug"] = args ? args.ug : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
            resourceInputs["vs"] = args ? args.vs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemVdom.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemVdom resources.
 */
export interface SystemVdomState {
    concurrentsession?: pulumi.Input<string>;
    ep?: pulumi.Input<string>;
    hc?: pulumi.Input<string>;
    inbound?: pulumi.Input<string>;
    l4cps?: pulumi.Input<string>;
    l7cps?: pulumi.Input<string>;
    l7rps?: pulumi.Input<string>;
    lu?: pulumi.Input<string>;
    mkey?: pulumi.Input<string>;
    outbound?: pulumi.Input<string>;
    rs?: pulumi.Input<string>;
    sp?: pulumi.Input<string>;
    sslcps?: pulumi.Input<string>;
    sslthroughput?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    ug?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    vs?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemVdom resource.
 */
export interface SystemVdomArgs {
    concurrentsession?: pulumi.Input<string>;
    ep?: pulumi.Input<string>;
    hc?: pulumi.Input<string>;
    inbound?: pulumi.Input<string>;
    l4cps?: pulumi.Input<string>;
    l7cps?: pulumi.Input<string>;
    l7rps?: pulumi.Input<string>;
    lu?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    outbound?: pulumi.Input<string>;
    rs?: pulumi.Input<string>;
    sp?: pulumi.Input<string>;
    sslcps?: pulumi.Input<string>;
    sslthroughput?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    ug?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    vs?: pulumi.Input<string>;
}
