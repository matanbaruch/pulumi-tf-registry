// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadBalancePoolChildPoolMember extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancePoolChildPoolMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancePoolChildPoolMemberState, opts?: pulumi.CustomResourceOptions): LoadBalancePoolChildPoolMember {
        return new LoadBalancePoolChildPoolMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/loadBalancePoolChildPoolMember:LoadBalancePoolChildPoolMember';

    /**
     * Returns true if the given object is an instance of LoadBalancePoolChildPoolMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancePoolChildPoolMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancePoolChildPoolMember.__pulumiType;
    }

    public readonly address!: pulumi.Output<string>;
    public readonly address6!: pulumi.Output<string>;
    public readonly backup!: pulumi.Output<string>;
    public readonly connectionRateLimit!: pulumi.Output<string>;
    public readonly connlimit!: pulumi.Output<string>;
    public readonly cookie!: pulumi.Output<string>;
    public readonly hcStatus!: pulumi.Output<string>;
    public readonly healthCheckInherit!: pulumi.Output<string>;
    public readonly host!: pulumi.Output<string>;
    public readonly mHealthCheck!: pulumi.Output<string>;
    public readonly mHealthCheckList!: pulumi.Output<string>;
    public readonly mHealthCheckRelationship!: pulumi.Output<string>;
    public readonly mkey!: pulumi.Output<string>;
    public readonly modifyHost!: pulumi.Output<string>;
    public readonly mssqlReadOnly!: pulumi.Output<string>;
    public readonly mysqlGroupId!: pulumi.Output<string>;
    public readonly mysqlReadOnly!: pulumi.Output<string>;
    public readonly pkey!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<string>;
    public readonly proxyProtocol!: pulumi.Output<string>;
    public readonly realServerId!: pulumi.Output<string>;
    public readonly recover!: pulumi.Output<string>;
    public readonly rsProfile!: pulumi.Output<string>;
    public readonly rsProfileInherit!: pulumi.Output<string>;
    public readonly serverName!: pulumi.Output<string>;
    public readonly ssl!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string | undefined>;
    public readonly warmrate!: pulumi.Output<string>;
    public readonly warmup!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<string>;

    /**
     * Create a LoadBalancePoolChildPoolMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancePoolChildPoolMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancePoolChildPoolMemberArgs | LoadBalancePoolChildPoolMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancePoolChildPoolMemberState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["address6"] = state ? state.address6 : undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["connectionRateLimit"] = state ? state.connectionRateLimit : undefined;
            resourceInputs["connlimit"] = state ? state.connlimit : undefined;
            resourceInputs["cookie"] = state ? state.cookie : undefined;
            resourceInputs["hcStatus"] = state ? state.hcStatus : undefined;
            resourceInputs["healthCheckInherit"] = state ? state.healthCheckInherit : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["mHealthCheck"] = state ? state.mHealthCheck : undefined;
            resourceInputs["mHealthCheckList"] = state ? state.mHealthCheckList : undefined;
            resourceInputs["mHealthCheckRelationship"] = state ? state.mHealthCheckRelationship : undefined;
            resourceInputs["mkey"] = state ? state.mkey : undefined;
            resourceInputs["modifyHost"] = state ? state.modifyHost : undefined;
            resourceInputs["mssqlReadOnly"] = state ? state.mssqlReadOnly : undefined;
            resourceInputs["mysqlGroupId"] = state ? state.mysqlGroupId : undefined;
            resourceInputs["mysqlReadOnly"] = state ? state.mysqlReadOnly : undefined;
            resourceInputs["pkey"] = state ? state.pkey : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["proxyProtocol"] = state ? state.proxyProtocol : undefined;
            resourceInputs["realServerId"] = state ? state.realServerId : undefined;
            resourceInputs["recover"] = state ? state.recover : undefined;
            resourceInputs["rsProfile"] = state ? state.rsProfile : undefined;
            resourceInputs["rsProfileInherit"] = state ? state.rsProfileInherit : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
            resourceInputs["warmrate"] = state ? state.warmrate : undefined;
            resourceInputs["warmup"] = state ? state.warmup : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as LoadBalancePoolChildPoolMemberArgs | undefined;
            if ((!args || args.mkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mkey'");
            }
            if ((!args || args.pkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pkey'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["address6"] = args ? args.address6 : undefined;
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["connectionRateLimit"] = args ? args.connectionRateLimit : undefined;
            resourceInputs["connlimit"] = args ? args.connlimit : undefined;
            resourceInputs["cookie"] = args ? args.cookie : undefined;
            resourceInputs["hcStatus"] = args ? args.hcStatus : undefined;
            resourceInputs["healthCheckInherit"] = args ? args.healthCheckInherit : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["mHealthCheck"] = args ? args.mHealthCheck : undefined;
            resourceInputs["mHealthCheckList"] = args ? args.mHealthCheckList : undefined;
            resourceInputs["mHealthCheckRelationship"] = args ? args.mHealthCheckRelationship : undefined;
            resourceInputs["mkey"] = args ? args.mkey : undefined;
            resourceInputs["modifyHost"] = args ? args.modifyHost : undefined;
            resourceInputs["mssqlReadOnly"] = args ? args.mssqlReadOnly : undefined;
            resourceInputs["mysqlGroupId"] = args ? args.mysqlGroupId : undefined;
            resourceInputs["mysqlReadOnly"] = args ? args.mysqlReadOnly : undefined;
            resourceInputs["pkey"] = args ? args.pkey : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["proxyProtocol"] = args ? args.proxyProtocol : undefined;
            resourceInputs["realServerId"] = args ? args.realServerId : undefined;
            resourceInputs["recover"] = args ? args.recover : undefined;
            resourceInputs["rsProfile"] = args ? args.rsProfile : undefined;
            resourceInputs["rsProfileInherit"] = args ? args.rsProfileInherit : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
            resourceInputs["warmrate"] = args ? args.warmrate : undefined;
            resourceInputs["warmup"] = args ? args.warmup : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancePoolChildPoolMember.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancePoolChildPoolMember resources.
 */
export interface LoadBalancePoolChildPoolMemberState {
    address?: pulumi.Input<string>;
    address6?: pulumi.Input<string>;
    backup?: pulumi.Input<string>;
    connectionRateLimit?: pulumi.Input<string>;
    connlimit?: pulumi.Input<string>;
    cookie?: pulumi.Input<string>;
    hcStatus?: pulumi.Input<string>;
    healthCheckInherit?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    mHealthCheck?: pulumi.Input<string>;
    mHealthCheckList?: pulumi.Input<string>;
    mHealthCheckRelationship?: pulumi.Input<string>;
    mkey?: pulumi.Input<string>;
    modifyHost?: pulumi.Input<string>;
    mssqlReadOnly?: pulumi.Input<string>;
    mysqlGroupId?: pulumi.Input<string>;
    mysqlReadOnly?: pulumi.Input<string>;
    pkey?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    proxyProtocol?: pulumi.Input<string>;
    realServerId?: pulumi.Input<string>;
    recover?: pulumi.Input<string>;
    rsProfile?: pulumi.Input<string>;
    rsProfileInherit?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    warmrate?: pulumi.Input<string>;
    warmup?: pulumi.Input<string>;
    weight?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancePoolChildPoolMember resource.
 */
export interface LoadBalancePoolChildPoolMemberArgs {
    address?: pulumi.Input<string>;
    address6?: pulumi.Input<string>;
    backup?: pulumi.Input<string>;
    connectionRateLimit?: pulumi.Input<string>;
    connlimit?: pulumi.Input<string>;
    cookie?: pulumi.Input<string>;
    hcStatus?: pulumi.Input<string>;
    healthCheckInherit?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    mHealthCheck?: pulumi.Input<string>;
    mHealthCheckList?: pulumi.Input<string>;
    mHealthCheckRelationship?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    modifyHost?: pulumi.Input<string>;
    mssqlReadOnly?: pulumi.Input<string>;
    mysqlGroupId?: pulumi.Input<string>;
    mysqlReadOnly?: pulumi.Input<string>;
    pkey: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    proxyProtocol?: pulumi.Input<string>;
    realServerId?: pulumi.Input<string>;
    recover?: pulumi.Input<string>;
    rsProfile?: pulumi.Input<string>;
    rsProfileInherit?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    warmrate?: pulumi.Input<string>;
    warmup?: pulumi.Input<string>;
    weight?: pulumi.Input<string>;
}
