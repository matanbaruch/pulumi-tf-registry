// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecurityAntivirusProfile extends pulumi.CustomResource {
    /**
     * Get an existing SecurityAntivirusProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityAntivirusProfileState, opts?: pulumi.CustomResourceOptions): SecurityAntivirusProfile {
        return new SecurityAntivirusProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/securityAntivirusProfile:SecurityAntivirusProfile';

    /**
     * Returns true if the given object is an instance of SecurityAntivirusProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityAntivirusProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityAntivirusProfile.__pulumiType;
    }

    public readonly analyticsDb!: pulumi.Output<string>;
    public readonly analyticsMaxUpload!: pulumi.Output<string>;
    public readonly avBlockLog!: pulumi.Output<string>;
    public readonly avVirusLog!: pulumi.Output<string>;
    public readonly comments!: pulumi.Output<string>;
    public readonly emulator!: pulumi.Output<string>;
    public readonly ftgdAnalytics!: pulumi.Output<string>;
    public readonly mkey!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<string>;
    public readonly oversize!: pulumi.Output<string>;
    public readonly oversizeLimit!: pulumi.Output<string>;
    public readonly scanBzip2!: pulumi.Output<string>;
    public readonly streamingContentBypass!: pulumi.Output<string>;
    public readonly uncompNestLimit!: pulumi.Output<string>;
    public readonly uncompSizeLimit!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string | undefined>;

    /**
     * Create a SecurityAntivirusProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityAntivirusProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityAntivirusProfileArgs | SecurityAntivirusProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityAntivirusProfileState | undefined;
            resourceInputs["analyticsDb"] = state ? state.analyticsDb : undefined;
            resourceInputs["analyticsMaxUpload"] = state ? state.analyticsMaxUpload : undefined;
            resourceInputs["avBlockLog"] = state ? state.avBlockLog : undefined;
            resourceInputs["avVirusLog"] = state ? state.avVirusLog : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["emulator"] = state ? state.emulator : undefined;
            resourceInputs["ftgdAnalytics"] = state ? state.ftgdAnalytics : undefined;
            resourceInputs["mkey"] = state ? state.mkey : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["oversize"] = state ? state.oversize : undefined;
            resourceInputs["oversizeLimit"] = state ? state.oversizeLimit : undefined;
            resourceInputs["scanBzip2"] = state ? state.scanBzip2 : undefined;
            resourceInputs["streamingContentBypass"] = state ? state.streamingContentBypass : undefined;
            resourceInputs["uncompNestLimit"] = state ? state.uncompNestLimit : undefined;
            resourceInputs["uncompSizeLimit"] = state ? state.uncompSizeLimit : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
        } else {
            const args = argsOrState as SecurityAntivirusProfileArgs | undefined;
            if ((!args || args.mkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mkey'");
            }
            resourceInputs["analyticsDb"] = args ? args.analyticsDb : undefined;
            resourceInputs["analyticsMaxUpload"] = args ? args.analyticsMaxUpload : undefined;
            resourceInputs["avBlockLog"] = args ? args.avBlockLog : undefined;
            resourceInputs["avVirusLog"] = args ? args.avVirusLog : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["emulator"] = args ? args.emulator : undefined;
            resourceInputs["ftgdAnalytics"] = args ? args.ftgdAnalytics : undefined;
            resourceInputs["mkey"] = args ? args.mkey : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["oversize"] = args ? args.oversize : undefined;
            resourceInputs["oversizeLimit"] = args ? args.oversizeLimit : undefined;
            resourceInputs["scanBzip2"] = args ? args.scanBzip2 : undefined;
            resourceInputs["streamingContentBypass"] = args ? args.streamingContentBypass : undefined;
            resourceInputs["uncompNestLimit"] = args ? args.uncompNestLimit : undefined;
            resourceInputs["uncompSizeLimit"] = args ? args.uncompSizeLimit : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityAntivirusProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecurityAntivirusProfile resources.
 */
export interface SecurityAntivirusProfileState {
    analyticsDb?: pulumi.Input<string>;
    analyticsMaxUpload?: pulumi.Input<string>;
    avBlockLog?: pulumi.Input<string>;
    avVirusLog?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    ftgdAnalytics?: pulumi.Input<string>;
    mkey?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversize?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    streamingContentBypass?: pulumi.Input<string>;
    uncompNestLimit?: pulumi.Input<string>;
    uncompSizeLimit?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityAntivirusProfile resource.
 */
export interface SecurityAntivirusProfileArgs {
    analyticsDb?: pulumi.Input<string>;
    analyticsMaxUpload?: pulumi.Input<string>;
    avBlockLog?: pulumi.Input<string>;
    avVirusLog?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    ftgdAnalytics?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    oversize?: pulumi.Input<string>;
    oversizeLimit?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    streamingContentBypass?: pulumi.Input<string>;
    uncompNestLimit?: pulumi.Input<string>;
    uncompSizeLimit?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}
