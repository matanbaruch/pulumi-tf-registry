// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CaCertificateuploadArgs, CaCertificateuploadState } from "./caCertificateupload";
export type CaCertificateupload = import("./caCertificateupload").CaCertificateupload;
export const CaCertificateupload: typeof import("./caCertificateupload").CaCertificateupload = null as any;
utilities.lazyLoad(exports, ["CaCertificateupload"], () => require("./caCertificateupload"));

export { CertificateCrluploadArgs, CertificateCrluploadState } from "./certificateCrlupload";
export type CertificateCrlupload = import("./certificateCrlupload").CertificateCrlupload;
export const CertificateCrlupload: typeof import("./certificateCrlupload").CertificateCrlupload = null as any;
utilities.lazyLoad(exports, ["CertificateCrlupload"], () => require("./certificateCrlupload"));

export { CertificateIntmedCauploadArgs, CertificateIntmedCauploadState } from "./certificateIntmedCaupload";
export type CertificateIntmedCaupload = import("./certificateIntmedCaupload").CertificateIntmedCaupload;
export const CertificateIntmedCaupload: typeof import("./certificateIntmedCaupload").CertificateIntmedCaupload = null as any;
utilities.lazyLoad(exports, ["CertificateIntmedCaupload"], () => require("./certificateIntmedCaupload"));

export { ConfigSyncListArgs, ConfigSyncListState } from "./configSyncList";
export type ConfigSyncList = import("./configSyncList").ConfigSyncList;
export const ConfigSyncList: typeof import("./configSyncList").ConfigSyncList = null as any;
utilities.lazyLoad(exports, ["ConfigSyncList"], () => require("./configSyncList"));

export { FirewallNatSnatArgs, FirewallNatSnatState } from "./firewallNatSnat";
export type FirewallNatSnat = import("./firewallNatSnat").FirewallNatSnat;
export const FirewallNatSnat: typeof import("./firewallNatSnat").FirewallNatSnat = null as any;
utilities.lazyLoad(exports, ["FirewallNatSnat"], () => require("./firewallNatSnat"));

export { FirewallVipArgs, FirewallVipState } from "./firewallVip";
export type FirewallVip = import("./firewallVip").FirewallVip;
export const FirewallVip: typeof import("./firewallVip").FirewallVip = null as any;
utilities.lazyLoad(exports, ["FirewallVip"], () => require("./firewallVip"));

export { GetConfigSyncListArgs, GetConfigSyncListResult, GetConfigSyncListOutputArgs } from "./getConfigSyncList";
export const getConfigSyncList: typeof import("./getConfigSyncList").getConfigSyncList = null as any;
export const getConfigSyncListOutput: typeof import("./getConfigSyncList").getConfigSyncListOutput = null as any;
utilities.lazyLoad(exports, ["getConfigSyncList","getConfigSyncListOutput"], () => require("./getConfigSyncList"));

export { GetConfigSyncListlistArgs, GetConfigSyncListlistResult, GetConfigSyncListlistOutputArgs } from "./getConfigSyncListlist";
export const getConfigSyncListlist: typeof import("./getConfigSyncListlist").getConfigSyncListlist = null as any;
export const getConfigSyncListlistOutput: typeof import("./getConfigSyncListlist").getConfigSyncListlistOutput = null as any;
utilities.lazyLoad(exports, ["getConfigSyncListlist","getConfigSyncListlistOutput"], () => require("./getConfigSyncListlist"));

export { GetFirewallNatSnatArgs, GetFirewallNatSnatResult, GetFirewallNatSnatOutputArgs } from "./getFirewallNatSnat";
export const getFirewallNatSnat: typeof import("./getFirewallNatSnat").getFirewallNatSnat = null as any;
export const getFirewallNatSnatOutput: typeof import("./getFirewallNatSnat").getFirewallNatSnatOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallNatSnat","getFirewallNatSnatOutput"], () => require("./getFirewallNatSnat"));

export { GetFirewallNatSnatlistArgs, GetFirewallNatSnatlistResult, GetFirewallNatSnatlistOutputArgs } from "./getFirewallNatSnatlist";
export const getFirewallNatSnatlist: typeof import("./getFirewallNatSnatlist").getFirewallNatSnatlist = null as any;
export const getFirewallNatSnatlistOutput: typeof import("./getFirewallNatSnatlist").getFirewallNatSnatlistOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallNatSnatlist","getFirewallNatSnatlistOutput"], () => require("./getFirewallNatSnatlist"));

export { GetFirewallVipArgs, GetFirewallVipResult, GetFirewallVipOutputArgs } from "./getFirewallVip";
export const getFirewallVip: typeof import("./getFirewallVip").getFirewallVip = null as any;
export const getFirewallVipOutput: typeof import("./getFirewallVip").getFirewallVipOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallVip","getFirewallVipOutput"], () => require("./getFirewallVip"));

export { GetFirewallViplistArgs, GetFirewallViplistResult, GetFirewallViplistOutputArgs } from "./getFirewallViplist";
export const getFirewallViplist: typeof import("./getFirewallViplist").getFirewallViplist = null as any;
export const getFirewallViplistOutput: typeof import("./getFirewallViplist").getFirewallViplistOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallViplist","getFirewallViplistOutput"], () => require("./getFirewallViplist"));

export { GetJsonGenericApiArgs, GetJsonGenericApiResult, GetJsonGenericApiOutputArgs } from "./getJsonGenericApi";
export const getJsonGenericApi: typeof import("./getJsonGenericApi").getJsonGenericApi = null as any;
export const getJsonGenericApiOutput: typeof import("./getJsonGenericApi").getJsonGenericApiOutput = null as any;
utilities.lazyLoad(exports, ["getJsonGenericApi","getJsonGenericApiOutput"], () => require("./getJsonGenericApi"));

export { GetLoadBalanceAllowlistArgs, GetLoadBalanceAllowlistResult, GetLoadBalanceAllowlistOutputArgs } from "./getLoadBalanceAllowlist";
export const getLoadBalanceAllowlist: typeof import("./getLoadBalanceAllowlist").getLoadBalanceAllowlist = null as any;
export const getLoadBalanceAllowlistOutput: typeof import("./getLoadBalanceAllowlist").getLoadBalanceAllowlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceAllowlist","getLoadBalanceAllowlistOutput"], () => require("./getLoadBalanceAllowlist"));

export { GetLoadBalanceAllowlistlistArgs, GetLoadBalanceAllowlistlistResult, GetLoadBalanceAllowlistlistOutputArgs } from "./getLoadBalanceAllowlistlist";
export const getLoadBalanceAllowlistlist: typeof import("./getLoadBalanceAllowlistlist").getLoadBalanceAllowlistlist = null as any;
export const getLoadBalanceAllowlistlistOutput: typeof import("./getLoadBalanceAllowlistlist").getLoadBalanceAllowlistlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceAllowlistlist","getLoadBalanceAllowlistlistOutput"], () => require("./getLoadBalanceAllowlistlist"));

export { GetLoadBalanceAuthPolicyArgs, GetLoadBalanceAuthPolicyResult, GetLoadBalanceAuthPolicyOutputArgs } from "./getLoadBalanceAuthPolicy";
export const getLoadBalanceAuthPolicy: typeof import("./getLoadBalanceAuthPolicy").getLoadBalanceAuthPolicy = null as any;
export const getLoadBalanceAuthPolicyOutput: typeof import("./getLoadBalanceAuthPolicy").getLoadBalanceAuthPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceAuthPolicy","getLoadBalanceAuthPolicyOutput"], () => require("./getLoadBalanceAuthPolicy"));

export { GetLoadBalanceAuthPolicylistArgs, GetLoadBalanceAuthPolicylistResult, GetLoadBalanceAuthPolicylistOutputArgs } from "./getLoadBalanceAuthPolicylist";
export const getLoadBalanceAuthPolicylist: typeof import("./getLoadBalanceAuthPolicylist").getLoadBalanceAuthPolicylist = null as any;
export const getLoadBalanceAuthPolicylistOutput: typeof import("./getLoadBalanceAuthPolicylist").getLoadBalanceAuthPolicylistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceAuthPolicylist","getLoadBalanceAuthPolicylistOutput"], () => require("./getLoadBalanceAuthPolicylist"));

export { GetLoadBalanceCachingArgs, GetLoadBalanceCachingResult, GetLoadBalanceCachingOutputArgs } from "./getLoadBalanceCaching";
export const getLoadBalanceCaching: typeof import("./getLoadBalanceCaching").getLoadBalanceCaching = null as any;
export const getLoadBalanceCachingOutput: typeof import("./getLoadBalanceCaching").getLoadBalanceCachingOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCaching","getLoadBalanceCachingOutput"], () => require("./getLoadBalanceCaching"));

export { GetLoadBalanceCachingChildDynCacheListArgs, GetLoadBalanceCachingChildDynCacheListResult, GetLoadBalanceCachingChildDynCacheListOutputArgs } from "./getLoadBalanceCachingChildDynCacheList";
export const getLoadBalanceCachingChildDynCacheList: typeof import("./getLoadBalanceCachingChildDynCacheList").getLoadBalanceCachingChildDynCacheList = null as any;
export const getLoadBalanceCachingChildDynCacheListOutput: typeof import("./getLoadBalanceCachingChildDynCacheList").getLoadBalanceCachingChildDynCacheListOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCachingChildDynCacheList","getLoadBalanceCachingChildDynCacheListOutput"], () => require("./getLoadBalanceCachingChildDynCacheList"));

export { GetLoadBalanceCachingChildDynCacheListlistArgs, GetLoadBalanceCachingChildDynCacheListlistResult, GetLoadBalanceCachingChildDynCacheListlistOutputArgs } from "./getLoadBalanceCachingChildDynCacheListlist";
export const getLoadBalanceCachingChildDynCacheListlist: typeof import("./getLoadBalanceCachingChildDynCacheListlist").getLoadBalanceCachingChildDynCacheListlist = null as any;
export const getLoadBalanceCachingChildDynCacheListlistOutput: typeof import("./getLoadBalanceCachingChildDynCacheListlist").getLoadBalanceCachingChildDynCacheListlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCachingChildDynCacheListlist","getLoadBalanceCachingChildDynCacheListlistOutput"], () => require("./getLoadBalanceCachingChildDynCacheListlist"));

export { GetLoadBalanceCachingChildUriExcludeListArgs, GetLoadBalanceCachingChildUriExcludeListResult, GetLoadBalanceCachingChildUriExcludeListOutputArgs } from "./getLoadBalanceCachingChildUriExcludeList";
export const getLoadBalanceCachingChildUriExcludeList: typeof import("./getLoadBalanceCachingChildUriExcludeList").getLoadBalanceCachingChildUriExcludeList = null as any;
export const getLoadBalanceCachingChildUriExcludeListOutput: typeof import("./getLoadBalanceCachingChildUriExcludeList").getLoadBalanceCachingChildUriExcludeListOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCachingChildUriExcludeList","getLoadBalanceCachingChildUriExcludeListOutput"], () => require("./getLoadBalanceCachingChildUriExcludeList"));

export { GetLoadBalanceCachingChildUriExcludeListlistArgs, GetLoadBalanceCachingChildUriExcludeListlistResult, GetLoadBalanceCachingChildUriExcludeListlistOutputArgs } from "./getLoadBalanceCachingChildUriExcludeListlist";
export const getLoadBalanceCachingChildUriExcludeListlist: typeof import("./getLoadBalanceCachingChildUriExcludeListlist").getLoadBalanceCachingChildUriExcludeListlist = null as any;
export const getLoadBalanceCachingChildUriExcludeListlistOutput: typeof import("./getLoadBalanceCachingChildUriExcludeListlist").getLoadBalanceCachingChildUriExcludeListlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCachingChildUriExcludeListlist","getLoadBalanceCachingChildUriExcludeListlistOutput"], () => require("./getLoadBalanceCachingChildUriExcludeListlist"));

export { GetLoadBalanceCachinglistArgs, GetLoadBalanceCachinglistResult, GetLoadBalanceCachinglistOutputArgs } from "./getLoadBalanceCachinglist";
export const getLoadBalanceCachinglist: typeof import("./getLoadBalanceCachinglist").getLoadBalanceCachinglist = null as any;
export const getLoadBalanceCachinglistOutput: typeof import("./getLoadBalanceCachinglist").getLoadBalanceCachinglistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCachinglist","getLoadBalanceCachinglistOutput"], () => require("./getLoadBalanceCachinglist"));

export { GetLoadBalanceCaptchaProfileArgs, GetLoadBalanceCaptchaProfileResult, GetLoadBalanceCaptchaProfileOutputArgs } from "./getLoadBalanceCaptchaProfile";
export const getLoadBalanceCaptchaProfile: typeof import("./getLoadBalanceCaptchaProfile").getLoadBalanceCaptchaProfile = null as any;
export const getLoadBalanceCaptchaProfileOutput: typeof import("./getLoadBalanceCaptchaProfile").getLoadBalanceCaptchaProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCaptchaProfile","getLoadBalanceCaptchaProfileOutput"], () => require("./getLoadBalanceCaptchaProfile"));

export { GetLoadBalanceCaptchaProfilelistArgs, GetLoadBalanceCaptchaProfilelistResult, GetLoadBalanceCaptchaProfilelistOutputArgs } from "./getLoadBalanceCaptchaProfilelist";
export const getLoadBalanceCaptchaProfilelist: typeof import("./getLoadBalanceCaptchaProfilelist").getLoadBalanceCaptchaProfilelist = null as any;
export const getLoadBalanceCaptchaProfilelistOutput: typeof import("./getLoadBalanceCaptchaProfilelist").getLoadBalanceCaptchaProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCaptchaProfilelist","getLoadBalanceCaptchaProfilelistOutput"], () => require("./getLoadBalanceCaptchaProfilelist"));

export { GetLoadBalanceCertificateCachingArgs, GetLoadBalanceCertificateCachingResult, GetLoadBalanceCertificateCachingOutputArgs } from "./getLoadBalanceCertificateCaching";
export const getLoadBalanceCertificateCaching: typeof import("./getLoadBalanceCertificateCaching").getLoadBalanceCertificateCaching = null as any;
export const getLoadBalanceCertificateCachingOutput: typeof import("./getLoadBalanceCertificateCaching").getLoadBalanceCertificateCachingOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCertificateCaching","getLoadBalanceCertificateCachingOutput"], () => require("./getLoadBalanceCertificateCaching"));

export { GetLoadBalanceCertificateCachinglistArgs, GetLoadBalanceCertificateCachinglistResult, GetLoadBalanceCertificateCachinglistOutputArgs } from "./getLoadBalanceCertificateCachinglist";
export const getLoadBalanceCertificateCachinglist: typeof import("./getLoadBalanceCertificateCachinglist").getLoadBalanceCertificateCachinglist = null as any;
export const getLoadBalanceCertificateCachinglistOutput: typeof import("./getLoadBalanceCertificateCachinglist").getLoadBalanceCertificateCachinglistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCertificateCachinglist","getLoadBalanceCertificateCachinglistOutput"], () => require("./getLoadBalanceCertificateCachinglist"));

export { GetLoadBalanceClientSslProfileArgs, GetLoadBalanceClientSslProfileResult, GetLoadBalanceClientSslProfileOutputArgs } from "./getLoadBalanceClientSslProfile";
export const getLoadBalanceClientSslProfile: typeof import("./getLoadBalanceClientSslProfile").getLoadBalanceClientSslProfile = null as any;
export const getLoadBalanceClientSslProfileOutput: typeof import("./getLoadBalanceClientSslProfile").getLoadBalanceClientSslProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceClientSslProfile","getLoadBalanceClientSslProfileOutput"], () => require("./getLoadBalanceClientSslProfile"));

export { GetLoadBalanceClientSslProfilelistArgs, GetLoadBalanceClientSslProfilelistResult, GetLoadBalanceClientSslProfilelistOutputArgs } from "./getLoadBalanceClientSslProfilelist";
export const getLoadBalanceClientSslProfilelist: typeof import("./getLoadBalanceClientSslProfilelist").getLoadBalanceClientSslProfilelist = null as any;
export const getLoadBalanceClientSslProfilelistOutput: typeof import("./getLoadBalanceClientSslProfilelist").getLoadBalanceClientSslProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceClientSslProfilelist","getLoadBalanceClientSslProfilelistOutput"], () => require("./getLoadBalanceClientSslProfilelist"));

export { GetLoadBalanceClonePoolArgs, GetLoadBalanceClonePoolResult, GetLoadBalanceClonePoolOutputArgs } from "./getLoadBalanceClonePool";
export const getLoadBalanceClonePool: typeof import("./getLoadBalanceClonePool").getLoadBalanceClonePool = null as any;
export const getLoadBalanceClonePoolOutput: typeof import("./getLoadBalanceClonePool").getLoadBalanceClonePoolOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceClonePool","getLoadBalanceClonePoolOutput"], () => require("./getLoadBalanceClonePool"));

export { GetLoadBalanceClonePoolChildPoolMemberArgs, GetLoadBalanceClonePoolChildPoolMemberResult, GetLoadBalanceClonePoolChildPoolMemberOutputArgs } from "./getLoadBalanceClonePoolChildPoolMember";
export const getLoadBalanceClonePoolChildPoolMember: typeof import("./getLoadBalanceClonePoolChildPoolMember").getLoadBalanceClonePoolChildPoolMember = null as any;
export const getLoadBalanceClonePoolChildPoolMemberOutput: typeof import("./getLoadBalanceClonePoolChildPoolMember").getLoadBalanceClonePoolChildPoolMemberOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceClonePoolChildPoolMember","getLoadBalanceClonePoolChildPoolMemberOutput"], () => require("./getLoadBalanceClonePoolChildPoolMember"));

export { GetLoadBalanceClonePoolChildPoolMemberlistArgs, GetLoadBalanceClonePoolChildPoolMemberlistResult, GetLoadBalanceClonePoolChildPoolMemberlistOutputArgs } from "./getLoadBalanceClonePoolChildPoolMemberlist";
export const getLoadBalanceClonePoolChildPoolMemberlist: typeof import("./getLoadBalanceClonePoolChildPoolMemberlist").getLoadBalanceClonePoolChildPoolMemberlist = null as any;
export const getLoadBalanceClonePoolChildPoolMemberlistOutput: typeof import("./getLoadBalanceClonePoolChildPoolMemberlist").getLoadBalanceClonePoolChildPoolMemberlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceClonePoolChildPoolMemberlist","getLoadBalanceClonePoolChildPoolMemberlistOutput"], () => require("./getLoadBalanceClonePoolChildPoolMemberlist"));

export { GetLoadBalanceClonePoollistArgs, GetLoadBalanceClonePoollistResult, GetLoadBalanceClonePoollistOutputArgs } from "./getLoadBalanceClonePoollist";
export const getLoadBalanceClonePoollist: typeof import("./getLoadBalanceClonePoollist").getLoadBalanceClonePoollist = null as any;
export const getLoadBalanceClonePoollistOutput: typeof import("./getLoadBalanceClonePoollist").getLoadBalanceClonePoollistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceClonePoollist","getLoadBalanceClonePoollistOutput"], () => require("./getLoadBalanceClonePoollist"));

export { GetLoadBalanceCompressionArgs, GetLoadBalanceCompressionResult, GetLoadBalanceCompressionOutputArgs } from "./getLoadBalanceCompression";
export const getLoadBalanceCompression: typeof import("./getLoadBalanceCompression").getLoadBalanceCompression = null as any;
export const getLoadBalanceCompressionOutput: typeof import("./getLoadBalanceCompression").getLoadBalanceCompressionOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCompression","getLoadBalanceCompressionOutput"], () => require("./getLoadBalanceCompression"));

export { GetLoadBalanceCompressionChildContentTypesArgs, GetLoadBalanceCompressionChildContentTypesResult, GetLoadBalanceCompressionChildContentTypesOutputArgs } from "./getLoadBalanceCompressionChildContentTypes";
export const getLoadBalanceCompressionChildContentTypes: typeof import("./getLoadBalanceCompressionChildContentTypes").getLoadBalanceCompressionChildContentTypes = null as any;
export const getLoadBalanceCompressionChildContentTypesOutput: typeof import("./getLoadBalanceCompressionChildContentTypes").getLoadBalanceCompressionChildContentTypesOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCompressionChildContentTypes","getLoadBalanceCompressionChildContentTypesOutput"], () => require("./getLoadBalanceCompressionChildContentTypes"));

export { GetLoadBalanceCompressionChildContentTypeslistArgs, GetLoadBalanceCompressionChildContentTypeslistResult, GetLoadBalanceCompressionChildContentTypeslistOutputArgs } from "./getLoadBalanceCompressionChildContentTypeslist";
export const getLoadBalanceCompressionChildContentTypeslist: typeof import("./getLoadBalanceCompressionChildContentTypeslist").getLoadBalanceCompressionChildContentTypeslist = null as any;
export const getLoadBalanceCompressionChildContentTypeslistOutput: typeof import("./getLoadBalanceCompressionChildContentTypeslist").getLoadBalanceCompressionChildContentTypeslistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCompressionChildContentTypeslist","getLoadBalanceCompressionChildContentTypeslistOutput"], () => require("./getLoadBalanceCompressionChildContentTypeslist"));

export { GetLoadBalanceCompressionChildUriListArgs, GetLoadBalanceCompressionChildUriListResult, GetLoadBalanceCompressionChildUriListOutputArgs } from "./getLoadBalanceCompressionChildUriList";
export const getLoadBalanceCompressionChildUriList: typeof import("./getLoadBalanceCompressionChildUriList").getLoadBalanceCompressionChildUriList = null as any;
export const getLoadBalanceCompressionChildUriListOutput: typeof import("./getLoadBalanceCompressionChildUriList").getLoadBalanceCompressionChildUriListOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCompressionChildUriList","getLoadBalanceCompressionChildUriListOutput"], () => require("./getLoadBalanceCompressionChildUriList"));

export { GetLoadBalanceCompressionChildUriListlistArgs, GetLoadBalanceCompressionChildUriListlistResult, GetLoadBalanceCompressionChildUriListlistOutputArgs } from "./getLoadBalanceCompressionChildUriListlist";
export const getLoadBalanceCompressionChildUriListlist: typeof import("./getLoadBalanceCompressionChildUriListlist").getLoadBalanceCompressionChildUriListlist = null as any;
export const getLoadBalanceCompressionChildUriListlistOutput: typeof import("./getLoadBalanceCompressionChildUriListlist").getLoadBalanceCompressionChildUriListlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCompressionChildUriListlist","getLoadBalanceCompressionChildUriListlistOutput"], () => require("./getLoadBalanceCompressionChildUriListlist"));

export { GetLoadBalanceCompressionlistArgs, GetLoadBalanceCompressionlistResult, GetLoadBalanceCompressionlistOutputArgs } from "./getLoadBalanceCompressionlist";
export const getLoadBalanceCompressionlist: typeof import("./getLoadBalanceCompressionlist").getLoadBalanceCompressionlist = null as any;
export const getLoadBalanceCompressionlistOutput: typeof import("./getLoadBalanceCompressionlist").getLoadBalanceCompressionlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceCompressionlist","getLoadBalanceCompressionlistOutput"], () => require("./getLoadBalanceCompressionlist"));

export { GetLoadBalanceContentRewritingArgs, GetLoadBalanceContentRewritingResult, GetLoadBalanceContentRewritingOutputArgs } from "./getLoadBalanceContentRewriting";
export const getLoadBalanceContentRewriting: typeof import("./getLoadBalanceContentRewriting").getLoadBalanceContentRewriting = null as any;
export const getLoadBalanceContentRewritingOutput: typeof import("./getLoadBalanceContentRewriting").getLoadBalanceContentRewritingOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceContentRewriting","getLoadBalanceContentRewritingOutput"], () => require("./getLoadBalanceContentRewriting"));

export { GetLoadBalanceContentRewritingChildMatchConditionArgs, GetLoadBalanceContentRewritingChildMatchConditionResult, GetLoadBalanceContentRewritingChildMatchConditionOutputArgs } from "./getLoadBalanceContentRewritingChildMatchCondition";
export const getLoadBalanceContentRewritingChildMatchCondition: typeof import("./getLoadBalanceContentRewritingChildMatchCondition").getLoadBalanceContentRewritingChildMatchCondition = null as any;
export const getLoadBalanceContentRewritingChildMatchConditionOutput: typeof import("./getLoadBalanceContentRewritingChildMatchCondition").getLoadBalanceContentRewritingChildMatchConditionOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceContentRewritingChildMatchCondition","getLoadBalanceContentRewritingChildMatchConditionOutput"], () => require("./getLoadBalanceContentRewritingChildMatchCondition"));

export { GetLoadBalanceContentRewritingChildMatchConditionlistArgs, GetLoadBalanceContentRewritingChildMatchConditionlistResult, GetLoadBalanceContentRewritingChildMatchConditionlistOutputArgs } from "./getLoadBalanceContentRewritingChildMatchConditionlist";
export const getLoadBalanceContentRewritingChildMatchConditionlist: typeof import("./getLoadBalanceContentRewritingChildMatchConditionlist").getLoadBalanceContentRewritingChildMatchConditionlist = null as any;
export const getLoadBalanceContentRewritingChildMatchConditionlistOutput: typeof import("./getLoadBalanceContentRewritingChildMatchConditionlist").getLoadBalanceContentRewritingChildMatchConditionlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceContentRewritingChildMatchConditionlist","getLoadBalanceContentRewritingChildMatchConditionlistOutput"], () => require("./getLoadBalanceContentRewritingChildMatchConditionlist"));

export { GetLoadBalanceContentRewritinglistArgs, GetLoadBalanceContentRewritinglistResult, GetLoadBalanceContentRewritinglistOutputArgs } from "./getLoadBalanceContentRewritinglist";
export const getLoadBalanceContentRewritinglist: typeof import("./getLoadBalanceContentRewritinglist").getLoadBalanceContentRewritinglist = null as any;
export const getLoadBalanceContentRewritinglistOutput: typeof import("./getLoadBalanceContentRewritinglist").getLoadBalanceContentRewritinglistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceContentRewritinglist","getLoadBalanceContentRewritinglistOutput"], () => require("./getLoadBalanceContentRewritinglist"));

export { GetLoadBalanceContentRoutingArgs, GetLoadBalanceContentRoutingResult, GetLoadBalanceContentRoutingOutputArgs } from "./getLoadBalanceContentRouting";
export const getLoadBalanceContentRouting: typeof import("./getLoadBalanceContentRouting").getLoadBalanceContentRouting = null as any;
export const getLoadBalanceContentRoutingOutput: typeof import("./getLoadBalanceContentRouting").getLoadBalanceContentRoutingOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceContentRouting","getLoadBalanceContentRoutingOutput"], () => require("./getLoadBalanceContentRouting"));

export { GetLoadBalanceContentRoutingChildMatchConditionArgs, GetLoadBalanceContentRoutingChildMatchConditionResult, GetLoadBalanceContentRoutingChildMatchConditionOutputArgs } from "./getLoadBalanceContentRoutingChildMatchCondition";
export const getLoadBalanceContentRoutingChildMatchCondition: typeof import("./getLoadBalanceContentRoutingChildMatchCondition").getLoadBalanceContentRoutingChildMatchCondition = null as any;
export const getLoadBalanceContentRoutingChildMatchConditionOutput: typeof import("./getLoadBalanceContentRoutingChildMatchCondition").getLoadBalanceContentRoutingChildMatchConditionOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceContentRoutingChildMatchCondition","getLoadBalanceContentRoutingChildMatchConditionOutput"], () => require("./getLoadBalanceContentRoutingChildMatchCondition"));

export { GetLoadBalanceContentRoutingChildMatchConditionlistArgs, GetLoadBalanceContentRoutingChildMatchConditionlistResult, GetLoadBalanceContentRoutingChildMatchConditionlistOutputArgs } from "./getLoadBalanceContentRoutingChildMatchConditionlist";
export const getLoadBalanceContentRoutingChildMatchConditionlist: typeof import("./getLoadBalanceContentRoutingChildMatchConditionlist").getLoadBalanceContentRoutingChildMatchConditionlist = null as any;
export const getLoadBalanceContentRoutingChildMatchConditionlistOutput: typeof import("./getLoadBalanceContentRoutingChildMatchConditionlist").getLoadBalanceContentRoutingChildMatchConditionlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceContentRoutingChildMatchConditionlist","getLoadBalanceContentRoutingChildMatchConditionlistOutput"], () => require("./getLoadBalanceContentRoutingChildMatchConditionlist"));

export { GetLoadBalanceContentRoutinglistArgs, GetLoadBalanceContentRoutinglistResult, GetLoadBalanceContentRoutinglistOutputArgs } from "./getLoadBalanceContentRoutinglist";
export const getLoadBalanceContentRoutinglist: typeof import("./getLoadBalanceContentRoutinglist").getLoadBalanceContentRoutinglist = null as any;
export const getLoadBalanceContentRoutinglistOutput: typeof import("./getLoadBalanceContentRoutinglist").getLoadBalanceContentRoutinglistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceContentRoutinglist","getLoadBalanceContentRoutinglistOutput"], () => require("./getLoadBalanceContentRoutinglist"));

export { GetLoadBalanceDecompressionArgs, GetLoadBalanceDecompressionResult, GetLoadBalanceDecompressionOutputArgs } from "./getLoadBalanceDecompression";
export const getLoadBalanceDecompression: typeof import("./getLoadBalanceDecompression").getLoadBalanceDecompression = null as any;
export const getLoadBalanceDecompressionOutput: typeof import("./getLoadBalanceDecompression").getLoadBalanceDecompressionOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceDecompression","getLoadBalanceDecompressionOutput"], () => require("./getLoadBalanceDecompression"));

export { GetLoadBalanceDecompressionChildContentTypesArgs, GetLoadBalanceDecompressionChildContentTypesResult, GetLoadBalanceDecompressionChildContentTypesOutputArgs } from "./getLoadBalanceDecompressionChildContentTypes";
export const getLoadBalanceDecompressionChildContentTypes: typeof import("./getLoadBalanceDecompressionChildContentTypes").getLoadBalanceDecompressionChildContentTypes = null as any;
export const getLoadBalanceDecompressionChildContentTypesOutput: typeof import("./getLoadBalanceDecompressionChildContentTypes").getLoadBalanceDecompressionChildContentTypesOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceDecompressionChildContentTypes","getLoadBalanceDecompressionChildContentTypesOutput"], () => require("./getLoadBalanceDecompressionChildContentTypes"));

export { GetLoadBalanceDecompressionChildContentTypeslistArgs, GetLoadBalanceDecompressionChildContentTypeslistResult, GetLoadBalanceDecompressionChildContentTypeslistOutputArgs } from "./getLoadBalanceDecompressionChildContentTypeslist";
export const getLoadBalanceDecompressionChildContentTypeslist: typeof import("./getLoadBalanceDecompressionChildContentTypeslist").getLoadBalanceDecompressionChildContentTypeslist = null as any;
export const getLoadBalanceDecompressionChildContentTypeslistOutput: typeof import("./getLoadBalanceDecompressionChildContentTypeslist").getLoadBalanceDecompressionChildContentTypeslistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceDecompressionChildContentTypeslist","getLoadBalanceDecompressionChildContentTypeslistOutput"], () => require("./getLoadBalanceDecompressionChildContentTypeslist"));

export { GetLoadBalanceDecompressionChildUriListArgs, GetLoadBalanceDecompressionChildUriListResult, GetLoadBalanceDecompressionChildUriListOutputArgs } from "./getLoadBalanceDecompressionChildUriList";
export const getLoadBalanceDecompressionChildUriList: typeof import("./getLoadBalanceDecompressionChildUriList").getLoadBalanceDecompressionChildUriList = null as any;
export const getLoadBalanceDecompressionChildUriListOutput: typeof import("./getLoadBalanceDecompressionChildUriList").getLoadBalanceDecompressionChildUriListOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceDecompressionChildUriList","getLoadBalanceDecompressionChildUriListOutput"], () => require("./getLoadBalanceDecompressionChildUriList"));

export { GetLoadBalanceDecompressionChildUriListlistArgs, GetLoadBalanceDecompressionChildUriListlistResult, GetLoadBalanceDecompressionChildUriListlistOutputArgs } from "./getLoadBalanceDecompressionChildUriListlist";
export const getLoadBalanceDecompressionChildUriListlist: typeof import("./getLoadBalanceDecompressionChildUriListlist").getLoadBalanceDecompressionChildUriListlist = null as any;
export const getLoadBalanceDecompressionChildUriListlistOutput: typeof import("./getLoadBalanceDecompressionChildUriListlist").getLoadBalanceDecompressionChildUriListlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceDecompressionChildUriListlist","getLoadBalanceDecompressionChildUriListlistOutput"], () => require("./getLoadBalanceDecompressionChildUriListlist"));

export { GetLoadBalanceDecompressionlistArgs, GetLoadBalanceDecompressionlistResult, GetLoadBalanceDecompressionlistOutputArgs } from "./getLoadBalanceDecompressionlist";
export const getLoadBalanceDecompressionlist: typeof import("./getLoadBalanceDecompressionlist").getLoadBalanceDecompressionlist = null as any;
export const getLoadBalanceDecompressionlistOutput: typeof import("./getLoadBalanceDecompressionlist").getLoadBalanceDecompressionlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceDecompressionlist","getLoadBalanceDecompressionlistOutput"], () => require("./getLoadBalanceDecompressionlist"));

export { GetLoadBalanceErrorPageArgs, GetLoadBalanceErrorPageResult, GetLoadBalanceErrorPageOutputArgs } from "./getLoadBalanceErrorPage";
export const getLoadBalanceErrorPage: typeof import("./getLoadBalanceErrorPage").getLoadBalanceErrorPage = null as any;
export const getLoadBalanceErrorPageOutput: typeof import("./getLoadBalanceErrorPage").getLoadBalanceErrorPageOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceErrorPage","getLoadBalanceErrorPageOutput"], () => require("./getLoadBalanceErrorPage"));

export { GetLoadBalanceErrorPagelistArgs, GetLoadBalanceErrorPagelistResult, GetLoadBalanceErrorPagelistOutputArgs } from "./getLoadBalanceErrorPagelist";
export const getLoadBalanceErrorPagelist: typeof import("./getLoadBalanceErrorPagelist").getLoadBalanceErrorPagelist = null as any;
export const getLoadBalanceErrorPagelistOutput: typeof import("./getLoadBalanceErrorPagelist").getLoadBalanceErrorPagelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceErrorPagelist","getLoadBalanceErrorPagelistOutput"], () => require("./getLoadBalanceErrorPagelist"));

export { GetLoadBalanceGeoipListArgs, GetLoadBalanceGeoipListResult, GetLoadBalanceGeoipListOutputArgs } from "./getLoadBalanceGeoipList";
export const getLoadBalanceGeoipList: typeof import("./getLoadBalanceGeoipList").getLoadBalanceGeoipList = null as any;
export const getLoadBalanceGeoipListOutput: typeof import("./getLoadBalanceGeoipList").getLoadBalanceGeoipListOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceGeoipList","getLoadBalanceGeoipListOutput"], () => require("./getLoadBalanceGeoipList"));

export { GetLoadBalanceGeoipListlistArgs, GetLoadBalanceGeoipListlistResult, GetLoadBalanceGeoipListlistOutputArgs } from "./getLoadBalanceGeoipListlist";
export const getLoadBalanceGeoipListlist: typeof import("./getLoadBalanceGeoipListlist").getLoadBalanceGeoipListlist = null as any;
export const getLoadBalanceGeoipListlistOutput: typeof import("./getLoadBalanceGeoipListlist").getLoadBalanceGeoipListlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceGeoipListlist","getLoadBalanceGeoipListlistOutput"], () => require("./getLoadBalanceGeoipListlist"));

export { GetLoadBalanceHttp2ProfileArgs, GetLoadBalanceHttp2ProfileResult, GetLoadBalanceHttp2ProfileOutputArgs } from "./getLoadBalanceHttp2Profile";
export const getLoadBalanceHttp2Profile: typeof import("./getLoadBalanceHttp2Profile").getLoadBalanceHttp2Profile = null as any;
export const getLoadBalanceHttp2ProfileOutput: typeof import("./getLoadBalanceHttp2Profile").getLoadBalanceHttp2ProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceHttp2Profile","getLoadBalanceHttp2ProfileOutput"], () => require("./getLoadBalanceHttp2Profile"));

export { GetLoadBalanceHttp2ProfilelistArgs, GetLoadBalanceHttp2ProfilelistResult, GetLoadBalanceHttp2ProfilelistOutputArgs } from "./getLoadBalanceHttp2Profilelist";
export const getLoadBalanceHttp2Profilelist: typeof import("./getLoadBalanceHttp2Profilelist").getLoadBalanceHttp2Profilelist = null as any;
export const getLoadBalanceHttp2ProfilelistOutput: typeof import("./getLoadBalanceHttp2Profilelist").getLoadBalanceHttp2ProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceHttp2Profilelist","getLoadBalanceHttp2ProfilelistOutput"], () => require("./getLoadBalanceHttp2Profilelist"));

export { GetLoadBalanceIppoolArgs, GetLoadBalanceIppoolResult, GetLoadBalanceIppoolOutputArgs } from "./getLoadBalanceIppool";
export const getLoadBalanceIppool: typeof import("./getLoadBalanceIppool").getLoadBalanceIppool = null as any;
export const getLoadBalanceIppoolOutput: typeof import("./getLoadBalanceIppool").getLoadBalanceIppoolOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceIppool","getLoadBalanceIppoolOutput"], () => require("./getLoadBalanceIppool"));

export { GetLoadBalanceIppoolChildNodeMemberArgs, GetLoadBalanceIppoolChildNodeMemberResult, GetLoadBalanceIppoolChildNodeMemberOutputArgs } from "./getLoadBalanceIppoolChildNodeMember";
export const getLoadBalanceIppoolChildNodeMember: typeof import("./getLoadBalanceIppoolChildNodeMember").getLoadBalanceIppoolChildNodeMember = null as any;
export const getLoadBalanceIppoolChildNodeMemberOutput: typeof import("./getLoadBalanceIppoolChildNodeMember").getLoadBalanceIppoolChildNodeMemberOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceIppoolChildNodeMember","getLoadBalanceIppoolChildNodeMemberOutput"], () => require("./getLoadBalanceIppoolChildNodeMember"));

export { GetLoadBalanceIppoolChildNodeMemberlistArgs, GetLoadBalanceIppoolChildNodeMemberlistResult, GetLoadBalanceIppoolChildNodeMemberlistOutputArgs } from "./getLoadBalanceIppoolChildNodeMemberlist";
export const getLoadBalanceIppoolChildNodeMemberlist: typeof import("./getLoadBalanceIppoolChildNodeMemberlist").getLoadBalanceIppoolChildNodeMemberlist = null as any;
export const getLoadBalanceIppoolChildNodeMemberlistOutput: typeof import("./getLoadBalanceIppoolChildNodeMemberlist").getLoadBalanceIppoolChildNodeMemberlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceIppoolChildNodeMemberlist","getLoadBalanceIppoolChildNodeMemberlistOutput"], () => require("./getLoadBalanceIppoolChildNodeMemberlist"));

export { GetLoadBalanceIppoollistArgs, GetLoadBalanceIppoollistResult, GetLoadBalanceIppoollistOutputArgs } from "./getLoadBalanceIppoollist";
export const getLoadBalanceIppoollist: typeof import("./getLoadBalanceIppoollist").getLoadBalanceIppoollist = null as any;
export const getLoadBalanceIppoollistOutput: typeof import("./getLoadBalanceIppoollist").getLoadBalanceIppoollistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceIppoollist","getLoadBalanceIppoollistOutput"], () => require("./getLoadBalanceIppoollist"));

export { GetLoadBalanceL2ExceptionListArgs, GetLoadBalanceL2ExceptionListResult, GetLoadBalanceL2ExceptionListOutputArgs } from "./getLoadBalanceL2ExceptionList";
export const getLoadBalanceL2ExceptionList: typeof import("./getLoadBalanceL2ExceptionList").getLoadBalanceL2ExceptionList = null as any;
export const getLoadBalanceL2ExceptionListOutput: typeof import("./getLoadBalanceL2ExceptionList").getLoadBalanceL2ExceptionListOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceL2ExceptionList","getLoadBalanceL2ExceptionListOutput"], () => require("./getLoadBalanceL2ExceptionList"));

export { GetLoadBalanceL2ExceptionListChildMemberArgs, GetLoadBalanceL2ExceptionListChildMemberResult, GetLoadBalanceL2ExceptionListChildMemberOutputArgs } from "./getLoadBalanceL2ExceptionListChildMember";
export const getLoadBalanceL2ExceptionListChildMember: typeof import("./getLoadBalanceL2ExceptionListChildMember").getLoadBalanceL2ExceptionListChildMember = null as any;
export const getLoadBalanceL2ExceptionListChildMemberOutput: typeof import("./getLoadBalanceL2ExceptionListChildMember").getLoadBalanceL2ExceptionListChildMemberOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceL2ExceptionListChildMember","getLoadBalanceL2ExceptionListChildMemberOutput"], () => require("./getLoadBalanceL2ExceptionListChildMember"));

export { GetLoadBalanceL2ExceptionListChildMemberlistArgs, GetLoadBalanceL2ExceptionListChildMemberlistResult, GetLoadBalanceL2ExceptionListChildMemberlistOutputArgs } from "./getLoadBalanceL2ExceptionListChildMemberlist";
export const getLoadBalanceL2ExceptionListChildMemberlist: typeof import("./getLoadBalanceL2ExceptionListChildMemberlist").getLoadBalanceL2ExceptionListChildMemberlist = null as any;
export const getLoadBalanceL2ExceptionListChildMemberlistOutput: typeof import("./getLoadBalanceL2ExceptionListChildMemberlist").getLoadBalanceL2ExceptionListChildMemberlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceL2ExceptionListChildMemberlist","getLoadBalanceL2ExceptionListChildMemberlistOutput"], () => require("./getLoadBalanceL2ExceptionListChildMemberlist"));

export { GetLoadBalanceL2ExceptionListlistArgs, GetLoadBalanceL2ExceptionListlistResult, GetLoadBalanceL2ExceptionListlistOutputArgs } from "./getLoadBalanceL2ExceptionListlist";
export const getLoadBalanceL2ExceptionListlist: typeof import("./getLoadBalanceL2ExceptionListlist").getLoadBalanceL2ExceptionListlist = null as any;
export const getLoadBalanceL2ExceptionListlistOutput: typeof import("./getLoadBalanceL2ExceptionListlist").getLoadBalanceL2ExceptionListlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceL2ExceptionListlist","getLoadBalanceL2ExceptionListlistOutput"], () => require("./getLoadBalanceL2ExceptionListlist"));

export { GetLoadBalanceMethodArgs, GetLoadBalanceMethodResult, GetLoadBalanceMethodOutputArgs } from "./getLoadBalanceMethod";
export const getLoadBalanceMethod: typeof import("./getLoadBalanceMethod").getLoadBalanceMethod = null as any;
export const getLoadBalanceMethodOutput: typeof import("./getLoadBalanceMethod").getLoadBalanceMethodOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceMethod","getLoadBalanceMethodOutput"], () => require("./getLoadBalanceMethod"));

export { GetLoadBalanceMethodlistArgs, GetLoadBalanceMethodlistResult, GetLoadBalanceMethodlistOutputArgs } from "./getLoadBalanceMethodlist";
export const getLoadBalanceMethodlist: typeof import("./getLoadBalanceMethodlist").getLoadBalanceMethodlist = null as any;
export const getLoadBalanceMethodlistOutput: typeof import("./getLoadBalanceMethodlist").getLoadBalanceMethodlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceMethodlist","getLoadBalanceMethodlistOutput"], () => require("./getLoadBalanceMethodlist"));

export { GetLoadBalancePagespeedArgs, GetLoadBalancePagespeedResult, GetLoadBalancePagespeedOutputArgs } from "./getLoadBalancePagespeed";
export const getLoadBalancePagespeed: typeof import("./getLoadBalancePagespeed").getLoadBalancePagespeed = null as any;
export const getLoadBalancePagespeedOutput: typeof import("./getLoadBalancePagespeed").getLoadBalancePagespeedOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePagespeed","getLoadBalancePagespeedOutput"], () => require("./getLoadBalancePagespeed"));

export { GetLoadBalancePagespeedChildPageControlArgs, GetLoadBalancePagespeedChildPageControlResult, GetLoadBalancePagespeedChildPageControlOutputArgs } from "./getLoadBalancePagespeedChildPageControl";
export const getLoadBalancePagespeedChildPageControl: typeof import("./getLoadBalancePagespeedChildPageControl").getLoadBalancePagespeedChildPageControl = null as any;
export const getLoadBalancePagespeedChildPageControlOutput: typeof import("./getLoadBalancePagespeedChildPageControl").getLoadBalancePagespeedChildPageControlOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePagespeedChildPageControl","getLoadBalancePagespeedChildPageControlOutput"], () => require("./getLoadBalancePagespeedChildPageControl"));

export { GetLoadBalancePagespeedChildPageControllistArgs, GetLoadBalancePagespeedChildPageControllistResult, GetLoadBalancePagespeedChildPageControllistOutputArgs } from "./getLoadBalancePagespeedChildPageControllist";
export const getLoadBalancePagespeedChildPageControllist: typeof import("./getLoadBalancePagespeedChildPageControllist").getLoadBalancePagespeedChildPageControllist = null as any;
export const getLoadBalancePagespeedChildPageControllistOutput: typeof import("./getLoadBalancePagespeedChildPageControllist").getLoadBalancePagespeedChildPageControllistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePagespeedChildPageControllist","getLoadBalancePagespeedChildPageControllistOutput"], () => require("./getLoadBalancePagespeedChildPageControllist"));

export { GetLoadBalancePagespeedChildResourceControlArgs, GetLoadBalancePagespeedChildResourceControlResult, GetLoadBalancePagespeedChildResourceControlOutputArgs } from "./getLoadBalancePagespeedChildResourceControl";
export const getLoadBalancePagespeedChildResourceControl: typeof import("./getLoadBalancePagespeedChildResourceControl").getLoadBalancePagespeedChildResourceControl = null as any;
export const getLoadBalancePagespeedChildResourceControlOutput: typeof import("./getLoadBalancePagespeedChildResourceControl").getLoadBalancePagespeedChildResourceControlOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePagespeedChildResourceControl","getLoadBalancePagespeedChildResourceControlOutput"], () => require("./getLoadBalancePagespeedChildResourceControl"));

export { GetLoadBalancePagespeedChildResourceControllistArgs, GetLoadBalancePagespeedChildResourceControllistResult, GetLoadBalancePagespeedChildResourceControllistOutputArgs } from "./getLoadBalancePagespeedChildResourceControllist";
export const getLoadBalancePagespeedChildResourceControllist: typeof import("./getLoadBalancePagespeedChildResourceControllist").getLoadBalancePagespeedChildResourceControllist = null as any;
export const getLoadBalancePagespeedChildResourceControllistOutput: typeof import("./getLoadBalancePagespeedChildResourceControllist").getLoadBalancePagespeedChildResourceControllistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePagespeedChildResourceControllist","getLoadBalancePagespeedChildResourceControllistOutput"], () => require("./getLoadBalancePagespeedChildResourceControllist"));

export { GetLoadBalancePagespeedProfileArgs, GetLoadBalancePagespeedProfileResult, GetLoadBalancePagespeedProfileOutputArgs } from "./getLoadBalancePagespeedProfile";
export const getLoadBalancePagespeedProfile: typeof import("./getLoadBalancePagespeedProfile").getLoadBalancePagespeedProfile = null as any;
export const getLoadBalancePagespeedProfileOutput: typeof import("./getLoadBalancePagespeedProfile").getLoadBalancePagespeedProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePagespeedProfile","getLoadBalancePagespeedProfileOutput"], () => require("./getLoadBalancePagespeedProfile"));

export { GetLoadBalancePagespeedProfilelistArgs, GetLoadBalancePagespeedProfilelistResult, GetLoadBalancePagespeedProfilelistOutputArgs } from "./getLoadBalancePagespeedProfilelist";
export const getLoadBalancePagespeedProfilelist: typeof import("./getLoadBalancePagespeedProfilelist").getLoadBalancePagespeedProfilelist = null as any;
export const getLoadBalancePagespeedProfilelistOutput: typeof import("./getLoadBalancePagespeedProfilelist").getLoadBalancePagespeedProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePagespeedProfilelist","getLoadBalancePagespeedProfilelistOutput"], () => require("./getLoadBalancePagespeedProfilelist"));

export { GetLoadBalancePagespeedlistArgs, GetLoadBalancePagespeedlistResult, GetLoadBalancePagespeedlistOutputArgs } from "./getLoadBalancePagespeedlist";
export const getLoadBalancePagespeedlist: typeof import("./getLoadBalancePagespeedlist").getLoadBalancePagespeedlist = null as any;
export const getLoadBalancePagespeedlistOutput: typeof import("./getLoadBalancePagespeedlist").getLoadBalancePagespeedlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePagespeedlist","getLoadBalancePagespeedlistOutput"], () => require("./getLoadBalancePagespeedlist"));

export { GetLoadBalancePersistenceArgs, GetLoadBalancePersistenceResult, GetLoadBalancePersistenceOutputArgs } from "./getLoadBalancePersistence";
export const getLoadBalancePersistence: typeof import("./getLoadBalancePersistence").getLoadBalancePersistence = null as any;
export const getLoadBalancePersistenceOutput: typeof import("./getLoadBalancePersistence").getLoadBalancePersistenceOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePersistence","getLoadBalancePersistenceOutput"], () => require("./getLoadBalancePersistence"));

export { GetLoadBalancePersistenceChildIso8583BitmapArgs, GetLoadBalancePersistenceChildIso8583BitmapResult, GetLoadBalancePersistenceChildIso8583BitmapOutputArgs } from "./getLoadBalancePersistenceChildIso8583Bitmap";
export const getLoadBalancePersistenceChildIso8583Bitmap: typeof import("./getLoadBalancePersistenceChildIso8583Bitmap").getLoadBalancePersistenceChildIso8583Bitmap = null as any;
export const getLoadBalancePersistenceChildIso8583BitmapOutput: typeof import("./getLoadBalancePersistenceChildIso8583Bitmap").getLoadBalancePersistenceChildIso8583BitmapOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePersistenceChildIso8583Bitmap","getLoadBalancePersistenceChildIso8583BitmapOutput"], () => require("./getLoadBalancePersistenceChildIso8583Bitmap"));

export { GetLoadBalancePersistenceChildIso8583BitmaplistArgs, GetLoadBalancePersistenceChildIso8583BitmaplistResult, GetLoadBalancePersistenceChildIso8583BitmaplistOutputArgs } from "./getLoadBalancePersistenceChildIso8583Bitmaplist";
export const getLoadBalancePersistenceChildIso8583Bitmaplist: typeof import("./getLoadBalancePersistenceChildIso8583Bitmaplist").getLoadBalancePersistenceChildIso8583Bitmaplist = null as any;
export const getLoadBalancePersistenceChildIso8583BitmaplistOutput: typeof import("./getLoadBalancePersistenceChildIso8583Bitmaplist").getLoadBalancePersistenceChildIso8583BitmaplistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePersistenceChildIso8583Bitmaplist","getLoadBalancePersistenceChildIso8583BitmaplistOutput"], () => require("./getLoadBalancePersistenceChildIso8583Bitmaplist"));

export { GetLoadBalancePersistenceChildRadiusAttributeArgs, GetLoadBalancePersistenceChildRadiusAttributeResult, GetLoadBalancePersistenceChildRadiusAttributeOutputArgs } from "./getLoadBalancePersistenceChildRadiusAttribute";
export const getLoadBalancePersistenceChildRadiusAttribute: typeof import("./getLoadBalancePersistenceChildRadiusAttribute").getLoadBalancePersistenceChildRadiusAttribute = null as any;
export const getLoadBalancePersistenceChildRadiusAttributeOutput: typeof import("./getLoadBalancePersistenceChildRadiusAttribute").getLoadBalancePersistenceChildRadiusAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePersistenceChildRadiusAttribute","getLoadBalancePersistenceChildRadiusAttributeOutput"], () => require("./getLoadBalancePersistenceChildRadiusAttribute"));

export { GetLoadBalancePersistenceChildRadiusAttributelistArgs, GetLoadBalancePersistenceChildRadiusAttributelistResult, GetLoadBalancePersistenceChildRadiusAttributelistOutputArgs } from "./getLoadBalancePersistenceChildRadiusAttributelist";
export const getLoadBalancePersistenceChildRadiusAttributelist: typeof import("./getLoadBalancePersistenceChildRadiusAttributelist").getLoadBalancePersistenceChildRadiusAttributelist = null as any;
export const getLoadBalancePersistenceChildRadiusAttributelistOutput: typeof import("./getLoadBalancePersistenceChildRadiusAttributelist").getLoadBalancePersistenceChildRadiusAttributelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePersistenceChildRadiusAttributelist","getLoadBalancePersistenceChildRadiusAttributelistOutput"], () => require("./getLoadBalancePersistenceChildRadiusAttributelist"));

export { GetLoadBalancePersistencelistArgs, GetLoadBalancePersistencelistResult, GetLoadBalancePersistencelistOutputArgs } from "./getLoadBalancePersistencelist";
export const getLoadBalancePersistencelist: typeof import("./getLoadBalancePersistencelist").getLoadBalancePersistencelist = null as any;
export const getLoadBalancePersistencelistOutput: typeof import("./getLoadBalancePersistencelist").getLoadBalancePersistencelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePersistencelist","getLoadBalancePersistencelistOutput"], () => require("./getLoadBalancePersistencelist"));

export { GetLoadBalancePoolArgs, GetLoadBalancePoolResult, GetLoadBalancePoolOutputArgs } from "./getLoadBalancePool";
export const getLoadBalancePool: typeof import("./getLoadBalancePool").getLoadBalancePool = null as any;
export const getLoadBalancePoolOutput: typeof import("./getLoadBalancePool").getLoadBalancePoolOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePool","getLoadBalancePoolOutput"], () => require("./getLoadBalancePool"));

export { GetLoadBalancePoolChildPoolMemberArgs, GetLoadBalancePoolChildPoolMemberResult, GetLoadBalancePoolChildPoolMemberOutputArgs } from "./getLoadBalancePoolChildPoolMember";
export const getLoadBalancePoolChildPoolMember: typeof import("./getLoadBalancePoolChildPoolMember").getLoadBalancePoolChildPoolMember = null as any;
export const getLoadBalancePoolChildPoolMemberOutput: typeof import("./getLoadBalancePoolChildPoolMember").getLoadBalancePoolChildPoolMemberOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePoolChildPoolMember","getLoadBalancePoolChildPoolMemberOutput"], () => require("./getLoadBalancePoolChildPoolMember"));

export { GetLoadBalancePoolChildPoolMemberlistArgs, GetLoadBalancePoolChildPoolMemberlistResult, GetLoadBalancePoolChildPoolMemberlistOutputArgs } from "./getLoadBalancePoolChildPoolMemberlist";
export const getLoadBalancePoolChildPoolMemberlist: typeof import("./getLoadBalancePoolChildPoolMemberlist").getLoadBalancePoolChildPoolMemberlist = null as any;
export const getLoadBalancePoolChildPoolMemberlistOutput: typeof import("./getLoadBalancePoolChildPoolMemberlist").getLoadBalancePoolChildPoolMemberlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePoolChildPoolMemberlist","getLoadBalancePoolChildPoolMemberlistOutput"], () => require("./getLoadBalancePoolChildPoolMemberlist"));

export { GetLoadBalancePoollistArgs, GetLoadBalancePoollistResult, GetLoadBalancePoollistOutputArgs } from "./getLoadBalancePoollist";
export const getLoadBalancePoollist: typeof import("./getLoadBalancePoollist").getLoadBalancePoollist = null as any;
export const getLoadBalancePoollistOutput: typeof import("./getLoadBalancePoollist").getLoadBalancePoollistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancePoollist","getLoadBalancePoollistOutput"], () => require("./getLoadBalancePoollist"));

export { GetLoadBalanceProfileArgs, GetLoadBalanceProfileResult, GetLoadBalanceProfileOutputArgs } from "./getLoadBalanceProfile";
export const getLoadBalanceProfile: typeof import("./getLoadBalanceProfile").getLoadBalanceProfile = null as any;
export const getLoadBalanceProfileOutput: typeof import("./getLoadBalanceProfile").getLoadBalanceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfile","getLoadBalanceProfileOutput"], () => require("./getLoadBalanceProfile"));

export { GetLoadBalanceProfileChildClientRequestHeaderEraseArgs, GetLoadBalanceProfileChildClientRequestHeaderEraseResult, GetLoadBalanceProfileChildClientRequestHeaderEraseOutputArgs } from "./getLoadBalanceProfileChildClientRequestHeaderErase";
export const getLoadBalanceProfileChildClientRequestHeaderErase: typeof import("./getLoadBalanceProfileChildClientRequestHeaderErase").getLoadBalanceProfileChildClientRequestHeaderErase = null as any;
export const getLoadBalanceProfileChildClientRequestHeaderEraseOutput: typeof import("./getLoadBalanceProfileChildClientRequestHeaderErase").getLoadBalanceProfileChildClientRequestHeaderEraseOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildClientRequestHeaderErase","getLoadBalanceProfileChildClientRequestHeaderEraseOutput"], () => require("./getLoadBalanceProfileChildClientRequestHeaderErase"));

export { GetLoadBalanceProfileChildClientRequestHeaderEraselistArgs, GetLoadBalanceProfileChildClientRequestHeaderEraselistResult, GetLoadBalanceProfileChildClientRequestHeaderEraselistOutputArgs } from "./getLoadBalanceProfileChildClientRequestHeaderEraselist";
export const getLoadBalanceProfileChildClientRequestHeaderEraselist: typeof import("./getLoadBalanceProfileChildClientRequestHeaderEraselist").getLoadBalanceProfileChildClientRequestHeaderEraselist = null as any;
export const getLoadBalanceProfileChildClientRequestHeaderEraselistOutput: typeof import("./getLoadBalanceProfileChildClientRequestHeaderEraselist").getLoadBalanceProfileChildClientRequestHeaderEraselistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildClientRequestHeaderEraselist","getLoadBalanceProfileChildClientRequestHeaderEraselistOutput"], () => require("./getLoadBalanceProfileChildClientRequestHeaderEraselist"));

export { GetLoadBalanceProfileChildClientRequestHeaderInsertArgs, GetLoadBalanceProfileChildClientRequestHeaderInsertResult, GetLoadBalanceProfileChildClientRequestHeaderInsertOutputArgs } from "./getLoadBalanceProfileChildClientRequestHeaderInsert";
export const getLoadBalanceProfileChildClientRequestHeaderInsert: typeof import("./getLoadBalanceProfileChildClientRequestHeaderInsert").getLoadBalanceProfileChildClientRequestHeaderInsert = null as any;
export const getLoadBalanceProfileChildClientRequestHeaderInsertOutput: typeof import("./getLoadBalanceProfileChildClientRequestHeaderInsert").getLoadBalanceProfileChildClientRequestHeaderInsertOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildClientRequestHeaderInsert","getLoadBalanceProfileChildClientRequestHeaderInsertOutput"], () => require("./getLoadBalanceProfileChildClientRequestHeaderInsert"));

export { GetLoadBalanceProfileChildClientRequestHeaderInsertlistArgs, GetLoadBalanceProfileChildClientRequestHeaderInsertlistResult, GetLoadBalanceProfileChildClientRequestHeaderInsertlistOutputArgs } from "./getLoadBalanceProfileChildClientRequestHeaderInsertlist";
export const getLoadBalanceProfileChildClientRequestHeaderInsertlist: typeof import("./getLoadBalanceProfileChildClientRequestHeaderInsertlist").getLoadBalanceProfileChildClientRequestHeaderInsertlist = null as any;
export const getLoadBalanceProfileChildClientRequestHeaderInsertlistOutput: typeof import("./getLoadBalanceProfileChildClientRequestHeaderInsertlist").getLoadBalanceProfileChildClientRequestHeaderInsertlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildClientRequestHeaderInsertlist","getLoadBalanceProfileChildClientRequestHeaderInsertlistOutput"], () => require("./getLoadBalanceProfileChildClientRequestHeaderInsertlist"));

export { GetLoadBalanceProfileChildClientResponseHeaderEraseArgs, GetLoadBalanceProfileChildClientResponseHeaderEraseResult, GetLoadBalanceProfileChildClientResponseHeaderEraseOutputArgs } from "./getLoadBalanceProfileChildClientResponseHeaderErase";
export const getLoadBalanceProfileChildClientResponseHeaderErase: typeof import("./getLoadBalanceProfileChildClientResponseHeaderErase").getLoadBalanceProfileChildClientResponseHeaderErase = null as any;
export const getLoadBalanceProfileChildClientResponseHeaderEraseOutput: typeof import("./getLoadBalanceProfileChildClientResponseHeaderErase").getLoadBalanceProfileChildClientResponseHeaderEraseOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildClientResponseHeaderErase","getLoadBalanceProfileChildClientResponseHeaderEraseOutput"], () => require("./getLoadBalanceProfileChildClientResponseHeaderErase"));

export { GetLoadBalanceProfileChildClientResponseHeaderEraselistArgs, GetLoadBalanceProfileChildClientResponseHeaderEraselistResult, GetLoadBalanceProfileChildClientResponseHeaderEraselistOutputArgs } from "./getLoadBalanceProfileChildClientResponseHeaderEraselist";
export const getLoadBalanceProfileChildClientResponseHeaderEraselist: typeof import("./getLoadBalanceProfileChildClientResponseHeaderEraselist").getLoadBalanceProfileChildClientResponseHeaderEraselist = null as any;
export const getLoadBalanceProfileChildClientResponseHeaderEraselistOutput: typeof import("./getLoadBalanceProfileChildClientResponseHeaderEraselist").getLoadBalanceProfileChildClientResponseHeaderEraselistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildClientResponseHeaderEraselist","getLoadBalanceProfileChildClientResponseHeaderEraselistOutput"], () => require("./getLoadBalanceProfileChildClientResponseHeaderEraselist"));

export { GetLoadBalanceProfileChildClientResponseHeaderInsertArgs, GetLoadBalanceProfileChildClientResponseHeaderInsertResult, GetLoadBalanceProfileChildClientResponseHeaderInsertOutputArgs } from "./getLoadBalanceProfileChildClientResponseHeaderInsert";
export const getLoadBalanceProfileChildClientResponseHeaderInsert: typeof import("./getLoadBalanceProfileChildClientResponseHeaderInsert").getLoadBalanceProfileChildClientResponseHeaderInsert = null as any;
export const getLoadBalanceProfileChildClientResponseHeaderInsertOutput: typeof import("./getLoadBalanceProfileChildClientResponseHeaderInsert").getLoadBalanceProfileChildClientResponseHeaderInsertOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildClientResponseHeaderInsert","getLoadBalanceProfileChildClientResponseHeaderInsertOutput"], () => require("./getLoadBalanceProfileChildClientResponseHeaderInsert"));

export { GetLoadBalanceProfileChildClientResponseHeaderInsertlistArgs, GetLoadBalanceProfileChildClientResponseHeaderInsertlistResult, GetLoadBalanceProfileChildClientResponseHeaderInsertlistOutputArgs } from "./getLoadBalanceProfileChildClientResponseHeaderInsertlist";
export const getLoadBalanceProfileChildClientResponseHeaderInsertlist: typeof import("./getLoadBalanceProfileChildClientResponseHeaderInsertlist").getLoadBalanceProfileChildClientResponseHeaderInsertlist = null as any;
export const getLoadBalanceProfileChildClientResponseHeaderInsertlistOutput: typeof import("./getLoadBalanceProfileChildClientResponseHeaderInsertlist").getLoadBalanceProfileChildClientResponseHeaderInsertlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildClientResponseHeaderInsertlist","getLoadBalanceProfileChildClientResponseHeaderInsertlistOutput"], () => require("./getLoadBalanceProfileChildClientResponseHeaderInsertlist"));

export { GetLoadBalanceProfileChildMssqlUserPasswordArgs, GetLoadBalanceProfileChildMssqlUserPasswordResult, GetLoadBalanceProfileChildMssqlUserPasswordOutputArgs } from "./getLoadBalanceProfileChildMssqlUserPassword";
export const getLoadBalanceProfileChildMssqlUserPassword: typeof import("./getLoadBalanceProfileChildMssqlUserPassword").getLoadBalanceProfileChildMssqlUserPassword = null as any;
export const getLoadBalanceProfileChildMssqlUserPasswordOutput: typeof import("./getLoadBalanceProfileChildMssqlUserPassword").getLoadBalanceProfileChildMssqlUserPasswordOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildMssqlUserPassword","getLoadBalanceProfileChildMssqlUserPasswordOutput"], () => require("./getLoadBalanceProfileChildMssqlUserPassword"));

export { GetLoadBalanceProfileChildMssqlUserPasswordlistArgs, GetLoadBalanceProfileChildMssqlUserPasswordlistResult, GetLoadBalanceProfileChildMssqlUserPasswordlistOutputArgs } from "./getLoadBalanceProfileChildMssqlUserPasswordlist";
export const getLoadBalanceProfileChildMssqlUserPasswordlist: typeof import("./getLoadBalanceProfileChildMssqlUserPasswordlist").getLoadBalanceProfileChildMssqlUserPasswordlist = null as any;
export const getLoadBalanceProfileChildMssqlUserPasswordlistOutput: typeof import("./getLoadBalanceProfileChildMssqlUserPasswordlist").getLoadBalanceProfileChildMssqlUserPasswordlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildMssqlUserPasswordlist","getLoadBalanceProfileChildMssqlUserPasswordlistOutput"], () => require("./getLoadBalanceProfileChildMssqlUserPasswordlist"));

export { GetLoadBalanceProfileChildMysqlRuleArgs, GetLoadBalanceProfileChildMysqlRuleResult, GetLoadBalanceProfileChildMysqlRuleOutputArgs } from "./getLoadBalanceProfileChildMysqlRule";
export const getLoadBalanceProfileChildMysqlRule: typeof import("./getLoadBalanceProfileChildMysqlRule").getLoadBalanceProfileChildMysqlRule = null as any;
export const getLoadBalanceProfileChildMysqlRuleOutput: typeof import("./getLoadBalanceProfileChildMysqlRule").getLoadBalanceProfileChildMysqlRuleOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildMysqlRule","getLoadBalanceProfileChildMysqlRuleOutput"], () => require("./getLoadBalanceProfileChildMysqlRule"));

export { GetLoadBalanceProfileChildMysqlRulelistArgs, GetLoadBalanceProfileChildMysqlRulelistResult, GetLoadBalanceProfileChildMysqlRulelistOutputArgs } from "./getLoadBalanceProfileChildMysqlRulelist";
export const getLoadBalanceProfileChildMysqlRulelist: typeof import("./getLoadBalanceProfileChildMysqlRulelist").getLoadBalanceProfileChildMysqlRulelist = null as any;
export const getLoadBalanceProfileChildMysqlRulelistOutput: typeof import("./getLoadBalanceProfileChildMysqlRulelist").getLoadBalanceProfileChildMysqlRulelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildMysqlRulelist","getLoadBalanceProfileChildMysqlRulelistOutput"], () => require("./getLoadBalanceProfileChildMysqlRulelist"));

export { GetLoadBalanceProfileChildMysqlShardingArgs, GetLoadBalanceProfileChildMysqlShardingResult, GetLoadBalanceProfileChildMysqlShardingOutputArgs } from "./getLoadBalanceProfileChildMysqlSharding";
export const getLoadBalanceProfileChildMysqlSharding: typeof import("./getLoadBalanceProfileChildMysqlSharding").getLoadBalanceProfileChildMysqlSharding = null as any;
export const getLoadBalanceProfileChildMysqlShardingOutput: typeof import("./getLoadBalanceProfileChildMysqlSharding").getLoadBalanceProfileChildMysqlShardingOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildMysqlSharding","getLoadBalanceProfileChildMysqlShardingOutput"], () => require("./getLoadBalanceProfileChildMysqlSharding"));

export { GetLoadBalanceProfileChildMysqlShardinglistArgs, GetLoadBalanceProfileChildMysqlShardinglistResult, GetLoadBalanceProfileChildMysqlShardinglistOutputArgs } from "./getLoadBalanceProfileChildMysqlShardinglist";
export const getLoadBalanceProfileChildMysqlShardinglist: typeof import("./getLoadBalanceProfileChildMysqlShardinglist").getLoadBalanceProfileChildMysqlShardinglist = null as any;
export const getLoadBalanceProfileChildMysqlShardinglistOutput: typeof import("./getLoadBalanceProfileChildMysqlShardinglist").getLoadBalanceProfileChildMysqlShardinglistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildMysqlShardinglist","getLoadBalanceProfileChildMysqlShardinglistOutput"], () => require("./getLoadBalanceProfileChildMysqlShardinglist"));

export { GetLoadBalanceProfileChildMysqlUserPasswordArgs, GetLoadBalanceProfileChildMysqlUserPasswordResult, GetLoadBalanceProfileChildMysqlUserPasswordOutputArgs } from "./getLoadBalanceProfileChildMysqlUserPassword";
export const getLoadBalanceProfileChildMysqlUserPassword: typeof import("./getLoadBalanceProfileChildMysqlUserPassword").getLoadBalanceProfileChildMysqlUserPassword = null as any;
export const getLoadBalanceProfileChildMysqlUserPasswordOutput: typeof import("./getLoadBalanceProfileChildMysqlUserPassword").getLoadBalanceProfileChildMysqlUserPasswordOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildMysqlUserPassword","getLoadBalanceProfileChildMysqlUserPasswordOutput"], () => require("./getLoadBalanceProfileChildMysqlUserPassword"));

export { GetLoadBalanceProfileChildMysqlUserPasswordlistArgs, GetLoadBalanceProfileChildMysqlUserPasswordlistResult, GetLoadBalanceProfileChildMysqlUserPasswordlistOutputArgs } from "./getLoadBalanceProfileChildMysqlUserPasswordlist";
export const getLoadBalanceProfileChildMysqlUserPasswordlist: typeof import("./getLoadBalanceProfileChildMysqlUserPasswordlist").getLoadBalanceProfileChildMysqlUserPasswordlist = null as any;
export const getLoadBalanceProfileChildMysqlUserPasswordlistOutput: typeof import("./getLoadBalanceProfileChildMysqlUserPasswordlist").getLoadBalanceProfileChildMysqlUserPasswordlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildMysqlUserPasswordlist","getLoadBalanceProfileChildMysqlUserPasswordlistOutput"], () => require("./getLoadBalanceProfileChildMysqlUserPasswordlist"));

export { GetLoadBalanceProfileChildServerRequestHeaderEraseArgs, GetLoadBalanceProfileChildServerRequestHeaderEraseResult, GetLoadBalanceProfileChildServerRequestHeaderEraseOutputArgs } from "./getLoadBalanceProfileChildServerRequestHeaderErase";
export const getLoadBalanceProfileChildServerRequestHeaderErase: typeof import("./getLoadBalanceProfileChildServerRequestHeaderErase").getLoadBalanceProfileChildServerRequestHeaderErase = null as any;
export const getLoadBalanceProfileChildServerRequestHeaderEraseOutput: typeof import("./getLoadBalanceProfileChildServerRequestHeaderErase").getLoadBalanceProfileChildServerRequestHeaderEraseOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildServerRequestHeaderErase","getLoadBalanceProfileChildServerRequestHeaderEraseOutput"], () => require("./getLoadBalanceProfileChildServerRequestHeaderErase"));

export { GetLoadBalanceProfileChildServerRequestHeaderEraselistArgs, GetLoadBalanceProfileChildServerRequestHeaderEraselistResult, GetLoadBalanceProfileChildServerRequestHeaderEraselistOutputArgs } from "./getLoadBalanceProfileChildServerRequestHeaderEraselist";
export const getLoadBalanceProfileChildServerRequestHeaderEraselist: typeof import("./getLoadBalanceProfileChildServerRequestHeaderEraselist").getLoadBalanceProfileChildServerRequestHeaderEraselist = null as any;
export const getLoadBalanceProfileChildServerRequestHeaderEraselistOutput: typeof import("./getLoadBalanceProfileChildServerRequestHeaderEraselist").getLoadBalanceProfileChildServerRequestHeaderEraselistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildServerRequestHeaderEraselist","getLoadBalanceProfileChildServerRequestHeaderEraselistOutput"], () => require("./getLoadBalanceProfileChildServerRequestHeaderEraselist"));

export { GetLoadBalanceProfileChildServerRequestHeaderInsertArgs, GetLoadBalanceProfileChildServerRequestHeaderInsertResult, GetLoadBalanceProfileChildServerRequestHeaderInsertOutputArgs } from "./getLoadBalanceProfileChildServerRequestHeaderInsert";
export const getLoadBalanceProfileChildServerRequestHeaderInsert: typeof import("./getLoadBalanceProfileChildServerRequestHeaderInsert").getLoadBalanceProfileChildServerRequestHeaderInsert = null as any;
export const getLoadBalanceProfileChildServerRequestHeaderInsertOutput: typeof import("./getLoadBalanceProfileChildServerRequestHeaderInsert").getLoadBalanceProfileChildServerRequestHeaderInsertOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildServerRequestHeaderInsert","getLoadBalanceProfileChildServerRequestHeaderInsertOutput"], () => require("./getLoadBalanceProfileChildServerRequestHeaderInsert"));

export { GetLoadBalanceProfileChildServerRequestHeaderInsertlistArgs, GetLoadBalanceProfileChildServerRequestHeaderInsertlistResult, GetLoadBalanceProfileChildServerRequestHeaderInsertlistOutputArgs } from "./getLoadBalanceProfileChildServerRequestHeaderInsertlist";
export const getLoadBalanceProfileChildServerRequestHeaderInsertlist: typeof import("./getLoadBalanceProfileChildServerRequestHeaderInsertlist").getLoadBalanceProfileChildServerRequestHeaderInsertlist = null as any;
export const getLoadBalanceProfileChildServerRequestHeaderInsertlistOutput: typeof import("./getLoadBalanceProfileChildServerRequestHeaderInsertlist").getLoadBalanceProfileChildServerRequestHeaderInsertlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildServerRequestHeaderInsertlist","getLoadBalanceProfileChildServerRequestHeaderInsertlistOutput"], () => require("./getLoadBalanceProfileChildServerRequestHeaderInsertlist"));

export { GetLoadBalanceProfileChildServerResponseHeaderEraseArgs, GetLoadBalanceProfileChildServerResponseHeaderEraseResult, GetLoadBalanceProfileChildServerResponseHeaderEraseOutputArgs } from "./getLoadBalanceProfileChildServerResponseHeaderErase";
export const getLoadBalanceProfileChildServerResponseHeaderErase: typeof import("./getLoadBalanceProfileChildServerResponseHeaderErase").getLoadBalanceProfileChildServerResponseHeaderErase = null as any;
export const getLoadBalanceProfileChildServerResponseHeaderEraseOutput: typeof import("./getLoadBalanceProfileChildServerResponseHeaderErase").getLoadBalanceProfileChildServerResponseHeaderEraseOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildServerResponseHeaderErase","getLoadBalanceProfileChildServerResponseHeaderEraseOutput"], () => require("./getLoadBalanceProfileChildServerResponseHeaderErase"));

export { GetLoadBalanceProfileChildServerResponseHeaderEraselistArgs, GetLoadBalanceProfileChildServerResponseHeaderEraselistResult, GetLoadBalanceProfileChildServerResponseHeaderEraselistOutputArgs } from "./getLoadBalanceProfileChildServerResponseHeaderEraselist";
export const getLoadBalanceProfileChildServerResponseHeaderEraselist: typeof import("./getLoadBalanceProfileChildServerResponseHeaderEraselist").getLoadBalanceProfileChildServerResponseHeaderEraselist = null as any;
export const getLoadBalanceProfileChildServerResponseHeaderEraselistOutput: typeof import("./getLoadBalanceProfileChildServerResponseHeaderEraselist").getLoadBalanceProfileChildServerResponseHeaderEraselistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildServerResponseHeaderEraselist","getLoadBalanceProfileChildServerResponseHeaderEraselistOutput"], () => require("./getLoadBalanceProfileChildServerResponseHeaderEraselist"));

export { GetLoadBalanceProfileChildServerResponseHeaderInsertArgs, GetLoadBalanceProfileChildServerResponseHeaderInsertResult, GetLoadBalanceProfileChildServerResponseHeaderInsertOutputArgs } from "./getLoadBalanceProfileChildServerResponseHeaderInsert";
export const getLoadBalanceProfileChildServerResponseHeaderInsert: typeof import("./getLoadBalanceProfileChildServerResponseHeaderInsert").getLoadBalanceProfileChildServerResponseHeaderInsert = null as any;
export const getLoadBalanceProfileChildServerResponseHeaderInsertOutput: typeof import("./getLoadBalanceProfileChildServerResponseHeaderInsert").getLoadBalanceProfileChildServerResponseHeaderInsertOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildServerResponseHeaderInsert","getLoadBalanceProfileChildServerResponseHeaderInsertOutput"], () => require("./getLoadBalanceProfileChildServerResponseHeaderInsert"));

export { GetLoadBalanceProfileChildServerResponseHeaderInsertlistArgs, GetLoadBalanceProfileChildServerResponseHeaderInsertlistResult, GetLoadBalanceProfileChildServerResponseHeaderInsertlistOutputArgs } from "./getLoadBalanceProfileChildServerResponseHeaderInsertlist";
export const getLoadBalanceProfileChildServerResponseHeaderInsertlist: typeof import("./getLoadBalanceProfileChildServerResponseHeaderInsertlist").getLoadBalanceProfileChildServerResponseHeaderInsertlist = null as any;
export const getLoadBalanceProfileChildServerResponseHeaderInsertlistOutput: typeof import("./getLoadBalanceProfileChildServerResponseHeaderInsertlist").getLoadBalanceProfileChildServerResponseHeaderInsertlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfileChildServerResponseHeaderInsertlist","getLoadBalanceProfileChildServerResponseHeaderInsertlistOutput"], () => require("./getLoadBalanceProfileChildServerResponseHeaderInsertlist"));

export { GetLoadBalanceProfilelistArgs, GetLoadBalanceProfilelistResult, GetLoadBalanceProfilelistOutputArgs } from "./getLoadBalanceProfilelist";
export const getLoadBalanceProfilelist: typeof import("./getLoadBalanceProfilelist").getLoadBalanceProfilelist = null as any;
export const getLoadBalanceProfilelistOutput: typeof import("./getLoadBalanceProfilelist").getLoadBalanceProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceProfilelist","getLoadBalanceProfilelistOutput"], () => require("./getLoadBalanceProfilelist"));

export { GetLoadBalanceRealServerArgs, GetLoadBalanceRealServerResult, GetLoadBalanceRealServerOutputArgs } from "./getLoadBalanceRealServer";
export const getLoadBalanceRealServer: typeof import("./getLoadBalanceRealServer").getLoadBalanceRealServer = null as any;
export const getLoadBalanceRealServerOutput: typeof import("./getLoadBalanceRealServer").getLoadBalanceRealServerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceRealServer","getLoadBalanceRealServerOutput"], () => require("./getLoadBalanceRealServer"));

export { GetLoadBalanceRealServerSslProfileArgs, GetLoadBalanceRealServerSslProfileResult, GetLoadBalanceRealServerSslProfileOutputArgs } from "./getLoadBalanceRealServerSslProfile";
export const getLoadBalanceRealServerSslProfile: typeof import("./getLoadBalanceRealServerSslProfile").getLoadBalanceRealServerSslProfile = null as any;
export const getLoadBalanceRealServerSslProfileOutput: typeof import("./getLoadBalanceRealServerSslProfile").getLoadBalanceRealServerSslProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceRealServerSslProfile","getLoadBalanceRealServerSslProfileOutput"], () => require("./getLoadBalanceRealServerSslProfile"));

export { GetLoadBalanceRealServerSslProfilelistArgs, GetLoadBalanceRealServerSslProfilelistResult, GetLoadBalanceRealServerSslProfilelistOutputArgs } from "./getLoadBalanceRealServerSslProfilelist";
export const getLoadBalanceRealServerSslProfilelist: typeof import("./getLoadBalanceRealServerSslProfilelist").getLoadBalanceRealServerSslProfilelist = null as any;
export const getLoadBalanceRealServerSslProfilelistOutput: typeof import("./getLoadBalanceRealServerSslProfilelist").getLoadBalanceRealServerSslProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceRealServerSslProfilelist","getLoadBalanceRealServerSslProfilelistOutput"], () => require("./getLoadBalanceRealServerSslProfilelist"));

export { GetLoadBalanceRealServerlistArgs, GetLoadBalanceRealServerlistResult, GetLoadBalanceRealServerlistOutputArgs } from "./getLoadBalanceRealServerlist";
export const getLoadBalanceRealServerlist: typeof import("./getLoadBalanceRealServerlist").getLoadBalanceRealServerlist = null as any;
export const getLoadBalanceRealServerlistOutput: typeof import("./getLoadBalanceRealServerlist").getLoadBalanceRealServerlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceRealServerlist","getLoadBalanceRealServerlistOutput"], () => require("./getLoadBalanceRealServerlist"));

export { GetLoadBalanceSchedulePoolArgs, GetLoadBalanceSchedulePoolResult, GetLoadBalanceSchedulePoolOutputArgs } from "./getLoadBalanceSchedulePool";
export const getLoadBalanceSchedulePool: typeof import("./getLoadBalanceSchedulePool").getLoadBalanceSchedulePool = null as any;
export const getLoadBalanceSchedulePoolOutput: typeof import("./getLoadBalanceSchedulePool").getLoadBalanceSchedulePoolOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceSchedulePool","getLoadBalanceSchedulePoolOutput"], () => require("./getLoadBalanceSchedulePool"));

export { GetLoadBalanceSchedulePoollistArgs, GetLoadBalanceSchedulePoollistResult, GetLoadBalanceSchedulePoollistOutputArgs } from "./getLoadBalanceSchedulePoollist";
export const getLoadBalanceSchedulePoollist: typeof import("./getLoadBalanceSchedulePoollist").getLoadBalanceSchedulePoollist = null as any;
export const getLoadBalanceSchedulePoollistOutput: typeof import("./getLoadBalanceSchedulePoollist").getLoadBalanceSchedulePoollistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceSchedulePoollist","getLoadBalanceSchedulePoollistOutput"], () => require("./getLoadBalanceSchedulePoollist"));

export { GetLoadBalanceVirtualServerArgs, GetLoadBalanceVirtualServerResult, GetLoadBalanceVirtualServerOutputArgs } from "./getLoadBalanceVirtualServer";
export const getLoadBalanceVirtualServer: typeof import("./getLoadBalanceVirtualServer").getLoadBalanceVirtualServer = null as any;
export const getLoadBalanceVirtualServerOutput: typeof import("./getLoadBalanceVirtualServer").getLoadBalanceVirtualServerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceVirtualServer","getLoadBalanceVirtualServerOutput"], () => require("./getLoadBalanceVirtualServer"));

export { GetLoadBalanceVirtualServerlistArgs, GetLoadBalanceVirtualServerlistResult, GetLoadBalanceVirtualServerlistOutputArgs } from "./getLoadBalanceVirtualServerlist";
export const getLoadBalanceVirtualServerlist: typeof import("./getLoadBalanceVirtualServerlist").getLoadBalanceVirtualServerlist = null as any;
export const getLoadBalanceVirtualServerlistOutput: typeof import("./getLoadBalanceVirtualServerlist").getLoadBalanceVirtualServerlistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceVirtualServerlist","getLoadBalanceVirtualServerlistOutput"], () => require("./getLoadBalanceVirtualServerlist"));

export { GetLoadBalanceWebCategoryArgs, GetLoadBalanceWebCategoryResult, GetLoadBalanceWebCategoryOutputArgs } from "./getLoadBalanceWebCategory";
export const getLoadBalanceWebCategory: typeof import("./getLoadBalanceWebCategory").getLoadBalanceWebCategory = null as any;
export const getLoadBalanceWebCategoryOutput: typeof import("./getLoadBalanceWebCategory").getLoadBalanceWebCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceWebCategory","getLoadBalanceWebCategoryOutput"], () => require("./getLoadBalanceWebCategory"));

export { GetLoadBalanceWebCategorylistArgs, GetLoadBalanceWebCategorylistResult, GetLoadBalanceWebCategorylistOutputArgs } from "./getLoadBalanceWebCategorylist";
export const getLoadBalanceWebCategorylist: typeof import("./getLoadBalanceWebCategorylist").getLoadBalanceWebCategorylist = null as any;
export const getLoadBalanceWebCategorylistOutput: typeof import("./getLoadBalanceWebCategorylist").getLoadBalanceWebCategorylistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceWebCategorylist","getLoadBalanceWebCategorylistOutput"], () => require("./getLoadBalanceWebCategorylist"));

export { GetLoadBalanceWebFilterProfileArgs, GetLoadBalanceWebFilterProfileResult, GetLoadBalanceWebFilterProfileOutputArgs } from "./getLoadBalanceWebFilterProfile";
export const getLoadBalanceWebFilterProfile: typeof import("./getLoadBalanceWebFilterProfile").getLoadBalanceWebFilterProfile = null as any;
export const getLoadBalanceWebFilterProfileOutput: typeof import("./getLoadBalanceWebFilterProfile").getLoadBalanceWebFilterProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceWebFilterProfile","getLoadBalanceWebFilterProfileOutput"], () => require("./getLoadBalanceWebFilterProfile"));

export { GetLoadBalanceWebFilterProfileChildCategoryMembersArgs, GetLoadBalanceWebFilterProfileChildCategoryMembersResult, GetLoadBalanceWebFilterProfileChildCategoryMembersOutputArgs } from "./getLoadBalanceWebFilterProfileChildCategoryMembers";
export const getLoadBalanceWebFilterProfileChildCategoryMembers: typeof import("./getLoadBalanceWebFilterProfileChildCategoryMembers").getLoadBalanceWebFilterProfileChildCategoryMembers = null as any;
export const getLoadBalanceWebFilterProfileChildCategoryMembersOutput: typeof import("./getLoadBalanceWebFilterProfileChildCategoryMembers").getLoadBalanceWebFilterProfileChildCategoryMembersOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceWebFilterProfileChildCategoryMembers","getLoadBalanceWebFilterProfileChildCategoryMembersOutput"], () => require("./getLoadBalanceWebFilterProfileChildCategoryMembers"));

export { GetLoadBalanceWebFilterProfileChildCategoryMemberslistArgs, GetLoadBalanceWebFilterProfileChildCategoryMemberslistResult, GetLoadBalanceWebFilterProfileChildCategoryMemberslistOutputArgs } from "./getLoadBalanceWebFilterProfileChildCategoryMemberslist";
export const getLoadBalanceWebFilterProfileChildCategoryMemberslist: typeof import("./getLoadBalanceWebFilterProfileChildCategoryMemberslist").getLoadBalanceWebFilterProfileChildCategoryMemberslist = null as any;
export const getLoadBalanceWebFilterProfileChildCategoryMemberslistOutput: typeof import("./getLoadBalanceWebFilterProfileChildCategoryMemberslist").getLoadBalanceWebFilterProfileChildCategoryMemberslistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceWebFilterProfileChildCategoryMemberslist","getLoadBalanceWebFilterProfileChildCategoryMemberslistOutput"], () => require("./getLoadBalanceWebFilterProfileChildCategoryMemberslist"));

export { GetLoadBalanceWebFilterProfilelistArgs, GetLoadBalanceWebFilterProfilelistResult, GetLoadBalanceWebFilterProfilelistOutputArgs } from "./getLoadBalanceWebFilterProfilelist";
export const getLoadBalanceWebFilterProfilelist: typeof import("./getLoadBalanceWebFilterProfilelist").getLoadBalanceWebFilterProfilelist = null as any;
export const getLoadBalanceWebFilterProfilelistOutput: typeof import("./getLoadBalanceWebFilterProfilelist").getLoadBalanceWebFilterProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceWebFilterProfilelist","getLoadBalanceWebFilterProfilelistOutput"], () => require("./getLoadBalanceWebFilterProfilelist"));

export { GetLoadBalanceWebSubCategoryArgs, GetLoadBalanceWebSubCategoryResult, GetLoadBalanceWebSubCategoryOutputArgs } from "./getLoadBalanceWebSubCategory";
export const getLoadBalanceWebSubCategory: typeof import("./getLoadBalanceWebSubCategory").getLoadBalanceWebSubCategory = null as any;
export const getLoadBalanceWebSubCategoryOutput: typeof import("./getLoadBalanceWebSubCategory").getLoadBalanceWebSubCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceWebSubCategory","getLoadBalanceWebSubCategoryOutput"], () => require("./getLoadBalanceWebSubCategory"));

export { GetLoadBalanceWebSubCategorylistArgs, GetLoadBalanceWebSubCategorylistResult, GetLoadBalanceWebSubCategorylistOutputArgs } from "./getLoadBalanceWebSubCategorylist";
export const getLoadBalanceWebSubCategorylist: typeof import("./getLoadBalanceWebSubCategorylist").getLoadBalanceWebSubCategorylist = null as any;
export const getLoadBalanceWebSubCategorylistOutput: typeof import("./getLoadBalanceWebSubCategorylist").getLoadBalanceWebSubCategorylistOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalanceWebSubCategorylist","getLoadBalanceWebSubCategorylistOutput"], () => require("./getLoadBalanceWebSubCategorylist"));

export { GetRouterAccessListArgs, GetRouterAccessListResult, GetRouterAccessListOutputArgs } from "./getRouterAccessList";
export const getRouterAccessList: typeof import("./getRouterAccessList").getRouterAccessList = null as any;
export const getRouterAccessListOutput: typeof import("./getRouterAccessList").getRouterAccessListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccessList","getRouterAccessListOutput"], () => require("./getRouterAccessList"));

export { GetRouterAccessList6Args, GetRouterAccessList6Result, GetRouterAccessList6OutputArgs } from "./getRouterAccessList6";
export const getRouterAccessList6: typeof import("./getRouterAccessList6").getRouterAccessList6 = null as any;
export const getRouterAccessList6Output: typeof import("./getRouterAccessList6").getRouterAccessList6Output = null as any;
utilities.lazyLoad(exports, ["getRouterAccessList6","getRouterAccessList6Output"], () => require("./getRouterAccessList6"));

export { GetRouterAccessList6ChildRuleArgs, GetRouterAccessList6ChildRuleResult, GetRouterAccessList6ChildRuleOutputArgs } from "./getRouterAccessList6ChildRule";
export const getRouterAccessList6ChildRule: typeof import("./getRouterAccessList6ChildRule").getRouterAccessList6ChildRule = null as any;
export const getRouterAccessList6ChildRuleOutput: typeof import("./getRouterAccessList6ChildRule").getRouterAccessList6ChildRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccessList6ChildRule","getRouterAccessList6ChildRuleOutput"], () => require("./getRouterAccessList6ChildRule"));

export { GetRouterAccessList6ChildRulelistArgs, GetRouterAccessList6ChildRulelistResult, GetRouterAccessList6ChildRulelistOutputArgs } from "./getRouterAccessList6ChildRulelist";
export const getRouterAccessList6ChildRulelist: typeof import("./getRouterAccessList6ChildRulelist").getRouterAccessList6ChildRulelist = null as any;
export const getRouterAccessList6ChildRulelistOutput: typeof import("./getRouterAccessList6ChildRulelist").getRouterAccessList6ChildRulelistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccessList6ChildRulelist","getRouterAccessList6ChildRulelistOutput"], () => require("./getRouterAccessList6ChildRulelist"));

export { GetRouterAccessList6listArgs, GetRouterAccessList6listResult, GetRouterAccessList6listOutputArgs } from "./getRouterAccessList6list";
export const getRouterAccessList6list: typeof import("./getRouterAccessList6list").getRouterAccessList6list = null as any;
export const getRouterAccessList6listOutput: typeof import("./getRouterAccessList6list").getRouterAccessList6listOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccessList6list","getRouterAccessList6listOutput"], () => require("./getRouterAccessList6list"));

export { GetRouterAccessListChildRuleArgs, GetRouterAccessListChildRuleResult, GetRouterAccessListChildRuleOutputArgs } from "./getRouterAccessListChildRule";
export const getRouterAccessListChildRule: typeof import("./getRouterAccessListChildRule").getRouterAccessListChildRule = null as any;
export const getRouterAccessListChildRuleOutput: typeof import("./getRouterAccessListChildRule").getRouterAccessListChildRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccessListChildRule","getRouterAccessListChildRuleOutput"], () => require("./getRouterAccessListChildRule"));

export { GetRouterAccessListChildRulelistArgs, GetRouterAccessListChildRulelistResult, GetRouterAccessListChildRulelistOutputArgs } from "./getRouterAccessListChildRulelist";
export const getRouterAccessListChildRulelist: typeof import("./getRouterAccessListChildRulelist").getRouterAccessListChildRulelist = null as any;
export const getRouterAccessListChildRulelistOutput: typeof import("./getRouterAccessListChildRulelist").getRouterAccessListChildRulelistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccessListChildRulelist","getRouterAccessListChildRulelistOutput"], () => require("./getRouterAccessListChildRulelist"));

export { GetRouterAccessListlistArgs, GetRouterAccessListlistResult, GetRouterAccessListlistOutputArgs } from "./getRouterAccessListlist";
export const getRouterAccessListlist: typeof import("./getRouterAccessListlist").getRouterAccessListlist = null as any;
export const getRouterAccessListlistOutput: typeof import("./getRouterAccessListlist").getRouterAccessListlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccessListlist","getRouterAccessListlistOutput"], () => require("./getRouterAccessListlist"));

export { GetRouterBgpArgs, GetRouterBgpResult, GetRouterBgpOutputArgs } from "./getRouterBgp";
export const getRouterBgp: typeof import("./getRouterBgp").getRouterBgp = null as any;
export const getRouterBgpOutput: typeof import("./getRouterBgp").getRouterBgpOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgp","getRouterBgpOutput"], () => require("./getRouterBgp"));

export { GetRouterBgpChildHaRouterIdListArgs, GetRouterBgpChildHaRouterIdListResult, GetRouterBgpChildHaRouterIdListOutputArgs } from "./getRouterBgpChildHaRouterIdList";
export const getRouterBgpChildHaRouterIdList: typeof import("./getRouterBgpChildHaRouterIdList").getRouterBgpChildHaRouterIdList = null as any;
export const getRouterBgpChildHaRouterIdListOutput: typeof import("./getRouterBgpChildHaRouterIdList").getRouterBgpChildHaRouterIdListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpChildHaRouterIdList","getRouterBgpChildHaRouterIdListOutput"], () => require("./getRouterBgpChildHaRouterIdList"));

export { GetRouterBgpChildHaRouterIdListlistArgs, GetRouterBgpChildHaRouterIdListlistResult, GetRouterBgpChildHaRouterIdListlistOutputArgs } from "./getRouterBgpChildHaRouterIdListlist";
export const getRouterBgpChildHaRouterIdListlist: typeof import("./getRouterBgpChildHaRouterIdListlist").getRouterBgpChildHaRouterIdListlist = null as any;
export const getRouterBgpChildHaRouterIdListlistOutput: typeof import("./getRouterBgpChildHaRouterIdListlist").getRouterBgpChildHaRouterIdListlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpChildHaRouterIdListlist","getRouterBgpChildHaRouterIdListlistOutput"], () => require("./getRouterBgpChildHaRouterIdListlist"));

export { GetRouterBgpChildNeighborArgs, GetRouterBgpChildNeighborResult, GetRouterBgpChildNeighborOutputArgs } from "./getRouterBgpChildNeighbor";
export const getRouterBgpChildNeighbor: typeof import("./getRouterBgpChildNeighbor").getRouterBgpChildNeighbor = null as any;
export const getRouterBgpChildNeighborOutput: typeof import("./getRouterBgpChildNeighbor").getRouterBgpChildNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpChildNeighbor","getRouterBgpChildNeighborOutput"], () => require("./getRouterBgpChildNeighbor"));

export { GetRouterBgpChildNeighborlistArgs, GetRouterBgpChildNeighborlistResult, GetRouterBgpChildNeighborlistOutputArgs } from "./getRouterBgpChildNeighborlist";
export const getRouterBgpChildNeighborlist: typeof import("./getRouterBgpChildNeighborlist").getRouterBgpChildNeighborlist = null as any;
export const getRouterBgpChildNeighborlistOutput: typeof import("./getRouterBgpChildNeighborlist").getRouterBgpChildNeighborlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpChildNeighborlist","getRouterBgpChildNeighborlistOutput"], () => require("./getRouterBgpChildNeighborlist"));

export { GetRouterBgpChildNetworkArgs, GetRouterBgpChildNetworkResult, GetRouterBgpChildNetworkOutputArgs } from "./getRouterBgpChildNetwork";
export const getRouterBgpChildNetwork: typeof import("./getRouterBgpChildNetwork").getRouterBgpChildNetwork = null as any;
export const getRouterBgpChildNetworkOutput: typeof import("./getRouterBgpChildNetwork").getRouterBgpChildNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpChildNetwork","getRouterBgpChildNetworkOutput"], () => require("./getRouterBgpChildNetwork"));

export { GetRouterBgpChildNetworklistArgs, GetRouterBgpChildNetworklistResult, GetRouterBgpChildNetworklistOutputArgs } from "./getRouterBgpChildNetworklist";
export const getRouterBgpChildNetworklist: typeof import("./getRouterBgpChildNetworklist").getRouterBgpChildNetworklist = null as any;
export const getRouterBgpChildNetworklistOutput: typeof import("./getRouterBgpChildNetworklist").getRouterBgpChildNetworklistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgpChildNetworklist","getRouterBgpChildNetworklistOutput"], () => require("./getRouterBgpChildNetworklist"));

export { GetRouterIspArgs, GetRouterIspResult, GetRouterIspOutputArgs } from "./getRouterIsp";
export const getRouterIsp: typeof import("./getRouterIsp").getRouterIsp = null as any;
export const getRouterIspOutput: typeof import("./getRouterIsp").getRouterIspOutput = null as any;
utilities.lazyLoad(exports, ["getRouterIsp","getRouterIspOutput"], () => require("./getRouterIsp"));

export { GetRouterIsplistArgs, GetRouterIsplistResult, GetRouterIsplistOutputArgs } from "./getRouterIsplist";
export const getRouterIsplist: typeof import("./getRouterIsplist").getRouterIsplist = null as any;
export const getRouterIsplistOutput: typeof import("./getRouterIsplist").getRouterIsplistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterIsplist","getRouterIsplistOutput"], () => require("./getRouterIsplist"));

export { GetRouterMd5OspfArgs, GetRouterMd5OspfResult, GetRouterMd5OspfOutputArgs } from "./getRouterMd5Ospf";
export const getRouterMd5Ospf: typeof import("./getRouterMd5Ospf").getRouterMd5Ospf = null as any;
export const getRouterMd5OspfOutput: typeof import("./getRouterMd5Ospf").getRouterMd5OspfOutput = null as any;
utilities.lazyLoad(exports, ["getRouterMd5Ospf","getRouterMd5OspfOutput"], () => require("./getRouterMd5Ospf"));

export { GetRouterMd5OspfChildMd5MemberArgs, GetRouterMd5OspfChildMd5MemberResult, GetRouterMd5OspfChildMd5MemberOutputArgs } from "./getRouterMd5OspfChildMd5Member";
export const getRouterMd5OspfChildMd5Member: typeof import("./getRouterMd5OspfChildMd5Member").getRouterMd5OspfChildMd5Member = null as any;
export const getRouterMd5OspfChildMd5MemberOutput: typeof import("./getRouterMd5OspfChildMd5Member").getRouterMd5OspfChildMd5MemberOutput = null as any;
utilities.lazyLoad(exports, ["getRouterMd5OspfChildMd5Member","getRouterMd5OspfChildMd5MemberOutput"], () => require("./getRouterMd5OspfChildMd5Member"));

export { GetRouterMd5OspfChildMd5MemberlistArgs, GetRouterMd5OspfChildMd5MemberlistResult, GetRouterMd5OspfChildMd5MemberlistOutputArgs } from "./getRouterMd5OspfChildMd5Memberlist";
export const getRouterMd5OspfChildMd5Memberlist: typeof import("./getRouterMd5OspfChildMd5Memberlist").getRouterMd5OspfChildMd5Memberlist = null as any;
export const getRouterMd5OspfChildMd5MemberlistOutput: typeof import("./getRouterMd5OspfChildMd5Memberlist").getRouterMd5OspfChildMd5MemberlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterMd5OspfChildMd5Memberlist","getRouterMd5OspfChildMd5MemberlistOutput"], () => require("./getRouterMd5OspfChildMd5Memberlist"));

export { GetRouterMd5OspflistArgs, GetRouterMd5OspflistResult, GetRouterMd5OspflistOutputArgs } from "./getRouterMd5Ospflist";
export const getRouterMd5Ospflist: typeof import("./getRouterMd5Ospflist").getRouterMd5Ospflist = null as any;
export const getRouterMd5OspflistOutput: typeof import("./getRouterMd5Ospflist").getRouterMd5OspflistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterMd5Ospflist","getRouterMd5OspflistOutput"], () => require("./getRouterMd5Ospflist"));

export { GetRouterOspfArgs, GetRouterOspfResult, GetRouterOspfOutputArgs } from "./getRouterOspf";
export const getRouterOspf: typeof import("./getRouterOspf").getRouterOspf = null as any;
export const getRouterOspfOutput: typeof import("./getRouterOspf").getRouterOspfOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspf","getRouterOspfOutput"], () => require("./getRouterOspf"));

export { GetRouterOspfChildAreaArgs, GetRouterOspfChildAreaResult, GetRouterOspfChildAreaOutputArgs } from "./getRouterOspfChildArea";
export const getRouterOspfChildArea: typeof import("./getRouterOspfChildArea").getRouterOspfChildArea = null as any;
export const getRouterOspfChildAreaOutput: typeof import("./getRouterOspfChildArea").getRouterOspfChildAreaOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfChildArea","getRouterOspfChildAreaOutput"], () => require("./getRouterOspfChildArea"));

export { GetRouterOspfChildArealistArgs, GetRouterOspfChildArealistResult, GetRouterOspfChildArealistOutputArgs } from "./getRouterOspfChildArealist";
export const getRouterOspfChildArealist: typeof import("./getRouterOspfChildArealist").getRouterOspfChildArealist = null as any;
export const getRouterOspfChildArealistOutput: typeof import("./getRouterOspfChildArealist").getRouterOspfChildArealistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfChildArealist","getRouterOspfChildArealistOutput"], () => require("./getRouterOspfChildArealist"));

export { GetRouterOspfChildHaRouterIdListArgs, GetRouterOspfChildHaRouterIdListResult, GetRouterOspfChildHaRouterIdListOutputArgs } from "./getRouterOspfChildHaRouterIdList";
export const getRouterOspfChildHaRouterIdList: typeof import("./getRouterOspfChildHaRouterIdList").getRouterOspfChildHaRouterIdList = null as any;
export const getRouterOspfChildHaRouterIdListOutput: typeof import("./getRouterOspfChildHaRouterIdList").getRouterOspfChildHaRouterIdListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfChildHaRouterIdList","getRouterOspfChildHaRouterIdListOutput"], () => require("./getRouterOspfChildHaRouterIdList"));

export { GetRouterOspfChildHaRouterIdListlistArgs, GetRouterOspfChildHaRouterIdListlistResult, GetRouterOspfChildHaRouterIdListlistOutputArgs } from "./getRouterOspfChildHaRouterIdListlist";
export const getRouterOspfChildHaRouterIdListlist: typeof import("./getRouterOspfChildHaRouterIdListlist").getRouterOspfChildHaRouterIdListlist = null as any;
export const getRouterOspfChildHaRouterIdListlistOutput: typeof import("./getRouterOspfChildHaRouterIdListlist").getRouterOspfChildHaRouterIdListlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfChildHaRouterIdListlist","getRouterOspfChildHaRouterIdListlistOutput"], () => require("./getRouterOspfChildHaRouterIdListlist"));

export { GetRouterOspfChildNetworkArgs, GetRouterOspfChildNetworkResult, GetRouterOspfChildNetworkOutputArgs } from "./getRouterOspfChildNetwork";
export const getRouterOspfChildNetwork: typeof import("./getRouterOspfChildNetwork").getRouterOspfChildNetwork = null as any;
export const getRouterOspfChildNetworkOutput: typeof import("./getRouterOspfChildNetwork").getRouterOspfChildNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfChildNetwork","getRouterOspfChildNetworkOutput"], () => require("./getRouterOspfChildNetwork"));

export { GetRouterOspfChildNetworklistArgs, GetRouterOspfChildNetworklistResult, GetRouterOspfChildNetworklistOutputArgs } from "./getRouterOspfChildNetworklist";
export const getRouterOspfChildNetworklist: typeof import("./getRouterOspfChildNetworklist").getRouterOspfChildNetworklist = null as any;
export const getRouterOspfChildNetworklistOutput: typeof import("./getRouterOspfChildNetworklist").getRouterOspfChildNetworklistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfChildNetworklist","getRouterOspfChildNetworklistOutput"], () => require("./getRouterOspfChildNetworklist"));

export { GetRouterOspfChildOspfInterfaceArgs, GetRouterOspfChildOspfInterfaceResult, GetRouterOspfChildOspfInterfaceOutputArgs } from "./getRouterOspfChildOspfInterface";
export const getRouterOspfChildOspfInterface: typeof import("./getRouterOspfChildOspfInterface").getRouterOspfChildOspfInterface = null as any;
export const getRouterOspfChildOspfInterfaceOutput: typeof import("./getRouterOspfChildOspfInterface").getRouterOspfChildOspfInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfChildOspfInterface","getRouterOspfChildOspfInterfaceOutput"], () => require("./getRouterOspfChildOspfInterface"));

export { GetRouterOspfChildOspfInterfacelistArgs, GetRouterOspfChildOspfInterfacelistResult, GetRouterOspfChildOspfInterfacelistOutputArgs } from "./getRouterOspfChildOspfInterfacelist";
export const getRouterOspfChildOspfInterfacelist: typeof import("./getRouterOspfChildOspfInterfacelist").getRouterOspfChildOspfInterfacelist = null as any;
export const getRouterOspfChildOspfInterfacelistOutput: typeof import("./getRouterOspfChildOspfInterfacelist").getRouterOspfChildOspfInterfacelistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspfChildOspfInterfacelist","getRouterOspfChildOspfInterfacelistOutput"], () => require("./getRouterOspfChildOspfInterfacelist"));

export { GetRouterPolicyArgs, GetRouterPolicyResult, GetRouterPolicyOutputArgs } from "./getRouterPolicy";
export const getRouterPolicy: typeof import("./getRouterPolicy").getRouterPolicy = null as any;
export const getRouterPolicyOutput: typeof import("./getRouterPolicy").getRouterPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPolicy","getRouterPolicyOutput"], () => require("./getRouterPolicy"));

export { GetRouterPolicylistArgs, GetRouterPolicylistResult, GetRouterPolicylistOutputArgs } from "./getRouterPolicylist";
export const getRouterPolicylist: typeof import("./getRouterPolicylist").getRouterPolicylist = null as any;
export const getRouterPolicylistOutput: typeof import("./getRouterPolicylist").getRouterPolicylistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPolicylist","getRouterPolicylistOutput"], () => require("./getRouterPolicylist"));

export { GetRouterPrefixListArgs, GetRouterPrefixListResult, GetRouterPrefixListOutputArgs } from "./getRouterPrefixList";
export const getRouterPrefixList: typeof import("./getRouterPrefixList").getRouterPrefixList = null as any;
export const getRouterPrefixListOutput: typeof import("./getRouterPrefixList").getRouterPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixList","getRouterPrefixListOutput"], () => require("./getRouterPrefixList"));

export { GetRouterPrefixList6Args, GetRouterPrefixList6Result, GetRouterPrefixList6OutputArgs } from "./getRouterPrefixList6";
export const getRouterPrefixList6: typeof import("./getRouterPrefixList6").getRouterPrefixList6 = null as any;
export const getRouterPrefixList6Output: typeof import("./getRouterPrefixList6").getRouterPrefixList6Output = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixList6","getRouterPrefixList6Output"], () => require("./getRouterPrefixList6"));

export { GetRouterPrefixList6ChildRuleArgs, GetRouterPrefixList6ChildRuleResult, GetRouterPrefixList6ChildRuleOutputArgs } from "./getRouterPrefixList6ChildRule";
export const getRouterPrefixList6ChildRule: typeof import("./getRouterPrefixList6ChildRule").getRouterPrefixList6ChildRule = null as any;
export const getRouterPrefixList6ChildRuleOutput: typeof import("./getRouterPrefixList6ChildRule").getRouterPrefixList6ChildRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixList6ChildRule","getRouterPrefixList6ChildRuleOutput"], () => require("./getRouterPrefixList6ChildRule"));

export { GetRouterPrefixList6ChildRulelistArgs, GetRouterPrefixList6ChildRulelistResult, GetRouterPrefixList6ChildRulelistOutputArgs } from "./getRouterPrefixList6ChildRulelist";
export const getRouterPrefixList6ChildRulelist: typeof import("./getRouterPrefixList6ChildRulelist").getRouterPrefixList6ChildRulelist = null as any;
export const getRouterPrefixList6ChildRulelistOutput: typeof import("./getRouterPrefixList6ChildRulelist").getRouterPrefixList6ChildRulelistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixList6ChildRulelist","getRouterPrefixList6ChildRulelistOutput"], () => require("./getRouterPrefixList6ChildRulelist"));

export { GetRouterPrefixList6listArgs, GetRouterPrefixList6listResult, GetRouterPrefixList6listOutputArgs } from "./getRouterPrefixList6list";
export const getRouterPrefixList6list: typeof import("./getRouterPrefixList6list").getRouterPrefixList6list = null as any;
export const getRouterPrefixList6listOutput: typeof import("./getRouterPrefixList6list").getRouterPrefixList6listOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixList6list","getRouterPrefixList6listOutput"], () => require("./getRouterPrefixList6list"));

export { GetRouterPrefixListChildRuleArgs, GetRouterPrefixListChildRuleResult, GetRouterPrefixListChildRuleOutputArgs } from "./getRouterPrefixListChildRule";
export const getRouterPrefixListChildRule: typeof import("./getRouterPrefixListChildRule").getRouterPrefixListChildRule = null as any;
export const getRouterPrefixListChildRuleOutput: typeof import("./getRouterPrefixListChildRule").getRouterPrefixListChildRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixListChildRule","getRouterPrefixListChildRuleOutput"], () => require("./getRouterPrefixListChildRule"));

export { GetRouterPrefixListChildRulelistArgs, GetRouterPrefixListChildRulelistResult, GetRouterPrefixListChildRulelistOutputArgs } from "./getRouterPrefixListChildRulelist";
export const getRouterPrefixListChildRulelist: typeof import("./getRouterPrefixListChildRulelist").getRouterPrefixListChildRulelist = null as any;
export const getRouterPrefixListChildRulelistOutput: typeof import("./getRouterPrefixListChildRulelist").getRouterPrefixListChildRulelistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixListChildRulelist","getRouterPrefixListChildRulelistOutput"], () => require("./getRouterPrefixListChildRulelist"));

export { GetRouterPrefixListlistArgs, GetRouterPrefixListlistResult, GetRouterPrefixListlistOutputArgs } from "./getRouterPrefixListlist";
export const getRouterPrefixListlist: typeof import("./getRouterPrefixListlist").getRouterPrefixListlist = null as any;
export const getRouterPrefixListlistOutput: typeof import("./getRouterPrefixListlist").getRouterPrefixListlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixListlist","getRouterPrefixListlistOutput"], () => require("./getRouterPrefixListlist"));

export { GetRouterStaticArgs, GetRouterStaticResult, GetRouterStaticOutputArgs } from "./getRouterStatic";
export const getRouterStatic: typeof import("./getRouterStatic").getRouterStatic = null as any;
export const getRouterStaticOutput: typeof import("./getRouterStatic").getRouterStaticOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStatic","getRouterStaticOutput"], () => require("./getRouterStatic"));

export { GetRouterStaticlistArgs, GetRouterStaticlistResult, GetRouterStaticlistOutputArgs } from "./getRouterStaticlist";
export const getRouterStaticlist: typeof import("./getRouterStaticlist").getRouterStaticlist = null as any;
export const getRouterStaticlistOutput: typeof import("./getRouterStaticlist").getRouterStaticlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticlist","getRouterStaticlistOutput"], () => require("./getRouterStaticlist"));

export { GetSecurityAntivirusProfileArgs, GetSecurityAntivirusProfileResult, GetSecurityAntivirusProfileOutputArgs } from "./getSecurityAntivirusProfile";
export const getSecurityAntivirusProfile: typeof import("./getSecurityAntivirusProfile").getSecurityAntivirusProfile = null as any;
export const getSecurityAntivirusProfileOutput: typeof import("./getSecurityAntivirusProfile").getSecurityAntivirusProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityAntivirusProfile","getSecurityAntivirusProfileOutput"], () => require("./getSecurityAntivirusProfile"));

export { GetSecurityAntivirusProfilelistArgs, GetSecurityAntivirusProfilelistResult, GetSecurityAntivirusProfilelistOutputArgs } from "./getSecurityAntivirusProfilelist";
export const getSecurityAntivirusProfilelist: typeof import("./getSecurityAntivirusProfilelist").getSecurityAntivirusProfilelist = null as any;
export const getSecurityAntivirusProfilelistOutput: typeof import("./getSecurityAntivirusProfilelist").getSecurityAntivirusProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityAntivirusProfilelist","getSecurityAntivirusProfilelistOutput"], () => require("./getSecurityAntivirusProfilelist"));

export { GetSecurityDosDosProtectionProfileArgs, GetSecurityDosDosProtectionProfileResult, GetSecurityDosDosProtectionProfileOutputArgs } from "./getSecurityDosDosProtectionProfile";
export const getSecurityDosDosProtectionProfile: typeof import("./getSecurityDosDosProtectionProfile").getSecurityDosDosProtectionProfile = null as any;
export const getSecurityDosDosProtectionProfileOutput: typeof import("./getSecurityDosDosProtectionProfile").getSecurityDosDosProtectionProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityDosDosProtectionProfile","getSecurityDosDosProtectionProfileOutput"], () => require("./getSecurityDosDosProtectionProfile"));

export { GetSecurityDosDosProtectionProfilelistArgs, GetSecurityDosDosProtectionProfilelistResult, GetSecurityDosDosProtectionProfilelistOutputArgs } from "./getSecurityDosDosProtectionProfilelist";
export const getSecurityDosDosProtectionProfilelist: typeof import("./getSecurityDosDosProtectionProfilelist").getSecurityDosDosProtectionProfilelist = null as any;
export const getSecurityDosDosProtectionProfilelistOutput: typeof import("./getSecurityDosDosProtectionProfilelist").getSecurityDosDosProtectionProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityDosDosProtectionProfilelist","getSecurityDosDosProtectionProfilelistOutput"], () => require("./getSecurityDosDosProtectionProfilelist"));

export { GetSecurityIpsProfileArgs, GetSecurityIpsProfileResult, GetSecurityIpsProfileOutputArgs } from "./getSecurityIpsProfile";
export const getSecurityIpsProfile: typeof import("./getSecurityIpsProfile").getSecurityIpsProfile = null as any;
export const getSecurityIpsProfileOutput: typeof import("./getSecurityIpsProfile").getSecurityIpsProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityIpsProfile","getSecurityIpsProfileOutput"], () => require("./getSecurityIpsProfile"));

export { GetSecurityIpsProfilelistArgs, GetSecurityIpsProfilelistResult, GetSecurityIpsProfilelistOutputArgs } from "./getSecurityIpsProfilelist";
export const getSecurityIpsProfilelist: typeof import("./getSecurityIpsProfilelist").getSecurityIpsProfilelist = null as any;
export const getSecurityIpsProfilelistOutput: typeof import("./getSecurityIpsProfilelist").getSecurityIpsProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityIpsProfilelist","getSecurityIpsProfilelistOutput"], () => require("./getSecurityIpsProfilelist"));

export { GetSecurityWafProfileArgs, GetSecurityWafProfileResult, GetSecurityWafProfileOutputArgs } from "./getSecurityWafProfile";
export const getSecurityWafProfile: typeof import("./getSecurityWafProfile").getSecurityWafProfile = null as any;
export const getSecurityWafProfileOutput: typeof import("./getSecurityWafProfile").getSecurityWafProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityWafProfile","getSecurityWafProfileOutput"], () => require("./getSecurityWafProfile"));

export { GetSecurityWafProfilelistArgs, GetSecurityWafProfilelistResult, GetSecurityWafProfilelistOutputArgs } from "./getSecurityWafProfilelist";
export const getSecurityWafProfilelist: typeof import("./getSecurityWafProfilelist").getSecurityWafProfilelist = null as any;
export const getSecurityWafProfilelistOutput: typeof import("./getSecurityWafProfilelist").getSecurityWafProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityWafProfilelist","getSecurityWafProfilelistOutput"], () => require("./getSecurityWafProfilelist"));

export { GetSecurityZtnaProfileArgs, GetSecurityZtnaProfileResult, GetSecurityZtnaProfileOutputArgs } from "./getSecurityZtnaProfile";
export const getSecurityZtnaProfile: typeof import("./getSecurityZtnaProfile").getSecurityZtnaProfile = null as any;
export const getSecurityZtnaProfileOutput: typeof import("./getSecurityZtnaProfile").getSecurityZtnaProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityZtnaProfile","getSecurityZtnaProfileOutput"], () => require("./getSecurityZtnaProfile"));

export { GetSecurityZtnaProfilelistArgs, GetSecurityZtnaProfilelistResult, GetSecurityZtnaProfilelistOutputArgs } from "./getSecurityZtnaProfilelist";
export const getSecurityZtnaProfilelist: typeof import("./getSecurityZtnaProfilelist").getSecurityZtnaProfilelist = null as any;
export const getSecurityZtnaProfilelistOutput: typeof import("./getSecurityZtnaProfilelist").getSecurityZtnaProfilelistOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityZtnaProfilelist","getSecurityZtnaProfilelistOutput"], () => require("./getSecurityZtnaProfilelist"));

export { GetSystemAddressArgs, GetSystemAddressResult, GetSystemAddressOutputArgs } from "./getSystemAddress";
export const getSystemAddress: typeof import("./getSystemAddress").getSystemAddress = null as any;
export const getSystemAddressOutput: typeof import("./getSystemAddress").getSystemAddressOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAddress","getSystemAddressOutput"], () => require("./getSystemAddress"));

export { GetSystemAddress6Args, GetSystemAddress6Result, GetSystemAddress6OutputArgs } from "./getSystemAddress6";
export const getSystemAddress6: typeof import("./getSystemAddress6").getSystemAddress6 = null as any;
export const getSystemAddress6Output: typeof import("./getSystemAddress6").getSystemAddress6Output = null as any;
utilities.lazyLoad(exports, ["getSystemAddress6","getSystemAddress6Output"], () => require("./getSystemAddress6"));

export { GetSystemAddress6listArgs, GetSystemAddress6listResult, GetSystemAddress6listOutputArgs } from "./getSystemAddress6list";
export const getSystemAddress6list: typeof import("./getSystemAddress6list").getSystemAddress6list = null as any;
export const getSystemAddress6listOutput: typeof import("./getSystemAddress6list").getSystemAddress6listOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAddress6list","getSystemAddress6listOutput"], () => require("./getSystemAddress6list"));

export { GetSystemAddresslistArgs, GetSystemAddresslistResult, GetSystemAddresslistOutputArgs } from "./getSystemAddresslist";
export const getSystemAddresslist: typeof import("./getSystemAddresslist").getSystemAddresslist = null as any;
export const getSystemAddresslistOutput: typeof import("./getSystemAddresslist").getSystemAddresslistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAddresslist","getSystemAddresslistOutput"], () => require("./getSystemAddresslist"));

export { GetSystemAddrgrpArgs, GetSystemAddrgrpResult, GetSystemAddrgrpOutputArgs } from "./getSystemAddrgrp";
export const getSystemAddrgrp: typeof import("./getSystemAddrgrp").getSystemAddrgrp = null as any;
export const getSystemAddrgrpOutput: typeof import("./getSystemAddrgrp").getSystemAddrgrpOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAddrgrp","getSystemAddrgrpOutput"], () => require("./getSystemAddrgrp"));

export { GetSystemAddrgrp6Args, GetSystemAddrgrp6Result, GetSystemAddrgrp6OutputArgs } from "./getSystemAddrgrp6";
export const getSystemAddrgrp6: typeof import("./getSystemAddrgrp6").getSystemAddrgrp6 = null as any;
export const getSystemAddrgrp6Output: typeof import("./getSystemAddrgrp6").getSystemAddrgrp6Output = null as any;
utilities.lazyLoad(exports, ["getSystemAddrgrp6","getSystemAddrgrp6Output"], () => require("./getSystemAddrgrp6"));

export { GetSystemAddrgrp6listArgs, GetSystemAddrgrp6listResult, GetSystemAddrgrp6listOutputArgs } from "./getSystemAddrgrp6list";
export const getSystemAddrgrp6list: typeof import("./getSystemAddrgrp6list").getSystemAddrgrp6list = null as any;
export const getSystemAddrgrp6listOutput: typeof import("./getSystemAddrgrp6list").getSystemAddrgrp6listOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAddrgrp6list","getSystemAddrgrp6listOutput"], () => require("./getSystemAddrgrp6list"));

export { GetSystemAddrgrplistArgs, GetSystemAddrgrplistResult, GetSystemAddrgrplistOutputArgs } from "./getSystemAddrgrplist";
export const getSystemAddrgrplist: typeof import("./getSystemAddrgrplist").getSystemAddrgrplist = null as any;
export const getSystemAddrgrplistOutput: typeof import("./getSystemAddrgrplist").getSystemAddrgrplistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAddrgrplist","getSystemAddrgrplistOutput"], () => require("./getSystemAddrgrplist"));

export { GetSystemAutoBackupArgs, GetSystemAutoBackupResult, GetSystemAutoBackupOutputArgs } from "./getSystemAutoBackup";
export const getSystemAutoBackup: typeof import("./getSystemAutoBackup").getSystemAutoBackup = null as any;
export const getSystemAutoBackupOutput: typeof import("./getSystemAutoBackup").getSystemAutoBackupOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutoBackup","getSystemAutoBackupOutput"], () => require("./getSystemAutoBackup"));

export { GetSystemAzureLbBackendIpArgs, GetSystemAzureLbBackendIpResult, GetSystemAzureLbBackendIpOutputArgs } from "./getSystemAzureLbBackendIp";
export const getSystemAzureLbBackendIp: typeof import("./getSystemAzureLbBackendIp").getSystemAzureLbBackendIp = null as any;
export const getSystemAzureLbBackendIpOutput: typeof import("./getSystemAzureLbBackendIp").getSystemAzureLbBackendIpOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAzureLbBackendIp","getSystemAzureLbBackendIpOutput"], () => require("./getSystemAzureLbBackendIp"));

export { GetSystemAzureLbBackendIplistArgs, GetSystemAzureLbBackendIplistResult, GetSystemAzureLbBackendIplistOutputArgs } from "./getSystemAzureLbBackendIplist";
export const getSystemAzureLbBackendIplist: typeof import("./getSystemAzureLbBackendIplist").getSystemAzureLbBackendIplist = null as any;
export const getSystemAzureLbBackendIplistOutput: typeof import("./getSystemAzureLbBackendIplist").getSystemAzureLbBackendIplistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAzureLbBackendIplist","getSystemAzureLbBackendIplistOutput"], () => require("./getSystemAzureLbBackendIplist"));

export { GetSystemCertificateCaGroupArgs, GetSystemCertificateCaGroupResult, GetSystemCertificateCaGroupOutputArgs } from "./getSystemCertificateCaGroup";
export const getSystemCertificateCaGroup: typeof import("./getSystemCertificateCaGroup").getSystemCertificateCaGroup = null as any;
export const getSystemCertificateCaGroupOutput: typeof import("./getSystemCertificateCaGroup").getSystemCertificateCaGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateCaGroup","getSystemCertificateCaGroupOutput"], () => require("./getSystemCertificateCaGroup"));

export { GetSystemCertificateCaGroupChildGroupMemberArgs, GetSystemCertificateCaGroupChildGroupMemberResult, GetSystemCertificateCaGroupChildGroupMemberOutputArgs } from "./getSystemCertificateCaGroupChildGroupMember";
export const getSystemCertificateCaGroupChildGroupMember: typeof import("./getSystemCertificateCaGroupChildGroupMember").getSystemCertificateCaGroupChildGroupMember = null as any;
export const getSystemCertificateCaGroupChildGroupMemberOutput: typeof import("./getSystemCertificateCaGroupChildGroupMember").getSystemCertificateCaGroupChildGroupMemberOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateCaGroupChildGroupMember","getSystemCertificateCaGroupChildGroupMemberOutput"], () => require("./getSystemCertificateCaGroupChildGroupMember"));

export { GetSystemCertificateCaGroupChildGroupMemberlistArgs, GetSystemCertificateCaGroupChildGroupMemberlistResult, GetSystemCertificateCaGroupChildGroupMemberlistOutputArgs } from "./getSystemCertificateCaGroupChildGroupMemberlist";
export const getSystemCertificateCaGroupChildGroupMemberlist: typeof import("./getSystemCertificateCaGroupChildGroupMemberlist").getSystemCertificateCaGroupChildGroupMemberlist = null as any;
export const getSystemCertificateCaGroupChildGroupMemberlistOutput: typeof import("./getSystemCertificateCaGroupChildGroupMemberlist").getSystemCertificateCaGroupChildGroupMemberlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateCaGroupChildGroupMemberlist","getSystemCertificateCaGroupChildGroupMemberlistOutput"], () => require("./getSystemCertificateCaGroupChildGroupMemberlist"));

export { GetSystemCertificateCaGrouplistArgs, GetSystemCertificateCaGrouplistResult, GetSystemCertificateCaGrouplistOutputArgs } from "./getSystemCertificateCaGrouplist";
export const getSystemCertificateCaGrouplist: typeof import("./getSystemCertificateCaGrouplist").getSystemCertificateCaGrouplist = null as any;
export const getSystemCertificateCaGrouplistOutput: typeof import("./getSystemCertificateCaGrouplist").getSystemCertificateCaGrouplistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateCaGrouplist","getSystemCertificateCaGrouplistOutput"], () => require("./getSystemCertificateCaGrouplist"));

export { GetSystemCertificateCertificateVerifyArgs, GetSystemCertificateCertificateVerifyResult, GetSystemCertificateCertificateVerifyOutputArgs } from "./getSystemCertificateCertificateVerify";
export const getSystemCertificateCertificateVerify: typeof import("./getSystemCertificateCertificateVerify").getSystemCertificateCertificateVerify = null as any;
export const getSystemCertificateCertificateVerifyOutput: typeof import("./getSystemCertificateCertificateVerify").getSystemCertificateCertificateVerifyOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateCertificateVerify","getSystemCertificateCertificateVerifyOutput"], () => require("./getSystemCertificateCertificateVerify"));

export { GetSystemCertificateCertificateVerifyChildGroupMemberArgs, GetSystemCertificateCertificateVerifyChildGroupMemberResult, GetSystemCertificateCertificateVerifyChildGroupMemberOutputArgs } from "./getSystemCertificateCertificateVerifyChildGroupMember";
export const getSystemCertificateCertificateVerifyChildGroupMember: typeof import("./getSystemCertificateCertificateVerifyChildGroupMember").getSystemCertificateCertificateVerifyChildGroupMember = null as any;
export const getSystemCertificateCertificateVerifyChildGroupMemberOutput: typeof import("./getSystemCertificateCertificateVerifyChildGroupMember").getSystemCertificateCertificateVerifyChildGroupMemberOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateCertificateVerifyChildGroupMember","getSystemCertificateCertificateVerifyChildGroupMemberOutput"], () => require("./getSystemCertificateCertificateVerifyChildGroupMember"));

export { GetSystemCertificateCertificateVerifyChildGroupMemberlistArgs, GetSystemCertificateCertificateVerifyChildGroupMemberlistResult, GetSystemCertificateCertificateVerifyChildGroupMemberlistOutputArgs } from "./getSystemCertificateCertificateVerifyChildGroupMemberlist";
export const getSystemCertificateCertificateVerifyChildGroupMemberlist: typeof import("./getSystemCertificateCertificateVerifyChildGroupMemberlist").getSystemCertificateCertificateVerifyChildGroupMemberlist = null as any;
export const getSystemCertificateCertificateVerifyChildGroupMemberlistOutput: typeof import("./getSystemCertificateCertificateVerifyChildGroupMemberlist").getSystemCertificateCertificateVerifyChildGroupMemberlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateCertificateVerifyChildGroupMemberlist","getSystemCertificateCertificateVerifyChildGroupMemberlistOutput"], () => require("./getSystemCertificateCertificateVerifyChildGroupMemberlist"));

export { GetSystemCertificateCertificateVerifylistArgs, GetSystemCertificateCertificateVerifylistResult, GetSystemCertificateCertificateVerifylistOutputArgs } from "./getSystemCertificateCertificateVerifylist";
export const getSystemCertificateCertificateVerifylist: typeof import("./getSystemCertificateCertificateVerifylist").getSystemCertificateCertificateVerifylist = null as any;
export const getSystemCertificateCertificateVerifylistOutput: typeof import("./getSystemCertificateCertificateVerifylist").getSystemCertificateCertificateVerifylistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateCertificateVerifylist","getSystemCertificateCertificateVerifylistOutput"], () => require("./getSystemCertificateCertificateVerifylist"));

export { GetSystemCertificateCrlArgs, GetSystemCertificateCrlResult, GetSystemCertificateCrlOutputArgs } from "./getSystemCertificateCrl";
export const getSystemCertificateCrl: typeof import("./getSystemCertificateCrl").getSystemCertificateCrl = null as any;
export const getSystemCertificateCrlOutput: typeof import("./getSystemCertificateCrl").getSystemCertificateCrlOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateCrl","getSystemCertificateCrlOutput"], () => require("./getSystemCertificateCrl"));

export { GetSystemCertificateCrllistArgs, GetSystemCertificateCrllistResult, GetSystemCertificateCrllistOutputArgs } from "./getSystemCertificateCrllist";
export const getSystemCertificateCrllist: typeof import("./getSystemCertificateCrllist").getSystemCertificateCrllist = null as any;
export const getSystemCertificateCrllistOutput: typeof import("./getSystemCertificateCrllist").getSystemCertificateCrllistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateCrllist","getSystemCertificateCrllistOutput"], () => require("./getSystemCertificateCrllist"));

export { GetSystemCertificateIntermediateCaArgs, GetSystemCertificateIntermediateCaResult, GetSystemCertificateIntermediateCaOutputArgs } from "./getSystemCertificateIntermediateCa";
export const getSystemCertificateIntermediateCa: typeof import("./getSystemCertificateIntermediateCa").getSystemCertificateIntermediateCa = null as any;
export const getSystemCertificateIntermediateCaOutput: typeof import("./getSystemCertificateIntermediateCa").getSystemCertificateIntermediateCaOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateIntermediateCa","getSystemCertificateIntermediateCaOutput"], () => require("./getSystemCertificateIntermediateCa"));

export { GetSystemCertificateIntermediateCaGroupArgs, GetSystemCertificateIntermediateCaGroupResult, GetSystemCertificateIntermediateCaGroupOutputArgs } from "./getSystemCertificateIntermediateCaGroup";
export const getSystemCertificateIntermediateCaGroup: typeof import("./getSystemCertificateIntermediateCaGroup").getSystemCertificateIntermediateCaGroup = null as any;
export const getSystemCertificateIntermediateCaGroupOutput: typeof import("./getSystemCertificateIntermediateCaGroup").getSystemCertificateIntermediateCaGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateIntermediateCaGroup","getSystemCertificateIntermediateCaGroupOutput"], () => require("./getSystemCertificateIntermediateCaGroup"));

export { GetSystemCertificateIntermediateCaGroupChildGroupMemberArgs, GetSystemCertificateIntermediateCaGroupChildGroupMemberResult, GetSystemCertificateIntermediateCaGroupChildGroupMemberOutputArgs } from "./getSystemCertificateIntermediateCaGroupChildGroupMember";
export const getSystemCertificateIntermediateCaGroupChildGroupMember: typeof import("./getSystemCertificateIntermediateCaGroupChildGroupMember").getSystemCertificateIntermediateCaGroupChildGroupMember = null as any;
export const getSystemCertificateIntermediateCaGroupChildGroupMemberOutput: typeof import("./getSystemCertificateIntermediateCaGroupChildGroupMember").getSystemCertificateIntermediateCaGroupChildGroupMemberOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateIntermediateCaGroupChildGroupMember","getSystemCertificateIntermediateCaGroupChildGroupMemberOutput"], () => require("./getSystemCertificateIntermediateCaGroupChildGroupMember"));

export { GetSystemCertificateIntermediateCaGroupChildGroupMemberlistArgs, GetSystemCertificateIntermediateCaGroupChildGroupMemberlistResult, GetSystemCertificateIntermediateCaGroupChildGroupMemberlistOutputArgs } from "./getSystemCertificateIntermediateCaGroupChildGroupMemberlist";
export const getSystemCertificateIntermediateCaGroupChildGroupMemberlist: typeof import("./getSystemCertificateIntermediateCaGroupChildGroupMemberlist").getSystemCertificateIntermediateCaGroupChildGroupMemberlist = null as any;
export const getSystemCertificateIntermediateCaGroupChildGroupMemberlistOutput: typeof import("./getSystemCertificateIntermediateCaGroupChildGroupMemberlist").getSystemCertificateIntermediateCaGroupChildGroupMemberlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateIntermediateCaGroupChildGroupMemberlist","getSystemCertificateIntermediateCaGroupChildGroupMemberlistOutput"], () => require("./getSystemCertificateIntermediateCaGroupChildGroupMemberlist"));

export { GetSystemCertificateIntermediateCaGrouplistArgs, GetSystemCertificateIntermediateCaGrouplistResult, GetSystemCertificateIntermediateCaGrouplistOutputArgs } from "./getSystemCertificateIntermediateCaGrouplist";
export const getSystemCertificateIntermediateCaGrouplist: typeof import("./getSystemCertificateIntermediateCaGrouplist").getSystemCertificateIntermediateCaGrouplist = null as any;
export const getSystemCertificateIntermediateCaGrouplistOutput: typeof import("./getSystemCertificateIntermediateCaGrouplist").getSystemCertificateIntermediateCaGrouplistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateIntermediateCaGrouplist","getSystemCertificateIntermediateCaGrouplistOutput"], () => require("./getSystemCertificateIntermediateCaGrouplist"));

export { GetSystemCertificateIntermediateCalistArgs, GetSystemCertificateIntermediateCalistResult, GetSystemCertificateIntermediateCalistOutputArgs } from "./getSystemCertificateIntermediateCalist";
export const getSystemCertificateIntermediateCalist: typeof import("./getSystemCertificateIntermediateCalist").getSystemCertificateIntermediateCalist = null as any;
export const getSystemCertificateIntermediateCalistOutput: typeof import("./getSystemCertificateIntermediateCalist").getSystemCertificateIntermediateCalistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateIntermediateCalist","getSystemCertificateIntermediateCalistOutput"], () => require("./getSystemCertificateIntermediateCalist"));

export { GetSystemCertificateLocalArgs, GetSystemCertificateLocalResult, GetSystemCertificateLocalOutputArgs } from "./getSystemCertificateLocal";
export const getSystemCertificateLocal: typeof import("./getSystemCertificateLocal").getSystemCertificateLocal = null as any;
export const getSystemCertificateLocalOutput: typeof import("./getSystemCertificateLocal").getSystemCertificateLocalOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateLocal","getSystemCertificateLocalOutput"], () => require("./getSystemCertificateLocal"));

export { GetSystemCertificateLocalCertGroupArgs, GetSystemCertificateLocalCertGroupResult, GetSystemCertificateLocalCertGroupOutputArgs } from "./getSystemCertificateLocalCertGroup";
export const getSystemCertificateLocalCertGroup: typeof import("./getSystemCertificateLocalCertGroup").getSystemCertificateLocalCertGroup = null as any;
export const getSystemCertificateLocalCertGroupOutput: typeof import("./getSystemCertificateLocalCertGroup").getSystemCertificateLocalCertGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateLocalCertGroup","getSystemCertificateLocalCertGroupOutput"], () => require("./getSystemCertificateLocalCertGroup"));

export { GetSystemCertificateLocalCertGroupChildGroupMemberArgs, GetSystemCertificateLocalCertGroupChildGroupMemberResult, GetSystemCertificateLocalCertGroupChildGroupMemberOutputArgs } from "./getSystemCertificateLocalCertGroupChildGroupMember";
export const getSystemCertificateLocalCertGroupChildGroupMember: typeof import("./getSystemCertificateLocalCertGroupChildGroupMember").getSystemCertificateLocalCertGroupChildGroupMember = null as any;
export const getSystemCertificateLocalCertGroupChildGroupMemberOutput: typeof import("./getSystemCertificateLocalCertGroupChildGroupMember").getSystemCertificateLocalCertGroupChildGroupMemberOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateLocalCertGroupChildGroupMember","getSystemCertificateLocalCertGroupChildGroupMemberOutput"], () => require("./getSystemCertificateLocalCertGroupChildGroupMember"));

export { GetSystemCertificateLocalCertGroupChildGroupMemberlistArgs, GetSystemCertificateLocalCertGroupChildGroupMemberlistResult, GetSystemCertificateLocalCertGroupChildGroupMemberlistOutputArgs } from "./getSystemCertificateLocalCertGroupChildGroupMemberlist";
export const getSystemCertificateLocalCertGroupChildGroupMemberlist: typeof import("./getSystemCertificateLocalCertGroupChildGroupMemberlist").getSystemCertificateLocalCertGroupChildGroupMemberlist = null as any;
export const getSystemCertificateLocalCertGroupChildGroupMemberlistOutput: typeof import("./getSystemCertificateLocalCertGroupChildGroupMemberlist").getSystemCertificateLocalCertGroupChildGroupMemberlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateLocalCertGroupChildGroupMemberlist","getSystemCertificateLocalCertGroupChildGroupMemberlistOutput"], () => require("./getSystemCertificateLocalCertGroupChildGroupMemberlist"));

export { GetSystemCertificateLocalCertGrouplistArgs, GetSystemCertificateLocalCertGrouplistResult, GetSystemCertificateLocalCertGrouplistOutputArgs } from "./getSystemCertificateLocalCertGrouplist";
export const getSystemCertificateLocalCertGrouplist: typeof import("./getSystemCertificateLocalCertGrouplist").getSystemCertificateLocalCertGrouplist = null as any;
export const getSystemCertificateLocalCertGrouplistOutput: typeof import("./getSystemCertificateLocalCertGrouplist").getSystemCertificateLocalCertGrouplistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateLocalCertGrouplist","getSystemCertificateLocalCertGrouplistOutput"], () => require("./getSystemCertificateLocalCertGrouplist"));

export { GetSystemCertificateLocallistArgs, GetSystemCertificateLocallistResult, GetSystemCertificateLocallistOutputArgs } from "./getSystemCertificateLocallist";
export const getSystemCertificateLocallist: typeof import("./getSystemCertificateLocallist").getSystemCertificateLocallist = null as any;
export const getSystemCertificateLocallistOutput: typeof import("./getSystemCertificateLocallist").getSystemCertificateLocallistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateLocallist","getSystemCertificateLocallistOutput"], () => require("./getSystemCertificateLocallist"));

export { GetSystemCertificateOcspArgs, GetSystemCertificateOcspResult, GetSystemCertificateOcspOutputArgs } from "./getSystemCertificateOcsp";
export const getSystemCertificateOcsp: typeof import("./getSystemCertificateOcsp").getSystemCertificateOcsp = null as any;
export const getSystemCertificateOcspOutput: typeof import("./getSystemCertificateOcsp").getSystemCertificateOcspOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateOcsp","getSystemCertificateOcspOutput"], () => require("./getSystemCertificateOcsp"));

export { GetSystemCertificateOcsplistArgs, GetSystemCertificateOcsplistResult, GetSystemCertificateOcsplistOutputArgs } from "./getSystemCertificateOcsplist";
export const getSystemCertificateOcsplist: typeof import("./getSystemCertificateOcsplist").getSystemCertificateOcsplist = null as any;
export const getSystemCertificateOcsplistOutput: typeof import("./getSystemCertificateOcsplist").getSystemCertificateOcsplistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCertificateOcsplist","getSystemCertificateOcsplistOutput"], () => require("./getSystemCertificateOcsplist"));

export { GetSystemDnsArgs, GetSystemDnsResult, GetSystemDnsOutputArgs } from "./getSystemDns";
export const getSystemDns: typeof import("./getSystemDns").getSystemDns = null as any;
export const getSystemDnsOutput: typeof import("./getSystemDns").getSystemDnsOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDns","getSystemDnsOutput"], () => require("./getSystemDns"));

export { GetSystemDnsVdomArgs, GetSystemDnsVdomResult, GetSystemDnsVdomOutputArgs } from "./getSystemDnsVdom";
export const getSystemDnsVdom: typeof import("./getSystemDnsVdom").getSystemDnsVdom = null as any;
export const getSystemDnsVdomOutput: typeof import("./getSystemDnsVdom").getSystemDnsVdomOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDnsVdom","getSystemDnsVdomOutput"], () => require("./getSystemDnsVdom"));

export { GetSystemGlobalArgs, GetSystemGlobalResult, GetSystemGlobalOutputArgs } from "./getSystemGlobal";
export const getSystemGlobal: typeof import("./getSystemGlobal").getSystemGlobal = null as any;
export const getSystemGlobalOutput: typeof import("./getSystemGlobal").getSystemGlobalOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGlobal","getSystemGlobalOutput"], () => require("./getSystemGlobal"));

export { GetSystemHaArgs, GetSystemHaResult, GetSystemHaOutputArgs } from "./getSystemHa";
export const getSystemHa: typeof import("./getSystemHa").getSystemHa = null as any;
export const getSystemHaOutput: typeof import("./getSystemHa").getSystemHaOutput = null as any;
utilities.lazyLoad(exports, ["getSystemHa","getSystemHaOutput"], () => require("./getSystemHa"));

export { GetSystemHaChildRemoteIpMonitorListArgs, GetSystemHaChildRemoteIpMonitorListResult, GetSystemHaChildRemoteIpMonitorListOutputArgs } from "./getSystemHaChildRemoteIpMonitorList";
export const getSystemHaChildRemoteIpMonitorList: typeof import("./getSystemHaChildRemoteIpMonitorList").getSystemHaChildRemoteIpMonitorList = null as any;
export const getSystemHaChildRemoteIpMonitorListOutput: typeof import("./getSystemHaChildRemoteIpMonitorList").getSystemHaChildRemoteIpMonitorListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemHaChildRemoteIpMonitorList","getSystemHaChildRemoteIpMonitorListOutput"], () => require("./getSystemHaChildRemoteIpMonitorList"));

export { GetSystemHaChildRemoteIpMonitorListlistArgs, GetSystemHaChildRemoteIpMonitorListlistResult, GetSystemHaChildRemoteIpMonitorListlistOutputArgs } from "./getSystemHaChildRemoteIpMonitorListlist";
export const getSystemHaChildRemoteIpMonitorListlist: typeof import("./getSystemHaChildRemoteIpMonitorListlist").getSystemHaChildRemoteIpMonitorListlist = null as any;
export const getSystemHaChildRemoteIpMonitorListlistOutput: typeof import("./getSystemHaChildRemoteIpMonitorListlist").getSystemHaChildRemoteIpMonitorListlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemHaChildRemoteIpMonitorListlist","getSystemHaChildRemoteIpMonitorListlistOutput"], () => require("./getSystemHaChildRemoteIpMonitorListlist"));

export { GetSystemHealthCheckArgs, GetSystemHealthCheckResult, GetSystemHealthCheckOutputArgs } from "./getSystemHealthCheck";
export const getSystemHealthCheck: typeof import("./getSystemHealthCheck").getSystemHealthCheck = null as any;
export const getSystemHealthCheckOutput: typeof import("./getSystemHealthCheck").getSystemHealthCheckOutput = null as any;
utilities.lazyLoad(exports, ["getSystemHealthCheck","getSystemHealthCheckOutput"], () => require("./getSystemHealthCheck"));

export { GetSystemHealthCheckScriptArgs, GetSystemHealthCheckScriptResult, GetSystemHealthCheckScriptOutputArgs } from "./getSystemHealthCheckScript";
export const getSystemHealthCheckScript: typeof import("./getSystemHealthCheckScript").getSystemHealthCheckScript = null as any;
export const getSystemHealthCheckScriptOutput: typeof import("./getSystemHealthCheckScript").getSystemHealthCheckScriptOutput = null as any;
utilities.lazyLoad(exports, ["getSystemHealthCheckScript","getSystemHealthCheckScriptOutput"], () => require("./getSystemHealthCheckScript"));

export { GetSystemHealthCheckScriptlistArgs, GetSystemHealthCheckScriptlistResult, GetSystemHealthCheckScriptlistOutputArgs } from "./getSystemHealthCheckScriptlist";
export const getSystemHealthCheckScriptlist: typeof import("./getSystemHealthCheckScriptlist").getSystemHealthCheckScriptlist = null as any;
export const getSystemHealthCheckScriptlistOutput: typeof import("./getSystemHealthCheckScriptlist").getSystemHealthCheckScriptlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemHealthCheckScriptlist","getSystemHealthCheckScriptlistOutput"], () => require("./getSystemHealthCheckScriptlist"));

export { GetSystemHealthChecklistArgs, GetSystemHealthChecklistResult, GetSystemHealthChecklistOutputArgs } from "./getSystemHealthChecklist";
export const getSystemHealthChecklist: typeof import("./getSystemHealthChecklist").getSystemHealthChecklist = null as any;
export const getSystemHealthChecklistOutput: typeof import("./getSystemHealthChecklist").getSystemHealthChecklistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemHealthChecklist","getSystemHealthChecklistOutput"], () => require("./getSystemHealthChecklist"));

export { GetSystemInterfaceArgs, GetSystemInterfaceResult, GetSystemInterfaceOutputArgs } from "./getSystemInterface";
export const getSystemInterface: typeof import("./getSystemInterface").getSystemInterface = null as any;
export const getSystemInterfaceOutput: typeof import("./getSystemInterface").getSystemInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterface","getSystemInterfaceOutput"], () => require("./getSystemInterface"));

export { GetSystemInterfaceChildHaNodeIpListArgs, GetSystemInterfaceChildHaNodeIpListResult, GetSystemInterfaceChildHaNodeIpListOutputArgs } from "./getSystemInterfaceChildHaNodeIpList";
export const getSystemInterfaceChildHaNodeIpList: typeof import("./getSystemInterfaceChildHaNodeIpList").getSystemInterfaceChildHaNodeIpList = null as any;
export const getSystemInterfaceChildHaNodeIpListOutput: typeof import("./getSystemInterfaceChildHaNodeIpList").getSystemInterfaceChildHaNodeIpListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterfaceChildHaNodeIpList","getSystemInterfaceChildHaNodeIpListOutput"], () => require("./getSystemInterfaceChildHaNodeIpList"));

export { GetSystemInterfaceChildHaNodeIpListlistArgs, GetSystemInterfaceChildHaNodeIpListlistResult, GetSystemInterfaceChildHaNodeIpListlistOutputArgs } from "./getSystemInterfaceChildHaNodeIpListlist";
export const getSystemInterfaceChildHaNodeIpListlist: typeof import("./getSystemInterfaceChildHaNodeIpListlist").getSystemInterfaceChildHaNodeIpListlist = null as any;
export const getSystemInterfaceChildHaNodeIpListlistOutput: typeof import("./getSystemInterfaceChildHaNodeIpListlist").getSystemInterfaceChildHaNodeIpListlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterfaceChildHaNodeIpListlist","getSystemInterfaceChildHaNodeIpListlistOutput"], () => require("./getSystemInterfaceChildHaNodeIpListlist"));

export { GetSystemInterfaceChildSecondaryIpListArgs, GetSystemInterfaceChildSecondaryIpListResult, GetSystemInterfaceChildSecondaryIpListOutputArgs } from "./getSystemInterfaceChildSecondaryIpList";
export const getSystemInterfaceChildSecondaryIpList: typeof import("./getSystemInterfaceChildSecondaryIpList").getSystemInterfaceChildSecondaryIpList = null as any;
export const getSystemInterfaceChildSecondaryIpListOutput: typeof import("./getSystemInterfaceChildSecondaryIpList").getSystemInterfaceChildSecondaryIpListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterfaceChildSecondaryIpList","getSystemInterfaceChildSecondaryIpListOutput"], () => require("./getSystemInterfaceChildSecondaryIpList"));

export { GetSystemInterfaceChildSecondaryIpListlistArgs, GetSystemInterfaceChildSecondaryIpListlistResult, GetSystemInterfaceChildSecondaryIpListlistOutputArgs } from "./getSystemInterfaceChildSecondaryIpListlist";
export const getSystemInterfaceChildSecondaryIpListlist: typeof import("./getSystemInterfaceChildSecondaryIpListlist").getSystemInterfaceChildSecondaryIpListlist = null as any;
export const getSystemInterfaceChildSecondaryIpListlistOutput: typeof import("./getSystemInterfaceChildSecondaryIpListlist").getSystemInterfaceChildSecondaryIpListlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterfaceChildSecondaryIpListlist","getSystemInterfaceChildSecondaryIpListlistOutput"], () => require("./getSystemInterfaceChildSecondaryIpListlist"));

export { GetSystemInterfaceChildTrustIpListArgs, GetSystemInterfaceChildTrustIpListResult, GetSystemInterfaceChildTrustIpListOutputArgs } from "./getSystemInterfaceChildTrustIpList";
export const getSystemInterfaceChildTrustIpList: typeof import("./getSystemInterfaceChildTrustIpList").getSystemInterfaceChildTrustIpList = null as any;
export const getSystemInterfaceChildTrustIpListOutput: typeof import("./getSystemInterfaceChildTrustIpList").getSystemInterfaceChildTrustIpListOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterfaceChildTrustIpList","getSystemInterfaceChildTrustIpListOutput"], () => require("./getSystemInterfaceChildTrustIpList"));

export { GetSystemInterfaceChildTrustIpListlistArgs, GetSystemInterfaceChildTrustIpListlistResult, GetSystemInterfaceChildTrustIpListlistOutputArgs } from "./getSystemInterfaceChildTrustIpListlist";
export const getSystemInterfaceChildTrustIpListlist: typeof import("./getSystemInterfaceChildTrustIpListlist").getSystemInterfaceChildTrustIpListlist = null as any;
export const getSystemInterfaceChildTrustIpListlistOutput: typeof import("./getSystemInterfaceChildTrustIpListlist").getSystemInterfaceChildTrustIpListlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterfaceChildTrustIpListlist","getSystemInterfaceChildTrustIpListlistOutput"], () => require("./getSystemInterfaceChildTrustIpListlist"));

export { GetSystemInterfacelistArgs, GetSystemInterfacelistResult, GetSystemInterfacelistOutputArgs } from "./getSystemInterfacelist";
export const getSystemInterfacelist: typeof import("./getSystemInterfacelist").getSystemInterfacelist = null as any;
export const getSystemInterfacelistOutput: typeof import("./getSystemInterfacelist").getSystemInterfacelistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterfacelist","getSystemInterfacelistOutput"], () => require("./getSystemInterfacelist"));

export { GetSystemIspAddrArgs, GetSystemIspAddrResult, GetSystemIspAddrOutputArgs } from "./getSystemIspAddr";
export const getSystemIspAddr: typeof import("./getSystemIspAddr").getSystemIspAddr = null as any;
export const getSystemIspAddrOutput: typeof import("./getSystemIspAddr").getSystemIspAddrOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIspAddr","getSystemIspAddrOutput"], () => require("./getSystemIspAddr"));

export { GetSystemIspAddrChildAddressArgs, GetSystemIspAddrChildAddressResult, GetSystemIspAddrChildAddressOutputArgs } from "./getSystemIspAddrChildAddress";
export const getSystemIspAddrChildAddress: typeof import("./getSystemIspAddrChildAddress").getSystemIspAddrChildAddress = null as any;
export const getSystemIspAddrChildAddressOutput: typeof import("./getSystemIspAddrChildAddress").getSystemIspAddrChildAddressOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIspAddrChildAddress","getSystemIspAddrChildAddressOutput"], () => require("./getSystemIspAddrChildAddress"));

export { GetSystemIspAddrChildAddresslistArgs, GetSystemIspAddrChildAddresslistResult, GetSystemIspAddrChildAddresslistOutputArgs } from "./getSystemIspAddrChildAddresslist";
export const getSystemIspAddrChildAddresslist: typeof import("./getSystemIspAddrChildAddresslist").getSystemIspAddrChildAddresslist = null as any;
export const getSystemIspAddrChildAddresslistOutput: typeof import("./getSystemIspAddrChildAddresslist").getSystemIspAddrChildAddresslistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIspAddrChildAddresslist","getSystemIspAddrChildAddresslistOutput"], () => require("./getSystemIspAddrChildAddresslist"));

export { GetSystemIspAddrlistArgs, GetSystemIspAddrlistResult, GetSystemIspAddrlistOutputArgs } from "./getSystemIspAddrlist";
export const getSystemIspAddrlist: typeof import("./getSystemIspAddrlist").getSystemIspAddrlist = null as any;
export const getSystemIspAddrlistOutput: typeof import("./getSystemIspAddrlist").getSystemIspAddrlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIspAddrlist","getSystemIspAddrlistOutput"], () => require("./getSystemIspAddrlist"));

export { GetSystemIspProvinceArgs, GetSystemIspProvinceResult, GetSystemIspProvinceOutputArgs } from "./getSystemIspProvince";
export const getSystemIspProvince: typeof import("./getSystemIspProvince").getSystemIspProvince = null as any;
export const getSystemIspProvinceOutput: typeof import("./getSystemIspProvince").getSystemIspProvinceOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIspProvince","getSystemIspProvinceOutput"], () => require("./getSystemIspProvince"));

export { GetSystemIspProvincelistArgs, GetSystemIspProvincelistResult, GetSystemIspProvincelistOutputArgs } from "./getSystemIspProvincelist";
export const getSystemIspProvincelist: typeof import("./getSystemIspProvincelist").getSystemIspProvincelist = null as any;
export const getSystemIspProvincelistOutput: typeof import("./getSystemIspProvincelist").getSystemIspProvincelistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIspProvincelist","getSystemIspProvincelistOutput"], () => require("./getSystemIspProvincelist"));

export { GetSystemMailserverArgs, GetSystemMailserverResult, GetSystemMailserverOutputArgs } from "./getSystemMailserver";
export const getSystemMailserver: typeof import("./getSystemMailserver").getSystemMailserver = null as any;
export const getSystemMailserverOutput: typeof import("./getSystemMailserver").getSystemMailserverOutput = null as any;
utilities.lazyLoad(exports, ["getSystemMailserver","getSystemMailserverOutput"], () => require("./getSystemMailserver"));

export { GetSystemOverlayTunnelArgs, GetSystemOverlayTunnelResult, GetSystemOverlayTunnelOutputArgs } from "./getSystemOverlayTunnel";
export const getSystemOverlayTunnel: typeof import("./getSystemOverlayTunnel").getSystemOverlayTunnel = null as any;
export const getSystemOverlayTunnelOutput: typeof import("./getSystemOverlayTunnel").getSystemOverlayTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemOverlayTunnel","getSystemOverlayTunnelOutput"], () => require("./getSystemOverlayTunnel"));

export { GetSystemOverlayTunnelChildRemoteHostArgs, GetSystemOverlayTunnelChildRemoteHostResult, GetSystemOverlayTunnelChildRemoteHostOutputArgs } from "./getSystemOverlayTunnelChildRemoteHost";
export const getSystemOverlayTunnelChildRemoteHost: typeof import("./getSystemOverlayTunnelChildRemoteHost").getSystemOverlayTunnelChildRemoteHost = null as any;
export const getSystemOverlayTunnelChildRemoteHostOutput: typeof import("./getSystemOverlayTunnelChildRemoteHost").getSystemOverlayTunnelChildRemoteHostOutput = null as any;
utilities.lazyLoad(exports, ["getSystemOverlayTunnelChildRemoteHost","getSystemOverlayTunnelChildRemoteHostOutput"], () => require("./getSystemOverlayTunnelChildRemoteHost"));

export { GetSystemOverlayTunnelChildRemoteHostlistArgs, GetSystemOverlayTunnelChildRemoteHostlistResult, GetSystemOverlayTunnelChildRemoteHostlistOutputArgs } from "./getSystemOverlayTunnelChildRemoteHostlist";
export const getSystemOverlayTunnelChildRemoteHostlist: typeof import("./getSystemOverlayTunnelChildRemoteHostlist").getSystemOverlayTunnelChildRemoteHostlist = null as any;
export const getSystemOverlayTunnelChildRemoteHostlistOutput: typeof import("./getSystemOverlayTunnelChildRemoteHostlist").getSystemOverlayTunnelChildRemoteHostlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemOverlayTunnelChildRemoteHostlist","getSystemOverlayTunnelChildRemoteHostlistOutput"], () => require("./getSystemOverlayTunnelChildRemoteHostlist"));

export { GetSystemOverlayTunnellistArgs, GetSystemOverlayTunnellistResult, GetSystemOverlayTunnellistOutputArgs } from "./getSystemOverlayTunnellist";
export const getSystemOverlayTunnellist: typeof import("./getSystemOverlayTunnellist").getSystemOverlayTunnellist = null as any;
export const getSystemOverlayTunnellistOutput: typeof import("./getSystemOverlayTunnellist").getSystemOverlayTunnellistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemOverlayTunnellist","getSystemOverlayTunnellistOutput"], () => require("./getSystemOverlayTunnellist"));

export { GetSystemScheduleGroupArgs, GetSystemScheduleGroupResult, GetSystemScheduleGroupOutputArgs } from "./getSystemScheduleGroup";
export const getSystemScheduleGroup: typeof import("./getSystemScheduleGroup").getSystemScheduleGroup = null as any;
export const getSystemScheduleGroupOutput: typeof import("./getSystemScheduleGroup").getSystemScheduleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSystemScheduleGroup","getSystemScheduleGroupOutput"], () => require("./getSystemScheduleGroup"));

export { GetSystemScheduleGroupChildScheduleMemberArgs, GetSystemScheduleGroupChildScheduleMemberResult, GetSystemScheduleGroupChildScheduleMemberOutputArgs } from "./getSystemScheduleGroupChildScheduleMember";
export const getSystemScheduleGroupChildScheduleMember: typeof import("./getSystemScheduleGroupChildScheduleMember").getSystemScheduleGroupChildScheduleMember = null as any;
export const getSystemScheduleGroupChildScheduleMemberOutput: typeof import("./getSystemScheduleGroupChildScheduleMember").getSystemScheduleGroupChildScheduleMemberOutput = null as any;
utilities.lazyLoad(exports, ["getSystemScheduleGroupChildScheduleMember","getSystemScheduleGroupChildScheduleMemberOutput"], () => require("./getSystemScheduleGroupChildScheduleMember"));

export { GetSystemScheduleGroupChildScheduleMemberlistArgs, GetSystemScheduleGroupChildScheduleMemberlistResult, GetSystemScheduleGroupChildScheduleMemberlistOutputArgs } from "./getSystemScheduleGroupChildScheduleMemberlist";
export const getSystemScheduleGroupChildScheduleMemberlist: typeof import("./getSystemScheduleGroupChildScheduleMemberlist").getSystemScheduleGroupChildScheduleMemberlist = null as any;
export const getSystemScheduleGroupChildScheduleMemberlistOutput: typeof import("./getSystemScheduleGroupChildScheduleMemberlist").getSystemScheduleGroupChildScheduleMemberlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemScheduleGroupChildScheduleMemberlist","getSystemScheduleGroupChildScheduleMemberlistOutput"], () => require("./getSystemScheduleGroupChildScheduleMemberlist"));

export { GetSystemScheduleGrouplistArgs, GetSystemScheduleGrouplistResult, GetSystemScheduleGrouplistOutputArgs } from "./getSystemScheduleGrouplist";
export const getSystemScheduleGrouplist: typeof import("./getSystemScheduleGrouplist").getSystemScheduleGrouplist = null as any;
export const getSystemScheduleGrouplistOutput: typeof import("./getSystemScheduleGrouplist").getSystemScheduleGrouplistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemScheduleGrouplist","getSystemScheduleGrouplistOutput"], () => require("./getSystemScheduleGrouplist"));

export { GetSystemScriptingArgs, GetSystemScriptingResult, GetSystemScriptingOutputArgs } from "./getSystemScripting";
export const getSystemScripting: typeof import("./getSystemScripting").getSystemScripting = null as any;
export const getSystemScriptingOutput: typeof import("./getSystemScripting").getSystemScriptingOutput = null as any;
utilities.lazyLoad(exports, ["getSystemScripting","getSystemScriptingOutput"], () => require("./getSystemScripting"));

export { GetSystemScriptinglistArgs, GetSystemScriptinglistResult, GetSystemScriptinglistOutputArgs } from "./getSystemScriptinglist";
export const getSystemScriptinglist: typeof import("./getSystemScriptinglist").getSystemScriptinglist = null as any;
export const getSystemScriptinglistOutput: typeof import("./getSystemScriptinglist").getSystemScriptinglistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemScriptinglist","getSystemScriptinglistOutput"], () => require("./getSystemScriptinglist"));

export { GetSystemSdnConnectorArgs, GetSystemSdnConnectorResult, GetSystemSdnConnectorOutputArgs } from "./getSystemSdnConnector";
export const getSystemSdnConnector: typeof import("./getSystemSdnConnector").getSystemSdnConnector = null as any;
export const getSystemSdnConnectorOutput: typeof import("./getSystemSdnConnector").getSystemSdnConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSdnConnector","getSystemSdnConnectorOutput"], () => require("./getSystemSdnConnector"));

export { GetSystemSdnConnectorlistArgs, GetSystemSdnConnectorlistResult, GetSystemSdnConnectorlistOutputArgs } from "./getSystemSdnConnectorlist";
export const getSystemSdnConnectorlist: typeof import("./getSystemSdnConnectorlist").getSystemSdnConnectorlist = null as any;
export const getSystemSdnConnectorlistOutput: typeof import("./getSystemSdnConnectorlist").getSystemSdnConnectorlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSdnConnectorlist","getSystemSdnConnectorlistOutput"], () => require("./getSystemSdnConnectorlist"));

export { GetSystemServiceArgs, GetSystemServiceResult, GetSystemServiceOutputArgs } from "./getSystemService";
export const getSystemService: typeof import("./getSystemService").getSystemService = null as any;
export const getSystemServiceOutput: typeof import("./getSystemService").getSystemServiceOutput = null as any;
utilities.lazyLoad(exports, ["getSystemService","getSystemServiceOutput"], () => require("./getSystemService"));

export { GetSystemServicegrpArgs, GetSystemServicegrpResult, GetSystemServicegrpOutputArgs } from "./getSystemServicegrp";
export const getSystemServicegrp: typeof import("./getSystemServicegrp").getSystemServicegrp = null as any;
export const getSystemServicegrpOutput: typeof import("./getSystemServicegrp").getSystemServicegrpOutput = null as any;
utilities.lazyLoad(exports, ["getSystemServicegrp","getSystemServicegrpOutput"], () => require("./getSystemServicegrp"));

export { GetSystemServicegrplistArgs, GetSystemServicegrplistResult, GetSystemServicegrplistOutputArgs } from "./getSystemServicegrplist";
export const getSystemServicegrplist: typeof import("./getSystemServicegrplist").getSystemServicegrplist = null as any;
export const getSystemServicegrplistOutput: typeof import("./getSystemServicegrplist").getSystemServicegrplistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemServicegrplist","getSystemServicegrplistOutput"], () => require("./getSystemServicegrplist"));

export { GetSystemServicelistArgs, GetSystemServicelistResult, GetSystemServicelistOutputArgs } from "./getSystemServicelist";
export const getSystemServicelist: typeof import("./getSystemServicelist").getSystemServicelist = null as any;
export const getSystemServicelistOutput: typeof import("./getSystemServicelist").getSystemServicelistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemServicelist","getSystemServicelistOutput"], () => require("./getSystemServicelist"));

export { GetSystemStreamScriptingArgs, GetSystemStreamScriptingResult, GetSystemStreamScriptingOutputArgs } from "./getSystemStreamScripting";
export const getSystemStreamScripting: typeof import("./getSystemStreamScripting").getSystemStreamScripting = null as any;
export const getSystemStreamScriptingOutput: typeof import("./getSystemStreamScripting").getSystemStreamScriptingOutput = null as any;
utilities.lazyLoad(exports, ["getSystemStreamScripting","getSystemStreamScriptingOutput"], () => require("./getSystemStreamScripting"));

export { GetSystemStreamScriptinglistArgs, GetSystemStreamScriptinglistResult, GetSystemStreamScriptinglistOutputArgs } from "./getSystemStreamScriptinglist";
export const getSystemStreamScriptinglist: typeof import("./getSystemStreamScriptinglist").getSystemStreamScriptinglist = null as any;
export const getSystemStreamScriptinglistOutput: typeof import("./getSystemStreamScriptinglist").getSystemStreamScriptinglistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemStreamScriptinglist","getSystemStreamScriptinglistOutput"], () => require("./getSystemStreamScriptinglist"));

export { GetSystemTimeManualArgs, GetSystemTimeManualResult, GetSystemTimeManualOutputArgs } from "./getSystemTimeManual";
export const getSystemTimeManual: typeof import("./getSystemTimeManual").getSystemTimeManual = null as any;
export const getSystemTimeManualOutput: typeof import("./getSystemTimeManual").getSystemTimeManualOutput = null as any;
utilities.lazyLoad(exports, ["getSystemTimeManual","getSystemTimeManualOutput"], () => require("./getSystemTimeManual"));

export { GetSystemTrafficGroupArgs, GetSystemTrafficGroupResult, GetSystemTrafficGroupOutputArgs } from "./getSystemTrafficGroup";
export const getSystemTrafficGroup: typeof import("./getSystemTrafficGroup").getSystemTrafficGroup = null as any;
export const getSystemTrafficGroupOutput: typeof import("./getSystemTrafficGroup").getSystemTrafficGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSystemTrafficGroup","getSystemTrafficGroupOutput"], () => require("./getSystemTrafficGroup"));

export { GetSystemTrafficGrouplistArgs, GetSystemTrafficGrouplistResult, GetSystemTrafficGrouplistOutputArgs } from "./getSystemTrafficGrouplist";
export const getSystemTrafficGrouplist: typeof import("./getSystemTrafficGrouplist").getSystemTrafficGrouplist = null as any;
export const getSystemTrafficGrouplistOutput: typeof import("./getSystemTrafficGrouplist").getSystemTrafficGrouplistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemTrafficGrouplist","getSystemTrafficGrouplistOutput"], () => require("./getSystemTrafficGrouplist"));

export { GetSystemVdomArgs, GetSystemVdomResult, GetSystemVdomOutputArgs } from "./getSystemVdom";
export const getSystemVdom: typeof import("./getSystemVdom").getSystemVdom = null as any;
export const getSystemVdomOutput: typeof import("./getSystemVdom").getSystemVdomOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVdom","getSystemVdomOutput"], () => require("./getSystemVdom"));

export { GetSystemVdomLinkArgs, GetSystemVdomLinkResult, GetSystemVdomLinkOutputArgs } from "./getSystemVdomLink";
export const getSystemVdomLink: typeof import("./getSystemVdomLink").getSystemVdomLink = null as any;
export const getSystemVdomLinkOutput: typeof import("./getSystemVdomLink").getSystemVdomLinkOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVdomLink","getSystemVdomLinkOutput"], () => require("./getSystemVdomLink"));

export { GetSystemVdomLinklistArgs, GetSystemVdomLinklistResult, GetSystemVdomLinklistOutputArgs } from "./getSystemVdomLinklist";
export const getSystemVdomLinklist: typeof import("./getSystemVdomLinklist").getSystemVdomLinklist = null as any;
export const getSystemVdomLinklistOutput: typeof import("./getSystemVdomLinklist").getSystemVdomLinklistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVdomLinklist","getSystemVdomLinklistOutput"], () => require("./getSystemVdomLinklist"));

export { GetSystemVdomlistArgs, GetSystemVdomlistResult, GetSystemVdomlistOutputArgs } from "./getSystemVdomlist";
export const getSystemVdomlist: typeof import("./getSystemVdomlist").getSystemVdomlist = null as any;
export const getSystemVdomlistOutput: typeof import("./getSystemVdomlist").getSystemVdomlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVdomlist","getSystemVdomlistOutput"], () => require("./getSystemVdomlist"));

export { GetUserAdfsPublishArgs, GetUserAdfsPublishResult, GetUserAdfsPublishOutputArgs } from "./getUserAdfsPublish";
export const getUserAdfsPublish: typeof import("./getUserAdfsPublish").getUserAdfsPublish = null as any;
export const getUserAdfsPublishOutput: typeof import("./getUserAdfsPublish").getUserAdfsPublishOutput = null as any;
utilities.lazyLoad(exports, ["getUserAdfsPublish","getUserAdfsPublishOutput"], () => require("./getUserAdfsPublish"));

export { GetUserAdfsPublishlistArgs, GetUserAdfsPublishlistResult, GetUserAdfsPublishlistOutputArgs } from "./getUserAdfsPublishlist";
export const getUserAdfsPublishlist: typeof import("./getUserAdfsPublishlist").getUserAdfsPublishlist = null as any;
export const getUserAdfsPublishlistOutput: typeof import("./getUserAdfsPublishlist").getUserAdfsPublishlistOutput = null as any;
utilities.lazyLoad(exports, ["getUserAdfsPublishlist","getUserAdfsPublishlistOutput"], () => require("./getUserAdfsPublishlist"));

export { GetVdomlistArgs, GetVdomlistResult, GetVdomlistOutputArgs } from "./getVdomlist";
export const getVdomlist: typeof import("./getVdomlist").getVdomlist = null as any;
export const getVdomlistOutput: typeof import("./getVdomlist").getVdomlistOutput = null as any;
utilities.lazyLoad(exports, ["getVdomlist","getVdomlistOutput"], () => require("./getVdomlist"));

export { LoadBalanceAllowlistArgs, LoadBalanceAllowlistState } from "./loadBalanceAllowlist";
export type LoadBalanceAllowlist = import("./loadBalanceAllowlist").LoadBalanceAllowlist;
export const LoadBalanceAllowlist: typeof import("./loadBalanceAllowlist").LoadBalanceAllowlist = null as any;
utilities.lazyLoad(exports, ["LoadBalanceAllowlist"], () => require("./loadBalanceAllowlist"));

export { LoadBalanceAuthPolicyArgs, LoadBalanceAuthPolicyState } from "./loadBalanceAuthPolicy";
export type LoadBalanceAuthPolicy = import("./loadBalanceAuthPolicy").LoadBalanceAuthPolicy;
export const LoadBalanceAuthPolicy: typeof import("./loadBalanceAuthPolicy").LoadBalanceAuthPolicy = null as any;
utilities.lazyLoad(exports, ["LoadBalanceAuthPolicy"], () => require("./loadBalanceAuthPolicy"));

export { LoadBalanceCachingArgs, LoadBalanceCachingState } from "./loadBalanceCaching";
export type LoadBalanceCaching = import("./loadBalanceCaching").LoadBalanceCaching;
export const LoadBalanceCaching: typeof import("./loadBalanceCaching").LoadBalanceCaching = null as any;
utilities.lazyLoad(exports, ["LoadBalanceCaching"], () => require("./loadBalanceCaching"));

export { LoadBalanceCachingChildDynCacheListArgs, LoadBalanceCachingChildDynCacheListState } from "./loadBalanceCachingChildDynCacheList";
export type LoadBalanceCachingChildDynCacheList = import("./loadBalanceCachingChildDynCacheList").LoadBalanceCachingChildDynCacheList;
export const LoadBalanceCachingChildDynCacheList: typeof import("./loadBalanceCachingChildDynCacheList").LoadBalanceCachingChildDynCacheList = null as any;
utilities.lazyLoad(exports, ["LoadBalanceCachingChildDynCacheList"], () => require("./loadBalanceCachingChildDynCacheList"));

export { LoadBalanceCachingChildUriExcludeListArgs, LoadBalanceCachingChildUriExcludeListState } from "./loadBalanceCachingChildUriExcludeList";
export type LoadBalanceCachingChildUriExcludeList = import("./loadBalanceCachingChildUriExcludeList").LoadBalanceCachingChildUriExcludeList;
export const LoadBalanceCachingChildUriExcludeList: typeof import("./loadBalanceCachingChildUriExcludeList").LoadBalanceCachingChildUriExcludeList = null as any;
utilities.lazyLoad(exports, ["LoadBalanceCachingChildUriExcludeList"], () => require("./loadBalanceCachingChildUriExcludeList"));

export { LoadBalanceCaptchaProfileArgs, LoadBalanceCaptchaProfileState } from "./loadBalanceCaptchaProfile";
export type LoadBalanceCaptchaProfile = import("./loadBalanceCaptchaProfile").LoadBalanceCaptchaProfile;
export const LoadBalanceCaptchaProfile: typeof import("./loadBalanceCaptchaProfile").LoadBalanceCaptchaProfile = null as any;
utilities.lazyLoad(exports, ["LoadBalanceCaptchaProfile"], () => require("./loadBalanceCaptchaProfile"));

export { LoadBalanceCertificateCachingArgs, LoadBalanceCertificateCachingState } from "./loadBalanceCertificateCaching";
export type LoadBalanceCertificateCaching = import("./loadBalanceCertificateCaching").LoadBalanceCertificateCaching;
export const LoadBalanceCertificateCaching: typeof import("./loadBalanceCertificateCaching").LoadBalanceCertificateCaching = null as any;
utilities.lazyLoad(exports, ["LoadBalanceCertificateCaching"], () => require("./loadBalanceCertificateCaching"));

export { LoadBalanceClientSslProfileArgs, LoadBalanceClientSslProfileState } from "./loadBalanceClientSslProfile";
export type LoadBalanceClientSslProfile = import("./loadBalanceClientSslProfile").LoadBalanceClientSslProfile;
export const LoadBalanceClientSslProfile: typeof import("./loadBalanceClientSslProfile").LoadBalanceClientSslProfile = null as any;
utilities.lazyLoad(exports, ["LoadBalanceClientSslProfile"], () => require("./loadBalanceClientSslProfile"));

export { LoadBalanceClonePoolArgs, LoadBalanceClonePoolState } from "./loadBalanceClonePool";
export type LoadBalanceClonePool = import("./loadBalanceClonePool").LoadBalanceClonePool;
export const LoadBalanceClonePool: typeof import("./loadBalanceClonePool").LoadBalanceClonePool = null as any;
utilities.lazyLoad(exports, ["LoadBalanceClonePool"], () => require("./loadBalanceClonePool"));

export { LoadBalanceClonePoolChildPoolMemberArgs, LoadBalanceClonePoolChildPoolMemberState } from "./loadBalanceClonePoolChildPoolMember";
export type LoadBalanceClonePoolChildPoolMember = import("./loadBalanceClonePoolChildPoolMember").LoadBalanceClonePoolChildPoolMember;
export const LoadBalanceClonePoolChildPoolMember: typeof import("./loadBalanceClonePoolChildPoolMember").LoadBalanceClonePoolChildPoolMember = null as any;
utilities.lazyLoad(exports, ["LoadBalanceClonePoolChildPoolMember"], () => require("./loadBalanceClonePoolChildPoolMember"));

export { LoadBalanceCompressionArgs, LoadBalanceCompressionState } from "./loadBalanceCompression";
export type LoadBalanceCompression = import("./loadBalanceCompression").LoadBalanceCompression;
export const LoadBalanceCompression: typeof import("./loadBalanceCompression").LoadBalanceCompression = null as any;
utilities.lazyLoad(exports, ["LoadBalanceCompression"], () => require("./loadBalanceCompression"));

export { LoadBalanceCompressionChildContentTypesArgs, LoadBalanceCompressionChildContentTypesState } from "./loadBalanceCompressionChildContentTypes";
export type LoadBalanceCompressionChildContentTypes = import("./loadBalanceCompressionChildContentTypes").LoadBalanceCompressionChildContentTypes;
export const LoadBalanceCompressionChildContentTypes: typeof import("./loadBalanceCompressionChildContentTypes").LoadBalanceCompressionChildContentTypes = null as any;
utilities.lazyLoad(exports, ["LoadBalanceCompressionChildContentTypes"], () => require("./loadBalanceCompressionChildContentTypes"));

export { LoadBalanceCompressionChildUriListArgs, LoadBalanceCompressionChildUriListState } from "./loadBalanceCompressionChildUriList";
export type LoadBalanceCompressionChildUriList = import("./loadBalanceCompressionChildUriList").LoadBalanceCompressionChildUriList;
export const LoadBalanceCompressionChildUriList: typeof import("./loadBalanceCompressionChildUriList").LoadBalanceCompressionChildUriList = null as any;
utilities.lazyLoad(exports, ["LoadBalanceCompressionChildUriList"], () => require("./loadBalanceCompressionChildUriList"));

export { LoadBalanceContentRewritingArgs, LoadBalanceContentRewritingState } from "./loadBalanceContentRewriting";
export type LoadBalanceContentRewriting = import("./loadBalanceContentRewriting").LoadBalanceContentRewriting;
export const LoadBalanceContentRewriting: typeof import("./loadBalanceContentRewriting").LoadBalanceContentRewriting = null as any;
utilities.lazyLoad(exports, ["LoadBalanceContentRewriting"], () => require("./loadBalanceContentRewriting"));

export { LoadBalanceContentRewritingChildMatchConditionArgs, LoadBalanceContentRewritingChildMatchConditionState } from "./loadBalanceContentRewritingChildMatchCondition";
export type LoadBalanceContentRewritingChildMatchCondition = import("./loadBalanceContentRewritingChildMatchCondition").LoadBalanceContentRewritingChildMatchCondition;
export const LoadBalanceContentRewritingChildMatchCondition: typeof import("./loadBalanceContentRewritingChildMatchCondition").LoadBalanceContentRewritingChildMatchCondition = null as any;
utilities.lazyLoad(exports, ["LoadBalanceContentRewritingChildMatchCondition"], () => require("./loadBalanceContentRewritingChildMatchCondition"));

export { LoadBalanceContentRoutingArgs, LoadBalanceContentRoutingState } from "./loadBalanceContentRouting";
export type LoadBalanceContentRouting = import("./loadBalanceContentRouting").LoadBalanceContentRouting;
export const LoadBalanceContentRouting: typeof import("./loadBalanceContentRouting").LoadBalanceContentRouting = null as any;
utilities.lazyLoad(exports, ["LoadBalanceContentRouting"], () => require("./loadBalanceContentRouting"));

export { LoadBalanceContentRoutingChildMatchConditionArgs, LoadBalanceContentRoutingChildMatchConditionState } from "./loadBalanceContentRoutingChildMatchCondition";
export type LoadBalanceContentRoutingChildMatchCondition = import("./loadBalanceContentRoutingChildMatchCondition").LoadBalanceContentRoutingChildMatchCondition;
export const LoadBalanceContentRoutingChildMatchCondition: typeof import("./loadBalanceContentRoutingChildMatchCondition").LoadBalanceContentRoutingChildMatchCondition = null as any;
utilities.lazyLoad(exports, ["LoadBalanceContentRoutingChildMatchCondition"], () => require("./loadBalanceContentRoutingChildMatchCondition"));

export { LoadBalanceDecompressionArgs, LoadBalanceDecompressionState } from "./loadBalanceDecompression";
export type LoadBalanceDecompression = import("./loadBalanceDecompression").LoadBalanceDecompression;
export const LoadBalanceDecompression: typeof import("./loadBalanceDecompression").LoadBalanceDecompression = null as any;
utilities.lazyLoad(exports, ["LoadBalanceDecompression"], () => require("./loadBalanceDecompression"));

export { LoadBalanceDecompressionChildContentTypesArgs, LoadBalanceDecompressionChildContentTypesState } from "./loadBalanceDecompressionChildContentTypes";
export type LoadBalanceDecompressionChildContentTypes = import("./loadBalanceDecompressionChildContentTypes").LoadBalanceDecompressionChildContentTypes;
export const LoadBalanceDecompressionChildContentTypes: typeof import("./loadBalanceDecompressionChildContentTypes").LoadBalanceDecompressionChildContentTypes = null as any;
utilities.lazyLoad(exports, ["LoadBalanceDecompressionChildContentTypes"], () => require("./loadBalanceDecompressionChildContentTypes"));

export { LoadBalanceDecompressionChildUriListArgs, LoadBalanceDecompressionChildUriListState } from "./loadBalanceDecompressionChildUriList";
export type LoadBalanceDecompressionChildUriList = import("./loadBalanceDecompressionChildUriList").LoadBalanceDecompressionChildUriList;
export const LoadBalanceDecompressionChildUriList: typeof import("./loadBalanceDecompressionChildUriList").LoadBalanceDecompressionChildUriList = null as any;
utilities.lazyLoad(exports, ["LoadBalanceDecompressionChildUriList"], () => require("./loadBalanceDecompressionChildUriList"));

export { LoadBalanceErrorPageArgs, LoadBalanceErrorPageState } from "./loadBalanceErrorPage";
export type LoadBalanceErrorPage = import("./loadBalanceErrorPage").LoadBalanceErrorPage;
export const LoadBalanceErrorPage: typeof import("./loadBalanceErrorPage").LoadBalanceErrorPage = null as any;
utilities.lazyLoad(exports, ["LoadBalanceErrorPage"], () => require("./loadBalanceErrorPage"));

export { LoadBalanceGeoipListArgs, LoadBalanceGeoipListState } from "./loadBalanceGeoipList";
export type LoadBalanceGeoipList = import("./loadBalanceGeoipList").LoadBalanceGeoipList;
export const LoadBalanceGeoipList: typeof import("./loadBalanceGeoipList").LoadBalanceGeoipList = null as any;
utilities.lazyLoad(exports, ["LoadBalanceGeoipList"], () => require("./loadBalanceGeoipList"));

export { LoadBalanceHttp2ProfileArgs, LoadBalanceHttp2ProfileState } from "./loadBalanceHttp2Profile";
export type LoadBalanceHttp2Profile = import("./loadBalanceHttp2Profile").LoadBalanceHttp2Profile;
export const LoadBalanceHttp2Profile: typeof import("./loadBalanceHttp2Profile").LoadBalanceHttp2Profile = null as any;
utilities.lazyLoad(exports, ["LoadBalanceHttp2Profile"], () => require("./loadBalanceHttp2Profile"));

export { LoadBalanceIppoolArgs, LoadBalanceIppoolState } from "./loadBalanceIppool";
export type LoadBalanceIppool = import("./loadBalanceIppool").LoadBalanceIppool;
export const LoadBalanceIppool: typeof import("./loadBalanceIppool").LoadBalanceIppool = null as any;
utilities.lazyLoad(exports, ["LoadBalanceIppool"], () => require("./loadBalanceIppool"));

export { LoadBalanceIppoolChildNodeMemberArgs, LoadBalanceIppoolChildNodeMemberState } from "./loadBalanceIppoolChildNodeMember";
export type LoadBalanceIppoolChildNodeMember = import("./loadBalanceIppoolChildNodeMember").LoadBalanceIppoolChildNodeMember;
export const LoadBalanceIppoolChildNodeMember: typeof import("./loadBalanceIppoolChildNodeMember").LoadBalanceIppoolChildNodeMember = null as any;
utilities.lazyLoad(exports, ["LoadBalanceIppoolChildNodeMember"], () => require("./loadBalanceIppoolChildNodeMember"));

export { LoadBalanceL2ExceptionListArgs, LoadBalanceL2ExceptionListState } from "./loadBalanceL2ExceptionList";
export type LoadBalanceL2ExceptionList = import("./loadBalanceL2ExceptionList").LoadBalanceL2ExceptionList;
export const LoadBalanceL2ExceptionList: typeof import("./loadBalanceL2ExceptionList").LoadBalanceL2ExceptionList = null as any;
utilities.lazyLoad(exports, ["LoadBalanceL2ExceptionList"], () => require("./loadBalanceL2ExceptionList"));

export { LoadBalanceL2ExceptionListChildMemberArgs, LoadBalanceL2ExceptionListChildMemberState } from "./loadBalanceL2ExceptionListChildMember";
export type LoadBalanceL2ExceptionListChildMember = import("./loadBalanceL2ExceptionListChildMember").LoadBalanceL2ExceptionListChildMember;
export const LoadBalanceL2ExceptionListChildMember: typeof import("./loadBalanceL2ExceptionListChildMember").LoadBalanceL2ExceptionListChildMember = null as any;
utilities.lazyLoad(exports, ["LoadBalanceL2ExceptionListChildMember"], () => require("./loadBalanceL2ExceptionListChildMember"));

export { LoadBalanceMethodArgs, LoadBalanceMethodState } from "./loadBalanceMethod";
export type LoadBalanceMethod = import("./loadBalanceMethod").LoadBalanceMethod;
export const LoadBalanceMethod: typeof import("./loadBalanceMethod").LoadBalanceMethod = null as any;
utilities.lazyLoad(exports, ["LoadBalanceMethod"], () => require("./loadBalanceMethod"));

export { LoadBalancePagespeedArgs, LoadBalancePagespeedState } from "./loadBalancePagespeed";
export type LoadBalancePagespeed = import("./loadBalancePagespeed").LoadBalancePagespeed;
export const LoadBalancePagespeed: typeof import("./loadBalancePagespeed").LoadBalancePagespeed = null as any;
utilities.lazyLoad(exports, ["LoadBalancePagespeed"], () => require("./loadBalancePagespeed"));

export { LoadBalancePagespeedChildPageControlArgs, LoadBalancePagespeedChildPageControlState } from "./loadBalancePagespeedChildPageControl";
export type LoadBalancePagespeedChildPageControl = import("./loadBalancePagespeedChildPageControl").LoadBalancePagespeedChildPageControl;
export const LoadBalancePagespeedChildPageControl: typeof import("./loadBalancePagespeedChildPageControl").LoadBalancePagespeedChildPageControl = null as any;
utilities.lazyLoad(exports, ["LoadBalancePagespeedChildPageControl"], () => require("./loadBalancePagespeedChildPageControl"));

export { LoadBalancePagespeedChildResourceControlArgs, LoadBalancePagespeedChildResourceControlState } from "./loadBalancePagespeedChildResourceControl";
export type LoadBalancePagespeedChildResourceControl = import("./loadBalancePagespeedChildResourceControl").LoadBalancePagespeedChildResourceControl;
export const LoadBalancePagespeedChildResourceControl: typeof import("./loadBalancePagespeedChildResourceControl").LoadBalancePagespeedChildResourceControl = null as any;
utilities.lazyLoad(exports, ["LoadBalancePagespeedChildResourceControl"], () => require("./loadBalancePagespeedChildResourceControl"));

export { LoadBalancePagespeedProfileArgs, LoadBalancePagespeedProfileState } from "./loadBalancePagespeedProfile";
export type LoadBalancePagespeedProfile = import("./loadBalancePagespeedProfile").LoadBalancePagespeedProfile;
export const LoadBalancePagespeedProfile: typeof import("./loadBalancePagespeedProfile").LoadBalancePagespeedProfile = null as any;
utilities.lazyLoad(exports, ["LoadBalancePagespeedProfile"], () => require("./loadBalancePagespeedProfile"));

export { LoadBalancePersistenceArgs, LoadBalancePersistenceState } from "./loadBalancePersistence";
export type LoadBalancePersistence = import("./loadBalancePersistence").LoadBalancePersistence;
export const LoadBalancePersistence: typeof import("./loadBalancePersistence").LoadBalancePersistence = null as any;
utilities.lazyLoad(exports, ["LoadBalancePersistence"], () => require("./loadBalancePersistence"));

export { LoadBalancePersistenceChildIso8583BitmapArgs, LoadBalancePersistenceChildIso8583BitmapState } from "./loadBalancePersistenceChildIso8583Bitmap";
export type LoadBalancePersistenceChildIso8583Bitmap = import("./loadBalancePersistenceChildIso8583Bitmap").LoadBalancePersistenceChildIso8583Bitmap;
export const LoadBalancePersistenceChildIso8583Bitmap: typeof import("./loadBalancePersistenceChildIso8583Bitmap").LoadBalancePersistenceChildIso8583Bitmap = null as any;
utilities.lazyLoad(exports, ["LoadBalancePersistenceChildIso8583Bitmap"], () => require("./loadBalancePersistenceChildIso8583Bitmap"));

export { LoadBalancePersistenceChildRadiusAttributeArgs, LoadBalancePersistenceChildRadiusAttributeState } from "./loadBalancePersistenceChildRadiusAttribute";
export type LoadBalancePersistenceChildRadiusAttribute = import("./loadBalancePersistenceChildRadiusAttribute").LoadBalancePersistenceChildRadiusAttribute;
export const LoadBalancePersistenceChildRadiusAttribute: typeof import("./loadBalancePersistenceChildRadiusAttribute").LoadBalancePersistenceChildRadiusAttribute = null as any;
utilities.lazyLoad(exports, ["LoadBalancePersistenceChildRadiusAttribute"], () => require("./loadBalancePersistenceChildRadiusAttribute"));

export { LoadBalancePoolArgs, LoadBalancePoolState } from "./loadBalancePool";
export type LoadBalancePool = import("./loadBalancePool").LoadBalancePool;
export const LoadBalancePool: typeof import("./loadBalancePool").LoadBalancePool = null as any;
utilities.lazyLoad(exports, ["LoadBalancePool"], () => require("./loadBalancePool"));

export { LoadBalancePoolChildPoolMemberArgs, LoadBalancePoolChildPoolMemberState } from "./loadBalancePoolChildPoolMember";
export type LoadBalancePoolChildPoolMember = import("./loadBalancePoolChildPoolMember").LoadBalancePoolChildPoolMember;
export const LoadBalancePoolChildPoolMember: typeof import("./loadBalancePoolChildPoolMember").LoadBalancePoolChildPoolMember = null as any;
utilities.lazyLoad(exports, ["LoadBalancePoolChildPoolMember"], () => require("./loadBalancePoolChildPoolMember"));

export { LoadBalanceProfileArgs, LoadBalanceProfileState } from "./loadBalanceProfile";
export type LoadBalanceProfile = import("./loadBalanceProfile").LoadBalanceProfile;
export const LoadBalanceProfile: typeof import("./loadBalanceProfile").LoadBalanceProfile = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfile"], () => require("./loadBalanceProfile"));

export { LoadBalanceProfileChildClientRequestHeaderEraseArgs, LoadBalanceProfileChildClientRequestHeaderEraseState } from "./loadBalanceProfileChildClientRequestHeaderErase";
export type LoadBalanceProfileChildClientRequestHeaderErase = import("./loadBalanceProfileChildClientRequestHeaderErase").LoadBalanceProfileChildClientRequestHeaderErase;
export const LoadBalanceProfileChildClientRequestHeaderErase: typeof import("./loadBalanceProfileChildClientRequestHeaderErase").LoadBalanceProfileChildClientRequestHeaderErase = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildClientRequestHeaderErase"], () => require("./loadBalanceProfileChildClientRequestHeaderErase"));

export { LoadBalanceProfileChildClientRequestHeaderInsertArgs, LoadBalanceProfileChildClientRequestHeaderInsertState } from "./loadBalanceProfileChildClientRequestHeaderInsert";
export type LoadBalanceProfileChildClientRequestHeaderInsert = import("./loadBalanceProfileChildClientRequestHeaderInsert").LoadBalanceProfileChildClientRequestHeaderInsert;
export const LoadBalanceProfileChildClientRequestHeaderInsert: typeof import("./loadBalanceProfileChildClientRequestHeaderInsert").LoadBalanceProfileChildClientRequestHeaderInsert = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildClientRequestHeaderInsert"], () => require("./loadBalanceProfileChildClientRequestHeaderInsert"));

export { LoadBalanceProfileChildClientResponseHeaderEraseArgs, LoadBalanceProfileChildClientResponseHeaderEraseState } from "./loadBalanceProfileChildClientResponseHeaderErase";
export type LoadBalanceProfileChildClientResponseHeaderErase = import("./loadBalanceProfileChildClientResponseHeaderErase").LoadBalanceProfileChildClientResponseHeaderErase;
export const LoadBalanceProfileChildClientResponseHeaderErase: typeof import("./loadBalanceProfileChildClientResponseHeaderErase").LoadBalanceProfileChildClientResponseHeaderErase = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildClientResponseHeaderErase"], () => require("./loadBalanceProfileChildClientResponseHeaderErase"));

export { LoadBalanceProfileChildClientResponseHeaderInsertArgs, LoadBalanceProfileChildClientResponseHeaderInsertState } from "./loadBalanceProfileChildClientResponseHeaderInsert";
export type LoadBalanceProfileChildClientResponseHeaderInsert = import("./loadBalanceProfileChildClientResponseHeaderInsert").LoadBalanceProfileChildClientResponseHeaderInsert;
export const LoadBalanceProfileChildClientResponseHeaderInsert: typeof import("./loadBalanceProfileChildClientResponseHeaderInsert").LoadBalanceProfileChildClientResponseHeaderInsert = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildClientResponseHeaderInsert"], () => require("./loadBalanceProfileChildClientResponseHeaderInsert"));

export { LoadBalanceProfileChildMssqlUserPasswordArgs, LoadBalanceProfileChildMssqlUserPasswordState } from "./loadBalanceProfileChildMssqlUserPassword";
export type LoadBalanceProfileChildMssqlUserPassword = import("./loadBalanceProfileChildMssqlUserPassword").LoadBalanceProfileChildMssqlUserPassword;
export const LoadBalanceProfileChildMssqlUserPassword: typeof import("./loadBalanceProfileChildMssqlUserPassword").LoadBalanceProfileChildMssqlUserPassword = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildMssqlUserPassword"], () => require("./loadBalanceProfileChildMssqlUserPassword"));

export { LoadBalanceProfileChildMysqlRuleArgs, LoadBalanceProfileChildMysqlRuleState } from "./loadBalanceProfileChildMysqlRule";
export type LoadBalanceProfileChildMysqlRule = import("./loadBalanceProfileChildMysqlRule").LoadBalanceProfileChildMysqlRule;
export const LoadBalanceProfileChildMysqlRule: typeof import("./loadBalanceProfileChildMysqlRule").LoadBalanceProfileChildMysqlRule = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildMysqlRule"], () => require("./loadBalanceProfileChildMysqlRule"));

export { LoadBalanceProfileChildMysqlShardingArgs, LoadBalanceProfileChildMysqlShardingState } from "./loadBalanceProfileChildMysqlSharding";
export type LoadBalanceProfileChildMysqlSharding = import("./loadBalanceProfileChildMysqlSharding").LoadBalanceProfileChildMysqlSharding;
export const LoadBalanceProfileChildMysqlSharding: typeof import("./loadBalanceProfileChildMysqlSharding").LoadBalanceProfileChildMysqlSharding = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildMysqlSharding"], () => require("./loadBalanceProfileChildMysqlSharding"));

export { LoadBalanceProfileChildMysqlUserPasswordArgs, LoadBalanceProfileChildMysqlUserPasswordState } from "./loadBalanceProfileChildMysqlUserPassword";
export type LoadBalanceProfileChildMysqlUserPassword = import("./loadBalanceProfileChildMysqlUserPassword").LoadBalanceProfileChildMysqlUserPassword;
export const LoadBalanceProfileChildMysqlUserPassword: typeof import("./loadBalanceProfileChildMysqlUserPassword").LoadBalanceProfileChildMysqlUserPassword = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildMysqlUserPassword"], () => require("./loadBalanceProfileChildMysqlUserPassword"));

export { LoadBalanceProfileChildServerRequestHeaderEraseArgs, LoadBalanceProfileChildServerRequestHeaderEraseState } from "./loadBalanceProfileChildServerRequestHeaderErase";
export type LoadBalanceProfileChildServerRequestHeaderErase = import("./loadBalanceProfileChildServerRequestHeaderErase").LoadBalanceProfileChildServerRequestHeaderErase;
export const LoadBalanceProfileChildServerRequestHeaderErase: typeof import("./loadBalanceProfileChildServerRequestHeaderErase").LoadBalanceProfileChildServerRequestHeaderErase = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildServerRequestHeaderErase"], () => require("./loadBalanceProfileChildServerRequestHeaderErase"));

export { LoadBalanceProfileChildServerRequestHeaderInsertArgs, LoadBalanceProfileChildServerRequestHeaderInsertState } from "./loadBalanceProfileChildServerRequestHeaderInsert";
export type LoadBalanceProfileChildServerRequestHeaderInsert = import("./loadBalanceProfileChildServerRequestHeaderInsert").LoadBalanceProfileChildServerRequestHeaderInsert;
export const LoadBalanceProfileChildServerRequestHeaderInsert: typeof import("./loadBalanceProfileChildServerRequestHeaderInsert").LoadBalanceProfileChildServerRequestHeaderInsert = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildServerRequestHeaderInsert"], () => require("./loadBalanceProfileChildServerRequestHeaderInsert"));

export { LoadBalanceProfileChildServerResponseHeaderEraseArgs, LoadBalanceProfileChildServerResponseHeaderEraseState } from "./loadBalanceProfileChildServerResponseHeaderErase";
export type LoadBalanceProfileChildServerResponseHeaderErase = import("./loadBalanceProfileChildServerResponseHeaderErase").LoadBalanceProfileChildServerResponseHeaderErase;
export const LoadBalanceProfileChildServerResponseHeaderErase: typeof import("./loadBalanceProfileChildServerResponseHeaderErase").LoadBalanceProfileChildServerResponseHeaderErase = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildServerResponseHeaderErase"], () => require("./loadBalanceProfileChildServerResponseHeaderErase"));

export { LoadBalanceProfileChildServerResponseHeaderInsertArgs, LoadBalanceProfileChildServerResponseHeaderInsertState } from "./loadBalanceProfileChildServerResponseHeaderInsert";
export type LoadBalanceProfileChildServerResponseHeaderInsert = import("./loadBalanceProfileChildServerResponseHeaderInsert").LoadBalanceProfileChildServerResponseHeaderInsert;
export const LoadBalanceProfileChildServerResponseHeaderInsert: typeof import("./loadBalanceProfileChildServerResponseHeaderInsert").LoadBalanceProfileChildServerResponseHeaderInsert = null as any;
utilities.lazyLoad(exports, ["LoadBalanceProfileChildServerResponseHeaderInsert"], () => require("./loadBalanceProfileChildServerResponseHeaderInsert"));

export { LoadBalanceRealServerArgs, LoadBalanceRealServerState } from "./loadBalanceRealServer";
export type LoadBalanceRealServer = import("./loadBalanceRealServer").LoadBalanceRealServer;
export const LoadBalanceRealServer: typeof import("./loadBalanceRealServer").LoadBalanceRealServer = null as any;
utilities.lazyLoad(exports, ["LoadBalanceRealServer"], () => require("./loadBalanceRealServer"));

export { LoadBalanceRealServerSslProfileArgs, LoadBalanceRealServerSslProfileState } from "./loadBalanceRealServerSslProfile";
export type LoadBalanceRealServerSslProfile = import("./loadBalanceRealServerSslProfile").LoadBalanceRealServerSslProfile;
export const LoadBalanceRealServerSslProfile: typeof import("./loadBalanceRealServerSslProfile").LoadBalanceRealServerSslProfile = null as any;
utilities.lazyLoad(exports, ["LoadBalanceRealServerSslProfile"], () => require("./loadBalanceRealServerSslProfile"));

export { LoadBalanceSchedulePoolArgs, LoadBalanceSchedulePoolState } from "./loadBalanceSchedulePool";
export type LoadBalanceSchedulePool = import("./loadBalanceSchedulePool").LoadBalanceSchedulePool;
export const LoadBalanceSchedulePool: typeof import("./loadBalanceSchedulePool").LoadBalanceSchedulePool = null as any;
utilities.lazyLoad(exports, ["LoadBalanceSchedulePool"], () => require("./loadBalanceSchedulePool"));

export { LoadBalanceVirtualServerArgs, LoadBalanceVirtualServerState } from "./loadBalanceVirtualServer";
export type LoadBalanceVirtualServer = import("./loadBalanceVirtualServer").LoadBalanceVirtualServer;
export const LoadBalanceVirtualServer: typeof import("./loadBalanceVirtualServer").LoadBalanceVirtualServer = null as any;
utilities.lazyLoad(exports, ["LoadBalanceVirtualServer"], () => require("./loadBalanceVirtualServer"));

export { LoadBalanceWebCategoryArgs, LoadBalanceWebCategoryState } from "./loadBalanceWebCategory";
export type LoadBalanceWebCategory = import("./loadBalanceWebCategory").LoadBalanceWebCategory;
export const LoadBalanceWebCategory: typeof import("./loadBalanceWebCategory").LoadBalanceWebCategory = null as any;
utilities.lazyLoad(exports, ["LoadBalanceWebCategory"], () => require("./loadBalanceWebCategory"));

export { LoadBalanceWebFilterProfileArgs, LoadBalanceWebFilterProfileState } from "./loadBalanceWebFilterProfile";
export type LoadBalanceWebFilterProfile = import("./loadBalanceWebFilterProfile").LoadBalanceWebFilterProfile;
export const LoadBalanceWebFilterProfile: typeof import("./loadBalanceWebFilterProfile").LoadBalanceWebFilterProfile = null as any;
utilities.lazyLoad(exports, ["LoadBalanceWebFilterProfile"], () => require("./loadBalanceWebFilterProfile"));

export { LoadBalanceWebFilterProfileChildCategoryMembersArgs, LoadBalanceWebFilterProfileChildCategoryMembersState } from "./loadBalanceWebFilterProfileChildCategoryMembers";
export type LoadBalanceWebFilterProfileChildCategoryMembers = import("./loadBalanceWebFilterProfileChildCategoryMembers").LoadBalanceWebFilterProfileChildCategoryMembers;
export const LoadBalanceWebFilterProfileChildCategoryMembers: typeof import("./loadBalanceWebFilterProfileChildCategoryMembers").LoadBalanceWebFilterProfileChildCategoryMembers = null as any;
utilities.lazyLoad(exports, ["LoadBalanceWebFilterProfileChildCategoryMembers"], () => require("./loadBalanceWebFilterProfileChildCategoryMembers"));

export { LoadBalanceWebSubCategoryArgs, LoadBalanceWebSubCategoryState } from "./loadBalanceWebSubCategory";
export type LoadBalanceWebSubCategory = import("./loadBalanceWebSubCategory").LoadBalanceWebSubCategory;
export const LoadBalanceWebSubCategory: typeof import("./loadBalanceWebSubCategory").LoadBalanceWebSubCategory = null as any;
utilities.lazyLoad(exports, ["LoadBalanceWebSubCategory"], () => require("./loadBalanceWebSubCategory"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RouterAccessListArgs, RouterAccessListState } from "./routerAccessList";
export type RouterAccessList = import("./routerAccessList").RouterAccessList;
export const RouterAccessList: typeof import("./routerAccessList").RouterAccessList = null as any;
utilities.lazyLoad(exports, ["RouterAccessList"], () => require("./routerAccessList"));

export { RouterAccessList6Args, RouterAccessList6State } from "./routerAccessList6";
export type RouterAccessList6 = import("./routerAccessList6").RouterAccessList6;
export const RouterAccessList6: typeof import("./routerAccessList6").RouterAccessList6 = null as any;
utilities.lazyLoad(exports, ["RouterAccessList6"], () => require("./routerAccessList6"));

export { RouterAccessList6ChildRuleArgs, RouterAccessList6ChildRuleState } from "./routerAccessList6ChildRule";
export type RouterAccessList6ChildRule = import("./routerAccessList6ChildRule").RouterAccessList6ChildRule;
export const RouterAccessList6ChildRule: typeof import("./routerAccessList6ChildRule").RouterAccessList6ChildRule = null as any;
utilities.lazyLoad(exports, ["RouterAccessList6ChildRule"], () => require("./routerAccessList6ChildRule"));

export { RouterAccessListChildRuleArgs, RouterAccessListChildRuleState } from "./routerAccessListChildRule";
export type RouterAccessListChildRule = import("./routerAccessListChildRule").RouterAccessListChildRule;
export const RouterAccessListChildRule: typeof import("./routerAccessListChildRule").RouterAccessListChildRule = null as any;
utilities.lazyLoad(exports, ["RouterAccessListChildRule"], () => require("./routerAccessListChildRule"));

export { RouterBgpArgs, RouterBgpState } from "./routerBgp";
export type RouterBgp = import("./routerBgp").RouterBgp;
export const RouterBgp: typeof import("./routerBgp").RouterBgp = null as any;
utilities.lazyLoad(exports, ["RouterBgp"], () => require("./routerBgp"));

export { RouterBgpChildHaRouterIdListArgs, RouterBgpChildHaRouterIdListState } from "./routerBgpChildHaRouterIdList";
export type RouterBgpChildHaRouterIdList = import("./routerBgpChildHaRouterIdList").RouterBgpChildHaRouterIdList;
export const RouterBgpChildHaRouterIdList: typeof import("./routerBgpChildHaRouterIdList").RouterBgpChildHaRouterIdList = null as any;
utilities.lazyLoad(exports, ["RouterBgpChildHaRouterIdList"], () => require("./routerBgpChildHaRouterIdList"));

export { RouterBgpChildNeighborArgs, RouterBgpChildNeighborState } from "./routerBgpChildNeighbor";
export type RouterBgpChildNeighbor = import("./routerBgpChildNeighbor").RouterBgpChildNeighbor;
export const RouterBgpChildNeighbor: typeof import("./routerBgpChildNeighbor").RouterBgpChildNeighbor = null as any;
utilities.lazyLoad(exports, ["RouterBgpChildNeighbor"], () => require("./routerBgpChildNeighbor"));

export { RouterBgpChildNetworkArgs, RouterBgpChildNetworkState } from "./routerBgpChildNetwork";
export type RouterBgpChildNetwork = import("./routerBgpChildNetwork").RouterBgpChildNetwork;
export const RouterBgpChildNetwork: typeof import("./routerBgpChildNetwork").RouterBgpChildNetwork = null as any;
utilities.lazyLoad(exports, ["RouterBgpChildNetwork"], () => require("./routerBgpChildNetwork"));

export { RouterIspArgs, RouterIspState } from "./routerIsp";
export type RouterIsp = import("./routerIsp").RouterIsp;
export const RouterIsp: typeof import("./routerIsp").RouterIsp = null as any;
utilities.lazyLoad(exports, ["RouterIsp"], () => require("./routerIsp"));

export { RouterMd5OspfArgs, RouterMd5OspfState } from "./routerMd5Ospf";
export type RouterMd5Ospf = import("./routerMd5Ospf").RouterMd5Ospf;
export const RouterMd5Ospf: typeof import("./routerMd5Ospf").RouterMd5Ospf = null as any;
utilities.lazyLoad(exports, ["RouterMd5Ospf"], () => require("./routerMd5Ospf"));

export { RouterMd5OspfChildMd5MemberArgs, RouterMd5OspfChildMd5MemberState } from "./routerMd5OspfChildMd5Member";
export type RouterMd5OspfChildMd5Member = import("./routerMd5OspfChildMd5Member").RouterMd5OspfChildMd5Member;
export const RouterMd5OspfChildMd5Member: typeof import("./routerMd5OspfChildMd5Member").RouterMd5OspfChildMd5Member = null as any;
utilities.lazyLoad(exports, ["RouterMd5OspfChildMd5Member"], () => require("./routerMd5OspfChildMd5Member"));

export { RouterOspfArgs, RouterOspfState } from "./routerOspf";
export type RouterOspf = import("./routerOspf").RouterOspf;
export const RouterOspf: typeof import("./routerOspf").RouterOspf = null as any;
utilities.lazyLoad(exports, ["RouterOspf"], () => require("./routerOspf"));

export { RouterOspfChildAreaArgs, RouterOspfChildAreaState } from "./routerOspfChildArea";
export type RouterOspfChildArea = import("./routerOspfChildArea").RouterOspfChildArea;
export const RouterOspfChildArea: typeof import("./routerOspfChildArea").RouterOspfChildArea = null as any;
utilities.lazyLoad(exports, ["RouterOspfChildArea"], () => require("./routerOspfChildArea"));

export { RouterOspfChildHaRouterIdListArgs, RouterOspfChildHaRouterIdListState } from "./routerOspfChildHaRouterIdList";
export type RouterOspfChildHaRouterIdList = import("./routerOspfChildHaRouterIdList").RouterOspfChildHaRouterIdList;
export const RouterOspfChildHaRouterIdList: typeof import("./routerOspfChildHaRouterIdList").RouterOspfChildHaRouterIdList = null as any;
utilities.lazyLoad(exports, ["RouterOspfChildHaRouterIdList"], () => require("./routerOspfChildHaRouterIdList"));

export { RouterOspfChildNetworkArgs, RouterOspfChildNetworkState } from "./routerOspfChildNetwork";
export type RouterOspfChildNetwork = import("./routerOspfChildNetwork").RouterOspfChildNetwork;
export const RouterOspfChildNetwork: typeof import("./routerOspfChildNetwork").RouterOspfChildNetwork = null as any;
utilities.lazyLoad(exports, ["RouterOspfChildNetwork"], () => require("./routerOspfChildNetwork"));

export { RouterOspfChildOspfInterfaceArgs, RouterOspfChildOspfInterfaceState } from "./routerOspfChildOspfInterface";
export type RouterOspfChildOspfInterface = import("./routerOspfChildOspfInterface").RouterOspfChildOspfInterface;
export const RouterOspfChildOspfInterface: typeof import("./routerOspfChildOspfInterface").RouterOspfChildOspfInterface = null as any;
utilities.lazyLoad(exports, ["RouterOspfChildOspfInterface"], () => require("./routerOspfChildOspfInterface"));

export { RouterPolicyArgs, RouterPolicyState } from "./routerPolicy";
export type RouterPolicy = import("./routerPolicy").RouterPolicy;
export const RouterPolicy: typeof import("./routerPolicy").RouterPolicy = null as any;
utilities.lazyLoad(exports, ["RouterPolicy"], () => require("./routerPolicy"));

export { RouterPrefixListArgs, RouterPrefixListState } from "./routerPrefixList";
export type RouterPrefixList = import("./routerPrefixList").RouterPrefixList;
export const RouterPrefixList: typeof import("./routerPrefixList").RouterPrefixList = null as any;
utilities.lazyLoad(exports, ["RouterPrefixList"], () => require("./routerPrefixList"));

export { RouterPrefixList6Args, RouterPrefixList6State } from "./routerPrefixList6";
export type RouterPrefixList6 = import("./routerPrefixList6").RouterPrefixList6;
export const RouterPrefixList6: typeof import("./routerPrefixList6").RouterPrefixList6 = null as any;
utilities.lazyLoad(exports, ["RouterPrefixList6"], () => require("./routerPrefixList6"));

export { RouterPrefixList6ChildRuleArgs, RouterPrefixList6ChildRuleState } from "./routerPrefixList6ChildRule";
export type RouterPrefixList6ChildRule = import("./routerPrefixList6ChildRule").RouterPrefixList6ChildRule;
export const RouterPrefixList6ChildRule: typeof import("./routerPrefixList6ChildRule").RouterPrefixList6ChildRule = null as any;
utilities.lazyLoad(exports, ["RouterPrefixList6ChildRule"], () => require("./routerPrefixList6ChildRule"));

export { RouterPrefixListChildRuleArgs, RouterPrefixListChildRuleState } from "./routerPrefixListChildRule";
export type RouterPrefixListChildRule = import("./routerPrefixListChildRule").RouterPrefixListChildRule;
export const RouterPrefixListChildRule: typeof import("./routerPrefixListChildRule").RouterPrefixListChildRule = null as any;
utilities.lazyLoad(exports, ["RouterPrefixListChildRule"], () => require("./routerPrefixListChildRule"));

export { RouterStaticArgs, RouterStaticState } from "./routerStatic";
export type RouterStatic = import("./routerStatic").RouterStatic;
export const RouterStatic: typeof import("./routerStatic").RouterStatic = null as any;
utilities.lazyLoad(exports, ["RouterStatic"], () => require("./routerStatic"));

export { SecurityAntivirusProfileArgs, SecurityAntivirusProfileState } from "./securityAntivirusProfile";
export type SecurityAntivirusProfile = import("./securityAntivirusProfile").SecurityAntivirusProfile;
export const SecurityAntivirusProfile: typeof import("./securityAntivirusProfile").SecurityAntivirusProfile = null as any;
utilities.lazyLoad(exports, ["SecurityAntivirusProfile"], () => require("./securityAntivirusProfile"));

export { SecurityDosDosProtectionProfileArgs, SecurityDosDosProtectionProfileState } from "./securityDosDosProtectionProfile";
export type SecurityDosDosProtectionProfile = import("./securityDosDosProtectionProfile").SecurityDosDosProtectionProfile;
export const SecurityDosDosProtectionProfile: typeof import("./securityDosDosProtectionProfile").SecurityDosDosProtectionProfile = null as any;
utilities.lazyLoad(exports, ["SecurityDosDosProtectionProfile"], () => require("./securityDosDosProtectionProfile"));

export { SecurityIpsProfileArgs, SecurityIpsProfileState } from "./securityIpsProfile";
export type SecurityIpsProfile = import("./securityIpsProfile").SecurityIpsProfile;
export const SecurityIpsProfile: typeof import("./securityIpsProfile").SecurityIpsProfile = null as any;
utilities.lazyLoad(exports, ["SecurityIpsProfile"], () => require("./securityIpsProfile"));

export { SecurityWafProfileArgs, SecurityWafProfileState } from "./securityWafProfile";
export type SecurityWafProfile = import("./securityWafProfile").SecurityWafProfile;
export const SecurityWafProfile: typeof import("./securityWafProfile").SecurityWafProfile = null as any;
utilities.lazyLoad(exports, ["SecurityWafProfile"], () => require("./securityWafProfile"));

export { SecurityZtnaProfileArgs, SecurityZtnaProfileState } from "./securityZtnaProfile";
export type SecurityZtnaProfile = import("./securityZtnaProfile").SecurityZtnaProfile;
export const SecurityZtnaProfile: typeof import("./securityZtnaProfile").SecurityZtnaProfile = null as any;
utilities.lazyLoad(exports, ["SecurityZtnaProfile"], () => require("./securityZtnaProfile"));

export { SystemAddressArgs, SystemAddressState } from "./systemAddress";
export type SystemAddress = import("./systemAddress").SystemAddress;
export const SystemAddress: typeof import("./systemAddress").SystemAddress = null as any;
utilities.lazyLoad(exports, ["SystemAddress"], () => require("./systemAddress"));

export { SystemAddress6Args, SystemAddress6State } from "./systemAddress6";
export type SystemAddress6 = import("./systemAddress6").SystemAddress6;
export const SystemAddress6: typeof import("./systemAddress6").SystemAddress6 = null as any;
utilities.lazyLoad(exports, ["SystemAddress6"], () => require("./systemAddress6"));

export { SystemAddrgrpArgs, SystemAddrgrpState } from "./systemAddrgrp";
export type SystemAddrgrp = import("./systemAddrgrp").SystemAddrgrp;
export const SystemAddrgrp: typeof import("./systemAddrgrp").SystemAddrgrp = null as any;
utilities.lazyLoad(exports, ["SystemAddrgrp"], () => require("./systemAddrgrp"));

export { SystemAddrgrp6Args, SystemAddrgrp6State } from "./systemAddrgrp6";
export type SystemAddrgrp6 = import("./systemAddrgrp6").SystemAddrgrp6;
export const SystemAddrgrp6: typeof import("./systemAddrgrp6").SystemAddrgrp6 = null as any;
utilities.lazyLoad(exports, ["SystemAddrgrp6"], () => require("./systemAddrgrp6"));

export { SystemAutoBackupArgs, SystemAutoBackupState } from "./systemAutoBackup";
export type SystemAutoBackup = import("./systemAutoBackup").SystemAutoBackup;
export const SystemAutoBackup: typeof import("./systemAutoBackup").SystemAutoBackup = null as any;
utilities.lazyLoad(exports, ["SystemAutoBackup"], () => require("./systemAutoBackup"));

export { SystemAzureLbBackendIpArgs, SystemAzureLbBackendIpState } from "./systemAzureLbBackendIp";
export type SystemAzureLbBackendIp = import("./systemAzureLbBackendIp").SystemAzureLbBackendIp;
export const SystemAzureLbBackendIp: typeof import("./systemAzureLbBackendIp").SystemAzureLbBackendIp = null as any;
utilities.lazyLoad(exports, ["SystemAzureLbBackendIp"], () => require("./systemAzureLbBackendIp"));

export { SystemCertificateCaGroupArgs, SystemCertificateCaGroupState } from "./systemCertificateCaGroup";
export type SystemCertificateCaGroup = import("./systemCertificateCaGroup").SystemCertificateCaGroup;
export const SystemCertificateCaGroup: typeof import("./systemCertificateCaGroup").SystemCertificateCaGroup = null as any;
utilities.lazyLoad(exports, ["SystemCertificateCaGroup"], () => require("./systemCertificateCaGroup"));

export { SystemCertificateCaGroupChildGroupMemberArgs, SystemCertificateCaGroupChildGroupMemberState } from "./systemCertificateCaGroupChildGroupMember";
export type SystemCertificateCaGroupChildGroupMember = import("./systemCertificateCaGroupChildGroupMember").SystemCertificateCaGroupChildGroupMember;
export const SystemCertificateCaGroupChildGroupMember: typeof import("./systemCertificateCaGroupChildGroupMember").SystemCertificateCaGroupChildGroupMember = null as any;
utilities.lazyLoad(exports, ["SystemCertificateCaGroupChildGroupMember"], () => require("./systemCertificateCaGroupChildGroupMember"));

export { SystemCertificateCertificateVerifyArgs, SystemCertificateCertificateVerifyState } from "./systemCertificateCertificateVerify";
export type SystemCertificateCertificateVerify = import("./systemCertificateCertificateVerify").SystemCertificateCertificateVerify;
export const SystemCertificateCertificateVerify: typeof import("./systemCertificateCertificateVerify").SystemCertificateCertificateVerify = null as any;
utilities.lazyLoad(exports, ["SystemCertificateCertificateVerify"], () => require("./systemCertificateCertificateVerify"));

export { SystemCertificateCertificateVerifyChildGroupMemberArgs, SystemCertificateCertificateVerifyChildGroupMemberState } from "./systemCertificateCertificateVerifyChildGroupMember";
export type SystemCertificateCertificateVerifyChildGroupMember = import("./systemCertificateCertificateVerifyChildGroupMember").SystemCertificateCertificateVerifyChildGroupMember;
export const SystemCertificateCertificateVerifyChildGroupMember: typeof import("./systemCertificateCertificateVerifyChildGroupMember").SystemCertificateCertificateVerifyChildGroupMember = null as any;
utilities.lazyLoad(exports, ["SystemCertificateCertificateVerifyChildGroupMember"], () => require("./systemCertificateCertificateVerifyChildGroupMember"));

export { SystemCertificateCrlArgs, SystemCertificateCrlState } from "./systemCertificateCrl";
export type SystemCertificateCrl = import("./systemCertificateCrl").SystemCertificateCrl;
export const SystemCertificateCrl: typeof import("./systemCertificateCrl").SystemCertificateCrl = null as any;
utilities.lazyLoad(exports, ["SystemCertificateCrl"], () => require("./systemCertificateCrl"));

export { SystemCertificateIntermediateCaArgs, SystemCertificateIntermediateCaState } from "./systemCertificateIntermediateCa";
export type SystemCertificateIntermediateCa = import("./systemCertificateIntermediateCa").SystemCertificateIntermediateCa;
export const SystemCertificateIntermediateCa: typeof import("./systemCertificateIntermediateCa").SystemCertificateIntermediateCa = null as any;
utilities.lazyLoad(exports, ["SystemCertificateIntermediateCa"], () => require("./systemCertificateIntermediateCa"));

export { SystemCertificateIntermediateCaGroupArgs, SystemCertificateIntermediateCaGroupState } from "./systemCertificateIntermediateCaGroup";
export type SystemCertificateIntermediateCaGroup = import("./systemCertificateIntermediateCaGroup").SystemCertificateIntermediateCaGroup;
export const SystemCertificateIntermediateCaGroup: typeof import("./systemCertificateIntermediateCaGroup").SystemCertificateIntermediateCaGroup = null as any;
utilities.lazyLoad(exports, ["SystemCertificateIntermediateCaGroup"], () => require("./systemCertificateIntermediateCaGroup"));

export { SystemCertificateIntermediateCaGroupChildGroupMemberArgs, SystemCertificateIntermediateCaGroupChildGroupMemberState } from "./systemCertificateIntermediateCaGroupChildGroupMember";
export type SystemCertificateIntermediateCaGroupChildGroupMember = import("./systemCertificateIntermediateCaGroupChildGroupMember").SystemCertificateIntermediateCaGroupChildGroupMember;
export const SystemCertificateIntermediateCaGroupChildGroupMember: typeof import("./systemCertificateIntermediateCaGroupChildGroupMember").SystemCertificateIntermediateCaGroupChildGroupMember = null as any;
utilities.lazyLoad(exports, ["SystemCertificateIntermediateCaGroupChildGroupMember"], () => require("./systemCertificateIntermediateCaGroupChildGroupMember"));

export { SystemCertificateLocalArgs, SystemCertificateLocalState } from "./systemCertificateLocal";
export type SystemCertificateLocal = import("./systemCertificateLocal").SystemCertificateLocal;
export const SystemCertificateLocal: typeof import("./systemCertificateLocal").SystemCertificateLocal = null as any;
utilities.lazyLoad(exports, ["SystemCertificateLocal"], () => require("./systemCertificateLocal"));

export { SystemCertificateLocalCertGroupArgs, SystemCertificateLocalCertGroupState } from "./systemCertificateLocalCertGroup";
export type SystemCertificateLocalCertGroup = import("./systemCertificateLocalCertGroup").SystemCertificateLocalCertGroup;
export const SystemCertificateLocalCertGroup: typeof import("./systemCertificateLocalCertGroup").SystemCertificateLocalCertGroup = null as any;
utilities.lazyLoad(exports, ["SystemCertificateLocalCertGroup"], () => require("./systemCertificateLocalCertGroup"));

export { SystemCertificateLocalCertGroupChildGroupMemberArgs, SystemCertificateLocalCertGroupChildGroupMemberState } from "./systemCertificateLocalCertGroupChildGroupMember";
export type SystemCertificateLocalCertGroupChildGroupMember = import("./systemCertificateLocalCertGroupChildGroupMember").SystemCertificateLocalCertGroupChildGroupMember;
export const SystemCertificateLocalCertGroupChildGroupMember: typeof import("./systemCertificateLocalCertGroupChildGroupMember").SystemCertificateLocalCertGroupChildGroupMember = null as any;
utilities.lazyLoad(exports, ["SystemCertificateLocalCertGroupChildGroupMember"], () => require("./systemCertificateLocalCertGroupChildGroupMember"));

export { SystemCertificateLocalUploadArgs, SystemCertificateLocalUploadState } from "./systemCertificateLocalUpload";
export type SystemCertificateLocalUpload = import("./systemCertificateLocalUpload").SystemCertificateLocalUpload;
export const SystemCertificateLocalUpload: typeof import("./systemCertificateLocalUpload").SystemCertificateLocalUpload = null as any;
utilities.lazyLoad(exports, ["SystemCertificateLocalUpload"], () => require("./systemCertificateLocalUpload"));

export { SystemCertificateOcspArgs, SystemCertificateOcspState } from "./systemCertificateOcsp";
export type SystemCertificateOcsp = import("./systemCertificateOcsp").SystemCertificateOcsp;
export const SystemCertificateOcsp: typeof import("./systemCertificateOcsp").SystemCertificateOcsp = null as any;
utilities.lazyLoad(exports, ["SystemCertificateOcsp"], () => require("./systemCertificateOcsp"));

export { SystemDnsArgs, SystemDnsState } from "./systemDns";
export type SystemDns = import("./systemDns").SystemDns;
export const SystemDns: typeof import("./systemDns").SystemDns = null as any;
utilities.lazyLoad(exports, ["SystemDns"], () => require("./systemDns"));

export { SystemDnsVdomArgs, SystemDnsVdomState } from "./systemDnsVdom";
export type SystemDnsVdom = import("./systemDnsVdom").SystemDnsVdom;
export const SystemDnsVdom: typeof import("./systemDnsVdom").SystemDnsVdom = null as any;
utilities.lazyLoad(exports, ["SystemDnsVdom"], () => require("./systemDnsVdom"));

export { SystemGlobalArgs, SystemGlobalState } from "./systemGlobal";
export type SystemGlobal = import("./systemGlobal").SystemGlobal;
export const SystemGlobal: typeof import("./systemGlobal").SystemGlobal = null as any;
utilities.lazyLoad(exports, ["SystemGlobal"], () => require("./systemGlobal"));

export { SystemHaArgs, SystemHaState } from "./systemHa";
export type SystemHa = import("./systemHa").SystemHa;
export const SystemHa: typeof import("./systemHa").SystemHa = null as any;
utilities.lazyLoad(exports, ["SystemHa"], () => require("./systemHa"));

export { SystemHaChildRemoteIpMonitorListArgs, SystemHaChildRemoteIpMonitorListState } from "./systemHaChildRemoteIpMonitorList";
export type SystemHaChildRemoteIpMonitorList = import("./systemHaChildRemoteIpMonitorList").SystemHaChildRemoteIpMonitorList;
export const SystemHaChildRemoteIpMonitorList: typeof import("./systemHaChildRemoteIpMonitorList").SystemHaChildRemoteIpMonitorList = null as any;
utilities.lazyLoad(exports, ["SystemHaChildRemoteIpMonitorList"], () => require("./systemHaChildRemoteIpMonitorList"));

export { SystemHaMgmtUpdateArgs, SystemHaMgmtUpdateState } from "./systemHaMgmtUpdate";
export type SystemHaMgmtUpdate = import("./systemHaMgmtUpdate").SystemHaMgmtUpdate;
export const SystemHaMgmtUpdate: typeof import("./systemHaMgmtUpdate").SystemHaMgmtUpdate = null as any;
utilities.lazyLoad(exports, ["SystemHaMgmtUpdate"], () => require("./systemHaMgmtUpdate"));

export { SystemHealthCheckArgs, SystemHealthCheckState } from "./systemHealthCheck";
export type SystemHealthCheck = import("./systemHealthCheck").SystemHealthCheck;
export const SystemHealthCheck: typeof import("./systemHealthCheck").SystemHealthCheck = null as any;
utilities.lazyLoad(exports, ["SystemHealthCheck"], () => require("./systemHealthCheck"));

export { SystemHealthCheckScriptArgs, SystemHealthCheckScriptState } from "./systemHealthCheckScript";
export type SystemHealthCheckScript = import("./systemHealthCheckScript").SystemHealthCheckScript;
export const SystemHealthCheckScript: typeof import("./systemHealthCheckScript").SystemHealthCheckScript = null as any;
utilities.lazyLoad(exports, ["SystemHealthCheckScript"], () => require("./systemHealthCheckScript"));

export { SystemInterfaceArgs, SystemInterfaceState } from "./systemInterface";
export type SystemInterface = import("./systemInterface").SystemInterface;
export const SystemInterface: typeof import("./systemInterface").SystemInterface = null as any;
utilities.lazyLoad(exports, ["SystemInterface"], () => require("./systemInterface"));

export { SystemInterfaceChildHaNodeIpListArgs, SystemInterfaceChildHaNodeIpListState } from "./systemInterfaceChildHaNodeIpList";
export type SystemInterfaceChildHaNodeIpList = import("./systemInterfaceChildHaNodeIpList").SystemInterfaceChildHaNodeIpList;
export const SystemInterfaceChildHaNodeIpList: typeof import("./systemInterfaceChildHaNodeIpList").SystemInterfaceChildHaNodeIpList = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceChildHaNodeIpList"], () => require("./systemInterfaceChildHaNodeIpList"));

export { SystemInterfaceChildSecondaryIpListArgs, SystemInterfaceChildSecondaryIpListState } from "./systemInterfaceChildSecondaryIpList";
export type SystemInterfaceChildSecondaryIpList = import("./systemInterfaceChildSecondaryIpList").SystemInterfaceChildSecondaryIpList;
export const SystemInterfaceChildSecondaryIpList: typeof import("./systemInterfaceChildSecondaryIpList").SystemInterfaceChildSecondaryIpList = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceChildSecondaryIpList"], () => require("./systemInterfaceChildSecondaryIpList"));

export { SystemInterfaceChildTrustIpListArgs, SystemInterfaceChildTrustIpListState } from "./systemInterfaceChildTrustIpList";
export type SystemInterfaceChildTrustIpList = import("./systemInterfaceChildTrustIpList").SystemInterfaceChildTrustIpList;
export const SystemInterfaceChildTrustIpList: typeof import("./systemInterfaceChildTrustIpList").SystemInterfaceChildTrustIpList = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceChildTrustIpList"], () => require("./systemInterfaceChildTrustIpList"));

export { SystemIspAddrArgs, SystemIspAddrState } from "./systemIspAddr";
export type SystemIspAddr = import("./systemIspAddr").SystemIspAddr;
export const SystemIspAddr: typeof import("./systemIspAddr").SystemIspAddr = null as any;
utilities.lazyLoad(exports, ["SystemIspAddr"], () => require("./systemIspAddr"));

export { SystemIspAddrChildAddressArgs, SystemIspAddrChildAddressState } from "./systemIspAddrChildAddress";
export type SystemIspAddrChildAddress = import("./systemIspAddrChildAddress").SystemIspAddrChildAddress;
export const SystemIspAddrChildAddress: typeof import("./systemIspAddrChildAddress").SystemIspAddrChildAddress = null as any;
utilities.lazyLoad(exports, ["SystemIspAddrChildAddress"], () => require("./systemIspAddrChildAddress"));

export { SystemIspProvinceArgs, SystemIspProvinceState } from "./systemIspProvince";
export type SystemIspProvince = import("./systemIspProvince").SystemIspProvince;
export const SystemIspProvince: typeof import("./systemIspProvince").SystemIspProvince = null as any;
utilities.lazyLoad(exports, ["SystemIspProvince"], () => require("./systemIspProvince"));

export { SystemMailserverArgs, SystemMailserverState } from "./systemMailserver";
export type SystemMailserver = import("./systemMailserver").SystemMailserver;
export const SystemMailserver: typeof import("./systemMailserver").SystemMailserver = null as any;
utilities.lazyLoad(exports, ["SystemMailserver"], () => require("./systemMailserver"));

export { SystemOverlayTunnelArgs, SystemOverlayTunnelState } from "./systemOverlayTunnel";
export type SystemOverlayTunnel = import("./systemOverlayTunnel").SystemOverlayTunnel;
export const SystemOverlayTunnel: typeof import("./systemOverlayTunnel").SystemOverlayTunnel = null as any;
utilities.lazyLoad(exports, ["SystemOverlayTunnel"], () => require("./systemOverlayTunnel"));

export { SystemOverlayTunnelChildRemoteHostArgs, SystemOverlayTunnelChildRemoteHostState } from "./systemOverlayTunnelChildRemoteHost";
export type SystemOverlayTunnelChildRemoteHost = import("./systemOverlayTunnelChildRemoteHost").SystemOverlayTunnelChildRemoteHost;
export const SystemOverlayTunnelChildRemoteHost: typeof import("./systemOverlayTunnelChildRemoteHost").SystemOverlayTunnelChildRemoteHost = null as any;
utilities.lazyLoad(exports, ["SystemOverlayTunnelChildRemoteHost"], () => require("./systemOverlayTunnelChildRemoteHost"));

export { SystemScheduleGroupArgs, SystemScheduleGroupState } from "./systemScheduleGroup";
export type SystemScheduleGroup = import("./systemScheduleGroup").SystemScheduleGroup;
export const SystemScheduleGroup: typeof import("./systemScheduleGroup").SystemScheduleGroup = null as any;
utilities.lazyLoad(exports, ["SystemScheduleGroup"], () => require("./systemScheduleGroup"));

export { SystemScheduleGroupChildScheduleMemberArgs, SystemScheduleGroupChildScheduleMemberState } from "./systemScheduleGroupChildScheduleMember";
export type SystemScheduleGroupChildScheduleMember = import("./systemScheduleGroupChildScheduleMember").SystemScheduleGroupChildScheduleMember;
export const SystemScheduleGroupChildScheduleMember: typeof import("./systemScheduleGroupChildScheduleMember").SystemScheduleGroupChildScheduleMember = null as any;
utilities.lazyLoad(exports, ["SystemScheduleGroupChildScheduleMember"], () => require("./systemScheduleGroupChildScheduleMember"));

export { SystemScriptingArgs, SystemScriptingState } from "./systemScripting";
export type SystemScripting = import("./systemScripting").SystemScripting;
export const SystemScripting: typeof import("./systemScripting").SystemScripting = null as any;
utilities.lazyLoad(exports, ["SystemScripting"], () => require("./systemScripting"));

export { SystemScriptingUploadArgs, SystemScriptingUploadState } from "./systemScriptingUpload";
export type SystemScriptingUpload = import("./systemScriptingUpload").SystemScriptingUpload;
export const SystemScriptingUpload: typeof import("./systemScriptingUpload").SystemScriptingUpload = null as any;
utilities.lazyLoad(exports, ["SystemScriptingUpload"], () => require("./systemScriptingUpload"));

export { SystemSdnConnectorArgs, SystemSdnConnectorState } from "./systemSdnConnector";
export type SystemSdnConnector = import("./systemSdnConnector").SystemSdnConnector;
export const SystemSdnConnector: typeof import("./systemSdnConnector").SystemSdnConnector = null as any;
utilities.lazyLoad(exports, ["SystemSdnConnector"], () => require("./systemSdnConnector"));

export { SystemServiceArgs, SystemServiceState } from "./systemService";
export type SystemService = import("./systemService").SystemService;
export const SystemService: typeof import("./systemService").SystemService = null as any;
utilities.lazyLoad(exports, ["SystemService"], () => require("./systemService"));

export { SystemServicegrpArgs, SystemServicegrpState } from "./systemServicegrp";
export type SystemServicegrp = import("./systemServicegrp").SystemServicegrp;
export const SystemServicegrp: typeof import("./systemServicegrp").SystemServicegrp = null as any;
utilities.lazyLoad(exports, ["SystemServicegrp"], () => require("./systemServicegrp"));

export { SystemStreamScriptingArgs, SystemStreamScriptingState } from "./systemStreamScripting";
export type SystemStreamScripting = import("./systemStreamScripting").SystemStreamScripting;
export const SystemStreamScripting: typeof import("./systemStreamScripting").SystemStreamScripting = null as any;
utilities.lazyLoad(exports, ["SystemStreamScripting"], () => require("./systemStreamScripting"));

export { SystemTimeManualArgs, SystemTimeManualState } from "./systemTimeManual";
export type SystemTimeManual = import("./systemTimeManual").SystemTimeManual;
export const SystemTimeManual: typeof import("./systemTimeManual").SystemTimeManual = null as any;
utilities.lazyLoad(exports, ["SystemTimeManual"], () => require("./systemTimeManual"));

export { SystemTrafficGroupArgs, SystemTrafficGroupState } from "./systemTrafficGroup";
export type SystemTrafficGroup = import("./systemTrafficGroup").SystemTrafficGroup;
export const SystemTrafficGroup: typeof import("./systemTrafficGroup").SystemTrafficGroup = null as any;
utilities.lazyLoad(exports, ["SystemTrafficGroup"], () => require("./systemTrafficGroup"));

export { SystemVdomArgs, SystemVdomState } from "./systemVdom";
export type SystemVdom = import("./systemVdom").SystemVdom;
export const SystemVdom: typeof import("./systemVdom").SystemVdom = null as any;
utilities.lazyLoad(exports, ["SystemVdom"], () => require("./systemVdom"));

export { SystemVdomLinkArgs, SystemVdomLinkState } from "./systemVdomLink";
export type SystemVdomLink = import("./systemVdomLink").SystemVdomLink;
export const SystemVdomLink: typeof import("./systemVdomLink").SystemVdomLink = null as any;
utilities.lazyLoad(exports, ["SystemVdomLink"], () => require("./systemVdomLink"));

export { UploadCaptchaCustArgs, UploadCaptchaCustState } from "./uploadCaptchaCust";
export type UploadCaptchaCust = import("./uploadCaptchaCust").UploadCaptchaCust;
export const UploadCaptchaCust: typeof import("./uploadCaptchaCust").UploadCaptchaCust = null as any;
utilities.lazyLoad(exports, ["UploadCaptchaCust"], () => require("./uploadCaptchaCust"));

export { UploadErrorPageArgs, UploadErrorPageState } from "./uploadErrorPage";
export type UploadErrorPage = import("./uploadErrorPage").UploadErrorPage;
export const UploadErrorPage: typeof import("./uploadErrorPage").UploadErrorPage = null as any;
utilities.lazyLoad(exports, ["UploadErrorPage"], () => require("./uploadErrorPage"));

export { UserAdfsPublishArgs, UserAdfsPublishState } from "./userAdfsPublish";
export type UserAdfsPublish = import("./userAdfsPublish").UserAdfsPublish;
export const UserAdfsPublish: typeof import("./userAdfsPublish").UserAdfsPublish = null as any;
utilities.lazyLoad(exports, ["UserAdfsPublish"], () => require("./userAdfsPublish"));

export { VdomArgs, VdomState } from "./vdom";
export type Vdom = import("./vdom").Vdom;
export const Vdom: typeof import("./vdom").Vdom = null as any;
utilities.lazyLoad(exports, ["Vdom"], () => require("./vdom"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortiadc:index/caCertificateupload:CaCertificateupload":
                return new CaCertificateupload(name, <any>undefined, { urn })
            case "fortiadc:index/certificateCrlupload:CertificateCrlupload":
                return new CertificateCrlupload(name, <any>undefined, { urn })
            case "fortiadc:index/certificateIntmedCaupload:CertificateIntmedCaupload":
                return new CertificateIntmedCaupload(name, <any>undefined, { urn })
            case "fortiadc:index/configSyncList:ConfigSyncList":
                return new ConfigSyncList(name, <any>undefined, { urn })
            case "fortiadc:index/firewallNatSnat:FirewallNatSnat":
                return new FirewallNatSnat(name, <any>undefined, { urn })
            case "fortiadc:index/firewallVip:FirewallVip":
                return new FirewallVip(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceAllowlist:LoadBalanceAllowlist":
                return new LoadBalanceAllowlist(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceAuthPolicy:LoadBalanceAuthPolicy":
                return new LoadBalanceAuthPolicy(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceCaching:LoadBalanceCaching":
                return new LoadBalanceCaching(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceCachingChildDynCacheList:LoadBalanceCachingChildDynCacheList":
                return new LoadBalanceCachingChildDynCacheList(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceCachingChildUriExcludeList:LoadBalanceCachingChildUriExcludeList":
                return new LoadBalanceCachingChildUriExcludeList(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceCaptchaProfile:LoadBalanceCaptchaProfile":
                return new LoadBalanceCaptchaProfile(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceCertificateCaching:LoadBalanceCertificateCaching":
                return new LoadBalanceCertificateCaching(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceClientSslProfile:LoadBalanceClientSslProfile":
                return new LoadBalanceClientSslProfile(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceClonePool:LoadBalanceClonePool":
                return new LoadBalanceClonePool(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceClonePoolChildPoolMember:LoadBalanceClonePoolChildPoolMember":
                return new LoadBalanceClonePoolChildPoolMember(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceCompression:LoadBalanceCompression":
                return new LoadBalanceCompression(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceCompressionChildContentTypes:LoadBalanceCompressionChildContentTypes":
                return new LoadBalanceCompressionChildContentTypes(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceCompressionChildUriList:LoadBalanceCompressionChildUriList":
                return new LoadBalanceCompressionChildUriList(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceContentRewriting:LoadBalanceContentRewriting":
                return new LoadBalanceContentRewriting(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceContentRewritingChildMatchCondition:LoadBalanceContentRewritingChildMatchCondition":
                return new LoadBalanceContentRewritingChildMatchCondition(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceContentRouting:LoadBalanceContentRouting":
                return new LoadBalanceContentRouting(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceContentRoutingChildMatchCondition:LoadBalanceContentRoutingChildMatchCondition":
                return new LoadBalanceContentRoutingChildMatchCondition(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceDecompression:LoadBalanceDecompression":
                return new LoadBalanceDecompression(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceDecompressionChildContentTypes:LoadBalanceDecompressionChildContentTypes":
                return new LoadBalanceDecompressionChildContentTypes(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceDecompressionChildUriList:LoadBalanceDecompressionChildUriList":
                return new LoadBalanceDecompressionChildUriList(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceErrorPage:LoadBalanceErrorPage":
                return new LoadBalanceErrorPage(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceGeoipList:LoadBalanceGeoipList":
                return new LoadBalanceGeoipList(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceHttp2Profile:LoadBalanceHttp2Profile":
                return new LoadBalanceHttp2Profile(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceIppool:LoadBalanceIppool":
                return new LoadBalanceIppool(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceIppoolChildNodeMember:LoadBalanceIppoolChildNodeMember":
                return new LoadBalanceIppoolChildNodeMember(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceL2ExceptionList:LoadBalanceL2ExceptionList":
                return new LoadBalanceL2ExceptionList(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceL2ExceptionListChildMember:LoadBalanceL2ExceptionListChildMember":
                return new LoadBalanceL2ExceptionListChildMember(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceMethod:LoadBalanceMethod":
                return new LoadBalanceMethod(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalancePagespeed:LoadBalancePagespeed":
                return new LoadBalancePagespeed(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalancePagespeedChildPageControl:LoadBalancePagespeedChildPageControl":
                return new LoadBalancePagespeedChildPageControl(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalancePagespeedChildResourceControl:LoadBalancePagespeedChildResourceControl":
                return new LoadBalancePagespeedChildResourceControl(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalancePagespeedProfile:LoadBalancePagespeedProfile":
                return new LoadBalancePagespeedProfile(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalancePersistence:LoadBalancePersistence":
                return new LoadBalancePersistence(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalancePersistenceChildIso8583Bitmap:LoadBalancePersistenceChildIso8583Bitmap":
                return new LoadBalancePersistenceChildIso8583Bitmap(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalancePersistenceChildRadiusAttribute:LoadBalancePersistenceChildRadiusAttribute":
                return new LoadBalancePersistenceChildRadiusAttribute(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalancePool:LoadBalancePool":
                return new LoadBalancePool(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalancePoolChildPoolMember:LoadBalancePoolChildPoolMember":
                return new LoadBalancePoolChildPoolMember(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfile:LoadBalanceProfile":
                return new LoadBalanceProfile(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildClientRequestHeaderErase:LoadBalanceProfileChildClientRequestHeaderErase":
                return new LoadBalanceProfileChildClientRequestHeaderErase(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildClientRequestHeaderInsert:LoadBalanceProfileChildClientRequestHeaderInsert":
                return new LoadBalanceProfileChildClientRequestHeaderInsert(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildClientResponseHeaderErase:LoadBalanceProfileChildClientResponseHeaderErase":
                return new LoadBalanceProfileChildClientResponseHeaderErase(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildClientResponseHeaderInsert:LoadBalanceProfileChildClientResponseHeaderInsert":
                return new LoadBalanceProfileChildClientResponseHeaderInsert(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildMssqlUserPassword:LoadBalanceProfileChildMssqlUserPassword":
                return new LoadBalanceProfileChildMssqlUserPassword(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildMysqlRule:LoadBalanceProfileChildMysqlRule":
                return new LoadBalanceProfileChildMysqlRule(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildMysqlSharding:LoadBalanceProfileChildMysqlSharding":
                return new LoadBalanceProfileChildMysqlSharding(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildMysqlUserPassword:LoadBalanceProfileChildMysqlUserPassword":
                return new LoadBalanceProfileChildMysqlUserPassword(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildServerRequestHeaderErase:LoadBalanceProfileChildServerRequestHeaderErase":
                return new LoadBalanceProfileChildServerRequestHeaderErase(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildServerRequestHeaderInsert:LoadBalanceProfileChildServerRequestHeaderInsert":
                return new LoadBalanceProfileChildServerRequestHeaderInsert(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildServerResponseHeaderErase:LoadBalanceProfileChildServerResponseHeaderErase":
                return new LoadBalanceProfileChildServerResponseHeaderErase(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceProfileChildServerResponseHeaderInsert:LoadBalanceProfileChildServerResponseHeaderInsert":
                return new LoadBalanceProfileChildServerResponseHeaderInsert(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceRealServer:LoadBalanceRealServer":
                return new LoadBalanceRealServer(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceRealServerSslProfile:LoadBalanceRealServerSslProfile":
                return new LoadBalanceRealServerSslProfile(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceSchedulePool:LoadBalanceSchedulePool":
                return new LoadBalanceSchedulePool(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceVirtualServer:LoadBalanceVirtualServer":
                return new LoadBalanceVirtualServer(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceWebCategory:LoadBalanceWebCategory":
                return new LoadBalanceWebCategory(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceWebFilterProfile:LoadBalanceWebFilterProfile":
                return new LoadBalanceWebFilterProfile(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceWebFilterProfileChildCategoryMembers:LoadBalanceWebFilterProfileChildCategoryMembers":
                return new LoadBalanceWebFilterProfileChildCategoryMembers(name, <any>undefined, { urn })
            case "fortiadc:index/loadBalanceWebSubCategory:LoadBalanceWebSubCategory":
                return new LoadBalanceWebSubCategory(name, <any>undefined, { urn })
            case "fortiadc:index/routerAccessList6:RouterAccessList6":
                return new RouterAccessList6(name, <any>undefined, { urn })
            case "fortiadc:index/routerAccessList6ChildRule:RouterAccessList6ChildRule":
                return new RouterAccessList6ChildRule(name, <any>undefined, { urn })
            case "fortiadc:index/routerAccessList:RouterAccessList":
                return new RouterAccessList(name, <any>undefined, { urn })
            case "fortiadc:index/routerAccessListChildRule:RouterAccessListChildRule":
                return new RouterAccessListChildRule(name, <any>undefined, { urn })
            case "fortiadc:index/routerBgp:RouterBgp":
                return new RouterBgp(name, <any>undefined, { urn })
            case "fortiadc:index/routerBgpChildHaRouterIdList:RouterBgpChildHaRouterIdList":
                return new RouterBgpChildHaRouterIdList(name, <any>undefined, { urn })
            case "fortiadc:index/routerBgpChildNeighbor:RouterBgpChildNeighbor":
                return new RouterBgpChildNeighbor(name, <any>undefined, { urn })
            case "fortiadc:index/routerBgpChildNetwork:RouterBgpChildNetwork":
                return new RouterBgpChildNetwork(name, <any>undefined, { urn })
            case "fortiadc:index/routerIsp:RouterIsp":
                return new RouterIsp(name, <any>undefined, { urn })
            case "fortiadc:index/routerMd5Ospf:RouterMd5Ospf":
                return new RouterMd5Ospf(name, <any>undefined, { urn })
            case "fortiadc:index/routerMd5OspfChildMd5Member:RouterMd5OspfChildMd5Member":
                return new RouterMd5OspfChildMd5Member(name, <any>undefined, { urn })
            case "fortiadc:index/routerOspf:RouterOspf":
                return new RouterOspf(name, <any>undefined, { urn })
            case "fortiadc:index/routerOspfChildArea:RouterOspfChildArea":
                return new RouterOspfChildArea(name, <any>undefined, { urn })
            case "fortiadc:index/routerOspfChildHaRouterIdList:RouterOspfChildHaRouterIdList":
                return new RouterOspfChildHaRouterIdList(name, <any>undefined, { urn })
            case "fortiadc:index/routerOspfChildNetwork:RouterOspfChildNetwork":
                return new RouterOspfChildNetwork(name, <any>undefined, { urn })
            case "fortiadc:index/routerOspfChildOspfInterface:RouterOspfChildOspfInterface":
                return new RouterOspfChildOspfInterface(name, <any>undefined, { urn })
            case "fortiadc:index/routerPolicy:RouterPolicy":
                return new RouterPolicy(name, <any>undefined, { urn })
            case "fortiadc:index/routerPrefixList6:RouterPrefixList6":
                return new RouterPrefixList6(name, <any>undefined, { urn })
            case "fortiadc:index/routerPrefixList6ChildRule:RouterPrefixList6ChildRule":
                return new RouterPrefixList6ChildRule(name, <any>undefined, { urn })
            case "fortiadc:index/routerPrefixList:RouterPrefixList":
                return new RouterPrefixList(name, <any>undefined, { urn })
            case "fortiadc:index/routerPrefixListChildRule:RouterPrefixListChildRule":
                return new RouterPrefixListChildRule(name, <any>undefined, { urn })
            case "fortiadc:index/routerStatic:RouterStatic":
                return new RouterStatic(name, <any>undefined, { urn })
            case "fortiadc:index/securityAntivirusProfile:SecurityAntivirusProfile":
                return new SecurityAntivirusProfile(name, <any>undefined, { urn })
            case "fortiadc:index/securityDosDosProtectionProfile:SecurityDosDosProtectionProfile":
                return new SecurityDosDosProtectionProfile(name, <any>undefined, { urn })
            case "fortiadc:index/securityIpsProfile:SecurityIpsProfile":
                return new SecurityIpsProfile(name, <any>undefined, { urn })
            case "fortiadc:index/securityWafProfile:SecurityWafProfile":
                return new SecurityWafProfile(name, <any>undefined, { urn })
            case "fortiadc:index/securityZtnaProfile:SecurityZtnaProfile":
                return new SecurityZtnaProfile(name, <any>undefined, { urn })
            case "fortiadc:index/systemAddress6:SystemAddress6":
                return new SystemAddress6(name, <any>undefined, { urn })
            case "fortiadc:index/systemAddress:SystemAddress":
                return new SystemAddress(name, <any>undefined, { urn })
            case "fortiadc:index/systemAddrgrp6:SystemAddrgrp6":
                return new SystemAddrgrp6(name, <any>undefined, { urn })
            case "fortiadc:index/systemAddrgrp:SystemAddrgrp":
                return new SystemAddrgrp(name, <any>undefined, { urn })
            case "fortiadc:index/systemAutoBackup:SystemAutoBackup":
                return new SystemAutoBackup(name, <any>undefined, { urn })
            case "fortiadc:index/systemAzureLbBackendIp:SystemAzureLbBackendIp":
                return new SystemAzureLbBackendIp(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateCaGroup:SystemCertificateCaGroup":
                return new SystemCertificateCaGroup(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateCaGroupChildGroupMember:SystemCertificateCaGroupChildGroupMember":
                return new SystemCertificateCaGroupChildGroupMember(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateCertificateVerify:SystemCertificateCertificateVerify":
                return new SystemCertificateCertificateVerify(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateCertificateVerifyChildGroupMember:SystemCertificateCertificateVerifyChildGroupMember":
                return new SystemCertificateCertificateVerifyChildGroupMember(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateCrl:SystemCertificateCrl":
                return new SystemCertificateCrl(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateIntermediateCa:SystemCertificateIntermediateCa":
                return new SystemCertificateIntermediateCa(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateIntermediateCaGroup:SystemCertificateIntermediateCaGroup":
                return new SystemCertificateIntermediateCaGroup(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateIntermediateCaGroupChildGroupMember:SystemCertificateIntermediateCaGroupChildGroupMember":
                return new SystemCertificateIntermediateCaGroupChildGroupMember(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateLocal:SystemCertificateLocal":
                return new SystemCertificateLocal(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateLocalCertGroup:SystemCertificateLocalCertGroup":
                return new SystemCertificateLocalCertGroup(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateLocalCertGroupChildGroupMember:SystemCertificateLocalCertGroupChildGroupMember":
                return new SystemCertificateLocalCertGroupChildGroupMember(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateLocalUpload:SystemCertificateLocalUpload":
                return new SystemCertificateLocalUpload(name, <any>undefined, { urn })
            case "fortiadc:index/systemCertificateOcsp:SystemCertificateOcsp":
                return new SystemCertificateOcsp(name, <any>undefined, { urn })
            case "fortiadc:index/systemDns:SystemDns":
                return new SystemDns(name, <any>undefined, { urn })
            case "fortiadc:index/systemDnsVdom:SystemDnsVdom":
                return new SystemDnsVdom(name, <any>undefined, { urn })
            case "fortiadc:index/systemGlobal:SystemGlobal":
                return new SystemGlobal(name, <any>undefined, { urn })
            case "fortiadc:index/systemHa:SystemHa":
                return new SystemHa(name, <any>undefined, { urn })
            case "fortiadc:index/systemHaChildRemoteIpMonitorList:SystemHaChildRemoteIpMonitorList":
                return new SystemHaChildRemoteIpMonitorList(name, <any>undefined, { urn })
            case "fortiadc:index/systemHaMgmtUpdate:SystemHaMgmtUpdate":
                return new SystemHaMgmtUpdate(name, <any>undefined, { urn })
            case "fortiadc:index/systemHealthCheck:SystemHealthCheck":
                return new SystemHealthCheck(name, <any>undefined, { urn })
            case "fortiadc:index/systemHealthCheckScript:SystemHealthCheckScript":
                return new SystemHealthCheckScript(name, <any>undefined, { urn })
            case "fortiadc:index/systemInterface:SystemInterface":
                return new SystemInterface(name, <any>undefined, { urn })
            case "fortiadc:index/systemInterfaceChildHaNodeIpList:SystemInterfaceChildHaNodeIpList":
                return new SystemInterfaceChildHaNodeIpList(name, <any>undefined, { urn })
            case "fortiadc:index/systemInterfaceChildSecondaryIpList:SystemInterfaceChildSecondaryIpList":
                return new SystemInterfaceChildSecondaryIpList(name, <any>undefined, { urn })
            case "fortiadc:index/systemInterfaceChildTrustIpList:SystemInterfaceChildTrustIpList":
                return new SystemInterfaceChildTrustIpList(name, <any>undefined, { urn })
            case "fortiadc:index/systemIspAddr:SystemIspAddr":
                return new SystemIspAddr(name, <any>undefined, { urn })
            case "fortiadc:index/systemIspAddrChildAddress:SystemIspAddrChildAddress":
                return new SystemIspAddrChildAddress(name, <any>undefined, { urn })
            case "fortiadc:index/systemIspProvince:SystemIspProvince":
                return new SystemIspProvince(name, <any>undefined, { urn })
            case "fortiadc:index/systemMailserver:SystemMailserver":
                return new SystemMailserver(name, <any>undefined, { urn })
            case "fortiadc:index/systemOverlayTunnel:SystemOverlayTunnel":
                return new SystemOverlayTunnel(name, <any>undefined, { urn })
            case "fortiadc:index/systemOverlayTunnelChildRemoteHost:SystemOverlayTunnelChildRemoteHost":
                return new SystemOverlayTunnelChildRemoteHost(name, <any>undefined, { urn })
            case "fortiadc:index/systemScheduleGroup:SystemScheduleGroup":
                return new SystemScheduleGroup(name, <any>undefined, { urn })
            case "fortiadc:index/systemScheduleGroupChildScheduleMember:SystemScheduleGroupChildScheduleMember":
                return new SystemScheduleGroupChildScheduleMember(name, <any>undefined, { urn })
            case "fortiadc:index/systemScripting:SystemScripting":
                return new SystemScripting(name, <any>undefined, { urn })
            case "fortiadc:index/systemScriptingUpload:SystemScriptingUpload":
                return new SystemScriptingUpload(name, <any>undefined, { urn })
            case "fortiadc:index/systemSdnConnector:SystemSdnConnector":
                return new SystemSdnConnector(name, <any>undefined, { urn })
            case "fortiadc:index/systemService:SystemService":
                return new SystemService(name, <any>undefined, { urn })
            case "fortiadc:index/systemServicegrp:SystemServicegrp":
                return new SystemServicegrp(name, <any>undefined, { urn })
            case "fortiadc:index/systemStreamScripting:SystemStreamScripting":
                return new SystemStreamScripting(name, <any>undefined, { urn })
            case "fortiadc:index/systemTimeManual:SystemTimeManual":
                return new SystemTimeManual(name, <any>undefined, { urn })
            case "fortiadc:index/systemTrafficGroup:SystemTrafficGroup":
                return new SystemTrafficGroup(name, <any>undefined, { urn })
            case "fortiadc:index/systemVdom:SystemVdom":
                return new SystemVdom(name, <any>undefined, { urn })
            case "fortiadc:index/systemVdomLink:SystemVdomLink":
                return new SystemVdomLink(name, <any>undefined, { urn })
            case "fortiadc:index/uploadCaptchaCust:UploadCaptchaCust":
                return new UploadCaptchaCust(name, <any>undefined, { urn })
            case "fortiadc:index/uploadErrorPage:UploadErrorPage":
                return new UploadErrorPage(name, <any>undefined, { urn })
            case "fortiadc:index/userAdfsPublish:UserAdfsPublish":
                return new UserAdfsPublish(name, <any>undefined, { urn })
            case "fortiadc:index/vdom:Vdom":
                return new Vdom(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortiadc", "index/caCertificateupload", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/certificateCrlupload", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/certificateIntmedCaupload", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/configSyncList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/firewallNatSnat", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/firewallVip", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceAllowlist", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceAuthPolicy", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceCaching", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceCachingChildDynCacheList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceCachingChildUriExcludeList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceCaptchaProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceCertificateCaching", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceClientSslProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceClonePool", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceClonePoolChildPoolMember", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceCompression", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceCompressionChildContentTypes", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceCompressionChildUriList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceContentRewriting", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceContentRewritingChildMatchCondition", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceContentRouting", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceContentRoutingChildMatchCondition", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceDecompression", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceDecompressionChildContentTypes", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceDecompressionChildUriList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceErrorPage", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceGeoipList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceHttp2Profile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceIppool", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceIppoolChildNodeMember", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceL2ExceptionList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceL2ExceptionListChildMember", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceMethod", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalancePagespeed", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalancePagespeedChildPageControl", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalancePagespeedChildResourceControl", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalancePagespeedProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalancePersistence", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalancePersistenceChildIso8583Bitmap", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalancePersistenceChildRadiusAttribute", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalancePool", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalancePoolChildPoolMember", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildClientRequestHeaderErase", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildClientRequestHeaderInsert", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildClientResponseHeaderErase", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildClientResponseHeaderInsert", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildMssqlUserPassword", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildMysqlRule", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildMysqlSharding", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildMysqlUserPassword", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildServerRequestHeaderErase", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildServerRequestHeaderInsert", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildServerResponseHeaderErase", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceProfileChildServerResponseHeaderInsert", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceRealServer", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceRealServerSslProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceSchedulePool", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceVirtualServer", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceWebCategory", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceWebFilterProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceWebFilterProfileChildCategoryMembers", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/loadBalanceWebSubCategory", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerAccessList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerAccessList6", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerAccessList6ChildRule", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerAccessListChildRule", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerBgp", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerBgpChildHaRouterIdList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerBgpChildNeighbor", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerBgpChildNetwork", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerIsp", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerMd5Ospf", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerMd5OspfChildMd5Member", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerOspf", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerOspfChildArea", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerOspfChildHaRouterIdList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerOspfChildNetwork", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerOspfChildOspfInterface", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerPolicy", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerPrefixList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerPrefixList6", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerPrefixList6ChildRule", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerPrefixListChildRule", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/routerStatic", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/securityAntivirusProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/securityDosDosProtectionProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/securityIpsProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/securityWafProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/securityZtnaProfile", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemAddress", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemAddress6", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemAddrgrp", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemAddrgrp6", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemAutoBackup", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemAzureLbBackendIp", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateCaGroup", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateCaGroupChildGroupMember", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateCertificateVerify", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateCertificateVerifyChildGroupMember", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateCrl", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateIntermediateCa", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateIntermediateCaGroup", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateIntermediateCaGroupChildGroupMember", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateLocal", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateLocalCertGroup", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateLocalCertGroupChildGroupMember", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateLocalUpload", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemCertificateOcsp", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemDns", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemDnsVdom", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemGlobal", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemHa", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemHaChildRemoteIpMonitorList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemHaMgmtUpdate", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemHealthCheck", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemHealthCheckScript", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemInterface", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemInterfaceChildHaNodeIpList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemInterfaceChildSecondaryIpList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemInterfaceChildTrustIpList", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemIspAddr", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemIspAddrChildAddress", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemIspProvince", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemMailserver", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemOverlayTunnel", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemOverlayTunnelChildRemoteHost", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemScheduleGroup", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemScheduleGroupChildScheduleMember", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemScripting", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemScriptingUpload", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemSdnConnector", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemService", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemServicegrp", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemStreamScripting", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemTimeManual", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemTrafficGroup", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemVdom", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/systemVdomLink", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/uploadCaptchaCust", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/uploadErrorPage", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/userAdfsPublish", _module)
pulumi.runtime.registerResourceModule("fortiadc", "index/vdom", _module)
pulumi.runtime.registerResourcePackage("fortiadc", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fortiadc") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
