// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSystemHealthCheck(args: GetSystemHealthCheckArgs, opts?: pulumi.InvokeOptions): Promise<GetSystemHealthCheckResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortiadc:index/getSystemHealthCheck:getSystemHealthCheck", {
        "id": args.id,
        "mkey": args.mkey,
        "vdom": args.vdom,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSystemHealthCheck.
 */
export interface GetSystemHealthCheckArgs {
    id?: string;
    mkey: string;
    vdom?: string;
}

/**
 * A collection of values returned by getSystemHealthCheck.
 */
export interface GetSystemHealthCheckResult {
    readonly acctAppid: string;
    readonly addrType: string;
    readonly agentType: string;
    readonly allowSslVersion: string;
    readonly attribute: string;
    readonly authAppid: string;
    readonly basedn: string;
    readonly binddn: string;
    readonly column: string;
    readonly community: string;
    readonly compareType: string;
    readonly connectString: string;
    readonly connectType: string;
    readonly counterValue: string;
    readonly cpu: string;
    readonly cpuWeight: string;
    readonly database: string;
    readonly destAddr: string;
    readonly destAddr6: string;
    readonly destAddrType: string;
    readonly disk: string;
    readonly diskWeight: string;
    readonly domainName: string;
    readonly downRetry: string;
    readonly file: string;
    readonly filter: string;
    readonly folder: string;
    readonly hostAddr: string;
    readonly hostAddr6: string;
    readonly hostIp6Addr: string;
    readonly hostIpAddr: string;
    readonly hostname: string;
    readonly httpConnect: string;
    readonly httpExtraString: string;
    readonly httpVersion: string;
    readonly id: string;
    readonly interval: string;
    readonly localCert: string;
    readonly matchType: string;
    readonly mem: string;
    readonly memWeight: string;
    readonly methodType: string;
    readonly mkey: string;
    readonly mssqlColumn: string;
    readonly mssqlReceiveString: string;
    readonly mssqlRow: string;
    readonly mssqlSendString: string;
    readonly mysqlServerType: string;
    readonly nasIp: string;
    readonly oid: string;
    readonly oracleReceiveString: string;
    readonly oracleSendString: string;
    readonly originHost: string;
    readonly originRealm: string;
    readonly passive: string;
    readonly password: string;
    readonly port: string;
    readonly productName: string;
    readonly pwdType: string;
    readonly radiusReject: string;
    readonly receiveString: string;
    readonly remoteHost: string;
    readonly remotePassword: string;
    readonly remotePort: string;
    readonly remoteUsername: string;
    readonly row: string;
    readonly rtspDescribeUrl: string;
    readonly rtspMethodType: string;
    readonly script: string;
    readonly secretKey: string;
    readonly sendString: string;
    readonly serviceName: string;
    readonly sid: string;
    readonly sipRequestType: string;
    readonly sslCiphers: string;
    readonly statusCode: string;
    readonly stringValue: string;
    readonly timeout: string;
    readonly type: string;
    readonly upRetry: string;
    readonly username: string;
    readonly valueType: string;
    readonly vdom?: string;
    readonly vendorId: string;
    readonly version: string;
}
export function getSystemHealthCheckOutput(args: GetSystemHealthCheckOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSystemHealthCheckResult> {
    return pulumi.output(args).apply((a: any) => getSystemHealthCheck(a, opts))
}

/**
 * A collection of arguments for invoking getSystemHealthCheck.
 */
export interface GetSystemHealthCheckOutputArgs {
    id?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}
