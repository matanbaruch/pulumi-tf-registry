// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadBalanceRealServer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalanceRealServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalanceRealServerState, opts?: pulumi.CustomResourceOptions): LoadBalanceRealServer {
        return new LoadBalanceRealServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiadc:index/loadBalanceRealServer:LoadBalanceRealServer';

    /**
     * Returns true if the given object is an instance of LoadBalanceRealServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalanceRealServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalanceRealServer.__pulumiType;
    }

    public readonly address!: pulumi.Output<string>;
    public readonly address6!: pulumi.Output<string>;
    public readonly fqdn!: pulumi.Output<string>;
    public readonly instance!: pulumi.Output<string>;
    public readonly mkey!: pulumi.Output<string>;
    public readonly sdnAddrPrivate!: pulumi.Output<string>;
    public readonly sdnConnector!: pulumi.Output<string>;
    public readonly serverType!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string | undefined>;

    /**
     * Create a LoadBalanceRealServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalanceRealServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalanceRealServerArgs | LoadBalanceRealServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalanceRealServerState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["address6"] = state ? state.address6 : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["mkey"] = state ? state.mkey : undefined;
            resourceInputs["sdnAddrPrivate"] = state ? state.sdnAddrPrivate : undefined;
            resourceInputs["sdnConnector"] = state ? state.sdnConnector : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
        } else {
            const args = argsOrState as LoadBalanceRealServerArgs | undefined;
            if ((!args || args.mkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mkey'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["address6"] = args ? args.address6 : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["mkey"] = args ? args.mkey : undefined;
            resourceInputs["sdnAddrPrivate"] = args ? args.sdnAddrPrivate : undefined;
            resourceInputs["sdnConnector"] = args ? args.sdnConnector : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalanceRealServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalanceRealServer resources.
 */
export interface LoadBalanceRealServerState {
    address?: pulumi.Input<string>;
    address6?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    mkey?: pulumi.Input<string>;
    sdnAddrPrivate?: pulumi.Input<string>;
    sdnConnector?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalanceRealServer resource.
 */
export interface LoadBalanceRealServerArgs {
    address?: pulumi.Input<string>;
    address6?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    sdnAddrPrivate?: pulumi.Input<string>;
    sdnConnector?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}
