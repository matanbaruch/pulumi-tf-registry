// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLoadBalanceCompression(args: GetLoadBalanceCompressionArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadBalanceCompressionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortiadc:index/getLoadBalanceCompression:getLoadBalanceCompression", {
        "id": args.id,
        "mkey": args.mkey,
        "vdom": args.vdom,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoadBalanceCompression.
 */
export interface GetLoadBalanceCompressionArgs {
    id?: string;
    mkey: string;
    vdom?: string;
}

/**
 * A collection of values returned by getLoadBalanceCompression.
 */
export interface GetLoadBalanceCompressionResult {
    readonly cpuLimit: string;
    readonly gzipMemoryLevel: string;
    readonly gzipWindowSize: string;
    readonly id: string;
    readonly level: string;
    readonly maxCpuUsage: string;
    readonly method: string;
    readonly minContentLength: string;
    readonly mkey: string;
    readonly uriListType: string;
    readonly vdom?: string;
}
export function getLoadBalanceCompressionOutput(args: GetLoadBalanceCompressionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadBalanceCompressionResult> {
    return pulumi.output(args).apply((a: any) => getLoadBalanceCompression(a, opts))
}

/**
 * A collection of arguments for invoking getLoadBalanceCompression.
 */
export interface GetLoadBalanceCompressionOutputArgs {
    id?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}
