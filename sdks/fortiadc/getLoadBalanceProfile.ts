// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLoadBalanceProfile(args: GetLoadBalanceProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadBalanceProfileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortiadc:index/getLoadBalanceProfile:getLoadBalanceProfile", {
        "id": args.id,
        "mkey": args.mkey,
        "vdom": args.vdom,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoadBalanceProfile.
 */
export interface GetLoadBalanceProfileArgs {
    id?: string;
    mkey: string;
    vdom?: string;
}

/**
 * A collection of values returned by getLoadBalanceProfile.
 */
export interface GetLoadBalanceProfileResult {
    readonly allowSslVersions: string;
    readonly certVerify: string;
    readonly clientAddress: string;
    readonly clientKeepalive: string;
    readonly clientProtocol: string;
    readonly clientSniRequired: string;
    readonly clientSsl: string;
    readonly clientTimeout: string;
    readonly compression: string;
    readonly connectTimeout: string;
    readonly customizedSslCiphers: string;
    readonly customizedSslCiphersFlag: string;
    readonly decompression: string;
    readonly deployMode: string;
    readonly dnsAuthenticateFlag: string;
    readonly dnsCacheAgeoutTime: string;
    readonly dnsCacheEntrySize: string;
    readonly dnsCacheFlag: string;
    readonly dnsCacheResponseType: string;
    readonly dnsCacheSize: string;
    readonly dnsMalformQueryAction: string;
    readonly dnsMaxQueryLength: string;
    readonly dynamicAuth: string;
    readonly dynamicAuthPort: string;
    readonly failedClientStr: string;
    readonly failedClientType: string;
    readonly failedServerStr: string;
    readonly failedServerType: string;
    readonly forwardClientCertificate: string;
    readonly forwardClientCertificateHeader: string;
    readonly geoipList: string;
    readonly geoipRedirect: string;
    readonly http2Profile: string;
    readonly httpKeepaliveTimeout: string;
    readonly httpMode: string;
    readonly httpRequestTimeout: string;
    readonly httpSendTimeout: string;
    readonly httpXForwardedFor: string;
    readonly httpXForwardedForHeader: string;
    readonly id: string;
    readonly idleTime: string;
    readonly idleTimeout: string;
    readonly insertClientIp: string;
    readonly intermediateCaGroup: string;
    readonly ipReputation: string;
    readonly ipReputationRedirect: string;
    readonly lengthIndicatorShift: string;
    readonly lengthIndicatorSize: string;
    readonly lengthIndicatorType: string;
    readonly localCert: string;
    readonly localCertGroup: string;
    readonly maxHeaderSize: string;
    readonly maxHttpHeaders: string;
    readonly mediaAddress: string;
    readonly mkey: string;
    readonly msgEncodeType: string;
    readonly mysqlMode: string;
    readonly newSslCiphersLong: string;
    readonly optHeaderLength: string;
    readonly optTrailerHex: string;
    readonly originHost: string;
    readonly originRealm: string;
    readonly productName: string;
    readonly queueTimeout: string;
    readonly ramCaching: string;
    readonly responseHalfClosedRequest: string;
    readonly securityMode: string;
    readonly serverAge: string;
    readonly serverClosePropagation: string;
    readonly serverKeepalive: string;
    readonly serverKeepaliveTimeout: string;
    readonly serverMaxSize: string;
    readonly serverProtocol: string;
    readonly serverTimeout: string;
    readonly sipDlgTimeout: string;
    readonly sipMaxSize: string;
    readonly smtpDisableCommand: string;
    readonly smtpDisableCommandStatus: string;
    readonly smtpDomainName: string;
    readonly sourcePort: string;
    readonly ssl: string;
    readonly sslAlgorithm: string;
    readonly sslCiphers: string;
    readonly sslProxy: string;
    readonly starttlsActiveMode: string;
    readonly stateless: string;
    readonly timeoutIpSession: string;
    readonly timeoutRadiusSession: string;
    readonly timeoutTcpSession: string;
    readonly timeoutTcpSessionAfterFin: string;
    readonly timeoutUdpSession: string;
    readonly tuneBufsize: string;
    readonly type: string;
    readonly useTlsTickets: string;
    readonly vdom?: string;
    readonly vendorId: string;
    readonly whitelist: string;
}
export function getLoadBalanceProfileOutput(args: GetLoadBalanceProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadBalanceProfileResult> {
    return pulumi.output(args).apply((a: any) => getLoadBalanceProfile(a, opts))
}

/**
 * A collection of arguments for invoking getLoadBalanceProfile.
 */
export interface GetLoadBalanceProfileOutputArgs {
    id?: pulumi.Input<string>;
    mkey: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}
