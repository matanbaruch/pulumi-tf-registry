// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrgNacrule extends pulumi.CustomResource {
    /**
     * Get an existing OrgNacrule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgNacruleState, opts?: pulumi.CustomResourceOptions): OrgNacrule {
        return new OrgNacrule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mist:index/orgNacrule:OrgNacrule';

    /**
     * Returns true if the given object is an instance of OrgNacrule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgNacrule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgNacrule.__pulumiType;
    }

    /**
     * enum: `allow`, `block`
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * all optional, this goes into Access-Accept
     */
    public readonly applyTags!: pulumi.Output<string[]>;
    /**
     * enabled or not
     */
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly matching!: pulumi.Output<outputs.OrgNacruleMatching | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notMatching!: pulumi.Output<outputs.OrgNacruleNotMatching | undefined>;
    /**
     * the order of the rule, lower value implies higher priority
     */
    public readonly order!: pulumi.Output<number>;
    public readonly orgId!: pulumi.Output<string>;

    /**
     * Create a OrgNacrule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgNacruleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgNacruleArgs | OrgNacruleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgNacruleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["applyTags"] = state ? state.applyTags : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["matching"] = state ? state.matching : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notMatching"] = state ? state.notMatching : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
        } else {
            const args = argsOrState as OrgNacruleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.order === undefined) && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["applyTags"] = args ? args.applyTags : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["matching"] = args ? args.matching : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notMatching"] = args ? args.notMatching : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgNacrule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrgNacrule resources.
 */
export interface OrgNacruleState {
    /**
     * enum: `allow`, `block`
     */
    action?: pulumi.Input<string>;
    /**
     * all optional, this goes into Access-Accept
     */
    applyTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    matching?: pulumi.Input<inputs.OrgNacruleMatching>;
    name?: pulumi.Input<string>;
    notMatching?: pulumi.Input<inputs.OrgNacruleNotMatching>;
    /**
     * the order of the rule, lower value implies higher priority
     */
    order?: pulumi.Input<number>;
    orgId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgNacrule resource.
 */
export interface OrgNacruleArgs {
    /**
     * enum: `allow`, `block`
     */
    action: pulumi.Input<string>;
    /**
     * all optional, this goes into Access-Accept
     */
    applyTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    matching?: pulumi.Input<inputs.OrgNacruleMatching>;
    name?: pulumi.Input<string>;
    notMatching?: pulumi.Input<inputs.OrgNacruleNotMatching>;
    /**
     * the order of the rule, lower value implies higher priority
     */
    order: pulumi.Input<number>;
    orgId: pulumi.Input<string>;
}
