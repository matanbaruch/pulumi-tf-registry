// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DeviceGateway extends pulumi.CustomResource {
    /**
     * Get an existing DeviceGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceGatewayState, opts?: pulumi.CustomResourceOptions): DeviceGateway {
        return new DeviceGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mist:index/deviceGateway:DeviceGateway';

    /**
     * Returns true if the given object is an instance of DeviceGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceGateway.__pulumiType;
    }

    /**
     * additional CLI commands to append to the generated Junos config **Note**: no check is done
     */
    public readonly additionalConfigCmds!: pulumi.Output<string[] | undefined>;
    public readonly bgpConfig!: pulumi.Output<{[key: string]: outputs.DeviceGatewayBgpConfig} | undefined>;
    public readonly deviceId!: pulumi.Output<string>;
    public /*out*/ readonly deviceprofileId!: pulumi.Output<string>;
    public readonly dhcpdConfig!: pulumi.Output<outputs.DeviceGatewayDhcpdConfig | undefined>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    public readonly dnsServers!: pulumi.Output<string[] | undefined>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    public readonly dnsSuffixes!: pulumi.Output<string[] | undefined>;
    /**
     * Property key is the destination CIDR (e.g. "10.0.0.0/8")
     */
    public readonly extraRoutes!: pulumi.Output<{[key: string]: outputs.DeviceGatewayExtraRoutes} | undefined>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
     */
    public readonly extraRoutes6!: pulumi.Output<{[key: string]: outputs.DeviceGatewayExtraRoutes6} | undefined>;
    /**
     * Property key is the profile name
     */
    public readonly idpProfiles!: pulumi.Output<{[key: string]: outputs.DeviceGatewayIdpProfiles} | undefined>;
    public /*out*/ readonly image1Url!: pulumi.Output<string>;
    public /*out*/ readonly image2Url!: pulumi.Output<string>;
    public /*out*/ readonly image3Url!: pulumi.Output<string>;
    /**
     * Property key is the network name
     */
    public readonly ipConfigs!: pulumi.Output<{[key: string]: outputs.DeviceGatewayIpConfigs} | undefined>;
    /**
     * device MAC address
     */
    public /*out*/ readonly mac!: pulumi.Output<string>;
    public readonly managed!: pulumi.Output<boolean | undefined>;
    /**
     * map where the device belongs to
     */
    public readonly mapId!: pulumi.Output<string | undefined>;
    /**
     * device Model
     */
    public /*out*/ readonly model!: pulumi.Output<string>;
    public readonly mspId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.DeviceGatewayNetwork[] | undefined>;
    public readonly notes!: pulumi.Output<string | undefined>;
    public readonly ntpServers!: pulumi.Output<string[] | undefined>;
    /**
     * out-of-band (vme/em0/fxp0) IP config
     */
    public readonly oobIpConfig!: pulumi.Output<outputs.DeviceGatewayOobIpConfig | undefined>;
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * Property key is the path name
     */
    public readonly pathPreferences!: pulumi.Output<{[key: string]: outputs.DeviceGatewayPathPreferences} | undefined>;
    /**
     * Property key is the port name or range (e.g. "ge-0/0/0-10")
     */
    public readonly portConfig!: pulumi.Output<{[key: string]: outputs.DeviceGatewayPortConfig} | undefined>;
    public readonly portMirroring!: pulumi.Output<outputs.DeviceGatewayPortMirroring | undefined>;
    /**
     * auto assigned if not set
     */
    public readonly routerId!: pulumi.Output<string | undefined>;
    /**
     * Property key is the routing policy name
     */
    public readonly routingPolicies!: pulumi.Output<{[key: string]: outputs.DeviceGatewayRoutingPolicies} | undefined>;
    /**
     * device Serial
     */
    public /*out*/ readonly serial!: pulumi.Output<string>;
    public readonly servicePolicies!: pulumi.Output<outputs.DeviceGatewayServicePolicy[] | undefined>;
    public readonly siteId!: pulumi.Output<string>;
    /**
     * Property key is the tunnel name
     */
    public readonly tunnelConfigs!: pulumi.Output<{[key: string]: outputs.DeviceGatewayTunnelConfigs} | undefined>;
    public readonly tunnelProviderOptions!: pulumi.Output<outputs.DeviceGatewayTunnelProviderOptions | undefined>;
    /**
     * Device Type. enum: `gateway`
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    public readonly vars!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly vrfConfig!: pulumi.Output<outputs.DeviceGatewayVrfConfig | undefined>;
    /**
     * Property key is the network name
     */
    public readonly vrfInstances!: pulumi.Output<{[key: string]: outputs.DeviceGatewayVrfInstances} | undefined>;
    /**
     * x in pixel
     */
    public readonly x!: pulumi.Output<number | undefined>;
    /**
     * y in pixel
     */
    public readonly y!: pulumi.Output<number | undefined>;

    /**
     * Create a DeviceGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceGatewayArgs | DeviceGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceGatewayState | undefined;
            resourceInputs["additionalConfigCmds"] = state ? state.additionalConfigCmds : undefined;
            resourceInputs["bgpConfig"] = state ? state.bgpConfig : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["deviceprofileId"] = state ? state.deviceprofileId : undefined;
            resourceInputs["dhcpdConfig"] = state ? state.dhcpdConfig : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["dnsSuffixes"] = state ? state.dnsSuffixes : undefined;
            resourceInputs["extraRoutes"] = state ? state.extraRoutes : undefined;
            resourceInputs["extraRoutes6"] = state ? state.extraRoutes6 : undefined;
            resourceInputs["idpProfiles"] = state ? state.idpProfiles : undefined;
            resourceInputs["image1Url"] = state ? state.image1Url : undefined;
            resourceInputs["image2Url"] = state ? state.image2Url : undefined;
            resourceInputs["image3Url"] = state ? state.image3Url : undefined;
            resourceInputs["ipConfigs"] = state ? state.ipConfigs : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["mapId"] = state ? state.mapId : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["mspId"] = state ? state.mspId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["ntpServers"] = state ? state.ntpServers : undefined;
            resourceInputs["oobIpConfig"] = state ? state.oobIpConfig : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["pathPreferences"] = state ? state.pathPreferences : undefined;
            resourceInputs["portConfig"] = state ? state.portConfig : undefined;
            resourceInputs["portMirroring"] = state ? state.portMirroring : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["routingPolicies"] = state ? state.routingPolicies : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["servicePolicies"] = state ? state.servicePolicies : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["tunnelConfigs"] = state ? state.tunnelConfigs : undefined;
            resourceInputs["tunnelProviderOptions"] = state ? state.tunnelProviderOptions : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vars"] = state ? state.vars : undefined;
            resourceInputs["vrfConfig"] = state ? state.vrfConfig : undefined;
            resourceInputs["vrfInstances"] = state ? state.vrfInstances : undefined;
            resourceInputs["x"] = state ? state.x : undefined;
            resourceInputs["y"] = state ? state.y : undefined;
        } else {
            const args = argsOrState as DeviceGatewayArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["additionalConfigCmds"] = args ? args.additionalConfigCmds : undefined;
            resourceInputs["bgpConfig"] = args ? args.bgpConfig : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["dhcpdConfig"] = args ? args.dhcpdConfig : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["dnsSuffixes"] = args ? args.dnsSuffixes : undefined;
            resourceInputs["extraRoutes"] = args ? args.extraRoutes : undefined;
            resourceInputs["extraRoutes6"] = args ? args.extraRoutes6 : undefined;
            resourceInputs["idpProfiles"] = args ? args.idpProfiles : undefined;
            resourceInputs["ipConfigs"] = args ? args.ipConfigs : undefined;
            resourceInputs["managed"] = args ? args.managed : undefined;
            resourceInputs["mapId"] = args ? args.mapId : undefined;
            resourceInputs["mspId"] = args ? args.mspId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["ntpServers"] = args ? args.ntpServers : undefined;
            resourceInputs["oobIpConfig"] = args ? args.oobIpConfig : undefined;
            resourceInputs["pathPreferences"] = args ? args.pathPreferences : undefined;
            resourceInputs["portConfig"] = args ? args.portConfig : undefined;
            resourceInputs["portMirroring"] = args ? args.portMirroring : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["routingPolicies"] = args ? args.routingPolicies : undefined;
            resourceInputs["servicePolicies"] = args ? args.servicePolicies : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["tunnelConfigs"] = args ? args.tunnelConfigs : undefined;
            resourceInputs["tunnelProviderOptions"] = args ? args.tunnelProviderOptions : undefined;
            resourceInputs["vars"] = args ? args.vars : undefined;
            resourceInputs["vrfConfig"] = args ? args.vrfConfig : undefined;
            resourceInputs["vrfInstances"] = args ? args.vrfInstances : undefined;
            resourceInputs["x"] = args ? args.x : undefined;
            resourceInputs["y"] = args ? args.y : undefined;
            resourceInputs["deviceprofileId"] = undefined /*out*/;
            resourceInputs["image1Url"] = undefined /*out*/;
            resourceInputs["image2Url"] = undefined /*out*/;
            resourceInputs["image3Url"] = undefined /*out*/;
            resourceInputs["mac"] = undefined /*out*/;
            resourceInputs["model"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeviceGateway resources.
 */
export interface DeviceGatewayState {
    /**
     * additional CLI commands to append to the generated Junos config **Note**: no check is done
     */
    additionalConfigCmds?: pulumi.Input<pulumi.Input<string>[]>;
    bgpConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayBgpConfig>}>;
    deviceId?: pulumi.Input<string>;
    deviceprofileId?: pulumi.Input<string>;
    dhcpdConfig?: pulumi.Input<inputs.DeviceGatewayDhcpdConfig>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    dnsSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property key is the destination CIDR (e.g. "10.0.0.0/8")
     */
    extraRoutes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayExtraRoutes>}>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
     */
    extraRoutes6?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayExtraRoutes6>}>;
    /**
     * Property key is the profile name
     */
    idpProfiles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayIdpProfiles>}>;
    image1Url?: pulumi.Input<string>;
    image2Url?: pulumi.Input<string>;
    image3Url?: pulumi.Input<string>;
    /**
     * Property key is the network name
     */
    ipConfigs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayIpConfigs>}>;
    /**
     * device MAC address
     */
    mac?: pulumi.Input<string>;
    managed?: pulumi.Input<boolean>;
    /**
     * map where the device belongs to
     */
    mapId?: pulumi.Input<string>;
    /**
     * device Model
     */
    model?: pulumi.Input<string>;
    mspId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.DeviceGatewayNetwork>[]>;
    notes?: pulumi.Input<string>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * out-of-band (vme/em0/fxp0) IP config
     */
    oobIpConfig?: pulumi.Input<inputs.DeviceGatewayOobIpConfig>;
    orgId?: pulumi.Input<string>;
    /**
     * Property key is the path name
     */
    pathPreferences?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayPathPreferences>}>;
    /**
     * Property key is the port name or range (e.g. "ge-0/0/0-10")
     */
    portConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayPortConfig>}>;
    portMirroring?: pulumi.Input<inputs.DeviceGatewayPortMirroring>;
    /**
     * auto assigned if not set
     */
    routerId?: pulumi.Input<string>;
    /**
     * Property key is the routing policy name
     */
    routingPolicies?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayRoutingPolicies>}>;
    /**
     * device Serial
     */
    serial?: pulumi.Input<string>;
    servicePolicies?: pulumi.Input<pulumi.Input<inputs.DeviceGatewayServicePolicy>[]>;
    siteId?: pulumi.Input<string>;
    /**
     * Property key is the tunnel name
     */
    tunnelConfigs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayTunnelConfigs>}>;
    tunnelProviderOptions?: pulumi.Input<inputs.DeviceGatewayTunnelProviderOptions>;
    /**
     * Device Type. enum: `gateway`
     */
    type?: pulumi.Input<string>;
    /**
     * a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vrfConfig?: pulumi.Input<inputs.DeviceGatewayVrfConfig>;
    /**
     * Property key is the network name
     */
    vrfInstances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayVrfInstances>}>;
    /**
     * x in pixel
     */
    x?: pulumi.Input<number>;
    /**
     * y in pixel
     */
    y?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DeviceGateway resource.
 */
export interface DeviceGatewayArgs {
    /**
     * additional CLI commands to append to the generated Junos config **Note**: no check is done
     */
    additionalConfigCmds?: pulumi.Input<pulumi.Input<string>[]>;
    bgpConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayBgpConfig>}>;
    deviceId: pulumi.Input<string>;
    dhcpdConfig?: pulumi.Input<inputs.DeviceGatewayDhcpdConfig>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    dnsSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property key is the destination CIDR (e.g. "10.0.0.0/8")
     */
    extraRoutes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayExtraRoutes>}>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
     */
    extraRoutes6?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayExtraRoutes6>}>;
    /**
     * Property key is the profile name
     */
    idpProfiles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayIdpProfiles>}>;
    /**
     * Property key is the network name
     */
    ipConfigs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayIpConfigs>}>;
    managed?: pulumi.Input<boolean>;
    /**
     * map where the device belongs to
     */
    mapId?: pulumi.Input<string>;
    mspId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.DeviceGatewayNetwork>[]>;
    notes?: pulumi.Input<string>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * out-of-band (vme/em0/fxp0) IP config
     */
    oobIpConfig?: pulumi.Input<inputs.DeviceGatewayOobIpConfig>;
    /**
     * Property key is the path name
     */
    pathPreferences?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayPathPreferences>}>;
    /**
     * Property key is the port name or range (e.g. "ge-0/0/0-10")
     */
    portConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayPortConfig>}>;
    portMirroring?: pulumi.Input<inputs.DeviceGatewayPortMirroring>;
    /**
     * auto assigned if not set
     */
    routerId?: pulumi.Input<string>;
    /**
     * Property key is the routing policy name
     */
    routingPolicies?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayRoutingPolicies>}>;
    servicePolicies?: pulumi.Input<pulumi.Input<inputs.DeviceGatewayServicePolicy>[]>;
    siteId: pulumi.Input<string>;
    /**
     * Property key is the tunnel name
     */
    tunnelConfigs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayTunnelConfigs>}>;
    tunnelProviderOptions?: pulumi.Input<inputs.DeviceGatewayTunnelProviderOptions>;
    /**
     * a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vrfConfig?: pulumi.Input<inputs.DeviceGatewayVrfConfig>;
    /**
     * Property key is the network name
     */
    vrfInstances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DeviceGatewayVrfInstances>}>;
    /**
     * x in pixel
     */
    x?: pulumi.Input<number>;
    /**
     * y in pixel
     */
    y?: pulumi.Input<number>;
}
