// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOrgDeviceprofilesGateway(args: GetOrgDeviceprofilesGatewayArgs, opts?: pulumi.InvokeOptions): Promise<GetOrgDeviceprofilesGatewayResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mist:index/getOrgDeviceprofilesGateway:getOrgDeviceprofilesGateway", {
        "orgId": args.orgId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOrgDeviceprofilesGateway.
 */
export interface GetOrgDeviceprofilesGatewayArgs {
    orgId: string;
}

/**
 * A collection of values returned by getOrgDeviceprofilesGateway.
 */
export interface GetOrgDeviceprofilesGatewayResult {
    readonly deviceprofiles: outputs.GetOrgDeviceprofilesGatewayDeviceprofile[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly orgId: string;
}
export function getOrgDeviceprofilesGatewayOutput(args: GetOrgDeviceprofilesGatewayOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOrgDeviceprofilesGatewayResult> {
    return pulumi.output(args).apply((a: any) => getOrgDeviceprofilesGateway(a, opts))
}

/**
 * A collection of arguments for invoking getOrgDeviceprofilesGateway.
 */
export interface GetOrgDeviceprofilesGatewayOutputArgs {
    orgId: pulumi.Input<string>;
}
