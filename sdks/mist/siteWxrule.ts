// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SiteWxrule extends pulumi.CustomResource {
    /**
     * Get an existing SiteWxrule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteWxruleState, opts?: pulumi.CustomResourceOptions): SiteWxrule {
        return new SiteWxrule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mist:index/siteWxrule:SiteWxrule';

    /**
     * Returns true if the given object is an instance of SiteWxrule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteWxrule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteWxrule.__pulumiType;
    }

    /**
     * type of action, allow / block. enum: `allow`, `block`
     */
    public readonly action!: pulumi.Output<string>;
    public readonly applyTags!: pulumi.Output<string[] | undefined>;
    /**
     * blocked apps (always blocking, ignoring action), the key of Get Application List
     */
    public readonly blockedApps!: pulumi.Output<string[] | undefined>;
    /**
     * tag list to indicate these tags are allowed access
     */
    public readonly dstAllowWxtags!: pulumi.Output<string[] | undefined>;
    /**
     * tag list to indicate these tags are blocked access
     */
    public readonly dstDenyWxtags!: pulumi.Output<string[] | undefined>;
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * the order how rules would be looked up, > 0 and bigger order got matched first, -1 means LAST, uniqueness not checked
     */
    public readonly order!: pulumi.Output<number>;
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    public readonly siteId!: pulumi.Output<string>;
    /**
     * tag list to determine if this rule would match
     */
    public readonly srcWxtags!: pulumi.Output<string[]>;
    /**
     * Only for Org Level WxRule
     */
    public readonly templateId!: pulumi.Output<string | undefined>;

    /**
     * Create a SiteWxrule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteWxruleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteWxruleArgs | SiteWxruleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteWxruleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["applyTags"] = state ? state.applyTags : undefined;
            resourceInputs["blockedApps"] = state ? state.blockedApps : undefined;
            resourceInputs["dstAllowWxtags"] = state ? state.dstAllowWxtags : undefined;
            resourceInputs["dstDenyWxtags"] = state ? state.dstDenyWxtags : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["srcWxtags"] = state ? state.srcWxtags : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
        } else {
            const args = argsOrState as SiteWxruleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.order === undefined) && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.srcWxtags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcWxtags'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["applyTags"] = args ? args.applyTags : undefined;
            resourceInputs["blockedApps"] = args ? args.blockedApps : undefined;
            resourceInputs["dstAllowWxtags"] = args ? args.dstAllowWxtags : undefined;
            resourceInputs["dstDenyWxtags"] = args ? args.dstDenyWxtags : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["srcWxtags"] = args ? args.srcWxtags : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["orgId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteWxrule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteWxrule resources.
 */
export interface SiteWxruleState {
    /**
     * type of action, allow / block. enum: `allow`, `block`
     */
    action?: pulumi.Input<string>;
    applyTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * blocked apps (always blocking, ignoring action), the key of Get Application List
     */
    blockedApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tag list to indicate these tags are allowed access
     */
    dstAllowWxtags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tag list to indicate these tags are blocked access
     */
    dstDenyWxtags?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    /**
     * the order how rules would be looked up, > 0 and bigger order got matched first, -1 means LAST, uniqueness not checked
     */
    order?: pulumi.Input<number>;
    orgId?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    /**
     * tag list to determine if this rule would match
     */
    srcWxtags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only for Org Level WxRule
     */
    templateId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SiteWxrule resource.
 */
export interface SiteWxruleArgs {
    /**
     * type of action, allow / block. enum: `allow`, `block`
     */
    action: pulumi.Input<string>;
    applyTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * blocked apps (always blocking, ignoring action), the key of Get Application List
     */
    blockedApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tag list to indicate these tags are allowed access
     */
    dstAllowWxtags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tag list to indicate these tags are blocked access
     */
    dstDenyWxtags?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    /**
     * the order how rules would be looked up, > 0 and bigger order got matched first, -1 means LAST, uniqueness not checked
     */
    order: pulumi.Input<number>;
    siteId: pulumi.Input<string>;
    /**
     * tag list to determine if this rule would match
     */
    srcWxtags: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only for Org Level WxRule
     */
    templateId?: pulumi.Input<string>;
}
