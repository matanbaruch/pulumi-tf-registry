// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SiteNetworktemplate extends pulumi.CustomResource {
    /**
     * Get an existing SiteNetworktemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteNetworktemplateState, opts?: pulumi.CustomResourceOptions): SiteNetworktemplate {
        return new SiteNetworktemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mist:index/siteNetworktemplate:SiteNetworktemplate';

    /**
     * Returns true if the given object is an instance of SiteNetworktemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteNetworktemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteNetworktemplate.__pulumiType;
    }

    public readonly aclPolicies!: pulumi.Output<outputs.SiteNetworktemplateAclPolicy[] | undefined>;
    /**
     * ACL Tags to identify traffic source or destination. Key name is the tag name
     */
    public readonly aclTags!: pulumi.Output<{[key: string]: outputs.SiteNetworktemplateAclTags} | undefined>;
    /**
     * additional CLI commands to append to the generated Junos config **Note**: no check is done
     */
    public readonly additionalConfigCmds!: pulumi.Output<string[] | undefined>;
    public readonly dhcpSnooping!: pulumi.Output<outputs.SiteNetworktemplateDhcpSnooping | undefined>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    public readonly dnsServers!: pulumi.Output<string[] | undefined>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    public readonly dnsSuffixes!: pulumi.Output<string[] | undefined>;
    public readonly extraRoutes!: pulumi.Output<{[key: string]: outputs.SiteNetworktemplateExtraRoutes} | undefined>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
     */
    public readonly extraRoutes6!: pulumi.Output<{[key: string]: outputs.SiteNetworktemplateExtraRoutes6} | undefined>;
    /**
     * enable mist_nac to use radsec
     */
    public readonly mistNac!: pulumi.Output<outputs.SiteNetworktemplateMistNac | undefined>;
    /**
     * Property key is network name
     */
    public readonly networks!: pulumi.Output<{[key: string]: outputs.SiteNetworktemplateNetworks} | undefined>;
    /**
     * list of NTP servers
     */
    public readonly ntpServers!: pulumi.Output<string[] | undefined>;
    /**
     * Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
     * interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
     */
    public readonly portMirroring!: pulumi.Output<{[key: string]: outputs.SiteNetworktemplatePortMirroring} | undefined>;
    public readonly portUsages!: pulumi.Output<{[key: string]: outputs.SiteNetworktemplatePortUsages} | undefined>;
    /**
     * Junos Radius config
     */
    public readonly radiusConfig!: pulumi.Output<outputs.SiteNetworktemplateRadiusConfig | undefined>;
    public readonly remoteSyslog!: pulumi.Output<outputs.SiteNetworktemplateRemoteSyslog | undefined>;
    /**
     * by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
     */
    public readonly removeExistingConfigs!: pulumi.Output<boolean>;
    public readonly siteId!: pulumi.Output<string>;
    public readonly snmpConfig!: pulumi.Output<outputs.SiteNetworktemplateSnmpConfig | undefined>;
    /**
     * Switch template
     */
    public readonly switchMatching!: pulumi.Output<outputs.SiteNetworktemplateSwitchMatching | undefined>;
    /**
     * Switch settings
     */
    public readonly switchMgmt!: pulumi.Output<outputs.SiteNetworktemplateSwitchMgmt | undefined>;
    public readonly uplinkPortConfig!: pulumi.Output<outputs.SiteNetworktemplateUplinkPortConfig | undefined>;
    public readonly vrfConfig!: pulumi.Output<outputs.SiteNetworktemplateVrfConfig | undefined>;
    /**
     * Property key is the network name
     */
    public readonly vrfInstances!: pulumi.Output<{[key: string]: outputs.SiteNetworktemplateVrfInstances} | undefined>;

    /**
     * Create a SiteNetworktemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SiteNetworktemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteNetworktemplateArgs | SiteNetworktemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteNetworktemplateState | undefined;
            resourceInputs["aclPolicies"] = state ? state.aclPolicies : undefined;
            resourceInputs["aclTags"] = state ? state.aclTags : undefined;
            resourceInputs["additionalConfigCmds"] = state ? state.additionalConfigCmds : undefined;
            resourceInputs["dhcpSnooping"] = state ? state.dhcpSnooping : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["dnsSuffixes"] = state ? state.dnsSuffixes : undefined;
            resourceInputs["extraRoutes"] = state ? state.extraRoutes : undefined;
            resourceInputs["extraRoutes6"] = state ? state.extraRoutes6 : undefined;
            resourceInputs["mistNac"] = state ? state.mistNac : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["ntpServers"] = state ? state.ntpServers : undefined;
            resourceInputs["portMirroring"] = state ? state.portMirroring : undefined;
            resourceInputs["portUsages"] = state ? state.portUsages : undefined;
            resourceInputs["radiusConfig"] = state ? state.radiusConfig : undefined;
            resourceInputs["remoteSyslog"] = state ? state.remoteSyslog : undefined;
            resourceInputs["removeExistingConfigs"] = state ? state.removeExistingConfigs : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["snmpConfig"] = state ? state.snmpConfig : undefined;
            resourceInputs["switchMatching"] = state ? state.switchMatching : undefined;
            resourceInputs["switchMgmt"] = state ? state.switchMgmt : undefined;
            resourceInputs["uplinkPortConfig"] = state ? state.uplinkPortConfig : undefined;
            resourceInputs["vrfConfig"] = state ? state.vrfConfig : undefined;
            resourceInputs["vrfInstances"] = state ? state.vrfInstances : undefined;
        } else {
            const args = argsOrState as SiteNetworktemplateArgs | undefined;
            resourceInputs["aclPolicies"] = args ? args.aclPolicies : undefined;
            resourceInputs["aclTags"] = args ? args.aclTags : undefined;
            resourceInputs["additionalConfigCmds"] = args ? args.additionalConfigCmds : undefined;
            resourceInputs["dhcpSnooping"] = args ? args.dhcpSnooping : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["dnsSuffixes"] = args ? args.dnsSuffixes : undefined;
            resourceInputs["extraRoutes"] = args ? args.extraRoutes : undefined;
            resourceInputs["extraRoutes6"] = args ? args.extraRoutes6 : undefined;
            resourceInputs["mistNac"] = args ? args.mistNac : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["ntpServers"] = args ? args.ntpServers : undefined;
            resourceInputs["portMirroring"] = args ? args.portMirroring : undefined;
            resourceInputs["portUsages"] = args ? args.portUsages : undefined;
            resourceInputs["radiusConfig"] = args ? args.radiusConfig : undefined;
            resourceInputs["remoteSyslog"] = args ? args.remoteSyslog : undefined;
            resourceInputs["removeExistingConfigs"] = args ? args.removeExistingConfigs : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["snmpConfig"] = args ? args.snmpConfig : undefined;
            resourceInputs["switchMatching"] = args ? args.switchMatching : undefined;
            resourceInputs["switchMgmt"] = args ? args.switchMgmt : undefined;
            resourceInputs["uplinkPortConfig"] = args ? args.uplinkPortConfig : undefined;
            resourceInputs["vrfConfig"] = args ? args.vrfConfig : undefined;
            resourceInputs["vrfInstances"] = args ? args.vrfInstances : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteNetworktemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteNetworktemplate resources.
 */
export interface SiteNetworktemplateState {
    aclPolicies?: pulumi.Input<pulumi.Input<inputs.SiteNetworktemplateAclPolicy>[]>;
    /**
     * ACL Tags to identify traffic source or destination. Key name is the tag name
     */
    aclTags?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplateAclTags>}>;
    /**
     * additional CLI commands to append to the generated Junos config **Note**: no check is done
     */
    additionalConfigCmds?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpSnooping?: pulumi.Input<inputs.SiteNetworktemplateDhcpSnooping>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    dnsSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    extraRoutes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplateExtraRoutes>}>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
     */
    extraRoutes6?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplateExtraRoutes6>}>;
    /**
     * enable mist_nac to use radsec
     */
    mistNac?: pulumi.Input<inputs.SiteNetworktemplateMistNac>;
    /**
     * Property key is network name
     */
    networks?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplateNetworks>}>;
    /**
     * list of NTP servers
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
     * interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
     */
    portMirroring?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplatePortMirroring>}>;
    portUsages?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplatePortUsages>}>;
    /**
     * Junos Radius config
     */
    radiusConfig?: pulumi.Input<inputs.SiteNetworktemplateRadiusConfig>;
    remoteSyslog?: pulumi.Input<inputs.SiteNetworktemplateRemoteSyslog>;
    /**
     * by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
     */
    removeExistingConfigs?: pulumi.Input<boolean>;
    siteId?: pulumi.Input<string>;
    snmpConfig?: pulumi.Input<inputs.SiteNetworktemplateSnmpConfig>;
    /**
     * Switch template
     */
    switchMatching?: pulumi.Input<inputs.SiteNetworktemplateSwitchMatching>;
    /**
     * Switch settings
     */
    switchMgmt?: pulumi.Input<inputs.SiteNetworktemplateSwitchMgmt>;
    uplinkPortConfig?: pulumi.Input<inputs.SiteNetworktemplateUplinkPortConfig>;
    vrfConfig?: pulumi.Input<inputs.SiteNetworktemplateVrfConfig>;
    /**
     * Property key is the network name
     */
    vrfInstances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplateVrfInstances>}>;
}

/**
 * The set of arguments for constructing a SiteNetworktemplate resource.
 */
export interface SiteNetworktemplateArgs {
    aclPolicies?: pulumi.Input<pulumi.Input<inputs.SiteNetworktemplateAclPolicy>[]>;
    /**
     * ACL Tags to identify traffic source or destination. Key name is the tag name
     */
    aclTags?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplateAclTags>}>;
    /**
     * additional CLI commands to append to the generated Junos config **Note**: no check is done
     */
    additionalConfigCmds?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpSnooping?: pulumi.Input<inputs.SiteNetworktemplateDhcpSnooping>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     */
    dnsSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    extraRoutes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplateExtraRoutes>}>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
     */
    extraRoutes6?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplateExtraRoutes6>}>;
    /**
     * enable mist_nac to use radsec
     */
    mistNac?: pulumi.Input<inputs.SiteNetworktemplateMistNac>;
    /**
     * Property key is network name
     */
    networks?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplateNetworks>}>;
    /**
     * list of NTP servers
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
     * interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
     */
    portMirroring?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplatePortMirroring>}>;
    portUsages?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplatePortUsages>}>;
    /**
     * Junos Radius config
     */
    radiusConfig?: pulumi.Input<inputs.SiteNetworktemplateRadiusConfig>;
    remoteSyslog?: pulumi.Input<inputs.SiteNetworktemplateRemoteSyslog>;
    /**
     * by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
     */
    removeExistingConfigs?: pulumi.Input<boolean>;
    siteId?: pulumi.Input<string>;
    snmpConfig?: pulumi.Input<inputs.SiteNetworktemplateSnmpConfig>;
    /**
     * Switch template
     */
    switchMatching?: pulumi.Input<inputs.SiteNetworktemplateSwitchMatching>;
    /**
     * Switch settings
     */
    switchMgmt?: pulumi.Input<inputs.SiteNetworktemplateSwitchMgmt>;
    uplinkPortConfig?: pulumi.Input<inputs.SiteNetworktemplateUplinkPortConfig>;
    vrfConfig?: pulumi.Input<inputs.SiteNetworktemplateVrfConfig>;
    /**
     * Property key is the network name
     */
    vrfInstances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SiteNetworktemplateVrfInstances>}>;
}
