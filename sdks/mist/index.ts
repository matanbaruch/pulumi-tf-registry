// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DeviceApArgs, DeviceApState } from "./deviceAp";
export type DeviceAp = import("./deviceAp").DeviceAp;
export const DeviceAp: typeof import("./deviceAp").DeviceAp = null as any;
utilities.lazyLoad(exports, ["DeviceAp"], () => require("./deviceAp"));

export { DeviceGatewayArgs, DeviceGatewayState } from "./deviceGateway";
export type DeviceGateway = import("./deviceGateway").DeviceGateway;
export const DeviceGateway: typeof import("./deviceGateway").DeviceGateway = null as any;
utilities.lazyLoad(exports, ["DeviceGateway"], () => require("./deviceGateway"));

export { DeviceGatewayClusterArgs, DeviceGatewayClusterState } from "./deviceGatewayCluster";
export type DeviceGatewayCluster = import("./deviceGatewayCluster").DeviceGatewayCluster;
export const DeviceGatewayCluster: typeof import("./deviceGatewayCluster").DeviceGatewayCluster = null as any;
utilities.lazyLoad(exports, ["DeviceGatewayCluster"], () => require("./deviceGatewayCluster"));

export { DeviceSwitchArgs, DeviceSwitchState } from "./deviceSwitch";
export type DeviceSwitch = import("./deviceSwitch").DeviceSwitch;
export const DeviceSwitch: typeof import("./deviceSwitch").DeviceSwitch = null as any;
utilities.lazyLoad(exports, ["DeviceSwitch"], () => require("./deviceSwitch"));

export { GetConstAppCategoriesResult } from "./getConstAppCategories";
export const getConstAppCategories: typeof import("./getConstAppCategories").getConstAppCategories = null as any;
export const getConstAppCategoriesOutput: typeof import("./getConstAppCategories").getConstAppCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getConstAppCategories","getConstAppCategoriesOutput"], () => require("./getConstAppCategories"));

export { GetConstAppSubCategoriesResult } from "./getConstAppSubCategories";
export const getConstAppSubCategories: typeof import("./getConstAppSubCategories").getConstAppSubCategories = null as any;
export const getConstAppSubCategoriesOutput: typeof import("./getConstAppSubCategories").getConstAppSubCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getConstAppSubCategories","getConstAppSubCategoriesOutput"], () => require("./getConstAppSubCategories"));

export { GetConstApplicationsResult } from "./getConstApplications";
export const getConstApplications: typeof import("./getConstApplications").getConstApplications = null as any;
export const getConstApplicationsOutput: typeof import("./getConstApplications").getConstApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getConstApplications","getConstApplicationsOutput"], () => require("./getConstApplications"));

export { GetConstCountriesResult } from "./getConstCountries";
export const getConstCountries: typeof import("./getConstCountries").getConstCountries = null as any;
export const getConstCountriesOutput: typeof import("./getConstCountries").getConstCountriesOutput = null as any;
utilities.lazyLoad(exports, ["getConstCountries","getConstCountriesOutput"], () => require("./getConstCountries"));

export { GetConstTrafficTypesResult } from "./getConstTrafficTypes";
export const getConstTrafficTypes: typeof import("./getConstTrafficTypes").getConstTrafficTypes = null as any;
export const getConstTrafficTypesOutput: typeof import("./getConstTrafficTypes").getConstTrafficTypesOutput = null as any;
utilities.lazyLoad(exports, ["getConstTrafficTypes","getConstTrafficTypesOutput"], () => require("./getConstTrafficTypes"));

export { GetDeviceApStatsArgs, GetDeviceApStatsResult, GetDeviceApStatsOutputArgs } from "./getDeviceApStats";
export const getDeviceApStats: typeof import("./getDeviceApStats").getDeviceApStats = null as any;
export const getDeviceApStatsOutput: typeof import("./getDeviceApStats").getDeviceApStatsOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceApStats","getDeviceApStatsOutput"], () => require("./getDeviceApStats"));

export { GetDeviceGatewayStatsArgs, GetDeviceGatewayStatsResult, GetDeviceGatewayStatsOutputArgs } from "./getDeviceGatewayStats";
export const getDeviceGatewayStats: typeof import("./getDeviceGatewayStats").getDeviceGatewayStats = null as any;
export const getDeviceGatewayStatsOutput: typeof import("./getDeviceGatewayStats").getDeviceGatewayStatsOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceGatewayStats","getDeviceGatewayStatsOutput"], () => require("./getDeviceGatewayStats"));

export { GetDeviceSwitchStatsArgs, GetDeviceSwitchStatsResult, GetDeviceSwitchStatsOutputArgs } from "./getDeviceSwitchStats";
export const getDeviceSwitchStats: typeof import("./getDeviceSwitchStats").getDeviceSwitchStats = null as any;
export const getDeviceSwitchStatsOutput: typeof import("./getDeviceSwitchStats").getDeviceSwitchStatsOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceSwitchStats","getDeviceSwitchStatsOutput"], () => require("./getDeviceSwitchStats"));

export { GetOrgDeviceprofilesApArgs, GetOrgDeviceprofilesApResult, GetOrgDeviceprofilesApOutputArgs } from "./getOrgDeviceprofilesAp";
export const getOrgDeviceprofilesAp: typeof import("./getOrgDeviceprofilesAp").getOrgDeviceprofilesAp = null as any;
export const getOrgDeviceprofilesApOutput: typeof import("./getOrgDeviceprofilesAp").getOrgDeviceprofilesApOutput = null as any;
utilities.lazyLoad(exports, ["getOrgDeviceprofilesAp","getOrgDeviceprofilesApOutput"], () => require("./getOrgDeviceprofilesAp"));

export { GetOrgDeviceprofilesGatewayArgs, GetOrgDeviceprofilesGatewayResult, GetOrgDeviceprofilesGatewayOutputArgs } from "./getOrgDeviceprofilesGateway";
export const getOrgDeviceprofilesGateway: typeof import("./getOrgDeviceprofilesGateway").getOrgDeviceprofilesGateway = null as any;
export const getOrgDeviceprofilesGatewayOutput: typeof import("./getOrgDeviceprofilesGateway").getOrgDeviceprofilesGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getOrgDeviceprofilesGateway","getOrgDeviceprofilesGatewayOutput"], () => require("./getOrgDeviceprofilesGateway"));

export { GetOrgGatewaytemplatesArgs, GetOrgGatewaytemplatesResult, GetOrgGatewaytemplatesOutputArgs } from "./getOrgGatewaytemplates";
export const getOrgGatewaytemplates: typeof import("./getOrgGatewaytemplates").getOrgGatewaytemplates = null as any;
export const getOrgGatewaytemplatesOutput: typeof import("./getOrgGatewaytemplates").getOrgGatewaytemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getOrgGatewaytemplates","getOrgGatewaytemplatesOutput"], () => require("./getOrgGatewaytemplates"));

export { GetOrgIdpprofilesArgs, GetOrgIdpprofilesResult, GetOrgIdpprofilesOutputArgs } from "./getOrgIdpprofiles";
export const getOrgIdpprofiles: typeof import("./getOrgIdpprofiles").getOrgIdpprofiles = null as any;
export const getOrgIdpprofilesOutput: typeof import("./getOrgIdpprofiles").getOrgIdpprofilesOutput = null as any;
utilities.lazyLoad(exports, ["getOrgIdpprofiles","getOrgIdpprofilesOutput"], () => require("./getOrgIdpprofiles"));

export { GetOrgInventoryArgs, GetOrgInventoryResult, GetOrgInventoryOutputArgs } from "./getOrgInventory";
export const getOrgInventory: typeof import("./getOrgInventory").getOrgInventory = null as any;
export const getOrgInventoryOutput: typeof import("./getOrgInventory").getOrgInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getOrgInventory","getOrgInventoryOutput"], () => require("./getOrgInventory"));

export { GetOrgNacrulesArgs, GetOrgNacrulesResult, GetOrgNacrulesOutputArgs } from "./getOrgNacrules";
export const getOrgNacrules: typeof import("./getOrgNacrules").getOrgNacrules = null as any;
export const getOrgNacrulesOutput: typeof import("./getOrgNacrules").getOrgNacrulesOutput = null as any;
utilities.lazyLoad(exports, ["getOrgNacrules","getOrgNacrulesOutput"], () => require("./getOrgNacrules"));

export { GetOrgNactagsArgs, GetOrgNactagsResult, GetOrgNactagsOutputArgs } from "./getOrgNactags";
export const getOrgNactags: typeof import("./getOrgNactags").getOrgNactags = null as any;
export const getOrgNactagsOutput: typeof import("./getOrgNactags").getOrgNactagsOutput = null as any;
utilities.lazyLoad(exports, ["getOrgNactags","getOrgNactagsOutput"], () => require("./getOrgNactags"));

export { GetOrgNetworksArgs, GetOrgNetworksResult, GetOrgNetworksOutputArgs } from "./getOrgNetworks";
export const getOrgNetworks: typeof import("./getOrgNetworks").getOrgNetworks = null as any;
export const getOrgNetworksOutput: typeof import("./getOrgNetworks").getOrgNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getOrgNetworks","getOrgNetworksOutput"], () => require("./getOrgNetworks"));

export { GetOrgNetworktemplatesArgs, GetOrgNetworktemplatesResult, GetOrgNetworktemplatesOutputArgs } from "./getOrgNetworktemplates";
export const getOrgNetworktemplates: typeof import("./getOrgNetworktemplates").getOrgNetworktemplates = null as any;
export const getOrgNetworktemplatesOutput: typeof import("./getOrgNetworktemplates").getOrgNetworktemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getOrgNetworktemplates","getOrgNetworktemplatesOutput"], () => require("./getOrgNetworktemplates"));

export { GetOrgPsksArgs, GetOrgPsksResult, GetOrgPsksOutputArgs } from "./getOrgPsks";
export const getOrgPsks: typeof import("./getOrgPsks").getOrgPsks = null as any;
export const getOrgPsksOutput: typeof import("./getOrgPsks").getOrgPsksOutput = null as any;
utilities.lazyLoad(exports, ["getOrgPsks","getOrgPsksOutput"], () => require("./getOrgPsks"));

export { GetOrgRftemplatesArgs, GetOrgRftemplatesResult, GetOrgRftemplatesOutputArgs } from "./getOrgRftemplates";
export const getOrgRftemplates: typeof import("./getOrgRftemplates").getOrgRftemplates = null as any;
export const getOrgRftemplatesOutput: typeof import("./getOrgRftemplates").getOrgRftemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getOrgRftemplates","getOrgRftemplatesOutput"], () => require("./getOrgRftemplates"));

export { GetOrgServicepoliciesArgs, GetOrgServicepoliciesResult, GetOrgServicepoliciesOutputArgs } from "./getOrgServicepolicies";
export const getOrgServicepolicies: typeof import("./getOrgServicepolicies").getOrgServicepolicies = null as any;
export const getOrgServicepoliciesOutput: typeof import("./getOrgServicepolicies").getOrgServicepoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getOrgServicepolicies","getOrgServicepoliciesOutput"], () => require("./getOrgServicepolicies"));

export { GetOrgServicesArgs, GetOrgServicesResult, GetOrgServicesOutputArgs } from "./getOrgServices";
export const getOrgServices: typeof import("./getOrgServices").getOrgServices = null as any;
export const getOrgServicesOutput: typeof import("./getOrgServices").getOrgServicesOutput = null as any;
utilities.lazyLoad(exports, ["getOrgServices","getOrgServicesOutput"], () => require("./getOrgServices"));

export { GetOrgSitegroupsArgs, GetOrgSitegroupsResult, GetOrgSitegroupsOutputArgs } from "./getOrgSitegroups";
export const getOrgSitegroups: typeof import("./getOrgSitegroups").getOrgSitegroups = null as any;
export const getOrgSitegroupsOutput: typeof import("./getOrgSitegroups").getOrgSitegroupsOutput = null as any;
utilities.lazyLoad(exports, ["getOrgSitegroups","getOrgSitegroupsOutput"], () => require("./getOrgSitegroups"));

export { GetOrgVpnsArgs, GetOrgVpnsResult, GetOrgVpnsOutputArgs } from "./getOrgVpns";
export const getOrgVpns: typeof import("./getOrgVpns").getOrgVpns = null as any;
export const getOrgVpnsOutput: typeof import("./getOrgVpns").getOrgVpnsOutput = null as any;
utilities.lazyLoad(exports, ["getOrgVpns","getOrgVpnsOutput"], () => require("./getOrgVpns"));

export { GetOrgWebhooksArgs, GetOrgWebhooksResult, GetOrgWebhooksOutputArgs } from "./getOrgWebhooks";
export const getOrgWebhooks: typeof import("./getOrgWebhooks").getOrgWebhooks = null as any;
export const getOrgWebhooksOutput: typeof import("./getOrgWebhooks").getOrgWebhooksOutput = null as any;
utilities.lazyLoad(exports, ["getOrgWebhooks","getOrgWebhooksOutput"], () => require("./getOrgWebhooks"));

export { GetOrgWlantemplatesArgs, GetOrgWlantemplatesResult, GetOrgWlantemplatesOutputArgs } from "./getOrgWlantemplates";
export const getOrgWlantemplates: typeof import("./getOrgWlantemplates").getOrgWlantemplates = null as any;
export const getOrgWlantemplatesOutput: typeof import("./getOrgWlantemplates").getOrgWlantemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getOrgWlantemplates","getOrgWlantemplatesOutput"], () => require("./getOrgWlantemplates"));

export { GetOrgWxtagsArgs, GetOrgWxtagsResult, GetOrgWxtagsOutputArgs } from "./getOrgWxtags";
export const getOrgWxtags: typeof import("./getOrgWxtags").getOrgWxtags = null as any;
export const getOrgWxtagsOutput: typeof import("./getOrgWxtags").getOrgWxtagsOutput = null as any;
utilities.lazyLoad(exports, ["getOrgWxtags","getOrgWxtagsOutput"], () => require("./getOrgWxtags"));

export { GetSitePsksArgs, GetSitePsksResult, GetSitePsksOutputArgs } from "./getSitePsks";
export const getSitePsks: typeof import("./getSitePsks").getSitePsks = null as any;
export const getSitePsksOutput: typeof import("./getSitePsks").getSitePsksOutput = null as any;
utilities.lazyLoad(exports, ["getSitePsks","getSitePsksOutput"], () => require("./getSitePsks"));

export { GetSiteWebhooksArgs, GetSiteWebhooksResult, GetSiteWebhooksOutputArgs } from "./getSiteWebhooks";
export const getSiteWebhooks: typeof import("./getSiteWebhooks").getSiteWebhooks = null as any;
export const getSiteWebhooksOutput: typeof import("./getSiteWebhooks").getSiteWebhooksOutput = null as any;
utilities.lazyLoad(exports, ["getSiteWebhooks","getSiteWebhooksOutput"], () => require("./getSiteWebhooks"));

export { GetSitesArgs, GetSitesResult, GetSitesOutputArgs } from "./getSites";
export const getSites: typeof import("./getSites").getSites = null as any;
export const getSitesOutput: typeof import("./getSites").getSitesOutput = null as any;
utilities.lazyLoad(exports, ["getSites","getSitesOutput"], () => require("./getSites"));

export { OrgArgs, OrgState } from "./org";
export type Org = import("./org").Org;
export const Org: typeof import("./org").Org = null as any;
utilities.lazyLoad(exports, ["Org"], () => require("./org"));

export { OrgDeviceprofileApArgs, OrgDeviceprofileApState } from "./orgDeviceprofileAp";
export type OrgDeviceprofileAp = import("./orgDeviceprofileAp").OrgDeviceprofileAp;
export const OrgDeviceprofileAp: typeof import("./orgDeviceprofileAp").OrgDeviceprofileAp = null as any;
utilities.lazyLoad(exports, ["OrgDeviceprofileAp"], () => require("./orgDeviceprofileAp"));

export { OrgDeviceprofileAssignArgs, OrgDeviceprofileAssignState } from "./orgDeviceprofileAssign";
export type OrgDeviceprofileAssign = import("./orgDeviceprofileAssign").OrgDeviceprofileAssign;
export const OrgDeviceprofileAssign: typeof import("./orgDeviceprofileAssign").OrgDeviceprofileAssign = null as any;
utilities.lazyLoad(exports, ["OrgDeviceprofileAssign"], () => require("./orgDeviceprofileAssign"));

export { OrgDeviceprofileGatewayArgs, OrgDeviceprofileGatewayState } from "./orgDeviceprofileGateway";
export type OrgDeviceprofileGateway = import("./orgDeviceprofileGateway").OrgDeviceprofileGateway;
export const OrgDeviceprofileGateway: typeof import("./orgDeviceprofileGateway").OrgDeviceprofileGateway = null as any;
utilities.lazyLoad(exports, ["OrgDeviceprofileGateway"], () => require("./orgDeviceprofileGateway"));

export { OrgGatewaytemplateArgs, OrgGatewaytemplateState } from "./orgGatewaytemplate";
export type OrgGatewaytemplate = import("./orgGatewaytemplate").OrgGatewaytemplate;
export const OrgGatewaytemplate: typeof import("./orgGatewaytemplate").OrgGatewaytemplate = null as any;
utilities.lazyLoad(exports, ["OrgGatewaytemplate"], () => require("./orgGatewaytemplate"));

export { OrgIdpprofileArgs, OrgIdpprofileState } from "./orgIdpprofile";
export type OrgIdpprofile = import("./orgIdpprofile").OrgIdpprofile;
export const OrgIdpprofile: typeof import("./orgIdpprofile").OrgIdpprofile = null as any;
utilities.lazyLoad(exports, ["OrgIdpprofile"], () => require("./orgIdpprofile"));

export { OrgInventoryArgs, OrgInventoryState } from "./orgInventory";
export type OrgInventory = import("./orgInventory").OrgInventory;
export const OrgInventory: typeof import("./orgInventory").OrgInventory = null as any;
utilities.lazyLoad(exports, ["OrgInventory"], () => require("./orgInventory"));

export { OrgNacruleArgs, OrgNacruleState } from "./orgNacrule";
export type OrgNacrule = import("./orgNacrule").OrgNacrule;
export const OrgNacrule: typeof import("./orgNacrule").OrgNacrule = null as any;
utilities.lazyLoad(exports, ["OrgNacrule"], () => require("./orgNacrule"));

export { OrgNactagArgs, OrgNactagState } from "./orgNactag";
export type OrgNactag = import("./orgNactag").OrgNactag;
export const OrgNactag: typeof import("./orgNactag").OrgNactag = null as any;
utilities.lazyLoad(exports, ["OrgNactag"], () => require("./orgNactag"));

export { OrgNetworkArgs, OrgNetworkState } from "./orgNetwork";
export type OrgNetwork = import("./orgNetwork").OrgNetwork;
export const OrgNetwork: typeof import("./orgNetwork").OrgNetwork = null as any;
utilities.lazyLoad(exports, ["OrgNetwork"], () => require("./orgNetwork"));

export { OrgNetworktemplateArgs, OrgNetworktemplateState } from "./orgNetworktemplate";
export type OrgNetworktemplate = import("./orgNetworktemplate").OrgNetworktemplate;
export const OrgNetworktemplate: typeof import("./orgNetworktemplate").OrgNetworktemplate = null as any;
utilities.lazyLoad(exports, ["OrgNetworktemplate"], () => require("./orgNetworktemplate"));

export { OrgPskArgs, OrgPskState } from "./orgPsk";
export type OrgPsk = import("./orgPsk").OrgPsk;
export const OrgPsk: typeof import("./orgPsk").OrgPsk = null as any;
utilities.lazyLoad(exports, ["OrgPsk"], () => require("./orgPsk"));

export { OrgRftemplateArgs, OrgRftemplateState } from "./orgRftemplate";
export type OrgRftemplate = import("./orgRftemplate").OrgRftemplate;
export const OrgRftemplate: typeof import("./orgRftemplate").OrgRftemplate = null as any;
utilities.lazyLoad(exports, ["OrgRftemplate"], () => require("./orgRftemplate"));

export { OrgServiceArgs, OrgServiceState } from "./orgService";
export type OrgService = import("./orgService").OrgService;
export const OrgService: typeof import("./orgService").OrgService = null as any;
utilities.lazyLoad(exports, ["OrgService"], () => require("./orgService"));

export { OrgServicepolicyArgs, OrgServicepolicyState } from "./orgServicepolicy";
export type OrgServicepolicy = import("./orgServicepolicy").OrgServicepolicy;
export const OrgServicepolicy: typeof import("./orgServicepolicy").OrgServicepolicy = null as any;
utilities.lazyLoad(exports, ["OrgServicepolicy"], () => require("./orgServicepolicy"));

export { OrgSettingArgs, OrgSettingState } from "./orgSetting";
export type OrgSetting = import("./orgSetting").OrgSetting;
export const OrgSetting: typeof import("./orgSetting").OrgSetting = null as any;
utilities.lazyLoad(exports, ["OrgSetting"], () => require("./orgSetting"));

export { OrgSitegroupArgs, OrgSitegroupState } from "./orgSitegroup";
export type OrgSitegroup = import("./orgSitegroup").OrgSitegroup;
export const OrgSitegroup: typeof import("./orgSitegroup").OrgSitegroup = null as any;
utilities.lazyLoad(exports, ["OrgSitegroup"], () => require("./orgSitegroup"));

export { OrgVpnArgs, OrgVpnState } from "./orgVpn";
export type OrgVpn = import("./orgVpn").OrgVpn;
export const OrgVpn: typeof import("./orgVpn").OrgVpn = null as any;
utilities.lazyLoad(exports, ["OrgVpn"], () => require("./orgVpn"));

export { OrgWebhookArgs, OrgWebhookState } from "./orgWebhook";
export type OrgWebhook = import("./orgWebhook").OrgWebhook;
export const OrgWebhook: typeof import("./orgWebhook").OrgWebhook = null as any;
utilities.lazyLoad(exports, ["OrgWebhook"], () => require("./orgWebhook"));

export { OrgWlanArgs, OrgWlanState } from "./orgWlan";
export type OrgWlan = import("./orgWlan").OrgWlan;
export const OrgWlan: typeof import("./orgWlan").OrgWlan = null as any;
utilities.lazyLoad(exports, ["OrgWlan"], () => require("./orgWlan"));

export { OrgWlantemplateArgs, OrgWlantemplateState } from "./orgWlantemplate";
export type OrgWlantemplate = import("./orgWlantemplate").OrgWlantemplate;
export const OrgWlantemplate: typeof import("./orgWlantemplate").OrgWlantemplate = null as any;
utilities.lazyLoad(exports, ["OrgWlantemplate"], () => require("./orgWlantemplate"));

export { OrgWxruleArgs, OrgWxruleState } from "./orgWxrule";
export type OrgWxrule = import("./orgWxrule").OrgWxrule;
export const OrgWxrule: typeof import("./orgWxrule").OrgWxrule = null as any;
utilities.lazyLoad(exports, ["OrgWxrule"], () => require("./orgWxrule"));

export { OrgWxtagArgs, OrgWxtagState } from "./orgWxtag";
export type OrgWxtag = import("./orgWxtag").OrgWxtag;
export const OrgWxtag: typeof import("./orgWxtag").OrgWxtag = null as any;
utilities.lazyLoad(exports, ["OrgWxtag"], () => require("./orgWxtag"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SiteArgs, SiteState } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { SiteNetworktemplateArgs, SiteNetworktemplateState } from "./siteNetworktemplate";
export type SiteNetworktemplate = import("./siteNetworktemplate").SiteNetworktemplate;
export const SiteNetworktemplate: typeof import("./siteNetworktemplate").SiteNetworktemplate = null as any;
utilities.lazyLoad(exports, ["SiteNetworktemplate"], () => require("./siteNetworktemplate"));

export { SitePskArgs, SitePskState } from "./sitePsk";
export type SitePsk = import("./sitePsk").SitePsk;
export const SitePsk: typeof import("./sitePsk").SitePsk = null as any;
utilities.lazyLoad(exports, ["SitePsk"], () => require("./sitePsk"));

export { SiteSettingArgs, SiteSettingState } from "./siteSetting";
export type SiteSetting = import("./siteSetting").SiteSetting;
export const SiteSetting: typeof import("./siteSetting").SiteSetting = null as any;
utilities.lazyLoad(exports, ["SiteSetting"], () => require("./siteSetting"));

export { SiteWebhookArgs, SiteWebhookState } from "./siteWebhook";
export type SiteWebhook = import("./siteWebhook").SiteWebhook;
export const SiteWebhook: typeof import("./siteWebhook").SiteWebhook = null as any;
utilities.lazyLoad(exports, ["SiteWebhook"], () => require("./siteWebhook"));

export { SiteWlanArgs, SiteWlanState } from "./siteWlan";
export type SiteWlan = import("./siteWlan").SiteWlan;
export const SiteWlan: typeof import("./siteWlan").SiteWlan = null as any;
utilities.lazyLoad(exports, ["SiteWlan"], () => require("./siteWlan"));

export { SiteWxruleArgs, SiteWxruleState } from "./siteWxrule";
export type SiteWxrule = import("./siteWxrule").SiteWxrule;
export const SiteWxrule: typeof import("./siteWxrule").SiteWxrule = null as any;
utilities.lazyLoad(exports, ["SiteWxrule"], () => require("./siteWxrule"));

export { SiteWxtagArgs, SiteWxtagState } from "./siteWxtag";
export type SiteWxtag = import("./siteWxtag").SiteWxtag;
export const SiteWxtag: typeof import("./siteWxtag").SiteWxtag = null as any;
utilities.lazyLoad(exports, ["SiteWxtag"], () => require("./siteWxtag"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "mist:index/deviceAp:DeviceAp":
                return new DeviceAp(name, <any>undefined, { urn })
            case "mist:index/deviceGateway:DeviceGateway":
                return new DeviceGateway(name, <any>undefined, { urn })
            case "mist:index/deviceGatewayCluster:DeviceGatewayCluster":
                return new DeviceGatewayCluster(name, <any>undefined, { urn })
            case "mist:index/deviceSwitch:DeviceSwitch":
                return new DeviceSwitch(name, <any>undefined, { urn })
            case "mist:index/org:Org":
                return new Org(name, <any>undefined, { urn })
            case "mist:index/orgDeviceprofileAp:OrgDeviceprofileAp":
                return new OrgDeviceprofileAp(name, <any>undefined, { urn })
            case "mist:index/orgDeviceprofileAssign:OrgDeviceprofileAssign":
                return new OrgDeviceprofileAssign(name, <any>undefined, { urn })
            case "mist:index/orgDeviceprofileGateway:OrgDeviceprofileGateway":
                return new OrgDeviceprofileGateway(name, <any>undefined, { urn })
            case "mist:index/orgGatewaytemplate:OrgGatewaytemplate":
                return new OrgGatewaytemplate(name, <any>undefined, { urn })
            case "mist:index/orgIdpprofile:OrgIdpprofile":
                return new OrgIdpprofile(name, <any>undefined, { urn })
            case "mist:index/orgInventory:OrgInventory":
                return new OrgInventory(name, <any>undefined, { urn })
            case "mist:index/orgNacrule:OrgNacrule":
                return new OrgNacrule(name, <any>undefined, { urn })
            case "mist:index/orgNactag:OrgNactag":
                return new OrgNactag(name, <any>undefined, { urn })
            case "mist:index/orgNetwork:OrgNetwork":
                return new OrgNetwork(name, <any>undefined, { urn })
            case "mist:index/orgNetworktemplate:OrgNetworktemplate":
                return new OrgNetworktemplate(name, <any>undefined, { urn })
            case "mist:index/orgPsk:OrgPsk":
                return new OrgPsk(name, <any>undefined, { urn })
            case "mist:index/orgRftemplate:OrgRftemplate":
                return new OrgRftemplate(name, <any>undefined, { urn })
            case "mist:index/orgService:OrgService":
                return new OrgService(name, <any>undefined, { urn })
            case "mist:index/orgServicepolicy:OrgServicepolicy":
                return new OrgServicepolicy(name, <any>undefined, { urn })
            case "mist:index/orgSetting:OrgSetting":
                return new OrgSetting(name, <any>undefined, { urn })
            case "mist:index/orgSitegroup:OrgSitegroup":
                return new OrgSitegroup(name, <any>undefined, { urn })
            case "mist:index/orgVpn:OrgVpn":
                return new OrgVpn(name, <any>undefined, { urn })
            case "mist:index/orgWebhook:OrgWebhook":
                return new OrgWebhook(name, <any>undefined, { urn })
            case "mist:index/orgWlan:OrgWlan":
                return new OrgWlan(name, <any>undefined, { urn })
            case "mist:index/orgWlantemplate:OrgWlantemplate":
                return new OrgWlantemplate(name, <any>undefined, { urn })
            case "mist:index/orgWxrule:OrgWxrule":
                return new OrgWxrule(name, <any>undefined, { urn })
            case "mist:index/orgWxtag:OrgWxtag":
                return new OrgWxtag(name, <any>undefined, { urn })
            case "mist:index/site:Site":
                return new Site(name, <any>undefined, { urn })
            case "mist:index/siteNetworktemplate:SiteNetworktemplate":
                return new SiteNetworktemplate(name, <any>undefined, { urn })
            case "mist:index/sitePsk:SitePsk":
                return new SitePsk(name, <any>undefined, { urn })
            case "mist:index/siteSetting:SiteSetting":
                return new SiteSetting(name, <any>undefined, { urn })
            case "mist:index/siteWebhook:SiteWebhook":
                return new SiteWebhook(name, <any>undefined, { urn })
            case "mist:index/siteWlan:SiteWlan":
                return new SiteWlan(name, <any>undefined, { urn })
            case "mist:index/siteWxrule:SiteWxrule":
                return new SiteWxrule(name, <any>undefined, { urn })
            case "mist:index/siteWxtag:SiteWxtag":
                return new SiteWxtag(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("mist", "index/deviceAp", _module)
pulumi.runtime.registerResourceModule("mist", "index/deviceGateway", _module)
pulumi.runtime.registerResourceModule("mist", "index/deviceGatewayCluster", _module)
pulumi.runtime.registerResourceModule("mist", "index/deviceSwitch", _module)
pulumi.runtime.registerResourceModule("mist", "index/org", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgDeviceprofileAp", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgDeviceprofileAssign", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgDeviceprofileGateway", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgGatewaytemplate", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgIdpprofile", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgInventory", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgNacrule", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgNactag", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgNetwork", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgNetworktemplate", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgPsk", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgRftemplate", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgService", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgServicepolicy", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgSetting", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgSitegroup", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgVpn", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgWebhook", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgWlan", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgWlantemplate", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgWxrule", _module)
pulumi.runtime.registerResourceModule("mist", "index/orgWxtag", _module)
pulumi.runtime.registerResourceModule("mist", "index/site", _module)
pulumi.runtime.registerResourceModule("mist", "index/siteNetworktemplate", _module)
pulumi.runtime.registerResourceModule("mist", "index/sitePsk", _module)
pulumi.runtime.registerResourceModule("mist", "index/siteSetting", _module)
pulumi.runtime.registerResourceModule("mist", "index/siteWebhook", _module)
pulumi.runtime.registerResourceModule("mist", "index/siteWlan", _module)
pulumi.runtime.registerResourceModule("mist", "index/siteWxrule", _module)
pulumi.runtime.registerResourceModule("mist", "index/siteWxtag", _module)
pulumi.runtime.registerResourcePackage("mist", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:mist") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
