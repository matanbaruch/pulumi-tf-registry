// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OrgNactag extends pulumi.CustomResource {
    /**
     * Get an existing OrgNactag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgNactagState, opts?: pulumi.CustomResourceOptions): OrgNactag {
        return new OrgNactag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mist:index/orgNactag:OrgNactag';

    /**
     * Returns true if the given object is an instance of OrgNactag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgNactag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgNactag.__pulumiType;
    }

    /**
     * can be set to true to allow the override by usermac result
     */
    public readonly allowUsermacOverride!: pulumi.Output<boolean>;
    /**
     * if `type`==`egress_vlan_names`, list of egress vlans to return
     */
    public readonly egressVlanNames!: pulumi.Output<string[] | undefined>;
    /**
     * if `type`==`gbp_tag`
     */
    public readonly gbpTag!: pulumi.Output<number | undefined>;
    /**
     * if `type`==`match`. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `client_mac`, `idp_role`,
     * `mdm_status`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`
     */
    public readonly match!: pulumi.Output<string | undefined>;
    /**
     * This field is applicable only when `type`==`match` * `false`: means it is sufficient to match any of the values (i.e.,
     * match-any behavior) * `true`: means all values should be matched (i.e., match-all behavior) Currently it makes sense to
     * set this field to `true` only if the `match`==`idp_role` or `match`==`usermac_label`'
     */
    public readonly matchAll!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly orgId!: pulumi.Output<string>;
    /**
     * if `type`==`radius_attrs`, user can specify a list of one or more standard attributes in the field "radius_attrs". It is
     * the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected. Note
     * that it is allowed to have more than one radius_attrs in the result of a given rule.
     */
    public readonly radiusAttrs!: pulumi.Output<string[] | undefined>;
    /**
     * if `type`==`radius_group`
     */
    public readonly radiusGroup!: pulumi.Output<string | undefined>;
    /**
     * if `type`==`radius_vendor_attrs`, user can specify a list of one or more vendor-specific attributes in the field
     * "radius_vendor_attrs". It is the responsibility of the user to provide a syntactically correct string, otherwise it may
     * not work as expected. Note that it is allowed to have more than one radius_vendor_attrs in the result of a given rule.
     */
    public readonly radiusVendorAttrs!: pulumi.Output<string[] | undefined>;
    /**
     * if `type`==`session_timeout, in seconds
     */
    public readonly sessionTimeout!: pulumi.Output<number | undefined>;
    /**
     * enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`,
     * `vlan`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * if `type`==`match`
     */
    public readonly values!: pulumi.Output<string[] | undefined>;
    /**
     * if `type`==`vlan`
     */
    public readonly vlan!: pulumi.Output<string | undefined>;

    /**
     * Create a OrgNactag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgNactagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgNactagArgs | OrgNactagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgNactagState | undefined;
            resourceInputs["allowUsermacOverride"] = state ? state.allowUsermacOverride : undefined;
            resourceInputs["egressVlanNames"] = state ? state.egressVlanNames : undefined;
            resourceInputs["gbpTag"] = state ? state.gbpTag : undefined;
            resourceInputs["match"] = state ? state.match : undefined;
            resourceInputs["matchAll"] = state ? state.matchAll : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["radiusAttrs"] = state ? state.radiusAttrs : undefined;
            resourceInputs["radiusGroup"] = state ? state.radiusGroup : undefined;
            resourceInputs["radiusVendorAttrs"] = state ? state.radiusVendorAttrs : undefined;
            resourceInputs["sessionTimeout"] = state ? state.sessionTimeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
        } else {
            const args = argsOrState as OrgNactagArgs | undefined;
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allowUsermacOverride"] = args ? args.allowUsermacOverride : undefined;
            resourceInputs["egressVlanNames"] = args ? args.egressVlanNames : undefined;
            resourceInputs["gbpTag"] = args ? args.gbpTag : undefined;
            resourceInputs["match"] = args ? args.match : undefined;
            resourceInputs["matchAll"] = args ? args.matchAll : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["radiusAttrs"] = args ? args.radiusAttrs : undefined;
            resourceInputs["radiusGroup"] = args ? args.radiusGroup : undefined;
            resourceInputs["radiusVendorAttrs"] = args ? args.radiusVendorAttrs : undefined;
            resourceInputs["sessionTimeout"] = args ? args.sessionTimeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgNactag.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrgNactag resources.
 */
export interface OrgNactagState {
    /**
     * can be set to true to allow the override by usermac result
     */
    allowUsermacOverride?: pulumi.Input<boolean>;
    /**
     * if `type`==`egress_vlan_names`, list of egress vlans to return
     */
    egressVlanNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * if `type`==`gbp_tag`
     */
    gbpTag?: pulumi.Input<number>;
    /**
     * if `type`==`match`. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `client_mac`, `idp_role`,
     * `mdm_status`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`
     */
    match?: pulumi.Input<string>;
    /**
     * This field is applicable only when `type`==`match` * `false`: means it is sufficient to match any of the values (i.e.,
     * match-any behavior) * `true`: means all values should be matched (i.e., match-all behavior) Currently it makes sense to
     * set this field to `true` only if the `match`==`idp_role` or `match`==`usermac_label`'
     */
    matchAll?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    /**
     * if `type`==`radius_attrs`, user can specify a list of one or more standard attributes in the field "radius_attrs". It is
     * the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected. Note
     * that it is allowed to have more than one radius_attrs in the result of a given rule.
     */
    radiusAttrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * if `type`==`radius_group`
     */
    radiusGroup?: pulumi.Input<string>;
    /**
     * if `type`==`radius_vendor_attrs`, user can specify a list of one or more vendor-specific attributes in the field
     * "radius_vendor_attrs". It is the responsibility of the user to provide a syntactically correct string, otherwise it may
     * not work as expected. Note that it is allowed to have more than one radius_vendor_attrs in the result of a given rule.
     */
    radiusVendorAttrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * if `type`==`session_timeout, in seconds
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`,
     * `vlan`
     */
    type?: pulumi.Input<string>;
    /**
     * if `type`==`match`
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * if `type`==`vlan`
     */
    vlan?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgNactag resource.
 */
export interface OrgNactagArgs {
    /**
     * can be set to true to allow the override by usermac result
     */
    allowUsermacOverride?: pulumi.Input<boolean>;
    /**
     * if `type`==`egress_vlan_names`, list of egress vlans to return
     */
    egressVlanNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * if `type`==`gbp_tag`
     */
    gbpTag?: pulumi.Input<number>;
    /**
     * if `type`==`match`. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `client_mac`, `idp_role`,
     * `mdm_status`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`
     */
    match?: pulumi.Input<string>;
    /**
     * This field is applicable only when `type`==`match` * `false`: means it is sufficient to match any of the values (i.e.,
     * match-any behavior) * `true`: means all values should be matched (i.e., match-all behavior) Currently it makes sense to
     * set this field to `true` only if the `match`==`idp_role` or `match`==`usermac_label`'
     */
    matchAll?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    /**
     * if `type`==`radius_attrs`, user can specify a list of one or more standard attributes in the field "radius_attrs". It is
     * the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected. Note
     * that it is allowed to have more than one radius_attrs in the result of a given rule.
     */
    radiusAttrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * if `type`==`radius_group`
     */
    radiusGroup?: pulumi.Input<string>;
    /**
     * if `type`==`radius_vendor_attrs`, user can specify a list of one or more vendor-specific attributes in the field
     * "radius_vendor_attrs". It is the responsibility of the user to provide a syntactically correct string, otherwise it may
     * not work as expected. Note that it is allowed to have more than one radius_vendor_attrs in the result of a given rule.
     */
    radiusVendorAttrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * if `type`==`session_timeout, in seconds
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`,
     * `vlan`
     */
    type: pulumi.Input<string>;
    /**
     * if `type`==`match`
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * if `type`==`vlan`
     */
    vlan?: pulumi.Input<string>;
}
