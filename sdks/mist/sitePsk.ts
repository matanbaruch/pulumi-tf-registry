// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SitePsk extends pulumi.CustomResource {
    /**
     * Get an existing SitePsk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SitePskState, opts?: pulumi.CustomResourceOptions): SitePsk {
        return new SitePsk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mist:index/sitePsk:SitePsk';

    /**
     * Returns true if the given object is an instance of SitePsk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SitePsk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SitePsk.__pulumiType;
    }

    /**
     * email to send psk expiring notifications to
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)
     */
    public readonly expireTime!: pulumi.Output<number>;
    /**
     * Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to
     * expire
     */
    public readonly expiryNotificationTime!: pulumi.Output<number | undefined>;
    /**
     * if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`
     */
    public readonly mac!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly note!: pulumi.Output<string | undefined>;
    /**
     * If set to true, reminder notification will be sent when psk is about to expire
     */
    public readonly notifyExpiry!: pulumi.Output<boolean>;
    /**
     * If set to true, notification will be sent when psk is created or edited
     */
    public readonly notifyOnCreateOrEdit!: pulumi.Output<boolean | undefined>;
    /**
     * previous passphrase of the PSK if it has been rotated
     */
    public readonly oldPassphrase!: pulumi.Output<string | undefined>;
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * passphrase of the PSK (8-63 character or 64 in hex)
     */
    public readonly passphrase!: pulumi.Output<string>;
    public readonly role!: pulumi.Output<string | undefined>;
    public readonly siteId!: pulumi.Output<string>;
    /**
     * SSID this PSK should be applicable to
     */
    public readonly ssid!: pulumi.Output<string>;
    /**
     * enum: `multi`, `single`
     */
    public readonly usage!: pulumi.Output<string>;
    public readonly vlanId!: pulumi.Output<string | undefined>;

    /**
     * Create a SitePsk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SitePskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SitePskArgs | SitePskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SitePskState | undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["expiryNotificationTime"] = state ? state.expiryNotificationTime : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["note"] = state ? state.note : undefined;
            resourceInputs["notifyExpiry"] = state ? state.notifyExpiry : undefined;
            resourceInputs["notifyOnCreateOrEdit"] = state ? state.notifyOnCreateOrEdit : undefined;
            resourceInputs["oldPassphrase"] = state ? state.oldPassphrase : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["ssid"] = state ? state.ssid : undefined;
            resourceInputs["usage"] = state ? state.usage : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as SitePskArgs | undefined;
            if ((!args || args.passphrase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'passphrase'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.ssid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ssid'");
            }
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["expireTime"] = args ? args.expireTime : undefined;
            resourceInputs["expiryNotificationTime"] = args ? args.expiryNotificationTime : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["note"] = args ? args.note : undefined;
            resourceInputs["notifyExpiry"] = args ? args.notifyExpiry : undefined;
            resourceInputs["notifyOnCreateOrEdit"] = args ? args.notifyOnCreateOrEdit : undefined;
            resourceInputs["oldPassphrase"] = args?.oldPassphrase ? pulumi.secret(args.oldPassphrase) : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["ssid"] = args ? args.ssid : undefined;
            resourceInputs["usage"] = args ? args.usage : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["orgId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["oldPassphrase", "passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SitePsk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SitePsk resources.
 */
export interface SitePskState {
    /**
     * email to send psk expiring notifications to
     */
    email?: pulumi.Input<string>;
    /**
     * Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)
     */
    expireTime?: pulumi.Input<number>;
    /**
     * Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to
     * expire
     */
    expiryNotificationTime?: pulumi.Input<number>;
    /**
     * if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`
     */
    mac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    note?: pulumi.Input<string>;
    /**
     * If set to true, reminder notification will be sent when psk is about to expire
     */
    notifyExpiry?: pulumi.Input<boolean>;
    /**
     * If set to true, notification will be sent when psk is created or edited
     */
    notifyOnCreateOrEdit?: pulumi.Input<boolean>;
    /**
     * previous passphrase of the PSK if it has been rotated
     */
    oldPassphrase?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    /**
     * passphrase of the PSK (8-63 character or 64 in hex)
     */
    passphrase?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    /**
     * SSID this PSK should be applicable to
     */
    ssid?: pulumi.Input<string>;
    /**
     * enum: `multi`, `single`
     */
    usage?: pulumi.Input<string>;
    vlanId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SitePsk resource.
 */
export interface SitePskArgs {
    /**
     * email to send psk expiring notifications to
     */
    email?: pulumi.Input<string>;
    /**
     * Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)
     */
    expireTime?: pulumi.Input<number>;
    /**
     * Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to
     * expire
     */
    expiryNotificationTime?: pulumi.Input<number>;
    /**
     * if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`
     */
    mac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    note?: pulumi.Input<string>;
    /**
     * If set to true, reminder notification will be sent when psk is about to expire
     */
    notifyExpiry?: pulumi.Input<boolean>;
    /**
     * If set to true, notification will be sent when psk is created or edited
     */
    notifyOnCreateOrEdit?: pulumi.Input<boolean>;
    /**
     * previous passphrase of the PSK if it has been rotated
     */
    oldPassphrase?: pulumi.Input<string>;
    /**
     * passphrase of the PSK (8-63 character or 64 in hex)
     */
    passphrase: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    /**
     * SSID this PSK should be applicable to
     */
    ssid: pulumi.Input<string>;
    /**
     * enum: `multi`, `single`
     */
    usage?: pulumi.Input<string>;
    vlanId?: pulumi.Input<string>;
}
