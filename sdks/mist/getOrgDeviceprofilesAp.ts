// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOrgDeviceprofilesAp(args: GetOrgDeviceprofilesApArgs, opts?: pulumi.InvokeOptions): Promise<GetOrgDeviceprofilesApResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mist:index/getOrgDeviceprofilesAp:getOrgDeviceprofilesAp", {
        "orgId": args.orgId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOrgDeviceprofilesAp.
 */
export interface GetOrgDeviceprofilesApArgs {
    orgId: string;
}

/**
 * A collection of values returned by getOrgDeviceprofilesAp.
 */
export interface GetOrgDeviceprofilesApResult {
    readonly deviceprofiles: outputs.GetOrgDeviceprofilesApDeviceprofile[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly orgId: string;
}
export function getOrgDeviceprofilesApOutput(args: GetOrgDeviceprofilesApOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOrgDeviceprofilesApResult> {
    return pulumi.output(args).apply((a: any) => getOrgDeviceprofilesAp(a, opts))
}

/**
 * A collection of arguments for invoking getOrgDeviceprofilesAp.
 */
export interface GetOrgDeviceprofilesApOutputArgs {
    orgId: pulumi.Input<string>;
}
