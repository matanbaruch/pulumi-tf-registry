// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOrgNactags(args: GetOrgNactagsArgs, opts?: pulumi.InvokeOptions): Promise<GetOrgNactagsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mist:index/getOrgNactags:getOrgNactags", {
        "limit": args.limit,
        "match": args.match,
        "name": args.name,
        "orgId": args.orgId,
        "page": args.page,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOrgNactags.
 */
export interface GetOrgNactagsArgs {
    limit?: number;
    match?: string;
    name?: string;
    orgId: string;
    page?: number;
    type?: string;
}

/**
 * A collection of values returned by getOrgNactags.
 */
export interface GetOrgNactagsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly limit?: number;
    readonly match?: string;
    readonly name?: string;
    readonly orgId: string;
    readonly orgNactags: outputs.GetOrgNactagsOrgNactag[];
    readonly page?: number;
    readonly type?: string;
}
export function getOrgNactagsOutput(args: GetOrgNactagsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOrgNactagsResult> {
    return pulumi.output(args).apply((a: any) => getOrgNactags(a, opts))
}

/**
 * A collection of arguments for invoking getOrgNactags.
 */
export interface GetOrgNactagsOutputArgs {
    limit?: pulumi.Input<number>;
    match?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    page?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}
