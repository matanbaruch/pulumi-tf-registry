// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Password extends pulumi.CustomResource {
    /**
     * Get an existing Password resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PasswordState, opts?: pulumi.CustomResourceOptions): Password {
        return new Password(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pass:index/password:Password';

    /**
     * Returns true if the given object is an instance of Password.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Password {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Password.__pulumiType;
    }

    /**
     * Body of the secret
     */
    public /*out*/ readonly body!: pulumi.Output<string>;
    /**
     * Additional key-value data
     */
    public readonly data!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Entire secret contents
     */
    public /*out*/ readonly full!: pulumi.Output<string>;
    /**
     * Secret password
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Full path where the pass data will be written
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * YAML encoded data
     */
    public readonly yaml!: pulumi.Output<string | undefined>;

    /**
     * Create a Password resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PasswordArgs | PasswordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PasswordState | undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["full"] = state ? state.full : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["yaml"] = state ? state.yaml : undefined;
        } else {
            const args = argsOrState as PasswordArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["data"] = args?.data ? pulumi.secret(args.data) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["yaml"] = args?.yaml ? pulumi.secret(args.yaml) : undefined;
            resourceInputs["body"] = undefined /*out*/;
            resourceInputs["full"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["data", "password", "yaml"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Password.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Password resources.
 */
export interface PasswordState {
    /**
     * Body of the secret
     */
    body?: pulumi.Input<string>;
    /**
     * Additional key-value data
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Entire secret contents
     */
    full?: pulumi.Input<string>;
    /**
     * Secret password
     */
    password?: pulumi.Input<string>;
    /**
     * Full path where the pass data will be written
     */
    path?: pulumi.Input<string>;
    /**
     * YAML encoded data
     */
    yaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Password resource.
 */
export interface PasswordArgs {
    /**
     * Additional key-value data
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Secret password
     */
    password?: pulumi.Input<string>;
    /**
     * Full path where the pass data will be written
     */
    path: pulumi.Input<string>;
    /**
     * YAML encoded data
     */
    yaml?: pulumi.Input<string>;
}
