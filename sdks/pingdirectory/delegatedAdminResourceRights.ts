// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DelegatedAdminResourceRights extends pulumi.CustomResource {
    /**
     * Get an existing DelegatedAdminResourceRights resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DelegatedAdminResourceRightsState, opts?: pulumi.CustomResourceOptions): DelegatedAdminResourceRights {
        return new DelegatedAdminResourceRights(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/delegatedAdminResourceRights:DelegatedAdminResourceRights';

    /**
     * Returns true if the given object is an instance of DelegatedAdminResourceRights.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DelegatedAdminResourceRights {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DelegatedAdminResourceRights.__pulumiType;
    }

    /**
     * Specifies administrator(s) permissions.
     */
    public readonly adminPermissions!: pulumi.Output<string[]>;
    /**
     * Specifies the scope of these Delegated Admin Resource Rights.
     */
    public readonly adminScope!: pulumi.Output<string>;
    /**
     * Name of the parent Delegated Admin Rights
     */
    public readonly delegatedAdminRightsName!: pulumi.Output<string>;
    /**
     * A description for this Delegated Admin Resource Rights
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether these Delegated Admin Resource Rights are enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DelegatedAdminResourceRightsRequiredAction[]>;
    /**
     * Specifies subtrees within the search base whose entries can be managed by the administrator(s). The admin-scope must be
     * set to resources-in-specific-subtrees.
     */
    public readonly resourceSubtrees!: pulumi.Output<string[]>;
    /**
     * Specifies groups whose members can be managed by the administrator(s). The admin-scope must be set to
     * resources-in-specific-groups.
     */
    public readonly resourcesInGroups!: pulumi.Output<string[]>;
    /**
     * Specifies the resource type applicable to these Delegated Admin Resource Rights.
     */
    public readonly restResourceType!: pulumi.Output<string>;
    /**
     * The type of Delegated Admin Resource Rights resource. Options are ['delegated-admin-resource-rights']
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a DelegatedAdminResourceRights resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DelegatedAdminResourceRightsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DelegatedAdminResourceRightsArgs | DelegatedAdminResourceRightsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DelegatedAdminResourceRightsState | undefined;
            resourceInputs["adminPermissions"] = state ? state.adminPermissions : undefined;
            resourceInputs["adminScope"] = state ? state.adminScope : undefined;
            resourceInputs["delegatedAdminRightsName"] = state ? state.delegatedAdminRightsName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["resourceSubtrees"] = state ? state.resourceSubtrees : undefined;
            resourceInputs["resourcesInGroups"] = state ? state.resourcesInGroups : undefined;
            resourceInputs["restResourceType"] = state ? state.restResourceType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DelegatedAdminResourceRightsArgs | undefined;
            if ((!args || args.delegatedAdminRightsName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'delegatedAdminRightsName'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.restResourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restResourceType'");
            }
            resourceInputs["adminPermissions"] = args ? args.adminPermissions : undefined;
            resourceInputs["adminScope"] = args ? args.adminScope : undefined;
            resourceInputs["delegatedAdminRightsName"] = args ? args.delegatedAdminRightsName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["resourceSubtrees"] = args ? args.resourceSubtrees : undefined;
            resourceInputs["resourcesInGroups"] = args ? args.resourcesInGroups : undefined;
            resourceInputs["restResourceType"] = args ? args.restResourceType : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DelegatedAdminResourceRights.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DelegatedAdminResourceRights resources.
 */
export interface DelegatedAdminResourceRightsState {
    /**
     * Specifies administrator(s) permissions.
     */
    adminPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the scope of these Delegated Admin Resource Rights.
     */
    adminScope?: pulumi.Input<string>;
    /**
     * Name of the parent Delegated Admin Rights
     */
    delegatedAdminRightsName?: pulumi.Input<string>;
    /**
     * A description for this Delegated Admin Resource Rights
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether these Delegated Admin Resource Rights are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DelegatedAdminResourceRightsRequiredAction>[]>;
    /**
     * Specifies subtrees within the search base whose entries can be managed by the administrator(s). The admin-scope must be
     * set to resources-in-specific-subtrees.
     */
    resourceSubtrees?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies groups whose members can be managed by the administrator(s). The admin-scope must be set to
     * resources-in-specific-groups.
     */
    resourcesInGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the resource type applicable to these Delegated Admin Resource Rights.
     */
    restResourceType?: pulumi.Input<string>;
    /**
     * The type of Delegated Admin Resource Rights resource. Options are ['delegated-admin-resource-rights']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DelegatedAdminResourceRights resource.
 */
export interface DelegatedAdminResourceRightsArgs {
    /**
     * Specifies administrator(s) permissions.
     */
    adminPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the scope of these Delegated Admin Resource Rights.
     */
    adminScope?: pulumi.Input<string>;
    /**
     * Name of the parent Delegated Admin Rights
     */
    delegatedAdminRightsName: pulumi.Input<string>;
    /**
     * A description for this Delegated Admin Resource Rights
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether these Delegated Admin Resource Rights are enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Specifies subtrees within the search base whose entries can be managed by the administrator(s). The admin-scope must be
     * set to resources-in-specific-subtrees.
     */
    resourceSubtrees?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies groups whose members can be managed by the administrator(s). The admin-scope must be set to
     * resources-in-specific-groups.
     */
    resourcesInGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the resource type applicable to these Delegated Admin Resource Rights.
     */
    restResourceType: pulumi.Input<string>;
    /**
     * The type of Delegated Admin Resource Rights resource. Options are ['delegated-admin-resource-rights']
     */
    type?: pulumi.Input<string>;
}
