// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultReplicationDomain extends pulumi.CustomResource {
    /**
     * Get an existing DefaultReplicationDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultReplicationDomainState, opts?: pulumi.CustomResourceOptions): DefaultReplicationDomain {
        return new DefaultReplicationDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultReplicationDomain:DefaultReplicationDomain';

    /**
     * Returns true if the given object is an instance of DefaultReplicationDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultReplicationDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultReplicationDomain.__pulumiType;
    }

    /**
     * Specifies the base DN of the replicated data.
     */
    public readonly baseDn!: pulumi.Output<string>;
    /**
     * Defines how long to wait before retrying certain operations, specifically operations that might have failed because they
     * depend on an operation from a different server that has not yet replicated to this instance.
     */
    public readonly dependentOpsReplayFailureWaitTime!: pulumi.Output<string>;
    /**
     * Specifies the heartbeat interval that the Directory Server will use when communicating with Replication Servers.
     */
    public readonly heartbeatInterval!: pulumi.Output<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Determines how the server responds when replication detects that
     * some changes might have been missed. Each missing changes policy is a set of missing changes actions to take for a set
     * of missing changes types. The value configured here only applies to this particular replication domain.
     */
    public readonly missingChangesPolicy!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Defines the maximum time to retry a failed operation. An operation will be retried only if it appears that the failure
     * might be dependent on an earlier operation from a different server that hasn't replicated yet. The frequency of the
     * retry is determined by the dependent-ops-replay-failure-wait-time property.
     */
    public readonly onReplayFailureWaitForDependentOpsTimeout!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultReplicationDomainRequiredAction[]>;
    /**
     * When set to true, changes are only replicated with server instances that belong to the same replication set.
     */
    public readonly restricted!: pulumi.Output<boolean>;
    /**
     * Specifies a unique identifier for the Directory Server within the Replication Domain.
     */
    public readonly serverId!: pulumi.Output<number>;
    /**
     * The time in seconds after which historical information used in replication conflict resolution is purged. The
     * information is removed from entries when they are modified after the purge delay has elapsed.
     */
    public readonly syncHistPurgeDelay!: pulumi.Output<string>;
    /**
     * Name of the parent Synchronization Provider
     */
    public readonly synchronizationProviderName!: pulumi.Output<string>;
    /**
     * The type of Replication Domain resource. Options are ['replication-domain']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of replication updates the Directory Server can have outstanding from the Replication
     * Server.
     */
    public readonly windowSize!: pulumi.Output<number>;

    /**
     * Create a DefaultReplicationDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultReplicationDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultReplicationDomainArgs | DefaultReplicationDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultReplicationDomainState | undefined;
            resourceInputs["baseDn"] = state ? state.baseDn : undefined;
            resourceInputs["dependentOpsReplayFailureWaitTime"] = state ? state.dependentOpsReplayFailureWaitTime : undefined;
            resourceInputs["heartbeatInterval"] = state ? state.heartbeatInterval : undefined;
            resourceInputs["missingChangesPolicy"] = state ? state.missingChangesPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["onReplayFailureWaitForDependentOpsTimeout"] = state ? state.onReplayFailureWaitForDependentOpsTimeout : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["restricted"] = state ? state.restricted : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["syncHistPurgeDelay"] = state ? state.syncHistPurgeDelay : undefined;
            resourceInputs["synchronizationProviderName"] = state ? state.synchronizationProviderName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["windowSize"] = state ? state.windowSize : undefined;
        } else {
            const args = argsOrState as DefaultReplicationDomainArgs | undefined;
            if ((!args || args.synchronizationProviderName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'synchronizationProviderName'");
            }
            resourceInputs["baseDn"] = args ? args.baseDn : undefined;
            resourceInputs["dependentOpsReplayFailureWaitTime"] = args ? args.dependentOpsReplayFailureWaitTime : undefined;
            resourceInputs["heartbeatInterval"] = args ? args.heartbeatInterval : undefined;
            resourceInputs["missingChangesPolicy"] = args ? args.missingChangesPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onReplayFailureWaitForDependentOpsTimeout"] = args ? args.onReplayFailureWaitForDependentOpsTimeout : undefined;
            resourceInputs["restricted"] = args ? args.restricted : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["syncHistPurgeDelay"] = args ? args.syncHistPurgeDelay : undefined;
            resourceInputs["synchronizationProviderName"] = args ? args.synchronizationProviderName : undefined;
            resourceInputs["windowSize"] = args ? args.windowSize : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultReplicationDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultReplicationDomain resources.
 */
export interface DefaultReplicationDomainState {
    /**
     * Specifies the base DN of the replicated data.
     */
    baseDn?: pulumi.Input<string>;
    /**
     * Defines how long to wait before retrying certain operations, specifically operations that might have failed because they
     * depend on an operation from a different server that has not yet replicated to this instance.
     */
    dependentOpsReplayFailureWaitTime?: pulumi.Input<string>;
    /**
     * Specifies the heartbeat interval that the Directory Server will use when communicating with Replication Servers.
     */
    heartbeatInterval?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Determines how the server responds when replication detects that
     * some changes might have been missed. Each missing changes policy is a set of missing changes actions to take for a set
     * of missing changes types. The value configured here only applies to this particular replication domain.
     */
    missingChangesPolicy?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines the maximum time to retry a failed operation. An operation will be retried only if it appears that the failure
     * might be dependent on an earlier operation from a different server that hasn't replicated yet. The frequency of the
     * retry is determined by the dependent-ops-replay-failure-wait-time property.
     */
    onReplayFailureWaitForDependentOpsTimeout?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultReplicationDomainRequiredAction>[]>;
    /**
     * When set to true, changes are only replicated with server instances that belong to the same replication set.
     */
    restricted?: pulumi.Input<boolean>;
    /**
     * Specifies a unique identifier for the Directory Server within the Replication Domain.
     */
    serverId?: pulumi.Input<number>;
    /**
     * The time in seconds after which historical information used in replication conflict resolution is purged. The
     * information is removed from entries when they are modified after the purge delay has elapsed.
     */
    syncHistPurgeDelay?: pulumi.Input<string>;
    /**
     * Name of the parent Synchronization Provider
     */
    synchronizationProviderName?: pulumi.Input<string>;
    /**
     * The type of Replication Domain resource. Options are ['replication-domain']
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of replication updates the Directory Server can have outstanding from the Replication
     * Server.
     */
    windowSize?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DefaultReplicationDomain resource.
 */
export interface DefaultReplicationDomainArgs {
    /**
     * Specifies the base DN of the replicated data.
     */
    baseDn?: pulumi.Input<string>;
    /**
     * Defines how long to wait before retrying certain operations, specifically operations that might have failed because they
     * depend on an operation from a different server that has not yet replicated to this instance.
     */
    dependentOpsReplayFailureWaitTime?: pulumi.Input<string>;
    /**
     * Specifies the heartbeat interval that the Directory Server will use when communicating with Replication Servers.
     */
    heartbeatInterval?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Determines how the server responds when replication detects that
     * some changes might have been missed. Each missing changes policy is a set of missing changes actions to take for a set
     * of missing changes types. The value configured here only applies to this particular replication domain.
     */
    missingChangesPolicy?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the maximum time to retry a failed operation. An operation will be retried only if it appears that the failure
     * might be dependent on an earlier operation from a different server that hasn't replicated yet. The frequency of the
     * retry is determined by the dependent-ops-replay-failure-wait-time property.
     */
    onReplayFailureWaitForDependentOpsTimeout?: pulumi.Input<string>;
    /**
     * When set to true, changes are only replicated with server instances that belong to the same replication set.
     */
    restricted?: pulumi.Input<boolean>;
    /**
     * Specifies a unique identifier for the Directory Server within the Replication Domain.
     */
    serverId?: pulumi.Input<number>;
    /**
     * The time in seconds after which historical information used in replication conflict resolution is purged. The
     * information is removed from entries when they are modified after the purge delay has elapsed.
     */
    syncHistPurgeDelay?: pulumi.Input<string>;
    /**
     * Name of the parent Synchronization Provider
     */
    synchronizationProviderName: pulumi.Input<string>;
    /**
     * Specifies the maximum number of replication updates the Directory Server can have outstanding from the Replication
     * Server.
     */
    windowSize?: pulumi.Input<number>;
}
