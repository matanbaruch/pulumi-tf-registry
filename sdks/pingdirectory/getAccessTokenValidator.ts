// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getAccessTokenValidator(args: GetAccessTokenValidatorArgs, opts?: pulumi.InvokeOptions): Promise<GetAccessTokenValidatorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getAccessTokenValidator:getAccessTokenValidator", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAccessTokenValidator.
 */
export interface GetAccessTokenValidatorArgs {
    name: string;
}

/**
 * A collection of values returned by getAccessTokenValidator.
 */
export interface GetAccessTokenValidatorResult {
    readonly accessTokenManagerId: string;
    readonly allowedAuthenticationTypes: string[];
    readonly allowedContentEncryptionAlgorithms: string[];
    readonly allowedKeyEncryptionAlgorithms: string[];
    readonly allowedSaslMechanisms: string[];
    readonly allowedSigningAlgorithms: string[];
    readonly authorizationServer: string;
    readonly clientId: string;
    readonly clientIdClaimName: string;
    readonly clientSecret: string;
    readonly clientSecretPassphraseProvider: string;
    readonly clockSkewGracePeriod: string;
    readonly description: string;
    readonly enabled: boolean;
    readonly encryptionKeyPair: string;
    readonly endpointCacheRefresh: string;
    readonly evaluationOrderIndex: number;
    readonly extensionArguments: string[];
    readonly extensionClass: string;
    readonly generateTokenResultCriteria: string;
    readonly id: string;
    readonly identityMapper: string;
    readonly includeAudParameter: boolean;
    readonly includedScopes: string[];
    readonly jwksEndpointPath: string;
    readonly maximumTokenLifetime: string;
    readonly name: string;
    readonly persistAccessTokens: boolean;
    readonly scopeClaimName: string;
    readonly signingCertificates: string[];
    readonly subjectClaimName: string;
    readonly type: string;
}
export function getAccessTokenValidatorOutput(args: GetAccessTokenValidatorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAccessTokenValidatorResult> {
    return pulumi.output(args).apply((a: any) => getAccessTokenValidator(a, opts))
}

/**
 * A collection of arguments for invoking getAccessTokenValidator.
 */
export interface GetAccessTokenValidatorOutputArgs {
    name: pulumi.Input<string>;
}
