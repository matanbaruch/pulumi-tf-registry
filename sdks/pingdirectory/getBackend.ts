// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getBackend(args: GetBackendArgs, opts?: pulumi.InvokeOptions): Promise<GetBackendResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getBackend:getBackend", {
        "backendId": args.backendId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBackend.
 */
export interface GetBackendArgs {
    backendId: string;
}

/**
 * A collection of values returned by getBackend.
 */
export interface GetBackendResult {
    readonly alarmRetentionTime: string;
    readonly alertRetentionTime: string;
    readonly applyAccessControlsToChangelogEntryContents: boolean;
    readonly backendId: string;
    readonly backgroundPrime: boolean;
    readonly backupDirectories: string[];
    readonly backupFilePermissions: string;
    readonly baseDns: string[];
    readonly changelogDeletedEntryExcludeAttributes: string[];
    readonly changelogDeletedEntryIncludeAttributes: string[];
    readonly changelogEntryExcludeBaseDns: string[];
    readonly changelogEntryExcludeFilters: string[];
    readonly changelogEntryIncludeBaseDns: string[];
    readonly changelogEntryIncludeFilters: string[];
    readonly changelogExcludeAttributes: string[];
    readonly changelogIncludeAttributes: string[];
    readonly changelogIncludeKeyAttributes: string[];
    readonly changelogMaxBeforeAfterValues: number;
    readonly changelogMaximumAge: string;
    readonly changelogPurgeBatchSize: number;
    readonly changelogWriteBatchSize: number;
    readonly changelogWriteQueueCapacity: number;
    readonly compactCommonParentDns: string[];
    readonly compositeIndexEntryLimit: number;
    readonly compressEntries: boolean;
    readonly dbBackgroundSyncInterval: string;
    readonly dbCachePercent: number;
    readonly dbCheckpointerWakeupInterval: string;
    readonly dbCleanerMinUtilization: number;
    readonly dbDirectory: string;
    readonly dbDirectoryPermissions: string;
    readonly dbEvictorCriticalPercentage: number;
    readonly dbImportCachePercent: number;
    readonly dbLogFileMax: string;
    readonly dbLoggingLevel: string;
    readonly dbNumCleanerThreads: number;
    readonly dbTxnWriteNoSync: boolean;
    readonly dbUseThreadLocalHandles: boolean;
    readonly deadlockRetryLimit: number;
    readonly defaultCacheMode: string;
    readonly description: string;
    readonly disabledAlertTypes: string[];
    readonly dn2idCacheMode: string;
    readonly dn2uriCacheMode: string;
    readonly enabled: boolean;
    readonly exportThreadCount: number;
    readonly externalTxnDefaultBackendLockBehavior: string;
    readonly hashEntries: boolean;
    readonly id: string;
    readonly id2childrenCacheMode: string;
    readonly id2childrenIndexEntryLimit: number;
    readonly id2entryCacheMode: string;
    readonly id2subtreeCacheMode: string;
    readonly id2subtreeIndexEntryLimit: number;
    readonly importTempDirectory: string;
    readonly importThreadCount: number;
    readonly includeVirtualAttributes: string[];
    readonly indexEntryLimit: number;
    readonly indexExcludeAttributes: string[];
    readonly indexIncludeAttributes: string[];
    readonly insignificantConfigArchiveAttributes: string[];
    readonly insignificantConfigArchiveBaseDns: string[];
    readonly isPrivateBackend: boolean;
    readonly jeProperties: string[];
    readonly ldifFile: string;
    readonly maintainConfigArchive: boolean;
    readonly maxAlarms: number;
    readonly maxAlerts: number;
    readonly maxConfigArchiveCount: number;
    readonly maximumFinalTaskLogMessagesToRetain: number;
    readonly maximumInitialTaskLogMessagesToRetain: number;
    readonly metricsDir: string;
    readonly mirroredSubtreeEntryUpdateTimeout: string;
    readonly mirroredSubtreePeerPollingInterval: string;
    readonly mirroredSubtreeSearchTimeout: string;
    readonly notificationManager: string;
    readonly notificationSenderAddress: string;
    readonly numRecentChanges: number;
    readonly offlineProcessDatabaseOpenTimeout: string;
    readonly primeAllIndexes: boolean;
    readonly primeMethods: string[];
    readonly primeThreadCount: number;
    readonly primeTimeLimit: string;
    readonly processFiltersWithUndefinedAttributeTypes: boolean;
    readonly readOnlySchemaFiles: string[];
    readonly reportExcludedChangelogAttributes: string;
    readonly retentionPolicies: string[];
    readonly returnUnavailableForUntrustedIndex: boolean;
    readonly returnUnavailableWhenDisabled: boolean;
    readonly sampleFlushInterval: string;
    readonly schemaEntryDns: string[];
    readonly setDegradedAlertForUntrustedIndex: boolean;
    readonly setDegradedAlertWhenDisabled: boolean;
    readonly showAllAttributes: boolean;
    readonly simplePagedResultsIdSetCacheDuration: string;
    readonly singleWriterLockBehavior: string;
    readonly softDeleteEntryIncludedOperations: string[];
    readonly storageDir: string;
    readonly subtreeDeleteSizeLimit: number;
    readonly subtreeModifyDnSizeLimit: number;
    readonly systemIndexToPrimeInternalNodesOnlies: string[];
    readonly systemIndexToPrimes: string[];
    readonly targetDatabaseSize: string;
    readonly taskBackingFile: string;
    readonly taskRetentionTime: string;
    readonly trustStoreFile: string;
    readonly trustStorePin: string;
    readonly trustStorePinFile: string;
    readonly trustStorePinPassphraseProvider: string;
    readonly trustStoreType: string;
    readonly type: string;
    readonly uncachedAttributeCriteria: string;
    readonly uncachedEntryCriteria: string;
    readonly uncachedId2entryCacheMode: string;
    readonly useReversibleForm: boolean;
    readonly writabilityMode: string;
    readonly writeLastmodAttributes: boolean;
}
export function getBackendOutput(args: GetBackendOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBackendResult> {
    return pulumi.output(args).apply((a: any) => getBackend(a, opts))
}

/**
 * A collection of arguments for invoking getBackend.
 */
export interface GetBackendOutputArgs {
    backendId: pulumi.Input<string>;
}
