// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultKeyPair extends pulumi.CustomResource {
    /**
     * Get an existing DefaultKeyPair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultKeyPairState, opts?: pulumi.CustomResourceOptions): DefaultKeyPair {
        return new DefaultKeyPair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultKeyPair:DefaultKeyPair';

    /**
     * Returns true if the given object is an instance of DefaultKeyPair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultKeyPair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultKeyPair.__pulumiType;
    }

    /**
     * The PEM-encoded X.509 certificate chain.
     */
    public readonly certificateChain!: pulumi.Output<string>;
    /**
     * The algorithm name and the length in bits of the key, e.g. RSA_2048.
     */
    public readonly keyAlgorithm!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * The base64-encoded private key that is encrypted using the preferred encryption settings definition.
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultKeyPairRequiredAction[]>;
    /**
     * The validity period for a self-signed certificate. If not specified, the self-signed certificate will be valid for
     * approximately 20 years. This is not used when importing an existing key-pair. The system will not automatically rotate
     * expired certificates. It is up to the administrator to do that when that happens.
     */
    public readonly selfSignedCertificateValidity!: pulumi.Output<string>;
    /**
     * The DN that should be used as the subject for the self-signed certificate and certificate signing request. This is not
     * used when importing an existing key-pair.
     */
    public readonly subjectDn!: pulumi.Output<string>;
    /**
     * The type of Key Pair resource. Options are ['key-pair']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultKeyPair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultKeyPairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultKeyPairArgs | DefaultKeyPairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultKeyPairState | undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["keyAlgorithm"] = state ? state.keyAlgorithm : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["selfSignedCertificateValidity"] = state ? state.selfSignedCertificateValidity : undefined;
            resourceInputs["subjectDn"] = state ? state.subjectDn : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultKeyPairArgs | undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["keyAlgorithm"] = args ? args.keyAlgorithm : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["selfSignedCertificateValidity"] = args ? args.selfSignedCertificateValidity : undefined;
            resourceInputs["subjectDn"] = args ? args.subjectDn : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DefaultKeyPair.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultKeyPair resources.
 */
export interface DefaultKeyPairState {
    /**
     * The PEM-encoded X.509 certificate chain.
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * The algorithm name and the length in bits of the key, e.g. RSA_2048.
     */
    keyAlgorithm?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The base64-encoded private key that is encrypted using the preferred encryption settings definition.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultKeyPairRequiredAction>[]>;
    /**
     * The validity period for a self-signed certificate. If not specified, the self-signed certificate will be valid for
     * approximately 20 years. This is not used when importing an existing key-pair. The system will not automatically rotate
     * expired certificates. It is up to the administrator to do that when that happens.
     */
    selfSignedCertificateValidity?: pulumi.Input<string>;
    /**
     * The DN that should be used as the subject for the self-signed certificate and certificate signing request. This is not
     * used when importing an existing key-pair.
     */
    subjectDn?: pulumi.Input<string>;
    /**
     * The type of Key Pair resource. Options are ['key-pair']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultKeyPair resource.
 */
export interface DefaultKeyPairArgs {
    /**
     * The PEM-encoded X.509 certificate chain.
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * The algorithm name and the length in bits of the key, e.g. RSA_2048.
     */
    keyAlgorithm?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * The base64-encoded private key that is encrypted using the preferred encryption settings definition.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The validity period for a self-signed certificate. If not specified, the self-signed certificate will be valid for
     * approximately 20 years. This is not used when importing an existing key-pair. The system will not automatically rotate
     * expired certificates. It is up to the administrator to do that when that happens.
     */
    selfSignedCertificateValidity?: pulumi.Input<string>;
    /**
     * The DN that should be used as the subject for the self-signed certificate and certificate signing request. This is not
     * used when importing an existing key-pair.
     */
    subjectDn?: pulumi.Input<string>;
}
