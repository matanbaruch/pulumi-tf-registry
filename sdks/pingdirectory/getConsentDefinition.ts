// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getConsentDefinition(args: GetConsentDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetConsentDefinitionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getConsentDefinition:getConsentDefinition", {
        "uniqueId": args.uniqueId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getConsentDefinition.
 */
export interface GetConsentDefinitionArgs {
    uniqueId: string;
}

/**
 * A collection of values returned by getConsentDefinition.
 */
export interface GetConsentDefinitionResult {
    readonly description: string;
    readonly displayName: string;
    readonly id: string;
    readonly parameters: string[];
    readonly type: string;
    readonly uniqueId: string;
}
export function getConsentDefinitionOutput(args: GetConsentDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConsentDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getConsentDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getConsentDefinition.
 */
export interface GetConsentDefinitionOutputArgs {
    uniqueId: pulumi.Input<string>;
}
