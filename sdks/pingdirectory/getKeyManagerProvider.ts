// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getKeyManagerProvider(args: GetKeyManagerProviderArgs, opts?: pulumi.InvokeOptions): Promise<GetKeyManagerProviderResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getKeyManagerProvider:getKeyManagerProvider", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKeyManagerProvider.
 */
export interface GetKeyManagerProviderArgs {
    name: string;
}

/**
 * A collection of values returned by getKeyManagerProvider.
 */
export interface GetKeyManagerProviderResult {
    readonly description: string;
    readonly enabled: boolean;
    readonly extensionArguments: string[];
    readonly extensionClass: string;
    readonly id: string;
    readonly keyStoreFile: string;
    readonly keyStorePin: string;
    readonly keyStorePinFile: string;
    readonly keyStorePinPassphraseProvider: string;
    readonly keyStoreType: string;
    readonly name: string;
    readonly pkcs11KeyStoreType: string;
    readonly pkcs11MaxCacheDuration: string;
    readonly pkcs11ProviderClass: string;
    readonly pkcs11ProviderConfigurationFile: string;
    readonly privateKeyPin: string;
    readonly privateKeyPinFile: string;
    readonly privateKeyPinPassphraseProvider: string;
    readonly type: string;
}
export function getKeyManagerProviderOutput(args: GetKeyManagerProviderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKeyManagerProviderResult> {
    return pulumi.output(args).apply((a: any) => getKeyManagerProvider(a, opts))
}

/**
 * A collection of arguments for invoking getKeyManagerProvider.
 */
export interface GetKeyManagerProviderOutputArgs {
    name: pulumi.Input<string>;
}
