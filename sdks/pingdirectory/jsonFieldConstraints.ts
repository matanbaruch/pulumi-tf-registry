// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class JsonFieldConstraints extends pulumi.CustomResource {
    /**
     * Get an existing JsonFieldConstraints resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JsonFieldConstraintsState, opts?: pulumi.CustomResourceOptions): JsonFieldConstraints {
        return new JsonFieldConstraints(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/jsonFieldConstraints:JsonFieldConstraints';

    /**
     * Returns true if the given object is an instance of JsonFieldConstraints.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JsonFieldConstraints {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JsonFieldConstraints.__pulumiType;
    }

    /**
     * Indicates whether the target field may have a value that is an empty JSON object (i.e., a JSON object with zero fields).
     * This may only be set to true if value-type property is set to object.
     */
    public readonly allowEmptyObject!: pulumi.Output<boolean>;
    /**
     * Indicates whether the target field may have a value that is the JSON null value as an alternative to a value (or array
     * of values) of the specified value-type.
     */
    public readonly allowNullValue!: pulumi.Output<boolean>;
    /**
     * Specifies an explicit set of regular expressions that may be used to restrict the set of values that may be used for the
     * target field. If a set of allowed value regular expressions is defined, then the server will reject any attempt to store
     * a JSON object with a value for the target field that does not match at least one of those regular expressions.
     */
    public readonly allowedValueRegularExpressions!: pulumi.Output<string[]>;
    /**
     * Specifies an explicit set of string values that will be the only values permitted for the target field. If a set of
     * allowed values is defined, then the server will reject any attempt to store a JSON object with a value for the target
     * field that is not included in that set.
     */
    public readonly allowedValues!: pulumi.Output<string[]>;
    /**
     * Specifies the behavior that the server should exhibit when caching data for the associated JSON index. This can be
     * useful in environments in which the system does not have enough memory to fully cache the entire data set, as it makes
     * it possible to prioritize which data is the most important to keep in memory.
     */
    public readonly cacheMode!: pulumi.Output<string | undefined>;
    /**
     * A description for this JSON Field Constraints
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of entries that may contain a particular value for the target field before the server will stop
     * maintaining the index for that value.
     */
    public readonly indexEntryLimit!: pulumi.Output<number | undefined>;
    /**
     * Indicates whether backends that support JSON indexing should maintain an index for values of the target field.
     */
    public readonly indexValues!: pulumi.Output<boolean>;
    /**
     * Indicates whether the value of the target field may be an array of values rather than a single value. If this property
     * is set to "required" or "optional", then the constraints defined for this field will be applied to each element of the
     * array.
     */
    public readonly isArray!: pulumi.Output<string>;
    /**
     * Indicates whether the target field must be present in JSON objects stored as values of the associated attribute type.
     */
    public readonly isRequired!: pulumi.Output<boolean>;
    /**
     * Name of the parent JSON Attribute Constraints
     */
    public readonly jsonAttributeConstraintsName!: pulumi.Output<string>;
    /**
     * The full name of the JSON field to which these constraints apply.
     */
    public readonly jsonField!: pulumi.Output<string>;
    /**
     * Specifies the largest numeric value that may be used as the value for the target field. If configured, then the server
     * will reject any attempt to store a JSON object with a value for the target field that is greater than that maximum
     * numeric value.
     */
    public readonly maximumNumericValue!: pulumi.Output<string | undefined>;
    /**
     * Specifies the largest number of elements that may be present in an array of values for the target field. If configured,
     * then the server will reject any attempt to store a JSON object with a value for the target field that is an array with
     * more than this number of elements.
     */
    public readonly maximumValueCount!: pulumi.Output<number | undefined>;
    /**
     * Specifies the largest number of characters that may be present in string values of the target field. If configured, then
     * the server will reject any attempt to store a JSON object with a value for the target field that is longer than that
     * maximum value length.
     */
    public readonly maximumValueLength!: pulumi.Output<number | undefined>;
    /**
     * Specifies the smallest numeric value that may be used as the value for the target field. If configured, then the server
     * will reject any attempt to store a JSON object with a value for the target field that is less than that minimum numeric
     * value.
     */
    public readonly minimumNumericValue!: pulumi.Output<string | undefined>;
    /**
     * Specifies the smallest number of elements that may be present in an array of values for the target field. If configured,
     * then the server will reject any attempt to store a JSON object with a value for the target field that is an array with
     * fewer than this number of elements.
     */
    public readonly minimumValueCount!: pulumi.Output<number | undefined>;
    /**
     * Specifies the smallest number of characters that may be present in string values of the target field. If configured,
     * then the server will reject any attempt to store a JSON object with a value for the target field that is shorter than
     * that minimum value length.
     */
    public readonly minimumValueLength!: pulumi.Output<number | undefined>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Indicates whether backends that support database priming should load the contents of the associated JSON index into
     * memory whenever the backend is opened.
     */
    public readonly primeIndex!: pulumi.Output<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.JsonFieldConstraintsRequiredAction[]>;
    /**
     * Indicates whether the backend should attempt to assign a compact token for each distinct value for the target field in
     * an attempt to reduce the encoded size of the field in JSON objects. These tokens would be assigned prior to using any
     * from the token set used for automatic compaction of some JSON string values.
     */
    public readonly tokenizeValues!: pulumi.Output<boolean>;
    /**
     * The type of JSON Field Constraints resource. Options are ['json-field-constraints']
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The data type that will be required for values of the target field.
     */
    public readonly valueType!: pulumi.Output<string>;

    /**
     * Create a JsonFieldConstraints resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JsonFieldConstraintsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JsonFieldConstraintsArgs | JsonFieldConstraintsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JsonFieldConstraintsState | undefined;
            resourceInputs["allowEmptyObject"] = state ? state.allowEmptyObject : undefined;
            resourceInputs["allowNullValue"] = state ? state.allowNullValue : undefined;
            resourceInputs["allowedValueRegularExpressions"] = state ? state.allowedValueRegularExpressions : undefined;
            resourceInputs["allowedValues"] = state ? state.allowedValues : undefined;
            resourceInputs["cacheMode"] = state ? state.cacheMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["indexEntryLimit"] = state ? state.indexEntryLimit : undefined;
            resourceInputs["indexValues"] = state ? state.indexValues : undefined;
            resourceInputs["isArray"] = state ? state.isArray : undefined;
            resourceInputs["isRequired"] = state ? state.isRequired : undefined;
            resourceInputs["jsonAttributeConstraintsName"] = state ? state.jsonAttributeConstraintsName : undefined;
            resourceInputs["jsonField"] = state ? state.jsonField : undefined;
            resourceInputs["maximumNumericValue"] = state ? state.maximumNumericValue : undefined;
            resourceInputs["maximumValueCount"] = state ? state.maximumValueCount : undefined;
            resourceInputs["maximumValueLength"] = state ? state.maximumValueLength : undefined;
            resourceInputs["minimumNumericValue"] = state ? state.minimumNumericValue : undefined;
            resourceInputs["minimumValueCount"] = state ? state.minimumValueCount : undefined;
            resourceInputs["minimumValueLength"] = state ? state.minimumValueLength : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["primeIndex"] = state ? state.primeIndex : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["tokenizeValues"] = state ? state.tokenizeValues : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["valueType"] = state ? state.valueType : undefined;
        } else {
            const args = argsOrState as JsonFieldConstraintsArgs | undefined;
            if ((!args || args.jsonAttributeConstraintsName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jsonAttributeConstraintsName'");
            }
            if ((!args || args.jsonField === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jsonField'");
            }
            if ((!args || args.valueType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'valueType'");
            }
            resourceInputs["allowEmptyObject"] = args ? args.allowEmptyObject : undefined;
            resourceInputs["allowNullValue"] = args ? args.allowNullValue : undefined;
            resourceInputs["allowedValueRegularExpressions"] = args ? args.allowedValueRegularExpressions : undefined;
            resourceInputs["allowedValues"] = args ? args.allowedValues : undefined;
            resourceInputs["cacheMode"] = args ? args.cacheMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["indexEntryLimit"] = args ? args.indexEntryLimit : undefined;
            resourceInputs["indexValues"] = args ? args.indexValues : undefined;
            resourceInputs["isArray"] = args ? args.isArray : undefined;
            resourceInputs["isRequired"] = args ? args.isRequired : undefined;
            resourceInputs["jsonAttributeConstraintsName"] = args ? args.jsonAttributeConstraintsName : undefined;
            resourceInputs["jsonField"] = args ? args.jsonField : undefined;
            resourceInputs["maximumNumericValue"] = args ? args.maximumNumericValue : undefined;
            resourceInputs["maximumValueCount"] = args ? args.maximumValueCount : undefined;
            resourceInputs["maximumValueLength"] = args ? args.maximumValueLength : undefined;
            resourceInputs["minimumNumericValue"] = args ? args.minimumNumericValue : undefined;
            resourceInputs["minimumValueCount"] = args ? args.minimumValueCount : undefined;
            resourceInputs["minimumValueLength"] = args ? args.minimumValueLength : undefined;
            resourceInputs["primeIndex"] = args ? args.primeIndex : undefined;
            resourceInputs["tokenizeValues"] = args ? args.tokenizeValues : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["valueType"] = args ? args.valueType : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JsonFieldConstraints.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JsonFieldConstraints resources.
 */
export interface JsonFieldConstraintsState {
    /**
     * Indicates whether the target field may have a value that is an empty JSON object (i.e., a JSON object with zero fields).
     * This may only be set to true if value-type property is set to object.
     */
    allowEmptyObject?: pulumi.Input<boolean>;
    /**
     * Indicates whether the target field may have a value that is the JSON null value as an alternative to a value (or array
     * of values) of the specified value-type.
     */
    allowNullValue?: pulumi.Input<boolean>;
    /**
     * Specifies an explicit set of regular expressions that may be used to restrict the set of values that may be used for the
     * target field. If a set of allowed value regular expressions is defined, then the server will reject any attempt to store
     * a JSON object with a value for the target field that does not match at least one of those regular expressions.
     */
    allowedValueRegularExpressions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an explicit set of string values that will be the only values permitted for the target field. If a set of
     * allowed values is defined, then the server will reject any attempt to store a JSON object with a value for the target
     * field that is not included in that set.
     */
    allowedValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the behavior that the server should exhibit when caching data for the associated JSON index. This can be
     * useful in environments in which the system does not have enough memory to fully cache the entire data set, as it makes
     * it possible to prioritize which data is the most important to keep in memory.
     */
    cacheMode?: pulumi.Input<string>;
    /**
     * A description for this JSON Field Constraints
     */
    description?: pulumi.Input<string>;
    /**
     * The maximum number of entries that may contain a particular value for the target field before the server will stop
     * maintaining the index for that value.
     */
    indexEntryLimit?: pulumi.Input<number>;
    /**
     * Indicates whether backends that support JSON indexing should maintain an index for values of the target field.
     */
    indexValues?: pulumi.Input<boolean>;
    /**
     * Indicates whether the value of the target field may be an array of values rather than a single value. If this property
     * is set to "required" or "optional", then the constraints defined for this field will be applied to each element of the
     * array.
     */
    isArray?: pulumi.Input<string>;
    /**
     * Indicates whether the target field must be present in JSON objects stored as values of the associated attribute type.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * Name of the parent JSON Attribute Constraints
     */
    jsonAttributeConstraintsName?: pulumi.Input<string>;
    /**
     * The full name of the JSON field to which these constraints apply.
     */
    jsonField?: pulumi.Input<string>;
    /**
     * Specifies the largest numeric value that may be used as the value for the target field. If configured, then the server
     * will reject any attempt to store a JSON object with a value for the target field that is greater than that maximum
     * numeric value.
     */
    maximumNumericValue?: pulumi.Input<string>;
    /**
     * Specifies the largest number of elements that may be present in an array of values for the target field. If configured,
     * then the server will reject any attempt to store a JSON object with a value for the target field that is an array with
     * more than this number of elements.
     */
    maximumValueCount?: pulumi.Input<number>;
    /**
     * Specifies the largest number of characters that may be present in string values of the target field. If configured, then
     * the server will reject any attempt to store a JSON object with a value for the target field that is longer than that
     * maximum value length.
     */
    maximumValueLength?: pulumi.Input<number>;
    /**
     * Specifies the smallest numeric value that may be used as the value for the target field. If configured, then the server
     * will reject any attempt to store a JSON object with a value for the target field that is less than that minimum numeric
     * value.
     */
    minimumNumericValue?: pulumi.Input<string>;
    /**
     * Specifies the smallest number of elements that may be present in an array of values for the target field. If configured,
     * then the server will reject any attempt to store a JSON object with a value for the target field that is an array with
     * fewer than this number of elements.
     */
    minimumValueCount?: pulumi.Input<number>;
    /**
     * Specifies the smallest number of characters that may be present in string values of the target field. If configured,
     * then the server will reject any attempt to store a JSON object with a value for the target field that is shorter than
     * that minimum value length.
     */
    minimumValueLength?: pulumi.Input<number>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether backends that support database priming should load the contents of the associated JSON index into
     * memory whenever the backend is opened.
     */
    primeIndex?: pulumi.Input<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.JsonFieldConstraintsRequiredAction>[]>;
    /**
     * Indicates whether the backend should attempt to assign a compact token for each distinct value for the target field in
     * an attempt to reduce the encoded size of the field in JSON objects. These tokens would be assigned prior to using any
     * from the token set used for automatic compaction of some JSON string values.
     */
    tokenizeValues?: pulumi.Input<boolean>;
    /**
     * The type of JSON Field Constraints resource. Options are ['json-field-constraints']
     */
    type?: pulumi.Input<string>;
    /**
     * The data type that will be required for values of the target field.
     */
    valueType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JsonFieldConstraints resource.
 */
export interface JsonFieldConstraintsArgs {
    /**
     * Indicates whether the target field may have a value that is an empty JSON object (i.e., a JSON object with zero fields).
     * This may only be set to true if value-type property is set to object.
     */
    allowEmptyObject?: pulumi.Input<boolean>;
    /**
     * Indicates whether the target field may have a value that is the JSON null value as an alternative to a value (or array
     * of values) of the specified value-type.
     */
    allowNullValue?: pulumi.Input<boolean>;
    /**
     * Specifies an explicit set of regular expressions that may be used to restrict the set of values that may be used for the
     * target field. If a set of allowed value regular expressions is defined, then the server will reject any attempt to store
     * a JSON object with a value for the target field that does not match at least one of those regular expressions.
     */
    allowedValueRegularExpressions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an explicit set of string values that will be the only values permitted for the target field. If a set of
     * allowed values is defined, then the server will reject any attempt to store a JSON object with a value for the target
     * field that is not included in that set.
     */
    allowedValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the behavior that the server should exhibit when caching data for the associated JSON index. This can be
     * useful in environments in which the system does not have enough memory to fully cache the entire data set, as it makes
     * it possible to prioritize which data is the most important to keep in memory.
     */
    cacheMode?: pulumi.Input<string>;
    /**
     * A description for this JSON Field Constraints
     */
    description?: pulumi.Input<string>;
    /**
     * The maximum number of entries that may contain a particular value for the target field before the server will stop
     * maintaining the index for that value.
     */
    indexEntryLimit?: pulumi.Input<number>;
    /**
     * Indicates whether backends that support JSON indexing should maintain an index for values of the target field.
     */
    indexValues?: pulumi.Input<boolean>;
    /**
     * Indicates whether the value of the target field may be an array of values rather than a single value. If this property
     * is set to "required" or "optional", then the constraints defined for this field will be applied to each element of the
     * array.
     */
    isArray?: pulumi.Input<string>;
    /**
     * Indicates whether the target field must be present in JSON objects stored as values of the associated attribute type.
     */
    isRequired?: pulumi.Input<boolean>;
    /**
     * Name of the parent JSON Attribute Constraints
     */
    jsonAttributeConstraintsName: pulumi.Input<string>;
    /**
     * The full name of the JSON field to which these constraints apply.
     */
    jsonField: pulumi.Input<string>;
    /**
     * Specifies the largest numeric value that may be used as the value for the target field. If configured, then the server
     * will reject any attempt to store a JSON object with a value for the target field that is greater than that maximum
     * numeric value.
     */
    maximumNumericValue?: pulumi.Input<string>;
    /**
     * Specifies the largest number of elements that may be present in an array of values for the target field. If configured,
     * then the server will reject any attempt to store a JSON object with a value for the target field that is an array with
     * more than this number of elements.
     */
    maximumValueCount?: pulumi.Input<number>;
    /**
     * Specifies the largest number of characters that may be present in string values of the target field. If configured, then
     * the server will reject any attempt to store a JSON object with a value for the target field that is longer than that
     * maximum value length.
     */
    maximumValueLength?: pulumi.Input<number>;
    /**
     * Specifies the smallest numeric value that may be used as the value for the target field. If configured, then the server
     * will reject any attempt to store a JSON object with a value for the target field that is less than that minimum numeric
     * value.
     */
    minimumNumericValue?: pulumi.Input<string>;
    /**
     * Specifies the smallest number of elements that may be present in an array of values for the target field. If configured,
     * then the server will reject any attempt to store a JSON object with a value for the target field that is an array with
     * fewer than this number of elements.
     */
    minimumValueCount?: pulumi.Input<number>;
    /**
     * Specifies the smallest number of characters that may be present in string values of the target field. If configured,
     * then the server will reject any attempt to store a JSON object with a value for the target field that is shorter than
     * that minimum value length.
     */
    minimumValueLength?: pulumi.Input<number>;
    /**
     * Indicates whether backends that support database priming should load the contents of the associated JSON index into
     * memory whenever the backend is opened.
     */
    primeIndex?: pulumi.Input<boolean>;
    /**
     * Indicates whether the backend should attempt to assign a compact token for each distinct value for the target field in
     * an attempt to reduce the encoded size of the field in JSON objects. These tokens would be assigned prior to using any
     * from the token set used for automatic compaction of some JSON string values.
     */
    tokenizeValues?: pulumi.Input<boolean>;
    /**
     * The type of JSON Field Constraints resource. Options are ['json-field-constraints']
     */
    type?: pulumi.Input<string>;
    /**
     * The data type that will be required for values of the target field.
     */
    valueType: pulumi.Input<string>;
}
