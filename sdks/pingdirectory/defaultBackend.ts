// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultBackend extends pulumi.CustomResource {
    /**
     * Get an existing DefaultBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultBackendState, opts?: pulumi.CustomResourceOptions): DefaultBackend {
        return new DefaultBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultBackend:DefaultBackend';

    /**
     * Returns true if the given object is an instance of DefaultBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultBackend.__pulumiType;
    }

    /**
     * Specifies the maximum length of time that information about raised alarms should be maintained before they will be
     * purged.
     */
    public readonly alarmRetentionTime!: pulumi.Output<string>;
    /**
     * Specifies the maximum length of time that information about generated alerts should be maintained before they will be
     * purged.
     */
    public readonly alertRetentionTime!: pulumi.Output<string>;
    /**
     * Indicates whether the contents of changelog entries should be subject to access control and sensitive attribute
     * evaluation such that the contents of attributes like changes, deletedEntryAttrs, ds-changelog-entry-key-attr-values,
     * ds-changelog-before-values, and ds-changelog-after-values may be altered based on attributes the user can see in the
     * target entry.
     */
    public readonly applyAccessControlsToChangelogEntryContents!: pulumi.Output<boolean>;
    /**
     * Specifies a name to identify the associated backend.
     */
    public readonly backendId!: pulumi.Output<string>;
    /**
     * Indicates whether to attempt to perform the prime using a background thread if possible. If background priming is
     * enabled, then the Directory Server may be allowed to accept client connections and process requests while the prime is
     * in progress.
     */
    public readonly backgroundPrime!: pulumi.Output<boolean>;
    /**
     * Specifies the path to a backup directory containing one or more backups for a particular backend.
     */
    public readonly backupDirectories!: pulumi.Output<string[]>;
    /**
     * Specifies the permissions that should be applied to files and directories created by a backup of the backend.
     */
    public readonly backupFilePermissions!: pulumi.Output<string>;
    /**
     * Specifies the base DN(s) for the data that the backend handles.
     */
    public readonly baseDns!: pulumi.Output<string[]>;
    /**
     * Specifies a set of attribute types that should be excluded from a changelog entry for DELETE operations.
     */
    public readonly changelogDeletedEntryExcludeAttributes!: pulumi.Output<string[]>;
    /**
     * Specifies a set of attribute types that should be included in a changelog entry for DELETE operations.
     */
    public readonly changelogDeletedEntryIncludeAttributes!: pulumi.Output<string[]>;
    /**
     * The base DNs for branches in the data for which no changelog records should be generated.
     */
    public readonly changelogEntryExcludeBaseDns!: pulumi.Output<string[]>;
    /**
     * A filter that indicates which changelog entries should be excluded from the changelog. Note that this filter is
     * evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by
     * the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the
     * changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.
     */
    public readonly changelogEntryExcludeFilters!: pulumi.Output<string[]>;
    /**
     * The base DNs for branches in the data for which to record changes in the changelog.
     */
    public readonly changelogEntryIncludeBaseDns!: pulumi.Output<string[]>;
    /**
     * A filter that indicates which changelog entries should actually be stored in the changelog. Note that this filter is
     * evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by
     * the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the
     * changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.
     */
    public readonly changelogEntryIncludeFilters!: pulumi.Output<string[]>;
    /**
     * Specifies a set of attribute types that should be excluded in a changelog entry for ADD and MODIFY operations.
     */
    public readonly changelogExcludeAttributes!: pulumi.Output<string[]>;
    /**
     * Specifies which attribute types will be included in a changelog entry for ADD and MODIFY operations.
     */
    public readonly changelogIncludeAttributes!: pulumi.Output<string[]>;
    /**
     * Specifies which attribute types will be included in a changelog entry on every change.
     */
    public readonly changelogIncludeKeyAttributes!: pulumi.Output<string[]>;
    /**
     * This controls whether all attribute values for a modified attribute (even those values that have not changed) will be
     * included in the changelog entry. If the number of attribute values does not exceed this limit, then all values for the
     * modified attribute will be included in the changelog entry.
     */
    public readonly changelogMaxBeforeAfterValues!: pulumi.Output<number>;
    /**
     * Changes are guaranteed to be maintained in the changelog database for at least this duration. Setting
     * target-database-size can allow additional changes to be maintained up to the configured size on disk.
     */
    public readonly changelogMaximumAge!: pulumi.Output<string>;
    /**
     * Specifies the number of changelog entries purged in a single database transaction.
     */
    public readonly changelogPurgeBatchSize!: pulumi.Output<number>;
    /**
     * Specifies the number of changelog entries written in a single database transaction.
     */
    public readonly changelogWriteBatchSize!: pulumi.Output<number>;
    /**
     * Specifies the capacity of the changelog write queue in number of changes.
     */
    public readonly changelogWriteQueueCapacity!: pulumi.Output<number>;
    /**
     * Provides a DN of an entry that may be the parent for a large number of entries in the backend. This may be used to help
     * increase the space efficiency when encoding entries for storage.
     */
    public readonly compactCommonParentDns!: pulumi.Output<string[]>;
    /**
     * Specifies the maximum number of entries that are allowed to match a given composite index key before that particular
     * composite index key is no longer maintained.
     */
    public readonly compositeIndexEntryLimit!: pulumi.Output<number>;
    /**
     * Indicates whether the backend should attempt to compress entries before storing them in the database.
     */
    public readonly compressEntries!: pulumi.Output<boolean>;
    /**
     * Specifies the interval to use when performing background synchronous writes in the database environment in order to
     * smooth overall write performance and increase data durability. A value of "0 s" will disable background synchronous
     * writes.
     */
    public readonly dbBackgroundSyncInterval!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - `changelog`: Specifies the percentage of JVM memory to allocate to the changelog
     * database cache. - `local-db`: Specifies the percentage of JVM memory to allocate to the database cache.
     */
    public readonly dbCachePercent!: pulumi.Output<number>;
    /**
     * Specifies the maximum length of time that should pass between checkpoints.
     */
    public readonly dbCheckpointerWakeupInterval!: pulumi.Output<string>;
    /**
     * Specifies the minimum percentage of "live" data that the database cleaner attempts to keep in database log files.
     */
    public readonly dbCleanerMinUtilization!: pulumi.Output<number>;
    /**
     * Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files
     * containing the data for this backend. The files for this backend are stored in a sub-directory named after the
     * backend-id.
     */
    public readonly dbDirectory!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - `changelog`: Specifies the permissions that should be applied to the directory
     * containing the backend database files and to directories and files created during backup of the backend. - `local-db`:
     * Specifies the permissions that should be applied to the directory containing the backend database files and to
     * directories and files created during backup or LDIF export of the backend.
     */
    public readonly dbDirectoryPermissions!: pulumi.Output<string>;
    /**
     * Specifies the percentage over the configured maximum that the database cache is allowed to grow. It is recommended to
     * set this value slightly above zero when the database is too large to fully cache in memory. In this case, a dedicated
     * background evictor thread is used to perform evictions once the cache fills up reducing the possibility that server
     * threads are blocked.
     */
    public readonly dbEvictorCriticalPercentage!: pulumi.Output<number>;
    /**
     * The percentage of JVM memory to allocate to the database cache during import operations.
     */
    public readonly dbImportCachePercent!: pulumi.Output<number>;
    /**
     * Specifies the maximum size for a database log file.
     */
    public readonly dbLogFileMax!: pulumi.Output<string>;
    /**
     * Specifies the log level that should be used by the database when it is writing information into the je.info file.
     */
    public readonly dbLoggingLevel!: pulumi.Output<string>;
    /**
     * Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired
     * utilization. A value of zero indicates that the number of cleaner threads should be automatically configured based on
     * the number of available CPUs.
     */
    public readonly dbNumCleanerThreads!: pulumi.Output<number>;
    /**
     * Indicates whether the database should synchronously flush data as it is written to disk.
     */
    public readonly dbTxnWriteNoSync!: pulumi.Output<boolean>;
    /**
     * Indicates whether to use thread-local database handles to reduce contention in the backend.
     */
    public readonly dbUseThreadLocalHandles!: pulumi.Output<boolean>;
    /**
     * Specifies the number of times that the server should retry an attempted operation in the backend if a deadlock results
     * from two concurrent requests that interfere with each other in a conflicting manner.
     */
    public readonly deadlockRetryLimit!: pulumi.Output<number>;
    /**
     * Specifies the cache mode that should be used for any database for which the cache mode is not explicitly specified. This
     * includes the id2entry database, which stores encoded entries, and all attribute indexes.
     */
    public readonly defaultCacheMode!: pulumi.Output<string>;
    /**
     * A description for this Backend
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the names of the alert types that should not be added to the backend. This can be used to suppress high volume
     * alerts that might trigger hitting the max-alerts limit sooner than desired. Disabled alert types will not be sent out
     * over persistent searches on this backend.
     */
    public readonly disabledAlertTypes!: pulumi.Output<string[]>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the dn2id database, which provides a mapping
     * between normalized entry DNs and the corresponding entry IDs.
     */
    public readonly dn2idCacheMode!: pulumi.Output<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the dn2uri database, which provides a mapping
     * between a normalized entry DN and a set of referral URLs contained in the associated smart referral entry.
     */
    public readonly dn2uriCacheMode!: pulumi.Output<string>;
    /**
     * Indicates whether the backend is enabled in the server.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Specifies the number of threads to use for concurrently retrieving and encoding entries during an LDIF export.
     */
    public readonly exportThreadCount!: pulumi.Output<number>;
    /**
     * Specifies the default behavior that should be exhibited by external transactions (e.g., an LDAP transaction or an atomic
     * multi-update operation) with regard to acquiring an exclusive lock in this backend.
     */
    public readonly externalTxnDefaultBackendLockBehavior!: pulumi.Output<string>;
    /**
     * Indicates whether to calculate and store a message digest of the entry contents along with the entry data, in order to
     * provide a means of verifying the integrity of the entry data.
     */
    public readonly hashEntries!: pulumi.Output<boolean>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2children database, which provides a
     * mapping between the entry ID of a particular entry and the entry IDs of all of its immediate children. This index may be
     * used when performing searches with a single-level scope if the search filter cannot be resolved to a small enough
     * candidate list. The size of this database directly depends on the number of entries that have children.
     */
    public readonly id2childrenCacheMode!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of entry IDs to maintain for each entry in the id2children system index (which keeps track
     * of the immediate children for an entry, to assist in otherwise unindexed searches with a single-level scope). A value of
     * 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.
     */
    public readonly id2childrenIndexEntryLimit!: pulumi.Output<number>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2entry database, which provides a
     * mapping between entry IDs and entry contents. Consider configuring uncached entries or uncached attributes in lieu of
     * changing from the "cache-keys-and-values" default value.
     */
    public readonly id2entryCacheMode!: pulumi.Output<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2subtree database, which provides a
     * mapping between the entry ID of a particular entry and the entry IDs of all of its children to any depth. This index may
     * be used when performing searches with a whole-subtree or subordinate-subtree scope if the search filter cannot be
     * resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have
     * children.
     */
    public readonly id2subtreeCacheMode!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of entry IDs to maintain for each entry in the id2subtree system index (which keeps track
     * of all descendants below an entry, to assist in otherwise unindexed searches with a whole-subtree or subordinate subtree
     * scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on
     * server performance.
     */
    public readonly id2subtreeIndexEntryLimit!: pulumi.Output<number>;
    /**
     * Specifies the location of the directory that is used to hold temporary information during the index post-processing
     * phase of an LDIF import.
     */
    public readonly importTempDirectory!: pulumi.Output<string>;
    /**
     * Specifies the number of threads to use for concurrent processing during an LDIF import.
     */
    public readonly importThreadCount!: pulumi.Output<number>;
    /**
     * Specifies the changelog entry elements (if any) in which virtual attributes should be included.
     */
    public readonly includeVirtualAttributes!: pulumi.Output<string[]>;
    /**
     * Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is
     * no longer maintained.
     */
    public readonly indexEntryLimit!: pulumi.Output<number>;
    /**
     * Specifies which attribute types are to be specifically excluded from the set of attribute indexes maintained on the
     * changelog. This property is useful when the index-include-attribute property contains one of the special values "*" and
     * "+".
     */
    public readonly indexExcludeAttributes!: pulumi.Output<string[]>;
    /**
     * Specifies which attribute types are to be specifically included in the set of attribute indexes maintained on the
     * changelog. If this property does not have any values then no attribute types are indexed.
     */
    public readonly indexIncludeAttributes!: pulumi.Output<string[]>;
    /**
     * The name or OID of an attribute type that is considered insignificant for the purpose of maintaining the configuration
     * archive.
     */
    public readonly insignificantConfigArchiveAttributes!: pulumi.Output<string[]>;
    /**
     * Supported in PingDirectory product version 9.2.0.3+. The base DN that is considered insignificant for the purpose of
     * maintaining the configuration archive.
     */
    public readonly insignificantConfigArchiveBaseDns!: pulumi.Output<string[]>;
    /**
     * When the `type` attribute is set to: - `ldif`: Indicates whether the backend should be considered a private backend,
     * which indicates that it is used for storing operational data rather than user-defined information. - `local-db`:
     * Indicates whether this backend should be considered a private backend in the server. Private backends are meant for
     * storing server-internal information and should not be used for user or application data.
     */
    public readonly isPrivateBackend!: pulumi.Output<boolean>;
    /**
     * When the `type` attribute is set to: - `changelog`: Specifies the database and environment properties for the Berkeley
     * DB Java Edition database for this changelog backend. - `local-db`: Specifies the database and environment properties for
     * the Berkeley DB Java Edition database serving the data for this backend.
     */
    public readonly jeProperties!: pulumi.Output<string[]>;
    /**
     * When the `type` attribute is set to: - One of [`alert`, `alarm`]: Specifies the path to the LDIF file that serves as the
     * backing file for this backend. - `ldif`: Specifies the path to the LDIF file containing the data for this backend.
     */
    public readonly ldifFile!: pulumi.Output<string>;
    /**
     * Supported in PingDirectory product version 9.3.0.0+. Indicates whether the server should maintain the config archive
     * with new changes to the config backend.
     */
    public readonly maintainConfigArchive!: pulumi.Output<boolean>;
    /**
     * Specifies the maximum number of alarms that should be retained. If more alarms than this configured maximum are
     * generated within the alarm retention time, then the oldest alarms will be purged to achieve this maximum. Only alarms at
     * normal severity will be purged.
     */
    public readonly maxAlarms!: pulumi.Output<number>;
    /**
     * Specifies the maximum number of alerts that should be retained. If more alerts than this configured maximum are
     * generated within the alert retention time, then the oldest alerts will be purged to achieve this maximum.
     */
    public readonly maxAlerts!: pulumi.Output<number>;
    /**
     * Supported in PingDirectory product version 9.3.0.0+. Indicates the maximum number of previous config files to keep as
     * part of maintaining the config archive.
     */
    public readonly maxConfigArchiveCount!: pulumi.Output<number>;
    /**
     * The maximum number of log messages to retain in each task entry from the end of the processing for that task. If too
     * many messages are logged during task processing, then retaining only a limited number of messages from the beginning
     * and/or end of task processing can reduce the amount of memory that the server consumes by caching information about
     * currently-active and recently-completed tasks.
     */
    public readonly maximumFinalTaskLogMessagesToRetain!: pulumi.Output<number>;
    /**
     * The maximum number of log messages to retain in each task entry from the beginning of the processing for that task. If
     * too many messages are logged during task processing, then retaining only a limited number of messages from the beginning
     * and/or end of task processing can reduce the amount of memory that the server consumes by caching information about
     * currently-active and recently-completed tasks.
     */
    public readonly maximumInitialTaskLogMessagesToRetain!: pulumi.Output<number>;
    /**
     * Specifies the path to the directory that contains metric definitions.
     */
    public readonly metricsDir!: pulumi.Output<string>;
    /**
     * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum
     * amount of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all
     * servers in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide
     * configuration data.
     */
    public readonly mirroredSubtreeEntryUpdateTimeout!: pulumi.Output<string>;
    /**
     * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum
     * amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the
     * topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.
     */
    public readonly mirroredSubtreePeerPollingInterval!: pulumi.Output<string>;
    /**
     * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum
     * amount of time to wait for a search operation to complete. Mirrored data includes meta-data about the servers in the
     * topology as well as cluster-wide configuration data. Search requests that take longer than this timeout will be canceled
     * and considered failures.
     */
    public readonly mirroredSubtreeSearchTimeout!: pulumi.Output<string>;
    /**
     * Specifies a notification manager for changes resulting from operations processed through this Backend
     */
    public readonly notificationManager!: pulumi.Output<string>;
    /**
     * Specifies the email address to use as the sender address (that is, the "From:" address) for notification mail messages
     * generated when a task completes execution.
     */
    public readonly notificationSenderAddress!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies the number of recent LDAP entry changes per replica for which the backend keeps a record to allow replication
     * to recover in the event that the server is abruptly terminated. Increasing this value can lead to an increased peak
     * server modification rate as well as increased replication throughput.
     */
    public readonly numRecentChanges!: pulumi.Output<number>;
    /**
     * Specifies a timeout duration which will be used for opening the database environment by an offline process, such as
     * export-ldif.
     */
    public readonly offlineProcessDatabaseOpenTimeout!: pulumi.Output<string>;
    /**
     * Indicates whether to prime all indexes associated with this backend, or to only prime the specified set of indexes (as
     * configured with the system-index-to-prime property for the system indexes, and the prime-index property in the attribute
     * index definition for attribute indexes).
     */
    public readonly primeAllIndexes!: pulumi.Output<boolean>;
    /**
     * Specifies the method that should be used to prime caches with data for this backend.
     */
    public readonly primeMethods!: pulumi.Output<string[]>;
    /**
     * Specifies the number of threads to use when priming. At present, this applies only to the preload and
     * cursor-across-indexes prime methods.
     */
    public readonly primeThreadCount!: pulumi.Output<number>;
    /**
     * Specifies the maximum length of time that the backend prime should be allowed to run. A duration of zero seconds
     * indicates that there should not be a time limit.
     */
    public readonly primeTimeLimit!: pulumi.Output<string>;
    /**
     * Determines whether the Directory Server should continue filter processing for LDAP search operations in this Local DB
     * Backend that includes a search filter with an attribute that is not defined in the schema. This will only apply if
     * check-schema is enabled in the global configuration.
     */
    public readonly processFiltersWithUndefinedAttributeTypes!: pulumi.Output<boolean>;
    /**
     * Specifies the name of a file (which must exist in the config/schema directory) containing schema elements that should be
     * considered read-only. Any schema definitions contained in read-only files cannot be altered by external clients.
     */
    public readonly readOnlySchemaFiles!: pulumi.Output<string[]>;
    /**
     * Indicates whether changelog entries that have been altered by applying access controls should include additional
     * information about any attributes that may have been removed.
     */
    public readonly reportExcludedChangelogAttributes!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultBackendRequiredAction[]>;
    /**
     * The retention policy to use for the Metrics Backend .
     */
    public readonly retentionPolicies!: pulumi.Output<string[]>;
    /**
     * Determines whether the Directory Server returns UNAVAILABLE for any LDAP search operation in this Local DB Backend that
     * would use an index whose contents cannot be trusted.
     */
    public readonly returnUnavailableForUntrustedIndex!: pulumi.Output<boolean>;
    /**
     * Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is
     * disabled.
     */
    public readonly returnUnavailableWhenDisabled!: pulumi.Output<boolean>;
    /**
     * Period when samples are flushed to disk.
     */
    public readonly sampleFlushInterval!: pulumi.Output<string>;
    /**
     * Defines the base DNs of the subtrees in which the schema information is published in addition to the value included in
     * the base-dn property.
     */
    public readonly schemaEntryDns!: pulumi.Output<string[]>;
    /**
     * Determines whether the Directory Server enters a DEGRADED state when this Local DB Backend has an index whose contents
     * cannot be trusted.
     */
    public readonly setDegradedAlertForUntrustedIndex!: pulumi.Output<boolean>;
    /**
     * Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is
     * disabled.
     */
    public readonly setDegradedAlertWhenDisabled!: pulumi.Output<boolean>;
    /**
     * Indicates whether to treat all attributes in the schema entry as if they were user attributes regardless of their
     * configuration.
     */
    public readonly showAllAttributes!: pulumi.Output<boolean>;
    /**
     * Supported in PingDirectory product version 10.1.0.0+. Specifies the length of time to cache the candidate ID set used
     * for indexed search operations including the simple paged results control.
     */
    public readonly simplePagedResultsIdSetCacheDuration!: pulumi.Output<string>;
    /**
     * Specifies the condition under which to acquire a single-writer lock to ensure that the associated operation will be the
     * only write in progress at the time the lock is held. The single-writer lock can help avoid problems that result from
     * database lock conflicts that arise between two write operations being processed at the same time in the same backend.
     * This will not have any effect on the read operations processed while the write is in progress.
     */
    public readonly singleWriterLockBehavior!: pulumi.Output<string>;
    /**
     * Specifies which operations performed on soft-deleted entries will appear in the changelog.
     */
    public readonly softDeleteEntryIncludedOperations!: pulumi.Output<string[]>;
    /**
     * Specifies the path to the directory that will be used to store queued samples.
     */
    public readonly storageDir!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of entries that may be deleted from the backend when using the subtree delete control.
     */
    public readonly subtreeDeleteSizeLimit!: pulumi.Output<number>;
    /**
     * Supported in PingDirectory product version 10.1.0.0+. Specifies the maximum number of entries that may exist below an
     * entry targeted by a modify DN operation. This includes both direct and indirect subordinates (to any depth), although
     * the entry at the top of the subtree (the one directly targeted by the modify DN operation) is not included in this
     * count.
     */
    public readonly subtreeModifyDnSizeLimit!: pulumi.Output<number>;
    /**
     * Specifies the system index(es) for which internal database nodes only (i.e., the database keys but not values) should be
     * primed when the backend is initialized.
     */
    public readonly systemIndexToPrimeInternalNodesOnlies!: pulumi.Output<string[]>;
    /**
     * Specifies which system index(es) should be primed when the backend is initialized.
     */
    public readonly systemIndexToPrimes!: pulumi.Output<string[]>;
    /**
     * The changelog database is allowed to grow up to this size on disk even if changes are older than the configured
     * changelog-maximum-age.
     */
    public readonly targetDatabaseSize!: pulumi.Output<string>;
    /**
     * Specifies the path to the backing file for storing information about the tasks configured in the server.
     */
    public readonly taskBackingFile!: pulumi.Output<string>;
    /**
     * Specifies the length of time that task entries should be retained after processing on the associated task has been
     * completed.
     */
    public readonly taskRetentionTime!: pulumi.Output<string>;
    /**
     * Specifies the path to the file that stores the trust information.
     */
    public readonly trustStoreFile!: pulumi.Output<string>;
    /**
     * Specifies the clear-text PIN needed to access the Trust Store Backend.
     */
    public readonly trustStorePin!: pulumi.Output<string>;
    /**
     * Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to
     * access the Trust Store Backend.
     */
    public readonly trustStorePinFile!: pulumi.Output<string>;
    /**
     * The passphrase provider to use to obtain the clear-text PIN needed to access the Trust Store Backend.
     */
    public readonly trustStorePinPassphraseProvider!: pulumi.Output<string>;
    /**
     * Specifies the format for the data in the key store file.
     */
    public readonly trustStoreType!: pulumi.Output<string>;
    /**
     * The type of Backend resource. Options are ['schema', 'backup', 'encryption-settings', 'ldif', 'trust-store', 'custom',
     * 'changelog', 'monitor', 'local-db', 'config-file-handler', 'task', 'alert', 'alarm', 'metrics']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The criteria that will be used to identify attributes that should be written into the uncached-id2entry database rather
     * than the id2entry database. This will only be used for entries in which the associated uncached-entry-criteria does not
     * indicate that the entire entry should be uncached.
     */
    public readonly uncachedAttributeCriteria!: pulumi.Output<string>;
    /**
     * The criteria that will be used to identify entries that should be written into the uncached-id2entry database rather
     * than the id2entry database.
     */
    public readonly uncachedEntryCriteria!: pulumi.Output<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the uncached-id2entry database, which
     * provides a way to store complete or partial encoded entries with a different (and presumably less memory-intensive)
     * cache mode than records written to id2entry.
     */
    public readonly uncachedId2entryCacheMode!: pulumi.Output<string>;
    /**
     * Specifies whether the changelog should provide enough information to be able to revert the changes if desired.
     */
    public readonly useReversibleForm!: pulumi.Output<boolean>;
    /**
     * Specifies the behavior that the backend should use when processing write operations.
     */
    public readonly writabilityMode!: pulumi.Output<string>;
    /**
     * Specifies whether values of creatorsName, createTimestamp, modifiersName and modifyTimestamp attributes will be written
     * to changelog entries.
     */
    public readonly writeLastmodAttributes!: pulumi.Output<boolean>;

    /**
     * Create a DefaultBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultBackendArgs | DefaultBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultBackendState | undefined;
            resourceInputs["alarmRetentionTime"] = state ? state.alarmRetentionTime : undefined;
            resourceInputs["alertRetentionTime"] = state ? state.alertRetentionTime : undefined;
            resourceInputs["applyAccessControlsToChangelogEntryContents"] = state ? state.applyAccessControlsToChangelogEntryContents : undefined;
            resourceInputs["backendId"] = state ? state.backendId : undefined;
            resourceInputs["backgroundPrime"] = state ? state.backgroundPrime : undefined;
            resourceInputs["backupDirectories"] = state ? state.backupDirectories : undefined;
            resourceInputs["backupFilePermissions"] = state ? state.backupFilePermissions : undefined;
            resourceInputs["baseDns"] = state ? state.baseDns : undefined;
            resourceInputs["changelogDeletedEntryExcludeAttributes"] = state ? state.changelogDeletedEntryExcludeAttributes : undefined;
            resourceInputs["changelogDeletedEntryIncludeAttributes"] = state ? state.changelogDeletedEntryIncludeAttributes : undefined;
            resourceInputs["changelogEntryExcludeBaseDns"] = state ? state.changelogEntryExcludeBaseDns : undefined;
            resourceInputs["changelogEntryExcludeFilters"] = state ? state.changelogEntryExcludeFilters : undefined;
            resourceInputs["changelogEntryIncludeBaseDns"] = state ? state.changelogEntryIncludeBaseDns : undefined;
            resourceInputs["changelogEntryIncludeFilters"] = state ? state.changelogEntryIncludeFilters : undefined;
            resourceInputs["changelogExcludeAttributes"] = state ? state.changelogExcludeAttributes : undefined;
            resourceInputs["changelogIncludeAttributes"] = state ? state.changelogIncludeAttributes : undefined;
            resourceInputs["changelogIncludeKeyAttributes"] = state ? state.changelogIncludeKeyAttributes : undefined;
            resourceInputs["changelogMaxBeforeAfterValues"] = state ? state.changelogMaxBeforeAfterValues : undefined;
            resourceInputs["changelogMaximumAge"] = state ? state.changelogMaximumAge : undefined;
            resourceInputs["changelogPurgeBatchSize"] = state ? state.changelogPurgeBatchSize : undefined;
            resourceInputs["changelogWriteBatchSize"] = state ? state.changelogWriteBatchSize : undefined;
            resourceInputs["changelogWriteQueueCapacity"] = state ? state.changelogWriteQueueCapacity : undefined;
            resourceInputs["compactCommonParentDns"] = state ? state.compactCommonParentDns : undefined;
            resourceInputs["compositeIndexEntryLimit"] = state ? state.compositeIndexEntryLimit : undefined;
            resourceInputs["compressEntries"] = state ? state.compressEntries : undefined;
            resourceInputs["dbBackgroundSyncInterval"] = state ? state.dbBackgroundSyncInterval : undefined;
            resourceInputs["dbCachePercent"] = state ? state.dbCachePercent : undefined;
            resourceInputs["dbCheckpointerWakeupInterval"] = state ? state.dbCheckpointerWakeupInterval : undefined;
            resourceInputs["dbCleanerMinUtilization"] = state ? state.dbCleanerMinUtilization : undefined;
            resourceInputs["dbDirectory"] = state ? state.dbDirectory : undefined;
            resourceInputs["dbDirectoryPermissions"] = state ? state.dbDirectoryPermissions : undefined;
            resourceInputs["dbEvictorCriticalPercentage"] = state ? state.dbEvictorCriticalPercentage : undefined;
            resourceInputs["dbImportCachePercent"] = state ? state.dbImportCachePercent : undefined;
            resourceInputs["dbLogFileMax"] = state ? state.dbLogFileMax : undefined;
            resourceInputs["dbLoggingLevel"] = state ? state.dbLoggingLevel : undefined;
            resourceInputs["dbNumCleanerThreads"] = state ? state.dbNumCleanerThreads : undefined;
            resourceInputs["dbTxnWriteNoSync"] = state ? state.dbTxnWriteNoSync : undefined;
            resourceInputs["dbUseThreadLocalHandles"] = state ? state.dbUseThreadLocalHandles : undefined;
            resourceInputs["deadlockRetryLimit"] = state ? state.deadlockRetryLimit : undefined;
            resourceInputs["defaultCacheMode"] = state ? state.defaultCacheMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabledAlertTypes"] = state ? state.disabledAlertTypes : undefined;
            resourceInputs["dn2idCacheMode"] = state ? state.dn2idCacheMode : undefined;
            resourceInputs["dn2uriCacheMode"] = state ? state.dn2uriCacheMode : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["exportThreadCount"] = state ? state.exportThreadCount : undefined;
            resourceInputs["externalTxnDefaultBackendLockBehavior"] = state ? state.externalTxnDefaultBackendLockBehavior : undefined;
            resourceInputs["hashEntries"] = state ? state.hashEntries : undefined;
            resourceInputs["id2childrenCacheMode"] = state ? state.id2childrenCacheMode : undefined;
            resourceInputs["id2childrenIndexEntryLimit"] = state ? state.id2childrenIndexEntryLimit : undefined;
            resourceInputs["id2entryCacheMode"] = state ? state.id2entryCacheMode : undefined;
            resourceInputs["id2subtreeCacheMode"] = state ? state.id2subtreeCacheMode : undefined;
            resourceInputs["id2subtreeIndexEntryLimit"] = state ? state.id2subtreeIndexEntryLimit : undefined;
            resourceInputs["importTempDirectory"] = state ? state.importTempDirectory : undefined;
            resourceInputs["importThreadCount"] = state ? state.importThreadCount : undefined;
            resourceInputs["includeVirtualAttributes"] = state ? state.includeVirtualAttributes : undefined;
            resourceInputs["indexEntryLimit"] = state ? state.indexEntryLimit : undefined;
            resourceInputs["indexExcludeAttributes"] = state ? state.indexExcludeAttributes : undefined;
            resourceInputs["indexIncludeAttributes"] = state ? state.indexIncludeAttributes : undefined;
            resourceInputs["insignificantConfigArchiveAttributes"] = state ? state.insignificantConfigArchiveAttributes : undefined;
            resourceInputs["insignificantConfigArchiveBaseDns"] = state ? state.insignificantConfigArchiveBaseDns : undefined;
            resourceInputs["isPrivateBackend"] = state ? state.isPrivateBackend : undefined;
            resourceInputs["jeProperties"] = state ? state.jeProperties : undefined;
            resourceInputs["ldifFile"] = state ? state.ldifFile : undefined;
            resourceInputs["maintainConfigArchive"] = state ? state.maintainConfigArchive : undefined;
            resourceInputs["maxAlarms"] = state ? state.maxAlarms : undefined;
            resourceInputs["maxAlerts"] = state ? state.maxAlerts : undefined;
            resourceInputs["maxConfigArchiveCount"] = state ? state.maxConfigArchiveCount : undefined;
            resourceInputs["maximumFinalTaskLogMessagesToRetain"] = state ? state.maximumFinalTaskLogMessagesToRetain : undefined;
            resourceInputs["maximumInitialTaskLogMessagesToRetain"] = state ? state.maximumInitialTaskLogMessagesToRetain : undefined;
            resourceInputs["metricsDir"] = state ? state.metricsDir : undefined;
            resourceInputs["mirroredSubtreeEntryUpdateTimeout"] = state ? state.mirroredSubtreeEntryUpdateTimeout : undefined;
            resourceInputs["mirroredSubtreePeerPollingInterval"] = state ? state.mirroredSubtreePeerPollingInterval : undefined;
            resourceInputs["mirroredSubtreeSearchTimeout"] = state ? state.mirroredSubtreeSearchTimeout : undefined;
            resourceInputs["notificationManager"] = state ? state.notificationManager : undefined;
            resourceInputs["notificationSenderAddress"] = state ? state.notificationSenderAddress : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["numRecentChanges"] = state ? state.numRecentChanges : undefined;
            resourceInputs["offlineProcessDatabaseOpenTimeout"] = state ? state.offlineProcessDatabaseOpenTimeout : undefined;
            resourceInputs["primeAllIndexes"] = state ? state.primeAllIndexes : undefined;
            resourceInputs["primeMethods"] = state ? state.primeMethods : undefined;
            resourceInputs["primeThreadCount"] = state ? state.primeThreadCount : undefined;
            resourceInputs["primeTimeLimit"] = state ? state.primeTimeLimit : undefined;
            resourceInputs["processFiltersWithUndefinedAttributeTypes"] = state ? state.processFiltersWithUndefinedAttributeTypes : undefined;
            resourceInputs["readOnlySchemaFiles"] = state ? state.readOnlySchemaFiles : undefined;
            resourceInputs["reportExcludedChangelogAttributes"] = state ? state.reportExcludedChangelogAttributes : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["retentionPolicies"] = state ? state.retentionPolicies : undefined;
            resourceInputs["returnUnavailableForUntrustedIndex"] = state ? state.returnUnavailableForUntrustedIndex : undefined;
            resourceInputs["returnUnavailableWhenDisabled"] = state ? state.returnUnavailableWhenDisabled : undefined;
            resourceInputs["sampleFlushInterval"] = state ? state.sampleFlushInterval : undefined;
            resourceInputs["schemaEntryDns"] = state ? state.schemaEntryDns : undefined;
            resourceInputs["setDegradedAlertForUntrustedIndex"] = state ? state.setDegradedAlertForUntrustedIndex : undefined;
            resourceInputs["setDegradedAlertWhenDisabled"] = state ? state.setDegradedAlertWhenDisabled : undefined;
            resourceInputs["showAllAttributes"] = state ? state.showAllAttributes : undefined;
            resourceInputs["simplePagedResultsIdSetCacheDuration"] = state ? state.simplePagedResultsIdSetCacheDuration : undefined;
            resourceInputs["singleWriterLockBehavior"] = state ? state.singleWriterLockBehavior : undefined;
            resourceInputs["softDeleteEntryIncludedOperations"] = state ? state.softDeleteEntryIncludedOperations : undefined;
            resourceInputs["storageDir"] = state ? state.storageDir : undefined;
            resourceInputs["subtreeDeleteSizeLimit"] = state ? state.subtreeDeleteSizeLimit : undefined;
            resourceInputs["subtreeModifyDnSizeLimit"] = state ? state.subtreeModifyDnSizeLimit : undefined;
            resourceInputs["systemIndexToPrimeInternalNodesOnlies"] = state ? state.systemIndexToPrimeInternalNodesOnlies : undefined;
            resourceInputs["systemIndexToPrimes"] = state ? state.systemIndexToPrimes : undefined;
            resourceInputs["targetDatabaseSize"] = state ? state.targetDatabaseSize : undefined;
            resourceInputs["taskBackingFile"] = state ? state.taskBackingFile : undefined;
            resourceInputs["taskRetentionTime"] = state ? state.taskRetentionTime : undefined;
            resourceInputs["trustStoreFile"] = state ? state.trustStoreFile : undefined;
            resourceInputs["trustStorePin"] = state ? state.trustStorePin : undefined;
            resourceInputs["trustStorePinFile"] = state ? state.trustStorePinFile : undefined;
            resourceInputs["trustStorePinPassphraseProvider"] = state ? state.trustStorePinPassphraseProvider : undefined;
            resourceInputs["trustStoreType"] = state ? state.trustStoreType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uncachedAttributeCriteria"] = state ? state.uncachedAttributeCriteria : undefined;
            resourceInputs["uncachedEntryCriteria"] = state ? state.uncachedEntryCriteria : undefined;
            resourceInputs["uncachedId2entryCacheMode"] = state ? state.uncachedId2entryCacheMode : undefined;
            resourceInputs["useReversibleForm"] = state ? state.useReversibleForm : undefined;
            resourceInputs["writabilityMode"] = state ? state.writabilityMode : undefined;
            resourceInputs["writeLastmodAttributes"] = state ? state.writeLastmodAttributes : undefined;
        } else {
            const args = argsOrState as DefaultBackendArgs | undefined;
            if ((!args || args.backendId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendId'");
            }
            resourceInputs["alarmRetentionTime"] = args ? args.alarmRetentionTime : undefined;
            resourceInputs["alertRetentionTime"] = args ? args.alertRetentionTime : undefined;
            resourceInputs["applyAccessControlsToChangelogEntryContents"] = args ? args.applyAccessControlsToChangelogEntryContents : undefined;
            resourceInputs["backendId"] = args ? args.backendId : undefined;
            resourceInputs["backgroundPrime"] = args ? args.backgroundPrime : undefined;
            resourceInputs["backupDirectories"] = args ? args.backupDirectories : undefined;
            resourceInputs["backupFilePermissions"] = args ? args.backupFilePermissions : undefined;
            resourceInputs["baseDns"] = args ? args.baseDns : undefined;
            resourceInputs["changelogDeletedEntryExcludeAttributes"] = args ? args.changelogDeletedEntryExcludeAttributes : undefined;
            resourceInputs["changelogDeletedEntryIncludeAttributes"] = args ? args.changelogDeletedEntryIncludeAttributes : undefined;
            resourceInputs["changelogEntryExcludeBaseDns"] = args ? args.changelogEntryExcludeBaseDns : undefined;
            resourceInputs["changelogEntryExcludeFilters"] = args ? args.changelogEntryExcludeFilters : undefined;
            resourceInputs["changelogEntryIncludeBaseDns"] = args ? args.changelogEntryIncludeBaseDns : undefined;
            resourceInputs["changelogEntryIncludeFilters"] = args ? args.changelogEntryIncludeFilters : undefined;
            resourceInputs["changelogExcludeAttributes"] = args ? args.changelogExcludeAttributes : undefined;
            resourceInputs["changelogIncludeAttributes"] = args ? args.changelogIncludeAttributes : undefined;
            resourceInputs["changelogIncludeKeyAttributes"] = args ? args.changelogIncludeKeyAttributes : undefined;
            resourceInputs["changelogMaxBeforeAfterValues"] = args ? args.changelogMaxBeforeAfterValues : undefined;
            resourceInputs["changelogMaximumAge"] = args ? args.changelogMaximumAge : undefined;
            resourceInputs["changelogPurgeBatchSize"] = args ? args.changelogPurgeBatchSize : undefined;
            resourceInputs["changelogWriteBatchSize"] = args ? args.changelogWriteBatchSize : undefined;
            resourceInputs["changelogWriteQueueCapacity"] = args ? args.changelogWriteQueueCapacity : undefined;
            resourceInputs["compactCommonParentDns"] = args ? args.compactCommonParentDns : undefined;
            resourceInputs["compositeIndexEntryLimit"] = args ? args.compositeIndexEntryLimit : undefined;
            resourceInputs["compressEntries"] = args ? args.compressEntries : undefined;
            resourceInputs["dbBackgroundSyncInterval"] = args ? args.dbBackgroundSyncInterval : undefined;
            resourceInputs["dbCachePercent"] = args ? args.dbCachePercent : undefined;
            resourceInputs["dbCheckpointerWakeupInterval"] = args ? args.dbCheckpointerWakeupInterval : undefined;
            resourceInputs["dbCleanerMinUtilization"] = args ? args.dbCleanerMinUtilization : undefined;
            resourceInputs["dbDirectory"] = args ? args.dbDirectory : undefined;
            resourceInputs["dbDirectoryPermissions"] = args ? args.dbDirectoryPermissions : undefined;
            resourceInputs["dbEvictorCriticalPercentage"] = args ? args.dbEvictorCriticalPercentage : undefined;
            resourceInputs["dbImportCachePercent"] = args ? args.dbImportCachePercent : undefined;
            resourceInputs["dbLogFileMax"] = args ? args.dbLogFileMax : undefined;
            resourceInputs["dbLoggingLevel"] = args ? args.dbLoggingLevel : undefined;
            resourceInputs["dbNumCleanerThreads"] = args ? args.dbNumCleanerThreads : undefined;
            resourceInputs["dbTxnWriteNoSync"] = args ? args.dbTxnWriteNoSync : undefined;
            resourceInputs["dbUseThreadLocalHandles"] = args ? args.dbUseThreadLocalHandles : undefined;
            resourceInputs["deadlockRetryLimit"] = args ? args.deadlockRetryLimit : undefined;
            resourceInputs["defaultCacheMode"] = args ? args.defaultCacheMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabledAlertTypes"] = args ? args.disabledAlertTypes : undefined;
            resourceInputs["dn2idCacheMode"] = args ? args.dn2idCacheMode : undefined;
            resourceInputs["dn2uriCacheMode"] = args ? args.dn2uriCacheMode : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["exportThreadCount"] = args ? args.exportThreadCount : undefined;
            resourceInputs["externalTxnDefaultBackendLockBehavior"] = args ? args.externalTxnDefaultBackendLockBehavior : undefined;
            resourceInputs["hashEntries"] = args ? args.hashEntries : undefined;
            resourceInputs["id2childrenCacheMode"] = args ? args.id2childrenCacheMode : undefined;
            resourceInputs["id2childrenIndexEntryLimit"] = args ? args.id2childrenIndexEntryLimit : undefined;
            resourceInputs["id2entryCacheMode"] = args ? args.id2entryCacheMode : undefined;
            resourceInputs["id2subtreeCacheMode"] = args ? args.id2subtreeCacheMode : undefined;
            resourceInputs["id2subtreeIndexEntryLimit"] = args ? args.id2subtreeIndexEntryLimit : undefined;
            resourceInputs["importTempDirectory"] = args ? args.importTempDirectory : undefined;
            resourceInputs["importThreadCount"] = args ? args.importThreadCount : undefined;
            resourceInputs["includeVirtualAttributes"] = args ? args.includeVirtualAttributes : undefined;
            resourceInputs["indexEntryLimit"] = args ? args.indexEntryLimit : undefined;
            resourceInputs["indexExcludeAttributes"] = args ? args.indexExcludeAttributes : undefined;
            resourceInputs["indexIncludeAttributes"] = args ? args.indexIncludeAttributes : undefined;
            resourceInputs["insignificantConfigArchiveAttributes"] = args ? args.insignificantConfigArchiveAttributes : undefined;
            resourceInputs["insignificantConfigArchiveBaseDns"] = args ? args.insignificantConfigArchiveBaseDns : undefined;
            resourceInputs["isPrivateBackend"] = args ? args.isPrivateBackend : undefined;
            resourceInputs["jeProperties"] = args ? args.jeProperties : undefined;
            resourceInputs["ldifFile"] = args ? args.ldifFile : undefined;
            resourceInputs["maintainConfigArchive"] = args ? args.maintainConfigArchive : undefined;
            resourceInputs["maxAlarms"] = args ? args.maxAlarms : undefined;
            resourceInputs["maxAlerts"] = args ? args.maxAlerts : undefined;
            resourceInputs["maxConfigArchiveCount"] = args ? args.maxConfigArchiveCount : undefined;
            resourceInputs["maximumFinalTaskLogMessagesToRetain"] = args ? args.maximumFinalTaskLogMessagesToRetain : undefined;
            resourceInputs["maximumInitialTaskLogMessagesToRetain"] = args ? args.maximumInitialTaskLogMessagesToRetain : undefined;
            resourceInputs["metricsDir"] = args ? args.metricsDir : undefined;
            resourceInputs["mirroredSubtreeEntryUpdateTimeout"] = args ? args.mirroredSubtreeEntryUpdateTimeout : undefined;
            resourceInputs["mirroredSubtreePeerPollingInterval"] = args ? args.mirroredSubtreePeerPollingInterval : undefined;
            resourceInputs["mirroredSubtreeSearchTimeout"] = args ? args.mirroredSubtreeSearchTimeout : undefined;
            resourceInputs["notificationManager"] = args ? args.notificationManager : undefined;
            resourceInputs["notificationSenderAddress"] = args ? args.notificationSenderAddress : undefined;
            resourceInputs["numRecentChanges"] = args ? args.numRecentChanges : undefined;
            resourceInputs["offlineProcessDatabaseOpenTimeout"] = args ? args.offlineProcessDatabaseOpenTimeout : undefined;
            resourceInputs["primeAllIndexes"] = args ? args.primeAllIndexes : undefined;
            resourceInputs["primeMethods"] = args ? args.primeMethods : undefined;
            resourceInputs["primeThreadCount"] = args ? args.primeThreadCount : undefined;
            resourceInputs["primeTimeLimit"] = args ? args.primeTimeLimit : undefined;
            resourceInputs["processFiltersWithUndefinedAttributeTypes"] = args ? args.processFiltersWithUndefinedAttributeTypes : undefined;
            resourceInputs["readOnlySchemaFiles"] = args ? args.readOnlySchemaFiles : undefined;
            resourceInputs["reportExcludedChangelogAttributes"] = args ? args.reportExcludedChangelogAttributes : undefined;
            resourceInputs["retentionPolicies"] = args ? args.retentionPolicies : undefined;
            resourceInputs["returnUnavailableForUntrustedIndex"] = args ? args.returnUnavailableForUntrustedIndex : undefined;
            resourceInputs["returnUnavailableWhenDisabled"] = args ? args.returnUnavailableWhenDisabled : undefined;
            resourceInputs["sampleFlushInterval"] = args ? args.sampleFlushInterval : undefined;
            resourceInputs["schemaEntryDns"] = args ? args.schemaEntryDns : undefined;
            resourceInputs["setDegradedAlertForUntrustedIndex"] = args ? args.setDegradedAlertForUntrustedIndex : undefined;
            resourceInputs["setDegradedAlertWhenDisabled"] = args ? args.setDegradedAlertWhenDisabled : undefined;
            resourceInputs["showAllAttributes"] = args ? args.showAllAttributes : undefined;
            resourceInputs["simplePagedResultsIdSetCacheDuration"] = args ? args.simplePagedResultsIdSetCacheDuration : undefined;
            resourceInputs["singleWriterLockBehavior"] = args ? args.singleWriterLockBehavior : undefined;
            resourceInputs["softDeleteEntryIncludedOperations"] = args ? args.softDeleteEntryIncludedOperations : undefined;
            resourceInputs["storageDir"] = args ? args.storageDir : undefined;
            resourceInputs["subtreeDeleteSizeLimit"] = args ? args.subtreeDeleteSizeLimit : undefined;
            resourceInputs["subtreeModifyDnSizeLimit"] = args ? args.subtreeModifyDnSizeLimit : undefined;
            resourceInputs["systemIndexToPrimeInternalNodesOnlies"] = args ? args.systemIndexToPrimeInternalNodesOnlies : undefined;
            resourceInputs["systemIndexToPrimes"] = args ? args.systemIndexToPrimes : undefined;
            resourceInputs["targetDatabaseSize"] = args ? args.targetDatabaseSize : undefined;
            resourceInputs["taskBackingFile"] = args ? args.taskBackingFile : undefined;
            resourceInputs["taskRetentionTime"] = args ? args.taskRetentionTime : undefined;
            resourceInputs["trustStoreFile"] = args ? args.trustStoreFile : undefined;
            resourceInputs["trustStorePin"] = args?.trustStorePin ? pulumi.secret(args.trustStorePin) : undefined;
            resourceInputs["trustStorePinFile"] = args ? args.trustStorePinFile : undefined;
            resourceInputs["trustStorePinPassphraseProvider"] = args ? args.trustStorePinPassphraseProvider : undefined;
            resourceInputs["trustStoreType"] = args ? args.trustStoreType : undefined;
            resourceInputs["uncachedAttributeCriteria"] = args ? args.uncachedAttributeCriteria : undefined;
            resourceInputs["uncachedEntryCriteria"] = args ? args.uncachedEntryCriteria : undefined;
            resourceInputs["uncachedId2entryCacheMode"] = args ? args.uncachedId2entryCacheMode : undefined;
            resourceInputs["useReversibleForm"] = args ? args.useReversibleForm : undefined;
            resourceInputs["writabilityMode"] = args ? args.writabilityMode : undefined;
            resourceInputs["writeLastmodAttributes"] = args ? args.writeLastmodAttributes : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["trustStorePin"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DefaultBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultBackend resources.
 */
export interface DefaultBackendState {
    /**
     * Specifies the maximum length of time that information about raised alarms should be maintained before they will be
     * purged.
     */
    alarmRetentionTime?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that information about generated alerts should be maintained before they will be
     * purged.
     */
    alertRetentionTime?: pulumi.Input<string>;
    /**
     * Indicates whether the contents of changelog entries should be subject to access control and sensitive attribute
     * evaluation such that the contents of attributes like changes, deletedEntryAttrs, ds-changelog-entry-key-attr-values,
     * ds-changelog-before-values, and ds-changelog-after-values may be altered based on attributes the user can see in the
     * target entry.
     */
    applyAccessControlsToChangelogEntryContents?: pulumi.Input<boolean>;
    /**
     * Specifies a name to identify the associated backend.
     */
    backendId?: pulumi.Input<string>;
    /**
     * Indicates whether to attempt to perform the prime using a background thread if possible. If background priming is
     * enabled, then the Directory Server may be allowed to accept client connections and process requests while the prime is
     * in progress.
     */
    backgroundPrime?: pulumi.Input<boolean>;
    /**
     * Specifies the path to a backup directory containing one or more backups for a particular backend.
     */
    backupDirectories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the permissions that should be applied to files and directories created by a backup of the backend.
     */
    backupFilePermissions?: pulumi.Input<string>;
    /**
     * Specifies the base DN(s) for the data that the backend handles.
     */
    baseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of attribute types that should be excluded from a changelog entry for DELETE operations.
     */
    changelogDeletedEntryExcludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of attribute types that should be included in a changelog entry for DELETE operations.
     */
    changelogDeletedEntryIncludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The base DNs for branches in the data for which no changelog records should be generated.
     */
    changelogEntryExcludeBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter that indicates which changelog entries should be excluded from the changelog. Note that this filter is
     * evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by
     * the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the
     * changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.
     */
    changelogEntryExcludeFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The base DNs for branches in the data for which to record changes in the changelog.
     */
    changelogEntryIncludeBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter that indicates which changelog entries should actually be stored in the changelog. Note that this filter is
     * evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by
     * the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the
     * changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.
     */
    changelogEntryIncludeFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of attribute types that should be excluded in a changelog entry for ADD and MODIFY operations.
     */
    changelogExcludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies which attribute types will be included in a changelog entry for ADD and MODIFY operations.
     */
    changelogIncludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies which attribute types will be included in a changelog entry on every change.
     */
    changelogIncludeKeyAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This controls whether all attribute values for a modified attribute (even those values that have not changed) will be
     * included in the changelog entry. If the number of attribute values does not exceed this limit, then all values for the
     * modified attribute will be included in the changelog entry.
     */
    changelogMaxBeforeAfterValues?: pulumi.Input<number>;
    /**
     * Changes are guaranteed to be maintained in the changelog database for at least this duration. Setting
     * target-database-size can allow additional changes to be maintained up to the configured size on disk.
     */
    changelogMaximumAge?: pulumi.Input<string>;
    /**
     * Specifies the number of changelog entries purged in a single database transaction.
     */
    changelogPurgeBatchSize?: pulumi.Input<number>;
    /**
     * Specifies the number of changelog entries written in a single database transaction.
     */
    changelogWriteBatchSize?: pulumi.Input<number>;
    /**
     * Specifies the capacity of the changelog write queue in number of changes.
     */
    changelogWriteQueueCapacity?: pulumi.Input<number>;
    /**
     * Provides a DN of an entry that may be the parent for a large number of entries in the backend. This may be used to help
     * increase the space efficiency when encoding entries for storage.
     */
    compactCommonParentDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum number of entries that are allowed to match a given composite index key before that particular
     * composite index key is no longer maintained.
     */
    compositeIndexEntryLimit?: pulumi.Input<number>;
    /**
     * Indicates whether the backend should attempt to compress entries before storing them in the database.
     */
    compressEntries?: pulumi.Input<boolean>;
    /**
     * Specifies the interval to use when performing background synchronous writes in the database environment in order to
     * smooth overall write performance and increase data durability. A value of "0 s" will disable background synchronous
     * writes.
     */
    dbBackgroundSyncInterval?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `changelog`: Specifies the percentage of JVM memory to allocate to the changelog
     * database cache. - `local-db`: Specifies the percentage of JVM memory to allocate to the database cache.
     */
    dbCachePercent?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that should pass between checkpoints.
     */
    dbCheckpointerWakeupInterval?: pulumi.Input<string>;
    /**
     * Specifies the minimum percentage of "live" data that the database cleaner attempts to keep in database log files.
     */
    dbCleanerMinUtilization?: pulumi.Input<number>;
    /**
     * Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files
     * containing the data for this backend. The files for this backend are stored in a sub-directory named after the
     * backend-id.
     */
    dbDirectory?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `changelog`: Specifies the permissions that should be applied to the directory
     * containing the backend database files and to directories and files created during backup of the backend. - `local-db`:
     * Specifies the permissions that should be applied to the directory containing the backend database files and to
     * directories and files created during backup or LDIF export of the backend.
     */
    dbDirectoryPermissions?: pulumi.Input<string>;
    /**
     * Specifies the percentage over the configured maximum that the database cache is allowed to grow. It is recommended to
     * set this value slightly above zero when the database is too large to fully cache in memory. In this case, a dedicated
     * background evictor thread is used to perform evictions once the cache fills up reducing the possibility that server
     * threads are blocked.
     */
    dbEvictorCriticalPercentage?: pulumi.Input<number>;
    /**
     * The percentage of JVM memory to allocate to the database cache during import operations.
     */
    dbImportCachePercent?: pulumi.Input<number>;
    /**
     * Specifies the maximum size for a database log file.
     */
    dbLogFileMax?: pulumi.Input<string>;
    /**
     * Specifies the log level that should be used by the database when it is writing information into the je.info file.
     */
    dbLoggingLevel?: pulumi.Input<string>;
    /**
     * Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired
     * utilization. A value of zero indicates that the number of cleaner threads should be automatically configured based on
     * the number of available CPUs.
     */
    dbNumCleanerThreads?: pulumi.Input<number>;
    /**
     * Indicates whether the database should synchronously flush data as it is written to disk.
     */
    dbTxnWriteNoSync?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use thread-local database handles to reduce contention in the backend.
     */
    dbUseThreadLocalHandles?: pulumi.Input<boolean>;
    /**
     * Specifies the number of times that the server should retry an attempted operation in the backend if a deadlock results
     * from two concurrent requests that interfere with each other in a conflicting manner.
     */
    deadlockRetryLimit?: pulumi.Input<number>;
    /**
     * Specifies the cache mode that should be used for any database for which the cache mode is not explicitly specified. This
     * includes the id2entry database, which stores encoded entries, and all attribute indexes.
     */
    defaultCacheMode?: pulumi.Input<string>;
    /**
     * A description for this Backend
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the names of the alert types that should not be added to the backend. This can be used to suppress high volume
     * alerts that might trigger hitting the max-alerts limit sooner than desired. Disabled alert types will not be sent out
     * over persistent searches on this backend.
     */
    disabledAlertTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the dn2id database, which provides a mapping
     * between normalized entry DNs and the corresponding entry IDs.
     */
    dn2idCacheMode?: pulumi.Input<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the dn2uri database, which provides a mapping
     * between a normalized entry DN and a set of referral URLs contained in the associated smart referral entry.
     */
    dn2uriCacheMode?: pulumi.Input<string>;
    /**
     * Indicates whether the backend is enabled in the server.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the number of threads to use for concurrently retrieving and encoding entries during an LDIF export.
     */
    exportThreadCount?: pulumi.Input<number>;
    /**
     * Specifies the default behavior that should be exhibited by external transactions (e.g., an LDAP transaction or an atomic
     * multi-update operation) with regard to acquiring an exclusive lock in this backend.
     */
    externalTxnDefaultBackendLockBehavior?: pulumi.Input<string>;
    /**
     * Indicates whether to calculate and store a message digest of the entry contents along with the entry data, in order to
     * provide a means of verifying the integrity of the entry data.
     */
    hashEntries?: pulumi.Input<boolean>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2children database, which provides a
     * mapping between the entry ID of a particular entry and the entry IDs of all of its immediate children. This index may be
     * used when performing searches with a single-level scope if the search filter cannot be resolved to a small enough
     * candidate list. The size of this database directly depends on the number of entries that have children.
     */
    id2childrenCacheMode?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of entry IDs to maintain for each entry in the id2children system index (which keeps track
     * of the immediate children for an entry, to assist in otherwise unindexed searches with a single-level scope). A value of
     * 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.
     */
    id2childrenIndexEntryLimit?: pulumi.Input<number>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2entry database, which provides a
     * mapping between entry IDs and entry contents. Consider configuring uncached entries or uncached attributes in lieu of
     * changing from the "cache-keys-and-values" default value.
     */
    id2entryCacheMode?: pulumi.Input<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2subtree database, which provides a
     * mapping between the entry ID of a particular entry and the entry IDs of all of its children to any depth. This index may
     * be used when performing searches with a whole-subtree or subordinate-subtree scope if the search filter cannot be
     * resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have
     * children.
     */
    id2subtreeCacheMode?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of entry IDs to maintain for each entry in the id2subtree system index (which keeps track
     * of all descendants below an entry, to assist in otherwise unindexed searches with a whole-subtree or subordinate subtree
     * scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on
     * server performance.
     */
    id2subtreeIndexEntryLimit?: pulumi.Input<number>;
    /**
     * Specifies the location of the directory that is used to hold temporary information during the index post-processing
     * phase of an LDIF import.
     */
    importTempDirectory?: pulumi.Input<string>;
    /**
     * Specifies the number of threads to use for concurrent processing during an LDIF import.
     */
    importThreadCount?: pulumi.Input<number>;
    /**
     * Specifies the changelog entry elements (if any) in which virtual attributes should be included.
     */
    includeVirtualAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is
     * no longer maintained.
     */
    indexEntryLimit?: pulumi.Input<number>;
    /**
     * Specifies which attribute types are to be specifically excluded from the set of attribute indexes maintained on the
     * changelog. This property is useful when the index-include-attribute property contains one of the special values "*" and
     * "+".
     */
    indexExcludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies which attribute types are to be specifically included in the set of attribute indexes maintained on the
     * changelog. If this property does not have any values then no attribute types are indexed.
     */
    indexIncludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name or OID of an attribute type that is considered insignificant for the purpose of maintaining the configuration
     * archive.
     */
    insignificantConfigArchiveAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Supported in PingDirectory product version 9.2.0.3+. The base DN that is considered insignificant for the purpose of
     * maintaining the configuration archive.
     */
    insignificantConfigArchiveBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `ldif`: Indicates whether the backend should be considered a private backend,
     * which indicates that it is used for storing operational data rather than user-defined information. - `local-db`:
     * Indicates whether this backend should be considered a private backend in the server. Private backends are meant for
     * storing server-internal information and should not be used for user or application data.
     */
    isPrivateBackend?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `changelog`: Specifies the database and environment properties for the Berkeley
     * DB Java Edition database for this changelog backend. - `local-db`: Specifies the database and environment properties for
     * the Berkeley DB Java Edition database serving the data for this backend.
     */
    jeProperties?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - One of [`alert`, `alarm`]: Specifies the path to the LDIF file that serves as the
     * backing file for this backend. - `ldif`: Specifies the path to the LDIF file containing the data for this backend.
     */
    ldifFile?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 9.3.0.0+. Indicates whether the server should maintain the config archive
     * with new changes to the config backend.
     */
    maintainConfigArchive?: pulumi.Input<boolean>;
    /**
     * Specifies the maximum number of alarms that should be retained. If more alarms than this configured maximum are
     * generated within the alarm retention time, then the oldest alarms will be purged to achieve this maximum. Only alarms at
     * normal severity will be purged.
     */
    maxAlarms?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of alerts that should be retained. If more alerts than this configured maximum are
     * generated within the alert retention time, then the oldest alerts will be purged to achieve this maximum.
     */
    maxAlerts?: pulumi.Input<number>;
    /**
     * Supported in PingDirectory product version 9.3.0.0+. Indicates the maximum number of previous config files to keep as
     * part of maintaining the config archive.
     */
    maxConfigArchiveCount?: pulumi.Input<number>;
    /**
     * The maximum number of log messages to retain in each task entry from the end of the processing for that task. If too
     * many messages are logged during task processing, then retaining only a limited number of messages from the beginning
     * and/or end of task processing can reduce the amount of memory that the server consumes by caching information about
     * currently-active and recently-completed tasks.
     */
    maximumFinalTaskLogMessagesToRetain?: pulumi.Input<number>;
    /**
     * The maximum number of log messages to retain in each task entry from the beginning of the processing for that task. If
     * too many messages are logged during task processing, then retaining only a limited number of messages from the beginning
     * and/or end of task processing can reduce the amount of memory that the server consumes by caching information about
     * currently-active and recently-completed tasks.
     */
    maximumInitialTaskLogMessagesToRetain?: pulumi.Input<number>;
    /**
     * Specifies the path to the directory that contains metric definitions.
     */
    metricsDir?: pulumi.Input<string>;
    /**
     * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum
     * amount of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all
     * servers in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide
     * configuration data.
     */
    mirroredSubtreeEntryUpdateTimeout?: pulumi.Input<string>;
    /**
     * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum
     * amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the
     * topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.
     */
    mirroredSubtreePeerPollingInterval?: pulumi.Input<string>;
    /**
     * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum
     * amount of time to wait for a search operation to complete. Mirrored data includes meta-data about the servers in the
     * topology as well as cluster-wide configuration data. Search requests that take longer than this timeout will be canceled
     * and considered failures.
     */
    mirroredSubtreeSearchTimeout?: pulumi.Input<string>;
    /**
     * Specifies a notification manager for changes resulting from operations processed through this Backend
     */
    notificationManager?: pulumi.Input<string>;
    /**
     * Specifies the email address to use as the sender address (that is, the "From:" address) for notification mail messages
     * generated when a task completes execution.
     */
    notificationSenderAddress?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the number of recent LDAP entry changes per replica for which the backend keeps a record to allow replication
     * to recover in the event that the server is abruptly terminated. Increasing this value can lead to an increased peak
     * server modification rate as well as increased replication throughput.
     */
    numRecentChanges?: pulumi.Input<number>;
    /**
     * Specifies a timeout duration which will be used for opening the database environment by an offline process, such as
     * export-ldif.
     */
    offlineProcessDatabaseOpenTimeout?: pulumi.Input<string>;
    /**
     * Indicates whether to prime all indexes associated with this backend, or to only prime the specified set of indexes (as
     * configured with the system-index-to-prime property for the system indexes, and the prime-index property in the attribute
     * index definition for attribute indexes).
     */
    primeAllIndexes?: pulumi.Input<boolean>;
    /**
     * Specifies the method that should be used to prime caches with data for this backend.
     */
    primeMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the number of threads to use when priming. At present, this applies only to the preload and
     * cursor-across-indexes prime methods.
     */
    primeThreadCount?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that the backend prime should be allowed to run. A duration of zero seconds
     * indicates that there should not be a time limit.
     */
    primeTimeLimit?: pulumi.Input<string>;
    /**
     * Determines whether the Directory Server should continue filter processing for LDAP search operations in this Local DB
     * Backend that includes a search filter with an attribute that is not defined in the schema. This will only apply if
     * check-schema is enabled in the global configuration.
     */
    processFiltersWithUndefinedAttributeTypes?: pulumi.Input<boolean>;
    /**
     * Specifies the name of a file (which must exist in the config/schema directory) containing schema elements that should be
     * considered read-only. Any schema definitions contained in read-only files cannot be altered by external clients.
     */
    readOnlySchemaFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether changelog entries that have been altered by applying access controls should include additional
     * information about any attributes that may have been removed.
     */
    reportExcludedChangelogAttributes?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultBackendRequiredAction>[]>;
    /**
     * The retention policy to use for the Metrics Backend .
     */
    retentionPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines whether the Directory Server returns UNAVAILABLE for any LDAP search operation in this Local DB Backend that
     * would use an index whose contents cannot be trusted.
     */
    returnUnavailableForUntrustedIndex?: pulumi.Input<boolean>;
    /**
     * Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is
     * disabled.
     */
    returnUnavailableWhenDisabled?: pulumi.Input<boolean>;
    /**
     * Period when samples are flushed to disk.
     */
    sampleFlushInterval?: pulumi.Input<string>;
    /**
     * Defines the base DNs of the subtrees in which the schema information is published in addition to the value included in
     * the base-dn property.
     */
    schemaEntryDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines whether the Directory Server enters a DEGRADED state when this Local DB Backend has an index whose contents
     * cannot be trusted.
     */
    setDegradedAlertForUntrustedIndex?: pulumi.Input<boolean>;
    /**
     * Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is
     * disabled.
     */
    setDegradedAlertWhenDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether to treat all attributes in the schema entry as if they were user attributes regardless of their
     * configuration.
     */
    showAllAttributes?: pulumi.Input<boolean>;
    /**
     * Supported in PingDirectory product version 10.1.0.0+. Specifies the length of time to cache the candidate ID set used
     * for indexed search operations including the simple paged results control.
     */
    simplePagedResultsIdSetCacheDuration?: pulumi.Input<string>;
    /**
     * Specifies the condition under which to acquire a single-writer lock to ensure that the associated operation will be the
     * only write in progress at the time the lock is held. The single-writer lock can help avoid problems that result from
     * database lock conflicts that arise between two write operations being processed at the same time in the same backend.
     * This will not have any effect on the read operations processed while the write is in progress.
     */
    singleWriterLockBehavior?: pulumi.Input<string>;
    /**
     * Specifies which operations performed on soft-deleted entries will appear in the changelog.
     */
    softDeleteEntryIncludedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the path to the directory that will be used to store queued samples.
     */
    storageDir?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of entries that may be deleted from the backend when using the subtree delete control.
     */
    subtreeDeleteSizeLimit?: pulumi.Input<number>;
    /**
     * Supported in PingDirectory product version 10.1.0.0+. Specifies the maximum number of entries that may exist below an
     * entry targeted by a modify DN operation. This includes both direct and indirect subordinates (to any depth), although
     * the entry at the top of the subtree (the one directly targeted by the modify DN operation) is not included in this
     * count.
     */
    subtreeModifyDnSizeLimit?: pulumi.Input<number>;
    /**
     * Specifies the system index(es) for which internal database nodes only (i.e., the database keys but not values) should be
     * primed when the backend is initialized.
     */
    systemIndexToPrimeInternalNodesOnlies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies which system index(es) should be primed when the backend is initialized.
     */
    systemIndexToPrimes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The changelog database is allowed to grow up to this size on disk even if changes are older than the configured
     * changelog-maximum-age.
     */
    targetDatabaseSize?: pulumi.Input<string>;
    /**
     * Specifies the path to the backing file for storing information about the tasks configured in the server.
     */
    taskBackingFile?: pulumi.Input<string>;
    /**
     * Specifies the length of time that task entries should be retained after processing on the associated task has been
     * completed.
     */
    taskRetentionTime?: pulumi.Input<string>;
    /**
     * Specifies the path to the file that stores the trust information.
     */
    trustStoreFile?: pulumi.Input<string>;
    /**
     * Specifies the clear-text PIN needed to access the Trust Store Backend.
     */
    trustStorePin?: pulumi.Input<string>;
    /**
     * Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to
     * access the Trust Store Backend.
     */
    trustStorePinFile?: pulumi.Input<string>;
    /**
     * The passphrase provider to use to obtain the clear-text PIN needed to access the Trust Store Backend.
     */
    trustStorePinPassphraseProvider?: pulumi.Input<string>;
    /**
     * Specifies the format for the data in the key store file.
     */
    trustStoreType?: pulumi.Input<string>;
    /**
     * The type of Backend resource. Options are ['schema', 'backup', 'encryption-settings', 'ldif', 'trust-store', 'custom',
     * 'changelog', 'monitor', 'local-db', 'config-file-handler', 'task', 'alert', 'alarm', 'metrics']
     */
    type?: pulumi.Input<string>;
    /**
     * The criteria that will be used to identify attributes that should be written into the uncached-id2entry database rather
     * than the id2entry database. This will only be used for entries in which the associated uncached-entry-criteria does not
     * indicate that the entire entry should be uncached.
     */
    uncachedAttributeCriteria?: pulumi.Input<string>;
    /**
     * The criteria that will be used to identify entries that should be written into the uncached-id2entry database rather
     * than the id2entry database.
     */
    uncachedEntryCriteria?: pulumi.Input<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the uncached-id2entry database, which
     * provides a way to store complete or partial encoded entries with a different (and presumably less memory-intensive)
     * cache mode than records written to id2entry.
     */
    uncachedId2entryCacheMode?: pulumi.Input<string>;
    /**
     * Specifies whether the changelog should provide enough information to be able to revert the changes if desired.
     */
    useReversibleForm?: pulumi.Input<boolean>;
    /**
     * Specifies the behavior that the backend should use when processing write operations.
     */
    writabilityMode?: pulumi.Input<string>;
    /**
     * Specifies whether values of creatorsName, createTimestamp, modifiersName and modifyTimestamp attributes will be written
     * to changelog entries.
     */
    writeLastmodAttributes?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DefaultBackend resource.
 */
export interface DefaultBackendArgs {
    /**
     * Specifies the maximum length of time that information about raised alarms should be maintained before they will be
     * purged.
     */
    alarmRetentionTime?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that information about generated alerts should be maintained before they will be
     * purged.
     */
    alertRetentionTime?: pulumi.Input<string>;
    /**
     * Indicates whether the contents of changelog entries should be subject to access control and sensitive attribute
     * evaluation such that the contents of attributes like changes, deletedEntryAttrs, ds-changelog-entry-key-attr-values,
     * ds-changelog-before-values, and ds-changelog-after-values may be altered based on attributes the user can see in the
     * target entry.
     */
    applyAccessControlsToChangelogEntryContents?: pulumi.Input<boolean>;
    /**
     * Specifies a name to identify the associated backend.
     */
    backendId: pulumi.Input<string>;
    /**
     * Indicates whether to attempt to perform the prime using a background thread if possible. If background priming is
     * enabled, then the Directory Server may be allowed to accept client connections and process requests while the prime is
     * in progress.
     */
    backgroundPrime?: pulumi.Input<boolean>;
    /**
     * Specifies the path to a backup directory containing one or more backups for a particular backend.
     */
    backupDirectories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the permissions that should be applied to files and directories created by a backup of the backend.
     */
    backupFilePermissions?: pulumi.Input<string>;
    /**
     * Specifies the base DN(s) for the data that the backend handles.
     */
    baseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of attribute types that should be excluded from a changelog entry for DELETE operations.
     */
    changelogDeletedEntryExcludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of attribute types that should be included in a changelog entry for DELETE operations.
     */
    changelogDeletedEntryIncludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The base DNs for branches in the data for which no changelog records should be generated.
     */
    changelogEntryExcludeBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter that indicates which changelog entries should be excluded from the changelog. Note that this filter is
     * evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by
     * the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the
     * changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.
     */
    changelogEntryExcludeFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The base DNs for branches in the data for which to record changes in the changelog.
     */
    changelogEntryIncludeBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter that indicates which changelog entries should actually be stored in the changelog. Note that this filter is
     * evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by
     * the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the
     * changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.
     */
    changelogEntryIncludeFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of attribute types that should be excluded in a changelog entry for ADD and MODIFY operations.
     */
    changelogExcludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies which attribute types will be included in a changelog entry for ADD and MODIFY operations.
     */
    changelogIncludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies which attribute types will be included in a changelog entry on every change.
     */
    changelogIncludeKeyAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This controls whether all attribute values for a modified attribute (even those values that have not changed) will be
     * included in the changelog entry. If the number of attribute values does not exceed this limit, then all values for the
     * modified attribute will be included in the changelog entry.
     */
    changelogMaxBeforeAfterValues?: pulumi.Input<number>;
    /**
     * Changes are guaranteed to be maintained in the changelog database for at least this duration. Setting
     * target-database-size can allow additional changes to be maintained up to the configured size on disk.
     */
    changelogMaximumAge?: pulumi.Input<string>;
    /**
     * Specifies the number of changelog entries purged in a single database transaction.
     */
    changelogPurgeBatchSize?: pulumi.Input<number>;
    /**
     * Specifies the number of changelog entries written in a single database transaction.
     */
    changelogWriteBatchSize?: pulumi.Input<number>;
    /**
     * Specifies the capacity of the changelog write queue in number of changes.
     */
    changelogWriteQueueCapacity?: pulumi.Input<number>;
    /**
     * Provides a DN of an entry that may be the parent for a large number of entries in the backend. This may be used to help
     * increase the space efficiency when encoding entries for storage.
     */
    compactCommonParentDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum number of entries that are allowed to match a given composite index key before that particular
     * composite index key is no longer maintained.
     */
    compositeIndexEntryLimit?: pulumi.Input<number>;
    /**
     * Indicates whether the backend should attempt to compress entries before storing them in the database.
     */
    compressEntries?: pulumi.Input<boolean>;
    /**
     * Specifies the interval to use when performing background synchronous writes in the database environment in order to
     * smooth overall write performance and increase data durability. A value of "0 s" will disable background synchronous
     * writes.
     */
    dbBackgroundSyncInterval?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `changelog`: Specifies the percentage of JVM memory to allocate to the changelog
     * database cache. - `local-db`: Specifies the percentage of JVM memory to allocate to the database cache.
     */
    dbCachePercent?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that should pass between checkpoints.
     */
    dbCheckpointerWakeupInterval?: pulumi.Input<string>;
    /**
     * Specifies the minimum percentage of "live" data that the database cleaner attempts to keep in database log files.
     */
    dbCleanerMinUtilization?: pulumi.Input<number>;
    /**
     * Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files
     * containing the data for this backend. The files for this backend are stored in a sub-directory named after the
     * backend-id.
     */
    dbDirectory?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `changelog`: Specifies the permissions that should be applied to the directory
     * containing the backend database files and to directories and files created during backup of the backend. - `local-db`:
     * Specifies the permissions that should be applied to the directory containing the backend database files and to
     * directories and files created during backup or LDIF export of the backend.
     */
    dbDirectoryPermissions?: pulumi.Input<string>;
    /**
     * Specifies the percentage over the configured maximum that the database cache is allowed to grow. It is recommended to
     * set this value slightly above zero when the database is too large to fully cache in memory. In this case, a dedicated
     * background evictor thread is used to perform evictions once the cache fills up reducing the possibility that server
     * threads are blocked.
     */
    dbEvictorCriticalPercentage?: pulumi.Input<number>;
    /**
     * The percentage of JVM memory to allocate to the database cache during import operations.
     */
    dbImportCachePercent?: pulumi.Input<number>;
    /**
     * Specifies the maximum size for a database log file.
     */
    dbLogFileMax?: pulumi.Input<string>;
    /**
     * Specifies the log level that should be used by the database when it is writing information into the je.info file.
     */
    dbLoggingLevel?: pulumi.Input<string>;
    /**
     * Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired
     * utilization. A value of zero indicates that the number of cleaner threads should be automatically configured based on
     * the number of available CPUs.
     */
    dbNumCleanerThreads?: pulumi.Input<number>;
    /**
     * Indicates whether the database should synchronously flush data as it is written to disk.
     */
    dbTxnWriteNoSync?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use thread-local database handles to reduce contention in the backend.
     */
    dbUseThreadLocalHandles?: pulumi.Input<boolean>;
    /**
     * Specifies the number of times that the server should retry an attempted operation in the backend if a deadlock results
     * from two concurrent requests that interfere with each other in a conflicting manner.
     */
    deadlockRetryLimit?: pulumi.Input<number>;
    /**
     * Specifies the cache mode that should be used for any database for which the cache mode is not explicitly specified. This
     * includes the id2entry database, which stores encoded entries, and all attribute indexes.
     */
    defaultCacheMode?: pulumi.Input<string>;
    /**
     * A description for this Backend
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the names of the alert types that should not be added to the backend. This can be used to suppress high volume
     * alerts that might trigger hitting the max-alerts limit sooner than desired. Disabled alert types will not be sent out
     * over persistent searches on this backend.
     */
    disabledAlertTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the dn2id database, which provides a mapping
     * between normalized entry DNs and the corresponding entry IDs.
     */
    dn2idCacheMode?: pulumi.Input<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the dn2uri database, which provides a mapping
     * between a normalized entry DN and a set of referral URLs contained in the associated smart referral entry.
     */
    dn2uriCacheMode?: pulumi.Input<string>;
    /**
     * Indicates whether the backend is enabled in the server.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the number of threads to use for concurrently retrieving and encoding entries during an LDIF export.
     */
    exportThreadCount?: pulumi.Input<number>;
    /**
     * Specifies the default behavior that should be exhibited by external transactions (e.g., an LDAP transaction or an atomic
     * multi-update operation) with regard to acquiring an exclusive lock in this backend.
     */
    externalTxnDefaultBackendLockBehavior?: pulumi.Input<string>;
    /**
     * Indicates whether to calculate and store a message digest of the entry contents along with the entry data, in order to
     * provide a means of verifying the integrity of the entry data.
     */
    hashEntries?: pulumi.Input<boolean>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2children database, which provides a
     * mapping between the entry ID of a particular entry and the entry IDs of all of its immediate children. This index may be
     * used when performing searches with a single-level scope if the search filter cannot be resolved to a small enough
     * candidate list. The size of this database directly depends on the number of entries that have children.
     */
    id2childrenCacheMode?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of entry IDs to maintain for each entry in the id2children system index (which keeps track
     * of the immediate children for an entry, to assist in otherwise unindexed searches with a single-level scope). A value of
     * 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.
     */
    id2childrenIndexEntryLimit?: pulumi.Input<number>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2entry database, which provides a
     * mapping between entry IDs and entry contents. Consider configuring uncached entries or uncached attributes in lieu of
     * changing from the "cache-keys-and-values" default value.
     */
    id2entryCacheMode?: pulumi.Input<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the id2subtree database, which provides a
     * mapping between the entry ID of a particular entry and the entry IDs of all of its children to any depth. This index may
     * be used when performing searches with a whole-subtree or subordinate-subtree scope if the search filter cannot be
     * resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have
     * children.
     */
    id2subtreeCacheMode?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of entry IDs to maintain for each entry in the id2subtree system index (which keeps track
     * of all descendants below an entry, to assist in otherwise unindexed searches with a whole-subtree or subordinate subtree
     * scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on
     * server performance.
     */
    id2subtreeIndexEntryLimit?: pulumi.Input<number>;
    /**
     * Specifies the location of the directory that is used to hold temporary information during the index post-processing
     * phase of an LDIF import.
     */
    importTempDirectory?: pulumi.Input<string>;
    /**
     * Specifies the number of threads to use for concurrent processing during an LDIF import.
     */
    importThreadCount?: pulumi.Input<number>;
    /**
     * Specifies the changelog entry elements (if any) in which virtual attributes should be included.
     */
    includeVirtualAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is
     * no longer maintained.
     */
    indexEntryLimit?: pulumi.Input<number>;
    /**
     * Specifies which attribute types are to be specifically excluded from the set of attribute indexes maintained on the
     * changelog. This property is useful when the index-include-attribute property contains one of the special values "*" and
     * "+".
     */
    indexExcludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies which attribute types are to be specifically included in the set of attribute indexes maintained on the
     * changelog. If this property does not have any values then no attribute types are indexed.
     */
    indexIncludeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name or OID of an attribute type that is considered insignificant for the purpose of maintaining the configuration
     * archive.
     */
    insignificantConfigArchiveAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Supported in PingDirectory product version 9.2.0.3+. The base DN that is considered insignificant for the purpose of
     * maintaining the configuration archive.
     */
    insignificantConfigArchiveBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `ldif`: Indicates whether the backend should be considered a private backend,
     * which indicates that it is used for storing operational data rather than user-defined information. - `local-db`:
     * Indicates whether this backend should be considered a private backend in the server. Private backends are meant for
     * storing server-internal information and should not be used for user or application data.
     */
    isPrivateBackend?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `changelog`: Specifies the database and environment properties for the Berkeley
     * DB Java Edition database for this changelog backend. - `local-db`: Specifies the database and environment properties for
     * the Berkeley DB Java Edition database serving the data for this backend.
     */
    jeProperties?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - One of [`alert`, `alarm`]: Specifies the path to the LDIF file that serves as the
     * backing file for this backend. - `ldif`: Specifies the path to the LDIF file containing the data for this backend.
     */
    ldifFile?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 9.3.0.0+. Indicates whether the server should maintain the config archive
     * with new changes to the config backend.
     */
    maintainConfigArchive?: pulumi.Input<boolean>;
    /**
     * Specifies the maximum number of alarms that should be retained. If more alarms than this configured maximum are
     * generated within the alarm retention time, then the oldest alarms will be purged to achieve this maximum. Only alarms at
     * normal severity will be purged.
     */
    maxAlarms?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of alerts that should be retained. If more alerts than this configured maximum are
     * generated within the alert retention time, then the oldest alerts will be purged to achieve this maximum.
     */
    maxAlerts?: pulumi.Input<number>;
    /**
     * Supported in PingDirectory product version 9.3.0.0+. Indicates the maximum number of previous config files to keep as
     * part of maintaining the config archive.
     */
    maxConfigArchiveCount?: pulumi.Input<number>;
    /**
     * The maximum number of log messages to retain in each task entry from the end of the processing for that task. If too
     * many messages are logged during task processing, then retaining only a limited number of messages from the beginning
     * and/or end of task processing can reduce the amount of memory that the server consumes by caching information about
     * currently-active and recently-completed tasks.
     */
    maximumFinalTaskLogMessagesToRetain?: pulumi.Input<number>;
    /**
     * The maximum number of log messages to retain in each task entry from the beginning of the processing for that task. If
     * too many messages are logged during task processing, then retaining only a limited number of messages from the beginning
     * and/or end of task processing can reduce the amount of memory that the server consumes by caching information about
     * currently-active and recently-completed tasks.
     */
    maximumInitialTaskLogMessagesToRetain?: pulumi.Input<number>;
    /**
     * Specifies the path to the directory that contains metric definitions.
     */
    metricsDir?: pulumi.Input<string>;
    /**
     * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum
     * amount of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all
     * servers in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide
     * configuration data.
     */
    mirroredSubtreeEntryUpdateTimeout?: pulumi.Input<string>;
    /**
     * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum
     * amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the
     * topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.
     */
    mirroredSubtreePeerPollingInterval?: pulumi.Input<string>;
    /**
     * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum
     * amount of time to wait for a search operation to complete. Mirrored data includes meta-data about the servers in the
     * topology as well as cluster-wide configuration data. Search requests that take longer than this timeout will be canceled
     * and considered failures.
     */
    mirroredSubtreeSearchTimeout?: pulumi.Input<string>;
    /**
     * Specifies a notification manager for changes resulting from operations processed through this Backend
     */
    notificationManager?: pulumi.Input<string>;
    /**
     * Specifies the email address to use as the sender address (that is, the "From:" address) for notification mail messages
     * generated when a task completes execution.
     */
    notificationSenderAddress?: pulumi.Input<string>;
    /**
     * Specifies the number of recent LDAP entry changes per replica for which the backend keeps a record to allow replication
     * to recover in the event that the server is abruptly terminated. Increasing this value can lead to an increased peak
     * server modification rate as well as increased replication throughput.
     */
    numRecentChanges?: pulumi.Input<number>;
    /**
     * Specifies a timeout duration which will be used for opening the database environment by an offline process, such as
     * export-ldif.
     */
    offlineProcessDatabaseOpenTimeout?: pulumi.Input<string>;
    /**
     * Indicates whether to prime all indexes associated with this backend, or to only prime the specified set of indexes (as
     * configured with the system-index-to-prime property for the system indexes, and the prime-index property in the attribute
     * index definition for attribute indexes).
     */
    primeAllIndexes?: pulumi.Input<boolean>;
    /**
     * Specifies the method that should be used to prime caches with data for this backend.
     */
    primeMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the number of threads to use when priming. At present, this applies only to the preload and
     * cursor-across-indexes prime methods.
     */
    primeThreadCount?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that the backend prime should be allowed to run. A duration of zero seconds
     * indicates that there should not be a time limit.
     */
    primeTimeLimit?: pulumi.Input<string>;
    /**
     * Determines whether the Directory Server should continue filter processing for LDAP search operations in this Local DB
     * Backend that includes a search filter with an attribute that is not defined in the schema. This will only apply if
     * check-schema is enabled in the global configuration.
     */
    processFiltersWithUndefinedAttributeTypes?: pulumi.Input<boolean>;
    /**
     * Specifies the name of a file (which must exist in the config/schema directory) containing schema elements that should be
     * considered read-only. Any schema definitions contained in read-only files cannot be altered by external clients.
     */
    readOnlySchemaFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether changelog entries that have been altered by applying access controls should include additional
     * information about any attributes that may have been removed.
     */
    reportExcludedChangelogAttributes?: pulumi.Input<string>;
    /**
     * The retention policy to use for the Metrics Backend .
     */
    retentionPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines whether the Directory Server returns UNAVAILABLE for any LDAP search operation in this Local DB Backend that
     * would use an index whose contents cannot be trusted.
     */
    returnUnavailableForUntrustedIndex?: pulumi.Input<boolean>;
    /**
     * Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is
     * disabled.
     */
    returnUnavailableWhenDisabled?: pulumi.Input<boolean>;
    /**
     * Period when samples are flushed to disk.
     */
    sampleFlushInterval?: pulumi.Input<string>;
    /**
     * Defines the base DNs of the subtrees in which the schema information is published in addition to the value included in
     * the base-dn property.
     */
    schemaEntryDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines whether the Directory Server enters a DEGRADED state when this Local DB Backend has an index whose contents
     * cannot be trusted.
     */
    setDegradedAlertForUntrustedIndex?: pulumi.Input<boolean>;
    /**
     * Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is
     * disabled.
     */
    setDegradedAlertWhenDisabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether to treat all attributes in the schema entry as if they were user attributes regardless of their
     * configuration.
     */
    showAllAttributes?: pulumi.Input<boolean>;
    /**
     * Supported in PingDirectory product version 10.1.0.0+. Specifies the length of time to cache the candidate ID set used
     * for indexed search operations including the simple paged results control.
     */
    simplePagedResultsIdSetCacheDuration?: pulumi.Input<string>;
    /**
     * Specifies the condition under which to acquire a single-writer lock to ensure that the associated operation will be the
     * only write in progress at the time the lock is held. The single-writer lock can help avoid problems that result from
     * database lock conflicts that arise between two write operations being processed at the same time in the same backend.
     * This will not have any effect on the read operations processed while the write is in progress.
     */
    singleWriterLockBehavior?: pulumi.Input<string>;
    /**
     * Specifies which operations performed on soft-deleted entries will appear in the changelog.
     */
    softDeleteEntryIncludedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the path to the directory that will be used to store queued samples.
     */
    storageDir?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of entries that may be deleted from the backend when using the subtree delete control.
     */
    subtreeDeleteSizeLimit?: pulumi.Input<number>;
    /**
     * Supported in PingDirectory product version 10.1.0.0+. Specifies the maximum number of entries that may exist below an
     * entry targeted by a modify DN operation. This includes both direct and indirect subordinates (to any depth), although
     * the entry at the top of the subtree (the one directly targeted by the modify DN operation) is not included in this
     * count.
     */
    subtreeModifyDnSizeLimit?: pulumi.Input<number>;
    /**
     * Specifies the system index(es) for which internal database nodes only (i.e., the database keys but not values) should be
     * primed when the backend is initialized.
     */
    systemIndexToPrimeInternalNodesOnlies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies which system index(es) should be primed when the backend is initialized.
     */
    systemIndexToPrimes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The changelog database is allowed to grow up to this size on disk even if changes are older than the configured
     * changelog-maximum-age.
     */
    targetDatabaseSize?: pulumi.Input<string>;
    /**
     * Specifies the path to the backing file for storing information about the tasks configured in the server.
     */
    taskBackingFile?: pulumi.Input<string>;
    /**
     * Specifies the length of time that task entries should be retained after processing on the associated task has been
     * completed.
     */
    taskRetentionTime?: pulumi.Input<string>;
    /**
     * Specifies the path to the file that stores the trust information.
     */
    trustStoreFile?: pulumi.Input<string>;
    /**
     * Specifies the clear-text PIN needed to access the Trust Store Backend.
     */
    trustStorePin?: pulumi.Input<string>;
    /**
     * Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to
     * access the Trust Store Backend.
     */
    trustStorePinFile?: pulumi.Input<string>;
    /**
     * The passphrase provider to use to obtain the clear-text PIN needed to access the Trust Store Backend.
     */
    trustStorePinPassphraseProvider?: pulumi.Input<string>;
    /**
     * Specifies the format for the data in the key store file.
     */
    trustStoreType?: pulumi.Input<string>;
    /**
     * The criteria that will be used to identify attributes that should be written into the uncached-id2entry database rather
     * than the id2entry database. This will only be used for entries in which the associated uncached-entry-criteria does not
     * indicate that the entire entry should be uncached.
     */
    uncachedAttributeCriteria?: pulumi.Input<string>;
    /**
     * The criteria that will be used to identify entries that should be written into the uncached-id2entry database rather
     * than the id2entry database.
     */
    uncachedEntryCriteria?: pulumi.Input<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the uncached-id2entry database, which
     * provides a way to store complete or partial encoded entries with a different (and presumably less memory-intensive)
     * cache mode than records written to id2entry.
     */
    uncachedId2entryCacheMode?: pulumi.Input<string>;
    /**
     * Specifies whether the changelog should provide enough information to be able to revert the changes if desired.
     */
    useReversibleForm?: pulumi.Input<boolean>;
    /**
     * Specifies the behavior that the backend should use when processing write operations.
     */
    writabilityMode?: pulumi.Input<string>;
    /**
     * Specifies whether values of creatorsName, createTimestamp, modifiersName and modifyTimestamp attributes will be written
     * to changelog entries.
     */
    writeLastmodAttributes?: pulumi.Input<boolean>;
}
