// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class JsonAttributeConstraints extends pulumi.CustomResource {
    /**
     * Get an existing JsonAttributeConstraints resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JsonAttributeConstraintsState, opts?: pulumi.CustomResourceOptions): JsonAttributeConstraints {
        return new JsonAttributeConstraints(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/jsonAttributeConstraints:JsonAttributeConstraints';

    /**
     * Returns true if the given object is an instance of JsonAttributeConstraints.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JsonAttributeConstraints {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JsonAttributeConstraints.__pulumiType;
    }

    /**
     * Indicates whether JSON objects stored as values of attributes with the associated attribute-type will be permitted to
     * include fields for which there is no subordinate json-field-constraints definition. If unnamed fields are allowed, then
     * no constraints will be imposed on the values of those fields. However, if unnamed fields are not allowed, then the
     * server will reject any attempt to store a JSON object with a field for which there is no corresponding
     * json-fields-constraints definition.
     */
    public readonly allowUnnamedFields!: pulumi.Output<boolean>;
    /**
     * The name or OID of the LDAP attribute type whose values will be subject to the associated field constraints. This
     * attribute type must be defined in the server schema, and it must have a "JSON object" syntax.
     */
    public readonly attributeType!: pulumi.Output<string>;
    /**
     * A description for this JSON Attribute Constraints
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether this JSON Attribute Constraints is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.JsonAttributeConstraintsRequiredAction[]>;
    /**
     * The type of JSON Attribute Constraints resource. Options are ['json-attribute-constraints']
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a JsonAttributeConstraints resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JsonAttributeConstraintsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JsonAttributeConstraintsArgs | JsonAttributeConstraintsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JsonAttributeConstraintsState | undefined;
            resourceInputs["allowUnnamedFields"] = state ? state.allowUnnamedFields : undefined;
            resourceInputs["attributeType"] = state ? state.attributeType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as JsonAttributeConstraintsArgs | undefined;
            if ((!args || args.attributeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attributeType'");
            }
            resourceInputs["allowUnnamedFields"] = args ? args.allowUnnamedFields : undefined;
            resourceInputs["attributeType"] = args ? args.attributeType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JsonAttributeConstraints.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JsonAttributeConstraints resources.
 */
export interface JsonAttributeConstraintsState {
    /**
     * Indicates whether JSON objects stored as values of attributes with the associated attribute-type will be permitted to
     * include fields for which there is no subordinate json-field-constraints definition. If unnamed fields are allowed, then
     * no constraints will be imposed on the values of those fields. However, if unnamed fields are not allowed, then the
     * server will reject any attempt to store a JSON object with a field for which there is no corresponding
     * json-fields-constraints definition.
     */
    allowUnnamedFields?: pulumi.Input<boolean>;
    /**
     * The name or OID of the LDAP attribute type whose values will be subject to the associated field constraints. This
     * attribute type must be defined in the server schema, and it must have a "JSON object" syntax.
     */
    attributeType?: pulumi.Input<string>;
    /**
     * A description for this JSON Attribute Constraints
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this JSON Attribute Constraints is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.JsonAttributeConstraintsRequiredAction>[]>;
    /**
     * The type of JSON Attribute Constraints resource. Options are ['json-attribute-constraints']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JsonAttributeConstraints resource.
 */
export interface JsonAttributeConstraintsArgs {
    /**
     * Indicates whether JSON objects stored as values of attributes with the associated attribute-type will be permitted to
     * include fields for which there is no subordinate json-field-constraints definition. If unnamed fields are allowed, then
     * no constraints will be imposed on the values of those fields. However, if unnamed fields are not allowed, then the
     * server will reject any attempt to store a JSON object with a field for which there is no corresponding
     * json-fields-constraints definition.
     */
    allowUnnamedFields?: pulumi.Input<boolean>;
    /**
     * The name or OID of the LDAP attribute type whose values will be subject to the associated field constraints. This
     * attribute type must be defined in the server schema, and it must have a "JSON object" syntax.
     */
    attributeType: pulumi.Input<string>;
    /**
     * A description for this JSON Attribute Constraints
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this JSON Attribute Constraints is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The type of JSON Attribute Constraints resource. Options are ['json-attribute-constraints']
     */
    type?: pulumi.Input<string>;
}
