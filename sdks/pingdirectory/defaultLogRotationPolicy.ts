// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultLogRotationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DefaultLogRotationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultLogRotationPolicyState, opts?: pulumi.CustomResourceOptions): DefaultLogRotationPolicy {
        return new DefaultLogRotationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultLogRotationPolicy:DefaultLogRotationPolicy';

    /**
     * Returns true if the given object is an instance of DefaultLogRotationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultLogRotationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultLogRotationPolicy.__pulumiType;
    }

    /**
     * A description for this Log Rotation Policy
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the maximum size that a log file can reach before it is rotated.
     */
    public readonly fileSizeLimit!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultLogRotationPolicyRequiredAction[]>;
    /**
     * Specifies the time interval between rotations.
     */
    public readonly rotationInterval!: pulumi.Output<string>;
    /**
     * Specifies the time of day at which log rotation should occur.
     */
    public readonly timeOfDays!: pulumi.Output<string[]>;
    /**
     * The type of Log Rotation Policy resource. Options are ['time-limit', 'fixed-time', 'never-rotate', 'size-limit']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultLogRotationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultLogRotationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultLogRotationPolicyArgs | DefaultLogRotationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultLogRotationPolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileSizeLimit"] = state ? state.fileSizeLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["rotationInterval"] = state ? state.rotationInterval : undefined;
            resourceInputs["timeOfDays"] = state ? state.timeOfDays : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultLogRotationPolicyArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileSizeLimit"] = args ? args.fileSizeLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rotationInterval"] = args ? args.rotationInterval : undefined;
            resourceInputs["timeOfDays"] = args ? args.timeOfDays : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultLogRotationPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultLogRotationPolicy resources.
 */
export interface DefaultLogRotationPolicyState {
    /**
     * A description for this Log Rotation Policy
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the maximum size that a log file can reach before it is rotated.
     */
    fileSizeLimit?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultLogRotationPolicyRequiredAction>[]>;
    /**
     * Specifies the time interval between rotations.
     */
    rotationInterval?: pulumi.Input<string>;
    /**
     * Specifies the time of day at which log rotation should occur.
     */
    timeOfDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of Log Rotation Policy resource. Options are ['time-limit', 'fixed-time', 'never-rotate', 'size-limit']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultLogRotationPolicy resource.
 */
export interface DefaultLogRotationPolicyArgs {
    /**
     * A description for this Log Rotation Policy
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the maximum size that a log file can reach before it is rotated.
     */
    fileSizeLimit?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the time interval between rotations.
     */
    rotationInterval?: pulumi.Input<string>;
    /**
     * Specifies the time of day at which log rotation should occur.
     */
    timeOfDays?: pulumi.Input<pulumi.Input<string>[]>;
}
