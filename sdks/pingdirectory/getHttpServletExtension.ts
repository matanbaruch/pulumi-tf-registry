// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getHttpServletExtension(args: GetHttpServletExtensionArgs, opts?: pulumi.InvokeOptions): Promise<GetHttpServletExtensionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getHttpServletExtension:getHttpServletExtension", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHttpServletExtension.
 */
export interface GetHttpServletExtensionArgs {
    name: string;
}

/**
 * A collection of values returned by getHttpServletExtension.
 */
export interface GetHttpServletExtensionResult {
    readonly accessTokenScope: string;
    readonly accessTokenValidators: string[];
    readonly additionalResponseContents: string;
    readonly allowContextOverride: boolean;
    readonly allowedAuthenticationTypes: string[];
    readonly allowedControls: string[];
    readonly alwaysIncludeMonitorEntryNameLabel: boolean;
    readonly alwaysUsePermissiveModify: boolean;
    readonly audience: string;
    readonly availableStatusCode: number;
    readonly baseContextPath: string;
    readonly basicAuthEnabled: boolean;
    readonly bearerTokenAuthEnabled: boolean;
    readonly bulkMaxConcurrentRequests: number;
    readonly bulkMaxOperations: number;
    readonly bulkMaxPayloadSize: string;
    readonly characterEncoding: string;
    readonly correlationIdResponseHeader: string;
    readonly crossOriginPolicy: string;
    readonly debugEnabled: boolean;
    readonly debugLevel: string;
    readonly debugTypes: string[];
    readonly defaultMimeType: string;
    readonly defaultOperationalAttributes: string[];
    readonly degradedStatusCode: number;
    readonly description: string;
    readonly documentRootDirectory: string;
    readonly enableDirectoryIndexing: boolean;
    readonly entityTagLdapAttribute: string;
    readonly excludeLdapBaseDns: string[];
    readonly excludeLdapObjectclasses: string[];
    readonly exposeRequestAttributes: boolean;
    readonly exposeServerContext: boolean;
    readonly exposeSessionAttributes: boolean;
    readonly extensionArguments: string[];
    readonly extensionClass: string;
    readonly id: string;
    readonly idTokenValidators: string[];
    readonly identityMapper: string;
    readonly includeInstanceNameLabel: boolean;
    readonly includeLdapBaseDns: string[];
    readonly includeLdapObjectclasses: string[];
    readonly includeLocationNameLabel: boolean;
    readonly includeMonitorAttributeNameLabel: boolean;
    readonly includeMonitorObjectClassNameLabel: boolean;
    readonly includeProductNameLabel: boolean;
    readonly includeResponseBody: boolean;
    readonly includeStackTrace: boolean;
    readonly indexFiles: string[];
    readonly labelNameValuePairs: string[];
    readonly mapAccessTokensToLocalUsers: string;
    readonly maxPageSize: number;
    readonly maxResults: number;
    readonly mimeTypesFile: string;
    readonly name: string;
    readonly oauthTokenHandler: string;
    readonly overrideStatusCode: number;
    readonly rejectExpansionAttributes: string[];
    readonly requireAuthentication: boolean;
    readonly requireFileServletAccessPrivilege: boolean;
    readonly requireGroups: string[];
    readonly resourceMappingFile: string;
    readonly responseHeaders: string[];
    readonly schemasEndpointObjectclasses: string[];
    readonly scriptArguments: string[];
    readonly scriptClass: string;
    readonly server: string;
    readonly staticContentDirectory: string;
    readonly staticContextPath: string;
    readonly staticCustomDirectory: string;
    readonly staticResponseHeaders: string[];
    readonly swaggerEnabled: boolean;
    readonly templateDirectories: string[];
    readonly temporaryDirectory: string;
    readonly temporaryDirectoryPermissions: string;
    readonly type: string;
    readonly unavailableStatusCode: number;
}
export function getHttpServletExtensionOutput(args: GetHttpServletExtensionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHttpServletExtensionResult> {
    return pulumi.output(args).apply((a: any) => getHttpServletExtension(a, opts))
}

/**
 * A collection of arguments for invoking getHttpServletExtension.
 */
export interface GetHttpServletExtensionOutputArgs {
    name: pulumi.Input<string>;
}
