// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultServerInstance extends pulumi.CustomResource {
    /**
     * Get an existing DefaultServerInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultServerInstanceState, opts?: pulumi.CustomResourceOptions): DefaultServerInstance {
        return new DefaultServerInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultServerInstance:DefaultServerInstance';

    /**
     * Returns true if the given object is an instance of DefaultServerInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultServerInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultServerInstance.__pulumiType;
    }

    /**
     * The set of base DNs under the root DSE.
     */
    public readonly baseDns!: pulumi.Output<string[]>;
    /**
     * The name of the cluster to which this Server Instance belongs. Server instances within the same cluster will share the
     * same cluster-wide configuration.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The name of the host where this Server Instance is installed.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * The TCP port on which this server is listening for HTTP connections.
     */
    public readonly httpPort!: pulumi.Output<number>;
    /**
     * The TCP port on which this server is listening for HTTPS connections.
     */
    public readonly httpsPort!: pulumi.Output<number>;
    /**
     * The public component of the certificate used by this instance to protect inter-server communication and to perform
     * server-specific encryption. This will generally be managed by the server and should only be altered by administrators
     * under explicit direction from Ping Identity support personnel.
     */
    public readonly interServerCertificate!: pulumi.Output<string>;
    /**
     * The TCP port on which this server is listening for JMX connections.
     */
    public readonly jmxPort!: pulumi.Output<number>;
    /**
     * The TCP port on which this server is listening for JMX secure connections.
     */
    public readonly jmxsPort!: pulumi.Output<number>;
    /**
     * The TCP port on which this server is listening for LDAP connections.
     */
    public readonly ldapPort!: pulumi.Output<number>;
    /**
     * The TCP port on which this server is listening for LDAP secure connections.
     */
    public readonly ldapsPort!: pulumi.Output<number>;
    /**
     * The name of the configuration object for a load-balancing algorithm that should include this server.
     */
    public readonly loadBalancingAlgorithmNames!: pulumi.Output<string[]>;
    /**
     * The set of groups of which this server is a member.
     */
    public readonly memberOfServerGroups!: pulumi.Output<string[]>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies the preferred mechanism to use for securing connections to the server.
     */
    public readonly preferredSecurity!: pulumi.Output<string>;
    /**
     * Specifies a unique identifier for the Directory Server within the replication domain.
     */
    public readonly replicationDomainServerIds!: pulumi.Output<number[]>;
    /**
     * The replication TCP port.
     */
    public readonly replicationPort!: pulumi.Output<number>;
    /**
     * Specifies a unique identifier for the replication server on this server instance.
     */
    public readonly replicationServerId!: pulumi.Output<number>;
    /**
     * The name of the replication set assigned to this Directory Server. Restricted domains are only replicated within
     * instances using the same replication set name.
     */
    public readonly replicationSetName!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultServerInstanceRequiredAction[]>;
    /**
     * Specifies the location for the Server Instance.
     */
    public readonly serverInstanceLocation!: pulumi.Output<string>;
    /**
     * The name of this Server Instance. The instance name needs to be unique if this server will be part of a topology of
     * servers that are connected to each other. Once set, it may not be changed.
     */
    public readonly serverInstanceName!: pulumi.Output<string>;
    /**
     * Specifies the type of server installation.
     */
    public readonly serverInstanceType!: pulumi.Output<string>;
    /**
     * The file system path where this Server Instance is installed.
     */
    public readonly serverRoot!: pulumi.Output<string>;
    /**
     * The version of the server.
     */
    public readonly serverVersion!: pulumi.Output<string>;
    /**
     * Indicates whether StartTLS is enabled on this server.
     */
    public readonly startTlsEnabled!: pulumi.Output<boolean>;
    /**
     * The type of Server Instance resource. Options are ['proxy', 'metrics-engine', 'authorize', 'directory', 'sync']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultServerInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultServerInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultServerInstanceArgs | DefaultServerInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultServerInstanceState | undefined;
            resourceInputs["baseDns"] = state ? state.baseDns : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["httpPort"] = state ? state.httpPort : undefined;
            resourceInputs["httpsPort"] = state ? state.httpsPort : undefined;
            resourceInputs["interServerCertificate"] = state ? state.interServerCertificate : undefined;
            resourceInputs["jmxPort"] = state ? state.jmxPort : undefined;
            resourceInputs["jmxsPort"] = state ? state.jmxsPort : undefined;
            resourceInputs["ldapPort"] = state ? state.ldapPort : undefined;
            resourceInputs["ldapsPort"] = state ? state.ldapsPort : undefined;
            resourceInputs["loadBalancingAlgorithmNames"] = state ? state.loadBalancingAlgorithmNames : undefined;
            resourceInputs["memberOfServerGroups"] = state ? state.memberOfServerGroups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["preferredSecurity"] = state ? state.preferredSecurity : undefined;
            resourceInputs["replicationDomainServerIds"] = state ? state.replicationDomainServerIds : undefined;
            resourceInputs["replicationPort"] = state ? state.replicationPort : undefined;
            resourceInputs["replicationServerId"] = state ? state.replicationServerId : undefined;
            resourceInputs["replicationSetName"] = state ? state.replicationSetName : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["serverInstanceLocation"] = state ? state.serverInstanceLocation : undefined;
            resourceInputs["serverInstanceName"] = state ? state.serverInstanceName : undefined;
            resourceInputs["serverInstanceType"] = state ? state.serverInstanceType : undefined;
            resourceInputs["serverRoot"] = state ? state.serverRoot : undefined;
            resourceInputs["serverVersion"] = state ? state.serverVersion : undefined;
            resourceInputs["startTlsEnabled"] = state ? state.startTlsEnabled : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultServerInstanceArgs | undefined;
            resourceInputs["baseDns"] = args ? args.baseDns : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["httpPort"] = args ? args.httpPort : undefined;
            resourceInputs["httpsPort"] = args ? args.httpsPort : undefined;
            resourceInputs["interServerCertificate"] = args ? args.interServerCertificate : undefined;
            resourceInputs["jmxPort"] = args ? args.jmxPort : undefined;
            resourceInputs["jmxsPort"] = args ? args.jmxsPort : undefined;
            resourceInputs["ldapPort"] = args ? args.ldapPort : undefined;
            resourceInputs["ldapsPort"] = args ? args.ldapsPort : undefined;
            resourceInputs["loadBalancingAlgorithmNames"] = args ? args.loadBalancingAlgorithmNames : undefined;
            resourceInputs["memberOfServerGroups"] = args ? args.memberOfServerGroups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["preferredSecurity"] = args ? args.preferredSecurity : undefined;
            resourceInputs["replicationDomainServerIds"] = args ? args.replicationDomainServerIds : undefined;
            resourceInputs["replicationPort"] = args ? args.replicationPort : undefined;
            resourceInputs["replicationServerId"] = args ? args.replicationServerId : undefined;
            resourceInputs["replicationSetName"] = args ? args.replicationSetName : undefined;
            resourceInputs["serverInstanceLocation"] = args ? args.serverInstanceLocation : undefined;
            resourceInputs["serverInstanceName"] = args ? args.serverInstanceName : undefined;
            resourceInputs["serverInstanceType"] = args ? args.serverInstanceType : undefined;
            resourceInputs["serverRoot"] = args ? args.serverRoot : undefined;
            resourceInputs["serverVersion"] = args ? args.serverVersion : undefined;
            resourceInputs["startTlsEnabled"] = args ? args.startTlsEnabled : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultServerInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultServerInstance resources.
 */
export interface DefaultServerInstanceState {
    /**
     * The set of base DNs under the root DSE.
     */
    baseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the cluster to which this Server Instance belongs. Server instances within the same cluster will share the
     * same cluster-wide configuration.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The name of the host where this Server Instance is installed.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The TCP port on which this server is listening for HTTP connections.
     */
    httpPort?: pulumi.Input<number>;
    /**
     * The TCP port on which this server is listening for HTTPS connections.
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * The public component of the certificate used by this instance to protect inter-server communication and to perform
     * server-specific encryption. This will generally be managed by the server and should only be altered by administrators
     * under explicit direction from Ping Identity support personnel.
     */
    interServerCertificate?: pulumi.Input<string>;
    /**
     * The TCP port on which this server is listening for JMX connections.
     */
    jmxPort?: pulumi.Input<number>;
    /**
     * The TCP port on which this server is listening for JMX secure connections.
     */
    jmxsPort?: pulumi.Input<number>;
    /**
     * The TCP port on which this server is listening for LDAP connections.
     */
    ldapPort?: pulumi.Input<number>;
    /**
     * The TCP port on which this server is listening for LDAP secure connections.
     */
    ldapsPort?: pulumi.Input<number>;
    /**
     * The name of the configuration object for a load-balancing algorithm that should include this server.
     */
    loadBalancingAlgorithmNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of groups of which this server is a member.
     */
    memberOfServerGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the preferred mechanism to use for securing connections to the server.
     */
    preferredSecurity?: pulumi.Input<string>;
    /**
     * Specifies a unique identifier for the Directory Server within the replication domain.
     */
    replicationDomainServerIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The replication TCP port.
     */
    replicationPort?: pulumi.Input<number>;
    /**
     * Specifies a unique identifier for the replication server on this server instance.
     */
    replicationServerId?: pulumi.Input<number>;
    /**
     * The name of the replication set assigned to this Directory Server. Restricted domains are only replicated within
     * instances using the same replication set name.
     */
    replicationSetName?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultServerInstanceRequiredAction>[]>;
    /**
     * Specifies the location for the Server Instance.
     */
    serverInstanceLocation?: pulumi.Input<string>;
    /**
     * The name of this Server Instance. The instance name needs to be unique if this server will be part of a topology of
     * servers that are connected to each other. Once set, it may not be changed.
     */
    serverInstanceName?: pulumi.Input<string>;
    /**
     * Specifies the type of server installation.
     */
    serverInstanceType?: pulumi.Input<string>;
    /**
     * The file system path where this Server Instance is installed.
     */
    serverRoot?: pulumi.Input<string>;
    /**
     * The version of the server.
     */
    serverVersion?: pulumi.Input<string>;
    /**
     * Indicates whether StartTLS is enabled on this server.
     */
    startTlsEnabled?: pulumi.Input<boolean>;
    /**
     * The type of Server Instance resource. Options are ['proxy', 'metrics-engine', 'authorize', 'directory', 'sync']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultServerInstance resource.
 */
export interface DefaultServerInstanceArgs {
    /**
     * The set of base DNs under the root DSE.
     */
    baseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the cluster to which this Server Instance belongs. Server instances within the same cluster will share the
     * same cluster-wide configuration.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The name of the host where this Server Instance is installed.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The TCP port on which this server is listening for HTTP connections.
     */
    httpPort?: pulumi.Input<number>;
    /**
     * The TCP port on which this server is listening for HTTPS connections.
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * The public component of the certificate used by this instance to protect inter-server communication and to perform
     * server-specific encryption. This will generally be managed by the server and should only be altered by administrators
     * under explicit direction from Ping Identity support personnel.
     */
    interServerCertificate?: pulumi.Input<string>;
    /**
     * The TCP port on which this server is listening for JMX connections.
     */
    jmxPort?: pulumi.Input<number>;
    /**
     * The TCP port on which this server is listening for JMX secure connections.
     */
    jmxsPort?: pulumi.Input<number>;
    /**
     * The TCP port on which this server is listening for LDAP connections.
     */
    ldapPort?: pulumi.Input<number>;
    /**
     * The TCP port on which this server is listening for LDAP secure connections.
     */
    ldapsPort?: pulumi.Input<number>;
    /**
     * The name of the configuration object for a load-balancing algorithm that should include this server.
     */
    loadBalancingAlgorithmNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of groups of which this server is a member.
     */
    memberOfServerGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the preferred mechanism to use for securing connections to the server.
     */
    preferredSecurity?: pulumi.Input<string>;
    /**
     * Specifies a unique identifier for the Directory Server within the replication domain.
     */
    replicationDomainServerIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The replication TCP port.
     */
    replicationPort?: pulumi.Input<number>;
    /**
     * Specifies a unique identifier for the replication server on this server instance.
     */
    replicationServerId?: pulumi.Input<number>;
    /**
     * The name of the replication set assigned to this Directory Server. Restricted domains are only replicated within
     * instances using the same replication set name.
     */
    replicationSetName?: pulumi.Input<string>;
    /**
     * Specifies the location for the Server Instance.
     */
    serverInstanceLocation?: pulumi.Input<string>;
    /**
     * The name of this Server Instance. The instance name needs to be unique if this server will be part of a topology of
     * servers that are connected to each other. Once set, it may not be changed.
     */
    serverInstanceName?: pulumi.Input<string>;
    /**
     * Specifies the type of server installation.
     */
    serverInstanceType?: pulumi.Input<string>;
    /**
     * The file system path where this Server Instance is installed.
     */
    serverRoot?: pulumi.Input<string>;
    /**
     * The version of the server.
     */
    serverVersion?: pulumi.Input<string>;
    /**
     * Indicates whether StartTLS is enabled on this server.
     */
    startTlsEnabled?: pulumi.Input<boolean>;
}
