// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultLocalDbIndex extends pulumi.CustomResource {
    /**
     * Get an existing DefaultLocalDbIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultLocalDbIndexState, opts?: pulumi.CustomResourceOptions): DefaultLocalDbIndex {
        return new DefaultLocalDbIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultLocalDbIndex:DefaultLocalDbIndex';

    /**
     * Returns true if the given object is an instance of DefaultLocalDbIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultLocalDbIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultLocalDbIndex.__pulumiType;
    }

    /**
     * Specifies the name of the attribute for which the index is to be maintained.
     */
    public readonly attribute!: pulumi.Output<string>;
    /**
     * Name of the parent Backend
     */
    public readonly backendName!: pulumi.Output<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the database for this index. This controls
     * how much database cache memory can be consumed by this index.
     */
    public readonly cacheMode!: pulumi.Output<string>;
    /**
     * A search filter that may be used in conjunction with an equality component for the associated attribute type. If an
     * equality index filter is defined, then an additional equality index will be maintained for the associated attribute, but
     * only for entries which match the provided filter. Further, the index will be used only for searches containing an
     * equality component with the associated attribute type ANDed with this filter.
     */
    public readonly equalityIndexFilters!: pulumi.Output<string[]>;
    /**
     * Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is
     * no longer maintained.
     */
    public readonly indexEntryLimit!: pulumi.Output<number>;
    /**
     * Specifies the type(s) of indexing that should be performed for the associated attribute.
     */
    public readonly indexTypes!: pulumi.Output<string[]>;
    /**
     * Indicates whether to maintain a separate equality index for the associated attribute without any filter, in addition to
     * maintaining an index for each equality index filter that is defined. If this is false, then the attribute will not be
     * indexed for equality by itself but only in conjunction with the defined equality index filters.
     */
    public readonly maintainEqualityIndexWithoutFilter!: pulumi.Output<boolean>;
    /**
     * Indicates whether to continue to maintain a count of the number of matching entries for an index key even after that
     * count exceeds the index entry limit.
     */
    public readonly maintainMatchCountForKeysExceedingEntryLimit!: pulumi.Output<boolean>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * If this option is enabled and this index's backend is configured to prime indexes, then this index will be loaded at
     * startup.
     */
    public readonly primeIndex!: pulumi.Output<boolean>;
    /**
     * If this option is enabled and this index's backend is configured to prime indexes using the preload method, then only
     * the internal database nodes (i.e., the database keys but not values) should be primed when the backend is initialized.
     */
    public readonly primeInternalNodesOnly!: pulumi.Output<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultLocalDbIndexRequiredAction[]>;
    /**
     * Specifies, for substring indexes, the maximum number of entries that are allowed to match a given index key before that
     * particular index key is no longer maintained. Setting a large limit can dramatically increase the database size on disk
     * and have a big impact on server performance if the indexed attribute is modified frequently. When a very large limit is
     * required, creating a dedicated composite index with an index-filter-pattern of (attr=*?*) will give the best balance
     * between search and update performance.
     */
    public readonly substringIndexEntryLimit!: pulumi.Output<number>;
    /**
     * The length of substrings in a substring index.
     */
    public readonly substringLength!: pulumi.Output<number>;
    /**
     * The type of Local DB Index resource. Options are ['local-db-index']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultLocalDbIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultLocalDbIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultLocalDbIndexArgs | DefaultLocalDbIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultLocalDbIndexState | undefined;
            resourceInputs["attribute"] = state ? state.attribute : undefined;
            resourceInputs["backendName"] = state ? state.backendName : undefined;
            resourceInputs["cacheMode"] = state ? state.cacheMode : undefined;
            resourceInputs["equalityIndexFilters"] = state ? state.equalityIndexFilters : undefined;
            resourceInputs["indexEntryLimit"] = state ? state.indexEntryLimit : undefined;
            resourceInputs["indexTypes"] = state ? state.indexTypes : undefined;
            resourceInputs["maintainEqualityIndexWithoutFilter"] = state ? state.maintainEqualityIndexWithoutFilter : undefined;
            resourceInputs["maintainMatchCountForKeysExceedingEntryLimit"] = state ? state.maintainMatchCountForKeysExceedingEntryLimit : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["primeIndex"] = state ? state.primeIndex : undefined;
            resourceInputs["primeInternalNodesOnly"] = state ? state.primeInternalNodesOnly : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["substringIndexEntryLimit"] = state ? state.substringIndexEntryLimit : undefined;
            resourceInputs["substringLength"] = state ? state.substringLength : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultLocalDbIndexArgs | undefined;
            if ((!args || args.attribute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attribute'");
            }
            if ((!args || args.backendName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendName'");
            }
            resourceInputs["attribute"] = args ? args.attribute : undefined;
            resourceInputs["backendName"] = args ? args.backendName : undefined;
            resourceInputs["cacheMode"] = args ? args.cacheMode : undefined;
            resourceInputs["equalityIndexFilters"] = args ? args.equalityIndexFilters : undefined;
            resourceInputs["indexEntryLimit"] = args ? args.indexEntryLimit : undefined;
            resourceInputs["indexTypes"] = args ? args.indexTypes : undefined;
            resourceInputs["maintainEqualityIndexWithoutFilter"] = args ? args.maintainEqualityIndexWithoutFilter : undefined;
            resourceInputs["maintainMatchCountForKeysExceedingEntryLimit"] = args ? args.maintainMatchCountForKeysExceedingEntryLimit : undefined;
            resourceInputs["primeIndex"] = args ? args.primeIndex : undefined;
            resourceInputs["primeInternalNodesOnly"] = args ? args.primeInternalNodesOnly : undefined;
            resourceInputs["substringIndexEntryLimit"] = args ? args.substringIndexEntryLimit : undefined;
            resourceInputs["substringLength"] = args ? args.substringLength : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultLocalDbIndex.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultLocalDbIndex resources.
 */
export interface DefaultLocalDbIndexState {
    /**
     * Specifies the name of the attribute for which the index is to be maintained.
     */
    attribute?: pulumi.Input<string>;
    /**
     * Name of the parent Backend
     */
    backendName?: pulumi.Input<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the database for this index. This controls
     * how much database cache memory can be consumed by this index.
     */
    cacheMode?: pulumi.Input<string>;
    /**
     * A search filter that may be used in conjunction with an equality component for the associated attribute type. If an
     * equality index filter is defined, then an additional equality index will be maintained for the associated attribute, but
     * only for entries which match the provided filter. Further, the index will be used only for searches containing an
     * equality component with the associated attribute type ANDed with this filter.
     */
    equalityIndexFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is
     * no longer maintained.
     */
    indexEntryLimit?: pulumi.Input<number>;
    /**
     * Specifies the type(s) of indexing that should be performed for the associated attribute.
     */
    indexTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether to maintain a separate equality index for the associated attribute without any filter, in addition to
     * maintaining an index for each equality index filter that is defined. If this is false, then the attribute will not be
     * indexed for equality by itself but only in conjunction with the defined equality index filters.
     */
    maintainEqualityIndexWithoutFilter?: pulumi.Input<boolean>;
    /**
     * Indicates whether to continue to maintain a count of the number of matching entries for an index key even after that
     * count exceeds the index entry limit.
     */
    maintainMatchCountForKeysExceedingEntryLimit?: pulumi.Input<boolean>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If this option is enabled and this index's backend is configured to prime indexes, then this index will be loaded at
     * startup.
     */
    primeIndex?: pulumi.Input<boolean>;
    /**
     * If this option is enabled and this index's backend is configured to prime indexes using the preload method, then only
     * the internal database nodes (i.e., the database keys but not values) should be primed when the backend is initialized.
     */
    primeInternalNodesOnly?: pulumi.Input<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultLocalDbIndexRequiredAction>[]>;
    /**
     * Specifies, for substring indexes, the maximum number of entries that are allowed to match a given index key before that
     * particular index key is no longer maintained. Setting a large limit can dramatically increase the database size on disk
     * and have a big impact on server performance if the indexed attribute is modified frequently. When a very large limit is
     * required, creating a dedicated composite index with an index-filter-pattern of (attr=*?*) will give the best balance
     * between search and update performance.
     */
    substringIndexEntryLimit?: pulumi.Input<number>;
    /**
     * The length of substrings in a substring index.
     */
    substringLength?: pulumi.Input<number>;
    /**
     * The type of Local DB Index resource. Options are ['local-db-index']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultLocalDbIndex resource.
 */
export interface DefaultLocalDbIndexArgs {
    /**
     * Specifies the name of the attribute for which the index is to be maintained.
     */
    attribute: pulumi.Input<string>;
    /**
     * Name of the parent Backend
     */
    backendName: pulumi.Input<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the database for this index. This controls
     * how much database cache memory can be consumed by this index.
     */
    cacheMode?: pulumi.Input<string>;
    /**
     * A search filter that may be used in conjunction with an equality component for the associated attribute type. If an
     * equality index filter is defined, then an additional equality index will be maintained for the associated attribute, but
     * only for entries which match the provided filter. Further, the index will be used only for searches containing an
     * equality component with the associated attribute type ANDed with this filter.
     */
    equalityIndexFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is
     * no longer maintained.
     */
    indexEntryLimit?: pulumi.Input<number>;
    /**
     * Specifies the type(s) of indexing that should be performed for the associated attribute.
     */
    indexTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether to maintain a separate equality index for the associated attribute without any filter, in addition to
     * maintaining an index for each equality index filter that is defined. If this is false, then the attribute will not be
     * indexed for equality by itself but only in conjunction with the defined equality index filters.
     */
    maintainEqualityIndexWithoutFilter?: pulumi.Input<boolean>;
    /**
     * Indicates whether to continue to maintain a count of the number of matching entries for an index key even after that
     * count exceeds the index entry limit.
     */
    maintainMatchCountForKeysExceedingEntryLimit?: pulumi.Input<boolean>;
    /**
     * If this option is enabled and this index's backend is configured to prime indexes, then this index will be loaded at
     * startup.
     */
    primeIndex?: pulumi.Input<boolean>;
    /**
     * If this option is enabled and this index's backend is configured to prime indexes using the preload method, then only
     * the internal database nodes (i.e., the database keys but not values) should be primed when the backend is initialized.
     */
    primeInternalNodesOnly?: pulumi.Input<boolean>;
    /**
     * Specifies, for substring indexes, the maximum number of entries that are allowed to match a given index key before that
     * particular index key is no longer maintained. Setting a large limit can dramatically increase the database size on disk
     * and have a big impact on server performance if the indexed attribute is modified frequently. When a very large limit is
     * required, creating a dedicated composite index with an index-filter-pattern of (attr=*?*) will give the best balance
     * between search and update performance.
     */
    substringIndexEntryLimit?: pulumi.Input<number>;
    /**
     * The length of substrings in a substring index.
     */
    substringLength?: pulumi.Input<number>;
}
