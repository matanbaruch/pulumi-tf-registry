// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LocalDbVlvIndex extends pulumi.CustomResource {
    /**
     * Get an existing LocalDbVlvIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocalDbVlvIndexState, opts?: pulumi.CustomResourceOptions): LocalDbVlvIndex {
        return new LocalDbVlvIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/localDbVlvIndex:LocalDbVlvIndex';

    /**
     * Returns true if the given object is an instance of LocalDbVlvIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocalDbVlvIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocalDbVlvIndex.__pulumiType;
    }

    /**
     * Name of the parent Backend
     */
    public readonly backendName!: pulumi.Output<string>;
    /**
     * Specifies the base DN used in the search query that is being indexed.
     */
    public readonly baseDn!: pulumi.Output<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the database for this index.
     */
    public readonly cacheMode!: pulumi.Output<string | undefined>;
    /**
     * Specifies the LDAP filter used in the query that is being indexed.
     */
    public readonly filter!: pulumi.Output<string>;
    /**
     * Specifies the number of entry IDs to store in a single sorted set before it must be split.
     */
    public readonly maxBlockSize!: pulumi.Output<number>;
    /**
     * Specifies a unique name for this VLV index.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.LocalDbVlvIndexRequiredAction[]>;
    /**
     * Specifies the LDAP scope of the query that is being indexed.
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Specifies the names of the attributes that are used to sort the entries for the query being indexed.
     */
    public readonly sortOrder!: pulumi.Output<string>;
    /**
     * The type of Local DB VLV Index resource. Options are ['local-db-vlv-index']
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a LocalDbVlvIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocalDbVlvIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocalDbVlvIndexArgs | LocalDbVlvIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocalDbVlvIndexState | undefined;
            resourceInputs["backendName"] = state ? state.backendName : undefined;
            resourceInputs["baseDn"] = state ? state.baseDn : undefined;
            resourceInputs["cacheMode"] = state ? state.cacheMode : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["maxBlockSize"] = state ? state.maxBlockSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["sortOrder"] = state ? state.sortOrder : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as LocalDbVlvIndexArgs | undefined;
            if ((!args || args.backendName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendName'");
            }
            if ((!args || args.baseDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseDn'");
            }
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.sortOrder === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sortOrder'");
            }
            resourceInputs["backendName"] = args ? args.backendName : undefined;
            resourceInputs["baseDn"] = args ? args.baseDn : undefined;
            resourceInputs["cacheMode"] = args ? args.cacheMode : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["maxBlockSize"] = args ? args.maxBlockSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["sortOrder"] = args ? args.sortOrder : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocalDbVlvIndex.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LocalDbVlvIndex resources.
 */
export interface LocalDbVlvIndexState {
    /**
     * Name of the parent Backend
     */
    backendName?: pulumi.Input<string>;
    /**
     * Specifies the base DN used in the search query that is being indexed.
     */
    baseDn?: pulumi.Input<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the database for this index.
     */
    cacheMode?: pulumi.Input<string>;
    /**
     * Specifies the LDAP filter used in the query that is being indexed.
     */
    filter?: pulumi.Input<string>;
    /**
     * Specifies the number of entry IDs to store in a single sorted set before it must be split.
     */
    maxBlockSize?: pulumi.Input<number>;
    /**
     * Specifies a unique name for this VLV index.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.LocalDbVlvIndexRequiredAction>[]>;
    /**
     * Specifies the LDAP scope of the query that is being indexed.
     */
    scope?: pulumi.Input<string>;
    /**
     * Specifies the names of the attributes that are used to sort the entries for the query being indexed.
     */
    sortOrder?: pulumi.Input<string>;
    /**
     * The type of Local DB VLV Index resource. Options are ['local-db-vlv-index']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LocalDbVlvIndex resource.
 */
export interface LocalDbVlvIndexArgs {
    /**
     * Name of the parent Backend
     */
    backendName: pulumi.Input<string>;
    /**
     * Specifies the base DN used in the search query that is being indexed.
     */
    baseDn: pulumi.Input<string>;
    /**
     * Specifies the cache mode that should be used when accessing the records in the database for this index.
     */
    cacheMode?: pulumi.Input<string>;
    /**
     * Specifies the LDAP filter used in the query that is being indexed.
     */
    filter: pulumi.Input<string>;
    /**
     * Specifies the number of entry IDs to store in a single sorted set before it must be split.
     */
    maxBlockSize?: pulumi.Input<number>;
    /**
     * Specifies a unique name for this VLV index.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the LDAP scope of the query that is being indexed.
     */
    scope: pulumi.Input<string>;
    /**
     * Specifies the names of the attributes that are used to sort the entries for the query being indexed.
     */
    sortOrder: pulumi.Input<string>;
    /**
     * The type of Local DB VLV Index resource. Options are ['local-db-vlv-index']
     */
    type?: pulumi.Input<string>;
}
