// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PassThroughAuthenticationHandler extends pulumi.CustomResource {
    /**
     * Get an existing PassThroughAuthenticationHandler resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PassThroughAuthenticationHandlerState, opts?: pulumi.CustomResourceOptions): PassThroughAuthenticationHandler {
        return new PassThroughAuthenticationHandler(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/passThroughAuthenticationHandler:PassThroughAuthenticationHandler';

    /**
     * Returns true if the given object is an instance of PassThroughAuthenticationHandler.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PassThroughAuthenticationHandler {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PassThroughAuthenticationHandler.__pulumiType;
    }

    /**
     * An optional SCIM filter that will be ANDed with the filter created to identify the account in the PingOne service that
     * corresponds to the local entry. Only the "eq", "sw", "and", and "or" filter types may be used.
     */
    public readonly additionalUserMappingScimFilter!: pulumi.Output<string | undefined>;
    /**
     * Specifies the API endpoint for the PingOne web service.
     */
    public readonly apiUrl!: pulumi.Output<string | undefined>;
    /**
     * Specifies the API endpoint for the PingOne authentication service.
     */
    public readonly authUrl!: pulumi.Output<string | undefined>;
    /**
     * A pattern to use to construct the bind DN for the simple bind request to send to the remote server. This may consist of
     * a combination of static text and attribute values and other directives enclosed in curly braces. For example, the value
     * "cn={cn},ou=People,dc=example,dc=com" indicates that the remote bind DN should be constructed from the text "cn="
     * followed by the value of the local entry's cn attribute followed by the text "ou=People,dc=example,dc=com". If an
     * attribute contains the value to use as the bind DN for pass-through authentication, then the pattern may simply be the
     * name of that attribute in curly braces (e.g., if the seeAlso attribute contains the bind DN for the target user, then a
     * bind DN pattern of "{seeAlso}" would be appropriate). Note that a bind DN pattern can be used to construct a bind DN
     * that is not actually a valid LDAP distinguished name. For example, if authentication is being passed through to a
     * Microsoft Active Directory server, then a bind DN pattern could be used to construct a user principal name (UPN) as an
     * alternative to a distinguished name.
     */
    public readonly bindDnPattern!: pulumi.Output<string | undefined>;
    /**
     * A reference to connection criteria that will be used to indicate which bind requests should be passed through to the
     * external authentication service.
     */
    public readonly connectionCriteria!: pulumi.Output<string | undefined>;
    /**
     * The set of pass-through authentication failure types that should not result in an immediate failure, but should instead
     * allow the aggregate handler to proceed with the next configured subordinate handler.
     */
    public readonly continueOnFailureTypes!: pulumi.Output<string[]>;
    /**
     * A description for this Pass Through Authentication Handler
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies one or more DN mappings that may be used to transform bind DNs before attempting to bind to the external
     * servers.
     */
    public readonly dnMaps!: pulumi.Output<string[]>;
    /**
     * Specifies the PingOne Environment that will be associated with this PingOne Pass Through Authentication Handler.
     */
    public readonly environmentId!: pulumi.Output<string | undefined>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Pass Through Authentication Handler. Each
     * configuration property should be given in the form 'name=value'.
     */
    public readonly extensionArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Pass Through Authentication Handler.
     */
    public readonly extensionClass!: pulumi.Output<string | undefined>;
    /**
     * A reference to an HTTP proxy server that should be used for requests sent to the PingOne service.
     */
    public readonly httpProxyExternalServer!: pulumi.Output<string | undefined>;
    /**
     * The base DNs for the local users whose authentication attempts may be passed through to the external authentication
     * service.
     */
    public readonly includedLocalEntryBaseDns!: pulumi.Output<string[]>;
    /**
     * Specifies the initial number of connections to establish to each external server against which authentication may be
     * attempted.
     */
    public readonly initialConnections!: pulumi.Output<number>;
    /**
     * Specifies the maximum number of connections to maintain to each external server against which authentication may be
     * attempted. This value must be greater than or equal to the value for the initial-connections property.
     */
    public readonly maxConnections!: pulumi.Output<number>;
    /**
     * The maximum length of time to wait for a response from an external server in the same location as this Directory Server
     * before considering it unavailable.
     */
    public readonly maximumAllowedLocalResponseTime!: pulumi.Output<string>;
    /**
     * The maximum length of time to wait for a response from an external server in a different location from this Directory
     * Server before considering it unavailable.
     */
    public readonly maximumAllowedNonlocalResponseTime!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies the OAuth Client ID used to authenticate connections to the PingOne API.
     */
    public readonly oauthClientId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the OAuth Client Secret used to authenticate connections to the PingOne API.
     */
    public readonly oauthClientSecret!: pulumi.Output<string | undefined>;
    /**
     * Specifies a passphrase provider that can be used to obtain the OAuth Client Secret used to authenticate connections to
     * the PingOne API.
     */
    public readonly oauthClientSecretPassphraseProvider!: pulumi.Output<string | undefined>;
    /**
     * A reference to request criteria that will be used to indicate which bind requests should be passed through to the
     * external authentication service.
     */
    public readonly requestCriteria!: pulumi.Output<string | undefined>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.PassThroughAuthenticationHandlerRequiredAction[]>;
    /**
     * The base DN to use when searching for the user entry using a filter constructed from the pattern defined in the
     * search-filter-pattern property. If no base DN is specified, the null DN will be used as the search base DN.
     */
    public readonly searchBaseDn!: pulumi.Output<string | undefined>;
    /**
     * A pattern to use to construct a filter to use when searching an external server for the entry of the user as whom to
     * bind. For example, "(mail={uid:ldapFilterEscape}@example.com)" would construct a search filter to search for a user
     * whose entry in the local server contains a uid attribute whose value appears before "@example.com" in the mail attribute
     * in the external server. Note that the "ldapFilterEscape" modifier should almost always be used with attributes specified
     * in the pattern.
     */
    public readonly searchFilterPattern!: pulumi.Output<string | undefined>;
    /**
     * Specifies the manner in which external servers should be used for pass-through authentication attempts if multiple
     * servers are defined.
     */
    public readonly serverAccessMode!: pulumi.Output<string>;
    /**
     * Specifies the LDAP external server(s) to which authentication attempts should be forwarded.
     */
    public readonly servers!: pulumi.Output<string[]>;
    /**
     * The set of subordinate pass-through authentication handlers that may be used to perform the authentication processing.
     * Handlers will be invoked in order until one is found for which the bind operation matches the associated criteria and
     * either succeeds or fails in a manner that should not be ignored.
     */
    public readonly subordinatePassThroughAuthenticationHandlers!: pulumi.Output<string[]>;
    /**
     * The type of Pass Through Authentication Handler resource. Options are ['ping-one', 'ldap', 'aggregate', 'third-party']
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Indicates whether to take server locations into account when prioritizing the servers to use for pass-through
     * authentication attempts.
     */
    public readonly useLocation!: pulumi.Output<boolean>;
    /**
     * Indicates whether to include the password policy request control (as defined in draft-behera-ldap-password-policy-10) in
     * bind requests sent to the external server.
     */
    public readonly usePasswordPolicyControl!: pulumi.Output<boolean>;
    /**
     * The names of the attributes in the local user entry whose values must match the values of the corresponding fields in
     * the PingOne service.
     */
    public readonly userMappingLocalAttributes!: pulumi.Output<string[]>;
    /**
     * The names of the fields in the PingOne service whose values must match the values of the corresponding attributes in the
     * local user entry, as specified in the user-mapping-local-attribute property.
     */
    public readonly userMappingRemoteJsonFields!: pulumi.Output<string[]>;

    /**
     * Create a PassThroughAuthenticationHandler resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PassThroughAuthenticationHandlerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PassThroughAuthenticationHandlerArgs | PassThroughAuthenticationHandlerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PassThroughAuthenticationHandlerState | undefined;
            resourceInputs["additionalUserMappingScimFilter"] = state ? state.additionalUserMappingScimFilter : undefined;
            resourceInputs["apiUrl"] = state ? state.apiUrl : undefined;
            resourceInputs["authUrl"] = state ? state.authUrl : undefined;
            resourceInputs["bindDnPattern"] = state ? state.bindDnPattern : undefined;
            resourceInputs["connectionCriteria"] = state ? state.connectionCriteria : undefined;
            resourceInputs["continueOnFailureTypes"] = state ? state.continueOnFailureTypes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnMaps"] = state ? state.dnMaps : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["extensionArguments"] = state ? state.extensionArguments : undefined;
            resourceInputs["extensionClass"] = state ? state.extensionClass : undefined;
            resourceInputs["httpProxyExternalServer"] = state ? state.httpProxyExternalServer : undefined;
            resourceInputs["includedLocalEntryBaseDns"] = state ? state.includedLocalEntryBaseDns : undefined;
            resourceInputs["initialConnections"] = state ? state.initialConnections : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["maximumAllowedLocalResponseTime"] = state ? state.maximumAllowedLocalResponseTime : undefined;
            resourceInputs["maximumAllowedNonlocalResponseTime"] = state ? state.maximumAllowedNonlocalResponseTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["oauthClientId"] = state ? state.oauthClientId : undefined;
            resourceInputs["oauthClientSecret"] = state ? state.oauthClientSecret : undefined;
            resourceInputs["oauthClientSecretPassphraseProvider"] = state ? state.oauthClientSecretPassphraseProvider : undefined;
            resourceInputs["requestCriteria"] = state ? state.requestCriteria : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["searchBaseDn"] = state ? state.searchBaseDn : undefined;
            resourceInputs["searchFilterPattern"] = state ? state.searchFilterPattern : undefined;
            resourceInputs["serverAccessMode"] = state ? state.serverAccessMode : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["subordinatePassThroughAuthenticationHandlers"] = state ? state.subordinatePassThroughAuthenticationHandlers : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useLocation"] = state ? state.useLocation : undefined;
            resourceInputs["usePasswordPolicyControl"] = state ? state.usePasswordPolicyControl : undefined;
            resourceInputs["userMappingLocalAttributes"] = state ? state.userMappingLocalAttributes : undefined;
            resourceInputs["userMappingRemoteJsonFields"] = state ? state.userMappingRemoteJsonFields : undefined;
        } else {
            const args = argsOrState as PassThroughAuthenticationHandlerArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["additionalUserMappingScimFilter"] = args ? args.additionalUserMappingScimFilter : undefined;
            resourceInputs["apiUrl"] = args ? args.apiUrl : undefined;
            resourceInputs["authUrl"] = args ? args.authUrl : undefined;
            resourceInputs["bindDnPattern"] = args ? args.bindDnPattern : undefined;
            resourceInputs["connectionCriteria"] = args ? args.connectionCriteria : undefined;
            resourceInputs["continueOnFailureTypes"] = args ? args.continueOnFailureTypes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnMaps"] = args ? args.dnMaps : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["extensionArguments"] = args ? args.extensionArguments : undefined;
            resourceInputs["extensionClass"] = args ? args.extensionClass : undefined;
            resourceInputs["httpProxyExternalServer"] = args ? args.httpProxyExternalServer : undefined;
            resourceInputs["includedLocalEntryBaseDns"] = args ? args.includedLocalEntryBaseDns : undefined;
            resourceInputs["initialConnections"] = args ? args.initialConnections : undefined;
            resourceInputs["maxConnections"] = args ? args.maxConnections : undefined;
            resourceInputs["maximumAllowedLocalResponseTime"] = args ? args.maximumAllowedLocalResponseTime : undefined;
            resourceInputs["maximumAllowedNonlocalResponseTime"] = args ? args.maximumAllowedNonlocalResponseTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oauthClientId"] = args ? args.oauthClientId : undefined;
            resourceInputs["oauthClientSecret"] = args?.oauthClientSecret ? pulumi.secret(args.oauthClientSecret) : undefined;
            resourceInputs["oauthClientSecretPassphraseProvider"] = args ? args.oauthClientSecretPassphraseProvider : undefined;
            resourceInputs["requestCriteria"] = args ? args.requestCriteria : undefined;
            resourceInputs["searchBaseDn"] = args ? args.searchBaseDn : undefined;
            resourceInputs["searchFilterPattern"] = args ? args.searchFilterPattern : undefined;
            resourceInputs["serverAccessMode"] = args ? args.serverAccessMode : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["subordinatePassThroughAuthenticationHandlers"] = args ? args.subordinatePassThroughAuthenticationHandlers : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["useLocation"] = args ? args.useLocation : undefined;
            resourceInputs["usePasswordPolicyControl"] = args ? args.usePasswordPolicyControl : undefined;
            resourceInputs["userMappingLocalAttributes"] = args ? args.userMappingLocalAttributes : undefined;
            resourceInputs["userMappingRemoteJsonFields"] = args ? args.userMappingRemoteJsonFields : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["oauthClientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PassThroughAuthenticationHandler.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PassThroughAuthenticationHandler resources.
 */
export interface PassThroughAuthenticationHandlerState {
    /**
     * An optional SCIM filter that will be ANDed with the filter created to identify the account in the PingOne service that
     * corresponds to the local entry. Only the "eq", "sw", "and", and "or" filter types may be used.
     */
    additionalUserMappingScimFilter?: pulumi.Input<string>;
    /**
     * Specifies the API endpoint for the PingOne web service.
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * Specifies the API endpoint for the PingOne authentication service.
     */
    authUrl?: pulumi.Input<string>;
    /**
     * A pattern to use to construct the bind DN for the simple bind request to send to the remote server. This may consist of
     * a combination of static text and attribute values and other directives enclosed in curly braces. For example, the value
     * "cn={cn},ou=People,dc=example,dc=com" indicates that the remote bind DN should be constructed from the text "cn="
     * followed by the value of the local entry's cn attribute followed by the text "ou=People,dc=example,dc=com". If an
     * attribute contains the value to use as the bind DN for pass-through authentication, then the pattern may simply be the
     * name of that attribute in curly braces (e.g., if the seeAlso attribute contains the bind DN for the target user, then a
     * bind DN pattern of "{seeAlso}" would be appropriate). Note that a bind DN pattern can be used to construct a bind DN
     * that is not actually a valid LDAP distinguished name. For example, if authentication is being passed through to a
     * Microsoft Active Directory server, then a bind DN pattern could be used to construct a user principal name (UPN) as an
     * alternative to a distinguished name.
     */
    bindDnPattern?: pulumi.Input<string>;
    /**
     * A reference to connection criteria that will be used to indicate which bind requests should be passed through to the
     * external authentication service.
     */
    connectionCriteria?: pulumi.Input<string>;
    /**
     * The set of pass-through authentication failure types that should not result in an immediate failure, but should instead
     * allow the aggregate handler to proceed with the next configured subordinate handler.
     */
    continueOnFailureTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Pass Through Authentication Handler
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies one or more DN mappings that may be used to transform bind DNs before attempting to bind to the external
     * servers.
     */
    dnMaps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the PingOne Environment that will be associated with this PingOne Pass Through Authentication Handler.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Pass Through Authentication Handler. Each
     * configuration property should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Pass Through Authentication Handler.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * A reference to an HTTP proxy server that should be used for requests sent to the PingOne service.
     */
    httpProxyExternalServer?: pulumi.Input<string>;
    /**
     * The base DNs for the local users whose authentication attempts may be passed through to the external authentication
     * service.
     */
    includedLocalEntryBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the initial number of connections to establish to each external server against which authentication may be
     * attempted.
     */
    initialConnections?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of connections to maintain to each external server against which authentication may be
     * attempted. This value must be greater than or equal to the value for the initial-connections property.
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * The maximum length of time to wait for a response from an external server in the same location as this Directory Server
     * before considering it unavailable.
     */
    maximumAllowedLocalResponseTime?: pulumi.Input<string>;
    /**
     * The maximum length of time to wait for a response from an external server in a different location from this Directory
     * Server before considering it unavailable.
     */
    maximumAllowedNonlocalResponseTime?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OAuth Client ID used to authenticate connections to the PingOne API.
     */
    oauthClientId?: pulumi.Input<string>;
    /**
     * Specifies the OAuth Client Secret used to authenticate connections to the PingOne API.
     */
    oauthClientSecret?: pulumi.Input<string>;
    /**
     * Specifies a passphrase provider that can be used to obtain the OAuth Client Secret used to authenticate connections to
     * the PingOne API.
     */
    oauthClientSecretPassphraseProvider?: pulumi.Input<string>;
    /**
     * A reference to request criteria that will be used to indicate which bind requests should be passed through to the
     * external authentication service.
     */
    requestCriteria?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.PassThroughAuthenticationHandlerRequiredAction>[]>;
    /**
     * The base DN to use when searching for the user entry using a filter constructed from the pattern defined in the
     * search-filter-pattern property. If no base DN is specified, the null DN will be used as the search base DN.
     */
    searchBaseDn?: pulumi.Input<string>;
    /**
     * A pattern to use to construct a filter to use when searching an external server for the entry of the user as whom to
     * bind. For example, "(mail={uid:ldapFilterEscape}@example.com)" would construct a search filter to search for a user
     * whose entry in the local server contains a uid attribute whose value appears before "@example.com" in the mail attribute
     * in the external server. Note that the "ldapFilterEscape" modifier should almost always be used with attributes specified
     * in the pattern.
     */
    searchFilterPattern?: pulumi.Input<string>;
    /**
     * Specifies the manner in which external servers should be used for pass-through authentication attempts if multiple
     * servers are defined.
     */
    serverAccessMode?: pulumi.Input<string>;
    /**
     * Specifies the LDAP external server(s) to which authentication attempts should be forwarded.
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of subordinate pass-through authentication handlers that may be used to perform the authentication processing.
     * Handlers will be invoked in order until one is found for which the bind operation matches the associated criteria and
     * either succeeds or fails in a manner that should not be ignored.
     */
    subordinatePassThroughAuthenticationHandlers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of Pass Through Authentication Handler resource. Options are ['ping-one', 'ldap', 'aggregate', 'third-party']
     */
    type?: pulumi.Input<string>;
    /**
     * Indicates whether to take server locations into account when prioritizing the servers to use for pass-through
     * authentication attempts.
     */
    useLocation?: pulumi.Input<boolean>;
    /**
     * Indicates whether to include the password policy request control (as defined in draft-behera-ldap-password-policy-10) in
     * bind requests sent to the external server.
     */
    usePasswordPolicyControl?: pulumi.Input<boolean>;
    /**
     * The names of the attributes in the local user entry whose values must match the values of the corresponding fields in
     * the PingOne service.
     */
    userMappingLocalAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The names of the fields in the PingOne service whose values must match the values of the corresponding attributes in the
     * local user entry, as specified in the user-mapping-local-attribute property.
     */
    userMappingRemoteJsonFields?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PassThroughAuthenticationHandler resource.
 */
export interface PassThroughAuthenticationHandlerArgs {
    /**
     * An optional SCIM filter that will be ANDed with the filter created to identify the account in the PingOne service that
     * corresponds to the local entry. Only the "eq", "sw", "and", and "or" filter types may be used.
     */
    additionalUserMappingScimFilter?: pulumi.Input<string>;
    /**
     * Specifies the API endpoint for the PingOne web service.
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * Specifies the API endpoint for the PingOne authentication service.
     */
    authUrl?: pulumi.Input<string>;
    /**
     * A pattern to use to construct the bind DN for the simple bind request to send to the remote server. This may consist of
     * a combination of static text and attribute values and other directives enclosed in curly braces. For example, the value
     * "cn={cn},ou=People,dc=example,dc=com" indicates that the remote bind DN should be constructed from the text "cn="
     * followed by the value of the local entry's cn attribute followed by the text "ou=People,dc=example,dc=com". If an
     * attribute contains the value to use as the bind DN for pass-through authentication, then the pattern may simply be the
     * name of that attribute in curly braces (e.g., if the seeAlso attribute contains the bind DN for the target user, then a
     * bind DN pattern of "{seeAlso}" would be appropriate). Note that a bind DN pattern can be used to construct a bind DN
     * that is not actually a valid LDAP distinguished name. For example, if authentication is being passed through to a
     * Microsoft Active Directory server, then a bind DN pattern could be used to construct a user principal name (UPN) as an
     * alternative to a distinguished name.
     */
    bindDnPattern?: pulumi.Input<string>;
    /**
     * A reference to connection criteria that will be used to indicate which bind requests should be passed through to the
     * external authentication service.
     */
    connectionCriteria?: pulumi.Input<string>;
    /**
     * The set of pass-through authentication failure types that should not result in an immediate failure, but should instead
     * allow the aggregate handler to proceed with the next configured subordinate handler.
     */
    continueOnFailureTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Pass Through Authentication Handler
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies one or more DN mappings that may be used to transform bind DNs before attempting to bind to the external
     * servers.
     */
    dnMaps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the PingOne Environment that will be associated with this PingOne Pass Through Authentication Handler.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Pass Through Authentication Handler. Each
     * configuration property should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Pass Through Authentication Handler.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * A reference to an HTTP proxy server that should be used for requests sent to the PingOne service.
     */
    httpProxyExternalServer?: pulumi.Input<string>;
    /**
     * The base DNs for the local users whose authentication attempts may be passed through to the external authentication
     * service.
     */
    includedLocalEntryBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the initial number of connections to establish to each external server against which authentication may be
     * attempted.
     */
    initialConnections?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of connections to maintain to each external server against which authentication may be
     * attempted. This value must be greater than or equal to the value for the initial-connections property.
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * The maximum length of time to wait for a response from an external server in the same location as this Directory Server
     * before considering it unavailable.
     */
    maximumAllowedLocalResponseTime?: pulumi.Input<string>;
    /**
     * The maximum length of time to wait for a response from an external server in a different location from this Directory
     * Server before considering it unavailable.
     */
    maximumAllowedNonlocalResponseTime?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the OAuth Client ID used to authenticate connections to the PingOne API.
     */
    oauthClientId?: pulumi.Input<string>;
    /**
     * Specifies the OAuth Client Secret used to authenticate connections to the PingOne API.
     */
    oauthClientSecret?: pulumi.Input<string>;
    /**
     * Specifies a passphrase provider that can be used to obtain the OAuth Client Secret used to authenticate connections to
     * the PingOne API.
     */
    oauthClientSecretPassphraseProvider?: pulumi.Input<string>;
    /**
     * A reference to request criteria that will be used to indicate which bind requests should be passed through to the
     * external authentication service.
     */
    requestCriteria?: pulumi.Input<string>;
    /**
     * The base DN to use when searching for the user entry using a filter constructed from the pattern defined in the
     * search-filter-pattern property. If no base DN is specified, the null DN will be used as the search base DN.
     */
    searchBaseDn?: pulumi.Input<string>;
    /**
     * A pattern to use to construct a filter to use when searching an external server for the entry of the user as whom to
     * bind. For example, "(mail={uid:ldapFilterEscape}@example.com)" would construct a search filter to search for a user
     * whose entry in the local server contains a uid attribute whose value appears before "@example.com" in the mail attribute
     * in the external server. Note that the "ldapFilterEscape" modifier should almost always be used with attributes specified
     * in the pattern.
     */
    searchFilterPattern?: pulumi.Input<string>;
    /**
     * Specifies the manner in which external servers should be used for pass-through authentication attempts if multiple
     * servers are defined.
     */
    serverAccessMode?: pulumi.Input<string>;
    /**
     * Specifies the LDAP external server(s) to which authentication attempts should be forwarded.
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of subordinate pass-through authentication handlers that may be used to perform the authentication processing.
     * Handlers will be invoked in order until one is found for which the bind operation matches the associated criteria and
     * either succeeds or fails in a manner that should not be ignored.
     */
    subordinatePassThroughAuthenticationHandlers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of Pass Through Authentication Handler resource. Options are ['ping-one', 'ldap', 'aggregate', 'third-party']
     */
    type: pulumi.Input<string>;
    /**
     * Indicates whether to take server locations into account when prioritizing the servers to use for pass-through
     * authentication attempts.
     */
    useLocation?: pulumi.Input<boolean>;
    /**
     * Indicates whether to include the password policy request control (as defined in draft-behera-ldap-password-policy-10) in
     * bind requests sent to the external server.
     */
    usePasswordPolicyControl?: pulumi.Input<boolean>;
    /**
     * The names of the attributes in the local user entry whose values must match the values of the corresponding fields in
     * the PingOne service.
     */
    userMappingLocalAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The names of the fields in the PingOne service whose values must match the values of the corresponding attributes in the
     * local user entry, as specified in the user-mapping-local-attribute property.
     */
    userMappingRemoteJsonFields?: pulumi.Input<pulumi.Input<string>[]>;
}
