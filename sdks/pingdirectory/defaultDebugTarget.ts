// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultDebugTarget extends pulumi.CustomResource {
    /**
     * Get an existing DefaultDebugTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultDebugTargetState, opts?: pulumi.CustomResourceOptions): DefaultDebugTarget {
        return new DefaultDebugTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultDebugTarget:DefaultDebugTarget';

    /**
     * Returns true if the given object is an instance of DefaultDebugTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultDebugTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultDebugTarget.__pulumiType;
    }

    /**
     * Specifies the debug message categories to be logged.
     */
    public readonly debugCategories!: pulumi.Output<string[]>;
    /**
     * Specifies the lowest severity level of debug messages to log.
     */
    public readonly debugLevel!: pulumi.Output<string>;
    /**
     * Specifies the fully-qualified Java package, class, or method affected by the settings in this target definition. Use the
     * number character (#) to separate the class name and the method name (that is,
     * com.unboundid.directory.server.core.DirectoryServer#startUp).
     */
    public readonly debugScope!: pulumi.Output<string>;
    /**
     * A description for this Debug Target
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the property to indicate whether to include the cause of exceptions in exception thrown and caught messages.
     */
    public readonly includeThrowableCause!: pulumi.Output<boolean>;
    /**
     * Name of the parent Log Publisher
     */
    public readonly logPublisherName!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies the property to indicate whether to include method arguments in debug messages.
     */
    public readonly omitMethodEntryArguments!: pulumi.Output<boolean>;
    /**
     * Specifies the property to indicate whether to include the return value in debug messages.
     */
    public readonly omitMethodReturnValue!: pulumi.Output<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultDebugTargetRequiredAction[]>;
    /**
     * Specifies the property to indicate the number of stack frames to include in the stack trace for method entry and
     * exception thrown messages.
     */
    public readonly throwableStackFrames!: pulumi.Output<number>;
    /**
     * The type of Debug Target resource. Options are ['debug-target']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultDebugTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultDebugTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultDebugTargetArgs | DefaultDebugTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultDebugTargetState | undefined;
            resourceInputs["debugCategories"] = state ? state.debugCategories : undefined;
            resourceInputs["debugLevel"] = state ? state.debugLevel : undefined;
            resourceInputs["debugScope"] = state ? state.debugScope : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["includeThrowableCause"] = state ? state.includeThrowableCause : undefined;
            resourceInputs["logPublisherName"] = state ? state.logPublisherName : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["omitMethodEntryArguments"] = state ? state.omitMethodEntryArguments : undefined;
            resourceInputs["omitMethodReturnValue"] = state ? state.omitMethodReturnValue : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["throwableStackFrames"] = state ? state.throwableStackFrames : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultDebugTargetArgs | undefined;
            if ((!args || args.debugScope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'debugScope'");
            }
            if ((!args || args.logPublisherName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logPublisherName'");
            }
            resourceInputs["debugCategories"] = args ? args.debugCategories : undefined;
            resourceInputs["debugLevel"] = args ? args.debugLevel : undefined;
            resourceInputs["debugScope"] = args ? args.debugScope : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["includeThrowableCause"] = args ? args.includeThrowableCause : undefined;
            resourceInputs["logPublisherName"] = args ? args.logPublisherName : undefined;
            resourceInputs["omitMethodEntryArguments"] = args ? args.omitMethodEntryArguments : undefined;
            resourceInputs["omitMethodReturnValue"] = args ? args.omitMethodReturnValue : undefined;
            resourceInputs["throwableStackFrames"] = args ? args.throwableStackFrames : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultDebugTarget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultDebugTarget resources.
 */
export interface DefaultDebugTargetState {
    /**
     * Specifies the debug message categories to be logged.
     */
    debugCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the lowest severity level of debug messages to log.
     */
    debugLevel?: pulumi.Input<string>;
    /**
     * Specifies the fully-qualified Java package, class, or method affected by the settings in this target definition. Use the
     * number character (#) to separate the class name and the method name (that is,
     * com.unboundid.directory.server.core.DirectoryServer#startUp).
     */
    debugScope?: pulumi.Input<string>;
    /**
     * A description for this Debug Target
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the property to indicate whether to include the cause of exceptions in exception thrown and caught messages.
     */
    includeThrowableCause?: pulumi.Input<boolean>;
    /**
     * Name of the parent Log Publisher
     */
    logPublisherName?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the property to indicate whether to include method arguments in debug messages.
     */
    omitMethodEntryArguments?: pulumi.Input<boolean>;
    /**
     * Specifies the property to indicate whether to include the return value in debug messages.
     */
    omitMethodReturnValue?: pulumi.Input<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultDebugTargetRequiredAction>[]>;
    /**
     * Specifies the property to indicate the number of stack frames to include in the stack trace for method entry and
     * exception thrown messages.
     */
    throwableStackFrames?: pulumi.Input<number>;
    /**
     * The type of Debug Target resource. Options are ['debug-target']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultDebugTarget resource.
 */
export interface DefaultDebugTargetArgs {
    /**
     * Specifies the debug message categories to be logged.
     */
    debugCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the lowest severity level of debug messages to log.
     */
    debugLevel?: pulumi.Input<string>;
    /**
     * Specifies the fully-qualified Java package, class, or method affected by the settings in this target definition. Use the
     * number character (#) to separate the class name and the method name (that is,
     * com.unboundid.directory.server.core.DirectoryServer#startUp).
     */
    debugScope: pulumi.Input<string>;
    /**
     * A description for this Debug Target
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the property to indicate whether to include the cause of exceptions in exception thrown and caught messages.
     */
    includeThrowableCause?: pulumi.Input<boolean>;
    /**
     * Name of the parent Log Publisher
     */
    logPublisherName: pulumi.Input<string>;
    /**
     * Specifies the property to indicate whether to include method arguments in debug messages.
     */
    omitMethodEntryArguments?: pulumi.Input<boolean>;
    /**
     * Specifies the property to indicate whether to include the return value in debug messages.
     */
    omitMethodReturnValue?: pulumi.Input<boolean>;
    /**
     * Specifies the property to indicate the number of stack frames to include in the stack trace for method entry and
     * exception thrown messages.
     */
    throwableStackFrames?: pulumi.Input<number>;
}
