// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPasswordValidator(args: GetPasswordValidatorArgs, opts?: pulumi.InvokeOptions): Promise<GetPasswordValidatorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getPasswordValidator:getPasswordValidator", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPasswordValidator.
 */
export interface GetPasswordValidatorArgs {
    name: string;
}

/**
 * A collection of values returned by getPasswordValidator.
 */
export interface GetPasswordValidatorResult {
    readonly acceptPasswordOnServiceError: boolean;
    readonly allowNonAsciiCharacters: boolean;
    readonly allowUnclassifiedCharacters: boolean;
    readonly allowUnknownCharacters: boolean;
    readonly allowedCharacterTypes: string[];
    readonly alternativePasswordCharacterMappings: string[];
    readonly assumedPasswordGuessesPerSecond: string;
    readonly caseSensitiveValidation: boolean;
    readonly characterSets: string[];
    readonly description: string;
    readonly dictionaryFile: string;
    readonly disallowedCharacters: string;
    readonly disallowedLeadingCharacters: string;
    readonly disallowedTrailingCharacters: string;
    readonly enabled: boolean;
    readonly extensionArguments: string[];
    readonly extensionClass: string;
    readonly httpConnectTimeout: string;
    readonly httpProxyExternalServer: string;
    readonly httpResponseTimeout: string;
    readonly id: string;
    readonly ignoreLeadingNonAlphabeticCharacters: boolean;
    readonly ignoreTrailingNonAlphabeticCharacters: boolean;
    readonly invokeForAdd: boolean;
    readonly invokeForAdminReset: boolean;
    readonly invokeForSelfChange: boolean;
    readonly keyManagerProvider: string;
    readonly matchAttributes: string[];
    readonly matchBehavior: string;
    readonly matchPattern: string;
    readonly maxConsecutiveLength: number;
    readonly maxPasswordLength: number;
    readonly maximumAllowedPercentOfPassword: number;
    readonly minPasswordDifference: number;
    readonly minPasswordLength: number;
    readonly minUniqueCharacters: number;
    readonly minimumAcceptableTimeToExhaustSearchSpace: string;
    readonly minimumAttributeValueLengthForSubstringMatches: number;
    readonly minimumRequiredCharacterSets: number;
    readonly name: string;
    readonly pwnedPasswordsBaseUrl: string;
    readonly scriptArguments: string[];
    readonly scriptClass: string;
    readonly stripDiacriticalMarks: boolean;
    readonly testAttributeValueSubstringOfPassword: boolean;
    readonly testPasswordSubstringOfAttributeValue: boolean;
    readonly testReversedPassword: boolean;
    readonly trustManagerProvider: string;
    readonly type: string;
    readonly validatorFailureMessage: string;
    readonly validatorRequirementDescription: string;
}
export function getPasswordValidatorOutput(args: GetPasswordValidatorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPasswordValidatorResult> {
    return pulumi.output(args).apply((a: any) => getPasswordValidator(a, opts))
}

/**
 * A collection of arguments for invoking getPasswordValidator.
 */
export interface GetPasswordValidatorOutputArgs {
    name: pulumi.Input<string>;
}
