// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGauge(args: GetGaugeArgs, opts?: pulumi.InvokeOptions): Promise<GetGaugeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getGauge:getGauge", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGauge.
 */
export interface GetGaugeArgs {
    name: string;
}

/**
 * A collection of values returned by getGauge.
 */
export interface GetGaugeResult {
    readonly alertLevel: string;
    readonly criticalExitValue: number;
    readonly criticalValue: string;
    readonly description: string;
    readonly enabled: boolean;
    readonly excludeResources: string[];
    readonly gaugeDataSource: string;
    readonly id: string;
    readonly includeResources: string[];
    readonly majorExitValue: number;
    readonly majorValue: string;
    readonly minorExitValue: number;
    readonly minorValue: string;
    readonly name: string;
    readonly overrideSeverity: string;
    readonly samplesPerUpdateInterval: number;
    readonly serverDegradedSeverityLevel: string;
    readonly serverUnavailableSeverityLevel: string;
    readonly type: string;
    readonly updateInterval: string;
    readonly warningExitValue: number;
    readonly warningValue: string;
}
export function getGaugeOutput(args: GetGaugeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGaugeResult> {
    return pulumi.output(args).apply((a: any) => getGauge(a, opts))
}

/**
 * A collection of arguments for invoking getGauge.
 */
export interface GetGaugeOutputArgs {
    name: pulumi.Input<string>;
}
