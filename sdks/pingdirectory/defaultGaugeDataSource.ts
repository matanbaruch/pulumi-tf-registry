// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultGaugeDataSource extends pulumi.CustomResource {
    /**
     * Get an existing DefaultGaugeDataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultGaugeDataSourceState, opts?: pulumi.CustomResourceOptions): DefaultGaugeDataSource {
        return new DefaultGaugeDataSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultGaugeDataSource:DefaultGaugeDataSource';

    /**
     * Returns true if the given object is an instance of DefaultGaugeDataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultGaugeDataSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultGaugeDataSource.__pulumiType;
    }

    /**
     * Additional information about the source of this data that is added to alerts sent as a result of gauges that use this
     * Gauge Data Source.
     */
    public readonly additionalText!: pulumi.Output<string>;
    /**
     * Indicates whether a higher or lower value is a more severe condition.
     */
    public readonly dataOrientation!: pulumi.Output<string>;
    /**
     * A description for this Gauge Data Source
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * An optional floating point value that can be used to scale the resulting value.
     */
    public readonly divideValueBy!: pulumi.Output<number>;
    /**
     * An optional property that can scale the resulting value by another attribute in the monitored entry.
     */
    public readonly divideValueByAttribute!: pulumi.Output<string>;
    /**
     * An optional property that can scale the resulting value by another attribute whose value represents a counter in the
     * monitored entry.
     */
    public readonly divideValueByCounterAttribute!: pulumi.Output<string>;
    /**
     * An optional LDAP filter that can be used restrict which monitor entries are used to compute output.
     */
    public readonly includeFilter!: pulumi.Output<string>;
    /**
     * The minimum frequency with which gauges using this Gauge Data Source can be configured for update. In order to prevent
     * undesirable side effects, some Gauge Data Sources may use this property to impose a higher bound on the update frequency
     * of gauges.
     */
    public readonly minimumUpdateInterval!: pulumi.Output<string>;
    /**
     * Specifies the attribute on the monitor entries from which to derive the current gauge value.
     */
    public readonly monitorAttribute!: pulumi.Output<string>;
    /**
     * The object class name of the monitor entries to examine for generating gauge data.
     */
    public readonly monitorObjectclass!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultGaugeDataSourceRequiredAction[]>;
    /**
     * Specifies the attribute whose value is used to identify the specific resource being monitored (e.g. device name).
     */
    public readonly resourceAttribute!: pulumi.Output<string>;
    /**
     * A string indicating the type of resource being monitored.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * Specifies the type of statistic to include in the output for the monitored attribute.
     */
    public readonly statisticType!: pulumi.Output<string>;
    /**
     * The type of Gauge Data Source resource. Options are ['indicator', 'numeric']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultGaugeDataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultGaugeDataSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultGaugeDataSourceArgs | DefaultGaugeDataSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultGaugeDataSourceState | undefined;
            resourceInputs["additionalText"] = state ? state.additionalText : undefined;
            resourceInputs["dataOrientation"] = state ? state.dataOrientation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["divideValueBy"] = state ? state.divideValueBy : undefined;
            resourceInputs["divideValueByAttribute"] = state ? state.divideValueByAttribute : undefined;
            resourceInputs["divideValueByCounterAttribute"] = state ? state.divideValueByCounterAttribute : undefined;
            resourceInputs["includeFilter"] = state ? state.includeFilter : undefined;
            resourceInputs["minimumUpdateInterval"] = state ? state.minimumUpdateInterval : undefined;
            resourceInputs["monitorAttribute"] = state ? state.monitorAttribute : undefined;
            resourceInputs["monitorObjectclass"] = state ? state.monitorObjectclass : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["resourceAttribute"] = state ? state.resourceAttribute : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["statisticType"] = state ? state.statisticType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultGaugeDataSourceArgs | undefined;
            resourceInputs["additionalText"] = args ? args.additionalText : undefined;
            resourceInputs["dataOrientation"] = args ? args.dataOrientation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["divideValueBy"] = args ? args.divideValueBy : undefined;
            resourceInputs["divideValueByAttribute"] = args ? args.divideValueByAttribute : undefined;
            resourceInputs["divideValueByCounterAttribute"] = args ? args.divideValueByCounterAttribute : undefined;
            resourceInputs["includeFilter"] = args ? args.includeFilter : undefined;
            resourceInputs["minimumUpdateInterval"] = args ? args.minimumUpdateInterval : undefined;
            resourceInputs["monitorAttribute"] = args ? args.monitorAttribute : undefined;
            resourceInputs["monitorObjectclass"] = args ? args.monitorObjectclass : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceAttribute"] = args ? args.resourceAttribute : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["statisticType"] = args ? args.statisticType : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultGaugeDataSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultGaugeDataSource resources.
 */
export interface DefaultGaugeDataSourceState {
    /**
     * Additional information about the source of this data that is added to alerts sent as a result of gauges that use this
     * Gauge Data Source.
     */
    additionalText?: pulumi.Input<string>;
    /**
     * Indicates whether a higher or lower value is a more severe condition.
     */
    dataOrientation?: pulumi.Input<string>;
    /**
     * A description for this Gauge Data Source
     */
    description?: pulumi.Input<string>;
    /**
     * An optional floating point value that can be used to scale the resulting value.
     */
    divideValueBy?: pulumi.Input<number>;
    /**
     * An optional property that can scale the resulting value by another attribute in the monitored entry.
     */
    divideValueByAttribute?: pulumi.Input<string>;
    /**
     * An optional property that can scale the resulting value by another attribute whose value represents a counter in the
     * monitored entry.
     */
    divideValueByCounterAttribute?: pulumi.Input<string>;
    /**
     * An optional LDAP filter that can be used restrict which monitor entries are used to compute output.
     */
    includeFilter?: pulumi.Input<string>;
    /**
     * The minimum frequency with which gauges using this Gauge Data Source can be configured for update. In order to prevent
     * undesirable side effects, some Gauge Data Sources may use this property to impose a higher bound on the update frequency
     * of gauges.
     */
    minimumUpdateInterval?: pulumi.Input<string>;
    /**
     * Specifies the attribute on the monitor entries from which to derive the current gauge value.
     */
    monitorAttribute?: pulumi.Input<string>;
    /**
     * The object class name of the monitor entries to examine for generating gauge data.
     */
    monitorObjectclass?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultGaugeDataSourceRequiredAction>[]>;
    /**
     * Specifies the attribute whose value is used to identify the specific resource being monitored (e.g. device name).
     */
    resourceAttribute?: pulumi.Input<string>;
    /**
     * A string indicating the type of resource being monitored.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Specifies the type of statistic to include in the output for the monitored attribute.
     */
    statisticType?: pulumi.Input<string>;
    /**
     * The type of Gauge Data Source resource. Options are ['indicator', 'numeric']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultGaugeDataSource resource.
 */
export interface DefaultGaugeDataSourceArgs {
    /**
     * Additional information about the source of this data that is added to alerts sent as a result of gauges that use this
     * Gauge Data Source.
     */
    additionalText?: pulumi.Input<string>;
    /**
     * Indicates whether a higher or lower value is a more severe condition.
     */
    dataOrientation?: pulumi.Input<string>;
    /**
     * A description for this Gauge Data Source
     */
    description?: pulumi.Input<string>;
    /**
     * An optional floating point value that can be used to scale the resulting value.
     */
    divideValueBy?: pulumi.Input<number>;
    /**
     * An optional property that can scale the resulting value by another attribute in the monitored entry.
     */
    divideValueByAttribute?: pulumi.Input<string>;
    /**
     * An optional property that can scale the resulting value by another attribute whose value represents a counter in the
     * monitored entry.
     */
    divideValueByCounterAttribute?: pulumi.Input<string>;
    /**
     * An optional LDAP filter that can be used restrict which monitor entries are used to compute output.
     */
    includeFilter?: pulumi.Input<string>;
    /**
     * The minimum frequency with which gauges using this Gauge Data Source can be configured for update. In order to prevent
     * undesirable side effects, some Gauge Data Sources may use this property to impose a higher bound on the update frequency
     * of gauges.
     */
    minimumUpdateInterval?: pulumi.Input<string>;
    /**
     * Specifies the attribute on the monitor entries from which to derive the current gauge value.
     */
    monitorAttribute?: pulumi.Input<string>;
    /**
     * The object class name of the monitor entries to examine for generating gauge data.
     */
    monitorObjectclass?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the attribute whose value is used to identify the specific resource being monitored (e.g. device name).
     */
    resourceAttribute?: pulumi.Input<string>;
    /**
     * A string indicating the type of resource being monitored.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Specifies the type of statistic to include in the output for the monitored attribute.
     */
    statisticType?: pulumi.Input<string>;
}
