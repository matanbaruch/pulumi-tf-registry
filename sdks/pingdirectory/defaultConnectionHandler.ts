// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultConnectionHandler extends pulumi.CustomResource {
    /**
     * Get an existing DefaultConnectionHandler resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultConnectionHandlerState, opts?: pulumi.CustomResourceOptions): DefaultConnectionHandler {
        return new DefaultConnectionHandler(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultConnectionHandler:DefaultConnectionHandler';

    /**
     * Returns true if the given object is an instance of DefaultConnectionHandler.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultConnectionHandler {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultConnectionHandler.__pulumiType;
    }

    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the maximum number of pending connection attempts that are
     * allowed to queue up in the accept backlog before the server starts rejecting new connection attempts. - `http`:
     * Specifies the number of concurrent outstanding connection attempts that the connection handler should allow. The default
     * value should be acceptable in most cases, but it may need to be increased in environments that may attempt to establish
     * large numbers of connections simultaneously.
     */
    public readonly acceptBacklog!: pulumi.Output<number>;
    /**
     * Indicates whether connections from LDAPv2 clients are allowed.
     */
    public readonly allowLdapV2!: pulumi.Output<boolean>;
    /**
     * Indicates whether clients are allowed to use StartTLS.
     */
    public readonly allowStartTls!: pulumi.Output<boolean>;
    /**
     * Indicates whether the server should attempt to reuse socket descriptors. This may be useful in environments with a high
     * rate of connection establishment and termination.
     */
    public readonly allowTcpReuseAddress!: pulumi.Output<boolean>;
    /**
     * Specifies a set of address masks that determines the addresses of the clients that are allowed to establish connections
     * to this connection handler.
     */
    public readonly allowedClients!: pulumi.Output<string[]>;
    /**
     * Indicates whether to attempt to automatically authenticate a client connection that has established a secure
     * communication channel (using either SSL or StartTLS) and presented its own client certificate. Generally, clients should
     * use the SASL EXTERNAL mechanism to authenticate using a client certificate, but some clients may not support that
     * capability and/or may expect automatic authentication.
     */
    public readonly autoAuthenticateUsingClientCertificate!: pulumi.Output<boolean>;
    /**
     * Indicates whether all connections associated with this LDAP Connection Handler should be closed before an explicit
     * garbage collection is performed to allow clients to route requests to another server.
     */
    public readonly closeConnectionsOnExplicitGc!: pulumi.Output<boolean>;
    /**
     * Indicates whether all connections associated with this LDAP Connection Handler should be closed and no new connections
     * accepted when the server has determined that it is "unavailable." This allows clients (or a network load balancer) to
     * route requests to another server.
     */
    public readonly closeConnectionsWhenUnavailable!: pulumi.Output<boolean>;
    /**
     * Specifies the set of HTTP request headers that may contain a value to be used as the correlation ID. Example values are
     * "Correlation-Id", "X-Amzn-Trace-Id", and "X-Request-Id".
     */
    public readonly correlationIdRequestHeaders!: pulumi.Output<string[]>;
    /**
     * Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are
     * "Correlation-Id", "X-Amzn-Trace-Id", and "X-Request-Id".
     */
    public readonly correlationIdResponseHeader!: pulumi.Output<string>;
    /**
     * Specifies a set of address masks that determines the addresses of the clients that are not allowed to establish
     * connections to this connection handler.
     */
    public readonly deniedClients!: pulumi.Output<string[]>;
    /**
     * A description for this Connection Handler
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Determines whether request form parameters submitted in multipart/ form-data (RFC 2388) format should be processed as
     * request parameters.
     */
    public readonly enableMultipartMimeParameters!: pulumi.Output<boolean>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Requires SNI hostnames to match or else throw an Invalid SNI
     * error.
     */
    public readonly enableSniHostnameChecks!: pulumi.Output<boolean>;
    /**
     * Indicates whether the Connection Handler is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Specifies the length of time that the server should delay the response to non-successful bind operations. A value of
     * zero milliseconds indicates that non-successful bind operations should not be delayed.
     */
    public readonly failedBindResponseDelay!: pulumi.Output<string>;
    /**
     * Specifies the set of HTTP operation loggers that should be used to log information about requests and responses for
     * operations processed through this HTTP Connection Handler.
     */
    public readonly httpOperationLogPublishers!: pulumi.Output<string[]>;
    /**
     * Specifies the maximum buffer size of an http request including the request uri and all of the request headers.
     */
    public readonly httpRequestHeaderSize!: pulumi.Output<number>;
    /**
     * Specifies information about servlets that will be provided via this connection handler.
     */
    public readonly httpServletExtensions!: pulumi.Output<string[]>;
    /**
     * Specifies the maximum idle time for a connection. The max idle time is applied when waiting for a new request to be
     * received on a connection, when reading the headers and content of a request, or when writing the headers and content of
     * a response.
     */
    public readonly idleTimeLimit!: pulumi.Output<string>;
    /**
     * Indicates whether to enable statistics collection for this connection handler.
     */
    public readonly keepStats!: pulumi.Output<boolean>;
    /**
     * When the `type` attribute is set to: - `jmx`: Specifies the name of the key manager that should be used with this JMX
     * Connection Handler . - `ldap`: Specifies the name of the key manager that should be used with this LDAP Connection
     * Handler . - `http`: Specifies the key manager provider that will be used to obtain the certificate to present to HTTPS
     * clients.
     */
    public readonly keyManagerProvider!: pulumi.Output<string>;
    /**
     * Specifies the path to the directory in which the LDIF files should be placed.
     */
    public readonly ldifDirectory!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the address or set of addresses on which this LDAP Connection
     * Handler should listen for connections from LDAP clients. - `http`: Specifies the address on which to listen for
     * connections from HTTP clients. If no value is defined, the server will listen on all addresses on all interfaces.
     */
    public readonly listenAddresses!: pulumi.Output<string[]>;
    /**
     * When the `type` attribute is set to: - `jmx`: Specifies the port number on which the JMX Connection Handler will listen
     * for connections from clients. - `ldap`: Specifies the port number on which the LDAP Connection Handler will listen for
     * connections from clients. - `http`: Specifies the port number on which the HTTP Connection Handler will listen for
     * connections from clients.
     */
    public readonly listenPort!: pulumi.Output<number>;
    /**
     * Specifies the number of connections, which if exceeded, places this handler in a low resource state where a different
     * idle time limit is applied on the connections.
     */
    public readonly lowResourcesConnectionThreshold!: pulumi.Output<number>;
    /**
     * Specifies the maximum idle time for a connection when this handler is in a low resource state as defined by
     * low-resource-connections. The max idle time is applied when waiting for a new request to be received on a connection,
     * when reading the headers and content of a request, or when writing the headers and content of a response.
     */
    public readonly lowResourcesIdleTimeLimit!: pulumi.Output<string>;
    /**
     * Specifies the maximum length of time that attempts to write data to LDAP clients should be allowed to block.
     */
    public readonly maxBlockedWriteTimeLimit!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of threads that are used to process cancel and abandon requests from clients.
     */
    public readonly maxCancelHandlers!: pulumi.Output<number>;
    /**
     * Specifies the size of the largest LDAP request message that will be allowed by this LDAP Connection handler.
     */
    public readonly maxRequestSize!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies the number of threads that are used to accept new client connections, and to perform any initial preparation
     * on those connections that may be needed before the connection can be used to read requests and send responses.
     */
    public readonly numAcceptHandlers!: pulumi.Output<number>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the number of request handlers that are used to read requests
     * from clients. - `http`: Specifies the number of threads that will be used for accepting connections and reading requests
     * from clients.
     */
    public readonly numRequestHandlers!: pulumi.Output<number>;
    /**
     * Specifies how frequently the LDIF connection handler should check the LDIF directory to determine whether a new LDIF
     * file has been added.
     */
    public readonly pollInterval!: pulumi.Output<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Indicates whether a separate request handler thread should be
     * created for each client connection, which can help avoid starvation of client connections for cases in which one or more
     * clients send large numbers of concurrent asynchronous requests. This should only be used for cases in which a relatively
     * small number of connections will be established at any given time, the connections established will generally be
     * long-lived, and at least one client may send high volumes of asynchronous requests. This property can be used to
     * alleviate possible blocking during long-running TLS negotiation on a single request handler which can result in it being
     * unable to acknowledge further client requests until the TLS negotation completes or times out.
     */
    public readonly requestHandlerPerConnection!: pulumi.Output<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultConnectionHandlerRequiredAction[]>;
    /**
     * Specifies HTTP header fields and values added to response headers for all requests.
     */
    public readonly responseHeaders!: pulumi.Output<string[]>;
    /**
     * Indicates whether the LDAP Connection Handler should send a notice of disconnection extended response message to the
     * client if a new connection is rejected for some reason.
     */
    public readonly sendRejectionNotice!: pulumi.Output<boolean>;
    /**
     * When the `type` attribute is set to: - `jmx`: Specifies the nickname (also called the alias) of the certificate that the
     * JMX Connection Handler should use when performing SSL communication. - `ldap`: Specifies the nickname (also called the
     * alias) of the certificate that the LDAP Connection Handler should use when performing SSL communication. - `http`:
     * Specifies the nickname (also called the alias) of the certificate that the HTTP Connection Handler should use when
     * performing SSL communication.
     */
    public readonly sslCertNickname!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the names of the TLS cipher suites that are allowed for use in
     * SSL or StartTLS communication. The set of supported cipher suites can be viewed via the ssl context monitor entry. -
     * `http`: Specifies the names of the SSL cipher suites that are allowed for use in SSL communication. The set of supported
     * cipher suites can be viewed via the ssl context monitor entry.
     */
    public readonly sslCipherSuites!: pulumi.Output<string[]>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the policy that the LDAP Connection Handler should use
     * regarding client SSL certificates. - `http`: Specifies the policy that the HTTP Connection Handler should use regarding
     * client SSL certificates. In order for a client certificate to be accepted it must be known to the trust-manager-provider
     * associated with this HTTP Connection Handler. Client certificates received by the HTTP Connection Handler are by default
     * used for TLS mutual authentication only, as there is no support for user authentication.
     */
    public readonly sslClientAuthPolicy!: pulumi.Output<string>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the names of the TLS protocols that are allowed for use in SSL
     * or StartTLS communication. The set of supported ssl protocols can be viewed via the ssl context monitor entry. - `http`:
     * Specifies the names of the SSL protocols that are allowed for use in SSL communication. The set of supported ssl
     * protocols can be viewed via the ssl context monitor entry.
     */
    public readonly sslProtocols!: pulumi.Output<string[]>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the name of the trust manager that should be used with the LDAP
     * Connection Handler . - `http`: Specifies the trust manager provider that will be used to validate any certificates
     * presented by HTTPS clients.
     */
    public readonly trustManagerProvider!: pulumi.Output<string>;
    /**
     * The type of Connection Handler resource. Options are ['jmx', 'ldap', 'ldif', 'http']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * If enabled, a correlation ID header will be added to outgoing HTTP responses.
     */
    public readonly useCorrelationIdHeader!: pulumi.Output<boolean>;
    /**
     * Indicates whether to use "Forwarded" and "X-Forwarded-*" request headers to override corresponding HTTP request
     * information available during request processing.
     */
    public readonly useForwardedHeaders!: pulumi.Output<boolean>;
    /**
     * When the `type` attribute is set to: - `jmx`: Indicates whether the JMX Connection Handler should use SSL. - `ldap`:
     * Indicates whether the LDAP Connection Handler should use SSL. - `http`: Indicates whether the HTTP Connection Handler
     * should use SSL.
     */
    public readonly useSsl!: pulumi.Output<boolean>;
    /**
     * Indicates whether the LDAP Connection Handler should use TCP keep-alive.
     */
    public readonly useTcpKeepAlive!: pulumi.Output<boolean>;
    /**
     * Specifies information about web applications that will be provided via this connection handler.
     */
    public readonly webApplicationExtensions!: pulumi.Output<string[]>;

    /**
     * Create a DefaultConnectionHandler resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultConnectionHandlerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultConnectionHandlerArgs | DefaultConnectionHandlerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultConnectionHandlerState | undefined;
            resourceInputs["acceptBacklog"] = state ? state.acceptBacklog : undefined;
            resourceInputs["allowLdapV2"] = state ? state.allowLdapV2 : undefined;
            resourceInputs["allowStartTls"] = state ? state.allowStartTls : undefined;
            resourceInputs["allowTcpReuseAddress"] = state ? state.allowTcpReuseAddress : undefined;
            resourceInputs["allowedClients"] = state ? state.allowedClients : undefined;
            resourceInputs["autoAuthenticateUsingClientCertificate"] = state ? state.autoAuthenticateUsingClientCertificate : undefined;
            resourceInputs["closeConnectionsOnExplicitGc"] = state ? state.closeConnectionsOnExplicitGc : undefined;
            resourceInputs["closeConnectionsWhenUnavailable"] = state ? state.closeConnectionsWhenUnavailable : undefined;
            resourceInputs["correlationIdRequestHeaders"] = state ? state.correlationIdRequestHeaders : undefined;
            resourceInputs["correlationIdResponseHeader"] = state ? state.correlationIdResponseHeader : undefined;
            resourceInputs["deniedClients"] = state ? state.deniedClients : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableMultipartMimeParameters"] = state ? state.enableMultipartMimeParameters : undefined;
            resourceInputs["enableSniHostnameChecks"] = state ? state.enableSniHostnameChecks : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["failedBindResponseDelay"] = state ? state.failedBindResponseDelay : undefined;
            resourceInputs["httpOperationLogPublishers"] = state ? state.httpOperationLogPublishers : undefined;
            resourceInputs["httpRequestHeaderSize"] = state ? state.httpRequestHeaderSize : undefined;
            resourceInputs["httpServletExtensions"] = state ? state.httpServletExtensions : undefined;
            resourceInputs["idleTimeLimit"] = state ? state.idleTimeLimit : undefined;
            resourceInputs["keepStats"] = state ? state.keepStats : undefined;
            resourceInputs["keyManagerProvider"] = state ? state.keyManagerProvider : undefined;
            resourceInputs["ldifDirectory"] = state ? state.ldifDirectory : undefined;
            resourceInputs["listenAddresses"] = state ? state.listenAddresses : undefined;
            resourceInputs["listenPort"] = state ? state.listenPort : undefined;
            resourceInputs["lowResourcesConnectionThreshold"] = state ? state.lowResourcesConnectionThreshold : undefined;
            resourceInputs["lowResourcesIdleTimeLimit"] = state ? state.lowResourcesIdleTimeLimit : undefined;
            resourceInputs["maxBlockedWriteTimeLimit"] = state ? state.maxBlockedWriteTimeLimit : undefined;
            resourceInputs["maxCancelHandlers"] = state ? state.maxCancelHandlers : undefined;
            resourceInputs["maxRequestSize"] = state ? state.maxRequestSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["numAcceptHandlers"] = state ? state.numAcceptHandlers : undefined;
            resourceInputs["numRequestHandlers"] = state ? state.numRequestHandlers : undefined;
            resourceInputs["pollInterval"] = state ? state.pollInterval : undefined;
            resourceInputs["requestHandlerPerConnection"] = state ? state.requestHandlerPerConnection : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["responseHeaders"] = state ? state.responseHeaders : undefined;
            resourceInputs["sendRejectionNotice"] = state ? state.sendRejectionNotice : undefined;
            resourceInputs["sslCertNickname"] = state ? state.sslCertNickname : undefined;
            resourceInputs["sslCipherSuites"] = state ? state.sslCipherSuites : undefined;
            resourceInputs["sslClientAuthPolicy"] = state ? state.sslClientAuthPolicy : undefined;
            resourceInputs["sslProtocols"] = state ? state.sslProtocols : undefined;
            resourceInputs["trustManagerProvider"] = state ? state.trustManagerProvider : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useCorrelationIdHeader"] = state ? state.useCorrelationIdHeader : undefined;
            resourceInputs["useForwardedHeaders"] = state ? state.useForwardedHeaders : undefined;
            resourceInputs["useSsl"] = state ? state.useSsl : undefined;
            resourceInputs["useTcpKeepAlive"] = state ? state.useTcpKeepAlive : undefined;
            resourceInputs["webApplicationExtensions"] = state ? state.webApplicationExtensions : undefined;
        } else {
            const args = argsOrState as DefaultConnectionHandlerArgs | undefined;
            resourceInputs["acceptBacklog"] = args ? args.acceptBacklog : undefined;
            resourceInputs["allowLdapV2"] = args ? args.allowLdapV2 : undefined;
            resourceInputs["allowStartTls"] = args ? args.allowStartTls : undefined;
            resourceInputs["allowTcpReuseAddress"] = args ? args.allowTcpReuseAddress : undefined;
            resourceInputs["allowedClients"] = args ? args.allowedClients : undefined;
            resourceInputs["autoAuthenticateUsingClientCertificate"] = args ? args.autoAuthenticateUsingClientCertificate : undefined;
            resourceInputs["closeConnectionsOnExplicitGc"] = args ? args.closeConnectionsOnExplicitGc : undefined;
            resourceInputs["closeConnectionsWhenUnavailable"] = args ? args.closeConnectionsWhenUnavailable : undefined;
            resourceInputs["correlationIdRequestHeaders"] = args ? args.correlationIdRequestHeaders : undefined;
            resourceInputs["correlationIdResponseHeader"] = args ? args.correlationIdResponseHeader : undefined;
            resourceInputs["deniedClients"] = args ? args.deniedClients : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableMultipartMimeParameters"] = args ? args.enableMultipartMimeParameters : undefined;
            resourceInputs["enableSniHostnameChecks"] = args ? args.enableSniHostnameChecks : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["failedBindResponseDelay"] = args ? args.failedBindResponseDelay : undefined;
            resourceInputs["httpOperationLogPublishers"] = args ? args.httpOperationLogPublishers : undefined;
            resourceInputs["httpRequestHeaderSize"] = args ? args.httpRequestHeaderSize : undefined;
            resourceInputs["httpServletExtensions"] = args ? args.httpServletExtensions : undefined;
            resourceInputs["idleTimeLimit"] = args ? args.idleTimeLimit : undefined;
            resourceInputs["keepStats"] = args ? args.keepStats : undefined;
            resourceInputs["keyManagerProvider"] = args ? args.keyManagerProvider : undefined;
            resourceInputs["ldifDirectory"] = args ? args.ldifDirectory : undefined;
            resourceInputs["listenAddresses"] = args ? args.listenAddresses : undefined;
            resourceInputs["listenPort"] = args ? args.listenPort : undefined;
            resourceInputs["lowResourcesConnectionThreshold"] = args ? args.lowResourcesConnectionThreshold : undefined;
            resourceInputs["lowResourcesIdleTimeLimit"] = args ? args.lowResourcesIdleTimeLimit : undefined;
            resourceInputs["maxBlockedWriteTimeLimit"] = args ? args.maxBlockedWriteTimeLimit : undefined;
            resourceInputs["maxCancelHandlers"] = args ? args.maxCancelHandlers : undefined;
            resourceInputs["maxRequestSize"] = args ? args.maxRequestSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numAcceptHandlers"] = args ? args.numAcceptHandlers : undefined;
            resourceInputs["numRequestHandlers"] = args ? args.numRequestHandlers : undefined;
            resourceInputs["pollInterval"] = args ? args.pollInterval : undefined;
            resourceInputs["requestHandlerPerConnection"] = args ? args.requestHandlerPerConnection : undefined;
            resourceInputs["responseHeaders"] = args ? args.responseHeaders : undefined;
            resourceInputs["sendRejectionNotice"] = args ? args.sendRejectionNotice : undefined;
            resourceInputs["sslCertNickname"] = args ? args.sslCertNickname : undefined;
            resourceInputs["sslCipherSuites"] = args ? args.sslCipherSuites : undefined;
            resourceInputs["sslClientAuthPolicy"] = args ? args.sslClientAuthPolicy : undefined;
            resourceInputs["sslProtocols"] = args ? args.sslProtocols : undefined;
            resourceInputs["trustManagerProvider"] = args ? args.trustManagerProvider : undefined;
            resourceInputs["useCorrelationIdHeader"] = args ? args.useCorrelationIdHeader : undefined;
            resourceInputs["useForwardedHeaders"] = args ? args.useForwardedHeaders : undefined;
            resourceInputs["useSsl"] = args ? args.useSsl : undefined;
            resourceInputs["useTcpKeepAlive"] = args ? args.useTcpKeepAlive : undefined;
            resourceInputs["webApplicationExtensions"] = args ? args.webApplicationExtensions : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultConnectionHandler.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultConnectionHandler resources.
 */
export interface DefaultConnectionHandlerState {
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the maximum number of pending connection attempts that are
     * allowed to queue up in the accept backlog before the server starts rejecting new connection attempts. - `http`:
     * Specifies the number of concurrent outstanding connection attempts that the connection handler should allow. The default
     * value should be acceptable in most cases, but it may need to be increased in environments that may attempt to establish
     * large numbers of connections simultaneously.
     */
    acceptBacklog?: pulumi.Input<number>;
    /**
     * Indicates whether connections from LDAPv2 clients are allowed.
     */
    allowLdapV2?: pulumi.Input<boolean>;
    /**
     * Indicates whether clients are allowed to use StartTLS.
     */
    allowStartTls?: pulumi.Input<boolean>;
    /**
     * Indicates whether the server should attempt to reuse socket descriptors. This may be useful in environments with a high
     * rate of connection establishment and termination.
     */
    allowTcpReuseAddress?: pulumi.Input<boolean>;
    /**
     * Specifies a set of address masks that determines the addresses of the clients that are allowed to establish connections
     * to this connection handler.
     */
    allowedClients?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether to attempt to automatically authenticate a client connection that has established a secure
     * communication channel (using either SSL or StartTLS) and presented its own client certificate. Generally, clients should
     * use the SASL EXTERNAL mechanism to authenticate using a client certificate, but some clients may not support that
     * capability and/or may expect automatic authentication.
     */
    autoAuthenticateUsingClientCertificate?: pulumi.Input<boolean>;
    /**
     * Indicates whether all connections associated with this LDAP Connection Handler should be closed before an explicit
     * garbage collection is performed to allow clients to route requests to another server.
     */
    closeConnectionsOnExplicitGc?: pulumi.Input<boolean>;
    /**
     * Indicates whether all connections associated with this LDAP Connection Handler should be closed and no new connections
     * accepted when the server has determined that it is "unavailable." This allows clients (or a network load balancer) to
     * route requests to another server.
     */
    closeConnectionsWhenUnavailable?: pulumi.Input<boolean>;
    /**
     * Specifies the set of HTTP request headers that may contain a value to be used as the correlation ID. Example values are
     * "Correlation-Id", "X-Amzn-Trace-Id", and "X-Request-Id".
     */
    correlationIdRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are
     * "Correlation-Id", "X-Amzn-Trace-Id", and "X-Request-Id".
     */
    correlationIdResponseHeader?: pulumi.Input<string>;
    /**
     * Specifies a set of address masks that determines the addresses of the clients that are not allowed to establish
     * connections to this connection handler.
     */
    deniedClients?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Connection Handler
     */
    description?: pulumi.Input<string>;
    /**
     * Determines whether request form parameters submitted in multipart/ form-data (RFC 2388) format should be processed as
     * request parameters.
     */
    enableMultipartMimeParameters?: pulumi.Input<boolean>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Requires SNI hostnames to match or else throw an Invalid SNI
     * error.
     */
    enableSniHostnameChecks?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Connection Handler is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the length of time that the server should delay the response to non-successful bind operations. A value of
     * zero milliseconds indicates that non-successful bind operations should not be delayed.
     */
    failedBindResponseDelay?: pulumi.Input<string>;
    /**
     * Specifies the set of HTTP operation loggers that should be used to log information about requests and responses for
     * operations processed through this HTTP Connection Handler.
     */
    httpOperationLogPublishers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum buffer size of an http request including the request uri and all of the request headers.
     */
    httpRequestHeaderSize?: pulumi.Input<number>;
    /**
     * Specifies information about servlets that will be provided via this connection handler.
     */
    httpServletExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum idle time for a connection. The max idle time is applied when waiting for a new request to be
     * received on a connection, when reading the headers and content of a request, or when writing the headers and content of
     * a response.
     */
    idleTimeLimit?: pulumi.Input<string>;
    /**
     * Indicates whether to enable statistics collection for this connection handler.
     */
    keepStats?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `jmx`: Specifies the name of the key manager that should be used with this JMX
     * Connection Handler . - `ldap`: Specifies the name of the key manager that should be used with this LDAP Connection
     * Handler . - `http`: Specifies the key manager provider that will be used to obtain the certificate to present to HTTPS
     * clients.
     */
    keyManagerProvider?: pulumi.Input<string>;
    /**
     * Specifies the path to the directory in which the LDIF files should be placed.
     */
    ldifDirectory?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the address or set of addresses on which this LDAP Connection
     * Handler should listen for connections from LDAP clients. - `http`: Specifies the address on which to listen for
     * connections from HTTP clients. If no value is defined, the server will listen on all addresses on all interfaces.
     */
    listenAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `jmx`: Specifies the port number on which the JMX Connection Handler will listen
     * for connections from clients. - `ldap`: Specifies the port number on which the LDAP Connection Handler will listen for
     * connections from clients. - `http`: Specifies the port number on which the HTTP Connection Handler will listen for
     * connections from clients.
     */
    listenPort?: pulumi.Input<number>;
    /**
     * Specifies the number of connections, which if exceeded, places this handler in a low resource state where a different
     * idle time limit is applied on the connections.
     */
    lowResourcesConnectionThreshold?: pulumi.Input<number>;
    /**
     * Specifies the maximum idle time for a connection when this handler is in a low resource state as defined by
     * low-resource-connections. The max idle time is applied when waiting for a new request to be received on a connection,
     * when reading the headers and content of a request, or when writing the headers and content of a response.
     */
    lowResourcesIdleTimeLimit?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that attempts to write data to LDAP clients should be allowed to block.
     */
    maxBlockedWriteTimeLimit?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of threads that are used to process cancel and abandon requests from clients.
     */
    maxCancelHandlers?: pulumi.Input<number>;
    /**
     * Specifies the size of the largest LDAP request message that will be allowed by this LDAP Connection handler.
     */
    maxRequestSize?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the number of threads that are used to accept new client connections, and to perform any initial preparation
     * on those connections that may be needed before the connection can be used to read requests and send responses.
     */
    numAcceptHandlers?: pulumi.Input<number>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the number of request handlers that are used to read requests
     * from clients. - `http`: Specifies the number of threads that will be used for accepting connections and reading requests
     * from clients.
     */
    numRequestHandlers?: pulumi.Input<number>;
    /**
     * Specifies how frequently the LDIF connection handler should check the LDIF directory to determine whether a new LDIF
     * file has been added.
     */
    pollInterval?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Indicates whether a separate request handler thread should be
     * created for each client connection, which can help avoid starvation of client connections for cases in which one or more
     * clients send large numbers of concurrent asynchronous requests. This should only be used for cases in which a relatively
     * small number of connections will be established at any given time, the connections established will generally be
     * long-lived, and at least one client may send high volumes of asynchronous requests. This property can be used to
     * alleviate possible blocking during long-running TLS negotiation on a single request handler which can result in it being
     * unable to acknowledge further client requests until the TLS negotation completes or times out.
     */
    requestHandlerPerConnection?: pulumi.Input<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultConnectionHandlerRequiredAction>[]>;
    /**
     * Specifies HTTP header fields and values added to response headers for all requests.
     */
    responseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the LDAP Connection Handler should send a notice of disconnection extended response message to the
     * client if a new connection is rejected for some reason.
     */
    sendRejectionNotice?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `jmx`: Specifies the nickname (also called the alias) of the certificate that the
     * JMX Connection Handler should use when performing SSL communication. - `ldap`: Specifies the nickname (also called the
     * alias) of the certificate that the LDAP Connection Handler should use when performing SSL communication. - `http`:
     * Specifies the nickname (also called the alias) of the certificate that the HTTP Connection Handler should use when
     * performing SSL communication.
     */
    sslCertNickname?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the names of the TLS cipher suites that are allowed for use in
     * SSL or StartTLS communication. The set of supported cipher suites can be viewed via the ssl context monitor entry. -
     * `http`: Specifies the names of the SSL cipher suites that are allowed for use in SSL communication. The set of supported
     * cipher suites can be viewed via the ssl context monitor entry.
     */
    sslCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the policy that the LDAP Connection Handler should use
     * regarding client SSL certificates. - `http`: Specifies the policy that the HTTP Connection Handler should use regarding
     * client SSL certificates. In order for a client certificate to be accepted it must be known to the trust-manager-provider
     * associated with this HTTP Connection Handler. Client certificates received by the HTTP Connection Handler are by default
     * used for TLS mutual authentication only, as there is no support for user authentication.
     */
    sslClientAuthPolicy?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the names of the TLS protocols that are allowed for use in SSL
     * or StartTLS communication. The set of supported ssl protocols can be viewed via the ssl context monitor entry. - `http`:
     * Specifies the names of the SSL protocols that are allowed for use in SSL communication. The set of supported ssl
     * protocols can be viewed via the ssl context monitor entry.
     */
    sslProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the name of the trust manager that should be used with the LDAP
     * Connection Handler . - `http`: Specifies the trust manager provider that will be used to validate any certificates
     * presented by HTTPS clients.
     */
    trustManagerProvider?: pulumi.Input<string>;
    /**
     * The type of Connection Handler resource. Options are ['jmx', 'ldap', 'ldif', 'http']
     */
    type?: pulumi.Input<string>;
    /**
     * If enabled, a correlation ID header will be added to outgoing HTTP responses.
     */
    useCorrelationIdHeader?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use "Forwarded" and "X-Forwarded-*" request headers to override corresponding HTTP request
     * information available during request processing.
     */
    useForwardedHeaders?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `jmx`: Indicates whether the JMX Connection Handler should use SSL. - `ldap`:
     * Indicates whether the LDAP Connection Handler should use SSL. - `http`: Indicates whether the HTTP Connection Handler
     * should use SSL.
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * Indicates whether the LDAP Connection Handler should use TCP keep-alive.
     */
    useTcpKeepAlive?: pulumi.Input<boolean>;
    /**
     * Specifies information about web applications that will be provided via this connection handler.
     */
    webApplicationExtensions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DefaultConnectionHandler resource.
 */
export interface DefaultConnectionHandlerArgs {
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the maximum number of pending connection attempts that are
     * allowed to queue up in the accept backlog before the server starts rejecting new connection attempts. - `http`:
     * Specifies the number of concurrent outstanding connection attempts that the connection handler should allow. The default
     * value should be acceptable in most cases, but it may need to be increased in environments that may attempt to establish
     * large numbers of connections simultaneously.
     */
    acceptBacklog?: pulumi.Input<number>;
    /**
     * Indicates whether connections from LDAPv2 clients are allowed.
     */
    allowLdapV2?: pulumi.Input<boolean>;
    /**
     * Indicates whether clients are allowed to use StartTLS.
     */
    allowStartTls?: pulumi.Input<boolean>;
    /**
     * Indicates whether the server should attempt to reuse socket descriptors. This may be useful in environments with a high
     * rate of connection establishment and termination.
     */
    allowTcpReuseAddress?: pulumi.Input<boolean>;
    /**
     * Specifies a set of address masks that determines the addresses of the clients that are allowed to establish connections
     * to this connection handler.
     */
    allowedClients?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether to attempt to automatically authenticate a client connection that has established a secure
     * communication channel (using either SSL or StartTLS) and presented its own client certificate. Generally, clients should
     * use the SASL EXTERNAL mechanism to authenticate using a client certificate, but some clients may not support that
     * capability and/or may expect automatic authentication.
     */
    autoAuthenticateUsingClientCertificate?: pulumi.Input<boolean>;
    /**
     * Indicates whether all connections associated with this LDAP Connection Handler should be closed before an explicit
     * garbage collection is performed to allow clients to route requests to another server.
     */
    closeConnectionsOnExplicitGc?: pulumi.Input<boolean>;
    /**
     * Indicates whether all connections associated with this LDAP Connection Handler should be closed and no new connections
     * accepted when the server has determined that it is "unavailable." This allows clients (or a network load balancer) to
     * route requests to another server.
     */
    closeConnectionsWhenUnavailable?: pulumi.Input<boolean>;
    /**
     * Specifies the set of HTTP request headers that may contain a value to be used as the correlation ID. Example values are
     * "Correlation-Id", "X-Amzn-Trace-Id", and "X-Request-Id".
     */
    correlationIdRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are
     * "Correlation-Id", "X-Amzn-Trace-Id", and "X-Request-Id".
     */
    correlationIdResponseHeader?: pulumi.Input<string>;
    /**
     * Specifies a set of address masks that determines the addresses of the clients that are not allowed to establish
     * connections to this connection handler.
     */
    deniedClients?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Connection Handler
     */
    description?: pulumi.Input<string>;
    /**
     * Determines whether request form parameters submitted in multipart/ form-data (RFC 2388) format should be processed as
     * request parameters.
     */
    enableMultipartMimeParameters?: pulumi.Input<boolean>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Requires SNI hostnames to match or else throw an Invalid SNI
     * error.
     */
    enableSniHostnameChecks?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Connection Handler is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the length of time that the server should delay the response to non-successful bind operations. A value of
     * zero milliseconds indicates that non-successful bind operations should not be delayed.
     */
    failedBindResponseDelay?: pulumi.Input<string>;
    /**
     * Specifies the set of HTTP operation loggers that should be used to log information about requests and responses for
     * operations processed through this HTTP Connection Handler.
     */
    httpOperationLogPublishers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum buffer size of an http request including the request uri and all of the request headers.
     */
    httpRequestHeaderSize?: pulumi.Input<number>;
    /**
     * Specifies information about servlets that will be provided via this connection handler.
     */
    httpServletExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum idle time for a connection. The max idle time is applied when waiting for a new request to be
     * received on a connection, when reading the headers and content of a request, or when writing the headers and content of
     * a response.
     */
    idleTimeLimit?: pulumi.Input<string>;
    /**
     * Indicates whether to enable statistics collection for this connection handler.
     */
    keepStats?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `jmx`: Specifies the name of the key manager that should be used with this JMX
     * Connection Handler . - `ldap`: Specifies the name of the key manager that should be used with this LDAP Connection
     * Handler . - `http`: Specifies the key manager provider that will be used to obtain the certificate to present to HTTPS
     * clients.
     */
    keyManagerProvider?: pulumi.Input<string>;
    /**
     * Specifies the path to the directory in which the LDIF files should be placed.
     */
    ldifDirectory?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the address or set of addresses on which this LDAP Connection
     * Handler should listen for connections from LDAP clients. - `http`: Specifies the address on which to listen for
     * connections from HTTP clients. If no value is defined, the server will listen on all addresses on all interfaces.
     */
    listenAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `jmx`: Specifies the port number on which the JMX Connection Handler will listen
     * for connections from clients. - `ldap`: Specifies the port number on which the LDAP Connection Handler will listen for
     * connections from clients. - `http`: Specifies the port number on which the HTTP Connection Handler will listen for
     * connections from clients.
     */
    listenPort?: pulumi.Input<number>;
    /**
     * Specifies the number of connections, which if exceeded, places this handler in a low resource state where a different
     * idle time limit is applied on the connections.
     */
    lowResourcesConnectionThreshold?: pulumi.Input<number>;
    /**
     * Specifies the maximum idle time for a connection when this handler is in a low resource state as defined by
     * low-resource-connections. The max idle time is applied when waiting for a new request to be received on a connection,
     * when reading the headers and content of a request, or when writing the headers and content of a response.
     */
    lowResourcesIdleTimeLimit?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that attempts to write data to LDAP clients should be allowed to block.
     */
    maxBlockedWriteTimeLimit?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of threads that are used to process cancel and abandon requests from clients.
     */
    maxCancelHandlers?: pulumi.Input<number>;
    /**
     * Specifies the size of the largest LDAP request message that will be allowed by this LDAP Connection handler.
     */
    maxRequestSize?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the number of threads that are used to accept new client connections, and to perform any initial preparation
     * on those connections that may be needed before the connection can be used to read requests and send responses.
     */
    numAcceptHandlers?: pulumi.Input<number>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the number of request handlers that are used to read requests
     * from clients. - `http`: Specifies the number of threads that will be used for accepting connections and reading requests
     * from clients.
     */
    numRequestHandlers?: pulumi.Input<number>;
    /**
     * Specifies how frequently the LDIF connection handler should check the LDIF directory to determine whether a new LDIF
     * file has been added.
     */
    pollInterval?: pulumi.Input<string>;
    /**
     * Supported in PingDirectory product version 10.0.0.0+. Indicates whether a separate request handler thread should be
     * created for each client connection, which can help avoid starvation of client connections for cases in which one or more
     * clients send large numbers of concurrent asynchronous requests. This should only be used for cases in which a relatively
     * small number of connections will be established at any given time, the connections established will generally be
     * long-lived, and at least one client may send high volumes of asynchronous requests. This property can be used to
     * alleviate possible blocking during long-running TLS negotiation on a single request handler which can result in it being
     * unable to acknowledge further client requests until the TLS negotation completes or times out.
     */
    requestHandlerPerConnection?: pulumi.Input<boolean>;
    /**
     * Specifies HTTP header fields and values added to response headers for all requests.
     */
    responseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the LDAP Connection Handler should send a notice of disconnection extended response message to the
     * client if a new connection is rejected for some reason.
     */
    sendRejectionNotice?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `jmx`: Specifies the nickname (also called the alias) of the certificate that the
     * JMX Connection Handler should use when performing SSL communication. - `ldap`: Specifies the nickname (also called the
     * alias) of the certificate that the LDAP Connection Handler should use when performing SSL communication. - `http`:
     * Specifies the nickname (also called the alias) of the certificate that the HTTP Connection Handler should use when
     * performing SSL communication.
     */
    sslCertNickname?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the names of the TLS cipher suites that are allowed for use in
     * SSL or StartTLS communication. The set of supported cipher suites can be viewed via the ssl context monitor entry. -
     * `http`: Specifies the names of the SSL cipher suites that are allowed for use in SSL communication. The set of supported
     * cipher suites can be viewed via the ssl context monitor entry.
     */
    sslCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the policy that the LDAP Connection Handler should use
     * regarding client SSL certificates. - `http`: Specifies the policy that the HTTP Connection Handler should use regarding
     * client SSL certificates. In order for a client certificate to be accepted it must be known to the trust-manager-provider
     * associated with this HTTP Connection Handler. Client certificates received by the HTTP Connection Handler are by default
     * used for TLS mutual authentication only, as there is no support for user authentication.
     */
    sslClientAuthPolicy?: pulumi.Input<string>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the names of the TLS protocols that are allowed for use in SSL
     * or StartTLS communication. The set of supported ssl protocols can be viewed via the ssl context monitor entry. - `http`:
     * Specifies the names of the SSL protocols that are allowed for use in SSL communication. The set of supported ssl
     * protocols can be viewed via the ssl context monitor entry.
     */
    sslProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the `type` attribute is set to: - `ldap`: Specifies the name of the trust manager that should be used with the LDAP
     * Connection Handler . - `http`: Specifies the trust manager provider that will be used to validate any certificates
     * presented by HTTPS clients.
     */
    trustManagerProvider?: pulumi.Input<string>;
    /**
     * If enabled, a correlation ID header will be added to outgoing HTTP responses.
     */
    useCorrelationIdHeader?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use "Forwarded" and "X-Forwarded-*" request headers to override corresponding HTTP request
     * information available during request processing.
     */
    useForwardedHeaders?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `jmx`: Indicates whether the JMX Connection Handler should use SSL. - `ldap`:
     * Indicates whether the LDAP Connection Handler should use SSL. - `http`: Indicates whether the HTTP Connection Handler
     * should use SSL.
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * Indicates whether the LDAP Connection Handler should use TCP keep-alive.
     */
    useTcpKeepAlive?: pulumi.Input<boolean>;
    /**
     * Specifies information about web applications that will be provided via this connection handler.
     */
    webApplicationExtensions?: pulumi.Input<pulumi.Input<string>[]>;
}
