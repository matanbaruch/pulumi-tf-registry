// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UncachedEntryCriteria extends pulumi.CustomResource {
    /**
     * Get an existing UncachedEntryCriteria resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UncachedEntryCriteriaState, opts?: pulumi.CustomResourceOptions): UncachedEntryCriteria {
        return new UncachedEntryCriteria(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/uncachedEntryCriteria:UncachedEntryCriteria';

    /**
     * Returns true if the given object is an instance of UncachedEntryCriteria.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UncachedEntryCriteria {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UncachedEntryCriteria.__pulumiType;
    }

    /**
     * Specifies the maximum length of time that has passed since an entry was last accessed that it should still be included
     * in the id2entry database. Entries that have not been accessed in more than this length of time may be written into the
     * uncached-id2entry database.
     */
    public readonly accessTimeThreshold!: pulumi.Output<string | undefined>;
    /**
     * A description for this Uncached Entry Criteria
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether this Uncached Entry Criteria is enabled for use in the server.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Uncached Entry Criteria. Each configuration
     * property should be given in the form 'name=value'.
     */
    public readonly extensionArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Uncached Entry Criteria.
     */
    public readonly extensionClass!: pulumi.Output<string | undefined>;
    /**
     * Specifies the search filter that should be used to differentiate entries into cached and uncached sets.
     */
    public readonly filter!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the associated filter identifies those entries which should be stored in the uncached-id2entry
     * database (if true) or entries which should be stored in the id2entry database (if false).
     */
    public readonly filterIdentifiesUncachedEntries!: pulumi.Output<boolean>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.UncachedEntryCriteriaRequiredAction[]>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Uncached Entry Criteria. Each configuration
     * property should be given in the form 'name=value'.
     */
    public readonly scriptArguments!: pulumi.Output<string[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Uncached Entry Criteria.
     */
    public readonly scriptClass!: pulumi.Output<string | undefined>;
    /**
     * The type of Uncached Entry Criteria resource. Options are ['default', 'last-access-time', 'filter-based',
     * 'groovy-scripted', 'third-party']
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a UncachedEntryCriteria resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UncachedEntryCriteriaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UncachedEntryCriteriaArgs | UncachedEntryCriteriaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UncachedEntryCriteriaState | undefined;
            resourceInputs["accessTimeThreshold"] = state ? state.accessTimeThreshold : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["extensionArguments"] = state ? state.extensionArguments : undefined;
            resourceInputs["extensionClass"] = state ? state.extensionClass : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["filterIdentifiesUncachedEntries"] = state ? state.filterIdentifiesUncachedEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["scriptArguments"] = state ? state.scriptArguments : undefined;
            resourceInputs["scriptClass"] = state ? state.scriptClass : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as UncachedEntryCriteriaArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accessTimeThreshold"] = args ? args.accessTimeThreshold : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["extensionArguments"] = args ? args.extensionArguments : undefined;
            resourceInputs["extensionClass"] = args ? args.extensionClass : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["filterIdentifiesUncachedEntries"] = args ? args.filterIdentifiesUncachedEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scriptArguments"] = args ? args.scriptArguments : undefined;
            resourceInputs["scriptClass"] = args ? args.scriptClass : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UncachedEntryCriteria.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UncachedEntryCriteria resources.
 */
export interface UncachedEntryCriteriaState {
    /**
     * Specifies the maximum length of time that has passed since an entry was last accessed that it should still be included
     * in the id2entry database. Entries that have not been accessed in more than this length of time may be written into the
     * uncached-id2entry database.
     */
    accessTimeThreshold?: pulumi.Input<string>;
    /**
     * A description for this Uncached Entry Criteria
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this Uncached Entry Criteria is enabled for use in the server.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Uncached Entry Criteria. Each configuration
     * property should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Uncached Entry Criteria.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * Specifies the search filter that should be used to differentiate entries into cached and uncached sets.
     */
    filter?: pulumi.Input<string>;
    /**
     * Indicates whether the associated filter identifies those entries which should be stored in the uncached-id2entry
     * database (if true) or entries which should be stored in the id2entry database (if false).
     */
    filterIdentifiesUncachedEntries?: pulumi.Input<boolean>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.UncachedEntryCriteriaRequiredAction>[]>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Uncached Entry Criteria. Each configuration
     * property should be given in the form 'name=value'.
     */
    scriptArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Uncached Entry Criteria.
     */
    scriptClass?: pulumi.Input<string>;
    /**
     * The type of Uncached Entry Criteria resource. Options are ['default', 'last-access-time', 'filter-based',
     * 'groovy-scripted', 'third-party']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UncachedEntryCriteria resource.
 */
export interface UncachedEntryCriteriaArgs {
    /**
     * Specifies the maximum length of time that has passed since an entry was last accessed that it should still be included
     * in the id2entry database. Entries that have not been accessed in more than this length of time may be written into the
     * uncached-id2entry database.
     */
    accessTimeThreshold?: pulumi.Input<string>;
    /**
     * A description for this Uncached Entry Criteria
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this Uncached Entry Criteria is enabled for use in the server.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The set of arguments used to customize the behavior for the Third Party Uncached Entry Criteria. Each configuration
     * property should be given in the form 'name=value'.
     */
    extensionArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Java class providing the logic for the Third Party Uncached Entry Criteria.
     */
    extensionClass?: pulumi.Input<string>;
    /**
     * Specifies the search filter that should be used to differentiate entries into cached and uncached sets.
     */
    filter?: pulumi.Input<string>;
    /**
     * Indicates whether the associated filter identifies those entries which should be stored in the uncached-id2entry
     * database (if true) or entries which should be stored in the id2entry database (if false).
     */
    filterIdentifiesUncachedEntries?: pulumi.Input<boolean>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * The set of arguments used to customize the behavior for the Scripted Uncached Entry Criteria. Each configuration
     * property should be given in the form 'name=value'.
     */
    scriptArguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Uncached Entry Criteria.
     */
    scriptClass?: pulumi.Input<string>;
    /**
     * The type of Uncached Entry Criteria resource. Options are ['default', 'last-access-time', 'filter-based',
     * 'groovy-scripted', 'third-party']
     */
    type: pulumi.Input<string>;
}
