// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultCipherSecretKey extends pulumi.CustomResource {
    /**
     * Get an existing DefaultCipherSecretKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultCipherSecretKeyState, opts?: pulumi.CustomResourceOptions): DefaultCipherSecretKey {
        return new DefaultCipherSecretKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultCipherSecretKey:DefaultCipherSecretKey';

    /**
     * Returns true if the given object is an instance of DefaultCipherSecretKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultCipherSecretKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultCipherSecretKey.__pulumiType;
    }

    /**
     * The algorithm name used to produce this cipher, e.g. AES/CBC/PKCS5Padding.
     */
    public readonly cipherTransformationName!: pulumi.Output<string>;
    /**
     * The initialization vector length of the cipher in bits.
     */
    public readonly initializationVectorLengthBits!: pulumi.Output<number>;
    /**
     * If the key is compromised, an administrator may set this flag to immediately trigger the creation of a new secret key.
     * After the new key is generated, the value of this property will be reset to false.
     */
    public readonly isCompromised!: pulumi.Output<boolean>;
    /**
     * The unique system-generated identifier for the Secret Key.
     */
    public readonly keyId!: pulumi.Output<string>;
    /**
     * The length of the key in bits.
     */
    public readonly keyLengthBits!: pulumi.Output<number>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultCipherSecretKeyRequiredAction[]>;
    /**
     * Name of the parent Server Instance
     */
    public readonly serverInstanceName!: pulumi.Output<string>;
    /**
     * The symmetric key that is used for both encryption of plain text and decryption of cipher text. This stores the secret
     * key for each server instance encrypted with that server's inter-server certificate.
     */
    public readonly symmetricKeys!: pulumi.Output<string[]>;
    /**
     * The type of Cipher Secret Key resource. Options are ['cipher-secret-key']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultCipherSecretKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultCipherSecretKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultCipherSecretKeyArgs | DefaultCipherSecretKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultCipherSecretKeyState | undefined;
            resourceInputs["cipherTransformationName"] = state ? state.cipherTransformationName : undefined;
            resourceInputs["initializationVectorLengthBits"] = state ? state.initializationVectorLengthBits : undefined;
            resourceInputs["isCompromised"] = state ? state.isCompromised : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyLengthBits"] = state ? state.keyLengthBits : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["serverInstanceName"] = state ? state.serverInstanceName : undefined;
            resourceInputs["symmetricKeys"] = state ? state.symmetricKeys : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultCipherSecretKeyArgs | undefined;
            if ((!args || args.serverInstanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverInstanceName'");
            }
            resourceInputs["cipherTransformationName"] = args ? args.cipherTransformationName : undefined;
            resourceInputs["initializationVectorLengthBits"] = args ? args.initializationVectorLengthBits : undefined;
            resourceInputs["isCompromised"] = args ? args.isCompromised : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyLengthBits"] = args ? args.keyLengthBits : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverInstanceName"] = args ? args.serverInstanceName : undefined;
            resourceInputs["symmetricKeys"] = args ? args.symmetricKeys : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultCipherSecretKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultCipherSecretKey resources.
 */
export interface DefaultCipherSecretKeyState {
    /**
     * The algorithm name used to produce this cipher, e.g. AES/CBC/PKCS5Padding.
     */
    cipherTransformationName?: pulumi.Input<string>;
    /**
     * The initialization vector length of the cipher in bits.
     */
    initializationVectorLengthBits?: pulumi.Input<number>;
    /**
     * If the key is compromised, an administrator may set this flag to immediately trigger the creation of a new secret key.
     * After the new key is generated, the value of this property will be reset to false.
     */
    isCompromised?: pulumi.Input<boolean>;
    /**
     * The unique system-generated identifier for the Secret Key.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The length of the key in bits.
     */
    keyLengthBits?: pulumi.Input<number>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultCipherSecretKeyRequiredAction>[]>;
    /**
     * Name of the parent Server Instance
     */
    serverInstanceName?: pulumi.Input<string>;
    /**
     * The symmetric key that is used for both encryption of plain text and decryption of cipher text. This stores the secret
     * key for each server instance encrypted with that server's inter-server certificate.
     */
    symmetricKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of Cipher Secret Key resource. Options are ['cipher-secret-key']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultCipherSecretKey resource.
 */
export interface DefaultCipherSecretKeyArgs {
    /**
     * The algorithm name used to produce this cipher, e.g. AES/CBC/PKCS5Padding.
     */
    cipherTransformationName?: pulumi.Input<string>;
    /**
     * The initialization vector length of the cipher in bits.
     */
    initializationVectorLengthBits?: pulumi.Input<number>;
    /**
     * If the key is compromised, an administrator may set this flag to immediately trigger the creation of a new secret key.
     * After the new key is generated, the value of this property will be reset to false.
     */
    isCompromised?: pulumi.Input<boolean>;
    /**
     * The unique system-generated identifier for the Secret Key.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The length of the key in bits.
     */
    keyLengthBits?: pulumi.Input<number>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the parent Server Instance
     */
    serverInstanceName: pulumi.Input<string>;
    /**
     * The symmetric key that is used for both encryption of plain text and decryption of cipher text. This stores the secret
     * key for each server instance encrypted with that server's inter-server certificate.
     */
    symmetricKeys?: pulumi.Input<pulumi.Input<string>[]>;
}
