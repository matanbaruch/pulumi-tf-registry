// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDelegatedAdminResourceRights(args: GetDelegatedAdminResourceRightsArgs, opts?: pulumi.InvokeOptions): Promise<GetDelegatedAdminResourceRightsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getDelegatedAdminResourceRights:getDelegatedAdminResourceRights", {
        "delegatedAdminRightsName": args.delegatedAdminRightsName,
        "restResourceType": args.restResourceType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDelegatedAdminResourceRights.
 */
export interface GetDelegatedAdminResourceRightsArgs {
    delegatedAdminRightsName: string;
    restResourceType: string;
}

/**
 * A collection of values returned by getDelegatedAdminResourceRights.
 */
export interface GetDelegatedAdminResourceRightsResult {
    readonly adminPermissions: string[];
    readonly adminScope: string;
    readonly delegatedAdminRightsName: string;
    readonly description: string;
    readonly enabled: boolean;
    readonly id: string;
    readonly resourceSubtrees: string[];
    readonly resourcesInGroups: string[];
    readonly restResourceType: string;
    readonly type: string;
}
export function getDelegatedAdminResourceRightsOutput(args: GetDelegatedAdminResourceRightsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDelegatedAdminResourceRightsResult> {
    return pulumi.output(args).apply((a: any) => getDelegatedAdminResourceRights(a, opts))
}

/**
 * A collection of arguments for invoking getDelegatedAdminResourceRights.
 */
export interface GetDelegatedAdminResourceRightsOutputArgs {
    delegatedAdminRightsName: pulumi.Input<string>;
    restResourceType: pulumi.Input<string>;
}
