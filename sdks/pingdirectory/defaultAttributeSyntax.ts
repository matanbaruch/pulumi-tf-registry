// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultAttributeSyntax extends pulumi.CustomResource {
    /**
     * Get an existing DefaultAttributeSyntax resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultAttributeSyntaxState, opts?: pulumi.CustomResourceOptions): DefaultAttributeSyntax {
        return new DefaultAttributeSyntax(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultAttributeSyntax:DefaultAttributeSyntax';

    /**
     * Returns true if the given object is an instance of DefaultAttributeSyntax.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultAttributeSyntax {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultAttributeSyntax.__pulumiType;
    }

    /**
     * Indicates whether zero-length (that is, an empty string) values are allowed.
     */
    public readonly allowZeroLengthValues!: pulumi.Output<boolean>;
    /**
     * Indicates whether values of attributes with this syntax should be compacted when stored in a local DB database.
     */
    public readonly enableCompaction!: pulumi.Output<boolean>;
    /**
     * Indicates whether the Attribute Syntax is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Specifies the specific attributes (which should be associated with this syntax) whose values should not be compacted. If
     * one or more exclude attributes are specified, then values of those attributes will not have their values compacted. This
     * property takes precedence over the include-attribute-in-compaction property.
     */
    public readonly excludeAttributeFromCompactions!: pulumi.Output<string[]>;
    /**
     * Specifies the specific attributes (which should be associated with this syntax) whose values should be compacted. If one
     * or more include attributes are specified, then only those attributes will have their values compacted. If not set then
     * all attributes will have their values compacted. The exclude-attribute-from-compaction property takes precedence over
     * this property.
     */
    public readonly includeAttributeInCompactions!: pulumi.Output<string[]>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Indicates whether values of this attribute are required to have a "binary" transfer option as described in RFC 4522.
     * Attributes with this syntax will generally be referenced with names including ";binary" (e.g.,
     * "userCertificate;binary").
     */
    public readonly requireBinaryTransfer!: pulumi.Output<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultAttributeSyntaxRequiredAction[]>;
    /**
     * When the `type` attribute is set to: - `telephone-number`: Indicates whether to require telephone number values to
     * strictly comply with the standard definition for this syntax. - `ldap-url`: Indicates whether values for attributes with
     * this syntax will be required to be in the valid LDAP URL format. If this is set to false, then arbitrary strings will be
     * allowed.
     */
    public readonly strictFormat!: pulumi.Output<boolean>;
    /**
     * Indicates whether the suggested minimum upper bound appended to an attribute's syntax OID in its schema definition
     * Attribute Type Description should be stripped.
     */
    public readonly stripSyntaxMinUpperBound!: pulumi.Output<boolean>;
    /**
     * The type of Attribute Syntax resource. Options are ['attribute-type-description', 'directory-string',
     * 'telephone-number', 'distinguished-name', 'generalized-time', 'integer', 'uuid', 'generic', 'json-object',
     * 'user-password', 'boolean', 'hex-string', 'bit-string', 'ldap-url', 'name-and-optional-uid']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultAttributeSyntax resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultAttributeSyntaxArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultAttributeSyntaxArgs | DefaultAttributeSyntaxState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultAttributeSyntaxState | undefined;
            resourceInputs["allowZeroLengthValues"] = state ? state.allowZeroLengthValues : undefined;
            resourceInputs["enableCompaction"] = state ? state.enableCompaction : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["excludeAttributeFromCompactions"] = state ? state.excludeAttributeFromCompactions : undefined;
            resourceInputs["includeAttributeInCompactions"] = state ? state.includeAttributeInCompactions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["requireBinaryTransfer"] = state ? state.requireBinaryTransfer : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["strictFormat"] = state ? state.strictFormat : undefined;
            resourceInputs["stripSyntaxMinUpperBound"] = state ? state.stripSyntaxMinUpperBound : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultAttributeSyntaxArgs | undefined;
            resourceInputs["allowZeroLengthValues"] = args ? args.allowZeroLengthValues : undefined;
            resourceInputs["enableCompaction"] = args ? args.enableCompaction : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["excludeAttributeFromCompactions"] = args ? args.excludeAttributeFromCompactions : undefined;
            resourceInputs["includeAttributeInCompactions"] = args ? args.includeAttributeInCompactions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requireBinaryTransfer"] = args ? args.requireBinaryTransfer : undefined;
            resourceInputs["strictFormat"] = args ? args.strictFormat : undefined;
            resourceInputs["stripSyntaxMinUpperBound"] = args ? args.stripSyntaxMinUpperBound : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultAttributeSyntax.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultAttributeSyntax resources.
 */
export interface DefaultAttributeSyntaxState {
    /**
     * Indicates whether zero-length (that is, an empty string) values are allowed.
     */
    allowZeroLengthValues?: pulumi.Input<boolean>;
    /**
     * Indicates whether values of attributes with this syntax should be compacted when stored in a local DB database.
     */
    enableCompaction?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Attribute Syntax is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the specific attributes (which should be associated with this syntax) whose values should not be compacted. If
     * one or more exclude attributes are specified, then values of those attributes will not have their values compacted. This
     * property takes precedence over the include-attribute-in-compaction property.
     */
    excludeAttributeFromCompactions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the specific attributes (which should be associated with this syntax) whose values should be compacted. If one
     * or more include attributes are specified, then only those attributes will have their values compacted. If not set then
     * all attributes will have their values compacted. The exclude-attribute-from-compaction property takes precedence over
     * this property.
     */
    includeAttributeInCompactions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether values of this attribute are required to have a "binary" transfer option as described in RFC 4522.
     * Attributes with this syntax will generally be referenced with names including ";binary" (e.g.,
     * "userCertificate;binary").
     */
    requireBinaryTransfer?: pulumi.Input<boolean>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultAttributeSyntaxRequiredAction>[]>;
    /**
     * When the `type` attribute is set to: - `telephone-number`: Indicates whether to require telephone number values to
     * strictly comply with the standard definition for this syntax. - `ldap-url`: Indicates whether values for attributes with
     * this syntax will be required to be in the valid LDAP URL format. If this is set to false, then arbitrary strings will be
     * allowed.
     */
    strictFormat?: pulumi.Input<boolean>;
    /**
     * Indicates whether the suggested minimum upper bound appended to an attribute's syntax OID in its schema definition
     * Attribute Type Description should be stripped.
     */
    stripSyntaxMinUpperBound?: pulumi.Input<boolean>;
    /**
     * The type of Attribute Syntax resource. Options are ['attribute-type-description', 'directory-string',
     * 'telephone-number', 'distinguished-name', 'generalized-time', 'integer', 'uuid', 'generic', 'json-object',
     * 'user-password', 'boolean', 'hex-string', 'bit-string', 'ldap-url', 'name-and-optional-uid']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultAttributeSyntax resource.
 */
export interface DefaultAttributeSyntaxArgs {
    /**
     * Indicates whether zero-length (that is, an empty string) values are allowed.
     */
    allowZeroLengthValues?: pulumi.Input<boolean>;
    /**
     * Indicates whether values of attributes with this syntax should be compacted when stored in a local DB database.
     */
    enableCompaction?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Attribute Syntax is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the specific attributes (which should be associated with this syntax) whose values should not be compacted. If
     * one or more exclude attributes are specified, then values of those attributes will not have their values compacted. This
     * property takes precedence over the include-attribute-in-compaction property.
     */
    excludeAttributeFromCompactions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the specific attributes (which should be associated with this syntax) whose values should be compacted. If one
     * or more include attributes are specified, then only those attributes will have their values compacted. If not set then
     * all attributes will have their values compacted. The exclude-attribute-from-compaction property takes precedence over
     * this property.
     */
    includeAttributeInCompactions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether values of this attribute are required to have a "binary" transfer option as described in RFC 4522.
     * Attributes with this syntax will generally be referenced with names including ";binary" (e.g.,
     * "userCertificate;binary").
     */
    requireBinaryTransfer?: pulumi.Input<boolean>;
    /**
     * When the `type` attribute is set to: - `telephone-number`: Indicates whether to require telephone number values to
     * strictly comply with the standard definition for this syntax. - `ldap-url`: Indicates whether values for attributes with
     * this syntax will be required to be in the valid LDAP URL format. If this is set to false, then arbitrary strings will be
     * allowed.
     */
    strictFormat?: pulumi.Input<boolean>;
    /**
     * Indicates whether the suggested minimum upper bound appended to an attribute's syntax OID in its schema definition
     * Attribute Type Description should be stripped.
     */
    stripSyntaxMinUpperBound?: pulumi.Input<boolean>;
}
