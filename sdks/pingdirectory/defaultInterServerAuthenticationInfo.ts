// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultInterServerAuthenticationInfo extends pulumi.CustomResource {
    /**
     * Get an existing DefaultInterServerAuthenticationInfo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultInterServerAuthenticationInfoState, opts?: pulumi.CustomResourceOptions): DefaultInterServerAuthenticationInfo {
        return new DefaultInterServerAuthenticationInfo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultInterServerAuthenticationInfo:DefaultInterServerAuthenticationInfo';

    /**
     * Returns true if the given object is an instance of DefaultInterServerAuthenticationInfo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultInterServerAuthenticationInfo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultInterServerAuthenticationInfo.__pulumiType;
    }

    /**
     * Identifies the type of password authentication that will be used.
     */
    public readonly authenticationType!: pulumi.Output<string>;
    /**
     * A DN of the username that should be used for the bind request.
     */
    public readonly bindDn!: pulumi.Output<string>;
    /**
     * Name of this config object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * The password for the username or bind-dn.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Identifies the purpose of this Inter Server Authentication Info.
     */
    public readonly purposes!: pulumi.Output<string[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultInterServerAuthenticationInfoRequiredAction[]>;
    /**
     * Name of the parent Server Instance Listener
     */
    public readonly serverInstanceListenerName!: pulumi.Output<string>;
    /**
     * Name of the parent Server Instance
     */
    public readonly serverInstanceName!: pulumi.Output<string>;
    /**
     * The type of Inter Server Authentication Info resource. Options are ['password', 'certificate']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The username that should be used for the bind request.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a DefaultInterServerAuthenticationInfo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultInterServerAuthenticationInfoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultInterServerAuthenticationInfoArgs | DefaultInterServerAuthenticationInfoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultInterServerAuthenticationInfoState | undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["bindDn"] = state ? state.bindDn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["purposes"] = state ? state.purposes : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["serverInstanceListenerName"] = state ? state.serverInstanceListenerName : undefined;
            resourceInputs["serverInstanceName"] = state ? state.serverInstanceName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as DefaultInterServerAuthenticationInfoArgs | undefined;
            if ((!args || args.serverInstanceListenerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverInstanceListenerName'");
            }
            if ((!args || args.serverInstanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverInstanceName'");
            }
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["bindDn"] = args ? args.bindDn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["purposes"] = args ? args.purposes : undefined;
            resourceInputs["serverInstanceListenerName"] = args ? args.serverInstanceListenerName : undefined;
            resourceInputs["serverInstanceName"] = args ? args.serverInstanceName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DefaultInterServerAuthenticationInfo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultInterServerAuthenticationInfo resources.
 */
export interface DefaultInterServerAuthenticationInfoState {
    /**
     * Identifies the type of password authentication that will be used.
     */
    authenticationType?: pulumi.Input<string>;
    /**
     * A DN of the username that should be used for the bind request.
     */
    bindDn?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The password for the username or bind-dn.
     */
    password?: pulumi.Input<string>;
    /**
     * Identifies the purpose of this Inter Server Authentication Info.
     */
    purposes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultInterServerAuthenticationInfoRequiredAction>[]>;
    /**
     * Name of the parent Server Instance Listener
     */
    serverInstanceListenerName?: pulumi.Input<string>;
    /**
     * Name of the parent Server Instance
     */
    serverInstanceName?: pulumi.Input<string>;
    /**
     * The type of Inter Server Authentication Info resource. Options are ['password', 'certificate']
     */
    type?: pulumi.Input<string>;
    /**
     * The username that should be used for the bind request.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultInterServerAuthenticationInfo resource.
 */
export interface DefaultInterServerAuthenticationInfoArgs {
    /**
     * Identifies the type of password authentication that will be used.
     */
    authenticationType?: pulumi.Input<string>;
    /**
     * A DN of the username that should be used for the bind request.
     */
    bindDn?: pulumi.Input<string>;
    /**
     * Name of this config object.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the username or bind-dn.
     */
    password?: pulumi.Input<string>;
    /**
     * Identifies the purpose of this Inter Server Authentication Info.
     */
    purposes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the parent Server Instance Listener
     */
    serverInstanceListenerName: pulumi.Input<string>;
    /**
     * Name of the parent Server Instance
     */
    serverInstanceName: pulumi.Input<string>;
    /**
     * The username that should be used for the bind request.
     */
    username?: pulumi.Input<string>;
}
