// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVelocityContextProvider(args: GetVelocityContextProviderArgs, opts?: pulumi.InvokeOptions): Promise<GetVelocityContextProviderResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getVelocityContextProvider:getVelocityContextProvider", {
        "httpServletExtensionName": args.httpServletExtensionName,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVelocityContextProvider.
 */
export interface GetVelocityContextProviderArgs {
    httpServletExtensionName: string;
    name: string;
}

/**
 * A collection of values returned by getVelocityContextProvider.
 */
export interface GetVelocityContextProviderResult {
    readonly applicationTools: string[];
    readonly enabled: boolean;
    readonly excludedViews: string[];
    readonly extensionArguments: string[];
    readonly extensionClass: string;
    readonly httpMethods: string[];
    readonly httpServletExtensionName: string;
    readonly id: string;
    readonly includedViews: string[];
    readonly name: string;
    readonly objectScope: string;
    readonly requestTools: string[];
    readonly responseHeaders: string[];
    readonly sessionTools: string[];
    readonly type: string;
}
export function getVelocityContextProviderOutput(args: GetVelocityContextProviderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVelocityContextProviderResult> {
    return pulumi.output(args).apply((a: any) => getVelocityContextProvider(a, opts))
}

/**
 * A collection of arguments for invoking getVelocityContextProvider.
 */
export interface GetVelocityContextProviderOutputArgs {
    httpServletExtensionName: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
