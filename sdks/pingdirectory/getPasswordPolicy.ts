// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPasswordPolicy(args: GetPasswordPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetPasswordPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getPasswordPolicy:getPasswordPolicy", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPasswordPolicy.
 */
export interface GetPasswordPolicyArgs {
    name: string;
}

/**
 * A collection of values returned by getPasswordPolicy.
 */
export interface GetPasswordPolicyResult {
    readonly accountStatusNotificationHandlers: string[];
    readonly allowExpiredPasswordChanges: boolean;
    readonly allowMultiplePasswordValues: boolean;
    readonly allowPreEncodedPasswords: string;
    readonly allowUserPasswordChanges: boolean;
    readonly allowedPasswordResetTokenUseConditions: string[];
    readonly bindPasswordValidationFailureAction: string;
    readonly bindPasswordValidators: string[];
    readonly defaultPasswordStorageSchemes: string[];
    readonly deprecatedPasswordStorageSchemes: string[];
    readonly description: string;
    readonly enableDebug: boolean;
    readonly expirePasswordsWithoutWarning: boolean;
    readonly failureLockoutAction: string;
    readonly forceChangeOnAdd: boolean;
    readonly forceChangeOnReset: boolean;
    readonly graceLoginCount: number;
    readonly id: string;
    readonly idleLockoutInterval: string;
    readonly ignoreDuplicatePasswordFailures: boolean;
    readonly lastLoginIpAddressAttribute: string;
    readonly lastLoginTimeAttribute: string;
    readonly lastLoginTimeFormat: string;
    readonly lockoutDuration: string;
    readonly lockoutFailureCount: number;
    readonly lockoutFailureExpirationInterval: string;
    readonly maxPasswordAge: string;
    readonly maxPasswordResetAge: string;
    readonly maxRetiredPasswordAge: string;
    readonly maximumRecentLoginHistoryFailedAuthenticationCount: number;
    readonly maximumRecentLoginHistoryFailedAuthenticationDuration: string;
    readonly maximumRecentLoginHistorySuccessfulAuthenticationCount: number;
    readonly maximumRecentLoginHistorySuccessfulAuthenticationDuration: string;
    readonly minPasswordAge: string;
    readonly minimumBindPasswordValidationFrequency: string;
    readonly name: string;
    readonly passwordAttribute: string;
    readonly passwordChangeRequiresCurrentPassword: boolean;
    readonly passwordExpirationWarningInterval: string;
    readonly passwordGenerator: string;
    readonly passwordHistoryCount: number;
    readonly passwordHistoryDuration: string;
    readonly passwordRetirementBehaviors: string[];
    readonly passwordValidators: string[];
    readonly previousLastLoginTimeFormats: string[];
    readonly reEncodePasswordsOnSchemeConfigChange: boolean;
    readonly recentLoginHistorySimilarAttemptBehavior: string;
    readonly requireChangeByTime: string;
    readonly requireSecureAuthentication: boolean;
    readonly requireSecurePasswordChanges: boolean;
    readonly returnPasswordExpirationControls: string;
    readonly skipValidationForAdministrators: boolean;
    readonly stateUpdateFailurePolicy: string;
    readonly type: string;
}
export function getPasswordPolicyOutput(args: GetPasswordPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPasswordPolicyResult> {
    return pulumi.output(args).apply((a: any) => getPasswordPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getPasswordPolicy.
 */
export interface GetPasswordPolicyOutputArgs {
    name: pulumi.Input<string>;
}
