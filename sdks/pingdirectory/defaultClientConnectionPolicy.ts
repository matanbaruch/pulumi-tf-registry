// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultClientConnectionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DefaultClientConnectionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultClientConnectionPolicyState, opts?: pulumi.CustomResourceOptions): DefaultClientConnectionPolicy {
        return new DefaultClientConnectionPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultClientConnectionPolicy:DefaultClientConnectionPolicy';

    /**
     * Returns true if the given object is an instance of DefaultClientConnectionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultClientConnectionPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultClientConnectionPolicy.__pulumiType;
    }

    /**
     * Indicates whether clients will be allowed to request search operations that cannot be efficiently processed using the
     * set of indexes defined in the corresponding backend. Note that even if this is false, some clients may be able to
     * request unindexed searches if the allow-unindexed-searches-with-control property has a value of true and the necessary
     * conditions are satisfied.
     */
    public readonly allowUnindexedSearches!: pulumi.Output<boolean>;
    /**
     * Indicates whether clients will be allowed to request search operations that cannot be efficiently processed using the
     * set of indexes defined in the corresponding backend, as long as the search request also includes the permit unindexed
     * search request control and the requester has the unindexed-search-with-control privilege (or that privilege is disabled
     * in the global configuration).
     */
    public readonly allowUnindexedSearchesWithControl!: pulumi.Output<boolean>;
    /**
     * Specifies the types of authentication that clients associated with this Client Connection Policy will be allowed to
     * request.
     */
    public readonly allowedAuthTypes!: pulumi.Output<string[]>;
    /**
     * Specifies the OIDs of the extended operations that clients associated with this Client Connection Policy will be allowed
     * to request.
     */
    public readonly allowedExtendedOperations!: pulumi.Output<string[]>;
    /**
     * Specifies the types of filter components that may be included in search requests from clients associated with this
     * Client Connection Policy which have a non-baseObject scope.
     */
    public readonly allowedFilterTypes!: pulumi.Output<string[]>;
    /**
     * Specifies the types of operations that clients associated with this Client Connection Policy will be allowed to request.
     */
    public readonly allowedOperations!: pulumi.Output<string[]>;
    /**
     * Specifies the OIDs of the controls that clients associated with this Client Connection Policy will be allowed to include
     * in requests.
     */
    public readonly allowedRequestControls!: pulumi.Output<string[]>;
    /**
     * Specifies the names of the SASL mechanisms that clients associated with this Client Connection Policy will be allowed to
     * request.
     */
    public readonly allowedSaslMechanisms!: pulumi.Output<string[]>;
    /**
     * Specifies a set of connection criteria that must match the associated client connection for it to be associated with
     * this Client Connection Policy.
     */
    public readonly connectionCriteria!: pulumi.Output<string>;
    /**
     * Specifies the behavior that the Directory Server should exhibit if a client connection attempts to exceed a rate defined
     * in the maximum-connection-operation-rate property. If the configured behavior is one that will reject requested
     * operations, then that behavior will persist until the end of the corresponding interval. The server will resume allowing
     * that client to perform operations when that interval expires, as long as no other operation rate limits have been
     * exceeded.
     */
    public readonly connectionOperationRateExceededBehavior!: pulumi.Output<string>;
    /**
     * Specifies the OIDs of the extended operations that clients associated with this Client Connection Policy will not be
     * allowed to request.
     */
    public readonly deniedExtendedOperations!: pulumi.Output<string[]>;
    /**
     * Specifies the OIDs of the controls that clients associated with this Client Connection Policy will not be allowed to
     * include in requests.
     */
    public readonly deniedRequestControls!: pulumi.Output<string[]>;
    /**
     * Specifies the names of the SASL mechanisms that clients associated with this Client Connection Policy will not be
     * allowed to request.
     */
    public readonly deniedSaslMechanisms!: pulumi.Output<string[]>;
    /**
     * A description for this Client Connection Policy
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Indicates whether this Client Connection Policy is enabled for use in the server. If a Client Connection Policy is
     * disabled, then no new client connections will be associated with it.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Specifies the order in which Client Connection Policy definitions will be evaluated. A Client Connection Policy with a
     * lower index will be evaluated before one with a higher index, and the first Client Connection Policy evaluated which may
     * apply to a client connection will be used for that connection. Each Client Connection Policy must be assigned a unique
     * evaluation order index value.
     */
    public readonly evaluationOrderIndex!: pulumi.Output<number>;
    /**
     * Specifies the set of global sensitive attribute definitions that should not apply to this client connection policy.
     */
    public readonly excludeGlobalSensitiveAttributes!: pulumi.Output<string[]>;
    /**
     * Specifies the set of backend base DNs for which subtree views should be excluded from this Client Connection Policy.
     */
    public readonly excludedBackendBaseDns!: pulumi.Output<string[]>;
    /**
     * Specifies the set of backend base DNs for which subtree views should be included in this Client Connection Policy.
     */
    public readonly includedBackendBaseDns!: pulumi.Output<string[]>;
    /**
     * Specifies the maximum number of client connections which may be associated with this Client Connection Policy at any
     * given time.
     */
    public readonly maximumConcurrentConnections!: pulumi.Output<number>;
    /**
     * Specifies the maximum length of time that the server should wait for an outstanding operation to complete before
     * rejecting a new request received when the maximum number of outstanding operations are already in progress on that
     * connection. If an existing outstanding operation on the connection completes before this time, then the operation will
     * be processed. Otherwise, the operation will be rejected with a "busy" result.
     */
    public readonly maximumConcurrentOperationWaitTimeBeforeRejecting!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of concurrent operations that can be in progress for any connection. This can help prevent
     * a single client connection from monopolizing server processing resources by sending a large number of concurrent
     * asynchronous requests. A value of zero indicates that no limit will be placed on the number of concurrent requests for a
     * single client.
     */
    public readonly maximumConcurrentOperationsPerConnection!: pulumi.Output<number>;
    /**
     * Specifies the behavior that the Directory Server should exhibit if a client attempts to invoke more concurrent
     * operations on a single connection than allowed by the maximum-concurrent-operations-per-connection property.
     */
    public readonly maximumConcurrentOperationsPerConnectionExceededBehavior!: pulumi.Output<string>;
    /**
     * Specifies the maximum length of time that a connection associated with this Client Connection Policy may be established.
     * Any connection which is associated with this Client Connection Policy and has been established for longer than this
     * period of time may be terminated.
     */
    public readonly maximumConnectionDuration!: pulumi.Output<string>;
    /**
     * Specifies the maximum rate at which a client associated with this Client Connection Policy may issue requests to the
     * Directory Server. If any client attempts to request operations at a rate higher than this limit, then the server will
     * exhibit the behavior described in the connection-operation-rate-exceeded-behavior property.
     */
    public readonly maximumConnectionOperationRates!: pulumi.Output<string[]>;
    /**
     * Specifies the maximum length of time that a connection associated with this Client Connection Policy may remain
     * established after the completion of the last operation processed on that connection. Any new operation requested on the
     * connection will reset this timer. Any connection associated with this Client Connection Policy which has been idle for
     * longer than this length of time may be terminated.
     */
    public readonly maximumIdleConnectionDuration!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of entries that may be joined with any single search result entry for a search request
     * performed by a client associated with this Client Connection Policy.
     */
    public readonly maximumLdapJoinSizeLimit!: pulumi.Output<number>;
    /**
     * Specifies the maximum number of operations that may be requested by any client connection associated with this Client
     * Connection Policy. If an attempt is made to process more than this number of operations on a client connection, then
     * that connection will be terminated.
     */
    public readonly maximumOperationCountPerConnection!: pulumi.Output<number>;
    /**
     * Specifies the maximum rate at which all clients associated with this Client Connection Policy, as a collective set, may
     * issue requests to the Directory Server. If this limit is exceeded, then the server will exhibit the behavior described
     * in the policy-operation-rate-exceeded-behavior property.
     */
    public readonly maximumPolicyOperationRates!: pulumi.Output<string[]>;
    /**
     * Specifies the maximum number of entries that may be examined by a backend in the course of processing a search requested
     * by clients associated with this Client Connection Policy.
     */
    public readonly maximumSearchLookthroughLimit!: pulumi.Output<number>;
    /**
     * Specifies the maximum number of entries that may be returned for a search performed by a client associated with this
     * Client Connection Policy.
     */
    public readonly maximumSearchSizeLimit!: pulumi.Output<number>;
    /**
     * Specifies the maximum length of time that the server should spend processing search operations requested by clients
     * associated with this Client Connection Policy.
     */
    public readonly maximumSearchTimeLimit!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of entries that the server will attempt to sort without the benefit of a VLV index. A value
     * of zero indicates that no limit should be enforced.
     */
    public readonly maximumSortSizeLimitWithoutVlvIndex!: pulumi.Output<number>;
    /**
     * Specifies the minimum number of consecutive bytes that must be present in any subInitial, subAny, or subFinal element of
     * a substring filter component (i.e., the minimum number of consecutive bytes between wildcard characters in a substring
     * filter). Any attempt to use a substring search with an element containing fewer than this number of bytes will be
     * rejected.
     */
    public readonly minimumSubstringLength!: pulumi.Output<number>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies a name which uniquely identifies this Client Connection Policy in the server.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * Specifies the behavior that the Directory Server should exhibit if a client connection attempts to exceed a rate defined
     * in the maximum-policy-operation-rate property. If the configured behavior is one that will reject requested operations,
     * then that behavior will persist until the end of the corresponding interval. The server will resume allowing clients
     * associated with this Client Connection Policy to perform operations when that interval expires, as long as no other
     * operation rate limits have been exceeded.
     */
    public readonly policyOperationRateExceededBehavior!: pulumi.Output<string>;
    /**
     * Specifies a request criteria object that must not match any requests submitted by clients associated with this Client
     * Connection Policy. If a client submits a request that satisfies this request criteria object, then that request will be
     * rejected.
     */
    public readonly prohibitedOperationRequestCriteria!: pulumi.Output<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultClientConnectionPolicyRequiredAction[]>;
    /**
     * Specifies a request criteria object that will be required to match all requests submitted by clients associated with
     * this Client Connection Policy. If a client submits a request that does not satisfy this request criteria object, then
     * that request will be rejected.
     */
    public readonly requiredOperationRequestCriteria!: pulumi.Output<string>;
    /**
     * Specifies the result code map that should be used for clients associated with this Client Connection Policy. If a value
     * is defined for this property, then it will override any result code map referenced in the global configuration.
     */
    public readonly resultCodeMap!: pulumi.Output<string>;
    /**
     * Provides the ability to indicate that some attributes should be considered sensitive and additional protection should be
     * in place when interacting with those attributes.
     */
    public readonly sensitiveAttributes!: pulumi.Output<string[]>;
    /**
     * Indicates whether any client connection for which this Client Connection Policy is selected should be terminated. This
     * makes it possible to define fine-grained criteria for clients that should not be allowed to connect to this Directory
     * Server.
     */
    public readonly terminateConnection!: pulumi.Output<boolean>;
    /**
     * The type of Client Connection Policy resource. Options are ['client-connection-policy']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultClientConnectionPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultClientConnectionPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultClientConnectionPolicyArgs | DefaultClientConnectionPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultClientConnectionPolicyState | undefined;
            resourceInputs["allowUnindexedSearches"] = state ? state.allowUnindexedSearches : undefined;
            resourceInputs["allowUnindexedSearchesWithControl"] = state ? state.allowUnindexedSearchesWithControl : undefined;
            resourceInputs["allowedAuthTypes"] = state ? state.allowedAuthTypes : undefined;
            resourceInputs["allowedExtendedOperations"] = state ? state.allowedExtendedOperations : undefined;
            resourceInputs["allowedFilterTypes"] = state ? state.allowedFilterTypes : undefined;
            resourceInputs["allowedOperations"] = state ? state.allowedOperations : undefined;
            resourceInputs["allowedRequestControls"] = state ? state.allowedRequestControls : undefined;
            resourceInputs["allowedSaslMechanisms"] = state ? state.allowedSaslMechanisms : undefined;
            resourceInputs["connectionCriteria"] = state ? state.connectionCriteria : undefined;
            resourceInputs["connectionOperationRateExceededBehavior"] = state ? state.connectionOperationRateExceededBehavior : undefined;
            resourceInputs["deniedExtendedOperations"] = state ? state.deniedExtendedOperations : undefined;
            resourceInputs["deniedRequestControls"] = state ? state.deniedRequestControls : undefined;
            resourceInputs["deniedSaslMechanisms"] = state ? state.deniedSaslMechanisms : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["evaluationOrderIndex"] = state ? state.evaluationOrderIndex : undefined;
            resourceInputs["excludeGlobalSensitiveAttributes"] = state ? state.excludeGlobalSensitiveAttributes : undefined;
            resourceInputs["excludedBackendBaseDns"] = state ? state.excludedBackendBaseDns : undefined;
            resourceInputs["includedBackendBaseDns"] = state ? state.includedBackendBaseDns : undefined;
            resourceInputs["maximumConcurrentConnections"] = state ? state.maximumConcurrentConnections : undefined;
            resourceInputs["maximumConcurrentOperationWaitTimeBeforeRejecting"] = state ? state.maximumConcurrentOperationWaitTimeBeforeRejecting : undefined;
            resourceInputs["maximumConcurrentOperationsPerConnection"] = state ? state.maximumConcurrentOperationsPerConnection : undefined;
            resourceInputs["maximumConcurrentOperationsPerConnectionExceededBehavior"] = state ? state.maximumConcurrentOperationsPerConnectionExceededBehavior : undefined;
            resourceInputs["maximumConnectionDuration"] = state ? state.maximumConnectionDuration : undefined;
            resourceInputs["maximumConnectionOperationRates"] = state ? state.maximumConnectionOperationRates : undefined;
            resourceInputs["maximumIdleConnectionDuration"] = state ? state.maximumIdleConnectionDuration : undefined;
            resourceInputs["maximumLdapJoinSizeLimit"] = state ? state.maximumLdapJoinSizeLimit : undefined;
            resourceInputs["maximumOperationCountPerConnection"] = state ? state.maximumOperationCountPerConnection : undefined;
            resourceInputs["maximumPolicyOperationRates"] = state ? state.maximumPolicyOperationRates : undefined;
            resourceInputs["maximumSearchLookthroughLimit"] = state ? state.maximumSearchLookthroughLimit : undefined;
            resourceInputs["maximumSearchSizeLimit"] = state ? state.maximumSearchSizeLimit : undefined;
            resourceInputs["maximumSearchTimeLimit"] = state ? state.maximumSearchTimeLimit : undefined;
            resourceInputs["maximumSortSizeLimitWithoutVlvIndex"] = state ? state.maximumSortSizeLimitWithoutVlvIndex : undefined;
            resourceInputs["minimumSubstringLength"] = state ? state.minimumSubstringLength : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policyOperationRateExceededBehavior"] = state ? state.policyOperationRateExceededBehavior : undefined;
            resourceInputs["prohibitedOperationRequestCriteria"] = state ? state.prohibitedOperationRequestCriteria : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["requiredOperationRequestCriteria"] = state ? state.requiredOperationRequestCriteria : undefined;
            resourceInputs["resultCodeMap"] = state ? state.resultCodeMap : undefined;
            resourceInputs["sensitiveAttributes"] = state ? state.sensitiveAttributes : undefined;
            resourceInputs["terminateConnection"] = state ? state.terminateConnection : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultClientConnectionPolicyArgs | undefined;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["allowUnindexedSearches"] = args ? args.allowUnindexedSearches : undefined;
            resourceInputs["allowUnindexedSearchesWithControl"] = args ? args.allowUnindexedSearchesWithControl : undefined;
            resourceInputs["allowedAuthTypes"] = args ? args.allowedAuthTypes : undefined;
            resourceInputs["allowedExtendedOperations"] = args ? args.allowedExtendedOperations : undefined;
            resourceInputs["allowedFilterTypes"] = args ? args.allowedFilterTypes : undefined;
            resourceInputs["allowedOperations"] = args ? args.allowedOperations : undefined;
            resourceInputs["allowedRequestControls"] = args ? args.allowedRequestControls : undefined;
            resourceInputs["allowedSaslMechanisms"] = args ? args.allowedSaslMechanisms : undefined;
            resourceInputs["connectionCriteria"] = args ? args.connectionCriteria : undefined;
            resourceInputs["connectionOperationRateExceededBehavior"] = args ? args.connectionOperationRateExceededBehavior : undefined;
            resourceInputs["deniedExtendedOperations"] = args ? args.deniedExtendedOperations : undefined;
            resourceInputs["deniedRequestControls"] = args ? args.deniedRequestControls : undefined;
            resourceInputs["deniedSaslMechanisms"] = args ? args.deniedSaslMechanisms : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["evaluationOrderIndex"] = args ? args.evaluationOrderIndex : undefined;
            resourceInputs["excludeGlobalSensitiveAttributes"] = args ? args.excludeGlobalSensitiveAttributes : undefined;
            resourceInputs["excludedBackendBaseDns"] = args ? args.excludedBackendBaseDns : undefined;
            resourceInputs["includedBackendBaseDns"] = args ? args.includedBackendBaseDns : undefined;
            resourceInputs["maximumConcurrentConnections"] = args ? args.maximumConcurrentConnections : undefined;
            resourceInputs["maximumConcurrentOperationWaitTimeBeforeRejecting"] = args ? args.maximumConcurrentOperationWaitTimeBeforeRejecting : undefined;
            resourceInputs["maximumConcurrentOperationsPerConnection"] = args ? args.maximumConcurrentOperationsPerConnection : undefined;
            resourceInputs["maximumConcurrentOperationsPerConnectionExceededBehavior"] = args ? args.maximumConcurrentOperationsPerConnectionExceededBehavior : undefined;
            resourceInputs["maximumConnectionDuration"] = args ? args.maximumConnectionDuration : undefined;
            resourceInputs["maximumConnectionOperationRates"] = args ? args.maximumConnectionOperationRates : undefined;
            resourceInputs["maximumIdleConnectionDuration"] = args ? args.maximumIdleConnectionDuration : undefined;
            resourceInputs["maximumLdapJoinSizeLimit"] = args ? args.maximumLdapJoinSizeLimit : undefined;
            resourceInputs["maximumOperationCountPerConnection"] = args ? args.maximumOperationCountPerConnection : undefined;
            resourceInputs["maximumPolicyOperationRates"] = args ? args.maximumPolicyOperationRates : undefined;
            resourceInputs["maximumSearchLookthroughLimit"] = args ? args.maximumSearchLookthroughLimit : undefined;
            resourceInputs["maximumSearchSizeLimit"] = args ? args.maximumSearchSizeLimit : undefined;
            resourceInputs["maximumSearchTimeLimit"] = args ? args.maximumSearchTimeLimit : undefined;
            resourceInputs["maximumSortSizeLimitWithoutVlvIndex"] = args ? args.maximumSortSizeLimitWithoutVlvIndex : undefined;
            resourceInputs["minimumSubstringLength"] = args ? args.minimumSubstringLength : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["policyOperationRateExceededBehavior"] = args ? args.policyOperationRateExceededBehavior : undefined;
            resourceInputs["prohibitedOperationRequestCriteria"] = args ? args.prohibitedOperationRequestCriteria : undefined;
            resourceInputs["requiredOperationRequestCriteria"] = args ? args.requiredOperationRequestCriteria : undefined;
            resourceInputs["resultCodeMap"] = args ? args.resultCodeMap : undefined;
            resourceInputs["sensitiveAttributes"] = args ? args.sensitiveAttributes : undefined;
            resourceInputs["terminateConnection"] = args ? args.terminateConnection : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultClientConnectionPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultClientConnectionPolicy resources.
 */
export interface DefaultClientConnectionPolicyState {
    /**
     * Indicates whether clients will be allowed to request search operations that cannot be efficiently processed using the
     * set of indexes defined in the corresponding backend. Note that even if this is false, some clients may be able to
     * request unindexed searches if the allow-unindexed-searches-with-control property has a value of true and the necessary
     * conditions are satisfied.
     */
    allowUnindexedSearches?: pulumi.Input<boolean>;
    /**
     * Indicates whether clients will be allowed to request search operations that cannot be efficiently processed using the
     * set of indexes defined in the corresponding backend, as long as the search request also includes the permit unindexed
     * search request control and the requester has the unindexed-search-with-control privilege (or that privilege is disabled
     * in the global configuration).
     */
    allowUnindexedSearchesWithControl?: pulumi.Input<boolean>;
    /**
     * Specifies the types of authentication that clients associated with this Client Connection Policy will be allowed to
     * request.
     */
    allowedAuthTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OIDs of the extended operations that clients associated with this Client Connection Policy will be allowed
     * to request.
     */
    allowedExtendedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the types of filter components that may be included in search requests from clients associated with this
     * Client Connection Policy which have a non-baseObject scope.
     */
    allowedFilterTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the types of operations that clients associated with this Client Connection Policy will be allowed to request.
     */
    allowedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OIDs of the controls that clients associated with this Client Connection Policy will be allowed to include
     * in requests.
     */
    allowedRequestControls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the SASL mechanisms that clients associated with this Client Connection Policy will be allowed to
     * request.
     */
    allowedSaslMechanisms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of connection criteria that must match the associated client connection for it to be associated with
     * this Client Connection Policy.
     */
    connectionCriteria?: pulumi.Input<string>;
    /**
     * Specifies the behavior that the Directory Server should exhibit if a client connection attempts to exceed a rate defined
     * in the maximum-connection-operation-rate property. If the configured behavior is one that will reject requested
     * operations, then that behavior will persist until the end of the corresponding interval. The server will resume allowing
     * that client to perform operations when that interval expires, as long as no other operation rate limits have been
     * exceeded.
     */
    connectionOperationRateExceededBehavior?: pulumi.Input<string>;
    /**
     * Specifies the OIDs of the extended operations that clients associated with this Client Connection Policy will not be
     * allowed to request.
     */
    deniedExtendedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OIDs of the controls that clients associated with this Client Connection Policy will not be allowed to
     * include in requests.
     */
    deniedRequestControls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the SASL mechanisms that clients associated with this Client Connection Policy will not be
     * allowed to request.
     */
    deniedSaslMechanisms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Client Connection Policy
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this Client Connection Policy is enabled for use in the server. If a Client Connection Policy is
     * disabled, then no new client connections will be associated with it.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the order in which Client Connection Policy definitions will be evaluated. A Client Connection Policy with a
     * lower index will be evaluated before one with a higher index, and the first Client Connection Policy evaluated which may
     * apply to a client connection will be used for that connection. Each Client Connection Policy must be assigned a unique
     * evaluation order index value.
     */
    evaluationOrderIndex?: pulumi.Input<number>;
    /**
     * Specifies the set of global sensitive attribute definitions that should not apply to this client connection policy.
     */
    excludeGlobalSensitiveAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the set of backend base DNs for which subtree views should be excluded from this Client Connection Policy.
     */
    excludedBackendBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the set of backend base DNs for which subtree views should be included in this Client Connection Policy.
     */
    includedBackendBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum number of client connections which may be associated with this Client Connection Policy at any
     * given time.
     */
    maximumConcurrentConnections?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that the server should wait for an outstanding operation to complete before
     * rejecting a new request received when the maximum number of outstanding operations are already in progress on that
     * connection. If an existing outstanding operation on the connection completes before this time, then the operation will
     * be processed. Otherwise, the operation will be rejected with a "busy" result.
     */
    maximumConcurrentOperationWaitTimeBeforeRejecting?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of concurrent operations that can be in progress for any connection. This can help prevent
     * a single client connection from monopolizing server processing resources by sending a large number of concurrent
     * asynchronous requests. A value of zero indicates that no limit will be placed on the number of concurrent requests for a
     * single client.
     */
    maximumConcurrentOperationsPerConnection?: pulumi.Input<number>;
    /**
     * Specifies the behavior that the Directory Server should exhibit if a client attempts to invoke more concurrent
     * operations on a single connection than allowed by the maximum-concurrent-operations-per-connection property.
     */
    maximumConcurrentOperationsPerConnectionExceededBehavior?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that a connection associated with this Client Connection Policy may be established.
     * Any connection which is associated with this Client Connection Policy and has been established for longer than this
     * period of time may be terminated.
     */
    maximumConnectionDuration?: pulumi.Input<string>;
    /**
     * Specifies the maximum rate at which a client associated with this Client Connection Policy may issue requests to the
     * Directory Server. If any client attempts to request operations at a rate higher than this limit, then the server will
     * exhibit the behavior described in the connection-operation-rate-exceeded-behavior property.
     */
    maximumConnectionOperationRates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum length of time that a connection associated with this Client Connection Policy may remain
     * established after the completion of the last operation processed on that connection. Any new operation requested on the
     * connection will reset this timer. Any connection associated with this Client Connection Policy which has been idle for
     * longer than this length of time may be terminated.
     */
    maximumIdleConnectionDuration?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of entries that may be joined with any single search result entry for a search request
     * performed by a client associated with this Client Connection Policy.
     */
    maximumLdapJoinSizeLimit?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of operations that may be requested by any client connection associated with this Client
     * Connection Policy. If an attempt is made to process more than this number of operations on a client connection, then
     * that connection will be terminated.
     */
    maximumOperationCountPerConnection?: pulumi.Input<number>;
    /**
     * Specifies the maximum rate at which all clients associated with this Client Connection Policy, as a collective set, may
     * issue requests to the Directory Server. If this limit is exceeded, then the server will exhibit the behavior described
     * in the policy-operation-rate-exceeded-behavior property.
     */
    maximumPolicyOperationRates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum number of entries that may be examined by a backend in the course of processing a search requested
     * by clients associated with this Client Connection Policy.
     */
    maximumSearchLookthroughLimit?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of entries that may be returned for a search performed by a client associated with this
     * Client Connection Policy.
     */
    maximumSearchSizeLimit?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that the server should spend processing search operations requested by clients
     * associated with this Client Connection Policy.
     */
    maximumSearchTimeLimit?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of entries that the server will attempt to sort without the benefit of a VLV index. A value
     * of zero indicates that no limit should be enforced.
     */
    maximumSortSizeLimitWithoutVlvIndex?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of consecutive bytes that must be present in any subInitial, subAny, or subFinal element of
     * a substring filter component (i.e., the minimum number of consecutive bytes between wildcard characters in a substring
     * filter). Any attempt to use a substring search with an element containing fewer than this number of bytes will be
     * rejected.
     */
    minimumSubstringLength?: pulumi.Input<number>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a name which uniquely identifies this Client Connection Policy in the server.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Specifies the behavior that the Directory Server should exhibit if a client connection attempts to exceed a rate defined
     * in the maximum-policy-operation-rate property. If the configured behavior is one that will reject requested operations,
     * then that behavior will persist until the end of the corresponding interval. The server will resume allowing clients
     * associated with this Client Connection Policy to perform operations when that interval expires, as long as no other
     * operation rate limits have been exceeded.
     */
    policyOperationRateExceededBehavior?: pulumi.Input<string>;
    /**
     * Specifies a request criteria object that must not match any requests submitted by clients associated with this Client
     * Connection Policy. If a client submits a request that satisfies this request criteria object, then that request will be
     * rejected.
     */
    prohibitedOperationRequestCriteria?: pulumi.Input<string>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultClientConnectionPolicyRequiredAction>[]>;
    /**
     * Specifies a request criteria object that will be required to match all requests submitted by clients associated with
     * this Client Connection Policy. If a client submits a request that does not satisfy this request criteria object, then
     * that request will be rejected.
     */
    requiredOperationRequestCriteria?: pulumi.Input<string>;
    /**
     * Specifies the result code map that should be used for clients associated with this Client Connection Policy. If a value
     * is defined for this property, then it will override any result code map referenced in the global configuration.
     */
    resultCodeMap?: pulumi.Input<string>;
    /**
     * Provides the ability to indicate that some attributes should be considered sensitive and additional protection should be
     * in place when interacting with those attributes.
     */
    sensitiveAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether any client connection for which this Client Connection Policy is selected should be terminated. This
     * makes it possible to define fine-grained criteria for clients that should not be allowed to connect to this Directory
     * Server.
     */
    terminateConnection?: pulumi.Input<boolean>;
    /**
     * The type of Client Connection Policy resource. Options are ['client-connection-policy']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultClientConnectionPolicy resource.
 */
export interface DefaultClientConnectionPolicyArgs {
    /**
     * Indicates whether clients will be allowed to request search operations that cannot be efficiently processed using the
     * set of indexes defined in the corresponding backend. Note that even if this is false, some clients may be able to
     * request unindexed searches if the allow-unindexed-searches-with-control property has a value of true and the necessary
     * conditions are satisfied.
     */
    allowUnindexedSearches?: pulumi.Input<boolean>;
    /**
     * Indicates whether clients will be allowed to request search operations that cannot be efficiently processed using the
     * set of indexes defined in the corresponding backend, as long as the search request also includes the permit unindexed
     * search request control and the requester has the unindexed-search-with-control privilege (or that privilege is disabled
     * in the global configuration).
     */
    allowUnindexedSearchesWithControl?: pulumi.Input<boolean>;
    /**
     * Specifies the types of authentication that clients associated with this Client Connection Policy will be allowed to
     * request.
     */
    allowedAuthTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OIDs of the extended operations that clients associated with this Client Connection Policy will be allowed
     * to request.
     */
    allowedExtendedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the types of filter components that may be included in search requests from clients associated with this
     * Client Connection Policy which have a non-baseObject scope.
     */
    allowedFilterTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the types of operations that clients associated with this Client Connection Policy will be allowed to request.
     */
    allowedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OIDs of the controls that clients associated with this Client Connection Policy will be allowed to include
     * in requests.
     */
    allowedRequestControls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the SASL mechanisms that clients associated with this Client Connection Policy will be allowed to
     * request.
     */
    allowedSaslMechanisms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a set of connection criteria that must match the associated client connection for it to be associated with
     * this Client Connection Policy.
     */
    connectionCriteria?: pulumi.Input<string>;
    /**
     * Specifies the behavior that the Directory Server should exhibit if a client connection attempts to exceed a rate defined
     * in the maximum-connection-operation-rate property. If the configured behavior is one that will reject requested
     * operations, then that behavior will persist until the end of the corresponding interval. The server will resume allowing
     * that client to perform operations when that interval expires, as long as no other operation rate limits have been
     * exceeded.
     */
    connectionOperationRateExceededBehavior?: pulumi.Input<string>;
    /**
     * Specifies the OIDs of the extended operations that clients associated with this Client Connection Policy will not be
     * allowed to request.
     */
    deniedExtendedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the OIDs of the controls that clients associated with this Client Connection Policy will not be allowed to
     * include in requests.
     */
    deniedRequestControls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the names of the SASL mechanisms that clients associated with this Client Connection Policy will not be
     * allowed to request.
     */
    deniedSaslMechanisms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for this Client Connection Policy
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether this Client Connection Policy is enabled for use in the server. If a Client Connection Policy is
     * disabled, then no new client connections will be associated with it.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the order in which Client Connection Policy definitions will be evaluated. A Client Connection Policy with a
     * lower index will be evaluated before one with a higher index, and the first Client Connection Policy evaluated which may
     * apply to a client connection will be used for that connection. Each Client Connection Policy must be assigned a unique
     * evaluation order index value.
     */
    evaluationOrderIndex?: pulumi.Input<number>;
    /**
     * Specifies the set of global sensitive attribute definitions that should not apply to this client connection policy.
     */
    excludeGlobalSensitiveAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the set of backend base DNs for which subtree views should be excluded from this Client Connection Policy.
     */
    excludedBackendBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the set of backend base DNs for which subtree views should be included in this Client Connection Policy.
     */
    includedBackendBaseDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum number of client connections which may be associated with this Client Connection Policy at any
     * given time.
     */
    maximumConcurrentConnections?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that the server should wait for an outstanding operation to complete before
     * rejecting a new request received when the maximum number of outstanding operations are already in progress on that
     * connection. If an existing outstanding operation on the connection completes before this time, then the operation will
     * be processed. Otherwise, the operation will be rejected with a "busy" result.
     */
    maximumConcurrentOperationWaitTimeBeforeRejecting?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of concurrent operations that can be in progress for any connection. This can help prevent
     * a single client connection from monopolizing server processing resources by sending a large number of concurrent
     * asynchronous requests. A value of zero indicates that no limit will be placed on the number of concurrent requests for a
     * single client.
     */
    maximumConcurrentOperationsPerConnection?: pulumi.Input<number>;
    /**
     * Specifies the behavior that the Directory Server should exhibit if a client attempts to invoke more concurrent
     * operations on a single connection than allowed by the maximum-concurrent-operations-per-connection property.
     */
    maximumConcurrentOperationsPerConnectionExceededBehavior?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that a connection associated with this Client Connection Policy may be established.
     * Any connection which is associated with this Client Connection Policy and has been established for longer than this
     * period of time may be terminated.
     */
    maximumConnectionDuration?: pulumi.Input<string>;
    /**
     * Specifies the maximum rate at which a client associated with this Client Connection Policy may issue requests to the
     * Directory Server. If any client attempts to request operations at a rate higher than this limit, then the server will
     * exhibit the behavior described in the connection-operation-rate-exceeded-behavior property.
     */
    maximumConnectionOperationRates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum length of time that a connection associated with this Client Connection Policy may remain
     * established after the completion of the last operation processed on that connection. Any new operation requested on the
     * connection will reset this timer. Any connection associated with this Client Connection Policy which has been idle for
     * longer than this length of time may be terminated.
     */
    maximumIdleConnectionDuration?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of entries that may be joined with any single search result entry for a search request
     * performed by a client associated with this Client Connection Policy.
     */
    maximumLdapJoinSizeLimit?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of operations that may be requested by any client connection associated with this Client
     * Connection Policy. If an attempt is made to process more than this number of operations on a client connection, then
     * that connection will be terminated.
     */
    maximumOperationCountPerConnection?: pulumi.Input<number>;
    /**
     * Specifies the maximum rate at which all clients associated with this Client Connection Policy, as a collective set, may
     * issue requests to the Directory Server. If this limit is exceeded, then the server will exhibit the behavior described
     * in the policy-operation-rate-exceeded-behavior property.
     */
    maximumPolicyOperationRates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the maximum number of entries that may be examined by a backend in the course of processing a search requested
     * by clients associated with this Client Connection Policy.
     */
    maximumSearchLookthroughLimit?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of entries that may be returned for a search performed by a client associated with this
     * Client Connection Policy.
     */
    maximumSearchSizeLimit?: pulumi.Input<number>;
    /**
     * Specifies the maximum length of time that the server should spend processing search operations requested by clients
     * associated with this Client Connection Policy.
     */
    maximumSearchTimeLimit?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of entries that the server will attempt to sort without the benefit of a VLV index. A value
     * of zero indicates that no limit should be enforced.
     */
    maximumSortSizeLimitWithoutVlvIndex?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of consecutive bytes that must be present in any subInitial, subAny, or subFinal element of
     * a substring filter component (i.e., the minimum number of consecutive bytes between wildcard characters in a substring
     * filter). Any attempt to use a substring search with an element containing fewer than this number of bytes will be
     * rejected.
     */
    minimumSubstringLength?: pulumi.Input<number>;
    /**
     * Specifies a name which uniquely identifies this Client Connection Policy in the server.
     */
    policyId: pulumi.Input<string>;
    /**
     * Specifies the behavior that the Directory Server should exhibit if a client connection attempts to exceed a rate defined
     * in the maximum-policy-operation-rate property. If the configured behavior is one that will reject requested operations,
     * then that behavior will persist until the end of the corresponding interval. The server will resume allowing clients
     * associated with this Client Connection Policy to perform operations when that interval expires, as long as no other
     * operation rate limits have been exceeded.
     */
    policyOperationRateExceededBehavior?: pulumi.Input<string>;
    /**
     * Specifies a request criteria object that must not match any requests submitted by clients associated with this Client
     * Connection Policy. If a client submits a request that satisfies this request criteria object, then that request will be
     * rejected.
     */
    prohibitedOperationRequestCriteria?: pulumi.Input<string>;
    /**
     * Specifies a request criteria object that will be required to match all requests submitted by clients associated with
     * this Client Connection Policy. If a client submits a request that does not satisfy this request criteria object, then
     * that request will be rejected.
     */
    requiredOperationRequestCriteria?: pulumi.Input<string>;
    /**
     * Specifies the result code map that should be used for clients associated with this Client Connection Policy. If a value
     * is defined for this property, then it will override any result code map referenced in the global configuration.
     */
    resultCodeMap?: pulumi.Input<string>;
    /**
     * Provides the ability to indicate that some attributes should be considered sensitive and additional protection should be
     * in place when interacting with those attributes.
     */
    sensitiveAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether any client connection for which this Client Connection Policy is selected should be terminated. This
     * makes it possible to define fine-grained criteria for clients that should not be allowed to connect to this Directory
     * Server.
     */
    terminateConnection?: pulumi.Input<boolean>;
}
