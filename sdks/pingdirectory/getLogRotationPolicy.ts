// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLogRotationPolicy(args: GetLogRotationPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetLogRotationPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getLogRotationPolicy:getLogRotationPolicy", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLogRotationPolicy.
 */
export interface GetLogRotationPolicyArgs {
    name: string;
}

/**
 * A collection of values returned by getLogRotationPolicy.
 */
export interface GetLogRotationPolicyResult {
    readonly description: string;
    readonly fileSizeLimit: string;
    readonly id: string;
    readonly name: string;
    readonly rotationInterval: string;
    readonly timeOfDays: string[];
    readonly type: string;
}
export function getLogRotationPolicyOutput(args: GetLogRotationPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLogRotationPolicyResult> {
    return pulumi.output(args).apply((a: any) => getLogRotationPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getLogRotationPolicy.
 */
export interface GetLogRotationPolicyOutputArgs {
    name: pulumi.Input<string>;
}
