// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultWorkQueue extends pulumi.CustomResource {
    /**
     * Get an existing DefaultWorkQueue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultWorkQueueState, opts?: pulumi.CustomResourceOptions): DefaultWorkQueue {
        return new DefaultWorkQueue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingdirectory:index/defaultWorkQueue:DefaultWorkQueue';

    /**
     * Returns true if the given object is an instance of DefaultWorkQueue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultWorkQueue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultWorkQueue.__pulumiType;
    }

    /**
     * The interval that the work queue should use when checking for potentially expensive operations. If at least
     * expensive-operation-minimum-concurrent-count worker threads are found to be processing the same operation on two
     * consecutive polls separated by this time interval (i.e., the worker thread has been processing that operation for at
     * least this length of time, and potentially up to twice this length of time), then a stack trace of all running threads
     * will be written to a file for analysis to provide potentially useful information that may help better understand the
     * reason it is taking so long. It may be that the operation is simply an expensive one to process, but there may be other
     * external factors (e.g., a database checkpoint, a log rotation, lock contention, etc.) that could be to blame. This
     * option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity
     * support.
     */
    public readonly expensiveOperationCheckInterval!: pulumi.Output<string>;
    /**
     * The minimum number of concurrent expensive operations that should be detected to trigger dumping stack traces for all
     * threads. If at least this number of worker threads are seen processing the same operations in two consecutive intervals,
     * then the server will dump a stack trace of all threads to a file. This option is primarily intended for debugging
     * purposes and should generally be used under the direction of Ping Identity support.
     */
    public readonly expensiveOperationMinimumConcurrentCount!: pulumi.Output<number>;
    /**
     * The minimum length of time that should be required to pass after dumping stack trace information for all threads before
     * the server should be allowed to create a second dump. This will help prevent the server from dumping stack traces too
     * frequently and eventually consuming all available disk space with stack trace log output. This option is primarily
     * intended for debugging purposes and should generally be used under the direction of Ping Identity support.
     */
    public readonly expensiveOperationMinimumDumpInterval!: pulumi.Output<string>;
    /**
     * Specifies the maximum length of time that the connection handler should be allowed to wait to enqueue a request if the
     * work queue is full. If the attempt to enqueue an operation does not succeed within this period of time, then the
     * operation will be rejected and an error response will be returned to the client. A value of zero indicates that
     * operations should be rejected immediately if the work queue is already at its maximum capacity.
     */
    public readonly maxOfferTime!: pulumi.Output<string>;
    /**
     * Specifies the maximum length of time that an operation should be allowed to wait on the work queue. If an operation has
     * been waiting on the queue longer than this period of time, then it will receive an immediate failure result rather than
     * being processed once it has been handed off to a worker thread. A value of zero seconds indicates that there should not
     * be any maximum queue time imposed. This setting will only be used if the monitor-queue-time property has a value of
     * true.
     */
    public readonly maxQueueTime!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of pending operations that may be held in any of the queues at any given time. The total
     * number of pending requests may be as large as this value times the total number of queues.
     */
    public readonly maxWorkQueueCapacity!: pulumi.Output<number>;
    /**
     * Indicates whether the work queue should monitor the length of time that operations are held in the queue. When enabled
     * the queue time will be included with access log messages as "qtime" in milliseconds.
     */
    public readonly monitorQueueTime!: pulumi.Output<boolean>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    /**
     * Specifies the number of worker threads that should be used to process operations as part of an administrative session.
     * These threads may be reserved only for special use by management applications like dsconfig, the administration console,
     * and other administrative tools, so that these applications may be used to diagnose problems and take any necessary
     * corrective action even if all "normal" worker threads are busy processing other requests.
     */
    public readonly numAdministrativeSessionWorkerThreads!: pulumi.Output<number>;
    /**
     * Specifies the number of blocking queues that should be maintained. A value of zero indicates that the server should
     * attempt to automatically select an optimal value (one queue for every two worker threads).
     */
    public readonly numQueues!: pulumi.Output<number>;
    /**
     * Specifies the total number of worker threads that should be used within the server in order to process requested
     * operations. The worker threads will be split evenly across all of the configured queues.
     */
    public readonly numWorkerThreads!: pulumi.Output<number>;
    /**
     * Specifies the number of blocking queues that should be maintained for write operations. This will only be used if a
     * value is specified for the num-write-worker-threads property, in which case the num-queues property will specify the
     * number of queues for read operations. Otherwise, all operations will be processed by a common set of worker threads and
     * the value of the num-queues property will specify the number of queues for all types of operations.
     */
    public readonly numWriteQueues!: pulumi.Output<number>;
    /**
     * Specifies the number of worker threads that should be used within the server to process write (add, delete, modify, and
     * modify DN) operations. If this is specified, then separate sets of worker threads will be used for processing read and
     * write operations, and the value of the num-worker-threads property will reflect the number of threads to use to process
     * read operations.
     */
    public readonly numWriteWorkerThreads!: pulumi.Output<number>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    public /*out*/ readonly requiredActions!: pulumi.Output<outputs.DefaultWorkQueueRequiredAction[]>;
    /**
     * The type of Work Queue resource. Options are ['high-throughput']
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DefaultWorkQueue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DefaultWorkQueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultWorkQueueArgs | DefaultWorkQueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultWorkQueueState | undefined;
            resourceInputs["expensiveOperationCheckInterval"] = state ? state.expensiveOperationCheckInterval : undefined;
            resourceInputs["expensiveOperationMinimumConcurrentCount"] = state ? state.expensiveOperationMinimumConcurrentCount : undefined;
            resourceInputs["expensiveOperationMinimumDumpInterval"] = state ? state.expensiveOperationMinimumDumpInterval : undefined;
            resourceInputs["maxOfferTime"] = state ? state.maxOfferTime : undefined;
            resourceInputs["maxQueueTime"] = state ? state.maxQueueTime : undefined;
            resourceInputs["maxWorkQueueCapacity"] = state ? state.maxWorkQueueCapacity : undefined;
            resourceInputs["monitorQueueTime"] = state ? state.monitorQueueTime : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["numAdministrativeSessionWorkerThreads"] = state ? state.numAdministrativeSessionWorkerThreads : undefined;
            resourceInputs["numQueues"] = state ? state.numQueues : undefined;
            resourceInputs["numWorkerThreads"] = state ? state.numWorkerThreads : undefined;
            resourceInputs["numWriteQueues"] = state ? state.numWriteQueues : undefined;
            resourceInputs["numWriteWorkerThreads"] = state ? state.numWriteWorkerThreads : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DefaultWorkQueueArgs | undefined;
            resourceInputs["expensiveOperationCheckInterval"] = args ? args.expensiveOperationCheckInterval : undefined;
            resourceInputs["expensiveOperationMinimumConcurrentCount"] = args ? args.expensiveOperationMinimumConcurrentCount : undefined;
            resourceInputs["expensiveOperationMinimumDumpInterval"] = args ? args.expensiveOperationMinimumDumpInterval : undefined;
            resourceInputs["maxOfferTime"] = args ? args.maxOfferTime : undefined;
            resourceInputs["maxQueueTime"] = args ? args.maxQueueTime : undefined;
            resourceInputs["maxWorkQueueCapacity"] = args ? args.maxWorkQueueCapacity : undefined;
            resourceInputs["monitorQueueTime"] = args ? args.monitorQueueTime : undefined;
            resourceInputs["numAdministrativeSessionWorkerThreads"] = args ? args.numAdministrativeSessionWorkerThreads : undefined;
            resourceInputs["numQueues"] = args ? args.numQueues : undefined;
            resourceInputs["numWorkerThreads"] = args ? args.numWorkerThreads : undefined;
            resourceInputs["numWriteQueues"] = args ? args.numWriteQueues : undefined;
            resourceInputs["numWriteWorkerThreads"] = args ? args.numWriteWorkerThreads : undefined;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["requiredActions"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultWorkQueue.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultWorkQueue resources.
 */
export interface DefaultWorkQueueState {
    /**
     * The interval that the work queue should use when checking for potentially expensive operations. If at least
     * expensive-operation-minimum-concurrent-count worker threads are found to be processing the same operation on two
     * consecutive polls separated by this time interval (i.e., the worker thread has been processing that operation for at
     * least this length of time, and potentially up to twice this length of time), then a stack trace of all running threads
     * will be written to a file for analysis to provide potentially useful information that may help better understand the
     * reason it is taking so long. It may be that the operation is simply an expensive one to process, but there may be other
     * external factors (e.g., a database checkpoint, a log rotation, lock contention, etc.) that could be to blame. This
     * option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity
     * support.
     */
    expensiveOperationCheckInterval?: pulumi.Input<string>;
    /**
     * The minimum number of concurrent expensive operations that should be detected to trigger dumping stack traces for all
     * threads. If at least this number of worker threads are seen processing the same operations in two consecutive intervals,
     * then the server will dump a stack trace of all threads to a file. This option is primarily intended for debugging
     * purposes and should generally be used under the direction of Ping Identity support.
     */
    expensiveOperationMinimumConcurrentCount?: pulumi.Input<number>;
    /**
     * The minimum length of time that should be required to pass after dumping stack trace information for all threads before
     * the server should be allowed to create a second dump. This will help prevent the server from dumping stack traces too
     * frequently and eventually consuming all available disk space with stack trace log output. This option is primarily
     * intended for debugging purposes and should generally be used under the direction of Ping Identity support.
     */
    expensiveOperationMinimumDumpInterval?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that the connection handler should be allowed to wait to enqueue a request if the
     * work queue is full. If the attempt to enqueue an operation does not succeed within this period of time, then the
     * operation will be rejected and an error response will be returned to the client. A value of zero indicates that
     * operations should be rejected immediately if the work queue is already at its maximum capacity.
     */
    maxOfferTime?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that an operation should be allowed to wait on the work queue. If an operation has
     * been waiting on the queue longer than this period of time, then it will receive an immediate failure result rather than
     * being processed once it has been handed off to a worker thread. A value of zero seconds indicates that there should not
     * be any maximum queue time imposed. This setting will only be used if the monitor-queue-time property has a value of
     * true.
     */
    maxQueueTime?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of pending operations that may be held in any of the queues at any given time. The total
     * number of pending requests may be as large as this value times the total number of queues.
     */
    maxWorkQueueCapacity?: pulumi.Input<number>;
    /**
     * Indicates whether the work queue should monitor the length of time that operations are held in the queue. When enabled
     * the queue time will be included with access log messages as "qtime" in milliseconds.
     */
    monitorQueueTime?: pulumi.Input<boolean>;
    /**
     * Notifications returned by the PingDirectory Configuration API.
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the number of worker threads that should be used to process operations as part of an administrative session.
     * These threads may be reserved only for special use by management applications like dsconfig, the administration console,
     * and other administrative tools, so that these applications may be used to diagnose problems and take any necessary
     * corrective action even if all "normal" worker threads are busy processing other requests.
     */
    numAdministrativeSessionWorkerThreads?: pulumi.Input<number>;
    /**
     * Specifies the number of blocking queues that should be maintained. A value of zero indicates that the server should
     * attempt to automatically select an optimal value (one queue for every two worker threads).
     */
    numQueues?: pulumi.Input<number>;
    /**
     * Specifies the total number of worker threads that should be used within the server in order to process requested
     * operations. The worker threads will be split evenly across all of the configured queues.
     */
    numWorkerThreads?: pulumi.Input<number>;
    /**
     * Specifies the number of blocking queues that should be maintained for write operations. This will only be used if a
     * value is specified for the num-write-worker-threads property, in which case the num-queues property will specify the
     * number of queues for read operations. Otherwise, all operations will be processed by a common set of worker threads and
     * the value of the num-queues property will specify the number of queues for all types of operations.
     */
    numWriteQueues?: pulumi.Input<number>;
    /**
     * Specifies the number of worker threads that should be used within the server to process write (add, delete, modify, and
     * modify DN) operations. If this is specified, then separate sets of worker threads will be used for processing read and
     * write operations, and the value of the num-worker-threads property will reflect the number of threads to use to process
     * read operations.
     */
    numWriteWorkerThreads?: pulumi.Input<number>;
    /**
     * Required actions returned by the PingDirectory Configuration API.
     */
    requiredActions?: pulumi.Input<pulumi.Input<inputs.DefaultWorkQueueRequiredAction>[]>;
    /**
     * The type of Work Queue resource. Options are ['high-throughput']
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultWorkQueue resource.
 */
export interface DefaultWorkQueueArgs {
    /**
     * The interval that the work queue should use when checking for potentially expensive operations. If at least
     * expensive-operation-minimum-concurrent-count worker threads are found to be processing the same operation on two
     * consecutive polls separated by this time interval (i.e., the worker thread has been processing that operation for at
     * least this length of time, and potentially up to twice this length of time), then a stack trace of all running threads
     * will be written to a file for analysis to provide potentially useful information that may help better understand the
     * reason it is taking so long. It may be that the operation is simply an expensive one to process, but there may be other
     * external factors (e.g., a database checkpoint, a log rotation, lock contention, etc.) that could be to blame. This
     * option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity
     * support.
     */
    expensiveOperationCheckInterval?: pulumi.Input<string>;
    /**
     * The minimum number of concurrent expensive operations that should be detected to trigger dumping stack traces for all
     * threads. If at least this number of worker threads are seen processing the same operations in two consecutive intervals,
     * then the server will dump a stack trace of all threads to a file. This option is primarily intended for debugging
     * purposes and should generally be used under the direction of Ping Identity support.
     */
    expensiveOperationMinimumConcurrentCount?: pulumi.Input<number>;
    /**
     * The minimum length of time that should be required to pass after dumping stack trace information for all threads before
     * the server should be allowed to create a second dump. This will help prevent the server from dumping stack traces too
     * frequently and eventually consuming all available disk space with stack trace log output. This option is primarily
     * intended for debugging purposes and should generally be used under the direction of Ping Identity support.
     */
    expensiveOperationMinimumDumpInterval?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that the connection handler should be allowed to wait to enqueue a request if the
     * work queue is full. If the attempt to enqueue an operation does not succeed within this period of time, then the
     * operation will be rejected and an error response will be returned to the client. A value of zero indicates that
     * operations should be rejected immediately if the work queue is already at its maximum capacity.
     */
    maxOfferTime?: pulumi.Input<string>;
    /**
     * Specifies the maximum length of time that an operation should be allowed to wait on the work queue. If an operation has
     * been waiting on the queue longer than this period of time, then it will receive an immediate failure result rather than
     * being processed once it has been handed off to a worker thread. A value of zero seconds indicates that there should not
     * be any maximum queue time imposed. This setting will only be used if the monitor-queue-time property has a value of
     * true.
     */
    maxQueueTime?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of pending operations that may be held in any of the queues at any given time. The total
     * number of pending requests may be as large as this value times the total number of queues.
     */
    maxWorkQueueCapacity?: pulumi.Input<number>;
    /**
     * Indicates whether the work queue should monitor the length of time that operations are held in the queue. When enabled
     * the queue time will be included with access log messages as "qtime" in milliseconds.
     */
    monitorQueueTime?: pulumi.Input<boolean>;
    /**
     * Specifies the number of worker threads that should be used to process operations as part of an administrative session.
     * These threads may be reserved only for special use by management applications like dsconfig, the administration console,
     * and other administrative tools, so that these applications may be used to diagnose problems and take any necessary
     * corrective action even if all "normal" worker threads are busy processing other requests.
     */
    numAdministrativeSessionWorkerThreads?: pulumi.Input<number>;
    /**
     * Specifies the number of blocking queues that should be maintained. A value of zero indicates that the server should
     * attempt to automatically select an optimal value (one queue for every two worker threads).
     */
    numQueues?: pulumi.Input<number>;
    /**
     * Specifies the total number of worker threads that should be used within the server in order to process requested
     * operations. The worker threads will be split evenly across all of the configured queues.
     */
    numWorkerThreads?: pulumi.Input<number>;
    /**
     * Specifies the number of blocking queues that should be maintained for write operations. This will only be used if a
     * value is specified for the num-write-worker-threads property, in which case the num-queues property will specify the
     * number of queues for read operations. Otherwise, all operations will be processed by a common set of worker threads and
     * the value of the num-queues property will specify the number of queues for all types of operations.
     */
    numWriteQueues?: pulumi.Input<number>;
    /**
     * Specifies the number of worker threads that should be used within the server to process write (add, delete, modify, and
     * modify DN) operations. If this is specified, then separate sets of worker threads will be used for processing read and
     * write operations, and the value of the num-worker-threads property will reflect the number of threads to use to process
     * read operations.
     */
    numWriteWorkerThreads?: pulumi.Input<number>;
}
