// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPasswordStorageScheme(args: GetPasswordStorageSchemeArgs, opts?: pulumi.InvokeOptions): Promise<GetPasswordStorageSchemeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingdirectory:index/getPasswordStorageScheme:getPasswordStorageScheme", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPasswordStorageScheme.
 */
export interface GetPasswordStorageSchemeArgs {
    name: string;
}

/**
 * A collection of values returned by getPasswordStorageScheme.
 */
export interface GetPasswordStorageSchemeResult {
    readonly awsExternalServer: string;
    readonly azureAuthenticationMethod: string;
    readonly bcryptCostFactor: number;
    readonly conjurExternalServer: string;
    readonly defaultField: string;
    readonly derivedKeyLengthBytes: number;
    readonly description: string;
    readonly digestAlgorithm: string;
    readonly enabled: boolean;
    readonly encryptionSettingsDefinitionId: string;
    readonly extensionArguments: string[];
    readonly extensionClass: string;
    readonly httpProxyExternalServer: string;
    readonly id: string;
    readonly iterationCount: number;
    readonly keyVaultUri: string;
    readonly maxPasswordLength: number;
    readonly memoryUsageKb: number;
    readonly name: string;
    readonly numDigestRounds: number;
    readonly parallelismFactor: number;
    readonly passwordEncodingMechanism: string;
    readonly saltLengthBytes: number;
    readonly scryptBlockSize: number;
    readonly scryptCpuMemoryCostFactorExponent: number;
    readonly scryptParallelizationParameter: number;
    readonly type: string;
    readonly vaultExternalServer: string;
}
export function getPasswordStorageSchemeOutput(args: GetPasswordStorageSchemeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPasswordStorageSchemeResult> {
    return pulumi.output(args).apply((a: any) => getPasswordStorageScheme(a, opts))
}

/**
 * A collection of arguments for invoking getPasswordStorageScheme.
 */
export interface GetPasswordStorageSchemeOutputArgs {
    name: pulumi.Input<string>;
}
